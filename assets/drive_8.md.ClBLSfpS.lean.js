import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as w,e as v,q as k}from"./chunks/framework.B1z0IdBH.js";const x={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function A(r,e,l,m,s,a){return n(),i("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const C=h(x,[["render",A],["__scopeId","data-v-17645ff6"]]),R=JSON.parse('[{"question":"Write a function that takes an array of integers and an integer `k`, and returns the length of the longest subarray that contains exactly `k` different integers. If there is no such subarray, return 0. The function should handle edge cases where the array is empty or where `k` is zero or exceeds the number of unique integers in the array. The solution should aim to have an optimal time complexity, ideally O(n).","solution":"def longest_subarray_with_k_distinct(nums, k): Returns the length of the longest subarray with exactly k distinct integers. from collections import defaultdict if not nums or k == 0 or k > len(set(nums)): return 0 max_length = 0 left = 0 freq = defaultdict(int) distinct_count = 0 for right in range(len(nums)): if freq[nums[right]] == 0: distinct_count += 1 freq[nums[right]] += 1 while distinct_count > k: freq[nums[left]] -= 1 if freq[nums[left]] == 0: distinct_count -= 1 left += 1 if distinct_count == k: max_length = max(max_length, right - left + 1) return max_length"},{"question":"設計一個函數，用於反轉文本字符串列表中的每個單詞，同時保持整體字符串的順序不變。例如，給定列表 [\\"這是\\", \\"一次編程\\", \\"測試\\"]，函數應返回 [\\"是這\\", \\"程編次一\\", \\"試測\\"]。請注意，不能使用內建的反轉函數。","solution":"def reverse_words_in_list(str_list): Reverses each word in the list of strings, keeping the overall string order unchanged. Parameters: str_list (list of str): List of strings to be processed. Returns: list of str: List with each word reversed. def reverse_word(word): # Create a new reversed word manually reversed_word = \\"\\" for char in word: reversed_word = char + reversed_word return reversed_word return [reverse_word(word) for word in str_list]"},{"question":"You are working on a Python project where you need to manage a collection of books in a library. Each book has attributes such as title, author, and year of publication. You are already familiar with creating classes and instance methods, but you are not sure when and how to use class methods in Python effectively. Create a class `LibraryBook` that uses class methods to keep track of all the books created. Additionally, implement a method to get the total number of books and a method to find a book by its title. Requirements: 1. Implement a `LibraryBook` class with the following attributes: title, author, year. 2. Include a class attribute to store all the book instances. 3. Create a class method to add a new book to the collection. 4. Implement a class method to get the total number of books in the collection. 5. Create a class method to find a book by its title. Demonstrate the usage of the `LibraryBook` class by adding a few book instances and calling the created class methods. Example usage: ```python book1 = LibraryBook.add_book(\'1984\', \'George Orwell\', 1949) book2 = LibraryBook.add_book(\'To Kill a Mockingbird\', \'Harper Lee\', 1960) print(LibraryBook.get_total_books()) # Output: 2 found_book = LibraryBook.find_book_by_title(\'1984\') if found_book: print(f\'Found book: {found_book.title} by {found_book.author}\') ``` Ensure your implementation correctly follows the concept of class methods and proper Python conventions.","solution":"class LibraryBook: A class to represent a book in a library. all_books = [] def __init__(self, title, author, year): self.title = title self.author = author self.year = year @classmethod def add_book(cls, title, author, year): Class method to add a new book to the collection. new_book = cls(title, author, year) cls.all_books.append(new_book) return new_book @classmethod def get_total_books(cls): Class method to get the total number of books in the collection. return len(cls.all_books) @classmethod def find_book_by_title(cls, title): Class method to find a book by its title from the collection. for book in cls.all_books: if book.title == title: return book return None # Demonstrate the usage of the LibraryBook class book1 = LibraryBook.add_book(\'1984\', \'George Orwell\', 1949) book2 = LibraryBook.add_book(\'To Kill a Mockingbird\', \'Harper Lee\', 1960) print(LibraryBook.get_total_books()) # Output: 2 found_book = LibraryBook.find_book_by_title(\'1984\') if found_book: print(f\'Found book: {found_book.title} by {found_book.author}\') # Output: Found book: 1984 by George Orwell"},{"question":"Write a program that takes a list of integers and returns a new list where each element is the square of the original list element if it is even, and the cube if it is odd. Your solution should handle edge cases like empty lists gracefully and ensure that the output list maintains the same order as the input list. Provide code and a brief explanation of your approach.","solution":"def transform_list(numbers): Takes a list of integers and returns a new list where: - each even number is squared - each odd number is cubed return [x**2 if x % 2 == 0 else x**3 for x in numbers]"},{"question":"Develop a program that takes as input a list of cities with their respective coordinates and returns the shortest route that visits each city exactly once, starting and ending at the same city (solving the Traveling Salesman Problem). The program must implement a heuristic or approximate algorithm for solving the problem, such as the nearest neighbor or genetic algorithm approach, due to the NP-hard nature of the problem. The output should include the sequence of cities in the order they are visited along with the total distance traveled. Make sure to include comments to explain the logic of your algorithm and handle any potential edge cases, such as all cities being collinear or only one city being provided.","solution":"import itertools import math def euclidean_distance(coord1, coord2): return math.sqrt((coord1[0] - coord2[0]) ** 2 + (coord1[1] - coord2[1]) ** 2) def nearest_neighbor_algorithm(cities): if len(cities) <= 1: return cities, 0 start = cities[0] unvisited = cities[:] visited = [start] unvisited.remove(start) total_distance = 0 current_city = start while unvisited: nearest_city = min(unvisited, key=lambda city: euclidean_distance(current_city[1], city[1])) total_distance += euclidean_distance(current_city[1], nearest_city[1]) current_city = nearest_city visited.append(current_city) unvisited.remove(current_city) total_distance += euclidean_distance(current_city[1], start[1]) # return back to start visited.append(start) return visited, total_distance"},{"question":"Create a Python function `shift_elements` which takes an integer list and an integer `k` and returns a new list where each element is shifted to the right by `k` positions. If the shift leads to the end of the list, it should wrap around to the beginning. The input list should remain unchanged. Function Signature: ```python def shift_elements(lst: List[int], k: int) -> List[int]: ``` **Example:** ```python shift_elements([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] shift_elements([10, 20, 30, 40], 1) -> [40, 10, 20, 30] shift_elements([7, 8, 9], 4) -> [9, 7, 8] ``` **Constraints:** - The list can be empty or have up to `10^5` elements. - The value of `k` can be any non-negative integer, potentially larger than the length of the list. - Ensure your solution has a time complexity of O(n), where n is the length of the list.","solution":"from typing import List def shift_elements(lst: List[int], k: int) -> List[int]: Returns a new list where each element of the given list is shifted to the right by k positions. If the shift leads to the end of the list, it wraps around to the beginning. if not lst: return [] n = len(lst) k = k % n # To avoid unnecessary full cycle shifts return lst[-k:] + lst[:-k]"},{"question":"A company produces toys with different dimensions. You\'re tasked with writing a Python function that takes a list of dimensions (each as a tuple of length, width, and height) and returns the total volume of all toys. Each dimension is guaranteed to be a positive integer. Implement the function `total_volume(dimensions: List[Tuple[int, int, int]]) -> int`. For example, if the input list is `[(2, 3, 4), (1, 2, 1)]`, the function should return `26` because the volume of the first toy is `2 * 3 * 4 = 24` and the volume of the second toy is `1 * 2 * 1 = 2`, and their total volume is `24 + 2 = 26`.","solution":"from typing import List, Tuple def total_volume(dimensions: List[Tuple[int, int, int]]) -> int: Returns the total volume of all toys given their dimensions. Parameters: dimensions (List[Tuple[int, int, int]]): A list of dimensions where each tuple contains length, width, and height of a toy. Returns: int: The total volume of all toys. total = 0 for length, width, height in dimensions: total += length * width * height return total"},{"question":"You are given an integer array and an integer target. Write a function that returns all unique combinations of elements within the array that sum up exactly to the target. Each number in the array may only be used once in the combination. The solution set must not contain duplicate combinations. Example: Input: array = [10,1,2,7,6,1,5], target = 8 Output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] Note: All numbers (including target) will be positive integers. The array may contain duplicates, and the combinations themselves should be returned in any order.","solution":"def combination_sum_2(candidates, target): def backtrack(start, end, temp_list): if sum(temp_list) == target: if temp_list not in result: result.append(list(temp_list)) return if sum(temp_list) > target: return for i in range(start, end): if i > start and candidates[i] == candidates[i - 1]: continue temp_list.append(candidates[i]) backtrack(i + 1, end, temp_list) temp_list.pop() candidates.sort() result = [] backtrack(0, len(candidates), []) return result"},{"question":"Create a Python function that takes an integer `n` and returns a list of the first `n` prime numbers. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself. Additionally, write another function that receives the list of prime numbers and an integer `k`, and returns the `k-th` prime number in the list. If `k` is out of range, it should return an appropriate error message. For both functions, consider the efficiency of your implementations, especially for large values of `n`. Example: For `n = 10`, the first function should return `[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]`.","solution":"def generate_primes(n): if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for p in primes: if p * p > candidate: break if candidate % p == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes def get_kth_prime(primes, k): if k <= 0 or k > len(primes): return \\"Error: k is out of range\\" return primes[k-1]"},{"question":"You are given a list of strings representing rows of a matrix. Your task is to determine if the matrix is horizontally symmetric. A matrix is considered horizontally symmetric if the first row is identical to the last row, the second row identical to the second last row, and so on. # Input - A list of strings, each representing a row of the matrix. - The number of rows will be between 1 and 500. - Each string will contain only lowercase English letters (\'a\' to \'z\') and will have a length between 1 and 500. # Output - Return `true` if the matrix is horizontally symmetric, otherwise return `false`. # Examples Example 1 Input: ```json [ \\"abc\\", \\"def\\", \\"abc\\" ] ``` Output: ```json true ``` Explanation: The first row and the last row are both \\"abc\\". The second row matches itself as it\'s the middle row in this case. Example 2 Input: ```json [ \\"abcd\\", \\"efgh\\", \\"ijkl\\", \\"mnop\\", \\"abcd\\" ] ``` Output: ```json false ``` Explanation: The first row is \\"abcd\\", and the last row is also \\"abcd\\". However, the second row (\\"efgh\\") and the second last row (\\"mnop\\") are different. Example 3 Input: ```json [ \\"abcd\\", \\"wxyz\\", \\"zyxw\\", \\"dcba\\" ] ``` Output: ```json true ``` Explanation: The first row \\"abcd\\" is the reverse of the last row \\"dcba\\". The second row \\"wxyz\\" is the reverse of the third row \\"zyxw\\".","solution":"def is_horizontally_symmetric(matrix): Checks if the given matrix is horizontally symmetric. Args: matrix (list of str): A list of strings representing rows of the matrix. Returns: bool: True if the matrix is horizontally symmetric, False otherwise. n = len(matrix) # Check each row with its corresponding symmetric row from the bottom for i in range(n // 2): if matrix[i] != matrix[n - 1 - i]: return False return True"},{"question":"Write a Python function that takes a string containing any characters and returns a new string that only includes the alphabetical characters from the original string, but in reversed order. Ensure the function is efficient in handling time and space complexity. The input string can contain upper-case letters, lower-case letters, digits, and special characters.","solution":"def reverse_alphabets_only(s): Returns a new string containing only the alphabetical characters from the original string, but in reversed order. return \'\'.join([char for char in s if char.isalpha()][::-1])"},{"question":"Design a function that determines if a given string is an anagram of another string. Your function should return `True` if the two strings are anagrams, and `False` otherwise. Ignore cases and any non-alphabet characters when evaluating the anagram status. def are_anagrams(str1, str2): # Your code here","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of each other, ignoring case and non-alphabet characters. Parameters: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: bool: True if the strings are anagrams of each other, False otherwise. import re str1_cleaned = re.sub(\'[^a-zA-Z]\', \'\', str1).lower() str2_cleaned = re.sub(\'[^a-zA-Z]\', \'\', str2).lower() return sorted(str1_cleaned) == sorted(str2_cleaned)"},{"question":"In Python, write a function called `remove_duplicates()` that takes in a list of integers and returns a new list with duplicates removed, preserving the order of the first occurrence of each element. Also, provide error handling to ensure that the function is accepting a list of integers only. Below is a starting code snippet. Correct any mistakes and complete the function to fulfil the requirements. ```python def remove_duplicates(num_list): result = [] for num in number_list: if num not in result: result.append(num) return reesult print(remove_duplicates([1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8, 9, 10])) ``` Ensure the function checks for the input type and only processes list inputs containing integers. For example, given the input `[1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 9, 10, 10]`, the function should return `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`. If the input is not a list of integers, the function should raise an appropriate error message.","solution":"def remove_duplicates(num_list): Removes duplicates from a list of integers, preserving order of first occurrences. Args: num_list (list): List of integers Returns: List of integers with duplicates removed Raises: TypeError: If input is not a list or contains non-integer values if not isinstance(num_list, list): raise TypeError(\\"Input should be a list\\") if not all(isinstance(num, int) for num in num_list): raise TypeError(\\"All elements in the list should be integers\\") result = [] for num in num_list: if num not in result: result.append(num) return result"},{"question":"Design a function that takes a string as an input and returns the most frequently occurring character in the string. If there is a tie, return the alphabetical character that comes first. Ignore spaces and consider uppercase and lowercase versions of characters as the same.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string. If there is a tie, returns the alphabetical character that comes first. Ignores spaces and treats uppercase and lowercase versions of characters as the same. from collections import Counter # Normalize the string: remove spaces and convert to lower case s = s.replace(\' \', \'\').lower() if not s: return None # Count character frequencies char_counts = Counter(s) # Find the most frequent character (alphabetically first in case of tie) most_frequent = min(char_counts.items(), key=lambda item: (-item[1], item[0])) return most_frequent[0]"},{"question":"Develop a function that analyses a specified sequence of integers and returns either a filtered list or a specific count: def evaluate_sequence(num_list): \'\'\' Given a list of integers, the function should return a list of unique prime numbers that are greater than 10. If there are no such prime numbers, it should return the count of all even numbers that are multiples of 3. Illustrations: evaluate_sequence([2, 3, 5, 7, 13, 19, 23]) ➞ [13, 19, 23] evaluate_sequence([6, 9, 12, 15, 18, 21]) ➞ 3 evaluate_sequence([4, 8, 10, 12, 14]) ➞ 2 \'\'\'","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def evaluate_sequence(num_list): Given a list of integers, the function returns a list of unique prime numbers that are greater than 10. If there are no such prime numbers, it returns the count of all even numbers that are multiples of 3. primes = [num for num in set(num_list) if num > 10 and is_prime(num)] if primes: return primes else: even_multiples_of_three_count = sum(1 for num in num_list if num % 6 == 0) return even_multiples_of_three_count"},{"question":"Design a function that recursively computes the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Ensure your function is efficient and avoids recalculating previously computed values.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using memoization to improve efficiency. if memo is None: memo = {} if n in memo: return memo[n] if n == 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a function `merge_sort_linked_list` that takes as input the head of a singly linked list and returns the head of the sorted linked list. Your task is to implement the merge sort algorithm for sorting the linked list. Merge sort is a divide-and-conquer algorithm that divides the unsorted list into two, recursively sorts each sublist, and then merges the two sorted sublists to produce the sorted list. # Function Signature ```python def merge_sort_linked_list(head: ListNode) -> ListNode: ``` # Input - `head (ListNode)`: The head of a singly linked list where each node contains an integer value. # Output - `ListNode`: The head of the sorted singly linked list. # Constraints - The linked list can have up to 10^5 nodes. - Each node in the linked list will have a value between -10^5 and 10^5. # Example ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next # Helper function to build a linked list from a list def build_linked_list(elements): head = ListNode(elements[0]) current = head for element in elements[1:]: current.next = ListNode(element) current = current.next return head # Helper function to print a linked list def print_linked_list(head): while head: print(head.val, end=\' -> \') head = head.next print(\'None\') # Example usage: head = build_linked_list([4, 2, 1, 3]) sorted_head = merge_sort_linked_list(head) print_linked_list(sorted_head) # Output: 1 -> 2 -> 3 -> 4 -> None ``` # Notes - You may define additional helper functions to facilitate the merge sort process. - Ensure your implementation is efficient and operates within the given constraints. - Include comments in your code to illustrate the main steps of the merge sort algorithm applied to the linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_sort_linked_list(head): if not head or not head.next: return head def find_middle(node): slow = node fast = node.next while fast and fast.next: slow = slow.next fast = fast.next.next return slow def merge(left, right): dummy = ListNode() tail = dummy while left and right: if left.val < right.val: tail.next = left left = left.next else: tail.next = right right = right.next tail = tail.next if left: tail.next = left if right: tail.next = right return dummy.next # Step 1: Find the middle point to split the list into two halves middle = find_middle(head) right_head = middle.next middle.next = None left_head = head # Step 2: Recursively sort the two halves left_sorted = merge_sort_linked_list(left_head) right_sorted = merge_sort_linked_list(right_head) # Step 3: Merge the two sorted halves return merge(left_sorted, right_sorted)"},{"question":"Write a Python function to merge two sorted lists into one sorted list without using any built-in or library function, and implement a time complexity of O(m + n) where m and n are the lengths of the two lists respectively. list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8]","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without using any built-in or library functions. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function in a language of your choice that takes a list of integer intervals, each represented as a tuple of two integers (start, end), and returns a new list where overlapping or contiguous intervals are merged. The intervals in the final list should be returned in the same form, as sorted tuples of two integers (start, end). Ensure that your algorithm efficiently handles cases with a large number of intervals and correctly processes intervals that overlap at the boundaries or are contiguous. Include test cases demonstrating the correct merging of intervals.","solution":"def merge_intervals(intervals): Merges overlapping or contiguous intervals. :param intervals: List of tuples, where each tuple contains two integers (start, end). :return: List of merged intervals. if not intervals: return [] # Sort the intervals based on the starting value intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if current[0] <= last[1]: # Overlapping or contiguous intervals merged[-1] = (last[0], max(last[1], current[1])) else: # Non-overlapping interval merged.append(current) return merged"},{"question":"Given a list of unsorted integers, write a function that finds the length of the longest consecutive elements sequence. Can you draw a parallel between storing a dataset efficiently and managing data sequences for optimized retrieval? Implement an efficient algorithm in your preferred programming language, and analyze its time and space complexity. Ensure your solution handles edge cases such as empty lists and lists with a single element.","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in an unsorted list. Parameters: nums (list): List of integers. Returns: int: Length of the longest consecutive sequence. if not nums: return 0 num_set = set(nums) longest_length = 0 for num in nums: if num - 1 not in num_set: # Starting point of a sequence current_length = 1 current_num = num while current_num + 1 in num_set: current_length += 1 current_num += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Write a Python function that takes a dictionary as input, where the keys are strings representing category names and the values are lists of integers. The function should return a new dictionary where each key is the category name and the value is the median of the integers in that category. Example input: { \\"category1\\": [1, 3, 2, 4, 5], \\"category2\\": [10, 8, 9], \\"category3\\": [7, 7, 8, 8, 7] } Expected output: { \\"category1\\": 3, \\"category2\\": 9, \\"category3\\": 7 }","solution":"import statistics def median_of_categories(input_dict): Returns a new dictionary where each key is the category name and the value is the median of the integers in that category. Params: input_dict (dict): Dictionary where the keys are category names (str) and the values are lists of integers. Returns: dict: New dictionary with category names as keys and median values as values. result = {} for category, numbers in input_dict.items(): if len(numbers) > 0: result[category] = statistics.median(numbers) else: result[category] = None # Handle empty lists if needed return result"},{"question":"Write a function in your programming language of choice that takes a list of integers and returns the list sorted in ascending order using the bubble sort algorithm. Additionally, provide a brief explanation of how the bubble sort algorithm works and its time complexity.","solution":"def bubble_sort(lst): Sorts a list of integers in ascending order using the bubble sort algorithm. Args: lst (list of int): The list of integers to sort. Returns: list of int: The sorted list in ascending order. n = len(lst) for i in range(n): # Track if any swap was made in this pass swapped = False for j in range(0, n - i - 1): if lst[j] > lst[j + 1]: # Swap if the element found is greater lst[j], lst[j + 1] = lst[j + 1], lst[j] swapped = True # If no two elements were swapped in the last pass, the list is sorted if not swapped: break return lst"},{"question":"Write a Python function that takes a string containing a sentence and returns the longest word present in the sentence. If there are multiple words with the same length, return the one that appears first. The function should ignore punctuation and handle both upper and lower case letters seamlessly. ```python sentence = \\"The quick brown fox jumps over the lazy dog.\\" ```","solution":"import re def longest_word(sentence): Returns the longest word in the given sentence. If multiple words have the same length, returns the one that appears first. Punctuation is ignored, and handling is case-insensitive. # Remove punctuation and split sentence into words words = re.findall(r\'bw+b\', sentence) # Initialize the longest word variable longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Design a function that takes a list of integers as input and returns a new list where each element in the original list is incremented by the index of that element. Ensure the function handles edge cases such as empty lists or lists with negative integers. Additionally, provide a piece of erroneous code that is intended to perform this operation but contains mistakes. Identify the mistake(s) and correct it appropriately: ```python def increment_by_index(WrongList): for i in range(len(WrongList)): WrongList[i] += i return WrongList print(increment_by_index([1, 2, 3])) ```","solution":"def increment_by_index(int_list): Given a list of integers, returns a new list where each element is incremented by the index of that element. Parameters: int_list (list): List of integers. Returns: list: New list with incremented values. return [value + idx for idx, value in enumerate(int_list)]"},{"question":"Write a function that takes as input a list of integers and returns a list of tuples, where each tuple contains two elements: the integer and its corresponding factorial. If the input list is empty, the function should return an empty list. Additionally, ensure that the function handles large integers efficiently. Example: ```python def factorial_tuples(int_list): # Your code here # Example Usage input_list = [0, 1, 2, 3, 4, 5] output = factorial_tuples(input_list) print(output) # Expected output: [(0, 1), (1, 1), (2, 2), (3, 6), (4, 24), (5, 120)] ```","solution":"from math import factorial def factorial_tuples(int_list): Returns a list of tuples, where each tuple contains an integer from the input list and its corresponding factorial. Args: int_list (list): A list of integers. Returns: list of tuples: Each tuple contains (integer, factorial of integer). return [(num, factorial(num)) for num in int_list]"},{"question":"Create a function `calculate_change` that takes in a list of integer prices of items and an integer amount of cash given. The function should return a dictionary of the minimum number of banknotes and coins required to give the exact change. Assume denominations in the system are 50, 20, 10, 5, 1 coins, and 25c, 10c, 5c, and 1c coins. If the amount of cash given is insufficient to cover the total price of items, the function should return a message indicating insufficient funds.","solution":"def calculate_change(prices, cash_given): Returns a dictionary of the minimum number of banknotes and coins required to give the exact change. If the cash given is insufficient to cover the total price of items, returns a message indicating insufficient funds. denominations = [50, 20, 10, 5, 1, 0.25, 0.10, 0.05, 0.01] total_price = sum(prices) change = cash_given - total_price if change < 0: return \\"Insufficient funds\\" change_distribution = {} for denomination in denominations: count = int(change // denomination) if count > 0: change_distribution[denomination] = count change -= round(denomination * count, 2) # To avoid floating-point arithmetic issues return change_distribution"},{"question":"Implement a function `find_missing_number` that takes in a list of numbers `nums`, which contains `n` unique integers ranging from 1 to `n+1` inclusive, with one number missing. The function should return the missing number. Your solution should be efficient, aiming for linear time complexity. For example, given the list `[5, 3, 1, 2]`, the function should return `4`.","solution":"def find_missing_number(nums): Returns the missing number from the list of numbers ranging from 1 to n+1. :param nums: List of unique integers ranging from 1 to n+1 with one number missing :return: The missing integer n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"Write a Python program that takes a list of student records and categorizes the students based on their grades. Each student record should include the student\'s name, grade, and age. The program should output a dictionary where the keys are grade levels and the values are lists of students\' names in that grade. [[\'Alice\', \'A\', 15], [\'Bob\', \'B\', 16], [\'Charlie\', \'A\', 15], [\'David\', \'C\', 17], [\'Eve\', \'B\', 16]]","solution":"def categorize_students_by_grades(student_records): Categorizes students based on their grades. Parameters: student_records (list): A list of student records. Each record is a list containing the student\'s name, grade, and age. Returns: dict: A dictionary where the keys are grades and the values are lists of students\' names in that grade. grade_categories = {} for record in student_records: name, grade, age = record if grade not in grade_categories: grade_categories[grade] = [] grade_categories[grade].append(name) return grade_categories"},{"question":"Create a program that finds the longest increasing subsequence in a list of integers. [5, 2, 8, 6, 3, 6, 9, 7]","solution":"def longest_increasing_subsequence(arr): Finds the longest increasing subsequence in a list of integers. if not arr: return [] n = len(arr) dp = [1] * n parent = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 parent[i] = j # Find the index of the maximum value in dp max_index = 0 max_value = dp[0] for i in range(1, n): if dp[i] > max_value: max_value = dp[i] max_index = i # Trace back the LIS from the parent array lis = [] while max_index != -1: lis.append(arr[max_index]) max_index = parent[max_index] return lis[::-1] # Reverse the lis to get the correct order"},{"question":"Write a function `sort_students_by_grades` that takes a list of student-grade pairs (tuples) and returns the list sorted by grades in descending order. If two students have the same grade, sort them alphabetically by their names. Example: Input: ```python students = [(\\"John\\", 88), (\\"Emma\\", 95), (\\"Sophia\\", 88), (\\"Jacob\\", 78)] ``` Output: ```python [(\\"Emma\\", 95), (\\"John\\", 88), (\\"Sophia\\", 88), (\\"Jacob\\", 78)] ``` Write the function `sort_students_by_grades` and explain the approach you used to solve this problem.","solution":"def sort_students_by_grades(students): Given a list of student-grade pairs (tuples), returns the list sorted by grades in descending order. If two students have the same grade, sort them alphabetically by their names. return sorted(students, key=lambda student: (-student[1], student[0]))"},{"question":"Write a function in Python that takes an integer n and returns a list of all the prime numbers less than n. Your implementation should include an efficient algorithm to check for prime numbers and handle edge cases where n is less than or equal to 2. **Function Signature:** ```python def find_primes(n: int) -> List[int]: ``` **Example:** ```python find_primes(10) ``` **Output:** ```python [2, 3, 5, 7] ``` **Hints:** - Consider using the Sieve of Eratosthenes algorithm for an efficient solution. - Ensure your function handles small values of `n` correctly. - Think about the space and time complexity of your solution.","solution":"from typing import List def find_primes(n: int) -> List[int]: Returns a list of all prime numbers less than n. if n <= 2: return [] is_prime = [True] * n is_prime[0], is_prime[1] = False, False p = 2 while p * p < n: if is_prime[p]: for multiple in range(p * p, n, p): is_prime[multiple] = False p += 1 return [i for i in range(n) if is_prime[i]]"},{"question":"You are given a list of email addresses. Your task is to extract the domain part of each email and count the occurrences of each unique domain. Write a Python function that takes a list of email addresses as input and returns a dictionary with domains as keys and their respective counts as values. **Input:** - A list of strings, where each string is an email address (e.g., \\"user@example.com\\", \\"admin@domain.org\\"). **Output:** - A dictionary where the keys are domains and the values are the counts of those domains in the input list. **Function Signature:** ```python def count_domains(emails: List[str]) -> Dict[str, int]: pass ``` **Example:** ```python emails = [ \\"alice@example.com\\", \\"bob@example.com\\", \\"charlie@anotherdomain.com\\", \\"david@anotherdomain.com\\", \\"eve@example.com\\" ] output = count_domains(emails) print(output) # Output: {\'example.com\': 3, \'anotherdomain.com\': 2} ``` **Constraints:** - The input will always be a non-empty list of valid email addresses. - The emails in the list can contain both uppercase and lowercase letters. - The domains in the output should be case-insensitive (e.g., \\"Example.com\\", \\"example.com\\" should be treated as the same domain and counted together). Ensure your solution is efficient and handles large lists of emails within a reasonable time frame.","solution":"from typing import List, Dict def count_domains(emails: List[str]) -> Dict[str, int]: domain_count = {} for email in emails: domain = email.split(\'@\')[1].lower() if domain in domain_count: domain_count[domain] += 1 else: domain_count[domain] = 1 return domain_count"},{"question":"You are given a class defined in Python representing a 2D point: class Point: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return f\\"({self.x}, {self.y})\\" def distance_to(self, other): return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5 Using this class, define a class Polygon which represents a polygon defined by multiple points. You need to implement the following methods: 1. `__init__(self, points)`: Initializes the Polygon with a list of Point objects. 2. `__str__(self)`: Returns a string representation of the Polygon as a list of points. 3. `perimeter(self)`: Returns the perimeter of the Polygon. Ensure the __init__ method handles a minimum of three points to form a valid polygon. The perimeter method should iterate over the points and sum up the distances between consecutive points, including the distance between the last point and the first point. Demonstrate the usage of these classes by creating an instance of Polygon and calculating the perimeter. You can use the following example to test your code: ```python points = [Point(0, 0), Point(4, 0), Point(4, 3)] polygon = Polygon(points) print(polygon) # Should print: (0, 0) -> (4, 0) -> (4, 3) -> (0, 0) print(polygon.perimeter()) # Should print the perimeter of the triangle (12.0 for this example) ```","solution":"class Point: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return f\\"({self.x}, {self.y})\\" def distance_to(self, other): return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5 class Polygon: def __init__(self, points): if len(points) < 3: raise ValueError(\\"A polygon must have at least 3 points\\") self.points = points def __str__(self): return \\" -> \\".join(str(point) for point in self.points) + f\\" -> {str(self.points[0])}\\" def perimeter(self): perimeter = 0.0 for i in range(len(self.points)): next_point = self.points[(i + 1) % len(self.points)] perimeter += self.points[i].distance_to(next_point) return perimeter"},{"question":"Design a Python function that takes two strings as input and returns the longest common subsequence (LCS) between them. If there are multiple LCS of the same length, return the one that appears first lexicographically. Example: Input: str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB\\" Output: \\"GTAB\\"","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence (LCS) between two strings. If there are multiple LCS of the same length, returns the one that appears first lexicographically. n, m = len(str1), len(str2) dp = [[\\"\\" for _ in range(m + 1)] for __ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + str1[i - 1] else: if len(dp[i - 1][j]) > len(dp[i][j - 1]): dp[i][j] = dp[i - 1][j] elif len(dp[i - 1][j]) < len(dp[i][j - 1]): dp[i][j] = dp[i][j - 1] else: # same length, pick the lexicographically smaller one dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Create a function called `word_frequencies` that takes a list of words as input and returns a dictionary with each unique word as the key and the number of times it appears in the list as the value. The function should ignore case, treating \\"Word\\" and \\"word\\" as the same word. You should also handle punctuation by stripping off any punctuation from the words. Consider punctuation as any of the following characters: `.,!?;:`. # Example ```python words = [\\"Hello\\", \\"world!\\", \\"HELLO\\", \\"world\\", \\"hello,\\", \\"WORLD!\\"] result = word_frequencies(words) print(result) ``` # Expected Output ```python {\'hello\': 3, \'world\': 3} ```","solution":"import string def word_frequencies(words): Returns a dictionary with each unique word as the key and the number of times it appears in the list as the value, ignoring case and punctuation. frequencies = {} translator = str.maketrans(\'\', \'\', string.punctuation) for word in words: # Normalize word to lowercase and remove punctuation clean_word = word.lower().translate(translator) if clean_word in frequencies: frequencies[clean_word] += 1 else: frequencies[clean_word] = 1 return frequencies"},{"question":"Design a Python function to manage the inventory of a store, where the inventory is represented as a dictionary. Each key in this dictionary is a string representing the item\'s name, and each value is an integer representing the quantity in stock. The function should be able to: 1. Add a new item to the inventory with a specified quantity. 2. Remove an item completely from the inventory. 3. Update the quantity of an existing item (increase or decrease). 4. Provide the current quantity of a specific item. 5. Return a list of all items whose quantity is below a specified threshold. The function should handle edge cases, such as: - Attempting to update the quantity of an item that does not exist in the inventory. - Attempting to remove an item that does not exist. - Ensuring the quantity of an item never goes below zero. You are provided with the following faulty code which attempts to implement the function but fails. Analyze the provided code, identify the specific error(s), and correct it to produce a working solution. Faulty Code: ```python class Inventory: def __init__(self): self.inventory = {} def add_item(self, item, quantity): if item in self.inventory: self.inventory[item] += quantity else: self.inventory[item] = quantity def remove_item(self, item): del self.inv[item] def update_quantity(self, item, quantity): if item in self.inventory: self.inventory[item] = max(0, self.inventory[item] + quantity) def get_quantity(self, item): return self.inventory.get(item, 0) def get_items_below_threshold(self, threshold): return [item for item, qty in self.inventory.items() if qty < threshold] # Example usage: inv = Inventory() inv.add_item(\'apple\', 10) inv.add_item(\'banana\', 5) inv.update_quantity(\'apple\', -7) inv.remove_item(\'banana\') print(inv.get_quantity(\'apple\')) # Output: 3 print(inv.get_items_below_threshold(5)) # Output: [\'apple\'] ``` Identify the errors in the code and correct them to ensure the function operates as specified.","solution":"class Inventory: def __init__(self): self.inventory = {} def add_item(self, item, quantity): if item in self.inventory: self.inventory[item] += quantity else: self.inventory[item] = quantity def remove_item(self, item): if item in self.inventory: del self.inventory[item] def update_quantity(self, item, quantity): if item in self.inventory: self.inventory[item] = max(0, self.inventory[item] + quantity) def get_quantity(self, item): return self.inventory.get(item, 0) def get_items_below_threshold(self, threshold): return [item for item, qty in self.inventory.items() if qty < threshold]"},{"question":"Create a Python program to simulate a basic e-commerce order processing system. This system should keep track of customers, products, and orders. Implement classes for `Customer`, `Product`, and `Order`, and ensure that the system can handle adding new customers, products, and creating orders. Each order should contain the customer information, the list of products, and the total amount. Specifically, your program should: 1. Define a `Customer` class with attributes such as `customer_id`, `name`, and `email`. 2. Define a `Product` class with attributes such as `product_id`, `name`, and `price`. 3. Define an `Order` class with attributes such as `order_id`, `customer`, `products` (a list of `Product` instances), and `total_amount`. 4. Add methods to each class where appropriate. For example, the `Order` class should have a method to calculate the `total_amount` based on the list of products. 5. Create a sample sequence of operations: a. Add a few customers and products. b. Create a few orders with different combinations of customers and products. c. Print out the details of each order including customer name, list of product names, and the total amount. Here\'s a piece of starter code with the outline of classes that you will need to complete: ```python class Customer: def __init__(self, customer_id, name, email): self.customer_id = customer_id self.name = name self.email = email class Product: def __init__(self, product_id, name, price): self.product_id = product_id self.name = name self.price = price class Order: def __init__(self, order_id, customer): self.order_id = order_id self.customer = customer self.products = [] self.total_amount = 0 def add_product(self, product): self.products.append(product) self.total_amount += product.price # Sample operations customer1 = Customer(1, \\"John Doe\\", \\"john.doe@example.com\\") customer2 = Customer(2, \\"Jane Smith\\", \\"jane.smith@example.com\\") product1 = Product(1, \\"Laptop\\", 999.99) product2 = Product(2, \\"Smartphone\\", 599.99) order1 = Order(1, customer1) order1.add_product(product1) order1.add_product(product2) order2 = Order(2, customer2) order2.add_product(product2) # Print order details def print_order_details(order): print(f\\"Order ID: {order.order_id}\\") print(f\\"Customer: {order.customer.name}\\") print(\\"Products:\\") for product in order.products: print(f\\" - {product.name}: {product.price}\\") print(f\\"Total Amount: {order.total_amount}\\") print(\\"\\") print_order_details(order1) print_order_details(order2) ```","solution":"class Customer: def __init__(self, customer_id, name, email): self.customer_id = customer_id self.name = name self.email = email class Product: def __init__(self, product_id, name, price): self.product_id = product_id self.name = name self.price = price class Order: def __init__(self, order_id, customer): self.order_id = order_id self.customer = customer self.products = [] self.total_amount = 0 def add_product(self, product): self.products.append(product) self.total_amount += product.price # Sample operations customer1 = Customer(1, \\"John Doe\\", \\"john.doe@example.com\\") customer2 = Customer(2, \\"Jane Smith\\", \\"jane.smith@example.com\\") product1 = Product(1, \\"Laptop\\", 999.99) product2 = Product(2, \\"Smartphone\\", 599.99) order1 = Order(1, customer1) order1.add_product(product1) order1.add_product(product2) order2 = Order(2, customer2) order2.add_product(product2) # Print order details def print_order_details(order): print(f\\"Order ID: {order.order_id}\\") print(f\\"Customer: {order.customer.name}\\") print(\\"Products:\\") for product in order.products: print(f\\" - {product.name}: {product.price}\\") print(f\\"Total Amount: {order.total_amount}\\") print(\\"\\") print_order_details(order1) print_order_details(order2)"},{"question":"Write a function named `find_majority_element` that takes a list of integers as its input and returns the majority element. The majority element is the element that appears more than half the time in the list. You can assume that the input list always has a majority element. If there are multiple elements that satisfy this condition, return any of them. Function Signature: ```python def find_majority_element(nums: List[int]) -> int: ``` **Examples**: ```python print(find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4])) # Output: 4 print(find_majority_element([2, 2, 1, 1, 1, 2, 2])) # Output: 2 ``` **Constraints**: - You must solve this in `O(n)` time and `O(1)` space. - The input list will always have a length `n` where `1 <= n <= 10^5`. **Hint**: - Consider using the Boyer-Moore Voting Algorithm to get the majority element.","solution":"def find_majority_element(nums): Uses the Boyer-Moore Voting Algorithm to find the majority element in the list. candidate = None count = 0 for num in nums: if count == 0: candidate = num if num == candidate: count += 1 else: count -= 1 return candidate"},{"question":"**Design a function that returns duplicate elements in an array** Write a Python function named `find_duplicates` that takes a list of integers as input and returns a list of all the integers that appear more than once in the input list. If there are no duplicate elements, the function should return an empty list. # Specifications - The function should have the following signature: ```python def find_duplicates(arr: List[int]) -> List[int]: ``` - The input list `arr` should satisfy the following: - Length of `arr` is between 0 and 10^5 - Elements of `arr` are integers between -10^5 and 10^5 - The returned list should contain the duplicates in the order they first appear in the input list. - If there are no duplicate elements, return an empty list. # Example ```python # Example 1 Input: [1, 2, 3, 4, 1, 2, 3] Output: [1, 2, 3] # Example 2 Input: [5, 6, 7, 8, 9] Output: [] # Example 3 Input: [10, 20, 10, 30, 20, 30] Output: [10, 20, 30] ``` # Notes - The function should be optimized for performance due to potentially large input size. - Consider using Python\'s collections module for an efficient implementation.","solution":"from typing import List from collections import Counter def find_duplicates(arr: List[int]) -> List[int]: This function returns a list of integers in the input list that appear more than once. count = Counter(arr) duplicates = [element for element, cnt in count.items() if cnt > 1] return duplicates"},{"question":"Write a code that takes a list of tuples where each tuple contains a student name and their score, and returns a dictionary where the keys are unique student names, and the values are lists of scores corresponding to that student, sorted in ascending order. The input list might contain multiple entries for the same student. students_scores = [(\'Alice\', 88), (\'Bob\', 72), (\'Alice\', 91), (\'Charlie\', 85), (\'Bob\', 78), (\'Charlie\', 82)]","solution":"def group_and_sort_scores(students_scores): Takes a list of tuples containing student names and their scores, and returns a dictionary with unique student names as keys and lists of their scores sorted in ascending order as values. :param students_scores: List[Tuple[str, int]] :return: Dict[str, List[int]] result = {} for student, score in students_scores: if student not in result: result[student] = [] result[student].append(score) # Sort the scores for each student for student in result: result[student].sort() return result"},{"question":"Implement a function that accepts a string containing a mix of letters and digits. The function should rearrange the string such that all letters come before all digits while preserving the relative order of the letters and digits respectively. For example, given the input \\"a1b2c3\\", the output should be \\"abc123\\". If the input is \\"3a4b2c\\", the output should be \\"abc342\\".","solution":"def rearrange_string(s): Rearrange the string such that all letters come before all digits while preserving the relative order of the letters and digits. Parameters: s (str): The input string containing a mix of letters and digits. Returns: str: The rearranged string with all letters before all digits. letters = [char for char in s if char.isalpha()] digits = [char for char in s if char.isdigit()] return \'\'.join(letters + digits)"},{"question":"Write a function in Python that takes a string as input and returns a new string where each character in the original string is repeated once. For example, an input of \\"hello\\" should return \\"hheelllloo\\". The function should also validate the input, ensuring it is a non-empty string composed only of alphabetic characters. If the input is invalid, the function should raise a ValueError with an appropriate error message. Sample erroneous code for reference: ```python def double_characters(input_string): if not input_string.isalpha(): raise ValueError(\\"Input must be a non-empty string of alphabetic characters.\\") result = \'\'.join([char * 2 for char in input_string]) return result print(double_characters(\\"hello123\\")) ``` Understand what\'s wrong with the sample code and correct it to handle the input validation properly.","solution":"def double_characters(input_string): Returns a new string where each character in the original string is repeated once. Validates that input_string is a non-empty string composed only of alphabetic characters. if not isinstance(input_string, str) or not input_string.isalpha(): raise ValueError(\\"Input must be a non-empty string of alphabetic characters.\\") result = \'\'.join([char * 2 for char in input_string]) return result"},{"question":"Given a list of integers, write a function to determine if the list represents a valid \\"Mountain Array.\\" A Mountain Array is defined as an array where: 1. length of the array is at least 3. 2. There exists some index `i` such that `A[0] < A[1] < ... < A[i]` and `A[i] > A[i+1] > ... > A[A.length - 1]`. Your task is to create a function `isMountainArray(arr)` that returns `True` if the input list is a valid Mountain Array, otherwise returns `False`. Example: ``` isMountainArray([2, 1]) ➞ False isMountainArray([3, 5, 5]) ➞ False isMountainArray([0, 3, 2, 1]) ➞ True ```","solution":"def isMountainArray(arr): Returns True if the input list is a valid Mountain Array, otherwise False. if len(arr) < 3: return False i = 1 # ascending while i < len(arr) and arr[i] > arr[i - 1]: i += 1 # peak can\'t be first or last if i == 1 or i == len(arr): return False # descending while i < len(arr) and arr[i] < arr[i - 1]: i += 1 return i == len(arr)"},{"question":"Write a Python function that takes a string and returns a new string where each character in the original string is repeated once. For instance, the string \\"hello\\" should be converted to \\"hheelllloo\\". Implement this function without using built-in functions like `str.join()` or `str.replace()`. **Example** - Input : \\"hello\\" - Output : \\"hheelllloo\\" - Input : \\"Coding\\" - Output : \\"CCooddiinngg\\" Make sure to handle edge cases such as an empty string or a string with only one character correctly in your implementation.","solution":"def repeat_characters(s): Returns a new string where each character in the original string is repeated once. result = \\"\\" for char in s: result += char * 2 return result"},{"question":"Determine the Maximum Subarray Sum Using Divide and Conquer You are given an integer array `nums` containing `n` elements. Your task is to determine the maximum sum of a contiguous subarray using the divide and conquer approach. The divide and conquer approach involves recursively dividing the array into two halves, and then finding the maximum subarray sum in one of the following three cases: 1. The maximum subarray is entirely in the left half. 2. The maximum subarray is entirely in the right half. 3. The maximum subarray spans both halves. To implement the divide and conquer method, write a function that: 1. Divides the array into two halves. 2. Finds the maximum subarray sum for each half recursively. 3. Identifies the maximum subarray sum that crosses the midpoint of the array. Finally, return the maximum of these three values. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The maximum subarray sum is [4,-1,2,1], resulting in the sum 6. Example 2: Input: nums = [1] Output: 1 Explanation: The maximum subarray sum is [1], resulting in the sum 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The maximum subarray sum is [5,4,-1,7,8], resulting in the sum 23. Constraints: - The array `nums` contains `n` elements where `1 <= n <= 3 * 10^4`. - The elements of `nums` can vary from `-10^4` to `10^4`. - Implement the solution using the divide and conquer approach for better efficiency compared to the straightforward O(n^2) solution.","solution":"def max_crossing_sum(nums, left, mid, right): A utility function to find the maximum sum of the subarray crossing the midpoint. # Include elements on left of mid. sum_left = float(\'-inf\') total = 0 for i in range(mid, left - 1, -1): total += nums[i] if total > sum_left: sum_left = total # Include elements on right of mid. sum_right = float(\'-inf\') total = 0 for i in range(mid + 1, right + 1): total += nums[i] if total > sum_right: sum_right = total # Return sum of elements on left and right of mid. return sum_left + sum_right def max_subarray_sum(nums, left, right): Use the divide and conquer approach to find the maximum subarray sum. if left == right: return nums[left] mid = (left + right) // 2 return max( max_subarray_sum(nums, left, mid), max_subarray_sum(nums, mid + 1, right), max_crossing_sum(nums, left, mid, right) ) def max_subarray(nums): Returns the maximum sum of a contiguous subarray using the divide and conquer approach. return max_subarray_sum(nums, 0, len(nums) - 1)"},{"question":"Write a function that accepts a list of strings and returns a dictionary where the keys are the strings, and the values are the number of vowels (a, e, i, o, u) in each string. The function should ignore case when counting vowels and should handle an empty string by returning a count of zero. Additionally, the function should handle edge cases where the input list is empty or contains non-string elements by skipping those elements and processing the rest.","solution":"def count_vowels(strings): Returns a dictionary where the keys are the strings from the input list, and the values are the count of vowels in each string. Vowels are counted case-insensitively. vowels = \'aeiou\' result = {} for string in strings: if isinstance(string, str): count = sum(1 for char in string.lower() if char in vowels) result[string] = count return result"},{"question":"You are given a list of integers, where every number appears exactly twice except for one number which appears only once. Write a function in Python to find the number that appears only once. Ensure your solution has an optimal time complexity. ```python def find_unique_number(nums): # Your code here # Example usage: nums = [2, 3, 2, 4, 4, 5, 3] print(find_unique_number(nums)) # Output should be 5 ``` Consider the following piece of erroneous code written in Python: ```python def find_unique_number(nums): unique = 0 for num in nums: unique = unique + num return unique nums = [2, 3, 2, 4, 4, 1, 5, 3, 1] print(find_unique_number(nums)) # Output should be 5 ``` The code is intended to find the number that appears only once in the list, but it currently fails to perform correctly. Can you identify the mistake and provide the correct code? Please also describe the principle of your solution.","solution":"def find_unique_number(nums): Given a list of integers where every number appears exactly twice except for one number which appears only once, this function finds and returns the single number that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number # Example usage nums = [2, 3, 2, 4, 4, 5, 3] print(find_unique_number(nums)) # Output should be 5"},{"question":"Design a function called `anagram_groups` that takes a list of words and groups them into separate lists where each list contains words that are anagrams of each other. The function should return a list of these lists, with each list sorted in alphabetical order and the overall structure sorted by the smallest word in each group. **Function Signature:** ```python def anagram_groups(words: List[str]) -> List[List[str]]: ``` **Examples:** ```python assert anagram_groups([\\"listen\\", \\"silent\\", \\"enlist\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"ant\\"]) == [[\\"ant\\", \\"tan\\"], [\\"eat\\", \\"tea\\"], [\\"enlist\\", \\"listen\\", \\"silent\\"]] assert anagram_groups([\\"rat\\", \\"tar\\", \\"art\\", \\"star\\", \\"tars\\", \\"rats\\", \\"car\\", \\"arc\\"]) == [[\\"arc\\", \\"car\\"], [\\"art\\", \\"rat\\", \\"tar\\"], [\\"rats\\", \\"star\\", \\"tars\\"]] ``` **Constraints:** 1. All words in the input list are strings consisting of lowercase English letters. 2. The input list may be of any length, including empty. 3. The output must be sorted as specified.","solution":"from typing import List from collections import defaultdict def anagram_groups(words: List[str]) -> List[List[str]]: Groups words into lists where each list contains anagrams of each other. Returns a list of these lists, each sorted in alphabetical order and the overall structure sorted by the smallest word in each group. anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) grouped_anagrams = [sorted(group) for group in anagram_dict.values()] return sorted(grouped_anagrams, key=lambda x: x[0]) # Example use cases print(anagram_groups([\\"listen\\", \\"silent\\", \\"enlist\\", \\"eat\\", \\"tea\\", \\"tan\\", \\"ant\\"])) print(anagram_groups([\\"rat\\", \\"tar\\", \\"art\\", \\"star\\", \\"tars\\", \\"rats\\", \\"car\\", \\"arc\\"]))"},{"question":"Write a function that takes two lists of integers as input and returns a new list containing only the elements that are present in both lists (intersection of the two lists). Ensure that each element in the resulting list appears only once, even if it appears multiple times in the input lists. Additionally, the function should handle potential edge cases, such as one or both of the lists being empty. Provide unit tests to demonstrate the correctness of your function.","solution":"def list_intersection(list1, list2): Returns a new list containing only the elements that are present in both list1 and list2. Each element in the resulting list appears only once. return list(set(list1).intersection(set(list2)))"},{"question":"You are given an array of integers and a target integer. Write a Python function that returns the indices of the two numbers such that they add up to the target. # Function Signature ```python def find_two_sum(nums: List[int], target: int) -> List[int]: pass ``` # Input - `nums` is a list of integers. - `target` is an integer. # Output - Return a list of two integers that are the indices of the two numbers in `nums` such that they add up to the target. - If no such pair exists, return an empty list. # Example ```python assert find_two_sum([2, 7, 11, 15], 9) == [0, 1] assert find_two_sum([3, 2, 4], 6) == [1, 2] assert find_two_sum([3, 3], 6) == [0, 1] assert find_two_sum([1, 2, 3], 7) == [] ``` # Note - You may assume that each input would have exactly one solution, and you may not use the same element twice. - The returned indices should be in increasing order. Implement the function `find_two_sum` according to the above specifications.","solution":"from typing import List def find_two_sum(nums: List[int], target: int) -> List[int]: Given an array of integers, return indices of the two numbers such that they add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"定義一個函數，它接收一個整數列表並返回該列表中的最大值和最小值的差值。","solution":"def max_min_diff(numbers): Returns the difference between the maximum and minimum values in the list. :param numbers: List of integers :return: Integer difference between the maximum and minimum values if not numbers: raise ValueError(\\"The list should not be empty\\") return max(numbers) - min(numbers)"},{"question":"Write a Python function that takes a list of integers and returns the index of the second largest element. If the second largest element does not exist (because the list has fewer than two unique elements), the function should return -1. Your solution should handle all edge cases and be optimized for performance.","solution":"def index_of_second_largest(nums): Returns the index of the second largest element in the list of integers. If the second largest element does not exist, returns -1. if len(nums) < 2: return -1 first = second = float(\'-inf\') first_index = second_index = -1 for i, num in enumerate(nums): if num > first: second, second_index = first, first_index first, first_index = num, i elif first > num > second: second, second_index = num, i return second_index"},{"question":"Write a function that takes a list of transactions and a threshold number as input and returns the IDs of the users who have made transactions over the given threshold. Each transaction is represented by a dictionary containing \'user_id\', \'amount\', and \'timestamp\'. The function should return a list of user IDs sorted in ascending order. If no user has transactions exceeding the threshold, return an empty list. **Example:** ```python transactions = [ {\'user_id\': \'A123\', \'amount\': 200, \'timestamp\': \'2023-01-01T10:00:00Z\'}, {\'user_id\': \'B456\', \'amount\': 50, \'timestamp\': \'2023-01-01T11:00:00Z\'}, {\'user_id\': \'A123\', \'amount\': 300, \'timestamp\': \'2023-01-02T10:00:00Z\'}, {\'user_id\': \'C789\', \'amount\': 400, \'timestamp\': \'2023-01-03T10:00:00Z\'}, ] threshold = 250 Output: [\'A123\', \'C789\'] ```","solution":"def get_users_with_transactions_over_threshold(transactions, threshold): Returns the IDs of the users who have made transactions over the given threshold. user_ids = set() for transaction in transactions: if transaction[\'amount\'] > threshold: user_ids.add(transaction[\'user_id\']) return sorted(user_ids)"},{"question":"Write a Python function to find the k-th smallest element in an unsorted list of integers using the Quickselect algorithm. ```python def quickselect(arr, k): # Your implementation here unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1] k = 4 print(quickselect(unsorted_list, k)) # Expected output: 4th smallest element in the list ```","solution":"def quickselect(arr, k): Returns the k-th smallest element in an unsorted list using the Quickselect algorithm. if k < 1 or k > len(arr): raise ValueError(\\"k is out of bounds\\") def partition(left, right, pivot_index): pivot_value = arr[pivot_index] arr[pivot_index], arr[right] = arr[right], arr[pivot_index] store_index = left for i in range(left, right): if arr[i] < pivot_value: arr[store_index], arr[i] = arr[i], arr[store_index] store_index += 1 arr[right], arr[store_index] = arr[store_index], arr[right] return store_index def select(left, right, k_smallest): if left == right: return arr[left] pivot_index = left pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return arr[k_smallest] elif k_smallest < pivot_index: return select(left, pivot_index - 1, k_smallest) else: return select(pivot_index + 1, right, k_smallest) return select(0, len(arr) - 1, k - 1)"},{"question":"Implement a function that takes a list of integers and returns the second smallest unique integer. If there are fewer than two unique integers in the list, the function should return `None`. For example, given the list `[4, 1, 2, 2, 3, 1]`, the function should return `2`, and for the list `[4, 4, 4, 4]`, the function should return `None`.","solution":"def second_smallest_unique(nums): Returns the second smallest unique integer in the given list of integers. If there are fewer than two unique integers, the function returns None. unique_nums = list(set(nums)) # Get the unique numbers if len(unique_nums) < 2: return None # Fewer than two unique integers unique_nums.sort() return unique_nums[1] # Return the second smallest unique number"},{"question":"Given a string, determine if it can be rearranged to form a palindrome. If possible, return one such palindrome. If not, return an empty string. The string contains only lowercase alphabets. Input: \\"racecar\\" Note: The input string will have at least 1 character and will not exceed 1000 characters in length.","solution":"from collections import Counter def can_form_palindrome(s): Returns one possible palindrome that can be formed using the characters in the string s. If it is not possible to form a palindrome, returns an empty string. # Count the frequency of each character in the string char_count = Counter(s) # Count the number of characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Palindrome can be formed if at most one character has an odd frequency if odd_count > 1: return \\"\\" # Form the first half and the middle character (if any) of the palindrome first_half = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char first_half.append(char * (count // 2)) # Join the first half and its reverse to form the palindrome first_half = \\"\\".join(first_half) return first_half + middle_char + first_half[::-1]"},{"question":"You are given a Python list of dictionaries representing students and their scores in multiple subjects. Each dictionary contains the student\'s name and their scores in different subjects. Write a function that calculates and returns a new list of dictionaries, where each dictionary contains the student\'s name and their average score across all subjects. Additionally, transform this function into a class that holds the list of student dictionaries as a property and includes methods to calculate average scores and rank the students by their average scores in descending order. Sample Input: ```python students = [ {\\"name\\": \\"Alice\\", \\"math\\": 85, \\"science\\": 90, \\"english\\": 78}, {\\"name\\": \\"Bob\\", \\"math\\": 79, \\"science\\": 80, \\"english\\": 85}, {\\"name\\": \\"Charlie\\", \\"math\\": 92, \\"science\\": 88, \\"english\\": 84} ] ``` Expected Output: ```python [ {\\"name\\": \\"Alice\\", \\"average\\": 84.33}, {\\"name\\": \\"Bob\\", \\"average\\": 81.33}, {\\"name\\": \\"Charlie\\", \\"average\\": 88.0} ] ``` Additionally, provide unit tests to ensure the accuracy of your implementation. Ensure to handle cases where a student\'s score dictionary might miss a subject, and treat the missing subject\'s score as 0.","solution":"from typing import List, Dict import statistics class StudentScores: def __init__(self, students: List[Dict[str, int]]): self.students = students def calculate_average_scores(self) -> List[Dict[str, float]]: result = [] for student in self.students: name = student.pop(\\"name\\") scores = list(student.values()) average_score = round(statistics.mean(scores), 2) if scores else 0 result.append({\\"name\\": name, \\"average\\": average_score}) return result def rank_students_by_average(self) -> List[Dict[str, float]]: averages = self.calculate_average_scores() ranked_students = sorted(averages, key=lambda x: x[\\"average\\"], reverse=True) return ranked_students"},{"question":"Write a program that takes as input a list of integers and returns a new list containing the squares of all the even numbers from the original list, in the same order. If no even numbers are present in the list, your program should return an empty list. Example Input: ``` [1, 2, 3, 4, 5, 6] ``` Example Output: ``` [4, 16, 36] ``` Constraints: - The input list will contain at least one integer. - All integers in the list will be in the range [-10^3, 10^3].","solution":"def square_evens(numbers): Returns a list of squares of the even numbers from the original list. Args: numbers: List of integers. Returns: List of squares of even integers. return [num ** 2 for num in numbers if num % 2 == 0]"},{"question":"Write a Python function that receives a list of integers and returns a dictionary where the keys are unique integers from the list and the values are the counts of their occurrences in the list. Additionally, provide another function that takes this dictionary and returns a list of tuples, each containing an integer and its count, but only for integers that appear an odd number of times in the original list. Sort this list of tuples in descending order by their counts.","solution":"def count_occurrences(lst): Returns a dictionary with the counts of each unique integer in the list. counts = {} for num in lst: if num in counts: counts[num] += 1 else: counts[num] = 1 return counts def filter_and_sort_odd_counts(count_dict): Takes a dictionary of integer counts and returns a sorted list of tuples (integer, count) for integers that appear an odd number of times. odd_count_tuples = [(num, count) for num, count in count_dict.items() if count % 2 != 0] odd_count_tuples.sort(key=lambda x: x[1], reverse=True) return odd_count_tuples"},{"question":"Write a Python function that takes a string as input and generates all possible permutations of that string. The function should return a list containing all permutations without any duplicates. Ensure that the implementation efficiently handles cases where the string may have repeating characters. For instance, if the input string is \\"ABCA\\", the output should include \\"AABC\\", \\"AACB\\", \\"ABAC\\", \\"ABCA\\", \\"ACAB\\", \\"ACBA\\", \\"BAAC\\", \\"BACA\\", \\"BCAA\\", \\"CAAB\\", \\"CABA\\", and \\"CBAA\\" among others. Provide a solution that balances clarity and efficiency.","solution":"from itertools import permutations def string_permutations(s): Generate all unique permutations of a given string s. :param s: Input string. :return: List of unique permutations. return list(set([\'\'.join(p) for p in permutations(s)]))"},{"question":"Enhance the provided function to apply advanced sorting on a given list: def advanced_sort(lst): The task is to accept a list of tuples where each tuple contains a string and a number. Return the list sorted primarily by the string in alphabetical order, and secondarily by the number in descending order, in case of ties. Additionally, handle possible incorrect inputs like elements that are not tuples or tuples that do not follow the (string, number) format. >>> advanced_sort([(\'apple\', 3), (\'banana\', 1), (\'apple\', 2), (\'orange\', 5)]) [(\'apple\', 3), (\'apple\', 2), (\'banana\', 1), (\'orange\', 5)] >>> advanced_sort([(\'cat\', 4), (\'dog\', 2), (\'cat\', 2), (\'elephant\', 5)]) [(\'cat\', 4), (\'cat\', 2), (\'dog\', 2), (\'elephant\', 5)] >>> advanced_sort([(\'ball\', 3), (\'ball\', \'two\'), (\'dog\', 1)]) Error","solution":"def advanced_sort(lst): The task is to accept a list of tuples where each tuple contains a string and a number. Return the list sorted primarily by the string in alphabetical order, and secondarily by the number in descending order, in case of ties. Additionally, handle possible incorrect inputs like elements that are not tuples or tuples that do not follow the (string, number) format. if not all(isinstance(item, tuple) and len(item) == 2 and isinstance(item[0], str) and isinstance(item[1], (int, float)) for item in lst): return \\"Error\\" # Sort the list primarily by the first element (string) and secondarily by the second element (number) in descending order return sorted(lst, key=lambda x: (x[0], -x[1]))"},{"question":"# You are given a list of integers. Write a function `find_pairs_with_sum(arr, target_sum)` that returns a list of all unique pairs of integers in the array that sum up to the given target sum. Each pair should be represented as a tuple of two integers. Ensure that the pairs are unique, and each pair (a, b) should be ordered such that a <= b. Input - `arr`: A list of integers, e.g., `[1, 2, 3, 4, 3]` - `target_sum`: An integer, e.g., `6` Output - A list of tuples, e.g., `[(2, 4), (3, 3)]` Example ```python def find_pairs_with_sum(arr, target_sum): # Your implementation here # Sample Input arr = [1, 2, 3, 4, 3] target_sum = 6 # Sample Output print(find_pairs_with_sum(arr, target_sum)) # Output: [(2, 4), (3, 3)] ``` Constraints - The elements in the array are integers. - The elements in the array can be negative, zero, or positive. - There can be duplicate integers in the array, but each pair must be unique and ordered. Notes - Consider both positive and negative integers as well as duplicates. - Ensure to consider edge cases such as an empty array or no valid pairs. Explanation: - In the example provided, the pairs `(2, 4)` and `(3, 3)` add up to `6`. The pair `(3, 3)` is listed only once, even though `3` occurs more than once in the array.","solution":"def find_pairs_with_sum(arr, target_sum): Finds all unique pairs of integers in the array that sum up to the given target sum. Each pair (a, b) is ordered such that a <= b. :param arr: List of integers. :param target_sum: The target sum for the pairs. :return: List of unique pairs (tuples) that sum up to the target sum. seen = set() pairs = set() for number in arr: complement = target_sum - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) return list(pairs)"},{"question":"Write a function that reads a text file, counts the number of occurrences of each word, and then creates a visualization displaying the 10 most frequently occurring words. The function should utilize `matplotlib` for the plotting and handle possible edge cases such as punctuation and case sensitivity in words.","solution":"import re from collections import Counter import matplotlib.pyplot as plt def read_and_visualize_word_counts(file_path): Reads a text file, counts the number of occurrences of each word, and creates a bar chart displaying the 10 most frequently occurring words. Args: file_path (str): Path to the text file. # Read the file with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Remove punctuation and make all words lowercase text = re.sub(r\'[^ws]\', \'\', text).lower() # Split the text into words words = text.split() # Count the occurrences of each word word_counts = Counter(words) # Get the 10 most common words most_common_words = word_counts.most_common(10) # Separate words and counts for plotting words, counts = zip(*most_common_words) # Create the bar chart plt.figure(figsize=(10, 5)) plt.bar(words, counts, color=\'blue\') plt.xlabel(\'Words\') plt.ylabel(\'Counts\') plt.title(\'10 Most Frequently Occurring Words\') plt.xticks(rotation=45) plt.show()"},{"question":"Write a function that takes a list of integers and returns a new list where each element is replaced by the product of all the other integers in the original list, except the element at the current position. Do not use division in your solution. Additionally, provide a piece of faulty code that attempts to solve the problem but fails due to an off-by-one error. Analyze the code, pinpoint the mistake, correct it and explain why the original code was flawed. The faulty code should also mishandle edge cases like an empty list or a list with a single element. # Example For the input list [1, 2, 3, 4], the output should be [24, 12, 8, 6] because: - The product of [2, 3, 4] is 24 - The product of [1, 3, 4] is 12 - The product of [1, 2, 4] is 8 - The product of [1, 2, 3] is 6 # Faulty Code Example ```python def product_except_self(nums): n = len(nums) res = [1] * n for i in range(n): for j in range(n): if i != j: res[i] *= nums[j] return res # Mistake: Off-by-one error (not correctly handling the indexes) # Missing edge case handling for empty list and single element list ``` # Analysis and Correction The flaw in the original code is an off-by-one error where it fails to handle the index checking correctly. Furthermore, it does not handle edge cases like an empty list or a list with a single element, leading to incorrect results or runtime errors. Here is the corrected version of the code: ```python def product_except_self(nums): n = len(nums) if n == 0: return [] if n == 1: return [0] # product of empty set for single element res = [1] * n left = [1] * n right = [1] * n for i in range(1, n): left[i] = left[i - 1] * nums[i - 1] for i in reversed(range(n - 1)): right[i] = right[i + 1] * nums[i + 1] for i in range(n): res[i] = left[i] * right[i] return res # Explanation: # This method uses O(n) extra space to store the products of the elements to # the left and to the right of each index and avoids direct elementwise multiplication ```","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] if n == 1: return [0] # product of empty set for single element res = [1] * n left = [1] * n right = [1] * n for i in range(1, n): left[i] = left[i - 1] * nums[i - 1] for i in reversed(range(n - 1)): right[i] = right[i + 1] * nums[i + 1] for i in range(n): res[i] = left[i] * right[i] return res"},{"question":"Write a function that accepts a dictionary where keys are strings representing usernames and values are lists of integers representing scores obtained by the user in various tests. The function should calculate the average score for each user and return a dictionary where the keys are the usernames and the values are the respective average scores. Ensure your function handles cases where the list of scores is empty by returning an average score of 0 for such users. Additionally, implement error checking to handle invalid inputs, such as non-dictionary inputs or lists containing non-integer elements.","solution":"def calculate_average_scores(user_scores): Calculate the average score for each user. Parameters: user_scores (dict): A dictionary where keys are usernames (str) and values are lists of scores (int). Returns: dict: A dictionary where keys are usernames and values are the respective average scores. if not isinstance(user_scores, dict): raise ValueError(\\"Input should be a dictionary\\") averages = {} for user, scores in user_scores.items(): if not isinstance(user, str) or not isinstance(scores, list): raise ValueError(f\\"Invalid format for user {user}\\") if not all(isinstance(score, int) for score in scores): raise ValueError(f\\"All scores should be integers for user {user}\\") if len(scores) == 0: averages[user] = 0 else: averages[user] = sum(scores) / len(scores) return averages"},{"question":"Write a function that takes a list of integers and returns the list with elements in the even indices multiplied by two and elements in the odd indices replaced by their negation. Function signature: ```python def transform_list(nums: list) -> list: pass ``` Example: ```python input_list = [1, 2, 3, 4, 5, 6] transformed_list = transform_list(input_list) print(transformed_list) # Output should be [-1, -2, 6, -4, 10, -6] ``` Notes: - The input list will have at least one element. - Consider the base case where the list has only one element. - Ensure that the function works efficiently for larger lists.","solution":"def transform_list(nums: list) -> list: Transforms the list such that elements at even indices are multiplied by two and elements at odd indices are replaced by their negation. transformed = [] for i, num in enumerate(nums): if i % 2 == 0: transformed.append(num * 2) else: transformed.append(-num) return transformed"},{"question":"You are presented with a challenge titled: Longest Substring Without Repeating Characters. The task details are as follows: Given a string, find the length of the longest substring without repeating characters. Consider these examples: Example 1: Input: s = \\"abcabcbb\\" Output: 3 Rationale: The substring \\"abc\\" has a length of 3 and is the longest without repeating characters. Example 2: Input: s = \\"bbbbb\\" Output: 1 Example 3: Input: s = \\"pwwkew\\" Output: 3 Rationale: The substring \\"wke\\" has a length of 3 and is the longest without repeating characters. Note that \\"pwke\\" is a substring with repeated characters, hence not a valid answer. Example 4: Input: s = \\"\\" Output: 0 The constraints for this problem are: `0 <= s.length <= 5 * 104` `s` consists of English letters, digits, symbols, and spaces. As a follow-up challenge, if you have successfully devised an `O(n)` solution, attempt to code an alternative solution using Sliding Window technique to further optimize the implementation.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function called `find_longest_increasing_subsequence` that takes a list of integers `numbers` as input and returns the longest increasing subsequence within that list. An increasing subsequence is defined as a set of elements from the original list which are in strictly increasing order and not necessarily contiguous. The function should handle lists with negative numbers, zero, and positive numbers, and should return an empty list if no increasing subsequence exists. For instance, given the list [10, 22, 9, 33, 21, 50, 41, 60, 80], the longest increasing subsequence is [10, 22, 33, 50, 60, 80]. **Examples**: ```python find_longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) # Output: [10, 22, 33, 50, 60, 80] find_longest_increasing_subsequence([3, 10, 2, 1, 20]) # Output: [3, 10, 20] find_longest_increasing_subsequence([-5, -1, 0, 3, -2, 2]) # Output: [-5, -1, 0, 3]","solution":"def find_longest_increasing_subsequence(numbers): Returns the longest increasing subsequence within the list of numbers. if not numbers: return [] n = len(numbers) lis = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if numbers[i] > numbers[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 prev[i] = j max_lis_length = max(lis) max_index = lis.index(max_lis_length) longest_subseq = [] while max_index != -1: longest_subseq.append(numbers[max_index]) max_index = prev[max_index] return longest_subseq[::-1]"},{"question":"Considering a list of integers in Python, write a function `filter_and_square_evens` that filters out all the even numbers from the list, squares each of the filtered even numbers, and returns the resultant list. Provide an explanation of each step involved in the function. For instance, if the input list is `[1, 2, 3, 4, 5, 6]`, the function should return `[4, 16, 36]`.","solution":"def filter_and_square_evens(numbers): Filters out all the even numbers from the list, squares each of the filtered even numbers, and returns the resultant list. Args: numbers (list): A list of integers. Returns: list: A list of squared even numbers. # Using list comprehension to filter even numbers and square them return [x**2 for x in numbers if x % 2 == 0]"},{"question":"Develop a Python function that takes a list of integers and returns a new list containing only the integers from the original list that are prime numbers. The function should not use any built-in functions specifically designed for prime checking. Implement your own logic for determining if a number is prime. For example: Input: [10, 15, 17, 19, 24, 29] Output: [17, 19, 29]","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Create a function that determines if a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring cases. Your function should return a boolean value indicating whether the given string meets the criteria. Additionally, write a series of unit tests to validate the correctness of your implementation. For example: ```python is_palindrome(\\"A man, a plan, a canal: Panama\\") # True is_palindrome(\\"race a car\\") # False ```","solution":"def is_palindrome(s): Determines if a given string is a valid palindrome after removing all non-alphanumeric characters and ignoring cases. :param s: Input string to be checked :return: Boolean value indicating whether the string is a palindrome cleaned_s = \'\'.join(c for c in s if c.isalnum()).lower() return cleaned_s == cleaned_s[::-1]"},{"question":"You are given an array of integers representing daily stock prices over a certain period. Write a Python function that computes the maximum profit you can make by buying and then later selling one share of stock. Note that you must buy before you sell. Additionally, optimize your solution to run in linear time, O(n). Provide an explanation of your approach. Also, create a simple command-line interface (CLI) for users to input an array of stock prices and see the computed maximum profit. Ensure your code is well-documented and handles edge cases, such as arrays with less than two prices or non-integer inputs.","solution":"def max_profit(prices): Computes the maximum profit from a list of daily stock prices. Parameters: prices (list): A list of integers representing daily stock prices. Returns: int: The maximum profit that can be achieved by buying and then selling one share of stock. Returns 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit if price < min_price: min_price = price return max_profit"},{"question":"Given a string of lowercase English letters, design and implement an algorithm to determine the length of the longest substring that contains at most k distinct characters. If the string is empty, the algorithm should return 0. Additionally, provide the time complexity of your implementation and discuss any potential optimizations for handling very large input strings. Use the flawed code below as a reference. Identify the mistakes and rectify them in your solution. ```python def longest_substring_k_distinct(s, k): if k == 0: return 0 elif len(s) == 0: return 0 else: max_len = 0 char_count = {} left = 0 for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len # Example usage: k = 2 string = \\"eceba\\" print(longest_substring_k_distinct(string, k)) # Expected output: 3 ```","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring that contains at most k distinct characters. Args: s: str : input string consisting of lowercase English letters. k: int : maximum number of distinct characters allowed in the substring. Returns: int: length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 max_len = 0 char_count = {} left = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a function that takes a list of integers and returns the maximum product that can be obtained by multiplying any three distinct numbers from the list. If the list contains fewer than three integers, the function should return None.","solution":"def maximum_product_of_three(nums): Returns the maximum product that can be obtained by multiplying any three distinct numbers from the list. If the list contains fewer than three integers, return None. if len(nums) < 3: return None nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a function in Python that takes a list of strings as input and returns a dictionary where the keys are the strings from the input list and the values are the counts of each string. Exclude strings that appear only once from the dictionary. Example: def count_strings(strings_list: List[str]) -> Dict[str, int]: # Your code here strings_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"strawberry\\"] # Expected output: {\\"apple\\": 3, \\"banana\\": 2, \\"orange\\": 1}","solution":"def count_strings(strings_list): Returns a dictionary where the keys are the strings from the input list and the values are the counts of each string, excluding strings that appear only once. from collections import Counter string_counts = Counter(strings_list) return {string: count for string, count in string_counts.items() if count > 1}"},{"question":"Given a string containing only lowercase alphabetical characters, write a Python function that determines if the string is a palindrome and also identifies the first character that does not match when checked from both ends. If the string is a palindrome, return \\"Palindrome\\". If not, return the first non-matching character and its index from the start of the string. Example: ```python def check_palindrome(s): # Your code here # Test cases print(check_palindrome(\\"madam\\")) # Output: \\"Palindrome\\" print(check_palindrome(\\"racecar\\")) # Output: \\"Palindrome\\" print(check_palindrome(\\"hello\\")) # Output: (\'h\', 0) print(check_palindrome(\\"abccba\\")) # Output: \\"Palindrome\\" print(check_palindrome(\\"abcbba\\")) # Output: (\'c\', 2) ```","solution":"def check_palindrome(s): Determines if the string s is a palindrome and identifies the first character that does not match when checked from both ends. If the string is a palindrome, returns \\"Palindrome\\". If not, returns the first non-matching character and its index from the start of the string. left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: return (s[left], left) left += 1 right -= 1 return \\"Palindrome\\""},{"question":"Write a function that takes a list of integers and returns a list of integers where each element at index `i` of the output list is the product of all the numbers in the original list except for the one at `i`. To illustrate, given `[1, 2, 3, 4]`, the expected output would be `[24, 12, 8, 6]`. The function should not use division and should handle both positive and negative integers as well as zero. To challenge the implementation further, ensure that the solution works efficiently even for lists with up to 10,000 elements. The function should also handle cases where the input list is empty, contains one element, or consists entirely of zeros. For an extra layer of complexity, the function should be implemented in such a way that it can be adapted to accommodate floating-point numbers as well. Additionally, include mechanisms to handle potential integer overflow or underflow situations appropriately. To aid in debugging and prevent common misunderstandings, provide an example of an approach that mistakenly neglects edge cases or uses a sub-optimal method, and explain why it fails to meet the problem requirements. Test cases: - `[1, 2, 3, 4, 5]`: Expected output: `[120, 60, 40, 30, 24]` - `[-1, 1, 0, -3, 3]`: Expected output: `[0, 0, 9, 0, 0]` - `[3, 5, 7, 9, 11]`: Expected output: `[3465, 2079, 1485, 1155, 945]` - `[0, 0, 0]`: Expected output: `[0, 0, 0]` - `[2]`: Expected output: `[1]` Additionally, include guidance on optimizing the function for scalability and handling edge cases, such as lists with only one element or negative values.","solution":"def products_except_self(nums): Given a list of numbers, returns a list where each element is the product of all other elements in the original list except the one at the same index. if not nums: return [] length = len(nums) left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = nums[i - 1] * left_products[i - 1] for j in range(length - 2, -1, -1): right_products[j] = nums[j + 1] * right_products[j + 1] for k in range(length): result[k] = left_products[k] * right_products[k] return result"},{"question":"Design a program that simulates a vending machine. The vending machine has the following functionalities: 1. **Display Items**: Show a list of available items, each with a name, a price, and a code. 2. **Select Item**: Allow the user to select an item by entering its code. 3. **Insert Money**: Permit the user to insert money and keep track of the total amount inserted. 4. **Dispense Item**: Dispense the selected item if sufficient money has been inserted, deducting the item price from the total money inserted. 5. **Return Change**: If the inserted money exceeds the item\'s price, calculate and return the change to the user. Ensure the following constraints: - The vending machine should have a set inventory initialized at the start. - Each item in the inventory has a limited stock that decreases upon purchase. - If an item is out of stock, inform the user and prompt them to choose another item. - If insufficient money is inserted, inform the user of the shortfall and prompt them to insert more money or cancel the transaction. - Users should be able to cancel the transaction at any time and receive their inserted money back. Implement all functionalities and interactions through a command-line interface. Provide clear instructions and feedback to the user at each step.","solution":"class VendingMachine: def __init__(self, inventory): Initializes the vending machine with an inventory of items. Each item is a dictionary with \'name\', \'price\', \'code\', and \'stock\'. self.inventory = {item[\'code\']: item for item in inventory} self.money_inserted = 0.0 self.selected_item = None def display_items(self): Displays the items available in the vending machine. for item in self.inventory.values(): print(f\\"Code: {item[\'code\']}, Name: {item[\'name\']}, Price: {item[\'price\']:.2f}, Stock: {item[\'stock\']}\\") def select_item(self, code): Allows the user to select an item by its code. if code not in self.inventory: raise ValueError(\\"Invalid item code\\") item = self.inventory[code] if item[\'stock\'] <= 0: raise ValueError(f\\"Item {item[\'name\']} is out of stock\\") self.selected_item = item print(f\\"Selected item: {self.selected_item[\'name\']}\\") def insert_money(self, amount): Allows the user to insert money. if amount <= 0: raise ValueError(\\"Inserted amount must be greater than zero\\") self.money_inserted += amount print(f\\"Inserted money: {self.money_inserted:.2f}\\") def dispense_item(self): Dispenses the selected item if sufficient money has been inserted. if not self.selected_item: raise ValueError(\\"No item selected\\") item_price = self.selected_item[\'price\'] if self.money_inserted < item_price: shortfall = item_price - self.money_inserted print(f\\"Insufficient money. Insert {shortfall:.2f} more.\\") return self.inventory[self.selected_item[\'code\']][\'stock\'] -= 1 change = self.money_inserted - item_price self.money_inserted = 0.0 dispensed_item = self.selected_item self.selected_item = None print(f\\"Dispensed: {dispensed_item[\'name\']}\\") if change > 0: print(f\\"Return change: {change:.2f}\\") return dispensed_item[\'name\'], change def cancel_transaction(self): Cancels the ongoing transaction and returns inserted money. change = self.money_inserted self.money_inserted = 0.0 self.selected_item = None print(f\\"Transaction canceled. Return money: {change:.2f}\\") return change"},{"question":"Write a function that takes an integer `n` and returns the next number that is a palindrome. A palindrome is a number that reads the same backward as forward, e.g., 121 or 1331. For example, if `n` is 123, the next palindrome is 131. Implement this in your preferred programming language. The function signature should be `def next_palindrome(n: int) -> int`.","solution":"def next_palindrome(n: int) -> int: Returns the next number that is a palindrome after the given number n. def is_palindrome(x: int) -> bool: s = str(x) return s == s[::-1] while True: n += 1 if is_palindrome(n): return n"},{"question":"Create a function in Python that takes as input a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appeared in the list. The function should demonstrate the use of data structures and dictionary operations in Python. Example: ```python Input: [1, 2, 2, 3, 3, 3, 4] Output: {1: 1, 2: 2, 3: 3, 4: 1} ```","solution":"def count_occurrences(lst): Returns a dictionary with unique integers from the list as keys and their occurrences as values. occurrence_dict = {} for num in lst: if num in occurrence_dict: occurrence_dict[num] += 1 else: occurrence_dict[num] = 1 return occurrence_dict"},{"question":"Given an array of integers `nums`, and an integer `k`, rotate the array to the right by `k` steps, where `k` is non-negative. You need to accomplish this in-place with `O(1)` extra space. Additionally, you must perform the rotation using a sequence of reversals. Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: Rotate steps: Step 1: Reverse the entire array: [7,6,5,4,3,2,1] Step 2: Reverse the first k elements: [5,6,7,4,3,2,1] Step 3: Reverse the rest: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: Rotate steps: Step 1: Reverse the entire array: [99,3,-100,-1] Step 2: Reverse the first k elements: [3,99,-100,-1] Step 3: Reverse the rest: [3,99,-1,-100] Example 3: Input: nums = [1], k = 0 Output: [1] Constraints: `1 <= nums.length <= 10^5` `-2^31 <= nums[i] <= 2^31 - 1` `0 <= k <= 10^5`","solution":"def rotate(nums, k): Rotates the array to the right by k steps. Args: nums: List[int] -- the array of integers to rotate. k: int -- the number of steps to rotate the array. Returns: None -- the function rotates the array in place. n = len(nums) k %= n # in case k is greater than the length of the array def reverse(start, end): Reverses elements in the nums array from index start to end (inclusive). Args: start: int -- the starting index. end: int -- the ending index. while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1 # Step 1: Reverse the entire array reverse(0, n - 1) # Step 2: Reverse the first k elements reverse(0, k - 1) # Step 3: Reverse the rest reverse(k, n - 1)"},{"question":"You have been given a dataset of flight records which contain information about various flights including attributes like flight number, departure airport, arrival airport, departure time, arrival time, and flight duration. Due to recent policy changes, the airport authorities want to analyze and optimize the flight schedules to reduce overall congestion and improve punctuality. Design a program that given the dataset of flight records, performs the following tasks: 1. Identifies and lists all flights that are delayed by more than 30 minutes based on their scheduled departure and actual departure times. 2. Calculates the average delay time for each airport based on the flights originating from that airport. 3. Suggests an optimized departure time for flights originating from congested airports. This optimized time should aim to reduce congestion by evenly distributing flights across non-peak hours, taking into account the average delay times calculated in step 2. 4. Outputs a new schedule with the suggested optimized departure times for each flight. Ensure that your program is efficient and can handle large datasets with thousands of flight records.","solution":"import pandas as pd import numpy as np from datetime import datetime, timedelta def identify_delayed_flights(flights): delayed_flights = [] for flight in flights: scheduled_time = datetime.strptime(flight[\'scheduled_departure\'], \'%Y-%m-%d %H:%M:%S\') actual_time = datetime.strptime(flight[\'actual_departure\'], \'%Y-%m-%d %H:%M:%S\') delay = (actual_time - scheduled_time).total_seconds() / 60.0 # delay in minutes if delay > 30: delayed_flights.append(flight) return delayed_flights def calculate_average_delay(flights): delay_dict = {} count_dict = {} for flight in flights: airport = flight[\'origin\'] scheduled_time = datetime.strptime(flight[\'scheduled_departure\'], \'%Y-%m-%d %H:%M:%S\') actual_time = datetime.strptime(flight[\'actual_departure\'], \'%Y-%m-%d %H:%M:%S\') delay = (actual_time - scheduled_time).total_seconds() / 60.0 # delay in minutes if airport not in delay_dict: delay_dict[airport] = 0 count_dict[airport] = 0 delay_dict[airport] += delay count_dict[airport] += 1 avg_delay_dict = {airport: (delay_dict[airport] / count_dict[airport]) for airport in delay_dict} return avg_delay_dict def optimize_departure_times(flights, avg_delay_dict): optimized_flights = [] for flight in flights: airport = flight[\'origin\'] avg_delay = avg_delay_dict.get(airport, 0) scheduled_time = datetime.strptime(flight[\'scheduled_departure\'], \'%Y-%m-%d %H:%M:%S\') optimized_time = scheduled_time + timedelta(minutes=-avg_delay) flight[\'optimized_departure\'] = optimized_time.strftime(\'%Y-%m-%d %H:%M:%S\') optimized_flights.append(flight) return optimized_flights # Example usage with a dataset: # Assuming `dataset` is a list of dictionaries containing flight records. dataset = [ {\'flight_number\': \'A101\', \'origin\': \'JFK\', \'destination\': \'LAX\', \'scheduled_departure\': \'2023-10-01 08:00:00\', \'actual_departure\': \'2023-10-01 08:45:00\'}, {\'flight_number\': \'A102\', \'origin\': \'JFK\', \'destination\': \'LAX\', \'scheduled_departure\': \'2023-10-01 09:00:00\', \'actual_departure\': \'2023-10-01 09:30:00\'}, {\'flight_number\': \'A103\', \'origin\': \'ATL\', \'destination\': \'LAX\', \'scheduled_departure\': \'2023-10-01 10:00:00\', \'actual_departure\': \'2023-10-01 10:05:00\'} ] # Step 1: Identify delayed flights delayed_flights = identify_delayed_flights(dataset) # Step 2: Calculate average delay per airport avg_delay_dict = calculate_average_delay(dataset) # Step 3: Optimize departure times optimized_flights = optimize_departure_times(dataset, avg_delay_dict)"},{"question":"Write a function to simplify a given Unix-style absolute path into its canonical path. The function should handle multiple and redundant slashes, current directory references (`.`), and parent directory references (`..`). Ensure the function correctly handles edge cases such as paths that attempt to traverse above the root directory. Example Inputs and Outputs: 1. Input: \'/home//foo/\' Output: \'/home/foo\' 2. Input: \'/a/./b/../../c/\' Output: \'/c\' 3. Input: \'/../\' Output: \'/\' 4. Input: \'/home//../bar\' Output: \'/bar\' Provide appropriate error handling, and ensure the function works in a variety of edge cases and follows the Unix filesystem path resolution rules accurately.","solution":"def simplify_path(path: str) -> str: Simplifies the given Unix-style absolute path into its canonical path. parts = path.split(\'/\') stack = [] for part in parts: if part == \'..\': if stack: stack.pop() elif part and part != \'.\': stack.append(part) return \'/\' + \'/\'.join(stack)"},{"question":"Create a function that takes an array of integers and an integer value, k, and determines if there are any two distinct indices i and j in the array such that nums[i] + nums[j] equals k. Function Signature: ```python def find_pair_with_sum(nums: List[int], k: int) -> bool: ``` Example: ```python nums = [1, 2, 3, 4] k = 5 # Output: True, because nums[0] + nums[2] = 1 + 4 = 5 nums = [1, 2, 3, 4] k = 8 # Output: False, there are no two distinct indices i and j such that nums[i] + nums[j] equals 8 ``` Constraints: - The function should return a boolean value. - The input list can contain both positive and negative integers. - The solution should have a time complexity of O(n), where n is the length of the input list.","solution":"from typing import List def find_pair_with_sum(nums: List[int], k: int) -> bool: Determines if there are any two distinct indices i and j in the array nums such that nums[i] + nums[j] equals k. seen = set() for num in nums: if k - num in seen: return True seen.add(num) return False"},{"question":"Given an integer array, write a function to find the sum of all the unique elements in the array. For example, if the input array is [1, 2, 2, 3, 4], the function should return 10 as 1, 2, 3, and 4 are the unique elements and their sum is 10.","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the given array. Parameters: arr (list): A list of integers. Returns: int: The sum of unique elements. return sum(set(arr))"},{"question":"Write a Python program that reads a list of strings and returns the longest string that can be made by concatenating unique characters from the list without repeating any character. Utilize helper functions to check the uniqueness of characters and the absence of repeating characters between different strings. Additionally, include error handling to manage potential null or empty string inputs and non-string items within the list. Finally, provide a detailed explanation of your implementation, highlighting how each function works.","solution":"def is_unique(s: str) -> bool: Checks if all characters in the string are unique. return len(s) == len(set(s)) def can_concatenate(s1: str, s2: str) -> bool: Checks if two strings can be concatenated without having repeating characters. return len(set(s1).intersection(set(s2))) == 0 def get_longest_unique_concatenation(strings: list) -> str: Returns the longest string that can be made by concatenating unique characters from the list without repeating any character. # Handle invalid input if not strings or not isinstance(strings, list) or any(not isinstance(s, str) for s in strings): return \\"\\" # Filter out strings that do not have all unique characters valid_strings = [s for s in strings if is_unique(s)] # Generate all combinations of valid strings and check their concatenation from itertools import combinations longest = \\"\\" for r in range(1, len(valid_strings) + 1): for combo in combinations(valid_strings, r): concat = \'\'.join(combo) if is_unique(concat) and len(concat) > len(longest): longest = concat return longest"},{"question":"Implement a function that takes as input the root of a binary search tree and returns the sum of all nodes with a value within a given range (inclusive). You need to implement a solution that avoids examining nodes that are not within the range. Assume the tree will have at least one node. # Function Signature ```python def range_sum_bst(root: TreeNode, L: int, R: int) -> int: pass ``` # Input - `root` (TreeNode): The root of the binary search tree. - `L` (int): The lower bound of the range. - `R` (int): The upper bound of the range. # Output - An integer representing the sum of all node values within the range [L, R] (inclusive). # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - -10^5 <= Node.val <= 10^5 - -10^5 <= L <= R <= 10^5 - The tree is a binary search tree, i.e., for each node, all the nodes in the left subtree have a value less than the node’s value, and all the nodes in the right subtree have a value greater than the node’s value. # Example ```text Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32 Explanation: The nodes with values 7, 10, and 15 are within the range [7, 15]. Their sum is 32. ``` ```text Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10 Output: 23 Explanation: The nodes with values 6, 7, and 10 are within the range [6, 10]. Their sum is 23. ``` # Note - You may assume that all node values are unique. - The tree is well-formed and valid. Implement the function in Python, and make sure to handle edge cases and optimize to minimize unnecessary comparisons.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def range_sum_bst(root: TreeNode, L: int, R: int) -> int: if not root: return 0 total_sum = 0 if L <= root.val <= R: total_sum += root.val if root.val > L: total_sum += range_sum_bst(root.left, L, R) if root.val < R: total_sum += range_sum_bst(root.right, L, R) return total_sum"},{"question":"This Python function is supposed to return the sum of the product of elements at corresponding positions in two lists. However, the function has several errors. Identify and fix the mistakes to ensure it works correctly. def sum_of_products(lst1, lst2): # Check if the lengths of both lists are equal if lst!.length != lst@len: return \'The lengths of both lists should be equal.\' product_sum = 0 # Iterate over the elements of the lists for i in rnage(len(lst1)): product_sum += lst[i] * lst2[i] return product_sum","solution":"def sum_of_products(lst1, lst2): # Check if the lengths of both lists are equal if len(lst1) != len(lst2): return \'The lengths of both lists should be equal.\' product_sum = 0 # Iterate over the elements of the lists for i in range(len(lst1)): product_sum += lst1[i] * lst2[i] return product_sum"},{"question":"Create a function in Python that takes a list of integers and an integer `k`. The function should return `True` if there are any two distinct elements in the list that add up to `k`, and `False` otherwise. The solution should have a time complexity of O(n).","solution":"def has_pair_with_sum(arr, k): Returns True if there are two distinct elements in arr that add up to k, else False. seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer that appears only once. Your task is to implement a function in Python that finds and returns the integer that appears only once. Your implementation should have a linear runtime complexity and use constant extra space. # Function Signature ```python def find_single_number(nums: List[int]) -> int: pass ``` # Input - The input parameter `nums` is a list of integers. # Output - The function should return a single integer that appears only once in the list. # Example ```python print(find_single_number([4, 1, 2, 1, 2])) # Output: 4 print(find_single_number([2, 2, 1])) # Output: 1 ``` # Constraints - The length of the list will be in the range `[1, 3 * 10^4]`. - Each integer in the list will be in the range `[-3 * 10^4, 3 * 10^4]`. # Note - You must design an algorithm that runs in O(n) time and uses only constant extra space.","solution":"from typing import List def find_single_number(nums: List[int]) -> int: Returns the integer that appears only once in the list. Every other integer appears exactly twice. This implementation uses XOR to achieve O(n) time complexity and O(1) extra space. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"Write a function that takes a positive integer as input and prints the Roman numeral representation of that number. Roman numerals are typically written largest to smallest from left to right. For example, 2 is written as II in Roman numeral, just two one\'s added together. But the number 4 is not written as IIII, instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: 1. I can be placed before V (5) and X (10) to make 4 and 9. 2. X can be placed before L (50) and C (100) to make 40 and 90. 3. C can be placed before D (500) and M (1000) to make 400 and 900. Ensure that your function handles numbers up to 3999, the largest number traditionally represented by Roman numerals. The function should also include validation to handle numbers outside this range, including zero and negative numbers, by appropriately returning a message indicating the input is invalid. Demonstrate your function with a set of sample inputs, and ensure the output is correct. Example inputs and expected outputs: - Input: 3549, Output: MMMDXLIX - Input: 944, Output: CMXLIV - Input: 1023, Output: MXXIII","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: A positive integer :return: A Roman numeral string representation of the number if num <= 0 or num > 3999: return \\"Invalid input\\" val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] syb = [\\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\"] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"You are given an array `arr` of non-negative integers. Your task is to find out if it is possible to rearrange the elements of the array such that no two adjacent elements have the same parity (evenness or oddness). Write a function `canRearrange(arr: List[int]) -> bool` that takes in a list `arr` and returns `True` if it\'s possible to rearrange the elements of the array to satisfy the condition, otherwise return `False`. # Example 1: Input: arr = [2, 3, 4, 7, 8] Output: True Explanation: One possible rearrangement is [2, 3, 4, 7, 8] (even, odd, even, odd, even). # Example 2: Input: arr = [1, 3, 5, 7] Output: False Explanation: All elements are odd, so there is no possible way to rearrange them to satisfy the condition. # Example 3: Input: arr = [1, 2, 3, 4, 5, 6] Output: True Explanation: One possible rearrangement is [1, 2, 3, 4, 5, 6] (odd, even, odd, even, odd, even). # Constraints: - 1 <= arr.length <= 1000 - 0 <= arr[i] <= 10^6","solution":"from typing import List def canRearrange(arr: List[int]) -> bool: count_even = sum(1 for x in arr if x % 2 == 0) count_odd = len(arr) - count_even return abs(count_even - count_odd) <= 1"},{"question":"Write a Python function that takes a list of integers and returns a list of those integers, but with duplicates removed and in the same order as their first appearance in the original list. Ensure your function runs efficiently on large lists. Do not use the built-in `set` function to solve this problem. For reference, consider the following erroneous code which does not preserve the order of first appearance: ```python def remove_duplicates(nums): return list(set(nums)) ``` Your task is to improve this function to maintain the order of first appearance while removing duplicates.","solution":"def remove_duplicates(nums): Takes a list of integers and returns a new list with duplicates removed, keeping the order of their first appearance in the original list. seen = set() unique_nums = [] for num in nums: if num not in seen: seen.add(num) unique_nums.append(num) return unique_nums"},{"question":"Design a function in Python, `find_non_repeating`, that takes a list of integers as an argument and returns the first non-repeating integer in the list. If all integers are repeating or the list is empty, the function should return `None`. Ensure your implementation is efficient, considering both time and space complexity.","solution":"def find_non_repeating(arr): Returns the first non-repeating integer in the list. If all integers are repeating or the list is empty, it returns None. # Dictionary to keep count of elements count_dict = {} # First pass to count all elements for num in arr: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Second pass to find the first non-repeating element for num in arr: if count_dict[num] == 1: return num return None"},{"question":"Create a function that takes a list of numbers and returns a new list containing only the prime numbers from the original list. Validate your function by testing it with the list [2, 3, 4, 5, 6, 7, 8, 9, 10].","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_primes(numbers): Filters out the prime numbers from the given list of numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python function that takes a list of integers and returns a new list with all duplicates removed, but the order of the original list elements should be preserved. The function should then be called on this input: `[4, 5, 4, 6, 7, 5, 6]`. The expected output is `[4, 5, 6, 7]`. To further challenge yourself, try to achieve this in O(n) time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of the original elements. :param lst: List of integers :return: A new list with duplicates removed seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result # Example usage: remove_duplicates([4, 5, 4, 6, 7, 5, 6]) # Expected output: [4, 5, 6, 7]"},{"question":"Develop a Python function that takes a string representing an arithmetic expression involving addition, subtraction, multiplication, and division, and evaluates it. The string expression may contain parentheses to enforce precedence. The function should handle integer and floating-point numbers and ensure that the division by zero is properly managed by raising an appropriate exception. Implement the solution without using the built-in `eval()` function or any other direct evaluation library.","solution":"import math def evaluate_expression(expression): Evaluates a string arithmetic expression involving +, -, *, / and parenthesis. Parameters: expression (str): The arithmetic expression to evaluate Returns: float: The result of evaluating the expression. Raises: ZeroDivisionError: If there is a division by zero in the expression. def parse_expression(expression): Parse an expression into tokens for easier handling number = \'\' tokens = [] for char in expression: if char in \'0123456789.\': number += char else: if number: tokens.append(float(number)) number = \'\' if char in \'+-*/()\': tokens.append(char) if number: tokens.append(float(number)) return tokens def apply_operator(operators, values): Apply an operator to the top of the value stack operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ZeroDivisionError(\\"division by zero\\") values.append(left / right) def precedence(operator): Return the precedence of an operator if operator in \'+-\': return 1 if operator in \'*/\': return 2 return 0 tokens = parse_expression(expression) operators = [] values = [] for token in tokens: if isinstance(token, float): values.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # popping the \'(\' else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"Implement a function in Python that takes a list of integers as an argument and returns a new list where each element is the product of all the numbers in the original list except the one at the current position. Do not use division in your solution. Analyze the time complexity of your implementation.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the numbers in the original list except the one at the current position. length = len(nums) result = [1] * length left = 1 for i in range(length): result[i] = left left *= nums[i] right = 1 for i in range(length - 1, -1, -1): result[i] *= right right *= nums[i] return result"},{"question":"Construct a Python function that takes a list of strings as an input and analyzes the frequency of each character across all the strings combined. The function should then identify the top three most frequently occurring characters and their respective counts. The function should handle edge cases, such as an empty string, and non-string items within the list. The function must be optimized to handle large lists with numerous long strings, ensuring efficiency in terms of both time and space complexity. In addition to the frequency analysis, the function should be able to handle multiple lists of strings at once. This requires the function to return a dictionary where the keys represent input lists and the values are tuples. Each tuple should consist of a sorted list of the three most frequent characters and their counts, and a boolean indicating if all characters in the input list are letters. The function should also include appropriate error-handling to manage unexpected or malformed inputs, enhancing the robustness and stability of the solution. Moreover, the function should correctly process strings with mixed case letters treating them as distinct characters.","solution":"from collections import Counter import string def analyze_frequency(lists_of_strings): Takes multiple lists of strings as input and analyzes the frequency of each character across all the strings combined. Returns a dictionary where keys represent input lists and values are tuples of the three most frequent characters (with their counts) and a boolean indicating if all characters in the input list are letters. result = {} for i, strings_list in enumerate(lists_of_strings): # Combine all strings into a single string combined = \\"\\".join([str(s) for s in strings_list if isinstance(s, str)]) if not combined: # Handle empty strings list result[i] = ([], False) continue # Analyze the frequency of each character counter = Counter(combined) # Find top 3 most frequent characters most_common = counter.most_common(3) # Check if all characters are letters all_letters = all(c in string.ascii_letters for c in combined) # Save result result[i] = (most_common, all_letters) return result"},{"question":"Design a system for real-time monitoring and dynamic load balancing in a distributed web server environment. Your solution should include mechanisms for detecting server overload, a strategy for redistributing requests to maintain optimal performance, and a protocol for ramping down underutilized servers. Ensure your design accounts for maintaining session persistence and handling state information across distributed systems.","solution":"class Server: def __init__(self, id, capacity): self.id = id self.capacity = capacity self.current_load = 0 def is_overloaded(self): return self.current_load > self.capacity def handle_request(self, load): self.current_load += load def release_load(self, load): self.current_load -= load if self.current_load < 0: self.current_load = 0 class LoadBalancer: def __init__(self, servers): self.servers = servers self.session_map = {} def detect_overload(self): return [server for server in self.servers if server.is_overloaded()] def distribute_request(self, request, session_id): if session_id in self.session_map: server = self.session_map[session_id] else: server = min(self.servers, key=lambda x: x.current_load) self.session_map[session_id] = server server.handle_request(request.load) return server def redistribute_load(self): overloaded_servers = self.detect_overload() for server in overloaded_servers: extra_load = server.current_load - server.capacity underloaded_servers = sorted(self.servers, key=lambda x: x.current_load) while extra_load > 0 and underloaded_servers: underloaded_server = underloaded_servers.pop(0) if underloaded_server.current_load + extra_load <= underloaded_server.capacity: underloaded_server.handle_request(extra_load) server.release_load(extra_load) extra_load = 0 else: transfer_load = underloaded_server.capacity - underloaded_server.current_load underloaded_server.handle_request(transfer_load) server.release_load(transfer_load) extra_load -= transfer_load def ramp_down_servers(self): underutilized_servers = [server for server in self.servers if server.current_load == 0] for server in underutilized_servers: self.servers.remove(server) class Request: def __init__(self, load): self.load = load"},{"question":"What is the next number in this sequence: 1, 4, 9, 16, 25, 36, ___? Select one from the options given: A) 42 B) 44 C) 49 D) 52","solution":"def next_square_number(sequence): Given a sequence of square numbers, return the next number in the sequence. n = len(sequence) + 1 next_number = n * n return next_number"},{"question":"Create an algorithm that merges two sorted arrays into a single sorted array without using any built-in sort functions. The merged array should be sorted in ascending order. Additionally, identify and return the median value of the resulting merged array. If the merged array has an even number of elements, the median should be the average of the two middle numbers. arr1 = [1, 3, 5] arr2 = [2, 4, 6]","solution":"def merge_and_find_median(arr1, arr2): Merges two sorted arrays into a single sorted array and returns the median value. If the merged array has an even number of elements, the median is the average of the two middle values. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 n = len(merged_array) if n % 2 == 1: median = merged_array[n // 2] else: median = (merged_array[n // 2 - 1] + merged_array[n // 2]) / 2 return merged_array, median"},{"question":"You are given a list of integers where each element appears twice except for one. Write a Python function to find this single number. Your solution should have linear runtime complexity. Implement the function using a dictionary. ```python def find_single_number(nums: list) -> int: Finds the element in the list that appears exactly once. Args: nums (list): A list of integers where each element appears twice except for one. Returns: int: The single number that appears only once. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 for num in nums: if count[num] == 1: return num # Example usage: nums = [4, 1, 2, 1, 2] print(find_single_number(nums)) # Output: 4 ```","solution":"def find_single_number(nums: list) -> int: Finds the element in the list that appears exactly once. Args: nums (list): A list of integers where each element appears twice except for one. Returns: int: The single number that appears only once. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 for num in nums: if count[num] == 1: return num"},{"question":"Create a function to efficiently implement a simple text editor with undo functionality. Requirements - Implement a class `TextEditor` that supports the following methods: - `append(text: str)`: Appends the string `text` to the end of the current text. - `delete(k: int)`: Deletes the last `k` characters from the current text. - `print()`: Prints the current text. - `undo()`: Reverts the last append or delete operation. Note: - It\'s guaranteed that the number of operations will not exceed 10^4, and undo operations will never run out of text states to revert to. Example Usage ```python editor = TextEditor() editor.append(\\"hello\\") editor.print() # Outputs: \\"hello\\" editor.append(\\" world\\") editor.print() # Outputs: \\"hello world\\" editor.delete(6) editor.print() # Outputs: \\"hello\\" editor.undo() editor.print() # Outputs: \\"hello world\\" editor.undo() editor.print() # Outputs: \\"hello\\" ``` Solution Skeleton You may start with the following skeleton: ```python class TextEditor: def __init__(self): self.text = \\"\\" # Stack to store the state of text for undo operations self.history = [] def append(self, text: str): self.history.append(self.text) self.text += text def delete(self, k: int): self.history.append(self.text) self.text = self.text[:-k] def print(self): print(self.text) def undo(self): if self.history: self.text = self.history.pop() # Sample usage editor = TextEditor() editor.append(\\"example\\") editor.print() # Outputs: \\"example\\" ``` Implement the remaining methods and ensure they function as described in the requirements.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" # Stack to store the state of text for undo operations self.history = [] def append(self, text: str): self.history.append(self.text) self.text += text def delete(self, k: int): self.history.append(self.text) self.text = self.text[:-k] def get_text(self): # Added this method for testing purposes return self.text def undo(self): if self.history: self.text = self.history.pop()"},{"question":"Write a function in Python named `char_count` that takes a string as an argument and returns a dictionary containing the count of each character in the string. Ignore spaces and ensure that the character counts are case-insensitive. For example, the input `character discourse` should return `{\'c\': 3, \'h\': 1, \'a\': 2, \'r\': 3, \'t\': 1, \'e\': 2, \'d\': 1, \'i\': 1, \'s\': 2, \'o\': 1, \'u\': 1}`.","solution":"def char_count(s): Returns a dictionary containing the count of each character in the input string. Ignores spaces and is case-insensitive. Parameters: s (str): The input string. Returns: dict: Dictionary containing the count of each character. count = {} for char in s.replace(\\" \\", \\"\\").lower(): count[char] = count.get(char, 0) + 1 return count"},{"question":"Write a function `isValidIP` that takes a string as input and returns `True` if it is a valid IPv4 address and `False` otherwise. An IPv4 address is valid if it consists of four octets, each ranging from 0 to 255, separated by dots (`.`). Leading zeros in an octet are not allowed unless the octet is `0`. # Examples ```python isValidIP(\\"192.168.0.1\\") # True isValidIP(\\"255.255.255.255\\") # True isValidIP(\\"256.100.50.25\\") # False (256 is not a valid octet) isValidIP(\\"192.168.01.1\\") # False (leading zero in \'01\') isValidIP(\\"192.168.0.\\") # False (missing octet) isValidIP(\\"192..168.0.1\\") # False (consecutive dots) isValidIP(\\"192.168.0.1.1\\") # False (more than 4 octets) ``` # Constraints - The input string contains only digits and dots.","solution":"def isValidIP(ip): Returns True if the given string is a valid IPv4 address, False otherwise. parts = ip.split(\'.\') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if len(part) > 1 and part[0] == \'0\': return False if not (0 <= int(part) <= 255): return False return True"},{"question":"Implement a function that checks whether a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same backward as forward. The function should return True if the string can be rearranged into a palindrome, and False otherwise. from collections import Counter def can_form_palindrome(s: str) -> bool: Determine if the input string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if the number of characters with an odd count is at most one. char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return odd_counts <= 1 # Examples: # >>> can_form_palindrome(\\"carrace\\") # True # Explanation: One possible rearrangement is \\"racecar\\", which is a palindrome. # >>> can_form_palindrome(\\"hello\\") # False # Explanation: There is no way to rearrange \\"hello\\" to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determine if the input string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if the number of characters with an odd count is at most one. char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return odd_counts <= 1"},{"question":"Design and implement a Python class to simulate a basic online shopping cart system. The class should allow users to add items, remove items, view the current items in the cart, and calculate the total cost. Each item should have a name, price, and quantity. Additionally, implement a method to apply a discount code that reduces the total cost by a certain percentage.","solution":"class ShoppingCart: def __init__(self): self.cart = [] def add_item(self, name, price, quantity): Add an item to the cart with the given name, price, and quantity. self.cart.append({\'name\': name, \'price\': price, \'quantity\': quantity}) def remove_item(self, name): Remove an item from the cart by its name. self.cart = [item for item in self.cart if item[\'name\'] != name] def view_items(self): View all items currently in the cart. return self.cart def calculate_total(self): Calculate the total cost of items in the cart. return sum(item[\'price\'] * item[\'quantity\'] for item in self.cart) def apply_discount(self, discount_percentage): Apply a discount to the total cost. total = self.calculate_total() discount = total * (discount_percentage / 100) return total - discount"},{"question":"You are given a list of strings and a single string `target`. Write a function that checks if the `target` can be constructed by concatenating elements from the list of strings any number of times, in any order. Each element in the list can be used multiple times. The function should return a boolean indicating whether or not the `target` string can be formed. **Function Signature:** ```python def can_construct(target: str, word_bank: List[str]) -> bool: pass ``` **Input:** - `target` (string): The target string to construct. - `word_bank` (List of strings): The list of strings available for constructing the target. **Output:** - Return True if the `target` can be constructed, False otherwise. **Example:** ```python can_construct(\\"abcdef\\", [\\"ab\\", \\"abc\\", \\"cd\\", \\"def\\", \\"abcd\\"]) -> True can_construct(\\"skateboard\\", [\\"bo\\", \\"rd\\", \\"ate\\", \\"t\\", \\"ska\\", \\"sk\\", \\"boar\\"]) -> False can_construct(\\"enterapotentpot\\", [\\"a\\", \\"p\\", \\"ent\\", \\"enter\\", \\"ot\\", \\"o\\", \\"t\\"]) -> True ```","solution":"from typing import List def can_construct(target: str, word_bank: List[str]) -> bool: Determine if the target string can be constructed from the word bank elements. memo = {} def can_construct_memo(target): if target in memo: return memo[target] if target == \\"\\": return True for word in word_bank: if target.startswith(word): suffix = target[len(word):] if can_construct_memo(suffix): memo[target] = True return True memo[target] = False return False return can_construct_memo(target)"},{"question":"Write a Python function to perform clustering on a dataset using the K-means algorithm. The function should accept the number of clusters as a parameter and return the cluster centroids and labels for each data point. Additionally, provide a method to evaluate the clustering performance using the silhouette score. Explain how the silhouette score helps in determining the quality of the clusters.","solution":"import numpy as np from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score def kmeans_clustering(data, n_clusters): Perform K-means clustering on the input data. Parameters: data (np.array): The input data for clustering. n_clusters (int): The number of clusters. Returns: tuple: Tuple containing: - centroids (np.array): Coordinates of cluster centers. - labels (np.array): Labels of each point. kmeans = KMeans(n_clusters=n_clusters, random_state=42) kmeans.fit(data) centroids = kmeans.cluster_centers_ labels = kmeans.labels_ return centroids, labels def evaluate_clustering(data, labels): Evaluate the performance of clustering using the silhouette score. Parameters: data (np.array): The input data for clustering. labels (np.array): Labels of each point. Returns: float: Silhouette score of the clustering. score = silhouette_score(data, labels) return score # Explanation of silhouette score: # The silhouette score is a measure of how similar an object is to its own cluster (cohesion) # compared to other clusters (separation). It ranges from -1 to +1. A high value close to +1 # indicates that the object is well matched to its own cluster and poorly matched to neighboring clusters. # A value around 0 indicates that the object is on or very close to the decision boundary between # two neighboring clusters. Negative values indicate that those points might have been assigned to # the wrong cluster."},{"question":"Given a string containing a sequence of words separated by spaces, write a function to reverse the order of the words and return the modified string. Ensure the function maintains the original whitespace separating the words. Example: Input: \\"Hello world this is coding\\" Output: \\"coding is this world Hello\\"","solution":"def reverse_words(s): Reverses the order of words in a string while maintaining the original whitespace. :param s: The input string containing a sequence of words separated by spaces :type s: str :return: The modified string with words in reverse order :rtype: str words = s.split() reversed_words = words[::-1] reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Write a Python function that takes in an array of integers and outputs a new array where each element at index `i` of the new array is the product of all the numbers in the original array except the one at `i`. Ensure that your solution works efficiently even for large arrays, avoiding the use of division.","solution":"def product_except_self(nums): Given an array nums of n integers, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. :param nums: List[int] - The input array of integers :return: List[int] - The array where each element is the product of all the elements except itself n = len(nums) output = [1] * n # Calculate product of all elements to the left of each element left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Calculate product of all elements to the right of each element right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Modify the function `reverse_string` so that it can correctly handle and reverse strings containing special characters and numbers. def reverse_string(s): return s[::-1]","solution":"def reverse_string(s): Returns the reversed string of s, handling special characters and numbers. return s[::-1]"},{"question":"Given an SQL database schema describing a basic library management system below, write a SQL query to address each of the following tasks. The schema includes tables for \'books\', \'authors\', \'members\', \'loans\', \'branches\', and \'branches_books\'. # Schema ```sql create table authors ( author_id integer primary key, author_name varchar(100) not null ); create table books ( book_id integer primary key, title varchar(100) not null, author_id integer, foreign key (author_id) references authors (author_id) ); create table members ( member_id integer primary key, member_name varchar(100) not null ); create table loans ( loan_id integer primary key, book_id integer, member_id integer, loan_date date, return_date date, foreign key (book_id) references books (book_id), foreign key (member_id) references members (member_id) ); create table branches ( branch_id integer primary key, branch_name varchar(100) not null ); create table branches_books ( branch_id integer, book_id integer, copies integer, foreign key (branch_id) references branches (branch_id), foreign key (book_id) references books (book_id), primary key (branch_id, book_id) ); ``` # Tasks 1. Write a query to list all books that are currently on loan, including the name of the member who borrowed each book and the due date for return. 2. Write a query to find the number of copies available for each book title in a specific branch, given the branch id. 3. Write a query to list the top 3 authors who have the highest number of their books borrowed, including the corresponding number of borrowed books. # Query for Task 1 ```sql SELECT b.title, m.member_name, l.return_date FROM loans l JOIN books b ON l.book_id = b.book_id JOIN members m ON l.member_id = m.member_id WHERE l.return_date IS NULL; ``` # Query for Task 2 ```sql SELECT b.title, bb.copies FROM branches_books bb JOIN books b ON bb.book_id = b.book_id WHERE bb.branch_id = ?; ``` Replace `?` with the specific branch id. # Query for Task 3 ```sql SELECT a.author_name, COUNT(l.book_id) AS books_borrowed FROM loans l JOIN books b ON l.book_id = b.book_id JOIN authors a ON b.author_id = a.author_id GROUP BY a.author_id, a.author_name ORDER BY books_borrowed DESC LIMIT 3; ```","solution":"def task1_query(): Returns the SQL query for Task 1. return SELECT b.title, m.member_name, l.return_date FROM loans l JOIN books b ON l.book_id = b.book_id JOIN members m ON l.member_id = m.member_id WHERE l.return_date IS NULL; def task2_query(branch_id): Returns the SQL query for Task 2 with the specified branch id. return f SELECT b.title, bb.copies FROM branches_books bb JOIN books b ON bb.book_id = b.book_id WHERE bb.branch_id = {branch_id}; def task3_query(): Returns the SQL query for Task 3. return SELECT a.author_name, COUNT(l.book_id) AS books_borrowed FROM loans l JOIN books b ON l.book_id = b.book_id JOIN authors a ON b.author_id = a.author_id GROUP BY a.author_id, a.author_name ORDER BY books_borrowed DESC LIMIT 3;"},{"question":"Implement a function to perform matrix rotation. Specifically, given an NxN matrix represented as a list of lists, rotate the matrix 90 degrees clockwise in place without using any additional matrix or list. Provide efficient and readable code that properly handles both even and odd dimensions. ```python def rotate_matrix(matrix: list): Rotate the NxN matrix 90 degrees clockwise in place without using extra space. Args: matrix (list of lists): NxN matrix to be rotated. Example: >>> matrix = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> rotate_matrix(matrix) >>> matrix [[7, 4, 1], [8, 5, 2], [9, 6, 3]] n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp ```","solution":"def rotate_matrix(matrix: list): Rotate the NxN matrix 90 degrees clockwise in place without using extra space. Args: matrix (list of lists): NxN matrix to be rotated. Example: >>> matrix = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> rotate_matrix(matrix) >>> matrix [[7, 4, 1], [8, 5, 2], [9, 6, 3]] n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"Write a function that takes a list of strings and returns a new list containing only the strings that have no duplicate characters. Each string in the output list should be in the same order they appeared in the input list. Example: ``` Input: [\\"hello\\", \\"world\\", \\"abc\\", \\"deed\\"] Output: [\\"world\\", \\"abc\\"] ```","solution":"def no_duplicate_chars(strings): Takes a list of strings and returns a new list containing only the strings that have no duplicate characters. def has_no_duplicates(s): return len(s) == len(set(s)) return [s for s in strings if has_no_duplicates(s)]"},{"question":"Write a Python function that takes a dictionary of student names and a list of their grades. The dictionary keys are student names, and the values are lists of grades (which can be empty). The function should return a new dictionary where each student name maps to their highest grade. If a student has no grades, they should map to `None`. # Example ```python students = { \\"Alice\\": [85, 92, 78], \\"Bob\\": [70, 88], \\"Charlie\\": [] } # Output: # { # \\"Alice\\": 92, # \\"Bob\\": 88, # \\"Charlie\\": None # } ```","solution":"def highest_grades(students): Returns a new dictionary where each student name maps to their highest grade. If a student has no grades, they should map to `None`. Parameters: students (dict): A dictionary with student names as keys and lists of grades as values. Returns: dict: A dictionary with student names as keys and their highest grade or `None` as values. return {student: max(grades) if grades else None for student, grades in students.items()}"},{"question":"Given a string `s`, write a function to determine the first non-repeating character in it and return its index. If it doesn\'t exist, return -1. You may assume that the string contains only lowercase English letters. Example: ``` Input: s = \\"loveleetcode\\" Output: 2 ``` Explanation: The first non-repeating character is \'v\', which appears only once in the string and its index is 2.","solution":"def first_non_repeating_character(s): Returns the index of the first non-repeating character in the string s. If no such character exists, return -1. # Create a frequency dictionary char_count = {} # Count the occurrence of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the index of the first character that has a count of 1 for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Create an optimized algorithm using the Sort class in Python, aimed at efficiently handling and sorting a large dataset of customer orders in real time. Your solution should focus on minimizing the computational overhead and ensuring the sorted data is immediately available for next-step processing in a distributed system environment.","solution":"import heapq class OrderSorter: def __init__(self): self.min_heap = [] def add_order(self, order): Adds an order to the sorting system. Assumes each order is a tuple where the first element is a sortable key (e.g., timestamp or order ID). heapq.heappush(self.min_heap, order) def get_sorted_orders(self): Returns all orders sorted by the sortable key. sorted_orders = [] while self.min_heap: sorted_orders.append(heapq.heappop(self.min_heap)) return sorted_orders"},{"question":"Write a function that takes an integer `n` and returns a list of all unique pairs `(a, b)` such that `1 <= a < b <= n` and `a * b` is even. The returned list should be sorted in ascending order based on the first element `a`. Use only basic programming constructs and avoid using pre-built sorting functions. Example: ``` Input: 5 Output: [(1, 2), (1, 4), (2, 3), (2, 4), (2, 5), (3, 4), (4, 5)] ```","solution":"def unique_pairs(n): Returns a list of all unique pairs (a, b) such that 1 <= a < b <= n and a * b is even. The list is sorted in ascending order based on the first element `a`. pairs = [] for a in range(1, n): for b in range(a + 1, n + 1): if (a * b) % 2 == 0: pairs.append((a, b)) return pairs"},{"question":"Write a program that processes a list of student names and their associated grades to calculate and display the average grade for the class. Each student has a single grade, and grades are integers between 0 and 100. Your program should also identify and display the student(s) with the highest grade and the student(s) with the lowest grade. Ensure your program handles the possibility of ties for both the highest and lowest grades. # Requirements: 1. Read input from the user for student names and their grades. 2. Calculate the average grade for the class. 3. Identify and display the student(s) with the highest grade. 4. Identify and display the student(s) with the lowest grade. 5. Handle edge cases, such as empty inputs and multiple students having the same grades. # Input Format: - The first line contains an integer, `n`, representing the number of students. - The next `n` lines each contain a student\'s name (string) and their grade (integer) separated by a space. # Output Format: - Print the average grade rounded to two decimal places. - Print the name(s) of the student(s) with the highest grade. - Print the name(s) of the student(s) with the lowest grade. # Example: Input: ``` 4 Alice 78 Bob 92 Catherine 85 David 92 ``` Output: ``` Average grade: 86.75 Highest grade: Bob, David Lowest grade: Alice ``` # Notes: - Use appropriate data structures to store and process the input data. - Ensure to handle edge cases such as no students, all students having the same grade, and variations in input format. - Explain the time and space complexity of your solution.","solution":"def process_student_grades(student_grades): Processes a list of student names and their grades to calculate and display the average grade for the class, the student(s) with the highest grade, and the student(s) with the lowest grade. Args: student_grades (list of tuples): A list of tuples where each tuple contains a student\'s name (str) and their grade (int). Returns: tuple: A tuple containing the average grade (float), a list of students with the highest grade (list of str), and a list of students with the lowest grade (list of str). if not student_grades: return (0.0, [], []) total_grade = 0 max_grade = -1 min_grade = 101 highest_grade_students = [] lowest_grade_students = [] for name, grade in student_grades: total_grade += grade if grade > max_grade: max_grade = grade highest_grade_students = [name] elif grade == max_grade: highest_grade_students.append(name) if grade < min_grade: min_grade = grade lowest_grade_students = [name] elif grade == min_grade: lowest_grade_students.append(name) average_grade = round(total_grade / len(student_grades), 2) return (average_grade, highest_grade_students, lowest_grade_students)"},{"question":"Design a function in Python that takes a list of integers and returns a new list containing only the elements that are greater than the arithmetic mean of the original list. The order of elements in the returned list should be the same as their order in the input list.","solution":"def greater_than_mean(lst): Returns a new list containing only the elements that are greater than the arithmetic mean of the original list. :param lst: List of integers :return: List of integers greater than the arithmetic mean if not lst: return [] mean = sum(lst) / len(lst) result = [x for x in lst if x > mean] return result"},{"question":"Develop a programmatic solution to implement a custom stack data structure that supports typical stack operations such as push, pop, peek, and isEmpty. In addition, the stack should provide a function getMin() that returns the minimum element in the stack in constant time. Assume that all elements inserted into the stack are integers. The stack should be designed to handle a dynamic range of elements, ensuring optimal performance for push and pop operations, which should both run in constant time complexity. Implement thorough exception handling to manage edge cases such as popping from an empty stack or attempting to peek when the stack has no elements. Provide comprehensive documentation to ensure the code is maintainable and scalable for future enhancements or integrations.","solution":"class MinStack: def __init__(self): Initialize the MinStack with two stacks: - one for storing the elements themselves, - one for keeping track of the minimum elements. self.stack = [] self.min_stack = [] def push(self, val: int) -> None: Push an integer onto the main stack and update the min stack. self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self) -> None: Remove the element on the top of the stack, and update the min stack. if not self.stack: raise IndexError(\\"pop from empty stack\\") top = self.stack.pop() if top == self.min_stack[-1]: self.min_stack.pop() def peek(self) -> int: Get the top element of the stack without removing it. if not self.stack: raise IndexError(\\"peek from empty stack\\") return self.stack[-1] def isEmpty(self) -> bool: Return True if stack is empty, False otherwise. return len(self.stack) == 0 def getMin(self) -> int: Retrieve the minimum element in the stack. if not self.min_stack: raise IndexError(\\"getMin from empty stack\\") return self.min_stack[-1]"},{"question":"Discuss the concept of graph traversal in computer science. Explain the difference between depth-first search (DFS) and breadth-first search (BFS) algorithms, including their respective use cases and advantages. Implement both algorithms to traverse a given graph and analyze their time and space complexities using Big O notation. Provide examples where one might be preferred over the other in terms of practical application or performance. Additionally, describe how these traversal methods can be adapted for weighted graphs and the extra considerations that may be required.","solution":"class Graph: def __init__(self): self.graph = {} def add_edge(self, vertex, edge): if vertex in self.graph: self.graph[vertex].append(edge) else: self.graph[vertex] = [edge] def dfs(self, start): visited = set() result = [] def _dfs(vertex): if vertex not in visited: visited.add(vertex) result.append(vertex) for neighbor in self.graph.get(vertex, []): _dfs(neighbor) _dfs(start) return result def bfs(self, start): visited = set() queue = [start] result = [] while queue: vertex = queue.pop(0) if vertex not in visited: visited.add(vertex) result.append(vertex) queue.extend(neighbor for neighbor in self.graph.get(vertex, []) if neighbor not in visited) return result"},{"question":"Using Python and the built-in `json` module, write a function that transforms a JSON string representing a record of student grades into a dictionary and calculates the average grade for each student. The input JSON string will be structured as a list of dictionaries where each dictionary contains a student\'s name and grades in various subjects. The output should be a dictionary where each key is a student\'s name and the value is their average grade. Example Input: ```json [ {\\"name\\": \\"Alice\\", \\"math\\": 85, \\"science\\": 92, \\"english\\": 78}, {\\"name\\": \\"Bob\\", \\"math\\": 79, \\"science\\": 85, \\"english\\": 88}, {\\"name\\": \\"Charlie\\", \\"math\\": 92, \\"science\\": 90, \\"english\\": 85} ] ``` Example Output: ```python { \\"Alice\\": 85.0, \\"Bob\\": 84.0, \\"Charlie\\": 89.0 } ```","solution":"import json def calculate_average_grades(json_string): Transforms a JSON string representing a record of student grades into a dictionary and calculates the average grade for each student. :param json_string: A JSON string of student grades :return: A dictionary with each student\'s name as a key and their average grade as the value student_records = json.loads(json_string) student_averages = {} for record in student_records: name = record.pop(\'name\') grades = list(record.values()) average_grade = sum(grades) / len(grades) student_averages[name] = average_grade return student_averages"},{"question":"Compose a function that takes a list of integers and returns a new list containing only the unique elements from the original list, preserving their order of first appearance.","solution":"def unique_elements(lst): Returns a new list containing only the unique elements from the original list, preserving their order of first appearance. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Design a function named \'remove_duplicates\' that takes a list of integers and returns a new list with all the duplicate elements removed, preserving the order of their first appearance. Your implementation should strive to maintain optimal time complexity. Also, create an additional function named \'performance_test\' to test the time efficiency of your \'remove_duplicates\' function using a large dataset. The \'performance_test\' function should generate a list of random integers (at least 1 million elements), measure the time taken for \'remove_duplicates\' to process this list, and print out the time taken.","solution":"from collections import OrderedDict def remove_duplicates(lst): Removes duplicates from the list while preserving the order of their first appearance. Args: lst (list): A list of integers. Returns: list: A new list with duplicates removed. return list(OrderedDict.fromkeys(lst)) def performance_test(): import random import time # Generate a list of 1 million random integers between 1 and 1000 large_list = [random.randint(1, 1000) for _ in range(1000000)] start_time = time.time() result = remove_duplicates(large_list) end_time = time.time() print(f\\"Time taken to remove duplicates: {end_time - start_time} seconds\\")"},{"question":"Write a function in Python that takes two strings as input and returns `True` if they are anagrams of each other (i.e., they contain the same characters with the same frequency) without using any in-built sorting methods. Make sure the function handles uppercase and lowercase characters as the same. For example, the strings \\"listen\\" and \\"silent\\" are anagrams, as well as \\"Conversation\\" and \\"Voices Rant On\\". Example: Input: string1 = \\"Dormitory\\" string2 = \\"Dirty Room\\" Output: True","solution":"def are_anagrams(string1, string2): Returns True if string1 and string2 are anagrams of each other, ignoring case and spaces. Args: string1 (str): The first string. string2 (str): The second string. Returns: bool: True if the strings are anagrams, False otherwise. # Normalize strings: convert to lowercase and remove spaces. s1 = string1.replace(\\" \\", \\"\\").lower() s2 = string2.replace(\\" \\", \\"\\").lower() # Create dictionaries to count character frequencies char_count1 = {} char_count2 = {} # Count characters for the first string for char in s1: if char in char_count1: char_count1[char] += 1 else: char_count1[char] = 1 # Count characters for the second string for char in s2: if char in char_count2: char_count2[char] += 1 else: char_count2[char] = 1 # Compare the two dictionaries return char_count1 == char_count2"},{"question":"Design a neural network using PyTorch to predict the prices of houses based on various features such as the number of rooms, size of the house, and neighborhood quality. The dataset contains an additional column with historical price trends for each neighborhood. Develop a model that incorporates this additional information into the prediction routine. Evaluate the model\'s performance using Mean Absolute Error (MAE). Discuss how the inclusion of neighborhood trends influences the model\'s predictions.","solution":"import torch import torch.nn as nn import torch.optim as optim from sklearn.metrics import mean_absolute_error class HousePricePredictor(nn.Module): def __init__(self, input_dim): super(HousePricePredictor, self).__init__() self.fc1 = nn.Linear(input_dim, 128) self.fc2 = nn.Linear(128, 64) self.fc3 = nn.Linear(64, 32) self.fc4 = nn.Linear(32, 1) def forward(self, x): x = torch.relu(self.fc1(x)) x = torch.relu(self.fc2(x)) x = torch.relu(self.fc3(x)) x = self.fc4(x) return x def train_model(model, dataloader, epochs=100): criterion = nn.MSELoss() optimizer = optim.Adam(model.parameters(), lr=0.001) for epoch in range(epochs): for inputs, targets in dataloader: optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, targets) loss.backward() optimizer.step() return model def evaluate_model(model, X_test, y_test): model.eval() with torch.no_grad(): predictions = model(X_test).numpy() return mean_absolute_error(y_test, predictions)"},{"question":"Implement a function `string_permutation(s1: str, s2: str) -> bool` that takes two strings `s1` and `s2`, and returns `True` if one string is a permutation of the other, and `False` otherwise. A permutation is a rearrangement of characters. The function should be case-sensitive. If the two strings are not the same length, they cannot be permutations of each other. For example: ``` string_permutation(\\"abc\\", \\"cab\\") -> True string_permutation(\\"hello\\", \\"bello\\") -> False ```","solution":"def string_permutation(s1: str, s2: str) -> bool: Returns True if s1 is a permutation of s2, and False otherwise. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"Write a function to simulate the checkout process for an online shopping cart. The function should take in a list of items, where each item is represented as a dictionary with keys \\"name\\", \\"price\\", and \\"quantity\\". The function should calculate the total price of items in the cart, including a 10% sales tax, and return a summary as a dictionary with \\"subtotal\\", \\"sales_tax\\", and \\"total\\" as keys. If any item has a \\"quantity\\" of 0 or less, it should be excluded from the total. Ensure all prices and totals are rounded to two decimal places.","solution":"def checkout(cart): Simulates the checkout process for an online shopping cart. Arguments: cart: List of dictionaries where each dictionary represents an item with keys \\"name\\", \\"price\\", and \\"quantity\\". Returns: A dictionary with \\"subtotal\\", \\"sales_tax\\", and \\"total\\" keys. subtotal = 0.0 for item in cart: if item[\'quantity\'] > 0: subtotal += item[\'price\'] * item[\'quantity\'] subtotal = round(subtotal, 2) sales_tax = round(subtotal * 0.10, 2) total = round(subtotal + sales_tax, 2) return { \\"subtotal\\": subtotal, \\"sales_tax\\": sales_tax, \\"total\\": total }"},{"question":"Develop a function that takes a list of dictionaries as an input, where each dictionary represents a product with keys \'name\', \'price\', and \'quantity\'. Your task is to create a summary report that includes the total number of products, the total quantity of all products, and the total value of all products (which is the sum of price multiplied by quantity for each product). Additionally, implement error handling such that if any dictionary is missing one or more of the required keys, it logs a warning and continues processing the rest. The function should be optimally efficient to handle lists containing thousands of product dictionaries.","solution":"def summary_report(products): Takes a list of dictionaries representing products and generates a summary report. :param products: List of dictionaries, each with keys \'name\', \'price\', and \'quantity\'. :return: A dictionary containing the total number of products, total quantity, and total value. import logging logging.basicConfig(level=logging.WARNING) total_products = 0 total_quantity = 0 total_value = 0.0 for product in products: if not all(key in product for key in [\'name\', \'price\', \'quantity\']): logging.warning(f\\"Product {product} is missing one or more required keys.\\") continue total_products += 1 total_quantity += product[\'quantity\'] total_value += product[\'price\'] * product[\'quantity\'] return { \'total_products\': total_products, \'total_quantity\': total_quantity, \'total_value\': total_value }"},{"question":"Create a function that takes a list of integers and filters out all prime numbers. The function should then calculate and return the sum of the remaining integers. If the list contains no non-prime numbers, the function should return 0. A prime number is defined as a number greater than 1 that has no divisors other than 1 and itself. ```python def sum_of_non_primes(numbers: List[int]) -> int: This function takes a list of integers and filters out all prime numbers. It then returns the sum of the remaining integers. If there are no non-prime numbers, it returns 0. >>> sum_of_non_primes([2, 3, 5, 7, 10, 12]) 22 >>> sum_of_non_primes([13, 17, 19, 23]) 0 >>> sum_of_non_primes([4, 6, 8, 9, 10]) 37 pass ```","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_non_primes(numbers: List[int]) -> int: This function takes a list of integers and filters out all prime numbers. It then returns the sum of the remaining integers. If there are no non-prime numbers, it returns 0. non_primes = [n for n in numbers if not is_prime(n)] return sum(non_primes)"},{"question":"Write a function that simulates a basic stock trading strategy and analyze its performance over a given time period. The function will take as input a list of daily stock prices and determine the maximum profit that can be achieved by making at most two transactions (a buy followed by a sell). Ensure your function handles edge cases like a list with fewer than two prices, cases where no profit can be obtained, and analyze the time complexity of your approach.","solution":"def max_profit_with_two_transactions(prices): Returns the maximum profit with at most two transactions. :param prices: List of daily stock prices. :return: Maximum achievable profit with at most two transactions. if len(prices) < 2: return 0 # dp array to store maximum profit until each day with one transaction max_profit_left = [0] * len(prices) min_price = prices[0] for i in range(1, len(prices)): min_price = min(min_price, prices[i]) max_profit_left[i] = max(max_profit_left[i-1], prices[i] - min_price) # dp array to store maximum profit from each day to the end with one transaction max_profit_right = [0] * len(prices) max_price = prices[-1] for i in range(len(prices)-2, -1, -1): max_price = max(max_price, prices[i]) max_profit_right[i] = max(max_profit_right[i+1], max_price - prices[i]) # Calculate the maximum profit with two transactions max_profit = 0 for i in range(len(prices)): max_profit = max(max_profit, max_profit_left[i] + max_profit_right[i]) return max_profit"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. The function should ensure that the order of prime numbers in the output list matches their order in the input list. Additionally, include edge cases such as handling empty lists and lists without any prime numbers.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(lst): Takes a list of integers and returns a new list containing only the prime numbers. return [num for num in lst if is_prime(num)]"},{"question":"Design a Python function `longest_unique_substring(s)` that takes a string `s` and returns the length of the longest substring with all unique characters. Additionally, analyze and correct any potential flaws in the initial code provided below. The solution must consider the efficiency of the algorithm, especially for longer strings. ```python # initial erroneous code def longest_unique_substring(s): chars = set() longest = 0 start = 0 for end in range(len(s)): while s[end] in chars: chars.remove(s[start]) start += 1 chars.add(s[end]) longest = max(longest, end - start) return longest print(longest_unique_substring(\\"abcabcbb\\")) ``` Finally, ensure your optimized program handles edge cases, such as empty strings or strings with all identical characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters. chars = set() longest = 0 start = 0 for end in range(len(s)): while s[end] in chars: chars.remove(s[start]) start += 1 chars.add(s[end]) longest = max(longest, end - start + 1) return longest # Example usage print(longest_unique_substring(\\"abcabcbb\\")) # Output: 3"},{"question":"Create a function that takes a string representing a mathematical expression involving addition and subtraction of integers. Implement a solution that parses the expression and evaluates the result. The expression will not contain any parentheses and will only involve integers, plus and minus operators. For example, given the input string \\"12+3-4+5-7\\", the function should return 9. Ensure that no built-in evaluation functions are used and provide a way to verify the correctness of authorized users before they can run the function.","solution":"def evaluate_expression(expression): This function takes a string representing a mathematical expression involving addition and subtraction of integers. It parses the expression and evaluates the result. Parameters: - expression (str): The input string containing the mathematical expression. Returns: - int: The result of the evaluated expression. total = 0 num = \'\' sign = 1 for char in expression: if char.isdigit(): num += char else: total += sign * int(num) num = \'\' sign = 1 if char == \'+\' else -1 # Add the last number to the total total += sign * int(num) return total def authorize_user(user_id): Placeholder function for user authorization. In a real-world scenario, this could involve checking a database or other methods to verify user identity. authorized_users = {1, 2, 3, 4, 5} # Example set of authorized user ids return user_id in authorized_users def authorized_evaluate_expression(user_id, expression): Wrapper function that first checks if the user is authorized to evaluate the expression and then evaluates if authorized. Parameters: - user_id (int): The ID of the user requesting to evaluate the expression. - expression (str): The input string containing the mathematical expression. Returns: - int or str: The evaluated result if the user is authorized, otherwise a message stating \\"Unauthorized\\". if authorize_user(user_id): return evaluate_expression(expression) else: return \\"Unauthorized\\""},{"question":"Create a function that takes in a list of tuples where each tuple contains a person\'s name and their birth year. The function should return a list of names sorted by their age in descending order. Assume the current year is 2023. ```python def sort_by_age(people): Sorts a list of people by age in descending order. Args: people (list of tuples): A list where each tuple contains a name (str) and a birth year (int). Returns: list: A list of names sorted by age in descending order. # TODO: Implement the function pass # Example usage: people = [(\\"Alice\\", 1990), (\\"Bob\\", 1985), (\\"Charlie\\", 2000)] print(sort_by_age(people)) # Output: [\'Bob\', \'Alice\', \'Charlie\'] ```","solution":"def sort_by_age(people): Sorts a list of people by age in descending order. Args: people (list of tuples): A list where each tuple contains a name (str) and a birth year (int). Returns: list: A list of names sorted by age in descending order. current_year = 2023 # Sort the list of tuples by age (current year - birth year) in descending order sorted_people = sorted(people, key=lambda person: current_year - person[1], reverse=True) # Extract and return the names from the sorted list return [person[0] for person in sorted_people]"},{"question":"Write a function that takes a string as input and returns a new string where all the uppercase letters have been converted to lowercase, and all the lowercase letters have been converted to uppercase. Additionally, replace all digit characters with a hash symbol (#). Punctuation and whitespace characters should remain unchanged. **Function Signature:** ```python def transform_string(s: str) -> str: pass ``` **Example:** **Input:** ```plaintext Hello World! 123 ``` **Output:** ```plaintext hELLO wORLD! # ``` **Input:** ```plaintext Python3.8 is Awesome! ``` **Output:** ```plaintext pYTHON#.# IS aWESOME! ```","solution":"def transform_string(s: str) -> str: transformed = [] for char in s: if char.isupper(): transformed.append(char.lower()) elif char.islower(): transformed.append(char.upper()) elif char.isdigit(): transformed.append(\'#\') else: transformed.append(char) return \'\'.join(transformed)"},{"question":"You are given a dataset containing historical weather data for a city, including features such as temperature, humidity, and wind speed along with a label indicating whether precipitation was observed on that day. Using this dataset, build a predictive model to forecast precipitation for future dates. Employ the pandas and scikit-learn libraries to load, preprocess, and analyze the data, applying an appropriate classification algorithm to create the prediction model.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score def load_and_preprocess_data(file_path): Load and preprocess the weather data from a CSV file. Parameters: file_path (str): The path to the CSV file containing the weather data. Returns: X_train, X_test, y_train, y_test: Split and scaled training and testing data. # Load the dataset data = pd.read_csv(file_path) # Assuming the label column is named \'Precipitation\' X = data.drop(columns=[\'Precipitation\']) y = data[\'Precipitation\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Scale the features scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) return X_train, X_test, y_train, y_test def train_predictive_model(X_train, y_train): Train a logistic regression model on the weather data. Parameters: X_train: Training feature data. y_train: Training label data. Returns: model: Trained logistic regression model. model = LogisticRegression(random_state=42) model.fit(X_train, y_train) return model def forecast_precipitation(file_path): Predict precipitation using the logistic regression model. Parameters: file_path (str): The path to the CSV file containing the weather data. Returns: float: Accuracy of the model on the testing data. # Load and preprocess data X_train, X_test, y_train, y_test = load_and_preprocess_data(file_path) # Train the model model = train_predictive_model(X_train, y_train) # Predict on the test set y_pred = model.predict(X_test) # Calculate and return accuracy accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"question":"Analyze the customer segmentation dataset and perform a clustering analysis. The data contains customer demographics and purchasing behavior. Your task is to preprocess the data, apply a clustering algorithm, and evaluate the clusters. Specifically, focus on handling missing values, feature scaling, and selecting the optimal number of clusters. Compare the final clusters using silhouette score. We provide a snippet of incomplete code. You need to complete it to perform the required operations. ```python import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score # Load the dataset data = pd.read_csv(\'customer_segmentation.csv\') # Incomplete Code # Handle missing values # ... # Feature scaling scaler = StandardScaler() scaled_data = scaler.fit_transform(data) # Determine the optimal number of clusters using the Elbow method # ... # Apply K-Means clustering kmeans = KMeans(n_clusters=optimal_clusters, random_state=42) clusters = kmeans.fit_predict(scaled_data) # Evaluate clusters using silhouette score score = silhouette_score(scaled_data, clusters) print(\\"Silhouette Score:\\", score) ```","solution":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score import numpy as np import matplotlib.pyplot as plt def preprocess_data(data): Handle missing values and apply feature scaling. # Handle missing values by filling them with the mean of the column data.fillna(data.mean(), inplace=True) # Feature scaling scaler = StandardScaler() scaled_data = scaler.fit_transform(data) return scaled_data def find_optimal_clusters(data, max_clusters=10): Determine the optimal number of clusters using the Elbow method. wcss = [] for i in range(1, max_clusters+1): kmeans = KMeans(n_clusters=i, random_state=42) kmeans.fit(data) wcss.append(kmeans.inertia_) # Plot the Elbow graph plt.plot(range(1, max_clusters+1), wcss) plt.title(\'Elbow Method\') plt.xlabel(\'Number of clusters\') plt.ylabel(\'WCSS\') plt.show() # Assume the elbow occurs at clusters=3 for example purposes (this should be analyzed from the plot) optimal_clusters = 3 return optimal_clusters def clustering_analysis(data_path): Preprocess data, apply K-Means clustering and evaluate the clusters. # Load the dataset data = pd.read_csv(data_path) # Preprocess the data scaled_data = preprocess_data(data) # Determine the optimal number of clusters optimal_clusters = find_optimal_clusters(scaled_data) # Apply K-Means clustering kmeans = KMeans(n_clusters=optimal_clusters, random_state=42) clusters = kmeans.fit_predict(scaled_data) # Evaluate clusters using silhouette score score = silhouette_score(scaled_data, clusters) return score # Example usage if __name__ == \\"__main__\\": data_path = \'customer_segmentation.csv\' score = clustering_analysis(data_path) print(\\"Silhouette Score:\\", score)"},{"question":"Design a function in your preferred programming language that accepts two strings as arguments and returns `True` if one string is a permutation of the other, otherwise, it returns `False`. Your function should efficiently determine if the two strings contain the exact same characters in the same quantities, regardless of the order. Consider edge cases such as empty strings and strings of differing lengths.","solution":"def are_permutations(str1, str2): This function checks if str1 is a permutation of str2. if len(str1) != len(str2): return False return sorted(str1) == sorted(str2)"},{"question":"--- # Context [Social Media Manager: Analyze User Engagement A growing social media platform wants to analyze user engagement to improve the user experience. The platform records every user\'s login, logout, and post interactions. Product Goals ```python [ \\"Analyze user login frequencies and durations\\", \\"Determine peak hours of user activity\\", \\"Track user engagement with posts (likes, comments, shares)\\", \\"Identify daily, weekly, and monthly active users\\" ] ``` User Stories ```python [ \\"As a data analyst, I want to see the average login duration per user so that I can identify patterns in user activity\\", \\"As a product manager, I want to know the most active times of day so that we can schedule content releases accordingly\\", \\"As a marketing strategist, I want to see the engagement metrics on posts so that we can understand the types of content that are most popular\\", \\"As a business executive, I want to track active user metrics over different periods to measure user retention and growth\\" ] ``` Competitive Analysis ```python [ \\"Facebook: Comprehensive engagement analytics but can be overwhelming due to vast data\\", \\"Twitter: Provides real-time engagement data but not detailed historical trend analysis\\", \\"Instagram: Strong visual engagement metrics but lacks login duration insights\\", \\"Snapchat: Engages users effectively but provides limited data on login behaviors\\" ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Reach and engagement of campaigns x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 Consider Expansion quadrant-2 Needs Promotion quadrant-3 Needs Improvements quadrant-4 High Priority \\"Facebook\\": [0.9, 0.8] \\"Twitter\\": [0.7, 0.7] \\"Instagram\\": [0.8, 0.6] \\"Snapchat\\": [0.6, 0.5] \\"Our Target Product\\": [0.75, 0.65] ``` Requirement Analysis The product should analyze user engagement metrics such as login frequencies, durations, peak activity hours, and post interactions. The goal is to improve the user experience and measure user retention and growth over different periods. Requirement Pool ```python [ (\\"Track and analyze user login frequencies and durations\\", \\"P0\\"), (\\"Identify peak hours of user activity\\", \\"P0\\"), (\\"Analyze user engagement metrics on posts (likes, comments, shares)\\", \\"P1\\"), (\\"Determine active users over daily, weekly, and monthly periods\\", \\"P1\\") ] ``` UI Design Draft The analytics dashboard should have a clear and intuitive interface. Key metrics such as average login duration, peak activity hours, and engagement metrics on posts should be prominently displayed. The dashboard should include filters for daily, weekly, and monthly active users. Anything UNCLEAR There are no unclear points.] Format example --- Implementation approach We will use... Python package name ```python \\"user_engagement_analytics\\" ``` File list ```python [ \\"app.py\\", \\"data_loader.py\\", \\"main.py\\", \\"models.py\\", \\"utils.py\\" ] ``` Data structures and interface definitions ```mermaid classDiagram class User{ +int user_id +str username +list[LoginRecord] login_records +list[PostInteraction] post_interactions } class LoginRecord{ +datetime login_time +datetime logout_time +User user } class PostInteraction{ +int post_id +str interaction_type +datetime interaction_time +User user } User \\"1\\" --> \\"*\\" LoginRecord: has User \\"1\\" --> \\"*\\" PostInteraction: has LoginRecord \\"*--\\" User: belongs_to PostInteraction \\"*--\\" User: belongs_to ``` Program call flow ```mermaid sequenceDiagram participant M as Main participant D as DataLoader participant U as User participant L as LoginRecord participant P as PostInteraction M->>D: load user data M->>U: create user object U->>L: add login record U->>P: add post interaction M->>U: calculate average login duration M->>D: identify peak activity hours M->>D: track engagement metrics M->>D: determine active users ``` Anything UNCLEAR The requirement is clear to me. ---","solution":"from datetime import datetime class User: def __init__(self, user_id, username): self.user_id = user_id self.username = username self.login_records = [] self.post_interactions = [] def add_login_record(self, login_time, logout_time): self.login_records.append(LoginRecord(login_time, logout_time, self)) def add_post_interaction(self, post_id, interaction_type, interaction_time): self.post_interactions.append(PostInteraction(post_id, interaction_type, interaction_time, self)) def calculate_average_login_duration(self): total_duration = 0 for record in self.login_records: total_duration += (record.logout_time - record.login_time).total_seconds() return total_duration / len(self.login_records) if self.login_records else 0 class LoginRecord: def __init__(self, login_time, logout_time, user): self.login_time = login_time self.logout_time = logout_time self.user = user class PostInteraction: def __init__(self, post_id, interaction_type, interaction_time, user): self.post_id = post_id self.interaction_type = interaction_type self.interaction_time = interaction_time self.user = user"},{"question":"Write a Python function called `palindromic_substrings` that takes a single string input and returns the number of palindromic substrings within that string. A palindromic substring is a substring that reads the same forwards and backwards. The solution should efficiently handle strings up to length 1000. # Example ```python print(palindromic_substrings(\\"aaa\\")) # Output: 6 ``` # Explanation The palindromic substrings in \\"aaa\\" are: - \\"a\\" - \\"a\\" - \\"a\\" - \\"aa\\" - \\"aa\\" - \\"aaa\\"","solution":"def palindromic_substrings(s): Returns the number of palindromic substrings in the given string. n = len(s) count = 0 # Function to count palindromes centered at left and right def count_palindromes_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 for center in range(n): # Odd-length palindromes count_palindromes_around_center(center, center) # Even-length palindromes count_palindromes_around_center(center, center + 1) return count"},{"question":"Given two lists of integers, write a function that returns a list of the integers that appear in both lists. Do not use any built-in set operations in your solution. For example, if the two input lists are `[1, 2, 2, 3, 4]` and `[2, 2, 3, 5]`, the function should return `[2, 2, 3]`. Maintain the order of elements as they appear in the first list.","solution":"def intersection(list1, list2): Returns a list of integers that appear in both list1 and list2, maintaining the order of elements as they appear in list1. result = [] list2_count = {} # Count occurrences of elements in list2 for num in list2: if num in list2_count: list2_count[num] += 1 else: list2_count[num] = 1 # Find intersection while maintaining order of list1 for num in list1: if num in list2_count and list2_count[num] > 0: result.append(num) list2_count[num] -= 1 return result"},{"question":"Write a function that takes a list of mixed integer and string elements, filters out the string elements, and then returns a new list containing only the squared values of the even integers from the original list. If there are no even integers in the input list, the function should return an empty list. Example: Input: [1, \'a\', 2, \'b\', 3, 4, 5, \'c\'] Output: [4, 16] Input: [\'a\', \'b\', \'c\'] Output: []","solution":"def filter_and_square_evens(lst): Filters out the string elements from the input list and returns a new list containing the squared values of the even integers from the original list. Parameters: lst (list): A list of mixed integer and string elements. Returns: list: A list containing the squared values of the even integers from the original list. return [x**2 for x in lst if isinstance(x, int) and x % 2 == 0]"},{"question":"<p>Given a binary tree, write a function to determine if it is height-balanced. A height-balanced binary tree is defined as:</p> <p>A binary tree in which the depth of the two subtrees of every node never differs by more than 1.</p> <p>Function Signature:</p> <pre> def is_balanced(root: TreeNode) -> bool: </pre> <p>Input:</p> <p>The input to the function is a pointer to the root of a binary tree:</p> <pre> root: TreeNode </pre> <p>Output:</p> <p>The function should return a boolean:</p> <pre> True if the binary tree is height-balanced, and False otherwise. </pre> <p>Example:</p> <p>Consider the binary tree below:</p> <pre> 3 / 9 20 / 15 7 </pre> <p>is_balanced(root) should return True for this tree.</p> <p>Further Example:</p> <p>Consider the binary tree below:</p> <pre> 1 / 2 / 3 </pre> <p>is_balanced(root) should return False for this tree.</p> <p>Note:</p> <p>1. An empty tree is considered height-balanced.</p> <p>2. TreeNode is defined as follows:</p> <pre> class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right </pre> <p>To check the balance of the tree, assume that you might need to traverse all nodes in the worst case.</p>","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_height(node): if not node: return 0 left_height = check_height(node.left) right_height = check_height(node.right) if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1"},{"question":"Write a function `find_nth_fibonacci(n)` that takes an integer `n` as input and returns the nth Fibonacci number. The Fibonacci sequence is defined as: - `F(0) = 0` - `F(1) = 1` - `F(n) = F(n-1) + F(n-2)`, for `n > 1` The function should handle cases where `n` is 0 or 1 correctly. Ensure to include error handling for cases where `n` is negative, by returning -1. Use a simple iterative approach to solve this problem for better efficiency.","solution":"def find_nth_fibonacci(n): Returns the nth Fibonacci number. :param n: The position in the Fibonacci sequence. :return: The nth Fibonacci number or -1 if n is negative. if n < 0: return -1 elif n == 0: return 0 elif n == 1: return 1 prev, curr = 0, 1 for _ in range(2, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"Given a list of integers, write a Python function named `pair_sum` that takes this list and an integer `target_sum` as arguments. The function should return a list of unique pairs of integers from the list that add up to `target_sum`. Each pair should be a tuple, and the list of pairs should be sorted in ascending order based on the first element of each pair. If there are no such pairs, the function should return an empty list. For example: ``` pair_sum([1, 2, 3, 4, 5], 5) => [(1, 4), (2, 3)] pair_sum([0, -1, 2, -3, 1], -2) => [(-3, 1)] pair_sum([1, 1, 2, 2], 3) => [(1, 2)] pair_sum([1, 2, 3], 7) => [] ``` Make sure to handle edge cases where the list might be empty or contain duplicates.","solution":"def pair_sum(nums, target_sum): Returns a list of unique pairs of integers from the list that add up to the target_sum. Each pair is returned as a tuple; the list is sorted in ascending order based on the first element of each pair. seen = set() pairs = set() for num in nums: complement = target_sum - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(pairs)"},{"question":"What are the essential differences between a \'while\' loop and a \'for\' loop in most programming languages? Discuss the typical scenarios in which one might be preferred over the other, and provide examples in at least two different languages that demonstrate these preferences. Explain the implications for readability, performance, and maintainability in each case.","solution":"def demonstrate_while_loop(n): Demonstrates a while loop that prints numbers from 0 to n-1. i = 0 results = [] while i < n: results.append(i) i += 1 return results def demonstrate_for_loop(n): Demonstrates a for loop that prints numbers from 0 to n-1. results = [] for i in range(n): results.append(i) return results"},{"question":"In a programming environment, write a function that takes two lists of integers as input and returns a list that contains the intersection of these two lists. The resulting list should contain unique elements, each element should appear only once regardless of how many times it is present in the input lists, and the elements in the resulting list should be in ascending order. Additionally, if any of the input arguments are not lists or contain non-integer elements, your function should raise an appropriate error. A partial illustrative code is given as follows: ```python def intersection_unique_sorted(list1, list2): Given two lists of integers, return a sorted list containing unique integers that are present in both lists. The function should raise a TypeError if either list1 or list2 is not a list. The function should raise a ValueError if any of the elements in list1 or list2 are not integers. For example: >>> intersection_unique_sorted([4, 9, 5], [9, 4, 9, 8, 4]) [4, 9] >>> intersection_unique_sorted([1, 2, 2, 3], [3, 3, 4, 2]) [2, 3] >>> intersection_unique_sorted([2, 2, 2], [2]) [2] # Your code here ```","solution":"def intersection_unique_sorted(list1, list2): Given two lists of integers, return a sorted list containing unique integers that are present in both lists. The function should raise a TypeError if either list1 or list2 is not a list. The function should raise a ValueError if any of the elements in list1 or list2 are not integers. if not isinstance(list1, list) or not isinstance(list2, list): raise TypeError(\\"Both arguments must be lists\\") if not all(isinstance(x, int) for x in list1) or not all(isinstance(x, int) for x in list2): raise ValueError(\\"All elements in both lists must be integers\\") # Find intersection and convert to a set to eliminate duplicates, then sort it intersection = set(list1).intersection(list2) return sorted(intersection)"},{"question":"Incorporate the libraries json and requests, and write a Python function that fetches data from a public API endpoint of your choice, and parses the JSON response to extract and print the values of a specific key. Use exception handling to manage potential errors such as network issues or invalid JSON responses.","solution":"import json import requests def fetch_and_parse(api_url, key): Fetches data from a given API endpoint, and parses the JSON response to extract and return the values of a specified key. :param api_url: str, URL of the API endpoint :param key: str, Key whose values need to be extracted from the JSON response :return: list, Values associated with the specified key try: response = requests.get(api_url) response.raise_for_status() # Raises HTTPError for bad responses data = response.json() # Takes the JSON-encoded content of a response if key not in data: return [] return data[key] except requests.exceptions.RequestException as e: print(f\\"Request error: {e}\\") return None except json.JSONDecodeError as e: print(f\\"JSON decode error: {e}\\") return None"},{"question":"Write a function that takes two lists of integers, merges them into a single list, and then sorts the merged list in descending order. Additionally, remove any duplicate values in the resulting list. Your solution should aim for optimal performance with respect to time complexity, and you should not use any built-in sorting functions. Example: Input: list1 = [3, 1, 4, 4, 7] list2 = [9, 2, 2, 5] Output: [9, 7, 5, 4, 3, 2, 1] Guidelines: 1. Write a function `merge_and_sort_descending(list1, list2)` that performs the above operations. 2. Use data structures and algorithms that ensure the optimal performance. 3. Test your function with various edge cases to ensure correctness.","solution":"def merge_and_sort_descending(list1, list2): Merges two lists into a single list, sorts it in descending order, and removes duplicate values. # Use set to remove duplicates and combine the lists combined_set = set(list1).union(set(list2)) # Convert set back to list and sort in descending order using a sorting algorithm (quick sort) combined_list = list(combined_set) def quick_sort_descending(arr): if len(arr) <= 1: return arr pivot = arr[0] left = [x for x in arr[1:] if x > pivot] right = [x for x in arr[1:] if x <= pivot] return quick_sort_descending(left) + [pivot] + quick_sort_descending(right) return quick_sort_descending(combined_list)"},{"question":"Design a function named \'group_anagrams\' in Python that takes a list of strings and groups the anagrams together. The function should return a list of lists, where each sublist contains strings that are anagrams of each other. For example, given the input `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, the output should be `[[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']]`. Key requirements: 1. Your function should handle case insensitivity – i.e., “Eat” and “tea” should be considered anagrams and grouped together. 2. Ensure your function has an optimal time complexity, making use of appropriate data structures. 3. Write unittest test cases to validate various scenarios including but not limited to: - Basic functionality test - Edge cases like an empty list or no anagrams present - Case insensitivity handling Implement Python\'s unittest framework for testing.","solution":"from collections import defaultdict def group_anagrams(words): Groups anagrams from the input list of words. Parameters: words (list of str): The list of words to group. Returns: list of list of str: A list of grouped anagrams. anagrams = defaultdict(list) for word in words: # Sort the characters in the word and convert to lowercase sorted_word = \'\'.join(sorted(word.lower())) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Write a Python function `merge_alternate(list1, list2)` that takes in two lists of integers `list1` and `list2`, and returns a new list by merging the two lists in an alternating fashion. If one list is longer than the other, append the remaining elements of the longer list to the end of the merged list. For example, given `list1 = [1, 2, 3]` and `list2 = [4, 5, 6, 7, 8]`, the function should return `[1, 4, 2, 5, 3, 6, 7, 8]`.","solution":"def merge_alternate(list1, list2): Merge two lists in an alternating fashion. If one list is longer, append the remaining elements to the end. Parameters: list1 (list): The first list of integers. list2 (list): The second list of integers. Returns: list: The merged list. merged_list = [] len1, len2 = len(list1), len(list2) for i in range(min(len1, len2)): merged_list.append(list1[i]) merged_list.append(list2[i]) # Append remaining elements, if any if len1 > len2: merged_list.extend(list1[len2:]) else: merged_list.extend(list2[len1:]) return merged_list"},{"question":"Write a function `reorder_numbers` that takes a list of integers and an integer `k` and performs the following tasks: - Check if any two distinct numbers in the list add up to `k`. - If such a pair exists, the function should return a tuple of the two numbers (in any order). If multiple pairs are found, return the first pair found. - If no such pair exists, return an empty tuple. Additionally, the function should return the original list of integers reversed without altering the original list. Implement the solution with time complexity no worse than O(n). Example: Input: reorder_numbers([10, 15, 3, 7], 17) Output: ((10, 7), [7, 3, 15, 10]) Input: reorder_numbers([1, 2, 3, 4, 5], 10) Output: ((), [5, 4, 3, 2, 1])","solution":"def reorder_numbers(nums, k): Finds any two distinct numbers in the list that add up to k and returns the pair. Returns the original list of integers reversed. seen = set() for num in nums: if (k - num) in seen: return ((k - num), num), nums[::-1] seen.add(num) return (), nums[::-1]"},{"question":"Write a Python program that takes an input string containing an encoded message and a dictionary that maps encoded characters to their corresponding decoded characters. Decode the message using the provided dictionary and return the decoded string. For example, given the input message \\"abccba\\" and the dictionary `{\'a\': \'1\', \'b\': \'2\', \'c\': \'3\'}`, the output should be \\"123321\\".","solution":"def decode_message(encoded_message, decoding_dict): Decodes an encoded message using the provided decoding dictionary. Parameters: encoded_message (str): The encoded string to be decoded. decoding_dict (dict): A dictionary mapping encoded characters to their corresponding decoded characters. Returns: str: The decoded string. decoded_message = \'\'.join(decoding_dict[char] for char in encoded_message) return decoded_message"},{"question":"You are tasked with designing a function that simulates a basic version of Conway\'s Game of Life. Given a 2D grid of cells where each cell is either \'alive\' (represented by 1) or \'dead\' (represented by 0), implement the following rules to compute the next state of the grid: 1. An alive cell (1) with fewer than two alive neighbors dies (underpopulation). 2. An alive cell (1) with two or three alive neighbors lives on to the next generation. 3. An alive cell (1) with more than three alive neighbors dies (overpopulation). 4. A dead cell (0) with exactly three alive neighbors becomes an alive cell (reproduction). Your function should take the current state of the grid as input and output the next state of the grid. # Function Signature: ```python def game_of_life(grid: List[List[int]]) -> List[List[int]]: pass ``` # Example: Input: ``` [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] ``` Output: ``` [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] ``` # Constraints: - The grid dimensions will be at most 100x100. - The grid will contain only 0s and 1s.","solution":"from typing import List def game_of_life(grid: List[List[int]]) -> List[List[int]]: def get_live_neighbors(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1: live_neighbors += 1 return live_neighbors rows = len(grid) cols = len(grid[0]) new_grid = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_live_neighbors(r, c) if grid[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[r][c] = 0 else: new_grid[r][c] = 1 else: if live_neighbors == 3: new_grid[r][c] = 1 return new_grid"},{"question":"Create a function that takes a positive integer `n` and returns an array representing the binary equivalent of all numbers from 1 to `n`. The function should use bitwise operations to generate the binary representations. Ensure the array consists of strings, where each string represents a binary number. **Example:** ```python convert_to_binary_array(5) ``` **Output:** ``` [\\"1\\", \\"10\\", \\"11\\", \\"100\\", \\"101\\"] ```","solution":"def convert_to_binary_array(n): Returns an array representing the binary equivalent of all numbers from 1 to n. Params: n (int): A positive integer to generate binary representations for numbers from 1 to n. Returns: List[str]: List of binary representations of numbers from 1 to n as strings. return [bin(i)[2:] for i in range(1, n + 1)]"},{"question":"Write a function named `merge_sorted_lists` that takes in two arguments, both of which are sorted lists of integers, and returns a single merged list that is also sorted. Ensure that your solution has a time complexity of O(n + m), where n and m are the lengths of the two input lists respectively. Additionally, write tests to verify your solution with examples where the lists have overlapping elements, disjoint elements, and one or both lists are empty.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1: A sorted list of integers. list2: A sorted list of integers. Returns: A merged sorted list of integers. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python function that determines if a given string is an anagram of another string. The function should ignore spaces, punctuation, and capitalization. Additionally, optimize the function to handle large strings efficiently using suitable data structures and algorithms. def is_anagram(str1, str2): # Remove spaces and punctuation, and convert to lowercase cleaned_str1 = \'\'.join(e for e in str1 if e.isalnum()).lower() cleaned_str2 = \'\'.join(e for e in str2 if e.isalnum()).lower() # Return whether sorted characters of both strings match return sorted(cleaned_str1) == sorted(cleaned_str2)","solution":"def is_anagram(str1, str2): Determines if two strings are anagrams, ignoring spaces, punctuation, and capitalization. def clean_string(s): return \'\'.join(e for e in s if e.isalnum()).lower() cleaned_str1 = clean_string(str1) cleaned_str2 = clean_string(str2) return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"You are given a list of strings representing student names and their corresponding grades, in the following format: \\"name:grade\\". Write a function that takes this list as input, groups the students by their grades, and then returns a dictionary where the keys are the grades and the values are lists of student names who received that grade. Ensure that the names are sorted alphabetically within each grade group. Additionally, provide an analysis of the time complexity of your solution. Example input: [\\"Alice:85\\", \\"Bob:90\\", \\"Charlie:85\\", \\"David:95\\", \\"Eve:85\\", \\"Frank:90\\"] Expected output: { \'85\': [\'Alice\', \'Charlie\', \'Eve\'], \'90\': [\'Bob\', \'Frank\'], \'95\': [\'David\'] }","solution":"def group_students_by_grade(student_info): Groups students by their grades, with names sorted alphabetically within each grade group. :param student_info: List of strings where each string is in the form \\"name:grade\\". :return: Dictionary with grades as keys and lists of student names as values. grade_dict = {} for info in student_info: name, grade = info.split(\':\') if grade not in grade_dict: grade_dict[grade] = [] grade_dict[grade].append(name) for grade in grade_dict: grade_dict[grade].sort() return grade_dict # Analysis of time complexity: # Suppose we have n students # - Splitting each string in the input list takes O(n) time # - Inserting each name into the dictionary takes O(1) time on average, for a total of O(n) time # - Sorting the names within each grade group takes O(k log k) time where k is the number of students in that particular grade group # If there are g unique grades, and assuming names are evenly distributed, then each sorting step approximates O((n/g) log(n/g)) # Overall, the dominant time complexity term is O(n log n) considering sorting of all names."},{"question":"Write a function that implements the dynamic programming approach to solve the \\"Longest Increasing Subsequence\\" problem. Given an unsorted array of integers, your task is to find the length of the longest strictly increasing subsequence within this array. Your function should return the length as an integer. Additionally, provide an analysis of the time and space complexity of your solution. Example: ```python def longest_increasing_subsequence(arr): # Your code here # Example usage: arr = [10, 9, 2, 5, 3, 7, 101, 18] print(longest_increasing_subsequence(arr)) # Output: 4 (the sequence is [2, 3, 7, 18]) ```","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence in the array. :param arr: List[int] - The input array of integers. :return: int - The length of the longest increasing subsequence. if not arr: return 0 # Initialize the dp array where dp[i] represents the length of the longest # increasing subsequence that ends with arr[i] dp = [1] * len(arr) # Construct the dp array for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence is the maximum value in dp array return max(dp)"},{"question":"Write a Python function to calculate the number of unique substrings in a given string. # Function Signature ```python def count_unique_substrings(s: str) -> int: pass ``` # Input - A single string `s` (1 <= len(s) <= 100) containing only lowercase English letters. # Output - An integer representing the number of unique substrings in the string `s`. # Example ```python count_unique_substrings(\\"abc\\") # should return 6 count_unique_substrings(\\"aaa\\") # should return 3 ``` # Explanation - For the input \\"abc\\", the unique substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". - For the input \\"aaa\\", the unique substrings are: \\"a\\", \\"aa\\", \\"aaa\\". # Constraints - You may not use any libraries that handle substring operations automatically. - Consider all possible substrings of the input string, and ensure duplicates are not counted.","solution":"def count_unique_substrings(s: str) -> int: Returns the number of unique substrings in the given string s. unique_substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"Write a function to implement a simplified version of the A* search algorithm to find the shortest path in a 2D grid. The grid is represented as a list of lists, where a value of 0 indicates a walkable cell and a value of 1 indicates an obstacle. The function should take as input the grid, a start coordinate, and a goal coordinate, and return the path as a list of coordinates. If no path is found, return an empty list. Assume the grid is rectangular and the movement is allowed only horizontally or vertically.","solution":"import heapq def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1]) def get_neighbors(node, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] neighbors = [] for direction in directions: neighbor = (node[0] + direction[0], node[1] + direction[1]) if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]) and grid[neighbor[0]][neighbor[1]] == 0: neighbors.append(neighbor) return neighbors def astar_search(grid, start, goal): open_list = [] heapq.heappush(open_list, (0, start)) came_from = {} g_score = {start: 0} f_score = {start: heuristic(start, goal)} while open_list: _, current = heapq.heappop(open_list) if current == goal: path = [] while current in came_from: path.append(current) current = came_from[current] path.append(start) path.reverse() return path for neighbor in get_neighbors(current, grid): tentative_g_score = g_score[current] + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: came_from[neighbor] = current g_score[neighbor] = tentative_g_score f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal) heapq.heappush(open_list, (f_score[neighbor], neighbor)) return []"},{"question":"**Question 2: Evaluate the stock prices trend** You are given a list of stock prices for a company in chronological order. You need to write a function to analyze this list and determine the maximum possible profit you could have achieved by buying the stock at a particular day and selling it later on. The function should return -1 if no profit can be made. # Constraints: - The list of stock prices can contain up to 10,000 elements. - Each price is a positive integer greater than 0 and less than 10,000. # Function Signature: ```python def max_profit(prices: List[int]) -> int: ``` # Example: Input: ```python prices = [7, 1, 5, 3, 6, 4] ``` Output: ```python 5 # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ``` Input: ```python prices = [7, 6, 4, 3, 1] ``` Output: ```python -1 # Explanation: No transactions are done, i.e., no profit can be made. ``` # Additional Notes: - Use a single pass algorithm (O(n) time complexity) to find the solution. - Make sure your solution is optimized for large inputs.","solution":"def max_profit(prices): Returns the maximum profit achievable from buying at one day and selling at a later day. If no profit can be made, returns -1. if not prices: return -1 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit if max_profit > 0 else -1"},{"question":"Write a function that takes an integer array as input and returns all unique triplets in the array which sum up to zero. The solution set must not contain duplicate triplets. Example Input: [-1, 0, 1, 2, -1, -4] Example Output: [[-1, 0, 1], [-1, -1, 2]] **Note**: The output should be a list of lists, where each inner list represents one of the triplets that satisfy the condition. The inner lists should appear in ascending order of their elements. The order of the triplets in the outer list does not matter.","solution":"def three_sum(nums): Finds all unique triplets in the array which gives the sum of zero. :param nums: List[int] - A list of integers :return: List[List[int]] - A list of unique triplets which sum to zero nums.sort() result = [] n = len(nums) for i in range(n-2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i+1, n-1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"<p>Given an integer array `nums`, you need to find the length of the longest increasing subsequence (LIS) in the array.</p> <p>An increasing subsequence is a subsequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements, and in which the elements are in strictly increasing order.</p> <p>For example, for the array `nums = [10, 9, 2, 5, 3, 7, 101, 18]`, one of the longest increasing subsequences is `[2, 3, 7, 101]`, and its length is four.</p> <p>Write a function `findLIS` that takes in an array of integers `nums` and returns the length of the longest increasing subsequence.</p> ```python def findLIS(nums: [int]) -> int: # Your code here # Example Usage: nums = [10, 9, 2, 5, 3, 7, 101, 18] print(findLIS(nums)) # Output should be 4 ``` <p>Your function should have a time complexity of O(n^2) or better.</p>","solution":"def findLIS(nums): Returns the length of the longest increasing subsequence in the array. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Design and implement an optimized pathfinding algorithm to navigate through a maze represented as a grid, where each cell can either be passable or impassable. The objective is to find the shortest route from the top-left corner to the bottom-right corner of the grid, if such a path exists. Your solution should efficiently handle large grids and ensure the algorithm\'s performance is robust enough to manage various maze configurations. Consider edge cases such as entirely blocked paths and multiple possible routes.","solution":"from collections import deque def shortest_path_in_maze(maze): Returns the shortest path length in a maze from the top-left corner to the bottom-right corner. If there is no path, returns -1. :param maze: A 2D list representing the maze where 1 is passable and 0 is impassable. :return: Length of the shortest path, or -1 if no path exists if not maze or not maze[0]: return -1 n, m = len(maze), len(maze[0]) if maze[0][0] == 0 or maze[n-1][m-1] == 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, path_length) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 1 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Write a function called `find_largest_palindrome` that takes a single argument, a positive integer `n`. This function should identify the largest palindromic number that is less than or equal to `n`. A palindromic number reads the same forwards and backwards (e.g., 121, 484). If there is no palindromic number within the range, return -1. Provide a complete implementation and include test cases to verify the correctness of your solution.","solution":"def is_palindrome(num): Helper function to check if a number is a palindrome. return str(num) == str(num)[::-1] def find_largest_palindrome(n): Function to find the largest palindromic number less than or equal to a given number n. for i in range(n, -1, -1): if is_palindrome(i): return i return -1"},{"question":"Develop a Sudoku solver and validator in Python. Implement two methods, `is_valid_sudoku` and `solve_sudoku`. The `is_valid_sudoku` method should determine if a given Sudoku board is valid according to Sudoku rules. The `solve_sudoku` function must solve the Sudoku puzzle if it is solvable, otherwise indicate it cannot be solved. The Sudoku board will be a 9x9 list of lists, where 0 represents an empty cell. Constraints: 1. Each number from 1 to 9 must appear only once in each row. 2. Each number from 1 to 9 must appear only once in each column. 3. Each number from 1 to 9 must appear only once in each 3x3 subgrid. Validating and solving the Sudoku should follow these rules: - The input board only contains numbers from 0 to 9. - The empty cells are represented by zeros. Validate your methods with these examples to ensure they produce correct results: Examples: ``` is_valid_sudoku([ [5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9] ]) should return True solve_sudoku([ [5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,0,0,2,0,0,0,6], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9] ]) should return the solved Sudoku board: [ [5,3,4,6,7,8,9,1,2], [6,7,2,1,9,5,3,4,8], [1,9,8,3,4,2,5,6,7], [8,5,9,7,6,1,4,2,3], [4,2,6,8,5,3,7,9,1], [7,1,3,9,2,4,8,5,6], [9,6,1,5,3,7,2,8,4], [2,8,7,4,1,9,6,3,5], [3,4,5,2,8,6,1,7,9] ] solve_sudoku([ [5,3,0,0,7,0,0,0,0], [6,0,0,1,9,5,0,0,0], [0,9,8,0,0,0,0,6,0], [8,0,0,0,6,0,0,0,3], [4,0,0,8,0,3,0,0,1], [7,0,5,0,2,0,6,0,0], [0,6,0,0,0,0,2,8,0], [0,0,0,4,1,9,0,0,5], [0,0,0,0,8,0,0,7,9] ]) should return \\"Unsolvable\\" ```python def is_valid_sudoku(board: list) -> bool: Check if the given Sudoku board is valid # Implement your solution here pass def solve_sudoku(board: list) -> list: Solve the given Sudoku puzzle or return \\"Unsolvable\\" # Implement your solution here pass ```","solution":"def is_valid_sudoku(board: list) -> bool: Check if the given Sudoku board is valid def is_valid_unit(unit): Helper function to check if a unit (row/column/grid) is valid non_zeros = [i for i in unit if i != 0] return len(non_zeros) == len(set(non_zeros)) def get_subgrid(board, start_row, start_col): Helper function to get the subgrid starting at (start_row, start_col) subgrid = [] for r in range(3): for c in range(3): subgrid.append(board[start_row + r][start_col + c]) return subgrid # Check rows and columns for i in range(9): if not is_valid_unit(board[i]) or not is_valid_unit([board[r][i] for r in range(9)]): return False # Check 3x3 subgrids for r in range(0, 9, 3): for c in range(0, 9, 3): if not is_valid_unit(get_subgrid(board, r, c)): return False return True def solve_sudoku(board: list) -> list: Solve the given Sudoku puzzle or return \'Unsolvable\' def find_empty_location(board): Helper function to find an empty location on the board for r in range(9): for c in range(9): if board[r][c] == 0: return r, c return None def is_safe(board, row, col, num): Helper function to check if num can be placed at board[row][col] for r in range(9): if board[r][col] == num: return False for c in range(9): if board[row][c] == num: return False start_row, start_col = 3 * (row // 3), 3 * (col // 3) for r in range(3): for c in range(3): if board[start_row + r][start_col + c] == num: return False return True def solve(): Helper function to solve the Sudoku puzzle empty_location = find_empty_location(board) if not empty_location: return True row, col = empty_location for num in range(1, 10): if is_safe(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False if solve(): return board else: return \\"Unsolvable\\""},{"question":"Write a function that takes a list of words and an integer `k` as inputs. The function should find the `k` most frequent words in the list. If there is a tie (i.e., multiple words with the same frequency), sort the words alphabetically among them. The output should be a list of these `k` words in descending order based on their frequency and alphabetical order for ties. For example: words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] k = 2 The function should return [\\"apple\\", \\"banana\\"]. Note: - You may assume the input list is not empty and the integer `k` is always valid (1 ≤ k ≤ number of unique words in the list).","solution":"from collections import Counter def k_most_frequent_words(words, k): Returns the k most frequent words in the list. In case of a tie, sorts the words alphabetically. # Count the frequency of each word word_count = Counter(words) # Create a sorted list of words based on frequency, # with ties broken by alphabetic order sorted_words = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) # Extract the top k words return [word for word, count in sorted_words[:k]]"},{"question":"Write a function `unique_elements` that takes in a list of integers and returns a new list containing only the unique elements from the original list in the order they first appeared. Do not use the `set` data structure. Consider handling edge cases where the list is empty or contains only one element.","solution":"def unique_elements(lst): Returns a new list containing only the unique elements from the original list in the order they first appeared. seen = {} unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen[item] = True return unique_lst"},{"question":"Palindrome Substring Finder: def longest_palindrome_substring(s): Suppose you have a string \'s\' comprised of only lowercase alphabets. Your task is to write a function that finds and returns the longest palindromic substring in the given string \'s\'. A palindromic string reads the same forwards and backwards. For instance: longest_palindrome_substring(\\"babad\\") ==> \\"bab\\" or \\"aba\\" longest_palindrome_substring(\\"cbbd\\") ==> \\"bb\\" longest_palindrome_substring(\\"a\\") ==> \\"a\\" longest_palindrome_substring(\\"ac\\") ==> \\"a\\" or \\"c\\" The function should return just one of the longest palindromic substrings if there are multiple with the same length. Constraints: - The input string\'s length will be in the range [1, 1000] Note: - Consider using dynamic programming or expanding around center approach to find the solution efficiently. # Your code here","solution":"def longest_palindrome_substring(s): if not s: return \\"\\" n = len(s) start, max_len = 0, 1 for i in range(1, n): odd = s[i - max_len - 1:i + 1] # Palindrome with odd length even = s[i - max_len:i + 1] # Palindrome with even length if i - max_len - 1 >= 0 and odd == odd[::-1]: start = i - max_len - 1 max_len += 2 elif even == even[::-1]: start = i - max_len max_len += 1 return s[start:start + max_len]"},{"question":"Create a function `power_of_threes` that takes an integer `n` as input and returns a list of the first `n` powers of 3 in ascending order. Ensure the function is optimized for performance and takes into account edge cases such as `n` being 0 or negative. For example: power_of_threes(5) outputs [1, 3, 9, 27, 81] power_of_threes(0) results in [] power_of_threes(-3) returns [] Here\'s the function signature: def power_of_threes(n):","solution":"def power_of_threes(n): Returns a list of the first n powers of 3 in ascending order. Parameters: n (int): The number of powers of 3 to return. Returns: List[int]: A list containing the first n powers of 3. if n <= 0: return [] result = [3 ** i for i in range(n)] return result"},{"question":"Given a list of scores, write a function `qualify_scores` that filters out scores that are lower than the average score. The function should return a list of scores that meet or exceed the average score. Implement the function using the following format: ```python def qualify_scores(scores): Write a function qualify_scores that takes in a list of integers representing scores, calculates the average score, and returns a new list of scores that are greater than or equal to the average score. If the list is empty, return an empty list. Args: scores (list): A list of integers representing scores. Returns: list: A list of scores that are greater than or equal to the average score. Example: >>> qualify_scores([90, 70, 50, 60, 80]) [90, 70, 80] >>> qualify_scores([100, 50, 75]) [100, 75] >>> qualify_scores([]) [] ``` Make sure to handle edge cases such as empty lists and very high or very low scores effectively. Consider including both positive and negative test cases while validating the function.","solution":"def qualify_scores(scores): Write a function qualify_scores that takes in a list of integers representing scores, calculates the average score, and returns a new list of scores that are greater than or equal to the average score. If the list is empty, return an empty list. Args: scores (list): A list of integers representing scores. Returns: list: A list of scores that are greater than or equal to the average score. if not scores: return [] average_score = sum(scores) / len(scores) return [score for score in scores if score >= average_score]"},{"question":"Write a function that checks if a given string is a palindrome, ignoring spaces, punctuation, and capitalization, and returns a boolean value. For example, \'A man, a plan, a canal, Panama\' should return `True`.","solution":"import re def is_palindrome(s): Checks if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove all non-alphanumeric characters and convert to lowercase. cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse. return cleaned_s == cleaned_s[::-1]"},{"question":"<p>Consider an array of n distinct integers. You are required to identify two integers a and b from the array such that the absolute difference between a and b is minimized. In other words, you need to find:</p> <p>&lt;code&gt;min |a - b| for all pairs (a, b) where a ≠ b&lt;/code&gt;</p> <p>As an example, for the array ([3, 8, 15, 1, 14]), the optimal pair is ((14, 15)) with the result being (1), as ( |14 - 15| = 1 ) which is the smallest possible difference.</p> <p>Your task is to implement a function: </p> ```python def min_abs_difference(arr: List[int]) -> int: pass ``` <p>This function should return the minimum absolute difference between any two distinct elements in the array.</p> # Constraints <ul> <li>The array will contain distinct elements and will have a size of (2 le n le 10^5).</li> <li>Each element will be an integer within the range (-10^9) to (10^9).</li> </ul>","solution":"def min_abs_difference(arr): Returns the minimum absolute difference between any two distinct elements in the array. # First, sort the array arr.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Iterate through the array and find the minimum difference for i in range(len(arr) - 1): diff = arr[i + 1] - arr[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"Create a function \'find_palindromic_substrings\' that takes a string input and returns a list of all unique palindromic substrings contained within the input string. A palindromic substring reads the same backward as forward e.g., \\"aba\\". Use efficient algorithms to ensure the function works well with long strings. Provide a brief explanation of the method used and include a couple of test cases to demonstrate the functionality of your solution.","solution":"def find_palindromic_substrings(s): Returns a list of all unique palindromic substrings contained within the input string. palindromic_substrings = set() def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1 for i in range(len(s)): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return list(palindromic_substrings)"},{"question":"Create a function that takes a list of integers and returns a list of the same integers ordered such that even numbers come first and odd numbers follow. Within their respective groups (even or odd), the numbers should be sorted in descending order. For instance, given the list `[3, 1, 2, 4, 7, 5, 6]`, the function should return `[6, 4, 2, 7, 5, 3, 1]`. In this question, the candidate needs to: 1. Identify the even and odd numbers from the list. 2. Sort these two sets of numbers in descending order. 3. Combine the results to produce a single ordered list with even numbers first, followed by odd numbers. Additionally, provide a code snippet that contains a common error, such as not handling the order correctly or mixing even and odd numbers, for the candidate to debug and correct.","solution":"def sort_even_odd_descending(lst): Returns a list of integers such that even numbers are first in descending order, followed by odd numbers in descending order. evens = sorted([x for x in lst if x % 2 == 0], reverse=True) odds = sorted([x for x in lst if x % 2 != 0], reverse=True) return evens + odds # Common mistake snippet def faulty_sort_even_odd(lst): This function does not correctly segregate and sort even and odd numbers. return sorted(lst, reverse=True)"},{"question":"Given a string containing only lowercase alphabets, write a function to find the first non-repeating character in the string. If there is no non-repeating character, return an empty string. # Example Input \\"swiss\\" Output \\"w\\" Explanation In the string \\"swiss\\", the characters \'s\' appears three times, \'i\' appears once and \'w\' appears once. The first non-repeating character is \'w\', which appears before \'i\'. # Constraints - The string length will not exceed 10^5.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns an empty string. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find and return the first non-repeating character for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Implement a function that takes a list of integers and an integer `k`, and returns all unique pairs of integers from the list that sum up to `k`. Each pair should be returned as a tuple sorted in non-decreasing order, and the list of pairs should be sorted in lexicographical order. Example: Input: ``` numbers = [1, 5, 3, 7, 9, 2] k = 10 ``` Output: ``` [(1, 9), (3, 7)] ```","solution":"def find_pairs_with_sum(numbers, k): Finds all unique pairs of integers from the list that sum up to k. Each pair is returned as a tuple sorted in non-decreasing order, and the list of pairs is sorted in lexicographical order. :param numbers: List of integers. :param k: Target sum integer. :return: List of unique pairs (tuples) that sum up to k. pairs = set() seen = set() for num in numbers: complement = k - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs)"},{"question":"Write a Python function `merge_alternate_elements(list1, list2)` that takes two input lists, `list1` and `list2`, and returns a new list containing elements from `list1` and `list2` alternately. If one list is longer than the other, append the remaining elements of the longer list to the end of the new list. For example, given `list1 = [1, 2, 3]` and `list2 = [\'a\', \'b\', \'c\', \'d\', \'e\']`, the function should return `[1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\']`. # Example **Input:** ```python list1 = [1, 2, 3] list2 = [\'a\', \'b\', \'c\', \'d\', \'e\'] ``` **Output:** ```python [1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\'] ``` # Constraints - The elements of `list1` and `list2` can be of any data type. - The input lists can have different lengths. - Do not use any in-built Python functions like `zip` to solve this problem. Make sure your implementation is efficient and handles edge cases such as empty input lists.","solution":"def merge_alternate_elements(list1, list2): Merges two lists by alternating elements. If one list is longer, append the remaining elements of the longer list. Parameters: - list1: The first list. - list2: The second list. Returns: - A new list containing elements from list1 and list2 alternately. merged_list = [] len1, len2 = len(list1), len(list2) min_length = min(len1, len2) for i in range(min_length): merged_list.append(list1[i]) merged_list.append(list2[i]) if len1 > min_length: merged_list.extend(list1[min_length:]) if len2 > min_length: merged_list.extend(list2[min_length:]) return merged_list"},{"question":"Design a function named `find_longest_palindrome`, which receives a single string input and returns the longest palindromic substring within the input string. A palindrome is a sequence of characters that reads the same forward and backward. You need to consider edge cases, such as strings with no palindromic substring longer than one character or strings of considerable length. Optimize the function for efficiency since string lengths could be substantial.","solution":"def find_longest_palindrome(s: str) -> str: Finds the longest palindromic substring in the given string. Parameters: s (str): The input string Returns: str: The longest palindromic substring if not s: return \\"\\" n = len(s) start, end = 0, 0 def expand_around_center(left: int, right: int) -> (int, int): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): # Odd length palindrome l1, r1 = expand_around_center(i, i) # Even length palindrome l2, r2 = expand_around_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"Create a function that determines the shortest path from a starting point to a destination within a 2D grid while circumventing obstacles. The grid is represented as a list of lists with 0\'s indicating navigable cells and 1\'s indicating obstacles. The function should receive the grid, the start and end coordinates, and return the length of the shortest path. If a path is not possible, the function should return -1. # Input - A 2D list `grid` of size `m x n` containing integers (0 or 1) - A tuple `start` representing the starting point coordinates `(x1, y1)` - A tuple `end` representing the destination point coordinates `(x2, y2)` # Output - An integer representing the length of the shortest path from `start` to `end`, or -1 if no such path exists. # Example ```python grid = [ [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [1, 1, 1, 0] ] start = (0, 0) end = (3, 3) # Expected output: 6 ``` # Constraints - The grid will contain at least one cell and at most 10000 cells. - The starting and ending points will always be within the grid boundaries. - The grid values are either 0 or 1, where 0 represents a walkable cell and 1 represents an obstacle.","solution":"from collections import deque def shortest_path(grid, start, end): Finds the shortest path from the start point to the end within a 2D grid. Returns the length of the path, or -1 if no such path exists. if grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function called `find_closest_pair` that takes a list of integers and a target integer as input and returns the pair of integers from the list whose sum is closest to the target value. If multiple pairs have the same closest sum, return the first such pair found. Example: ```python def find_closest_pair(nums, target): # Your code here # Example usage nums = [10, 22, 28, 29, 30, 40] target = 54 result = find_closest_pair(nums, target) print(result) # Output: (22, 30) ``` The function should efficiently search through the list and determine the pair whose sum is closest to the given target, considering both positive and negative integers.","solution":"def find_closest_pair(nums, target): if not nums or len(nums) < 2: return None nums.sort() closest_pair = (None, None) min_diff = float(\'inf\') left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] current_diff = abs(current_sum - target) if current_diff < min_diff: min_diff = current_diff closest_pair = (nums[left], nums[right]) if current_sum < target: left += 1 else: right -= 1 return closest_pair"},{"question":"Consider a binary tree where each node contains a positive integer value. The path sum of a binary tree is defined as the sum of the values of the nodes along a path from the root node to any leaf node. Write a function that, given the root of such a binary tree, returns the maximum path sum. # Constraints - The number of nodes in the tree is in the range [1, 10^4]. - The value of each node is in the range [1, 10^4]. # Example ``` Input: 10 / 5 8 / / 12 4 3 2 Output: 27 Explanation: The path 10 -> 8 -> 3 results in the maximum path sum of 27. ``` # Function Signature ```python def max_path_sum(root: TreeNode) -> int: pass # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Task Implement the function `max_path_sum` which takes the root of the binary tree as its input and returns the maximum path sum as an integer. # Note Focus on implementing a robust solution that efficiently handles the given constraints. Employ standard binary tree traversal techniques to explore and calculate the path sums. Aim to maintain readability, edge case handling, and clear logic in your code.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_path_sum(root: TreeNode) -> int: Returns the maximum path sum in the binary tree. def helper(node: TreeNode) -> int: if not node: return 0 # Calculate max path sum from both left and right subtrees left_max = helper(node.left) right_max = helper(node.right) # Return the max path sum rooted at current node return node.val + max(left_max, right_max) return helper(root)"},{"question":"Design a function `find_longest_substring(s: str) -> str` that, given a string `s`, returns the longest substring without repeating characters. If there are multiple such substrings of the same length, return the one that appears first. ``` Examples: >>> find_longest_substring(\\"abcabcbb\\") \\"abc\\" >>> find_longest_substring(\\"bbbbb\\") \\"b\\" >>> find_longest_substring(\\"pwwkew\\") \\"wke\\" def find_longest_substring(s: str) -> str: # Implement the function here # You can run the following tests to check your implementation: print(find_longest_substring(\\"abcabcbb\\")) # Expected \\"abc\\" print(find_longest_substring(\\"bbbbb\\")) # Expected \\"b\\" print(find_longest_substring(\\"pwwkew\\")) # Expected \\"wke\\" print(find_longest_substring(\\" \\")) # Expected \\" \\" print(find_longest_substring(\\"dvdf\\")) # Expected \\"vdf\\" ```","solution":"def find_longest_substring(s: str) -> str: Returns the longest substring without repeating characters. If there are multiple such substrings of the same length, returns the one that appears first. start = max_length = 0 used_chars = {} longest_substr = \\"\\" for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 longest_substr = s[start:i + 1] used_chars[char] = i return longest_substr"},{"question":"You are given an array of integers representing the heights of buildings, where the width of each building is 1. Implement a function to compute the amount of water that can be trapped after a rain. Write a function: ```python def trap_rain_water(heights: List[int]) -> int: ``` **Input:** - `heights`: A list of non-negative integers representing the height of each building. **Output:** - Return an integer representing the total units of water trapped. **Example:** ```python print(trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1])) # Output: 6 print(trap_rain_water([4,2,0,3,2,5])) # Output: 9 ``` # Constraints: - The length of the `heights` list will not exceed 3 * 10^4. - Each element in the `heights` list is a non-negative integer within the range [0, 1000].","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: Compute the amount of water that can be trapped after a rain given the heights of the buildings. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] trapped_water = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, heights[left]) trapped_water += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) trapped_water += right_max - heights[right] return trapped_water"},{"question":"Develop an algorithm that simulates a weather forecasting model. Your task is to predict daily temperature variations based on historical weather data for a given location. The model should incorporate factors such as humidity, wind speed, and atmospheric pressure to enhance prediction accuracy. Additionally, account for seasonal changes and sudden weather events in your simulation.","solution":"import numpy as np def weather_forecast(historical_data, day_of_year): Simulates a weather forecasting model. Parameters: historical_data (dict): Dictionary containing historical data with keys \'temperature\', \'humidity\', \'wind_speed\', \'pressure\'. Each key contains a list of values representing past recorded data. All lists must have the same length. day_of_year (int): The day of year (1-365) Returns: forecast (float): Predicted temperature for the given day. temperature_data = historical_data[\'temperature\'] humidity_data = historical_data[\'humidity\'] wind_speed_data = historical_data[\'wind_speed\'] pressure_data = historical_data[\'pressure\'] num_data_points = len(temperature_data) # Normalizing the day_of_year for seasonal variation (sinusoidal pattern) seasonal_variation = np.sin(2 * np.pi * day_of_year / 365) # Calculating mean and standard deviation of each historical factor temp_mean = np.mean(temperature_data) temp_std = np.std(temperature_data) humidity_mean = np.mean(humidity_data) humidity_std = np.std(humidity_data) wind_speed_mean = np.mean(wind_speed_data) wind_speed_std = np.std(wind_speed_data) pressure_mean = np.mean(pressure_data) pressure_std = np.std(pressure_data) # Creating weights for each factor humidity_weight = 0.25 wind_speed_weight = 0.25 pressure_weight = 0.25 seasonal_weight = 0.25 # Simulate temperature variation using normalized weights predicted_temperature = ( temp_mean + humidity_weight * (humidity_data[-1] - humidity_mean) / humidity_std + wind_speed_weight * (wind_speed_data[-1] - wind_speed_mean) / wind_speed_std + pressure_weight * (pressure_data[-1] - pressure_mean) / pressure_std + seasonal_weight * seasonal_variation * temp_std ) return predicted_temperature"},{"question":"Implement a Python function that calculates the shortest path between two nodes in a weighted, undirected graph. The function should use Dijkstra\'s algorithm and return the path as a list of nodes. Assume the graph is represented as an adjacency list where the keys are node identifiers and the values are lists of tuples, each containing a neighboring node and the weight of the edge connecting them. Provide a sample graph for testing.","solution":"import heapq def dijkstra(graph, start, end): Calculate the shortest path between two nodes in a weighted, undirected graph using Dijkstra\'s algorithm. Parameters: - graph: dict, adjacency list where keys are nodes and values are lists of tuples (neighbor, weight) - start: starting node - end: ending node Returns: - list of nodes representing the shortest path from start to end # Priority queue to hold nodes to explore queue = [(0, start, [])] heapq.heapify(queue) # Dictionary to hold the shortest path to each node visited = {} while queue: (cost, node, path) = heapq.heappop(queue) # Skip processing if node was already visited with a shorter path if node in visited: continue # Extend the path with the current node path = path + [node] visited[node] = cost # Return path if end node is reached if node == end: return path # Process neighbors for neighbor, weight in graph.get(node, []): if neighbor not in visited: heapq.heappush(queue, (cost + weight, neighbor, path)) return None # If there\'s no valid path # Sample graph for testing sample_graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] }"},{"question":"You are given an array of integers that represents the stock prices of a company over consecutive days. Write a program that returns the maximum profit that can be achieved by buying and selling one share of stock. The program should identify the days on which the stock should be bought and sold to maximize the profit. If no profit can be made, the program should return zero. Ensure your solution is optimized for both time and space complexity.","solution":"def max_profit(stock_prices): Returns the maximum profit that can be achieved by buying and selling one share of stock. If no profit can be made, returns 0. if not stock_prices or len(stock_prices) < 2: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Create a function that processes a list of integers and performs the following tasks: 1. Separate the list into two lists: one containing all the prime numbers and another containing all the non-prime numbers. 2. Sort both lists in ascending order. 3. Calculate the sum of the prime numbers and the sum of the non-prime numbers. 4. Return a dictionary with the primes list, non-primes list, prime sum, and non-prime sum. Input: - A list of integers (1 <= len(list) <= 100; 1 <= element <= 100) Output: - A dictionary with keys \'primes\', \'non_primes\', \'prime_sum\', and \'non_prime_sum\'. Example: Input: [10, 3, 5, 8, 13, 4, 16] Output: { \'primes\': [3, 5, 13], \'non_primes\': [4, 8, 10, 16], \'prime_sum\': 21, \'non_prime_sum\': 38 }","solution":"def is_prime(n): Return True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def process_numbers(numbers): Processes a list of integers to separate primes and non-primes, sort each list, and calculate their sums. Returns a dictionary with primes, non_primes, prime_sum, and non_prime_sum. primes = [] non_primes = [] for number in numbers: if is_prime(number): primes.append(number) else: non_primes.append(number) primes.sort() non_primes.sort() return { \'primes\': primes, \'non_primes\': non_primes, \'prime_sum\': sum(primes), \'non_prime_sum\': sum(non_primes) }"},{"question":"Transform the given Python-based function to not only determine the number of unique elements within an array of integers but also handle a list of integer arrays where the function should return a list of counts of unique elements for each array. ```python def count_unique_elements(arr): return len(set(arr)) ```","solution":"def count_unique_elements(arrays): Returns a list of counts of unique elements for each input array. Parameters: arrays (list of list of int): A list containing arrays of integers. Returns: list of int: A list containing the count of unique elements for each array. return [len(set(arr)) for arr in arrays]"},{"question":"Create a Python program that simulates a simple online library system. The program should allow users to: 1. Add new books with the book\'s title, author, and ISBN number. 2. Remove books by their ISBN number. 3. Search for books by title or author. 4. Display all books sorted by their title in alphabetical order. The program should handle cases where users try to add a book that already exists (based on ISBN), remove a book that does not exist, or search for a book that is not in the library. Use a list of dictionaries to maintain the book records and ensure the program can be executed from the command-line, allowing interactions to perform these operations.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, isbn): Adds a new book to the library. if not any(book[\'isbn\'] == isbn for book in self.books): self.books.append({\'title\': title, \'author\': author, \'isbn\': isbn}) else: raise ValueError(\\"A book with the given ISBN already exists.\\") def remove_book(self, isbn): Removes a book from the library by its ISBN number. for book in self.books: if book[\'isbn\'] == isbn: self.books.remove(book) return raise ValueError(\\"The book with the given ISBN does not exist.\\") def search_books(self, keyword): Searches for books by title or author containing the keyword. result = [book for book in self.books if keyword.lower() in book[\'title\'].lower() or keyword.lower() in book[\'author\'].lower()] return result def display_books(self): Displays all books sorted by their title in alphabetical order. return sorted(self.books, key=lambda book: book[\'title\']) # Example usage: # library = Library() # library.add_book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", \\"1234567890\\") # library.add_book(\\"1984\\", \\"George Orwell\\", \\"2345678901\\") # print(library.display_books()) # print(library.search_books(\\"George\\")) # library.remove_book(\\"1234567890\\") # print(library.display_books())"},{"question":"You are tasked with solving a problem related to finding the maximum depth of a Binary Tree. Provided the `root` of a binary tree, the objective is to determine its maximum depth. The depth of a binary tree is the length of the longest path from the root node down to the farthest leaf node. Consider the following scenarios for better understanding: Scenario 1: Input: root = [3,9,20,null,null,15,7] Output: 3 Scenario 2: Input: root = [1,null,2] Output: 2 Scenario 3: Input: root = [] Output: 0 Scenario 4: Input: root = [0] Output: 1 Scenario 5: Input: root = [1,2,3,4] Output: 3 The constraints to bear in mind are: The quantity of nodes in the tree is within the range `[0, 10^4]`. `-100 <= Node.val <= 100` As an advanced challenge, while a recursive solution is intuitive, can you also implement an iterative solution using a breadth-first search or depth-first search approach?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Create a function that takes an integer n as input and returns a list of the first n pentagonal numbers. The pentagonal number for a given positive integer k is calculated using the formula `P(k) = k*(3k-1)/2`. The function should handle input validation, ensuring that n is a positive integer. If n is not a positive integer, return an empty list. Provide an example of how the function works with n = 5.","solution":"def get_pentagonal_numbers(n): Returns a list of the first n pentagonal numbers. Parameters: n: int - the count of pentagonal numbers to generate; must be a positive integer Returns: list of n pentagonal numbers, or an empty list if n is not a positive integer. if not isinstance(n, int) or n <= 0: return [] pentagonal_numbers = [(k * (3 * k - 1)) // 2 for k in range(1, n + 1)] return pentagonal_numbers"},{"question":"Implement a function `find_longest_palindrome` that takes a string as input and returns the longest palindromic substring within the given string. Consider the time complexity and ensure the implementation is efficient for large input strings. If there are multiple palindromic substrings of the same maximum length, return the first one that appears.","solution":"def find_longest_palindrome(s): Returns the longest palindromic substring within the given string. If there are multiple palindromic substrings of the same maximum length, returns the first one. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Even length palindrome low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Odd length palindrome low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"You are tasked with writing a function to compute the factorial of a given non-negative integer. The function should handle large inputs efficiently by checking for possible integer overflow. Implement a solution that makes use of recursion, but also includes a mechanism to track and prevent stack overflow for exceptionally large integers.","solution":"import sys sys.setrecursionlimit(1500) def factorial(n): Returns the factorial of a given non-negative integer n. Handles large inputs efficiently by checking for maximum recursion depth. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n <= 1: return 1 return n * factorial(n - 1)"},{"question":"In Python, create a decorator function named `time_logger` that logs the time taken by a function to execute. Use the `time` module to record the start and end times and print the duration. Decorate the following sample function with `time_logger`: ```python import time def sample_function(n): total = 0 for i in range(n): total += i return total # output the result of sample_function(1000000) ``` Write the decorator function `time_logger`, apply it to `sample_function`, call `sample_function(1000000)`, and output both the result and the execution time.","solution":"import time def time_logger(func): def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() duration = end_time - start_time print(f\\"Function {func.__name__} took {duration:.4f} seconds to execute\\") return result return wrapper @time_logger def sample_function(n): total = 0 for i in range(n): total += i return total result = sample_function(1000000) print(f\\"Result: {result}\\")"},{"question":"Write a Python function that takes a string of text containing multiple sentences and returns the sentence with the highest number of unique words. Ensure your function handles punctuation and is case-insensitive. If there are multiple sentences with the same highest number of unique words, return the first one. Handle possible errors such as an empty string or incorrect input types gracefully by returning a meaningful error message.","solution":"import re def sentence_with_most_unique_words(text): This function takes a string of text containing multiple sentences and returns the sentence with the highest number of unique words. Sentences are separated by \'.\', \'!\', or \'?\'. The function ignores case and punctuation. if not isinstance(text, str): return \\"Error: Input should be a string.\\" if not text.strip(): return \\"Error: Input string is empty.\\" sentences = re.split(r\'[.!?]\', text) max_unique_words = 0 result_sentence = \\"\\" for sentence in sentences: words = re.findall(r\'bw+b\', sentence.lower()) unique_words = set(words) if len(unique_words) > max_unique_words: max_unique_words = len(unique_words) result_sentence = sentence.strip() if result_sentence: return result_sentence else: return \\"Error: No valid sentences found in the input text.\\""},{"question":"Design a Python class that represents a Bank Account. The Bank Account class should have: - Attributes for the account number, account holder\'s name, and balance. - A method to deposit a specific amount to the account. - A method to withdraw a specific amount from the account. - A method to compute the interest on the current balance based on a specified interest rate. - A method to display the account details (account number, account holder\'s name, and balance).","solution":"class BankAccount: def __init__(self, account_number, account_holder_name, balance=0.0): self.account_number = account_number self.account_holder_name = account_holder_name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if amount <= self.balance: self.balance -= amount else: raise ValueError(\'Insufficient funds\') def compute_interest(self, interest_rate): return self.balance * interest_rate / 100 def display_account_details(self): return { \\"account_number\\": self.account_number, \\"account_holder_name\\": self.account_holder_name, \\"balance\\": self.balance }"},{"question":"Design a function that takes a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Implement the function using a stack data structure, and discuss the time and space complexity of your solution. Provide a rationale for why the stack is a suitable choice for this type of problem.","solution":"def is_valid_parentheses(s): Determine if the input string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid. Args: s (str): the input string with parentheses Returns: bool: True if the string is valid, False otherwise stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack # Time complexity: O(n) where n is the length of the string, as we process each character once. # Space complexity: O(n) in the worst case, if all opening brackets are stored in the stack. # A stack is used here because the last opened bracket needs to be the first one to be closed, which follows the LIFO (Last In, First Out) principle."},{"question":"<p>Consider a sequence of integers defined as follows: a_1 = 1, a_2 = 2, and for n geq 3, a_n is the smallest positive integer that has not appeared earlier in the sequence and is coprime with a_{n-1}.</p> <p>Given an integer N, implement a function to compute the first N terms of this sequence.</p> <p><b>Function Signature:</b></p> <pre> def coprime_sequence(N: int) -> List[int]: </pre> <p><b>Input:</b></p> <ul> <li>An integer <code>N</code> (1 ≤ N ≤ 1000) representing the number of terms to generate in the sequence.</li> </ul> <p><b>Output:</b></p> <ul> <li>A list of integers of length <code>N</code> representing the first <code>N</code> terms of the sequence.</li> </ul> <p><b>Example:</b></p> <pre> coprime_sequence(5) -> [1, 2, 3, 4, 5] coprime_sequence(10) -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] </pre> <p><b>Note:</b> In the first example, all numbers from 1 to 5 are coprime with their preceding terms and have not appeared earlier in the sequence.</p>","solution":"from typing import List from math import gcd def coprime_sequence(N: int) -> List[int]: Generate the first N terms of the sequence where: a_1 = 1, a_2 = 2, and for n >= 3, a_n is the smallest positive integer that has not appeared earlier in the sequence and is coprime with a_{n-1}. if N == 1: return [1] if N == 2: return [1, 2] sequence = [1, 2] for _ in range(3, N+1): last = sequence[-1] candidate = 1 while candidate in sequence or gcd(candidate, last) != 1: candidate += 1 sequence.append(candidate) return sequence"},{"question":"Design an algorithm that takes a numerical array and a target sum as inputs, and identifies all unique pairs of elements within the array that add up to the target sum. Ensure each pair in the result is sorted in ascending order, and the result should not contain duplicate pairs. If no such pairs exist, return an empty list. arr = [1, 2, 3, 4, 5, 6, -1, -2, -3] target_sum = 4","solution":"def find_pairs_with_sum(arr, target_sum): This function takes a numerical array and a target sum as inputs, and identifies all unique pairs of elements within the array that add up to the target sum. Each pair in the result is sorted in ascending order, and the result does not contain duplicate pairs. seen = set() potential_pairs = set() for num in arr: complement = target_sum - num if complement in seen: potential_pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in potential_pairs]"},{"question":"Design a function that takes a string containing an arithmetic expression in infix notation and returns the result of evaluating the expression. The expression can contain non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Operator precedence should be respected and parentheses are not allowed. Your function should parse and evaluate the expression correctly. Additionally, handle any divide-by-zero errors by returning an error message. **Function Signature:** ```python def evaluate_expression(expression: str) -> Union[int, str]: pass ``` **Examples:** ```python assert evaluate_expression(\\"3+5*2\\") == 13 assert evaluate_expression(\\"10+20/2\\") == 20 assert evaluate_expression(\\"8*3-2\\") == 22 assert evaluate_expression(\\"4/0\\") == \\"Error: Division by zero\\" assert evaluate_expression(\\"100-50*2+3\\") == 3 ``` # Constraints: - The input string will be a valid arithmetic expression. - The length of the input string will not exceed 100 characters. - Do not use the `eval` function or similar unsafe functions to directly evaluate the expression.","solution":"from typing import Union def evaluate_expression(expression: str) -> Union[int, str]: def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': if right == 0: raise ZeroDivisionError(\\"division by zero\\") values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: try: apply_operator(operators, values) except ZeroDivisionError: return \\"Error: Division by zero\\" return values[0]"},{"question":"Implement a Python function that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the counts of their occurrences in the list. Make sure to include proper error handling for cases where the input is not a list of strings. Provide example input and output to illustrate the functionality of your function. For example: ```python def count_string_occurrences(input_list): # Your implementation here # Example usage: example_list = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"] print(count_string_occurrences(example_list)) # Expected output: {\\"apple\\": 3, \\"banana\\": 2, \\"orange\\": 1} ```","solution":"def count_string_occurrences(input_list): Takes a list of strings and returns a dictionary with the counts of occurrences of each string. Args: input_list (list): List of strings to count occurrences. Returns: dict: Dictionary with strings as keys and their occurrence counts as values. Raises: ValueError: If input_list is not a list of strings. if not isinstance(input_list, list) or not all(isinstance(item, str) for item in input_list): raise ValueError(\\"Input must be a list of strings\\") occurrence_dict = {} for item in input_list: if item in occurrence_dict: occurrence_dict[item] += 1 else: occurrence_dict[item] = 1 return occurrence_dict"},{"question":"Create a function `decode_compressed` that decodes a run-length encoded string. The input string is composed of pairs of integers and characters, which indicate how many times each character should be repeated in the decoded string. Your function should return the original string. Write the function `decode_compressed(compressed: str) -> str` that: 1. Processes the input string to extract the pairs of integers and characters. 2. Rebuilds and returns the original string by repeating each character according to its count. Ensure your function handles edge cases, such as an empty input string or invalid formats. Do not import extra modules or libraries. Validate your implementation with the provided examples to ensure it produces correct results. Examples: - `decode_compressed(\'\')` should return an empty string `\'\'`. - `decode_compressed(\'3a2b\')` should return `\'aaabb\'`. - `decode_compressed(\'1a5b1c\')` should return `\'abbbbbc\'`. - `decode_compressed(\'4z3y\')` should return `\'zzzzyyy\'`. ```python def decode_compressed(compressed: str) -> str: Decode a run-length encoded string of integer and character pairs into the original string decoded_string = \\"\\" i = 0 while i < len(compressed): # Read the count (which can be more than one digit) count = 0 while i < len(compressed) and compressed[i].isdigit(): count = count * 10 + int(compressed[i]) i += 1 # Assuming the next character is the one to be repeated if i < len(compressed): char = compressed[i] decoded_string += char * count i += 1 return decoded_string ```","solution":"def decode_compressed(compressed: str) -> str: Decode a run-length encoded string of integer and character pairs into the original string decoded_string = \\"\\" i = 0 while i < len(compressed): # Read the count (which can be more than one digit) count = 0 while i < len(compressed) and compressed[i].isdigit(): count = count * 10 + int(compressed[i]) i += 1 # Assuming the next character is the one to be repeated if i < len(compressed): char = compressed[i] decoded_string += char * count i += 1 return decoded_string"},{"question":"Implement a custom dynamic array in Python. Your implementation should support the following operations efficiently: - `append(value)`: Add an element to the end of the array. - `pop()`: Remove and return the last element of the array. - `insert(index, value)`: Insert an element at a specific index. - `remove(value)`: Remove the first occurrence of the specified value. - `get(index)`: Retrieve the element at the specified index. Ensure that your implementation dynamically resizes the underlying storage array when it reaches capacity, similar to Python\'s built-in list. Additionally, override the `__len__` and `__str__` methods to return the number of elements in the array and a string representation of the array, respectively.","solution":"class DynamicArray: def __init__(self): self._capacity = 1 self._size = 0 self._array = [None] * self._capacity def _resize(self, new_capacity): new_array = [None] * new_capacity for i in range(self._size): new_array[i] = self._array[i] self._array = new_array self._capacity = new_capacity def append(self, value): if self._size == self._capacity: self._resize(2 * self._capacity) self._array[self._size] = value self._size += 1 def pop(self): if self._size == 0: raise IndexError(\\"pop from empty array\\") value = self._array[self._size - 1] self._size -= 1 self._array[self._size] = None if self._size > 0 and self._size <= self._capacity // 4: self._resize(self._capacity // 2) return value def insert(self, index, value): if index < 0 or index >= self._size: raise IndexError(\\"index out of range\\") if self._size == self._capacity: self._resize(2 * self._capacity) for i in range(self._size, index, -1): self._array[i] = self._array[i-1] self._array[index] = value self._size += 1 def remove(self, value): for i in range(self._size): if self._array[i] == value: for j in range(i, self._size - 1): self._array[j] = self._array[j+1] self._array[self._size - 1] = None self._size -= 1 if self._size > 0 and self._size <= self._capacity // 4: self._resize(self._capacity // 2) return raise ValueError(\\"value not found in array\\") def get(self, index): if index < 0 or index >= self._size: raise IndexError(\\"index out of range\\") return self._array[index] def __len__(self): return self._size def __str__(self): return str([self._array[i] for i in range(self._size)])"},{"question":"Create a Python function that simulates a basic calculator. The function should take two numerical inputs and a string representing one of the following operations: \'add\', \'subtract\', \'multiply\', or \'divide\'. Ensure the function returns the correct result. If an invalid operation is passed, return a message indicating the error. Example: ``` calculator(10, 5, \'add\') # returns 15 calculator(10, 5, \'divide\') # returns 2.0 calculator(10, 5, \'unknown\') # returns \'Error: Invalid operation\' ```","solution":"def calculator(a, b, operation): Simulates a basic calculator. Parameters: a (float): First numerical input. b (float): Second numerical input. operation (str): A string representing the operation (\'add\', \'subtract\', \'multiply\', \'divide\'). Returns: float or str: The result of the operation or an error message if the operation is invalid. if operation == \'add\': return a + b elif operation == \'subtract\': return a - b elif operation == \'multiply\': return a * b elif operation == \'divide\': if b != 0: return a / b else: return \'Error: Division by zero\' else: return \'Error: Invalid operation\'"},{"question":"Create a function that accepts a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. Ensure that the function handles an empty list properly by returning an empty dictionary.","solution":"def count_occurrences(nums): Takes a list of integers and returns a dictionary with unique integers as keys and their counts as values. :param nums: List of integers :return: Dictionary with integers as keys and their counts as values result = {} for num in nums: if num in result: result[num] += 1 else: result[num] = 1 return result"},{"question":"Write a function that takes a list of strings and returns a dictionary where the keys are the first characters of the strings and the values are lists containing all strings that start with that character. Ensure the function is case-insensitive and handles non-alphabetic characters appropriately by skipping them. ```python def group_strings_by_initial(strings): result = {} for s in strings: if not s: continue # Skip empty strings initial = s[0].lower() if initial.isalpha(): if initial not in result: result[initial] = [] result[initial].append(s) return result ``` Add comments to explain your code and ensure it adheres to Python\'s PEP 8 style guide. Additionally, include error handling to manage potential issues such as invalid inputs (e.g. non-string values in the list). Furthermore, provide a few test cases to demonstrate the functionality of your function.","solution":"def group_strings_by_initial(strings): Group strings by their initial character. Args: strings (list): List of strings to be grouped. Returns: dict: A dictionary where the keys are the first alphabetic character (case-insensitive) of the strings, and the values are lists of strings that start with that character. result = {} for s in strings: if not isinstance(s, str): raise ValueError(\\"All elements in the input list must be strings\\") if not s: continue # Skip empty strings initial = s[0].lower() if initial.isalpha(): if initial not in result: result[initial] = [] result[initial].append(s) return result"},{"question":"Given an array of integers and a number `k`, write a function to find the `k` most frequent elements. You may assume that the array is non-empty and `k` is always valid (1 ≤ k ≤ number of unique elements). The function should return the result in any order. For example: ```python def top_k_frequent(nums, k): \'\'\' Given a list of integers and an integer k, return the k most frequent elements. The result can be in any order. For example: top_k_frequent([1, 1, 1, 2, 2, 3], 2) should return [1, 2] top_k_frequent([4, 4, 4, 4, 5, 6, 6, 7, 7, 7], 3) should return [4, 7, 6] Note: In case of ties, any order of tied elements is acceptable. \'\'\' # Insert your code in this area. ``` Ensure your solution is optimally efficient for large datasets.","solution":"from collections import Counter import heapq def top_k_frequent(nums, k): Given a list of integers and an integer k, return the k most frequent elements. The result can be in any order. :param nums: List[int] :param k: int :return: List[int] # Count the frequency of each element in the list count = Counter(nums) # Use a heap to get the k most frequent elements return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"Given a list of positive integers, implement a function that computes the second largest unique number. If there is no such number, return -1. For example: - For the list [4, 2, 5, 7, 7, 5, 1, 3], the result should be 5. - For the list [3, 1, 4, 4, 5, 2, 2], the result should be 4. - For the list [7, 7, 7], the result should be -1. Function Signature: ```python def second_largest_unique(nums: List[int]) -> int: pass ```","solution":"from typing import List def second_largest_unique(nums: List[int]) -> int: Returns the second largest unique number in the list. If there is no such number, returns -1. unique_nums = list(set(nums)) # Remove duplicates if len(unique_nums) < 2: return -1 # Not enough unique numbers available unique_nums.sort(reverse=True) # Sort in descending order return unique_nums[1] # The second element in the sorted list is the second largest"},{"question":"Design a function that takes a list of integers and returns a list of tuples, where each tuple contains an integer from the input list and its frequency of occurrence. Ensure the returned list of tuples is sorted by the integers in ascending order.","solution":"def count_frequencies(numbers): Takes a list of integers and returns a list of tuples, where each tuple contains an integer from the input list and its frequency of occurrence. The returned list of tuples is sorted by the integers in ascending order. from collections import Counter frequency_dict = Counter(numbers) sorted_items = sorted(frequency_dict.items()) return sorted_items"},{"question":"Complete the implementation of a Python function that performs matrix transposition and returns the transposed matrix. def transpose_matrix(matrix): Transpose a given matrix. Args: matrix (list of list of int): A 2D array representing the matrix to be transposed Returns: list of list of int: Transposed matrix # Your code here","solution":"def transpose_matrix(matrix): Transpose a given matrix. Args: matrix (list of list of int): A 2D array representing the matrix to be transposed Returns: list of list of int: Transposed matrix return list(map(list, zip(*matrix)))"},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary. The dictionary should group the integers by their number of digits. For example, for input `[1, 23, 456, 78, 9, 1234]`, the output should be `{1: [1, 9], 2: [23, 78], 3: [456], 4: [1234]}`. ```python def group_by_digit_length(int_list): digit_dict = {} for num in int_list: digit_length = len(str(num)) if digit_length not in digit_dict: digit_dict[digit_length] = [] digit_dict[digit_length].append(num) return digit_dict # Example usage print(group_by_digit_length([1, 23, 456, 78, 9, 1234])) # Output: {1: [1, 9], 2: [23, 78], 3: [456], 4: [1234]} ```","solution":"def group_by_digit_length(int_list): Groups integers by the number of their digits. Parameters: int_list (list of int): List of integers to be grouped. Returns: dict: A dictionary where keys are digit lengths and values are lists of integers with that digit length. digit_dict = {} for num in int_list: digit_length = len(str(num)) if digit_length not in digit_dict: digit_dict[digit_length] = [] digit_dict[digit_length].append(num) return digit_dict"},{"question":"You are given a 2D grid `grid` representing a city where `blockages` are marked with `-1` and empty spaces are marked with `0`. Some buildings are placed in the city, each represented by a non-zero positive integer `b`, indicating the height of the building. Your task is to determine the distance from the building with the maximum height to the nearest empty space. The distance is defined as the shortest number of moves required to reach an empty space from the building. You can move up, down, left, or right (4 directions). Return the minimum distance to the nearest empty space from the building with the highest height. If there are multiple buildings with the same maximum height, return the minimum distance among them. If there are no empty spaces, return `-1`. Example: Input: grid = [[0, 2, -1], [3, 0, 1], [2, -1, 4]] Output: 2 Example: Input: grid = [[-1, -1], [-1, -1]] Output: -1 Example: Input: grid = [[0, 3, 0], [2, 4, 1], [0, 0, 4]] Output: 1 Constraints: `m == grid.length` `n == grid[i].length` `1 <= m, n <= 100` `-1 <= grid[i][j] <= 10^3`","solution":"from collections import deque def bfs(grid, start): m, n = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * n for _ in range(m)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited[start[0]][start[1]] = True while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: if grid[nx][ny] == 0: return dist + 1 visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return float(\'inf\') def min_distance_to_empty_space(grid): if not grid or not grid[0]: return -1 max_height = -1 buildings = [] # Identify the max height and its positions for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] > 0: if grid[i][j] > max_height: max_height = grid[i][j] buildings = [(i, j)] elif grid[i][j] == max_height: buildings.append((i, j)) if max_height == -1: return -1 min_distance = float(\'inf\') for building in buildings: distance = bfs(grid, building) if distance < min_distance: min_distance = distance return min_distance if min_distance != float(\'inf\') else -1"},{"question":"Write a python function that takes two inputs: a string representing a mathematical expression and a numerical value. The function should verify if the given numerical value is the result of evaluating the mathematical expression. The mathematical expression may contain any of the four basic arithmetic operators (+, -, *, /) and can include parentheses to denote the order of operations. The function should handle both integer and floating-point arithmetic. The function should also be robust to handle invalid mathematical expressions or division by zero by returning a descriptive error message in such cases. Finally, the function should correctly interpret expressions that include both unary and binary operators (for example, handling `-3 + 5` correctly). Return True if the given numerical value matches the result of the expression evaluation, otherwise return False. If the expression is invalid or causes an error during evaluation, return the corresponding error message instead of True/False.","solution":"def evaluate_expression(expression, value): Evaluates the given mathematical expression and checks if it matches the provided numerical value. :param expression: str, the mathematical expression to evaluate :param value: int or float, the numerical value to compare the result against :return: bool or str, True if the evaluated result matches the value, False otherwise, or an error message if the expression is invalid or causes an error during evaluation. try: # Evaluate the expression result = eval(expression) # Compare the result with the provided value return result == value except ZeroDivisionError: return \\"Error: Division by zero\\" except Exception as e: return f\\"Error: Invalid expression - {str(e)}\\""},{"question":"Given a file containing a list of JSON objects, each representing a student\'s performance in various subjects, write a Python program to: 1. Read and parse the JSON data. 2. Calculate and display each student\'s total score, average score, and their corresponding grade based on the following grading scheme: - A: 90-100 - B: 80-89 - C: 70-79 - D: 60-69 - F: 0-59 3. Generate a summary report that includes the highest, lowest, and average scores for each subject. Example JSON data: ```json [ {\\"name\\": \\"Alice\\", \\"scores\\": {\\"math\\": 85, \\"science\\": 90, \\"english\\": 78}}, {\\"name\\": \\"Bob\\", \\"scores\\": {\\"math\\": 58, \\"science\\": 62, \\"english\\": 74}}, {\\"name\\": \\"Charlie\\", \\"scores\\": {\\"math\\": 92, \\"science\\": 87, \\"english\\": 81}} ] ```","solution":"import json def calculate_grade(score): if score >= 90: return \\"A\\" elif score >= 80: return \\"B\\" elif score >= 70: return \\"C\\" elif score >= 60: return \\"D\\" else: return \\"F\\" def process_student_data(file_path): with open(file_path, \'r\') as f: data = json.load(f) result = [] subject_summary = {} for student in data: name = student[\'name\'] scores = student[\'scores\'] total_score = sum(scores.values()) average_score = total_score / len(scores) grade = calculate_grade(average_score) result.append({ \'name\': name, \'total_score\': total_score, \'average_score\': average_score, \'grade\': grade }) for subject, score in scores.items(): if subject not in subject_summary: subject_summary[subject] = { \'highest\': score, \'lowest\': score, \'total\': score, \'count\': 1 } else: subject_summary[subject][\'highest\'] = max(subject_summary[subject][\'highest\'], score) subject_summary[subject][\'lowest\'] = min(subject_summary[subject][\'lowest\'], score) subject_summary[subject][\'total\'] += score subject_summary[subject][\'count\'] += 1 for subject in subject_summary: subject_summary[subject][\'average\'] = subject_summary[subject][\'total\'] / subject_summary[subject][\'count\'] return result, subject_summary"},{"question":"Write a function that takes a string consisting only of lowercase letters and returns a list of tuples. Each tuple should contain a letter from the string and the number of times that letter appears consecutively. The function signature should be: ```python def consecutive_letter_count(s: str) -> List[Tuple[str, int]]: ``` # Example: Input: ```python s = \\"aaabbcccdc\\" ``` Output: ```python [(\'a\', 3), (\'b\', 2), (\'c\', 3), (\'d\', 1), (\'c\', 1)] ``` Explanation: - \'a\' appears consecutively 3 times - \'b\' appears consecutively 2 times - \'c\' appears consecutively 3 times, then \'d\' appears once followed by \'c\' again appearing once","solution":"from typing import List, Tuple def consecutive_letter_count(s: str) -> List[Tuple[str, int]]: if not s: return [] result = [] count = 1 previous_char = s[0] for current_char in s[1:]: if current_char == previous_char: count += 1 else: result.append((previous_char, count)) previous_char = current_char count = 1 result.append((previous_char, count)) return result"},{"question":"Implement a function that determines whether a given string is a \\"quasi-palindrome.\\" A quasi-palindrome is defined as a string that can be transformed into a palindrome by removing exactly one character. # Function Signature ```python def is_quasi_palindrome(s: str) -> bool: pass ``` # Examples ```python is_quasi_palindrome(\\"abca\\") # returns True (remove \'b\' or \'c\') is_quasi_palindrome(\\"racecar\\") # returns False (already a palindrome, no need to remove) is_quasi_palindrome(\\"abcdef\\") # returns False (removal of one character still cannot form a palindrome) ``` # Input - `s` (1 <= len(s) <= 10^5): A string consisting of lowercase English letters. # Output - A boolean result indicating whether the input string is a quasi-palindrome. **Note:** To solve this problem efficiently, iterate through the string from both ends towards the center, checking for mismatches. If a mismatch is found, try skipping either the character from the left or the right and check if the rest of the string forms a palindrome.","solution":"def is_palindrome(s: str) -> bool: Helper function to check if the given string is a palindrome. return s == s[::-1] def is_quasi_palindrome(s: str) -> bool: Returns whether a string is a quasi-palindrome, meaning it can be transformed into a palindrome by removing exactly one character. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Attempt to remove one character from either side and check for palindrome skip_left = s[left + 1:right + 1] skip_right = s[left:right] return is_palindrome(skip_left) or is_palindrome(skip_right) left += 1 right -= 1 return False"},{"question":"Write a function called `matrix_diagonal` that takes a square matrix (a list of lists, with the same number of rows and columns) as its argument and returns a list containing the elements from the main diagonal of the matrix. The main diagonal of a matrix consists of the elements that run from the top-left corner to the bottom-right corner (i.e., elements where the row index is equal to the column index). Assume the input matrix contains only integers. # Example If the input is: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ```python [1, 5, 9] ``` # Constraints - You may assume that the input matrix is not empty and will always be a square matrix. - The matrix dimensions will not exceed 1000x1000.","solution":"def matrix_diagonal(matrix): Returns the elements from the main diagonal of the square matrix. return [matrix[i][i] for i in range(len(matrix))]"},{"question":"Incorporate pandas and matplotlib libraries in Python. Load a CSV file containing sales data into a dataframe, assuming the file is named \'sales_data.csv\' and has columns: \'Date\', \'Region\', \'Sales\'. Create a bar plot showing the total sales for each region, with the regions on the x-axis and the total sales on the y-axis. Ensure each bar is displayed with a different color, and the plot includes a title \'Total Sales by Region\'.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_total_sales_by_region(csv_file): Reads sales data from a CSV file and creates a bar plot showing the total sales by region. Args: csv_file (str): The path to the CSV file containing the sales data. # Load the CSV file into a DataFrame df = pd.read_csv(csv_file) # Group the data by Region and sum the Sales region_sales = df.groupby(\'Region\')[\'Sales\'].sum() # Create the bar plot region_sales.plot(kind=\'bar\', color=plt.cm.tab20.colors) # Set title and labels plt.title(\'Total Sales by Region\') plt.xlabel(\'Region\') plt.ylabel(\'Total Sales\') # Display the plot plt.show()"},{"question":"Write a function in Python that takes a list of integers and separates it into two lists: one containing all the even integers and one containing all the odd integers. The order of integers in the output lists should remain the same as the input list. For example, given the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], the function should return ([2, 4, 6, 8, 10], [1, 3, 5, 7, 9]).","solution":"def separate_even_odd(nums): Separates the input list into two lists: even numbers and odd numbers. Parameters: nums (list): List of integers to be separated. Returns: tuple: A tuple containing two lists - first list with even numbers and second list with odd numbers. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens, odds"},{"question":"Given a string s, write a function that determines if it is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., \\"A man, a plan, a canal: Panama\\". Example: ``` \\"A man, a plan, a canal: Panama\\" -> true \\"race a car\\" -> false ```","solution":"def is_palindrome(s): Checks if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare filtered list with its reversed version return filtered_chars == filtered_chars[::-1]"},{"question":"Given an array of integers, rotate the array to the right by a given number of steps k, where k is a non-negative integer. For example, with an array [1, 2, 3, 4, 5, 6, 7] and k = 3, the resulting array after rotation should be [5, 6, 7, 1, 2, 3, 4]. Write a function that performs this rotation in-place and optimize for efficiency.","solution":"def rotate(nums, k): Rotates the array to the right by k steps. n = len(nums) k = k % n # In case k is greater than the array length nums[:] = nums[-k:] + nums[:-k] # Slice and concatenate the rotated parts"},{"question":"Write a function that takes a list of tuples, with each tuple containing two numerical values representing the coordinates of a point on a 2D plane. The function should return a list of these points sorted by their distance from the origin (0,0), in ascending order. For example, if the input list is [(1, 2), (3, 4), (0, -1)], your function should return [(0, -1), (1, 2), (3, 4)]. Additionally, write another function to verify the correctness of the first function. This function should ensure that the points are indeed sorted by their distance from the origin, and that all original points are present in the output. Note: You should not use any built-in sort() function. Provide separate functions for each task and ensure your solution handles edge cases such as an empty list or points lying at the same distance from the origin.","solution":"import math def distance_from_origin(point): Computes the Euclidean distance from the origin (0,0) for a given point. return math.sqrt(point[0]**2 + point[1]**2) def sort_points(points): Sorts a list of points by their distance from the origin (0,0). Returns a list of sorted points. sorted_points = [] # Copy the original list to avoid mutating the input list points_copy = points.copy() while points_copy: # Find the minimum distance point and remove it from the copy list min_point = min(points_copy, key=distance_from_origin) sorted_points.append(min_point) points_copy.remove(min_point) return sorted_points def verify_sorting(original_points, sorted_points): Verifies that the sorted points are actually sorted by their distance from the origin and that all original points are present in the sorted list. # Check if all original points are present in the sorted list if set(original_points) != set(sorted_points): return False # Check if sorted_points is sorted by distance for i in range(1, len(sorted_points)): if distance_from_origin(sorted_points[i-1]) > distance_from_origin(sorted_points[i]): return False return True"},{"question":"Write a function that takes a string of text and a dictionary of banned words, then returns a list of the most common words in the text that are not part of the banned list. The function should ignore case, punctuation, and whitespace differences. Additionally, handle edge cases such as empty strings, strings with no valid words, and invalid inputs. Ensure that the function is optimized to work efficiently with texts up to 1GB in size. Provide unit tests to validate your function across a variety of scenarios, including typical use cases and edge cases, to ensure robustness.","solution":"import re from collections import Counter def most_common_words(text, banned_words, top_n=10): Returns a list of the most common words in the text that are not part of the banned words. Args: - text (str): the input text. - banned_words (dict): a dictionary of banned words. - top_n (int): number of top common words to return, default is 10. Returns: - List of the most common words not in the banned list. if not isinstance(text, str) or not isinstance(banned_words, (set, dict)): raise ValueError(\\"Invalid input\\") # Normalize the text: convert to lower case and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) # Split text into words words = text.split() # Filter out banned words filtered_words = [word for word in words if word not in banned_words] # Count word frequencies word_counts = Counter(filtered_words) # Get the most common words most_common = word_counts.most_common(top_n) return [word for word, count in most_common]"},{"question":"You are given a string and a target word. Write a Python function that counts how many times the target word appears in the given string. Assume the words in the string are separated by single spaces. Make sure your code handles the case where the target word might be at the beginning, middle, or end of the string. For example, if the input string is \\"apple orange apple banana apple\\" and the target word is \\"apple\\", the function should return 3.","solution":"def count_target_word(string, target): Counts how many times the target word appears in the given string. Parameters: string (str): The input string containing words separated by single spaces. target (str): The word to count in the input string. Returns: int: The count of target word in the input string. words = string.split() count = words.count(target) return count"},{"question":"Write a function that accepts a string and returns a dictionary. The key in the dictionary should be the distinct vowel in the string (case-insensitive) and the value should be a list of positions (starting from 0) where that specific vowel occurs in the string. Ignore all the characters that are not vowels. For example, for the input \'Hello World\', the output should be {\'e\': [1], \'o\': [4, 7]}.","solution":"def vowel_positions(s): Returns a dictionary where the key is a distinct vowel (case-insensitive) and the value is a list of positions (0-based index) where the vowel occurs. vowels = \\"aeiou\\" result = {} for index, char in enumerate(s.lower()): if char in vowels: if char not in result: result[char] = [] result[char].append(index) return result"},{"question":"Given a list of strings, each string representing a sequence of parentheses, write a function `validate_parentheses` that checks if each sequence is valid. A sequence of parentheses is considered valid if it satisfies the following conditions: - Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. - Opening parentheses must be closed in the correct order such that \'(\' must come before its corresponding \')\' and no closing parenthesis \')\' appears before a matching opening parenthesis \'(\'. The function should return a list of boolean values, where each value represents whether the corresponding sequence in the input list is valid. Examples: - For the string \\"()\\", it is valid. - For the string \\"(())\\", it is valid. - For the string \\"(()\\", it is not valid. - For the string \\"())\\", it is not valid. - For the string \\")(\\", it is not valid. Given the list of strings: [\\"()\\", \\"(())\\", \\"(()\\", \\"())\\", \\")(\\"] Write a Python function to validate each sequence of parentheses and return the corresponding list of boolean values.","solution":"def validate_parentheses(sequences): Given a list of strings representing sequences of parentheses, this function checks if each sequence is valid. :param sequences: List[String] - List of strings with parentheses sequences :return: List[Bool] - List of booleans corresponding to validity of each sequence def is_valid(sequence): Check if a single sequence of parentheses is valid. :param sequence: String - The parentheses sequence :return: Bool - True if valid, False otherwise stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0 return [is_valid(seq) for seq in sequences]"},{"question":"Can you explain what recursion is and provide an example of a recursive function in any programming language?","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a Python function to determine if a given string is a permutation of a palindrome. The function should ignore spaces, punctuation, and case differences. Additionally, develop the function to raise a custom exception when the input string contains numerical digits.","solution":"import re from collections import Counter class InvalidInputException(Exception): pass def is_permutation_of_palindrome(s): Determine if a given string is a permutation of a palindrome. Ignore spaces, punctuation, and case differences. Raise InvalidInputException when the input string contains numerical digits. if any(char.isdigit() for char in s): raise InvalidInputException(\\"Input string contains numerical digits\\") # Remove non-alphabetical characters and convert to lowercase s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count character frequencies char_count = Counter(s) # Check for at most one odd-count character odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function that takes an array of integers as input and returns an array containing only the prime numbers from the original array in the same order. If the input array does not contain any prime numbers, return an empty array. Example: Input: [10, 29, 15, 17, 93, 97] Output: [29, 17, 97]","solution":"def is_prime(num): Check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(arr): Returns an array containing only the prime numbers from the original array in the same order. return [x for x in arr if is_prime(x)]"},{"question":"Write a Python function that calculates the factorial of a given positive integer. The function should take a single integer as input and return the factorial of that number. Validate the input to ensure it\'s a non-negative integer, else return an appropriate error message. Include comments in your code to explain the logic.","solution":"def factorial(n): Calculate the factorial of a given positive integer n. Parameters: n (int): A non-negative integer whose factorial is to be calculated. Returns: int: The factorial of the given number n. str: Error message in case of invalid input. if not isinstance(n, int) or n < 0: return \\"Input must be a non-negative integer.\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a function named `groupAnagrams` to group a list of strings into sets of anagrams. Each group of anagrams should be represented as a list of strings and all the groups should be stored in a list of lists. An anagram is a word formed by rearranging the letters of another, such as `tea`, `eat`, and `ate`. Consider the following points: - Assume all inputs are strings made up of lowercase alphabets. - You can assume the inputs contain at most 1000 words and each word is no longer than 100 characters. - The output order of the groups does not matter. However, the words within each group must appear in the same order as they do in the original input list. Example 1: Input: [ \\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\" ] Output: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Example 2: Input: [ \\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"zyx\\" ] Output: [ [\\"abc\\", \\"bca\\", \\"cab\\"], [\\"xyz\\", \\"zyx\\"] ] Example 3: Input: [ \\"code\\", \\"doce\\", \\"framer\\", \\"frame\\" ] Output: [ [\\"code\\", \\"doce\\"], [\\"framer\\"], [\\"frame\\"] ]","solution":"def groupAnagrams(strs): Groups a list of strings into sets of anagrams. from collections import defaultdict anagrams = defaultdict(list) for word in strs: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given a 50GB text file comprised of log entries, where each log entry is a single line in the format: `[timestamp] [log level] - [message]` The timestamps follow the format `YYYY-MM-DD HH:MM:SS` and the log levels are always one of: `INFO`, `WARN`, `ERROR`. Your task is to calculate the number of log entries for each log level within each hour. The result should be summarized in a format like this: ``` YYYY-MM-DD HH:00:00 [INFO count] [WARN count] [ERROR count] YYYY-MM-DD HH:00:00 [INFO count] [WARN count] [ERROR count] ... ``` For instance: ``` 2023-05-15 14:00:00 100 50 20 2023-05-15 15:00:00 120 45 30 ... ``` Considering the file size, you need to devise an efficient solution that processes the file in a streaming manner, without loading the entire file into memory. Provide a step-by-step outline of your approach and then write the code in Python to achieve this.","solution":"import re from collections import defaultdict from itertools import islice def process_log_file(file_path): Processes the log file in a streaming manner and returns a dictionary with the count of log entries for each log level within each hour. :param file_path: Path to the large log file. :return: A dictionary with the summarized log counts per hour. log_pattern = re.compile(r\'[(.*?)] [(.*?)] - (.*)\') hourly_counts = defaultdict(lambda: {\'INFO\': 0, \'WARN\': 0, \'ERROR\': 0}) with open(file_path, \'r\') as file: for line in file: match = log_pattern.match(line) if match: timestamp, log_level, _ = match.groups() hour_key = timestamp[:13] + \\":00:00\\" if log_level in hourly_counts[hour_key]: hourly_counts[hour_key][log_level] += 1 return hourly_counts def format_log_summary(hourly_counts): Formats the log summary from the dictionary to the desired output format. :param hourly_counts: The dictionary with counts of log entries per hour. :return: A list of strings representing the summarized log counts. formatted_output = [] for hour, counts in sorted(hourly_counts.items()): formatted_output.append(f\\"{hour} {counts[\'INFO\']} {counts[\'WARN\']} {counts[\'ERROR\']}\\") return formatted_output"},{"question":"Write a Python function that accepts two lists, \'keys\' and \'values\', and builds a dictionary using these lists. Each element in the \'keys\' list should be used as a key in the dictionary, and the corresponding element in the \'values\' list should be used as the value. If the lists have different lengths, the function should fill any missing values with `None`. Ensure the function returns the constructed dictionary. Here are the provided list values: keys: [\'a\', \'b\', \'c\', \'d\'] values: [1, 2, 3]","solution":"def build_dict(keys, values): Builds a dictionary from two lists of keys and values. If the lists have different lengths, missing values are filled with None. Args: keys (list): List of keys. values (list): List of values. Returns: dict: Dictionary constructed from keys and values. # Extend the values list with None if it is shorter than the keys list if len(keys) > len(values): values.extend([None] * (len(keys) - len(values))) return dict(zip(keys, values))"},{"question":"Develop a function that determines if a given string can be rearranged to form a palindrome. A palindromic string reads the same forward and backward. If the string can be rearranged into a palindrome, return True; otherwise, return False. The function should also throw a ValueError if the input is not a string. For instance, given the input `string = \\"carrace\\"`, the result should be `True` since it can be rearranged to \\"racecar.\\" Below is the skeleton of the function to be completed: ```python def canFormPalindrome(string): ```","solution":"def canFormPalindrome(string): Determines if a given string can be rearranged to form a palindrome. Parameters: string (str): The input string to check. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. Raises: ValueError: If the input is not a string. if not isinstance(string, str): raise ValueError(\\"Input must be a string\\") # Count the occurrences of each character char_count = {} for char in string: char_count[char] = char_count.get(char, 0) + 1 # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"Given an array of integers `arr` and an integer `k`, write a function to find the maximum sum of any contiguous subarray of length `k`. If the sum of such a subarray is not achievable, return 0. Example: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: The subarray [5, 1, 3] has the maximum sum 9. Additional Example: Input: arr = [2, 1, 5, 1, 3, 2], k = 4 Output: 11 Explanation: The subarray [1, 5, 1, 3] has the maximum sum 11. Bonus Point: Consider the solution\'s time complexity and optimize it using a sliding window approach.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of any contiguous subarray of length k. If such a subarray is not achievable, returns 0. n = len(arr) if n < k or k <= 0: return 0 # Compute the sum of the first subarray of size k max_sum = curr_sum = sum(arr[:k]) # Use sliding window to compute sums of remaining subarrays for i in range(k, n): curr_sum += arr[i] - arr[i - k] # Slide the window to the right by 1 max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"Develop a function that takes a list of integers as input and returns a sorted version of the list. The sorting should be implemented using the Merge Sort algorithm, relying solely on recursion, without using any helper functions or built-in sort methods.","solution":"def merge_sort(arr): Sorts a list of integers using the Merge Sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): Merges two sorted lists into one sorted list. if not left: return right if not right: return left if left[0] <= right[0]: return [left[0]] + merge(left[1:], right) else: return [right[0]] + merge(left, right[1:])"},{"question":"Create a class hierarchy to represent a simple library system. The system should include three classes: \\"Library\\", \\"Book\\", and \\"Author\\". The \\"Library\\" class should have attributes for the name of the library and a list of books it holds. The \\"Book\\" class should include attributes for the title, author, and year of publication. The \\"Author\\" class should have attributes for the author\'s name and a list of books they have written. The \\"Library\\" class should have methods to add a book, remove a book, and retrieve the list of books. The \\"Book\\" class should include methods to get and set the title, author, and year. The \\"Author\\" class should have methods to get the author\'s name and list of books, as well as to add a new book to the author\'s bibliography. Additionally, provide a method in the \\"Library\\" class to find and return the list of books authored by a specified author. Ensure proper encapsulation and demonstrate polymorphism by overriding the string representation method (__str__) for each class to provide meaningful information about the objects. Finally, construct a scenario where a user mistakenly tries to add a duplicate book to the library. Ask the candidate to handle this case by modifying the \\"addBook()\\" method in the \\"Library\\" class to prevent duplicates. Provide a faulty implementation of this method for the candidate to correct.","solution":"class Book: def __init__(self, title, author, year): self._title = title self._author = author self._year = year def get_title(self): return self._title def set_title(self, title): self._title = title def get_author(self): return self._author def set_author(self, author): self._author = author def get_year(self): return self._year def set_year(self, year): self._year = year def __str__(self): return f\\"\'{self._title}\' by {self._author} published in {self._year}\\" class Author: def __init__(self, name): self._name = name self._books = [] def get_name(self): return self._name def get_books(self): return self._books def add_book(self, book): if book not in self._books: self._books.append(book) def __str__(self): books = \', \'.join(book.get_title() for book in self._books) return f\\"Author: {self._name}, Books: {books}\\" class Library: def __init__(self, name): self._name = name self._books = [] def add_book(self, book): if book not in self._books: self._books.append(book) def remove_book(self, book): if book in self._books: self._books.remove(book) def get_books(self): return self._books def find_books_by_author(self, author_name): return [book for book in self._books if book.get_author() == author_name] def __str__(self): books = \', \'.join(str(book) for book in self._books) return f\\"Library: {self._name}, Books: {books}\\""},{"question":"Design a program in Python to read a text file and calculate the frequency of each word in that file. The program should output each word along with its frequency, sorted in descending order based on frequency. If two words have the same frequency, they should be sorted in alphabetical order. Ensure that the program disregards case, meaning \\"Word\\" and \\"word\\" should be considered the same.","solution":"from collections import Counter import re def word_frequency(file_path): Reads a text file and calculates the frequency of each word, then returns a sorted list of tuples with word and its frequency. with open(file_path, \'r\') as file: text = file.read().lower() words = re.findall(r\'bw+b\', text) word_count = Counter(words) sorted_word_count = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return sorted_word_count"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the even integers sorted in descending order, followed by the odd integers sorted in ascending order. Ensure that your function handles edge cases such as an empty list and lists with only odd or only even numbers. Example Input/Output: ``` Input: [3, 1, 4, 7, 2, 8] Output: [8, 4, 2, 1, 3, 7] Input: [10, 5, 12, 3, 11, 18, 20] Output: [20, 18, 12, 10, 3, 5, 11] Input: [] Output: [] Input: [3, 7, 5] Output: [3, 5, 7] Input: [4, 2, 10] Output: [10, 4, 2] ```","solution":"def sort_even_odd(lst): Returns a new list with even integers sorted in descending order, followed by odd integers sorted in ascending order. evens = sorted([x for x in lst if x % 2 == 0], reverse=True) odds = sorted([x for x in lst if x % 2 != 0]) return evens + odds"},{"question":"Given the provided sample questions, here is another question that matches the style, complexity, and scope. --- You are tasked with refactoring the following Python function `duplicate_encoder(actual_str)` which takes a string, and returns a new string where each character in the original string is replaced with `\')\'` if that character appears more than once in the original string, or `\'(\'` if that character appears only once. Maintain the case sensitivity when checking for duplicates. The function should be case-insensitive when determining duplicity. ```python >>> duplicate_encoder(\\"din\\") \\"(((\\" >>> duplicate_encoder(\\"recede\\") \\"()()()\\" >>> duplicate_encoder(\\"Success\\") \\")())())\\" >>> duplicate_encoder(\\"(( @\\") \\")))(((\\" # Given Function (Needs Refactoring): def duplicate_encoder(actual_str): result = \\"\\" for char in actual_str: if actual_str.lower().count(char.lower()) > 1: result += \\")\\" else: result += \\"(\\" return result ``` Refactor the function to improve its efficiency and readability. **Note:** The refactored function should not use nested calls like `count` inside the loop for checking duplicity.","solution":"def duplicate_encoder(actual_str): Encodes the input string such that each character in the original string is replaced with \')\' if that character appears more than once in the original string, or \'(\' if that character appears only once. The function treats the string case-insensitively. actual_str_lower = actual_str.lower() char_counts = {} # Count the occurrence of each character in the lowercased string for char in actual_str_lower: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # Build the result string based on the counts result = \\"\\" for char in actual_str_lower: if char_counts[char] > 1: result += \\")\\" else: result += \\"(\\" return result"},{"question":"Develop a function that takes a list of words and a target word. The function should return a list of words from the input list that can be formed using the letters of the target word. Words cannot reuse letters from the target word more than they appear in the target word. Example: input_list = [\\"apple\\", \\"plea\\", \\"lap\\", \\"peel\\", \\"pal\\"] target_word = \\"apple\\" Output: [\\"apple\\", \\"plea\\", \\"lap\\", \\"pal\\"]","solution":"def can_form_word(word, target_counts): Helper function to check if a word can be formed using the letters of the target word. word_counts = {} for char in word: if char in word_counts: word_counts[char] += 1 else: word_counts[char] = 1 for char in word_counts: if word_counts[char] > target_counts.get(char, 0): return False return True def find_words(input_list, target_word): Returns a list of words from input_list that can be formed using the letters of target_word. target_counts = {} for char in target_word: if char in target_counts: target_counts[char] += 1 else: target_counts[char] = 1 result = [] for word in input_list: if can_form_word(word, target_counts): result.append(word) return result"},{"question":"Write a function that takes a string and returns the longest substring that contains exactly 2 distinct characters. If there are multiple substrings with the same length, return the one that appears first in the string. string = \\"abcbbbbcccbdddadacb\\"","solution":"def longest_substring_with_two_distinct_characters(s): Returns the longest substring that contains exactly 2 distinct characters. Args: s (str): input string Returns: str: the longest substring with exactly 2 distinct characters start = 0 max_length = 0 max_substring = \\"\\" char_count = {} for end in range(len(s)): if s[end] in char_count: char_count[s[end]] += 1 else: char_count[s[end]] = 1 while len(char_count) > 2: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"Write a Python function that takes a list of integers as an input and returns a list of tuples, where each tuple contains a pair of numbers and the greatest common divisor (GCD) of that pair. The function should return results for every unique pair of integers in the list. Example: ``` input_list = [12, 15, 18] output: [(12, 15, 3), (12, 18, 6), (15, 18, 3)] ```","solution":"import math from itertools import combinations def gcd_pairs(input_list): Takes a list of integers and returns a list of tuples, where each tuple contains a pair of numbers and their GCD. result = [] for (a, b) in combinations(input_list, 2): gcd_value = math.gcd(a, b) result.append((a, b, gcd_value)) return result"},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary where the keys are the unique integers from the list, and the values are the count of how many times each integer appears in the list. Additionally, ensure that the function can handle and correctly process an empty list input. Provide an example of using this function with a sample input.","solution":"def count_integers(int_list): Takes a list of integers and returns a dictionary where the keys are the unique integers from the list, and the values are the count of how many times each integer appears in the list. count_dict = {} for integer in int_list: if integer in count_dict: count_dict[integer] += 1 else: count_dict[integer] = 1 return count_dict # Example usage: # sample_input = [1, 2, 2, 3, 3, 3, 4] # result = count_integers(sample_input) # print(result) # Output should be {1: 1, 2: 2, 3: 3, 4: 1}"},{"question":"Given a list of integers, write a function to identify the maximum sum of non-adjacent numbers. If the list is empty, return 0. def max_sum_non_adjacent(nums): # Implementation goes here Examples: 1. max_sum_non_adjacent([2, 4, 6, 2, 5]) should return 13 (4 + 6 + 2 + 1) 2. max_sum_non_adjacent([5, 1, 1, 5]) should return 10 (5 + 5) 3. max_sum_non_adjacent([]) should return 0 4. max_sum_non_adjacent([3, 2, 5, 10, 7]) should return 15 (3 + 10 + 2) 5. max_sum_non_adjacent([3, 2, 7, 10]) should return 13 (3 + 10)","solution":"def max_sum_non_adjacent(nums): if not nums: return 0 incl = 0 excl = 0 for num in nums: # Current max excluding i new_excl = max(incl, excl) # Current max including i incl = excl + num excl = new_excl # Return max of incl and excl return max(incl, excl)"},{"question":"Write a function that calculates the shortest path in a matrix from the top-left corner to the bottom-right corner. The matrix consists of integers where each cell value represents the cost to step onto that cell. You can only move either right or down from a cell. Your function should return the minimum possible sum of the costs along the path from the top-left to the bottom-right cell. Additionally, the function should perform input validation to ensure the matrix is non-empty and rectangular (all rows have the same length). Return -1 if the input is invalid. Use dynamic programming to optimize the solution. ```python def min_path_sum(matrix): Calculates the minimum cost path in a matrix from the top-left to the bottom-right corner. Parameters: matrix (list of list of int): The cost matrix where each cell value represents the cost to step onto it. Returns: int: The minimum possible sum of the costs along the path, or -1 if the input is invalid. # Check if matrix is non-empty and rectangular if not matrix or not all(len(row) == len(matrix[0]) for row in matrix): return -1 rows = len(matrix) cols = len(matrix[0]) # Initialize a 2D list to store the cost of the minimum path to each cell dp = [[0] * cols for _ in range(rows)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[rows-1][cols-1] ```","solution":"def min_path_sum(matrix): Calculates the minimum cost path in a matrix from the top-left to the bottom-right corner. Parameters: matrix (list of list of int): The cost matrix where each cell value represents the cost to step onto it. Returns: int: The minimum possible sum of the costs along the path, or -1 if the input is invalid. # Check if matrix is non-empty and rectangular if not matrix or not all(len(row) == len(matrix[0]) for row in matrix): return -1 rows = len(matrix) cols = len(matrix[0]) # Initialize a 2D list to store the cost of the minimum path to each cell dp = [[0] * cols for _ in range(rows)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[rows-1][cols-1]"},{"question":"Create a Python function to evaluate postfix expressions. The function should be named `evaluate_postfix` and take a single parameter: a string containing a space-separated postfix expression. Use the following conventions: - Only integer values, \'+\', \'-\', \'*\', and \'/\' operators will be included in the expression. - Division should truncate towards zero (use integer division). - The function must return the result as an integer. - Assume the provided expression is valid. Example usage: - `evaluate_postfix(\\"3 4 + 2 * 7 /\\")` should return `2` - `evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\")` should return `14` Provide the implementation code and at least two sample usages of the function to demonstrate its working.","solution":"def evaluate_postfix(expression): Evaluate a postfix expression. :param expression: A string containing a space-separated postfix expression. :return: The result of evaluating the postfix expression as an integer. stack = [] tokens = expression.split() for token in tokens: if token.isdigit() or (token[0] == \'-\' and token[1:].isdigit()): # Handling negative numbers stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Truncates towards zero return stack[0] # Sample usages print(evaluate_postfix(\\"3 4 + 2 * 7 /\\")) # Expected output: 2 print(evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\")) # Expected output: 14"},{"question":"Write a function to implement the k-means clustering algorithm from scratch in Python. The function should take a dataset in the form of a list of lists, the number of clusters `k`, and the maximum number of iterations as input. The function should return the final centroids and the cluster assignments for each data point. Additionally, provide a brief explanation of how k-means clustering works and discuss the impact of choosing different values for `k` on the clustering result. Example of the expected function signature: ```python def k_means_clustering(data: List[List[float]], k: int, max_iter: int) -> Tuple[List[List[float]], List[int]]: # Function implementation here ``` Explanation and Discussion: K-means clustering is an iterative algorithm that aims to partition `n` observations into `k` clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. The algorithm proceeds as follows: 1. Initialize `k` centroids randomly. 2. Assign each data point to the nearest centroid based on Euclidean distance. 3. Recalculate the centroids as the mean of all the points assigned to each cluster. 4. Repeat steps 2 and 3 until the centroids do not change significantly or the algorithm has iterated the maximum number of times specified. Discuss how the choice of `k` influences the clustering: - Too small `k`: May result in large, heterogeneous clusters that fail to capture the structure in the data. - Too large `k`: Can lead to overfitting, where clusters are too small and closely fitted to individual data points.","solution":"from typing import List, Tuple import random def euclidean_distance(point1: List[float], point2: List[float]) -> float: return sum((x - y) ** 2 for x, y in zip(point1, point2)) ** 0.5 def calculate_centroids(clusters: List[List[List[float]]]) -> List[List[float]]: centroids = [] for cluster in clusters: centroid = [sum(dim)/len(cluster) for dim in zip(*cluster)] centroids.append(centroid) return centroids def assign_clusters(data: List[List[float]], centroids: List[List[float]]) -> List[int]: assignments = [] for point in data: distances = [euclidean_distance(point, centroid) for centroid in centroids] min_distance_index = distances.index(min(distances)) assignments.append(min_distance_index) return assignments def k_means_clustering(data: List[List[float]], k: int, max_iter: int) -> Tuple[List[List[float]], List[int]]: # Randomly initialize centroids initial_indices = random.sample(range(len(data)), k) centroids = [data[i] for i in initial_indices] for iteration in range(max_iter): # Assign points to the nearest centroid clusters = [[] for _ in range(k)] assignments = assign_clusters(data, centroids) for idx, assignment in enumerate(assignments): clusters[assignment].append(data[idx]) # Calculate new centroids new_centroids = calculate_centroids(clusters) # If centroids do not change, break the loop if new_centroids == centroids: break centroids = new_centroids return centroids, assignments"},{"question":"Implement a function that takes a list of transactions and a date, and returns the balance of the account at the end of that day. Each transaction is represented as a tuple containing the date (in \\"YYYY-MM-DD\\" format), the transaction amount (positive for deposits and negative for withdrawals), and an optional description of the transaction. The function should correctly account for transactions on the specified date. For example, given the transactions: ```python transactions = [ (\\"2022-01-01\\", 500, \\"Initial deposit\\"), (\\"2022-01-05\\", -200, \\"Grocery shopping\\"), (\\"2022-01-10\\", 100, \\"Gift\\"), (\\"2022-01-10\\", -50, \\"Dinner\\"), (\\"2022-01-15\\", -20, \\"Book purchase\\") ] ``` and the date `\\"2022-01-10\\"`, the function should return `350` as the balance at the end of the day on `\\"2022-01-10\\"`. Write the function `account_balance(transactions, date)` that computes the required balance.","solution":"def account_balance(transactions, date): Returns the account balance at the end of the given date. Parameters: transactions (list): List of transactions where each transaction is a tuple containing the date (in \\"YYYY-MM-DD\\" format), the transaction amount, and an optional description. date (str): The date for which the balance needs to be calculated. Returns: int: The balance of the account at the end of the specified date. balance = 0 for transaction_date, amount, *description in transactions: if transaction_date <= date: balance += amount return balance"},{"question":"Write a function that accepts a list of integers and an integer target sum. The function should return a list of tuples, each containing two distinct integers from the input list that add up to the target sum. If no such pairs exist, return an empty list. Ensure that each pair is unique and consider the order of elements (i.e., (a, b) is the same as (b, a) and should only be counted once). Example: ```python input_list = [2, 4, 3, 5, 7, 8] target_sum = 9 ``` Output: ```python [(2, 7), (4, 5)] ```","solution":"def find_pairs_with_sum(input_list, target_sum): Returns a list of unique tuples with two distinct integers from the input list that add up to the target sum. seen = set() pairs = set() for number in input_list: complement = target_sum - number if complement in seen: pair = tuple(sorted((number, complement))) pairs.add(pair) seen.add(number) return list(pairs)"},{"question":"Temperature Fluctuation Detection Description: Given a list of daily temperatures, you need to determine the longest span of days during which the temperature consistently increases each day. The list contains the temperature recordings in the same order as they happened over consecutive days. Example 1: Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: 3 Example 2: Input: temperatures = [30, 31, 32, 33, 34] Output: 5 Example 3: Input: temperatures = [40, 38, 35, 33, 35, 40, 45, 50, 55, 40] Output: 6 Note: 1. The temperatures list will have at least one element. 2. The temperature values are integers and can range from -100 to 100 degrees Celsius. Objective: Implement a function that takes a list of daily temperatures and returns the length of the longest span of consecutive days with increasing temperatures.","solution":"def longest_increasing_span(temperatures): Returns the length of the longest span of consecutive days with increasing temperatures. if not temperatures: return 0 max_span = 1 current_span = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_span += 1 max_span = max(max_span, current_span) else: current_span = 1 return max_span"},{"question":"Write a Python function that takes two arguments: a list of integers and an integer k. The function should return the k most frequent elements in the list. If there is a tie for the k-th position, include all of the elements that are tied. Assume k is always less than or equal to the number of unique elements in the list. Your function should have a time complexity better than O(n^2), where n is the length of the list. You may assume the input list contains at least one integer. Example: ``` Input: nums = [1,1,1,2,2,3,4], k = 2 Output: [1, 2] Input: nums = [1,2,2,3,3,3,4], k = 2 Output: [2, 3] ``` Your task is to implement this function.","solution":"from collections import Counter import heapq def k_most_frequent(nums, k): Returns the k most frequent elements in the list. If there is a tie for the k-th position, include all of the elements that are tied. if not nums or k <= 0: return [] # Count the frequency of each element count = Counter(nums) # Use a heap to get the k most frequent elements heap = heapq.nlargest(k, count.items(), key=lambda x: x[1]) # Retrieve elements after ensuring ties are included freq_values = [v[1] for v in heap] min_freq = min(freq_values) # Include all elements with frequency >= min_freq result = [num for num, freq in count.items() if freq >= min_freq] return result"},{"question":"Write a function that takes a string as input and returns a new string where all duplicate characters have been removed. The order of characters in the new string should be the same as they first appear in the input string. Ensure that your solution handles upper and lower case characters as distinct. For example, input: \\"Programming\\", output: \\"Progamin\\".","solution":"def remove_duplicates(input_string): Returns a new string where all duplicate characters have been removed. The order of characters in the new string is the same as they first appear in the input string. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Analyze the given Python function, correcting any potential inefficiencies or errors. Additionally, enhance the function by incorporating a feature that verifies if the input string is a palindrome, ignoring case, spaces, and punctuation. ```python import string def is_palindrome(s): s = s.lower() s = \'\'.join(e for e in s if e.isalnum()) return s == s[::-1] ```","solution":"import string def is_palindrome(s): Checks whether the given string is a palindrome, ignoring case, spaces, and punctuation. Args: s (str): The input string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. s = s.lower() s = \'\'.join(e for e in s if e.isalnum()) return s == s[::-1]"},{"question":"Write a Python function that accepts a list of integers and returns a new list containing only the even integers from the input list. Your task is to modify the provided function so it correctly filters and returns the even numbers from the input list. Incorrect code: ```python def filter_even_numbers(input_list): even_numbers = [] for number in input_list: if number % 2 == 1: even_numbers.append(number) return even_numbers # Example usage sample_list = [1, 2, 3, 4, 5, 6] print(filter_even_numbers(sample_list)) ``` Correct the function and identify the accurate list of even numbers for the given sample input list.","solution":"def filter_even_numbers(input_list): Returns a new list containing only the even integers from the input list. even_numbers = [] for number in input_list: if number % 2 == 0: even_numbers.append(number) return even_numbers # Example usage sample_list = [1, 2, 3, 4, 5, 6] print(filter_even_numbers(sample_list)) # Output should be [2, 4, 6]"},{"question":"A company is developing a contact management system and needs your help. Write a program that defines a `Contact` class with attributes `first_name`, `last_name`, `phone_number`, and `email`. Implement methods for adding, updating, and deleting contacts, as well as searching for contacts by `last_name`. Additionally, create a method to list all contacts in alphabetical order by `last_name`. Requirements: - The `add_contact` method should add a new contact to the contact list. - The `update_contact` method should update the details of an existing contact identified by `phone_number`. - The `delete_contact` method should remove a contact from the list using `phone_number`. - The `search_contact` method should return all contacts that match a given `last_name`. - The `list_contacts` method should return a list of contacts sorted by `last_name`. Your implementation should be able to handle edge cases, including adding contacts with the same `last_name` but different `phone_number`, updating non-existent contacts, and deleting contacts by a non-existent `phone_number`. Example usage: ```python # Create a contact manager instance contact_manager = ContactManager() # Add contacts contact_manager.add_contact(\\"John\\", \\"Doe\\", \\"123-456-7890\\", \\"john.doe@example.com\\") contact_manager.add_contact(\\"Jane\\", \\"Smith\\", \\"098-765-4321\\", \\"jane.smith@example.com\\") # Update a contact contact_manager.update_contact(\\"123-456-7890\\", first_name=\\"Jonathan\\") # Search for a contact by last name results = contact_manager.search_contact(\\"Doe\\") # List all contacts sorted by last name sorted_contacts = contact_manager.list_contacts() # Delete a contact contact_manager.delete_contact(\\"098-765-4321\\") ``` Ensure that appropriate exception handling and validation checks are implemented to maintain the integrity of the contact data.","solution":"class Contact: def __init__(self, first_name, last_name, phone_number, email): self.first_name = first_name self.last_name = last_name self.phone_number = phone_number self.email = email class ContactManager: def __init__(self): self.contacts = {} def add_contact(self, first_name, last_name, phone_number, email): if phone_number in self.contacts: raise ValueError(\\"Contact with this phone number already exists.\\") self.contacts[phone_number] = Contact(first_name, last_name, phone_number, email) def update_contact(self, phone_number, **kwargs): if phone_number not in self.contacts: raise ValueError(\\"Contact with this phone number does not exist.\\") contact = self.contacts[phone_number] for key, value in kwargs.items(): if hasattr(contact, key): setattr(contact, key, value) def delete_contact(self, phone_number): if phone_number not in self.contacts: raise ValueError(\\"Contact with this phone number does not exist.\\") del self.contacts[phone_number] def search_contact(self, last_name): return [contact for contact in self.contacts.values() if contact.last_name == last_name] def list_contacts(self): return sorted(self.contacts.values(), key=lambda contact: contact.last_name)"},{"question":"Develop a function that takes an integer `n` and returns a list of all prime numbers less than `n`. The function should implement an efficient algorithm for finding prime numbers, such as the Sieve of Eratosthenes. Ensure that the function handles edge cases, such as when `n` is less than 2, appropriately.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # Initialize a boolean array indicating primality of each number < n is_prime = [True] * n is_prime[0], is_prime[1] = False, False # 0 and 1 are not prime numbers p = 2 while (p * p < n): # If p is still marked as prime if is_prime[p]: # Mark all multiples of p as not prime for i in range(p * p, n, p): is_prime[i] = False p += 1 # Collect all prime numbers primes = [i for i, prime in enumerate(is_prime) if prime] return primes"},{"question":"A company wants to analyze the retention rates of its employees over the years using Python. They have provided you with a CSV file (https://example.com/employee_retention.csv) containing the following columns: \\"EmployeeID\\", \\"JoinDate\\", \\"LeaveDate\\", and \\"Department\\". You are tasked to compute the total retention time for each employee and then create a bar plot representing the average retention time (in years) per department. Here\'s a sample of the data: ```csv EmployeeID,JoinDate,LeaveDate,Department 1,2015-03-01,2020-06-15,HR 2,2017-08-23,2021-01-30,IT 3,2010-12-11,2018-07-07,Finance ... ``` Write a Python code snippet to achieve the following steps: 1. Load the CSV file and parse the \\"JoinDate\\" and \\"LeaveDate\\" columns as dates. 2. Calculate the retention time in years for each employee (consider that an employee still working with the company will not have a \\"LeaveDate\\"). 3. Compute the average retention time per department. 4. Create a bar plot to visualize the average retention time for each department. Ensure to handle any missing data appropriately. Present your solution with clear comments explaining each step. Below is your starting template. Complete the necessary parts to achieve the objective. ```python import pandas as pd import matplotlib.pyplot as plt import datetime as dt # Load CSV file url = \\"https://example.com/employee_retention.csv\\" data = pd.read_csv(url, parse_dates=[\'JoinDate\', \'LeaveDate\']) # Calculate retention time current_date = dt.datetime.now() data[\'LeaveDate\'].fillna(current_date, inplace=True) data[\'RetentionTime\'] = (data[\'LeaveDate\'] - data[\'JoinDate\']).dt.days / 365.25 # Convert to years # Compute average retention time per department avg_retention_per_department = data.groupby(\'Department\')[\'RetentionTime\'].mean().reset_index() # Plot the bar chart plt.figure(figsize=(10,6)) plt.bar(avg_retention_per_department[\'Department\'], avg_retention_per_department[\'RetentionTime\'], color=\'skyblue\') plt.xlabel(\'Department\') plt.ylabel(\'Average Retention Time (years)\') plt.title(\'Average Retention Time per Department\') plt.show() ``` Your task is to complete the above code and ensure it runs correctly to produce the desired bar plot.","solution":"import pandas as pd import matplotlib.pyplot as plt import datetime as dt def compute_avg_retention_plot(csv_url): Load a CSV file, compute the average retention time per department, and plot a bar chart of the results. Args: csv_url (str): URL to the CSV file. Returns: avg_retention_per_department (pd.DataFrame): DataFrame with average retention time per department. # Load CSV file data = pd.read_csv(csv_url, parse_dates=[\'JoinDate\', \'LeaveDate\']) # Calculate retention time current_date = dt.datetime.now() data[\'LeaveDate\'].fillna(current_date, inplace=True) data[\'RetentionTime\'] = (data[\'LeaveDate\'] - data[\'JoinDate\']).dt.days / 365.25 # Convert to years # Compute average retention time per department avg_retention_per_department = data.groupby(\'Department\')[\'RetentionTime\'].mean().reset_index() # Plot the bar chart plt.figure(figsize=(10,6)) plt.bar(avg_retention_per_department[\'Department\'], avg_retention_per_department[\'RetentionTime\'], color=\'skyblue\') plt.xlabel(\'Department\') plt.ylabel(\'Average Retention Time (years)\') plt.title(\'Average Retention Time per Department\') plt.xticks(rotation=45) plt.tight_layout() plt.show() return avg_retention_per_department"},{"question":"Design a function that calculates the cosine similarity between two given non-empty lists of equal length, representing vectors in an N-dimensional space. Make sure your implementation: - Does not use any external libraries. - Includes error handling for invalid input lengths or types. - Returns a floating-point number rounded to 4 decimal places. **Input:** - Two non-empty lists of equal length containing integers or floats. **Output:** - A floating-point number representing the cosine similarity, rounded to 4 decimal places. **Example:** ```python # Input: vector_a = [1, 2, 3] vector_b = [4, 5, 6] # Output: 0.9746 # Input: vector_a = [1, 0, -1] vector_b = [-1, 0, 1] # Output: -1.0000 ```","solution":"def cosine_similarity(vector_a, vector_b): Returns the cosine similarity between two vectors. Args: vector_a: List of integers or floats. vector_b: List of integers or floats. Returns: A floating-point number rounded to 4 decimal places. if not (isinstance(vector_a, list) and isinstance(vector_b, list)): raise TypeError(\\"Both inputs must be lists.\\") if len(vector_a) == 0 or len(vector_b) == 0: raise ValueError(\\"Both lists must be non-empty.\\") if len(vector_a) != len(vector_b): raise ValueError(\\"Both lists must be of equal length.\\") dot_product = sum(a * b for a, b in zip(vector_a, vector_b)) magnitude_a = sum(a * a for a in vector_a) ** 0.5 magnitude_b = sum(b * b for b in vector_b) ** 0.5 if magnitude_a == 0 or magnitude_b == 0: raise ValueError(\\"Neither vector can be the zero vector.\\") similarity = dot_product / (magnitude_a * magnitude_b) return round(similarity, 4)"},{"question":"Implement a Python function that simulates a simplified banking system for processing transactions. The function should be capable of handling deposits, withdrawals, and balance inquiries. The function should take a list of transactions as input, where each transaction is represented by a tuple `(action, amount)`. The `action` can be `\'deposit\'`, `\'withdraw\'`, or `\'balance\'`, and the `amount` is a positive integer representing the transaction amount. The function should return a list of balances after each transaction. If a withdrawal amount exceeds the current balance, the function should skip that transaction and proceed to the next one. Here is an example of how the function should work: ```python def banking_system(transactions): # Your code here # Example usage: transactions = [ (\'deposit\', 100), (\'withdraw\', 50), (\'balance\', 0), (\'withdraw\', 100), (\'deposit\', 200), (\'balance\', 0) ] print(banking_system(transactions)) # Output: [100, 50, 50, 50, 250, 250] ``` Note: - Assume the initial balance is 0. - The `balance` action will always have an `amount` of 0, and should only affect the output list without modifying the balance. - The function should be able to handle an empty list of transactions.","solution":"def banking_system(transactions): Processes a list of banking transactions and returns a list of balances after each transaction. Args: - transactions: List of tuples, where each tuple contains (\'action\', amount). Returns: - List of balances after each transaction. balance = 0 balances = [] for action, amount in transactions: if action == \'deposit\': balance += amount balances.append(balance) elif action == \'withdraw\': if amount <= balance: balance -= amount balances.append(balance) elif action == \'balance\': balances.append(balance) return balances"},{"question":"Given a string containing only lowercase alphabetical characters, write a function to find the length of the longest substring without repeating characters. Your function should return an integer indicating the length of this substring. For example, for the input string \'abrkaabcdefghijjxxx\', the function should return \'10\', which corresponds to the longest substring \'abcdefghij\'.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} longest = 0 start = 0 for end, char in enumerate(s): if char in char_map: start = max(start, char_map[char] + 1) char_map[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"A theater sells tickets and each ticket contains a unique alphanumeric code. The theater has an online booking system where customers can order tickets. Due to a system glitch, some tickets might be associated with different codes but actually correspond to the same seat. Write a method that takes a list of ticket codes and determines the total number of unique seats booked. Each ticket code follows a specific pattern: the first part of the code consists of letters and digits representing the row and seat number, and the last part of the code (after a hyphen) is an ID that can be ignored in determining seat uniqueness. For example, tickets with codes \\"A12-12345\\" and \\"A12-67890\\" would refer to the same seat \\"A12\\". # Function Signature: ```python def count_unique_seats(ticket_codes: List[str]) -> int: pass ``` # Input: - `ticket_codes` (List[str]): A list of alphanumeric ticket codes. Each code contains a variable length prefix representing the seat (consisting of letters and digits) followed by a hyphen and then an ID. # Output: - Returns an integer representing the number of unique seats booked. # Example: ```python ticket_codes = [\\"A12-12345\\", \\"A12-67890\\", \\"B13-12345\\", \\"B14-12345\\", \\"C15-67890\\"] assert count_unique_seats(ticket_codes) == 4 ``` # Explanation: - Tickets \\"A12-12345\\" and \\"A12-67890\\" refer to the same seat \\"A12\\". - The remaining tickets refer to unique seats \\"B13\\", \\"B14\\", and \\"C15\\". - Therefore, there are a total of 4 unique seats. # Constraints: - The input list will contain between 1 and 10^4 ticket codes. - Each ticket code strictly follows the mentioned pattern and will be a string of length between 5 and 20 characters.","solution":"def count_unique_seats(ticket_codes): Determines the number of unique seats booked given a list of ticket codes. Args: ticket_codes (List[str]): A list of alphanumeric ticket codes. Returns: int: The number of unique seats booked. unique_seats = set() for code in ticket_codes: seat = code.split(\'-\')[0] unique_seats.add(seat) return len(unique_seats)"},{"question":"Create a Python function that takes a string as input and returns the longest palindrome substring within that string. If there are multiple palindromes of the same maximum length, return the first one encountered. Provide a piece of erroneous code for students to debug and correctly implement the function.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring within the input string s. If there are multiple palindromes of the same maximum length, return the first one encountered. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest_palindrome): longest_palindrome = odd_palindrome # Even length palindromes even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest_palindrome): longest_palindrome = even_palindrome return longest_palindrome"},{"question":"Write a Python function that merges two sorted arrays into a single sorted array without using built-in sorting functions. Example: arr1 = [1, 3, 5] arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6]","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged_array = [] i = 0 j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Design a function that compiles a list of all the words in a given string that are longer than a given length and returns them in a new string, with words separated by a single space. The function should be flexible enough to handle different types of input, including varying string lengths and special characters. # Example: **Input:** ```python text = \\"The quick brown fox jumps over the lazy dog\\" length = 3 ``` **Output:** ```python \\"quick brown jumps over lazy\\" ``` # Constraints: 1. Assume the input string contains only printable characters. 2. You cannot use any external libraries for this task. 3. The function should be case-sensitive (e.g., \\"Quick\\" and \\"quick\\" are considered different words). 4. Handle edge cases, such as empty strings or no words longer than the given length.","solution":"def compile_words(text, length): Returns a string containing all words from text that are longer than the given length, separated by a single space. Parameters: - text (str): The input string containing words. - length (int): The minimum word length to include. Returns: - str: A string of words longer than the given length, separated by a single space. words = text.split() long_words = [word for word in words if len(word) > length] return \' \'.join(long_words)"},{"question":"Develop a Python function that takes an integer `n` as an input and returns a list of all prime numbers less than or equal to `n`. Ensure that your function is optimized for performance, utilizing efficient algorithms for prime identification such as the Sieve of Eratosthenes. def get_primes_up_to(n):","solution":"def get_primes_up_to(n): Returns a list of prime numbers less than or equal to n using the Sieve of Eratosthenes. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiples in range(start*start, n + 1, start): sieve[multiples] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"Create a function that takes in a list of integers and returns a new list with each integer squared. Implement this function using both a standard loop and a list comprehension. Compare the performance and readability of the two methods. Discuss any trade-offs between the two approaches. For bonus points, extend your function to handle cases where the input might not be a list or might contain non-integer elements without causing the program to crash. Show how you would integrate error handling to manage these cases gracefully.","solution":"def square_elements_standard_loop(input_list): Returns a new list with each integer squared using a standard loop. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list\\") squared_list = [] for item in input_list: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers\\") squared_list.append(item ** 2) return squared_list def square_elements_list_comprehension(input_list): Returns a new list with each integer squared using a list comprehension. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list\\") return [item ** 2 if isinstance(item, int) else ValueError(\\"All elements in the list must be integers\\") for item in input_list]"},{"question":"Write a function named `filter_and_square_odd_numbers` that takes a list of integers as its input. This function should return a new list containing the squares of only the odd numbers from the original list. Use list comprehensions to achieve this. **Example:** ```python # Input numbers = [1, 2, 3, 4, 5] # Output [1, 9, 25] ```","solution":"def filter_and_square_odd_numbers(numbers): Returns a list with the squares of the odd numbers from the input list. :param numbers: List of integers :return: List of squares of odd numbers return [n ** 2 for n in numbers if n % 2 != 0]"},{"question":"Consider an array of integers. Write a function in Python that identifies and returns the first non-repeating integer in the array. If all integers are repeating, the function should return `None`. For example, given the array `[4, 5, 1, 2, 0, 4]`, the function should return `5` because it is the first integer that does not repeat. If the input was `[1, 1, 1, 1]`, the function should return `None`. Write the function and demonstrate its usage with at least two different example inputs.","solution":"def first_non_repeating_integer(arr): Returns the first non-repeating integer in the array. If all integers are repeating, returns None. from collections import Counter count = Counter(arr) for num in arr: if count[num] == 1: return num return None # Example use: # print(first_non_repeating_integer([4, 5, 1, 2, 0, 4])) # Should return 5 # print(first_non_repeating_integer([1, 1, 1, 1])) # Should return None"},{"question":"Write a Python function called `common_elements` that takes two lists of integers as input and returns a list of integers that are common to both input lists. The returned list should not contain any duplicates and the order of elements does not matter. You may use Python\'s built-in set operations to achieve this. Example: ```python def common_elements(list1, list2): # Your code here # Example usage: print(common_elements([1, 2, 2, 3, 4], [3, 4, 4, 5, 6])) # Output: [3, 4] print(common_elements([10, 20, 30, 40], [30, 40, 50, 60])) # Output: [30, 40] print(common_elements([1, 2, 3], [4, 5, 6])) # Output: [] ```","solution":"def common_elements(list1, list2): Returns a list of integers that are common to both input lists without any duplicates. set1 = set(list1) set2 = set(list2) common = set1 & set2 return list(common)"},{"question":"Given a string s that consists of lowercase alphabets and an integer k, write a function that handles the following transformations: - Replace every k-th character in the string with a corresponding uppercase character. - If the string is shorter than k, return the original string. For example: ```python def transform_string(s: str, k: int) -> str: # Your implementation here print(transform_string(\\"abcdef\\", 2)) # Output: \\"aBcDeF\\" print(transform_string(\\"hello\\", 3)) # Output: \\"heLlo\\" print(transform_string(\\"world\\", 6)) # Output: \\"world\\" ``` Explanation: - In the first example, every 2nd character in the string \\"abcdef\\" is converted to uppercase, resulting in \\"aBcDeF\\". - In the second example, every 3rd character in the string \\"hello\\" becomes uppercase, resulting in \\"heLlo\\". - In the third example, since the length of \\"world\\" is less than 6, the original string is returned.","solution":"def transform_string(s: str, k: int) -> str: Takes a string s and an integer k, and returns a new string where every k-th character is converted to uppercase. If the string is shorter than k, returns the original string. if k <= 0 or k > len(s): return s transformed = list(s) for i in range(k-1, len(s), k): transformed[i] = transformed[i].upper() return \'\'.join(transformed)"},{"question":"You are tasked with designing a software program that addresses the following problem. Seven friends each own a unique musical instrument. Jamie owns a guitar. Kevin has a piano. Lila plays the drums. Mason is skilled with the violin. Nina is known for her expertise with the saxophone. Oscar is often seen with his flute. Peter prefers the trumpet. Using the given information, derive a conclusion: Who is the person proficient with the saxophone?","solution":"def person_playing_saxophone(): Returns the name of the person who is known for their expertise with the saxophone. return \\"Nina\\""},{"question":"Create a Python function that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. The function should be optimized for performance using the Sieve of Eratosthenes algorithm. Additionally, include a secondary function that visualizes the results with a bar chart, showing the occurrence frequencies of each prime number in the output list. Use the matplotlib library for generating the bar chart.","solution":"import matplotlib.pyplot as plt def sieve_of_eratosthenes(n): Generates all prime numbers up to n using the Sieve of Eratosthenes algorithm. sieve = [True] * (n+1) p = 2 while (p * p <= n): if sieve[p]: for i in range(p * p, n+1, p): sieve[i] = False p += 1 return [p for p in range(2, n+1) if sieve[p]] def find_primes(arr): Returns a list of prime numbers from the given list \'arr\'. if not arr: return [] max_val = max(arr) primes = sieve_of_eratosthenes(max_val) return [x for x in arr if x in primes] def plot_prime_frequencies(prime_list): Plots the frequencies of prime numbers in the prime_list using a bar chart. prime_counts = {} for prime in prime_list: if prime in prime_counts: prime_counts[prime] += 1 else: prime_counts[prime] = 1 primes = list(prime_counts.keys()) frequencies = list(prime_counts.values()) plt.figure(figsize=(10, 6)) plt.bar(primes, frequencies, color=\'blue\') plt.xlabel(\'Prime Numbers\') plt.ylabel(\'Frequencies\') plt.title(\'Frequency of Prime Numbers in the List\') plt.show()"},{"question":"Write a function in your preferred programming language to filter out even numbers from a list of integers and return the resulting list of all odd numbers. The function should handle both positive and negative integers. Additionally, the function should maintain the order of the odd numbers as they appeared in the original list. Provide error handling to manage cases where the input is not a list of integers. Here is an example: Input: [10, 21, 4, -3, 15, -8, 0, 33, 7] Output: [21, -3, 15, 33, 7] In cases where the input is invalid, return an error message: \\"Invalid input, please provide a list of integers.\\"","solution":"def filter_odd_numbers(int_list): Filters out even numbers from a list of integers and returns the resulting list of all odd numbers. Handles both positive and negative integers and maintains the original order of the odd numbers. If the input is not a list of integers, returns an error message. if not isinstance(int_list, list) or not all(isinstance(x, int) for x in int_list): return \\"Invalid input, please provide a list of integers.\\" return [x for x in int_list if x % 2 != 0]"},{"question":"Write a Python function called `merge_sorted_lists` that takes two sorted lists of integers as input and returns a new list that contains all the elements from both input lists in sorted order. Your implementation should ensure that the final list remains sorted and should not use any built-in sort functions. **Example:** ```python def merge_sorted_lists(list1, list2): # Your code here # Example usage: list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] print(merge_sorted_lists(list1, list2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] list1 = [10, 20, 30] list2 = [15, 25, 35] print(merge_sorted_lists(list1, list2)) # Output: [10, 15, 20, 25, 30, 35] list1 = [] list2 = [1, 2, 3] print(merge_sorted_lists(list1, list2)) # Output: [1, 2, 3] ```","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given an array of integers where each element appears three times except for one, which appears exactly once. Write a program that finds and returns the element that appears only once. Your solution should have a linear runtime complexity and use constant space. You may not modify the array. Input: - An array of integers `arr` of length `n` (1 ≤ n ≤ 3*10^5), where every element occurs three times except for one element which occurs once. Output: - Return the integer that appears only once in the array. Example: Input: [2, 2, 3, 2] Output: 3 Note: - Consider edge cases where input array length is minimal, or the unique element is at different positions within the array.","solution":"def single_number(arr): Finds the element that appears exactly once in an array where every other element appears three times. ones, twos = 0, 0 for num in arr: # `ones` will hold the unique bits of all the numbers we have seen so far ones = (ones ^ num) & ~twos # `twos` will hold the bits that have appeared twice so far twos = (twos ^ num) & ~ones return ones"},{"question":"Design a Python function that accepts a list of integers and a target sum, and returns a list of all unique pairs of integers from the list that add up to the target sum. The same pair of integers should not appear more than once, and each pair should be sorted in non-decreasing order. Make sure the function is efficient in terms of time complexity. Example: ```python def find_pairs(nums, target): # Your code here # Example Usage print(find_pairs([1, 2, 3, 4, 3, 2, 1], 5)) # Output: [(1, 4), (2, 3)] ``` The code provided below has some errors. Identify the errors, explain why they are wrong, and suggest the correct approach: ```python def find_pairs(nums, target): result = [] for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: pair = (nums[i], nums[j]) if pair not in result: result.append(pair) return result ```","solution":"def find_pairs(nums, target): Returns a list of all unique pairs of integers from nums that sum up to target. Each pair is sorted in non-decreasing order and no pair appears more than once. nums.sort() # Sorting the list to ensure pairs are in non-decreasing order pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(complement, num), max(complement, num))) seen.add(num) return list(pairs)"},{"question":"Implement a function to identify and correct skewed features in a given pandas DataFrame. The function should automatically detect numerical columns with a skew above a given threshold and apply a log transformation to reduce their skewness. Additionally, return the summary statistics of the skewed features before and after the transformation. Demonstrate your function on a sample dataset with both normal and skewed distributions.","solution":"import pandas as pd import numpy as np def correct_skewed_features(df, skew_threshold=1.0): Identifies numerical columns in the DataFrame with skewness above the given threshold and applies a log transformation to reduce the skewness. Returns the summary statistics of the skewed features before and after the transformation. Parameters: df (pd.DataFrame): The input DataFrame. skew_threshold (float): The skewness threshold above which log transformation is applied. Returns: pd.DataFrame: Summary statistics of the skewed features before transformation. pd.DataFrame: Summary statistics of the skewed features after transformation. skewed_cols = df.select_dtypes(include=[np.number]).apply(lambda x: x.skew()).abs() skewed_cols = skewed_cols[skewed_cols > skew_threshold].index if len(skewed_cols) == 0: return pd.DataFrame(), pd.DataFrame() before_transformation = df[skewed_cols].describe().transpose() # Apply log transformation to skewed columns df[skewed_cols] = df[skewed_cols].apply(lambda x: np.log1p(x)) after_transformation = df[skewed_cols].describe().transpose() return before_transformation, after_transformation"},{"question":"Write a function to convert a Roman numeral string into its integer equivalent. The function should handle typical Roman numeral forms, where numerals are written from largest to smallest from left to right, and the subtractive combination rules, such as IV for 4 and IX for 9. For example, the Roman numeral \\"XXVII\\" should return 27. Example Input: \\"XIV\\" Example Output: 14","solution":"def roman_to_int(s): Converts a Roman numeral string to its integer equivalent. :param s: Roman numeral string :return: Integer equivalent roman_dict = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_dict[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Design a function in Python that implements a custom caching mechanism using decorators. The function should accept another function as its argument and store the results of previous calls. If the decorated function is called again with the same arguments, the cached result should be returned instead of recalculating it. Additionally, implement functionality to specify a maximum cache size, and ensure that the cache evicts the least recently used items when the maximum size is reached. This task requires a solid understanding of Python\'s functional programming capabilities, decorator design patterns, and efficient data structure utilization for cache management.","solution":"from functools import wraps from collections import OrderedDict def lru_cache(max_size=128): A decorator to implement a least-recently-used (LRU) cache. :param max_size: Maximum size of the cache. def decorator(func): cache = OrderedDict() @wraps(func) def wrapped(*args, **kwargs): key = (args, tuple(kwargs.items())) if key in cache: cache.move_to_end(key) # Mark as recently used return cache[key] result = func(*args, **kwargs) if len(cache) >= max_size: cache.popitem(last=False) # Pop the least recently used item cache[key] = result return result return wrapped return decorator"},{"question":"Create a function that retrieves the k most frequent elements in an array: Given an integer array `nums` and an integer `k`, return the `k` most frequent elements in descending order of their frequency. If two numbers have the same frequency, they should appear in ascending order. If multiple valid answers are possible, return any of them. Example 1: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1, 2] Explanation: The numbers 1 and 2 are the two most frequent elements. Example 2: Input: nums = [4,4,4,5,5,6,6,6,7,7,7,7], k = 3 Output: [7, 4, 6] Explanation: The three most frequent elements are 7, 4, and 6. Example 3: Input: nums = [1], k = 1 Output: [1] Explanation: The most frequent element in the array is 1. Constraints: `1 &lt;= nums.length &lt;= 10000` `1 &lt;= nums[i] &lt;= 10000` `1 &lt;= k &lt;= nums.length`","solution":"from collections import Counter def k_most_frequent(nums, k): Returns the k most frequent elements in nums in decreasing order of their frequency. Elements with the same frequency are returned in ascending order. counts = Counter(nums) # Sort first by frequency in descending order, then by value in ascending order sorted_elements = sorted(counts.items(), key=lambda x: (-x[1], x[0])) # Extract the elements return [element for element, count in sorted_elements[:k]]"},{"question":"The provided function is intended to reverse the characters in a string. The code contains logical errors. Your task is to a) identify and fix the errors, and b) explain the space and time complexity of the corrected algorithm. ```python def faulty_reverse_string(s): reversed_str = \\"\\" for i in range(len(s)+1): reversed_str = reversed_str + s[i] return reversed_str ``` Write a corrected version of this function and provide a brief explanation of your changes. Additionally, analyze and state the space and time complexity of your corrected solution.","solution":"def reverse_string(s): Returns the given string reversed. return s[::-1] # Explanation: # The original function had logical errors. The primary issues were: # 1. The for-loop range was set to len(s) + 1 which would cause an IndexError. # 2. The loop was trying to concatenate the next character of the string instead of constructing it in reverse. # # The corrected version uses string slicing to reverse the string which is more efficient and concise. # # Time complexity: O(n), where n is the length of the string. # Space complexity: O(n), where n is the length of the string, for storing the reversed string."},{"question":"You are tasked with writing a function that calculates the Jaccard similarity between two sets of words within given strings. The Jaccard similarity is defined as the size of the intersection divided by the size of the union of the two word sets. ```python def jaccard_similarity(str1: str, str2: str) -> float: Calculate the Jaccard similarity between two strings. Args: str1: A string containing words separated by spaces. str2: Another string containing words separated by spaces. Returns: A float representing the Jaccard similarity between the two strings. # Your code here ``` # Example: ```python str1 = \\"I love programming\\" str2 = \\"programming is fun\\" print(jaccard_similarity(str1, str2)) # Output should be around 0.2 ``` # Constraints: - The function should ignore case sensitivity. - Treat punctuation as part of the word (e.g., \\"hello,\\" and \\"hello\\" are not considered the same word).","solution":"def jaccard_similarity(str1: str, str2: str) -> float: Calculate the Jaccard similarity between two strings. Args: str1: A string containing words separated by spaces. str2: Another string containing words separated by spaces. Returns: A float representing the Jaccard similarity between the two strings. # Convert both strings to sets of words, ignoring case set1 = set(str1.lower().split()) set2 = set(str2.lower().split()) # Calculate intersection and union of both sets intersection = set1 & set2 union = set1 | set2 # Return the Jaccard similarity if not union: return 0.0 return len(intersection) / len(union)"},{"question":"Write a Python function that reads a list of strings and returns the string with the maximum length. If there are two or more strings with the maximum length, return the one that appears last in the list. Ensure the function handles the case where the list might be empty, returning an appropriate message in such a scenario.","solution":"def string_with_max_length(strings): Returns the string with the maximum length from the list of strings. If there are multiple strings with the same maximum length, the one appearing last is returned. If the list is empty, returns an appropriate message. if not strings: return \\"List is empty\\" max_length = -1 result_string = \\"\\" for s in strings: if len(s) >= max_length: max_length = len(s) result_string = s return result_string"},{"question":"Write a function that takes a list of integers and an integer k as input, and returns a list of all unique pairs from the input list that sum up to k. The pairs should be represented as tuples and the resulting list should not contain duplicate pairs, meaning that each pair (a, b) is identical to (b, a) and should only be counted once. Additionally, the order of the pairs in the output list does not matter. nums = [2, 4, 3, 5, 7, 8, 9] k = 7 Note: The function should return [(2, 5), (3, 4)] since these are the unique pairs that sum up to 7.","solution":"def find_pairs(nums, k): Returns a list of unique pairs from nums that sum up to k. seen = set() unique_pairs = set() for num in nums: target = k - num if target in seen: unique_pairs.add(tuple(sorted((num, target)))) seen.add(num) return list(unique_pairs)"},{"question":"Given a URL endpoint `https://api.coindesk.com/v1/bpi/currentprice.json`, this API call returns a JSON object containing information about the current Bitcoin price index (BPI) in various currencies. Your task is to write a Python program using the requests library to send a GET request to this API and parse the response. Firstly, extract general information about the Bitcoin price index including the time of the current price, disclaimer, and chartName. Secondly, extract the details of the BPI, including the description and the current exchange rate for each currency (USD, GBP, EUR). Organize this information to display each currency\'s info clearly, showing the currency code, description, and current rate. After extracting the information, the program should efficiently store the collected data in a local CSV file for future reference. Ensure that the CSV file is well-structured and that the data is logically organized for easy readability. Each currency and its details should be a unique entry in the CSV file. Finally, add appropriate error handling mechanisms to handle potential issues that might arise during the execution of your program.","solution":"import requests import csv import datetime def fetch_bitcoin_price_info(): url = \\"https://api.coindesk.com/v1/bpi/currentprice.json\\" try: response = requests.get(url) response.raise_for_status() # Will raise HTTPError for bad requests (4xx and 5xx) data = response.json() # Extract general information time_updated = data[\'time\'][\'updated\'] disclaimer = data[\'disclaimer\'] chart_name = data[\'chartName\'] # Extract BPI details bpi_data = data[\'bpi\'] currency_info = [] for currency_code, currency_details in bpi_data.items(): description = currency_details[\'description\'] rate = currency_details[\'rate\'] currency_info.append({ \'Currency\': currency_code, \'Description\': description, \'Rate\': rate }) # Store data in CSV filename = f\\"bitcoin_price_{datetime.datetime.now().strftime(\'%Y%m%d_%H%M%S\')}.csv\\" with open(filename, \'w\', newline=\'\') as csvfile: fieldnames = [\'Currency\', \'Description\', \'Rate\'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for row in currency_info: writer.writerow(row) return { \'time_updated\': time_updated, \'disclaimer\': disclaimer, \'chart_name\': chart_name, \'currency_info\': currency_info, \'csv_filename\': filename } except requests.RequestException as e: print(f\\"Error fetching Bitcoin price information: {e}\\") return None"},{"question":"Implement a Python program that reads multiple strings and combines them into a single sentence. The program should capitalize the first letter of each string and ensure there is only one space between each string in the final sentence. Include validation to check that each input string contains only alphabetic characters. If an invalid string is encountered, the program should prompt the user to re-enter the string.","solution":"def combine_strings(strings): Combines multiple strings into a single sentence with proper capitalization and spacing. Ensures each string contains only alphabetic characters. Parameters: strings (list of str): list of input strings Returns: str: Combined sentence # Check for non-alphabetic characters in each string for s in strings: if not s.isalpha(): raise ValueError(f\\"String \'{s}\' contains non-alphabetic characters.\\") # Capitalize the first letter of each string capitalized_strings = [s.capitalize() for s in strings] return \' \'.join(capitalized_strings)"},{"question":"Write a Python function that takes two lists of integers as input and returns a list that contains only the elements that are present in both lists. The order of elements in the result should be the same as their order in the first list. If there are duplicate elements in the input lists, they should be preserved in the output list as well. Additionally, write a brief explanation about the time complexity of your solution. **Example** Input: ```python list1 = [1, 2, 2, 3, 4] list2 = [2, 2, 4, 4, 5] ``` Output: ```python [2, 2, 4] ``` Explanation: - The elements `2`, `2`, and `4` are present in both `list1` and `list2`. **Constraints** - The input lists can be of different lengths. - Each element in the input lists will be a non-negative integer.","solution":"def common_elements(list1, list2): Returns a list containing elements that are present in both input lists. The elements in the result keep the order as they appear in the first list. common_list = [] list2_copy = list2[:] # Create a copy of list2 to not mutate the original list for item in list1: if item in list2_copy: common_list.append(item) list2_copy.remove(item) return common_list"},{"question":"Develop a function that identifies the longest contiguous subarray within a given integer array where all elements have the same value, and returns its length. If the array is empty, the function should return 0.","solution":"def longest_contiguous_subarray(arr): Identifies the longest contiguous subarray with all elements having the same value. Returns the length of this subarray. Parameters: arr (list): A list of integers. Returns: int: The length of the longest contiguous subarray with all elements equal. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Design and implement an algorithm in Python to optimize the packing of items into a knapsack. Use the classic \\"0/1 Knapsack Problem\\" scenario, where you have a set of items, each with a weight and a value, and a knapsack with a maximum weight capacity. The goal is to maximize the total value of the items in the knapsack without exceeding its weight capacity. Define: 1. A function `knapsack(items, max_weight)` where `items` is a list of tuples, each representing an item with its weight and value `(weight, value)`, and `max_weight` is the maximum weight capacity of the knapsack. 2. The function should return the maximum value that can be achieved with the given items and the knapsack capacity. For example: ```python items = [(2, 3), (2, 4), (4, 8), (5, 8)] max_weight = 8 print(knapsack(items, max_weight)) # Output: 15 ``` Ensure your implementation is efficient and correctly handles edge cases such as an empty list of items or a `max_weight` of zero.","solution":"def knapsack(items, max_weight): Solves the 0/1 Knapsack problem and returns the maximum value that can be achieved. Parameters: items (list of tuples): A list where each tuple contains (weight, value) of an item. max_weight (int): The maximum weight capacity of the knapsack. Returns: int: The maximum value achievable with the given items and knapsack capacity. n = len(items) # Initialize the DP table with (n+1) x (max_weight+1) dimensions filled with 0 dp = [[0] * (max_weight + 1) for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): weight, value = items[i - 1] for w in range(max_weight + 1): if weight > w: dp[i][w] = dp[i - 1][w] # If the item cannot be included, inherit the value from above else: # Choose the maximum between not taking the item and taking the item dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) return dp[n][max_weight]"},{"question":"Create a function that takes two arrays of integers as inputs and returns an array containing only the unique integers that appear in both input arrays. The order of appearance in the output should follow their order of appearance in the first input array. Duplicate integers should be included only once in the output. For example, given the arrays [3, 1, 2, 4, 3] and [1, 2, 3, 5], the returned result should be [3, 1, 2]. Write the function in your preferred programming language.","solution":"def find_unique_common_elements(arr1, arr2): Returns an array containing only the unique integers that appear in both input arrays. The output follows the order of appearance in the first input array and excludes duplicates. # Use a set to keep track of unique elements in arr2 set_arr2 = set(arr2) # Create an ordered set to keep unique common elements in the order they appear in arr1 unique_common_elements = [] for num in arr1: if num in set_arr2 and num not in unique_common_elements: unique_common_elements.append(num) return unique_common_elements"},{"question":"Create a function that processes a list of dictionaries representing a collection of books in a library and a list of dictionaries representing book borrow records. Modify the borrow records to include details like book title and author, and filter out records of books that have not been returned within a specified number of days. Books List (Dictionary): - book_id (Primary Key) - title - author - publish_year Borrow Records List (Dictionary): - record_id (Primary Key) - book_id (Foreign Key) - borrower_name - borrow_date (YYYY-MM-DD) - return_date (YYYY-MM-DD, can be None if not yet returned) Conditions: 1. Add the \'title\' and \'author\' to each borrow record from the corresponding book details. 2. Filter and retain only those borrow records where the \'return_date\' is within 30 days of the \'borrow_date\'. 3. If a borrow record does not have a \'return_date\', consider the current date for calculating the borrow duration. Function Signature: ```python def process_borrow_records(books: list, borrow_records: list, current_date: str) -> list: pass ``` Example: ```python books = [ {\\"book_id\\": 1, \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"publish_year\\": 1949}, {\\"book_id\\": 2, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"publish_year\\": 1960}, {\\"book_id\\": 3, \\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"publish_year\\": 1925}, ] borrow_records = [ {\\"record_id\\": 1, \\"book_id\\": 1, \\"borrower_name\\": \\"Alice\\", \\"borrow_date\\": \\"2023-09-01\\", \\"return_date\\": \\"2023-09-25\\"}, {\\"record_id\\": 2, \\"book_id\\": 2, \\"borrower_name\\": \\"Bob\\", \\"borrow_date\\": \\"2023-08-15\\", \\"return_date\\": None}, {\\"record_id\\": 3, \\"book_id\\": 3, \\"borrower_name\\": \\"Charlie\\", \\"borrow_date\\": \\"2023-07-15\\", \\"return_date\\": \\"2023-08-20\\"}, ] current_date = \\"2023-10-01\\" processed_records = process_borrow_records(books, borrow_records, current_date) ``` Expected Output: ```python [ {\\"record_id\\": 1, \\"book_id\\": 1, \\"borrower_name\\": \\"Alice\\", \\"borrow_date\\": \\"2023-09-01\\", \\"return_date\\": \\"2023-09-25\\", \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\"}, {\\"record_id\\": 2, \\"book_id\\": 2, \\"borrower_name\\": \\"Bob\\", \\"borrow_date\\": \\"2023-08-15\\", \\"return_date\\": None, \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\"}, ] ```","solution":"from datetime import datetime, timedelta def process_borrow_records(books, borrow_records, current_date): Processes borrow records for a list of books and retains records within 30 days of borrow_date. Parameters: books (list): List of dictionaries containing book details. borrow_records (list): List of dictionaries containing borrow record details. current_date (str): Current date as a string in the format \'YYYY-MM-DD\'. Returns: list: Filtered and enriched list of borrow records. book_details = {book[\'book_id\']: book for book in books} filtered_records = [] for record in borrow_records: book_id = record[\'book_id\'] if book_id in book_details: record[\'title\'] = book_details[book_id][\'title\'] record[\'author\'] = book_details[book_id][\'author\'] borrow_date = datetime.strptime(record[\'borrow_date\'], \\"%Y-%m-%d\\") return_date_str = record[\'return_date\'] return_date = datetime.strptime(return_date_str, \\"%Y-%m-%d\\") if return_date_str else datetime.strptime(current_date, \\"%Y-%m-%d\\") if (return_date - borrow_date).days <= 30: filtered_records.append(record) return filtered_records"},{"question":"Write a function that takes a list of dictionaries where each dictionary represents a student with fields \\"name\\" (string) and \\"grades\\" (list of integers). The function should calculate and print the average grade of each student. Additionally, categorize each student\'s performance as \'Excellent\', \'Good\', \'Average\', or \'Poor\' based on the following criteria: - \'Excellent\' if the average grade is above 90. - \'Good\' if the average grade is between 75 and 90. - \'Average\' if the average grade is between 50 and 75. - \'Poor\' if the average grade is below 50. Handle cases where the \\"grades\\" list might be empty by printing \'No grades available\' for the student, and ensure the function handles invalid data gracefully.","solution":"def print_student_performance(students): Takes a list of dictionaries where each dictionary represents a student with fields \\"name\\" (string) and \\"grades\\" (list of integers). Calculates and prints the average grade of each student and categorizes them as \'Excellent\', \'Good\', \'Average\', or \'Poor\' based on their average grade. Also handles cases where \\"grades\\" list is empty. for student in students: name = student.get(\'name\') grades = student.get(\'grades\', []) if not name or not isinstance(name, str) or not isinstance(grades, list): print(f\\"Invalid data for a student: {student}\\") continue if not grades: print(f\\"No grades available for {name}.\\") continue average_grade = sum(grades) / len(grades) if average_grade > 90: performance = \'Excellent\' elif 75 <= average_grade <= 90: performance = \'Good\' elif 50 <= average_grade < 75: performance = \'Average\' else: performance = \'Poor\' print(f\\"{name}: Average Grade = {average_grade:.2f}, Performance = {performance}\\")"},{"question":"In a library management system, books are categorized into different genres. Consider a scenario where you are provided with a list of book titles along with their corresponding genres. Write a Python function that takes this list as input and returns a dictionary where each key is a genre and the value is a list of book titles belonging to that genre. For instance, given the list: [ (\'Pride and Prejudice\', \'Romance\'), (\'To Kill a Mockingbird\', \'Fiction\'), (\'The Great Gatsby\', \'Fiction\'), (\'The Fault in Our Stars\', \'Romance\') ] The function should return: { \'Romance\': [\'Pride and Prejudice\', \'The Fault in Our Stars\'], \'Fiction\': [\'To Kill a Mockingbird\', \'The Great Gatsby\'] } Function signature: ```python def categorize_books(books: List[Tuple[str, str]]) -> Dict[str, List[str]]: ```","solution":"from typing import List, Tuple, Dict def categorize_books(books: List[Tuple[str, str]]) -> Dict[str, List[str]]: Categorizes books into genres. :param books: List of tuples where each tuple contains a book title and its genre. :return: Dictionary where each key is a genre and the value is a list of books in that genre. genre_dict = {} for title, genre in books: if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(title) return genre_dict"},{"question":"Given an array of integers, find the length of the longest consecutive sequence of elements. Consecutive elements can be in any order but must be consecutive numbers. Write a function `findLongestConsecutiveSequence` that takes an array of integers as input and returns the length of the longest consecutive sequence. **Function Signature:** ```python def findLongestConsecutiveSequence(nums: List[int]) -> int: ``` # Input - A list of integers `nums` where `0 <= len(nums) <= 10^5`. # Output - Return an integer representing the length of the longest consecutive sequence. # Example ```python findLongestConsecutiveSequence([100, 4, 200, 1, 3, 2]) ``` Output: `4` (because the longest consecutive sequence is [1, 2, 3, 4]) # Constraints - You must solve it with a time complexity of O(n). # Note - Make sure your solution runs efficiently within the provided input size constraints. - Opt for a method that uses a hash set to achieve the required linear time complexity.","solution":"def findLongestConsecutiveSequence(nums): Returns the length of the longest consecutive sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Check if the number is the start of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes an integer `n` as input and returns the nth number in the Fibonacci sequence. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones, starting from 0 and 1. For example, if `n` is 0, return 0; if `n` is 1, return 1; if `n` is 5, return 5 (because the sequence is 0, 1, 1, 2, 3, 5, ...).","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that rotates the elements of a given list to the right by a specified number of steps. def rotate_list(lst, steps): The function takes in two parameters: a list of integers (lst) and a non-negative integer (steps). It should return the list after rotating its elements to the right by the number of steps specified. If the steps exceed the length of the list, the rotation should wrap around properly. For example: rotate_list([1, 2, 3, 4, 5], 2): [4, 5, 1, 2, 3] rotate_list([6, 7, 8, 9], 1): [9, 6, 7, 8] rotate_list([0, 1, 2], 4): [2, 0, 1]","solution":"def rotate_list(lst, steps): Rotates the elements of a given list to the right by a specified number of steps. :param lst: List of integers to be rotated. :param steps: Non-negative integer specifying the number of steps to rotate. :return: Rotated list. if not lst: return lst steps = steps % len(lst) # ensures that steps exceed the length of the list wraps around properly return lst[-steps:] + lst[:-steps]"},{"question":"Design a Python function called `summarize_dataset` that takes a file path as input, reads a CSV file from that path, and returns a dictionary with the following summaries for each numerical column: - Mean - Median - Standard Deviation - The most frequent value(s) If a column is non-numerical, it should be ignored. Ensure your function handles cases where the file may not exist or where columns may contain missing or non-numeric values. Use appropriate libraries for data handling and statistical calculations.","solution":"import pandas as pd import numpy as np from scipy import stats def summarize_dataset(file_path): Summarizes the dataset from the given CSV file path by providing mean, median, standard deviation, and most frequent value(s) for each numerical column. :param file_path: Path to the CSV file. :return: Dictionary with summaries for each numerical column. try: df = pd.read_csv(file_path) except FileNotFoundError: return {\\"error\\": \\"File not found\\"} except pd.errors.EmptyDataError: return {\\"error\\": \\"Empty data\\"} summary = {} for column in df.select_dtypes(include=np.number).columns: col_data = df[column].dropna() if col_data.empty: continue mean_value = col_data.mean() median_value = col_data.median() std_dev = col_data.std() most_freq_values = col_data.mode().tolist() summary[column] = { \'mean\': mean_value, \'median\': median_value, \'std_dev\': std_dev, \'most_frequent\': most_freq_values } return summary"},{"question":"Create a function that determines if the list of numbers follows a \\"quasi-fibonacci\\" sequence. In a quasi-fibonacci sequence, every number in the list after the first two numbers should be the sum of any non-empty subset of the previous two numbers in the sequence. For example, given the sequence [3, 2, 5, 5], the third number (5) is the sum of both the first (3) and second (2) numbers, and the fourth number (5) is the sum of either the second (2) and third (5) numbers or just the third (5) number alone. Write a function `is_quasi_fibonacci(sequence: List[int]) -> bool` which returns `True` if the given list follows a quasi-fibonacci sequence, otherwise returns `False`. Example: is_quasi_fibonacci([3, 2, 5, 5]) -> True is_quasi_fibonacci([1, 2, 3, 6]) -> False","solution":"from typing import List def is_quasi_fibonacci(sequence: List[int]) -> bool: Determines if the given list of numbers follows a quasi-fibonacci sequence. if len(sequence) < 3: return True for i in range(2, len(sequence)): a, b = sequence[i-2], sequence[i-1] possible_next_values = set() if a == 0 and b == 0: possible_next_values.add(0) else: # generate non-empty subsets of {a, b} if a != 0: possible_next_values.add(a) if b != 0: possible_next_values.add(b) possible_next_values.add(a + b) # Check if the current value is in the generated set if sequence[i] not in possible_next_values: return False return True"},{"question":"You are given a problem named \\"Maximal Rectangle\\" where you need to determine the largest rectangle of 1\'s in a 2D binary matrix filled with 0\'s and 1\'s. The binary matrix is provided as a list of strings, where each string represents a row of the matrix. For example, consider the following: Example 1: Given the matrix: [ \\"10100\\", \\"10111\\", \\"11111\\", \\"10010\\" ] The maximal rectangle of 1\'s has an area of 6. Example 2: Given the matrix: [ \\"0\\" ] The maximal rectangle of 1\'s has an area of 0. Example 3: Given the matrix: [ \\"01\\", \\"10\\" ] The maximal rectangle of 1\'s has an area of 1. Constraints: - The number of rows in the matrix is between 1 and 200, inclusive. - The number of columns in the matrix is between 1 and 200, inclusive. - Each element in the matrix is either \'0\' or \'1\'.","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 num_cols = len(matrix[0]) heights = [0] * (num_cols + 1) max_area = 0 for row in matrix: for col in range(num_cols): if row[col] == \'1\': heights[col] += 1 else: heights[col] = 0 stack = [-1] for i in range(num_cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function that takes a string and an integer k as inputs and returns the first substring of length k that contains k distinct characters. If no such substring exists, return an empty string. The function should be case-sensitive. For example, for input string \\"abcdefg\\" and k=3, the output should be \\"abc\\".","solution":"def first_k_distinct_substring(s, k): Returns the first substring of length k that contains k distinct characters. If no such substring exists, returns an empty string. Args: s (str): The input string. k (int): The length of the substring. Returns: str: The first substring of length k with k distinct characters or an empty string. if k > len(s): return \\"\\" for i in range(len(s) - k + 1): substring = s[i:i + k] if len(set(substring)) == k: return substring return \\"\\""},{"question":"Write a Python function that reads a list of words from a text file, determines all the unique words, and then returns a dictionary where the keys are the unique words and the values are the counts of each word\'s occurrence in the text file. Assume that words are separated by spaces or punctuation marks (e.g., `.,!?;`). Your function should be case-insensitive and should treat different capitalizations of the same word as identical (e.g., \\"Word\\" and \\"word\\" should be counted as the same word). Additionally, the function should ignore any word that is entirely numeric (e.g., \\"123\\" should not be counted).","solution":"import re from collections import defaultdict def count_unique_words(file_path): Reads a list of words from a text file, determines all unique words, and returns a dictionary with the counts of each word\'s occurrence. Parameters: file_path (str): The path to the text file. Returns: dict: A dictionary where keys are unique words and values are their counts. word_counts = defaultdict(int) with open(file_path, \'r\') as file: for line in file: # Use regex to split by any non-alphanumeric characters words = re.split(r\'W+\', line) for word in words: cleaned_word = word.strip().lower() if cleaned_word and not cleaned_word.isnumeric(): word_counts[cleaned_word] += 1 return dict(word_counts)"},{"question":"Using the given dataset of daily temperatures in Seattle (which can be found at this URL: https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv), develop a temperature prediction model using a combination of a Linear Regression model and a Decision Tree Regressor. Your task includes pre-processing the data, integrating both models, and fine-tuning their parameters to improve forecasting performance. Your evaluation must include: 1. A time-series cross-validation technique to validate your model and avoid overfitting. 2. The Root Mean Square Error (RMSE) for your model\'s predictions compared to the actual data. 3. A performance comparison between the combined Linear Regression + Decision Tree Regressor model and each model used individually. Discuss any enhancements in accuracy or other insights observed. Present your final code in a well-documented Jupyter Notebook format with comments to elucidate your code, along with visualizations comparing your model\'s predictions and the actual temperature data.","solution":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from sklearn.tree import DecisionTreeRegressor from sklearn.metrics import mean_squared_error from sklearn.model_selection import TimeSeriesSplit from sklearn.ensemble import VotingRegressor import matplotlib.pyplot as plt def load_data(url): df = pd.read_csv(url, parse_dates=[\'Date\']) df.set_index(\'Date\', inplace=True) return df def create_lag_features(data, lag): df = data.copy() for i in range(1, lag+1): df[f\'lag_{i}\'] = df[\'Temp\'].shift(i) df.dropna(inplace=True) return df def prepare_data(df, lag): data = create_lag_features(df, lag) X = data.drop(columns=\'Temp\').values y = data[\'Temp\'].values return X, y def train_evaluate_model(X, y, n_splits=5): tscv = TimeSeriesSplit(n_splits=n_splits) lr_rmse = [] dt_rmse = [] vr_rmse = [] for train_idx, test_idx in tscv.split(X): X_train, X_test = X[train_idx], X[test_idx] y_train, y_test = y[train_idx], y[test_idx] # Linear Regression lr = LinearRegression() lr.fit(X_train, y_train) lr_pred = lr.predict(X_test) lr_rmse.append(np.sqrt(mean_squared_error(y_test, lr_pred))) # Decision Tree Regressor dt = DecisionTreeRegressor() dt.fit(X_train, y_train) dt_pred = dt.predict(X_test) dt_rmse.append(np.sqrt(mean_squared_error(y_test, dt_pred))) # Voting Regressor vr = VotingRegressor([(\'lr\', lr), (\'dt\', dt)]) vr.fit(X_train, y_train) vr_pred = vr.predict(X_test) vr_rmse.append(np.sqrt(mean_squared_error(y_test, vr_pred))) return lr_rmse, dt_rmse, vr_rmse def plot_predictions(df, model, lag): data = create_lag_features(df, lag) X = data.drop(columns=\'Temp\').values y = data[\'Temp\'].values model.fit(X, y) predictions = model.predict(X) plt.figure(figsize=(14, 7)) plt.plot(df.index, df[\'Temp\'], label=\'Actual\') plt.plot(data.index, predictions, label=\'Predicted\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature\') plt.legend() plt.show() url = \'https://raw.githubusercontent.com/jbrownlee/Datasets/master/daily-min-temperatures.csv\' df = load_data(url) lag = 7 X, y = prepare_data(df, lag) lr_rmse, dt_rmse, vr_rmse = train_evaluate_model(X, y, n_splits=5) print(f\\"Linear Regression RMSE: {np.mean(lr_rmse):.4f}\\") print(f\\"Decision Tree Regressor RMSE: {np.mean(dt_rmse):.4f}\\") print(f\\"Voting Regressor RMSE: {np.mean(vr_rmse):.4f}\\") # Compare predictions vr = VotingRegressor([(\'lr\', LinearRegression()), (\'dt\', DecisionTreeRegressor())]) plot_predictions(df, vr, lag)"},{"question":"Write a function that simulates a bank account withdrawal. Your function should take two arguments: the current balance (a floating-point number) and the withdrawal amount (a floating-point number). If the withdrawal amount is greater than the current balance, return a message stating \\"Insufficient funds\\". Otherwise, deduct the withdrawal amount from the current balance and return the new balance. Consider possible edge cases, such as withdrawal amounts that are negative or zero. Function Signature: ```python def withdraw_balance(current_balance: float, withdrawal_amount: float) -> Union[str, float]: pass ``` Examples: ```python print(withdraw_balance(500.00, 100.00)) # Output: 400.00 print(withdraw_balance(500.00, 600.00)) # Output: \\"Insufficient funds\\" print(withdraw_balance(500.00, -50.00)) # Output: \\"Invalid withdrawal amount\\" print(withdraw_balance(500.00, 0.00)) # Output: \\"Invalid withdrawal amount\\" ``` Constraints: - The current balance will always be a non-negative number. - The withdrawal amount can be any floating-point number.","solution":"from typing import Union def withdraw_balance(current_balance: float, withdrawal_amount: float) -> Union[str, float]: Simulates a bank account withdrawal. Parameters: - current_balance (float): The current account balance. - withdrawal_amount (float): The amount to withdraw. Returns: - (float): The new balance if the withdrawal is successful. - (str): An error message if there are insufficient funds or the withdrawal amount is invalid. if withdrawal_amount <= 0: return \\"Invalid withdrawal amount\\" elif withdrawal_amount > current_balance: return \\"Insufficient funds\\" else: return current_balance - withdrawal_amount"},{"question":"Design a function that takes a list of integers and an integer k, and returns a list of integers that are k times smaller than the integer at the same position in the original list. If the integer at a position in the original list is not divisible by k, the function should raise an InvalidDivisionError with an appropriate error message. # Sample Input and Output **Input:** ```python list1 = [10, 20, 30, 40] k = 2 ``` **Output:** ```python [5, 10, 15, 20] ``` **Input:** ```python list2 = [10, 21, 30, 40] k = 2 ``` **Output:** ```python InvalidDivisionError: 21 is not divisible by 2 ``` # Constraints - The function should raise an InvalidDivisionError if any integer in the list is not divisible by k. - Assume list elements and k are all positive integers. - The function should retain the order of elements from the original list in the resultant list. # Function Signature ```python def divide_list_elements(lst: List[int], k: int) -> List[int]: pass class InvalidDivisionError(Exception): pass ```","solution":"from typing import List class InvalidDivisionError(Exception): Custom exception for invalid division operation. def __init__(self, value, k): super().__init__(f\\"{value} is not divisible by {k}\\") def divide_list_elements(lst: List[int], k: int) -> List[int]: result = [] for value in lst: if value % k != 0: raise InvalidDivisionError(value, k) result.append(value // k) return result"},{"question":"Write a function that performs matrix multiplication for two given matrices. The function should take two 2D lists as input, representing the matrices and return their product as a new 2D list. Ensure to handle invalid matrix dimensions appropriately. Provide an example to verify the functionality of your implementation with the following inputs: matrix1 = [ [1, 2, 3], [4, 5, 6] ] matrix2 = [ [7, 8], [9, 10], [11, 12] ]","solution":"def matrix_multiply(matrix1, matrix2): Performs matrix multiplication on two 2D lists. Args: matrix1: list of lists, where each sub-list represents a row in the matrix matrix2: list of lists, where each sub-list represents a row in the matrix Returns: The resultant matrix after multiplication. Raises: ValueError: If the number of columns in matrix1 does not equal the number of rows in matrix2. # Validate matrix dimensions if len(matrix1[0]) != len(matrix2): raise ValueError(\\"Number of columns in matrix1 must equal the number of rows in matrix2\\") # Number of rows in resultant matrix result_rows = len(matrix1) # Number of columns in resultant matrix result_cols = len(matrix2[0]) # Initialize the resultant matrix with zeros result_matrix = [[0 for _ in range(result_cols)] for _ in range(result_rows)] # Perform matrix multiplication for i in range(result_rows): for j in range(result_cols): for k in range(len(matrix1[0])): result_matrix[i][j] += matrix1[i][k] * matrix2[k][j] return result_matrix # Example matrix1 = [ [1, 2, 3], [4, 5, 6] ] matrix2 = [ [7, 8], [9, 10], [11, 12] ] # Expected output: # [ # [58, 64], # [139, 154] # ] print(matrix_multiply(matrix1, matrix2))"},{"question":"Create a function that simulates the inventory system of a small store. Your program should be able to add new items, update the quantity of existing items, and remove items that have a quantity of zero. Each item has a name (string) and a quantity (integer). Ensure your program provides meaningful error messages for invalid operations, such as attempting to remove a non-existent item or updating an item with a negative quantity.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, quantity): if quantity < 0: raise ValueError(\\"Quantity cannot be negative\\") if name in self.items: self.items[name] += quantity else: self.items[name] = quantity def update_quantity(self, name, quantity): if name not in self.items: raise KeyError(f\\"Item \'{name}\' does not exist in inventory\\") if self.items[name] + quantity < 0: raise ValueError(f\\"Cannot update \'{name}\' to a negative quantity\\") self.items[name] += quantity if self.items[name] == 0: del self.items[name] def remove_item(self, name): if name not in self.items: raise KeyError(f\\"Item \'{name}\' does not exist in inventory\\") del self.items[name] def get_inventory(self): return self.items"},{"question":"Given an array of integers, return the largest product that can be obtained by multiplying any three integers in the array. For example, given the array arr = [-10, -10, 5, 2], the largest product is 500. Write a function `max_product_of_three(arr)` that takes an array of integers as input and returns the largest product of any three integers. # Constraints: - The input array will contain at least three integers. - The array can contain both positive and negative numbers. # Example: ```python def max_product_of_three(arr): # Your code here print(max_product_of_three([-10, -10, 5, 2])) # Output: 500 print(max_product_of_three([1, 2, 3, 4])) # Output: 24 ``` # Notes: 1. Your solution should have a time complexity of at most O(n log n).","solution":"def max_product_of_three(arr): Returns the largest product of any three integers in the array. arr.sort() # The maximum product can be achieved either by # - The product of the largest three positive numbers, or # - The product of the two most negative numbers (which can contribute positively because minus times minus is plus) and the largest positive number max1 = arr[-1] * arr[-2] * arr[-3] max2 = arr[0] * arr[1] * arr[-1] return max(max1, max2)"},{"question":"Write a function that takes a list of integers and returns the length of the longest subarray with contiguous elements. The elements can be in any order within the subarray, but they must form a consecutive sequence and should not repeat within it. Additionally, the function should handle large inputs efficiently and avoid unnecessary computations. Include test cases that check for edge cases such as empty lists, lists with one element, and lists that contain duplicate or non-consecutive numbers. Demonstrate optimization techniques and justify your choices of algorithms or data structures used in the solution.","solution":"def longest_contig_subarray(arr): Returns the length of the longest subarray with contiguous elements. if not arr: return 0 max_len = 0 arr_set = set(arr) for num in arr: # If the number is the start of a contiguous sequence if num - 1 not in arr_set: current_num = num current_len = 1 # Count the length of contiguous sequence while current_num + 1 in arr_set: current_num += 1 current_len += 1 max_len = max(max_len, current_len) return max_len"},{"question":"Create a function merge_alternate in Python that takes two lists of integers a and b as parameters. The function should return a new list consisting of elements from a and b merged alternately. If one of the lists is longer than the other, append the remaining elements from the longer list to the end of the merged list. Ensure your function handles lists of different lengths efficiently without using built-in Python functions such as zip().","solution":"def merge_alternate(a, b): Merges two lists `a` and `b` alternately. If one list is longer, append the remaining elements. result = [] len_a, len_b = len(a), len(b) min_len = min(len_a, len_b) for i in range(min_len): result.append(a[i]) result.append(b[i]) if len_a > len_b: result.extend(a[min_len:]) else: result.extend(b[min_len:]) return result"},{"question":"Write a Python function named \\"character_frequency\\" that takes a string as input and returns a dictionary where the keys are characters and the values are the frequency of each character in the string. The function should ignore case (treat \'A\' and \'a\' as the same character) and should not include spaces in the frequency count. Additionally, write a class to handle all operations such as input validation, character frequency computation, and formatting the output in a sorted manner (characters should be in ascending order by their ASCII values). For input validation, a TypeError should be raised if the input is not a string.","solution":"def character_frequency(s): Returns a dictionary with the frequency of each character in the input string. Characters are considered case-insensitively and spaces are ignored. :param s: The input string :type s: str :return: Dictionary with frequencies of characters :rtype: dict :raises TypeError: If the input is not a string if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") frequency = {} for char in s.lower(): if char != \' \': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency class CharacterFrequency: def __init__(self, input_str): Initializes the CharacterFrequency with a string input, performs validation, and computes the frequency of characters. :param input_str: The input string :type input_str: str :raises TypeError: If the input is not a string if not isinstance(input_str, str): raise TypeError(\\"Input must be a string\\") self.input_str = input_str.lower() # Ignore case self.frequency = self.compute_frequency(self.input_str) def compute_frequency(self, s): Computes the frequency of each character in the given string. :param s: The input string :type s: str :return: Dictionary with frequencies of characters :rtype: dict frequency = {} for char in s: if char != \' \': if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency def sorted_frequency(self): Returns the character frequency dictionary sorted by character. :return: Sorted dictionary of character frequencies :rtype: dict return dict(sorted(self.frequency.items()))"},{"question":"Consider the provided array of integers. Your task is to write a function that identifies the longest contiguous subarray whose sum is less than or equal to a specified value. Return the length of this subarray. For example: Input: nums = [1, 2, 3, 4, 5] k = 9 Output: 3 Explanation: The longest subarray where the sum is less than or equal to 9 is [2, 3, 4], which has a sum of 9 and a length of 3.","solution":"def longest_subarray_sum(nums, k): Returns the length of the longest contiguous subarray whose sum is less than or equal to k. max_length = 0 current_sum = 0 start = 0 for end in range(len(nums)): current_sum += nums[end] while current_sum > k: current_sum -= nums[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a Python function that takes a list of dictionaries and returns a new list that groups the dictionaries by a specified key. The function should allow for an optional parameter to either include or exclude keys with None or missing values from the grouping process. Furthermore, your function should handle erroneous input and provide appropriate feedback, while maintaining optimal computational efficiency. Unfinished Python code: ```python def group_dictionaries(dict_list: list, key: str, include_none: bool = True) -> dict: The function takes a list of dictionaries and groups them by a specified key. :param dict_list: List of dictionaries to be grouped. :param key: Key by which the dictionaries should be grouped. :param include_none: Boolean flag to include or exclude None or missing key values. :return: Dictionary with grouped lists of dictionaries. >>> group_dictionaries([{\'id\': 1, \'value\': \'a\'}, {\'id\': 2, \'value\': \'b\'}, {\'id\': 1, \'value\': \'c\'}], \'id\') {1: [{\'id\': 1, \'value\': \'a\'}, {\'id\': 1, \'value\': \'c\'}], 2: [{\'id\': 2, \'value\': \'b\'}]} >>> group_dictionaries([{\'id\': 1, \'value\': \'a\'}, {\'id\': 2, \'value\': \'b\'}, {\'no_id\': 1, \'value\': \'c\'}], \'id\', False) {1: [{\'id\': 1, \'value\': \'a\'}], 2: [{\'id\': 2, \'value\': \'b\'}]} # Insert your code here ```","solution":"def group_dictionaries(dict_list: list, key: str, include_none: bool = True) -> dict: The function takes a list of dictionaries and groups them by a specified key. :param dict_list: List of dictionaries to be grouped. :param key: Key by which the dictionaries should be grouped. :param include_none: Boolean flag to include or exclude None or missing key values. :return: Dictionary with grouped lists of dictionaries. if not isinstance(dict_list, list): raise TypeError(\\"First argument must be a list of dictionaries.\\") if not isinstance(key, str): raise TypeError(\\"Second argument must be a string representing the key.\\") grouped_dict = {} for dictionary in dict_list: if not isinstance(dictionary, dict): raise TypeError(\\"Elements of the list must be dictionaries.\\") value = dictionary.get(key, None) if not include_none and (value is None): continue if value not in grouped_dict: grouped_dict[value] = [] grouped_dict[value].append(dictionary) return grouped_dict"},{"question":"Design a function that verifies if a given string can be transformed into a palindrome by removing at most one character. Handle both cases where the string contains only lowercase letters and where it contains mixed cases (a mixture of uppercase and lowercase letters). def can_be_palindrome(s: str): Return whether the string can be transformed into a palindrome by removing at most one character. The function should account for: - strings containing only lowercase letters. - strings containing a mix of uppercase and lowercase letters.","solution":"def can_be_palindrome(s: str) -> bool: Return whether the string can be transformed into a palindrome by removing at most one character. The function should account for: - strings containing only lowercase letters. - strings containing a mix of uppercase and lowercase letters. def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) s = s.lower() left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Create a Python function that takes a list of tuples, where each tuple contains a student\'s name and their grade, and returns a dictionary that maps each student\'s name to their highest grade. If a student\'s name appears more than once in the list, you should only store the highest grade they received. Example Input: ```python students_grades = [(\\"John\\", 88), (\\"Jane\\", 92), (\\"John\\", 93), (\\"Jane\\", 85), (\\"Dave\\", 90)] ``` Expected Output: ```python { \\"John\\": 93, \\"Jane\\": 92, \\"Dave\\": 90 } ``` Write the Python function to achieve this. ```python def highest_grades(students_grades): # Add your code here students_grades = [(\\"John\\", 88), (\\"Jane\\", 92), (\\"John\\", 93), (\\"Jane\\", 85), (\\"Dave\\", 90)] print(highest_grades(students_grades)) ```","solution":"def highest_grades(students_grades): Takes a list of tuples where each tuple contains a student\'s name and their grade, and returns a dictionary mapping each student\'s name to their highest grade. grade_dict = {} for name, grade in students_grades: if name in grade_dict: if grade > grade_dict[name]: grade_dict[name] = grade else: grade_dict[name] = grade return grade_dict # Example usage students_grades = [(\\"John\\", 88), (\\"Jane\\", 92), (\\"John\\", 93), (\\"Jane\\", 85), (\\"Dave\\", 90)] print(highest_grades(students_grades)) # Output: {\'John\': 93, \'Jane\': 92, \'Dave\': 90}"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to remove the k most frequent characters from the string. If two characters have the same frequency, remove the lexicographically smaller one first. Implement a function that returns the modified string after removing the k most frequent characters. If k is larger than the number of unique characters in the string, remove all characters. Use the string \\"aabbcc\\" and k = 2 for your solution.","solution":"from collections import Counter def remove_k_most_frequent_chars(s, k): Removes the k most frequent characters from the string. If two characters have the same frequency, the lexicographically smaller one is removed first. if not s: return \\"\\" # Count frequencies of characters freq = Counter(s) # Sort characters first by frequency (descending) then by lexicographical order (ascending) sorted_chars = sorted(freq, key=lambda x: (-freq[x], x)) # Remove up to k characters chars_to_remove = set() for i in range(k): if i < len(sorted_chars): chars_to_remove.add(sorted_chars[i]) # Build the new string without the k most frequent characters result = \'\'.join([char for char in s if char not in chars_to_remove]) return result # Example usage: # s = \\"aabbcc\\" # k = 2 # remove_k_most_frequent_chars(s, k) should return \\"cc\\""},{"question":"In Python, implement a function to determine if a given linked list is a palindrome. The function should accept the head of a singly linked list and return `True` if the list reads the same forward and backward, and `False` otherwise. Use the following node class definition for your implementation: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Returns True if the linked list is a palindrome, False otherwise. # Convert linked list to list vals = [] current = head while current: vals.append(current.val) current = current.next # Check if list is palindrome return vals == vals[::-1]"},{"question":"Write a Python function that accomplishes the following: - Given two strings, determine whether they are anagrams of each other or not. - An anagram means rearranging the letters of one string to produce the other string, without considering case sensitivity and ignoring non-alphanumeric characters. - The function should return a boolean value: `True` if the strings are anagrams; otherwise, `False`. For example, the strings \\"Astronomer\\" and \\"Moon starer\\" should return `True` as they are anagrams (ignoring the case and non-alphanumeric characters). Similarly, the strings \\"Hello, World!\\" and \\"Lodger, Wholl!\\" should return `False`. Consider the time complexity and aim for a more efficient approach than O(n^2).","solution":"import re from collections import Counter def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, ignoring cases and non-alphanumeric characters. Otherwise, returns False. # Remove non-alphanumeric characters and convert to lower case str1_clean = re.sub(r\'[^a-zA-Z0-9]\', \'\', str1).lower() str2_clean = re.sub(r\'[^a-zA-Z0-9]\', \'\', str2).lower() # If lengths differ, they cannot be anagrams if len(str1_clean) != len(str2_clean): return False # Count frequencies of characters return Counter(str1_clean) == Counter(str2_clean)"},{"question":"Implement a function that identifies and returns all the pairs of numbers in a given list that add up to a specified target sum. The function should avoid using any extra space for storage and consider each pair only once, even if they can form multiple pairs. Example: Given the list [1, 2, 3, 4, 3, 2, 1] and the target sum 4, the function should return [(1, 3), (2, 2)], where each pair\'s order does not matter and duplicates are avoided. Ensure the solution is efficient in terms of time complexity.","solution":"def pairs_with_target_sum(nums, target): Returns all unique pairs of integers in the list `nums` that add up to the specified `target` sum. Each pair is listed in ascending order and duplicates are avoided. Arguments: nums -- list of integers target -- the target sum Returns: A list of tuples representing unique pairs that add up to the target sum. pairs = set() # Using a set to avoid duplicates left, right = 0, len(nums) - 1 nums.sort() while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs.add((nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return list(pairs)"},{"question":"Write a function in Python that takes a list of integers and returns a new list where each element is the sum of the original element and its adjacent elements. For the first and last element, treat the non-existent neighbor as zero. For example: ```python def sum_with_neighbors(numbers): # Your code here # Example usage: numbers = [1, 2, 3, 4] print(sum_with_neighbors(numbers)) # Output: [3, 6, 9, 7] ``` Ensure that your code handles edge cases such as an empty list or a list with a single element.","solution":"def sum_with_neighbors(numbers): Takes a list of integers and returns a new list where each element is the sum of the original element and its adjacent elements. For the first and last element, consider the non-existent neighbor as zero. :param numbers: List of integers :return: New list of integers if not numbers: return [] n = len(numbers) result = [] for i in range(n): if i == 0: result.append(numbers[i] + (numbers[i + 1] if i + 1 < n else 0)) elif i == n - 1: result.append(numbers[i] + (numbers[i - 1] if i - 1 >= 0 else 0)) else: result.append(numbers[i - 1] + numbers[i] + numbers[i + 1]) return result"},{"question":"Create a function that generates the sequence of prime numbers up to a given number `n`. The function should take an integer `n` as input and return a list of all prime numbers less than or equal to `n`. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. **Function Signature:** ```python def generate_primes(n: int) -> List[int]: ``` **Input:** - An integer `n` (1 <= n <= 10^6) **Output:** - A list of integers representing all prime numbers less than or equal to `n`. **Example:** ```python generate_primes(10) # Output: [2, 3, 5, 7] generate_primes(20) # Output: [2, 3, 5, 7, 11, 13, 17, 19] ``` **Requirements:** - Optimize for performance with respect to both time and space complexity. - Ensure the function can efficiently handle the upper limit constraint.","solution":"from typing import List def generate_primes(n: int) -> List[int]: Generates a list of prime numbers less than or equal to `n`. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return [i for i in range(n + 1) if is_prime[i]]"},{"question":"Write a function in Python that takes a list of integers and returns a new list containing only the elements that have an even number of digits. For example, if the input list is [12, 345, 2, 6, 7896], the output should be [12, 7896].","solution":"def even_digit_numbers(nums): Returns a list of integers from the input list that have an even number of digits. Args: nums (list of int): A list of integers. Returns: list of int: A list containing integers with an even number of digits. return [num for num in nums if len(str(abs(num))) % 2 == 0]"},{"question":"Write a function that simulates a basic calculator capable of performing addition, subtraction, multiplication, and division operations given as a string. The input will be a single string containing a mathematical expression involving non-negative integers and the operators (+, -, *, /). The function should follow the standard order of operations (PEMDAS/BODMAS). Assume the input expression is always valid. ```python def basic_calculator(expression: str) -> int: pass # Example usage: # basic_calculator(\\"3+5*2\\") should return 13 # basic_calculator(\\"10+2*6\\") should return 22 # basic_calculator(\\"100*2-38\\") should return 162 # basic_calculator(\\"14/2+1\\") should return 8 ```","solution":"def basic_calculator(expression: str) -> int: Simulates a basic calculator capable of performing addition, subtraction, multiplication and division operations in an expression string. It follows the standard order of operations. def operate(operand1, operator, operand2): if operator == \'+\': return operand1 + operand2 elif operator == \'-\': return operand1 - operand2 elif operator == \'*\': return operand1 * operand2 elif operator == \'/\': return operand1 // operand2 if operand1 * operand2 >= 0 else -(abs(operand1) // abs(operand2)) # Operator precedence map precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} def shunting_yard(expression): output = [] operators = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = \'\' while i < len(expression) and expression[i].isdigit(): num += expression[i] i += 1 output.append(int(num)) i -= 1 elif expression[i] in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[expression[i]]): output.append(operators.pop()) operators.append(expression[i]) i += 1 while operators: output.append(operators.pop()) return output def evaluate_rpn(rpn): stack = [] for token in rpn: if isinstance(token, int): stack.append(token) else: operand2 = stack.pop() operand1 = stack.pop() stack.append(operate(operand1, token, operand2)) return stack[0] rpn = shunting_yard(expression) return evaluate_rpn(rpn)"},{"question":"Design a data structure that efficiently supports the following operations for a sequence of integers: 1. Insert an integer at the end of the sequence. 2. Delete an integer from the sequence if it exists. 3. Find the median of the current sequence. Implement this data structure and ensure that the operations have an average time complexity of O(log n). Additionally, provide a method to validate the functionality, demonstrating the operations with a sample sequence of integers and their respective outputs.","solution":"import bisect class MedianFinder: def __init__(self): Initialize the MedianFinder data structure. self.nums = [] def insert(self, num: int): Inserts an integer into the data structure. bisect.insort(self.nums, num) def delete(self, num: int) -> bool: Deletes an integer from the data structure if it exists. Returns True if the deletion was successful, otherwise False. index = bisect.bisect_left(self.nums, num) if index < len(self.nums) and self.nums[index] == num: self.nums.pop(index) return True return False def find_median(self) -> float: Finds the median of the current sequence. n = len(self.nums) if n == 0: raise ValueError(\\"Median of an empty list is undefined.\\") if n % 2 == 1: return self.nums[n // 2] else: return (self.nums[n // 2 - 1] + self.nums[n // 2]) / 2"},{"question":"Explain the concept of dynamic programming and how it can be employed to solve optimization problems. Start by describing the key principles of dynamic programming, including overlapping subproblems and optimal substructure. Provide a detailed example that illustrates these principles. Using this example, create an algorithm that solves a classic dynamic programming problem — the \\"Knapsack Problem.\\" Define the problem, construct the dynamic programming table, and write a function in a programming language of your choice that solves the problem using this table. Analyze the time complexity and space complexity of your algorithm. Compare the dynamic programming solution to a brute force approach in terms of efficiency. Discuss any limitations or potential improvements for your dynamic programming solution, providing insight into how these could be implemented to handle larger input sizes or different problem constraints. Include various test cases and their results to demonstrate the effectiveness of your implementation.","solution":"def knapSack(W, wt, val, n): Returns the maximum value that can be put in a knapsack of capacity W. :param W: Maximum capacity of the knapsack. :param wt: List of weights of the items. :param val: List of values of the items. :param n: Number of items. # Create a 2D array to store the maximum value that can be achieved with the given capacity K = [[0 for x in range(W + 1)] for x in range(n + 1)] # Build the DP table K[][] in bottom up manner for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: K[i][w] = 0 elif wt[i-1] <= w: K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w]) else: K[i][w] = K[i-1][w] return K[n][W]"},{"question":"Write a Python function that takes a string containing only lowercase letters and returns the length of the longest substring with all unique characters. For example, given the input string \\"abcabcbb\\", the output should be 3, as the longest substring with all unique characters is \\"abc\\".","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. :param s: String containing only lowercase letters :return: Length of the longest substring with all unique characters if not s: return 0 n = len(s) max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a function that takes an array of integers and returns a new array where the elements are arranged in a zigzag fashion. In a zigzag array, every alternate element is greater than its previous element. For example: `[4, 3, 7, 8, 6, 2, 1]` can be transformed to `[3, 7, 4, 8, 2, 6, 1]`. The function should not modify the input array and should have a time complexity of at most O(n log n).","solution":"def zigzag_array(arr): Rearranges the elements of arr in a zigzag fashion without modifying the input array. The resultant array has elements arranged in such a manner that every alternate element is greater than its previous element. Parameters: arr (list): List of integers to be rearranged. Returns: list: New list containing the elements arranged in zigzag fashion. if len(arr) < 2: return arr[:] sorted_arr = sorted(arr) result = [0] * len(arr) left, right = 0, len(arr) - 1 for i in range(len(arr)): if i % 2 == 0: result[i] = sorted_arr[left] left += 1 else: result[i] = sorted_arr[right] right -= 1 return result"},{"question":"Create a function in Python that takes a list of integers and returns a new list where each element at index `i` is the product of all the numbers in the original list except the one at `i` without using division. For example, for the input list `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]`. Hint: Consider using two additional lists to keep track of the products of all the integers to the left and right of each index.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the numbers in the original list except the one at that index. n = len(nums) if n == 0: return [] # Initialize two lists to keep track of the left and right products left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate the products of all the integers to the left of each index for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate the products of all the integers to the right of each index for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Generate the result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a Python function that takes a list of integers as input and returns a new list where each element is squared if it is a positive integer, and cubed if it is a negative integer. Zeroes should be left unchanged. Additionally, implement exception handling in your function to manage potential errors that may arise if non-integer values are present in the input list.","solution":"def modify_list(nums): Takes a list of integers and returns a new list where each positive integer is squared, each negative integer is cubed, and zeroes remain unchanged. Handles non-integer values by raising a ValueError. result = [] for num in nums: if not isinstance(num, int): raise ValueError(\\"All elements in the input list must be integers.\\") if num > 0: result.append(num ** 2) elif num < 0: result.append(num ** 3) else: result.append(num) return result"},{"question":"Given a list of student scores in a class, write a Python function that uses the `collections` library to determine the top 3 students with the highest scores and their respective ranks. If there is a tie, rank them in alphabetical order of their names. The function should return a list of tuples containing the student\'s name and their rank.","solution":"from collections import defaultdict def top_three_students(scores): Determines the top 3 students with the highest scores and their respective ranks. Ties are broken in alphabetical order of their names. :param scores: List[Tuple[str, int]] where each tuple contains a student\'s name and their score :return: List[Tuple[str, int]] containing the top 3 students and their ranks # Create a dictionary to hold scores mapped to names score_dict = defaultdict(list) for name, score in scores: score_dict[score].append(name) # Sort the scores in descending order sorted_scores = sorted(score_dict.keys(), reverse=True) # Keep track of the ranks result = [] current_rank = 1 for score in sorted_scores: names = sorted(score_dict[score]) # Sort names alphabetically for name in names: result.append((name, current_rank)) if len(result) == 3: return result current_rank += len(names) return result"},{"question":"Design a simple command-line application that simulates a basic to-do list manager using a class-based structure in Python. The application should support the following features: 1. Add a new task with a description. 2. Mark an existing task as completed. 3. Remove a completed task. 4. Display all tasks with their statuses (completed or not completed). Each of these features should be accessible through a simple text-based menu system presented to the user. You should use Python\'s class and object-oriented programming principles to implement the to-do list and its tasks. Provide the implementation of the `Task` and `ToDoList` classes, the main function to drive the application, and a sample interaction with the user. Keep the code organized and ensure to handle edge cases such as marking a task that doesn\'t exist or removing a task that isn\'t completed.","solution":"class Task: def __init__(self, description): self.description = description self.completed = False def mark_completed(self): self.completed = True def __str__(self): status = \\"Completed\\" if self.completed else \\"Not Completed\\" return f\\"{self.description} - {status}\\" class ToDoList: def __init__(self): self.tasks = [] def add_task(self, description): task = Task(description) self.tasks.append(task) def mark_task_completed(self, task_index): if 0 <= task_index < len(self.tasks): self.tasks[task_index].mark_completed() else: print(\\"Task does not exist.\\") def remove_completed_task(self, task_index): if 0 <= task_index < len(self.tasks): if self.tasks[task_index].completed: del self.tasks[task_index] else: print(\\"Task is not completed.\\") else: print(\\"Task does not exist.\\") def display_tasks(self): if not self.tasks: print(\\"No tasks available.\\") for idx, task in enumerate(self.tasks, 1): print(f\\"Task {idx}: {task}\\") def main(): todo_list = ToDoList() while True: print(\\"nTo-Do List Manager\\") print(\\"1. Add a new task\\") print(\\"2. Mark a task as completed\\") print(\\"3. Remove a completed task\\") print(\\"4. Display all tasks\\") print(\\"5. Exit\\") choice = input(\\"Select an option: \\") if choice == \'1\': description = input(\\"Enter task description: \\") todo_list.add_task(description) elif choice == \'2\': task_index = int(input(\\"Enter task index to mark as completed: \\")) - 1 todo_list.mark_task_completed(task_index) elif choice == \'3\': task_index = int(input(\\"Enter task index to remove: \\")) - 1 todo_list.remove_completed_task(task_index) elif choice == \'4\': todo_list.display_tasks() elif choice == \'5\': break else: print(\\"Invalid option. Please try again.\\") if __name__ == \'__main__\': main()"},{"question":"Create a Python function called `find_nearest_store` that takes two arguments: a list of dictionaries representing stores, each containing \'name\' (string), \'longitude\' (float), and \'latitude\' (float) fields, and another dictionary representing your current location with \'longitude\' (float) and \'latitude\' (float) fields. Your function should return the name of the store closest to your current location using the Haversine formula to calculate the distance between two geographical points. Provide test cases that ensure the function works correctly for various geographical coordinates and scenarios.","solution":"import math def haversine(lon1, lat1, lon2, lat2): Calculate the great-circle distance between two points on the Earth surface using the Haversine formula. # Convert decimal degrees to radians lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2]) # Haversine formula dlon = lon2 - lon1 dlat = lat2 - lat1 a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2 c = 2 * math.asin(math.sqrt(a)) r = 6371 # Radius of earth in kilometers. Use 3956 for miles. return c * r def find_nearest_store(stores, location): Returns the name of the store closest to the given location. Parameters: - stores: list of dictionaries with \'name\', \'longitude\', \'latitude\'. - location: dictionary with \'longitude\' and \'latitude\'. closest_store = None min_distance = float(\'inf\') for store in stores: distance = haversine(store[\'longitude\'], store[\'latitude\'], location[\'longitude\'], location[\'latitude\']) if distance < min_distance: min_distance = distance closest_store = store[\'name\'] return closest_store"},{"question":"Design a function that, given a string consisting of lowercase letters and spaces, returns a new string where the order of the words is reversed, but the letters within each word remain in the original order. For instance, given the input \\"the sky is blue\\", the function should return \\"blue is sky the\\". Ensure that no extra spaces are added in the output string and that words are separated by a single space. Avoid the use of pre-defined split or reverse functions.","solution":"def reverse_words(input_str): Given a string consisting of lowercase letters and spaces, returns a new string where the order of the words is reversed, but the letters within each word remain in the original order. words = [] word = \'\' # Iterate over each character in the input string for char in input_str: if char == \' \': if word: words.append(word) word = \'\' else: word += char # Append the last word if there is one if word: words.append(word) # Reverse the order of the words reversed_words = [] for i in range(len(words) - 1, -1, -1): reversed_words.append(words[i]) # Join the reversed words with a single space result = \' \'.join(reversed_words) return result"},{"question":"Create a function that parses a log file and extracts error messages with their corresponding timestamps. The log file comprises multiple lines, each entailing a timestamp in the format \'YYYY-MM-DD HH:MM:SS\' followed by a log level (INFO, WARN, ERROR), and a message. Your function should return all error messages along with their timestamps in a list of tuples, where each tuple contains the timestamp and the error message.","solution":"import re from typing import List, Tuple def extract_errors(log_file: str) -> List[Tuple[str, str]]: Parses a log file string and extracts error messages with their corresponding timestamps. Args: log_file (str): The log file content as a single string. Returns: List[Tuple[str, str]]: A list of tuples, where each tuple contains a timestamp and an error message. error_pattern = re.compile(r\'(d{4}-d{2}-d{2} d{2}:d{2}:d{2}) ERROR (.*)\') errors = error_pattern.findall(log_file) return errors"},{"question":"Download the \'Heart Disease UCI\' dataset from the UCI Machine Learning Repository. Clean the dataset by handling any missing values appropriately. Split the cleaned data into training and testing sets using an 80:20 ratio. Implement a Logistic Regression classifier to predict the presence of heart disease. Tune the hyperparameters of your Logistic Regression model using Grid Search Cross Validation to find the optimal values for \'C\' (inverse of regularization strength) and \'solver\' (algorithm to use in the optimization problem). Evaluate the performance of the initial and tuned models by calculating their accuracy scores. Generate a Receiver Operating Characteristic (ROC) curve and calculate the Area Under the Curve (AUC) score for each model. Finally, explain the results, highlighting any improvements observed after tuning the model\'s hyperparameters.","solution":"import pandas as pd from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler # Load the data url = \\"https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data\\" columns = [\\"age\\", \\"sex\\", \\"cp\\", \\"trestbps\\", \\"chol\\", \\"fbs\\", \\"restecg\\", \\"thalach\\", \\"exang\\", \\"oldpeak\\", \\"slope\\", \\"ca\\", \\"thal\\", \\"target\\"] df = pd.read_csv(url, names=columns) # Replace missing values indicated by \'?\' with NaN df.replace(\'?\', pd.NA, inplace=True) # Convert to numeric type, forcing errors to NaN df = df.apply(pd.to_numeric, errors=\'coerce\') # Drop rows with missing values df.dropna(inplace=True) # Separate features and target X = df.drop(columns=\'target\') y = df[\'target\'].apply(lambda x: 1 if x > 0 else 0) # Binary classification: 1 presence, 0 absence # Split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Standardize the features scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Initialize the Logistic Regression model initial_model = LogisticRegression(max_iter=1000) # Train the initial model initial_model.fit(X_train, y_train) # Predictions and evaluation of initial model initial_preds = initial_model.predict(X_test) initial_accuracy = accuracy_score(y_test, initial_preds) initial_roc_auc = roc_auc_score(y_test, initial_model.predict_proba(X_test)[:, 1]) # Grid Search for Hyperparameter Tuning param_grid = { \'C\': [0.01, 0.1, 1, 10, 100], \'solver\': [\'liblinear\', \'saga\'] } grid_search = GridSearchCV(LogisticRegression(max_iter=1000), param_grid, cv=5, scoring=\'accuracy\') grid_search.fit(X_train, y_train) # Best model from Grid Search best_model = grid_search.best_estimator_ # Predictions and evaluation of best model best_preds = best_model.predict(X_test) best_accuracy = accuracy_score(y_test, best_preds) best_roc_auc = roc_auc_score(y_test, best_model.predict_proba(X_test)[:, 1]) # ROC Curve for initial model fpr_initial, tpr_initial, _ = roc_curve(y_test, initial_model.predict_proba(X_test)[:, 1]) plt.plot(fpr_initial, tpr_initial, label=f\'Initial Model (AUC = {initial_roc_auc:.2f})\', linestyle=\'--\') # ROC Curve for best model fpr_best, tpr_best, _ = roc_curve(y_test, best_model.predict_proba(X_test)[:, 1]) plt.plot(fpr_best, tpr_best, label=f\'Best Model (AUC = {best_roc_auc:.2f})\') # Plot configuration plt.plot([0, 1], [0, 1], \'k--\') plt.xlim([0, 1]) plt.ylim([0, 1]) plt.xlabel(\'False Positive Rate\') plt.ylabel(\'True Positive Rate\') plt.title(\'ROC Curve\') plt.legend(loc=\'best\') plt.show() def get_results(): return initial_accuracy, best_accuracy, initial_roc_auc, best_roc_auc"},{"question":"Create an efficient and optimized solution to the problem of finding the common elements between two sorted lists. Utilize appropriate data structures and algorithms to decrease the time complexity to O(n). Ensure that the function handles edge cases such as empty lists, lists of different lengths, and non-integer elements. Additionally, validate input to ensure both lists are sorted before processing. Add an additional challenge: Implement a function that merges two sorted lists into a single sorted list without using built-in sorting functions. The function should handle input validation and provide meaningful error messages for invalid inputs. Below is a template for the initial implementation: ```python def find_common_elements(list1, list2): if not list1 or not list2: return [] common_elements = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common_elements.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common_elements def merge_sorted_lists(list1, list2): if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists.\\") if not all(isinstance(x, int) for x in list1 + list2): raise ValueError(\\"All elements in the lists must be integers.\\") i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list ```","solution":"def find_common_elements(list1, list2): if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists.\\") if not all(isinstance(x, int) for x in list1 + list2): raise ValueError(\\"All elements in the lists must be integers.\\") if not all(list1[i] <= list1[i+1] for i in range(len(list1)-1)): raise ValueError(\\"First list is not sorted.\\") if not all(list2[i] <= list2[i+1] for i in range(len(list2)-1)): raise ValueError(\\"Second list is not sorted.\\") if not list1 or not list2: return [] common_elements = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common_elements.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common_elements def merge_sorted_lists(list1, list2): if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both inputs must be lists.\\") if not all(isinstance(x, int) for x in list1 + list2): raise ValueError(\\"All elements in the lists must be integers.\\") i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Design a function that recalibrates a list of integer coordinates. Any coordinate pair where the sum of the absolute values of the x and y coordinates exceeds 50 should be excluded from the final output. Ensure the function maintains the order of valid coordinate pairs. def calibrate_coordinates(coords): Given a list of tuples representing coordinates (x, y), produce a list which excludes any coordinate pair where the sum of the absolute values of x and y exceeds 50. The function should preserve the sequence of the remaining coordinates. e.g: coords = [(30, 20), (40, 30), (-10, -15), (25, 25)], expected result: [(30, 20), (-10, -15), (25, 25)] coords = [(10, 10), (25, 35), (60, 5)], expected result: [(10, 10)] coords = [(-50, 5), (15, -15), (5, 10), (10, 5)], expected result: [(-50, 5), (15, -15), (5, 10), (10, 5)] coords = [(51, 0), (100, 0), (0, 100)], expected result: []","solution":"def calibrate_coordinates(coords): Filter out coordinates where the sum of the absolute values of the x and y coordinates exceeds 50. return [coord for coord in coords if abs(coord[0]) + abs(coord[1]) <= 50]"},{"question":"Write a function that takes a string containing a mix of letters and digits and returns a new string with the letters sorted in ascending order, keeping the digits in their original positions within the string. Function signature: `def rearrange_string(s: str) -> str:` Example: Input: \\"a3c2b1\\" Output: \\"a3b2c1\\" Input: \\"4d2c3b1a\\" Output: \\"4a2b3c1d\\"","solution":"def rearrange_string(s: str) -> str: Returns a new string with the letters sorted in ascending order, keeping the digits in their original positions within the string. letters = sorted([char for char in s if char.isalpha()]) result = [] letter_index = 0 for char in s: if char.isalpha(): result.append(letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result)"},{"question":"Design a function that accepts a list of strings and returns the string that appears the most frequently. If there is a tie, return the string that comes first alphabetically. Use the following list as an example: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"apple\\", \\"cherry\\", \\"banana\\", \\"banana\\"].","solution":"from collections import Counter def most_frequent_string(strings): Returns the string that appears most frequently in the list of strings. If there is a tie, returns the string that comes first alphabetically. if not strings: return None count = Counter(strings) max_count = max(count.values()) most_frequent = [string for string, freq in count.items() if freq == max_count] return min(most_frequent)"},{"question":"Create a Python function that returns the first non-repeating character in a given string. If all characters repeat or the string is empty, the function should return None. Optimize the function for efficiency in terms of both time and space complexity. Provide both the function definition and an example usage.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the given string. If all characters repeat or the string is empty, returns None. from collections import Counter # Count the frequency of each character char_count = Counter(s) # Iterate through the string and find the first character with count 1 for char in s: if char_count[char] == 1: return char # If no non-repeating character found, return None return None # Example usage example_string = \\"swiss\\" print(first_non_repeating_char(example_string)) # Output: \'w\'"},{"question":"Write a function that takes a string containing a mathematical expression in postfix notation (Reverse Polish Notation) and evaluates its result. The function should support the four basic arithmetic operations: addition, subtraction, multiplication, and division. You can assume the input string is always a valid postfix expression consisting of integers and the operators `+`, `-`, `*`, and `/`. The division should be an integer division that truncates towards zero. For example: ``` evaluate_postfix(\\"3 4 + 2 * 7 /\\") --> 2 evaluate_postfix(\\"5 1 2 + 4 * + 3 -\\") --> 14 evaluate_postfix(\\"2 3 1 * + 9 -\\") --> -4 ```","solution":"def evaluate_postfix(expression): Evaluates a postfix (Reverse Polish Notation) expression. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Integer division truncating towards zero else: stack.append(int(token)) return stack[0]"},{"question":"Create a Python function that merges two sorted linked lists into one sorted linked list. Assume the linked lists are implemented using the following Node class: ```python class Node: def __init__(self, value=0, next=None): self.value = value self.next = next ``` Write a function `merge_sorted_linked_lists(l1, l2)` that takes two linked lists and returns a new linked list that combines the elements of both input lists in sorted order. Example: ```python # Linked list 1: 1 -> 3 -> 5 # Linked list 2: 2 -> 4 -> 6 l1 = Node(1, Node(3, Node(5))) l2 = Node(2, Node(4, Node(6))) merged_list = merge_sorted_linked_lists(l1, l2) # Output linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 ```","solution":"class Node: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_sorted_linked_lists(l1, l2): dummy = Node() current = dummy while l1 and l2: if l1.value < l2.value: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 elif l2: current.next = l2 return dummy.next # Utility function to convert linked list to list (for easier testing) def linked_list_to_list(node): result = [] while node: result.append(node.value) node = node.next return result"},{"question":"You are working for a company that needs to manage traffic at an intersection of two roads, where each road allows only one-way traffic in opposite directions. To control the traffic flow, you must ensure that there is no deadlock or collisions due to vehicles from both directions entering the intersection simultaneously. You are provided with two types of vehicles, `northbound_vehicle` and `southbound_vehicle`, arriving at the intersection. Each vehicle will call `enterIntersection` when it reaches the intersection and `exitIntersection` once it leaves the intersection. You must write a synchronization code that ensures vehicles from both directions can pass through the intersection without causing a traffic jam and that vehicles from one direction give way if the intersection is already occupied by a vehicle from the opposite direction. To elaborate: If a northbound vehicle reaches the intersection when a southbound vehicle is already in the intersection, it must wait until the intersection is free. If a southbound vehicle reaches the intersection when a northbound vehicle is already in the intersection, it must wait until the intersection is free. Vehicles must pass through the intersection in the order they arrive, without skipping or cutting in front of other vehicles. Your task is to write synchronization code for the northbound and southbound vehicles that enforces these constraints. For instance: Example 1: Input: &#34;NS&#34; Output: &#34;NS&#34; or &#34;SN&#34; Explanation: Either northbound vehicle goes first or the southbound vehicle goes first. Example 2: Input: &#34;NNSS&#34; Output: &#34;NNS&#34; or &#34;SNN&#34; Explanation: Vehicles must respect order and not cause deadlocks. Valid sequences like &#34;NNSNN&#34; or &#34;NNSSNN&#34; are acceptable as long as the intersection ensures no collision or deadlock. Constraints: The total length of the input string will be 2n, where 1 ≤ n ≤ 20. The total number of `N` and `S` will be equal in the input string. Each vehicle must enter and exit the intersection correctly ensuring no deadlocks.","solution":"from threading import Lock, Condition class TrafficIntersection: def __init__(self): self.intersection_busy = False self.intersection_lock = Lock() self.intersection_condition = Condition(self.intersection_lock) def enterIntersection(self, direction): with self.intersection_lock: while self.intersection_busy: self.intersection_condition.wait() self.intersection_busy = True def exitIntersection(self): with self.intersection_lock: self.intersection_busy = False self.intersection_condition.notify() def northbound_vehicle(intersection): intersection.enterIntersection(\'N\') print(\'N entered the intersection\') intersection.exitIntersection() print(\'N exited the intersection\') def southbound_vehicle(intersection): intersection.enterIntersection(\'S\') print(\'S entered the intersection\') intersection.exitIntersection() print(\'S exited the intersection\')"},{"question":"Write a function to rotate a given matrix 90 degrees clockwise. The function should take a 2D list (matrix) as its input and output the rotated matrix. Assume the input matrix is square (i.e., the number of rows is equal to the number of columns). If the input matrix is empty, return an empty list. Example: Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]","solution":"def rotate_matrix_90_degrees(matrix): Rotates the input square matrix 90 degrees clockwise. if not matrix: return [] n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Create a command-line application that accepts a list of file paths as input and returns the total number of lines across all the files. If a file path is invalid or the file cannot be read, the application should gracefully handle this scenario by logging an appropriate error message and continuing with the remaining files. Additionally, the application should provide an option to exclude blank lines from the count. Ensure your solution includes robust error handling and input validation.","solution":"import os import logging logging.basicConfig(level=logging.ERROR) def count_lines_in_file(file_path, exclude_blank_lines): Counts the number of lines in a given file. Parameters: file_path (str): The path to the file. exclude_blank_lines (bool): Whether to exclude blank lines from the count. Returns: int: The number of lines in the file, or 0 if the file cannot be read. try: with open(file_path, \'r\') as file: lines = file.readlines() if exclude_blank_lines: lines = [line for line in lines if line.strip()] return len(lines) except Exception as e: logging.error(f\\"Error reading file {file_path}: {e}\\") return 0 def total_lines(file_paths, exclude_blank_lines=False): Counts the total number of lines across multiple files. Parameters: file_paths (list): A list of file paths. exclude_blank_lines (bool): Whether to exclude blank lines from the count. Returns: int: The total number of lines across all files. total = 0 for file_path in file_paths: total += count_lines_in_file(file_path, exclude_blank_lines) return total"},{"question":"Write a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. You should not use any built-in reverse or string manipulation functions. Your solution should include a custom function to handle alphanumeric checks. Additionally, provide an incorrect code example to examine the understanding of the candidate. Given code: def is_palindrome(s: str) -> bool: Return True if the given string is a valid palindrome, ignoring non-alphanumeric characters and case insensitivity. >>> is_palindrome(\\"A man, a plan, a canal: Panama\\") True >>> is_palindrome(\\"race a car\\") False def is_alphanumeric(c): return (ord(\'A\') <= ord(c) <= ord(\'Z\') or ord(\'a\') <= ord(c) <= ord(\'z\') or ord(\'0\') <= ord(c) <= ord(\'9\')) filtered_chars = [c.lower() for c in s if is_alphanumeric(c)] length = len(filtered_chars) for i in range(length // 2): if filtered_chars[i] != filtered_chars[length - 1 - i]: return False return True Erroneous code example: def is_palindrome(s: str) -> bool: filtered_string = \'\'.join(c.lower() for c in s if c.isalnum()) return filtered_string == filtered_string[::-1] # Violates the rule of not using built-in reverse string functions","solution":"def is_palindrome(s: str) -> bool: Return True if the given string is a valid palindrome, considering only alphanumeric characters and ignoring case. :param s: Input string to check :return: True if the string is a palindrome, False otherwise Examples: >>> is_palindrome(\\"A man, a plan, a canal: Panama\\") True >>> is_palindrome(\\"race a car\\") False def is_alphanumeric(c): return (ord(\'A\') <= ord(c) <= ord(\'Z\') or ord(\'a\') <= ord(c) <= ord(\'z\') or ord(\'0\') <= ord(c) <= ord(\'9\')) filtered_chars = [c.lower() for c in s if is_alphanumeric(c)] length = len(filtered_chars) for i in range(length // 2): if filtered_chars[i] != filtered_chars[length - 1 - i]: return False return True # Erroneous code example: def is_palindrome_incorrect(s: str) -> bool: filtered_string = \'\'.join(c.lower() for c in s if c.isalnum()) return filtered_string == filtered_string[::-1] # Violates the rule of not using built-in reverse string functions"},{"question":"Write a function `common_elements` that takes two lists of integers as input and returns a sorted list of integers that are present in both lists, without duplicates. Your function should have a time complexity better than O(n^2), where `n` is the length of the longer list. Example: ```python def common_elements(list1, list2): # Your code here # Example usage: list1 = [4, 5, 9, 11, 13, 17, 21] list2 = [5, 7, 9, 13, 17, 23, 29] print(common_elements(list1, list2)) # Output: [5, 9, 13, 17] ``` Note: - You may assume that the input lists do not contain any duplicates. - The returned list should be in ascending order.","solution":"def common_elements(list1, list2): Returns a sorted list of integers that are present in both input lists, without duplicates. set1 = set(list1) set2 = set(list2) common_set = set1.intersection(set2) return sorted(list(common_set))"},{"question":"Create a function that takes in a list of numbers and sorts it using the Merge Sort algorithm. Additionally, augment the function to count the number of inversions in the list. An inversion is defined as a pair of indices (i, j) such that i < j and list[i] > list[j]. Implement error handling for invalid inputs such as non-numeric elements or a non-list input. For example: - Input: [2, 4, 1, 3, 5] - Output (sorted list): [1, 2, 3, 4, 5] - Output (number of inversions): 3","solution":"def merge_sort_and_count(arr): def merge_and_count(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count if not isinstance(arr, list): raise TypeError(\\"Input must be a list\\") if not all(isinstance(x, (int, float)) for x in arr): raise ValueError(\\"All elements in the list must be numbers\\") temp_arr = [0]*len(arr) inv_count = merge_sort(arr, temp_arr, 0, len(arr)-1) return arr, inv_count"},{"question":"Write a Python function that takes a list of words and returns a dictionary where the keys are the lengths of the words and the values are lists of words that correspond to each length. Ensure that the function handles words with identical lengths accurately. Example: ```python words_list = [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"pear\\", \\"blueberry\\", \\"strawberry\\", \\"plum\\"] output = {5: [\\"apple\\"], 6: [\\"banana\\"], 4: [\\"kiwi\\", \\"pear\\", \\"plum\\"], 9: [\\"blueberry\\"], 10: [\\"strawberry\\"]} ```","solution":"def group_words_by_length(words_list): Groups words by their lengths. Args: words_list (list): List of words. Returns: dict: Dictionary where keys are word lengths and values are lists of words of that length. result = {} for word in words_list: length = len(word) if length not in result: result[length] = [] result[length].append(word) return result"},{"question":"Design a function that takes an array of integers and an integer \'x\' as inputs, and returns an array containing only the integers from the input array that are less than \'x\'. The returned array should maintain the order of the original array. lst = [10, 25, 17, 3, 8, 30, 2, 15] x = 20","solution":"def filter_less_than(arr, x): Returns an array containing only the integers from the input array that are less than \'x\'. Parameters: - arr: List of integers - x: Integer threshold Returns: - List of integers from the input array that are less than \'x\' return [num for num in arr if num < x]"},{"question":"# Context You are a software engineer assigned to develop a web-based task management system for a small team. Your goal is to ensure the platform is efficient, scalable, and user-friendly. Feature Expectations # Key Functionalities 1. Task Creation and Assignment 2. Task Status Tracking 3. User Authentication and Roles (Admin, Member) 4. Notification System 5. Basic Analytics Dashboard # Frontend and Backend Requirements - Frontend: Responsive design, intuitive interface. - Backend: Robust API, secure, scalable database. Data Models # Task ``` { \\"id\\": Integer, \\"title\\": String, \\"description\\": String, \\"status\\": Enum(\\"Pending\\", \\"In Progress\\", \\"Completed\\"), \\"assigned_to\\": Integer, # User ID \\"created_at\\": Timestamp, \\"updated_at\\": Timestamp } ``` # User ``` { \\"id\\": Integer, \\"name\\": String, \\"email\\": String, \\"password_hash\\": String, \\"role\\": Enum(\\"Admin\\", \\"Member\\") } ``` Example Display with Task Distribution Chart ```mermaid pie title Task Distribution by Status \\"Pending\\": 30 \\"In Progress\\": 45 \\"Completed\\": 25 ``` Format Example --- Original Requirements The client needs a system to effectively manage and track tasks within a team. The system should allow task creation, assignment, status updates, and provide role-based access. Product Goals ```python [ \\"Enable efficient task tracking\\", \\"Provide role-based access and security\\", \\"Deliver insights through basic analytics\\", ] ``` User Stories ```python [ \\"As an admin, I want to create and assign tasks, so that the team knows what to work on.\\", \\"As a user, I want to view my assigned tasks, so that I can manage my workload.\\", \\"As an admin, I want to track task progress, so that I can report on project status.\\", \\"As a user, I want to update task statuses, so that my team knows what I am working on.\\", \\"As an admin, I want to view analytics, so that I can make data-driven decisions.\\", ] ``` Competitive Analysis ```python [ \\"Trello: Offers board and card based task management with collaboration features.\\", \\"Asana: Provides workflow and project tracking capabilities with various view options.\\", \\"Jira: Powerful issue and project tracking specifically tailored for software development.\\", \\"ClickUp: Comprehensive task and project management with customization and integrations.\\", \\"Monday.com: Visual and easy-to-use project management system suitable for various industries.\\", \\"Basecamp: Simple, effective project management and collaboration tool.\\", \\"Notion: All-in-one workspace for notes, tasks, databases, and collaboration.\\", ] ``` Competitive Quadrant Chart ```mermaid quadrantChart title Task Management Systems Comparison x-axis Low Productivity --> High Productivity y-axis Low Usability --> High Usability quadrant-1 Top Choices quadrant-2 High Potential quadrant-3 Needs Improvement quadrant-4 Highly Usable, Low Efficiency \\"Trello\\": [0.7, 0.8] \\"Asana\\": [0.8, 0.9] \\"Jira\\": [0.9, 0.7] \\"ClickUp\\": [0.6, 0.8] \\"Monday.com\\": [0.8, 0.6] \\"Basecamp\\": [0.5, 0.7] \\"Notion\\": [0.9, 0.8] \\"Our Task Manager\\": [0.65, 0.75] ``` Requirement Analysis The system must function as a task management tool with essential task operations, user roles, notification system, and basic analytics. Ensure scalability and responsive design. Requirement Pool ```python [ (\\"Implement user authentication and role management\\", \\"P0\\"), (\\"Develop task CRUD operations\\", \\"P0\\"), (\\"Create notification system for task updates\\", \\"P1\\"), (\\"Build a basic analytics dashboard\\", \\"P2\\"), (\\"Ensure responsive and intuitive frontend design\\", \\"P1\\"), ] ``` UI Design draft The main dashboard should have a sidebar for navigation (Dashboard, Tasks, Analytics), a main panel for content display (task lists with statuses and filtering options), and a top bar for quick access to notifications and user profile settings. The design should be clean and modern, using a color scheme that is visually appealing with good contrast for usability. Anything UNCLEAR The exact scope of the analytics dashboard is not clearly defined. Further clarification is needed on the specific metrics and reports required.","solution":"class User: def __init__(self, id, name, email, password_hash, role): self.id = id self.name = name self.email = email self.password_hash = password_hash self.role = role class Task: def __init__(self, id, title, description, status, assigned_to, created_at, updated_at): self.id = id self.title = title self.description = description self.status = status self.assigned_to = assigned_to self.created_at = created_at self.updated_at = updated_at # Example functions to operate on the Task and User data models def create_task(tasks, id, title, description, status, assigned_to, created_at, updated_at): new_task = Task(id, title, description, status, assigned_to, created_at, updated_at) tasks.append(new_task) return new_task def update_task_status(task, new_status): task.status = new_status return task def assign_task(task, user_id): task.assigned_to = user_id return task def add_user(users, id, name, email, password_hash, role): new_user = User(id, name, email, password_hash, role) users.append(new_user) return new_user"},{"question":"Design a function that computes the next lexicographical permutation of a specified list of integers. If the given list is the highest possible permutation, the function should rearrange the list to its lowest permutation. For example, given the list `[1, 2, 3]`, the next permutation would be `[1, 3, 2]`, and given `[3, 2, 1]`, the output should be `[1, 2, 3]`.","solution":"def next_permutation(nums): Rearranges the list of integers into the next lexicographical permutation. If the given list is the highest possible permutation, rearrange to the lowest permutation. # Find the longest non-increasing suffix and identify the pivot i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i >= 0: j = len(nums) - 1 while nums[j] <= nums[i]: j -= 1 nums[i], nums[j] = nums[j], nums[i] # Reverse the suffix to get the next permutation nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"Your task is to write a Python function `compress_string` that takes a string as input and returns a new string where each group of consecutive identical characters is replaced by that character followed by the number of times it appears consecutively. If the compressed string is not shorter than the original one, the function should return the original string. # Function Signature ```python def compress_string(input_string: str) -> str: pass ``` # Input - `input_string` (string): The input string consisting of only lowercase alphabetic characters (1 <= length(input_string) <= 10^4). # Output - (string): The compressed version of the input string or the original string if compression does not reduce the string length. # Example ```python compress_string(\\"aaabbccc\\") -> \\"a3b2c3\\" compress_string(\\"abcdef\\") -> \\"abcdef\\" compress_string(\\"aabcccccaaa\\") -> \\"a2b1c5a3\\" compress_string(\\"a\\") -> \\"a\\" compress_string(\\"bb\\") -> \\"bb\\" ```","solution":"def compress_string(input_string: str) -> str: Compresses the input string by replacing groups of consecutive identical characters with that character followed by the number of times it appears consecutively. Returns the original string if the compressed version is not shorter. if not input_string: return input_string compressed = [] count = 1 previous_char = input_string[0] for i in range(1, len(input_string)): if input_string[i] == previous_char: count += 1 else: compressed.append(previous_char + str(count)) previous_char = input_string[i] count = 1 compressed.append(previous_char + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(input_string) else input_string"},{"question":"Create a function that finds and returns the longest contiguous subarray within a given array where all the elements are strictly increasing. If there are multiple such subarrays with the same maximum length, return the first one encountered. For example: inputArray = [1, 3, 5, 4, 7, 8, 2, 3, 4, 5, 6, 1] Output: [2, 3, 4, 5, 6]","solution":"def longest_increasing_subarray(inputArray): Finds the longest contiguous subarray within the given array where all the elements are strictly increasing. If there are multiple such subarrays with the same maximum length, returns the first one encountered. if not inputArray: return [] max_len = 1 current_len = 1 max_start = 0 current_start = 0 for i in range(1, len(inputArray)): if inputArray[i] > inputArray[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len max_start = current_start current_start = i current_len = 1 if current_len > max_len: max_len = current_len max_start = current_start return inputArray[max_start:max_start + max_len]"},{"question":"Given a list of integers, write a function that finds and returns the length of the longest contiguous subarray such that all elements in the subarray are in non-decreasing order. Additionally, the array may contain duplicates, and the subarray should not include repeated elements. For example: - For the input `[1, 3, 5, 4, 2, 3, 4, 5]`, the longest contiguous subarray in non-decreasing order without repeated elements is `[2, 3, 4, 5]`, and its length is 4. - For the input `[10, 12, 14, 12, 11, 10]`, the longest contiguous subarray in non-decreasing order without repeated elements is `[10, 12, 14]`, and its length is 3. Your solution should emphasize efficiency and handle edge cases, such as an array with all equal elements or an array with a single element. Ensure your approach does not use any external libraries or built-in functions for handling order checking directly.","solution":"def longest_non_decreasing_subarray_length(arr): Finds the length of the longest contiguous subarray with non-decreasing order and no repeated elements. n = len(arr) if n == 0: return 0 max_len = 1 current_len = 1 seen = set([arr[0]]) for i in range(1, n): if arr[i] > arr[i - 1] and arr[i] not in seen: current_len += 1 seen.add(arr[i]) else: seen = set([arr[i]]) current_len = 1 max_len = max(max_len, current_len) return max_len"},{"question":"Implement a function that takes a string as input and returns a dictionary with the following details: 1. The original string in all uppercase letters. 2. The original string in all lowercase letters. 3. The length of the original string. 4. The count of each vowel (a, e, i, o, u) in the original string. Example Input: input_str = \\"Hello World\\" Example Output: { \\"uppercase\\": \\"HELLO WORLD\\", \\"lowercase\\": \\"hello world\\", \\"length\\": 11, \\"vowel_count\\": {\\"a\\": 0, \\"e\\": 1, \\"i\\": 0, \\"o\\": 2, \\"u\\": 0} }","solution":"def string_analysis(input_str): Analyzes the input string and returns a dictionary with various details: 1. The original string in all uppercase letters. 2. The original string in all lowercase letters. 3. The length of the original string. 4. The count of each vowel (a, e, i, o, u) in the original string. Parameters: input_str (str): The input string to analyze. Returns: dict: A dictionary with the analysis details. vowels = \'aeiou\' vowel_count = {vowel: input_str.lower().count(vowel) for vowel in vowels} return { \\"uppercase\\": input_str.upper(), \\"lowercase\\": input_str.lower(), \\"length\\": len(input_str), \\"vowel_count\\": vowel_count }"},{"question":"Design and implement a function that takes a string containing a mathematical expression and evaluates it. The expression will only contain non-negative integers, the four basic arithmetic operators (+, -, *, /), and parentheses for altering the order of operations. Your function should handle operator precedence and parentheses correctly. Also, ensure your solution has a time complexity of O(N), where N is the length of the string. Example: ``` Input: \\"3 + (2 * 2)\\" Output: 7 Input: \\" 3/2 \\" Output: 1 Input: \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing non-negative integers, +, -, *, / operators, and parentheses. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return int(a / b) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_ops(values, ops): right = values.pop() left = values.pop() op = ops.pop() values.append(operate(left, right, op)) values, ops = [], [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(\'(\') elif expression[i] == \')\': while ops and ops[-1] != \'(\': apply_ops(values, ops) ops.pop() elif expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(num) i -= 1 else: while (ops and precedence(ops[-1]) >= precedence(expression[i])): apply_ops(values, ops) ops.append(expression[i]) i += 1 while ops: apply_ops(values, ops) return values[0]"},{"question":"Develop a function that receives two strings as its inputs and determines if one string is an anagram of the other. Ensure that your function considers edge cases such as different lengths and varying character frequencies, and provide an efficient solution suitable for large inputs.","solution":"def are_anagrams(str1, str2): Determine if two strings are anagrams of each other. Args: str1 (str): First input string. str2 (str): Second input string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Early exit if lengths are different if len(str1) != len(str2): return False # Count characters in both strings from collections import Counter return Counter(str1) == Counter(str2)"},{"question":"Given a list of tuples representing (student_name, subject, score), write a function that takes this list and a student\'s name as input, and returns the average score for that student across all subjects. For example, given the list: ``` grades = [ (\\"Alice\\", \\"Math\\", 90), (\\"Alice\\", \\"Science\\", 85), (\\"Bob\\", \\"Math\\", 75), (\\"Bob\\", \\"Science\\", 80) ] ``` and the student\'s name \\"Alice\\", the function should return 87.5, since the average of her scores is (90 + 85) / 2. You should handle the case where the name does not exist in the list by returning `None`. Function signature: ```python def calculate_average_score(grades: List[Tuple[str, str, int]], student_name: str) -> Optional[float]: pass ```","solution":"from typing import List, Tuple, Optional def calculate_average_score(grades: List[Tuple[str, str, int]], student_name: str) -> Optional[float]: Calculate the average score for the given student from the provided list of grades. :param grades: List of tuples with (student_name, subject, score) :param student_name: The name of the student for whom the average score is to be calculated :return: The average score of the student or None if the student is not in the list total_score = 0 count = 0 for name, subject, score in grades: if name == student_name: total_score += score count += 1 if count == 0: return None return total_score / count"},{"question":"Given a list of dictionaries containing employees and their respective attributes, calculate the average salary of employees who meet the following criteria: 1. The employee\'s age should be greater than 25. 2. The employee should have more than 2 years of experience. 3. The employee’s job title should be either \\"Manager\\" or \\"Developer\\". Each dictionary in the list contains the following keys: `name`, `age`, `experience`, `job_title`, and `salary`. Write a function `average_salary(employees)` that takes in the list of dictionaries and returns the average salary of the employees who meet the above criteria. If no employees meet the criteria, return 0. Example: ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"experience\\": 5, \\"job_title\\": \\"Manager\\", \\"salary\\": 80000}, {\\"name\\": \\"Bob\\", \\"age\\": 23, \\"experience\\": 2, \\"job_title\\": \\"Developer\\", \\"salary\\": 60000}, {\\"name\\": \\"Charlie\\", \\"age\\": 26, \\"experience\\": 3, \\"job_title\\": \\"Tester\\", \\"salary\\": 50000}, {\\"name\\": \\"David\\", \\"age\\": 28, \\"experience\\": 4, \\"job_title\\": \\"Developer\\", \\"salary\\": 70000}, ] print(average_salary(employees)) # Output: 75000 ``` Explanation: - Alice and David meet the criteria. - The average salary of Alice (80000) and David (70000) is 75000.","solution":"def average_salary(employees): Calculate the average salary of employees who meet the criteria: - age greater than 25 - more than 2 years of experience - job title is either \'Manager\' or \'Developer\' eligible_employees = [ emp[\'salary\'] for emp in employees if emp[\'age\'] > 25 and emp[\'experience\'] > 2 and emp[\'job_title\'] in [\'Manager\', \'Developer\'] ] if not eligible_employees: return 0 return sum(eligible_employees) / len(eligible_employees)"},{"question":"Create a Python function that evaluates a simple arithmetic expression given as a string and returns the result. The arithmetic expression may contain integers, the operators `+`, `-`, `*`, `/` (representing addition, subtraction, multiplication, division, respectively), and parentheses `()`. The expression will not contain any variables and will be well-formed. Ensure that your solution handles operator precedence and parentheses correctly. Example: Input: `\\"(2+3)*(5-2)/3\\"` Output: `5.0` Input: `\\"10 + 2 * 6\\"` Output: `22` Note: - Division `/` should result in a floating-point number. - You should not use the `eval` function or any other function that can directly evaluate expressions in Python.","solution":"def evaluate_expression(expression): Evaluates a simple arithmetic expression and returns the result. The expression is a string that may contain integers, the operators +, -, *, /, and parentheses (). def parse_expression(expression): tokens = [] num = \'\' for char in expression: if char.isdigit() or char == \'.\': num += char else: if num: tokens.append(float(num)) num = \'\' if char in \'+-*/()\': tokens.append(char) if num: tokens.append(float(num)) return tokens def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) def precedence(operator): if operator in \'+-\': return 1 if operator in \'*/\': return 2 return 0 tokens = parse_expression(expression) values = [] operators = [] for token in tokens: if isinstance(token, float): values.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # Remove \'(\' else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"Write a function called `has_substring_reversed_order` that checks if any substring of a given length exists in both the original string and its reverse in exact reversed order. Here is how the function should behave: # Function Signature ```python def has_substring_reversed_order(s, length): pass ``` # Input - `s` (a string, 1 ≤ len(s) ≤ 1000): The input string you need to check for the presence of a reversed substring. - `length` (an integer, 1 ≤ length ≤ len(s)): The length of the substring to be checked. # Output - `True` if there exists a substring of the specified length in `s` that also exists as a substring in the reversed string, in the exact reversed order. - `False` otherwise. # Example ```python has_substring_reversed_order(\\"abcde\\", 2) => False has_substring_reversed_order(\\"abcdcba\\", 3) => True has_substring_reversed_order(\\"abcdefedcba\\", 5) => True ``` # Explanation In the first example, when you reverse the substrings of length 2, no such reversed substring appears in the original reversed string. In the second example, the substring \\"dcb\\" in the original string \\"abcdcba\\" can appear in its reverse \\"abcdcba\\" as \\"bcd\\". In the third example, the substring \\"defed\\" in \\"abcdefedcba\\" can appear in its reverse \\"abcdefedcba\\" as \\"defed\\". # Constraints The function should effectively handle the edge cases such as: - Smallest input sizes. - Inputs where the substring length is equal to the length of the string. - Strings containing diverse characters and patterns.","solution":"def has_substring_reversed_order(s, length): Checks if any substring of a given length exists in both the original string and its reverse in the exact reversed order. Args: s: a string, 1 ≤ len(s) ≤ 1000 length: an integer, 1 ≤ length ≤ len(s) Returns: True if such a substring exists, False otherwise n = len(s) reversed_s = s[::-1] for i in range(n - length + 1): substring = s[i:i + length] reversed_substring = substring[::-1] if reversed_substring in s: return True return False"},{"question":"A company needs a software function that can analyze a list of employee records and provide detailed department statistics. Each employee record is a dictionary containing `name`, `age`, `department`, and `salary`. The function should return a dictionary with departments as keys. For each department, the dictionary should include the average age, the total salary, and the list of employees with above-average salaries for that department. If there are no employees in a department, it should return `None` for the average age, total salary as 0, and an empty list for the employees. def analyze_employee_records(employee_records: List[Dict[str, Union[str, int]]]): Analyzes a list of employee records to provide department statistics. Parameters: - employee_records: List[Dict[str, Union[str, int]]] : A list of dictionaries containing employee details. Returns: - A dictionary with departments as keys, and for each department: - The average age of employees (or None if no employees) - The total salary of all employees - A list of names of employees with above-average salaries in that department Example: employee_records = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"department\\": \\"Engineering\\", \\"salary\\": 1000}, {\\"name\\": \\"Bob\\", \\"age\\": 40, \\"department\\": \\"Engineering\\", \\"salary\\": 1500}, {\\"name\\": \\"Charlie\\", \\"age\\": 28, \\"department\\": \\"HR\\", \\"salary\\": 1200}, {\\"name\\": \\"David\\", \\"age\\": 35, \\"department\\": \\"HR\\", \\"salary\\": 1100}, {\\"name\\": \\"Eve\\", \\"age\\": 29, \\"department\\": \\"Engineering\\", \\"salary\\": 1300} ] Expected Output: { \\"Engineering\\": { \\"average_age\\": 33, \\"total_salary\\": 3800, \\"above_average_salary_employees\\": [\\"Bob\\", \\"Eve\\"] }, \\"HR\\": { \\"average_age\\": 31.5, \\"total_salary\\": 2300, \\"above_average_salary_employees\\": [\\"Charlie\\"] } }","solution":"from typing import List, Dict, Union def analyze_employee_records(employee_records: List[Dict[str, Union[str, int]]]): Analyzes a list of employee records to provide department statistics. Parameters: - employee_records: List[Dict[str, Union[str, int]]] : A list of dictionaries containing employee details. Returns: - A dictionary with departments as keys, and for each department: - The average age of employees (or None if no employees) - The total salary of all employees - A list of names of employees with above-average salaries in that department department_stats = {} department_employees = {} for record in employee_records: department = record[\'department\'] if department not in department_employees: department_employees[department] = [] department_employees[department].append(record) for department, employees in department_employees.items(): total_age = sum(employee[\'age\'] for employee in employees) total_salary = sum(employee[\'salary\'] for employee in employees) average_age = total_age / len(employees) if employees else None average_salary = total_salary / len(employees) if employees else 0 above_average_salary_employees = [ employee[\'name\'] for employee in employees if employee[\'salary\'] > average_salary ] department_stats[department] = { \\"average_age\\": average_age if employees else None, \\"total_salary\\": total_salary, \\"above_average_salary_employees\\": above_average_salary_employees } return department_stats"},{"question":"Write a function in Python that accepts a string of words separated by spaces and returns a dictionary where each key is a unique word and the corresponding value is the length of that word. The dictionary should be sorted by the word lengths in ascending order. If multiple words have the same length, they should appear in the order they first occur in the input string.","solution":"def word_lengths(s): Returns a dictionary where each key is a unique word from the input string `s` and the corresponding value is the length of that word, sorted by word lengths in ascending order. words = s.split() # Split the input string into words word_dict = {word: len(word) for word in words} # Create a dictionary with word lengths # Sort the dictionary by the word length in ascending order sorted_word_dict = dict(sorted(word_dict.items(), key=lambda item: item[1])) return sorted_word_dict"},{"question":"Devise an optimized function to identify the longest substring within a given string that consists of non-repeating characters. The function should handle both uppercase and lowercase characters as distinct entities. Ensure your solution does not employ Python\'s built-in string manipulation functions, and efficiently processes strings of varying lengths and character sets. def longest_unique_substring(s: str) -> str: Return the longest substring without repeated characters from the given string, treating uppercase and lowercase as distinct, without using inherent Python string functions. >>> longest_unique_substring(\\"abcabcbb\\") \'abc\' >>> longest_unique_substring(\\"bbbbb\\") \'b\' >>> longest_unique_substring(\\"pwwkew\\") \'wke\' >>> longest_unique_substring(\\"dvdf\\") \'vdf\' >>> longest_unique_substring(\\"AaBbCc\\") \'AaBbCc\'","solution":"def longest_unique_substring(s: str) -> str: Returns the longest substring without repeated characters from the given string, treating uppercase and lowercase as distinct, without using inherent Python string functions. n = len(s) if n == 0: return \\"\\" char_index = {} longest_substr = \\"\\" start = 0 for i in range(n): if s[i] in char_index and char_index[s[i]] >= start: start = char_index[s[i]] + 1 char_index[s[i]] = i if len(longest_substr) < i - start + 1: longest_substr = s[start:i+1] return longest_substr"},{"question":"Create a function that receives a list of integers and returns a new list containing only the peak elements. A peak element is an element that is greater than its both neighbors. For the elements at the boundaries of the list, only one neighbor should be considered. Ensure your function handles edge cases such as an empty list or a list with a single element. Include error handling for inputs that are not a list of integers. Sample list lst = [10, 13, 5, 8, 7, 10, 6, 15, 20]","solution":"def find_peak_elements(lst): Returns a list of peak elements from the input list. A peak element is an element that is greater than its neighbors. For boundary elements, only one neighbor is considered. if not isinstance(lst, list): raise TypeError(\\"Input must be a list.\\") if not all(isinstance(x, int) for x in lst): raise ValueError(\\"All elements in the list must be integers.\\") if len(lst) == 0: return [] if len(lst) == 1: return [lst[0]] peak_elements = [] if len(lst) > 1 and lst[0] > lst[1]: peak_elements.append(lst[0]) for i in range(1, len(lst)-1): if lst[i] > lst[i-1] and lst[i] > lst[i+1]: peak_elements.append(lst[i]) if len(lst) > 1 and lst[-1] > lst[-2]: peak_elements.append(lst[-1]) return peak_elements"},{"question":"Reorganize a given list of integers such that all prime numbers appear first in ascending order, followed by non-prime numbers in descending order without disturbing their relative order from the original list. Return the reorganized list. numbers = [11, 17, 8, 4, 7, 2, 15, 22]","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def reorganize_list(numbers): Reorganizes the list of integers such that all prime numbers appear first in ascending order, followed by non-prime numbers in descending order without disturbing their relative order from the original list. primes = [x for x in numbers if is_prime(x)] non_primes = [x for x in numbers if not is_prime(x)] primes.sort() non_primes.sort(reverse=True) return primes + non_primes"},{"question":"Given a string consisting of only lowercase alphabets, write a function that returns the longest substring without repeating characters. If there are multiple such substrings with the same maximum length, return the one that appears first. Ensure your solution is efficient and can handle large strings within a reasonable time frame.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. If there are multiple such substrings with the same maximum length, returns the one that appears first. if not s: return \\"\\" start, max_len, max_start = 0, 0, 0 char_index_map = {} for end, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = end if end - start + 1 > max_len: max_len = end - start + 1 max_start = start return s[max_start:max_start + max_len]"},{"question":"Design a Python function that accepts an integer list as input and returns a string denoting whether the list is strictly increasing, strictly decreasing, or neither. The function must analyze the order of the elements and produce one of three output strings: \\"Increasing\\", \\"Decreasing\\", or \\"Neither\\".","solution":"def analyze_list_order(lst): Analyzes the order of elements in a list. Returns \\"Increasing\\", \\"Decreasing\\", or \\"Neither\\". if all(lst[i] < lst[i + 1] for i in range(len(lst) - 1)): return \\"Increasing\\" elif all(lst[i] > lst[i + 1] for i in range(len(lst) - 1)): return \\"Decreasing\\" else: return \\"Neither\\""},{"question":"Create a function that simulates a simple queue with the following operations: enqueue, dequeue, and peek. The queue should be implemented using two stacks to manage the operations. Each operation should perform in O(1) average time complexity. Additionally, create another function that checks if the queue is empty and returns a boolean value. Demonstrate your queue implementation with a series of enqueue and dequeue operations, and display the state of the queue after each operation.","solution":"class QueueUsingTwoStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, item): self.stack1.append(item) def dequeue(self): if not self.stack2: # If stack2 is empty, transfer all items from stack1 while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2.pop() # \\"Dequeue\\" by popping from stack2 raise IndexError(\\"Dequeue from empty queue\\") def peek(self): if not self.stack2: # If stack2 is empty, transfer all items from stack1 while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2[-1] # Peek the top of stack2 raise IndexError(\\"Peek from empty queue\\") def is_empty(self): return not self.stack1 and not self.stack2 # Demonstration queue = QueueUsingTwoStacks() queue.enqueue(1) print(\\"State after enqueue 1:\\", queue.stack1, queue.stack2) queue.enqueue(2) print(\\"State after enqueue 2:\\", queue.stack1, queue.stack2) dequeue_val = queue.dequeue() print(\\"Dequeued value:\\", dequeue_val) print(\\"State after dequeue:\\", queue.stack1, queue.stack2) peek_val = queue.peek() print(\\"Peek value:\\", peek_val) print(\\"State after peek:\\", queue.stack1, queue.stack2) queue.enqueue(3) print(\\"State after enqueue 3:\\", queue.stack1, queue.stack2) is_empty = queue.is_empty() print(\\"Is queue empty?:\\", is_empty) queue.dequeue() queue.dequeue() is_empty_again = queue.is_empty() print(\\"Is queue empty after dequeuing all?:\\", is_empty_again)"},{"question":"Write a function that takes two inputs: a list of integers and a target integer. The function should find all unique pairs of integers in the list that sum up to the target integer. Ensure the function handles edge cases and inefficient implementations gracefully. Your implementation should avoid using the same element twice and print the pairs in ascending order based on the first element of the pair. If no pairs are found, the function should return an empty list. Additionally, assume the list contains no duplicate integers. Here is a piece of erroneous code for reference: ```python def find_pairs(numbers, target): pairs = [] for i in range(len(numbers)): for j in range(i+1, len(numbers)): if numbers[i] + numbers[j] == target: pairs.append((numbers[i], numbers[j])) return pairs print(find_pairs([1, 2, 3, 4, 5], 5)) # This will give a repeated pair. ``` Your task is to correct this code and handle cases to ensure only unique pairs are considered and returned in the correct order.","solution":"def find_pairs(numbers, target): Returns a list of unique pairs of integers from the list that sum up to the target integer. numbers.sort() pairs = [] seen = set() left, right = 0, len(numbers) - 1 while left < right: current_sum = numbers[left] + numbers[right] if current_sum == target: if (numbers[left], numbers[right]) not in seen: pairs.append((numbers[left], numbers[right])) seen.add((numbers[left], numbers[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Write a Python function using standard libraries that takes in a string of text and returns the word that appears the most frequently. In case of a tie, return the word that comes first lexicographically. Assume the text consists only of alphabetical characters and spaces. Example ```python def most_frequent_word(text: str) -> str: pass assert most_frequent_word(\\"apple banana apple orange banana banana\\") == \\"banana\\" assert most_frequent_word(\\"hello hello world\\") == \\"hello\\" assert most_frequent_word(\\"a b c d e f g a b c a b c d e f a\\") == \\"a\\" ``` Constraints - The input string `text` contains at least one word. - Words are considered case-sensitive, so \\"Apple\\" and \\"apple\\" are distinct. - The length of `text` will not exceed 2000 characters.","solution":"from collections import Counter def most_frequent_word(text: str) -> str: Returns the word that appears the most frequently in the text. In case of a tie, returns the word that comes first lexicographically. words = text.split() count = Counter(words) max_count = max(count.values()) most_frequent_words = [word for word, freq in count.items() if freq == max_count] return min(most_frequent_words)"},{"question":"Create a function that accepts a string representing an arithmetic expression containing addition and subtraction of non-negative integers (e.g., \\"5+8-2+3\\"). The function should evaluate the expression and return the result as an integer. You may assume the input string is a valid expression and does not contain any spaces or invalid characters. Avoid using any built-in libraries or functions for evaluating mathematical expressions. Write a function `evaluate_expression(expression: str) -> int` that implements the above logic.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a string representing an arithmetic expression containing addition and subtraction of non-negative integers. Parameters: expression (str): The arithmetic expression string. Returns: int: The result of the evaluated expression. i = 0 n = len(expression) current_number = 0 result = 0 sign = 1 # 1 means positive, -1 means negative while i < n: char = expression[i] if char.isdigit(): current_number = 0 while i < n and expression[i].isdigit(): current_number = current_number * 10 + int(expression[i]) i += 1 result += sign * current_number elif char == \'+\': sign = 1 i += 1 elif char == \'-\': sign = -1 i += 1 return result"},{"question":"Write a Python function that takes a list of dictionaries and returns a new list of dictionaries, sorted by a specified key. Each dictionary contains similar keys, and the value associated with the specified key will always be an integer. If two dictionaries have the same value for the specified key, they should maintain their original order (stable sort). Your function should not use any built-in sorting functions or methods, custom sorting algorithms are required. ```python def custom_sort(dict_list, sort_key): # Your implementation here ```","solution":"def custom_sort(dict_list, sort_key): Sorts a list of dictionaries by the specified key using a custom sorting algorithm (insertion sort in this case) without using built-in sorting functions or methods. Parameters: - dict_list (list): A list of dictionaries to be sorted. - sort_key (str): The key to sort the dictionaries by. Returns: - list: A new list of dictionaries sorted by the sort_key. # Using insertion sort for stable sorting sorted_list = dict_list[:] for i in range(1, len(sorted_list)): key_dict = sorted_list[i] j = i - 1 while j >= 0 and sorted_list[j][sort_key] > key_dict[sort_key]: sorted_list[j + 1] = sorted_list[j] j -= 1 sorted_list[j + 1] = key_dict return sorted_list"},{"question":"Imagine you are a developer tasked with optimizing the performance of a web application. One critical function in your application is the ability to find the closest pair of points from a list of given 2D points (x, y coordinates). This functionality is crucial for various operations, such as clustering analysis and distance calculations. Write a function `closest_pair_of_points`, which takes a list of tuples representing the points as input and returns the pair of points that are closest to each other, in terms of Euclidean distance. If there are multiple pairs with the same minimum distance, return any one of them. **Function Signature:** ```python def closest_pair_of_points(points: List[Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]: pass ``` **Input:** - `points`: A list of tuples, where each tuple contains two integers representing the x and y coordinates of the point. The list will contain at least two points. **Output:** - A tuple containing two tuples, each representing a point with the closest Euclidean distance between them. **Example:** ```python >>> closest_pair_of_points([(1, 2), (2, 3), (3, 4), (1, 1)]) ((1, 2), (1, 1)) >>> closest_pair_of_points([(0, 0), (5, 5), (4, 4)]) ((5, 5), (4, 4)) ``` **Notes:** - The Euclidean distance between two points (x1, y1) and (x2, y2) is calculated as `sqrt((x1 - x2)**2 + (y1 - y2)**2)`. - You are allowed to use basic math functions and simple algorithms but aim for a solution that is efficient and can handle large input sizes effectively.","solution":"from typing import List, Tuple import math def closest_pair_of_points(points: List[Tuple[int, int]]) -> Tuple[Tuple[int, int], Tuple[int, int]]: def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) min_distance = float(\'inf\') closest_pair = (points[0], points[1]) for i in range(len(points)): for j in range(i + 1, len(points)): distance = euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance closest_pair = (points[i], points[j]) return closest_pair"},{"question":"How can you sort a list of tuples in Python by the second element in each tuple? For example, given a list `[(3, 5), (2, 1), (4, 7), (1, 4)]`, how would you sort it so that the result is `[(2, 1), (1, 4), (3, 5), (4, 7)]`? Provide a code snippet to demonstrate your solution, and explain how it works.","solution":"def sort_by_second_element(tuples_list): Sorts a list of tuples by the second element in each tuple. Parameters: tuples_list (list of tuple): List of tuples to be sorted. Returns: list of tuple: Sorted list of tuples by the second element. return sorted(tuples_list, key=lambda x: x[1]) # Example usage: # sorted_list = sort_by_second_element([(3, 5), (2, 1), (4, 7), (1, 4)]) # The sorted_list will be [(2, 1), (1, 4), (3, 5), (4, 7)]"},{"question":"Consider the following Python code: ```python def get_second_largest(numbers): unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1] print(get_second_largest([1, 2, 3, 4, 4, 4])) ``` What is the output of the provided code when executed? Explain how the given function `get_second_largest` works. Can you identify any potential issue in the function that might cause an unexpected result in some cases? If so, how would you revise the function to handle all possible input scenarios correctly? Provide the revised function below.","solution":"def get_second_largest(numbers): if not numbers: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Write a function `average_of_evens` that takes a list of integers and returns the average of all even numbers in the list. If there are no even numbers, return 0. For example, given the list `[1, 2, 3, 4, 5]`, the function should return the average of 2 and 4, which is 3.0.","solution":"def average_of_evens(numbers): Returns the average of all even numbers in the list. If there are no even numbers, returns 0. evens = [num for num in numbers if num % 2 == 0] if not evens: return 0 return sum(evens) / len(evens)"},{"question":"Write a function that checks if a given linked list contains a cycle. A cycle occurs when a node\'s next pointer points to an earlier node in the list, creating a loop. The function should return `True` if a cycle exists and `False` otherwise. You should use O(1) additional space for your solution. ```python class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head: ListNode) -> bool: Returns True if there is a cycle in the linked list, otherwise False. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False ``` # Example Usage: ```python # Creating a list with a cycle node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node2 # Creates a cycle print(has_cycle(node1)) # Output: True # Creating a list without a cycle node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node1.next = node2 node2.next = node3 print(has_cycle(node1)) # Output: False ``` **Constraints:** - The number of nodes in the linked list is in the range `[0, 10^4]`. - The value of the nodes in the linked list is in the range `[-10^5, 10^5]`.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def has_cycle(head: ListNode) -> bool: Returns True if there is a cycle in the linked list, otherwise False. if not head: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function in Python that accepts a list of integers and returns the length of the longest subsequence where each integer is divisible by the previous integer in the subsequence. If there are multiple subsequences of the same length, return the length of any one of them. For instance, given the list `[3, 6, 7, 12, 24, 30]`, the function should return `4` since the longest subsequence is `[3, 6, 12, 24]`.","solution":"def longest_divisible_subsequence(arr): if not arr: return 0 n = len(arr) # Initialize the dp array where dp[i] will store the length of the longest divisible subsequence ending at index i dp = [1] * n max_length = 1 # Fill dp array in a bottom-up manner for i in range(1, n): for j in range(0, i): if arr[i] % arr[j] == 0 and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 max_length = max(max_length, dp[i]) return max_length"},{"question":"Create a function that takes a list of integers as input and returns a new list containing only the elements that are prime numbers. The function should maintain the order of elements as they appear in the input list. example_list = [2, 3, 4, 5, 6, 7, 8, 9, 10] Output for the example: [2, 3, 5, 7]","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Implement a function `longest_substring_k_distinct(s: str, k: int) -> int` that takes a string `s` and an integer `k`, and returns the length of the longest substring that contains at most `k` distinct characters. # Example ```python print(longest_substring_k_distinct(\\"araaci\\", 2)) # Output: 4 (\\"araa\\") print(longest_substring_k_distinct(\\"araaci\\", 1)) # Output: 2 (\\"aa\\") print(longest_substring_k_distinct(\\"cbbebi\\", 3)) # Output: 5 (\\"cbbeb\\" or \\"bbebi\\") ``` # Constraints 1. The input string `s` will have a length of `1 <= len(s) <= 10^5`. 2. The integer `k` will satisfy `1 <= k <= len(s)`. # Guidelines - Your implementation should focus on efficiency, ideally running in linear time. - Consider leveraging a sliding window approach to dynamically track the substrings as you iterate through the string. - Ensure the solution handles edge cases, such as when the entire string contains fewer than `k` distinct characters.","solution":"def longest_substring_k_distinct(s: str, k: int) -> int: Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_frequency = {} left = 0 max_length = 0 for right in range(len(s)): right_char = s[right] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[left] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Implement a function that formats a list of numbers by removing duplicates, sorting it in ascending order, and abbreviating consecutive sequences. def format_numbers(numbers): \'\'\' Given a list of integers, perform the following operations: 1. Remove duplicates from the list. 2. Sort the list in ascending order. 3. Abbreviate consecutive sequences by using a hyphen to represent the range. Return the formatted string representation of the list. Examples: format_numbers([7, 3, 1, 2, 4, 4, 5, 7, 8, 9]) ➞ \\"1-5, 7-9\\" format_numbers([1, 1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ \\"1-10\\" format_numbers([10, 20, 30, 40]) ➞ \\"10, 20, 30, 40\\" \'\'\'","solution":"def format_numbers(numbers): Given a list of integers, perform the following operations: 1. Remove duplicates from the list. 2. Sort the list in ascending order. 3. Abbreviate consecutive sequences by using a hyphen to represent the range. Return the formatted string representation of the list. # Step 1: Remove duplicates numbers = list(set(numbers)) # Step 2: Sort the list in ascending order numbers.sort() # Step 3: Abbreviate consecutive sequences result = [] i = 0 while i < len(numbers): start = numbers[i] while i + 1 < len(numbers) and numbers[i + 1] == numbers[i] + 1: i += 1 end = numbers[i] if start == end: result.append(f\\"{start}\\") else: result.append(f\\"{start}-{end}\\") i += 1 return \\", \\".join(result)"},{"question":"Given a string containing parentheses, brackets, and curly braces, design a function that checks whether the string has balanced parentheses. Your function should return True if the string is balanced and False otherwise. The input string will only contain these characters: \'(\', \')\', \'[\', \']\', \'{\', \'}\'. Below is a sample input string for reference: sample_string = \\"([{}])()[]\\" def is_balanced(input_str): stack = [] opening = set(\'([{\') matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in input_str: if char in opening: stack.append(char) elif char in matching: if stack == [] or stack.pop() != matching[char]: return False else: return False return stack == [] Input: \\"([{}])()[]\\" Output: True Input: \\"([{})]\\" Output: False","solution":"def is_balanced(input_str): Checks whether the input string of parentheses, brackets, and curly braces is balanced. Args: input_str (str): The input string containing \'(\', \')\', \'[\', \']\', \'{\', \'}\'. Returns: bool: True if the string is balanced, False otherwise. stack = [] opening = set(\'([{\') matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in input_str: if char in opening: stack.append(char) elif char in matching: if not stack or stack.pop() != matching[char]: return False return not stack"},{"question":"Problem: Product Discount Calculation with Customer Constraints # Scenario: You are tasked with calculating the total amount a customer has to pay after applying discounts on a given set of products. Customers come in with a list of products they wish to buy, and each product has a fixed price. There are several types of discount coupons available: 1. A percentage-based discount. 2. A flat-rate discount on the total price. 3. Buy one get one free (BOGO) discount. Each customer can only apply one type of discount to their total purchase. However, there are constraints on the discounts: - A percentage-based discount can be applied only if the total purchase amount before discount is at least `min_percent_amount`. - A flat-rate discount can be applied only if the total purchase amount before discount is at least `min_flat_amount` and the final amount after the discount does not go below `flat_min_limit`. - A BOGO discount can be applied to pairs of products of same type only. Your task is to determine the minimum payment required after applying the most beneficial discount that the customer qualifies for. # Function Signature ```python def calculate_min_payment(prices: List[int], percent_discount: int, flat_discount: int, min_percent_amount: int, min_flat_amount: int, flat_min_limit: int) -> float: pass ``` # Input 1. `prices`: List of integers, where each integer represents the price of a product. 2. `percent_discount`: Integer, the percentage discount applicable. 3. `flat_discount`: Integer, the flat-rate discount applicable. 4. `min_percent_amount`: Integer, the minimum total purchase amount required to apply the percentage discount. 5. `min_flat_amount`: Integer, the minimum total purchase amount required to apply the flat-rate discount. 6. `flat_min_limit`: Integer, the minimum amount the total purchase can be reduced to after applying the flat-rate discount. # Output A float representing the minimum amount the customer needs to pay after applying the applicable discount. # Examples Example 1: ```python Input: prices=[100, 200, 300], percent_discount=20, flat_discount=100, min_percent_amount=500, min_flat_amount=200, flat_min_limit=50 Output: 400.0 Explanation: - Total amount = 100 + 200 + 300 = 600. - Percentage discount (20%) can be applied as the total is >= 500. The total amount will be 600 * 0.80 = 480. - Flat-rate discount can be applied as the total is >= 200. The total amount will be 600 - 100 = 500. - No BOGO applicable as no products are the same. - The minimum payment is 480.0. ``` Example 2: ```python Input: prices=[50, 50, 100], percent_discount=10, flat_discount=50, min_percent_amount=100, min_flat_amount=100, flat_min_limit=20 Output: 140.0 Explanation: - Total amount = 50 + 50 + 100 = 200. - Percentage discount (10%) can be applied as the total is >= 100. The total amount will be 200 * 0.90 = 180. - Flat-rate discount can be applied as the total is >= 100. The total amount will be 200 - 50 = 150. - BOGO can be applied to the two products with price 50, but since the other discounts apply to the total amount and are more beneficial, we consider those first. - The minimum payment is 150.0. ``` Note: - Product prices will be positive integers. - The percentage discount value is an integer but the final price may be a float. - Ensure to consider precision up to two decimal places for the final payment amount.","solution":"from typing import List def calculate_min_payment(prices: List[int], percent_discount: int, flat_discount: int, min_percent_amount: int, min_flat_amount: int, flat_min_limit: int) -> float: total_amount = sum(prices) # Calculate percentage discount percent_discounted = total_amount if total_amount >= min_percent_amount: percent_discounted = total_amount * ((100 - percent_discount) / 100.0) # Calculate flat rate discount flat_discounted = total_amount if total_amount >= min_flat_amount: flat_discounted = max(total_amount - flat_discount, flat_min_limit) # Calculate BOGO discount bogo_discounted = total_amount from collections import Counter product_counter = Counter(prices) for price, count in product_counter.items(): bogo_discounted -= (count // 2) * price # Find the minimum payment with eligible discounts min_payment = min(percent_discounted, flat_discounted, bogo_discounted) return round(min_payment, 2)"},{"question":"***Question 2***: Write a function that takes a list of employee records and calculates the total number of hours worked by employees who are in the \\"Engineering\\" department and have a salary greater than 70,000. Each employee record is represented by a dictionary. Example: ``` employees = [ { \\"name\\": \\"Alice\\", \\"department\\": \\"Engineering\\", \\"salary\\": 80000, \\"hoursWorked\\": 40 }, { \\"name\\": \\"Bob\\", \\"department\\": \\"Marketing\\", \\"salary\\": 60000, \\"hoursWorked\\": 38 }, { \\"name\\": \\"Charlie\\", \\"department\\": \\"Engineering\\", \\"salary\\": 50000, \\"hoursWorked\\": 42 }, { \\"name\\": \\"David\\", \\"department\\": \\"Engineering\\", \\"salary\\": 75000, \\"hoursWorked\\": 41 } ] ``` Output: ``` 81 ```","solution":"def calculate_total_hours(employees): Returns the total number of hours worked by employees in the \\"Engineering\\" department with a salary greater than 70,000. total_hours = 0 for employee in employees: if employee[\'department\'] == \'Engineering\' and employee[\'salary\'] > 70000: total_hours += employee[\'hoursWorked\'] return total_hours"},{"question":"Given an array of integers, write a function to find the maximum sum of any non-empty subarray. A subarray is an uninterrupted portion of the original array. Your function should return the sum of the maximum subarray. # Specification - Input: A list of integers `arr` where the length of `arr` is at least 1 and does not exceed 10^5. - Output: An integer representing the maximum sum of any non-empty subarray. # Function Signature ```python def max_subarray_sum(arr: list) -> int: pass ``` # Example Example 1 Input: `[-2, 1, -3, 4, -1, 2, 1, -5, 4]` Output: `6` Explanation: The maximum sum of a subarray is `[4, -1, 2, 1]` which sums to 6. Example 2 Input: `[1]` Output: `1` Explanation: The maximum sum of a subarray is `[1]` which sums to 1. Example 3 Input: `[0, -3, 1, 1, -1, 5, -2]` Output: `6` Explanation: The maximum sum of a subarray is `[1, 1, -1, 5]` which sums to 6. # Constraints - The list may contain both positive and negative integers, including zero. - The function should run efficiently on large inputs. # Hint - The problem can be solved using Kadane\'s Algorithm, which operates in linear time.","solution":"def max_subarray_sum(arr: list) -> int: Returns the sum of the maximum subarray in the given array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Implement a function that receives an integer as an input and returns a list of all prime numbers less than or equal to that integer. The function should utilize the Sieve of Eratosthenes algorithm for optimal performance. Provide a detailed explanation of how the Sieve of Eratosthenes works within your function. ```python def sieve_of_eratosthenes(n): # initialization of boolean array sieve = [True] * (n + 1) sieve[0:2] = [False, False] # 0 and 1 are not primes # Eliminate non-primes by marking multiples of each prime for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False # Extracting all primes primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes # Function usage example: # primes_up_to_30 = sieve_of_eratosthenes(30) # print(primes_up_to_30) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ```","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] # initialization of boolean array sieve = [True] * (n + 1) sieve[0:2] = [False, False] # 0 and 1 are not primes # Eliminate non-primes by marking multiples of each prime for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False # Extracting all primes primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes # Function usage example: # primes_up_to_30 = sieve_of_eratosthenes(30) # print(primes_up_to_30) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"question":"Write a function that accepts a list of integers representing temperatures in Celsius, and returns a new list with corresponding temperature categories. The categories are defined as: - \\"Cold\\" for temperatures below 10 degrees, - \\"Warm\\" for temperatures between 10 and 25 degrees (inclusive), - \\"Hot\\" for temperatures above 25 degrees. Example: Input: [8, 15, 22, 30, 5, 13] Output: [\'Cold\', \'Warm\', \'Warm\', \'Hot\', \'Cold\', \'Warm\'] Ensure to provide efficient code considering possible edge cases, like empty lists and lists containing negative numbers.","solution":"def categorize_temperatures(temperatures): This function accepts a list of integers representing temperatures in Celsius, and returns a new list with corresponding temperature categories. categories = [] for temp in temperatures: if temp < 10: categories.append(\\"Cold\\") elif 10 <= temp <= 25: categories.append(\\"Warm\\") else: categories.append(\\"Hot\\") return categories"},{"question":"Write a function that takes a string containing only lowercase letters and returns a list of substrings, each representing a consecutive sequence of alphabetically ordered characters from the original string. Adjacent characters in the alphabet should be uninterrupted segments in the returned list. The function should maintain the original order of these segments from the input string. If a character does not have a succeeding character in alphabetical order, it should be a substring of its own. Do not use any in-built Python functions or libraries for string manipulation.","solution":"def find_sequences(s): Returns a list of substrings, each representing a consecutive sequence of alphabetically ordered characters from the string. sequences = [] current_sequence = \\"\\" for i in range(len(s)): if i == 0 or ord(s[i]) == ord(s[i-1]) + 1: current_sequence += s[i] else: sequences.append(current_sequence) current_sequence = s[i] if current_sequence: sequences.append(current_sequence) return sequences"},{"question":"Write a Python program that takes a list of integers and returns a new list containing only the prime numbers from the original list. Your solution should include a helper function to check if a number is prime. Additionally, the program should be optimized to handle lists with a large number of integers efficiently. You should also handle and return an appropriate message if the input list is empty. Provide a piece of erroneous code that attempts to solve the problem and explain the error within it.","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the provided list. If the list is empty, returns \'Input list is empty\'. if not numbers: return \\"Input list is empty\\" return [num for num in numbers if is_prime(num)]"},{"question":"Given an array of integers, find two numbers such that they add up to a specific target number. Return the indices of the two numbers as a tuple. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) Explanation: Because nums[0] + nums[1] = 2 + 7 = 9","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Parameters: nums (List[int]): Array of integers. target (int): Target sum. Returns: Tuple[int, int]: Indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i"},{"question":"Create a function that takes a list of integers as input and returns a list of tuples, each containing a pair of numbers from the input list whose sum is equal to 10. Ensure that each pair is unique and that the function runs efficiently even with larger input sizes. This will require the use of effective data structures and algorithms for pairing and searching through the list.","solution":"def find_pairs_with_sum_ten(numbers): Returns a list of unique pairs of numbers from the input list whose sum is 10. pairs = [] seen = set() added_pairs = set() for num in numbers: target = 10 - num if target in seen: pair = tuple(sorted((num, target))) if pair not in added_pairs: pairs.append(pair) added_pairs.add(pair) seen.add(num) return pairs"},{"question":"Create a Python function that takes a list of integers as input and returns a dictionary. The dictionary should have keys corresponding to each unique integer in the list. The value for each key should be a list of indices where that integer appears in the input list. Your function should account for the possibility of an empty list and handle it by returning an empty dictionary.","solution":"def indices_of_elements(lst): Returns a dictionary with keys as unique integers from the list and values as lists of indices where those integers appear in the input list. Parameters: lst (list): A list of integers. Returns: dict: A dictionary with unique integers as keys and their indices as values. result = {} for index, value in enumerate(lst): if value in result: result[value].append(index) else: result[value] = [index] return result"},{"question":"Design a function that takes a dictionary of students and their respective subjects with grades, and returns a list of students who have passing grades in all subjects. A pass in any subject is defined as having a grade of at least 50. # Requirements 1. Your function should be named `students_passing_all_subjects`. 2. The input dictionary will have: - Keys as student names (strings) - Values as another dictionary where keys are subject names (strings) and values are grades (integers) 3. Your function should return a sorted list of names of students who have grades above 50 in all their subjects. # Example: ```python def students_passing_all_subjects(students_grades): # your code here students_grades_example = { \'Alice\': {\'Math\': 80, \'English\': 90, \'Physics\': 70}, \'Bob\': {\'Math\': 60, \'English\': 45, \'Physics\': 55}, \'Charlie\': {\'Math\': 50, \'English\': 50, \'Physics\': 50}, \'David\': {\'Math\': 40, \'English\': 60, \'Physics\': 70} } print(students_passing_all_subjects(students_grades_example)) ``` # Expected Output: ``` [\'Alice\', \'Charlie\'] ``` # Notes: 1. Assume that each student has grades for all the subjects listed in the input dictionary. 2. Handle the case where no students are passing all subjects gracefully by returning an empty list. 3. Ensure your solution is efficient and clear. --- Test your function with different sets of data to ensure it works as expected.","solution":"def students_passing_all_subjects(students_grades): Returns a list of students who have passing grades (>= 50) in all subjects. Parameters: students_grades (dict): Dictionary where keys are student names and values are dictionaries of subjects and grades. Returns: list: Sorted list of names of students who have passing grades in all their subjects. passing_students = [] for student, grades in students_grades.items(): if all(grade >= 50 for grade in grades.values()): passing_students.append(student) return sorted(passing_students) # Example usage students_grades_example = { \'Alice\': {\'Math\': 80, \'English\': 90, \'Physics\': 70}, \'Bob\': {\'Math\': 60, \'English\': 45, \'Physics\': 55}, \'Charlie\': {\'Math\': 50, \'English\': 50, \'Physics\': 50}, \'David\': {\'Math\': 40, \'English\': 60, \'Physics\': 70} } print(students_passing_all_subjects(students_grades_example))"},{"question":"Design a Python function that takes a list of dictionaries, with each dictionary containing keys \'name\' (a string) and \'age\' (an integer). The function should return the name of the oldest person. If there are multiple people with the same highest age, return a list of their names sorted alphabetically. For example: ```python people = [ {\'name\': \'Alice\', \'age\': 30}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'age\': 30}, {\'name\': \'David\', \'age\': 22} ] print(get_oldest_person(people)) # Expected output: [\'Alice\', \'Charlie\'] ``` Here\'s the incorrect implementation provided: ```python def get_oldest_person(people): max_age = max(person[\'age\'] for person in people) for person in people: if person[\'age\'] == max_age: return person[\'name\'] print(get_oldest_person(people)) # Expected output: [\'Alice\', \'Charlie\'] ``` The provided code only returns the first person found with the maximum age. Modify and correct this code to meet the requirements of the prompt.","solution":"def get_oldest_person(people): Returns the name of the oldest person, or a list of names if multiple people have the highest age, sorted alphabetically. if not people: return [] max_age = max(person[\'age\'] for person in people) oldest_people = [person[\'name\'] for person in people if person[\'age\'] == max_age] return sorted(oldest_people)"},{"question":"Write a Python function that takes a list of integers and returns a new list with each integer\'s digits rearranged to form the smallest possible number for each integer. For instance, given the list [532, 214, 740], the output should be [235, 124, 47]. **Function signature**: ```python def rearrange_to_smallest(numbers: List[int]) -> List[int]: pass ``` **Examples**: ```python assert rearrange_to_smallest([532, 214, 740]) == [235, 124, 47] assert rearrange_to_smallest([987, 321, 46]) == [789, 123, 46] ```","solution":"from typing import List def rearrange_to_smallest(numbers: List[int]) -> List[int]: Given a list of integers, returns a new list with each integer\'s digits rearranged to form the smallest possible number for each integer. smallest_numbers = [] for number in numbers: # Convert the number to a list of digits, sort them, and join back to form the smallest number smallest_number = int(\'\'.join(sorted(str(number)))) smallest_numbers.append(smallest_number) return smallest_numbers"},{"question":"You are given a list containing integers. Some integers appear twice while others appear only once. Your task is to identify and return the integer that appears only once. Implement this function with a linear runtime complexity and without using extra space for storage (i.e., modify the list in place if needed). Example: input_list = [1, 2, 3, 2, 1, 4, 5, 4, 3] output: 5","solution":"def find_unique_number(input_list): Returns the integer that appears only once in the input list. The function has linear runtime complexity and does not use extra space for storage. # Using bitwise XOR operator to find the unique number unique_number = 0 for num in input_list: unique_number ^= num return unique_number"},{"question":"You are given a list of words. Your task is to find all the words that can be typed using letters of only one row of a standard QWERTY keyboard. The QWERTY keyboard rows are as follows: First row: \\"qwertyuiop\\" Second row: \\"asdfghjkl\\" Third row: \\"zxcvbnm\\" Write a function `find_one_row_words(words: List[str]) -> List[str]` that receives a list of words and returns the list of words that can be typed using only one row of the keyboard. If no such words exist, return an empty list. # Example Input: ```python [\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"] ``` # Example Output: ```python [\\"Alaska\\", \\"Dad\\"] ``` # Constraints: - The input list will contain at most 100 words. - Each word will contain only letters. - Words are not case-sensitive, which means \\"Hello\\" and \\"hello\\" should be considered the same.","solution":"def find_one_row_words(words): Returns a list of words that can be typed using just one row of QWERTY keyboard. :param words: List of words to check. :return: List of words that can be typed using one row on a QWERTY keyboard. row1 = set(\\"qwertyuiop\\") row2 = set(\\"asdfghjkl\\") row3 = set(\\"zxcvbnm\\") def can_be_typed_with_one_row(word): word_set = set(word.lower()) return word_set <= row1 or word_set <= row2 or word_set <= row3 return [word for word in words if can_be_typed_with_one_row(word)]"},{"question":"Create a function that takes a list of integers and returns the integer that appears the most times. If there is a tie, return a list of the integers that occur most frequently. Additionally, below is a piece of erroneous code that attempts to solve the problem. Identify the errors and correct them in your solution. ```python def most_frequent(lst): freq = {} for i in lst: freq[i] = freq.get(i, 0) + 1 max_freq = max(freq.values()) most_freq_int = [k for k, v in freq.items() if v == max_freq] return most_freq_int if len(most_freq_int) > 1 else most_freq_int[0] ```","solution":"def most_frequent(lst): Returns the integer that appears the most times in the list. If there is a tie, returns a list of the integers that occur most frequently. freq = {} for i in lst: freq[i] = freq.get(i, 0) + 1 if not freq: return [] max_freq = max(freq.values()) most_freq_int = [k for k, v in freq.items() if v == max_freq] return most_freq_int if len(most_freq_int) > 1 else most_freq_int[0]"},{"question":"Write a function that finds the longest substring without repeating characters in a given string. The function should return the length of this substring. Additionally, the function should handle edge cases where the string is empty or contains special characters (e.g., `!\\"#%&\'()*+,-./:;<=>?@[]^_`{|}~`). The candidate should provide a detailed explanation of their solution, including the approach taken and its time and space complexity. Furthermore, they should offer a strategy for testing their function to ensure it works correctly with various input scenarios.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters in `s`. chars = set() left = 0 result = 0 for right in range(len(s)): while s[right] in chars: chars.remove(s[left]) left += 1 chars.add(s[right]) result = max(result, right - left + 1) return result # Explanation: # The function `length_of_longest_substring` uses a sliding window approach to find the longest substring without repeating characters. # - We maintain a set called `chars` to store characters in the current window. # - The `left` pointer starts at the beginning of the string and moves to the right whenever a duplicate character is found. # - The `right` pointer moves through each character in the string. # - If a duplicate character is found (i.e., `s[right]` is in `chars`), we remove characters from the set starting from the `left` pointer until the duplicate character is removed. # - We update the length of the longest substring by comparing the current substring length (`right - left + 1`) with the previously recorded length (`result`). # Time Complexity: O(n) where n is the length of the input string. Each character is visited at most twice (once by the `right` pointer and once by the `left` pointer). # Space Complexity: O(min(m, n)) where n is the length of the input string and m is the size of the character set."},{"question":"Write a function in Python that calculates the factorial of a given positive integer n recursively. The function should take a single argument n (0 ≤ n ≤ 10) and return the factorial of n. If n equals 0, the factorial is defined as 1. Ensure to handle the base case in your recursion to prevent infinite loops or errors.","solution":"def factorial(n): Returns the factorial of a given positive integer n using recursion. if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function named \\"merge_and_sort_arrays\\" that takes two arguments, both lists of integers called \'list1\' and \'list2\'. The function should merge the two lists into a single list, remove any duplicate integers, and then sort the resulting list in descending order. The merged list can contain up to 10^6 integers in total. Ensure that your solution is optimized for large inputs and performs efficiently. For example: list1 = [4, 2, 9, 5, 2] list2 = [7, 3, 8, 9, 1] Your function should return: [9, 8, 7, 5, 4, 3, 2, 1]","solution":"def merge_and_sort_arrays(list1, list2): Merges two lists into a single list, removes duplicates, and sorts in descending order. Args: list1: List of integers. list2: List of integers. Returns: A new sorted list in descending order with unique integers. # Merge the two lists merged_list = list1 + list2 # Remove duplicates by converting to a set unique_elements = set(merged_list) # Convert back to a list and sort in descending order sorted_list = sorted(unique_elements, reverse=True) return sorted_list"},{"question":"You are given a list of words and a string `s`. You need to find how many of the words in the list can be formed by deleting some characters of `s` without rearranging the remaining characters. In other words, for each word in the list, check if it is a subsequence of `s`. # Function Signature ```python def numMatchingSubseq(s: str, words: List[str]) -> int: pass ``` # Input - `s` (1 <= len(s) <= 10^5): a string of lowercase English letters. - `words` (1 <= len(words) <= 5000): a list of strings where each string has a length of at most 50. # Output - Return the number of words that are subsequences of `s`. # Example ```python s = \\"abcde\\" words = [\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"] result = numMatchingSubseq(s, words) # Output: 3 ``` # Explanation - For the given string `s = \\"abcde\\"`: - \\"a\\" is a subsequence. - \\"bb\\" is not a subsequence. - \\"acd\\" is a subsequence. - \\"ace\\" is a subsequence. - Thus, the function should return 3. # Constraints - Optimize the solution both in terms of time and space complexity.","solution":"from typing import List def is_subsequence(s: str, word: str) -> bool: it = iter(s) return all(char in it for char in word) def numMatchingSubseq(s: str, words: List[str]) -> int: count = 0 for word in words: if is_subsequence(s, word): count += 1 return count"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. To determine if a number is prime, check if it is greater than 1 and has no divisors other than 1 and itself. Example input: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] Example output: [2, 3, 5, 7, 11]","solution":"def is_prime(n): Determines if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that finds the maximum product of two distinct elements in a list. The function should handle both positive and negative numbers in the list, and it should not use inbuilt or third-party libraries for finding the product. Also, ensure the solution is optimized for large input sizes.","solution":"def max_product(nums): Returns the maximum product of two distinct elements in the list. if len(nums) < 2: raise ValueError(\\"At least two distinct elements are required\\") # Initialize the two largest and two smallest values max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: # Update the two largest values if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update the two smallest values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # The maximum product could be the product of the two largest # or the product of the two smallest (if they are both negative) return max(max1 * max2, min1 * min2)"},{"question":"Design a function in Python that takes a list of integers as an input and returns a new list containing only the prime numbers from the input list. Ensure your function optimally checks for primality to handle larger inputs efficiently. Additionally, write a brief explanation of the algorithm used for identifying prime numbers and the considerations for optimizing its performance.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Returns a new list containing only the prime numbers from the input list. return [num for num in nums if is_prime(num)] # Brief explanation: # The `is_prime` function checks for primality using a few optimizations: # 1. Immediately returns False for numbers <= 1 and returns True for 2 and 3. # 2. Checks divisibility by 2 and 3 to eliminate multiples of these small numbers. # 3. Uses a loop that checks divisibility starting from 5 in steps of 6, # which skips the even numbers and multiples of 3 to reduce the number # of iterations while ensuring accurate primality checking. # This method ensures efficient checking for primality, especially for larger numbers. # The `filter_primes` function applies this primality check to each element # in the input list and composes a new list of primes."},{"question":"Design a function that accepts a list of integers, where each integer appears an even number of times except for one unique integer that appears an odd number of times. The function should return the integer that appears an odd number of times. Ensure your solution has an optimal time complexity. Example input: [2, 3, 2, 4, 4, 4, 4, 5, 5, 3, 7] Expected output: 7","solution":"def find_odd_occurrence(nums): Returns the integer that appears an odd number of times in the list. result = 0 for num in nums: result ^= num return result"},{"question":"Design a Python function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. Expand your function to handle a list of strings and return a list of counts corresponding to each string.","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the given string. vowels = set(\'aeiou\') return sum(1 for char in s.lower() if char in vowels) def count_vowels_in_list(strings): Returns a list of counts of vowels in each string of the input list. return [count_vowels(s) for s in strings]"},{"question":"Create a Python function that simulates basic stock market operations. The function should be able to: 1. Record the prices of different stocks at various time points. 2. Provide the current price of a specific stock. 3. Calculate the average price of a stock over a certain number of recent time points. 4. Return the highest and lowest prices recorded for a specific stock. 5. Return the volume of transactions done for a particular stock. Implement the following functionalities within a class `StockMarket`: 1. `record_price(stock_name: str, price: float) -> None`: Records the price of a specified stock at the current time point. 2. `current_price(stock_name: str) -> float`: Returns the current price of the specified stock. 3. `average_price(stock_name: str, k: int) -> float`: Returns the average price of the specified stock over the last `k` recorded prices. 4. `high_low_price(stock_name: str) -> Tuple[float, float]`: Returns the highest and lowest prices recorded for the specified stock. 5. `transaction_volume(stock_name: str) -> int`: Returns the total number of transactions (count of recorded prices) for the specified stock. You may use appropriate Python data structures to store and manage the stock prices and perform the necessary operations.","solution":"from collections import defaultdict from typing import List, Tuple class StockMarket: def __init__(self): self.prices = defaultdict(list) def record_price(self, stock_name: str, price: float) -> None: Records the price of a specified stock at the current time point. self.prices[stock_name].append(price) def current_price(self, stock_name: str) -> float: Returns the current price of the specified stock. if stock_name not in self.prices or len(self.prices[stock_name]) == 0: return None return self.prices[stock_name][-1] def average_price(self, stock_name: str, k: int) -> float: Returns the average price of the specified stock over the last `k` recorded prices. if stock_name not in self.prices or len(self.prices[stock_name]) == 0: return None return sum(self.prices[stock_name][-k:]) / min(k, len(self.prices[stock_name])) def high_low_price(self, stock_name: str) -> Tuple[float, float]: Returns the highest and lowest prices recorded for the specified stock. if stock_name not in self.prices or len(self.prices[stock_name]) == 0: return None, None return (max(self.prices[stock_name]), min(self.prices[stock_name])) def transaction_volume(self, stock_name: str) -> int: Returns the total number of transactions (count of recorded prices) for the specified stock. if stock_name not in self.prices: return None return len(self.prices[stock_name])"},{"question":"Write a Python function that accepts an integer, `n`, and computes the sum of first `n` prime numbers. Ensure your function includes appropriate error handling to deal with invalid inputs (e.g., non-integer values or negative numbers).","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_first_n_primes(n): Returns the sum of the first n prime numbers. Raises a ValueError for invalid inputs. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") prime_sum = 0 count = 0 num = 2 while count < n: if is_prime(num): prime_sum += num count += 1 num += 1 return prime_sum"},{"question":"Consider an array of integers. The task is to generate a new array that contains only the unique integers that appear an odd number of times in the original array. Ensure that the order of the elements in the new array follows their first appearance in the original array.","solution":"def unique_odd_occurrences(arr): Returns a list containing only unique integers that appear an odd number of times in the original array. from collections import Counter # Count the occurrences of each element in the array count = Counter(arr) # Create a new list with elements that appear an odd number of times result = [] seen = set() for num in arr: if num not in seen and count[num] % 2 != 0: result.append(num) seen.add(num) return result"},{"question":"Write a function that takes a string as input and returns a dictionary with the frequency of each character in the string. Additionally, filter out and exclude any non-alphanumeric characters from the string before computing the frequencies. Consider the string to be case-insensitive, i.e., \'a\' and \'A\' should be counted as the same character. Ensure your implementation is efficient and can handle large strings. Example: ``` input_string = \\"Hello, World!\\" Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ```","solution":"def char_frequency(input_string): Returns a dictionary with the frequency of each alphanumeric character in the input string. The function is case-insensitive and non-alphanumeric characters are excluded from the count. frequency = {} for char in input_string.lower(): if char.isalnum(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a function that takes a positive integer `n` and returns a list of all prime numbers less than `n`. The returned list should be in ascending order. Optimize the function for large values of `n`. Example: ```python Input: n = 10 Output: [2, 3, 5, 7] Input: n = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] ```","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n, start): sieve[i] = False return [num for num in range(n) if sieve[num]]"},{"question":"Write a Python function that accepts a string containing a sequence of words separated by spaces. The function should reverse the order of the words and capitalize the first letter of each word in the reversed string. Do not use any built-in functions to reverse the string or capitalize the words. Also, the function should remove any extra spaces between words in the given string. Your function should return the modified string as output.","solution":"def reverse_and_capitalize(sentence): This function reverses the order of the words in the given sentence, capitalizes the first letter of each word, and removes any extra spaces between words. Parameters: sentence (str): The input sentence containing words separated by spaces. Returns: str: The modified string with words reversed, capitalized, and extra spaces removed. words = sentence.split(\' \') reversed_words = [] for word in words: if word.strip(): # Skip empty strings resulting from extra spaces reversed_words.insert(0, word.strip().capitalize()) return \' \'.join(reversed_words)"},{"question":"Write a function that takes a sentence as input and returns the sentence reversed at the word level while preserving the order of characters within each word. Do not use any built-in reversing functions. Handle punctuation correctly as part of the word it is attached to. Example: Input: \\"Hello, world! This is an example.\\" Output: \\"example. an is This world! Hello,\\"","solution":"def reverse_sentence(sentence): Returns the sentence reversed at the word level while preserving the order of characters within each word. words = sentence.split() reversed_words = words[::-1] reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence"},{"question":"Write a Python function that takes a list of strings as input and returns a dictionary. The dictionary should have keys as the lengths of the strings and values as lists of strings that correspond to those lengths. Ensure your function is efficient and handles edge cases appropriately, such as an empty list or strings with the same length. For instance, given the input `[\\"abc\\", \\"de\\", \\"fgh\\", \\"i\\", \\"jk\\", \\"lmno\\"]`, the function should return `{1: [\\"i\\"], 2: [\\"de\\", \\"jk\\"], 3: [\\"abc\\", \\"fgh\\"], 4: [\\"lmno\\"]}`.","solution":"def group_strings_by_length(strings): Takes a list of strings as input and returns a dictionary with keys as the lengths of the strings and values as lists of strings that correspond to those lengths. :param strings: List of strings :return: Dictionary with keys as string lengths and values as lists of strings length_dict = {} for string in strings: length = len(string) if length not in length_dict: length_dict[length] = [] length_dict[length].append(string) return length_dict"},{"question":"Write a function that takes two sorted arrays as input and returns a new array containing elements that are present in both input arrays. Each input array may have duplicate elements, but the function should return an array consisting of unique elements only. The order of elements in the output array should be in ascending order. Do not use built-in set operations for this task. Function Signature: `def find_common_elements(arr1: List[int], arr2: List[int]) -> List[int]`","solution":"def find_common_elements(arr1, arr2): Returns a new array containing unique elements that are present in both sorted input arrays. common_elements = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] == arr2[j]: if not common_elements or common_elements[-1] != arr1[i]: common_elements.append(arr1[i]) i += 1 j += 1 elif arr1[i] < arr2[j]: i += 1 else: j += 1 return common_elements"},{"question":"You are given an XML string that represents a hierarchical structure of tags. Write a Python function that parses the XML string and outputs a dictionary where each key is a tag name and the value is a list of attributes dictionaries for that tag. For instance, given the following XML string: ```xml <root> <child id=\\"1\\" name=\\"child1\\"/> <child id=\\"2\\" name=\\"child2\\"> <subchild id=\\"3\\" name=\\"subchild1\\"/> </child> </root> ``` The function should return the following dictionary: ```python { \'root\': [{}], \'child\': [{\'id\': \'1\', \'name\': \'child1\'}, {\'id\': \'2\', \'name\': \'child2\'}], \'subchild\': [{\'id\': \'3\', \'name\': \'subchild1\'}] } ``` **Function Signature:** ```python def parse_xml_to_dict(xml_string: str) -> dict: pass ``` **Assumptions:** - The XML string is properly formatted and error-free. - Attributes do not repeat within the same tag. - Tag names and attributes are case-sensitive.","solution":"import xml.etree.ElementTree as ET def parse_xml_to_dict(xml_string: str) -> dict: def recursive_parse(element, result): tag_name = element.tag if tag_name not in result: result[tag_name] = [] attributes = element.attrib result[tag_name].append(attributes) for child in element: recursive_parse(child, result) root = ET.fromstring(xml_string) result = {} recursive_parse(root, result) return result"},{"question":"Write a Python function to determine if a given list of integers can be partitioned into two subsets such that the sum of elements in both subsets is equal. If it is possible, return True; otherwise, return False. ```python def can_partition(nums): # Your code here ``` Example: ```python print(can_partition([1, 5, 11, 5])) # Should return True print(can_partition([1, 2, 3, 5])) # Should return False print(can_partition([1, 1, 1, 1])) # Should return True ``` Note: - Utilize dynamic programming to solve this problem efficiently. - Consider edge cases where the list is empty or contains only one element.","solution":"def can_partition(nums): Determines if a given list of integers can be partitioned into two subsets such that the sum of elements in both subsets is equal. :param nums: List of integers :return: True if the list can be partitioned into two subsets with equal sum, False otherwise total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into two subsets with equal sum if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store whether a sum is possible with any subset of nums dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Given a sequence of parentheses, determine if it is balanced. A sequence is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the pairs of parentheses are properly nested. ```python def is_balanced_parentheses(sequence: str) -> bool: Given a string `sequence` consisting of parentheses characters \'(\', \')\', determine if the sequence is balanced. A sequence is balanced if: - Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. - The pairs of parentheses are properly nested. Examples: >>> is_balanced_parentheses(\\"()\\") True >>> is_balanced_parentheses(\\"(()\\") False >>> is_balanced_parentheses(\\"()()\\") True >>> is_balanced_parentheses(\\"(())\\") True >>> is_balanced_parentheses(\\")(\\") False Args: sequence (str): The input string to check. Returns: bool: True if the parentheses sequence is balanced, False otherwise. # Your solution goes here ```","solution":"def is_balanced_parentheses(sequence: str) -> bool: Given a string `sequence` consisting of parentheses characters \'(\', \')\', determine if the sequence is balanced. A sequence is balanced if: - Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. - The pairs of parentheses are properly nested. Examples: >>> is_balanced_parentheses(\\"()\\") True >>> is_balanced_parentheses(\\"(()\\") False >>> is_balanced_parentheses(\\"()()\\") True >>> is_balanced_parentheses(\\"(())\\") True >>> is_balanced_parentheses(\\")(\\") False Args: sequence (str): The input string to check. Returns: bool: True if the parentheses sequence is balanced, False otherwise. stack = [] for char in sequence: if char == \'(\': stack.append(char) elif char == \')\': if not stack or stack.pop() != \'(\': return False return not stack"},{"question":"Write a function to perform matrix multiplication on two non-empty matrices A and B where A has dimensions m x n and B has dimensions n x p. Store the result in matrix C with dimensions m x p and return it. Ensure the function handles cases where the number of columns in A is equal to the number of rows in B. A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]]","solution":"def matrix_multiply(A, B): Multiplies two matrices A and B and returns the result matrix C. Assumes the number of columns in A is equal to the number of rows in B. m = len(A) n = len(A[0]) p = len(B[0]) # Initialize result matrix C with zeros C = [[0] * p for _ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C"},{"question":"Design an algorithm to optimize the distribution of resources among a network of interconnected nodes in real-time, ensuring minimal latency and maximum resource utilization. The algorithm should account for dynamic changes in the network, such as varying demand patterns and intermittent connectivity issues, and should be able to adapt accordingly. Additionally, implement a monitoring system that continuously analyzes the network performance and provides actionable insights to preemptively address potential bottlenecks.","solution":"import heapq import time from threading import Thread, Lock from collections import defaultdict class ResourceDistributionNetwork: def __init__(self): self.nodes = {} self.lock = Lock() def add_node(self, node_id, resources): with self.lock: if node_id not in self.nodes: self.nodes[node_id] = [] heapq.heappush(self.nodes[node_id], (-resources, resources)) def request_resources(self, node_id, amount): assigned_resources = 0 with self.lock: if node_id not in self.nodes or not self.nodes[node_id]: return assigned_resources heap = self.nodes[node_id] while amount > 0 and heap: _, resources = heapq.heappop(heap) allocatable = min(resources, amount) allocated_resources = (resources - allocatable, allocatable) if allocated_resources[0] > 0: heapq.heappush(heap, (-allocated_resources[0], allocated_resources[0])) amount -= allocatable assigned_resources += allocatable return assigned_resources def return_resources(self, node_id, amount): with self.lock: for res in amount: heapq.heappush(self.nodes[node_id], (-res, res)) class MonitoringSystem: def __init__(self, network, interval_sec=10): self.network = network self.interval_sec = interval_sec self.monitoring = False self.thread = Thread(target=self.monitor) def start(self): self.monitoring = True self.thread.start() def stop(self): self.monitoring = False if self.thread.is_alive(): self.thread.join() def monitor(self): while self.monitoring: self.analyze_network() time.sleep(self.interval_sec) def analyze_network(self): node_resources = {node: sum(res for _, res in heap) for node, heap in self.network.nodes.items()} bottlenecks = [] overprovisioned = [] for node, res in node_resources.items(): if res < 1: potential_resources = max(self.network.nodes.values(), key=lambda x: sum(r[1] for r in x)) if sum(r[1] for r in potential_resources) > 1: bottlenecks.append(node) elif res > 10: overprovisioned.append(node) self.report(node_resources, bottlenecks, overprovisioned) def report(self, node_resources, bottlenecks, overprovisioned): print(\\"Resource Utilization Report:\\") print(\\"Node Resources: \\", node_resources) print(\\"Bottlenecks: \\", bottlenecks) print(\\"Overprovisioned: \\", overprovisioned) # Example use: network = ResourceDistributionNetwork() network.add_node(\'A\', 10) network.add_node(\'B\', 5) network.add_node(\'C\', 20) monitor = MonitoringSystem(network) monitor.start() # To stop monitoring monitor.stop()"},{"question":"Given the following incomplete code snippet and dataset for movie ratings, complete the code to calculate the average rating for each movie. The dataset is given in a CSV file with the columns: \'MovieID\', \'Title\', \'Year\', and \'Rating\'. Your task is to: 1. Read the CSV file using pandas. 2. Group the data by \'Title\' and \'Year\', then calculate the average rating for each movie. 3. Save the resulting DataFrame with the columns \'Title\', \'Year\', and \'AverageRating\' to a new CSV file. The incomplete code is as follows: ```python import pandas as pd def calculate_average_ratings(file_path): # Step 1: Read CSV file into a DataFrame data = pd._________________(file_path) # Step 2: Group by \'Title\' and \'Year\' and calculate the average rating average_ratings = data.groupby([\'__________\', \'__________\'])[\'Rating\']._________________() # Step 3: Reset the index of the resulting DataFrame average_ratings = average_ratings._________________() # Step 4: Rename the columns appropriately average_ratings.columns = [\'Title\', \'Year\', \'AverageRating\'] # Step 5: Save the result to a new CSV file average_ratings.to_csv(\'average_ratings.csv\', index=False) # Example usage calculate_average_ratings(\'movie_ratings.csv\') ``` Fill in the blanks in the provided incomplete code with appropriate pandas functions and methods to achieve the desired functionality.","solution":"import pandas as pd def calculate_average_ratings(file_path): # Step 1: Read CSV file into a DataFrame data = pd.read_csv(file_path) # Step 2: Group by \'Title\' and \'Year\' and calculate the average rating average_ratings = data.groupby([\'Title\', \'Year\'])[\'Rating\'].mean() # Step 3: Reset the index of the resulting DataFrame average_ratings = average_ratings.reset_index() # Step 4: Rename the columns appropriately average_ratings.columns = [\'Title\', \'Year\', \'AverageRating\'] # Step 5: Save the result to a new CSV file average_ratings.to_csv(\'average_ratings.csv\', index=False) # Example usage # calculate_average_ratings(\'movie_ratings.csv\')"},{"question":"Implement a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your implementation should have a time complexity that performs adequately for lists containing up to 10,000 integers. Be sure to handle edge cases, such as empty lists and lists without any prime numbers.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the input list of integers. Parameters: numbers (list): A list of integers Returns: list: A list containing only the prime numbers from the original list return [num for num in numbers if is_prime(num)]"},{"question":"Write a function to transpose a given matrix. The function should take a matrix of size n x m as input and return its transpose of size m x n. The transpose of a matrix is obtained by switching the rows and columns. Example: Input: matrix = [ [1, 2, 3], [4, 5, 6] ] Output: transpose = [ [1, 4], [2, 5], [3, 6] ]","solution":"def transpose(matrix): Returns the transpose of the given matrix. Parameters: matrix (list of list of int): The matrix to be transposed. Returns: list of list of int: The transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Suppose you are developing an archival system for a massive collection of rare books in a library. Each book has a unique identifier (ID) and is stored in a specific section of the library. The sections are organized in a hierarchical manner: a library has multiple floors, each floor has multiple sections (or rooms), and each section contains multiple shelves. You need to develop a function that, given the identifiers of two books, returns a list of all book IDs located in the same section as these two books. The input for the function consists of: 1. A dictionary mapping each book ID to its full location path. The path is represented as \\"Floor > Section > Shelf\\". 2. Two strings representing the book IDs. The function should: 1. Validate that both book IDs are present in the dictionary. 2. Identify the section where each book is located. 3. Return a list of book IDs that are in the same section as both input books, in ascending order. If any of the book IDs is not in the dictionary or if the books are not located in the same section, the function should return an empty list. Example: ```python library = { \\"B001\\": \\"1st Floor > A > Shelf 1\\", \\"B002\\": \\"1st Floor > A > Shelf 2\\", \\"B003\\": \\"1st Floor > B > Shelf 1\\", \\"B004\\": \\"2nd Floor > C > Shelf 1\\", \\"B005\\": \\"1st Floor > A > Shelf 3\\" } book_id1 = \\"B001\\" book_id2 = \\"B005\\" # The function should return: [\\"B001\\", \\"B002\\", \\"B005\\"] book_id1 = \\"B001\\" book_id2 = \\"B003\\" # The function should return: [] ``` Develop the function that performs the required operations and validates input as described. Ensure the function handles edge cases appropriately.","solution":"def find_books_in_same_section(library, book_id1, book_id2): Given the identifiers of two books, returns a list of all book IDs located in the same section as these two books. Parameters: library (dict): Dictionary mapping each book ID to its full location path. book_id1 (str): The first book ID. book_id2 (str): The second book ID. Returns: list: List of book IDs in the same section as both input books in ascending order. Returns an empty list if any book ID is not present in the dictionary or the books are not in the same section. # Validate if both book IDs are present in the dictionary if book_id1 not in library or book_id2 not in library: return [] # Split the location path to get floor, section and shelf location1 = library[book_id1].split(\\" > \\") location2 = library[book_id2].split(\\" > \\") # Check if both books are in the same section if location1[:2] != location2[:2]: return [] same_section_books = [ book_id for book_id, location in library.items() if location.split(\\" > \\")[:2] == location1[:2] ] return sorted(same_section_books) # Test the function with example input # library = { # \\"B001\\": \\"1st Floor > A > Shelf 1\\", # \\"B002\\": \\"1st Floor > A > Shelf 2\\", # \\"B003\\": \\"1st Floor > B > Shelf 1\\", # \\"B004\\": \\"2nd Floor > C > Shelf 1\\", # \\"B005\\": \\"1st Floor > A > Shelf 3\\" # } # # book_id1 = \\"B001\\" # book_id2 = \\"B005\\" # # The function should return: [\\"B001\\", \\"B002\\", \\"B005\\"] # # book_id1 = \\"B001\\" # book_id2 = \\"B003\\" # # The function should return: []"},{"question":"Devise a function to transform an integer array by rotating it `k` positions to the right. The length of the array `n` will be constrained to 10^5, and the shift `k` may be larger than `n`. The resulting array should configure the elements to their new positions according to the rotation. Complete the function: def rotate_array(arr: List[int], k: int) -> List[int]: Given an array of integers, implement an algorithm to rotate the elements to the right by k steps. Parameters: arr (List[int]): The array of integers k (int): The number of positions to rotate the array Returns: List[int]: The rotated array Examples: >>> rotate_array([1,2,3,4,5,6,7], 3) [5, 6, 7, 1, 2, 3, 4] >>> rotate_array([-1,-100,3,99], 2) [3, 99, -1, -100] Note: Ensure that your solution has a space complexity of O(1). # Code to be introduced here","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Given an array of integers, implement an algorithm to rotate the elements to the right by k steps. Parameters: arr (List[int]): The array of integers k (int): The number of positions to rotate the array Returns: List[int]: The rotated array if not arr: return arr n = len(arr) k = k % n # Normalize k to be within the array length # Perform the rotation using slicing rotated_array = arr[-k:] + arr[:-k] return rotated_array"},{"question":"Write a Python function that takes a string as input and returns the string with all its characters rearranged such that no two adjacent characters are the same. If it\'s not possible to rearrange the string in this manner, return an empty string. For example, input \\"aab\\" should return \\"aba\\" and input \\"aaab\\" should return \\"\\".","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If not possible, returns an empty string. if not s: return \\"\\" # Count the frequency of each character counter = Counter(s) max_heap = [] # Build a max heap of the counts for char, count in counter.items(): heappush(max_heap, (-count, char)) prev_char, prev_count = \\"\\", 0 result = [] while max_heap: count, char = heappop(max_heap) # Append the current char to the result and update the count result.append(char) if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update prev_char and decrement count prev_char = char prev_count = count + 1 rearranged = \'\'.join(result) # If the length of the rearranged string is different from the original, return empty string return rearranged if len(rearranged) == len(s) else \\"\\""},{"question":"Can you implement a function in Python to balance a given list of numbers into two subsets such that the absolute difference between the sums of the elements in the two subsets is minimized? Use a dynamic programming approach to solve this problem, and assume all numbers are non-negative.","solution":"def find_min_subset_difference(nums): Given a list of non-negative numbers, this function partitions it into two subsets such that the absolute difference between the sums of the subsets is minimized. Parameters: nums (List[int]): List of non-negative integers. Returns: int: The minimum difference between the sums of the two subsets. total_sum = sum(nums) n = len(nums) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in nums: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i"},{"question":"Write a Python function that takes a list of integers and returns a list of integers that appear more than once in the input list. The function should maintain the original order of their first occurrence. Make sure to handle edge cases gracefully, including when the input list is empty or contains non-integer values. If there are no duplicates, return an empty list. Example: Input: [4, 5, 6, 4, 8, 6, 7, 9] Output: [4, 6]","solution":"def find_duplicates(input_list): Returns a list of integers that appear more than once in the input list while maintaining the original order of their first occurrence. if not all(isinstance(x, int) for x in input_list): raise ValueError(\\"All elements of the input list must be integers\\") seen = set() duplicates = set() result = [] for num in input_list: if num in seen: if num not in duplicates: result.append(num) duplicates.add(num) else: seen.add(num) return result"},{"question":"Given an array of integers, return the smallest sorted list of consecutive integers that cover all the values in the array. For example, given the array: input_array = [6, 2, 4, -1, 5] The function should return: [-1, 0, 1, 2, 3, 4, 5, 6]","solution":"def smallest_sorted_consecutive_list(arr): Given an array of integers, returns the smallest sorted list of consecutive integers that cover all the values in the array. :param arr: List of integers :return: Smallest sorted list of consecutive integers if not arr: return [] min_value = min(arr) max_value = max(arr) return list(range(min_value, max_value + 1))"},{"question":"Write a function to determine if a given string `s` is a palindrome, considering only alphanumeric characters and ignoring cases. Your function should be named `isPalindrome`, and it should take a single string argument. The function should return `True` if the string is a palindrome and `False` otherwise. You are not allowed to use any built-in library functions for reversing the string. **Example:** ``` Input: \\"A man, a plan, a canal, Panama\\" Output: True Input: \\"race a car\\" Output: False ```","solution":"def isPalindrome(s): Determine if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. left, right = 0, len(s) - 1 while left < right: while left < right and not s[left].isalnum(): left += 1 while left < right and not s[right].isalnum(): right -= 1 if s[left].lower() != s[right].lower(): return False left += 1 right -= 1 return True"},{"question":"Create a function that evaluates a given string to verify whether it constitutes a valid palindrome, disregarding spaces and punctuation. For instance, the string s = \\"A man, a plan, a canal: Panama\\" should be identified as a palindrome, whereas the string s = \\"Hello, World!\\" should not. The function should be case insensitive.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces and punctuation. The function is case insensitive. import re # Convert to lowercase s = s.lower() # Remove all non-alphanumeric characters s = re.sub(r\'[^a-z0-9]\', \'\', s) # Check if the string is equal to its reverse return s == s[::-1]"},{"question":"Write a function to merge two sorted arrays into a single sorted array. Do not use any inbuilt sort functions. The function should take two arrays as input and return the merged and sorted array as output.","solution":"def merge_sorted_arrays(array1, array2): Merge two sorted arrays into a single sorted array. :param array1: List[int] - First sorted array. :param array2: List[int] - Second sorted array. :return: List[int] - Merged and sorted array. merged_array = [] i, j = 0, 0 # Traverse through both arrays while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # Collect remaining elements of array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # Collect remaining elements of array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Design a function that takes a 2D grid of characters and a word as inputs and finds if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. You need to implement this function: ```python def exist(board: List[List[str]], word: str) -> bool: ``` **Example:** ```python board = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" # returns True word2 = \\"SEE\\" # returns True word3 = \\"ABCB\\" # returns False ``` **Constraints:** - `board` and `word` may contain both uppercase and lowercase letters. - Your solution should be efficient enough to handle large grids as well as long words, ensuring that the algorithm\'s complexity is manageable. Consider edge cases such as: - The word being longer than the total number of cells in the board. - The word containing repeating characters. Discuss the time complexity of your algorithm and what makes it optimal for large data sets.","solution":"from typing import List def exist(board: List[List[str]], word: str) -> bool: rows, cols = len(board), len(board[0]) def backtrack(r: int, c: int, suffix: str) -> bool: if len(suffix) == 0: return True if r < 0 or r >= rows or c < 0 or c >= cols or board[r][c] != suffix[0]: return False ret = False board[r][c] = \\"#\\" for row_offset, col_offset in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ret = backtrack(r + row_offset, c + col_offset, suffix[1:]) if ret: break board[r][c] = suffix[0] return ret for row in range(rows): for col in range(cols): if backtrack(row, col, word): return True return False"},{"question":"Create a function that takes a list of integers and a target sum as inputs. The function should return whether there are any two distinct elements in the list that add up to the target sum. You should consider all possible pairs in the list and return `True` if a pair exists, and `False` otherwise. Make sure your function handles edge cases, such as an empty list or a list with fewer than two elements. Provide an example list and valid target sum for erroneous code that does not handle repeated elements correctly: ```python def has_pair_with_sum(numbers, target): for i in range(len(numbers)): for j in range(i + 1, len(numbers)): if numbers[i] + numbers[j] == target: return True return False # Example usage: # numbers = [1, 2, 3, 9] # target = 8 # Expected output: False ``` This incorrect function assumes that any two elements, even if repetitively included in the sum calculation, can form the pair. The function should correctly identify distinct pairs of numbers that meet the target sum.","solution":"def has_pair_with_sum(numbers, target): Returns True if there are two distinct elements in the list that add up to the target sum. Otherwise, returns False. seen_numbers = set() for number in numbers: compliment = target - number if compliment in seen_numbers: return True seen_numbers.add(number) return False"},{"question":"Write a function that simulates a small library system where users can borrow and return books. The function should keep track of available inventory and borrowed books for multiple users. It should also handle potential errors such as trying to borrow a book that isn\'t available or returning a book that wasn\'t borrowed. Implement the following operations: 1. `borrow_book(user, book)` - Borrow a book for a user if it\'s available. 2. `return_book(user, book)` - Return a borrowed book. 3. `list_available_books()` - Display all available books. 4. `list_borrowed_books(user)` - Display all books borrowed by a specific user. Assume there is a predefined list of books available in the library. Utilize appropriate exception handling to manage invalid operations. Here is some sample code to help you get started: ```python class Library: def __init__(self): # Initialize with a predefined list of books self.books_inventory = {\\"The Great Gatsby\\": 3, \\"1984\\": 5, \\"To Kill a Mockingbird\\": 2} self.borrowed_books = {} def borrow_book(self, user, book): # Implement the logic of borrowing a book def return_book(self, user, book): # Implement the logic of returning a book def list_available_books(self): # Implement the logic of displaying available books def list_borrowed_books(self, user): # Implement the logic of displaying borrowed books for a user # Example Usage library = Library() library.borrow_book(\\"Alice\\", \\"1984\\") library.return_book(\\"Alice\\", \\"1984\\") library.list_available_books() library.list_borrowed_books(\\"Alice\\") ``` Note: Handle the edge cases where `user` or `book` might not exist in the current records, and ensure updates to inventories and borrowed lists are accurate.","solution":"class BookNotAvailableError(Exception): pass class BookNotBorrowedError(Exception): pass class Library: def __init__(self): # Initialize with a predefined list of books self.books_inventory = {\\"The Great Gatsby\\": 3, \\"1984\\": 5, \\"To Kill a Mockingbird\\": 2} self.borrowed_books = {} def borrow_book(self, user, book): if self.books_inventory.get(book, 0) > 0: self.books_inventory[book] -= 1 if user not in self.borrowed_books: self.borrowed_books[user] = [] self.borrowed_books[user].append(book) else: raise BookNotAvailableError(f\\"Book \'{book}\' is not available for borrowing\\") def return_book(self, user, book): if user in self.borrowed_books and book in self.borrowed_books[user]: self.borrowed_books[user].remove(book) self.books_inventory[book] += 1 else: raise BookNotBorrowedError(f\\"Book \'{book}\' was not borrowed by user \'{user}\'\\") def list_available_books(self): return self.books_inventory def list_borrowed_books(self, user): return self.borrowed_books.get(user, [])"},{"question":"Can you implement a function to predict house prices utilizing linear regression in Python? Use a provided dataset that includes various features like number of bedrooms, bathrooms, square footage, and location. Ensure to train the model with the dataset, test its accuracy with a separate test set, and then refine the model to improve its predictive performance. Additionally, create a visualization to compare the predicted prices with the actual prices from the test set.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, r2_score import matplotlib.pyplot as plt def predict_house_prices(dataframe): Train a Linear Regression model to predict house prices based on input features. # Split the data into features and target X = dataframe.drop(columns=\'price\') y = dataframe[\'price\'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Initialize and train the Linear Regression model model = LinearRegression() model.fit(X_train, y_train) # Predict on the test set y_pred = model.predict(X_test) # Calculate performance metrics mse = mean_squared_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) # Visualization plt.scatter(y_test, y_pred) plt.xlabel(\'Actual Prices\') plt.ylabel(\'Predicted Prices\') plt.title(\'Actual vs Predicted House Prices\') plt.plot([y.min(), y.max()], [y.min(), y.max()], color=\'red\', linewidth=2) plt.show() return model, mse, r2"},{"question":"Develop a Python function that takes in a string and returns a dictionary where the keys are the characters in the string and the values are the frequency of their occurrence, but only for characters that appear more than once.","solution":"def char_frequency(s): Returns a dictionary with characters that appear more than once in the string s and their frequency of occurrence. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return {char: count for char, count in frequency.items() if count > 1}"},{"question":"Suppose you are given a rectangular garden plot that you want to enclose with a fence and subdivide into two smaller rectangular plots using an additional length of the fencing. You have a total of 200 meters of fencing available. You want to maximize the total area of the two smaller plots. Formally, let the entire rectangular plot have dimensions of length L and width W that need to be found such that: 1. The total length of fencing used is exactly 200 meters. 2. The area of the enclosed rectangular garden is maximized. 3. The additional piece of fencing used to subdivide the garden is placed parallel to one of the sides of the rectangle. Write a Python function that calculates the optimal dimensions of the entire garden (length L and width W), as well as the maximum area that can be achieved. Use the SymPy library to solve this optimization problem. Here’s an example of an erroneous code snippet for reference: ```python import sympy def optimize_garden(): L, W = sympy.symbols(\'L W\') perimeter_eq = 2*L + 3*W - 200 area_expr = L*W solutions = sympy.solve((perimeter_eq, W), (L, W)) max_area = sympy.maximize(area_expr, (L, W)) return solutions, max_area ``` Identify the errors in the above code, explain them, and correct the script as necessary. Ensure that your function correctly maximizes the area of the garden while adhering to the fencing constraint. Make sure to include all relevant mathematical steps and assumptions made in solving this problem. The question will require a good understanding of algebra, optimization techniques, and proficiency in the SymPy library.","solution":"import sympy as sp def optimize_garden(): L, W = sp.symbols(\'L W\', real=True, positive=True) # Perimeter constraint perimeter_eq = 2 * L + 3 * W - 200 # Solve the perimeter constraint for L L_expr = sp.solve(perimeter_eq, L)[0] # Area expression A = L * W area_expr = L_expr * W # Take derivative of area with respect to W derivative_area = sp.diff(area_expr, W) # Solve the critical points, where the derivative is 0 critical_points = sp.solve(derivative_area, W) # Verify and select the critical point that maximizes the area second_derivative = sp.diff(derivative_area, W) max_area = 0 optimal_W = None optimal_L = None for w in critical_points: if second_derivative.subs(W, w) < 0: # Second derivative test for max L_val = L_expr.subs(W, w) area_val = area_expr.subs(W, w) if area_val > max_area: max_area = area_val optimal_W = w optimal_L = L_val return optimal_L.evalf(), optimal_W.evalf(), max_area.evalf() # Test the function optimize_garden()"},{"question":"Write a function `sum_of_unique_abs_pairs(nums)` that accepts a list of integers `nums` and returns the sum of the absolute values of the unique integer pairs that add up to zero. A pair `[a, -a]` and `[-a, a]` should be considered the same and only counted once. For example: ```python sum_of_unique_abs_pairs([1, -1, 2, -2, 3, 1, -1]) == 6 sum_of_unique_abs_pairs([3, -3, -3, 3, 2, 2]) == 6 sum_of_unique_abs_pairs([1, 2, 3]) == 0 ``` # Function Signature ```python def sum_of_unique_abs_pairs(nums): This function takes in a list of integers `nums` and returns the sum of the absolute values of the unique pairs of integers that add up to zero. :param nums: List[int] - a list of integers. :return: int - the sum of the absolute values of the unique pairs adding to zero. ```","solution":"def sum_of_unique_abs_pairs(nums): This function takes in a list of integers `nums` and returns the sum of the absolute values of the unique pairs of integers that add up to zero. :param nums: List[int] - a list of integers. :return: int - the sum of the absolute values of the unique pairs adding to zero. num_set = set(nums) result = 0 for num in num_set: if -num in num_set and num > 0: result += abs(num) return result * 2"},{"question":"Design and implement a function that takes a string of words separated by spaces as input and returns the string with the order of the words reversed. You must ensure that any extra spaces between words in the input string are removed in the output string. Additionally, handle edge cases such as an empty string or a string with only spaces appropriately. The function should maintain the same letter case of the provided string.","solution":"def reverse_words(input_str): Reverses the order of words in a given string, removing any extra spaces. Parameters: input_str (str): The string of words separated by spaces. Returns: str: The string with the order of words reversed and extra spaces removed. # Split the string by spaces to get the words, automatically removing extra spaces words = input_str.split() # Reverse the list of words reversed_words = words[::-1] # Join the words back into a string with a single space result = \' \'.join(reversed_words) return result"},{"question":"Create a Python function that simulates a simplified checkout process in a grocery store. The function should take a list of items, where each item is represented by a tuple containing the item name and its price. The function should output the total price of all items, while also applying a discount if the total price exceeds a specified threshold. The discount rate and threshold should be parameters to the function. Ensure the function handles edge cases like empty lists and negative prices gracefully, providing appropriate error messages in such cases.","solution":"def checkout(items, discount_threshold=100, discount_rate=0.1): Simulates a simplified checkout process. Parameters: - items (list of tuples): List of items, where each item is represented by a tuple containing the item name (str) and price (float). - discount_threshold (float): The price threshold above which a discount is applied. - discount_rate (float): The discount rate to be applied if the total price exceeds the discount_threshold. Returns: - total (float): The total price after applying any discounts. Raises: - ValueError: If an item has a negative price or if the items list is empty. if not items: raise ValueError(\\"The list of items cannot be empty.\\") total = 0 for item in items: name, price = item if price < 0: raise ValueError(f\\"Item \'{name}\' has a negative price.\\") total += price if total > discount_threshold: discount = total * discount_rate total -= discount return total"},{"question":"Write a function `two_sum(nums, target)` that takes in a list of integers `nums` and an integer `target`. The function should return a tuple of indices of two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. For example: ``` two_sum([2, 7, 11, 15], 9) # returns (0, 1) because nums[0] + nums[1] == 9 two_sum([3, 2, 4], 6) # returns (1, 2) because nums[1] + nums[2] == 6 two_sum([3, 3], 6) # returns (0, 1) because nums[0] + nums[1] == 6 ```","solution":"def two_sum(nums, target): Returns a tuple of indices of two numbers from the list such that they add up to the target. :param nums: List of integers :param target: Integer target sum :return: Tuple of indices of the two numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i # We assume there\'s exactly one solution as per the problem statement. return (-1, -1)"},{"question":"Develop a feature to recommend books in an online library system using collaborative filtering. The system needs to analyze historical data of user interactions, such as book ratings and borrowing history, to identify patterns and suggest books that users might like. Ensure that the recommendation engine is scalable and can handle the large volumes of data typical for a popular library system. Additionally, integrate a mechanism to measure the accuracy and effectiveness of the recommendations.","solution":"import pandas as pd import numpy as np from sklearn.metrics.pairwise import cosine_similarity class CollaborativeFilteringRecommender: def __init__(self): self.user_ratings_matrix = None self.similarity_matrix = None def fit(self, ratings): Fit the collaborative filtering model. Parameters: ratings (pd.DataFrame): DataFrame containing user\'s ratings with columns [\'user_id\', \'book_id\', \'rating\'] self.user_ratings_matrix = ratings.pivot(index=\'user_id\', columns=\'book_id\', values=\'rating\').fillna(0) self.similarity_matrix = cosine_similarity(self.user_ratings_matrix) self.similarity_matrix = pd.DataFrame(self.similarity_matrix, index=self.user_ratings_matrix.index, columns=self.user_ratings_matrix.index) def recommend(self, user_id, num_recommendations=5): Recommend books for a given user. Parameters: user_id (int): ID of the user to whom recommendations are to be made num_recommendations (int): Number of book recommendations Returns: list: List of book IDs recommended for the user user_similarity_scores = self.similarity_matrix[user_id] similar_users = user_similarity_scores.sort_values(ascending=False).index.tolist() user_ratings = self.user_ratings_matrix.loc[user_id] already_rated = user_ratings[user_ratings > 0].index.tolist() recommendations = [] for similar_user in similar_users: if similar_user != user_id: similar_user_ratings = self.user_ratings_matrix.loc[similar_user] for book_id, rating in similar_user_ratings.items(): if book_id not in already_rated and book_id not in recommendations: recommendations.append(book_id) if len(recommendations) >= num_recommendations: break if len(recommendations) >= num_recommendations: break return recommendations def evaluate(self, test_ratings): Evaluate the accuracy of the recommendations. Parameters: test_ratings (pd.DataFrame): DataFrame containing user\'s ratings with columns [\'user_id\', \'book_id\', \'rating\'] Returns: float: Mean squared error of the predictions test_ratings_matrix = test_ratings.pivot(index=\'user_id\', columns=\'book_id\', values=\'rating\').fillna(0) mse = 0 total_ratings = 0 for user_id, user_ratings in test_ratings_matrix.iterrows(): predictions = self.recommend(user_id, num_recommendations=len(user_ratings)) actual_ratings = user_ratings[user_ratings > 0] total_ratings += len(actual_ratings) for book_id in predictions: if book_id in actual_ratings: mse += (actual_ratings[book_id] - 5) ** 2 mse /= total_ratings return mse"},{"question":"Write a function that takes an integer `n` as input and returns a list of all the prime numbers less than `n`. Additionally, the function should return the count of these prime numbers. Implement an efficient solution that accounts for time complexity. **Example:** ```python def primes_less_than(n): # Your code here # Examples print(primes_less_than(10)) # Output: ([2, 3, 5, 7], 4) print(primes_less_than(20)) # Output: ([2, 3, 5, 7, 11, 13, 17, 19], 8) ```","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n and the count of these prime numbers. if n <= 2: return [], 0 sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes, len(primes) # Examples print(primes_less_than(10)) # Output: ([2, 3, 5, 7], 4) print(primes_less_than(20)) # Output: ([2, 3, 5, 7, 11, 13, 17, 19], 8)"},{"question":"Given a string representing a mathematical expression containing digits, \'+\', \'-\', \'*\', \'/\' operators, and parentheses, implement a function to evaluate and return the result of the expression following standard mathematical precedence rules. You do not need to handle invalid input. Example: ```python expression = \\"3 + (2 - 1) * 5 / 2\\" def evaluate_expression(expression: str) -> float: pass print(evaluate_expression(expression)) # Output should be 5.5 ``` Design an algorithm to parse and evaluate the expression correctly, taking into account the precedence of operators and the use of parentheses.","solution":"def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression string containing digits, \'+\', \'-\', \'*\', \'/\', and parentheses. def parse_expression(expr): Helper function to parse the expression and get a result. ops = [] nums = [] i = 0 while i < len(expr): if expr[i].isdigit(): num = 0 while i < len(expr) and expr[i].isdigit(): num = num * 10 + int(expr[i]) i += 1 nums.append(num) elif expr[i] in \\"+-*/\\": while (ops and ops[-1] in \\"*/\\" and expr[i] in \\"+-\\") or (ops and ops[-1] in \\"*/\\" and expr[i] in \\"*/\\"): perform_operation(nums, ops) ops.append(expr[i]) i += 1 elif expr[i] == \\"(\\": ops.append(expr[i]) i += 1 elif expr[i] == \\")\\": while ops and ops[-1] != \\"(\\": perform_operation(nums, ops) ops.pop() # Remove the \\"(\\" i += 1 else: i += 1 while ops: perform_operation(nums, ops) return nums[0] def perform_operation(nums, ops): Helper function to perform an operation. right = nums.pop() left = nums.pop() op = ops.pop() if op == \'+\': nums.append(left + right) elif op == \'-\': nums.append(left - right) elif op == \'*\': nums.append(left * right) elif op == \'/\': nums.append(left / right) clean_expr = expression.replace(\\" \\", \\"\\") return parse_expression(clean_expr)"},{"question":"You are tasked with creating a Python function that determines whether an input string can be rearranged into a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your function should ignore all non-alphanumeric characters and treat uppercase and lowercase letters as equivalent. Additionally, you are provided with an erroneous piece of code for reference. Your task is not only to fix the errors within it but also to enhance the logic to meet the specified requirements. Erroneous Code: ```python def can_form_palindrome(s): s = \'\'.join(e for e in s if e.isalnum()) s = s.lower() return s == s[::-1] print(can_form_palindrome(\\"A man, a plan, a canal, Panama!\\")) # Example test case ``` Note: The erroneous code incorrectly checks if the original string is already a palindrome, rather than checking if any permutation of the string can form a palindrome. Enhance the provided code to check if a permutation of the input string can be a palindrome, instead of simply verifying the input string itself.","solution":"def can_form_palindrome(s): Determines whether any permutation of the input string can be rearranged into a palindrome. A string can be rearranged into a palindrome if at most one character has an odd frequency count, and all other characters have even frequency counts. Non-alphanumeric characters are ignored, and uppercase and lowercase letters are treated as equivalent. :param s: The input string :return: True if the input string can be rearranged into a palindrome, False otherwise from collections import Counter # Normalize the string: remove non-alphanumeric characters and convert to lowercase s = \'\'.join(e for e in s if e.isalnum()).lower() # Count frequency of each character char_count = Counter(s) # Check how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be permuted to form a palindrome if there is at most one character with an odd count return odd_count <= 1"},{"question":"Implement a queue data structure using two stacks in Python. The queue should support the standard enqueue and dequeue operations. Ensure that these operations have an amortized time complexity of O(1). Provide an explanation of how your implementation works and demonstrate its functionality with a sample use case.","solution":"class QueueUsingStacks: def __init__(self): Initialize your data structure here. self.stack1 = [] self.stack2 = [] def enqueue(self, x): Push element x to the back of queue. :type x: int :rtype: void self.stack1.append(x) def dequeue(self): Removes the element from in front of the queue and returns that element. :rtype: int if not self.stack2: # Only transfer from stack1 to stack2 if stack2 is empty while self.stack1: self.stack2.append(self.stack1.pop()) return self.stack2.pop() if self.stack2 else None # Sample use case: # q = QueueUsingStacks() # q.enqueue(1) # q.enqueue(2) # print(q.dequeue()) # returns 1 # q.enqueue(3) # print(q.dequeue()) # returns 2"},{"question":"Write a Python function called `invert_dictionary` that takes a dictionary as input and returns a new dictionary with inverted key-value pairs. Specifically, any value from the original dictionary should become a key in the new dictionary, and the corresponding key from the original dictionary should be added to a list of values for the new dictionary. For example, given this input dictionary: ```python { \'a\': 1, \'b\': 2, \'c\': 1 } ``` The function should return: ```python { 1: [\'a\', \'c\'], 2: [\'b\'] } ``` If the original dictionary contains any duplicate values, they should all be appended to the list for that value in the inverted dictionary. Your function should handle cases where the input dictionary is empty or contains only one key-value pair. Provide the complete implementation of the function.","solution":"def invert_dictionary(d): Inverts a dictionary such that each value becomes a key and each key becomes part of a list of values. Parameters: d (dict): The dictionary to invert. Returns: dict: The inverted dictionary. inverted_dict = {} for key, value in d.items(): if value not in inverted_dict: inverted_dict[value] = [] inverted_dict[value].append(key) return inverted_dict"},{"question":"Write a Python function that takes a dictionary as an input where the keys are strings and the values are lists of integers. Your task is to remove the key-value pair where the list has the fewest elements. In case of a tie, remove the key-value pair that comes first lexicographically. Return the modified dictionary after the removal. Example: ```python input_dict = { \\"apple\\": [1, 2, 3], \\"banana\\": [4, 5], \\"cherry\\": [6, 7, 8, 9], \\"date\\": [10, 11] } Output: { \\"apple\\": [1, 2, 3], \\"cherry\\": [6, 7, 8, 9], \\"date\\": [10, 11] } ``` In the given example, \\"banana\\" and \\"date\\" both have lists of 2 elements, but \\"banana\\" is lexicographically smaller, so it is removed.","solution":"def remove_key_with_fewest_elements(input_dict): Remove the key-value pair with the fewest elements in the list. In case of a tie, removes the lexicographically first key. if not input_dict: return input_dict keys = list(input_dict.keys()) min_len = min(len(input_dict[k]) for k in keys) # Finding candidates with minimum length lists candidates = [k for k in keys if len(input_dict[k]) == min_len] # Identify the lexicographically first key key_to_remove = min(candidates) # Remove the identified key del input_dict[key_to_remove] return input_dict"},{"question":"Design a function `matrix_diagonal_sum` that takes an `n x n` matrix (a list of lists) and returns the sum of the elements along both the main diagonal and the secondary diagonal. For a given `n x n` matrix: - The main diagonal comprises elements where the row index is equal to the column index (i.e., `matrix[i][i]`). - The secondary diagonal comprises elements where the row index and column index sum to `n - 1` (i.e., `matrix[i][n - i - 1]`). Function signature: `def matrix_diagonal_sum(matrix: List[List[int]]) -> int` # Constraints: - The matrix is guaranteed to be square (i.e., the number of rows and columns are the same). - `1 <= n <= 100` - Each element in the matrix is an integer between `-1000` and `1000`. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert matrix_diagonal_sum(matrix) == 25 # Explanation: # Main diagonal: 1 + 5 + 9 = 15 # Secondary diagonal: 3 + 5 + 7 = 15 # Sum of both diagonals considering the middle element (5) only once: 15 + 15 - 5 = 25 ``` # Notes: - If the matrix size is odd, the center element of the matrix will be counted twice, so it should be subtracted once from the total sum.","solution":"from typing import List def matrix_diagonal_sum(matrix: List[List[int]]) -> int: n = len(matrix) main_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n - i - 1] for i in range(n)) total_diagonal_sum = main_diagonal_sum + secondary_diagonal_sum # If n is odd, subtract the middle element which is counted twice if n % 2 == 1: total_diagonal_sum -= matrix[n // 2][n // 2] return total_diagonal_sum"},{"question":"Implement a program that takes a user\'s birthdate as input in the format \\"YYYY-MM-DD\\". The program should then compute the user\'s age in years, months, and days and output it in a human-readable format. Additionally, the program needs to determine and display the day of the week on which the user was born. The output should follow this structure: 1. \\"You are X years, Y months, and Z days old.\\" 2. \\"You were born on a [Day of the Week].\\" To accomplish this task, ensure that the program handles various edge cases, such as leap years and different month lengths, while ensuring proper validation of the provided birthdate.","solution":"from datetime import datetime def calculate_age_and_birthday(birthdate): Calculates the age in years, months, and days, and determines the day of the week for a given birthdate. Parameters: birthdate (str): Birthdate in the format \'YYYY-MM-DD\'. Returns: str: Age in years, months, and days. str: Day of the week the user was born. # Parse the birthdate birth_date = datetime.strptime(birthdate, \\"%Y-%m-%d\\") today = datetime.today() # Calculate age in years, months, and days age_years = today.year - birth_date.year age_months = today.month - birth_date.month age_days = today.day - birth_date.day if age_days < 0: age_months -= 1 age_days += (birth_date.replace(month=birth_date.month % 12 + 1, day=1) - birth_date.replace(day=1)).days if age_months < 0: age_years -= 1 age_months += 12 # Get day of the week user was born day_of_week = birth_date.strftime(\\"%A\\") return f\\"You are {age_years} years, {age_months} months, and {age_days} days old.\\", f\\"You were born on a {day_of_week}.\\""},{"question":"You are given a file containing comma-separated values (CSV) with employee information that includes employee ID, name, and salary. Write a Python function that reads this file and performs the following operations: 1. Print the total number of employees. 2. Calculate the average salary of all employees and print the result. 3. Identify and print the details (employee ID, name, and salary) of the employee(s) with the highest salary. Assume the CSV file has the following structure without headers: <employee_id>,<name>,<salary> For example, given a CSV file \\"employees.csv\\" with the following content: 1,John Doe,50000 2,Jane Smith,60000 3,Emily Davis,55000 4,Bob Brown,60000 Your function should print: Total number of employees: 4 Average salary: 56250.0 Employee(s) with the highest salary: 2, Jane Smith, 60000 4, Bob Brown, 60000 Write the function to achieve the above behavior. Ensure it handles scenarios where there might be multiple employees with the highest salary.","solution":"import csv def process_employee_file(file_path): employees = [] with open(file_path, mode=\'r\') as file: reader = csv.reader(file) for row in reader: if row: # Check if the row is not empty employee_id, name, salary = row employees.append((int(employee_id), name, float(salary))) if not employees: print(\\"No employee data found.\\") return total_employees = len(employees) total_salary = sum(e[2] for e in employees) average_salary = total_salary / total_employees highest_salary = max(e[2] for e in employees) highest_salary_employees = [e for e in employees if e[2] == highest_salary] print(f\\"Total number of employees: {total_employees}\\") print(f\\"Average salary: {average_salary:.2f}\\") print(\\"Employee(s) with the highest salary:\\") for employee in highest_salary_employees: print(f\\"{employee[0]}, {employee[1]}, {employee[2]:.2f}\\") # Example usage # process_employee_file(\'employees.csv\')"},{"question":"Implement a function that simulates a basic vending machine. The vending machine will: - Accept a list of integers representing coins inserted (with values of 1, 5, 10, 25). - Have a predefined list of items with their prices (for example, {\\"soda\\": 125, \\"water\\": 100, \\"chips\\": 50}). - Provide an interface to select an item and return the change or indicate insufficient funds. Your function should: 1. Accept coins as a parameter to update the current balance in the machine. 2. Provide the current balance upon request. 3. Allow selection of an item and handle the purchase if sufficient funds are available, returning any change. If funds are insufficient, return an appropriate message. Implement the class `VendingMachine` with the functions: - `insert_coins(coins: List[int]) -> None` - `get_current_balance() -> int` - `select_item(item: str) -> Union[str, Tuple[str, int]]` Example: ```python vm = VendingMachine() vm.insert_coins([25, 25, 25, 25]) print(vm.get_current_balance()) # Output: 100 print(vm.select_item(\\"chips\\")) # Output: (\\"chips\\", 50) print(vm.insert_coins([25, 25, 25, 25, 25])) print(vm.select_item(\\"soda\\")) # Output: (\\"soda\\", 100) print(vm.select_item(\\"water\\")) # Output: \\"Insufficient funds\\" ```","solution":"from typing import List, Union, Tuple class VendingMachine: def __init__(self): self.balance = 0 self.items = { \\"soda\\": 125, \\"water\\": 100, \\"chips\\": 50 } def insert_coins(self, coins: List[int]) -> None: valid_coins = {1, 5, 10, 25} for coin in coins: if coin in valid_coins: self.balance += coin def get_current_balance(self) -> int: return self.balance def select_item(self, item: str) -> Union[str, Tuple[str, int]]: if item not in self.items: return \\"Item not available\\" item_price = self.items[item] if self.balance >= item_price: self.balance -= item_price return (item, self.balance) else: return \\"Insufficient funds\\""},{"question":"A local bakery sells donuts each morning, but there\'s a catch: the more donuts you buy, the cheaper each donut becomes. The bakery has the following pricing tiers: - 1-4 donuts: 1.00 each - 5-9 donuts: 0.95 each - 10-19 donuts: 0.90 each - 20 or more donuts: 0.85 each Write a function `calculate_total_cost` that takes an integer `n` representing the number of donuts and returns the total cost as a float with two decimal places. Implement this function without using any conditional statements (e.g., if-else) or loops. **Example**: ```python calculate_total_cost(3) -> 3.00 calculate_total_cost(5) -> 4.75 calculate_total_cost(10) -> 9.00 calculate_total_cost(25) -> 21.25 ```","solution":"def calculate_total_cost(n): Returns the total cost for n number of donuts based on the bakery\'s pricing tiers. return round( n * ( (n >= 1) * (n <= 4) * 1.00 + (n >= 5) * (n <= 9) * 0.95 + (n >= 10) * (n <= 19) * 0.90 + (n >= 20) * 0.85 ), 2 )"},{"question":"Implement a binary search algorithm in Python and explain its benefits over a linear search with respect to time complexity. Additionally, inspect the given implementation of the binary search algorithm, identify the flaws, and provide the necessary corrections to ensure it operates correctly. ```python def binary_search(arr, target): left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 # Sample usage array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target_value = 6 print(\\"Target found at index:\\", binary_search(array, target_value)) ``` In this provided binary search implementation, several errors could hinder the proper functioning of the algorithm. Explain what these issues are and adjust the code accordingly to fix them.","solution":"def binary_search(arr, target): left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function in Python that simulates a basic banking system. Implement the following functionalities: 1. **Create an Account**: Create a new account with a unique account number and an initial balance. 2. **Deposit**: Deposit a specified amount into an account. 3. **Withdraw**: Withdraw a specified amount from an account, ensuring the account has sufficient funds. 4. **Check Balance**: Check and return the current balance of an account. The functions should raise appropriate exceptions for errors such as invalid account numbers or insufficient funds. Design a simple command line interface to interact with the banking system, allowing users to select the desired operation and input necessary details. Example Structure: ```python class InsufficientFundsException(Exception): pass class AccountNotFoundException(Exception): pass class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number, initial_balance): pass def deposit(self, account_number, amount): pass def withdraw(self, account_number, amount): pass def check_balance(self, account_number): pass def main(): # Command line interface logic: bank = Bank() while True: command = input(\\"Enter command (create, deposit, withdraw, balance, exit): \\") if command == \\"create\\": account_number = input(\\"Enter account number: \\") initial_balance = float(input(\\"Enter initial balance: \\")) bank.create_account(account_number, initial_balance) elif command == \\"deposit\\": account_number = input(\\"Enter account number: \\") amount = float(input(\\"Enter deposit amount: \\")) bank.deposit(account_number, amount) elif command == \\"withdraw\\": account_number = input(\\"Enter account number: \\") amount = float(input(\\"Enter withdrawal amount: \\")) bank.withdraw(account_number, amount) elif command == \\"balance\\": account_number = input(\\"Enter account number: \\") print(f\\"Current balance: {bank.check_balance(account_number)}\\") elif command == \\"exit\\": break ``` Provide a clear explanation of the requirements and functionality for the developers to implement.","solution":"class InsufficientFundsException(Exception): pass class AccountNotFoundException(Exception): pass class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number, initial_balance): if account_number in self.accounts: raise ValueError(\\"Account number already exists.\\") self.accounts[account_number] = initial_balance def deposit(self, account_number, amount): if account_number not in self.accounts: raise AccountNotFoundException(\\"Account not found.\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.accounts[account_number] += amount def withdraw(self, account_number, amount): if account_number not in self.accounts: raise AccountNotFoundException(\\"Account not found.\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.accounts[account_number] < amount: raise InsufficientFundsException(\\"Insufficient funds.\\") self.accounts[account_number] -= amount def check_balance(self, account_number): if account_number not in self.accounts: raise AccountNotFoundException(\\"Account not found.\\") return self.accounts[account_number] # This section is for the command line interface, which won\'t be tested in unit tests. def main(): # Command line interface logic: bank = Bank() while True: command = input(\\"Enter command (create, deposit, withdraw, balance, exit): \\") if command == \\"create\\": account_number = input(\\"Enter account number: \\") initial_balance = float(input(\\"Enter initial balance: \\")) bank.create_account(account_number, initial_balance) elif command == \\"deposit\\": account_number = input(\\"Enter account number: \\") amount = float(input(\\"Enter deposit amount: \\")) bank.deposit(account_number, amount) elif command == \\"withdraw\\": account_number = input(\\"Enter account number: \\") amount = float(input(\\"Enter withdrawal amount: \\")) bank.withdraw(account_number, amount) elif command == \\"balance\\": account_number = input(\\"Enter account number: \\") print(f\\"Current balance: {bank.check_balance(account_number)}\\") elif command == \\"exit\\": break"},{"question":"Design and implement a class-based system for a Library Management System that handles book lending processes. The system should include classes for `Library`, `Book`, and `Member`. The `Library` class should manage the list of books, while the `Member` class should track books borrowed by each member. The `Book` class should include attributes such as title, author, and ISBN. Your task is to implement the following functionalities: 1. **Add a Book**: The library should have a method to add a new book to its collection. 2. **Remove a Book**: The library should have a method to remove a book from its collection if it is not currently borrowed by any member. 3. **Register Member**: The library should have a method to register a new member. 4. **Borrow Book**: The library should allow members to borrow a book if it is available. Each member can borrow a maximum of 5 books at a time. 5. **Return Book**: The library should allow members to return a borrowed book. Consider the following requirements and constraints: - Implement exception handling for cases where a member tries to borrow a book that is not available or when the limit of borrows is exceeded. - Ensure there is a mechanism to track the books borrowed by each member and to update the availability status of the book in the library. - Your implementation should follow best practices for class design, including appropriate use of private attributes and encapsulation. Below is a partial class structure provided. Fill in the necessary methods to complete the functionality: ```python class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.is_borrowed = False class Member: def __init__(self, member_id, name): self.member_id = member_id self.name = name self.borrowed_books = [] class Library: def __init__(self): self.books = [] self.members = {} def add_book(self, book): pass def remove_book(self, isbn): pass def register_member(self, member): pass def borrow_book(self, member_id, isbn): pass def return_book(self, member_id, isbn): pass ``` Create a comprehensive suite of tests that validate the functionality of your implementation. The tests should cover various scenarios such as adding/removing books, borrowing/returning books, exceeding borrowing limits, and handling invalid operations.","solution":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn self.is_borrowed = False class Member: def __init__(self, member_id, name): self.member_id = member_id self.name = name self.borrowed_books = [] class Library: def __init__(self): self.books = [] self.members = {} def add_book(self, book): self.books.append(book) def remove_book(self, isbn): for book in self.books: if book.isbn == isbn and not book.is_borrowed: self.books.remove(book) return True return False def register_member(self, member): self.members[member.member_id] = member def borrow_book(self, member_id, isbn): member = self.members.get(member_id) if member and len(member.borrowed_books) < 5: for book in self.books: if book.isbn == isbn and not book.is_borrowed: book.is_borrowed = True member.borrowed_books.append(book) return True return False def return_book(self, member_id, isbn): member = self.members.get(member_id) if member: for book in member.borrowed_books: if book.isbn == isbn: book.is_borrowed = False member.borrowed_books.remove(book) return True return False"},{"question":"Implement a function `find_intersection` that takes two lists of integers, `list1` and `list2`, and returns a list containing the intersection of these two lists. The intersection should only contain unique elements present in both lists, and the order of elements in the result does not matter. You may not use any built-in set operations. Example: ```python def find_intersection(list1, list2): # Your code here # Example usage: print(find_intersection([1, 2, 2, 3, 4], [2, 3, 5, 6, 2])) # Output: [2, 3] print(find_intersection([7, 8, 9], [10, 11, 8])) # Output: [8] ```","solution":"def find_intersection(list1, list2): Returns the intersection of list1 and list2, containing only unique elements. intersection = [] list2_elements = {} for item in list2: list2_elements[item] = list2_elements.get(item, 0) + 1 for item in list1: if item in list2_elements and list2_elements[item] > 0: if item not in intersection: intersection.append(item) list2_elements[item] -= 1 return intersection"},{"question":"Implement a library catalog system: Create a class `LibraryCatalog` that manages a collection of books. Each book is represented as a dictionary with the following properties: `title`, `author`, `year_published`, `genre`, and `isbn`. Your class should be capable of the following operations: 1. **Add a book**: Add a new book to the catalog. 2. **Remove a book**: Remove a book from the catalog using its ISBN. 3. **Search books by title and author**: Return a list of books that match the title or author. 4. **List all books**: Return a list of all books in the catalog. 5. **Update book information**: Update the information of a book using its ISBN. Write the appropriate methods to allow these operations, and ensure that your class maintains data integrity (e.g., no duplicate ISBNs). Provide appropriate error messages for invalid operations, such as trying to remove or update a non-existent book. Example usage: ```python catalog = LibraryCatalog() # Add books catalog.add_book({\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year_published\\": 1960, \\"genre\\": \\"Fiction\\", \\"isbn\\": \\"1234567890\\"}) catalog.add_book({\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year_published\\": 1949, \\"genre\\": \\"Dystopian\\", \\"isbn\\": \\"1234567891\\"}) # Remove a book catalog.remove_book(\\"1234567890\\") # Search books print(catalog.search_books(title=\\"1984\\")) # Should return the book \\"1984\\" by George Orwell print(catalog.search_books(author=\\"Harper Lee\\")) # Should return an empty list since the book was removed # List all books print(catalog.list_all_books()) # Should list remaining books # Update book information catalog.update_book(\\"1234567891\\", {\\"title\\": \\"Nineteen Eighty-Four\\", \\"year_published\\": 1949}) # List all books after update print(catalog.list_all_books()) # Verify updated information ```","solution":"class LibraryCatalog: def __init__(self): self.catalog = {} def add_book(self, book): Adds a book to the catalog. Raises an error if the ISBN already exists. if book[\'isbn\'] in self.catalog: raise ValueError(\\"Book with this ISBN already exists.\\") self.catalog[book[\'isbn\']] = book def remove_book(self, isbn): Removes a book from the catalog using its ISBN. Returns True if successful, raises an error if the ISBN does not exist. if isbn not in self.catalog: raise KeyError(\\"Book with this ISBN not found.\\") del self.catalog[isbn] def search_books(self, title=None, author=None): Searches books by title and author. Returns a list of books that match the title or author. results = [] for book in self.catalog.values(): if title and title.lower() in book[\'title\'].lower(): results.append(book) elif author and author.lower() in book[\'author\'].lower(): results.append(book) return results def list_all_books(self): Returns a list of all books in the catalog. return list(self.catalog.values()) def update_book(self, isbn, updated_info): Updates book information using its ISBN. Raises an error if the ISBN does not exist. if isbn not in self.catalog: raise KeyError(\\"Book with this ISBN not found.\\") self.catalog[isbn].update(updated_info)"},{"question":"編寫一個Python函數來計算一個給定整數列表中的所有偶數的總和。 輸入_list = [1, 2, 3, 4, 5, 6]","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. Parameters: numbers (list): a list of integers Returns: int: the sum of all even integers in the list return sum(number for number in numbers if number % 2 == 0)"},{"question":"Create a function to reverse the words in a given string. Each word in the string is separated by a single space and there are no leading or trailing spaces. The function should return the modified string with the words\' order reversed, while keeping the characters within each word unchanged. input: \\"hello world from code\\" output: \\"code from world hello\\"","solution":"def reverse_words(s): Reverses the order of words in a given string. Parameters: s (str): The input string with words separated by a single space. Returns: str: The string with the words\' order reversed. return \' \'.join(s.split()[::-1])"},{"question":"Write a function called `findAllSubsets` that takes a list of unique integers and returns all possible subsets of these integers. The subsets can be returned in any order, but each subset must be unique and the function should not include duplicate sets. For example, given the input list `[1, 2, 3]`, the function should return: ``` [ [], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3] ] ``` Ensure that your solution achieves this within a reasonable computational complexity given the constraints. Note that while the list length won\'t exceed 15, the solution should be efficient enough for practical use. **Function Signature:** ```python def findAllSubsets(nums: List[int]) -> List[List[int]]: pass ```","solution":"from typing import List def findAllSubsets(nums: List[int]) -> List[List[int]]: def backtrack(start, path): subsets.append(path[:]) for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() subsets = [] backtrack(0, []) return subsets"},{"question":"# Problem Statement Write a function `next_greater_element(nums1, nums2)` that takes two lists of integers, `nums1` and `nums2`, as input and returns an array of integers `result`. For each element in `nums1`, the corresponding element in `result` is the next greater element to the right in `nums2`. If there is no greater element to the right, the result should be -1. The function should: - Find the next greater element for each element in `nums1` within the list `nums2`. - Only consider the elements to the right of the current element in `nums2` when determining the next greater element. - Return -1 if there is no greater element to the right in `nums2` for an element in `nums1`. # Constraints - The elements in `nums1` and `nums2` are distinct. - `nums1` is a subset of `nums2`. # Example Input: ```python nums1 = [4,1,2] nums2 = [1,3,4,2] ``` Output: ```python [-1, 3, -1] ``` Explanation: - For 4 in `nums1`, there is no greater element to the right in `nums2`. - For 1 in `nums1`, the next greater element to the right in `nums2` is 3. - For 2 in `nums1`, there is no greater element to the right in `nums2`. # Test your code with: ```python nums1 = [2, 4] nums2 = [1, 2, 3, 4] ```","solution":"def next_greater_element(nums1, nums2): Finds the next greater element for each element in nums1 within the list nums2. result = [] nums2_map = {num: -1 for num in nums2} stack = [] for num in nums2: while stack and stack[-1] < num: smaller_num = stack.pop() nums2_map[smaller_num] = num stack.append(num) for num in nums1: result.append(nums2_map[num]) return result"},{"question":"Develop a Python function that takes a string as an input and returns the first non-repeating character. If there\'s no non-repeating character, return an underscore \'_\'. Implement your solution without using any additional data structures for storing counts or indices.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If no such character exists, returns an underscore \'_\'. for char in s: if s.count(char) == 1: return char return \'_\'"},{"question":"Implement a function that takes two inputs, a string and a dictionary where keys are characters and values are their respective replacement characters shown as strings. The function should replace all occurrences of the specified characters in the input string with their corresponding replacement characters from the dictionary. If a character in the input string is not present in the dictionary, it should remain unchanged. Ensure the input string is processed exactly once in linear time. Example: Input: string = \\"hello world\\", replacements = {\'h\': \'j\', \'e\': \'3\', \'o\': \'0\', \'r\': \'2\'} Output: \\"j3ll0 w02ld\\"","solution":"def replace_characters(string, replacements): Replace all occurrences of specified characters in the input string with their corresponding replacement characters from the dictionary. :param string: The input string to process :param replacements: A dictionary where keys are characters to be replaced and values are their replacements :return: A new string with the replacements applied result = [] for char in string: if char in replacements: result.append(replacements[char]) else: result.append(char) return \'\'.join(result)"},{"question":"Write a function that accepts a list of dictionaries, each representing a record of a book with the keys \'title\', \'author\', \'year\', and \'genres\'. The function should categorize the books into genres and return a dictionary where the keys are genre names and the values are lists of book titles that fall under those genres. If a book belongs to multiple genres, ensure it appears under each relevant genre category. The order of the book titles within each genre should be sorted alphabetically. ```python def categorize_books_by_genre(books): Categorize books by their genres. Args: books (list): A list of dictionaries, where each dictionary represents a book and contains the keys \'title\', \'author\', \'year\', and \'genres\'. Returns: dict: A dictionary where keys are genre names and values are lists of book titles belonging to those genres, sorted alphabetically. # Implement your function here ``` Example usage: ```python books = [ {\'title\': \'Book A\', \'author\': \'Author 1\', \'year\': 2000, \'genres\': [\'Fantasy\', \'Adventure\']}, {\'title\': \'Book B\', \'author\': \'Author 2\', \'year\': 1995, \'genres\': [\'Science Fiction\', \'Fantasy\']}, {\'title\': \'Book C\', \'author\': \'Author 1\', \'year\': 2010, \'genres\': [\'Adventure\']}, ] print(categorize_books_by_genre(books)) # Expected output: # { # \'Fantasy\': [\'Book A\', \'Book B\'], # \'Adventure\': [\'Book A\', \'Book C\'], # \'Science Fiction\': [\'Book B\'] # } ```","solution":"def categorize_books_by_genre(books): Categorize books by their genres. Args: books (list): A list of dictionaries, where each dictionary represents a book and contains the keys \'title\', \'author\', \'year\', and \'genres\'. Returns: dict: A dictionary where keys are genre names and values are lists of book titles belonging to those genres, sorted alphabetically. genre_dict = {} for book in books: for genre in book[\'genres\']: if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(book[\'title\']) for genre in genre_dict: genre_dict[genre].sort() return genre_dict"},{"question":"Develop a function that accepts a string representing a sequence of words separated by single spaces and returns a dictionary where the key is each unique word and the value is its frequency of occurrence in the sequence. The function should ignore case, treating \\"Word\\" and \\"word\\" as the same. For example, given the input string \\"The quick brown fox jumps over the lazy dog the quick brown dog\\", the function should return {\'the\': 3, \'quick\': 2, \'brown\': 2, \'fox\': 1, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 2}.","solution":"def word_frequency(sentence): Returns a dictionary with each unique word as the key and its frequency in the sentence as the value. The words are case insensitive. words = sentence.lower().split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Create a function called `rotate_matrix` that accepts a 2D list (matrix) of integers and rotates it by 90 degrees clockwise. The function should return the rotated matrix as a new list. The original matrix should not be changed. For instance, given the following matrix: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The function should return: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` Ensure your code handles matrices of different dimensions correctly, including non-square matrices. Additionally, your implementation should not alter the input matrix but rather return a new matrix.","solution":"def rotate_matrix(matrix): Rotates a given 2D list (matrix) by 90 degrees clockwise and returns the rotated matrix. The original matrix is not modified. if not matrix: return [] num_rows, num_cols = len(matrix), len(matrix[0]) rotated_matrix = [] for col in range(num_cols): new_row = [matrix[row][col] for row in reversed(range(num_rows))] rotated_matrix.append(new_row) return rotated_matrix"},{"question":"Create a Python function called `max_occuring_char` that takes a string as input and returns the character that appears the most frequently within that string. In case of a tie, return the character that comes first alphabetically. You may assume the string contains only lowercase alphabetic characters and is non-empty. For example: - `max_occuring_char(\\"examples\\")` should return `\'e\'`. - `max_occuring_char(\\"testcase\\")` should return `\'e\'`.","solution":"def max_occuring_char(s): Returns the character that appears the most frequently within the input string. In case of a tie, returns the character that comes first alphabetically. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency max_frequency = max(char_count.values()) # Collect characters that have the maximum frequency max_chars = [char for char, freq in char_count.items() if freq == max_frequency] # Return the smallest character lexicographically from the list of max frequency characters return min(max_chars)"},{"question":"Write a Python function that takes an input integer \'k\' and returns True if \'k\' is a prime number. Additionally, modify the function to handle an input array of integers, checking each number in the array and returning an array of boolean values corresponding to the primality of each integer.","solution":"def is_prime(k): Returns True if the given integer k is a prime number, otherwise False. if k <= 1: return False for i in range(2, int(k ** 0.5) + 1): if k % i == 0: return False return True def check_primes(arr): Returns a list of boolean values indicating the primality of each integer in the input array. return [is_prime(num) for num in arr]"},{"question":"Create a function to validate a given string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', ensuring that the string is a balanced sequence of parentheses, braces, and brackets. The following constraints must be considered: 1) Every opening bracket must have a corresponding closing bracket of the same type. 2) Brackets must close in the correct order, i.e., an opening bracket should be closed by the most recent occurring pair of the same type before another type is closed. 3) The string may contain any number of such characters and can be of any length. 4) The validation must be done in a single pass through the string. 5) The algorithm\'s time complexity should not exceed O(n). Test your function with strings containing various combinations of the specified characters to ensure correct validation under different scenarios.","solution":"def is_balanced(s): Validates that the string s containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is a balanced sequence of parentheses, braces, and brackets. stack = [] matching_pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_pairs.values(): # If the character is one of \'(\', \'{\', \'[\' push it to stack stack.append(char) elif char in matching_pairs: # If the character is one of \')\', \'}\', \']\' check for matching if stack and stack[-1] == matching_pairs[char]: stack.pop() else: return False else: return False # invalid character return len(stack) == 0"},{"question":"Write a Python function `fibonacci_sum(n)` that calculates the sum of the first `n` Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and every subsequent number is the sum of the previous two numbers. Your function should use an iterative approach instead of recursion. Additionally, ensure that your function handles edge cases (e.g., when `n` is 0 or 1) and has a time complexity of O(n). **Example Usage:** ```python print(fibonacci_sum(5)) # Output: 7, as the Fibonacci numbers are 0, 1, 1, 2, 3 and their sum is 7 print(fibonacci_sum(10)) # Output: 88 print(fibonacci_sum(0)) # Output: 0 print(fibonacci_sum(1)) # Output: 0 ```","solution":"def fibonacci_sum(n): Calculates the sum of the first n Fibonacci numbers using an iterative approach. The Fibonacci sequence starts with 0 and 1. :param n: The number of Fibonacci numbers to sum up :return: The sum of the first n Fibonacci numbers if n == 0: return 0 elif n == 1: return 0 a, b = 0, 1 total_sum = a # Start with 0 which is the first Fibonacci number for _ in range(1, n): total_sum += b a, b = b, a + b return total_sum # Example usages print(fibonacci_sum(5)) # Output: 7 print(fibonacci_sum(10)) # Output: 88 print(fibonacci_sum(0)) # Output: 0 print(fibonacci_sum(1)) # Output: 0"},{"question":"Create a function that evaluates and compares mathematical expressions formatted as strings. The function should accept two expressions as input and return whether they are equivalent when fully simplified. The expressions can include basic arithmetic operators (+, -, *, /), integers, and parentheses. As an additional challenge, demonstrate the functionality with an example where one of the inputs has a division by zero error. Show how the function gracefully handles this situation without crashing. expression_1 = \\"2 * (3 + 4)\\" expression_2 = \\"14 - 2\\" # Example with division by zero (for reference): expression_3 = \\"5 / 0\\" Function should handle such edge cases effectively to maintain robustness and provide clear error messages.","solution":"def evaluate_expression(expr): Evaluates a mathematical expression from a string. Args: expr (str): A string representing the mathematical expression. Returns: float or str: The result of the evaluated expression, or an error message if there\'s a division by zero. try: return eval(expr) except ZeroDivisionError: return \\"Error: Division by zero\\" def compare_expressions(expr1, expr2): Compares two mathematical expressions to check if they are equivalent when fully simplified. Args: expr1 (str): The first expression. expr2 (str): The second expression. Returns: bool: True if the expressions are equivalent, False otherwise. result1 = evaluate_expression(expr1) result2 = evaluate_expression(expr2) if isinstance(result1, str) or isinstance(result2, str): # If any of the results is an error message, return False return result1 == result2 return result1 == result2"},{"question":"Write a function that takes a string representing a mathematical expression involving basic arithmetic operations (addition, subtraction, multiplication, and division) and evaluates it. The expression can contain parentheses to dictate order of operations and may include whitespace that should be ignored. The function should handle typical edge cases such as division by zero and invalid syntax gracefully, returning an appropriate error message in such cases. def evaluate_expression(expr): evaluate_expression(\\"3 + 5\\") => 8 evaluate_expression(\\"10 + 2 * 6\\") => 22 evaluate_expression(\\"(100 * (2 + 12)) / 14\\") => 100 evaluate_expression(\\"3 + 5 / 2\\") => 5.5 evaluate_expression(\\"3 / (2 - 2)\\") => \\"Error: Division by zero\\" evaluate_expression(\\"3 + * 5\\") => \\"Error: Invalid syntax\\" evaluate_expression(\\" 7 - 2 * 3 / 1\\") => 1","solution":"def evaluate_expression(expr): Evaluates a mathematical expression involving basic arithmetic operations, handling order of operations and parentheses. Args: expr (str): The string representing the mathematical expression. Returns: the result of the expression if valid, otherwise appropriate error message. try: # Remove whitespace from the expression expr = expr.replace(\\" \\", \\"\\") # Evaluate the expression result = eval(expr) return result except ZeroDivisionError: return \\"Error: Division by zero\\" except (SyntaxError, NameError): return \\"Error: Invalid syntax\\" except Exception as e: return f\\"Error: {str(e)}\\""},{"question":"Write a function that takes two arrays of integers, arr1 and arr2, which are both sorted in ascending order, and returns a merged array that contains all integers from both arrays in ascending order. Example: Input: arr1 = [1, 3, 5], arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6]","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: - arr1: List[int], first sorted array. - arr2: List[int], second sorted array. Returns: - List[int], merged sorted array containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function that simulates a simple banking system which includes functions for creating an account, depositing money, withdrawing money, and checking the account balance. Each account should have a unique account number, and the system should prevent transactions that would result in a negative balance. The program should support the following operations: - Creating an account with an initial balance. - Depositing a specified amount into a specified account. - Withdrawing a specified amount from a specified account, with a check to ensure that the account does not go into the negative. - Checking the balance of a given account. The program should take inputs such as the operation type, account number, and the amount of the transaction (if applicable), and then perform the requested operation, providing appropriate output/error messages as needed.","solution":"class Bank: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self, initial_balance=0): account_number = self.next_account_number self.accounts[account_number] = initial_balance self.next_account_number += 1 return account_number def deposit(self, account_number, amount): if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.accounts[account_number] += amount return self.accounts[account_number] def withdraw(self, account_number, amount): if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if self.accounts[account_number] < amount: raise ValueError(\\"Insufficient funds.\\") self.accounts[account_number] -= amount return self.accounts[account_number] def check_balance(self, account_number): if account_number not in self.accounts: raise ValueError(\\"Account does not exist.\\") return self.accounts[account_number]"},{"question":"Create a Python function that takes a list of integers and returns a list of the same integers but with all prime numbers replaced by their respective ordinal words. For simplicity, the function should handle prime numbers smaller than 20. For prime numbers greater than or equal to 20, it should replace them with the word \\"prime\\". Example: Input: [3, 4, 5, 10, 23] Output: [\'third\', 4, \'fifth\', 10, \'prime\']","solution":"def replace_primes_with_ordinal_words(numbers): Replace prime numbers in the list with their ordinal word representation if they are less than 20. For prime numbers 20 or greater, replace them with the word \\"prime\\". primes_ordinal = { 2: \'second\', 3: \'third\', 5: \'fifth\', 7: \'seventh\', 11: \'eleventh\', 13: \'thirteenth\', 17: \'seventeenth\', 19: \'nineteenth\' } def is_prime(n): if n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True result = [] for number in numbers: if is_prime(number): if number in primes_ordinal: result.append(primes_ordinal[number]) else: result.append(\'prime\') else: result.append(number) return result"},{"question":"Write a function `compress_string` that takes a string `s` as input and returns a compressed version of the string using the following method: consecutive occurrences of the same character are replaced by the character followed by the number of times it appears consecutively. If the compressed string is equal to or longer than the original string, return the original string. The function signature is: ```python def compress_string(s: str) -> str: pass ``` # Example ```python compress_string(\\"aabcccccaaa\\") => \\"a2b1c5a3\\" compress_string(\\"abcdef\\") => \\"abcdef\\" ``` # Constraints - The input string contains only lowercase alphabetic characters. - The output should preserve the order of characters as they appear in the input string. - If two or more strings have the same length, prefer the one that occurs first.","solution":"def compress_string(s: str) -> str: if not s: return s result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: result.append(s[i - 1] + str(count)) count = 1 # Add the last character (and its count) result.append(s[-1] + str(count)) compressed = \\"\\".join(result) return compressed if len(compressed) < len(s) else s"},{"question":"Create a function that takes a string containing a list of words separated by spaces and returns a new string with the words in reverse order. Each word must be reversed independently as well, while maintaining the original whitespace characters (i.e., spaces, tabs). The function should assume the input string contains only alphabetical characters, spaces, and tabs. For example, for the string \\"Hello worldtthis is a test\\", the function should return \\"olleH dlrowtsiht si a tset\\".","solution":"def reverse_words_in_place(s): Takes a string containing a list of words separated by spaces or tabs and returns a new string with each word reversed in place while maintaining the original whitespace characters. reversed_words = [] word_start = -1 for i, char in enumerate(s): if char.isalpha(): if word_start == -1: word_start = i else: if word_start != -1: reversed_words.append(s[word_start:i][::-1]) word_start = -1 reversed_words.append(char) if word_start != -1: reversed_words.append(s[word_start:][::-1]) return \'\'.join(reversed_words)"},{"question":"Sort the provided string of lowercase characters alphabetically and remove any duplicate characters. Implement a function that takes the string as input, processes it, and returns the resultant string. Analyze the time complexity of your algorithm. \\"programming\\"","solution":"def sort_and_deduplicate(s): Sorts the provided string alphabetically and removes duplicate characters. Parameters: s (str): The input string. Returns: str: A string with characters sorted and duplicates removed. return \'\'.join(sorted(set(s))) # Time Complexity Analysis: # set(s): O(n), where n is the length of the string, as we need to iterate through each character. # sorted(set(s)): O(k log k), where k is the number of unique characters in the string. # join(sorted(set(s))): O(k), because join() needs to pass through each character in the sorted list. # Overall time complexity: O(n + k log k), which simplifies to O(n log n) in the worst case scenario where all characters are unique."},{"question":"Design a sorting algorithm that can efficiently handle a large dataset of mixed positive and negative integers. Your implementation should place all negative integers at the beginning of the list, followed by all positive integers, while maintaining the original relative order amongst the negative and positive numbers respectively. Explain the approach you would use and write a function in Python to achieve this.","solution":"def special_sort(arr): Sort the array such that all negative integers come before positive ones, while maintaining the original relative order among negative and positive numbers. negatives = [x for x in arr if x < 0] positives = [x for x in arr if x >= 0] return negatives + positives"},{"question":"Create a Python function called \\"longest_palindrome_substring\\" that takes a single string as input and returns the longest palindromic substring within it. A palindrome is a word that reads the same forward and backward. Your function should efficiently handle both even and odd length palindromes and handle edge cases such as an empty string or a string with no palindrome longer than one character.","solution":"def longest_palindrome_substring(s): Returns the longest palindromic substring in the input string s. A palindrome is a word that reads the same forward and backward. if not s: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # odd length palindromes temp = expand_around_center(s, i, i) if len(temp) > len(longest): longest = temp # even length palindromes temp = expand_around_center(s, i, i + 1) if len(temp) > len(longest): longest = temp return longest"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. The function should preserve the order of elements as in the original list. For example: >>> extract_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) [2, 3, 5, 7] >>> extract_primes([1, 4, 6, 8, 10]) [] >>> extract_primes([11, 13, 17, 19, 23]) [11, 13, 17, 19, 23] The code starts as follows: #include<vector> #include<cmath> using namespace std; bool is_prime(int num){ if(num < 2) return false; for(int i = 2; i <= sqrt(num); i++){ if(num % i == 0) return false; } return true; } vector<int> extract_primes(vector<int> nums){","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def extract_primes(nums): Returns a list containing only the prime numbers from the original list \'nums\'. return [num for num in nums if is_prime(num)]"},{"question":"Given a string containing only digits, return the result of subtracting the sum of all odd digits from the sum of all even digits. Rules: 1. Identify odd and even digits in the string. 2. Sum all even digits and sum all odd digits. 3. Subtract the sum of odd digits from the sum of even digits to get the final result. 4. If the string is empty, return 0. Example 1: Input: \\"123456\\" Output: 3 Explanation: Even digits sum = 2 + 4 + 6 = 12, Odd digits sum = 1 + 3 + 5 = 9. Result = 12 - 9 = 3. Example 2: Input: \\"2468\\" Output: 20 Explanation: Even digits sum = 2 + 4 + 6 + 8 = 20, Odd digits sum = 0. Result = 20 - 0 = 20. Example 3: Input: \\"13579\\" Output: -25 Explanation: Even digits sum = 0, Odd digits sum = 1 + 3 + 5 + 7 + 9 = 25. Result = 0 - 25 = -25. Example 4: Input: \\"\\" Output: 0 Explanation: The string is empty, thus the result is 0. Example 5: Input: \\"11223344556677889900\\" Output: -10 Explanation: Even digits sum = 0 + 2 + 2 + 4 + 4 + 6 + 6 + 8 + 8 + 0 + 0 = 40, Odd digits sum = 1 + 1 + 3 + 3 + 5 + 5 + 7 + 7 + 9 + 9 = 50. Result = 40 - 50 = -10. Constraints: The length of the input string will be between 0 and 10^5.","solution":"def subtract_sums_of_digits(s): Given a string containing only digits, return the result of subtracting the sum of all odd digits from the sum of all even digits. if not s: return 0 sum_even = 0 sum_odd = 0 for char in s: digit = int(char) if digit % 2 == 0: sum_even += digit else: sum_odd += digit return sum_even - sum_odd"},{"question":"Create a function that accepts a list of integers and returns the indices of all peak elements. A peak element is defined as an element that is greater than its neighbors. For elements at the boundaries of the list, consider only one neighbor. For example: ```python def find_peak_indices(nums): # Your code here # Sample input and output print(find_peak_indices([1, 3, 2, 4, 1])) # Output: [1, 3] print(find_peak_indices([10, 9, 8, 7])) # Output: [0] print(find_peak_indices([1, 2, 3, 4, 5])) # Output: [4] ```","solution":"def find_peak_indices(nums): Returns the indices of all peak elements in the list. A peak element is greater than its neighbors. if not nums: return [] peak_indices = [] length = len(nums) for i in range(length): if i == 0: if length == 1 or nums[i] > nums[i + 1]: peak_indices.append(i) elif i == length - 1: if nums[i] > nums[i - 1]: peak_indices.append(i) else: if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]: peak_indices.append(i) return peak_indices"},{"question":"Implement a function `longest_consecutive_subsequence_length(arr)` that takes an array of integers `arr` and returns the length of the longest consecutive elements sequence. **Function Signature:** ```python def longest_consecutive_subsequence_length(arr: List[int]) -> int: ``` # Input - `arr` (List[int]): An array of integers, where 1 <= len(arr) <= 10^4, and -10^6 <= arr[i] <= 10^6. # Output - An integer representing the length of the longest sequence of consecutive elements in the array. # Example ```python # Example 1: arr = [100, 4, 200, 1, 3, 2] assert longest_consecutive_subsequence_length(arr) == 4 # The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. # Example 2: arr = [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] assert longest_consecutive_subsequence_length(arr) == 9 # The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore its length is 9. ``` # Constraints - Your solution should run in O(n) time complexity. - You may assume that the array does not contain duplicates.","solution":"from typing import List def longest_consecutive_subsequence_length(arr: List[int]) -> int: Returns the length of the longest consecutive elements sequence in the list arr. if not arr: return 0 num_set = set(arr) max_length = 0 for num in num_set: # only check the start of the sequence if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a function in Python that takes a list of integers and an integer `n`, and returns a list of tuples where each tuple contains two numbers from the list that add up to `n`. Ensure that each pair of numbers is unique, and the order of the pairs does not matter. If no such pairs exist, return an empty list.","solution":"def find_pairs(lst, n): Return a list of unique pairs of numbers from the list that add up to n. seen = set() pairs = set() for number in lst: target = n - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return list(pairs)"},{"question":"Write a function `roman_to_integer` that converts a Roman numeral to an integer. The function should take a single string representing the Roman numeral (e.g., \'XLII\') and return its integer value. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. The symbols have the following values: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five, we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Your function should convert any valid Roman numeral string to an integer within the range from 1 to 3999. # Example Input/Output: - `roman_to_integer(\\"III\\")` should return `3` - `roman_to_integer(\\"IV\\")` should return `4` - `roman_to_integer(\\"IX\\")` should return `9` - `roman_to_integer(\\"LVIII\\")` should return `58` - `roman_to_integer(\\"MCMXCIV\\")` should return `1994` # Constraints: - Input string is guaranteed to be a valid Roman numeral from 1 to 3999.","solution":"def roman_to_integer(s): Convert a Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Implement a function to determine if a given integer is a prime number and at the same time a palindrome. If the given integer meets both conditions, return True; otherwise, return False.","solution":"def is_prime_palindrome(num): Determine if a given integer is a prime number and also a palindrome. Args: num: int - The integer to check. Returns: bool - True if the integer is both a prime number and a palindrome, False otherwise. def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def is_palindrome(n): return str(n) == str(n)[::-1] return is_prime(num) and is_palindrome(num)"},{"question":"Write a function that takes a list of strings, where each string consists of a word and a number separated by a space (e.g., [\'apple 3\', \'banana 5\', \'apple 10\']) and returns a dictionary with each unique word as the key and the sum of the associated numbers as the value. Your function should handle edge cases such as empty list, strings with no number (should be treated as zero), and strings with invalid formats. Ensure that your solution can efficiently handle a large list of strings where there could be many repetitions of the same word. For example, given the input list [\'apple 3\', \'banana 5\', \'apple 10\', \'orange -3\', \'apple xy\', \'banana 2\', \'peach 6\'], the function should return: {\'apple\': 13, \'banana\': 7, \'orange\': -3, \'peach\': 6} Note: Ensure that any invalid numbers in the strings are treated as zero and ignored in the summation process.","solution":"def sum_word_numbers(word_list): Takes a list of strings, each containing a word and a number separated by a space, and returns a dictionary with each unique word as the key and the sum of the associated numbers as the value. result = {} for item in word_list: parts = item.split() if len(parts) != 2: continue word, number_str = parts try: number = int(number_str) except ValueError: number = 0 if word in result: result[word] += number else: result[word] = number return result"},{"question":"<p>Consider the function F(n) which returns an array of length n where each element i (1-indexed) is the count of positive divisors of i. For example:</p> <p>F(1) = [1]<br> F(2) = [1, 2]<br> F(3) = [1, 2, 2]<br> F(4) = [1, 2, 2, 3]</p> <p>Implement the function F(n) and then, for a given positive integer m, find the sum of the elements in the array returned by F(m). For instance:</p> <p>If m = 4, the array generated by F(4) is [1, 2, 2, 3] and the sum is 1+2+2+3 = 8.</p> <p>Determine the sum for m = 1000000.</p>","solution":"def F(n): Returns an array where the ith element is the count of positive divisors of i (1-indexed). divisors_count = [0] * (n + 1) # Count divisors using a modified Sieve of Eratosthenes approach for i in range(1, n + 1): for j in range(i, n + 1, i): divisors_count[j] += 1 # Remove the 0th index to make the list 1-indexed return divisors_count[1:] def sum_F(m): Returns the sum of the elements in the array returned by F(m). return sum(F(m)) # Calculate the sum for m = 1000000 result = sum_F(1000000) result"},{"question":"Write a function that takes a string as input and returns a dictionary with the count of each character in the string. Ensure the function handles both uppercase and lowercase letters as the same character.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string. Treats uppercase and lowercase letters as the same character. s = s.lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Develop a Python program that simulates an inventory management system for a small retail store. The program should allow the user to add new items to the inventory, update the quantity of existing items, and search for items by their name or identifier. Each item should have a name, an identifier (a unique code), a quantity, and a price. Additionally, implement functionality to calculate the total value of the inventory, which is the sum of the value of all items (quantity * price). The program should ensure that the inventory remains consistent, preventing negative quantities and ensuring unique identifiers for all items.","solution":"class InventoryItem: def __init__(self, identifier, name, quantity, price): self.identifier = identifier self.name = name self.quantity = quantity self.price = price class InventoryManagementSystem: def __init__(self): self.items = {} def add_item(self, identifier, name, quantity, price): if identifier in self.items: raise ValueError(\\"Item with the given identifier already exists.\\") if quantity < 0 or price < 0: raise ValueError(\\"Quantity and price should be non-negative.\\") self.items[identifier] = InventoryItem(identifier, name, quantity, price) def update_item_quantity(self, identifier, quantity): if identifier not in self.items: raise ValueError(\\"Item with the given identifier does not exist.\\") if quantity < 0: raise ValueError(\\"Quantity should be non-negative.\\") self.items[identifier].quantity = quantity def search_by_name(self, name): return [item for item in self.items.values() if item.name == name] def search_by_identifier(self, identifier): return self.items.get(identifier, None) def total_value(self): return sum(item.quantity * item.price for item in self.items.values())"},{"question":"Implement a function in Python that takes a list of integers and a target integer as arguments and returns a list of unique pairs of numbers from the input list that add up to the target integer. Ensure that each pair is sorted in ascending order, and the pairs themselves follow no particular order. Input: list = [2, 4, 3, 5, 7] and target = 7","solution":"def find_pairs(nums, target): Returns a list of unique pairs from nums that add up to the target. Each pair is sorted and appears only once. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return list(pairs)"},{"question":"Write a Python function `filter_and_sort(list_of_dicts, threshold)` that takes a list of dictionaries and a numeric threshold as inputs. Each dictionary represents an item, and contains the keys \'name\' (string) and \'price\' (numeric). The function should filter out items with a price lower than the threshold, and return a list of the remaining items sorted by price in descending order. If multiple items have the same price, they should retain their relative order from the original list.","solution":"def filter_and_sort(list_of_dicts, threshold): Filters items with a price lower than the threshold and sorts the remaining items by price in descending order. :param list_of_dicts: List of dictionaries, each having keys \'name\' and \'price\' :param threshold: Numeric threshold to filter items :return: List of filtered and sorted dictionaries # Filter items based on the threshold filtered_items = [item for item in list_of_dicts if item[\'price\'] >= threshold] # Sort items by price in descending order sorted_items = sorted(filtered_items, key=lambda x: x[\'price\'], reverse=True) return sorted_items"},{"question":"Implement a Python program to merge two sorted singly-linked lists into a single sorted linked list. Your solution should maintain the sorted order without using any additional data structures. Consider edge cases such as when one or both of the lists are empty. # Definition for singly-linked list. class ListNode: def __init__(self, x): self.val = x self.next = None","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def mergeTwoLists(l1, l2): Merges two sorted singly-linked lists into a single sorted linked list. :param l1: ListNode, the head of the first sorted linked list :param l2: ListNode, the head of the second sorted linked list :return: ListNode, the head of the merged sorted linked list dummy = ListNode(0) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next"},{"question":"Create a function that takes a list of integers and an integer `k`, and returns the `k` largest elements from the list in ascending order. Consider edge cases such as when the list is empty or `k` is larger than the number of elements in the list. Ensure your solution is efficient for large inputs.","solution":"def k_largest_elements(nums, k): Returns the k largest elements from the list nums in ascending order. :param nums: List of integers :param k: Integer :return: List of k largest integers in ascending order if not nums or k <= 0: return [] # If k is greater than the length of the list, return all elements in ascending order if k >= len(nums): return sorted(nums) # Use heapq to find k largest elements, then sort them in ascending order import heapq largest = heapq.nlargest(k, nums) return sorted(largest)"},{"question":"An e-commerce company has a list of registered users and their purchase histories. Each purchase history is represented as a list of dictionaries, where each dictionary contains information about a single purchase, including the item name and amount spent (both as strings). Your task is to write a function that finds the top spender among the users and returns their username. Here is some sample data: ```python users = { \\"Alice\\": [ {\\"item\\": \\"Book\\", \\"amount\\": \\"12.49\\"}, {\\"item\\": \\"Laptop\\", \\"amount\\": \\"799.99\\"}, {\\"item\\": \\"Lunch\\", \\"amount\\": \\"9.25\\"} ], \\"Bob\\": [ {\\"item\\": \\"Chocolate\\", \\"amount\\": \\"5.00\\"}, {\\"item\\": \\"Shoes\\", \\"amount\\": \\"59.99\\"} ], \\"Carol\\": [ {\\"item\\": \\"Bag\\", \\"amount\\": \\"45.99\\"}, {\\"item\\": \\"Dress\\", \\"amount\\": \\"119.99\\"} ] } ``` Your function should be defined as `def find_top_spender(users)` and must return the username of the top spender. **Constraints:** - Each item in the user\'s purchase history is represented as a dictionary with \\"item\\" and \\"amount\\" keys. - The function should handle edge cases, such as an empty users dictionary, gracefully. **Example:** ```python top_spender = find_top_spender(users) print(top_spender) # Output should be \\"Alice\\" ``` **Implementation Note:** Process the purchase histories, convert the amount spent from string to float, sum the amounts for each user, and determine the user with the highest total spending.","solution":"def find_top_spender(users): Given a dictionary of users with their purchase histories, finds the user who has spent the most. Parameters: users (dict): a dictionary where keys are usernames and values are lists of dictionaries with \'item\' and \'amount\' as keys. Returns: str: the username of the top spender. top_spender = None highest_spent = 0 for user, purchases in users.items(): total_spent = sum(float(purchase[\\"amount\\"]) for purchase in purchases) if total_spent > highest_spent: highest_spent = total_spent top_spender = user return top_spender"},{"question":"In Python, create a function that accepts a dictionary where keys are student names and values are their respective scores. The function should perform the following operations: 1. Add 5 bonus points to each student\'s score. 2. If a student\'s total score after adding the bonus exceeds 100, set their score to 100. 3. If a student\'s original score was below 50, apply a 10% reduction after adding the bonus. 4. Finally, return a sorted list of tuples (name, score) sorted by the students\' names in alphabetical order. The initial dictionary should be something like: scores = {\\"Alice\\": 90, \\"Bob\\": 45, \\"Charlie\\": 85, \\"David\\": 76} Consider that all student names are unique and scores are integers.","solution":"def update_scores(scores): Accepts a dictionary where keys are student names and values are their respective scores. 1. Adds 5 bonus points to each student\'s score. 2. If a student\'s total score after adding the bonus exceeds 100, sets their score to 100. 3. If a student\'s original score was below 50, applies a 10% reduction after adding the bonus. 4. Returns a sorted list of tuples (name, score) sorted by the students\' names in alphabetical order. updated_scores = {} for name, score in scores.items(): updated_score = score + 5 if updated_score > 100: updated_score = 100 elif score < 50: updated_score *= 0.9 updated_scores[name] = int(updated_score) return sorted(updated_scores.items()) # Example usage # scores = {\\"Alice\\": 90, \\"Bob\\": 45, \\"Charlie\\": 85, \\"David\\": 76} # print(update_scores(scores)) # Should yield [(\'Alice\', 95), (\'Bob\', 45), (\'Charlie\', 90), (\'David\', 81)]"},{"question":"# Coding Assessment Question You are working on a program that processes a list of transaction records. Each transaction is represented by a tuple containing a transaction ID, a timestamp, and an amount. Given a list of such transactions, you need to write a function that returns the transaction which occurred the earliest. If there are multiple transactions with the same earliest timestamp, your function should return the one with the smallest transaction ID. Implement the function `find_earliest_transaction(transactions)` that accepts a list of tuples where each tuple is in the format `(transaction_id: int, timestamp: str, amount: float)`. The `timestamp` is a string in the format `\\"YYYY-MM-DD HH:MM:SS\\"`. The function should return the earliest transaction tuple. # Examples: ```python def find_earliest_transaction(transactions): # Your implementation here # Test case 1 transactions1 = [ (1, \\"2023-01-15 12:30:00\\", 100.50), (2, \\"2023-01-10 16:45:00\\", 200.75), (3, \\"2023-01-10 16:45:00\\", 150.25) ] print(find_earliest_transaction(transactions1)) # Output: (2, \\"2023-01-10 16:45:00\\", 200.75) # Test case 2 transactions2 = [ (10, \\"2022-12-31 23:59:59\\", 500.00), (8, \\"2022-12-31 23:59:59\\", 300.00), (15, \\"2023-01-01 00:00:01\\", 750.00) ] print(find_earliest_transaction(transactions2)) # Output: (8, \\"2022-12-31 23:59:59\\", 300.00) # Test case 3 transactions3 = [ (4, \\"2022-11-11 11:11:11\\", 444.44), (7, \\"2022-12-01 01:01:01\\", 777.77), (6, \\"2023-01-01 00:00:00\\", 666.66) ] print(find_earliest_transaction(transactions3)) # Output: (4, \\"2022-11-11 11:11:11\\", 444.44) ``` # Constraints: 1. The function should handle at least 1 and at most 1000 transactions. 2. Each transaction ID is unique and an integer. 3. The timestamps are valid datetime strings in the given format. 4. The amounts are positive floating-point numbers.","solution":"from datetime import datetime def find_earliest_transaction(transactions): Returns the earliest transaction from a list of transactions. If multiple transactions have the same earliest timestamp, returns the one with the smallest transaction ID. Parameters: transactions (list of tuple): A list of transactions, each represented as a tuple (transaction_id, timestamp, amount). Returns: tuple: The earliest transaction. return min(transactions, key=lambda x: (datetime.strptime(x[1], \'%Y-%m-%d %H:%M:%S\'), x[0])) # Test cases transactions1 = [ (1, \\"2023-01-15 12:30:00\\", 100.50), (2, \\"2023-01-10 16:45:00\\", 200.75), (3, \\"2023-01-10 16:45:00\\", 150.25) ] print(find_earliest_transaction(transactions1)) # Output: (2, \\"2023-01-10 16:45:00\\", 200.75) transactions2 = [ (10, \\"2022-12-31 23:59:59\\", 500.00), (8, \\"2022-12-31 23:59:59\\", 300.00), (15, \\"2023-01-01 00:00:01\\", 750.00) ] print(find_earliest_transaction(transactions2)) # Output: (8, \\"2022-12-31 23:59:59\\", 300.00) transactions3 = [ (4, \\"2022-11-11 11:11:11\\", 444.44), (7, \\"2022-12-01 01:01:01\\", 777.77), (6, \\"2023-01-01 00:00:00\\", 666.66) ] print(find_earliest_transaction(transactions3)) # Output: (4, \\"2022-11-11 11:11:11\\", 444.44)"},{"question":"Write a Python function that takes a string as input and returns the same string with all vowels removed. Use a combination of filter function and lambda expression to achieve this. For example, given the input \\"Hello, World!\\", your function should return \\"Hll, Wrld!\\".","solution":"def remove_vowels(input_string): Removes all vowels from the input string. Parameters: input_string (str): The string from which to remove vowels. Returns: str: The string with all vowels removed. vowels = \'aeiouAEIOU\' return \'\'.join(filter(lambda x: x not in vowels, input_string))"},{"question":"Write a Python function that simulates the roll of a pair of dice until the sum of the numbers rolled matches a specified target value. The function should take an integer target as an argument and return the number of rolls required to reach that target sum. Make sure to handle scenarios where the target sum is impossible to achieve with two dice (e.g., a target sum of 1).","solution":"import random def roll_until_target(target): Simulates the roll of a pair of dice until the sum matches the target value. Args: target (int): Target sum to achieve with the dice rolls. Returns: int: Number of rolls required to reach the target sum. if target < 2 or target > 12: raise ValueError(\\"Target sum must be between 2 and 12\\") rolls = 0 while True: roll_1 = random.randint(1, 6) roll_2 = random.randint(1, 6) rolls += 1 if roll_1 + roll_2 == target: return rolls"},{"question":"Create a Python function to merge two sorted lists into a single sorted list. The function should take two lists as input and return one sorted list that contains all the elements from both input lists in ascending order. You may assume that the input lists are already sorted.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a program that takes an integer input N from the user and outputs the Fibonacci series up to the Nth term. Validate the input to ensure it is a positive integer greater than or equal to 1. Additionally, include a feature to output whether each number in the Fibonacci sequence is even or odd. Ensure the output is formatted in a readable manner. Furthermore, analyze the following code snippet and identify any potential errors or inefficiencies: ```python def fibonacci(n): fib = [0, 1] while len(fib) < n: fib.append(fib[-1] + fib[-2]) return fib N = int(input(\\"Enter a number: \\")) print(fibonacci(N)) ``` Explain why the code might not work correctly for all cases or might not be optimized. After identifying the issues, provide a corrected and optimized version of the code. Ensure that your solution efficiently computes the Fibonacci sequence and handles input validation properly. Hint: Consider initializing the Fibonacci sequence efficiently and ensure the function handles cases where N is 1 or 2 correctly.","solution":"def generate_fibonacci_series(n): Generates the Fibonacci series up to the Nth term. if n < 1: raise ValueError(\\"N must be a positive integer greater than or equal to 1.\\") fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) result = [] for i in range(n): parity = \\"even\\" if fib[i] % 2 == 0 else \\"odd\\" result.append((fib[i], parity)) return result"},{"question":"Write a Python function that processes a list of integers to produce a specific sequence of outputs by following a series of computational steps. The function should take in one list of integers as input and perform the following tasks: 1. Create a new list containing the squares of each integer in the input list. 2. Filter the squared list to retain only the odd numbers. 3. Sort the filtered list in descending order. 4. Convert each element of the sorted list to a string. 5. Join all the string elements with a hyphen (\\"-\\") as a separator. 6. Handle possible errors if the input list contains non-integer values. In such cases, return an appropriate error message. 7. Explain the performance of your function in terms of time complexity.","solution":"def process_list(integers): Processes a list of integers to produce a specific sequence of outputs. :param integers: List of integers :return: A hyphen-separated string of processed numbers or an error message for non-integer values. def is_integer_list(lst): return all(isinstance(i, int) for i in lst) if not is_integer_list(integers): return \\"Error: Input list contains non-integer values\\" # Step 1: Create a new list containing the squares of each integer in the input list. squared_list = [x ** 2 for x in integers] # Step 2: Filter the squared list to retain only the odd numbers. odd_squares = [x for x in squared_list if x % 2 != 0] # Step 3: Sort the filtered list in descending order. odd_squares_sorted = sorted(odd_squares, reverse=True) # Step 4: Convert each element of the sorted list to a string. odd_squares_strings = list(map(str, odd_squares_sorted)) # Step 5: Join all the string elements with a hyphen (\\"-\\") as a separator. result = \\"-\\".join(odd_squares_strings) return result # Time Complexity Analysis: # - Step 1: O(n) where n is the number of elements in the input list (squaring each element). # - Step 2: O(n) for filtering the list to retain odd numbers. # - Step 3: O(n log n) for sorting the list in descending order. # - Step 4: O(n) for mapping each element to a string. # - Step 5: O(n) for joining the string elements with a hyphen. # Overall Time Complexity: O(n log n)"},{"question":"Given an undirected graph represented as an adjacency list, write a function to determine if the graph is bipartite. A bipartite graph is one in which you can split the set of its vertices into two independent subsets such that there are no edges connecting vertices within the same subset. The function `isBipartite(graph)` should accept the following parameter: - `graph`: A list of lists, where `graph[i]` is a list of all vertices connected to vertex `i`. The function should return `True` if the graph is bipartite, and `False` otherwise. Example 1: Input: graph = [[1,3],[0,2],[1,3],[0,2]] Output: True Explanation: We can split the vertices into two sets as follows: {0, 2} and {1, 3}. Example 2: Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]] Output: False Explanation: It is not possible to split the vertices into two sets where no two vertices within the same set are connected. Example 3: Input: graph = [[1],[0,3],[3],[1,2]] Output: True Constraints: - `n == graph.length` - `1 <= n <= 100` - `0 <= graph[i].length < n` - `0 <= graph[i][j] < n` - `graph[i][j]` is unique. - The graph is undirected.","solution":"def isBipartite(graph): Determine if the given undirected graph is bipartite. Parameters: graph (List[List[int]]): A list of lists representing the adjacency list of the graph. Returns: bool: True if the graph is bipartite, False otherwise. n = len(graph) color = [-1] * n # -1 means uncolored, 0 and 1 are the two colors def bfs(start): queue = [start] color[start] = 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: # if the neighbor is uncolored # color the neighbor with opposite color color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # if the neighbor has the same color return False return True for i in range(n): if color[i] == -1: # if the node is uncolored if not bfs(i): return False return True"},{"question":"Implement a function in Python that takes a list of integers and returns the maximum possible product of any three numbers from the list. Your solution should aim for an optimal time complexity, ideally O(n). If the list contains less than three numbers, return None. **Function Signature:** ```python def max_product_of_three(nums: List[int]) -> Optional[int]: ``` **Example:** ```python max_product_of_three([1, 10, 2, 6, 5, 3]) # Should return 300, as 10 * 6 * 5 = 300 max_product_of_three([-10, -10, 5, 2]) # Should return 500, as -10 * -10 * 5 = 500 max_product_of_three([1, 2]) # Should return None, as there are less than three numbers ```","solution":"from typing import List, Optional def max_product_of_three(nums: List[int]) -> Optional[int]: Returns the maximum possible product of any three numbers from the list. If the list contains less than three numbers, return None. if len(nums) < 3: return None # Initialize variables to track the highest and lowest values max1 = max2 = max3 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: if num > max1: max3 = max2 max2 = max1 max1 = num elif num > max2: max3 = max2 max2 = num elif num > max3: max3 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"Write a Python function that takes a list of strings representing email addresses and sorts the list first by domain name and then by username. Your function should handle email addresses with various domain suffixes (e.g., .com, .org, .net) and ensure that they are sorted correctly. The function should also be case-insensitive when comparing the email addresses. For example: Input: [\\"bob.Smith@yahoo.Com\\", \\"alice.jones@Gmail.com\\", \\"charlie.brown@hotmail.com\\", \\"david.wilson@Org.Net\\", \\"eve.miller@Yahoo.com\\"] Output: [\\"alice.jones@Gmail.com\\", \\"charlie.brown@hotmail.com\\", \\"david.wilson@Org.Net\\", \\"bob.Smith@yahoo.Com\\", \\"eve.miller@Yahoo.com\\"] Ensure your solution efficiently handles a large list of email addresses and correctly manages different domain suffixes. Consider edge cases such as email addresses with multiple subdomains.","solution":"def sort_emails(email_list): Sorts a list of email addresses first by domain name and then by username, in a case-insensitive manner. return sorted(email_list, key=lambda email: (email.split(\'@\')[1].lower(), email.split(\'@\')[0].lower()))"},{"question":"In Python, a dictionary is a data structure that allows you to store pairs of keys and values. Write a function `merge_dictionaries(dict1, dict2)` that takes two dictionaries as input parameters and returns a new dictionary that merges the two. In the case where a key is present in both dictionaries, the value from `dict2` should override the value from `dict1`. Ensure that the original dictionaries are not modified. Example: ```python dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 4, \'c\': 5, \'d\': 6} result = merge_dictionaries(dict1, dict2) print(result) ``` Expected output: ``` {\'a\': 1, \'b\': 4, \'c\': 5, \'d\': 6} ```","solution":"def merge_dictionaries(dict1, dict2): Merges two dictionaries. In case of duplicate keys, the value from dict2 will override the value from dict1. Parameters: dict1 (dict): The first dictionary. dict2 (dict): The second dictionary. Returns: dict: A new dictionary containing the merged content of dict1 and dict2. merged_dict = dict1.copy() # Ensure original dict1 is not modified merged_dict.update(dict2) # Update merged_dict with dict2 values return merged_dict"},{"question":"Write a function in Python named `largest_palindrome_product` that finds the largest palindrome made from the product of two 3-digit numbers. A palindrome is a number that reads the same backward as forward. The function should not take any parameters and should return the largest palindrome product. Ensure that your solution is optimized for performance.","solution":"def largest_palindrome_product(): Finds the largest palindrome made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(999, 99, -1): for j in range(i, 99, -1): product = i * j if product <= max_palindrome: break # Since j decreases, the products will not get larger if str(product) == str(product)[::-1]: # Check if the product is a palindrome max_palindrome = product return max_palindrome"},{"question":"Write a function to merge overlapping intervals in a given list of intervals. Each interval is represented as a tuple of two integers where the first integer is the start time and the second is the end time. The function should return a list of merged intervals, ensuring no two intervals overlap. The function should handle intervals that overlap at their boundaries, merge them appropriately, and ensure the resulting list of intervals is in ascending order of start times. Here is a piece of erroneous code for reference. Identify the errors and correct them in your implementation. ```python def merge_intervals(intervals): intervals.sort(key=lambda x: x[0]) merged = [] for current in intervals: if not merged or merged[-1][1] < current[0]: merged.append(current) else: merged[-1][1] = max(merged[-1][1], current[1]) return merged ``` Note: This code fails to correctly merge intervals that exactly meet at the boundary. Ensure to handle such cases so that the merged intervals are accurate and in the correct order.","solution":"def merge_intervals(intervals): Merges overlapping intervals in a list of intervals. Args: intervals (List[Tuple[int, int]]): A list of intervals represented as tuples. Returns: List[Tuple[int, int]]: A list of merged intervals, sorted by start times. if not intervals: return [] # Sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if last[1] >= current[0]: # Merge if there\'s an overlap or touching intervals merged[-1] = (last[0], max(last[1], current[1])) else: merged.append(current) return merged"},{"question":"Given a string of characters, write a function to determine if the string is a palindrome, ignoring spaces, punctuation, and capitalization. Additionally, optimize the function to ensure it runs in the best possible time complexity. To help you, a piece of code is provided with some mistakes. Your task is to identify and correct the mistakes to produce the desired output efficiently. Incorrect Code: ```python def is_palindrome(s): s = s.lower().replace(\\" \\", \\"\\") for left in range(len(s)//2): right = len(s) - left - 1 if s[left] != s[right]: return False return True input_str = \\"A man, a plan, a canal, Panama\\" print(is_palindrome(input_str)) ``` Identify the mistakes in the above code, correct them, and provide an optimized version of it.","solution":"def is_palindrome(s): Check if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. import re s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() for left in range(len(s)//2): right = len(s) - left - 1 if s[left] != s[right]: return False return True input_str = \\"A man, a plan, a canal, Panama\\" print(is_palindrome(input_str))"},{"question":"Implement the Python function **balancedBrackets**. This function checks whether a given string containing various types of brackets (\'{\', \'}\', \'(\', \')\', \'[\', and \']\') is properly balanced. A balanced string means every opening bracket has a corresponding closing bracket in the correct order. The given function contains an error. Identify and correct it. ```python def balancedBrackets(s: str): stack = [] opening_brackets = {\'{\', \'(\', \'[\'} closing_brackets = {\'}\': \'{\', \')\': \'(\', \']\': \'[\'} for char in s: if char in opening_brackets: stack.append(char) elif char in closing_brackets: if not stack or stack.pop() != closing_brackets[char]: return False return not stack ``` Fix the errors and provide the correct implementation.","solution":"def balancedBrackets(s: str): This function checks if the given string s with various types of brackets (\'{\', \'}\', \'(\', \')\', \'[\', \']\') is properly balanced. stack = [] opening_brackets = {\'{\', \'(\', \'[\'} closing_brackets = {\'}\': \'{\', \')\': \'(\', \']\': \'[\'} for char in s: if char in opening_brackets: stack.append(char) elif char in closing_brackets: if not stack or stack.pop() != closing_brackets[char]: return False return not stack"},{"question":"Create a function `first_non_repeating_char` that accepts a string and returns the first non-repeating character in it. If all characters repeat, the function should return `None`. Consider the input string to be case-sensitive. Example Usage: ```python print(first_non_repeating_char(\\"teeter\\")) # Output: \'r\' print(first_non_repeating_char(\\"aabbcc\\")) # Output: None print(first_non_repeating_char(\\"Swiss\\")) # Output: \'S\' ```","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If all characters repeat, returns None. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"You are given a list of `n` integers, each representing the elevation at that point in a one-dimensional landscape. Your task is to determine how much water would be trapped after a rainfall. Write a function that takes an integer list `heights` as input and returns the amount of water trapped. Example: ```python def trap_water(heights): # Your code here # Example 1 heights = [0,1,0,2,1,0,1,3,2,1,2,1] output = trap_water(heights) print(output) # Output should be 6 # Example 2 heights = [4,2,0,3,2,5] output = trap_water(heights) print(output) # Output should be 9 ``` Constraints: - You may assume the width of each bar is 1. - The length of the `heights` list will not exceed 100,000. - The heights within the list will be non-negative integers. Explain your approach and discuss the time and space complexity of your solution.","solution":"def trap_water(heights): Given a list of elevations, calculates how much water is trapped after rainfall. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right_max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the even numbers from the original list, maintaining their order. Use list comprehension to solve this problem.","solution":"def filter_even_numbers(int_list): Returns a list containing only the even numbers from the original list. Parameters: int_list (list): A list of integers. Returns: list: A list of even integers. return [num for num in int_list if num % 2 == 0]"},{"question":"Write a function that simulates a custom string formatting method. The method should accept a string containing placeholders in the form of `{key}` and a dictionary that maps keys to their corresponding replacement values. The function should return the resultant string after appropriate substitution. The placeholder should be replaced only if a corresponding key exists in the dictionary; otherwise, it should be left unchanged. Implement the function `custom_format` and ensure it passes the given tests: def custom_format(s: str, d: dict) -> str: Replace placeholders in the string `s` using the mappings provided in dictionary `d`. Handles the placeholders of the format `{key}` in the string `s`. If the key is not found in the dictionary, it should leave the placeholder as it is. >>> custom_format(\\"Hello, my name is {name} and I am {age} years old.\\", {\\"name\\": \\"Alice\\", \\"age\\": \\"30\\"}) \'Hello, my name is Alice and I am 30 years old.\' >>> custom_format(\\"Welcome to {country}, the land of {something}.\\", {\\"country\\": \\"Wonderland\\"}) \'Welcome to Wonderland, the land of {something}.\' >>> custom_format(\\"This is a {adjective} day.\\", {\\"adjective\\": \\"beautiful\\"}) \'This is a beautiful day.\'","solution":"import re def custom_format(s: str, d: dict) -> str: Replace placeholders in the string `s` using the mappings provided in dictionary `d`. Handles the placeholders of the format `{key}` in the string `s`. If the key is not found in the dictionary, it should leave the placeholder as it is. def replace(match): key = match.group(1) return d.get(key, match.group(0)) pattern = re.compile(r\'{(w+)}\') return pattern.sub(replace, s)"},{"question":"Design an algorithm to compute the intersection of two given single-dimensional integer arrays. The output should be a new array containing only the elements that are present in both input arrays. The order of elements in the resulting array does not matter, but each element should appear as many times as it shows in both arrays. [1, 2, 2, 1], [2, 2] -> [2, 2]","solution":"from collections import Counter def intersect(nums1, nums2): Computes the intersection of two arrays, returning a new array containing only the elements that are present in both input arrays. Each element should appear in the result as many times as it shows in both arrays. counter1 = Counter(nums1) counter2 = Counter(nums2) intersection = [] for num in counter1: if num in counter2: min_count = min(counter1[num], counter2[num]) intersection.extend([num] * min_count) return intersection"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline, where the index of the array represents the relative horizontal positions of the buildings, and the value at each index represents the height of the building at that position. Write a function `maxSkylineArea(heights)` to determine the maximum rectangular area that can be formed using the buildings in the skyline. The width of each rectangle is the distance between two buildings, and the height is the minimum height of the buildings in between. Your function should take the following input: - `heights`: List[int] - a list of non-negative integers representing the heights of buildings. For example, given the input: ```python heights = [2, 1, 5, 6, 2, 3] ``` The largest possible rectangle has an area of `10`, represented by the buildings `[5, 6]` (from index 2 to index 3). Your output should be: ```python print(maxSkylineArea([2, 1, 5, 6, 2, 3])) # Output: 10 ``` # Constraints: - You may assume the array will contain at least one building. - The maximum number of buildings in the skyline will not exceed 10^5. - The height of each building will not exceed 10^4. Your solution should be efficient and utilize optimal algorithms to handle large inputs within a reasonable time frame.","solution":"def maxSkylineArea(heights): Calculate the maximum rectangular area in a skyline represented by heights. :param heights: List[int] - list of non-negative integers representing heights of buildings. :return: int - the maximum rectangular area that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of non-negative integers representing the heights of terrain in sequential order, you are required to calculate the maximum amount of water that can be trapped between the terrains after a rainfall. The list will contain at least two heights and water trapped at index i is determined by the minimum of the tallest terrain to the left and right of i designating the height, minus the terrain height at i itself. You can assume the terrain at the edges does not trap water. For example, given heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], the function should return 6. Begin with the provided function prototype: ```python def calculate_trapped_water(heights): ```","solution":"def calculate_trapped_water(heights): Calculate the maximum amount of water that can be trapped between the terrains. :param heights: List of non-negative integers representing the heights of terrain. :return: Maximum amount of water that can be trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(1, n - 1): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Use the Pandas library to clean a dataset containing missing values, duplicate entries, and data inconsistencies. After cleaning the data, calculate and display the summary statistics, and plot histograms for all numeric columns to visualize their distribution. For this task, you may use any publicly available dataset of your choice. Ensure you include the code to load the dataset as well as the final clean and analysis steps.","solution":"import pandas as pd import matplotlib.pyplot as plt def clean_dataset(df): Cleans the dataframe by removing duplicates, filling missing values, and addressing data inconsistencies. Parameters: df (pd.DataFrame): The dataframe to be cleaned. Returns: pd.DataFrame: The cleaned dataframe. # Remove duplicate entries df = df.drop_duplicates() # Handling missing values: Filling with mean for numeric columns and mode for categorical columns for column in df.columns: if df[column].dtype == \'object\': mode = df[column].mode()[0] df[column].fillna(mode, inplace=True) else: mean = df[column].mean() df[column].fillna(mean, inplace=True) # Data inconsistencies could include invalid values or incorrect data types # Here, let\'s assume there\'s a column \'age\' which should be numeric if \'age\' in df.columns: df[\'age\'] = pd.to_numeric(df[\'age\'], errors=\'coerce\') df[\'age\'].fillna(df[\'age\'].mean(), inplace=True) return df def summary_statistics(df): Returns the summary statistics of the dataframe. Parameters: df (pd.DataFrame): The dataframe. Returns: pd.DataFrame: The summary statistics. return df.describe() def plot_histograms(df): Plots histograms for all numeric columns in the dataframe. Parameters: df (pd.DataFrame): The dataframe. numeric_columns = df.select_dtypes(include=[\'float64\', \'int64\']).columns df[numeric_columns].hist(bins=15, figsize=(15, 6), layout=(2, len(numeric_columns)//2)) plt.tight_layout() plt.show() # Example usage with a publicly available dataset def load_and_clean_example_dataset(): # Load the dataset df = pd.read_csv(\'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv\') # Clean the dataset df_cleaned = clean_dataset(df) # Calculate and display summary statistics print(summary_statistics(df_cleaned)) # Plot histograms plot_histograms(df_cleaned) # Uncomment the following line to execute the example # load_and_clean_example_dataset()"},{"question":"Write a Python function named `factorial_sum` that takes two integers `m` and `n` as input, where (0 leq m leq n). The function should calculate the factorial of each integer between `m` and `n` (inclusive) and return the sum of these factorials. Use an iterative approach to compute the factorials. For instance: ```python factorial_sum(1, 4) ``` should calculate (1! + 2! + 3! + 4!) which is (1 + 2 + 6 + 24 = 33), hence the function should return 33.","solution":"def factorial(n): result = 1 for i in range(2, n + 1): result *= i return result def factorial_sum(m, n): total = 0 for i in range(m, n + 1): total += factorial(i) return total"},{"question":"<p>In computer networks, the transmission delay is influenced by both the size of the packet being sent and the bandwidth of the transmission medium. Given a transmission medium\'s bandwidth ( B ) (in bits per second) and a packet size ( P ) (in bits), the transmission delay ( T ) can be calculated using the formula: [ T = frac{P}{B} ] You are required to write a function that calculates the total transmission delay for multiple packets. The function should take as inputs the bandwidth ( B ) (an integer) and a list of packet sizes ( packets ) (a list of integers). The function should output the total transmission delay for all the packets combined. # Input - An integer ( B ) (1 ≤ ( B ) ≤ 10^9), representing the bandwidth in bits per second. - A list ( packets ) of integers (1 ≤ ( packets[i] ) ≤ 10^6, 1 ≤ ( |packets| ) ≤ 10^5), where each element represents the size of a packet in bits. # Output - A single float value representing the total transmission delay in seconds, rounded to six decimal places. # Example ```python B = 1000000 packets = [1000, 2000, 3000, 1500, 2500] ``` The output should be: ```python 0.010000 ``` # Note For the given example, the calculation is: [ text{Total delay} = left(frac{1000}{1000000}right) + left(frac{2000}{1000000}right) + left(frac{3000}{1000000}right) + left(frac{1500}{1000000}right) + left(frac{2500}{1000000}right) = 0.001 + 0.002 + 0.003 + 0.0015 + 0.0025 = 0.010 text{ seconds} ]","solution":"def total_transmission_delay(B, packets): Calculate the total transmission delay for multiple packets. Parameters: B (int): Bandwidth in bits per second packets (list): List of packet sizes in bits Returns: float: Total transmission delay in seconds, rounded to six decimal places total_delay = sum(p / B for p in packets) return round(total_delay, 6)"},{"question":"Create a Python function that utilizes the pandas library to perform data manipulation on a given CSV file. The function should be able to load the CSV file into a DataFrame, perform operations such as filtering rows by a given condition, grouping by a specified column and calculating aggregated values, and saving the resulting DataFrame to a new CSV file. Ensure that the function handles any potential exceptions that may arise during these operations.","solution":"import pandas as pd def manipulate_csv(input_csv, output_csv, filter_condition, group_by_column, agg_func): Loads a CSV file, filters rows by a given condition, groups by a specified column, calculates aggregated values, and saves the resulting DataFrame to a new CSV file. Args: input_csv (str): The path to the input CSV file. output_csv (str): The path to save the resulting CSV file. filter_condition (str): The condition to filter rows. group_by_column (str): The column to group by. agg_func (dict): The aggregation functions for the grouping. Returns: None try: # Load the CSV file into a DataFrame df = pd.read_csv(input_csv) # Filter the DataFrame by the given condition df_filtered = df.query(filter_condition) # Group by the specified column and calculate aggregated values df_grouped = df_filtered.groupby(group_by_column).agg(agg_func) # Save the resulting DataFrame to a new CSV file df_grouped.to_csv(output_csv) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Design a function that takes two strings, `s1` and `s2`, and returns `True` if `s1` is an anagram of `s2`, and `False` otherwise. Anagrams are defined as strings that contain the same characters in the same frequencies. The function should disregard spaces and punctuation and should be case-insensitive. Provide an optimized solution in terms of time complexity, and describe the reasoning behind your approach.","solution":"import string def is_anagram(s1, s2): Returns True if s1 is an anagram of s2, False otherwise. # Remove spaces and punctuation, convert to lowercase refined_s1 = \'\'.join(char.lower() for char in s1 if char in string.ascii_letters) refined_s2 = \'\'.join(char.lower() for char in s2 if char in string.ascii_letters) # Use a dictionary to count character frequencies from collections import Counter return Counter(refined_s1) == Counter(refined_s2)"},{"question":"Create a function `findClosestPair` to solve the following problem: Given a list of unsorted integers `arr` and a target integer `target`, your task is to find two integers in the list whose sum is closest to the target. Return the pair of integers in a list. If there are multiple pairs with the same closest sum, return any one of them. Each input list will contain at least two integers. The solution should be efficient in terms of time complexity, ideally better than O(n^2). # Examples: Example 1: ``` Input: arr = [1, 60, -10, 70, -80, 85], target = 50 Output: [60, -10] ``` Explanation: The sum of 60 and -10 is 50, which is the closest to the target 50 than any other pair of numbers in the array. Example 2: ``` Input: arr = [10, 22, 28, 29, 30, 40], target = 54 Output: [22, 30] ``` Explanation: The sum of 22 and 30 is 52, which is the closest to the target 54 than any other pair of numbers in the array. Example 3: ``` Input: arr = [6, 8], target = 5 Output: [6, 8] ``` Explanation: As the list contains only two elements, they form the only pair available. Constraints: * `2 <= arr.length <= 10^4` * `-10^6 <= arr[i] <= 10^6` * `-10^6 <= target <= 10^6`","solution":"def findClosestPair(arr, target): arr.sort() left = 0 right = len(arr) - 1 closest_pair = [arr[left], arr[right]] closest_diff = abs(arr[left] + arr[right] - target) while left < right: current_sum = arr[left] + arr[right] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_pair = [arr[left], arr[right]] if current_sum < target: left += 1 else: right -= 1 return closest_pair"},{"question":"Design an algorithm in Python that can solve a Sudoku puzzle. The algorithm should take a partially filled 9x9 board (with 0 representing empty cells) as input and output a completed board that satisfies Sudoku rules.","solution":"def is_valid(board, row, col, num): Check whether it\'s valid to place the number \'num\' in the cell at (row, col). # Check the row and column for i in range(9): if board[row][i] == num or board[i][col] == num: return False # Check the 3x3 sub-grid startRow, startCol = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[startRow + i][startCol + j] == num: return False return True def solve_sudoku(board): Solve the Sudoku puzzle by filling the empty cells (represented by 0). Returns True if the board is solvable, otherwise returns False. empty = find_empty(board) if not empty: return True # Puzzle solved row, col = empty for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 # Undo the move return False def find_empty(board): Find an empty cell in the board. Return the position as a tuple (row, col), or None if the board is full. for r in range(9): for c in range(9): if board[r][c] == 0: return (r, c) return None"},{"question":"Write a function in Python that takes a list of integers as input and returns a list of tuples, where each tuple contains two elements: a unique integer from the input list and the number of times that integer appears in the list. The output list should be sorted in descending order by the count of appearances. If two integers have the same count, they should appear in ascending order in the output list. # Example: ```python def count_and_sort(numbers): # your code goes here print(count_and_sort([4, 6, 2, 6, 4, 6, 3, 3])) # Output: [(6, 3), (4, 2), (3, 2), (2, 1)] print(count_and_sort([1, 5, 2, 2, 5, 5, 1, 1, 1, 5])) # Output: [(1, 4), (5, 4), (2, 2)] ``` # Constraints: 1. The input list will only contain positive integers. 2. The function should handle lists with up to 10,000 integers efficiently. # Function Signature: ```python def count_and_sort(numbers: List[int]) -> List[Tuple[int, int]]: ```","solution":"from typing import List, Tuple from collections import Counter def count_and_sort(numbers: List[int]) -> List[Tuple[int, int]]: Returns a list of tuples where each tuple contains a unique integer from the input list and the number of times it appears in descending order by count. count = Counter(numbers) return sorted(count.items(), key=lambda x: (-x[1], x[0]))"},{"question":"Create a function that parses a given string to determine if it represents a valid hexadecimal color code. Hexadecimal color codes begin with a hashtag (#) followed by exactly six characters that are either digits or letters from A to F (case insensitive). The function should return true if the string is a valid hexadecimal color code, and false otherwise.","solution":"import re def is_valid_hex_color(code): Returns True if the input string is a valid hexadecimal color code, False otherwise. A valid hexadecimal color code must start with a hashtag (#) followed by exactly six hexadecimal characters (digits 0-9 and/or letters A-F/a-f). Parameters: - code (str): The input string to be checked. Returns: - bool: True if the input string is a valid hexadecimal color code, False otherwise. pattern = r\'^#[0-9A-Fa-f]{6}\' return bool(re.match(pattern, code))"},{"question":"Implement a function to deduce if a given string is an anagram of a palindromic string. A palindromic string reads the same forwards and backwards. To ascertain if a string can be an anagram of a palindromic string, every character must have an even count, except for at most one character that can have an odd count (to be placed in the middle). Function Signature: `def is_palindrome_anagram(s: str) -> bool` Input: - A single string `s` of length between 1 and 10^5 consisting of lowercase English letters. Output: - Boolean: Return True if it is possible to rearrange `s` into a palindrome, otherwise return False. Examples: - `is_palindrome_anagram(\\"civic\\")` => True - `is_palindrome_anagram(\\"ivicc\\")` => True - `is_palindrome_anagram(\\"hello\\")` => False - `is_palindrome_anagram(\\"aabb\\")` => True - `is_palindrome_anagram(\\"ab\\")` => False Create a function that evaluates whether a given string can be permuted to form a palindrome based on the character frequencies.","solution":"def is_palindrome_anagram(s: str) -> bool: Determines if a given string can be rearranged to form a palindrome. A palindrome requires that each character appears an even number of times, except for one character which can appear an odd number of times. Args: - s (str): The input string Returns: - bool: True if the string can be rearranged into a palindrome, False otherwise from collections import Counter # Count frequency of each character in the string char_counts = Counter(s) # Count the number of characters with odd counts odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For the string to be a palindrome anagram, at most one character can have an odd count return odd_count <= 1"},{"question":"Create a Python function that takes a list of integers and groups all anagrams together. An anagram group is defined as a list of words where each word is a permutation of the others. The function should return a list of lists, where each nested list contains an anagram group. Ensure that the solution is efficient and handles edge cases, such as empty lists and lists with no anagrams. Provide appropriate tests for the function.","solution":"from collections import defaultdict def group_anagrams(words): Groups a list of words into lists of anagrams. anagrams = defaultdict(list) for word in words: # Sort the word and use the sorted version as the key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Return the values (lists of anagram groups) as a list of lists return list(anagrams.values())"},{"question":"Write a function that takes a string as an input and returns a dictionary where each key is a unique character from the string, and the value is the number of occurrences of that character. The function should be case-sensitive and consider spaces and punctuation as valid characters. **Example Input:** ``` \\"Hello, World!\\" ``` **Example Output:** ``` { \'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \',\': 1, \' \': 1, \'W\': 1, \'r\': 1, \'d\': 1, \'!\': 1 } ``` # Constraints: - The input string can be up to 10,000 characters long. - The function should handle all ASCII characters.","solution":"def count_characters(s): Takes a string s and returns a dictionary where each key is a unique character from the string and the value is the number of occurrences of that character. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Using Python, write a program that reads a list of integers and identifies all the unique pairs of integers within this list that sum up to a specific target value. The program should output all such pairs in ascending order, without duplicates, and without regard to the order of the integers within each pair. Additionally, the program should handle edge cases, such as when the list is empty or contains only one element, by outputting an appropriate message. Ensure the program has optimal time complexity.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs of integers in the list \'arr\' that sum up to \'target\'. Parameters: arr (list of int): List of integers. target (int): The target sum for the pairs. Returns: list of tuple: List of tuples where each tuple represents a unique pair summing up to the target. if len(arr) < 2: return \\"Not enough elements to form pairs.\\" arr = sorted(arr) pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"Compose a function that, given a string containing a mixture of uppercase letters, lowercase letters, and digits, returns a new string where: - All digits are moved to the front of the string. - All letters retain their relative order after the digits. - The order of digits should also be same as their relative order in the input string. For example: Input: \\"a1b2c3\\" Output: \\"123abc\\" Input: \\"3F5G7h9\\" Output: \\"3579FGh\\" Ensure your function properly handles strings with any combination of characters, including no digits or no letters.","solution":"def rearrange_string(s): Given a string containing a mixture of uppercase letters, lowercase letters, and digits, returns a new string where: - All digits are moved to the front of the string. - All letters retain their relative order after the digits. - The order of digits should also be same as their relative order in the input string. Parameters: s (str): The input string. Returns: str: The rearranged string with digits in front. digits = \'\'.join([c for c in s if c.isdigit()]) letters = \'\'.join([c for c in s if c.isalpha()]) return digits + letters"},{"question":"Design a function that evaluates whether a string is a palindrome. A palindrome is a sequence that reads the same backward as forward, disregarding spaces, punctuation, and capitalization. Your solution should include steps to preprocess the string to remove non-alphanumeric characters and normalize case before performing the palindrome check. Implement the function and ensure it meets the outlined requirements.","solution":"import re def is_palindrome(s): Evaluates whether a string is a palindrome. A palindrome reads the same backward as forward, disregarding spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string reads the same backward as forward return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function `rearrange_pairs` that takes a list of 2-element tuples (pairs of integers) and returns a new list where each pair (a, b) is rearranged to (min(a, b), max(a, b)). After rearranging each pair, sort the list of pairs primarily by the first element of each pair, and secondarily by the second element of each pair. Example input: `[(5, 2), (1, 7), (3, 3)]` Example output: `[(1, 7), (3, 3), (2, 5)]` ```python def rearrange_pairs(pairs): # Complete the code here ```","solution":"def rearrange_pairs(pairs): Rearrange each pair (a, b) to (min(a, b), max(a, b)) and then sort the list of pairs primarily by the first element of each pair, and secondarily by the second element. # Rearrange pairs rearranged = [(min(a, b), max(a, b)) for a, b in pairs] # Sort the list of pairs rearranged.sort() return rearranged"},{"question":"In a multi-threaded environment, explain the importance and challenges of thread synchronization. Describe different synchronization mechanisms available in a programming language of your choice, comparing their strengths and weaknesses. Provide a complete example program demonstrating a scenario where thread synchronization is necessary, showing the potential issues that can arise without it and how they are resolved using synchronization techniques. Additionally, discuss how deadlocks can occur in such situations and strategies to avoid them. Finally, extend the example to include proper resource management, ensuring threads execute efficiently and safely without resource leaks or contention.","solution":"import threading class BankAccount: def __init__(self): self.balance = 0 self.lock = threading.Lock() def deposit(self, amount): with self.lock: current_balance = self.balance current_balance += amount self.balance = current_balance def withdraw(self, amount): with self.lock: current_balance = self.balance if current_balance >= amount: current_balance -= amount self.balance = current_balance return True return False def transfer(from_account, to_account, amount): if from_account.withdraw(amount): to_account.deposit(amount) return True return False # Example usage: account1 = BankAccount() account2 = BankAccount() # Depositing initial amounts account1.deposit(100) account2.deposit(50) # Starting transfer threads = [] for _ in range(10): t = threading.Thread(target=transfer, args=(account1, account2, 10)) t.start() threads.append(t) # Waiting for threads to finish for t in threads: t.join() print(f\\"Account1 balance: {account1.balance}\\") print(f\\"Account2 balance: {account2.balance}\\")"},{"question":"Your task is to develop a function that takes in a list of tuples, each representing student data in the format (student_name, student_id, number_of_subjects, average_grade, graduation_year). Additionally, the function should accept a dictionary where keys are subject names and values are lists containing the student IDs of students enrolled in those subjects. The function should enable the following operations: 1. Filtering and sorting the student data based on various criteria like average grade, graduation year, number of subjects, and student name. 2. Identifying and handling erroneous or missing student data entries. If a student’s data tuple does not contain exactly five elements or if a student\'s ID is not a number, raise a ValueError with a message indicating the student\'s name and the nature of the problem. 3. Identifying duplicate student IDs and raising a ValueError with a message indicating the duplicate student ID in such cases. 4. Allowing queries to return the subjects a particular student is enrolled in, given the student’s ID. 5. Providing robust error handling for cases where the student list or the subject dictionary is empty or not provided, returning appropriate messages. Additionally, write unit tests to validate the functionality of your code. Ensure that your function is optimized for efficiency, especially when dealing with large datasets, and takes into account edge cases and input validation requirements.","solution":"def manage_student_data(students, subjects): if not students or not isinstance(students, list): return \\"Student list is empty or not provided.\\" if not subjects or not isinstance(subjects, dict): return \\"Subject dictionary is empty or not provided.\\" # Checking constraints and processing student data student_ids = set() for student in students: if len(student) != 5: raise ValueError(f\\"Incorrect data format for student: {student[0]}\\") if not isinstance(student[1], int): raise ValueError(f\\"Student ID is not a number for student: {student[0]}\\") if student[1] in student_ids: raise ValueError(f\\"Duplicate student ID found: {student[1]}\\") student_ids.add(student[1]) def filter_and_sort(criteria): if criteria == \'average_grade\': return sorted(students, key=lambda x: x[3], reverse=True) elif criteria == \'graduation_year\': return sorted(students, key=lambda x: x[4]) elif criteria == \'number_of_subjects\': return sorted(students, key=lambda x: x[2], reverse=True) elif criteria == \'student_name\': return sorted(students, key=lambda x: x[0]) else: return \\"Invalid criteria provided.\\" def get_subjects_by_student_id(student_id): enrolled_subjects = [] for subject, ids in subjects.items(): if student_id in ids: enrolled_subjects.append(subject) return enrolled_subjects return { \'filter_and_sort\': filter_and_sort, \'get_subjects_by_student_id\': get_subjects_by_student_id }"},{"question":"Design a function that takes a string of words as input and returns a new string where the order of the words is reversed. For example, given the input \\"Hello world this is a test\\", the output should be \\"test a is this world Hello\\". Consider the efficiency and readability of your code and implement error handling for edge cases such as an empty string or special characters.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): A string of words. Returns: str: A new string with the order of the words reversed. if not isinstance(sentence, str): raise ValueError(\\"Input must be a string\\") words = sentence.split() reversed_sentence = \' \'.join(words[::-1]) return reversed_sentence"},{"question":"Given two arrays of integers, `arr1` and `arr2`, write a function that returns an array of their intersection. Each element in the result must appear in `arr1` and `arr2` as many times as it shows in both arrays, and you may return the result in any order. Example: ```python arr1 = [4,9,5] arr2 = [9,4,9,8,4] Output: [4,9] ``` Note: - The result can be in any order. - It\'s guaranteed that each element in the result appears as many times as it shows in both arrays.","solution":"def intersect(arr1, arr2): Returns the intersection of two arrays, each element appears as many times as it shows in both arrays. from collections import Counter counter1 = Counter(arr1) counter2 = Counter(arr2) intersection = [] for element in counter1: if element in counter2: intersection.extend([element] * min(counter1[element], counter2[element])) return intersection"},{"question":"Design a function that takes two integer arrays and merges them into a single sorted array without using any built-in sorting functions. The function should handle arrays containing duplicate elements. The function should strive for the best possible time complexity. If either of the input arrays is empty, the function should return the non-empty array as the result. Ensure that the function can handle arrays with up to 1 million elements each. The implementation should also handle the case where both arrays are empty by returning an appropriate message. Additionally, the function should be able to identify and handle negative values correctly and include them in the sorted merged array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays arr1 and arr2 into a single sorted array without using built-in sorting functions. Handles empty arrays, duplicates, and negative values. if not arr1 and not arr2: return \\"Both arrays are empty\\" if not arr1: return arr2 if not arr2: return arr1 merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append remaining elements of arr1 or arr2 (if any) while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Develop a program that simulates a simple ticket booking system for a cinema. Implement the function `book_tickets` that takes the following parameters: 1. `current_bookings`: A dictionary where keys are row numbers (integers) and values are lists of integers representing booked seat numbers in that row. 2. `requested_seats`: A dictionary with similar structure to `current_bookings`, representing the seat number requests. The objective of `book_tickets` is to attempt to book the requested seats into the `current_bookings` dictionary, ensuring that no seat is double-booked. If some requested seats are already booked, they should be ignored. # Constraints - Row numbers and seat numbers are positive integers. - The requested seat numbers for each row are given as lists which can contain duplicates. Duplicates should be ignored beyond their first occurrence in requests. - Assume rows and seat numbers being requested exist beforehand; there is no need for row or seat creation logic. # Tasks 1. Implement the function `book_tickets` to update the current bookings based on requested seats. 2. Ensure you are not modifying any existing books if the seat is already occupied. 3. Return the updated seat bookings post-processing. # Function Signature ```python def book_tickets(current_bookings: dict, requested_seats: dict) -> dict: pass ``` # Example Usage ```python current_bookings = { 1: [1, 2, 5], 2: [3], 3: [6, 7, 8] } requested_seats = { 1: [3, 4, 2, 2], 2: [1, 4], 3: [6, 9] } result = book_tickets(current_bookings, requested_seats) print(result) ``` # Expected Output ```python { 1: [1, 2, 5, 3, 4], 2: [3, 1, 4], 3: [6, 7, 8, 9] } ```","solution":"def book_tickets(current_bookings: dict, requested_seats: dict) -> dict: Updates the current bookings based on the requested seats. Args: current_bookings (dict): Current booking status, where keys are row numbers (int) and values are lists of booked seat numbers (int) in that row. requested_seats (dict): Requested seats to be booked, with the same structure as current_bookings. Returns: dict: Updated booking status. for row, requested in requested_seats.items(): if row not in current_bookings: current_bookings[row] = [] # Add requested seats to the current bookings if they are not already booked for seat in requested: if seat not in current_bookings[row]: current_bookings[row].append(seat) return current_bookings"},{"question":"In Python, iterators and generators are powerful tools for creating iterable sequences in a memory-efficient way. Explain the difference between iterators and generators, with examples. Then, implement a generator function that yields the Fibonacci sequence up to a given number \'n\'. Ensure your function handles input validation gracefully. Discuss how this generator might be advantageous over a traditional list-based approach in terms of performance and resource utilization.","solution":"def fibonacci(n): Generator function to yield the Fibonacci sequence up to the given number \'n\'. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") a, b = 0, 1 while a <= n: yield a a, b = b, a + b"},{"question":"Given a string s consisting of lowercase letters, design an algorithm to find the longest substring that contains no more than K distinct characters. If there are multiple longest substrings with the same length, return the one that appears first. For example, if s = \\"aabacbebebe\\" and K = 3, the longest substring that contains no more than 3 distinct characters is \\"cbebebe\\". Function Signature: ```python def longest_substring_k_distinct(s: str, k: int) -> str: pass ```","solution":"def longest_substring_k_distinct(s: str, k: int) -> str: Finds the longest substring with no more than K distinct characters. if k == 0 or not s: return \\"\\" start = 0 max_length = 0 max_substr = \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > k: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 current_length = end - start + 1 if current_length > max_length: max_length = current_length max_substr = s[start:end+1] return max_substr"},{"question":"Implement a function `find_unique_characters` that takes a string as input and returns a list of unique characters in the order they first appear in the string. Each character should be included only once, and the function should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. Example: ```python def find_unique_characters(s): # Your code here # Sample Usage print(find_unique_characters(\\"apple\\")) # Output: [\'a\', \'p\', \'l\', \'e\'] print(find_unique_characters(\\"banana\\")) # Output: [\'b\', \'a\', \'n\'] print(find_unique_characters(\\"AaBbCc\\")) # Output: [\'A\', \'a\', \'B\', \'b\', \'C\', \'c\'] ```","solution":"def find_unique_characters(s): Returns a list of unique characters in the order they first appear in the string. The comparison is case-sensitive. seen = set() unique_chars = [] for char in s: if char not in seen: unique_chars.append(char) seen.add(char) return unique_chars"},{"question":"Implement a function to calculate the Gini impurity of a dataset. The dataset consists of `n` samples, each belonging to one of `k` classes. The Gini impurity is defined as 1 minus the sum of the squared probabilities of each class. Your function should take as input a list of class labels and output the Gini impurity as a float. Additionally, demonstrate how your function can be used to evaluate the impurity of a node in a decision tree while splitting a given dataset on a specified attribute. Discuss how the Gini impurity influences the choice of splitting attribute in the context of building a decision tree.","solution":"from collections import Counter def gini_impurity(labels): Calculate the Gini impurity for a given set of class labels. Args: labels (list): List of class labels. Returns: float: Gini impurity value. n = len(labels) if n == 0: return 0.0 label_counts = Counter(labels) impurity = 1.0 for count in label_counts.values(): prob = count / n impurity -= prob ** 2 return impurity # Example usage of the Gini impurity function in a decision tree splitting scenario def split_dataset(dataset, attribute_index, attribute_value): left_split = [row for row in dataset if row[attribute_index] <= attribute_value] right_split = [row for row in dataset if row[attribute_index] > attribute_value] return left_split, right_split def gini_impurity_split(left_split, right_split): n_left = len(left_split) n_right = len(right_split) n_total = n_left + n_right if n_total == 0: return 0.0 labels_left = [row[-1] for row in left_split] labels_right = [row[-1] for row in right_split] weight_left = n_left / n_total weight_right = n_right / n_total impurity = (weight_left * gini_impurity(labels_left) + weight_right * gini_impurity(labels_right)) return impurity # Gini impurity influences the choice of splitting attribute in decision tree building: # A decision tree algorithm aims to split the dataset at each node in a way that maximizes # the homogeneity of the resulting sub-nodes. The attribute and its value that minimize # the Gini impurity after the split are chosen."},{"question":"Write a Python function called `find_highest_density_cities` that takes in two dictionaries as inputs: one containing city names as keys and their population as values, and the other containing city names as keys and their land area in square kilometers as values. The function should compute the population density for each city and then return the top n cities with the highest population density. The function should handle cases with missing data, invalid values (e.g., negative population or land area), or cities that appear in one dictionary but not the other. Additionally, your function should return a statistical summary including the average, median, and mode of the population densities for the entire dataset. Ensure your solution is efficient and can handle large inputs.","solution":"from statistics import mean, median, mode, StatisticsError def find_highest_density_cities(populations, land_areas, n): Finds the top n cities with the highest population density and returns a statistical summary. Parameters: populations (dict): Dictionary with city names as keys and population as values. land_areas (dict): Dictionary with city names as keys and land area in sq km as values. n (int): Number of top cities to return based on population density. Returns: list: Top n cities with the highest population density. dict: Statistical summary containing average, median, and mode of the population densities. if n <= 0: return [], {} densities = {} for city, population in populations.items(): if city in land_areas: land_area = land_areas[city] if population > 0 and land_area > 0: densities[city] = population / land_area sorted_densities = sorted(densities.items(), key=lambda item: item[1], reverse=True) top_cities = sorted_densities[:n] top_city_names = [city for city, density in top_cities] density_values = list(densities.values()) if not density_values: return [],{} try: density_mode = mode(density_values) except StatisticsError: density_mode = None stats_summary = { \'average\': mean(density_values), \'median\': median(density_values), \'mode\': density_mode } return top_city_names, stats_summary"},{"question":"Write a Python function that simulates the working of a stack data structure, ensuring the compliance with Last In First Out (LIFO) principle. Your function should allow operations like push, pop, peek, and check if the stack is empty. Additionally, include input validation to ensure elements pushed to the stack are integers only, and the stack doesn’t become empty before a pop operation. Here’s a starter code structure: ```python class Stack: def __init__(self): self.stack = [] # Push method def push(self, element): pass # Pop method def pop(self): pass # Peek method def peek(self): pass # Check if stack is empty def is_empty(self): pass # Example usage s = Stack() s.push(5) s.push(10) s.push(15) print(s.peek()) # Should print 15 s.pop() print(s.peek()) # Should print 10 print(s.is_empty()) # Should print False ```","solution":"class Stack: def __init__(self): self.stack = [] # Push method def push(self, element): if not isinstance(element, int): raise ValueError(\\"Only integers can be pushed to the stack\\") self.stack.append(element) # Pop method def pop(self): if self.is_empty(): raise IndexError(\\"Pop from an empty stack\\") return self.stack.pop() # Peek method def peek(self): if self.is_empty(): raise IndexError(\\"Peek from an empty stack\\") return self.stack[-1] # Check if stack is empty def is_empty(self): return len(self.stack) == 0 # Example usage s = Stack() s.push(5) s.push(10) s.push(15) print(s.peek()) # Should print 15 s.pop() print(s.peek()) # Should print 10 print(s.is_empty()) # Should print False"},{"question":"Develop a Python function that takes a list of dictionaries containing information about employees (name, department, salary, years of experience) and returns a dictionary where the keys are the department names and the values are lists of employee names sorted in descending order by their years of experience. Write appropriate code to demonstrate the function with sample data and ensure it handles edge cases such as empty lists or departments with no employees.","solution":"def employees_by_department(employees): Takes a list of employee dictionaries and returns a dictionary where keys are department names and values are lists of employee names sorted in descending order by their years of experience. if not employees: return {} dept_dict = {} for emp in employees: department = emp.get(\'department\') name = emp.get(\'name\') years_exp = emp.get(\'years_of_experience\') if department not in dept_dict: dept_dict[department] = [] dept_dict[department].append((name, years_exp)) for dept in dept_dict: dept_dict[dept].sort(key=lambda x: x[1], reverse=True) dept_dict[dept] = [name for name, _ in dept_dict[dept]] return dept_dict"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced with the sum of its binary digits. The binary digits of a number are the digits in its binary (base-2) representation. For example, the binary representation of 5 is \'101\', which contains the digits 1, 0, and 1, summing to 2. Example: ``` Input: [5, 3, 8] Output: [2, 2, 1] Explanation: - The binary representation of 5 is \'101\'. The sum of the digits is 1+0+1 = 2. - The binary representation of 3 is \'11\'. The sum of the digits is 1+1 = 2. - The binary representation of 8 is \'1000\'. The sum of the digits is 1+0+0+0 = 1. ```","solution":"def sum_of_binary_digits(lst): Takes a list of integers and returns a new list where each integer is replaced with the sum of its binary digits. def sum_binary_digits(n): return sum(int(digit) for digit in bin(n)[2:]) return [sum_binary_digits(num) for num in lst]"},{"question":"Implement a function `find_char_frequencies` that accepts a single string and returns a dictionary with the frequency of each character in the string. Ignore whitespaces and consider all characters as lowercase. For example, the input \\"Hello World\\" should yield the dictionary `{\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}`.","solution":"def find_char_frequencies(text): Returns a dictionary with the frequency of each character in the string. Ignore whitespaces and consider all characters as lowercase. text = text.replace(\\" \\", \\"\\").lower() freq_dict = {} for char in text: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Create a function that accepts an array of integers and an integer `k`. The function should return the minimum length of a contiguous subarray of which the sum is greater than or equal to `k`. If there is no such subarray, return 0. Ensure that your function handles invalid input gracefully.","solution":"def min_subarray_len(arr, k): Finds the minimum length of a contiguous subarray with sum >= k. If such a subarray doesn\'t exist, returns 0. :param arr: List of integers :param k: Integer, the target sum :return: Integer, the minimum length of subarray with sum >= k if not arr or not isinstance(k, int) or not isinstance(arr, list) or any(not isinstance(x, int) for x in arr): return 0 n = len(arr) min_len = float(\'inf\') left = 0 curr_sum = 0 for right in range(n): curr_sum += arr[right] while curr_sum >= k: min_len = min(min_len, right - left + 1) curr_sum -= arr[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Write a function in Python to rotate a given list of integers by \'k\' positions to the right. The function should accept two arguments: the list of integers and an integer \'k\' representing the number of positions to rotate. For example, given the list: numbers = [1, 2, 3, 4, 5] and k = 2, the output should be [4, 5, 1, 2, 3].","solution":"def rotate_list(nums, k): Rotates the given list of integers \'nums\' by \'k\' positions to the right. Args: nums (list): A list of integers. k (int): Number of positions to rotate the list. Returns: list: Rotated list. if not nums: return nums k = k % len(nums) return nums[-k:] + nums[:-k]"},{"question":"Write a function in Python that takes a string containing only parentheses characters `(` and `)` and determines whether the parentheses are balanced. Your solution must not use any additional data structures like stacks, arrays, or lists. Additionally, ensure your function is efficient, with a time complexity of O(n), where n is the length of the string. In the case of an invalid input (including characters other than `(` and `)`), return `\\"Invalid input\\"`. Here is an example of a correct implementation that does not handle invalid inputs and uses an additional data structure: ```python def is_balanced(s): stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack # Example usage: s = \\"(()())\\" print(is_balanced(s)) # Output: True ``` Your task is to create a new function, adhering to the constraints, and avoiding the use of extra data structures, while handling invalid input appropriately.","solution":"def is_balanced_parentheses(s): Checks if the string of parentheses is balanced. Returns True if balanced, False if not balanced, and \\"Invalid input\\" if input is invalid. # Check if input contains invalid characters if not all(c in \'()\' for c in s): return \\"Invalid input\\" # Initialize counter for balance checking balance = 0 for char in s: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance goes negative, parentheses are not balanced if balance < 0: return False # If balance is zero, parentheses are balanced return balance == 0"},{"question":"Write a Python function called `find_max_min(numbers)` that takes a list of integers as input, and returns a tuple containing the largest and smallest numbers from the list. If the list is empty, return None. Make sure your function handles lists with both positive and negative numbers. Example: ```python def find_max_min(numbers): if not numbers: return None max_num = max(numbers) min_num = min(numbers) return (max_num, min_num) print(find_max_min([3, 1, -2, 7, 9])) # Output: (9, -2) print(find_max_min([])) # Output: None ```","solution":"def find_max_min(numbers): Return a tuple containing the largest and smallest numbers from the list. If the list is empty, return None. if not numbers: return None max_num = max(numbers) min_num = min(numbers) return (max_num, min_num)"},{"question":"Create a function `find_second_largest(lst)` that takes a list of integers as input and returns the second largest unique number in the list. If the list has fewer than 2 unique numbers, return None. For example: - Input: [3, 5, 1, 5, 3, 8, 7] - Output: 7 - Input: [1, 1, 1, 1] - Output: None Please ensure your function has a time complexity of O(n) or better.","solution":"def find_second_largest(lst): Returns the second largest unique number from the list. If the list has fewer than 2 unique numbers, returns None. if len(lst) < 2: return None first_largest = second_largest = float(\'-inf\') unique_numbers = set(lst) if len(unique_numbers) < 2: return None for num in unique_numbers: if num > first_largest: second_largest = first_largest first_largest = num elif num > second_largest and num != first_largest: second_largest = num return second_largest"},{"question":"Create a Python script that reads a CSV file containing a list of employees\' names and their salaries, processes the data to calculate the average salary, and then identifies and prints the names of employees who earn above the average salary. Your solution should handle potential errors gracefully, such as missing entries or incorrect data formats, ensuring robustness and reliability throughout the data analysis process.","solution":"import csv def read_csv_and_calculate_average(file_path): try: # Initialize variables employees = [] salaries = [] # Read the CSV file with open(file_path, mode=\'r\') as file: csv_reader = csv.reader(file) next(csv_reader) # Skip header row for row in csv_reader: if len(row) != 2: print(f\\"Skipping malformed row: {row}\\") continue try: name = row[0] salary = float(row[1]) employees.append(name) salaries.append(salary) except ValueError: print(f\\"Skipping row with invalid data: {row}\\") # Calculate average salary if not salaries: raise ValueError(\\"No valid salary data found.\\") average_salary = sum(salaries) / len(salaries) # Find employees with salaries above the average above_average_employees = [employees[i] for i in range(len(salaries)) if salaries[i] > average_salary] return average_salary, above_average_employees except FileNotFoundError: print(f\\"File not found: {file_path}\\") return None, None except Exception as e: print(f\\"An error occurred: {e}\\") return None, None # Example usage (Uncomment the following two lines to use the function in a script): # average_salary, above_average_employees = read_csv_and_calculate_average(\'employees.csv\') # print(f\\"Average Salary: {average_salary}nEmployees earning above average: {above_average_employees}\\")"},{"question":"Write a function that takes as input a list of words and returns a dictionary where the keys are the lengths of the words, and the values are lists containing the words of that length. For example, given the list `[\\"apple\\", \\"banana\\", \\"pear\\", \\"kiwi\\", \\"grape\\"]`, the function should return `{5: [\'apple\', \'grape\'], 6: [\'banana\'], 4: [\'pear\', \'kiwi\']}`.","solution":"def categorize_words_by_length(words): Takes a list of words and returns a dictionary where the keys are the lengths of the words, and the values are lists containing the words of that length. :param words: List of words :type words: List[str] :return: Dictionary categorizing words by length :rtype: dict length_dict = {} for word in words: length = int(len(word)) if length not in length_dict: length_dict[length] = [] length_dict[length].append(word) return length_dict"},{"question":"Write a Python function that takes as input a list of integers and an integer k, and returns a list of all unique pairs of numbers from the input list that sum up to k. The pairs should be returned as tuples, and each pair should be sorted in ascending order. The final list of pairs should be sorted lexicographically. Example: - Input: [1, 5, 2, 3, 4, 6], k = 7 - Output: [(1, 6), (2, 5), (3, 4)]","solution":"def find_pairs_with_sum(nums, k): Returns a list of unique pairs (as tuples) from the input list that sum up to k. Each pair is sorted in ascending order, and the final list of pairs is sorted lexicographically. :param nums: List of integers :param k: Target sum :return: List of tuples nums.sort() # Sort the input list to facilitate pair finding pairs = set() seen = set() for num in nums: complement = k - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(pairs)"},{"question":"You are given a problem: Optimal Task Assignment Description: You have a list of `n` distinct tasks, each with a unique duration array `tasks` where `tasks[i]` represents the duration of the `i-th` task. Your goal is to assign these tasks to exactly `n/2` workers in such a way that each worker is assigned exactly 2 tasks, and the sum of the durations of the tasks assigned to each worker is minimized. Given the list of task durations, determine the optimal assignment of tasks to workers: - Each worker is assigned exactly two tasks. - The objective is to minimize the maximum sum of task durations assigned to any worker. Example 1: Input: tasks = [5, 2, 1, 6, 4, 4] Output: [[1, 6], [2, 5], [4, 4]] Explanation: One way to assign the tasks to workers is as follows: - Worker 1 gets tasks with durations 1 and 6 (sum is 7) - Worker 2 gets tasks with durations 2 and 5 (sum is 7) - Worker 3 gets tasks with durations 4 and 4 (sum is 8) The maximum sum of task durations assigned to any worker is minimized to 8. Note: - The input list will always be even (n % 2 == 0). - `2 <= n <= 10^4` - `1 <= tasks[i] <= 10^6`","solution":"def optimal_task_assignment(tasks): Given a list of task durations, returns the optimal assignment of tasks to workers to minimize the maximum sum of task durations assigned to any worker. :param tasks: List of integers representing the task durations. :return: List of lists where each sub-list contains two tasks assigned to a worker. tasks.sort() n = len(tasks) assignment = [] for i in range(n // 2): assignment.append([tasks[i], tasks[n - 1 - i]]) return assignment"},{"question":"Write a Python function that takes a string containing an algebraic expression comprised of single-digit integers and the four basic operations (addition, subtraction, multiplication, and division) without any spaces, and evaluates the expression. The function should handle proper operator precedence. Example: Input: \\"2+3*4-5/2\\" Output: 11.5","solution":"def evaluate_expression(expression): Evaluates a string containing an algebraic expression comprised of single-digit integers and the four basic operations (addition, subtraction, multiplication, and division) with proper operator precedence. import re tokens = re.findall(r\'d+|[*/+-]\', expression) def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) values = [] operators = [] precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} for token in tokens: if token.isdigit(): values.append(int(token)) else: while (operators and precedence[operators[-1]] >= precedence[token]): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"Design a function that takes a list of integers and returns the maximum sum of any non-empty contiguous subarray within the list. This problem is a classic example of employing dynamic programming strategies in optimization problems. Function Signature: ```python def max_subarray_sum(arr: List[int]) -> int: ``` # Input: - An array `arr` of integers with `1 <= len(arr) <= 10000` and `-10000 <= arr[i] <= 10000` for each `i`. # Output: - A single integer representing the maximum sum of any non-empty contiguous subarray. # Example: Example 1: ```python Input: arr = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. ``` Example 2: ```python Input: arr = [1] Output: 1 Explanation: There is only one element in the array. ``` Example 3: ```python Input: arr = [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum = 23. ```","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: This function takes a list of integers and returns the maximum sum of any non-empty contiguous subarray. This solution uses Kadane\'s algorithm to find the maximum sum subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Implement an efficient caching mechanism to optimize data retrieval performance for a frequently accessed database in a web application. Utilize a Least Recently Used (LRU) cache algorithm and provide detailed code using Python\'s `collections` module. The cache should include necessary functions to get, put, and remove data, and automatically handle cache eviction when the capacity limit is reached. Additionally, illustrate how concurrent accesses are managed to ensure thread safety, possibly by integrating the `threading` module. Ensure comprehensive testing to validate the cache performance under various load conditions.","solution":"import collections import threading class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = collections.OrderedDict() self.lock = threading.Lock() def get(self, key: int) -> int: with self.lock: if key not in self.cache: return -1 self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int): with self.lock: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) def remove(self, key: int) -> bool: with self.lock: if key in self.cache: del self.cache[key] return True return False"},{"question":"Create a function in Python that takes a list of integers and returns the length of the longest contiguous subsequence that sums to a target value. If no such subsequence exists, return 0.","solution":"def longest_subsequence_with_target_sum(arr, target): Returns the length of the longest contiguous subsequence that sums to the target value. If no such subsequence exists, returns 0. prefix_sum = 0 prefix_sum_index_map = {0: -1} max_length = 0 for index, num in enumerate(arr): prefix_sum += num if prefix_sum - target in prefix_sum_index_map: max_length = max(max_length, index - prefix_sum_index_map[prefix_sum - target]) if prefix_sum not in prefix_sum_index_map: prefix_sum_index_map[prefix_sum] = index return max_length"},{"question":"Develop a Python function that simulates a simplified system for tracking physical books in a small library. The function should be able to add new books, remove books by title, and search for books by either title or author. Additionally, the function should be able to list all the books currently in the library\'s inventory, providing details such as title, author, and publication year. Ensure to make use of appropriate data structures for efficient storage and retrieval of book information. Additionally, handle cases where attempted operations (like removing or searching for a non-existent book) should be gracefully managed and provide clear feedback.","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year): Adds a new book to the library. book = {\'title\': title, \'author\': author, \'year\': year} self.books.append(book) return \\"Book added successfully.\\" def remove_book(self, title): Removes a book by its title. for book in self.books: if book[\'title\'] == title: self.books.remove(book) return \\"Book removed successfully.\\" return \\"Book not found.\\" def search_books(self, query): Searches for books by title or author. results = [book for book in self.books if query.lower() in book[\'title\'].lower() or query.lower() in book[\'author\'].lower()] return results def list_books(self): Lists all the current books in the library. return self.books"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(nums): pass # Your code here","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(nums): Returns a list containing only the prime numbers from the original list nums. return [num for num in nums if is_prime(num)]"},{"question":"Create a function that accepts a list of integers and returns the length of the longest subsequence where each element is one more than the previous element in the subsequence. For example, for the input `[1, 9, 3, 10, 2, 20, 3]`, the function should return `3` because the longest subsequence `[1, 2, 3]` consists of 3 elements. **Input:** - A list of integers, `numbers`, where each integer is `n`. - Example: `[1, 9, 3, 10, 2, 20, 3]` **Output:** - An integer representing the length of the longest increasing consecutive subsequence. - Example: `3` **Constraints:** - The list `numbers` will contain at most `10^4` elements. - Each integer in `numbers` will be between `1` and `10^5`. **Example:** ```python # Input numbers = [1, 9, 3, 10, 2, 20, 3] # Output 3 # Explanation The longest subsequence with consecutive integers is [1, 2, 3]. Therefore, the length is 3. ```","solution":"def longest_consecutive_subsequence_length(numbers): if not numbers: return 0 num_set = set(numbers) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You have been assigned the task of developing a Python script to process a large dataset of e-commerce transactions. The goal is to calculate the monthly total sales for each product category. Each transaction record consists of the following fields: `transaction_id`, `date_time`, `product_id`, `category`, `amount`. Your script should: 1. Read the transaction data from a CSV file. 2. Parse the `date_time` field to determine the month of each transaction. 3. Aggregate the total sales for each product category by month. 4. Output the result as a new CSV file with columns: `month`, `category`, `total_sales`. **Requirements:** - Use the `pandas` library for data manipulation and CSV handling. - Ensure the script handles any missing or corrupt data gracefully. - Optimize for performance to handle potentially millions of transactions efficiently. Provide your implementation and ensure it includes basic error handling and logging for debugging purposes.","solution":"import pandas as pd def process_transactions(input_csv, output_csv): Processes the transaction data to calculate monthly total sales for each product category. Args: input_csv (str): Path to the input CSV file containing transaction data. output_csv (str): Path to the output CSV file to save the aggregated results. Returns: None try: # Read the transaction data from the input CSV file data = pd.read_csv(input_csv) # Ensure that required columns are present required_columns = [\'transaction_id\', \'date_time\', \'product_id\', \'category\', \'amount\'] missing_columns = [col for col in required_columns if col not in data.columns] if missing_columns: raise ValueError(f\\"Missing columns in input CSV: {\', \'.join(missing_columns)}\\") # Parse the date_time field to extract month and year data[\'date_time\'] = pd.to_datetime(data[\'date_time\'], errors=\'coerce\') data[\'month\'] = data[\'date_time\'].dt.to_period(\'M\') # Filter out rows with invalid date_time or amount data = data.dropna(subset=[\'date_time\', \'amount\']) # Aggregate total sales for each product category by month aggregated_data = data.groupby([\'month\', \'category\'])[\'amount\'].sum().reset_index() aggregated_data.columns = [\'month\', \'category\', \'total_sales\'] # Convert the \'month\' back to string for CSV writing aggregated_data[\'month\'] = aggregated_data[\'month\'].astype(str) # Output the result as a new CSV file aggregated_data.to_csv(output_csv, index=False) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Write a Python function `find_second_largest(arr)` that takes a list of integers `arr` and returns the second largest element in the list. If the list contains fewer than 2 elements, the function should return `None`. You are not allowed to use the built-in `sorted()` function or any other sorting mechanisms available in Python. Example: ```python print(find_second_largest([3, 2, 1, 4, 5])) # Output: 4 print(find_second_largest([10])) # Output: None print(find_second_largest([])) # Output: None print(find_second_largest([2, 2, 3, 1])) # Output: 2 ```","solution":"def find_second_largest(arr): Returns the second largest element in the list or None if the list contains fewer than 2 elements. :param arr: list of integers :return: second largest integer or None if len(arr) < 2: return None first_largest = second_largest = float(\'-inf\') for num in arr: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num return second_largest if second_largest != float(\'-inf\') else None"},{"question":"Design a function that accepts a string containing a mathematical expression and evaluates the value of the expression. The expression may include the following operators: addition (+), subtraction (-), multiplication (*), and division (/). Parentheses may also be used to alter the precedence of operations. Your function should correctly handle operator precedence and parentheses. For example: - If the input string is \\"3+2*2\\", the output should be 7. - If the input string is \\" 3/2 \\", the output should be 1. - If the input string is \\" (1+(4+5+2)-3)+(6+8) \\", the output should be 23. Note: - You can assume that the given expression is valid. - Division between two integers should truncate toward zero. - Do not use the \'eval\' function in Python or the equivalent function in any other language. Your function signature should look like: ```python def calculate(s: str) -> int: pass ```","solution":"def calculate(s: str) -> int: Evaluates the value of a given mathematical expression. :param s: A string containing a mathematical expression. :return: The result of the expression as an integer. def apply_operator(operands, operator): b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(int(a / b)) # truncates toward zero def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 operands = [] operators = [] i = 0 while i < len(s): if s[i] == \' \': i += 1 continue if s[i] in \'0123456789\': num = 0 while i < len(s) and s[i].isdigit(): num = num * 10 + int(s[i]) i += 1 operands.append(num) i -= 1 elif s[i] == \'(\': operators.append(s[i]) elif s[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operands, operators.pop()) operators.pop() elif s[i] in \'+-*/\': while operators and precedence(operators[-1]) >= precedence(s[i]): apply_operator(operands, operators.pop()) operators.append(s[i]) i += 1 while operators: apply_operator(operands, operators.pop()) return operands[-1]"},{"question":"Create a function to decode a run-length encoded string back to its original form. The input will be a string in run-length encoding format where a single character is followed by its frequency of occurrence. Your function should return the expanded original string. For example, \\"a4b3c2\\" should be decoded to \\"aaaabbbcc\\".","solution":"def decode_rle(encoded_str): Decodes a run-length encoded string back to its original form. Parameters: encoded_str (str): The run-length encoded string. Returns: str: The decoded original string. decoded_str = \\"\\" i = 0 while i < len(encoded_str): char = encoded_str[i] i += 1 freq = \\"\\" while i < len(encoded_str) and encoded_str[i].isdigit(): freq += encoded_str[i] i += 1 decoded_str += char * int(freq) return decoded_str"},{"question":"Implement a function that accepts an array of integers and returns a new array containing only the unique elements from the original array, in the order they first appeared. Do not use any additional libraries or built-in functions to remove duplicates. Example: Input: [4, 5, 4, 6, 6, 7, 8, 8] Output: [4, 5, 6, 7, 8]","solution":"def unique_elements(arr): Returns a new array containing only the unique elements from the original array, in the order they first appeared. seen = set() unique_arr = [] for element in arr: if element not in seen: seen.add(element) unique_arr.append(element) return unique_arr"},{"question":"Given a list of integers, write a Python function that returns the first `k` largest elements in descending order. You are not allowed to use built-in sorting functions like `sorted()` or `sort()`. Instead, you should use a heap data structure to achieve the result efficiently. If `k` is greater than the number of elements in the list, return the entire list sorted in descending order. **Function Signature**: `def largest_elements(nums: List[int], k: int) -> List[int]:` **Input**: - `nums` (List[int]): A list of integers which may contain both positive and negative values. - `k` (int): An integer representing the number of largest elements to return. **Output**: - `List[int]`: A list of `k` largest integers from the input list sorted in descending order. **Example**: ```python >>> largest_elements([3, 1, 5, 12, 2, 11, 15, 8], 3) [15, 12, 11] >>> largest_elements([3, 1, 5, 12, 2, 11, 15, 8], 5) [15, 12, 11, 8, 5] >>> largest_elements([3, 1, 5, 12], 6) [12, 5, 3, 1] ``` **Constraints**: - The list `nums` will have at least one element. - The value of `k` will be at least 1. - The maximum number of elements in the list will be 10^5.","solution":"from typing import List import heapq def largest_elements(nums: List[int], k: int) -> List[int]: Returns the first k largest elements in descending order from the given list of integers. if k >= len(nums): return sorted(nums, reverse=True) min_heap = nums[:k] heapq.heapify(min_heap) # Create a min-heap of the first k elements # Iterate through the remaining elements for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) # Sort the heap in descending order to return the result return sorted(min_heap, reverse=True)"},{"question":"You are presented with a problem titled: K-Difference Pairs in an Array. The problem is defined as follows: You are provided with an array `nums` composed of integers, and an integer `k`. A **pair** (`i`, `j`) is a k-difference pair if it satisfies the following conditions: 1. `nums[i]` and `nums[j]` are separated by exactly `k`, 2. `i != j`. Your task is to return the number of unique k-difference pairs in the array. For instance, consider the following examples: Example 1: Input: nums = [3, 1, 4, 1, 5], k = 2 Output: 2 Justification: The pairs are (3, 1) and (1, 3). Example 2: Input: nums = [1, 2, 3, 4, 5], k = 1 Output: 4 Justification: The pairs are (1, 2), (2, 3), (3, 4), and (4, 5). Example 3: Input: nums = [1, 3, 1, 5, 4], k = 0 Output: 1 Justification: The pair is (1, 1). Example 4: Input: nums = [1, 2, 3, 4, 5], k = 0 Output: 0 The constraints for this problem are as follows: `1 <= nums.length <= 104` `-107 <= nums[i] <= 107` `0 <= k <= 107`","solution":"def find_pairs(nums, k): Returns the number of unique k-difference pairs in the array nums. if k < 0: return 0 pairs = set() seen = set() if k == 0: freq = {} for number in nums: if number in freq: freq[number] += 1 else: freq[number] = 1 for number in freq: if freq[number] > 1: pairs.add((number, number)) else: for number in nums: if (number + k) in seen: pairs.add((number, number + k)) if (number - k) in seen: pairs.add((number - k, number)) seen.add(number) return len(pairs)"},{"question":"Write a function that takes an integer array as input and returns the sum of elements that are prime numbers. The function should handle arrays of varying lengths, including edge cases where the array may be empty or contain no prime numbers. Example array: [2, 4, 6, 7, 10, 11] Expected Output: 20 (since 2 + 7 + 11 = 20)","solution":"import math def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def sum_of_primes(arr): Returns the sum of elements that are prime numbers in the given array. return sum(n for n in arr if is_prime(n)) # Example Usage example_array = [2, 4, 6, 7, 10, 11] print(sum_of_primes(example_array)) # Output: 20"},{"question":"Consider an undirected graph with `n` vertices labeled `1` to `n` and `m` edges. Each vertex is initially assigned a value 0. You need to perform `k` operations, each operation being one of the following: 1. `1 x y` – Add `y` to the value of vertex `x`. 2. `2 x` – Retrieve the sum of the values of all vertices in the connected component containing vertex `x`. **Input format:** - The first line contains three integers `n`, `m`, and `k` – the number of vertices, edges, and operations respectively. - Each of the next `m` lines contains two integers `u` and `v` indicating an edge between vertices `u` and `v`. - Each of the next `k` lines contains an operation in the format described above. **Output format:** - For each operation of the form `2 x`, output the sum on a new line. **Constraints:** - 1 leq n, m, k leq 10^5 - 1 leq u, v, x leq n - 1 leq y leq 10^9 **Example:** **Input:** ``` 5 4 6 1 2 2 3 3 4 4 5 1 1 10 2 2 1 3 5 2 4 1 5 7 2 1 ``` **Output:** ``` 10 15 22 ``` **Explanation:** - After the first operation, the value of vertex `1` becomes 10. - The connected component containing vertex `2` includes vertices `1`, `2`, `3`, `4`, and `5`, their sum is 10. - After the third operation, the value of vertex `3` becomes 5 + 0 = 5 (initially it\'s 0). - The connected component containing vertex `4` now includes vertices `1`, `2`, `3`, `4`, and `5`, their sum is 10 + 0 + 5 + 0 + 0 = 15. - After the fifth operation, the value of vertex `5` becomes 7. - Checking connected component of vertex `1`, which includes vertices `1`, `2`, `3`, `4`, and `5`, the sum is 10 + 0 + 5 + 0 + 7 = 22.","solution":"class Graph: def __init__(self, n): self.parent = list(range(n+1)) self.value = [0] * (n + 1) self.component_sum = [0] * (n + 1) def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: self.parent[root_v] = root_u self.component_sum[root_u] += self.component_sum[root_v] def add_value(self, x, y): root_x = self.find(x) self.value[x] += y self.component_sum[root_x] += y def get_component_sum(self, x): root_x = self.find(x) return self.component_sum[root_x] def process_operations(n, edges, operations): graph = Graph(n) for u, v in edges: graph.union(u, v) result = [] for operation in operations: if operation[0] == 1: _, x, y = operation graph.add_value(x, y) elif operation[0] == 2: _, x = operation result.append(graph.get_component_sum(x)) return result"},{"question":"Write a Python function called `capitalize_words` that takes a string as an input and returns a new string where the first letter of each word is capitalized, and all other letters are in lowercase. Words are defined as sequences of characters separated by spaces. Ensure the function can handle edge cases thoughtfully, such as: - The input string being empty. - The input string containing multiple spaces between words or at the beginning/end. **Examples:** ```python capitalize_words(\\"hello world\\") # Output: \\"Hello World\\" capitalize_words(\\" multiple spaces here \\") # Output: \\"Multiple Spaces Here\\" capitalize_words(\\"\\") # Output: \\"\\" ``` Here\'s a template to start with: ```python def capitalize_words(s): # Your code here # Test cases print(capitalize_words(\\"hello world\\")) # Expected: \\"Hello World\\" print(capitalize_words(\\" multiple spaces here \\")) # Expected: \\"Multiple Spaces Here\\" print(capitalize_words(\\"\\")) # Expected: \\"\\" ```","solution":"def capitalize_words(s): Returns a new string where the first letter of each word is capitalized, and all other letters are in lowercase. Words are defined as sequences of characters separated by spaces. return \' \'.join(word.capitalize() for word in s.split())"},{"question":"Write a function, `findMajorityElement`, that takes an array of integers and returns the element that appears more than 50% of the time. If no such element exists, the function should return `None`. Example: ```python findMajorityElement([3, 2, 3]) # Returns: 3 findMajorityElement([2, 2, 1, 1, 1, 2, 2]) # Returns: 2 findMajorityElement([1, 2, 3, 4]) # Returns: None ```","solution":"def findMajorityElement(nums): Returns the majority element that appears more than 50% of the time in the array `nums`. If no such element exists, returns None. if not nums: return None count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify the candidate if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"Write a function called `cyclic_shifted_string(s1, s2)` that checks whether one string is a cyclic shift of another. A cyclic shift shifts all characters of the string to the right and the characters that fall off are moved to the beginning of the string. For example, \\"abcde\\" cyclically shifted by 2 positions to the right is \\"deabc\\". Return `True` if `s2` is a cyclic shift of `s1`, otherwise return `False`. # Constraints - The input strings will contain only lowercase alphabetical characters. - The length of the strings will be between 1 and 100 inclusive. # Examples ```python >>> cyclic_shifted_string(\'abcde\', \'cdeab\') True >>> cyclic_shifted_string(\'abcde\', \'abced\') False >>> cyclic_shifted_string(\'abcd\', \'dabc\') True >>> cyclic_shifted_string(\'abc\', \'cab\') True >>> cyclic_shifted_string(\'abc\', \'abc\') True ```","solution":"def cyclic_shifted_string(s1, s2): Checks if s2 is a cyclic shift of s1. Args: s1 (str): The original string. s2 (str): The string to check against. Returns: bool: True if s2 is a cyclic shift of s1, False otherwise. if len(s1) != len(s2): return False # Concatenate s1 with itself double_s1 = s1 + s1 # Check if s2 is a substring of the concatenated result return s2 in double_s1"},{"question":"Write a function that takes a list of words and returns a list of words with all their vowels removed. Each word in the input list will be a lowercase string and the function should preserve the order of the words. For example, given the input [\\"apple\\", \\"banana\\", \\"grape\\"], the function should return [\\"ppl\\", \\"bnn\\", \\"grp\\"].","solution":"def remove_vowels(words): Given a list of words, returns a list of words with all vowels removed. :param words: List of words to process :return: List of words with vowels removed vowels = \\"aeiou\\" result = [] for word in words: no_vowel_word = \\"\\".join(char for char in word if char not in vowels) result.append(no_vowel_word) return result"},{"question":"Implement a function that returns all possible unique substrings of a given string. The substrings should be sorted in ascending order by their length, and for substrings of the same length, sort them lexicographically. Your solution should handle edge cases such as empty strings and strings with repeated characters.","solution":"def unique_substrings(s): Returns all possible unique substrings of a given string, sorted in ascending order by their length, and for substrings of the same length, sorted lexicographically. substrings = set() length = len(s) # Generate all possible substrings and add them to the set to make them unique for i in range(length): for j in range(i + 1, length + 1): substrings.add(s[i:j]) # Convert the set to a list and sort it sorted_substrings = sorted(substrings, key=lambda x: (len(x), x)) return sorted_substrings"},{"question":"Create a Python function that takes a list of strings and an integer `n` as input and returns a new list containing the strings that have more than `n` characters. Your function should handle edge cases such as an empty list or strings of varying lengths and characters (including whitespace and special characters). Additionally, enhance the provided buggy implementation that incorrectly returns only the last string if it meets the length condition instead of all qualifying strings. ```python def filter_long_strings(strings, n): filtered = \'\' for string in strings: if len(string) > n: filtered = string # This is incorrect as it overwrites the result return filtered # Example: # strings = [\\"short\\", \\"medium-sized\\", \\"a very long string!\\"] # n = 5 # Expected output: [\\"medium-sized\\", \\"a very long string!\\"] print(filter_long_strings([\\"short\\", \\"medium-sized\\", \\"a very long string!\\"], 5)) print(filter_long_strings([\\"tiny\\", \\"more text\\", \\"extravagant\\", \\"code\\", \\"\\"], 4)) ```","solution":"def filter_long_strings(strings, n): Returns a list of strings that have more than n characters. Parameters: strings (list of str): List of strings to be filtered. n (int): The minimum number of characters a string must have to be included in the result. Returns: list of str: List of strings that have more than n characters. filtered = [] for string in strings: if len(string) > n: filtered.append(string) return filtered"},{"question":"In Python, write a function that takes a list of integers and an integer `k`. The function should return a list of booleans indicating for each integer in the list whether it has at least `k` divisors. For example, `has_k_divisors([10, 15, 7], 3)` should return `[True, False, False]` since 10 has exactly 3 divisors (1, 2, 5, 10), 15 has 4 divisors (1, 3, 5, 15) but only 7 has less than 3 divisors (1, 7).","solution":"def has_k_divisors(nums, k): def count_divisors(n): count = 0 for i in range(1, n + 1): if n % i == 0: count += 1 return count result = [] for num in nums: result.append(count_divisors(num) >= k) return result # Example usage: # print(has_k_divisors([10, 15, 7], 3)) # Output: [True, True, False]"},{"question":"Design and implement a Python program that simulates a simplified version of the PageRank algorithm used by search engines to rank web pages. Your program should accept a directed graph representing the internet\'s hyperlink structure. Each node in the graph represents a web page, and each directed edge represents a hyperlink from one page to another. Assign an initial rank to each page, then iteratively update the ranks using the PageRank formula until convergence. Include damping factor considerations and explain how the ranks evolve over iterations and the impact of the damping factor on the final rankings.","solution":"import numpy as np def pagerank(graph, damping_factor=0.85, max_iterations=100, tol=1e-6): Calculates the PageRank of each node in the graph. Args: graph : dict A dictionary representing the graph where keys are nodes and values are lists of nodes which are pointed to by the key node. damping_factor : float, optional The damping factor for the PageRank formula (default is 0.85). max_iterations : int, optional The maximum number of iterations for the PageRank calculations (default is 100). tol : float, optional The tolerance required to check if PageRank values have converged (default is 1e-6). Returns: dict A dictionary where keys are nodes and values are the PageRank of each node. nodes = list(graph.keys()) n = len(nodes) if n == 0: return {} # Initialize the PageRank value for each node to 1/n pageranks = {node: 1/n for node in nodes} # Building the adjacency matrix adjacency_matrix = np.zeros((n, n)) node_indices = {node: index for index, node in enumerate(nodes)} for i, node in enumerate(nodes): for target in graph[node]: if target in node_indices: adjacency_matrix[node_indices[target], node_indices[node]] = 1 # Normalize columns to create stochastic matrix column_sums = adjacency_matrix.sum(axis=0) for i in range(n): if column_sums[i] != 0: adjacency_matrix[:, i] /= column_sums[i] else: adjacency_matrix[:, i] = 1/n # Initialize a rank vector rank_vector = np.array([pageranks[node] for node in nodes]) # PageRank iteration for iteration in range(max_iterations): new_rank_vector = ((1 - damping_factor) / n) + damping_factor * adjacency_matrix @ rank_vector if np.linalg.norm(new_rank_vector - rank_vector, 1) < tol: break rank_vector = new_rank_vector pageranks = {nodes[i]: rank_vector[i] for i in range(n)} return pageranks"},{"question":"Design an object-oriented structure represented as \'DigitalLibrary\' that encapsulates various properties and behaviors related to a digital collection of books. The properties must include but not be limited to \'books\' (a list of book objects, where each book has properties such as \'title\', \'author\', \'isbn\', \'year_published\'), \'maxLoanPeriod\' (how many days a book can be loaned out), and \'loanedBooks\' (a dictionary to keep track of loaned books and their due dates). Incorporate the following functions: 1. \'addBook\': This function takes a book object as an argument and adds it to the \'books\' list. 2. \'loanBook\': This function takes an \'isbn\' as an argument, checks if the book is available (not already loaned out), and if so, adds it to \'loanedBooks\' with a calculated due date based on \'maxLoanPeriod\'. It returns a confirmation message including the due date. If the book is already loaned out, it prints an error message, \\"Book is already loaned out\\". 3. \'returnBook\': This function takes an \'isbn\' as an argument, checks if the book is in \'loanedBooks\'. If so, it removes it from \'loanedBooks\' and prints \\"Book returned successfully\\". If the book is not found, it prints \\"Book was not loaned out\\". 4. \'searchBookByTitle\': This function takes a \'title\' as an argument and prints out all books that match the title or partial title. Also, devise a test suite for all functions created. Each test case must cover a specific usage scenario and feature of the DigitalLibrary class.","solution":"from datetime import datetime, timedelta class Book: def __init__(self, title, author, isbn, year_published): self.title = title self.author = author self.isbn = isbn self.year_published = year_published class DigitalLibrary: def __init__(self, maxLoanPeriod): self.books = [] self.maxLoanPeriod = maxLoanPeriod self.loanedBooks = {} def addBook(self, book): self.books.append(book) def loanBook(self, isbn): for book in self.books: if book.isbn == isbn: if isbn not in self.loanedBooks: due_date = datetime.now() + timedelta(days=self.maxLoanPeriod) self.loanedBooks[isbn] = due_date return f\\"Book loaned out. Due date is {due_date.strftime(\'%Y-%m-%d %H:%M:%S\')}\\" else: return \\"Book is already loaned out\\" return \\"Book not found in the library\\" def returnBook(self, isbn): if isbn in self.loanedBooks: del self.loanedBooks[isbn] return \\"Book returned successfully\\" else: return \\"Book was not loaned out\\" def searchBookByTitle(self, title): matched_books = [book for book in self.books if title.lower() in book.title.lower()] return matched_books"},{"question":"Write a function named `find_second_largest` that takes a list of integers as input and returns the second largest unique number in the list. If there is no second largest unique number (e.g., if the list is too short or all elements are the same), the function should return `None`. Your function should handle edge cases, such as an empty list, a list with a single element, and a list where all elements are the same. For example: ```python def find_second_largest(nums): # Your code goes here # Test Cases print(find_second_largest([10, 5, 8, 12, 8])) # Output: 10 print(find_second_largest([3, 3, 3])) # Output: None print(find_second_largest([1])) # Output: None print(find_second_largest([])) # Output: None print(find_second_largest([9, 9, 8, 8, 7])) # Output: 8 ```","solution":"def find_second_largest(nums): Returns the second largest unique number in the list. If there is no second largest unique number, return None. if len(nums) < 2: return None unique_nums = list(set(nums)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Given a dictionary with keys as product names and values as their respective prices, implement a function that returns the product with the highest price. Additionally, design an exception which gets thrown when the input dictionary is empty, with a message that indicates the reason. Ensure the function and exception are implemented correctly and test your function with varied inputs for validation. Here\'s a faulty piece of code to start with. Identify and fix the errors: ```python class EmptyDictError(Exception): pass def find_max_price(product_prices): if len(product_prices) == 0: raise EmptyDictError max_price_product = None max_price = -1 for product, price in product_prices.items(): if price > max_price: max_price_product = product max_price = price return max_price_product product_prices = {\\"laptop\\": 1200, \\"phone\\": 800, \\"tablet\\": 400} print(find_max_price(product_prices)) ``` Note: The given code contains a custom exception \'EmptyDictError\' but does not provide a message when raising it. Make sure to add a descriptive message to the exception.","solution":"class EmptyDictError(Exception): Custom exception raised when the input dictionary is empty. def __init__(self, message=\\"The input dictionary is empty. Please provide a dictionary with product names and prices.\\"): self.message = message super().__init__(self.message) def find_max_price(product_prices): Returns the product with the highest price from the product_prices dictionary. Raises an EmptyDictError if the input dictionary is empty. if len(product_prices) == 0: raise EmptyDictError() max_price_product = None max_price = -1 for product, price in product_prices.items(): if price > max_price: max_price_product = product max_price = price return max_price_product"},{"question":"Write a function that takes a single integer input `N` and outputs a list of all prime numbers up to `N` that are also palindromes. A palindrome is a number that remains the same when its digits are reversed. For example, 131 is a palindrome because it reads the same forward and backward. Your function should make use of an efficient prime-checking algorithm and a separate function to check if a number is a palindrome. Ensure that your solution is optimized for performance when `N` is large. ```python def is_prime(num): # Check if a number is prime if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_palindrome(num): # Check if a number is a palindrome return str(num) == str(num)[0:] def prime_palindromes(N): # Generate list of prime palindromes up to N result = [] for i in range(2, N + 1): if is_prime(i) and is_palindrome(i): result.append(i) return result # Example usage: # N = 100 # Output: [2, 3, 5, 7, 11, 101] ```","solution":"def is_prime(num): Check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def prime_palindromes(N): Generate a list of prime palindromes up to N. result = [] for i in range(2, N + 1): if is_prime(i) and is_palindrome(i): result.append(i) return result"},{"question":"Write a Python 3 function that removes all duplicates from a given list while maintaining the original order of elements. input_list = [1, 2, 2, 3, 4, 4, 5]","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining the original order of elements. :param input_list: List of elements which may contain duplicates :return: List of elements with duplicates removed, maintaining the original order seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"# Problem Statement: You are working with a MySQL database and need to perform a series of tasks involving transaction management, update operations, and error handling. The database in question is called `company` and contains a table named `employees`. Your focus will be on updating the salary of employees based on specific conditions and ensuring the operation\'s consistency and completeness. **Objectives:** 1. Write a function that performs the following operations in an atomic transaction: - Increase the salary of employees by 10% if their current salary is less than a specified threshold. - Decrease the salary of employees by 5% if their current salary exceeds a specified threshold. - Ensure that the minimum salary after the transaction is not less than a designated minimum salary limit. 2. Provide an example of erroneous code where the transaction management is handled improperly. This should include issues such as the lack of transaction commit/rollback, improper error handling, or incorrect SQL queries. The candidate should identify and explain the mistakes in this code. 3. Ensure robust error handling within the function by: - Catching any errors that occur during the transaction. - Rolling back the transaction if an error is detected. - Providing meaningful error messages that aid in diagnosing the problem. - Committing the transaction only if all operations are completed successfully. Consider utilizing `try...catch` blocks or equivalent constructs for handling potential errors in executing MySQL operations. **Assumptions:** - Assume available connection objects and methods for interacting with the database. **Sample Erroneous Code:** ```python def update_salaries_erroneous(db_connection, salary_threshold, min_salary_limit): try: cursor = db_connection.cursor() # Incorrect query to increase salaries cursor.execute(\\"UPDATE employees SET salary = salary * 1.10 WHERE salary < salary_threshold\\") # Incorrect error handling and transaction management if cursor.rowcount <= 0: raise Exception(\\"No rows affected\\") # Incorrect query to decrease salaries cursor.execute(\\"UPDATE employees SET salary = salary * 0.95 WHERE salary > salary_threshold\\") cursor.commit() # Incorrect usage except Exception as e: print(\\"An error occurred:\\", e) cursor.rollback() # Incorrect usage ``` **Corrected Version and Explanation:** ```python def update_salaries(db_connection, salary_threshold, min_salary_limit): try: cursor = db_connection.cursor() # Start transaction db_connection.begin() # Correct query to increase salaries cursor.execute(\\"UPDATE employees SET salary = salary * 1.10 WHERE salary < %s\\", (salary_threshold,)) # Correct query to decrease salaries cursor.execute(\\"UPDATE employees SET salary = salary * 0.95 WHERE salary > %s\\", (salary_threshold,)) # Ensure the minimum salary limit is respected cursor.execute(\\"UPDATE employees SET salary = %s WHERE salary < %s\\", (min_salary_limit, min_salary_limit)) # Commit the transaction only if all operations were successful db_connection.commit() except Exception as e: # Rollback the transaction in case of error print(\\"An error occurred: Transaction failed. Rolling back changes.\\", e) db_connection.rollback() finally: cursor.close() ``` **Explanation of Errors:** 1. **Improper SQL Queries**: In the erroneous code, threshold comparison was not parameterized correctly which can lead to SQL injection issues. The corrected code properly uses parameterized queries. 2. **Transaction Management**: The erroneous code lacks proper transaction management commands (`begin`, `commit`, `rollback`). The corrected code explicitly begins the transaction, commits on success, and rolls back on failure. 3. **Error Handling**: The erroneous code has primitive error handling and incorrect usage of rollback and commit methods. In the corrected version, errors are caught, meaningful messages are provided, the transaction is rolled back if any step fails, and the cursor is properly closed in a `finally` block.","solution":"def update_salaries(db_connection, salary_threshold, min_salary_limit): try: cursor = db_connection.cursor() # Start transaction db_connection.begin() # Correct query to increase salaries cursor.execute(\\"UPDATE employees SET salary = salary * 1.10 WHERE salary < %s\\", (salary_threshold,)) # Correct query to decrease salaries cursor.execute(\\"UPDATE employees SET salary = salary * 0.95 WHERE salary > %s\\", (salary_threshold,)) # Ensure the minimum salary limit is respected cursor.execute(\\"UPDATE employees SET salary = %s WHERE salary < %s\\", (min_salary_limit, min_salary_limit)) # Commit the transaction only if all operations were successful db_connection.commit() except Exception as e: # Rollback the transaction in case of error print(\\"An error occurred: Transaction failed. Rolling back changes.\\", e) db_connection.rollback() finally: cursor.close()"},{"question":"Develop a function that simulates the operation of a simple calculator. Your calculator should be able to perform the basic arithmetic operations: addition, subtraction, multiplication, and division. The function will take two numerical inputs and a string representing the operation to be performed. Return the result of the operation. If the operation is division and the second input is zero, return an error message indicating that division by zero is not allowed. **Function Signature:** ```python def simple_calculator(num1: float, num2: float, operation: str) -> float: pass ``` **Examples:** ```python simple_calculator(10, 5, \\"add\\") # Should return 15 simple_calculator(10, 5, \\"subtract\\") # Should return 5 simple_calculator(10, 5, \\"multiply\\") # Should return 50 simple_calculator(10, 5, \\"divide\\") # Should return 2 simple_calculator(10, 0, \\"divide\\") # Should return \\"Error: Division by zero\\" ``` **Constraints:** - The input numbers will always be valid floating-point numbers. - The operation will always be one of the following strings: \\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\".","solution":"def simple_calculator(num1: float, num2: float, operation: str) -> float: Performs basic arithmetic operations: addition, subtraction, multiplication, and division. Parameters: - num1: float: The first number. - num2: float: The second number. - operation: str: The operation to be performed (\\"add\\", \\"subtract\\", \\"multiply\\", \\"divide\\"). Returns: - float: The result of the operation. - str: Error message if division by zero is attempted. if operation == \\"add\\": return num1 + num2 elif operation == \\"subtract\\": return num1 - num2 elif operation == \\"multiply\\": return num1 * num2 elif operation == \\"divide\\": if num2 != 0: return num1 / num2 else: return \\"Error: Division by zero\\" else: return \\"Error: Unknown operation\\""},{"question":"Given a list of strings, create a function to find the longest common prefix shared among them. If there is no common prefix, the function should return an empty string. The function should handle edge cases, such as an empty list or list with one string, correctly. Additionally, it\'s important for the implementation to be optimized for time complexity, particularly for scenarios with a large number of strings or very long strings. Display the result in a clear and concise manner.","solution":"def longest_common_prefix(strs): Returns the longest common prefix from a list of strings. Parameters: strs (list of str): List of strings to find the common prefix. Returns: str: The longest common prefix or an empty string if there\'s none. if not strs: return \\"\\" # Sort the list of strings strs.sort() # Initialize the first and last string from the sorted list as reference first, last = strs[0], strs[-1] i = 0 # Find common prefix between first and last string while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Write a Python function that finds the largest integer in a list composed of both positive and negative integers. The function should return the largest integer found. If the list is empty, the function should return None. Example: ```python def find_largest_integer(numbers): if not numbers: return None return max(numbers) # Test cases print(find_largest_integer([1, 2, 3, 4, 5])) # Output: 5 print(find_largest_integer([-1, -2, -3, -4, -5])) # Output: -1 print(find_largest_integer([])) # Output: None ```","solution":"def find_largest_integer(numbers): Finds the largest integer in a list composed of positive and negative integers. Returns the largest integer found or None if the list is empty. if not numbers: return None return max(numbers)"},{"question":"A company wants to implement a simple message encryption system for their internal communication. They use a specific form of character shifting where each character in the message is shifted by a fixed number of positions in the alphabet. For example, with a shift of 2, `a` becomes `c`, `b` becomes `d`, and so on. Write a function that takes a string and an integer as inputs and returns the encrypted message. The shifting should wrap around such that `z` becomes `a` (assuming only lowercase letters are used). The function signature in Python should be: ```python def encrypt_message(message: str, shift: int) -> str: pass ```","solution":"def encrypt_message(message: str, shift: int) -> str: Returns the encrypted message where each character in the message is shifted by `shift` positions in the alphabet. Only lowercase letters are considered. Parameters: message (str): The original message to encrypt. shift (int): The number of positions to shift each character. Returns: str: The encrypted message. encrypted_message = [] for char in message: if \'a\' <= char <= \'z\': new_position = (ord(char) - ord(\'a\') + shift) % 26 new_char = chr(ord(\'a\') + new_position) encrypted_message.append(new_char) else: encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Implement a Python function that takes a dictionary representing a mathematical matrix and returns the inverse of that matrix. If the matrix is not invertible, the function should return None. Assume the input dictionary keys are tuples representing the position of elements (row, column), and the values are the corresponding matrix entries. For example, for a 2x2 matrix, the input would look like this: ``` { (0, 0): 4, (0, 1): 7, (1, 0): 2, (1, 1): 6 } ``` The function should handle matrices of any size, ensuring that appropriate checks for invertibility are performed.","solution":"import numpy as np def get_matrix_inverse(matrix_dict): Takes a dictionary representing a mathematical matrix and returns the inverse. Returns None if the matrix is not invertible. :param matrix_dict: dict where keys are (row, column) tuples and values are the matrix entries :return: dict representing the inverse matrix or None if not invertible # Determine the size of the matrix keys = matrix_dict.keys() rows = max(key[0] for key in keys) + 1 cols = max(key[1] for key in keys) + 1 if rows != cols: return None # Not a square matrix, hence not invertible # Create a numpy array from the dictionary matrix = np.zeros((rows, cols)) for (i, j), value in matrix_dict.items(): matrix[i, j] = value try: # Compute the inverse using numpy matrix_inv = np.linalg.inv(matrix) except np.linalg.LinAlgError: return None # Matrix is not invertible # Convert the result back to a dictionary inverse_dict = {(i, j): matrix_inv[i, j] for i in range(rows) for j in range(cols)} return inverse_dict"},{"question":"Write a function that takes a string as input and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. Consider only alphanumeric characters and ignore case differences. Example: ``` is_palindrome_permutation(\\"Tact Coa\\") -> True (is a permutation of \\"taco cat\\") ``` Note: The function should handle edge cases like empty strings or strings with special characters.","solution":"def is_palindrome_permutation(s: str) -> bool: Returns True if the input string can be rearranged to form a palindrome, False otherwise. Considers only alphanumeric characters and ignores case differences. from collections import Counter import re # Remove non-alphanumeric characters and convert to lowercase filtered_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count frequencies of each character char_counts = Counter(filtered_s) # Check the counts to see if a palindrome permutation is possible odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # For a string to be rearranged as a palindrome: # Odd lengths can have at most one character with an odd count # Even lengths can\'t have any characters with an odd count return odd_count <= 1"},{"question":"Design a Python program to parse a log file with network events and extract and summarize data. The log file contains time-stamped entries of network event actions performed by various users. Each entry includes the timestamp (in \\"YYYY-MM-DD HH:MM:SS\\" format), user ID, event type (either \\"LOGIN\\" or \\"LOGOUT\\"), and an optional detail message that might contain IP addresses or URLs. Your task is to write a function `parse_log_file(file_path)` that reads the log file at the provided file path and prints: 1. The total number of unique users who logged in. 2. The total number of unique users who logged out. 3. The number of users simultaneously logged in at any given point. The function should also handle and report any potential parsing errors due to incorrect formatting. Additionally, provide a summary function `summarize_log_data(parsed_data)` that takes the parsed data and prints out the results as described. Sample Log File (`logfile.txt`): ``` 2023-05-01 10:00:00, user1, LOGIN, Logged in from 192.168.1.1 2023-05-01 10:05:00, user2, LOGIN, Logged in from 192.168.1.2 2023-05-01 10:10:00, user1, LOGOUT, Logged out from 192.168.1.1 2023-05-01 10:20:00, user3, LOGIN, Logged in from 192.168.1.3 2023-05-01 10:30:00, user2, LOGOUT, Logged out from 192.168.1.2 2023-05-01 11:00:00, user3, LOGOUT, Logged out from 192.168.1.3 2023-05-01 11:05:00, user4, LOGIN, Logged in from 192.168.1.4 ``` Your implementation may assume that the log file entries are already sorted by timestamp. Ensure robustness with respect to missing or malformed entries. Note: Be sure to include exception handling and ensure your code adheres to Pythonic best practices and readability. Write the function implementations for `parse_log_file` and `summarize_log_data`.","solution":"def parse_log_file(file_path): Parses a log file with network events and extracts relevant data. Args: file_path (str): The path to the log file. Returns: dict: Parsed log data. from datetime import datetime logged_in_users = set() logged_out_users = set() currently_logged_in_users = set() parsed_data = { \\"unique_logins\\": logged_in_users, \\"unique_logouts\\": logged_out_users, \\"simultaneously_logged_in\\": [] } try: with open(file_path, \'r\') as file: lines = file.readlines() for line in lines: try: timestamp, user_id, event_type, *detail_message = line.strip().split(\', \') if event_type == \\"LOGIN\\": logged_in_users.add(user_id) currently_logged_in_users.add(user_id) elif event_type == \\"LOGOUT\\": logged_out_users.add(user_id) if user_id in currently_logged_in_users: currently_logged_in_users.remove(user_id) else: raise ValueError(f\\"Unknown event type: {event_type}\\") parsed_data[\\"simultaneously_logged_in\\"].append(len(currently_logged_in_users)) except ValueError as e: print(f\\"Error parsing line: {line.strip()} - {e}\\") except FileNotFoundError as e: print(f\\"File not found: {file_path} - {e}\\") return parsed_data def summarize_log_data(parsed_data): Summarizes the parsed log data and prints the results. Args: parsed_data (dict): Parsed log data. unique_logins = parsed_data[\\"unique_logins\\"] unique_logouts = parsed_data[\\"unique_logouts\\"] simultaneously_logged_in = parsed_data[\\"simultaneously_logged_in\\"] print(f\\"Total number of unique users who logged in: {len(unique_logins)}\\") print(f\\"Total number of unique users who logged out: {len(unique_logouts)}\\") print(f\\"Max number of users simultaneously logged in: {max(simultaneously_logged_in) if simultaneously_logged_in else 0}\\")"},{"question":"Create a Python class called `WordFrequency` that counts the frequency of words in a given text. The class should have the following methods: - `__init__(self, text)`: Initializes the class with the provided text. - `process_text(self)`: Processes the text to remove punctuation and convert all words to lowercase. - `frequency(self)`: Returns a dictionary where the keys are words and the values are their corresponding frequencies. Additionally, provide a piece of erroneous code that incorrectly handles the punctuation removal and correct it. Discuss why the incorrect code is failing.","solution":"import string class WordFrequency: def __init__(self, text): self.text = text self.word_counts = {} def process_text(self): # Remove punctuation and convert to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) processed_text = self.text.translate(translator).lower() self.processed_text = processed_text def frequency(self): words = self.processed_text.split() for word in words: if word in self.word_counts: self.word_counts[word] += 1 else: self.word_counts[word] = 1 return self.word_counts # Erroneous code: # It incorrectly removes punctuation by simply replacing punctuation with \' \' (space) # def process_text(self): # for char in string.punctuation: # self.text = self.text.replace(char, \' \') # incorrect handling # self.text = self.text.lower() # This code can leave extra spaces and can mess up word counting # Corrected code uses str.maketrans and translate"},{"question":"Write a Python function `longest_common_subsequence(str1, str2)` that finds the length of the longest common subsequence between two input strings, `str1` and `str2`. A common subsequence is defined as a sequence that appears in both strings in the same order but not necessarily consecutively. Ensure your function has a time complexity of O(m*n), where `m` and `n` are the lengths of the input strings, respectively. Test your function with the strings \\"AGGTAB\\" and \\"GXTXAYB\\".","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Construct a Python function that, given a list of integers, returns another list of integers containing only the elements that are above the average value of the original list. The returned list should preserve the relative order of elements as they appeared in the original list. If the original list is empty, return an empty list.","solution":"def above_average(numbers): Returns a list of integers from the input list that are above the average value. Maintains the relative order of elements. if not numbers: return [] average_val = sum(numbers) / len(numbers) return [num for num in numbers if num > average_val]"},{"question":"Given an array of integers, write a Python function that finds and returns the length of the longest contiguous subarray with an equal number of 0s and 1s. For example, given the input array [0, 1, 0, 0, 1, 1, 0], the function should return 6, since the longest subarray with equal numbers of 0s and 1s is [0, 1, 0, 0, 1, 1]. Function signature: `def find_max_length_subarray(arr: list) -> int:` Note: This problem will test your ability to work with arrays, hashmaps (dictionaries), and the logic to find contiguous subarrays based on given conditions.","solution":"def find_max_length_subarray(arr: list) -> int: Finds the length of the longest contiguous subarray with an equal number of 0s and 1s. Args: arr (list): A list of integers containing only 0s and 1s. Returns: int: The length of the longest contiguous subarray with equal number of 0s and 1s. count = 0 max_length = 0 count_dict = {0: -1} for i in range(len(arr)): if arr[i] == 0: count -= 1 else: count += 1 if count in count_dict: max_length = max(max_length, i - count_dict[count]) else: count_dict[count] = i return max_length"},{"question":"**Problem Statement:** Write a function `compute_special_string(n, x, y)` that generates a string based on the following rules: 1. The function receives three integers `n`, `x`, and `y` where `n` represents the length of the desired output string, and `x` and `y` represent two distinct character codes (ASCII values) between 33 and 126, inclusive. 2. The function should create a string of length `n`, alternating between the characters represented by `x` and `y`. 3. The resulting string should start with the character represented by `x`. 4. If `n` is 0, a negative number, or if `x` or `y` falls outside the valid range (33 to 126), the function should return an empty string. 5. Ensure that the function returns consistent and correct results by handling any edge cases appropriately. Examples: compute_special_string(5, 65, 66) => \\"ABABA\\" compute_special_string(8, 36, 64) => \\"@@@@\\" compute_special_string(3, 50, 51) => \\"232\\" compute_special_string(0, 100, 101) => \\"\\" compute_special_string(6, 31, 60) => \\"\\" compute_special_string(4, 60, 127) => \\"\\" Construct the function in such a way that it adheres to the specified rules and returns the correct outputs for various inputs.","solution":"def compute_special_string(n, x, y): Generates a string based on alternating characters represented by ASCII values x and y. Parameters: n (int): The length of the desired output string. x (int): ASCII value of the first character. y (int): ASCII value of the second character. Returns: str: The alternating string of length n or an empty string if input is invalid. # Check for invalid conditions if n <= 0 or not (33 <= x <= 126) or not (33 <= y <= 126): return \\"\\" # Convert ASCII values to characters char_x = chr(x) char_y = chr(y) # Generate the alternating string result = [] for i in range(n): if i % 2 == 0: result.append(char_x) else: result.append(char_y) return \\"\\".join(result)"},{"question":"Implement a Binary Search Tree (BST) class or structure with the following functionalities: 1. **Insert a Node:** Method to insert a new node with a given key value into the BST. 2. **Delete a Node:** Method to delete a node with a specific key from the BST. 3. **Search for a Node:** Method to search for a node with a particular key in the BST. Return true if the node is found, otherwise return false. 4. **In-Order Traversal:** Method to perform an in-order traversal of the BST and print the keys. 5. **Find Minimum and Maximum:** Methods to find the node with the minimum key and node with the maximum key in the BST. Outline the time complexity for each of these operations and explain why these complexities occur. Additionally, incorporate methods to find the height of the BST and to determine if the BST is valid. Explain the algorithm used for these functionalities and detail the time and space complexities. Finally, write unit tests to verify the correct functionality of your BST and the associated operations. Clearly document your test strategy, specifying what part of the code each test covers and what the expected outcome should be for each.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.key: if node.left: self._insert(node.left, key) else: node.left = TreeNode(key) else: if node.right: self._insert(node.right, key) else: node.right = TreeNode(key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if node is None: return node if key < node.key: node.left = self._delete(node.left, key) elif key > node.key: node.right = self._delete(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._minValueNode(node.right) node.key = temp.key node.right = self._delete(node.right, temp.key) return node def search(self, key): return self._search(self.root, key) def _search(self, node, key): if node is None: return False if node.key == key: return True if key < node.key: return self._search(node.left, key) return self._search(node.right, key) def in_order_traversal(self): keys = [] self._in_order_traversal(self.root, keys) return keys def _in_order_traversal(self, node, keys): if node: self._in_order_traversal(node.left, keys) keys.append(node.key) self._in_order_traversal(node.right, keys) def find_minimum(self): min_node = self._minValueNode(self.root) return min_node.key if min_node else None def _minValueNode(self, node): current = node while current and current.left: current = current.left return current def find_maximum(self): max_node = self._maxValueNode(self.root) return max_node.key if max_node else None def _maxValueNode(self, node): current = node while current and current.right: current = current.right return current def get_height(self): return self._get_height(self.root) def _get_height(self, node): if node is None: return -1 left_height = self._get_height(node.left) right_height = self._get_height(node.right) return max(left_height, right_height) + 1 def is_valid(self): return self._is_valid(self.root, float(\'-inf\'), float(\'inf\')) def _is_valid(self, node, min_key, max_key): if node is None: return True if not(min_key < node.key < max_key): return False return self._is_valid(node.left, min_key, node.key) and self._is_valid(node.right, node.key, max_key)"},{"question":"Write a function in Python that takes a list of integers and an integer `k`, and rotates the list to the right by `k` positions. Ensure that your function handles cases where `k` is larger than the length of the list and that the list remains unchanged if it is empty or if `k` is zero. Example: ``` Inputs: nums = [1, 2, 3, 4, 5, 6, 7], k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Inputs: nums = [1, 2, 3, 4, 5, 6, 7], k = 10 Output: [5, 6, 7, 1, 2, 3, 4] Inputs: nums = [], k = 0 Output: [] ``` Hints: 1. Consider how modulo operation can be useful in this problem. 2. Think about edge cases such as an empty list or rotation value being zero.","solution":"def rotate_list(nums, k): Rotates the list to the right by k positions. If k is larger than the length of the list, rotates by k % len(nums). If the list is empty or k is zero, returns the list unchanged. if not nums or k == 0: return nums n = len(nums) k = k % n # To handle cases where k is larger than the length of the list return nums[-k:] + nums[:-k]"},{"question":"You are tasked with a challenge titled: Convertible Strings. The challenge revolves around the concept of checking if two strings can be converted to each other by swapping the positions of characters exactly once. Your mission, should you choose to accept it, is to determine if two input strings can be made identical by performing at most one swap between two characters within one of the strings. For instance: Suppose the input is: \\"converse\\", \\"conserve\\" The output should be: True To clarify, swap the \'s\' and \'v\' in \\"converse\\" to get \\"conserve\\". Another example: Suppose the input is: \\"abc\\", \\"bca\\" The output should be: False Here, you need more than one swap to convert \\"abc\\" to \\"bca\\". Please bear in mind: The elements of the input strings will solely consist of lowercase English letters. Both strings are of the same length and their length will not exceed `10^4`. Implement the function `can_be_converted(s1, s2)` that returns `True` if `s1` can be converted to `s2` by at most one swap within `s1`, otherwise returns `False`.","solution":"def can_be_converted(s1, s2): This function checks if two strings can be made identical by performing at most one swap between two characters within one of the strings. if len(s1) != len(s2): return False # Find the indices where the characters in s1 and s2 don\'t match mismatch_indices = [] for i in range(len(s1)): if s1[i] != s2[i]: mismatch_indices.append(i) # If there are no mismatches, the strings are already identical if len(mismatch_indices) == 0: return True # There must be exactly two mismatches to have a possible single swap conversion if len(mismatch_indices) != 2: return False i, j = mismatch_indices # Check if swapping the mismatched characters in s1 turns it into s2 return s1[i] == s2[j] and s1[j] == s2[i]"},{"question":"Write a Python function called `sort_by_frequency_and_value` that takes a list of integers as input and returns a list sorted by the frequency of each number in ascending order. If two numbers have the same frequency, the list should be sorted by the numbers themselves in ascending order. ``` Example: Input: [4, 5, 6, 5, 4, 3] Output: [3, 6, 4, 4, 5, 5] Input: [1, 2, 2, 2, 3, 3] Output: [1, 3, 3, 2, 2, 2] ``` *Note:* You are not allowed to use any built-in sorting functions.","solution":"def sort_by_frequency_and_value(data): Sort the list by frequency of elements in ascending order. If two numbers have the same frequency, they are sorted by their values. Args: data (list): A list of integers. Returns: list: A sorted list by frequency, with ties broken by value. # Count frequency of each element frequency = {} for num in data: frequency[num] = frequency.get(num, 0) + 1 items = [(num, frequency[num]) for num in data] # Custom sorting def custom_sort(item): return (item[1], item[0]) sorted_items = sorted(items, key=custom_sort) return [item[0] for item in sorted_items]"},{"question":"You are required to program a function that takes a list of integers and determines the length of the longest consecutive sequence of unique numbers. The list may contain both positive and negative integers, and duplicate values should be ignored when counting the sequence length. Function Signature: ```python def longest_consecutive_sequence(arr: List[int]) -> int: pass ``` Example: Input: arr = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive sequence is [1, 2, 3, 4]. Other sequences like [100] and [200] have shorter lengths. The function should return the length of the longest sequence, which is 4 in this case. Additional Notes: - The input list may be empty, in which case the function should return 0. - The function should aim for a time complexity better than O(n^2) where n is the length of the input array.","solution":"def longest_consecutive_sequence(arr): This function takes a list of integers and returns the length of the longest consecutive sequence of unique numbers within the list. if not arr: return 0 num_set = set(arr) max_length = 0 for num in num_set: if num - 1 not in num_set: # start of a new sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Implement a function that receives a list of strings representing mathematical operations and a target integer. Each string in the list will have an operation (either \\"add\\" or \\"subtract\\") followed by a space and an integer. Your task is to calculate the result of these operations starting from the target integer. Return the final result after performing all operations. For example, given the target integer `10` and the list `[\\"add 5\\", \\"subtract 3\\", \\"add 2\\"]`, the result would be `14` because: - Start from 10 - Add 5: (10 + 5) = 15 - Subtract 3: (15 - 3) = 12 - Add 2: (12 + 2) = 14 Function signature: ```python def calculate_operations(operations: List[str], target: int) -> int: pass ``` # Input - `operations`: List of strings, where each string is an operation (\\"add\\" or \\"subtract\\") followed by an integer. - `target`: An integer. # Output - Return the final integer result after performing all the operations. # Constraints - The length of `operations` list will be between 1 and 100. - Each integer in the operations will be between -1000 and 1000. - The target integer will be between -10000 and 10000. # Example ```python assert calculate_operations([\\"add 5\\", \\"subtract 3\\", \\"add 2\\"], 10) == 14 assert calculate_operations([\\"subtract 10\\", \\"add 15\\"], 0) == 5 ```","solution":"from typing import List def calculate_operations(operations: List[str], target: int) -> int: for operation in operations: action, value = operation.split() value = int(value) if action == \\"add\\": target += value elif action == \\"subtract\\": target -= value return target"},{"question":"You are given a list of books where each book is represented as a dictionary with keys \\"title\\", \\"author\\", and \\"year_published\\". Write a function that sorts the list of books based on the \\"year_published\\" in ascending order. If two books were published in the same year, the function should then sort them by the \\"author\\" in alphabetical order. Lastly, if the \'author\' fields are also identical, it should sort those books by \\"title\\" in alphabetical order. To provide a sample code that has errors and needs correction: ```python def sort_books(books): books.sort(key=lambda x: (x[\\"year_published\\"], x[\\"author\\"], x[\\"title\\"])) return books books_list = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"Author C\\", \\"year_published\\": 2022}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Author C\\", \\"year_published\\": 2022}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Author A\\", \\"year_published\\": 2021}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Author B\\", \\"year_published\\": 2021} ] print(sort_books(books_list)) ``` The above code contains logic errors. Your task is to identify and correct these errors to achieve the desired sorting. Additionally, consider edge cases such as: 1. An empty list of books. 2. Books that have the same year, author, and title. 3. Books list containing non-string fields for \\"title\\" or \\"author\\".","solution":"def sort_books(books): Sorts a list of books based on \'year_published\' in ascending order. If two books have the same year, they are sorted by \'author\' alphabetically. If both the \'year_published\' and \'author\' are identical, they are sorted by \'title\' alphabetically. books.sort(key=lambda x: (x[\\"year_published\\"], x.get(\\"author\\", \\"\\"), x.get(\\"title\\", \\"\\"))) return books"},{"question":"Write a function in Python called `rotate_matrix` that takes an `n x n` matrix (a list of lists) and rotates it 90 degrees clockwise. The function should modify the matrix in place and not return anything. For example, if the input matrix is: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After calling `rotate_matrix(matrix)`, the matrix should be modified to: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` You can assume that the input matrix is always non-empty and contains only integers. **Implementation details:** - The function should include error handling for cases where the input is not a list of lists or is not square (i.e., each row should have the same number of columns as there are rows). - Aim to achieve the rotation in O(n^2) time complexity and with O(1) additional space complexity, meaning the rotation should be done in place without using extra storage for another matrix. **Example usage:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) print(matrix) # Output should be: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Note: Write the function `rotate_matrix(matrix: List[List[int]]) -> None:` where the matrix is a List of Lists of integers.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. if not isinstance(matrix, list): raise TypeError(\\"Input should be a list of lists\\") n = len(matrix) if not all(isinstance(row, list) for row in matrix): raise TypeError(\\"Each row should be a list\\") if not all(len(row) == n for row in matrix): raise ValueError(\\"Matrix should be n x n\\") # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for row in matrix: row.reverse()"},{"question":"Design an algorithm to simulate a virtual stock trading platform that manages user portfolios, executes trades based on real-time market data, and optimizes investment strategies to maximize profits over a given simulation period.","solution":"import random class StockTradingPlatform: def __init__(self, initial_balance): self.balance = initial_balance self.portfolio = {} def add_to_portfolio(self, stock, quantity, price): if stock in self.portfolio: self.portfolio[stock][\'quantity\'] += quantity else: self.portfolio[stock] = {\'quantity\': quantity, \'avg_price\': price} self.balance -= quantity * price def execute_trade(self, stock, quantity, price, buy=True): if buy: self.add_to_portfolio(stock, quantity, price) else: if stock in self.portfolio and self.portfolio[stock][\'quantity\'] >= quantity: self.portfolio[stock][\'quantity\'] -= quantity self.balance += quantity * price def update_market_data(self): for stock in self.portfolio: new_price = random.uniform(50, 150) # Simulating real time price data self.portfolio[stock][\'current_price\'] = new_price def optimize_investment(self): for stock, data in self.portfolio.items(): if data[\'current_price\'] > data[\'avg_price\'] * 1.1: # Sell if price increased by 10% self.execute_trade(stock, data[\'quantity\'], data[\'current_price\'], buy=False) def get_portfolio_value(self): total_value = self.balance for stock, data in self.portfolio.items(): total_value += data[\'quantity\'] * data[\'current_price\'] return total_value # Example usage: # platform = StockTradingPlatform(10000) # platform.execute_trade(\\"AAPL\\", 10, 120, buy=True) # platform.update_market_data() # platform.optimize_investment() # value = platform.get_portfolio_value()"},{"question":"Create a function in Python that takes a list of integers and returns a new list where each element is the average of itself and its previous and next elements in the original list. For elements at the beginning or the end of the list, use only the neighboring elements that exist. For example, given the input `[3, 6, 9, 12, 15]`, the function should return `[4.5, 6.0, 9.0, 12.0, 13.5]`. The function should handle edge cases such as an empty list or a list with a single element.","solution":"def smooth_list(nums): Given a list of integers, returns a new list where each element is the average of itself and its previous and next elements in the original list. For elements at the beginning or the end of the list, only use the neighboring elements that exist. if not nums: return [] if len(nums) == 1: return nums smoothed = [] for i in range(len(nums)): if i == 0: average = (nums[i] + nums[i + 1]) / 2 elif i == len(nums) - 1: average = (nums[i - 1] + nums[i]) / 2 else: average = (nums[i - 1] + nums[i] + nums[i + 1]) / 3 smoothed.append(average) return smoothed"},{"question":"Write a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. Do not use the `collections.Counter` class. Your solution should handle lists of arbitrary length and include error handling for cases where the input is not a list or contains non-integer elements.","solution":"def count_integers(input_list): Returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. Parameters: input_list (list): A list of integers. Returns: dict: A dictionary with integer keys and their count as values. Raises: ValueError: If input_list is not a list or contains non-integer elements. if not isinstance(input_list, list): raise ValueError(\\"Input must be a list\\") count_dict = {} for item in input_list: if not isinstance(item, int): raise ValueError(\\"All elements in the list must be integers\\") if item in count_dict: count_dict[item] += 1 else: count_dict[item] = 1 return count_dict"},{"question":"Create a function `largest_kth_product` that takes a list of tuples, where each tuple contains two integers. The function should find the k-th largest product from the set of all possible products of the integers in each tuple. If the list contains any invalid elements (i.e., non-tuple or tuples with non-integer values), the function should return \\"Invalid Input\\". Examples: ```python >>> largest_kth_product([(3, 5), (1, 2), (7, 8)], 1) 56 >>> largest_kth_product([(3, 5), (1, 2), (7, 8)], 2) 15 >>> largest_kth_product([(3, 5), (1, 2), (7, \'x\')], 1) Invalid Input >>> largest_kth_product([3, (1, 2), (7, 8)], 3) Invalid Input ``` Finish the following code snippet: ```python def largest_kth_product(tuple_list: list, k: int): Returns the k-th largest product from the set of all possible products of the integers in each tuple. Returns \'Invalid Input\' if the list contains any invalid elements. ```","solution":"def largest_kth_product(tuple_list: list, k: int): Returns the k-th largest product from the set of all possible products of the integers in each tuple. Returns \'Invalid Input\' if the list contains any invalid elements. # Validate input for item in tuple_list: if not isinstance(item, tuple) or len(item) != 2: return \\"Invalid Input\\" if not all(isinstance(i, int) for i in item): return \\"Invalid Input\\" # Calculate products products = [a * b for a, b in tuple_list] # Sort products in descending order products.sort(reverse=True) # Return k-th largest product if 0 < k <= len(products): return products[k-1] else: return \\"Invalid Input\\""},{"question":"Implement a Python function called `generate_fibonacci_sequence(n)` that generates and returns a list containing the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two numbers. Ensure your function can handle edge cases where `n` is less than or equal to zero by returning an empty list in such scenarios. Include inline comments explaining the logic of your code.","solution":"def generate_fibonacci_sequence(n): Generates and returns a list of the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate Returns: list: A list containing the first n Fibonacci numbers # Return an empty list for non-positive n values if n <= 0: return [] # Initialize the first two numbers of the Fibonacci sequence fib_sequence = [0, 1] # Generate the rest of the sequence until we have n numbers for i in range(2, n): next_number = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_number) # Return the first n numbers of the sequence return fib_sequence[:n]"},{"question":"Write a function in Python that takes two strings as input, and returns `True` if one string is a rotation of the other, and `False` otherwise. A string is considered a rotation of another if they contain the same characters in the same order but start at different positions. For example, \\"hello\\" is a rotation of \\"llohe\\". Ensure your solution is efficient in terms of time complexity.","solution":"def is_rotation(s1, s2): Returns True if s1 is a rotation of s2, otherwise False. if len(s1) != len(s2): return False concatenated = s1 + s1 return s2 in concatenated"},{"question":"Design and implement a function in Python that simulates a simplified card game. In this game, there are two players, and each player draws cards from a shuffled deck which contains 52 cards. Cards have values from 1 (Ace) to 13 (King), and four suits, but the suits do not affect the game. The objective of the game is to draw the highest total value of cards according to the following steps: 1. Shuffle the deck of 52 cards. 2. Each player draws a card from the top alternately. 3. After both players have drawn 5 cards each, calculate the total value of the cards for each player. 4. Determine the winner based on who has the higher total value. 5. If both players have the same total value, the game is a draw. Function Signature: ```python def card_game() -> str: # Your implementation here ``` # Example Output ```python \\"The winner is Player 1 with total value: 42\\" # or \\"The game is a draw with both players having total value: 38\\" ``` # Constraints - You must use the random library to shuffle the deck. - Your function should implement the entire game logic, from shuffling to determining the winner.","solution":"import random def card_game() -> str: Simulates a simplified card game between two players and determines the winner. # Create a deck of 52 cards (4 suits, values 1 to 13) deck = [value for value in range(1, 14)] * 4 # Shuffle the deck random.shuffle(deck) # Each player draws 5 cards alternately player1_hand = [] player2_hand = [] for i in range(5): player1_hand.append(deck.pop(0)) player2_hand.append(deck.pop(0)) # Calculate the total values of cards for each player player1_total = sum(player1_hand) player2_total = sum(player2_hand) # Determine the winner or if the game is a draw if player1_total > player2_total: return f\\"The winner is Player 1 with total value: {player1_total}\\" elif player2_total > player1_total: return f\\"The winner is Player 2 with total value: {player2_total}\\" else: return f\\"The game is a draw with both players having total value: {player1_total}\\""},{"question":"Create a function to manage an online ordering system for a restaurant. The system should handle the following tasks: 1. **Display Menu**: The menu should include various dishes, each with attributes such as name, description, price, and availability status (available or sold out). 2. **Place Order**: Customers should be able to place orders from the available dishes. Each order should capture details like the customer\'s name, list of ordered dishes, total price, and order status (completed or pending). 3. **Update Inventory**: Update the availability status of dishes based on the number of orders placed. If a dish runs out of stock, the system should mark it as sold out. 4. **Order Management**: Provide functionalities to update the order status and allow customers to cancel pending orders. Your solution should be implemented in the programming language you are most comfortable with, and it should demonstrate proper use of data structures and algorithms where necessary.","solution":"class Dish: def __init__(self, name, description, price, availability): self.name = name self.description = description self.price = price self.availability = availability def update_availability(self, availability): self.availability = availability class Order: def __init__(self, customer_name, dishes): self.customer_name = customer_name self.dishes = dishes self.total_price = sum(dish.price for dish in dishes) self.status = \'pending\' def update_status(self, status): self.status = status class Restaurant: def __init__(self): self.menu = [] self.orders = [] def display_menu(self): return [{\'name\': dish.name, \'description\': dish.description, \'price\': dish.price, \'availability\': dish.availability} for dish in self.menu] def add_dish_to_menu(self, name, description, price, availability): dish = Dish(name, description, price, availability) self.menu.append(dish) def place_order(self, customer_name, ordered_dishes_names): ordered_dishes = [] for dish_name in ordered_dishes_names: for dish in self.menu: if dish.name == dish_name and dish.availability == \'available\': ordered_dishes.append(dish) break else: raise ValueError(f\\"Dish {dish_name} is not available\\") order = Order(customer_name, ordered_dishes) self.orders.append(order) self.update_inventory(ordered_dishes) return order def update_inventory(self, ordered_dishes): for ordered_dish in ordered_dishes: ordered_dish.update_availability(\'sold out\') def update_order_status(self, order_id, status): self.orders[order_id].update_status(status) def cancel_order(self, order_id): for dish in self.orders[order_id].dishes: dish.update_availability(\'available\') del self.orders[order_id]"},{"question":"The following Python function is designed to encrypt a message using a Caesar cipher, but it contains logical and syntactical errors. Debug the function to make it work correctly. ```python def caesar_cipher(message, shift): Encrypts a message using Caesar cipher. Args: message (str): The input message to be encrypted. shift (int): The number of positions each character in the message is shifted. Returns: str: The encrypted message. encrypted_message = \\"\\" for char in message: if \'a\' <= char <= \'z\': encrypted_message += chr(((ord(char) + shift - ord(\'a\')) % 26) + ord(\'a\')) elif \'A\' <= char <= \'Z\': encrypted_message += chr(((ord(char) + shift - ord(\'A\')) % 26) + ord(\'A\')) else: encrypted_message += char return encrypted_message # Example usage: # message = \\"Hello, World!\\" # shift = 3 # result = caesar_cipher(message, shift) # The expected output for the above input should be \\"Khoor, Zruog!\\" ```","solution":"def caesar_cipher(message, shift): Encrypts a message using Caesar cipher. Args: message (str): The input message to be encrypted. shift (int): The number of positions each character in the message is shifted. Returns: str: The encrypted message. encrypted_message = \\"\\" for char in message: if \'a\' <= char <= \'z\': encrypted_message += chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) elif \'A\' <= char <= \'Z\': encrypted_message += chr(((ord(char) - ord(\'A\') + shift) % 26) + ord(\'A\')) else: encrypted_message += char return encrypted_message"},{"question":"Design a function that generates all possible permutations of a given string. The function should ensure that the permutations are in lexicographical order and does not use Python\'s itertools library. The function should remain efficient and avoid generating duplicates. Additionally, if the input string is empty, the function should return an empty list. The utility signature is: def string_permutations(s: str) -> list Examples: - string_permutations(\\"abc\\") should return [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] - string_permutations(\\"aab\\") should return [\'aab\', \'aba\', \'baa\'] - string_permutations(\\"\\") should return []","solution":"def string_permutations(s: str) -> list: Generates all possible permutations of a given string in lexicographical order. if not s: return [] # Function to find the next lexicographical permutation def next_permutation(arr): # Find the largest index i such that arr[i] < arr[i + 1] for i in range(len(arr) - 2, -1, -1): if arr[i] < arr[i + 1]: break else: return False # No further permutation # Find the largest index j such that arr[i] < arr[j] for j in range(len(arr) - 1, i, -1): if arr[i] < arr[j]: break # Swap the values at index i and j arr[i], arr[j] = arr[j], arr[i] # Reverse the sequence from i+1 to end arr[i + 1:] = arr[i + 1:][::-1] return True # The initial permutation is the sorted order of characters arr = sorted(s) results = [\'\'.join(arr)] while next_permutation(arr): results.append(\'\'.join(arr)) return results"},{"question":"You are given a list of integer coordinates representing points on a two-dimensional plane. Write a function `find_closest_points(points, K)` that accepts the list of coordinates, `points`, and an integer `K`, and returns a list of the `K` closest points to the origin (0, 0). The Euclidean distance should be used to determine the closeness. Ensure your function can handle an edge case where `K` is larger than the number of points provided by returning all points in such a scenario. Example: ```python points = [(1, 2), (3, 4), (1, -1)] K = 2 print(find_closest_points(points, K)) # Output: [(1, 2), (1, -1)] ```","solution":"import heapq def find_closest_points(points, K): Returns the K closest points to the origin (0, 0) based on Euclidean distance. Parameters: points (list of tuples): List of integer coordinates representing points on a two-dimensional plane. K (int): Number of closest points to find. Returns: list of tuples: K closest points to the origin (0, 0). if K >= len(points): return points # Calculate all distances and keep them in a heap heap = [] for (x, y) in points: distance = x**2 + y**2 # We use distance squared to avoid unnecessary sqrt calculations heapq.heappush(heap, (distance, (x, y))) closest_points = [] for _ in range(K): closest_points.append(heapq.heappop(heap)[1]) return closest_points"},{"question":"Develop a Python function `common_elements` that takes two lists as arguments and returns a new list that contains only the elements that are present in both lists. The returned list should not have any duplicates, even if the input lists contain duplicates. Assume the elements in the lists are hashable. ```python def common_elements(list1, list2): # Your code here pass # Examples: # common_elements([1, 2, 3, 4], [3, 4, 5, 6]) should return [3, 4] # common_elements([\'a\', \'b\', \'c\'], [\'b\', \'c\', \'d\', \'e\']) should return [\'b\', \'c\'] ```","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2 without duplicates. return list(set(list1) & set(list2))"},{"question":"Write a function to calculate the nth Fibonacci number using both iterative and recursive approaches. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Ensure your function handles large values of n efficiently. Provide an analysis of the time and space complexity for both approaches, and explain which method is preferable for large values of n and why.","solution":"def fibonacci_recursive(n): Returns the nth Fibonacci number using the recursive approach. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2) def fibonacci_iterative(n): Returns the nth Fibonacci number using the iterative approach. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") a, b = 0, 1 for i in range(n): a, b = b, a + b return a"},{"question":"Implement a function that takes a list of numbers and returns a list of the same length where each element at index \'i\' is the product of all the numbers in the original list except the one at \'i\'. For instance, given the input list [1, 2, 3, 4], the function should return [24, 12, 8, 6]. Note: You should not use division in the solution.","solution":"def product_except_self(nums): Given a list of integers, returns a list such that each element at index \'i\' is the product of all the numbers in the original list except the one at \'i\', without using division. length = len(nums) answer = [1] * length # Calculate the products of all elements to the left of each index left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # Calculate the products of all elements to the right of each index right_product = 1 for i in reversed(range(length)): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Write a program that processes a list of students\' names and their corresponding scores, to determine the highest scoring student(s). If there are multiple students with the highest score, return all their names in alphabetical order. Your task is to create a function that accepts a list of tuples, where each tuple contains a student\'s name and their score. Example input: students_scores = [(\\"Alice\\", 85), (\\"Bob\\", 90), (\\"Charlie\\", 88), (\\"Dave\\", 85), (\\"Eva\\", 90)] Expected output: [\\"Bob\\", \\"Eva\\"]","solution":"def highest_scorers(students_scores): Returns the names of the highest scoring student(s) in alphabetical order. Args: students_scores (list of tuples): A list where each tuple contains a student\'s name and their score. Returns: list: A list of names of the highest scoring students in alphabetical order. if not students_scores: return [] sorted_scores = sorted(students_scores, key=lambda x: (-x[1], x[0])) highest_score = sorted_scores[0][1] highest_scorers = [name for name, score in sorted_scores if score == highest_score] return sorted(highest_scorers)"},{"question":"Create a function that takes a string representing a mathematical expression involving addition and multiplication of non-negative integers (e.g., \'3+5*2\') and returns the evaluated result as an integer. The expression will be a valid mathematical expression without parentheses and involving only + and * operators. Respect the standard precedence of operations, where multiplication has higher precedence over addition. Do not use any built-in functions that directly evaluate the expression (e.g., eval()). # Example ```python assert evaluate_expression(\'3+5*2\') == 13 assert evaluate_expression(\'10+3*5+2\') == 27 assert evaluate_expression(\'2*3+5*2\') == 16 assert evaluate_expression(\'8*3+2+1*4\') == 30 ``` # Constraints - The length of the input string will not exceed 100 characters. - Each operand is a non-negative integer less than 100. - Operators are always combined with operands, and there will not be any consecutive operators. # Function Signature ```python def evaluate_expression(expr: str) -> int: pass ```","solution":"def evaluate_expression(expr: str) -> int: Evaluates a mathematical expression involving addition and multiplication. The expression string will only contain non-negative integers, \'+\' and \'*\'. :param expr: A string containing the mathematical expression. :return: The evaluated result as an integer. # Split the expression by \'+\', then evaluate each part separately and add them up. terms = expr.split(\'+\') result = 0 for term in terms: # Evaluate each term by multiplying the products together factors = map(int, term.split(\'*\')) product = 1 for factor in factors: product *= factor result += product return result"},{"question":"Given a sequence of stock prices over a number of days, design a function to calculate the maximum profit that can be made by buying on one day and selling on another day. Your function should consider the following scenarios: no transaction is done at all and all potential profit opportunities. Handle edge cases such as invalid inputs or sequences with less than two days of prices. Provide examples and explain the thought process behind your solution.","solution":"def max_profit(prices): Calculate the maximum profit that can be made by buying on one day and selling on another day. :param prices: List of stock prices over a number of days :return: Maximum profit that can be made if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a function `reverse_string(input_string: str) -> str` that takes a string as input and returns the string reversed. For example, given the input `hello world`, the function should return `dlrow olleh`. Additionally, ensure the function handles the following cases: - If the input string is empty, the function should return an empty string. - The function should preserve spaces, punctuation, and capitalization as they appear in the original string. - The function should be capable of handling Unicode characters. Example: ```python print(reverse_string(\\"A man, a plan, a canal, Panama!\\")) # Output: \\"!amanaP ,lanac a ,nalp a ,nam A\\" print(reverse_string(\\"\\")) # Output: \\"\\"","solution":"def reverse_string(input_string: str) -> str: Reverses the input string and returns it. Args: input_string (str): The string to be reversed. Returns: str: The reversed string. return input_string[::-1]"},{"question":"You are tasked with designing a function that evaluates the sum of all prime numbers present within a nested collection of integers, which may include lists, sets, tuples, and dictionaries. The function should recursively navigate through any level of nested structures, extracting and summing only the prime numbers. The solution should efficiently handle large datasets and avoid recalculating primes for repeated values. Additionally, the function should manage and ignore any non-integer data types, including strings, floats, dictionaries, and custom objects. The function should be robust, handling edge cases such as empty structures, structures with no prime numbers, and very large integer values. It should also include meaningful error messages where appropriate, for example, if a non-iterable object is passed. Write a Python function that adheres to good coding practices with appropriate comments and docstrings explaining the logic and flow. Example: ```python nested_collection = [2, 3, [4, 5, (6, 7)], {8, 9, 10}, {\'a\': 11, \'b\': [12, 13, {14, 15}]}, 16] # A function call with the above input should return: 2 + 3 + 5 + 7 + 11 + 13 = 41 result = sum_primes(nested_collection) ```","solution":"def sum_primes(nested_collection): Recursively navigates a nested collection containing integers, lists, sets, tuples, and dictionaries to find and sum all prime numbers. Args: nested_collection (list/set/tuple/dict): The nested structure to parse. Returns: int: The sum of all prime numbers found in the nested collection. def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_primes_recursive(element): Recursive helper function to sum primes in nested structures. if isinstance(element, int): if is_prime(element): return element return 0 elif isinstance(element, (list, set, tuple)): return sum(sum_primes_recursive(sub_element) for sub_element in element) elif isinstance(element, dict): return sum(sum_primes_recursive(value) for value in element.values()) return 0 return sum_primes_recursive(nested_collection)"},{"question":"Implement a function that takes an array of integers and an integer `k` and returns the k most frequent elements. Your function should handle both positive and negative integers in the array and return the result in any order. You may assume that `k` is always valid and 1 ≤ k ≤ number of unique elements. Your solution should be efficient with respect to time complexity. Example: ```python def top_k_frequent_elements(nums, k): # Your implementation here # Example usage: nums = [1, 1, 2, 2, 2, 3, 3, 4] k = 2 print(top_k_frequent_elements(nums, k)) # Output can be [2, 1] or [1, 2] or [2, 3] ``` **Constraints:** - The elements in the array and `k` are integers. - The solution should not use the built-in `collections.Counter` or similar high-level utility.","solution":"from collections import defaultdict import heapq def top_k_frequent_elements(nums, k): Returns the k most frequent elements from the given list of integers. # First, create a frequency dictionary frequency = defaultdict(int) for num in nums: frequency[num] += 1 # Create a max heap based on frequency max_heap = [] for num, freq in frequency.items(): heapq.heappush(max_heap, (-freq, num)) # push (-freq, num) to make a max heap # Extract the top k elements from the max heap top_k_elements = [] for _ in range(k): top_k_elements.append(heapq.heappop(max_heap)[1]) # pop the element with the highest frequency return top_k_elements"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the odd numbers from the original list. For example, given the list [10, 21, 32, 43, 54], the function should return [21, 43].","solution":"def filter_odd_numbers(lst): Returns a list containing only the odd numbers from the original list. :param lst: list of integers :return: list of odd integers return [num for num in lst if num % 2 != 0]"},{"question":"Define a function `merge_dicts` that takes two dictionaries as arguments and returns a new dictionary that combines them. If both dictionaries have the same key, the value from the second dictionary should be taken. Example: ```python dict1 = {\'a\': 1, \'b\': 2, \'c\': 3} dict2 = {\'b\': 20, \'d\': 4} result = merge_dicts(dict1, dict2) print(result) # Output: {\'a\': 1, \'b\': 20, \'c\': 3, \'d\': 4} ```","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries. If both dictionaries have the same key, the value from the second dictionary is taken. Parameters: dict1 (dict): First dictionary dict2 (dict): Second dictionary Returns: dict: Merged dictionary result = dict1.copy() # Start with the keys and values from dict1 result.update(dict2) # Update with the keys and values from dict2, overwriting existing keys return result"},{"question":"Create a function in Python that takes a list of integers and returns a new list containing only the next greater element for each element in the original list. The next greater element of an element in the list is the first element that is greater than the original element and appears to its right. If no such element exists, return -1 for that position. Do not use any built-in functions for list manipulation. Example: Given the list: [4, 5, 2, 10, 8] Output: [5, 10, 10, -1, -1] Explanation: - The next greater element for 4 is 5. - The next greater element for 5 is 10. - The next greater element for 2 is 10. - The next greater element for 10 does not exist as there is no greater element to its right. - The next greater element for 8 also does not exist for the same reason.","solution":"def next_greater_elements(nums): Returns a list containing the next greater elements for each element in the original list. If no such element exists, returns -1 for that position. result = [-1] * len(nums) stack = [] for i in range(len(nums)): while stack and nums[stack[-1]] < nums[i]: index = stack.pop() result[index] = nums[i] stack.append(i) return result"},{"question":"Write a Python function that takes a list of tuples, where each tuple consists of a string and an integer. The string represents a person\'s name, and the integer represents their score in a test. Your task is to create a dictionary from this list where each key is a score and the corresponding value is a list of names of people who obtained that score. Ensure the names are sorted alphabetically within each score list. data = [(\'Alice\', 90), (\'Bob\', 85), (\'Charlie\', 90), (\'David\', 95), (\'Eve\', 85)] Example output: { 90: [\'Alice\', \'Charlie\'], 85: [\'Bob\', \'Eve\'], 95: [\'David\'] }","solution":"def group_scores(data): Groups names by their respective scores from the provided list of tuples. Args: data (list of tuples): Each tuple consists of a string (name) and an integer (score). Returns: dict: A dictionary where each key is a score and each value is a list of names sorted alphabetically that share that score. score_dict = {} for name, score in data: if score not in score_dict: score_dict[score] = [] score_dict[score].append(name) for score in score_dict: score_dict[score].sort() return score_dict"},{"question":"Create a function that takes a string and returns a dictionary where each key is a unique character from the string, and the value is the number of times that character appears in the string. Your solution should handle both uppercase and lowercase characters by treating them as distinct. Include proper error handling to catch and report any non-string inputs via a custom error message. def char_frequency(s): if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict # Example usage: # print(char_frequency(\\"HelloWorld\\")) # Should output: # {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}","solution":"def char_frequency(s): Takes a string and returns a dictionary where each key is a unique character from the string and the value is the number of times that character appears in the string. :param s: String to be analyzed :return: Dictionary with character frequencies :raises TypeError: If the input is not a string if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") frequency_dict = {} for char in s: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Write a function that takes in a string consisting of lowercase alphabets, and returns the longest contiguous substring that contains at most two distinct characters. For example, given the string \\"abcbbbbcccbdddadacb\\", it should return \\"bcbbbbcccb\\". If the input string is empty, return an empty string. If there are multiple substrings with the same maximum length, you can return any one of them. Consider optimizing your solution for time complexity.","solution":"def longest_substr_two_distinct(s): if not s: return \\"\\" start = 0 max_length = 0 max_substring = \\"\\" char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end+1] return max_substring"},{"question":"You are given a list of transactions made by various users in a format like this: ```python transactions = [ {\\"user_id\\": 1, \\"item\\": \\"pen\\", \\"amount\\": 2.5}, {\\"user_id\\": 2, \\"item\\": \\"notebook\\", \\"amount\\": 5.0}, {\\"user_id\\": 1, \\"item\\": \\"pencil\\", \\"amount\\": 1.0}, {\\"user_id\\": 3, \\"item\\": \\"eraser\\", \\"amount\\": 0.5}, {\\"user_id\\": 2, \\"item\\": \\"ruler\\", \\"amount\\": 1.5}, ] ``` Write a Python function that calculates the total spending of each user. The function should return a dictionary where the keys are the user IDs and the values are the total amounts spent by those users. Additionally, handle potential errors such as invalid data types and ensure that the input transactions list is validated for the correct format. Example output for the given `transactions` list: ```python { 1: 3.5, # 2.5 (pen) + 1.0 (pencil) 2: 6.5, # 5.0 (notebook) + 1.5 (ruler) 3: 0.5 # 0.5 (eraser) } ```","solution":"def calculate_total_spending(transactions): Given a list of transactions, calculate the total spending per user. :param transactions: List of dictionaries, each containing \'user_id\', \'item\', and \'amount\'. :return: Dictionary with user_id as keys and total spending as values. spending = {} for transaction in transactions: # Validate transaction format if not isinstance(transaction, dict): raise ValueError(\\"Each transaction must be a dictionary.\\") if not all(key in transaction for key in [\\"user_id\\", \\"item\\", \\"amount\\"]): raise ValueError(\\"Each transaction must contain \'user_id\', \'item\', and \'amount\'.\\") if not isinstance(transaction[\'user_id\'], int): raise ValueError(\\"\'user_id\' must be an integer.\\") if not isinstance(transaction[\'amount\'], (int, float)): raise ValueError(\\"\'amount\' must be a number.\\") user_id = transaction[\'user_id\'] amount = transaction[\'amount\'] if user_id in spending: spending[user_id] += amount else: spending[user_id] = amount return spending"},{"question":"Write a function called `find_common_elements` that takes two lists of integers as input and returns a new list containing only the elements that are present in both lists. The elements in the returned list must be sorted in ascending order. Do not use set operations to solve this problem. Additionally, your function should have a time complexity better than O(n*m), where n and m are the lengths of the two lists.","solution":"def find_common_elements(list1, list2): Returns a list containing the elements that are present in both input lists, sorted in ascending order. The function avoids using set operations. The time complexity is O(n + m), where n and m are the lengths of the two lists. list1.sort() list2.sort() common_elements = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: if not common_elements or list1[i] != common_elements[-1]: # Avoid duplicates common_elements.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common_elements"},{"question":"Write a function that generates a list of dictionaries, where each dictionary represents a student with the following attributes: `name` (string), `age` (integer), and `grades` (list of 5 random integers between 0 and 100). Another function should sort the list of dictionaries based on the average grade of each student in descending order. Lastly, create a function that returns the names of the top 3 students with the highest average grades. If there are fewer than three students, return the names of all students.","solution":"import random def generate_students(num_students): Generates a list of dictionaries, where each dictionary represents a student with \'name\', \'age\', and \'grades\'. students = [] for i in range(num_students): student = { \\"name\\": f\\"Student{i+1}\\", \\"age\\": random.randint(10, 20), \\"grades\\": [random.randint(0, 100) for _ in range(5)] } students.append(student) return students def sort_students_by_average_grade(students): Sorts the list of students based on their average grade in descending order. return sorted(students, key=lambda s: sum(s[\\"grades\\"]) / len(s[\\"grades\\"]), reverse=True) def top_n_students(students, n=3): Returns the names of the top n students with the highest average grades. sorted_students = sort_students_by_average_grade(students) return [student[\\"name\\"] for student in sorted_students[:n]]"},{"question":"Given a list of words, write a function to determine the length of the longest word in the list. If the list is empty, the function should return 0. The function should be case insensitive, so \'Word\' and \'word\' are considered of the same length. words = [\\"Hello\\", \\"world\\", \\"Python\\", \\"is\\", \\"awesome\\"] def longest_word_length(word_list): # Implement your function here pass result = longest_word_length(words) print(result)","solution":"def longest_word_length(word_list): Returns the length of the longest word in the list. Case insensitive. If the list is empty, returns 0. if not word_list: return 0 return max(len(word) for word in word_list)"},{"question":"Develop a text-based adventure game using Python. The game should begin with a brief narrative setting the scene and describing the player\'s initial surroundings. From there, the player should be able to make choices by typing commands that determine their next actions. Implement an inventory system that allows the player to pick up and use items. The game should include at least three distinct locations, a simple puzzle or challenge that the player must solve to progress, and a mechanism for the player to win the game. Ensure the game handles invalid inputs gracefully and includes instructions for how to play.","solution":"class AdventureGame: def __init__(self): self.inventory = [] self.current_location = \'forest\' self.locations = { \'forest\': { \'description\': \\"You are in a dark forest. Paths lead north and east.\\", \'north\': \'cave\', \'east\': \'river\' }, \'cave\': { \'description\': \\"You are in a damp cave. There is a torch on the wall. Paths lead south.\\", \'items\': [\'torch\'], \'south\': \'forest\' }, \'river\': { \'description\': \\"You are by a rushing river. There is a boat here. Paths lead west.\\", \'items\': [\'boat\'], \'west\': \'forest\' } } def describe_location(self): return self.locations[self.current_location][\'description\'] def move(self, direction): if direction in self.locations[self.current_location]: self.current_location = self.locations[self.current_location][direction] return True else: return False def pick_up_item(self, item): if \'items\' in self.locations[self.current_location] and item in self.locations[self.current_location][\'items\']: self.inventory.append(item) self.locations[self.current_location][\'items\'].remove(item) return True else: return False def show_inventory(self): return self.inventory def check_win_condition(self): return \'torch\' in self.inventory and \'boat\' in self.inventory def handle_command(game, command): command = command.lower().split() if not command: return \\"Invalid command. Try again!\\" if command[0] == \'go\': if len(command) != 2: return \\"Invalid command. Try \'go north\', \'go south\', \'go east\' or \'go west\'.\\" if game.move(command[1]): return game.describe_location() else: return \\"You can\'t go that way.\\" elif command[0] == \'take\': if len(command) != 2: return \\"Invalid command. Try \'take torch\', \'take boat\'.\\" if game.pick_up_item(command[1]): return f\\"You picked up {command[1]}.\\" else: return \\"There is no such item here.\\" elif command[0] == \'inventory\': return \\"Your inventory: \\" + \', \'.join(game.show_inventory()) elif command[0] == \'help\': return (\\"Instructions:n\\" \\"- Use \'go [direction]\' to move (e.g., \'go north\').n\\" \\"- Use \'take [item]\' to pick up an item (e.g., \'take torch\').n\\" \\"- Use \'inventory\' to check your items.n\\" \\"- Goal: Collect the torch and the boat to win the game.\\") else: return \\"Invalid command. Type \'help\' for instructions.\\" def main(): game = AdventureGame() print(\\"Welcome to the Adventure Game!\\") print(game.describe_location()) while True: command = input(\\"> \\") message = handle_command(game, command) print(message) if game.check_win_condition(): print(\\"Congratulations! You have collected all the items and won the game!\\") break if __name__ == \\"__main__\\": main()"},{"question":"In a given string, identify substrings that are palindromes and return the longest palindromic substring. If there are multiple substrings of the same maximum length, return the one that appears first. Your solution should be optimized for time and performance. def longest_palindromic_substring(s: str) -> str: Find the longest palindromic substring in a given string and return it. If multiple substrings of the same maximum length exist, return the one that appears first. Constraints: 1 <= len(s) <= 10^4 >>> longest_palindromic_substring(\\"babad\\") \'bab\' >>> longest_palindromic_substring(\\"cbbd\\") \'bb\' >>> longest_palindromic_substring(\\"a\\") \'a\' >>> longest_palindromic_substring(\\"ac\\") \'a\'","solution":"def longest_palindromic_substring(s: str) -> str: Find the longest palindromic substring in a given string and return it. If multiple substrings of the same maximum length exist, return the one that appears first. Constraints: 1 <= len(s) <= 10^4 if not s or len(s) == 1: return s start, max_length = 0, 1 for i in range(1, len(s)): # Even length palindromes, center at i-1 and i low, high = i - 1, i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Odd length palindromes, center at i low, high = i - 1, i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a Python function that takes a list of integers and an integer target as input. The function should return a list of unique pairs from the input list that add up to the target integer. Each pair should be sorted in ascending order, and the list of pairs should be sorted in lexicographical order. Ensure that no duplicate pairs are included in the output list.","solution":"def find_pairs(nums, target): Finds all unique pairs in the list `nums` that add up to `target`. Each pair should be sorted in ascending order, and the list of pairs should be sorted in lexicographical order. Parameters: nums (list): A list of integers. target (int): The target sum for the pairs. Returns: list: A list of unique pairs that sum to the target. nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(list(pairs))"},{"question":"Write a function that simulates a basic task scheduling system. The function should accept a list of tasks, where each task is represented by a dictionary with \'id\', \'duration\', and \'dependencies\' keys. The \'dependencies\' key should hold a list of task IDs that must be completed before the task can start. The function should return a list of task IDs in the order they should be executed to respect all dependencies. If the tasks cannot be scheduled due to circular dependencies, the function should raise an exception.","solution":"def schedule_tasks(tasks): Schedules tasks such that all dependencies are respected. :param tasks: List of task dictionaries. Each task dictionary contains \'id\', \'duration\', and \'dependencies\' keys. :return: List of task IDs in the order they should be executed. :raises: Exception if there are circular dependencies. from collections import deque, defaultdict # Create a graph and indegree count graph = defaultdict(list) indegree = defaultdict(int) for task in tasks: task_id = task[\'id\'] indegree[task_id] = 0 # Ensure every task is in indegree map for dependency in task[\'dependencies\']: graph[dependency].append(task_id) indegree[task_id] += 1 # Find all starting points (tasks with no dependencies) queue = deque([task_id for task_id in indegree if indegree[task_id] == 0]) # List to store the ordered tasks ordered_tasks = [] while queue: current_task = queue.popleft() ordered_tasks.append(current_task) for neighbor in graph[current_task]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Check if there was a cycle if len(ordered_tasks) != len(tasks): raise Exception(\\"Circular dependencies detected\\") return ordered_tasks"},{"question":"Given a list of integers, write a function to reverse the list without using built-in reverse functions. Return the reversed list. ```python def reverse_list(lst): # Your code here # Example usage: # Input: [1, 2, 3, 4, 5] # Output: [5, 4, 3, 2, 1] ```","solution":"def reverse_list(lst): Returns the reversed list without using built-in reverse functions. reversed_lst = [] for item in lst[::-1]: reversed_lst.append(item) return reversed_lst # Example usage: # Input: [1, 2, 3, 4, 5] # Output: [5, 4, 3, 2, 1]"},{"question":"A bakery currently has 20 croissants and 50 baguettes, and you are asked to determine the ratio of croissants to baguettes. Which of the following options represents this ratio accurately? Is it 2:05, 4:05, 2:04, or 2:03?","solution":"def calculate_ratio(croissants, baguettes): Calculate the ratio of croissants to baguettes. Args: croissants (int): Number of croissants. baguettes (int): Number of baguettes. Returns: str: The ratio of croissants to baguettes in the format \'a:b\' where a and b are the simplest form of the ratio. gcd = greatest_common_divisor(croissants, baguettes) return f\\"{croissants // gcd}:{baguettes // gcd}\\" def greatest_common_divisor(a, b): Computes the greatest common divisor of a and b using Euclid\'s algorithm. Args: a (int): First number. b (int): Second number. Returns: int: The greatest common divisor of a and b. while b: a, b = b, a % b return a # The bakery has 20 croissants and 50 baguettes croissants = 20 baguettes = 50 # Calculate the ratio ratio = calculate_ratio(croissants, baguettes) ratio"},{"question":"Write a Python function named `merge_sorted_arrays` that merges two pre-sorted arrays into a single sorted array without using any built-in sorting methods. Ensure the function handles arrays with both integers and floating-point numbers, and does not modify the original arrays. # Function Signature ```python def merge_sorted_arrays(arr1: list, arr2: list) -> list: Given two sorted arrays, merge them into a single sorted array. :param arr1: List of sorted numbers (integers and floats). :param arr2: List of sorted numbers (integers and floats). :return: A single sorted array containing all elements from arr1 and arr2. Examples: >>> merge_sorted_arrays([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_arrays([0.1, 2.5, 3.3], [1.2, 2.2, 4.5]) [0.1, 1.2, 2.2, 2.5, 3.3, 4.5] >>> merge_sorted_arrays([-1, 0, 1], [-2, 2, 3]) [-2, -1, 0, 1, 2, 3] >>> merge_sorted_arrays([1, 3, 3], [3, 3, 5]) [1, 3, 3, 3, 3, 5] ``` # Requirements 1. The function should iterate through both arrays simultaneously, comparing elements and appending the smaller one to the result. 2. It should handle arrays with duplicate elements gracefully, maintaining the order. 3. After one array is exhausted, the remaining elements of the other array should be directly appended to the result. 4. Both ascending and descending arrays should be managed, by detecting the order from the input and ensuring the correct final sorted order. # Implementation Tips - Consider edge cases such as empty arrays. - Maintain clean and readable code for ease of understanding and maintenance. - Optimize for time complexity, targeting O(n + m) where n and m are the lengths of the input arrays.","solution":"def merge_sorted_arrays(arr1: list, arr2: list) -> list: Given two sorted arrays, merge them into a single sorted array. :param arr1: List of sorted numbers (integers and floats). :param arr2: List of sorted numbers (integers and floats). :return: A single sorted array containing all elements from arr1 and arr2. result = [] i, j = 0, 0 # Compare and merge arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Append remaining elements of arr1 while i < len(arr1): result.append(arr1[i]) i += 1 # Append remaining elements of arr2 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Write a function in Python that takes a string as input and returns the same string with the words reversed. For example, if the input string is \\"The sky is blue\\", the function should return \\"blue is sky The\\". Assume that words are separated by spaces and the input string does not contain any punctuation.","solution":"def reverse_words(s): Takes a string s and returns the same string with the words reversed. words = s.split() return \' \'.join(reversed(words))"},{"question":"Design a bank account management system using a class named `BankAccount`. The class should have attributes for account holder\'s name, account number, and balance. Implement methods within the class to deposit money, withdraw money, check the current balance, and transfer funds to another `BankAccount` object. Additionally, ensure that: 1. The deposit and withdraw methods account for typical problems such as negative inputs and overdrafts. 2. The transfer method validates that sufficient funds exist before performing the operation. 3. The account numbers are automatically generated and unique for each instance. 4. Provide a method to retrieve the account details such as holder\'s name, account number, and current balance in a dictionary format for easy reading.","solution":"class BankAccount: _account_number_counter = 1000 # Class variable for generating unique account numbers def __init__(self, name): self.account_holder_name = name self.account_number = BankAccount._account_number_counter BankAccount._account_number_counter += 1 self.balance = 0.0 def deposit(self, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount): if amount <= 0: raise ValueError(\\"Withdraw amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Insufficient funds.\\") self.balance -= amount def get_balance(self): return self.balance def transfer(self, amount, to_account): if not isinstance(to_account, BankAccount): raise ValueError(\\"The recipient must be a valid BankAccount object.\\") self.withdraw(amount) to_account.deposit(amount) def get_account_details(self): return { \'account_holder_name\': self.account_holder_name, \'account_number\': self.account_number, \'balance\': self.balance }"},{"question":"Write a function that accepts a string of characters and returns the first non-repeating character. If all characters are repeated or the input string is empty, return a string saying \\"No unique character found\\". Example: ```python first_non_repeating(\\"swiss\\") -> \\"w\\" first_non_repeating(\\"programming\\") -> \\"p\\" first_non_repeating(\\"aabbcc\\") -> \\"No unique character found\\" ```","solution":"def first_non_repeating(s): Returns the first non-repeating character in the string s. If all characters are repeated or the input string is empty, it returns \\"No unique character found\\". if not s: return \\"No unique character found\\" char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"No unique character found\\""},{"question":"Create a function that takes an array of integers and returns a new array with the same numbers sorted in ascending order. Your solution should implement the merge sort algorithm to achieve this. Avoid using built-in sorting functions to demonstrate an understanding of the sorting technique. Example: Input: [34, 7, 23, 32, 5, 62] Output: [5, 7, 23, 32, 34, 62]","solution":"def merge_sort(arr): Sorts an array of integers in ascending order using the merge sort algorithm. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted arrays into one sorted array. sorted_array = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_array.append(left[left_index]) left_index += 1 else: sorted_array.append(right[right_index]) right_index += 1 sorted_array.extend(left[left_index:]) sorted_array.extend(right[right_index:]) return sorted_array"},{"question":"Write a function `reverse_words` that takes a string `s` as input and returns a new string with the order of the words reversed, while keeping the individual words intact. For example, if the input is `\\"Welcome to the coding interview\\"`, the output should be `\\"interview coding the to Welcome\\"`. Note that the input string will not contain any leading or trailing spaces and the words will be separated by a single space. ```python def reverse_words(s): # Your code here pass # Example usage print(reverse_words(\\"Welcome to the coding interview\\")) # Output: \\"interview coding the to Welcome\\" ```","solution":"def reverse_words(s): Reverses the order of words in the input string s while keeping the individual words intact. :param s: Input string containing words separated by a single space :return: A new string with the order of words reversed # Split the string into words words = s.split(\' \') # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words into a string return \' \'.join(reversed_words) # Example usage print(reverse_words(\\"Welcome to the coding interview\\")) # Output: \\"interview coding the to Welcome\\""},{"question":"Write a function that takes a string representing a binary number (base-2) and converts it to its corresponding hexadecimal (base-16) representation as a lowercase string, ensuring the accuracy of conversion. Provide a set of test cases to validate this conversion. def binary_to_hex(binary_str): Convert binary string to its equivalent hexadecimal representation as lowercase string. Input is guaranteed to be a non-empty binary string (consisting only of \'0\' and \'1\' characters). Examples: >>> binary_to_hex(\'11010\') == \'1a\' >>> binary_to_hex(\'101010111100110111101111\') == \'abcdef\' >>> binary_to_hex(\'1111\') == \'f\'","solution":"def binary_to_hex(binary_str): Convert binary string to its equivalent hexadecimal representation as lowercase string. Input is guaranteed to be a non-empty binary string (consisting only of \'0\' and \'1\' characters). Examples: >>> binary_to_hex(\'11010\') == \'1a\' >>> binary_to_hex(\'101010111100110111101111\') == \'abcdef\' >>> binary_to_hex(\'1111\') == \'f\' # First, convert the binary string to an integer decimal_value = int(binary_str, 2) # Then, format this integer as a hexadecimal string hex_value = format(decimal_value, \'x\') return hex_value"},{"question":"Implement a Python function that takes a list of integers as input and returns a new list containing the squares of all the prime numbers from the original list. Write a helper function to determine if a number is prime. Provide test cases to validate your solution.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def squares_of_primes(numbers): Returns a list of squares of prime numbers from the input list. return [num ** 2 for num in numbers if is_prime(num)]"},{"question":"Develop a function that simulates a real-time taxi dispatch system. The system should regularly check for available drivers in various locations and assign incoming ride requests to the nearest available driver. Your function should support adding new drivers, removing drivers when they go offline, and assigning a ride request to the closest available driver based on their location using Haversine distance formula.","solution":"from math import radians, cos, sin, sqrt, atan2 class TaxiDispatch: def __init__(self): self.drivers = {} def add_driver(self, driver_id, location): self.drivers[driver_id] = location def remove_driver(self, driver_id): if driver_id in self.drivers: del self.drivers[driver_id] def haversine_distance(self, loc1, loc2): R = 6371 # Radius of the Earth in kilometers lat1, lon1 = loc1 lat2, lon2 = loc2 dlat = radians(lat2 - lat1) dlon = radians(lon2 - lon1) a = sin(dlat / 2) ** 2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) ** 2 c = 2 * atan2(sqrt(a), sqrt(1 - a)) distance = R * c return distance def assign_ride_request(self, ride_location): closest_driver = None shortest_distance = float(\'inf\') for driver_id, driver_location in self.drivers.items(): distance = self.haversine_distance(ride_location, driver_location) if distance < shortest_distance: shortest_distance = distance closest_driver = driver_id if closest_driver: self.remove_driver(closest_driver) return closest_driver"},{"question":"Design and implement a scalable, thread-safe cache system in your preferred programming language, capable of storing and retrieving large datasets efficiently. Incorporate cache replacement policies like Least Recently Used (LRU), Least Frequently Used (LFU), and random replacement to optimize memory usage and performance. Your solution should handle concurrent read and write operations, ensuring data integrity and minimal latency. Document the choice of data structures, algorithms, and concurrency control mechanisms used in your implementation.","solution":"from collections import OrderedDict from threading import Lock, RLock import random class ScalableCache: def __init__(self, capacity: int, policy: str = \'LRU\'): self.capacity = capacity self.policy = policy self.lock = RLock() if policy == \'LRU\' or policy == \'LRU\': self.cache = OrderedDict() elif policy == \'LFU\': self.cache = {} self.access_counts = {} else: self.cache = {} def get(self, key: str): with self.lock: if key not in self.cache: return None if self.policy == \'LRU\': self.cache.move_to_end(key) elif self.policy == \'LFU\': self.access_counts[key] += 1 return self.cache[key] def put(self, key: str, value): with self.lock: if len(self.cache) >= self.capacity: self.evict() self.cache[key] = value if self.policy == \'LRU\': self.cache.move_to_end(key) elif self.policy == \'LFU\': self.access_counts[key] = self.access_counts.get(key, 0) + 1 def evict(self): if self.policy == \'LRU\': self.cache.popitem(last=False) elif self.policy == \'LFU\': lfu_key = min(self.access_counts, key=self.access_counts.get) self.cache.pop(lfu_key) self.access_counts.pop(lfu_key) else: # Random Replacement random_key = random.choice(list(self.cache.keys())) self.cache.pop(random_key) # Example usage: # cache = ScalableCache(3, \'LRU\') # cache.put(\'a\', 1) # cache.put(\'b\', 2) # print(cache.get(\'a\')) # Outputs 1 # cache.put(\'c\', 3) # cache.put(\'d\', 4) # print(cache.get(\'b\')) # Outputs None, as \'b\' would be evicted in an LRU cache"},{"question":"Write a function that simulates a simple task scheduler which handles multiple tasks with different priorities. The function should take a list of tasks, their durations, and their priorities. Each task is represented as a tuple (task_name, duration, priority). The scheduler should execute the highest priority task available. If multiple tasks have the same highest priority, the scheduler should execute the one that appeared first in the input list. The scheduler runs in time slices of 1 unit and should return the order in which tasks are executed. Each task runs to completion before the next task starts. Example input: tasks = [ (\\"Task1\\", 3, 1), (\\"Task2\\", 2, 3), (\\"Task3\\", 1, 2), (\\"Task4\\", 2, 2), (\\"Task5\\", 4, 1) ] Expected output: [\\"Task2\\", \\"Task3\\", \\"Task4\\", \\"Task1\\", \\"Task5\\"]","solution":"def task_scheduler(tasks): Simulates a simple task scheduler which handles multiple tasks with different priorities. Tasks are executed in the order of their priority and appearance. Parameters: tasks (list of tuples): List of tasks where each task is a tuple (task_name, duration, priority). Returns: list: The order in which tasks are executed. tasks_sorted = sorted(tasks, key=lambda x: (-x[2], tasks.index(x))) execution_order = [] while tasks_sorted: task = tasks_sorted.pop(0) execution_order.append(task[0]) return execution_order # Example input tasks = [ (\\"Task1\\", 3, 1), (\\"Task2\\", 2, 3), (\\"Task3\\", 1, 2), (\\"Task4\\", 2, 2), (\\"Task5\\", 4, 1) ] print(task_scheduler(tasks)) # Expected: [\\"Task2\\", \\"Task3\\", \\"Task4\\", \\"Task1\\", \\"Task5\\"]"},{"question":"Implement a Python function called `missing_number` that takes a list of integers containing numbers from 1 to n (inclusive) with exactly one missing number. The function should identify and return the missing integer. The list is guaranteed to have no duplicates, and the numbers are not sorted. For example, given the list [3, 7, 1, 2, 8, 4, 5], the function should return 6. def missing_number(nums): # Your code here # Example usage: # missing_number([3, 7, 1, 2, 8, 4, 5]) # Should return: 6","solution":"def missing_number(nums): Returns the missing number from 1 to n in the given list. Arguments: nums -- a list of integers containing numbers from 1 to n with one missing number. Returns: The missing integer. n = len(nums) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(nums) return int(expected_sum - actual_sum)"},{"question":"Write a function in Python that accepts two string arguments, name and email. Your task is to validate the email based on the following criteria: 1. The email must contain \'@\' and \'.\' characters. 2. The \'@\' character must come before the \'.\' character. 3. Both characters must reside within the string and should not be the first or last characters. 4. The local part (before \'@\') must match the name in any case (both lower and uppercase should be considered same). If the email is valid based on the criteria above, return True; otherwise, return False. Example: name = \\"JohnDoe\\", email = \\"johndoe@example.com\\" should return True name = \\"John\\", email = \\"john@domaincom\\" should return False","solution":"def validate_email(name, email): Validates the email based on the given criteria. Parameters: name (str): The name to be checked. email (str): The email to be validated. Returns: bool: True if the email is valid, False otherwise. name = name.lower() email = email.lower() if \'@\' not in email or \'.\' not in email: return False at_index = email.index(\'@\') dot_index = email.index(\'.\') if at_index == 0 or dot_index == len(email) - 1: return False if at_index > dot_index: return False local_part = email.split(\'@\')[0] if local_part != name: return False return True"},{"question":"Write a function that reads a list of email addresses, removes duplicates, and then sorts the remaining email addresses alphabetically. In addition, the function should allow filtering of email addresses based on a specified domain and return only the emails that belong to that domain. If no domain is specified, the function should return all email addresses. # Inputs - A list of strings, where each string is an email address (e.g., [\\"user1@example.com\\", \\"user2@test.com\\", \\"user1@example.com\\"]). - An optional string representing a domain to filter email addresses (e.g., \\"example.com\\"). # Output - A list of unique email addresses sorted alphabetically. If a domain is specified, only email addresses from that domain are included in the result. # Example ```python emails = [\\"alice@yahoo.com\\", \\"bob@gmail.com\\", \\"alice@yahoo.com\\", \\"charlie@gmail.com\\", \\"david@example.com\\"] filter_domain = \\"gmail.com\\" sorted_emails = filter_and_sort_emails(emails, filter_domain) print(sorted_emails) # Output: [\'bob@gmail.com\', \'charlie@gmail.com\'] sorted_emails = filter_and_sort_emails(emails) print(sorted_emails) # Output: [\'alice@yahoo.com\', \'bob@gmail.com\', \'charlie@gmail.com\', \'david@example.com\'] ``` # Constraints - All email addresses will be in a valid format. - The input list may contain up to 10,000 email addresses.","solution":"def filter_and_sort_emails(emails, domain=None): Removes duplicates from the list of email addresses, sorts the resulting list alphabetically, and filters the emails based on the specified domain if provided. Args: emails (list of str): A list of email addresses. domain (str, optional): The domain to filter email addresses. Defaults to None. Returns: list of str: A list of unique, sorted email addresses, possibly filtered by domain. unique_emails = set(emails) if domain: filtered_emails = [email for email in unique_emails if email.endswith(f\\"@{domain}\\")] else: filtered_emails = list(unique_emails) return sorted(filtered_emails)"},{"question":"Develop a program that takes a list of integers as input and returns the length of the longest contiguous subarray with a sum equal to zero. The function should be optimized for efficiency in both time and space complexity.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest contiguous subarray with sum equal to zero. sum_index_map = {} # To store the first occurrence of a sum max_length = 0 current_sum = 0 for index, value in enumerate(arr): current_sum += value if current_sum == 0: max_length = index + 1 if current_sum in sum_index_map: max_length = max(max_length, index - sum_index_map[current_sum]) else: sum_index_map[current_sum] = index return max_length"},{"question":"Implement a Python function that reads a CSV file containing timestamps and numerical data. Transform the timestamps to a pandas DateTime index and resample the numerical data to a specified frequency (e.g., from minute-level data to hour-level data). Plot the resampled data using matplotlib, ensuring that the datetime axis is formatted correctly for readability. Your function should take the file path, the frequency to resample, and the column names of the timestamp and numerical data as inputs.","solution":"import pandas as pd import matplotlib.pyplot as plt def read_resample_plot(file_path, timestamp_col, data_col, frequency): Reads a CSV file, transforms timestamps to a pandas DateTime index, resamples numerical data to a specified frequency and plots the resampled data. :param file_path: Path to the CSV file :param timestamp_col: The name of the timestamp column :param data_col: The name of the numerical data column :param frequency: The frequency to which the data needs to be resampled (e.g., \'H\' for hour) # Read CSV file df = pd.read_csv(file_path) # Transform timestamps to pandas DateTime index df[timestamp_col] = pd.to_datetime(df[timestamp_col]) df.set_index(timestamp_col, inplace=True) # Resample the data resampled_df = df.resample(frequency).mean() # Plot the resampled data plt.figure(figsize=(10, 6)) plt.plot(resampled_df.index, resampled_df[data_col], marker=\'o\') plt.xlabel(\'Datetime\') plt.ylabel(data_col) plt.title(f\'{data_col} Resampled to {frequency}\') plt.grid(True) # Formatting the datetime axis plt.gcf().autofmt_xdate() plt.show()"},{"question":"Given a string representing a mathematical expression, write a Python function to evaluate the expression and return the result. The expression will be a combination of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. Implement appropriate error handling to deal with invalid input, such as division by zero or malformed expressions. **Input:** A string math_expression containing the expression to be evaluated. **Output:** An integer or float value representing the result of the expression. **Example:** ```python evaluate_expression(\\"3+5*2\\") # Output: 13 evaluate_expression(\\"10/2-7\\") # Output: -2.0 evaluate_expression(\\"15-3*3+2\\") # Output: 8 ``` Note: Do not use the eval() function in your implementation.","solution":"import operator def evaluate_expression(math_expression): Evaluates a mathematical expression string containing non-negative integers and the operators \'+\', \'-\', \'*\', \'/\'. Returns the result as an integer or float. The function is equipped with error handling for invalid inputs and division by zero. if not math_expression: raise ValueError(\\"Empty expression is not valid.\\") # Operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} # Supported operators operators = {\'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv} def apply_operator(operands, op): right = operands.pop() left = operands.pop() if op == \'/\' and right == 0: raise ZeroDivisionError(\\"division by zero\\") operands.append(operators[op](left, right)) def greater_precedence(op1, op2): return precedence[op1] >= precedence[op2] operands = [] ops = [] i = 0 while i < len(math_expression): if math_expression[i] in \'0123456789\': j = i while j < len(math_expression) and math_expression[j] in \'0123456789\': j += 1 operands.append(int(math_expression[i:j])) i = j elif math_expression[i] in operators: while (ops and ops[-1] in operators and greater_precedence(ops[-1], math_expression[i])): apply_operator(operands, ops.pop()) ops.append(math_expression[i]) i += 1 else: raise ValueError(f\\"Invalid character found in expression: {math_expression[i]}\\") while ops: apply_operator(operands, ops.pop()) return operands[0] # Example Usage: # result = evaluate_expression(\\"3+5*2\\") # print(result) # Output: 13"},{"question":"Implement a function in Python that calculates the \\"digit sum\\" of an integer. The \\"digit sum\\" of a number is the sum of its digits. For instance, the digit sum of 123 is 1 + 2 + 3 = 6. This function should be efficient and handle both positive and negative integers. ```python def digit_sum(n: int) -> int: This function computes the digit sum of a given integer. - For a positive integer n, it returns the sum of its digits. - For a negative integer n, it returns the sum of the digits of its absolute value. Examples: >>> digit_sum(123) 6 >>> digit_sum(-456) 15 >>> digit_sum(0) 0 >>> digit_sum(99999) 45 # Position your solution here. ```","solution":"def digit_sum(n: int) -> int: This function computes the digit sum of a given integer. - For a positive integer n, it returns the sum of its digits. - For a negative integer n, it returns the sum of the digits of its absolute value. Examples: >>> digit_sum(123) 6 >>> digit_sum(-456) 15 >>> digit_sum(0) 0 >>> digit_sum(99999) 45 return sum(int(digit) for digit in str(abs(n)))"},{"question":"Write a function that accepts a string containing a paragraph and extracts a list of unique words from it, ignoring case and punctuation. Additionally, provide a piece of erroneous code that attempts to solve this problem and explain the mistakes.","solution":"import re def extract_unique_words(paragraph): Extracts a list of unique words from the given paragraph, ignoring case and punctuation. :param paragraph: A string containing a paragraph. :return: A list of unique words. # Remove punctuation and convert to lower case words = re.findall(r\'bw+b\', paragraph.lower()) unique_words = list(set(words)) # Convert to set to get unique words, then back to list unique_words.sort() # Sort the list of unique words return unique_words"},{"question":"Write a function that takes a string as input and returns the string with the order of words reversed. For example, given the input \\"The quick brown fox\\", the function should return \\"fox brown quick The\\". Assume that all words are separated by spaces and there are no punctuation marks or special characters in the input string.","solution":"def reverse_words(sentence): Returns a string with the order of words reversed. Args: sentence: A string representing the input sentence. Returns: A string with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Write a function that calculates the Fibonacci sequence up to the nth term where n is provided as input. Ensure your function handles invalid input gracefully, such as when n is a non-positive integer.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to the nth term. If n is a non-positive integer, returns an empty list. if not isinstance(n, int) or n <= 0: return [] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Create a function in Python that accepts an integer array and an integer target as arguments. The function should find all unique pairs of integers in the array that sum up to the target value. Return these pairs as a list of tuples, with each tuple containing two elements (the pairs should not contain duplicate numbers). Demonstrate the function with an example where the array is [2, 4, 3, 5, 7, 8, 9] and the target is 7.","solution":"def find_pairs_with_sum(arr, target): Returns all unique pairs of integers in the array that sum up to the target value. Parameters: arr (list of int): The list of integers. target (int): The target sum. Returns: list of tuple: A list of unique pairs (tuples) that sum up to the target value. seen = set() output = set() for num in arr: complement = target - num if complement in seen: # Create a sorted tuple to avoid duplicate pairs like (3, 4) and (4, 3) output.add(tuple(sorted((num, complement)))) seen.add(num) return list(output) # Example: arr = [2, 4, 3, 5, 7, 8, 9] target = 7 print(find_pairs_with_sum(arr, target)) # Output: [(2, 5), (3, 4)]"},{"question":"You are tasked with writing a function that takes an input string and returns the frequency count of each character in the string. Your function should be case-insensitive and ignore all non-alphabetic characters. You should use Python\'s collections module and its Counter class to achieve this. Your solution should be efficient, handling large input strings gracefully. **Specifications:** - Input: A single string `s` composed of alphabetic and non-alphabetic characters. - Output: A dictionary where the keys are characters and values are their corresponding frequency counts (case-insensitive). **Example:** ```python from collections import Counter def character_frequency(s): # Your code here # Test case input_str = \\"Hello, World!\\" output = character_frequency(input_str) print(output) # Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` Ensure your function adheres to this example and produces the correct output.","solution":"from collections import Counter import re def character_frequency(s): Returns the frequency count of each alphabetic character in the string s, case-insensitive. s = s.lower() filtered_string = re.sub(r\'[^a-z]\', \'\', s) return dict(Counter(filtered_string))"},{"question":"Write a function that takes a list of integers and removes the duplicates, preserving the original order of their first occurrence. Your implementation should not use any built-in functions that directly solve the problem (like set or collections.OrderedDict). Example Input: [5, 3, 5, 7, 3, 9] Example Output: [5, 3, 7, 9]","solution":"def remove_duplicates(lst): Removes duplicates from list, preserving the original order of their first occurrence. Parameters: lst (list): List of integers containing duplicates. Returns: list: List of integers with duplicates removed. seen = {} result = [] for item in lst: if item not in seen: seen[item] = True result.append(item) return result"},{"question":"Create a Python function named `sum_of_digits` that takes a single integer as input and returns the sum of its digits. For example, if the input is 12345, the function should return 15. Ensure the function handles both positive and negative integers correctly, where the sum of digits of -12345 should also return 15.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer. Handles both positive and negative integers. return sum(int(digit) for digit in str(abs(n)))"},{"question":"You are given a partially implemented Tic-Tac-Toe game. Your task is to complete the implementation so that the game can be played between two players on the console. After completing the implementation, explain how your additions contribute to the gameplay mechanics, including how you ensured that the game rules are properly followed, such as detecting a win, a draw, and handling invalid moves. #Code Snippet# # The following is a partial implementation of a Tic-Tac-Toe game, # requiring completion of several methods to ensure full gameplay functionality. ```python class TicTacToe: def __init__(self): self.board = [\' \' for _ in range(9)] # A list to hold the board\'s current state self.current_winner = None # To keep track of the winner! def print_board(self): # This method prints the current board state for row in [self.board[i*3:(i+1)*3] for i in range(3)]: print(\'| \' + \' | \'.join(row) + \' |\') def available_moves(self): # This method returns a list of available moves (empty spots) pass def empty_squares(self): # This method checks if there are any empty squares left on the board pass def num_empty_squares(self): # This method returns the number of empty squares left on the board pass def make_move(self, square, letter): # This method makes a move on the board pass def is_winner(self, square, letter): # This method checks if the current move is a winning move pass ``` Complete the implementation of the `TicTacToe` class, ensuring that the following methods work correctly: 1. `available_moves`: returns a list of available moves (indices that are still empty). 2. `empty_squares`: returns True if there are any empty squares left on the board. 3. `num_empty_squares`: returns the count of empty squares. 4. `make_move`: places a letter (\'X\' or \'O\') on the board at the specified square and returns True if successful. 5. `is_winner`: checks if the current move creates a winning condition on the board, updating the `current_winner` if there\'s a win. After implementation, describe how your methods ensure that the game is played correctly, considering game flow, rule enforcement, and handling edge cases such as invalid moves and game conclusion states (win or draw).","solution":"class TicTacToe: def __init__(self): self.board = [\' \' for _ in range(9)] # A list to hold the board\'s current state self.current_winner = None # To keep track of the winner def print_board(self): # This method prints the current board state for row in [self.board[i*3:(i+1)*3] for i in range(3)]: print(\'| \' + \' | \'.join(row) + \' |\') def available_moves(self): # This method returns a list of available moves (empty spots) return [i for i, spot in enumerate(self.board) if spot == \' \'] def empty_squares(self): # This method checks if there are any empty squares left on the board return \' \' in self.board def num_empty_squares(self): # This method returns the number of empty squares left on the board return self.board.count(\' \') def make_move(self, square, letter): # This method makes a move on the board, returns True if move is valid, False otherwise if self.board[square] == \' \': self.board[square] = letter if self.is_winner(square, letter): self.current_winner = letter return True return False def is_winner(self, square, letter): # This method checks if the current move is a winning move row_ind = square // 3 row = self.board[row_ind*3 : (row_ind+1)*3] if all([spot == letter for spot in row]): return True col_ind = square % 3 column = [self.board[col_ind+i*3] for i in range(3)] if all([spot == letter for spot in column]): return True if square % 2 == 0: diagonal1 = [self.board[i] for i in [0, 4, 8]] if all([spot == letter for spot in diagonal1]): return True diagonal2 = [self.board[i] for i in [2, 4, 6]] if all([spot == letter for spot in diagonal2]): return True return False"},{"question":"Design a function that takes a string representing a mathematical expression, including integers and the basic operations: addition, subtraction, multiplication, and division. Implement a basic calculator that parses this string and computes the result. The function should handle operator precedence and parentheses properly. Supply the implementation in a language of your choice and provide test cases to validate your solution. Note: You may assume the input is always a valid expression. Example: ```python calculate(\\"3 + 2 * 2\\") # should return 7 calculate(\\" 3/2 \\") # should return 1 calculate(\\" 3 + 5 / 2 \\") # should return 5 calculate(\\"(2+3)*2\\") # should return 10 ```","solution":"def calculate(expression: str) -> int: def evaluate(tokens: list) -> int: stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \'(\': num = evaluate(tokens) if not token.isdigit() or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = int(stack[-1] / num) sign = token num = 0 if token == \')\': break return sum(stack) tokens = [] for char in expression: if char == \' \': continue if char in \'()+-*/\': tokens.append(char) elif tokens and tokens[-1].isdigit(): tokens[-1] += char else: tokens.append(char) return evaluate(tokens)"},{"question":"Given an array of integers `arr` and an integer `k`, your task is to find the maximum average sum of `k` consecutive elements in the array. If the array has fewer than `k` elements, return -1. Your solution must have a time complexity of O(n), where `n` is the length of the array. Examples: Example 1: Input: arr = [1, 12, -5, -6, 50, 3], k = 4 Output: 12.75 Explanation: The subarray [12, -5, -6, 50] has the maximum average sum of (12 + (-5) + (-6) + 50) / 4 = 12.75 Example 2: Input: arr = [5, 5, 5, 5, 5], k = 2 Output: 5.0 Explanation: All subarrays of length 2 have the same average sum of 5.0 Example 3: Input: arr = [1, 2, 3], k = 4 Output: -1 Explanation: The array has fewer than 4 elements. Example 4: Input: arr = [-1, -2, -3, -4, -5], k = 3 Output: -2.0 Explanation: The subarray [-1, -2, -3] has the maximum average sum of (-1 + (-2) + (-3)) / 3 = -2.0 Constraints: * 1 <= arr.length <= 10^5 * -10^4 <= arr[i] <= 10^4 * 1 <= k <= 10^5","solution":"def find_max_average_sum(arr, k): Finds the maximum average sum of k consecutive elements in the array. Parameters: - arr: List[int], the input array of integers. - k: int, number of consecutive elements to consider for the average. Returns: - The maximum average sum of k consecutive elements in the array, or -1 if the array has fewer than k elements. n = len(arr) if n < k: return -1 # Calculate the sum of first \'k\' elements current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window technique to find the max sum of \'k\' consecutive elements for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum / k"},{"question":"Write a function that creates a schedule for a single conference room, given a list of meetings. Each meeting is represented by a tuple with a start and end time. If any of the meetings overlap, your function should return \'Conflict\', otherwise it should return \'No Conflict\'. Additionally, ensure the proposed schedule is a balanced one by checking if the total number of hours of meetings is split as evenly as possible between the first and second half of the day. Meetings: [(9:00, 10:30), (12:00, 13:30), (11:00, 12:30), (14:00, 15:30)]","solution":"def create_schedule(meetings): Given a list of meetings represented by tuples of start and end times, returns \'Conflict\' if any meetings overlap, otherwise \'No Conflict\'. Also ensures the total number of hours of meetings is as balanced as possible between the first and second half of the day. # Helper function to convert time to minutes since 00:00 def time_to_minutes(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes # Convert meeting times to minutes meetings_in_minutes = [(time_to_minutes(start), time_to_minutes(end)) for start, end in meetings] # Sort meetings by start time meetings_in_minutes.sort() # Check for conflicts for i in range(len(meetings_in_minutes) - 1): if meetings_in_minutes[i][1] > meetings_in_minutes[i + 1][0]: return \\"Conflict\\" # Check for balanced schedule first_half_limit = time_to_minutes(\\"12:00\\") first_half_duration = sum(min(end, first_half_limit) - start for start, end in meetings_in_minutes if start < first_half_limit) second_half_duration = sum(end - max(start, first_half_limit) for start, end in meetings_in_minutes if end > first_half_limit) if abs(first_half_duration - second_half_duration) <= 60: return \\"No Conflict\\" else: return \\"Unbalanced\\" # Example usage: meetings = [(\\"09:00\\", \\"10:30\\"), (\\"12:00\\", \\"13:30\\"), (\\"11:00\\", \\"12:30\\"), (\\"14:00\\", \\"15:30\\")] print(create_schedule(meetings)) # Output: Conflict"},{"question":"Write a function to determine the shortest path in a weighted graph. The function will take a graph represented as an adjacency matrix, where the element at the `i`-th row and `j`-th column represents the weight of the edge from vertex `i` to vertex `j` (use a sufficiently large number to represent the absence of an edge). The graph is connected, directed, and may contain cycles. The function should return the shortest distance from the starting vertex to the destination vertex as well as the path taken. Your solution should make use of Dijkstra\'s algorithm and handle graphs with: - Positive edge weights only - At most 1000 vertices The function signature should look like this: ```python def shortest_path(adj_matrix: List[List[int]], start: int, end: int) -> Tuple[int, List[int]]: ``` Where: - `adj_matrix` is the adjacency matrix of the graph. - `start` is the starting vertex index. - `end` is the destination vertex index. - The function returns a tuple where the first element is the shortest distance and the second element is a list of vertices representing the path from `start` to `end`. Ensure your implementation is efficient and handles edge cases such as when the start and end vertices are the same. Additionally, include error handling for invalid inputs. For an additional challenge, modify the function to handle graphs with negative edge weights, while still avoiding negative weight cycles.","solution":"from typing import List, Tuple import heapq def shortest_path(adj_matrix: List[List[int]], start: int, end: int) -> Tuple[int, List[int]]: Uses Dijkstra\'s algorithm to find the shortest path in a weighted graph represented by an adjacency matrix from a start vertex to an end vertex. num_vertices = len(adj_matrix) dist = [float(\'inf\')] * num_vertices dist[start] = 0 prev = [None] * num_vertices priority_queue = [(0, start)] while priority_queue: current_dist, current_vertex = heapq.heappop(priority_queue) if current_dist > dist[current_vertex]: continue for neighbor, weight in enumerate(adj_matrix[current_vertex]): if weight == 0: # There is no edge continue distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance prev[neighbor] = current_vertex heapq.heappush(priority_queue, (distance, neighbor)) # Reconstruct the path path = [] current = end while current is not None: path.insert(0, current) current = prev[current] if dist[end] == float(\'inf\'): return (float(\'inf\'), []) return (dist[end], path)"},{"question":"Write a Python function that takes a list of integers and returns a list of strings representing each integer\'s positional appearance in the list (first, second, third, etc.). If an integer appears multiple times in the list, append the string \\" (duplicate)\\" to its positional appearance. For example, in the list [3, 5, 3, 7], the output should be [\\"first\\", \\"second\\", \\"third (duplicate)\\", \\"fourth\\"]. Test your function with the following list: input_list = [10, 22, 10, 35, 22, 50, 22] Note: If the integer appears for the first time, just return its ordinal position. For subsequent appearances, mark those with \\" (duplicate)\\" and maintain their correct ordinal position (i.e., they should still be labeled with first, second, etc., but with the \\" (duplicate)\\" suffix).","solution":"def positional_appearance(input_list): This function takes a list of integers and returns a list of strings representing each integer\'s positional appearance in the list. If an integer appears multiple times in the list, \\" (duplicate)\\" is appended to its label. Parameters: input_list (list): List of integers Returns: list: List of strings representing each integer\'s positional appearance position_words = [\\"first\\", \\"second\\", \\"third\\", \\"fourth\\", \\"fifth\\", \\"sixth\\", \\"seventh\\", \\"eighth\\", \\"ninth\\", \\"tenth\\", \\"eleventh\\", \\"twelfth\\", \\"thirteenth\\", \\"fourteenth\\", \\"fifteenth\\", \\"sixteenth\\", \\"seventeenth\\", \\"eighteenth\\", \\"nineteenth\\", \\"twentieth\\"] count = {} result = [] for idx, num in enumerate(input_list): if num in count: count[num] += 1 result.append(f\\"{position_words[idx]} (duplicate)\\") else: count[num] = 1 result.append(position_words[idx]) return result input_list = [10, 22, 10, 35, 22, 50, 22] print(positional_appearance(input_list)) # expected output: [\'first\', \'second\', \'third (duplicate)\', \'fourth\', \'fifth (duplicate)\', \'sixth\', \'seventh (duplicate)\']"},{"question":"Create a function that takes as input a string representing a mathematical expression in reversed polish notation (RPN) and returns the calculated result. If the expression is invalid, raise an appropriate error. Ensure your function has robust error handling and validates the input thoroughly. Explain any assumptions or design considerations you made. (Note: Python language is used) ```python def evaluate_rpn(expression): stack = [] operators = {\'+\': lambda y, x: x + y, \'-\': lambda y, x: x - y, \'*\': lambda y, x: x * y, \'/\': lambda y, x: x / y} for token in expression.split(): if token in operators: try: stack.append(operators[token](stack.pop(), stack.pop())) except IndexError: raise ValueError(\\"Invalid expression: not enough operands\\") else: try: stack.append(int(token)) except ValueError: raise ValueError(f\\"Invalid token: {token}\\") if len(stack) != 1: raise ValueError(\\"Invalid expression: too many operands\\") return stack[0] # Example Usage: # print(evaluate_rpn(\\"3 4 + 2 *\\")) # Should output 14 # print(evaluate_rpn(\\"2 3 + 5 /\\")) # Should output 1.0 # Test error handling # print(evaluate_rpn(\\"2 3 + +\\")) # Should raise ValueError # print(evaluate_rpn(\\"3 4 + a *\\")) # Should raise ValueError ```","solution":"def evaluate_rpn(expression): Evaluates a mathematical expression in Reverse Polish Notation (RPN). Parameters: expression (str): A string representing a mathematical expression in RPN. Returns: int/float: The result of the evaluated expression. Raises: ValueError: If the expression is invalid. stack = [] operators = {\'+\': lambda y, x: x + y, \'-\': lambda y, x: x - y, \'*\': lambda y, x: x * y, \'/\': lambda y, x: x / y} for token in expression.split(): if token in operators: try: stack.append(operators[token](stack.pop(), stack.pop())) except IndexError: raise ValueError(\\"Invalid expression: not enough operands\\") else: try: stack.append(float(token)) # Use float to handle division results correctly except ValueError: raise ValueError(f\\"Invalid token: {token}\\") if len(stack) != 1: raise ValueError(\\"Invalid expression: too many operands\\") return stack[0] # Example Usage: # print(evaluate_rpn(\\"3 4 + 2 *\\")) # Should output 14 # print(evaluate_rpn(\\"2 3 + 5 /\\")) # Should output 1.0"},{"question":"Given a grid of size m x n filled with non-negative integers, you are initially positioned at the top-left corner of the grid. You are required to traverse the grid and reach the bottom-right corner. You can only move either down or right at any point in time. Find the minimum sum of the numbers along a path from the top-left to the bottom-right corner of the grid. Write a function `minPathSum(grid: List[List[int]]) -> int` that takes as input a 2D list `grid` of integers representing the grid, and returns an integer that is the minimum sum of all numbers along the path from the top-left corner to the bottom-right corner. For example, given the grid: ``` [[1, 3, 1], [1, 5, 1], [4, 2, 1]] ``` Your function should return 7, since the path 1 → 3 → 1 → 1 → 1 has the minimum sum, which is 7. Constraints: - `1 ≤ m, n ≤ 200` - The grid will have at least one element, meaning it will always be non-empty. - The values in the grid will be non-negative.integrers","solution":"from typing import List def minPathSum(grid: List[List[int]]) -> int: # If grid is empty, return 0 if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first cell with its own value for i in range(1, m): grid[i][0] += grid[i - 1][0] for j in range(1, n): grid[0][j] += grid[0][j - 1] # Fill up the dp table for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]) # Return the value at the bottom-right corner return grid[m - 1][n - 1]"},{"question":"Craft a Python function that processes a list of integers. This function should separate the even and odd numbers into two different lists. Finally, it should return a merged list starting with all the even numbers followed by all the odd numbers. Additionally, ensure that within each even or odd sublist, the numbers are sorted in ascending order. Example: ``` input_list = [10, 23, 45, 18, 2, 33, 50, 41] output = [2, 10, 18, 50, 23, 33, 41, 45] ```","solution":"def separate_and_sort_even_odd(input_list): Separates the input list into even and odd numbers, sorts each sublist and returns a merged list starting with even numbers followed by odd numbers. evens = sorted([num for num in input_list if num % 2 == 0]) odds = sorted([num for num in input_list if num % 2 != 0]) return evens + odds"},{"question":"Write a function to determine whether two given strings are anagrams of each other. An anagram is a word formed by rearranging the letters of a different word, using all the original letters exactly once. Your function should be case-insensitive and ignore spaces. You cannot use any built-in sorting functions. Provide a solution with a time complexity of O(n).","solution":"def are_anagrams(s1, s2): Determines whether two given strings are anagrams of each other. Case-insensitive and ignores spaces. Args: s1: First string. s2: Second string. Returns: True if s1 and s2 are anagrams, False otherwise. def normalize_string(s): return \'\'.join(char.lower() for char in s if char.isalnum()) normalized_s1 = normalize_string(s1) normalized_s2 = normalize_string(s2) if len(normalized_s1) != len(normalized_s2): return False count = {} for char in normalized_s1: if char in count: count[char] += 1 else: count[char] = 1 for char in normalized_s2: if char in count: count[char] -= 1 if count[char] == 0: del count[char] else: return False return len(count) == 0"},{"question":"Write a Python function called `fibonacci_series(n)` that takes in an integer `n` and returns a list of the first `n` numbers in the Fibonacci sequence, starting from 0. For example, `fibonacci_series(5)` should return `[0, 1, 1, 2, 3]`. Ensure that your function handles the case where `n` is 0 or a negative integer by returning an empty list. Include validation to check if the input is a non-negative integer.","solution":"def fibonacci_series(n): Returns a list containing the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate. If n is 0 or a negative integer, returns an empty list. Returns: list: A list of the first n numbers in the Fibonacci sequence. if not isinstance(n, int) or n <= 0: return [] fibonacci = [0, 1] for _ in range(2, n): fibonacci.append(fibonacci[-1] + fibonacci[-2]) return fibonacci[:n]"},{"question":"Write a function that calculates the nth Fibonacci number. However, this time the function should utilize memoization to enhance performance. The Fibonacci sequence is defined as: ``` F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2), for n > 1 ``` Implement the function using a dictionary to store previously computed Fibonacci numbers. Example: ``` fibonacci(10) -> 55 fibonacci(15) -> 610 ```","solution":"def fibonacci(n, memo={}): Calculates the nth Fibonacci number using memoization. Args: n (int): The Fibonacci term to calculate. memo (dict): Dictionary to store previously computed Fibonacci numbers. Returns: int: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Design and implement a function that takes an array of integers and rotates the elements to the right by `k` steps, where `k` is a non-negative integer. Do not use any additional arrays to accomplish this task. [Example: array = [1, 2, 3, 4, 5, 6, 7], k = 3 --> output: [5, 6, 7, 1, 2, 3, 4]]","solution":"def rotate_right(arr, k): Rotates the elements of the array arr to the right by k steps. :param arr: List[int] - the list of integers to be rotated :param k: int - the number of steps to rotate the array to the right :return: void - the array is modified in-place n = len(arr) k = k % n # In case k is greater than the length of the array def reverse(start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 reverse(0, n - 1) # Reverse the entire array reverse(0, k - 1) # Reverse the first k elements reverse(k, n - 1) # Reverse the remaining elements"},{"question":"Write a function in Python that takes a list of integers as input and returns the length of the longest contiguous subarray with an equal number of even and odd numbers.","solution":"def longest_even_odd_subarray(arr): Returns the length of the longest contiguous subarray with an equal number of even and odd numbers. prefix_sum = {0: -1} # Dictionary to store prefix sums and their first occurrence indices max_length = 0 sum_even_odd = 0 for i in range(len(arr)): if arr[i] % 2 == 0: sum_even_odd += 1 else: sum_even_odd -= 1 if sum_even_odd in prefix_sum: max_length = max(max_length, i - prefix_sum[sum_even_odd]) else: prefix_sum[sum_even_odd] = i return max_length"},{"question":"將以下的特定Python程式碼範例改寫為使用自定義例外處理的形式，以確保在遇到零除錯誤時能給出適當的提示訊息。 def divide_numbers(dividend, divisor): result = dividend / divisor return result","solution":"class DivisionByZeroError(Exception): Custom exception for handling division by zero errors. pass def divide_numbers(dividend, divisor): if divisor == 0: raise DivisionByZeroError(\\"Cannot divide by zero.\\") result = dividend / divisor return result"},{"question":"Write a function named \'convert_to_base\' that converts a given decimal integer to its representation in a specified base (between 2 and 16). The function should take two parameters, \'number\' which is a non-negative integer, and \'base\' which is an integer representing the desired base. Ensure to handle invalid inputs where the base is outside the range 2 to 16 or the number is negative. The function should return the converted number as a string. Example: def convert_to_base(number: int, base: int) -> str: convert_to_base(345, 2) should return \'101011001\' convert_to_base(345, 16) should return \'159\' convert_to_base(345, 8) should return \'531\' Ensure your solution handles edge cases, such as the smallest and largest accepted values for \'number\' and \'base\'.","solution":"def convert_to_base(number: int, base: int) -> str: Converts a given decimal integer to its representation in a specified base (between 2 and 16). Parameters: number (int): The non-negative integer to be converted. base (int): The base to convert to. It should be between 2 and 16. Returns: str: The converted number as a string. if number < 0: raise ValueError(\\"The number must be non-negative.\\") if base < 2 or base > 16: raise ValueError(\\"The base must be between 2 and 16.\\") if number == 0: return \\"0\\" base_digits = \\"0123456789ABCDEF\\" result = [] while number > 0: remainder = number % base result.append(base_digits[remainder]) number //= base result.reverse() return \'\'.join(result)"},{"question":"Create a function that reads an entire CSV file, processes the data, and finds the average value of a specified column. The function should also handle missing or malformed data gracefully by skipping over invalid entries and logging the issue for debug purposes. Write code to handle the following CSV file and calculate the average value in the \'price\' column: CSV File: ``` id,product,price,quantity 1,apple,0.50,10 2,orange,0.75,5 3,banana,,8 4,pear,1.00,12 5,grape,malformed,15 6,apple,0.60, ``` Output the average price, and ensure proper error handling.","solution":"import csv import logging # Configure logging logging.basicConfig(level=logging.DEBUG, format=\'%(asctime)s - %(levelname)s - %(message)s\') def calculate_average_price(csv_filename, column_name=\'price\'): total_price = 0.0 valid_entries = 0 with open(csv_filename, mode=\'r\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: try: price = float(row[column_name]) total_price += price valid_entries += 1 except (ValueError, KeyError) as e: logging.debug(f\\"Skipping row due to error: {e} - Row data: {row}\\") if valid_entries == 0: raise ValueError(\\"No valid entries found for the specified column\\") average_price = total_price / valid_entries return average_price"},{"question":"You are given an array of integers where each element represents the maximum number of steps that can be jumped going forward from that element. Write a function to return the minimum number of jumps needed to reach the last element of the array starting from the first element. If it is not possible to reach the last element, return -1. Function Signature: `def min_jumps(arr: List[int]) -> int:` **Constraints:** - You can assume that you always end up at the last element even if it is not explicitly stated in the problem statement. - The input array will have at least one element. - The input array will contain positive integers only. # Example For the array `[2, 3, 1, 1, 4]`, the function should return `2` because the minimum number of jumps to reach the end are as follows: - Jump 1 step from index `0` to `1` (2 -> 3) - Jump 3 steps from index `1` to `4` (end of the array) For the array `[1, 1, 1, 1, 1]`, the function should return `4` because you need to jump one step at a time to reach the end. # Hint Think about using a greedy algorithm to achieve the optimal solution. Maintain two pointers, one to track the maximum reach and the other to count the jumps.","solution":"from typing import List def min_jumps(arr: List[int]) -> int: if len(arr) == 1: return 0 max_reach = arr[0] step = arr[0] jumps = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jumps max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jumps += 1 step = max_reach - i if step <= 0: return -1 return -1"},{"question":"Create a function `merge_sorted_arrays` that takes in two sorted lists of integers, `list_a` and `list_b`, and returns a new sorted list containing all elements from both lists. Ensure that the resulting list maintains the sorted order without using any built-in sorting functions. You should also handle cases where one or both of the lists are empty. Include a few example test cases to demonstrate the function\'s effectiveness.","solution":"def merge_sorted_arrays(list_a, list_b): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 while i < len(list_a) and j < len(list_b): if list_a[i] < list_b[j]: merged_list.append(list_a[i]) i += 1 else: merged_list.append(list_b[j]) j += 1 # Add remaining elements from list_a, if any while i < len(list_a): merged_list.append(list_a[i]) i += 1 # Add remaining elements from list_b, if any while j < len(list_b): merged_list.append(list_b[j]) j += 1 return merged_list"},{"question":"Write a Python function named `count_words` that takes a string as input and returns a dictionary where the keys are the unique words in the string and the values are the counts of each word. The function should ignore case and punctuation. Demonstrate your solution with the input `\\"Hello, world! Hello Python programmers.\\"`.","solution":"import re from collections import Counter def count_words(text): Returns a dictionary where the keys are the unique words in the string `text` and the values are the counts of each word. The function ignores case and punctuation. # Convert the text to lowercase text = text.lower() # Remove punctuation using regular expressions text = re.sub(r\'[^ws]\', \'\', text) # Split the text into words words = text.split() # Count the words using Counter from collections word_count = Counter(words) return dict(word_count) # Demonstrating with the provided input example_text = \\"Hello, world! Hello Python programmers.\\" print(count_words(example_text)) # Output should be {\'hello\': 2, \'world\': 1, \'python\': 1, \'programmers\': 1}"},{"question":"A company\'s customer satisfaction survey results are reported to follow a normal distribution. The z-score of one customer\'s rating is calculated to be 1.5. How would you interpret this z-score in the context of the customer\'s rating? Does it imply that the customer\'s rating is 1.5 points higher than the average, 1.5 standard deviations above the mean rating, or that the rating is within the top 1.5% of all ratings?","solution":"def interpret_z_score(z_score): Interprets the given z-score in the context of customer rating. :param z_score: float, the z-score of the customer\'s rating :return: string, explanation of the z-score implies that the customer\'s rating is 1.5 standard deviations above the mean rating if z_score == 1.5: return \\"The customer\'s rating is 1.5 standard deviations above the mean rating.\\" else: return \\"This function specifically interprets a z-score of 1.5.\\""},{"question":"Design a function that returns a list of prime numbers up to a given integer n using the Sieve of Eratosthenes method. The function should be optimized for efficiency and avoid redundant calculations. Make sure to handle edge cases, such as n being less than 2. Additionally, write appropriate docstring and use type hints to specify input and output types. For illustration, display what the function returns for n = 10, n = 30, and n = 50. ```python def sieve_of_eratosthenes(n: int) -> list: Returns a list of prime numbers up to a given integer n using the Sieve of Eratosthenes method. The function should handle edge cases where n is less than 2 by returning an empty list. The implementation should be optimized to avoid redundant calculations using boolean flags. :param n: The upper limit of the range to find prime numbers within. :type n: int :return: A list of prime numbers up to n. :rtype: list >>> sieve_of_eratosthenes(10) [2, 3, 5, 7] >>> sieve_of_eratosthenes(30) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] >>> sieve_of_eratosthenes(50) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] if n < 2: return [] sieve = [True] * (n+1) p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n+1, p): sieve[i] = False p += 1 return [p for p in range(2, n+1) if sieve[p]] ```","solution":"def sieve_of_eratosthenes(n: int) -> list: Returns a list of prime numbers up to a given integer n using the Sieve of Eratosthenes method. The function should handle edge cases where n is less than 2 by returning an empty list. The implementation should be optimized to avoid redundant calculations using boolean flags. :param n: The upper limit of the range to find prime numbers within. :type n: int :return: A list of prime numbers up to n. :rtype: list >>> sieve_of_eratosthenes(10) [2, 3, 5, 7] >>> sieve_of_eratosthenes(30) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] >>> sieve_of_eratosthenes(50) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] if n < 2: return [] sieve = [True] * (n + 1) p = 2 while p * p <= n: if sieve[p]: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return [p for p in range(2, n + 1) if sieve[p]]"},{"question":"Olivia needs 350 beads to complete her bracelet project. She currently has 200 beads in her collection. If she buys packs of beads, each containing 25 beads, how many packs does Olivia need to buy to have exactly enough beads for her project?","solution":"def calculate_packs_needed(total_required, current_beads, pack_size): This function calculates the number of bead packs needed. total_required: int - Total beads required for the project current_beads: int - Beads currently available pack_size: int - Number of beads in one pack Returns: int - Number of whole packs needed to buy beads_needed = total_required - current_beads packs_needed = (beads_needed + (pack_size - 1)) // pack_size # Ceiling division return packs_needed # Olivia\'s specific case def olivia_beads_packs(): return calculate_packs_needed(350, 200, 25)"},{"question":"Create a function in programming language syntax that receives a list of integers as input and returns a new list where each element is the product of all other elements except itself in the original list, without using division. def product_except_self(nums: List[int]) -> List[int]: The function accepts a list of integers nums and returns a new list where each element at index i is the product of all the elements in the original array except nums[i]. This must be achieved without using the division operator. >>> product_except_self([1, 2, 3, 4]) [24, 12, 8, 6] >>> product_except_self([0, 0]) [0, 0] >>> product_except_self([1, 2, 0, 4]) [0, 0, 8, 0]","solution":"def product_except_self(nums): Returns a list where each element at index i is the product of all the elements in the original array except nums[i]. Args: nums (list): List of integers. Returns: list: A list of products. length = len(nums) result = [1] * length prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] suffix = 1 for i in range(length - 1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"In Python, write a function that takes a list of integers and returns a list where each integer is replaced by the product of all the integers in the original list except the integer at that position. For instance, given the list [1, 2, 3, 4], the function should return [24, 12, 8, 6] because: - 24 = 2 * 3 * 4 (product of all integers except 1) - 12 = 1 * 3 * 4 (product of all integers except 2) - 8 = 1 * 2 * 4 (product of all integers except 3) - 6 = 1 * 2 * 3 (product of all integers except 4)","solution":"def product_except_self(nums): Given a list of integers, this function returns a list where each integer is replaced by the product of all the integers in the original list except the integer at that position. length = len(nums) if length == 0: return [] result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a Python function that takes a string and a character as inputs, and returns a list of all the indices where the character appears in the string. If the character does not appear in the string, return an empty list. Ensure that the function is case-sensitive.","solution":"def find_indices(string, char): Find all indices of \'char\' in \'string\'. Args: string (str): The input string to search. char (str): The character to find in the string. Returns: List[int]: A list of indices where \'char\' appears in \'string\'. return [i for i, c in enumerate(string) if c == char]"},{"question":"Write a function to implement the LRU (Least Recently Used) cache eviction policy. The cache should support the following operations: `put(key, value)` which sets or inserts the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. The method `get(key)` should return the value if the key exists in the cache, otherwise return -1. Both operations should be performed in O(1) time complexity, and the cache should be able to handle up to 10^5 operations. In addition to implementing the LRU cache, write comprehensive unit tests to validate the behavior of the cache with different patterns of `put` and `get` operations. Ensure that edge cases such as accessing non-existent keys and overwriting existing keys are properly handled.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"Given a list of integers, write a function that moves all occurrences of a specific target integer to the end of the list while maintaining the relative order of the other elements. Do not use additional lists or collections; modify the list in place. For example, given the list `lst = [3, 1, 2, 3, 4, 3, 5]` and the target integer `3`, the output should be `[1, 2, 4, 5, 3, 3, 3]`. Here\'s the function signature: ```python def move_target_to_end(lst, target): # Your code here # Example usage: lst = [3, 1, 2, 3, 4, 3, 5] move_target_to_end(lst, 3) print(lst) # Output should be: [1, 2, 4, 5, 3, 3, 3] ``` Ensure your solution is efficient with a time complexity of O(n).","solution":"def move_target_to_end(lst, target): Moves all occurrences of the `target` integer to the end of the list while maintaining the relative order of the other elements, modifying the list in place. Parameters: lst (list of int): The list of integers. target (int): The target integer to move to the end. Returns: None n = len(lst) last_non_target_index = 0 # Iterate through the list and move non-target elements to the front for i in range(n): if lst[i] != target: lst[last_non_target_index] = lst[i] last_non_target_index += 1 # Fill the rest of the list with the target value for i in range(last_non_target_index, n): lst[i] = target"},{"question":"Write a function that takes an integer array and returns a new array containing only the even numbers from the original array, sorted in ascending order. The function should also handle edge cases where the input array might be empty or have no even numbers at all. Demonstrate the functionality of your program with at least two example inputs.","solution":"def filter_and_sort_even_numbers(arr): Returns a new array containing only the even numbers from the original array, sorted in ascending order. Parameters: - arr: List[int] - The input array of integers Returns: - List[int] - The list containing only even numbers sorted in ascending order if not arr: return [] even_numbers = [num for num in arr if num % 2 == 0] even_numbers.sort() return even_numbers"},{"question":"Write a Python function that takes a list of integers as input and returns a new list where each integer is replaced by the product of all other integers in the original list, excluding the current integer. Additionally, discuss the time complexity of your solution and suggest optimizations if any.","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the input list. Args: nums: List of integers Returns: List of integers if not nums: return [] length = len(nums) result = [1] * length prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] suffix = 1 for i in range(length-1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Write a function that accepts a string representing a mathematical expression consisting of positive integers, addition, and multiplication (e.g., \\"3+5*2\\"). The function should evaluate the expression by considering the correct order of operations (multiplication before addition) and return the result as an integer.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of positive integers, addition, and multiplication. The function respects the order of operations (multiplication before addition). Args: expression (str): The input mathematical expression as a string. Returns: int: The result of the evaluated expression. def parse_term(term): parts = term.split(\'*\') result = 1 for part in parts: result *= int(part) return result terms = expression.split(\'+\') result = 0 for term in terms: result += parse_term(term) return result"},{"question":"Write a function that takes a string as input and returns the length of the longest substring without repeating characters. The function should consider both uppercase and lowercase characters as distinct. Example: ``` Input: \\"abcabcbb\\" Output: 3 // The answer is \\"abc\\", with the length of 3. Input: \\"pwwkew\\" Output: 3 // The answer is \\"wke\\", with the length of 3. Input: \\"bbbbb\\" Output: 1 // The answer is \\"b\\", with the length of 1. ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. chars_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in chars_map: left = max(left, chars_map[char] + 1) chars_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function that takes a list of integers and an integer threshold as inputs, and removes the smallest number of integers from the list so that every remaining integer is greater than or equal to the threshold. If it is not possible to achieve this, the function should return an empty list. The output should be the adjusted list. Example: Suppose the input list is [1, 3, 5, 7, 9] and the threshold is 4. The function should return [5, 7, 9] since removing 1 and 3 would make all remaining integers 4 or higher. If the input list is [1, 2, 2, 1] and the threshold is 3, since there are no integers greater than or equal to 3, the function should return an empty list.","solution":"def filter_by_threshold(nums, threshold): Filters the list such that all remaining integers are greater than or equal to the threshold. If it is not possible, returns an empty list. Parameters: nums (list of int): The list of integers to filter. threshold (int): The threshold value. Returns: list of int: A list containing elements greater than or equal to the threshold. # Filter out the values less than the threshold result = [num for num in nums if num >= threshold] # Check if the result is non-empty if result: return result else: return []"},{"question":"Design a function that accepts a string and identifies the longest substring which contains at most two distinct characters. The function should return this longest substring. If there are multiple substrings with the same length, return the first occurrence. For example, given the input \\"abcbbbbcccbdddadacb\\", the output should be \\"bcbbbbcccb\\".","solution":"def longest_substring_with_2_distinct_chars(s): Function to find the longest substring containing at most two distinct characters. n = len(s) if n < 3: return s left = 0 right = 0 hashmap = {} max_len = 2 max_substring = s[0:2] while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 if right - left > max_len: max_len = right - left max_substring = s[left:right] return max_substring"},{"question":"Write a Python function that takes a list of integers and a target sum as arguments, and returns a tuple of two distinct numbers from the list that add up to the target sum. If no such pair exists, return an empty tuple. Example: lst = [2, 7, 11, 15] target = 9 Expected Output: (2, 7)","solution":"def find_pair_with_sum(lst, target): Returns a tuple of two distinct numbers from the list that add up to the target sum. If no such pair exists, returns an empty tuple. seen = set() for num in lst: complement = target - num if complement in seen: return (complement, num) seen.add(num) return ()"},{"question":"Write a function that takes a string containing a mathematical expression (consisting of non-negative integers and the operators +, -, *, /) and returns its evaluated result as an integer. The division operator should be integer division. Assume the input string is always a valid expression and does not contain parentheses. # Requirements 1. Your function should accept a single string argument. 2. The operators +, -, *, / should be applied following the precedence order (i.e., *, / have higher precedence than +, -). 3. You should consider left-to-right associativity for the operators with the same precedence. # Example ```python evaluate_expression(\\"3+2*2\\") # Output: 7 evaluate_expression(\\" 3/2 \\") # Output: 1 evaluate_expression(\\" 3+5 / 2 \\") # Output: 5 ``` Implement the function and ensure it handles a variety of edge cases such as different spacings and all operator types.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression provided as a string and returns the integer result. The expression contains non-negative integers and operators +, -, *, /. def apply_operator(operators, operands): operator = operators.pop() b = operands.pop() a = operands.pop() if operator == \'+\': operands.append(a + b) elif operator == \'-\': operands.append(a - b) elif operator == \'*\': operands.append(a * b) elif operator == \'/\': operands.append(a // b) # Integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 # Tokenize the input expression tokens = [] i, n = 0, len(expression) while i < n: if expression[i] == \' \': i += 1 elif expression[i] in \'+-*/\': tokens.append(expression[i]) i += 1 else: num = 0 while i < n and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 tokens.append(num) # Shunting-yard algorithm to convert to postfix notation operands = [] operators = [] for token in tokens: if isinstance(token, int): operands.append(token) else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, operands) operators.append(token) while operators: apply_operator(operators, operands) return operands[0]"},{"question":"The provided Python function `reverse_string` is intended to reverse a given string. Despite its purpose, the function doesn\'t accomplish the task correctly. Analyze the code to identify and fix the issues. Additionally, modify the function to handle edge cases such as empty strings and strings containing only whitespaces. Faulty Code: ``` def reverse_string(s): reversed = \\"\\" for i in s: reversed = i + reversed return reversed # Test cases print(reverse_string(\\"hello\\")) # Expected output: \\"olleh\\" print(reverse_string(\\"python\\")) # Expected output: \\"nohtyp\\" print(reverse_string(\\"\\")) # Expected output: \\"\\" print(reverse_string(\\" \\")) # Expected output: \\" \\" ``` Your solution should correct the logic of the function and ensure that it performs correctly on all input cases, including the given test cases.","solution":"def reverse_string(s): Reverses the given string and handles edge cases such as empty strings and strings containing only whitespaces. return s[::-1]"},{"question":"Implement a function to evaluate a postfix expression (also known as Reverse Polish notation). The function should take as input a list of strings, each string being either an operand (integer) or an operator (\'+\', \'-\', \'*\', \'/\'). It should return the result of the expression as an integer. Note that division should truncate towards zero. **Example:** ``` Input: [\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"] Output: 9 Explanation: ((2 + 1) * 3) = 9 Input: [\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"] Output: 6 Explanation: (4 + (13 / 5)) = 6 Input: [\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"] Output: 22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5) = 22 ```","solution":"def evalRPN(tokens): Evaluate the value of an arithmetic expression in Reverse Polish Notation (postfix notation). Args: tokens (List[str]): List of strings representing the postfix expression. Returns: int: The result of the expression. stack = [] for token in tokens: if token in (\'+\', \'-\', \'*\', \'/\'): b = int(stack.pop()) a = int(stack.pop()) if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # int(a / b) truncates towards zero in Python 3 stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"Given an array of integers `arr`, find the length of the longest arithmetic subsequence in `arr`. An arithmetic sequence is defined as a sequence of numbers with the same difference between consecutive terms. You need to return the length of the longest arithmetic subsequence found. For example, if the array `[3, 6, 9, 12]` is given, the longest arithmetic subsequence is the entire array itself since the difference between each consecutive term is `3`. However, if the array `[9, 4, 7, 2, 10]` is given, the longest arithmetic subsequence is `[4, 7, 10]` with a difference of `3`, resulting in a length of `3`. # Template: ```python def longest_arith_seq_length(arr): if not arr: return 0 dp = {} longest_length = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): diff = arr[j] - arr[i] dp[(j, diff)] = dp.get((i, diff), 1) + 1 longest_length = max(longest_length, dp[(j, diff)]) return longest_length ``` # Example 1: Input: `arr = [3, 6, 9, 12]` Output: `4` # Example 2: Input: `arr = [9, 4, 7, 2, 10]` Output: `3` # Example 3: Input: `arr = [20, 1, 15, 3, 10, 5, 8]` Output: `4` # Constraints: - `2 <= arr.length <= 1000` - `0 <= arr[i] <= 500`","solution":"def longest_arith_seq_length(arr): if not arr: return 0 dp = {} longest_length = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): diff = arr[j] - arr[i] dp[(j, diff)] = dp.get((i, diff), 1) + 1 longest_length = max(longest_length, dp[(j, diff)]) return longest_length"},{"question":"Write a Python function that takes a list of integers as an input and returns a tuple with two elements: the first element is the list of all positive integers sorted in ascending order, and the second element is the product of all the negative integers in the list. The function should handle possible exceptions such as an empty list input or a list without any negative numbers. Provide test cases to validate the function’s correctness.","solution":"def process_integers(integers): Processes a list of integers and returns a tuple: - A list of all positive integers sorted in ascending order. - The product of all negative integers. Parameters: integers (list): A list of integers. Returns: tuple: A tuple with a sorted list of positive integers and the product of negative integers. if not integers: return ([], 0) positives = sorted([num for num in integers if num > 0]) negatives = [num for num in integers if num < 0] negative_product = 1 for num in negatives: negative_product *= num if not negatives: negative_product = 0 return (positives, negative_product)"},{"question":"Create a Python function that processes a list of integers and returns two lists: one containing the square of all even numbers and another containing the cube of all odd numbers from the input list. Implement error handling to manage potential issues, such as non-integer items in the list.","solution":"def process_numbers(numbers): Processes a list of integers and returns two lists: one containing the square of all even numbers and another containing the cube of all odd numbers from the input list. Raises ValueError if any item in the list is not an integer. :param numbers: list of integers :return: tuple (list of squares of even numbers, list of cubes of odd numbers) if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"All items in the list must be integers.\\") even_squares = [n**2 for n in numbers if n % 2 == 0] odd_cubes = [n**3 for n in numbers if n % 2 != 0] return even_squares, odd_cubes"},{"question":"Write a function that takes a positive integer as an input and returns a list of all prime numbers less than the given number. A prime number is only divisible by 1 and itself, and must be greater than 1. Integer input= 10 Expected output= [2, 3, 5, 7]","solution":"def primes_less_than(n): Returns a list of all prime numbers less than n. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a Python function that takes a list of integers and finds the length of the longest subsequence such that every adjacent element in the subsequence has a difference of either 1 or -1.","solution":"def longest_subsequence(arr): This function finds the length of the longest subsequence such that every adjacent element in the subsequence has a difference of either 1 or -1. :param arr: List of integers :return: Length of the longest subsequence with adjacent elements differing by 1 or -1 if not arr: return 0 longest_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_length += 1 else: longest_length = max(longest_length, current_length) current_length = 1 return max(longest_length, current_length)"},{"question":"從列表中的每個字符串中反轉字符順序並計算其長度。 words = [\\"hello\\", \\"world\\", \\"python\\"]","solution":"def reverse_and_length(words): Reverse the characters in each string from the given list and return a list of tuples containing the reversed string and its length. :param words: List of strings :return: List of tuples (reversed_string, length) return [(word[::-1], len(word)) for word in words]"},{"question":"Write a function that checks if a given string is a valid hexadecimal color code. A hexadecimal color code starts with a \\"#\\" followed by exactly 6 characters, which can be digits (0-9) or letters (A-F, a-f). The function should return `True` if the string is a valid hexadecimal color code, and `False` otherwise. **Example:** ```python def is_valid_hex_color(code: str) -> bool: pass # Example Usage: print(is_valid_hex_color(\\"#1A2B3C\\")) # Should return True print(is_valid_hex_color(\\"#1G2B3C\\")) # Should return False print(is_valid_hex_color(\\"123456\\")) # Should return False print(is_valid_hex_color(\\"#12345\\")) # Should return False ```","solution":"import re def is_valid_hex_color(code: str) -> bool: Checks if the given string is a valid hexadecimal color code. A valid hexadecimal color code starts with a \\"#\\" followed by exactly 6 characters, which can be digits (0-9) or letters (A-F, a-f). Args: code (str): The string to check. Returns: bool: True if the string is a valid hexadecimal color code, False otherwise. pattern = r\\"^#[0-9A-Fa-f]{6}\\" if re.match(pattern, code): return True return False"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, if the resulting list of prime numbers is empty, return a message indicating that no prime numbers were found. Input: [4, 6, 8, 13, 15, 23, 25] Output: [13, 23] Input: [4, 6, 8, 10, 12, 14] Output: \\"No prime numbers found\\"","solution":"def is_prime(num): Helper function to check if a number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(numbers): Takes a list of integers and returns a new list containing only the prime numbers from the original list. If no primes are found, it returns a message indicating this. primes = [num for num in numbers if is_prime(num)] return primes if primes else \\"No prime numbers found\\""},{"question":"Write a Python function that takes a string containing both numbers and letters, and returns a new string where all the letters are shifted by one position in the alphabet (with \'z\' wrapping around to \'a\') and all the digits are replaced by their successor (with \'9\' wrapping around to \'0\'). Non-alphanumeric characters should remain unchanged. For example, if the input is \\"hello123\\", the output should be \\"ifmmp234\\".","solution":"def shift_string(s): Shifts each letter in the string by one position in the alphabet and each digit by its successor. Non-alphanumeric characters remain unchanged. shifted_str = [] for char in s: if char.isalpha(): if char == \'z\': shifted_str.append(\'a\') elif char == \'Z\': shifted_str.append(\'A\') else: shifted_str.append(chr(ord(char) + 1)) elif char.isdigit(): if char == \'9\': shifted_str.append(\'0\') else: shifted_str.append(str(int(char) + 1)) else: shifted_str.append(char) return \'\'.join(shifted_str)"},{"question":"Write a function that takes a list of integers and returns a new list containing only the numbers that are both even and divisible by 3. For example, if the input is [15, 24, 40, 33, 36, 45, 90], the function should return [24, 36, 90].","solution":"def filter_even_and_divisible_by_3(nums): Returns a list of numbers that are both even and divisible by 3. Parameters: nums (list): A list of integers. Returns: list: A list containing numbers that are both even and divisible by 3. return [num for num in nums if num % 2 == 0 and num % 3 == 0]"},{"question":"Implement a function that takes a string representation of a mathematical expression and returns the evaluated result. The expression will only contain non-negative integers, addition (\'+\'), subtraction (\'-\'), multiplication (\'*\'), and division (\'/\'). The expression must be handle operator precedence correctly. For example, given the input string \\"3+5*2-10/2\\", the function should return 8 as the result. Note: - Division should be integer division, discarding any floating-point result. - You may assume that the input string is always valid and contains at least one number. No parentheses or other operators will be used. - Do not use any built-in `eval` function for evaluation. Write your own parser to handle the operator precedence. Function signature: ```python def evaluate_expression(expression: str) -> int: # Your code here # Example usage: expression = \\"3+5*2-10/2\\" result = evaluate_expression(expression) # Output should be 8 ```","solution":"def evaluate_expression(expression: str) -> int: def parse_term(expression, idx): num = 0 while idx < len(expression) and expression[idx].isdigit(): num = num * 10 + int(expression[idx]) idx += 1 return num, idx def apply_operator(left_val, operator, right_val): if operator == \'+\': return left_val + right_val elif operator == \'-\': return left_val - right_val elif operator == \'*\': return left_val * right_val elif operator == \'/\': return left_val // right_val def parse_expression(expression): idx = 0 current_val, idx = parse_term(expression, idx) while idx < len(expression): operator = expression[idx] idx += 1 next_val, idx = parse_term(expression, idx) if idx < len(expression): next_op = expression[idx] if next_op in \'*/\' and operator in \'+-\': while idx < len(expression) and next_op in \'*/\': next_operator = next_op idx += 1 further_val, idx = parse_term(expression, idx) next_val = apply_operator(next_val, next_operator, further_val) if idx < len(expression): next_op = expression[idx] current_val = apply_operator(current_val, operator, next_val) return current_val return parse_expression(expression)"},{"question":"Design and implement two related functions `valid_brackets` and `longest_valid_brackets_substring`. Here are the key requirements for each function: - `valid_brackets`: This recursive function should check if the given string (up to 300 characters) consisting only of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is balanced in terms of brackets. A valid bracket sequence follows the rule that each opening bracket has a corresponding closing bracket in the correct order. - `longest_valid_brackets_substring`: This function should find and return the longest substring of the given string that is a valid bracket sequence. It should use the `valid_brackets` function as a helper to verify the validity of the substring. The implementation should not use any additional libraries or modules. Additionally, demonstrate the use of your functions using the provided examples. Test Examples: - `valid_brackets(\\"((){})\\")` should return `True`. - `valid_brackets(\\"([)]\\")` should return `False`. - `longest_valid_brackets_substring(\\"(())\\")` should return `(())`. - `longest_valid_brackets_substring(\\"()(()\\")` should return `()`. Here is a code sample for this exercise: ```python def valid_brackets(string: str) -> bool: Recursive function to check if a string has valid brackets pass def longest_valid_brackets_substring(string: str) -> str: Function to find the longest valid brackets substring pass ``` Remember, you should not use any additional libraries or modules, and ensure you handle edge cases efficiently.","solution":"def valid_brackets(string: str) -> bool: def check(s, opening=\\"([{\\", closing=\\")]}\\", match=dict(zip(\\"([{\\", \\")]}\\"))): stack = [] for char in s: if char in opening: stack.append(char) elif char in closing: if not stack or match[stack.pop()] != char: return False return not stack return check(string) def longest_valid_brackets_substring(string: str) -> str: n = len(string) max_len = 0 start_index = 0 dp = [0] * n for i in range(1, n): if string[i] == \')\': if i - dp[i-1] - 1 >= 0 and string[i - dp[i-1] - 1] == \'(\': dp[i] = dp[i-1] + 2 + (dp[i - dp[i-1] - 2] if i - dp[i-1] - 2 >= 0 else 0) if dp[i] > max_len: max_len = dp[i] start_index = i - dp[i] + 1 elif string[i] == \'}\': if i - dp[i-1] - 1 >= 0 and string[i - dp[i-1] - 1] == \'{\': dp[i] = dp[i-1] + 2 + (dp[i - dp[i-1] - 2] if i - dp[i-1] - 2 >= 0 else 0) if dp[i] > max_len: max_len = dp[i] start_index = i - dp[i] + 1 elif string[i] == \']\': if i - dp[i-1] - 1 >= 0 and string[i - dp[i-1] - 1] == \'[\': dp[i] = dp[i-1] + 2 + (dp[i - dp[i-1] - 2] if i - dp[i-1] - 2 >= 0 else 0) if dp[i] > max_len: max_len = dp[i] start_index = i - dp[i] + 1 return string[start_index:start_index + max_len]"},{"question":"Create a function that takes a list of student records, where each record is a tuple containing the student\'s name, their GPA (Grade Point Average), and the number of completed credits. The function should return a list of student names who have completed 120 or more credits, sorted by their GPA in descending order. If two students have the same GPA, they should be listed in alphabetical order by their names. The list of student records is as follows: students = [(\'Alice Johnson\', 3.6, 130), (\'Bob Smith\', 3.9, 115), (\'Carol White\', 3.7, 140), (\'Dave Brown\', 3.9, 120)]","solution":"def eligible_students(students): Returns a list of student names who have completed 120 or more credits, sorted by their GPA in descending order. If two students have the same GPA, they are listed in alphabetical order by their names. eligible = [student for student in students if student[2] >= 120] sorted_eligible = sorted(eligible, key=lambda x: (-x[1], x[0])) return [student[0] for student in sorted_eligible] # Example usage: students = [(\'Alice Johnson\', 3.6, 130), (\'Bob Smith\', 3.9, 115), (\'Carol White\', 3.7, 140), (\'Dave Brown\', 3.9, 120)] print(eligible_students(students)) # Output: [\'Dave Brown\', \'Carol White\', \'Alice Johnson\']"},{"question":"Implement a function in Python that reads a string containing a mathematical expression involving addition and multiplication. The function should calculate and return the result of the expression, ensuring that multiplication has higher precedence than addition. For example, given the string \\"2+3*4+1\\", the function should return 15.","solution":"def calculate_expression(expression): Evaluates a mathematical expression from a string input where multiplication has higher precedence over addition. Args: expression: str - A string representing the mathematical expression. Returns: int - The result of evaluating the expression. if not expression: return 0 # Split by addition first terms = expression.split(\'+\') result = 0 # Evaluate each term individually for term in terms: if \'*\' in term: factors = map(int, term.split(\'*\')) product = 1 for factor in factors: product *= factor result += product else: result += int(term) return result"},{"question":"Write a Python function that receives a list of integers and returns a new list where each element is the sum of all elements in the original list excluding the element at the corresponding index. For example, given the list [1, 2, 3, 4], the function should return [9, 8, 7, 6].","solution":"def sum_excluding_self(nums): Given a list of integers, returns a list where each element is the sum of all other elements excluding the one at the corresponding index. Args: nums (list): A list of integers. Returns: list: A new list where each element is the sum of all other elements. total_sum = sum(nums) return [total_sum - num for num in nums]"},{"question":"Write a function `intersect_arrays` that takes two lists of integers as input and returns a list of integers that represent their intersection, i.e., the numbers that appear in both lists. Ensure the result does not contain any duplicate values. The order of the elements in the output list does not matter. # Input - Two lists of integers, `list1` and `list2`. Each list may contain any number of integers, including zero. # Output - A list of integers representing the intersection of `list1` and `list2`. # Constraints - Elements within each list are unique. - The length of each list will not exceed 10^3. # Example ```python assert intersect_arrays([1, 2, 3], [3, 4, 5]) == [3] assert intersect_arrays([10, 20, 30], [40, 50, 60]) == [] assert intersect_arrays([1, 2, 2, 3], [2, 3, 4]) == [2, 3] ``` # Explanation In the first example, the only common element between the two lists is 3. In the second example, there are no common elements, so the result is an empty list. In the third example, list1 contains the elements 1, 2, 2, and 3, and list2 contains 2, 3, and 4. The common elements are 2 and 3. Note that the output should not have duplicate values.","solution":"def intersect_arrays(list1, list2): Returns a list of integers that are common in both input lists. The result does not contain any duplicate values. set1 = set(list1) set2 = set(list2) return list(set1 & set2)"},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary where the key is the integer and the value is the number of times that integer appears in the list. If an integer appears only once, it should not be included in the dictionary.","solution":"def count_integers(lst): Returns a dictionary where the keys are the integers from the list and the values are the number of times each integer appears in the list. Integers that appear only once are not included in the dictionary. from collections import Counter counter = Counter(lst) result = {k: v for k, v in counter.items() if v > 1} return result"},{"question":"Can you create a Python function named `reverse_string` that prints the reverse of a given string? The function should accept a string as an argument, reverse the string, and print the result using the `print` function. For instance, calling `reverse_string(\\"hello\\")` should output \\"olleh\\".","solution":"def reverse_string(s): Prints the reverse of the given string s. reversed_string = s[::-1] print(reversed_string)"},{"question":"Write a function in Python that takes a list of integers and returns the two numbers that subtract to give the smallest absolute difference. If there are multiple pairs, return any one pair. Your function should have a time complexity better than O(n^2). **Function Signature:** ```python def find_closest_pair(arr: List[int]) -> Tuple[int, int]: pass ``` **Example:** ```python assert find_closest_pair([4, 9, 1, 32, 13]) == (4, 1) # or could be (9, 4) or any other correct pair ``` **Input:** - A list of integers (arr) with at least two elements. **Output:** - A tuple containing two integers that are closest to each other in terms of their difference.","solution":"from typing import List, Tuple def find_closest_pair(arr: List[int]) -> Tuple[int, int]: Returns the two numbers that subtract to give the smallest absolute difference. # Sort the array to bring closest numbers next to each other arr.sort() # Initialize the minimum difference as a large number min_diff = float(\'inf\') closest_pair = (None, None) # Traverse the sorted array and find the closest pair for i in range(len(arr) - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff closest_pair = (arr[i], arr[i + 1]) return closest_pair"},{"question":"Given a list of integers, write a function `alternating_sums` that splits the list into two alternating groups, calculates the sum of each group, and returns a tuple containing the two sums. The first element of the tuple should be the sum of the first group, and the second element should be the sum of the second group. # Function Signature ```python def alternating_sums(numbers: List[int]) -> Tuple[int, int]: pass ``` # Input - `numbers` (List[int]): List of integers (1 <= len(numbers) <= 1000, -1000 <= numbers[i] <= 1000). # Output - Tuple[int, int]: A tuple containing the sums of the two alternating groups. # Example ```python >>> alternating_sums([50, 60, 60, 45, 70]) (180, 105) >>> alternating_sums([100, 50]) (100, 50) >>> alternating_sums([80]) (80, 0) ``` # Note In the first example, the first group is [50, 60, 70] which sums to 180, and the second group is [60, 45] which sums to 105.","solution":"from typing import List, Tuple def alternating_sums(numbers: List[int]) -> Tuple[int, int]: sum1, sum2 = 0, 0 for i, number in enumerate(numbers): if i % 2 == 0: sum1 += number else: sum2 += number return sum1, sum2"},{"question":"Write a Python function that takes a list of dictionaries with the following properties: 1) Each dictionary contains a user\'s details with keys: \'id\', \'name\', \'age\', and \'email\'. 2) Implement a feature that anonymizes each user\'s \'name\' by replacing it with a string of asterisks (*) of the same length. 3) Filter out users who are minors (less than 18 years old). 4) Append a new key-value pair, \'valid_email\', to each dictionary where the value is a boolean indicating whether the email is valid. An email is considered valid if it contains exactly one \'@\' character and at least one \'.\' character after \'@\'. The function should return the modified list of dictionaries while preserving the original order. Ensure your code is efficient, readable, and handles potential edge cases.","solution":"def anonymize_users(users): Takes a list of user dictionaries and anonymizes their names, filters out minors, and adds a \'valid_email\' field indicating if the email is valid. def is_valid_email(email): if \'@\' in email and email.split(\'@\')[1].count(\'.\') >= 1: return True return False modified_users = [] for user in users: if user[\'age\'] >= 18: user[\'name\'] = \'*\' * len(user[\'name\']) user[\'valid_email\'] = is_valid_email(user[\'email\']) modified_users.append(user) return modified_users"},{"question":"You are tasked with writing a program that processes a list of student records and calculates the average grade for each student. Follow these guidelines: 1. Each student record is a dictionary containing the student’s name and a list of grades. 2. Implement two scripts: - One using functional programming principles. - The other using a more traditional imperative approach. 3. In the functional programming script: - Use lambda functions and built-in functions like `map`, `filter`, and `reduce`. - Avoid loops and mutable states. 4. In the imperative script: - Use loops to iterate through the list of student records. - Use conditional structures to handle any potential data inconsistencies. 5. Both scripts should output a dictionary with student names as keys and their average grade as values. After completing both scripts, write a brief analysis comparing the functional and imperative approaches, highlighting their advantages and disadvantages.","solution":"from functools import reduce def calculate_average(grades): Calculates the average of a list of grades. if not grades: return 0 return sum(grades) / len(grades) # Functional Programming Approach def process_student_records_functional(records): Processes student records to calculate average grade using functional programming. return dict(map(lambda record: (record[\'name\'], calculate_average(record[\'grades\'])), records)) # Imperative Programming Approach def process_student_records_imperative(records): Processes student records to calculate average grade using imperative approach. output = {} for record in records: name = record[\'name\'] grades = record[\'grades\'] output[name] = calculate_average(grades) return output # Analysis: # Functional Approach: # - Advantages: Code is more declarative and concise, easier to read for those familiar with functional programming # - Disadvantages: May be less intuitive for those unfamiliar with functional programming concepts, difficult to handle complex logical conditions # Imperative Approach: # - Advantages: Code is more explicit and easier to follow for beginners, easier to debug # - Disadvantages: Can become verbose and harder to maintain, especially when handling more complex operations # Example Data student_records = [ {\'name\': \'Alice\', \'grades\': [85, 90, 78]}, {\'name\': \'Bob\', \'grades\': [82, 88, 91]}, ]"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. The function should adhere to the following constraints: 1. The list can contain both positive and negative integers. 2. The order of prime numbers in the returned list should match their order in the input list. 3. Utilize a helper function `is_prime(number)` that determines if a given number is prime. # Example: ```python def is_prime(number): # implementation code here def filter_primes(numbers): # implementation code here # Test case input_list = [10, 15, 3, 7, 4, 11, -5, 13, 27] output_list = filter_primes(input_list) print(output_list) # Output should be [3, 7, 11, 13] ```","solution":"def is_prime(number): Checks if a number is prime. Returns True if the number is prime, False otherwise. if number <= 1: return False if number == 2: return True # 2 is the only even prime number if number % 2 == 0: return False for i in range(3, int(number**0.5) + 1, 2): if number % i == 0: return False return True def filter_primes(numbers): Filters and returns prime numbers from a list of integers. Args: numbers (List[int]): A list of integers, which can include negative numbers. Returns: List[int]: A list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Design an efficient algorithm to merge two sorted linked lists into one sorted linked list. Explain the computational complexity of your approach and provide a well-documented code implementation using your preferred programming language.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists into one sorted linked list. :param l1: ListNode, head of the first sorted linked list :param l2: ListNode, head of the second sorted linked list :return: ListNode, head of the merged sorted linked list dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next # Computational complexity: # The time complexity of this algorithm is O(n + m) where n and m are the lengths of the two linked lists. # The space complexity is O(1) because we are only using a few extra pointers."},{"question":"Write a Python function `min_distance_path(matrix)` that calculates the minimum path sum from the top-left corner to the bottom-right corner of a given rectangular grid. Each cell in the grid contains a non-negative integer, representing the cost to traverse that cell. You can only move either down or right at any point in time. # Function Signature ```python def min_distance_path(matrix: List[List[int]]) -> int: pass ``` # Parameters - `matrix` (List[List[int]]): A 2D list of non-negative integers representing the grid. # Returns - `int`: The minimum path sum from the top-left corner to the bottom-right corner. # Constraints - The grid will have at least one row and one column. - The grid\'s cells will contain non-negative integers. # Example Input ```python matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output ```python 7 ``` Explanation The path with the minimum sum is 1→3→1→1→1, which gives a total of 7. # Notes - Ensure the function dynamically calculates the optimal path using strategies like dynamic programming. - Think about possible edge cases, such as empty sublists or grids with a single cell.","solution":"from typing import List def min_distance_path(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = matrix[0][0] for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, rows): for j in range(1, cols): dp[i][j] = matrix[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[rows-1][cols-1]"},{"question":"Consider a list of integers and a target sum. Write a Python function that determines if any two distinct integers in the list sum up to the target. The function should return a boolean value, `True` if such a pair exists, and `False` otherwise. Ensure that the function runs in linear time to accommodate large lists effectively. Example: ```python def has_pair_with_sum(numbers, target_sum): # Your code here # Test Cases print(has_pair_with_sum([10, 15, 3, 7], 17)) # True, because 10 + 7 = 17 print(has_pair_with_sum([1, 2, 3, 9], 8)) # False, no pairs sum to 8 print(has_pair_with_sum([1, 2, 4, 4], 8)) # True, because 4 + 4 = 8 print(has_pair_with_sum([5, -2, 3, 6], 1)) # True, because 5 + (-4) = 1 ``` Hint: Consider using a set to keep track of the differences between the target sum and the current number while iterating through the list.","solution":"def has_pair_with_sum(numbers, target_sum): Determines if there are any two distinct integers in the list that sum up to the target. :param numbers: List of integers to search through. :param target_sum: The target sum to find. :return: True if a pair with the sum exists, False otherwise. seen = set() for number in numbers: complement = target_sum - number if complement in seen: return True seen.add(number) return False"},{"question":"Write a function that takes a string as input and returns a list of all unique permutations of the string using a recursive approach. The function should handle strings with duplicate characters and ensure that the returned list contains no duplicate permutations. Also, provide a brief explanation of the approach used. Example: Input: \\"aab\\" Output: [\\"aab\\", \\"aba\\", \\"baa\\"]","solution":"def unique_permutations(string): Returns a list containing all unique permutations of the input string. def permute(s): if len(s) <= 1: return {s} else: perms = set() for i, char in enumerate(s): for perm in permute(s[:i] + s[i+1:]): perms.add(char + perm) return perms return list(permute(string))"},{"question":"Write a Python program that takes two lists of integers as input and returns a list of integers that are present in both lists, preserving the order as they appear in the first list. If there are duplicated values in the first list, they should be included in the result the same number of times they appear in the first list, provided they also appear in the second list at least that many times. Example: Input: - list1: [1, 2, 2, 3, 4, 5] - list2: [2, 2, 3, 6] Output: [2, 2, 3] In the example above, \'2\' appears twice in both lists, while \'3\' appears once, which matches the required conditions.","solution":"def intersect_lists_preserve_order(list1, list2): Returns a list of integers that are present in both input lists, preserving the order they appear in the first list. If there are duplicated values in the first list, they should be included in the result the same number of times they appear in the first list, provided they also appear in the second list at least that many times. result = [] count_map = {} for num in list2: count_map[num] = count_map.get(num, 0) + 1 for num in list1: if count_map.get(num, 0) > 0: result.append(num) count_map[num] -= 1 return result"},{"question":"Explain how dynamic programming optimizes the solution to the knapsack problem. Illustrate your explanation with a simple example, including the development of the DP table and the traceback to find the items included in the optimal solution.","solution":"def knapsack(weights, values, W): Solves the knapsack problem using dynamic programming. Args: weights: List of weights for each item. values: List of values for each item. W: Maximum capacity of the knapsack. Returns: tuple of the maximum value obtainable and list of indexes of items included in the knapsack. n = len(weights) # dp table where dp[i][w] represents the max value we can achieve with the first i items and capacity w dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(W + 1): if weights[i-1] <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weights[i-1]] + values[i-1]) else: dp[i][w] = dp[i-1][w] # To find the items included in the knapsack w = W included_items = [] for i in range(n, 0, -1): if dp[i][w] != dp[i-1][w]: included_items.append(i-1) w -= weights[i-1] included_items.reverse() return dp[n][W], included_items"},{"question":"Given a string, return the length of the longest substring that contains no more than two distinct characters. For example, the longest substring of “ccaabbb” is “aabbb”, so return 5.","solution":"def longest_substring_with_two_distinct_chars(s): Returns the length of the longest substring that contains no more than two distinct characters. if len(s) == 0: return 0 left = 0 char_map = {} max_len = 0 for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Create a function that simulates the roll of multiple dice and returns the outcome in a summarized format. The function should accept two parameters: `num_dice` (representing the number of dice to roll, an integer) and `sides_per_die` (indicating the number of sides each die has, an integer). The function should return a dictionary where the keys are the possible outcomes of rolling a single die and the values are the counts of each outcome across all dice rolls. For example, if the input is `num_dice = 3` and `sides_per_die = 6`, the function might return: ```python { 1: 0, 2: 1, 3: 1, 4: 0, 5: 0, 6: 1 } ``` The function must handle validation for the parameters ensuring `num_dice` and `sides_per_die` are positive integers.","solution":"import random def roll_dice(num_dice, sides_per_die): Simulates the roll of multiple dice and returns the outcome in a summarized format. Parameters: num_dice (int): Number of dice to roll. sides_per_die (int): Number of sides on each die. Returns: dict: Dictionary where keys are outcomes and values are counts of each outcome. if not isinstance(num_dice, int) or not isinstance(sides_per_die, int): raise ValueError(\\"Both num_dice and sides_per_die must be integers.\\") if num_dice <= 0 or sides_per_die <= 0: raise ValueError(\\"Both num_dice and sides_per_die must be positive integers.\\") # Initialize the dictionary with all possible outcomes set to 0 outcome_counts = {i: 0 for i in range(1, sides_per_die + 1)} # Simulate the dice rolls for _ in range(num_dice): roll = random.randint(1, sides_per_die) outcome_counts[roll] += 1 return outcome_counts"},{"question":"Given a string comprised of a series of space-separated words, identify the word with the maximum length. In case there are multiple words with the same maximum length, return the first occurrence. Implement this without using built-in max() function or any sorting algorithms. Example string: \\"The quick brown fox jumped over the lazy dog\\" Expected output: \\"jumped\\"","solution":"def longest_word(sentence): Returns the longest word in a sentence. If there are multiple words with the same maximum length, the first occurrence is returned. words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a function that takes a list of integers as input and returns the count of odd numbers in the list. Use the following list as an example to test your function: [12, 17, 19, 24, 45, 67, 78].","solution":"def count_odd_numbers(numbers): Returns the count of odd numbers in the given list. :param numbers: A list of integers :return: The count of odd numbers in the list return sum(1 for number in numbers if number % 2 != 0)"},{"question":"Given a list of strings, construct a function that groups these strings into categories where each group contains anagrams of each other. For the output, each inner list should hold strings that are anagrams, and the entire output should be a list of these inner lists. Ensure that the function handles large inputs efficiently. For example, given the input list [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"], the output should be: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Note that while the order of strings within each group does not matter, the solution should group all anagrams together correctly.","solution":"from collections import defaultdict def group_anagrams(strings): Groups a list of strings into categories where each group contains anagrams of each other. anagrams = defaultdict(list) for s in strings: sorted_s = \'\'.join(sorted(s)) anagrams[sorted_s].append(s) return list(anagrams.values())"},{"question":"Write a function that accepts a string representing an arithmetic expression containing only positive integers, the operators +, -, *, /, and parentheses. The function should evaluate and return the result of the expression. For this, you should consider the usual mathematical rules regarding the order of operations and parentheses. Example: expression = \\"3 + 2 * (1 + 2)\\" The function should return 9.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression containing positive integers, operators, and parentheses according to mathematical rules of precedence and returns the result. try: result = eval(expression) except (SyntaxError, NameError): raise ValueError(\\"Invalid expression\\") return result"},{"question":"Create a Python function that effectively compresses a given string using the Run-Length Encoding (RLE) algorithm. Run-Length Encoding is a simple form of lossless data compression in which runs of data are stored as a single data value and count. Here\'s the process to follow: 1. Write a function `rle_encoding(s)` that takes a string `s` as input. 2. Traverse the string and count consecutive characters. 3. Encode the counts along with the characters. 4. Optimize the function to deal with edge cases such as single character strings or strings with no repeat characters. To illustrate, see the following example: ```python def rle_encoding(s): if not s: return \'\' encoding = \'\' prev_char = s[0] count = 1 for char in s[1:]: if char == prev_char: count += 1 else: encoding += prev_char + str(count) prev_char = char count = 1 # Add the last set of characters encoding += prev_char + str(count) return encoding # Example usage: input_string = \'aaabbcccc\' compressed_string = rle_encoding(input_string) print(compressed_string) # Output: a3b2c4 ``` 5. Additionally, create a function `rle_decoding(s)` that reverses the RLE encoded string back to its original form. Using the `rle_encoding` function compress the following strings and display the result: - \\"aaaabbbccdaa\\" - \\"abcd\\" - \\"a\\" - \\"aaaaaaaaaaaa\\" Next, using the `rle_decoding` function, revert the compressed strings back to their original form to validate your RLE implementation.","solution":"def rle_encoding(s): Compresses the input string using Run-Length Encoding (RLE) algorithm. if not s: return \'\' encoding = \'\' prev_char = s[0] count = 1 for char in s[1:]: if char == prev_char: count += 1 else: encoding += prev_char + str(count) prev_char = char count = 1 encoding += prev_char + str(count) return encoding def rle_decoding(s): Reverts the RLE compressed string back to its original form. if not s: return \'\' decoding = \'\' i = 0 while i < len(s): char = s[i] count = \'\' i += 1 while i < len(s) and s[i].isdigit(): count += s[i] i += 1 decoding += char * int(count) return decoding # Example usage: input_strings = [\\"aaaabbbccdaa\\", \\"abcd\\", \\"a\\", \\"aaaaaaaaaaaa\\"] compressed_strings = [rle_encoding(s) for s in input_strings] print(compressed_strings) # Outputs: [\'a4b3c2d1a2\', \'a1b1c1d1\', \'a1\', \'a12\'] # Decoding to verify decoded_strings = [rle_decoding(s) for s in compressed_strings] print(decoded_strings) # Outputs: [\'aaaabbbccdaa\', \'abcd\', \'a\', \'aaaaaaaaaaaa\']"},{"question":"Write a function `max_substring_sum` that accepts a list of integers and an integer `k`. The function should return the maximum sum of any contiguous subarray of length `k`. If the length of the list is less than `k`, the function should return `None`. # Example ```python max_substring_sum([1, 4, 2, 10, 23, 3, 1, 0, 20], 4) ``` Output: ```python 39 ``` ```python max_substring_sum([1, 4, 2, 10], 5) ``` Output: ```python None ``` # Constraints - The input list will contain at least one integer. - The value of `k` will be a positive integer.","solution":"def max_substring_sum(nums, k): Returns the maximum sum of any contiguous subarray of length k. If the length of the list is less than k, the function returns None. if len(nums) < k: return None # Initial window sum max_sum = sum(nums[:k]) current_sum = max_sum # Slide the window over the rest of the array for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Create a Python function to compute the length of the longest palindromic substring in the input string. Ensure your solution is optimized to run in linear time using Manacher\'s algorithm. The function signature should look like: def longest_palindromic_substring(s): Returns the length of the longest palindromic substring within the input string s. The algorithm should be optimized to run in linear time using Manacher\'s algorithm. >>> longest_palindromic_substring(\\"babad\\") 3 >>> longest_palindromic_substring(\\"cbbd\\") 2 >>> longest_palindromic_substring(\\"a\\") 1 >>> longest_palindromic_substring(\\"ac\\") 1","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring within the input string s. The algorithm should be optimized to run in linear time using Manacher\'s algorithm. def preprocess_string(s): if not s: return \\"^\\" T = \\"^\\" for char in s: T += \\"#\\" + char T += \\"#\\" return T T = preprocess_string(s) n = len(T) P = [0] * n C = R = 0 for i in range(1, n - 1): i_mirror = 2 * C - i P[i] = (R > i) and min(R - i, P[i_mirror]) or 0 while T[i + 1 + P[i]] == T[i - 1 - P[i]]: P[i] += 1 if i + P[i] > R: C, R = i, i + P[i] max_len = max(P) return max_len"},{"question":"Write a Python function that takes an integer `n` as input and generates a dictionary where the keys are integers from 1 to `n`, and the values are the squares of those keys. Implement the function in such a way that it outputs the dictionary contents in ascending order of keys. # Function Signature ```python def generate_squares(n: int) -> dict: pass ``` # Example ```python generate_squares(5) ``` # Output ```python {1: 1, 2: 4, 3: 9, 4: 16, 5: 25} ```","solution":"def generate_squares(n: int) -> dict: Generates a dictionary with keys from 1 to n (inclusive) and values as the squares of the keys. Parameters: n (int): The upper limit for keys in the dictionary. Returns: dict: A dictionary where the keys are integers from 1 to n and the values are the squares of the keys. return {i: i**2 for i in range(1, n+1)}"},{"question":"A delivery drone can carry up to `W` kilograms of weight in a single trip. You are planning the drone\'s delivery schedule to minimize the number of trips required to deliver a set of packages. Each package has a specific weight given in an array of integers `weights`, where each integer represents the weight of a package in kilograms. The drone must deliver all packages, but it can only carry packages that do not exceed its weight limit `W` in a single trip. Write a function `minDeliveryTrips(weights, W)` that takes in an array of integers `weights` and an integer `W`, and returns the minimum number of trips required to deliver all the packages. # Function Signature ```python def minDeliveryTrips(weights: List[int], W: int) -> int: ``` # Input - `weights` (1 <= len(weights) <= 1000): A list of integers where each integer represents the weight of a package (`1 <= weight <= W`). - `W` (1 <= W <= 5000): An integer representing the maximum weight the drone can carry on a single trip. # Output - Return an integer representing the minimum number of trips required to deliver all packages. # Example ```python print(minDeliveryTrips([5, 3, 4, 2, 8], 10)) # Output: 3 ``` # Explanation - The drone can carry the following sets of packages in three trips: 1. Packages weighing [5, 3, 2] (total weight 10) 2. Package weighing [8] (total weight 8) 3. Package weighing [4] (total weight 4)","solution":"from typing import List def minDeliveryTrips(weights: List[int], W: int) -> int: Calculate the minimum number of delivery trips for the drone to deliver all packages. :param weights: List[int] - list of weights of the packages :param W: int - maximum weight the drone can carry in a single trip :return: int - minimum number of trips required weights.sort(reverse=True) trips = 0 while weights: trips += 1 current_weight = 0 for i in range(len(weights)): if current_weight + weights[i] <= W: current_weight += weights[i] weights[i] = 0 weights = [weight for weight in weights if weight > 0] return trips"},{"question":"Write a function that sorts a given list of integers such that all the even numbers appear before the odd numbers, while preserving their original relative order. Investigate the provided erroneous code and fix the existing issues to achieve the desired functionality. **Erroneous Code:** ```python def sort_by_even_odd(arr): evens = [] odds = [] for num in arr: if num % 2 == 0: evens.append(num) else: odds.append(num) return evens + odds # The function should preserve the relative order of the even and odd numbers, but it must be checked thoroughly for edge cases. ```","solution":"def sort_by_even_odd(arr): Sort the list such that all even numbers come before all odd numbers, while preserving the relative order of the even and odd numbers. evens = [] odds = [] for num in arr: if num % 2 == 0: evens.append(num) else: odds.append(num) return evens + odds"},{"question":"Write a function called `find_substring_indices` that takes in two strings: `text` and `pattern`. Your function should return a list of starting indices where the substring `pattern` is found within the string `text`. If `pattern` is not found in `text`, return an empty list. Input - `text`: a string, representing the text where the search happens. - `pattern`: a string, representing the substring to search for. Output - A list of integers, representing the starting indices of each occurrence of `pattern` in `text`. Example ```python text = \\"abracadabra\\" pattern = \\"abra\\" result = find_substring_indices(text, pattern) print(result) # Output: [0, 7] text = \\"hello world, hello universe\\" pattern = \\"hello\\" result = find_substring_indices(text, pattern) print(result) # Output: [0, 13] ``` Constraints - You may assume that both `text` and `pattern` will consist only of lowercase alphabetic characters. - The length of `text` and `pattern` will be between 1 and 10^5.","solution":"def find_substring_indices(text, pattern): Returns a list of starting indices where the substring pattern is found within the string text. if not pattern or not text: return [] pattern_length = len(pattern) text_length = len(text) result = [] for i in range(text_length - pattern_length + 1): if text[i:i + pattern_length] == pattern: result.append(i) return result"},{"question":"Palindrome Partitioning Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of `s`. A palindrome is a string that reads the same forward and backward. Example 1: Input: s = \\"aab\\" Output: 1 Explanation: The palindrome partitioning [\\"aa\\",\\"b\\"] could be produced using 1 cut. Example 2: Input: s = \\"a\\" Output: 0 Explanation: The string is already a palindrome, no cuts are needed. Example 3: Input: s = \\"ab\\" Output: 1 Explanation: The palindrome partitioning [\\"a\\",\\"b\\"] could be produced using 1 cut. Note: `1 <= s.length <= 2000` `s` consists of only lowercase English letters.","solution":"def minCut(s): Returns the minimum cuts needed for a palindrome partitioning of s. n = len(s) if n < 2: return 0 # Create a 2D table to store whether a substring is palindrome or not is_palindrome = [[False]*n for _ in range(n)] for i in range(n): is_palindrome[i][i] = True # Each single character is a palindrome for length in range(2, n+1): # Check all substrings of length 2 to n for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: if length == 2: # Substring of two characters is_palindrome[i][j] = True else: is_palindrome[i][j] = is_palindrome[i+1][j-1] cuts = [float(\'inf\')] * n for i in range(n): if is_palindrome[0][i]: cuts[i] = 0 # No need to cut if whole substring is a palindrome else: for j in range(i): if is_palindrome[j+1][i]: cuts[i] = min(cuts[i], cuts[j] + 1) return cuts[-1]"},{"question":"Create a Python function that takes a list of strings and an integer `n` as input, and returns a list of strings sorted by their length in descending order. In case of a tie in length, sort the strings alphabetically. The function should handle edge cases such as empty strings or strings with the same length.","solution":"def sort_strings_by_length(strings, n): Returns a list of strings sorted by their length in descending order. In case of a tie in length, the strings are sorted alphabetically. :param strings: List of strings. :param n: An integer (not used in this case but part of the function signature). :return: List of sorted strings. return sorted(strings, key=lambda x: (-len(x), x))"},{"question":"Create a Python function called `reverse_dict` that takes a dictionary, `my_dict`, as an input. The dictionary contains keys associated with their respective string values. The function should return a new dictionary where the keys remain the same but the string values are reversed. For example: ``` Input: my_dict = { \'key1\': \'hello\', \'key2\': \'world\' } Output: { \'key1\': \'olleh\', \'key2\': \'dlrow\' } ```","solution":"def reverse_dict(my_dict): Returns a new dictionary where the keys remain the same but the string values are reversed. Parameters: my_dict (dict): The input dictionary with string values. Returns: dict: A dictionary with reversed string values. return {key: value[::-1] for key, value in my_dict.items()}"},{"question":"In a cloud-based Kubernetes environment, how can you effectively manage secrets without hardcoding them in the codebase? Also, how can you set up a robust CI/CD pipeline that ensures zero downtime deployment for your applications?","solution":"def manage_secrets_and_setup_ci_cd(): Provides instructions on how to manage secrets effectively in a Kubernetes environment and set up a CI/CD pipeline to ensure zero downtime deployment. secrets_management = Effective secrets management in Kubernetes: 1. Use Kubernetes Secrets: - Create secrets using kubectl command or YAML configuration. - Reference secrets in your pods via environment variables or volumes. Example: yaml apiVersion: v1 kind: Secret metadata: name: my-secret type: Opaque data: username: YWRtaW4= # base64 encoded value for \'admin\' password: MWYyZDFlMmU2N2Rm # base64 encoded value for \'1f2d1e2e67df\' To reference secrets in a pod: yaml apiVersion: v1 kind: Pod metadata: name: mypod spec: containers: - name: mycontainer image: myimage env: - name: USERNAME valueFrom: secretKeyRef: name: my-secret key: username - name: PASSWORD valueFrom: secretKeyRef: name: my-secret key: password 2. Use External Secrets Management Tools: - Tools like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault. - Integrate these tools with Kubernetes using controllers/operators to sync secrets into Kubernetes secrets. CI/CD Pipeline setup for zero downtime deployment: 1. Use a CI/CD tool (e.g., Jenkins, GitLab CI, Github Actions) to automate build, test, and deployment processes. 2. Implement the Blue-Green Deployment strategy: - Create two identical environments called Blue and Green. - Route traffic to one environment (e.g., Blue) while deploying the new version to the other (e.g., Green). - Once the deployment is successful in the Green environment, switch the traffic to the Green environment. - Rollback can be easy by switching back to the Blue environment if something goes wrong. Example with Kubernetes: yaml apiVersion: apps/v1 kind: Deployment metadata: name: my-app-green spec: replicas: 3 selector: matchLabels: app: my-app-green template: metadata: labels: app: my-app-green spec: containers: - name: my-container image: my-new-version-image ports: - containerPort: 80 Use Kubernetes services to switch traffic: yaml apiVersion: v1 kind: Service metadata: name: my-app-service spec: selector: app: my-app-green # or `app: my-app-blue` based on which environment should serve traffic ports: - protocol: TCP port: 80 targetPort: 80 return secrets_management"},{"question":"Write a function `combine_dicts(dict1, dict2)` that takes two dictionaries as input, both containing integer values. The function should return a new dictionary that combines the input dictionaries. If a key exists in both dictionaries, the resulting dictionary should contain the sum of the values for that key. If a key is only present in one of the dictionaries, the resulting dictionary should contain that key with its corresponding value from the input dictionary. For example, `combine_dicts({\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 4})` should return `{\'a\': 1, \'b\': 5, \'c\': 4}`. Ensure the function handles edge cases such as one or both input dictionaries being empty. ```python def combine_dicts(dict1, dict2): result = {} for key in dict1: if key in dict2: result[key] = dict1[key] + dict2[key] else: result[key] = dict1[key] for key in dict2: if key not in result: result[key] = dict2[key] return result ```","solution":"def combine_dicts(dict1, dict2): Combines two dictionaries by summing values of keys that appear in both dictionaries. If a key exists in only one of the dictionaries, its value is included as is in the resulting dictionary. Parameters: dict1 (dict): First dictionary with integer values. dict2 (dict): Second dictionary with integer values. Returns: dict: A new dictionary with combined keys and summed values where applicable. result = {} for key in dict1: if key in dict2: result[key] = dict1[key] + dict2[key] else: result[key] = dict1[key] for key in dict2: if key not in result: result[key] = dict2[key] return result"},{"question":"Implement a function to evaluate the performance of employees based on sales data and preset thresholds. The sales data will be provided in a dictionary with employee IDs as keys, and lists of sales amounts as values. The threshold values for \'average\', \'good\', and \'excellent\' ratings are given by separate arguments. Compute the average sales for each employee and assign ratings according to the following criteria: - \\"Poor\\" for average sales less than the average_threshold. - \\"Average\\" for average sales between the average_threshold (inclusive) and good_threshold. - \\"Good\\" for average sales between the good_threshold (inclusive) and excellent_threshold. - \\"Excellent\\" for average sales greater than or equal to the excellent_threshold. Return a dictionary with employee IDs as keys and their respective ratings as values. Your function signature should follow this format: ```python from typing import List, Dict def evaluate_performance(sales_data: Dict[int, List[float]], average_threshold: float, good_threshold: float, excellent_threshold: float) -> Dict[int, str]: Evaluate the performance of employees based on sales data. Ratings are determined by comparing average sales against preset thresholds. Args: sales_data: A dictionary where keys are employee IDs and values are lists of sales amounts. average_threshold: The sales average below which employees are rated as \\"Poor\\". good_threshold: The sales average below which employees are rated as \\"Average\\". excellent_threshold: The sales average above which employees are rated as \\"Excellent\\". Returns: A dictionary with employee IDs as keys and their respective performance ratings as values. Examples: >>> evaluate_performance({1:[400, 450, 500], 2:[300, 320, 350]}, 350, 450, 500) {1: \'Good\', 2: \'Poor\'} >>> evaluate_performance({1:[400, 450, 500], 2:[300, 320, 350]}, 330, 400, 490) {1: \'Excellent\', 2: \'Average\'} # Write your code here ```","solution":"from typing import List, Dict def evaluate_performance(sales_data: Dict[int, List[float]], average_threshold: float, good_threshold: float, excellent_threshold: float) -> Dict[int, str]: Evaluate the performance of employees based on sales data. Ratings are determined by comparing average sales against preset thresholds. Args: sales_data: A dictionary where keys are employee IDs and values are lists of sales amounts. average_threshold: The sales average below which employees are rated as \\"Poor\\". good_threshold: The sales average below which employees are rated as \\"Average\\". excellent_threshold: The sales average above which employees are rated as \\"Excellent\\". Returns: A dictionary with employee IDs as keys and their respective performance ratings as values. Examples: >>> evaluate_performance({1:[400, 450, 500], 2:[300, 320, 350]}, 350, 450, 500) {1: \'Good\', 2: \'Poor\'} >>> evaluate_performance({1:[400, 450, 500], 2:[300, 320, 350]}, 330, 400, 490) {1: \'Excellent\', 2: \'Average\'} ratings = {} for employee_id, sales in sales_data.items(): average_sales = sum(sales) / len(sales) if average_sales < average_threshold: ratings[employee_id] = \'Poor\' elif average_threshold <= average_sales < good_threshold: ratings[employee_id] = \'Average\' elif good_threshold <= average_sales < excellent_threshold: ratings[employee_id] = \'Good\' else: ratings[employee_id] = \'Excellent\' return ratings"},{"question":"Design a function that takes an integer array and returns the shortest subarray (by length) whose sum is greater than or equal to a given target value. Analyze both time and space complexity of your solution. Provide efficient solutions for best performance with proper explanations of your approach.","solution":"def min_subarray_len(nums, target): Returns the length of the shortest contiguous subarray such that the sum is greater or equal to target. If there is no such subarray, returns 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are required to write a function \'decode_message\' that takes in a single integer `k` and a string `s`. This function should decode the encoded string by shifting each alphabetic character in `s` backwards by `k` positions in the alphabet. If the shift goes before \'a\', it should wrap around to the end of the alphabet (\'z\'). Non-alphabetic characters should remain unchanged. The function should return the decoded string. Examples: * `decode_message(3, \\"dwwdfn\\")` should return `\\"attack\\"` * `decode_message(1, \\"uifsf!ibt!cffo!b!csfbluispvhi\\")` should return `\\"there!has!been!a!breakthrough\\"` Note: - The input string `s` can contain both uppercase and lowercase letters. - The function should be case-sensitive, meaning \'a\' and \'A\' are shifted independently. - Consider that the decoding shift can be greater than the length of the alphabet. Your implementation should handle edge cases such as strings with no letters or an empty string. ```python def decode_message(k: int, s: str) -> str: decoded_chars = [] for char in s: if char.isalpha(): shift = k % 26 new_char = chr((ord(char) - shift - 65) % 26 + 65) if char.isupper() else chr((ord(char) - shift - 97) % 26 + 97) decoded_chars.append(new_char) else: decoded_chars.append(char) return \'\'.join(decoded_chars) ```","solution":"def decode_message(k: int, s: str) -> str: Decodes the encoded string s by shifting each alphabetic character backwards by k positions in the alphabet. Non-alphabetic characters remain unchanged. Parameters: k (int): the number of positions to shift each character backwards s (string): the encoded string to decode Returns: string: the decoded string decoded_chars = [] shift = k % 26 # To handle cases where k is greater than 26. for char in s: if char.isalpha(): if char.islower(): # wrap-around within the lowercase letters new_char = chr((ord(char) - ord(\'a\') - shift) % 26 + ord(\'a\')) else: # wrap-around within the uppercase letters new_char = chr((ord(char) - ord(\'A\') - shift) % 26 + ord(\'A\')) decoded_chars.append(new_char) else: decoded_chars.append(char) return \'\'.join(decoded_chars)"},{"question":"Write a function that receives a string containing a mix of alphanumeric characters and symbols. The function should return a dictionary with the counts of each character (case-insensitive for alphabetic characters), only including those that are alphanumeric. Example: Input: \\"Hello, World! 123\\" Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1, \'1\': 1, \'2\': 1, \'3\': 1} Hint: You can use the `isalpha()` and `isdigit()` methods to check for alphabetic and numeric characters, respectively.","solution":"def count_alphanumeric_chars(s): Returns a dictionary with counts of each alphanumeric character in the string `s`, with alphabetic characters counted in a case-insensitive manner. from collections import defaultdict char_count = defaultdict(int) for char in s: if char.isalnum(): char_count[char.lower()] += 1 return dict(char_count)"},{"question":"Develop a Python-based chat application that supports multiple clients connecting to the server simultaneously. The application should allow users to send and receive messages in real-time. Here are the detailed requirements for both the server and client sides: # Server Requirements: 1. **Connection Handling**: The server must handle multiple client connections concurrently. 2. **Broadcasting**: When a client sends a message, the server should broadcast it to all connected clients. 3. **Message Format**: Prepend each message with the sender’s username before broadcasting. 4. **Client Disconnections**: Gracefully handle client disconnections and notify remaining clients. 5. **Error Handling**: Implement robust error handling to manage exceptions and unforeseen issues. # Client Requirements: 1. **Connection to Server**: Allow the client to connect to the server. 2. **User Input**: Enable users to input their messages and send them to the server. 3. **Display Messages**: Display incoming messages from the server in real-time. 4. **Username Entry**: Prompt users to enter their username at the start of the session. 5. **Error Handling**: Implement error handling to respond to connection issues and disconnections. # Scenario Consider a scenario where previous implementation relied on a simplistic socket handling mechanism with blocking calls. This often resulted in crashes or delays for clients due to the lack of concurrent handling. The following code snippet represents such a flawed implementation: ```Python import socket def server_program(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((\'localhost\', 5000)) server_socket.listen(2) conn, address = server_socket.accept() print(\\"Connection from: \\" + str(address)) while True: data = conn.recv(1024).decode() if not data: break print(\\"from connected user: \\" + str(data)) conn.send(data.encode()) def client_program(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((\'localhost\', 5000)) message = input(\\" -> \\") while message.lower().strip() != \'bye\': client_socket.send(message.encode()) data = client_socket.recv(1024).decode() print(\'Received from server: \' + data) message = input(\\" -> \\") client_socket.close() if __name__ == \'__main__\': choice = input(\\"Enter \'server\' to start server, or \'client\' to start client: \\") if choice == \'server\': server_program() else: client_program() ``` # Instructions: 1. Identify the core problems in the above implementation. 2. Refactor the code to employ threading or async patterns to enable concurrent client handling. 3. Ensure that the server can broadcast messages to all connected clients. 4. Thoroughly document the methods and classes used in your implementation. 5. Test your application by running multiple clients that can send messages to and receive messages from other clients in real-time.","solution":"import socket import threading from typing import List # Constants HOST = \'localhost\' PORT = 5000 def handle_client(client_socket, addr, username, clients): Handle communication with a connected client. :param client_socket: The socket connected to the client. :param addr: The address of the client. :param username: The username of the client. :param clients: The list of all connected clients. welcome_message = f\\"{username} has joined the chat!\\" broadcast(welcome_message, client_socket, clients) while True: try: message = client_socket.recv(1024).decode() if message: print(f\\"[{username}@{addr}] {message}\\") broadcast(f\\"{username}: {message}\\", client_socket, clients) else: remove_client(client_socket, clients) broadcast(f\\"{username} has left the chat.\\", client_socket, clients) break except: remove_client(client_socket, clients) broadcast(f\\"{username} has left the chat.\\", client_socket, clients) break def broadcast(message, current_client, clients): Broadcast a message to all connected clients except the sender. :param message: The message to send. :param current_client: The client who sent the message. :param clients: The list of all connected clients. for client in clients: if client != current_client: try: client.send(message.encode()) except: remove_client(client, clients) def remove_client(client_socket, clients): Remove a client from the list of connected clients. :param client_socket: The client socket to remove. :param clients: The list of all connected clients. if client_socket in clients: clients.remove(client_socket) def server_program(): Start the chat server and handle incoming client connections. server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind((HOST, PORT)) server_socket.listen(5) print(f\\"Server listening on {HOST}:{PORT}\\") clients: List[socket.socket] = [] while True: client_socket, addr = server_socket.accept() print(f\\"Connection from: {addr}\\") client_socket.send(\\"USERNAME\\".encode()) username = client_socket.recv(1024).decode() clients.append(client_socket) threading.Thread(target=handle_client, args=(client_socket, addr, username, clients)).start() def client_program(): Connect to the chat server and handle sending and receiving messages. client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: client_socket.connect((HOST, PORT)) username = input(\\"Enter your username: \\") client_socket.send(username.encode()) threading.Thread(target=receive_messages, args=(client_socket,)).start() while True: message = input() client_socket.send(message.encode()) if message.lower() == \'bye\': client_socket.close() break except socket.error as e: print(\\"Connection error:\\", e) client_socket.close() def receive_messages(client_socket): Receive messages from the server and print them. :param client_socket: The socket connected to the server. while True: try: message = client_socket.recv(1024).decode() if message: print(message) else: break except: break"},{"question":"Define a function that modifies and analyses strings based on given criteria: def advanced_string_manipulation_and_analysis(s: str, actions: List[Dict[str, Any]]) -> List[str]: The function processes a given string `s` and applies a series of actions (transformations and analyses) defined in the `actions` list. Each action is a dictionary that specifies the type of operation to be done, parameters for that operation, and conditions under which the operation should be performed. Possible action types include: 1. `substring_count`: Count occurrences of a substring within the string and append the count to the result list. 2. `substring_replace`: Replace all occurrences of a substring with another substring if a specified condition is met. 3. `cipher_shift`: Shift all characters in the string by a given number according to the Caesar cipher. 4. `find_anagrams`: Find all anagrams of a given word within the string (consider spaces or special characters) and return their positions. 5. `word_frequency`: Calculate the frequency of each word in the string and append the result as a dictionary. 6. `pattern_match`: Identify and return the start indices of all matches of a given regex pattern in the string. The transformations should be applied to the string consecutively. Analysis actions only append their results to a separate list. The function must handle edge cases like empty strings, invalid action types, and unfound substrings gracefully and must raise an appropriate error for any invalid input. Example: actions = [ {\\"type\\": \\"substring_count\\", \\"value\\": \\"hello\\"}, {\\"type\\": \\"substring_replace\\", \\"from\\": \\"world\\", \\"to\\": \\"everyone\\", \\"if_contains\\": \\"!\\"}, {\\"type\\": \\"cipher_shift\\", \\"shift\\": 5}, {\\"type\\": \\"find_anagrams\\", \\"word\\": \\"write\\"}, {\\"type\\": \\"word_frequency\\"}, {\\"type\\": \\"pattern_match\\", \\"pattern\\": r\\"bd{3}b\\"} ] result = advanced_string_manipulation_and_analysis(\\"hello world! 123 321 write\\", actions) => [\\"substring_count: 1\\", \\"cipher_shift: mjqqt btwqi! 678 876 bwnyj\\", \\"find_anagrams: [13]\\", \\"word_frequency: {\'hello\': 1, \'world\': 1, \'123\': 1, \'321\': 1, \'write\': 1}\\", \\"pattern_match: [10, 14]\\"] Develop this function to handle the passing requirements, keeping efficiency and accuracy for large inputs.","solution":"from typing import List, Dict, Any import re from collections import Counter def caesar_cipher(s: str, shift: int) -> str: result = [] for char in s: if char.isalpha(): shift_base = ord(\'A\') if char.isupper() else ord(\'a\') result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return \'\'.join(result) def find_anagrams_positions(s: str, word: str) -> List[int]: from collections import Counter word_len = len(word) word_counter = Counter(word) current_counter = Counter(s[:word_len-1]) result = [] for i in range(word_len-1, len(s)): current_counter[s[i]] += 1 if current_counter == word_counter: result.append(i - word_len + 1) current_counter[s[i - word_len + 1]] -= 1 if current_counter[s[i - word_len + 1]] == 0: del current_counter[s[i - word_len + 1]] return result def advanced_string_manipulation_and_analysis(s: str, actions: List[Dict[str, Any]]) -> List[str]: results = [] for action in actions: action_type = action.get(\\"type\\") if action_type == \\"substring_count\\": substring = action.get(\\"value\\", \\"\\") count = s.count(substring) results.append(f\\"substring_count: {count}\\") elif action_type == \\"substring_replace\\": if_contains = action.get(\\"if_contains\\", \\"\\") if if_contains in s: s = s.replace(action.get(\\"from\\", \\"\\"), action.get(\\"to\\", \\"\\")) elif action_type == \\"cipher_shift\\": shift = action.get(\\"shift\\", 0) s = caesar_cipher(s, shift) results.append(f\\"cipher_shift: {s}\\") elif action_type == \\"find_anagrams\\": word = action.get(\\"word\\", \\"\\") positions = find_anagrams_positions(s, word) results.append(f\\"find_anagrams: {positions}\\") elif action_type == \\"word_frequency\\": words = re.findall(r\'bw+b\', s) frequency = Counter(words) results.append(f\\"word_frequency: {dict(frequency)}\\") elif action_type == \\"pattern_match\\": pattern = action.get(\\"pattern\\", \\"\\") matches = [m.start() for m in re.finditer(pattern, s)] results.append(f\\"pattern_match: {matches}\\") else: raise ValueError(f\\"Invalid action type: {action_type}\\") return results"},{"question":"Task: Find Missing Positive Integer Description: Given an unsorted integer array `nums`, find the smallest missing positive integer. Your algorithm should run in O(n) time and use constant extra space. Example 1: Input: nums = [1, 2, 0] Output: 3 Explanation: The smallest missing positive integer is 3. Example 2: Input: nums = [3, 4, -1, 1] Output: 2 Explanation: The smallest missing positive integer is 2. Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest missing positive integer is 1. Note: - Your solution should run in O(n) time. - You may not use extra space except for the input array itself. - The array can have integers both positive and negative, including zero.","solution":"def first_missing_positive(nums): Finds the smallest missing positive integer in an unsorted array. Parameters: nums (List[int]): The input list of integers Returns: int: The smallest missing positive integer n = len(nums) # Step 1: Replace negative numbers, zeros, and numbers larger than n with n+1 for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the index as a hash and mark the presence of an element for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: The first index that is positive is the smallest missing positive number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Implement a Python function to simulate a simple card game. The game begins with two players each being dealt an equal number of cards from a standard deck of 52 cards. Create a function that takes two lists of integers representing the cards. Each integer corresponds to a card value, where 11 is Jack, 12 is Queen, 13 is King, and 14 is Ace. The function should simulate the game and return the winner. Rules: 1. Both players place their top card (first element of their list) face up. The player with the higher card wins the round and takes both cards, placing them at the bottom of their stack of cards. 2. If the two cards are of equal value, it’s a tie for that round, and both cards are placed at the bottom of the respective players\' stacks. 3. The game continues until one player has all the cards or rounds reach a maximum number to prevent infinite games. 4. If neither player wins all cards before the maximum rounds, the player with more cards is declared the winner. Function Signature: ```python def card_game(player1_cards: List[int], player2_cards: List[int]) -> str: ``` Example: ```python assert card_game([14, 2, 3, 4], [13, 2, 3, 4]) == \\"Player 1 wins\\" assert card_game([2, 3, 4, 5], [2, 3, 4, 5]) == \\"Draw\\" ``` Constraints: - Assume that the input lists are always valid and contain an equal number of elements. - The game stops after 500 rounds if no clear winner emerges to prevent infinite loop scenarios.","solution":"from typing import List def card_game(player1_cards: List[int], player2_cards: List[int]) -> str: max_rounds = 500 round_count = 0 while player1_cards and player2_cards and round_count < max_rounds: round_count += 1 card1 = player1_cards.pop(0) card2 = player2_cards.pop(0) if card1 > card2: player1_cards += [card1, card2] elif card2 > card1: player2_cards += [card2, card1] else: player1_cards.append(card1) player2_cards.append(card2) if len(player1_cards) > len(player2_cards): return \\"Player 1 wins\\" elif len(player2_cards) > len(player1_cards): return \\"Player 2 wins\\" else: return \\"Draw\\""},{"question":"Design a function that takes an integer `n` and returns a list of strings representing the first `n` lines of an inverted Pascal\'s Triangle. An inverted Pascal\'s Triangle begins with the largest element on the top row, and each subsequent row contains elements that are generated by subtracting the respective elements of Pascal\'s Triangle from the previous row value. Ensure that the resulting inverted Pascal\'s Triangle maintains the pyramid structure and each row respects the nature of subtraction from the top towards the base of the triangle. Additionally, you should handle potential constraints or edge cases that may arise due to the inversion process between the rows. Example: For `n = 4`, the output should be: ``` [ \\"15\\", # 1st row: 15 (arbitrary starting value chosen to demonstrate) \\"14 13\\", \\"10 9 8\\", \\"1 0 -1 0\\" ] ```","solution":"def inverted_pascals_triangle(n): Returns a list of strings representing the first `n` lines of an inverted Pascal\'s Triangle. An inverted Pascal\'s Triangle starts with the largest element on the top row, and the elements decrease following a pattern related to Pascal\'s Triangle. if n == 0: return [] result = [] current_value = 15 # Starting value (arbitrary for demonstration) result.append(f\\"{current_value}\\") for i in range(1, n): row = [] last_row = result[-1].split() for j in range(len(last_row) + 1): if j == 0: new_value = int(last_row[0]) - 1 elif j == len(last_row): new_value = int(last_row[-1]) - 1 else: new_value = int(last_row[j - 1]) - 1 row.append(new_value) result.append(\\" \\".join(map(str, row))) return result"},{"question":"Define a function that takes a string as input and returns the longest substring that appears at least twice in the given string. If there are multiple substrings of the same length that appear more than once, return the one that occurs first. Consider only non-overlapping substrings for this task.","solution":"def longest_repeated_substring(s): Returns the longest substring that appears at least twice in the given string. If there are multiple substrings of the same length that appear more than once, return the one that occurs first. Considers only non-overlapping substrings. n = len(s) longest_substring = \\"\\" # Try all possible substrings and count their occurrences for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] count = s.count(substring) if count > 1 and len(substring) > len(longest_substring): longest_substring = substring elif count > 1 and len(substring) == len(longest_substring) and s.index(substring) < s.index(longest_substring): longest_substring = substring return longest_substring"},{"question":"Design a system in Python that models a simple library management application. Create an abstract base class called \'LibraryItem\' with abstract methods for \'borrow_item\' and \'return_item\'. This class should also have common attributes such as \'title\' and \'identifier\' for each library item. Then, create three derived classes: \'Book\', \'Magazine\', and \'DVD\'. Each derived class should implement the \'borrow_item\' and \'return_item\' methods to appropriately handle the borrowing logic, and should also include additional attributes specific to that item type (e.g., \'author\' for Book, \'issue_number\' for Magazine, \'duration\' for DVD). The \'borrow_item\' method should ensure that an item can be borrowed only if it’s available, and the \'return_item\' method should update the status of the item accordingly. Implement encapsulation principles by creating get and set methods for the private attributes of the items. Finally, create instances of each derived class and demonstrate borrowing and returning different types of library items. Display the details of each item, including its current availability status. This task will test your understanding of object-oriented programming concepts including inheritance, polymorphism, encapsulation, and abstraction.","solution":"from abc import ABC, abstractmethod class LibraryItem(ABC): def __init__(self, title, identifier): self._title = title self._identifier = identifier self._is_borrowed = False @abstractmethod def borrow_item(self): pass @abstractmethod def return_item(self): pass def get_title(self): return self._title def get_identifier(self): return self._identifier def is_borrowed(self): return self._is_borrowed class Book(LibraryItem): def __init__(self, title, identifier, author): super().__init__(title, identifier) self._author = author def borrow_item(self): if not self._is_borrowed: self._is_borrowed = True return True return False def return_item(self): if self._is_borrowed: self._is_borrowed = False return True return False def get_author(self): return self._author class Magazine(LibraryItem): def __init__(self, title, identifier, issue_number): super().__init__(title, identifier) self._issue_number = issue_number def borrow_item(self): if not self._is_borrowed: self._is_borrowed = True return True return False def return_item(self): if self._is_borrowed: self._is_borrowed = False return True return False def get_issue_number(self): return self._issue_number class DVD(LibraryItem): def __init__(self, title, identifier, duration): super().__init__(title, identifier) self._duration = duration def borrow_item(self): if not self._is_borrowed: self._is_borrowed = True return True return False def return_item(self): if self._is_borrowed: self._is_borrowed = False return True return False def get_duration(self): return self._duration # Demonstration of borrowing and returning items item1 = Book(\\"1984\\", \\"B001\\", \\"George Orwell\\") item2 = Magazine(\\"National Geographic\\", \\"M001\\", 202) item3 = DVD(\\"Inception\\", \\"D001\\", 148) item1.borrow_item() item2.return_item() item3.borrow_item() print(f\\"Title: {item1.get_title()}, Identifier: {item1.get_identifier()}, Author: {item1.get_author()}, Borrowed: {item1.is_borrowed()}\\") print(f\\"Title: {item2.get_title()}, Identifier: {item2.get_identifier()}, Issue Number: {item2.get_issue_number()}, Borrowed: {item2.is_borrowed()}\\") print(f\\"Title: {item3.get_title()}, Identifier: {item3.get_identifier()}, Duration: {item3.get_duration()} mins, Borrowed: {item3.is_borrowed()}\\") item1.return_item() item3.return_item() print(\\"--- After Returning ---\\") print(f\\"Borrowed: {item1.is_borrowed()}\\") print(f\\"Borrowed: {item3.is_borrowed()}\\")"},{"question":"Write a Python function that takes two lists of integers as input and returns a list containing the elements that are present in both lists. Your function should handle lists of different lengths and should not include duplicate elements in the result. **Function Signature:** ```python def find_common_elements(list1, list2): pass ``` **Example:** ```python list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] print(find_common_elements(list1, list2)) # Output: [4, 5] ``` **Constraints:** - The elements in the input lists will be integers in the range -100 to 100. - The input lists may contain up to 1000 elements.","solution":"def find_common_elements(list1, list2): Returns a list containing the elements that are present in both list1 and list2, without duplicates. # Convert both lists to sets to remove duplicates and find common elements set1 = set(list1) set2 = set(list2) # Find the intersection of both sets common_elements = set1.intersection(set2) # Convert the set of common elements back to a list return list(common_elements)"},{"question":"You are tasked with developing an algorithm to determine the optimal allocation of resources in a disaster recovery scenario. Given a list of affected zones and a set of available resources (like food, water, medical supplies, and shelter materials), create a plan that maximizes the efficiency of resource distribution under certain constraints. Each zone has a specific requirement for each type of resource and a priority level indicating the urgency of aid needed. Your solution should: 1. Implement a greedy algorithm that allocates resources based on the priority level of each zone. 2. Include a fallback mechanism to redistribute resources if the initial allocation does not meet all minimum requirements due to resource shortages. 3. Calculate the total satisfaction score, which is a weighted sum of the fulfilled requirements with respect to their priorities. 4. Optimize the solution by using dynamic programming or linear programming techniques to ensure the most critical zones receive necessary aid first, while making the best use of limited resources. Evaluate your algorithm using various test scenarios, emphasizing edge cases like severe imbalance between resource demand and supply and areas with overlapping resource needs. Provide a comprehensive analysis of the algorithm\'s performance and its computational complexity.","solution":"# Implementation of the solution based on the given task specification import heapq def allocate_resources(zones, available_resources): Allocate resources to zones based on priority using a greedy algorithm. zones: List of dictionaries representing each zone with a requirement and priority. Example: [{\'zone\': \'A\', \'priority\': 5, \'requirements\': {\'food\': 10, \'water\': 20}}, ...] available_resources: Dictionary representing available resources. Example: {\'food\': 100, \'water\': 50, \'medical\': 30, \'shelter\': 20} Returns: A list of allocation plans and the total satisfaction score. # Create a max-heap based on priority zones = sorted(zones, key=lambda x: -x[\'priority\']) allocation_plan = [] total_satisfaction_score = 0 # First pass: Allocate resources based on priority for zone in zones: allocation = {} satisfaction = 0 for resource, req_amount in zone[\'requirements\'].items(): if available_resources.get(resource, 0) >= req_amount: allocation[resource] = req_amount available_resources[resource] -= req_amount satisfaction += req_amount * zone[\'priority\'] else: allocation[resource] = available_resources.get(resource, 0) satisfaction += available_resources.get(resource, 0) * zone[\'priority\'] available_resources[resource] = 0 allocation_plan.append({ \'zone\': zone[\'zone\'], \'allocation\': allocation }) total_satisfaction_score += satisfaction return allocation_plan, total_satisfaction_score"},{"question":"Implement a function called `arrayMerger` which takes two lists as input. The function should merge these lists by alternating elements from each list to produce a new list. If one list is shorter, append the remaining elements from the longer list at the end. For example, given the lists `[1, 2, 3]` and `[\'a\', \'b\', \'c\', \'d\']`, the result should be `[1, \'a\', 2, \'b\', 3, \'c\', \'d\']`. Ensure your solution is efficient and works for any list sizes. ```python def arrayMerger(list1, list2): merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): merged_list.append(list1[i]) merged_list.append(list2[j]) i += 1 j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list # Example usage: # arrayMerger([1, 2, 3], [\'a\', \'b\', \'c\', \'d\']) should return [1, \'a\', 2, \'b\', 3, \'c\', \'d\'] ```","solution":"def arrayMerger(list1, list2): Merges two lists by alternating elements from each list. If one list is shorter, append the remaining elements from the longer list at the end. Parameters: - list1: First list - list2: Second list Returns: - merged_list: A new list with elements alternated from list1 and list2 merged_list = [] i, j = 0, 0 # Interleave elements from both lists while i < len(list1) and j < len(list2): merged_list.append(list1[i]) merged_list.append(list2[j]) i += 1 j += 1 # Append remaining elements from the longer list while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are provided with a list of transactions where each transaction is represented as a dictionary with the keys: \\"date\\", \\"amount\\", \\"type\\", and \\"category\\". Write a function that calculates the total expenditure for each category in a given month and returns the result as a dictionary. The function should have the following signature: ```python def calculate_monthly_expenditure(transactions: list, month: str, year: int) -> dict: ``` Input: - transactions: A list of dictionaries, where each dictionary represents a transaction with the keys \\"date\\" (as a string in the format \\"YYYY-MM-DD\\"), \\"amount\\" (a floating point number), \\"type\\" (either \\"credit\\" or \\"debit\\"), and \\"category\\" (a string). - month: A string representing the target month in the format \\"MM\\". - year: An integer representing the target year. Output: - A dictionary where the keys are categories and the values are the total expenditure (as a floating point number) for each category in the given month. Only include categories with transactions in the given month. Sample input: ```python transactions = [ {\\"date\\": \\"2023-01-15\\", \\"amount\\": 100.0, \\"type\\": \\"debit\\", \\"category\\": \\"food\\"}, {\\"date\\": \\"2023-01-20\\", \\"amount\\": 150.0, \\"type\\": \\"debit\\", \\"category\\": \\"entertainment\\"}, {\\"date\\": \\"2023-02-10\\", \\"amount\\": 200.0, \\"type\\": \\"debit\\", \\"category\\": \\"utilities\\"}, {\\"date\\": \\"2023-01-30\\", \\"amount\\": 50.0, \\"type\\": \\"debit\\", \\"category\\": \\"food\\"}, {\\"date\\": \\"2023-01-25\\", \\"amount\\": 300.0, \\"type\\": \\"credit\\", \\"category\\": \\"salary\\"}, {\\"date\\": \\"2023-01-28\\", \\"amount\\": 20.0, \\"type\\": \\"debit\\", \\"category\\": \\"transport\\"} ] month = \\"01\\" year = 2023 ``` Sample output: ```python { \\"food\\": 150.0, \\"entertainment\\": 150.0, \\"transport\\": 20.0 } ``` Explanation: In January 2023, the total expenditure for \\"food\\" is 150.0 (100.0 + 50.0), for \\"entertainment\\" is 150.0, and for \\"transport\\" is 20.0. Only \\"debit\\" transactions are considered as expenditure.","solution":"def calculate_monthly_expenditure(transactions: list, month: str, year: int) -> dict: Calculate the total expenditure for each category in the given month and year. Parameters: transactions (list): A list of transaction dictionaries. month (str): The target month in the format \\"MM\\". year (int): The target year. Returns: dict: A dictionary where keys are categories and values are the total expenditure for each category. expenditure = {} for transaction in transactions: date = transaction[\\"date\\"] trans_year, trans_month, _ = date.split(\\"-\\") trans_year = int(trans_year) trans_month = trans_month if trans_year == year and trans_month == month and transaction[\\"type\\"] == \\"debit\\": category = transaction[\\"category\\"] amount = transaction[\\"amount\\"] if category in expenditure: expenditure[category] += amount else: expenditure[category] = amount return expenditure"},{"question":"Create a Python function that takes in a list of integers and returns a dictionary with two keys, \\"even\\" and \\"odd\\". The value for each key should be a list of integers from the input that are even and odd respectively. The function should also return the ratio of the sum of even numbers to the sum of odd numbers as a float. Example input: [12, 45, 23, 8, 16, 7, 14] Expected output: {\'even\': [12, 8, 16, 14], \'odd\': [45, 23, 7]}, ratio: 2.148","solution":"def segregate_and_calculate_ratio(numbers): Segregates the input list of integers into even and odd numbers and returns a dictionary with keys \'even\' and \'odd\'. Also returns the ratio of the sum of even numbers to the sum of odd numbers. even = [num for num in numbers if num % 2 == 0] odd = [num for num in numbers if num % 2 != 0] sum_even = sum(even) sum_odd = sum(odd) ratio = sum_even / sum_odd if sum_odd != 0 else float(\'inf\') return {\'even\': even, \'odd\': odd}, ratio"},{"question":"Write a function that takes in a list of integers and returns a dictionary where the keys are the integers and the values are the frequencies of those integers in the list. Ensure your function can handle an empty list and large ranges of integers.","solution":"def frequency_counter(lst): Returns a dictionary where the keys are the integers from the list and the values are the frequencies of those integers in the list. frequency = {} for number in lst: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 return frequency"},{"question":"Create a function that receives an integer \'n\' and a list of integers. The function should return a new list containing only the even numbers from the original list, each multiplied by the square of \'n\'. For example, if the input list is [1, 2, 3, 4, 5] and \'n\' is 3, the output should be [18, 36] because 2*3^2 = 18 and 4*3^2 = 36.","solution":"def transform_list(n, lst): Receives an integer \'n\' and a list of integers \'lst\'. Returns a new list containing only the even numbers from the original list, each multiplied by the square of \'n\'. return [x * (n ** 2) for x in lst if x % 2 == 0]"},{"question":"Design a code blueprint for the suggested operation: def valid_bracket_sequence(s): \'\'\' Create a function that determines whether the given string s is a valid sequence of brackets. A bracket sequence is considered valid if every open bracket has a corresponding closing bracket and the pairs are properly nested. The function should return True if the sequence is valid, otherwise return False. Example valid_bracket_sequence(\\"()\\") ➞ True # Each open bracket has a corresponding closing bracket and they are properly nested. valid_bracket_sequence(\\"([{}])\\") ➞ True # Each type of bracket is properly matched and nested. valid_bracket_sequence(\\"(]\\") ➞ False # The closing bracket `]` does not match the opening bracket `(`. valid_bracket_sequence(\\"([)]\\") ➞ False # The bracket pairs are not properly nested as `)` closes before `]`. \'\'\'","solution":"def valid_bracket_sequence(s): Determine whether the given string s is a valid sequence of brackets. :param s: String composed of brackets \'()\', \'[]\', \'{}\' :return: True if the sequence is valid, False otherwise stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if not stack or bracket_map[char] != stack.pop(): return False else: # Invalid character return False return not stack"},{"question":"Write a Python function that takes a list of integers as input and returns a list of those integers sorted in ascending order, but only include the integers that are even.","solution":"def sort_even_numbers(int_list): Returns a list of sorted even numbers from the input list. Params: int_list (list of int): The list of integers to process. Returns: list of int: The list of sorted even integers. even_numbers = [num for num in int_list if num % 2 == 0] return sorted(even_numbers)"},{"question":"Create a Python class named \'Library\' to simulate a basic library management system. The system should support the following functionalities: - Adding a new book to the library with the book\'s title, author, and ISBN. - Removing a book from the library by its ISBN number. - Searching for a book by its title or author. - Displaying all books currently available in the library. Each book should be represented as a dictionary with keys: title, author, and ISBN. For better understanding and testing, include sample data and demonstrate the functionality of each method. Below is a small piece of code that attempts to implement some of the functionalities but contains some errors. Review the code, identify the bugs, and correct them while designing your solution: ```python class Library: def __init__(self): self.books = [] def add_book(self, title, author, isbn): book = {\'title\': title, \'author\': author, \'ISBN\': isbn} self.books.append(book) def remove_book(self, isbn): for book in self.books: if book[\'ISBN\'] == isbn: self.books.remove(book) return print(\\"Book not found!\\") def search_book(self, search_term): results = [] for book in self.books: if search_term in book[\'title\'] or search_term in book[\'author\']: results.append(book) return results def display_books(self): if not self.books: print(\\"No books in the library\\") for book in self.books: print(f\'Title: {book[\\"title\\"]}, Author: {book[\\"author\\"]}, ISBN: {book[\\"ISBN\\"]}\') ```","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, isbn): Adds a new book to the library with the given title, author, and ISBN. book = {\'title\': title, \'author\': author, \'ISBN\': isbn} self.books.append(book) def remove_book(self, isbn): Removes a book from the library by its ISBN number. for book in self.books: if book[\'ISBN\'] == isbn: self.books.remove(book) return print(\\"Book not found!\\") def search_book(self, search_term): Searches for books by title or author. results = [ book for book in self.books if search_term.lower() in book[\'title\'].lower() or search_term.lower() in book[\'author\'].lower() ] return results def display_books(self): Displays all books currently available in the library. if not self.books: print(\\"No books in the library\\") for book in self.books: print(f\'Title: {book[\\"title\\"]}, Author: {book[\\"author\\"]}, ISBN: {book[\\"ISBN\\"]}\')"},{"question":"Simplify the given algebraic expression and factor the resulting polynomial completely: ( 4x^2 - 12x + 9 - (2x - 3)^2 ).","solution":"def simplify_expression(): Simplifies the algebraic expression 4x^2 - 12x + 9 - (2x - 3)^2 and factors the resulting polynomial completely. from sympy import symbols, simplify, factor # Define the variable x = symbols(\'x\') # Define the expression expression = 4*x**2 - 12*x + 9 - (2*x - 3)**2 # Simplify the expression simplified_expr = simplify(expression) # Factor the simplified expression factored_expr = factor(simplified_expr) # Return the factorized form return factored_expr"},{"question":"Write a function that takes a list of integers and returns a new list with each element being the cumulative product of the elements up to that position. The cumulative product of a list is a transformation where the first element is the same, and each subsequent element is the product of all previous elements including itself. For example, given the list `[1, 2, 3, 4]`, your function should return `[1, 2, 6, 24]`. If the input list is empty, return an empty list. ```python def cumulative_product(lst): pass ```","solution":"def cumulative_product(lst): Given a list of integers, returns a new list with each element being the cumulative product of the elements up to that position. Parameters: lst (list): A list of integers. Returns: list: A list of integers representing the cumulative product. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): result.append(result[-1] * lst[i]) return result"},{"question":"Write a Python function to implement a basic version of the \\"FizzBuzz\\" game up to a given number `n`. The function should print \\"Fizz\\" for multiples of 3, \\"Buzz\\" for multiples of 5, and \\"FizzBuzz\\" for multiples of both 3 and 5. For all other numbers, print the number itself. The function should also handle invalid input (such as negative numbers or non-integer types) gracefully by raising a ValueError with an appropriate message. Ensure the function is optimized and follows best coding practices.","solution":"def fizzbuzz(n): Prints the FizzBuzz sequence up to the given number n. Arguments: n : int : The upper bound of the FizzBuzz sequence to generate. Returns: None Raises: ValueError: If n is not a positive integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n <= 0: raise ValueError(\\"Input must be a positive integer\\") for i in range(1, n + 1): output = \'\' if i % 3 == 0: output += \'Fizz\' if i % 5 == 0: output += \'Buzz\' if not output: output = str(i) print(output)"},{"question":"Create a Python class that manages a dictionary of student names and their corresponding grades. The class should have three methods: 1. `add_student`: This method takes a student name and grade and adds it to the dictionary. 2. `compute_average`: This method computes and returns the average grade of all students. Handle cases where there are no students or grades that are not valid numbers. 3. `get_student_grade`: This method takes a student name as input and returns the student\'s grade if they exist in the dictionary. Here\'s a piece of code with some errors. You have to debug this as well: ```python class StudentGrades: def __init__(self): self.students = [] def add_student(self, name, grade): self.students[name] = grade def compute_average(self): try: return sum(self.students.values()) / len(self.students) except: return 0 def get_student_grade(self, name): return self.students[name] if name in self.students else None ``` Test the performance and robustness of your class with the following test cases: Add students: - Name: \'Alice\', Grade: 85 - Name: \'Bob\', Grade: 92 - Name: \'Charlie\', Grade: \'Invalid\' - Name: \'Diana\', Grade: 76 Compute average with valid grades: - Expected average: 84.33 (for Alice, Bob, and Diana) Compute average with no students: - Expected Result: 0 Get student grade: - For existing student \'Bob\': 92 - For non-existing student \'Eve\': None","solution":"class StudentGrades: def __init__(self): self.students = {} def add_student(self, name, grade): try: grade = float(grade) self.students[name] = grade except ValueError: pass # Invalid grade ignored def compute_average(self): valid_grades = [grade for grade in self.students.values() if isinstance(grade, (int, float))] if valid_grades: return sum(valid_grades) / len(valid_grades) return 0 def get_student_grade(self, name): return self.students[name] if name in self.students else None"},{"question":"Write a function that takes a string as an input and checks if it is a valid palindrome while ignoring non-alphanumeric characters and case differences. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). The function should: - Normalize the string by converting all letters to lowercase. - Remove all non-alphanumeric characters. - Check if the cleaned string is the same forward and backward. - Return `True` if the string is a palindrome, and `False` otherwise. For example: - Given the input string `\\"A man, a plan, a canal, Panama\\"`, the function should return `True`. - Given the input string `\\"race a car\\"`, the function should return `False`.","solution":"def is_palindrome(s): Checks if the input string is a palindrome, ignoring case and non-alphanumeric characters. # Normalize the string by converting it to lowercase normalized_string = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the normalized string is the same forward and backward return normalized_string == normalized_string[::-1]"},{"question":"Create a function that takes as input a JSON object representing a collection of products, each with multiple attributes such as name, category, price, and stock quantity. The function should output a list of product names that fall under a specific category and have a stock quantity above a specified threshold. The function should allow the user to specify both the category and the stock quantity threshold as inputs. Consider the below JSON object as input: ```json { \\"products\\": [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 999.99, \\"stock\\": 10}, {\\"name\\": \\"Smartphone\\", \\"category\\": \\"Electronics\\", \\"price\\": 699.99, \\"stock\\": 15}, {\\"name\\": \\"Vacuum Cleaner\\", \\"category\\": \\"Home Appliances\\", \\"price\\": 199.99, \\"stock\\": 5}, {\\"name\\": \\"Desk Lamp\\", \\"category\\": \\"Furniture\\", \\"price\\": 49.99, \\"stock\\": 20}, {\\"name\\": \\"Electric Kettle\\", \\"category\\": \\"Home Appliances\\", \\"price\\": 39.99, \\"stock\\": 30} ] } ``` An example call to the function could be: `get_products_in_category_with_stock(products_json, \\"Home Appliances\\", 10)` And the output should be: `[\\"Electric Kettle\\"]`","solution":"import json def get_products_in_category_with_stock(products_json, category, stock_threshold): Returns a list of product names that fall under the specified category and have a stock quantity above the specified threshold. Parameters: - products_json (str): A JSON object string representing a collection of products. - category (str): The category to filter products by. - stock_threshold (int): The minimum stock quantity required for the products. Returns: - list: A list of product names that meet the specified criteria. products = json.loads(products_json)[\'products\'] result = [product[\'name\'] for product in products if product[\'category\'] == category and product[\'stock\'] > stock_threshold] return result"},{"question":"Design a function that processes a list of integers and returns a new list containing only the elements that are even and greater than a given threshold. input_list = [5, 12, 7, 20, 15, 32] threshold = 10","solution":"def filter_even_and_greater_than(input_list, threshold): Returns a list of elements that are even and greater than the given threshold. Parameters: - input_list: List of integers - threshold: Integer threshold Returns: - List of integers that are even and greater than the threshold return [x for x in input_list if x % 2 == 0 and x > threshold] # Example usage: input_list = [5, 12, 7, 20, 15, 32] threshold = 10 print(filter_even_and_greater_than(input_list, threshold)) # Output: [12, 20, 32]"},{"question":"Write a function `is_anagram` that takes two strings as input and returns `True` if they are anagrams of each other, and `False` otherwise. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" and \\"silent\\". You can ignore spaces, punctuation, and case differences. Feel free to use any standard library functions or methods as needed. Example: ``` is_anagram(\\"Dormitory\\", \\"dirty room\\") => True is_anagram(\\"astronomer\\", \\"moon starer\\") => True is_anagram(\\"hello\\", \\"world\\") => False ```","solution":"def is_anagram(str1, str2): Checks if two strings are anagrams of each other, ignoring spaces, punctuation, and case differences. import re # Remove all non-alphanumeric characters and convert to lower case clean_str1 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str1).lower() clean_str2 = re.sub(r\'[^a-zA-Z0-9]\', \'\', str2).lower() # Check if sorted characters of both strings are the same return sorted(clean_str1) == sorted(clean_str2)"},{"question":"You are given a list of city names and their respective distances from each other. The distances are given as a list of tuples `[city1, city2, distance]`, where `distance` represents the number of units between `city1` and `city2`. You need to find the minimum total distance to visit all the given cities starting from a specific city. Write a function `min_travelling_distance(cities: List[str], distances: List[Tuple[str, str, int]], start_city: str) -> int`, which will return the minimum total distance required to visit all the cities starting from `start_city` and returning to it, in case there\'s no way to visit all the cities return -1. Example 1: Input: cities = [\\"A\\", \\"B\\", \\"C\\"], distances = [(\\"A\\", \\"B\\", 5), (\\"B\\", \\"C\\", 4), (\\"C\\", \\"A\\", 3)], start_city = \\"A\\" Output: 12 Example 2: Input: cities = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"], distances = [(\\"A\\", \\"B\\", 1), (\\"B\\", \\"C\\", 2), (\\"C\\", \\"D\\", 3), (\\"D\\", \\"A\\", 4)], start_city = \\"A\\" Output: 10 Example 3: Input: cities = [\\"A\\", \\"B\\"], distances = [(\\"A\\", \\"B\\", 6)], start_city = \\"A\\" Output: 12 Example 4: Input: cities = [\\"A\\", \\"B\\", \\"C\\"], distances = [(\\"A\\", \\"B\\", 5), (\\"B\\", \\"C\\", 2)], start_city = \\"A\\" Output: -1 Constraints: `1 <= cities.length <= 10` `distances.length <= 45` `0 <= distance <= 100`","solution":"from typing import List, Tuple def min_travelling_distance(cities: List[str], distances: List[Tuple[str, str, int]], start_city: str) -> int: from itertools import permutations city_indices = {city: i for i, city in enumerate(cities)} n = len(cities) # Construct adjacency matrix dist_matrix = [[float(\'inf\')] * n for _ in range(n)] for u, v, dist in distances: ui, vi = city_indices[u], city_indices[v] dist_matrix[ui][vi] = dist dist_matrix[vi][ui] = dist for i in range(n): dist_matrix[i][i] = 0 def calculate_path_length(path): length = 0 for i in range(len(path) - 1): if dist_matrix[path[i]][path[i+1]] == float(\'inf\'): return float(\'inf\') length += dist_matrix[path[i]][path[i+1]] # Return to the start city if dist_matrix[path[-1]][path[0]] == float(\'inf\'): return float(\'inf\') length += dist_matrix[path[-1]][path[0]] return length start_index = city_indices[start_city] min_distance = float(\'inf\') for perm in permutations(range(n)): if perm[0] == start_index: distance = calculate_path_length(perm) if distance < min_distance: min_distance = distance return min_distance if min_distance != float(\'inf\') else -1"},{"question":"Rotated Array Minimum Description: Given an array `nums` that has been rotated at an unknown pivot (a rotation involves taking the elements from the front of the array and moving them to the back), find the minimum element in the array. The array was originally sorted in ascending order. For example, the array `[0,2,4,5,6,7,1]` was rotated to `[5,6,7,0,2,4]`. Since this array is rotated, the minimum element is `0`. Example 1: Input: nums = [4,5,6,7,0,1,2] Output: 0 Example 2: Input: nums = [3,4,5,1,2] Output: 1 Example 3: Input: nums = [1] Output: 1 Note: - The `nums` array must contain at least one element. - You must write an algorithm that runs in `O(log n)` time.","solution":"def find_min(nums): Finds the minimum element in a rotated sorted array. Args: nums (list of int): The rotated sorted array. Returns: int: The minimum element in the array. left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Create a function that takes an integer as input and returns its English representation as a string. For example, if the input is `42`, the function should return `\\"forty-two\\"`. The function should handle numbers from `0` to `999`. Additionally, include logic to manage edge cases such as negative numbers (returning `\\"negative\\"` followed by the number\'s English representation) and non-integer inputs (returning an appropriate error message).","solution":"def number_to_words(n): Returns the English representation of the given integer. Handles numbers from 0 to 999, supports negative numbers by prefixing \\"negative\\", and returns an error for non-integer inputs. if not isinstance(n, int): return \\"Error: Input is not an integer\\" if n < 0: return \\"negative \\" + number_to_words(-n) units = [\\"zero\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] hundreds = [\\"\\", \\"one hundred\\", \\"two hundred\\", \\"three hundred\\", \\"four hundred\\", \\"five hundred\\", \\"six hundred\\", \\"seven hundred\\", \\"eight hundred\\", \\"nine hundred\\"] if n < 10: return units[n] elif n < 20: return teens[n-10] elif n < 100: return tens[n // 10] + (\\"-\\" + units[n % 10] if n % 10 != 0 else \\"\\") else: remainder = n % 100 return hundreds[n // 100] + (\\" \\" + number_to_words(remainder) if remainder != 0 else \\"\\")"},{"question":"Erin has a total of 24 books. She decides to divide her collection equally among 4 friends. Each friend, in turn, donates half of their received books to a local library. How many books does each friend end up keeping for themselves after their donation?","solution":"def books_after_donation(total_books, friends): Calculates the number of books each friend keeps after donating half of their received books. :param total_books: Total number of books Erin has :param friends: Number of friends among whom the books are to be divided :return: Number of books each friend keeps after their donation # Each friend receives an equal number of books books_per_friend = total_books // friends # Each friend donates half of their received books books_donated_per_friend = books_per_friend // 2 # Books kept by each friend books_kept_per_friend = books_per_friend - books_donated_per_friend return books_kept_per_friend"},{"question":"Implement a function to validate JSON data against a given schema and check for the required and optional fields. The JSON data should be inspected to ensure it includes all mandatory fields and adheres to the data type specified for each field. Additionally, count the occurrences of each type of data in the JSON structure. A sample schema and JSON data are provided below: Sample Schema: ``` { \\"name\\": \\"string\\", // mandatory \\"age\\": \\"number\\", // mandatory \\"email\\": \\"string\\", // optional \\"address\\": \\"object\\" // mandatory } ``` Sample JSON Data: ``` { \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"address\\": { \\"street\\": \\"1234 Elm Street\\", \\"city\\": \\"Exampleville\\", \\"zip\\": \\"12345\\" } } ``` Your task involves writing a function that: 1. Validates whether the JSON data conforms to the schema, ensuring all required fields are present with the correct data type. 2. Identifies and counts the occurrences of each data type (e.g., string, number, object) in the JSON data. The function should return an error message if the JSON data does not meet the requirements of the schema, and a summary of the data types\' occurrences if validation is successful.","solution":"def validate_json(json_data, schema): Validates JSON data against a given schema and counts occurrences of each data type. :param json_data: Dictionary containing JSON data to be validated :param schema: Dictionary containing schema to validate against :return: Tuple containing a validation status (True/False), and either an error message or data type summary from collections import defaultdict def check_type(data, expected_type): if expected_type == \\"number\\": return isinstance(data, (int, float)) elif expected_type == \\"string\\": return isinstance(data, str) elif expected_type == \\"object\\": return isinstance(data, dict) return False def count_data_types(data, counts): if isinstance(data, dict): counts[\'object\'] += 1 for key, value in data.items(): count_data_types(value, counts) elif isinstance(data, str): counts[\'string\'] += 1 elif isinstance(data, (int, float)): counts[\'number\'] += 1 elif isinstance(data, list): counts[\'array\'] += 1 for item in data: count_data_types(item, counts) # Validate schema for key, expected_type in schema.items(): if expected_type.endswith(\\"?\\"): expected_type = expected_type[:-1] if key not in json_data: continue if key not in json_data: return False, f\\"Missing mandatory field: {key}\\" if not check_type(json_data[key], expected_type): return False, f\\"Incorrect type for field \'{key}\'. Expected {expected_type}.\\" # Count occurrences of each type counts = defaultdict(int) count_data_types(json_data, counts) return True, counts"},{"question":"Write a function in Python that takes a list of integers and an integer `k`, and returns a new list where each element is the sum of `k` consecutive elements from the original list. If there are not enough elements to form a group of `k`, the remaining elements should be included as they are. **Function Signature:** ```python def sum_consecutive_elements(nums: List[int], k: int) -> List[int]: pass ``` **Example:** ```python # Example 1: nums = [1, 2, 3, 4, 5] k = 3 sum_consecutive_elements(nums, k) # Output: [6, 9, 5] # Explanation: The first group is [1, 2, 3] with sum=6, the second group is [4, 5] with sum=9, and the last group has sum=5. # Example 2: nums = [10, 20, 30, 40, 50, 60] k = 2 sum_consecutive_elements(nums, k) # Output: [30, 70, 110, 60] # Explanation: The groups are [10, 20], [30, 40], [50, 60], and the remaining single element is 60. ``` **Constraints:** 1. The length of the list nums is between 1 and 1000. 2. Each element in nums is between -1000 and 1000. 3. `k` is a positive integer that is at least 1 and at most the length of `nums`.","solution":"def sum_consecutive_elements(nums, k): Given a list of integers and an integer k, returns a new list where each element is the sum of k consecutive elements from the original list. result = [] for i in range(0, len(nums), k): result.append(sum(nums[i:i + k])) return result"},{"question":"You are required to develop a software tool that helps organize and manage contacts efficiently. The core functionality of your software should include the ability to add, edit, delete, and search for contacts. Each contact should store essential information including name, phone number, email address, and a tag that categorizes the contact (e.g., friend, colleague, family). Additionally, implement a feature to export contacts in a CSV format. The tool should be able to import contacts from a CSV file, ensuring that duplicate entries are managed effectively (by either merging them or skipping the duplicates based on user preference). Your software should provide a user-friendly command-line interface (CLI) with clear prompts and feedback messages. Furthermore, incorporate error handling to manage inputs such as invalid email formats, non-numeric phone numbers, and any issues during the import/export processes. Lastly, ensure that the data persists between sessions by storing it in a suitable file format (e.g., JSON, XML, or SQLite database). You may use external libraries for file handling and input validation to maintain code readability and reliability. Write a program that provides this functionality, ensuring adherence to best coding practices and efficiency in handling a large number of contacts.","solution":"import csv import json import re class Contact: def __init__(self, name, phone, email, tag): self.name = name self.phone = phone self.email = email self.tag = tag def to_dict(self): return {\\"name\\": self.name, \\"phone\\": self.phone, \\"email\\": self.email, \\"tag\\": self.tag} class ContactManager: def __init__(self, storage_file=\'contacts.json\'): self.contacts = [] self.storage_file = storage_file self.load_contacts() def add_contact(self, name, phone, email, tag): if not self.validate_email(email): raise ValueError(\\"Invalid email format\\") if not phone.isdigit(): raise ValueError(\\"Phone number must be numeric\\") contact = Contact(name, phone, email, tag) self.contacts.append(contact) self.save_contacts() def edit_contact(self, index, name=None, phone=None, email=None, tag=None): if index < 0 or index >= len(self.contacts): raise IndexError(\\"Contact index out of range\\") if email and not self.validate_email(email): raise ValueError(\\"Invalid email format\\") if phone and not phone.isdigit(): raise ValueError(\\"Phone number must be numeric\\") contact = self.contacts[index] if name: contact.name = name if phone: contact.phone = phone if email: contact.email = email if tag: contact.tag = tag self.save_contacts() def delete_contact(self, index): if index < 0 or index >= len(self.contacts): raise IndexError(\\"Contact index out of range\\") del self.contacts[index] self.save_contacts() def search_contacts(self, query): return [c.to_dict() for c in self.contacts if query.lower() in c.name.lower()] def export_contacts(self, csv_file): fields = [\'name\', \'phone\', \'email\', \'tag\'] with open(csv_file, \'w\', newline=\'\') as file: writer = csv.DictWriter(file, fieldnames=fields) writer.writeheader() for contact in self.contacts: writer.writerow(contact.to_dict()) def import_contacts(self, csv_file, merge=True): with open(csv_file, newline=\'\') as file: reader = csv.DictReader(file) for row in reader: if merge: if not any(c.email == row[\'email\'] for c in self.contacts): self.contacts.append(Contact(**row)) else: self.contacts.append(Contact(**row)) self.save_contacts() def save_contacts(self): with open(self.storage_file, \'w\') as file: json.dump([contact.to_dict() for contact in self.contacts], file) def load_contacts(self): try: with open(self.storage_file, \'r\') as file: contacts = json.load(file) self.contacts = [Contact(**c) for c in contacts] except (FileNotFoundError, json.JSONDecodeError): self.contacts = [] @staticmethod def validate_email(email): regex = r\'^b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\' return re.match(regex, email) is not None"},{"question":"You need to create a function that finds the longest common prefix string amongst an array of strings. For example: Input: [\\"flower\\",\\"flow\\",\\"flight\\"] Output: \\"fl\\" If there is no common prefix, return an empty string \\"\\".","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. Args: strs: A list of strings. Returns: The longest common prefix string. if not strs: return \\"\\" # Sort the list, the shortest string will be the prefix of a common prefix if there\'s one strs.sort() # Take the first and the last string in the sorted list first, last = strs[0], strs[-1] # Compare characters until they match i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Implement a function that takes a list of integers and returns a list of all duplicate elements. The returned list should be sorted in ascending order, and each duplicate should only appear once, even if it appears multiple times in the input list. ```python def find_duplicates(nums): # Your code here # Example usage: print(find_duplicates([4, 3, 2, 7, 8, 2, 3, 1])) # Output: [2, 3] ``` 1. Write a function `find_duplicates` that accepts a list of integers `nums`. 2. The function should identify all elements that appear more than once in `nums`. 3. The returned list should be sorted in ascending order and contain each duplicate element only once. 4. Consider edge cases, such as an empty list or a list with no duplicates. # Requirements: - Use appropriate data structures to keep track of duplicate elements efficiently. - Ensure the solution runs in optimal time complexity. - Provide test cases to validate your implementation.","solution":"def find_duplicates(nums): Identifies all elements that appear more than once in a list of integers. The returned list is sorted in ascending order and contains each duplicate element only once. duplicates = set() seen = set() for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) return sorted(duplicates)"},{"question":"Write a function that takes two strings as input and returns the longest common subsequence of those two strings. The subsequence does not need to be contiguous but should maintain the order of characters from the input strings. Aim for a solution with a time complexity of O(n * m), where n and m are the lengths of the two input strings. Provide sample input and output with your solution.","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence (LCS) of str1 and str2. n = len(str1) m = len(str2) # Create a 2D array to store the lengths of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp array for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS from dp array lcs = [] i, j = n, m while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs.append(str1[i - 1]) i -= 1 j -= 1 elif dp[i - 1][j] >= dp[i][j - 1]: i -= 1 else: j -= 1 return \'\'.join(reversed(lcs))"},{"question":"Design a Python script using the pandas library to process a large CSV file (over 1GB in size) without loading the entire file into memory. The script should read and process the data in chunks, filtering rows where a specific column meets a given condition, and then write the filtered results to a new CSV file. Ensure the script demonstrates efficient memory usage and robust error handling mechanisms for file operations.","solution":"import pandas as pd def process_large_csv(input_file, output_file, column_name, condition): Processes a large CSV file in chunks, filtering rows where a specific column meets a given condition, and writes the filtered results to a new CSV file. :param input_file: Path to the input CSV file. :param output_file: Path to the output CSV file. :param column_name: The name of the column to apply the filter condition on. :param condition: A function that takes a single argument and returns True if the row should be kept, otherwise False. chunk_size = 100000 # Number of rows per chunk (adjust as necessary) try: # Initialize the writing of the output CSV file first_chunk = True for chunk in pd.read_csv(input_file, chunksize=chunk_size): # Apply the filter condition to the chunk filtered_chunk = chunk[chunk[column_name].apply(condition)] # Write the filtered chunk to the output CSV file if first_chunk: filtered_chunk.to_csv(output_file, mode=\'w\', index=False) first_chunk = False else: filtered_chunk.to_csv(output_file, mode=\'a\', index=False, header=False) except Exception as e: print(f\\"An error occurred: {e}\\") # Function usage example: # process_large_csv(\'large_input.csv\', \'filtered_output.csv\', \'target_column\', lambda x: x > 0)"},{"question":"Write a function to reverse the words in a given sentence while maintaining the word order within the sentence. Example: \\"Hello world from AI\\" should become \\"olleH dlrow morf IA\\".","solution":"def reverse_words_in_sentence(sentence): Reverses each word in the given sentence while maintaining the word order. Parameters: sentence (str): The input sentence Returns: str: The sentence with each word reversed words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given a list of integers, write a Python function that groups these integers into two categories: - Group 1: Numbers that are prime. - Group 2: Numbers that are composite. The function should return a list containing two lists: the first list should contain all the prime numbers in ascending order, and the second list should contain all the composite numbers in descending order. If a number is neither prime nor composite (e.g., 1), it should be ignored. **Function Signature:** ```python def classify_numbers(numbers: List[int]) -> List[List[int]]: pass ``` **Input:** - A list of integers. **Output:** - A list of two lists: one with primes sorted in ascending order, and one with composites sorted in descending order. **Example:** ```python print(classify_numbers([4, 2, 5, 3, 9, 15, 1])) # Output should be: [[2, 3, 5], [15, 9, 4]] ``` **Notes:** - The list given in input can contain duplicate numbers, but the output lists should not contain duplicates. - Negative numbers and 0 should also be ignored in both groups.","solution":"from typing import List from math import isqrt def is_prime(n: int) -> bool: if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def classify_numbers(numbers: List[int]) -> List[List[int]]: primes = [] composites = [] seen_primes = set() seen_composites = set() for number in numbers: if number > 1: if is_prime(number): if number not in seen_primes: primes.append(number) seen_primes.add(number) else: if number not in seen_composites: composites.append(number) seen_composites.add(number) primes.sort() composites.sort(reverse=True) return [primes, composites]"},{"question":"You are given a list of integers representing the scores of participants in a competition. Your task is to write a Python function that calculates and returns the nth highest unique score from the list. If the nth highest unique score does not exist, the function should return None. The function signature is: ```python def nth_highest_score(scores: list, n: int) -> int: ``` # Requirements: 1. The list `scores` can contain duplicates. 2. If `n` is greater than the number of unique scores, return `None`. 3. If `n` is less than 1, return `None`. # Examples: ```python scores = [62, 85, 75, 85, 92, 75, 68, 92] n = 2 nth_highest_score(scores, n) ``` Output: `85` ```python scores = [62, 85, 75, 85, 92, 75, 68, 92] n = 4 nth_highest_score(scores, n) ``` Output: `68` ```python scores = [50, 20, 30, 80, 90] n = 5 nth_highest_score(scores, n) ``` Output: `50` ```python scores = [50, 20, 30, 80, 90] n = 10 nth_highest_score(scores, n) ``` Output: `None`","solution":"def nth_highest_score(scores, n): Returns the nth highest unique score from the list of scores. Parameters: scores (list): List of integer scores. n (int): The rank of the highest score to return. Returns: int: The nth highest unique score or None if it doesn\'t exist. if n < 1: return None unique_scores = sorted(set(scores), reverse=True) if n > len(unique_scores): return None return unique_scores[n - 1]"},{"question":"Write a function, `most_common_substring`, that takes in two arguments: a string `s` and an integer `k`, representing the length of the substring. The function should return the most common substring of length `k` found in the string `s`. If there are multiple substrings with the same highest frequency, return the lexicographically smallest one. Assume the inputs are such that s is at least k characters long. Example: ```python most_common_substring(\\"ababcbabab\\", 3) ``` Output: ``` \\"aba\\" ``` Explanation: - The substrings of length 3 are \\"aba\\", \\"bab\\", \\"abc\\", \\"bcb\\", \\"cba\\", \\"bab\\", \\"aba\\", and \\"bab\\". - \\"aba\\" appears 2 times, \\"bab\\" appears 3 times, and \\"abc\\", \\"bcb\\", and \\"cba\\" appear just once. - Since \\"bab\\" appears the most number of times (3), we return \\"bab\\".","solution":"def most_common_substring(s, k): Returns the most common substring of length k found in the string s. If there are multiple substrings with the same highest frequency, return the lexicographically smallest one. from collections import defaultdict # Dictionary to hold substring counts substring_count = defaultdict(int) # Populate the dictionary with substring frequencies for i in range(len(s) - k + 1): substring = s[i:i+k] substring_count[substring] += 1 # Find the most common substrings max_count = max(substring_count.values()) most_common_substrings = [key for key, value in substring_count.items() if value == max_count] # Return the lexicographically smallest substring return min(most_common_substrings)"},{"question":"You are tasked with creating a function that calculates the similarity between two text documents based on the Jaccard similarity coefficient. The Jaccard similarity coefficient is defined as the size of the intersection divided by the size of the union of the sample sets. This function should take two strings as input, tokenize them into words, and then compute the similarity. Function Specification: **Function Name**: `jaccard_similarity` **Parameters**: - `doc1` (str): The first document as a string. - `doc2` (str): The second document as a string. **Behavior**: 1. Tokenize both input strings into sets of words. 2. Compute the intersection of these sets. 3. Compute the union of these sets. 4. Calculate the Jaccard similarity coefficient: (size of intersection) / (size of union). 5. Return the Jaccard similarity coefficient as a float. **Example**: ```python def jaccard_similarity(doc1, doc2): # Tokenize the documents set1 = set(doc1.split()) set2 = set(doc2.split()) # Compute intersection and union intersection = set1.intersection(set2) union = set1.union(set2) # Calculate and return Jaccard similarity coefficient return len(intersection) / len(union) # Example usage doc1 = \\"the cat in the hat\\" doc2 = \\"the cat with a hat\\" print(jaccard_similarity(doc1, doc2)) # Output: 0.5 ```","solution":"def jaccard_similarity(doc1, doc2): Calculate the Jaccard similarity coefficient between two documents. Parameters: doc1 (str): The first document as a string. doc2 (str): The second document as a string. Returns: float: The Jaccard similarity coefficient. # Tokenize the documents set1 = set(doc1.split()) set2 = set(doc2.split()) # Compute intersection and union intersection = set1.intersection(set2) union = set1.union(set2) # Calculate and return Jaccard similarity coefficient if len(union) == 0: # To avoid division by zero return 1.0 return len(intersection) / len(union)"},{"question":"You are required to write a function named `roman_to_integer` that takes a string `roman` as an input. This string represents a number in Roman numeral format, and your function should convert it to its integer equivalent. Roman numerals are represented by the following symbols: - I : 1 - V : 5 - X : 10 - L : 50 - C : 100 - D : 500 - M : 1000 Roman numerals are usually written from largest to smallest from left to right. However, there are some exceptions: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Here are some examples: - Input: \\"III\\" -> Output: 3 - Input: \\"IV\\" -> Output: 4 - Input: \\"IX\\" -> Output: 9 - Input: \\"LVIII\\" -> Output: 58 - Input: \\"MCMXCIV\\" -> Output: 1994 **Function Signature** ```python def roman_to_integer(roman: str) -> int: pass ``` **Example Usage** ```python roman = \\"MCMXCIV\\" print(roman_to_integer(roman)) # Output: 1994 ``` **Constraints:** - The input `roman` is guaranteed to be within the range from 1 to 3999. - The input string will always be a valid Roman numeral and will be in uppercase. - Minimize the use of built-in functions to focus on algorithm implementation. - Handle edge cases efficiently.","solution":"def roman_to_integer(roman: str) -> int: Convert a string of Roman numerals to an integer. Arguments: roman : str : A string representing a number in Roman numeral format. Returns: int : The integer representation of the Roman numeral. roman_value_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } integer_value = 0 prev_value = 0 for char in reversed(roman): current_value = roman_value_map[char] if current_value < prev_value: integer_value -= current_value else: integer_value += current_value prev_value = current_value return integer_value"},{"question":"The objective of this problem is to practice handling collections, particularly dictionaries and lists, and understanding how to perform operations on them. You are required to write a function named `flatten_dict` which takes a dictionary with nested dictionaries and flattens it. The function `flatten_dict` should behave as follows: - It should take a dictionary as input. - It should recursively flatten nested dictionaries. - The keys in the flattened dictionary should be a concatenation of the nested keys, separated by the specified delimiter. This function is useful for scenarios where you need to simplify the structure of a nested dictionary for easier access or storage. Function Signature: ```python def flatten_dict(d, parent_key=\'\', sep=\'_\'): ``` Parameters: - `d` (dict): The dictionary to be flattened. - `parent_key` (str): The base key to be used during recursion for nested dictionaries, default is an empty string. - `sep` (str): The delimiter to use when concatenating keys, default is an underscore (`\'_\'`). Returns: - A flat dictionary with concatenated keys. Example Usage: ```python nested_dict = { \'a\': 1, \'b\': { \'c\': 2, \'d\': { \'e\': 3 } } } flatten_dict(nested_dict) # should return {\'a\': 1, \'b_c\': 2, \'b_d_e\': 3} ``` Requirements: - You must handle any level of nested dictionaries. - The function should handle cases where the nested dictionaries contain other nested dictionaries.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'_\'): Flattens a nested dictionary. Parameters: d (dict): The dictionary to be flattened. parent_key (str): The base key to be used during recursion for nested dictionaries, default is an empty string. sep (str): The delimiter to use when concatenating keys, default is an underscore (\'_\'). Returns: dict: A flattened dictionary with concatenated keys. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are required to write a function `find_cycle(graph_dict)` that detects a cycle in a directed graph represented as an adjacency list. # Input Parameters: 1. `graph_dict`: A dictionary where keys are node identifiers and values are lists of nodes indicating the directed edges from the key node. # Output: - The function should return a boolean value: - `True` if there is a cycle in the graph. - `False` otherwise. # Example: ```python graph_dict = { 1: [2], 2: [3, 4], 3: [5], 4: [5, 6], 5: [6], 6: [3] } find_cycle(graph_dict) ``` The function should return `True` for the above example because there is a cycle involving nodes 3, 5, and 6. # Constraints: - The graph represented by `graph_dict` can have any number of nodes and directed edges. - Self-loops (a node pointing to itself) are possible and should be considered as cycles. - The function should handle empty graphs, in which case it should return `False`.","solution":"def find_cycle(graph_dict): def dfs(node, visited, rec_stack): visited[node] = True rec_stack[node] = True for neighbor in graph_dict.get(node, []): if not visited[neighbor]: if dfs(neighbor, visited, rec_stack): return True elif rec_stack[neighbor]: return True rec_stack[node] = False return False visited = {node: False for node in graph_dict} rec_stack = {node: False for node in graph_dict} for node in graph_dict: if not visited[node]: if dfs(node, visited, rec_stack): return True return False"},{"question":"You are tasked with writing a Python function named `summarize_sales_data` that processes data from JSON files containing sales information for different products. The goal is to read the JSON files into dataframes, aggregate the sales data, and compute various summary statistics. The results should then be returned as a dictionary. **Requirements:** 1. The function will take the following parameters: - `json_file_paths`: A dictionary where keys are product names and values are file paths to JSON files containing sales data. - `aggregate_function`: A function that takes a dataframe as input and returns an aggregated value. 2. The JSON files contain at least the following columns: - `date`: Date of the sale in \'YYYY-MM-DD\' format - `units_sold`: Number of units sold - `revenue`: Revenue generated from the sale 3. The function should: - Read each product\'s data from respective JSON files using `pandas.read_json`. - Convert the `date` column to datetime using `pandas.to_datetime`. - Compute the total units sold and total revenue for each product. - Use the provided `aggregate_function` to compute additional summary statistics for each product. - Return a dictionary where keys are product names and values are dictionaries containing the computed statistics. # Example Function Call: ```python import pandas as pd json_file_paths = { \'product1\': \'path/to/product1.json\', \'product2\': \'path/to/product2.json\', \'product3\': \'path/to/product3.json\' } def aggregate_avg_revenue(df): return df[\'revenue\'].mean() summary_statistics = summarize_sales_data(json_file_paths, aggregate_avg_revenue) print(summary_statistics) ``` # Notes: - The provided `aggregate_function` will compute specific summary statistics. - The dictionary returned should have keys as product names and values as dictionaries with keys \'total_units_sold\', \'total_revenue\', and other calculated statistics. - Make sure to use the pandas `read_json` and `to_datetime` methods as described in the documentation.","solution":"import pandas as pd def summarize_sales_data(json_file_paths, aggregate_function): Processes sales data from JSON files and computes summary statistics. Parameters: - json_file_paths: dict A dictionary where keys are product names and values are file paths to JSON files containing sales data. - aggregate_function: function A function that takes a dataframe as input and returns an aggregated value. Returns: - summary_statistics: dict A dictionary where keys are product names and values are dictionaries containing the computed statistics. summary_statistics = {} for product, file_path in json_file_paths.items(): # Read JSON file into a DataFrame df = pd.read_json(file_path) # Convert \'date\' column to datetime df[\'date\'] = pd.to_datetime(df[\'date\']) # Compute total units sold and total revenue total_units_sold = df[\'units_sold\'].sum() total_revenue = df[\'revenue\'].sum() # Compute additional summary statistics using aggregate_function custom_aggregate = aggregate_function(df) # Store the computed values in the summary dictionary summary_statistics[product] = { \'total_units_sold\': total_units_sold, \'total_revenue\': total_revenue, \'custom_aggregate\': custom_aggregate } return summary_statistics"},{"question":"**Inventory Management System** In this exercise, you will simulate a basic inventory management system for a store. Your goal is to write a function `update_inventory` that updates the inventory based on sales and restocking activities. Specifically, the function should: 1. Take a dictionary `inventory` where keys are item names and values are quantities available. 2. Take a list of transactions `actions`, where each transaction is represented as a tuple `(action_type, item_name, quantity)`. - `action_type` can be `\'sell\'` (which decreases the inventory quantity) or `\'restock\'` (which increases the inventory quantity). - `item_name` is the name of the item. - `quantity` is the quantity of the item to be sold or restocked. 3. Update the inventory based on these actions. 4. Ensure that the quantity of any item never drops below zero. 5. Return the updated inventory as a dictionary. Here is a brief recap of the function signature: ```python def update_inventory(inventory, actions): Updates inventory based on a list of transactions. Parameters: - inventory: Dictionary representing the inventory with item names as keys and quantities as values. - actions: List of tuples representing actions, where each tuple contains: - action_type: \'sell\' or \'restock\' - item_name: Name of the item - quantity: Quantity of the item to be sold or restocked Returns: - updated_inventory: Dictionary representing the updated inventory. # code to implement ``` # Example Given the following inventory and actions: ```python inventory = { \'apple\': 50, \'banana\': 100, \'orange\': 75, } actions = [ (\'sell\', \'apple\', 20), (\'restock\', \'banana\', 50), (\'sell\', \'orange\', 80), (\'sell\', \'banana\', 20), (\'restock\', \'apple\', 10), ] ``` The function `update_inventory` should return: ```python { \'apple\': 40, \'banana\': 130, \'orange\': 0, } ``` # Requirements - Ensure that the inventory quantity does not fall below zero. - Update the inventory in place and return the final state. - Handle cases where the item in the action list may not exist in the initial inventory gracefully by ignoring such actions. Implement the function `update_inventory` based on the above description.","solution":"def update_inventory(inventory, actions): Updates inventory based on a list of transactions. Parameters: - inventory: Dictionary representing the inventory with item names as keys and quantities as values. - actions: List of tuples representing actions, where each tuple contains: - action_type: \'sell\' or \'restock\' - item_name: Name of the item - quantity: Quantity of the item to be sold or restocked Returns: - updated_inventory: Dictionary representing the updated inventory. for action_type, item_name, quantity in actions: if item_name not in inventory: continue if action_type == \'sell\': inventory[item_name] = max(0, inventory[item_name] - quantity) elif action_type == \'restock\': inventory[item_name] += quantity return inventory"},{"question":"You are required to process a series of daily temperature readings over a one-year period (365 days) and find the longest span of consecutive days during which the daily temperature remains more than a given threshold. Implement a function named `longest_warm_streak` that takes in a list of temperature readings `temps` (a list of floating-point numbers) and a floating-point threshold `threshold`. The function should return the length of the longest consecutive sequence of days where the temperature exceeds the given threshold. Function Signature ```python def longest_warm_streak(temps: list, threshold: float) -> int: ``` Requirements - The input list `temps` will always have exactly 365 elements. - Handle edge cases where there might be no days exceeding the threshold. # Example ```python # Example usage: temperature_readings = [23.5, 25.1, 22.8, 20.0, 18.5, 25.0, 26.3, ..., 24.1] # A list of 365 floating point values threshold = 24.0 result = longest_warm_streak(temperature_readings, threshold) print(result) # Output might look like: 5 ``` # Notes - Ensure the function correctly iterates through the list to find the longest streak of consecutive days where temperatures exceed the given threshold. - Consider performance optimizations suitable for the given constraints. - The function should handle all edge cases appropriately, including cases where no days exceed the threshold.","solution":"def longest_warm_streak(temps: list, threshold: float) -> int: Returns the length of the longest streak of consecutive days with temperatures above the given threshold. longest_streak = 0 current_streak = 0 for temp in temps: if temp > threshold: current_streak += 1 if current_streak > longest_streak: longest_streak = current_streak else: current_streak = 0 return longest_streak"},{"question":"You are required to write a function named `proc_special_string` that processes a special string according to specific rules. A \\"special string\\" consists of alphabetical characters and digits, where characters are always in lower case, and digits can be from 0 to 9. The function should perform the following operations: 1. Separate all the alphabetical characters from the digits. 2. Reverse the order of the collected alphabetical characters. 3. Sum up all the digits. 4. Return a tuple where: - The first element is the reversed alphabetical characters as a single string. - The second element is the sum of the digits. The `proc_special_string` function should accept one parameter: - `special_string` (str): The special string comprised of alphabetical characters and digits. **Function Signature:** ```python def proc_special_string(special_string: str) -> tuple: pass ``` **Constraints:** - The `special_string` will have at least one character and at most 100 characters. - The `special_string` can contain letters and numbers only (no spaces or special characters). **Example:** ```python assert proc_special_string(\\"a1b2c3\\") == (\\"cba\\", 6) assert proc_special_string(\\"abc123\\") == (\\"cba\\", 6) assert proc_special_string(\\"x9y8z7\\") == (\\"zyx\\", 24) ``` Your task is to implement this function while adhering to the given rules and constraints.","solution":"def proc_special_string(special_string: str) -> tuple: Processes the special string according to the specified rules. Args: special_string (str): The special string comprised of alphabetical characters and digits. Returns: tuple: A tuple where the first element is the reversed alphabetical characters as a single string, and the second element is the sum of the digits. letters = [] digit_sum = 0 for char in special_string: if char.isalpha(): letters.append(char) elif char.isdigit(): digit_sum += int(char) reversed_letters = \'\'.join(reversed(letters)) return (reversed_letters, digit_sum)"},{"question":"Sort a list of dictionaries based on a specified key and return the sorted list. The function should handle the cases where the key does not exist in some dictionaries by placing those dictionaries at the end of the list. The function should output: list: A sorted list of dictionaries based on the specified key. You should write self-contained code starting with: ``` def sort_dicts(dicts, key): ```","solution":"def sort_dicts(dicts, key): Sorts a list of dictionaries based on a specified key. Args: dicts (list): List of dictionaries to be sorted. key (str): The key to sort the dictionaries by. Returns: list: A sorted list of dictionaries. # Sort placing dicts without the key at the end return sorted(dicts, key=lambda d: (d.get(key) is None, d.get(key))) # Example usage: # dicts = [{\'id\': 3, \'name\': \'John\'}, {\'id\': 1}, {\'id\': 2, \'name\': \'Alice\'}] # key = \'name\' # sort_dicts(dicts, key) # Output: [{\'id\': 2, \'name\': \'Alice\'}, {\'id\': 3, \'name\': \'John\'}, {\'id\': 1}]"},{"question":"Write a Python function named `find_non_repeating` that finds and returns the first non-repeating character in a given string. If there is no such character, the function should return `None`. # Function Signature ```python def find_non_repeating(s: str) -> Union[str, None]: ... ``` # Requirements 1. The function should be case-sensitive, meaning \'a\' and \'A\' are considered different characters. 2. Utilize an efficient method to find the first non-repeating character, taking into account both time and space complexity. # Example ```python >>> find_non_repeating(\\"stress\\") \'t\' >>> find_non_repeating(\\"aabb\\") None >>> find_non_repeating(\\"Swiss\\") \'w\' ``` # Explanation - In the first example, \'t\' is the first character that does not repeat. - In the second example, there is no non-repeating character, so the function returns `None`. - In the third example, \'w\' is the first non-repeating character, note that the function is case-sensitive so \'S\' and \'s\' are considered different.","solution":"from typing import Union def find_non_repeating(s: str) -> Union[str, None]: Finds and returns the first non-repeating character in the string `s`. If there is no such character, returns `None`. char_count = {} # Iterate through the string and count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Iterate through the string again to find the first non-repeating character for char in s: if char_count[char] == 1: return char return None"},{"question":"In this task, you are asked to implement a function named `find_repeating_substring` that identifies and returns the shortest repeating substring from a given string. # Function Signature: ```python def find_repeating_substring(s: str) -> str: ``` # Parameters: - `s` (str): A non-empty string composed of lowercase English letters. # Output: - Return a string representing the shortest repeating substring. If no repeating substring exists, return an empty string. # Constraints: - The length of the input string (`s`) will not exceed 1000 characters. - A repeating substring is defined as a substring that appears more than once in the given string. # Instructions: 1. The function should iterate through possible substring lengths starting from 1 up to the length of the string. 2. For each possible substring length, check all substrings of that length to see if any of them repeat. 3. If more than one shortest repeating substring exists, return the one that appears first in the string. Example Usage: ```python result = find_repeating_substring(\\"abcabcabc\\") print(result) ``` In the example above, the function should return `\\"abc\\"` as it is the shortest repeating substring in \\"abcabcabc\\". Example Usage 2: ```python result = find_repeating_substring(\\"abcd\\") print(result) ``` In this case, the function should return an empty string, as there is no repeating substring in \\"abcd\\".","solution":"def find_repeating_substring(s: str) -> str: n = len(s) for length in range(1, n): seen = set() for start in range(n - length + 1): substring = s[start:start+length] if substring in seen: return substring seen.add(substring) return \\"\\""},{"question":"Create a function named `reverse_words()`, which takes a single string containing multiple words separated by spaces, reverses the order of the words, and returns the resulting string. The function should preserve the original whitespace between words, and also handle leading or trailing spaces correctly. # Constraints: - The function should handle an empty string by returning an empty string. - The function should preserve the exact amount of whitespace between words. - The function should not change the order of characters within any word, only the order of the words themselves. **Example Usage:** ```python result = reverse_words(\\" Hello world \\") print(result) # Should output: \\" world Hello \\" ``` # Expected Outputs: 1. `reverse_words(\\"Hello world\\")` should return `\\"world Hello\\"`. 2. `reverse_words(\\" Hello world \\")` should return `\\" world Hello \\"`. 3. `reverse_words(\\"a good example\\")` should return `\\"example good a\\"`. 4. `reverse_words(\\"\\")` should return `\\"\\"`. 5. `reverse_words(\\"single\\")` should return `\\"single\\"`. Use the following template to implement your solution: ```python def reverse_words(input_string): # your code here # Example usage if __name__ == \\"__main__\\": result = reverse_words(\\" Hello world \\") print(result) # Expected output: \\" world Hello \\" ```","solution":"def reverse_words(input_string): Takes a string of words separated by spaces, reverses the order of the words, and returns the resulting string while preserving whitespace. # Split string by spaces, preserving whitespace as part of the split result words = input_string.split(\' \') # Reverse the list of words reversed_words = words[::-1] # Join the reversed list with a single space (preserving original whitespace) return \' \'.join(reversed_words)"},{"question":"Create a function that takes a list of strings and a specified length, and returns a new list containing only the strings from the input list that are shorter than the specified length. The comparison should be case-insensitive, and the returned list should be in lowercase. The function should output: ``` list[str]: A list of strings that are shorter than the specified length. ``` You should write self-contained code starting with: ``` def filter_strings_by_length(input_list, length): ```","solution":"def filter_strings_by_length(input_list, length): Takes a list of strings and a specified length, and returns a new list containing only the strings from the input list that are shorter than the specified length in lowercase. Args: input_list (list[str]): The list of strings to be filtered. length (int): The length to filter the strings by. Returns: list[str]: A list of strings that are shorter than the specified length, in lowercase. return [s.lower() for s in input_list if len(s) < length]"},{"question":"You are required to create a function named `calculate_cumulative_frequency()`, which processes a list of integers and returns a dictionary containing the cumulative frequency of each number. # Here\'s a step-by-step description of what the function should do: 1. The function should take a list of integers as an argument. 2. It should iterate over the list to calculate the frequency of each integer (i.e., how many times each integer appears in the list). 3. It should then calculate the cumulative frequency (i.e., for each unique integer, sum the frequencies of all integers that are less than or equal to it). 4. Return a dictionary where the keys are the unique integers from the list and the values are their cumulative frequencies. # Example input and output: - **Input:** `[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]` - **Output:** `{1: 1, 2: 3, 3: 6, 4: 10}` - **Input:** `[5, 1, 2, 3, 5, 2, 3, 1]` - **Output:** `{1: 2, 2: 4, 3: 6, 5: 8}` # Hints: - Start by calculating the frequency of each integer using a dictionary. - Use a loop or a sorted list of unique integers to accumulate the frequencies and store them in the final dictionary. # Additional Information: Function signature: ```python def calculate_cumulative_frequency(nums): pass ``` # Requirements: - Ensure the function is named `calculate_cumulative_frequency`. - Handle cases where the input list is empty by returning an empty dictionary. - Consider edge cases such as lists with only one unique integer.","solution":"def calculate_cumulative_frequency(nums): Calculates the cumulative frequency of integers in a list. Parameters: nums (list): A list of integers. Returns: dict: A dictionary where keys are unique integers from the list and values are their cumulative frequencies. if not nums: return {} # Step 1: Calculate the frequency of each integer freq = {} for num in nums: if num not in freq: freq[num] = 0 freq[num] += 1 # Step 2: Calculate the cumulative frequency sorted_keys = sorted(freq.keys()) cumulative_freq = {} cumulative_sum = 0 for key in sorted_keys: cumulative_sum += freq[key] cumulative_freq[key] = cumulative_sum return cumulative_freq"},{"question":"In this task, your objective is to implement a function `word_ladder` that finds the shortest transformation sequence from a start word to an end word, transforming only one letter at a time and ensuring each intermediate word is in a given dictionary. This problem explores graph traversal algorithms, specifically Breadth-First Search (BFS). Word Ladder is a game, usually played with pencil and paper, in which you find a way to change one English word into another by altering one letter at a time. For example, changing \\"hit\\" to \\"cog\\" can be done with the following sequence of transformations: \\"hit\\" -> \\"hot\\" -> \\"cot\\" -> \\"cog\\". Input: - `beginWord` : string, the initial state. - `endWord` : string, the target state. - `wordList` : list of strings, containing the eligible words for the transformations. Output: Return the length of the shortest transformation sequence from `beginWord` to `endWord`. If no such transformation sequence exists, return 0. Constraints: - All input words are of the same length. - All words contain only lowercase alphabet characters. - You may assume no duplicates in the word list. - You may assume `beginWord` and `endWord` are non-empty and are not the same. Example: ```python def word_ladder(beginWord, endWord, wordList): Find the shortest transformation sequence from beginWord to endWord. Parameters: beginWord (str): The initial word. endWord (str): The target word. wordList (list[str]): List of valid transformation words. Returns: int: The length of the shortest transformation sequence, or 0 if no such sequence exists. from collections import deque if endWord not in wordList: return 0 L = len(beginWord) all_combo_dict = {} for word in wordList: for i in range(L): new_word = word[:i] + \\"*\\" + word[i + 1 :] if new_word not in all_combo_dict: all_combo_dict[new_word] = [word] else: all_combo_dict[new_word].append(word) queue = deque([(beginWord, 1)]) visited = {beginWord: True} while queue: current_word, level = queue.popleft() for i in range(L): intermediate_word = current_word[:i] + \\"*\\" + current_word[i + 1 :] for word in all_combo_dict.get(intermediate_word, []): if word == endWord: return level + 1 if word not in visited: visited[word] = True queue.append((word, level + 1)) all_combo_dict[intermediate_word] = [] return 0 # Example Usage beginWord = \\"hit\\" endWord = \\"cog\\" wordList = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] print(word_ladder(beginWord, endWord, wordList)) # Output: 5 ``` In this example, the shortest transformation sequence from \\"hit\\" to \\"cog\\" involves the following five words: \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\". The function returns `5`, which is the length of this sequence.","solution":"def word_ladder(beginWord, endWord, wordList): Find the shortest transformation sequence from beginWord to endWord. Parameters: beginWord (str): The initial word. endWord (str): The target word. wordList (list[str]): List of valid transformation words. Returns: int: The length of the shortest transformation sequence, or 0 if no such sequence exists. from collections import deque if endWord not in wordList: return 0 L = len(beginWord) all_combo_dict = {} for word in wordList: for i in range(L): new_word = word[:i] + \\"*\\" + word[i + 1 :] if new_word not in all_combo_dict: all_combo_dict[new_word] = [word] else: all_combo_dict[new_word].append(word) queue = deque([(beginWord, 1)]) visited = {beginWord: True} while queue: current_word, level = queue.popleft() for i in range(L): intermediate_word = current_word[:i] + \\"*\\" + current_word[i + 1 :] for word in all_combo_dict.get(intermediate_word, []): if word == endWord: return level + 1 if word not in visited: visited[word] = True queue.append((word, level + 1)) all_combo_dict[intermediate_word] = [] return 0"},{"question":"You are developing a system to track inventory levels of various products in a warehouse. Using the pandas library, your task is to read inventory data from a CSV file and summarize the product stock levels. This exercise will help you practice using the `pandas.read_csv` function for reading CSV files and `pandas.DataFrame` methods for data manipulation. Your goal is to write a function named `summarize_inventory` that: 1. Loads a CSV file containing inventory data. 2. Filters the DataFrame to include only products with a stock level less than 20. 3. Groups the filtered data by \'category\' and calculates the total stock for each category. 4. Returns a DataFrame with two columns: \'category\' and \'total_stock\'. 5. Sorts the summary DataFrame by \'total_stock\' in ascending order. The CSV file is assumed to have a header row with column names and include columns named \'product_id\', \'product_name\', \'category\', and \'stock\'. Here is an example layout for the CSV file: ```csv product_id,product_name,category,stock 1,Toothbrush,Healthcare,50 2,Shampoo,Personal Care,15 3,Laptop,Electronics,18 4,Soap,Personal Care,10 ... ```","solution":"import pandas as pd def summarize_inventory(file_path): Summarize inventory by category for products with stock less than 20. Parameters: file_path (str): The path to the CSV file containing inventory data. Returns: pd.DataFrame: A DataFrame with \'category\' and \'total_stock\' columns, sorted by \'total_stock\' in ascending order. # Load the inventory data from the CSV file inventory_df = pd.read_csv(file_path) # Filter products with stock level less than 20 filtered_df = inventory_df[inventory_df[\'stock\'] < 20] # Group by category and calculate the total stock for each category summary_df = filtered_df.groupby(\'category\')[\'stock\'].sum().reset_index() # Rename the column to \'total_stock\' summary_df = summary_df.rename(columns={\'stock\': \'total_stock\'}) # Sort the summary DataFrame by \'total_stock\' in ascending order summary_df = summary_df.sort_values(by=\'total_stock\', ascending=True) return summary_df"},{"question":"You are required to implement a function `segmentAndComputeStats(S, size)` that takes two inputs: a list `S` of integers and a positive integer `size`. The function should divide the list `S` into contiguous segments of length `size`. If the last segment is smaller than `size`, append `-1` to it until its length equals `size`. For each segment, the function should compute the sum, the mean, and the standard deviation. **Objective:** Your goal is to partition the list and compute these statistics for each segment. **Function Signature:** ```python def segmentAndComputeStats(S, size): ``` **Inputs:** - `S` (list): A list of integers. - `size` (int): The size of each segment. **Outputs:** - A list of dictionaries. Each dictionary represents a segment and contains: - \'segment\': the segment itself as a list - \'sum\': the sum of the elements in the segment - \'mean\': the mean of the elements in the segment - \'std\': the standard deviation of the elements in the segment # Example: ```python S = [10, 20, 30, 40, 50, 60, 70] size = 3 # Expected Output: # [{\'segment\': [10, 20, 30], \'sum\': 60, \'mean\': 20.0, \'std\': 8.16}, # {\'segment\': [40, 50, 60], \'sum\': 150, \'mean\': 50.0, \'std\': 8.16}, # {\'segment\': [70, -1, -1], \'sum\': 68, \'mean\': 22.67, \'std\': 32.54}] result = segmentAndComputeStats(S, size) ``` # Requirements: You must use the following NumPy functions in your implementation: 1. `numpy.array` 2. `numpy.mean` 3. `numpy.std`","solution":"import numpy as np def segmentAndComputeStats(S, size): Segments the list S into contiguous segments of length \'size\'. If the last segment is smaller, append `-1` to it. Computes the sum, mean, and standard deviation of each segment. Returns a list of dictionaries containing each segment and their statistics. segments = [] for i in range(0, len(S), size): segment = S[i:i + size] if len(segment) < size: segment.extend([-1] * (size - len(segment))) segment_array = np.array(segment) segment_sum = np.sum(segment_array) segment_mean = np.mean(segment_array) segment_std = np.std(segment_array) segments.append({ \'segment\': segment, \'sum\': segment_sum, \'mean\': segment_mean, \'std\': segment_std }) return segments"},{"question":"You need to implement a function called `compress_string` that compresses a string based on the occurrence of consecutive repeating characters. The function should take a single parameter: 1. `input_string` (str): The string that needs to be compressed. The compression algorithm should count the consecutive repeating characters in the string and replace them with the character followed by the number of times it occurs consecutively. If a character appears only once, it should be followed by a \'1\'. The function should return the compressed string only if the compressed version is shorter than the original string; otherwise, it should return the original string. **Function Signature:** ```python def compress_string(input_string: str) -> str: ``` The function should return a compressed string or the original string based on the above criteria. Here\'s an example of how the function should be used: ```python compressed = compress_string(\\"aabcccccaaa\\") print(compressed) # Expected output: \'a2b1c5a3\' compressed = compress_string(\\"abcdef\\") print(compressed) # Expected output: \'abcdef\' (since compression would not reduce the string length) ``` **Constraints:** - The input string will only contain lowercase alphabets (a-z). - The length of the input string will not exceed 1000 characters.","solution":"def compress_string(input_string: str) -> str: if not input_string: return \\"\\" compressed = [] current_char = input_string[0] count = 1 for char in input_string[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(input_string) else input_string"},{"question":"In this programming exercise, you are required to simulate a countdown timer using Python. You need to complete the function `countdown_timer(seconds)` which takes an integer argument `seconds` representing the number of seconds to count down from. Your task is to print the remaining time in the format `MM:SS` every one second until it reaches `00:00`. When the countdown finishes, print \\"Time\'s up!\\". To achieve this, you should use the `time.sleep(1)` function to pause for one second between each decrement of the timer, and format the output properly using string formatting. Here is the signature of the function you need to complete: ```python import time def countdown_timer(seconds): # your code here ``` **Requirements:** 1. Use the `time.sleep(1)` method to pause for one second. 2. Use string formatting to ensure the output is in the `MM:SS` format. **Example:** ```python import time def countdown_timer(seconds): while seconds >= 0: mins, secs = divmod(seconds, 60) timer = \'{:02d}:{:02d}\'.format(mins, secs) print(timer, end=\\"r\\") time.sleep(1) seconds -= 1 print(\\"Time\'s up!\\") # Example of usage countdown_timer(10) # The output should count down from 00:10 to 00:00, and then print \\"Time\'s up!\\". ```","solution":"import time def countdown_timer(seconds): Simulates a countdown timer that prints the remaining time in MM:SS format until it reaches 00:00 and then prints \\"Time\'s up!\\". while seconds >= 0: mins, secs = divmod(seconds, 60) timer = \'{:02d}:{:02d}\'.format(mins, secs) print(timer, end=\\"r\\") time.sleep(1) seconds -= 1 print(\\"Time\'s up!\\")"},{"question":"You are required to write a function named `ticketCombination` that calculates the number of ways to reach a specific amount using different ticket denominations. Each denomination can be used an unlimited number of times, and the order of the tickets does not matter. 1. The function signature is: `ticketCombination(amount: int, tickets: List[int]) -> int`. 2. The function should fulfill the following requirements: - `amount` is the target value you want to reach using the tickets. - `tickets` is a list of integers representing the value of each type of ticket. - The function should return the number of combinations that add up to the `amount`. Example: ```python print(ticketCombination(10, [1, 2, 5])) ``` Output: ``` 10 ``` Explanation: - The possible combinations to make the amount 10 with tickets [1, 2, 5] are: - 10x1s - 5x2s - 2x5s - 8x1s + 1x2 - 6x1s + 2x2s - 4x1s + 3x2s - 2x1s + 4x2s - 5x1s + 1x5 - 3x1s + 3x2s + 1x1 - 1x5 + 2x1s + 1x2","solution":"from typing import List def ticketCombination(amount: int, tickets: List[int]) -> int: dp = [0] * (amount + 1) dp[0] = 1 for ticket in tickets: for i in range(ticket, amount + 1): dp[i] += dp[i - ticket] return dp[amount]"},{"question":"You are given a list of dictionaries, where each dictionary represents a product in an online store. Each dictionary contains three key-value pairs: \'id\', \'price\', and \'quantity\'. Your task is to create a function called `update_products` that takes two input parameters `product_list` and `transactions`. The `product_list` is a list of dictionaries, and `transactions` is a list of transactions where each transaction is represented as a tuple containing a product id and the quantity sold. The function should update the quantity of each product in the `product_list` based on the sold quantities provided in the `transactions` list. If the quantity of a product in the `transactions` list is greater than the available quantity in the `product_list`, set the quantity to 0 (indicating the product is sold out). The function should return the updated list of products. Requirements: - Iterate over each transaction tuple. - For each transaction, update the corresponding product\'s quantity in the `product_list`. - If a product’s quantity in the `transactions` list is greater than its available quantity, set the product’s quantity to 0. Example: Suppose the `product_list` is: ```python [ {\'id\': 1, \'price\': 100, \'quantity\': 10}, {\'id\': 2, \'price\': 200, \'quantity\': 5}, {\'id\': 3, \'price\': 150, \'quantity’: 20} ] ``` And the `transactions` list is: ```python [(1, 3), (2, 6), (3, 10)] ``` The output of `update_products(product_list, transactions)` should be: ```python [ {\'id\': 1, \'price\': 100, \'quantity\': 7}, {\'id\': 2, \'price\': 200, \'quantity\': 0}, {\'id\': 3, \'price\': 150, \'quantity\': 10} ] ``` Function Signature: ```python def update_products(product_list: list, transactions: list) -> list: ```","solution":"def update_products(product_list, transactions): Update the quantities of products in the product_list based on the transactions. :param product_list: List[Dict], list of product dictionaries with keys \'id\', \'price\', and \'quantity\' :param transactions: List[Tuple[int, int]], list of transactions where each transaction is a tuple (product id, quantity sold) :return: List[Dict], updated product list after processing the transactions # Create a dictionary for quick lookup of products by their id product_dict = {product[\'id\']: product for product in product_list} for transaction_id, sold_quantity in transactions: if transaction_id in product_dict: product = product_dict[transaction_id] if product[\'quantity\'] >= sold_quantity: product[\'quantity\'] -= sold_quantity else: product[\'quantity\'] = 0 return product_list"},{"question":"You are required to create a program that reads data from a JSON file and transforms it into a format suitable for storage in a relational database. The JSON file contains a list of books, with each book having multiple possible authors and genres. The goal is to produce three CSV files: one for books, one for authors, and one for genres, with appropriate relationships maintained between them. # Function Requirements: Implement a function `convert_json_to_csv(json_file_path: str) -> None` that: 1. Reads the JSON file specified by `json_file_path`. 2. Creates three CSV files named `books.csv`, `authors.csv`, and `genres.csv`. 3. Ensures that the relationship between books, authors, and genres is properly maintained using foreign keys. # Table Requirements: - **books.csv** should have the columns: - \'BookID\' (unique identifier for the book) - \'Title\' - \'PublicationYear\' - \'ISBN\' - **authors.csv** should have the columns: - \'AuthorID\' (unique identifier for the author) - \'AuthorName\' - **genres.csv** should have the columns: - \'GenreID\' (unique identifier for the genre) - \'GenreName\' Additionally, create two more CSV files to handle many-to-many relationships: - **books_authors.csv** should have the columns: - \'BookID\' - \'AuthorID\' - **books_genres.csv** should have the columns: - \'BookID\' - \'GenreID\' # Usage Constraints: - Use the pandas library for CSV handling. - Ensure IDs (BookID, AuthorID, GenreID) are unique across the datasets. # Example: Suppose there is a JSON file at `data/books.json` with the format: ```json [ { \\"Title\\": \\"Book 1\\", \\"PublicationYear\\": 1999, \\"ISBN\\": \\"123-456-789\\", \\"Authors\\": [\\"Author A\\", \\"Author B\\"], \\"Genres\\": [\\"Fiction\\", \\"Adventure\\"] }, { \\"Title\\": \\"Book 2\\", \\"PublicationYear\\": 2005, \\"ISBN\\": \\"987-654-321\\", \\"Authors\\": [\\"Author C\\"], \\"Genres\\": [\\"Non-Fiction\\"] } ] ``` The function call: ```python convert_json_to_csv(\'data/books.json\') ``` Would generate the following CSV files: - `books.csv` - `authors.csv` - `genres.csv` - `books_authors.csv` - `books_genres.csv` Each file will store data with appropriate relationships maintained through foreign keys.","solution":"import json import pandas as pd def convert_json_to_csv(json_file_path: str) -> None: with open(json_file_path, \'r\') as file: data = json.load(file) books = [] authors_set = set() genres_set = set() books_authors = [] books_genres = [] book_id = 1 author_id_mapping = {} genre_id_mapping = {} for entry in data: books.append([book_id, entry[\'Title\'], entry[\'PublicationYear\'], entry[\'ISBN\']]) for author in entry[\'Authors\']: if author not in author_id_mapping: author_id = len(author_id_mapping) + 1 author_id_mapping[author] = author_id authors_set.add((author_id, author)) books_authors.append([book_id, author_id_mapping[author]]) for genre in entry[\'Genres\']: if genre not in genre_id_mapping: genre_id = len(genre_id_mapping) + 1 genre_id_mapping[genre] = genre_id genres_set.add((genre_id, genre)) books_genres.append([book_id, genre_id_mapping[genre]]) book_id += 1 books_df = pd.DataFrame(books, columns=[\'BookID\', \'Title\', \'PublicationYear\', \'ISBN\']) authors_df = pd.DataFrame(sorted(authors_set), columns=[\'AuthorID\', \'AuthorName\']) genres_df = pd.DataFrame(sorted(genres_set), columns=[\'GenreID\', \'GenreName\']) books_authors_df = pd.DataFrame(books_authors, columns=[\'BookID\', \'AuthorID\']) books_genres_df = pd.DataFrame(books_genres, columns=[\'BookID\', \'GenreID\']) books_df.to_csv(\'books.csv\', index=False) authors_df.to_csv(\'authors.csv\', index=False) genres_df.to_csv(\'genres.csv\', index=False) books_authors_df.to_csv(\'books_authors.csv\', index=False) books_genres_df.to_csv(\'books_genres.csv\', index=False)"},{"question":"In this problem, we need to determine whether a given number is an Armstrong number. An Armstrong number (also known as narcissistic number, pluperfect, or plus perfect number) is a number that is equal to the sum of its own digits each raised to the power of the number of digits. You are required to implement a function named `is_armstrong` that performs this check. The function should take one argument: - `num (int)`: The number to check. Specifically, the function should: 1. Compute the number of digits in `num`. 2. Calculate the sum of each digit raised to the power of the number of digits. 3. Return `True` if the calculated sum is equal to `num`, else return `False`. Function Signature: ```python def is_armstrong(num: int) -> bool: Determines whether the given number is an Armstrong number. Parameters: num (int): The number to check. Returns: bool: True if the number is an Armstrong number, otherwise False. ``` # Example ```python print(is_armstrong(153)) # Output: True print(is_armstrong(9474)) # Output: True print(is_armstrong(123)) # Output: False ``` # Explanation For `num = 153`, the number has 3 digits: [1, 5, 3]. - **Sum of digits raised to the power of 3**: (1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153) Since the sum equals to the original number (153), the function returns `True`. For `num = 123`, the number has 3 digits: [1, 2, 3]. - **Sum of digits raised to the power of 3**: (1^3 + 2^3 + 3^3 = 1 + 8 + 27 = 36) Since the sum does not equal to the original number (123), the function returns `False`.","solution":"def is_armstrong(num: int) -> bool: Determines whether the given number is an Armstrong number. Parameters: num (int): The number to check. Returns: bool: True if the number is an Armstrong number, otherwise False. # Convert number to string to iterate over digits and compute number of digits digits = [int(d) for d in str(num)] num_digits = len(digits) # Calculate sum of each digit raised to the power of the number of digits sum_of_powers = sum(d ** num_digits for d in digits) # Compare calculated sum with the original number return sum_of_powers == num"},{"question":"You are tasked with writing a function that simulates a simple text-based Tic-Tac-Toe game between two players. The function should facilitate the game by taking turns with player inputs, updating the game board, and checking for a win condition or a draw. Write a function named `play_tic_tac_toe()` which does not take any parameters. The function should: - Initialize an empty 3x3 Tic-Tac-Toe board as a list of lists. - Display the current state of the board after each move. - Prompt players \'X\' and \'O\' to enter their moves in turn. The players should input their move as a pair of integers representing the row and column (e.g., (1, 2)). - Update the board with the player\'s move if the move is valid (i.e., the chosen cell is empty and within bounds). - Check after each move if there is a winner or if the game is a draw. The game ends when either a player wins or all cells are filled without a winner. The function should then print the final game state and announce the result. Here’s a possible sample play session: ```python play_tic_tac_toe() # Sample Output: # 1 | 2 | 3 # ---|---|--- # 4 | 5 | 6 # ---|---|--- # 7 | 8 | 9 # Player X\'s move (row column): 1 1 # X | 2 | 3 # ---|---|--- # 4 | 5 | 6 # ---|---|--- # 7 | 8 | 9 # Player O\'s move (row column): 1 2 # X | O | 3 # ---|---|--- # 4 | 5 | 6 # ---|---|--- # 7 | 8 | 9 # ... # Player X wins! ``` Note: - Consider adding input sanitization to ensure moves are entered correctly and are within the allowed range. - Implement adequate checks for invalid moves and prompt the player to retry. - The function should run in a loop until the game concludes, then print the final result.","solution":"def print_board(board): for row in board: print(\\" | \\".join(row)) print(\\"-\\" * 5) def check_winner(board): # Check rows and columns for i in range(3): if board[i][0] == board[i][1] == board[i][2] != \' \': return board[i][0] if board[0][i] == board[1][i] == board[2][i] != \' \': return board[0][i] # Check diagonals if board[0][0] == board[1][1] == board[2][2] != \' \': return board[0][0] if board[0][2] == board[1][1] == board[2][0] != \' \': return board[0][2] return None def is_draw(board): for row in board: if \' \' in row: return False return True def play_tic_tac_toe(): # Initial empty board board = [[\' \' for _ in range(3)] for _ in range(3)] current_player = \'X\' while True: print_board(board) try: row, col = map(int, input(f\\"Player {current_player}\'s move (row column): \\").split()) if row < 1 or row > 3 or col < 1 or col > 3: raise ValueError(\\"Move out of bounds. Try again.\\") if board[row - 1][col - 1] != \' \': raise ValueError(\\"Cell already taken. Try again.\\") except ValueError as e: print(e) continue board[row - 1][col - 1] = current_player winner = check_winner(board) if winner: print_board(board) print(f\\"Player {winner} wins!\\") break if is_draw(board): print_board(board) print(\\"The game is a draw!\\") break # Switch player current_player = \'O\' if current_player == \'X\' else \'X\'"},{"question":"Write a function that takes a file path to a JSON configuration file and processes a set of images according to the settings in the file. The JSON configuration file should contain the following keys in an \'ImageProcessing\' section: \'input_dir\', \'output_dir\', \'resize\' (with sub-keys \'width\' and \'height\' for specifying new dimensions), and \'formats\' (a list of image formats to process e.g., jpg, png). The function should resize and save images in the specified formats to the output directory, and return a list of the paths of the processed images. The function should output with: list: A list containing the paths of processed images. You should write self-contained code starting with: ``` import json from PIL import Image import os def process_images(config_file): ```","solution":"import json from PIL import Image import os def process_images(config_file): Processes images according to the settings in the provided JSON configuration file. Args: config_file (str): The path to the JSON configuration file. Returns: list: A list containing the paths of processed images. with open(config_file, \'r\') as file: config = json.load(file) input_dir = config[\'ImageProcessing\'][\'input_dir\'] output_dir = config[\'ImageProcessing\'][\'output_dir\'] width = config[\'ImageProcessing\'][\'resize\'][\'width\'] height = config[\'ImageProcessing\'][\'resize\'][\'height\'] formats = config[\'ImageProcessing\'][\'formats\'] if not os.path.exists(output_dir): os.makedirs(output_dir) processed_images = [] for filename in os.listdir(input_dir): file_path = os.path.join(input_dir, filename) if any(filename.lower().endswith(fmt.lower()) for fmt in formats): with Image.open(file_path) as img: img = img.resize((width, height)) output_path = os.path.join(output_dir, filename) img.save(output_path) processed_images.append(output_path) return processed_images"},{"question":"You are tasked with creating a function that mimics a delayed response, often useful in simulating network request delays or animations in graphical applications. This function should implement a linear easing with a specified delay. # Requirements: 1. **Function Name**: `delayed_linear_easing` 2. **Parameters**: - `delay` (float): The delay before easing starts. 3. **Returns**: A function that takes two parameters: a float `t` (representing normalized time from 0 to 1) and another float `duration` (the total duration of the easing, accounting for the delay), and returns a float (the eased value at time `t`). # Constraints: - The returned function should implement a linear easing after an initial delay. - If `t` is within the delay period, the function should return 0. - The easing should start after the delay and end at the duration. # Detailed Explanation: The function `delayed_linear_easing` should create and return another function that calculates the easing value. This easing function will start after a specified initial delay, meaning the eased value will remain 0 during the delay period. After the delay, the easing function should increase linearly from 0 to 1 over the remaining duration. # Example Usage: ```python ease_func = delayed_linear_easing(0.2) value_at_time_0_5 = ease_func(0.5, 1.0) # Sample calculation ```","solution":"def delayed_linear_easing(delay): Returns a function that implements a delayed linear easing. def easing_function(t, duration): # Normalize time to start after the delay if t < delay: return 0 else: return min((t - delay) / (duration - delay), 1) return easing_function"},{"question":"In a string transformation problem, you are given a string containing a mix of uppercase and lowercase letters and spaces. The goal is to transform this string into a structured format where: - Each word starts with an uppercase letter, and the rest of the letters in the word are lowercase. - Spaces between words should be reduced to a single space. - Leading and trailing spaces in the string should be removed. You need to write a function `transform_string(s)` that takes a string `s` as input and returns the transformed string following the above rules. Details: - A \\"word\\" is defined as a maximal sequence of non-space characters. - The input string may contain multiple spaces between words. Function Signature: ```python def transform_string(s: str) -> str: ``` Please implement the function `transform_string(s)` which will ensure the correct formatting as specified.","solution":"def transform_string(s: str) -> str: Transforms the input string such that each word starts with an uppercase letter and the rest of the letters are lowercase. Reduces multiple spaces between words to a single space and removes leading and trailing spaces. # Strip leading and trailing spaces s = s.strip() # Split the string into words based on spaces words = s.split() # Capitalize each word and join them with single spaces transformed_words = [word.capitalize() for word in words] transformed_string = \' \'.join(transformed_words) return transformed_string"},{"question":"You are building a utility function for processing student grades in a roster. Your function should normalize the grades to a scale of 0 to 100 and classify the students based on their normalized grades. You are provided with a list of tuples, where each tuple contains a student\'s name and their raw grade. Raw grades can be in different ranges or might even contain some erroneous data that needs to be handled. # Function Name: ```python def process_grades(students: list) ``` # Input: - `students (list of tuples)`: A list where each element is a tuple consisting of a student\'s name (string) and their raw grade (integer or float). # Functionality: 1. Normalize all raw grades to a scale from 0 to 100. If a grade is below 0, set it to 0. If it is above 100, set it to 100. 2. Classify students based on their normalized grades into the following categories: - \\"Excellent\\": grade >= 85 - \\"Good\\": 70 <= grade < 85 - \\"Average\\": 50 <= grade < 70 - \\"Poor\\": grade < 50 3. Store the classified students in a dictionary where the keys are the category names (\\"Excellent\\", \\"Good\\", \\"Average\\", \\"Poor\\"), and the values are lists of student names in those categories. # Output: - Return the dictionary with the classified students. # Example: ```python # Example usage students = [ (\\"Alice\\", 95), (\\"Bob\\", 67), (\\"Charlie\\", -10), (\\"David\\", 120), (\\"Eve\\", 72) ] result = process_grades(students) # Expected result: # { # \\"Excellent\\": [\\"Alice\\"], # \\"Good\\": [\\"Eve\\"], # \\"Average\\": [\\"Bob\\"], # \\"Poor\\": [\\"Charlie\\", \\"David\\"] # } ``` Your function should handle different ranges and erroneous data gracefully, ensuring all grades fall within the specified range before classification.","solution":"def process_grades(students: list): Processes the raw grades of students, normalizes them to a scale between 0 and 100, and classifies them into categories. Parameters: students (list of tuples): A list where each tuple contains a student\'s name and their raw grade. Returns: dict: A dictionary with categories as keys and lists of student names as values. # Initialize the dictionary to hold the categorized students categories = { \\"Excellent\\": [], \\"Good\\": [], \\"Average\\": [], \\"Poor\\": [] } # Iterate over each student for student, grade in students: # Normalize the grade if grade < 0: normalized_grade = 0 elif grade > 100: normalized_grade = 100 else: normalized_grade = grade # Classify the student if normalized_grade >= 85: categories[\\"Excellent\\"].append(student) elif 70 <= normalized_grade < 85: categories[\\"Good\\"].append(student) elif 50 <= normalized_grade < 70: categories[\\"Average\\"].append(student) else: categories[\\"Poor\\"].append(student) return categories"},{"question":"Your task is to implement a function that reads inventory data from a JSON file, processes the data to calculate the total value for each item, and then writes the updated data back to the JSON file. The total value of each item is calculated by multiplying the `quantity` by the `unit_price`. The function `update_inventory` should have the following signature: ```python def update_inventory(file_path: str) -> None: ``` # Steps: 1. Read the JSON file specified by `file_path`. 2. Parse the JSON data to extract inventory details. 3. For each item in the inventory, calculate the total value as `quantity` multiplied by `unit_price`. 4. Update the inventory data to include the calculated `total_value` for each item. 5. Write the updated inventory data back to the same JSON file. # Parameters: - `file_path`: A string representing the path to the JSON file that contains the inventory data. # JSON File Format: The inventory JSON file will be an array of objects, each representing an item with the following fields: - `item_name`: A string representing the name of the item. - `quantity`: An integer representing the quantity of the item in stock. - `unit_price`: A floating-point number representing the price per unit of the item. Example JSON file content before processing: ```json [ { \\"item_name\\": \\"Widget\\", \\"quantity\\": 10, \\"unit_price\\": 2.5 }, { \\"item_name\\": \\"Gadget\\", \\"quantity\\": 15, \\"unit_price\\": 4.0 } ] ``` # JSON File Format After Processing: Example JSON file content after processing: ```json [ { \\"item_name\\": \\"Widget\\", \\"quantity\\": 10, \\"unit_price\\": 2.5, \\"total_value\\": 25.0 }, { \\"item_name\\": \\"Gadget\\", \\"quantity\\": 15, \\"unit_price\\": 4.0, \\"total_value\\": 60.0 } ] ``` # Example Usage: ```python file_path = \\"path/to/inventory.json\\" update_inventory(file_path) ``` # Requirements: - Use Python\'s built-in `json` module for reading and writing JSON data. - Properly handle file I/O operations to ensure resources are freed. - Validate that the JSON data contains the necessary fields and is in the correct format; handle errors appropriately. Your task is to implement the `update_inventory` function as described.","solution":"import json def update_inventory(file_path: str) -> None: with open(file_path, \'r\') as file: inventory = json.load(file) for item in inventory: item[\'total_value\'] = item[\'quantity\'] * item[\'unit_price\'] with open(file_path, \'w\') as file: json.dump(inventory, file, indent=4)"},{"question":"You are tasked with designing a function called `generate_classification_report` that evaluates the performance of multiple classification models on a given dataset. The function should use models from `sklearn.linear_model` and `sklearn.ensemble` libraries. It will train each model, predict the target variable, and generate classification reports using `classification_report` from `sklearn.metrics`. The function should return these reports in a structured format. The function should take the following arguments: - `models`: a dictionary where each key is the name of the model and the value is a sklearn model instance. - `x_train`: a pandas DataFrame representing the training feature set. - `y_train`: a pandas DataFrame or Series representing the training target variable. - `x_test`: a pandas DataFrame representing the testing feature set. - `y_test`: a pandas DataFrame or Series representing the testing target variable. The function should train each model on the training data, predict on the test data, and return a list of dictionaries. Each dictionary should contain: - `\'model\'`: the name of the model. - `\'report\'`: the classification report in dictionary format. # Input - `models`: A dictionary of sklearn model instances. - `x_train`: A pandas DataFrame containing the training feature set. - `y_train`: A pandas DataFrame or Series containing the training target variable. - `x_test`: A pandas DataFrame containing the testing feature set. - `y_test`: A pandas DataFrame or Series containing the testing target variable. # Output - A list of dictionaries, each containing: - `\'model\'`: the name of the model. - `\'report\'`: the classification report as a dictionary. # Example ```python from sklearn.linear_model import LogisticRegression from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import classification_report import pandas as pd # Example Data x_train = pd.DataFrame({ \'feature1\': [1, 2, 3, 4, 5], \'feature2\': [5, 4, 3, 2, 1] }) y_train = pd.Series([1, 0, 1, 0, 1]) x_test = pd.DataFrame({ \'feature1\': [6, 7], \'feature2\': [6, 7] }) y_test = pd.Series([1, 0]) models = { \'logistic_regression\': LogisticRegression(), \'random_forest\': RandomForestClassifier() } results = generate_classification_report(models, x_train, y_train, x_test, y_test) print(results) ``` # Note In the example above, - LogisticRegression and RandomForestClassifier are imported and instantiated. - Training and testing datasets are provided in pandas DataFrame and Series formats. - For each model, the classification report is generated and returned in a list of dictionaries.","solution":"from sklearn.metrics import classification_report import pandas as pd def generate_classification_report(models, x_train, y_train, x_test, y_test): Evaluates multiple classification models and returns classification reports. Parameters: models (dict): Dictionary where keys are model names and values are sklearn model instances. x_train (pd.DataFrame): Training feature set. y_train (pd.Series or pd.DataFrame): Training target variable. x_test (pd.DataFrame): Testing feature set. y_test (pd.Series or pd.DataFrame): Testing target variable. Returns: list of dicts: Each dict contains \'model\' and \'report\' keys. results = [] for name, model in models.items(): model.fit(x_train, y_train) y_pred = model.predict(x_test) report = classification_report(y_test, y_pred, output_dict=True) results.append({\'model\': name, \'report\': report}) return results"},{"question":"In this exercise, you are tasked with creating a function `generate_statistics` which processes a dataset and computes a set of statistical measures for each feature in the dataset. Specifically, you will work with a CSV file containing numerical data and perform several calculations using specific libraries. You will use the following libraries: - `pandas` to read and manipulate the data. - `numpy` to perform mathematical operations. Your function should: 1. Load the dataset from `\'data.csv\'` using `pandas`. 2. For each column (feature) in the dataset, compute the following statistics: - Mean - Median - Standard Deviation - Variance - Minimum value - Maximum value 3. Create and return a dictionary where the keys are the feature names and the values are dictionaries containing the computed statistics. The function definition should be: ```python def generate_statistics(): Function to read a CSV file and compute statistical measures for each numerical feature in the dataset. Returns: dict: A dictionary where the keys are the feature names and the values are dictionaries containing the computed statistics (\'mean\', \'median\', \'std_dev\', \'variance\', \'min\', and \'max\'). ``` **Input:** - There are no input parameters for this function. **Output:** The function should return a dictionary containing the computed statistics for each feature. Each key in the output dictionary should be a feature name, and the associated value should be another dictionary with keys `\'mean\'`, `\'median\'`, `\'std_dev\'`, `\'variance\'`, `\'min\'`, and `\'max\'`. **Example Output:** ```python { \'feature1\': { \'mean\': 5.34, \'median\': 5.0, \'std_dev\': 1.23, \'variance\': 1.51, \'min\': 2.0, \'max\': 8.0 }, \'feature2\': { \'mean\': 3.67, \'median\': 3.6, \'std_dev\': 0.75, \'variance\': 0.56, \'min\': 2.1, \'max\': 5.2 } } ``` **Example Usage:** ```python stats = generate_statistics() ```","solution":"import pandas as pd import numpy as np def generate_statistics(): Function to read a CSV file and compute statistical measures for each numerical feature in the dataset. Returns: dict: A dictionary where the keys are the feature names and the values are dictionaries containing the computed statistics (\'mean\', \'median\', \'std_dev\', \'variance\', \'min\', and \'max\'). # Load the dataset data = pd.read_csv(\'data.csv\') # Dictionary to store the statistics for each feature stats = {} # Iterate over each column in the dataframe for column in data.columns: if np.issubdtype(data[column].dtype, np.number): # Compute statistics feature_stats = { \'mean\': data[column].mean(), \'median\': data[column].median(), \'std_dev\': data[column].std(), \'variance\': data[column].var(), \'min\': data[column].min(), \'max\': data[column].max() } # Add the feature statistics to the dictionary stats[column] = feature_stats return stats"},{"question":"In this problem, you will write a function called `merge_sorted_arrays` that merges two sorted arrays into a single sorted array. The input arrays will be sorted in non-decreasing order, and the resulting array should maintain this order. The function should accept two parameters: - `array1` (List[int]): The first sorted array. - `array2` (List[int]): The second sorted array. Your task is to merge these two arrays into one sorted array without using any built-in sort functions. You can assume both input arrays will be non-empty and contain only integers. ```python def merge_sorted_arrays(array1, array2): pass ``` # Requirements: 1. Do not use any built-in sort functions. 2. The resulting array should be sorted in non-decreasing order. For example: ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # Output: [1, 2, 3, 4, 5, 6] merge_sorted_arrays([10, 20, 30], [15, 25, 35]) # Output: [10, 15, 20, 25, 30, 35] ```","solution":"def merge_sorted_arrays(array1, array2): Merges two sorted arrays into a single sorted array. Parameters: array1 (List[int]): The first sorted array. array2 (List[int]): The second sorted array. Returns: List[int]: A merged sorted array. merged_array = [] i, j = 0, 0 while i < len(array1) and j < len(array2): if array1[i] < array2[j]: merged_array.append(array1[i]) i += 1 else: merged_array.append(array2[j]) j += 1 # If there are remaining elements in array1 while i < len(array1): merged_array.append(array1[i]) i += 1 # If there are remaining elements in array2 while j < len(array2): merged_array.append(array2[j]) j += 1 return merged_array"},{"question":"Write a function `find_mode_and_median(input_list)` that takes a list of integers `input_list` as input and returns a tuple containing two elements: the mode and the median of the list. The mode is the number that appears most frequently in the list. If there are multiple modes, return the smallest one. The median is the middle value when the numbers are sorted in ascending order. If the list has an even number of elements, the median is the average of the two middle values, rounded to one decimal place. Steps to follow: 1. Calculate the mode of the list. 2. Sort the list and calculate the median. **Notes:** - You can assume the input list contains at least one integer. - You should use Python\'s `statistics` module to compute the mode and median. **Example Usage:** ```python input_list = [2, 3, 9, 2, 2, 6, 6] find_mode_and_median(input_list) ``` Output: ``` (2, 3.0) ``` Given the above input, the number 2 appears most frequently, making it the mode. When sorted, the list is `[2, 2, 2, 3, 6, 6, 9]`, and the middle element is 3, thus the median is 3.0. ```python input_list = [1, 3, 3, 6, 7, 8, 9, 9] find_mode_and_median(input_list) ``` Output: ``` (3, 6.5) ``` Given the above input, both 3 and 9 appear most frequently, but the smallest mode is 3. When sorted, the list is `[1, 3, 3, 6, 7, 8, 9, 9]`, so the median is the average of 6 and 7, which is 6.5.","solution":"from statistics import mode, median def find_mode_and_median(input_list): Returns a tuple containing the mode and median of the input list # Finding the mode freq = {} for num in input_list: freq[num] = freq.get(num, 0) + 1 max_freq = max(freq.values()) mode_list = [num for num, count in freq.items() if count == max_freq] smallest_mode = min(mode_list) # Finding the median median_value = float(median(input_list)) return (smallest_mode, round(median_value, 1))"},{"question":"Create a Python function named `archive_logs(directory_path: str, archive_path: str)`. This function takes in a directory path and an archive path, performing the following steps: 1. Prints the message `\'Archiving log files...\'`. 2. Checks if the specified directory (`directory_path`) exists. If it does not, raise a `FileNotFoundError`. 3. If an `archive_path` directory does not already exist, create it using `os.mkdir`. 4. Within the given directory path, identify all files with a `.log` extension. 5. Move each `.log` file to the archive directory. 6. For each moved file, create an entry in a `summary.txt` file within the archive directory. Each entry should include the original file name, the new location, and a timestamp indicating the time of archiving. **Requirements:** - Use `os.path` and `os` modules for directory and file operations. - Use the `shutil` module to move files. - Handle timestamps using the `datetime` module. **Function Signature:** ```python def archive_logs(directory_path: str, archive_path: str) -> None: pass ``` **Example:** If `directory_path` contains `.log` files and `archive_path` is where you will store them: ```python directory_path = \'logs\' archive_path = \'archive\' archive_logs(directory_path, archive_path) ``` After running the function, the following should happen: 1. Each `.log` file in `logs` directory is moved to the `archive` directory. 2. A `summary.txt` file in the `archive` directory is updated with entries for each moved file including their names, new locations, and timestamps. **Notes:** - You should handle all necessary imports. - Adequately handle exceptions for potential file operations (e.g., missing files or directories, permission issues). - Ensure the `summary.txt` is opened in append mode to preserve existing entries during the function execution.","solution":"import os import shutil from datetime import datetime def archive_logs(directory_path: str, archive_path: str) -> None: Archives all .log files from `directory_path` to `archive_path` and logs the archive details in a summary.txt file. Args: - directory_path (str): The path to the directory containing .log files. - archive_path (str): The path to the archive directory. Raises: - FileNotFoundError: If the `directory_path` does not exist. print(\'Archiving log files...\') # Check if the specified directory exists if not os.path.exists(directory_path): raise FileNotFoundError(f\\"The directory \'{directory_path}\' does not exist.\\") # Create the archive directory if it does not exist if not os.path.exists(archive_path): os.mkdir(archive_path) # Identify all .log files in the directory log_files = [f for f in os.listdir(directory_path) if f.endswith(\'.log\')] if len(log_files) == 0: print(f\\"No .log files found in the directory \'{directory_path}\'.\\") return # Create or open the summary.txt file in append mode summary_file_path = os.path.join(archive_path, \'summary.txt\') with open(summary_file_path, \'a\') as summary_file: for log_file in log_files: # Determine original and new file locations original_file_path = os.path.join(directory_path, log_file) new_file_path = os.path.join(archive_path, log_file) # Move the log file to the archive directory shutil.move(original_file_path, new_file_path) # Write an entry in the summary.txt file timestamp = datetime.now().strftime(\'%Y-%m-%d %H:%M:%S\') summary_file.write(f\\"{log_file} moved to {new_file_path} at {timestamp}n\\") print(\'Archiving completed.\')"},{"question":"In graph theory, the concept of strongly connected components (SCCs) is fundamental. An SCC of a directed graph is a maximal subgraph where every vertex is reachable from any other vertex in the subgraph. A useful algorithm for finding SCCs is Tarjan\'s algorithm. Your task is to write a function `find_sccs` that identifies all strongly connected components in a directed graph using Tarjan\'s algorithm. You will use a list of edges to represent the graph. **Function Signature:** ```python def find_sccs(n: int, edges: List[Tuple[int, int]]) -> List[List[int]]: ``` **Parameters:** - `n` (int): Number of vertices in the graph. - `edges` (List[Tuple[int, int]]): A list of tuples representing the directed edges in the graph. Each tuple (u, v) indicates a directed edge from node u to node v. **Returns:** - `sccs` (List[List[int]]): A list of SCCs, where each SCC is represented as a list of vertices. The vertices in each SCC can be listed in any order. **Details:** 1. Use a depth-first search (DFS) approach to identify and record discovery times and low values of vertices. 2. Components should be identified and stored in a stack until their root is found. 3. Apply Tarjan’s algorithm using an auxiliary stack to keep track of the visited vertices. 4. Maintain a list of components as they are discovered. You can assume the graph does not contain multiple edges or self-loops. Here is the signature for the function you need to implement: ```python from typing import List, Tuple def find_sccs(n: int, edges: List[Tuple[int, int]]) -> List[List[int]]: pass ``` **Example:** ```python print(find_sccs(5, [(1, 0), (0, 2), (2, 1), (0, 3), (3, 4)])) ``` **Output:** ``` [[4], [3], [1, 2, 0]] ``` In this example, we have three SCCs where each sublist represents a strongly connected component in the graph. The list elements can be in any order as they are discovered using Tarjan\'s algorithm.","solution":"from typing import List, Tuple def find_sccs(n: int, edges: List[Tuple[int, int]]) -> List[List[int]]: def dfs(v: int): nonlocal index index_map[v] = index low_link[v] = index index += 1 stack.append(v) on_stack[v] = True for neighbor in adjacency_list[v]: if index_map[neighbor] is None: # Neighbor has not been visited, recurse on it dfs(neighbor) low_link[v] = min(low_link[v], low_link[neighbor]) elif on_stack[neighbor]: # Neighbor is in the stack, hence a back edge low_link[v] = min(low_link[v], index_map[neighbor]) # If v is a root node, pop the stack and generate an SCC if low_link[v] == index_map[v]: scc = [] while True: w = stack.pop() on_stack[w] = False scc.append(w) if w == v: break sccs.append(scc) # Initialize algorithm variables adjacency_list = [[] for _ in range(n)] for (u, v) in edges: adjacency_list[u].append(v) index = 0 index_map = [None] * n low_link = [None] * n stack = [] on_stack = [False] * n sccs = [] for v in range(n): if index_map[v] is None: dfs(v) return sccs"},{"question":"You are given a text file named `results.txt` that contains information about the ranks achieved by different participants in various competitions. Each line in the text file represents a result, with fields for the participant\'s name, competition name, and the rank they achieved. The data are separated by spaces. Your task is to implement a function called `get_top_ranks(file_path: str) -> Dict[str, List[str]]`. This function should fulfill the following requirements: 1. The function should take a single argument `file_path`, a string representing the path to the text file. 2. For each line in the text file, extract the participant\'s name, competition name, and rank achieved. 3. Organize the results by competition in a dictionary where each key is the competition name, and each value is a list of participant names who achieved the top 3 ranks in that competition. 4. Handle any errors in data (e.g., missing or invalid values) gracefully by skipping those lines. 5. Ensure that each competition\'s results are sorted by ranks in ascending order. Assume the `results.txt` file content is formatted as follows: ``` Alice MathOlympiad 1 Bob MathOlympiad 3 Charlie MathOlympiad 2 Alice PhysicsContest 2 David PhysicsContest 1 Eve PhysicsContest 3 Francis ChemistryChallenge 1 George ChemistryChallenge 2 ``` Example Input (a text file as `results.txt`): ``` Alice MathOlympiad 1 Bob MathOlympiad 3 Charlie MathOlympiad 2 Alice PhysicsContest 2 David PhysicsContest 1 Eve PhysicsContest 3 Francis ChemistryChallenge 1 George ChemistryChallenge 2 ``` Expected Output: The function should return a dictionary structured like the following: ```python { \\"MathOlympiad\\": [\\"Alice\\", \\"Charlie\\", \\"Bob\\"], \\"PhysicsContest\\": [\\"David\\", \\"Alice\\", \\"Eve\\"], \\"ChemistryChallenge\\": [\\"Francis\\", \\"George\\"] } ```","solution":"from typing import Dict, List import os def get_top_ranks(file_path: str) -> Dict[str, List[str]]: competition_results = {} if not os.path.exists(file_path): raise IOError(\\"File does not exist\\") with open(file_path, \'r\') as file: for line in file: parts = line.strip().split() if len(parts) != 3: continue name, competition, rank_str = parts try: rank = int(rank_str) except ValueError: continue if competition not in competition_results: competition_results[competition] = [] competition_results[competition].append((rank, name)) top_ranks = {} for competition, results in competition_results.items(): results.sort() # Sorting by first value (rank) automatically since tuples are compared element-wise top_ranks[competition] = [name for rank, name in results[:3]] return top_ranks"},{"question":"You are tasked with creating a function to analyze and visualize the relationship between exercise duration and weight change based on a given dataset. The dataset contains columns \\"exercise_minutes\\" and \\"weight_change\\", where \\"exercise_minutes\\" represents the total minutes spent on exercise per week and \\"weight_change\\" is the change in weight (in kilograms) over a certain period. Specifically, you need to use the `matplotlib` library to create and display a scatter plot to illustrate this relationship. # Requirements: 1. Create a function named `display_weight_change_scatter`. 2. The function should accept one argument: `data`, which is a pandas DataFrame containing the data. 3. The function should use `matplotlib.pyplot.scatter` to create a scatter plot of exercise duration (`exercise_minutes`) against weight change (`weight_change`). 4. The function should use `matplotlib.pyplot.show` to display the plot. # Example Usage: Assume `data` is a DataFrame as shown below: ```plaintext exercise_minutes weight_change 0 150 -0.5 1 200 -1.0 2 300 -1.5 3 60 0.2 4 120 -0.3 ``` You would call the function as follows: ```python display_weight_change_scatter(data) ``` This will display a scatter plot where exercise minutes are on the x-axis and weight change is on the y-axis. # Constraints: - Assume the `data` DataFrame will always have the columns \\"exercise_minutes\\" and \\"weight_change\\". - Use `matplotlib.pyplot.scatter` for creating the scatter plot. - Use `matplotlib.pyplot.show` for displaying the plot.","solution":"import matplotlib.pyplot as plt def display_weight_change_scatter(data): Displays a scatter plot of exercise duration (in minutes) against weight change (in kg). Parameters: data (pandas.DataFrame): The data containing \'exercise_minutes\' and \'weight_change\' columns. plt.scatter(data[\'exercise_minutes\'], data[\'weight_change\']) plt.xlabel(\'Exercise Minutes per Week\') plt.ylabel(\'Weight Change (kg)\') plt.title(\'Relationship between Exercise Duration and Weight Change\') plt.show()"},{"question":"In this problem, you will write a Python function called `calculate_statistics` that reads a CSV file containing temperature data recorded in various cities over different time periods. Your goal is to compute specific statistical metrics for a given city and date range. The function must utilize the pandas library to handle and manipulate the data efficiently. Here\'s the detailed task breakdown: 1. **Data Loading**: Load a CSV file containing temperature data, which includes columns for \'City\', \'Date\', and \'Temperature\'. 2. **Date Filtering**: Convert the \'Date\' column to datetime and filter the data within the specified date range. 3. **City Filtering**: Filter the data to include only rows that match the specified city. 4. **Statistics Calculation**: Calculate the following statistics for the filtered dataset: - Mean temperature. - Median temperature. - Maximum temperature. - Minimum temperature. 5. **Return Results**: Return the computed statistics as a dictionary. **Function Signature** ```python def calculate_statistics(city: str, start_date: str, end_date: str) -> dict: ``` **Parameters** - `city` (str): Name of the city to analyze. - `start_date` (str): Start date of the date range in \'YYYY-MM-DD\' format. - `end_date` (str): End date of the date range in \'YYYY-MM-DD\' format. **Returns** - `dict`: A dictionary containing the statistical metrics with keys \'mean\', \'median\', \'max\', and \'min\'. # Implementation Notes 1. Use `pd.read_csv` to read the CSV file containing the temperature data. 2. Use `pd.to_datetime` to convert the \'Date\' column to datetime. 3. Use Boolean indexing to filter rows by the specified city and the date range. 4. Use `DataFrame.mean`, `DataFrame.median`, `DataFrame.max`, and `DataFrame.min` to calculate the required statistics. 5. Use appropriate error handling to manage cases where no data is found for the specified city and date range, returning an empty dictionary in such cases. Example usage: ```python city = \'New York\' start_date = \'2022-01-01\' end_date = \'2022-12-31\' stats = calculate_statistics(city, start_date, end_date) ``` **Assume temperature data is provided in a CSV file named \'temperature_data.csv\' with proper file path.**","solution":"import pandas as pd def calculate_statistics(city: str, start_date: str, end_date: str) -> dict: Calculate statistics for temperature data for a given city and date range. Parameters: city (str): Name of the city to analyze. start_date (str): Start date of the date range in \'YYYY-MM-DD\' format. end_date (str): End date of the date range in \'YYYY-MM-DD\' format. Returns: dict: A dictionary containing the statistical metrics with keys \'mean\', \'median\', \'max\', and \'min\'. try: # Load the data df = pd.read_csv(\'temperature_data.csv\') # Convert \'Date\' to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Filter data by date range mask = (df[\'Date\'] >= start_date) & (df[\'Date\'] <= end_date) df_filtered = df.loc[mask] # Filter data by city df_city = df_filtered[df_filtered[\'City\'] == city] if df_city.empty: return {} # Calculate statistics mean_temp = df_city[\'Temperature\'].mean() median_temp = df_city[\'Temperature\'].median() max_temp = df_city[\'Temperature\'].max() min_temp = df_city[\'Temperature\'].min() return { \'mean\': mean_temp, \'median\': median_temp, \'max\': max_temp, \'min\': min_temp } except Exception as e: return {}"},{"question":"You are given a list of strings representing access log entries for an application. Each log entry is of the format: `\\"[action] occurred at [timestamp] by user [user_id]\\"`. Your goal is to analyze the logs and determine the number of unique users that performed each action. Implement a function `analyze_logs(logs: list) -> dict` to achieve this. **Function Signature:** ```python def analyze_logs(logs: list) -> dict: pass ``` **Instructions:** 1. Parse each log entry to extract the action and user_id. 2. Track the number of unique user_ids associated with each action. 3. Return a dictionary where keys are actions and values are the count of unique users who performed that action. **Example usage:** ```python logs = [ \\"login occurred at 2023-10-01T10:15:30 by user 123\\", \\"upload occurred at 2023-10-01T10:17:40 by user 456\\", \\"login occurred at 2023-10-01T10:20:30 by user 789\\", \\"download occurred at 2023-10-01T10:25:22 by user 123\\", \\"login occurred at 2023-10-01T10:30:30 by user 123\\", \\"upload occurred at 2023-10-01T10:35:40 by user 123\\" ] result = analyze_logs(logs) # Expected output: # {\'login\': 2, \'upload\': 2, \'download\': 1} ``` **Details:** - Each log entry string is formatted as `\\"[action] occurred at [timestamp] by user [user_id]\\"`. - The function should correctly parse and aggregate unique user counts per action. - Consider edge cases where the logs might be empty or have repeated user_ids performing the same action.","solution":"def analyze_logs(logs: list) -> dict: Analyze access logs to determine the number of unique users for each action. Args: logs (list): List of log entry strings. Returns: dict: Dictionary mapping each action to the count of unique users who performed that action. action_users = {} for log in logs: parts = log.split(\' \') action = parts[0] user_id = parts[-1] if action not in action_users: action_users[action] = set() action_users[action].add(user_id) return {action: len(users) for action, users in action_users.items()}"},{"question":"You are given a dataset containing information about various species of flowers. The dataset includes three unique flower species – Iris-setosa, Iris-versicolor, and Iris-virginica, along with their respective petal lengths and widths. You are required to create a visualization to compare the distribution of petal dimensions for each flower species. We will use a scatter plot, which should help you visualize the relationship between petal length and petal width, distinguished by different colors for each species. You are specifically required to utilize the `matplotlib.pyplot.subplots` function from the `matplotlib` library to generate the scatter plot. Implement a function named `flower_scatter_plot()` that performs the following: 1. Generates a scatter plot for the petal length vs petal width for each flower species. 2. Use different colors and markers for each species to distinguish them in the plot. 3. Provide appropriate labels for the x-axis and y-axis, a legend to indicate different species, and a title for the scatter plot. Here is the data you should use: - Iris-setosa: - Petal lengths: [1.4, 1.4, 1.3, 1.5, 1.4] - Petal widths: [0.2, 0.2, 0.2, 0.2, 0.2] - Iris-versicolor: - Petal lengths: [4.7, 4.5, 4.9, 4.0, 4.6] - Petal widths: [1.4, 1.5, 1.5, 1.3, 1.5] - Iris-virginica: - Petal lengths: [5.1, 5.9, 5.6, 5.8, 6.3] - Petal widths: [2.3, 2.1, 1.8, 2.2, 2.5] Required Parts: - Use of `matplotlib.pyplot.subplots` - Ensure the function shows the plot with `plt.show()` at the end.","solution":"import matplotlib.pyplot as plt def flower_scatter_plot(): # Data for Iris-setosa setosa_petal_length = [1.4, 1.4, 1.3, 1.5, 1.4] setosa_petal_width = [0.2, 0.2, 0.2, 0.2, 0.2] # Data for Iris-versicolor versicolor_petal_length = [4.7, 4.5, 4.9, 4.0, 4.6] versicolor_petal_width = [1.4, 1.5, 1.5, 1.3, 1.5] # Data for Iris-virginica virginica_petal_length = [5.1, 5.9, 5.6, 5.8, 6.3] virginica_petal_width = [2.3, 2.1, 1.8, 2.2, 2.5] # Create subplots fig, ax = plt.subplots() # Scatter plot for each species with different colors and markers ax.scatter(setosa_petal_length, setosa_petal_width, color=\'red\', label=\'Iris-setosa\', marker=\'o\') ax.scatter(versicolor_petal_length, versicolor_petal_width, color=\'green\', label=\'Iris-versicolor\', marker=\'^\') ax.scatter(virginica_petal_length, virginica_petal_width, color=\'blue\', label=\'Iris-virginica\', marker=\'s\') # Labels and title ax.set_xlabel(\'Petal Length\') ax.set_ylabel(\'Petal Width\') ax.set_title(\'Petal Length vs Petal Width for Different Iris Species\') ax.legend() # Show plot plt.show()"},{"question":"You are required to create a function called `add_contact` that uses Python\'s `pickle` module to manage a contacts list. The function should perform the following tasks: 1. Check if a binary file named `contacts.pkl` exists in the current directory. This file should store a list of contacts, where each contact is a dictionary with keys: \'name\' and \'email\'. 2. If the file exists, load the contacts list from the file using `pickle.load` and print each contact in a formatted manner. 3. If the file does not exist, prompt the user to input a contact\'s name and email. Save this new contact in a list and serialize the list to `contacts.pkl` using `pickle.dump`. 4. Additionally, every time a new contact is added, the previous contacts should be preserved and the new contact should be appended to the list. Your implementation should handle file operations correctly and follow the best practices for using the `pickle.load` and `pickle.dump` functions as per the provided documentation. **Function Signature:** ```python def add_contact(): pass ``` **Requirements:** - Use `pickle.load` to read the contacts list when the file exists. - Use `pickle.dump` to write the contacts list, including any new contact, into the file. - Ensure that existing contacts remain in the file when adding a new contact.","solution":"import os import pickle def add_contact(): Add a new contact to the contacts list stored in a file named \'contacts.pkl\'. Each contact is a dictionary with \'name\' and \'email\' as keys. contacts_file = \'contacts.pkl\' contacts = [] # Check if the contacts file exists if os.path.exists(contacts_file): # Load the existing contacts from the file with open(contacts_file, \'rb\') as file: contacts = pickle.load(file) # Print the existing contacts for contact in contacts: print(f\\"Name: {contact[\'name\']}, Email: {contact[\'email\']}\\") else: print(\\"Contacts file does not exist. A new one will be created.\\") # Prompt user to add a new contact name = input(\\"Enter contact name: \\") email = input(\\"Enter contact email: \\") # Add the new contact to the list new_contact = {\'name\': name, \'email\': email} contacts.append(new_contact) # Save the updated contacts list back to the file with open(contacts_file, \'wb\') as file: pickle.dump(contacts, file)"},{"question":"In competitive programming, string manipulation problems are quite common. One such problem is to determine whether a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. For this problem, consider only the alphanumeric characters and ignore case. Your task is to implement the function `can_form_palindrome` which will take a string and return a boolean indicating whether it is possible to rearrange the string to form a palindrome. # Function Signature ```python def can_form_palindrome(s: str) -> bool: pass ``` # Parameters: - **s**: A string that may contain alphanumeric characters. # Returns: - **is_palindrome_possible**: A boolean value that is `True` if the string can be rearranged to form a palindrome, otherwise `False`. # Requirements: 1. **Ignore Case**: Treat uppercase and lowercase letters as equivalent. 2. **Alphanumeric Characters Only**: Consider only alphanumeric characters for palindrome checking. 3. **Optimal Complexity**: Aim for a linear time complexity solution (O(n)). # Example Usage: ```python # Example 1 s = \\"A man, a plan, a canal: Panama\\" # Can be rearranged to: \\"a man plan canal panama\\" -> \\"a plan a cal man nap pan\\" -> ambiguous print(can_form_palindrome(s)) # Output: True # Example 2 s = \\"race a car\\" # Cannot be rearranged to form a palindrome print(can_form_palindrome(s)) # Output: False # Example 3 s = \\"Was it a car or a cat I saw\\" # Can be rearranged to: \\"was it a car or a cat i saw\\" print(can_form_palindrome(s)) # Output: True ```","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determines if the given string can be rearranged to form a palindrome. Parameters: - s (str): The input string. Returns: - bool: True if the string can be rearranged to form a palindrome, False otherwise. # Normalize the string by converting to lowercase and keeping only alphanumeric characters normalized_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Count the frequency of each character char_count = Counter(normalized_str) # Check the number of odd frequency characters odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearrangeable into a palindrome: # There can be at most one character with an odd count return odd_count <= 1"},{"question":"Create a Python function `flatten_nested_list(nested_list: list) -> list` that takes a nested list of arbitrarily deep lists and flattens it into a single list of values. The function should recursively process each element and preserve the order of elements as they appear in the original nested list. Function Signature: ```python def flatten_nested_list(nested_list: list) -> list: ``` Examples: ```python print(flatten_nested_list([1, [2, [3, 4], 5], 6])) ``` Expected output: ```python [1, 2, 3, 4, 5, 6] ``` ```python print(flatten_nested_list([[[\'a\']], \'b\', [\'c\', [\'d\']]])) ``` Expected output: ```python [\'a\', \'b\', \'c\', \'d\'] ``` Explanation: The function should take each element of the input list, check if it is a list or a single value. If it\'s a list, it should recursively process it further, and if it\'s a single value, it should add it to the result list directly, thus flattening the entire nested list structure.","solution":"def flatten_nested_list(nested_list: list) -> list: Flattens a nested list of arbitrarily deep lists into a single list of values. Parameters: nested_list (list): A list which may contain other nested lists. Returns: list: A flattened list with all values in a single level. flattened_list = [] for item in nested_list: if isinstance(item, list): # Recursively flatten the nested list and extend the result flattened_list.extend(flatten_nested_list(item)) else: # If item is not a list, add it to the result list flattened_list.append(item) return flattened_list"},{"question":"You are tasked with developing a function that simulates a chess move validation system for knights. Your function will take a chessboard represented as an 8x8 matrix, current position of the knight, and a target position. The function will determine if the move from the current position to the target position is valid for a knight according to chess rules. The function, `validate_knight_move`, should take in the following parameters: - `board`: a 2D list representing the 8x8 chessboard. Each element is either a \\".\\" denoting an empty square or \\"K\\" denoting the presence of a knight. - `current_position`: a tuple `(x1, y1)` representing the current position of the knight on the board. - `target_position`: a tuple `(x2, y2)` representing the target position where the knight intends to move. The function should return a boolean value indicating whether the move is valid (True) or not (False). The knight moves in an \\"L\\" shape: two squares in one direction and then one square perpendicular to it, or one square in one direction and then two squares perpendicular to it. **Function Signature**: ```python def validate_knight_move(board, current_position, target_position): ... ``` **Example**: ```python # Given an 8x8 chessboard where the knight is at (0, 1) boardurrent position of the knight current_position = (0, 1) # Target position the knight wants to move to target_position = (2, 2) # Function call to validate the move print(validate_knight_move(board, current_position, target_position)) # Output should be True ``` **Notes**: - Ensure that the given positions are within the range of the chessboard. - Validate that the current position contains a knight. - The function does not need to handle the situation where other pieces are blocking the knight\'s move since in standard chess, knights do not move through occupied squares.","solution":"def validate_knight_move(board, current_position, target_position): Returns True if the knight move from current_position to target_position is valid. x1, y1 = current_position x2, y2 = target_position # Check if positions are within bounds if not (0 <= x1 < 8 and 0 <= y1 < 8 and 0 <= x2 < 8 and 0 <= y2 < 8): return False # Check if current_position contains a knight if board[x1][y1] != \\"K\\": return False # Determine if the move is a valid knight\'s \\"L\\" shape move dx = abs(x1 - x2) dy = abs(y1 - y2) if (dx, dy) in [(2, 1), (1, 2)]: return True return False"},{"question":"You are given a set of integers and need to find all unique pairs of integers that sum up to a given target value. Each pair should be sorted in ascending order, and the list of pairs should be sorted based on the first element of each pair. If multiple pairs have the same first element, sort by the second element. **Function Name:** `find_pairs_with_sum` **Parameters:** - `arr` (list of int): A list of integers. - `target` (int): The target sum value. **Functionality:** - Identify all unique pairs of integers from the list that add up to the target sum. - Ensure each pair is in ascending order. - Sort the resulting list of pairs based on the first element, and if there\'s a tie, by the second element. **Output:** - A list of tuples, where each tuple represents a pair of integers that add up to the target sum. **Requirements:** - Do not use the same element twice in the same pair. - Each pair in the output should be unique. - The output should be a list of tuples, sorted as described. Example: ``` find_pairs_with_sum([1, 2, -1, 1, 3, 2, 0], 3) ``` This should return: ``` [(0, 3), (1, 2)] ``` Explanation: - Pairs (in sorted order) that add up to 3 are: (0, 3), (1, 2). - Note that (2, 1) is considered the same as (1, 2) and should not be duplicated. - The output is sorted based on the first element of each pair.","solution":"def find_pairs_with_sum(arr, target): Finds all unique pairs of integers in the given list that sum up to the target value. Each pair is sorted in ascending order and the resulting list of pairs is sorted based on the first element, and if there\'s a tie, by the second element. Parameters: arr (list of int): A list of integers. target (int): The target sum value. Returns: list of tuple: A list of unique pairs of integers that add up to the target sum. found_pairs = set() seen = set() for number in arr: difference = target - number if difference in seen: pairs = tuple(sorted((number, difference))) found_pairs.add(pairs) seen.add(number) return sorted(found_pairs)"},{"question":"You are tasked with creating a function `filter_and_sort_integers()` that performs filtering and sorting operations on a list of integers. The function will take two arguments: a list of integers `numbers` and an integer `threshold`. The function should filter out any integers from the list that are below or equal to the `threshold`, and then return a new list of the remaining integers sorted in ascending order. # Requirements: - Use list comprehensions for filtering. - Use the built-in `sorted()` function for sorting. # Function Signature: ```python def filter_and_sort_integers(numbers: list, threshold: int) -> list: pass ``` # Example: ```python # Example data numbers = [5, 8, 2, 10, 3, 7, 1] threshold = 4 # Filtering and sorting result = filter_and_sort_integers(numbers, threshold) print(result) # Output should be: [5, 7, 8, 10] ``` # Explanation: 1. Filter out integers from `numbers` that are less than or equal to `threshold` (which is 4 in this case). 2. Return the filtered integers sorted in ascending order. By solving this problem, you\'ll gain experience with list comprehensions, filtering data, and sorting lists in Python.","solution":"def filter_and_sort_integers(numbers: list, threshold: int) -> list: Filters out integers from the list that are less than or equal to the threshold and returns the remaining integers sorted in ascending order. filtered_numbers = [num for num in numbers if num > threshold] sorted_numbers = sorted(filtered_numbers) return sorted_numbers"},{"question":"You are tasked with writing a function that generates a scatter plot and a regression line for a given dataset of points. Your function should utilize the `matplotlib` library to create the scatter plot and overlay a linear regression line that fits the data. Your function `scatter_with_regression` should have the following parameters: - `x` (required): A NumPy array of x-coordinates of the data points. - `y` (required): A NumPy array of y-coordinates of the data points. - `figsize` (optional): A tuple indicating the width and height of the figure in inches. If not provided, it defaults to `None`. - `title` (optional): A string for the title of the plot. If not provided, it defaults to `\\"Scatter Plot with Regression Line\\"`. - `xlabel` (optional): A string for the x-axis label. If not provided, it defaults to `\\"X-axis\\"`. - `ylabel` (optional): A string for the y-axis label. If not provided, it defaults to `\\"Y-axis\\"`. - `color` (optional): A string to specify the color of the scatter points. If not provided, it defaults to `\\"blue\\"`. - `line_color` (optional): A string to specify the color of the regression line. If not provided, it defaults to `\\"red\\"`. Your function should: 1. Use `matplotlib.rc` to set font properties (`family`: \'Arial\', `size`: 12). 2. Create a scatter plot of the provided data points. 3. Calculate the coefficients of the linear regression line and plot it over the scatter plot. 4. Adjust the layout using `matplotlib.tight_layout`. 5. Set the title, x-axis label, and y-axis label using the provided `title`, `xlabel`, and `ylabel` respectively. You can use the following code template for the function: ```python import numpy as np import matplotlib.pyplot as plt import matplotlib def scatter_with_regression(x, y, figsize=None, title=None, xlabel=None, ylabel=None, color=\'blue\', line_color=\'red\'): # Your solution here ``` # Example Usage ```python x = np.random.rand(50) y = 2.5 * x + np.random.randn(50) * 0.5 scatter_with_regression(x, y, figsize=(8, 6), title=\\"Scatter Plot Example\\", xlabel=\\"Input X\\", ylabel=\\"Output Y\\", color=\\"green\\", line_color=\\"orange\\") ```","solution":"import numpy as np import matplotlib.pyplot as plt import matplotlib def scatter_with_regression(x, y, figsize=None, title=None, xlabel=None, ylabel=None, color=\'blue\', line_color=\'red\'): matplotlib.rc(\'font\', family=\'Arial\', size=12) if figsize is not None: plt.figure(figsize=figsize) plt.scatter(x, y, color=color) # Calculate coefficients for the linear regression line m, b = np.polyfit(x, y, 1) plt.plot(x, m*x + b, color=line_color) plt.title(title if title else \\"Scatter Plot with Regression Line\\") plt.xlabel(xlabel if xlabel else \\"X-axis\\") plt.ylabel(ylabel if ylabel else \\"Y-axis\\") plt.tight_layout() plt.show()"},{"question":"You are required to write a Python function named `generate_id_map` that takes a list of dictionaries representing user information and an integer representing the user ID length. The function should create and return a mapping of unique IDs to user information, ensuring that each ID is unique and of the specified length. The function should follow these rules: 1. Each ID is generated using lowercase alphabets and digits. 2. Ensure all generated IDs have a length equal to `id_length` and are unique. 3. If the list of users exceeds the possible combinations of the given ID length, raise a `ValueError`. 4. The user information dictionary in the list contains \'name\' and \'email\' fields. **Example:** ```python users = [ {\\"name\\": \\"Alice\\", \\"email\\": \\"alice@example.com\\"}, {\\"name\\": \\"Bob\\", \\"email\\": \\"bob@example.com\\"}, ] id_length = 6 id_map = generate_id_map(users, id_length) ``` `id_map` might look something like this: ``` { \\"a12b34\\": {\\"name\\": \\"Alice\\", \\"email\\": \\"alice@example.com\\"}, \\"c56d78\\": {\\"name\\": \\"Bob\\", \\"email\\": \\"bob@example.com\\"}, } ``` **Function Signature:** ```python def generate_id_map(users: List[Dict[str, str]], id_length: int) -> Dict[str, Dict[str, str]]: ``` **Constraints:** - The length of each ID must be equal to the given `id_length`. - If there are more users than unique IDs possible with the given length, `ValueError` should be raised. - The function should consider the combination of all lowercase alphabets and digits for generating IDs.","solution":"import random import string def generate_id_map(users, id_length): Generates a mapping of unique IDs to user information, ensuring each ID is unique and of the specified length. :param users: List of user information dictionaries, each containing \'name\' and \'email\' fields. :param id_length: Integer specifying the length of the generated IDs. :return: Dictionary mapping unique IDs to user information. :raises ValueError: If there are more users than unique IDs possible with the given length. if not users: return {} possible_characters = string.ascii_lowercase + string.digits max_unique_ids = len(possible_characters) ** id_length if len(users) > max_unique_ids: raise ValueError(\\"The number of users exceeds the possible combinations of the given ID length.\\") generated_ids = set() id_map = {} for user in users: while True: new_id = \'\'.join(random.choices(possible_characters, k=id_length)) if new_id not in generated_ids: generated_ids.add(new_id) id_map[new_id] = user break return id_map"},{"question":"You are tasked with implementing a function `merge_sort_linked_list` that sorts a singly linked list using the Merge Sort algorithm. The function should take in the head of a singly linked list, sort the list in ascending order, and return the new head of the sorted list. A Node class is provided for you, which you should utilize in your function: ```python class Node: def __init__(self, data): self.data = data self.next = None ``` **Function Template:** ```python def merge_sort_linked_list(head): Parameters: head: (Node) The head of the singly linked list to be sorted Returns: (Node) The head of the sorted singly linked list pass ``` **Helper Function:** You may find it useful to implement helper functions for splitting the list, merging two sorted lists, and any other functionalities you deem necessary for implementing the Merge Sort algorithm. **Example Usage:** ```python # Helper function to create a linked list from a list def create_linked_list(arr): if not arr: return None head = Node(arr[0]) current = head for value in arr[1:]: current.next = Node(value) current = current.next return head # Helper function to print a linked list def print_linked_list(head): elements = [] while head: elements.append(head.data) head = head.next print(elements) # Example list to be sorted arr = [4, 2, 9, 6, 1, 8] # Create linked list head = create_linked_list(arr) # Sort linked list sorted_head = merge_sort_linked_list(head) # Print sorted linked list print_linked_list(sorted_head) ``` **Expected Output:** ```python [1, 2, 4, 6, 8, 9] ```","solution":"class Node: def __init__(self, data): self.data = data self.next = None def merge_sort_linked_list(head): if head is None or head.next is None: return head def split_list(head): slow, fast = head, head prev = None while fast and fast.next: prev = slow slow = slow.next fast = fast.next.next if prev: prev.next = None return head, slow def merge_two_sorted_lists(l1, l2): dummy = Node(0) current = dummy while l1 and l2: if l1.data < l2.data: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 elif l2: current.next = l2 return dummy.next left_half, right_half = split_list(head) left_sorted = merge_sort_linked_list(left_half) right_sorted = merge_sort_linked_list(right_half) return merge_two_sorted_lists(left_sorted, right_sorted) # Helper function to create a linked list from a list def create_linked_list(arr): if not arr: return None head = Node(arr[0]) current = head for value in arr[1:]: current.next = Node(value) current = current.next return head # Helper function to convert linked list to list def linked_list_to_list(head): elements = [] while head: elements.append(head.data) head = head.next return elements"},{"question":"You are tasked with creating a function `generate_report` to produce a sales report from data stored in a SQLite database. The database contains a table named `sales` with the following columns: - `date`: The date of the sale in the format \'YYYY-MM-DD\'. - `product`: The name of the product sold. - `quantity`: The quantity of the product sold. - `price`: The price of the product sold. Your function, `generate_report`, should: 1. Connect to the SQLite database named `sales.db` to fetch all the data from the `sales` table. 2. Calculate the total sales amount for each product. The total sales amount for a product is the sum of the quantities sold multiplied by their respective prices. 3. Print a report that includes each product\'s name and the calculated total sales amount, ordered by the product names in ascending order. Here are the required function signature and an example of function usage: ```python def generate_report(): Connects to the SQLite database, fetches sales data, and prints a sales report with the total sales amount for each product. pass # Example usage: generate_report() ``` Your task is to complete the `generate_report` function. Use the following SQLite3 functions in your implementation: - `connect()` - `cursor()` - `execute()` - `fetchall()` - `close()`","solution":"import sqlite3 def generate_report(): Connects to the SQLite database, fetches sales data, and prints a sales report with the total sales amount for each product. # Connect to the SQLite database connection = sqlite3.connect(\'sales.db\') cursor = connection.cursor() # Fetch all sales data cursor.execute(\'SELECT product, quantity, price FROM sales\') sales_data = cursor.fetchall() # Close the connection connection.close() # Calculate total sales amount for each product sales_report = {} for (product, quantity, price) in sales_data: if product not in sales_report: sales_report[product] = 0 sales_report[product] += quantity * price # Print the report, ordered by product names for product in sorted(sales_report.keys()): total_sales = sales_report[product] print(f\'Product: {product}, Total Sales: {total_sales}\')"},{"question":"Write a function to compute and return the average age of employees in a company, grouped by their respective departments from a list of employees. Each employee is represented by a dictionary containing their name, age, and department. Additionally, compute the department with the highest average age, and return the sorted list of departments by average age in descending order. The function should output: - dict: A dictionary where keys are department names and values are the average ages of employees in those departments. - str: The name of the department with the highest average age. - List[tuple]: A list of tuples where each tuple contains a department name and its average age, sorted in descending order by average age. You should write self-contained code starting with: ``` from collections import defaultdict def task_func(employees): ```","solution":"from collections import defaultdict def task_func(employees): Computes and returns the average age of employees in a company, grouped by their respective departments from a list of employees. Also computes the department with the highest average age and returns the sorted list of departments by average age in descending order. Parameters: employees (list): A list of dictionaries where each dictionary contains \'name\', \'age\', and \'department\'. Returns: tuple: - dict: A dictionary where keys are department names and values are the average ages of employees in those departments. - str: The name of the department with the highest average age. - list: A list of tuples where each tuple contains a department name and its average age, sorted in descending order by average age. dept_ages = defaultdict(list) for emp in employees: dept_ages[emp[\'department\']].append(emp[\'age\']) avg_ages = {dept: sum(ages)/len(ages) for dept, ages in dept_ages.items()} sorted_avg_ages = sorted(avg_ages.items(), key=lambda x: x[1], reverse=True) highest_avg_dept = sorted_avg_ages[0][0] if sorted_avg_ages else None return avg_ages, highest_avg_dept, sorted_avg_ages"},{"question":"You are tasked with creating a function that processes a large list of numerical data in an optimized manner using multi-threading. Specifically, the function should divide the list into equal parts, process each part in a separate thread, and then combine the results. The processing task involves calculating the sum of each part. If any thread encounters an error, an error message should be displayed, and the function should ensure that all threads complete their processing regardless of errors. Your goal is to write a function called `sum_with_multithreading(data, num_threads, handle_exception)` that: 1. Divides the data list into `num_threads` parts. 2. Uses `threading.Thread` to run the sum calculation for each part concurrently. 3. Handles exceptions properly using the `handle_exception` callable. 4. Combines the results of all threads to get the final sum. **Function Signature:** ```python def sum_with_multithreading( data: List[int], num_threads: int, handle_exception: callable ) -> int: pass ``` **Parameters:** - `data`: A list of integers to be processed. - `num_threads`: An integer specifying the number of threads to be used for processing. - `handle_exception`: A callable that handles any exception raised during the processing in any thread. **Behavior:** 1. The function divides the `data` list into `num_threads` equal parts as much as possible. If the list cannot be divided equally, the remaining elements should be evenly distributed among the parts. 2. Each part is processed in a separate thread where the sum of its elements is calculated. 3. The function should handle exceptions raised in any thread using the `handle_exception` callable. If an exception occurs, an error message should be displayed, but the function should continue executing all threads. 4. Once all threads complete their computation, the function should sum up the results from all threads and return this final sum. **Example Usage:** ```python def handle_exception(e): print(f\\"Error: {e}\\") data = [i for i in range(100)] num_threads = 4 print(sum_with_multithreading(data, num_threads, handle_exception)) ``` This example would process the list `[0, 1, 2, ..., 99]` using 4 threads, sum the parts, and return the total sum without interruption from potential errors in individual threads.","solution":"import threading def sum_with_multithreading(data, num_threads, handle_exception): def worker(data_part, result_list, index): try: result = sum(data_part) result_list[index] = result except Exception as e: handle_exception(e) # Initialize result list with None results = [None] * num_threads threads = [] length = len(data) for i in range(num_threads): start_index = i * (length // num_threads) + min(i, length % num_threads) end_index = (i + 1) * (length // num_threads) + min(i + 1, length % num_threads) thread = threading.Thread(target=worker, args=(data[start_index:end_index], results, i)) threads.append(thread) thread.start() # Ensure all threads have completed for thread in threads: thread.join() # Combine results after all threads are done total_sum = 0 for result in results: if result is not None: total_sum += result return total_sum"},{"question":"Create a histogram illustrating the distribution of a given list of integers. The histogram should have 10 equally spaced bins, and the axis labels should be specified as \'Value\' for the x-axis and \'Frequency\' for the y-axis. The plot should include a title \'Integer Value Distribution\'. The function should output with: fig (matplotlib.figure.Figure): Figure object of the generated histogram plot. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def task_func(nums: list): ```","solution":"import matplotlib.pyplot as plt def task_func(nums: list): Creates a histogram illustrating the distribution of the given list of integers. The histogram will have 10 equally spaced bins along with appropriate axis labels and a title. Parameters: nums (list): A list of integers to create the histogram for. Returns: fig (matplotlib.figure.Figure): Figure object of the generated histogram plot. fig, ax = plt.subplots() ax.hist(nums, bins=10, edgecolor=\'black\') ax.set_xlabel(\'Value\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Integer Value Distribution\') return fig"},{"question":"You are required to create a function that simulates a turn-based battle between two fighters in a game. The function you need to write is named `battle` and should take two parameters, `fighter1` and `fighter2`, which are both dictionaries with keys `name`, `health`, `attack`, and `defense`. The battle should continue until one of the fighters\' health points drop to zero or below. The function should alternate turns between the fighters, starting with `fighter1`. During each turn, the attacking fighter deals damage to the defending fighter, which is calculated as the attacker\'s attack points minus the defender\'s defense points (minimum damage inflicted is always 1). Update the defender\'s health accordingly. The function should return the name of the winning fighter. # Function Signature ```python def battle(fighter1, fighter2): Simulates a turn-based battle between two fighters. ``` # Example Usage ```python def battle(fighter1, fighter2): turn = 0 while fighter1[\\"health\\"] > 0 and fighter2[\\"health\\"] > 0: if turn % 2 == 0: # Fighter1\'s turn damage = max(1, fighter1[\\"attack\\"] - fighter2[\\"defense\\"]) fighter2[\\"health\\"] -= damage else: # Fighter2\'s turn damage = max(1, fighter2[\\"attack\\"] - fighter1[\\"defense\\"]) fighter1[\\"health\\"] -= damage turn += 1 if fighter1[\\"health\\"] > 0: return fighter1[\\"name\\"] else: return fighter2[\\"name\\"] ``` # Example Input ```python fighter1 = {\\"name\\": \\"Aragorn\\", \\"health\\": 100, \\"attack\\": 15, \\"defense\\": 10} fighter2 = {\\"name\\": \\"Goblin\\", \\"health\\": 80, \\"attack\\": 12, \\"defense\\": 8} ``` # Example Output ```python battle(fighter1, fighter2) # Output: \\"Aragorn\\" ``` # Requirements 1. Use a loop to alternate turns between the fighters. 2. Calculate the damage and update the defender\'s health in each turn. 3. Ensure that the minimum damage inflicted is always 1. 4. Return the name of the winning fighter.","solution":"def battle(fighter1, fighter2): Simulates a turn-based battle between two fighters. Params: fighter1 (dict): The first fighter\'s attributes. fighter2 (dict): The second fighter\'s attributes. Returns: str: The name of the winning fighter. turn = 0 while fighter1[\\"health\\"] > 0 and fighter2[\\"health\\"] > 0: if turn % 2 == 0: # Fighter1\'s turn damage = max(1, fighter1[\\"attack\\"] - fighter2[\\"defense\\"]) fighter2[\\"health\\"] -= damage else: # Fighter2\'s turn damage = max(1, fighter2[\\"attack\\"] - fighter1[\\"defense\\"]) fighter1[\\"health\\"] -= damage turn += 1 if fighter1[\\"health\\"] > 0: return fighter1[\\"name\\"] else: return fighter2[\\"name\\"]"},{"question":"** You are tasked with creating a function called `generate_histogram()`. This function should take a list of integers and produce a horizontal histogram where each integer is represented by a line of asterisks (`*`). Here are the steps your function should follow: 1. Iterate through each number in the given list. 2. For each number, print a line of asterisks where the number of asterisks equals the integer value. **Function Signature:** ```python def generate_histogram(nums: list): # Your code here ``` **Input:** - `nums` (List of integers): A list of non-negative integers representing the values to be converted into a histogram. Each integer is between 0 and 100 inclusive. **Output:** - Print each line of the histogram directly within the function. **Example:** ```python nums = [4, 9, 7, 1, 3] generate_histogram(nums) ``` **Output:** ``` **** ********* ******* * *** ```","solution":"def generate_histogram(nums: list): Prints a horizontal histogram where each integer in the list is represented by a line of asterisks \'*\'. Parameters: nums (list): List of non-negative integers. for num in nums: print(\'*\' * num)"},{"question":"You are asked to implement a compression algorithm for strings. The compression functionality will use basic run-length encoding. Run-length encoding works by reducing the number of characters in a string by replacing consecutive identical characters with the character followed by the number of its occurrences. For example: - \\"aaabbcccc\\" would be compressed to \\"a3b2c4\\". - \\"aabbcc\\" would become \\"a2b2c2\\". - Single occurrence characters, such as \\"abcd\\", should not be compressed and would remain as \\"abcd\\". Your task is to implement the function `compress_string(input_str: str) -> str` in Python. The function should take a single string `input_str` as input and return its compressed version. If the compressed string is not shorter than `input_str`, the function should return the original `input_str` instead. # Function Signature ```python def compress_string(input_str: str) -> str: # Your implementation here ``` # Examples 1. `compress_string(\\"aaabbcccc\\")` should return `\\"a3b2c4\\"`. 2. `compress_string(\\"aabbcc\\")` should return `\\"aabbcc\\"`. 3. `compress_string(\\"abcd\\")` should return `\\"abcd\\"`. # Notes 1. The function should handle both uppercase and lowercase letters. 2. Ensure optimal performance for both small and large input strings. 3. The function should only compress if the resultant string is shorter; otherwise, return the original string.","solution":"def compress_string(input_str: str) -> str: if not input_str: return input_str compressed = [] count = 1 for i in range(1, len(input_str)): if input_str[i] == input_str[i - 1]: count += 1 else: compressed.append(input_str[i - 1] + str(count)) count = 1 # Add the last accumulated sequence compressed.append(input_str[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(input_str) else input_str"},{"question":"Given an array of integers, write a function that finds the length of the longest subsequence where the difference between consecutive elements is exactly 1. This problem requires identifying subsequences (not necessarily contiguous subsequences) to isolate the longest sequence meeting the difference criterion. The function should output with: int: The length of the longest subsequence with consecutive elements having a difference of exactly 1. You should write self-contained code starting with: ``` def longest_subsequence(arr): ```","solution":"def longest_subsequence(arr): Finds the length of the longest subsequence where the difference between consecutive elements is exactly 1. if not arr: return 0 longest = 1 current_length = 1 arr.sort() for i in range(1, len(arr)): if arr[i] == arr[i-1] + 1: current_length += 1 elif arr[i] != arr[i-1]: longest = max(longest, current_length) current_length = 1 return max(longest, current_length)"},{"question":"You are tasked with creating a function that reads a CSV file containing information about different products sold in a store and generates a horizontal bar plot showing the sales figures for each product. The CSV file will have two columns: \'Product\' and \'Sales\'. The function should label the x-axis as \'Sales Volume\', the y-axis as \'Product\', and add a title \'Sales Volume by Product\'. Use the `matplotlib.pyplot` library for plotting. Function Signature: ```python def plot_sales(csv_file: str) -> None: Plots a horizontal bar plot of the sales data from the provided CSV file. Parameters: csv_file (str): Path to the CSV file containing \'Product\' and \'Sales\' columns. The x-axis should be labeled \'Sales Volume\' and the y-axis should be labeled \'Product\'. The title of the plot should be \'Sales Volume by Product\'. After creating the plot, it should be displayed. ``` Example Usage: ```python plot_sales(\'product_sales.csv\') ``` Expected Outcome: The function should render a horizontal bar plot with products listed on the y-axis and their corresponding sales volumes on the x-axis. The x-axis should be labeled \\"Sales Volume\\" and the y-axis should be labeled \\"Product\\". The plot should have the title \\"Sales Volume by Product\\". Requirements: - Use the `matplotlib.pyplot.barh` function to create the horizontal bar plot. - Use the `matplotlib.pyplot.xlabel` function to label the x-axis. - Use the `matplotlib.pyplot.ylabel` function to label the y-axis. - Use the `matplotlib.pyplot.title` function to set the plot title. - Use the `matplotlib.pyplot.show` function to display the plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_sales(csv_file: str) -> None: Plots a horizontal bar plot of the sales data from the provided CSV file. Parameters: csv_file (str): Path to the CSV file containing \'Product\' and \'Sales\' columns. The x-axis should be labeled \'Sales Volume\' and the y-axis should be labeled \'Product\'. The title of the plot should be \'Sales Volume by Product\'. After creating the plot, it should be displayed. # Read the CSV file into a DataFrame df = pd.read_csv(csv_file) # Create the horizontal bar plot plt.barh(df[\'Product\'], df[\'Sales\']) # Label the axes and add a title plt.xlabel(\'Sales Volume\') plt.ylabel(\'Product\') plt.title(\'Sales Volume by Product\') # Display the plot plt.show()"},{"question":"You are given a list of student records, where each record is a dictionary containing \'name\', \'marks\', and \'age\' of the student. Your task is to write a function `process_students(records)` that processes this list and performs the following tasks: 1. Print the name of the student with the highest marks. 2. Print the name of the student with the lowest marks. 3. Calculate and print the average marks of all students. 4. Sort the records based on the student\'s age in ascending order and return the sorted list. The input parameter is: - `records`: A list of dictionaries, where each dictionary contains: - \'name\': A string representing the student\'s name. - \'marks\': An integer representing the student\'s marks. - \'age\': An integer representing the student\'s age. **Constraints:** - Assume records list will have at least one student. - All \'marks\' values are integers. - All \'age\' values are integers. **Example Usage:** ```python records = [ {\'name\': \'Alice\', \'marks\': 88, \'age\': 20}, {\'name\': \'Bob\', \'marks\': 75, \'age\': 22}, {\'name\': \'Charlie\', \'marks\': 95, \'age\': 19}, {\'name\': \'David\', \'marks\': 72, \'age\': 21} ] process_students(records) ``` **Expected Output:** ``` Student with highest marks: Charlie Student with lowest marks: David Average marks: 82.5 ``` **Returned Sorted List:** ```python [ {\'name\': \'Charlie\', \'marks\': 95, \'age\': 19}, {\'name\': \'Alice\', \'marks\': 88, \'age\': 20}, {\'name\': \'David\', \'marks\': 72, \'age\': 21}, {\'name\': \'Bob\', \'marks\': 75, \'age\': 22} ] ```","solution":"def process_students(records): Processes the list of student records and performs the following tasks: 1. Prints the name of the student with the highest marks. 2. Prints the name of the student with the lowest marks. 3. Calculates and prints the average marks of all students. 4. Sorts the records based on the student\'s age in ascending order and returns the sorted list. if not records: return [] # Find the student with the highest and lowest marks highest_marks_student = max(records, key=lambda x: x[\'marks\']) lowest_marks_student = min(records, key=lambda x: x[\'marks\']) # Calculate the average marks total_marks = sum(student[\'marks\'] for student in records) average_marks = total_marks / len(records) # Print the required information print(f\\"Student with highest marks: {highest_marks_student[\'name\']}\\") print(f\\"Student with lowest marks: {lowest_marks_student[\'name\']}\\") print(f\\"Average marks: {average_marks}\\") # Sort the records by age in ascending order sorted_records = sorted(records, key=lambda x: x[\'age\']) return sorted_records"},{"question":"You are responsible for writing a function to simulate a step in a particle swarm optimization (PSO) algorithm. This step involves updating the velocity and position of a particle, considering its best-known position and the global best position known by the swarm. The function you need to write is: ```python def pso_update_position_velocity(particle_position, particle_velocity, personal_best, global_best, inertia_weight, cognitive_constant, social_constant): Update the velocity and position of a particle in the PSO algorithm. Args: - particle_position (List[float]): The current position of the particle. - particle_velocity (List[float]): The current velocity of the particle. - personal_best (List[float]): The best-known position of the particle. - global_best (List[float]): The best-known position of the swarm. - inertia_weight (float): The inertia weight factor for velocity update. - cognitive_constant (float): The cognitive constant (usually denoted as c1) for personal best influence. - social_constant (float): The social constant (usually denoted as c2) for global best influence. Returns: - Tuple[List[float], List[float]]: Updated position and velocity of the particle. # Your implementation here ``` # Explanation of Variables: - `particle_position (List[float])`: A list representing the current position of the particle in the search space. - `particle_velocity (List[float])`: A list representing the current velocity of the particle. - `personal_best (List[float])`: A list representing the best-known position of the particle. - `global_best (List[float])`: A list representing the best-known position of the entire swarm. - `inertia_weight (float)`: A coefficient representing the inertia weight that balances the previous velocity. - `cognitive_constant (float)`: A coefficient that represents the influence of the particle\'s own best position. - `social_constant (float)`: A coefficient that represents the influence of the global best position. # Requirements: 1. You **must** use `random.random` to generate random float values in the interval [0, 1) for the stochastic components of the velocity update equation. 2. You **must** compute the new velocity based on the previous velocity, the cognitive component, and the social component as follows: ```python new_velocity = (inertia_weight * particle_velocity) + (cognitive_constant * random.random() * (personal_best - particle_position)) + (social_constant * random.random() * (global_best - particle_position)) ``` 3. You **must** update the particle\'s position by adding the new velocity to the current position. # Conditions: - Ensure the length of `particle_position`, `particle_velocity`, `personal_best`, and `global_best` are equal. - After updating the position and velocity, return both as a tuple. # Example: Given: ```python particle_position = [1.0, 2.0] particle_velocity = [0.1, -0.1] personal_best = [1.5, 1.8] global_best = [2.0, 1.5] inertia_weight = 0.5 cognitive_constant = 2.0 social_constant = 2.0 ``` Your function call: ```python pso_update_position_velocity(particle_position, particle_velocity, personal_best, global_best, inertia_weight, cognitive_constant, social_constant) ``` Should return: ```python ([1.11..., 1.89...], [0.11..., -0.10...]) ```","solution":"import random def pso_update_position_velocity(particle_position, particle_velocity, personal_best, global_best, inertia_weight, cognitive_constant, social_constant): Update the velocity and position of a particle in the PSO algorithm. Args: - particle_position (List[float]): The current position of the particle. - particle_velocity (List[float]): The current velocity of the particle. - personal_best (List[float]): The best-known position of the particle. - global_best (List[float]): The best-known position of the swarm. - inertia_weight (float): The inertia weight factor for velocity update. - cognitive_constant (float): The cognitive constant (usually denoted as c1) for personal best influence. - social_constant (float): The social constant (usually denoted as c2) for global best influence. Returns: - Tuple[List[float], List[float]]: Updated position and velocity of the particle. new_velocity = [ inertia_weight * particle_velocity[i] + cognitive_constant * random.random() * (personal_best[i] - particle_position[i]) + social_constant * random.random() * (global_best[i] - particle_position[i]) for i in range(len(particle_position)) ] new_position = [ particle_position[i] + new_velocity[i] for i in range(len(particle_position)) ] return new_position, new_velocity"},{"question":"In this problem, you will work on analyzing a text document to determine the frequency of words and identify the most common words within it. Your task is to create a function named `word_frequency` that takes a single parameter: - `text`: a string containing the entire content of the text document. The function should: 1. Convert all words to lowercase to ensure case-insensitive comparison. 2. Remove any punctuation from the words so that \\"word.\\" and \\"word!\\" are considered the same word. 3. Count the frequency of each unique word in the text. 4. Return a sorted list of tuples, each containing a word and its corresponding frequency, in descending order of frequency. If two words have the same frequency, they should be sorted alphabetically. Here\'s a skeleton of the function that you need to implement: ```python import string def word_frequency(text): # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count the frequency of each word word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Sort the words by frequency (descending) and alphabetically sorted_word_count = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return sorted_word_count # Example usage if __name__ == \\"__main__\\": sample_text = \\"Hello, world! This is a test. This test is only a test.\\" print(word_frequency(sample_text)) ``` Given the `sample_text`, the function `word_frequency` should return: ``` [(\'test\', 3), (\'a\', 2), (\'is\', 2), (\'this\', 2), (\'hello\', 1), (\'only\', 1), (\'world\', 1)] ```","solution":"import string def word_frequency(text): Analyzes the text document to determine the frequency of each unique word. Parameters: text (str): A string containing the content of the text document. Returns: list: A sorted list of tuples, each containing a word and its frequency, sorted by frequency (descending), and alphabetically if frequencies are the same. # Convert text to lowercase text = text.lower() # Remove punctuation text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split text into words words = text.split() # Count the frequency of each word word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Sort the words by frequency (descending) and alphabetically sorted_word_count = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return sorted_word_count"},{"question":"Your task is to write a function named `find_mode` that finds the mode (the value that appears most frequently) of a list of numbers. If there are multiple modes (multi-modal list), it should return all of them in a list. The function should handle empty lists and lists with all unique elements correctly. **Function Signature:** ```python def find_mode(numbers): Return the mode(s) of a list of numbers. numbers: a list of integers or floats Returns: A list containing the mode(s) of the numbers. ``` # Requirements: - **collections.Counter**: Utilize the `Counter` object from the `collections` module to count the frequency of each number in the list. - **max**: Use the `max` function to identify the highest frequency of occurrence(s). - **List Comprehension**: Utilize list comprehension to filter out the mode(s) from the frequency dictionary. # Example: ```python from collections import Counter # Example input data1 = [1, 2, 2, 3, 3, 4, 4, 4] data2 = [10, 20, 30, 40, 50] data3 = [] # Call the function mode1 = find_mode(data1) mode2 = find_mode(data2) mode3 = find_mode(data3) print(mode1) # Outputs: [4] print(mode2) # Outputs: [10, 20, 30, 40, 50] print(mode3) # Outputs: [] ``` # Explanation: - **Empty List**: When the list is empty, the function should return an empty list. - **Frequency Count**: Use `collections.Counter` to count the frequency of each number in the list. - **Finding the Mode**: If multiple values have the same maximum frequency, all such values should be returned. - **Handling Unique Values**: If all values are unique, then all values should be returned as the mode. Your implementation should ensure the correct handling of the specified cases, utilizing the `Counter` object and list comprehensions efficiently.","solution":"from collections import Counter def find_mode(numbers): Return the mode(s) of a list of numbers. numbers: a list of integers or floats Returns: A list containing the mode(s) of the numbers. if not numbers: return [] freq = Counter(numbers) max_count = max(freq.values()) modes = [number for number, count in freq.items() if count == max_count] return modes"},{"question":"You are required to write a Python function named `plot_quadratic_graph` that utilizes the `matplotlib` library to plot the quadratic function ( y = x^2 ). The graph should cover values in the range [-2, 2], and it must include labeled axes and a title. The function should perform the following tasks: 1. Create an array of x values ranging from -2 to 2 with a step size of 0.1. 2. Calculate the corresponding y values for the quadratic function ( y = x^2 ). 3. Plot these x and y values. 4. Label the x-axis as \'x\'. 5. Label the y-axis as \'f(x) = x^2\'. 6. Give the plot a title, \\"Graph of ( f(x) = x^2 )\\". 7. Set the x-axis and y-axis limits to [-2, 2] and [0, 4], respectively. 8. Display the plot. Leverage the following `matplotlib.pyplot` functions to achieve these tasks: - `matplotlib.pyplot.plot` - `matplotlib.pyplot.ylabel` - `matplotlib.pyplot.title` - `matplotlib.pyplot.xlabel` - `matplotlib.pyplot.xlim` - `matplotlib.pyplot.ylim` - `matplotlib.pyplot.show`","solution":"import matplotlib.pyplot as plt import numpy as np def plot_quadratic_graph(): # 1. Create an array of x values ranging from -2 to 2 with a step size of 0.1. x = np.arange(-2, 2.1, 0.1) # 2. Calculate the corresponding y values for the quadratic function y = x^2. y = x**2 # 3. Plot these x and y values. plt.plot(x, y) # 4. Label the x-axis as \'x\'. plt.xlabel(\'x\') # 5. Label the y-axis as \'f(x) = x^2\'. plt.ylabel(\'f(x) = x^2\') # 6. Give the plot a title, \\"Graph of f(x) = x^2\\". plt.title(\'Graph of f(x) = x^2\') # 7. Set the x-axis and y-axis limits to [-2, 2] and [0, 4], respectively. plt.xlim([-2, 2]) plt.ylim([0, 4]) # 8. Display the plot. plt.show()"},{"question":"Take a list of sentences as input, each sentence being a string, and perform the following operations: 1. Tokenize each sentence into words and remove any punctuation. 2. Create a dictionary where the keys are the words and the values are the respective frequencies of those words across all sentences. 3. Generate a bar plot to visualize the word frequencies using matplotlib, ensuring to include appropriate labels and a title. If the list is empty, return an empty dictionary and None for the plot. The function should output with: tuple: A tuple containing: dict: A dictionary with word frequencies. matplotlib.axes.Axes: The Axes object for the word frequency bar plot. None if the list is empty. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt from collections import Counter import string def task_func(sentences): ```","solution":"import matplotlib.pyplot as plt from collections import Counter import string def task_func(sentences): if not sentences: return {}, None # Tokenize each sentence into words and remove any punctuation. words = [] for sentence in sentences: # Remove punctuation and convert to lowercase. sentence = sentence.translate(str.maketrans(\'\', \'\', string.punctuation)).lower() words.extend(sentence.split()) # Create a dictionary where the keys are the words and the values are their frequencies. word_freq = dict(Counter(words)) # Generate a bar plot to visualize the word frequencies. fig, ax = plt.subplots() ax.bar(word_freq.keys(), word_freq.values()) ax.set_xlabel(\'Words\') ax.set_ylabel(\'Frequencies\') ax.set_title(\'Word Frequencies\') plt.xticks(rotation=90) # Rotate the x labels for better readability plt.show() return word_freq, ax"},{"question":"Your task is to create a function called `find_highest_paid_employee` that retrieves the name and salary of the highest paid employee from a company database, which is accessible through a publicly available API endpoint. The API endpoint returns JSON data containing employee details. The API endpoint for this task uses the following URL: ``` https://mockapi.io/api/v1/employees ``` The JSON response includes an array of employee objects, with each object having the following fields: `name` (a string representing the employee\'s name) and `salary` (a number representing the employee\'s salary). You need to complete the following tasks: 1. Make an HTTPS GET request to the given API endpoint. 2. Parse the returned JSON data to extract the list of employees. 3. Determine the highest paid employee by comparing their salaries. 4. Return the name and salary of the highest paid employee as a tuple (name, salary). **Function Signature:** ```python def find_highest_paid_employee() -> tuple: ... ``` **Hint:** - You may use the `requests` library for making the HTTPS GET request. - You can use the built-in `json` module to parse the JSON response. **Requirements:** - Use the `requests` library to establish the connection and make the GET request. - Handle the JSON parsing and data extraction to determine the highest paid employee.","solution":"import requests def find_highest_paid_employee() -> tuple: url = \\"https://mockapi.io/api/v1/employees\\" response = requests.get(url) response.raise_for_status() employees = response.json() highest_paid_employee = max(employees, key=lambda x: x[\'salary\']) return (highest_paid_employee[\'name\'], highest_paid_employee[\'salary\'])"},{"question":"To aid in validating software requirements, you need to write a function that takes two strings and returns the number of characters they have in common, considering case sensitivity and multiplicity of characters. For example, if both strings contain the character \'a\' twice, it should be counted twice if it appears in both strings at least that many times. **Function Name:** `common_char_count` **Parameters:** 1. **str1**: The first string to be compared. 2. **str2**: The second string to be compared. **Returns:** - An integer representing the count of common characters. **Requirements:** - The function should be performant for string inputs up to 1000 characters long. - Consider all characters, including spaces and punctuation. **Example:** ```python result = common_char_count(\'aabcc\', \'adcaa\') print(result) # Expected Output: # 3 (2 \'a\'s and 1 \'c\' are common in both strings) result = common_char_count(\'hello\', \'world\') print(result) # Expected Output: # 2 (\'o\' and \'l\' are common) ``` Provide a fully-formed and functional Python function as specified above.","solution":"def common_char_count(str1, str2): Returns the number of characters that are common between str1 and str2, considering case sensitivity and multiplicity. from collections import Counter # Count the frequency of each character in both strings counter1 = Counter(str1) counter2 = Counter(str2) # Calculate the common characters considering their multiplicity common_count = 0 for char in counter1: if char in counter2: common_count += min(counter1[char], counter2[char]) return common_count"},{"question":"You are tasked with implementing a function that simulates a basic banking system. The function should support operations for creating an account, depositing money, withdrawing money, and checking the balance. Each account is identified uniquely by an account number. Ensure that: 1. **Account Creation**: A new account can only be created if the account number does not already exist. 2. **Deposit**: Money can be deposited only into an existing account. The deposited amount should be added to the current balance of the account. 3. **Withdraw**: Money can be withdrawn from an existing account only if there is sufficient balance. The withdrawn amount should be subtracted from the current balance. 4. **Balance Inquiry**: The current balance of an account can be checked given the account number. Implement the following functions: 1. `create_account(account_number: int) -> bool`: Returns `True` if the account was successfully created, otherwise `False`. 2. `deposit(account_number: int, amount: float) -> bool`: Returns `True` if the deposit was successful, otherwise `False`. 3. `withdraw(account_number: int, amount: float) -> bool`: Returns `True` if the withdrawal was successful, otherwise `False`. 4. `check_balance(account_number: int) -> float`: Returns the balance of the account if it exists, otherwise `None`. # Example ```python # Creating an account with account number 1001 create_account(1001) # Returns: True # Checking balance for account number 1001, initial balance should be 0.0 check_balance(1001) # Returns: 0.0 # Depositing 500 into account number 1001 deposit(1001, 500) # Returns: True # Checking balance for account number 1001 after deposit check_balance(1001) # Returns: 500.0 # Attempting to withdraw 200 from account number 1001 withdraw(1001, 200) # Returns: True # Checking balance for account number 1001 after withdrawal check_balance(1001) # Returns: 300.0 ``` Implement the class `Bank` with the described methods to perform necessary operations accordingly.","solution":"class Bank: def __init__(self): self.accounts = {} def create_account(self, account_number: int) -> bool: if account_number in self.accounts: return False self.accounts[account_number] = 0.0 return True def deposit(self, account_number: int, amount: float) -> bool: if account_number not in self.accounts or amount < 0: return False self.accounts[account_number] += amount return True def withdraw(self, account_number: int, amount: float) -> bool: if account_number not in self.accounts or amount < 0 or self.accounts[account_number] < amount: return False self.accounts[account_number] -= amount return True def check_balance(self, account_number: int) -> float: if account_number not in self.accounts: return None return self.accounts[account_number]"},{"question":"**Given an array of integers, write a function `max_subset_sum` that finds the maximum sum of non-adjacent elements. **Function Signature:** ```python def max_subset_sum(arr: list) -> int: Finds the maximum sum of non-adjacent elements in the given array. Parameters: - arr (list): List of integers (can be positive, negative, or zero). Returns: - int: Maximum sum of non-adjacent elements. ``` **Requirements:** 1. You cannot include adjacent elements in the sum. 2. The function should handle arrays with both positive and negative integers. 3. The function should efficiently handle large arrays. **Steps:** 1. Initialize two variables to keep track of the maximum sum including the current element and the maximum sum excluding the current element. 2. Iterate through the array and update these variables accordingly. 3. Return the maximum of the two variables at the end. **Example Usage:** ```python arr = [3, 2, 5, 10, 7] print(max_subset_sum(arr)) # Output: 15 ``` **Explanation:** - In the given example, the subset [3, 10] has the maximum sum of non-adjacent elements, which is 15.","solution":"def max_subset_sum(arr: list) -> int: if not arr: return 0 elif len(arr) == 1: return max(0, arr[0]) incl = max(0, arr[0]) excl = 0 for i in range(1, len(arr)): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"You are tasked with creating a function to generate a mosaic pattern of squares in Python using the `matplotlib` library. The function should compute the coordinates for placing squares in a grid layout within a given canvas area. # Requirements: - You need to create a function named `plot_square_mosaic`. - This function should take four parameters: - `canvas_size` (tuple of two ints): the width and height of the canvas. - `num_squares_row` (int): the number of squares per row. - `num_squares_col` (int): the number of squares per column. - `square_size` (float): the side length of each square. - The function should compute the positions of squares such that they fit within the canvas, starting from the top-left corner and going row by row. - The function should plot all the squares using `matplotlib.pyplot`. # Example Usage: ```python plot_square_mosaic((10, 10), 3, 3, 2) ``` This will plot a 3 by 3 mosaic of squares each of side length 2 within a 10x10 canvas. # Libraries to Use: - matplotlib.pyplot # Educational Goal: This exercise aims to teach the use of `matplotlib` for plotting shapes and managing layouts in Python. The exercise also emphasizes understanding coordinate systems and utilizing loops for systematic placement of objects on a plot.","solution":"import matplotlib.pyplot as plt def plot_square_mosaic(canvas_size, num_squares_row, num_squares_col, square_size): Plots a mosaic of squares within a given canvas area. Parameters: - canvas_size (tuple of two ints): the width and height of the canvas. - num_squares_row (int): the number of squares per row. - num_squares_col (int): the number of squares per column. - square_size (float): the side length of each square. fig, ax = plt.subplots() canvas_width, canvas_height = canvas_size for row in range(num_squares_row): for col in range(num_squares_col): x = col * square_size y = canvas_height - (row + 1) * square_size if x + square_size <= canvas_width and y + square_size <= canvas_height: square = plt.Rectangle((x, y), square_size, square_size, fill=None, edgecolor=\'black\') ax.add_patch(square) ax.set_xlim(0, canvas_width) ax.set_ylim(0, canvas_height) ax.set_aspect(\'equal\') plt.gca().invert_yaxis() plt.show()"},{"question":"You are in charge of managing the inventory of a bookstore. Your task is to write a function called `manage_inventory` that takes a list of inventory records and performs various reporting tasks using advanced Python collections from the `collections` module. Each inventory record will be a tuple with the following elements: `(book_id, title, author, quantity)`. You need to process these records using the following functionalities: 1. **Counter**: Count the total number of books for each author. 2. **defaultdict**: Group book titles by author, so you can retrieve a list of all titles written by a specific author. 3. **deque**: Store the last 3 added inventory records in the order they were recorded. This allows quick additions and deletions from both ends. 4. **namedtuple**: Use a namedtuple to represent each inventory record for better readability. Your function should perform the following operations: - Count the total number of books for each author using `Counter`. - Group all book titles by author using `defaultdict`. - Maintain a list of the last 3 added inventory records using `deque`. - Return a report as an `OrderedDict`, which includes: - Author name as the key. - A tuple with total quantity of books and list of book titles as the value. **Function Signature**: `def manage_inventory(inventory_data: List[Tuple[int, str, str, int]]) -> OrderedDict[str, Tuple[int, List[str]]]:` Hint: Remember to import and use `collections.Counter`, `collections.defaultdict`, `collections.deque`, and `collections.namedtuple`.","solution":"from collections import Counter, defaultdict, deque, namedtuple, OrderedDict from typing import List, Tuple def manage_inventory(inventory_data: List[Tuple[int, str, str, int]]) -> OrderedDict[str, Tuple[int, List[str]]]: # Define the namedtuple for inventory records InventoryRecord = namedtuple(\'InventoryRecord\', [\'book_id\', \'title\', \'author\', \'quantity\']) # Initialize the required collections author_counter = Counter() titles_by_author = defaultdict(list) last_three_records = deque(maxlen=3) # Process each inventory record for record in inventory_data: inventory_record = InventoryRecord._make(record) author_counter[inventory_record.author] += inventory_record.quantity titles_by_author[inventory_record.author].append(inventory_record.title) last_three_records.append(inventory_record) # Construct the ordered report report = OrderedDict() for author in sorted(titles_by_author.keys()): report[author] = (author_counter[author], titles_by_author[author]) return report"},{"question":"You are tasked with writing a function named `count_unique_items` to determine the number of unique items sold in a store on specific dates. This function should take a pandas DataFrame containing three columns: \\"Date\\" (representing the sale date), \\"Item_ID\\" (representing the unique identifier for the item sold), and \\"Quantity\\" (indicating the number of each item sold). Here\'s a breakdown of your steps: 1. Group the data by the \\"Date\\" and \\"Item_ID\\" columns to count the occurrences of each unique item for each date. 2. Create a new DataFrame with each date and the corresponding count of unique \\"Item_IDs\\" sold. 3. Return a DataFrame consisting of the \\"Date\\" column and a column named \\"Unique_Items_Sold\\" which holds the count of unique items sold on each date. You must use `pandas` for all DataFrame operations. **Function Signature:** ```python def count_unique_items(df: pd.DataFrame) -> pd.DataFrame: pass ``` **Example Input:** ```python import pandas as pd # Sample sales data for 6 days data = { \'Date\': [\'2022-01-01\', \'2022-01-01\', \'2022-01-02\', \'2022-01-02\', \'2022-01-03\', \'2022-01-03\', \'2022-01-03\', \'2022-01-04\', \'2022-01-05\', \'2022-01-06\'], \'Item_ID\': [101, 102, 103, 101, 104, 105, 104, 106, 107, 108], \'Quantity\': [3, 1, 2, 4, 1, 2, 1, 5, 1, 2] } df = pd.DataFrame(data) ``` **Example Output:** ```python # Expected output for the provided sample dataframe Date Unique_Items_Sold 0 2022-01-01 2 1 2022-01-02 2 2 2022-01-03 2 3 2022-01-04 1 4 2022-01-05 1 5 2022-01-06 1 ```","solution":"import pandas as pd def count_unique_items(df: pd.DataFrame) -> pd.DataFrame: Returns a DataFrame with the count of unique items sold on each date. Parameters: df (pd.DataFrame): DataFrame containing columns \'Date\', \'Item_ID\', and \'Quantity\' Returns: pd.DataFrame: DataFrame with columns \'Date\' and \'Unique_Items_Sold\' unique_items_per_date = df.groupby(\'Date\')[\'Item_ID\'].nunique().reset_index() unique_items_per_date.columns = [\'Date\', \'Unique_Items_Sold\'] return unique_items_per_date"},{"question":"Create a function `find_components(adj_list)` that takes an adjacency list representation of an undirected graph and returns a list of connected components. Each connected component should be represented as a list of vertices. **Function Signature:** ```python def find_components(adj_list: Dict[int, List[int]]) -> List[List[int]]: ``` **Parameters:** - `adj_list`: A dictionary where keys are vertex identifiers and values are lists of adjacent vertices. **Returns:** - A list of lists, each containing the vertices in one connected component, and the components should be sorted in ascending order. **Examples:** ```python find_components({1: [2, 3], 2: [1, 4], 3: [1], 4: [2], 5: [], 6: [7], 7: [6]}) # Expected output: [[1, 2, 3, 4], [5], [6, 7]] find_components({1: [2], 2: [1], 3: [4], 4: [3], 5: [], 6: [], 7: [8], 8: [7]}) # Expected output: [[1, 2], [3, 4], [5], [6], [7, 8]] ``` **Constraints:** - The graph has `n` vertices, where `1 <= n <= 1000`. - Vertices are identified by integers in the range `[1, n]`. - It is guaranteed that the input graph is undirected. To solve this, you can implement a depth-first search (DFS) or breadth-first search (BFS) to explore each component. The solution must handle graphs with disconnected vertices and multiple components efficiently within the given constraints. Please make sure to import `defaultdict` from the `collections` module for handling graph data structures.","solution":"from collections import defaultdict from typing import List, Dict def find_components(adj_list: Dict[int, List[int]]) -> List[List[int]]: Finds and returns all the connected components of an undirected graph represented by the given adjacency list. :param adj_list: A dictionary where keys are vertex identifiers and values are lists of adjacent vertices. :return: A list of lists, each containing the vertices in one connected component, sorted in ascending order. visited = set() components = [] def dfs(vertex, current_component): stack = [vertex] while stack: v = stack.pop() if v not in visited: visited.add(v) current_component.append(v) for neighbor in adj_list[v]: if neighbor not in visited: stack.append(neighbor) for vertex in adj_list: if vertex not in visited: current_component = [] dfs(vertex, current_component) components.append(sorted(current_component)) # sort list of components by the first element of each component return sorted(components, key=lambda x: x[0])"},{"question":"You are given a grid of characters of dimensions `m x n` and a string `word`. Write a function `word_search` to determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Implement the function `word_search` as follows: ```python def word_search(board: List[List[str]], word: str) -> bool: # Your implementation here ``` **Example 1:** Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" ``` Output: `True` **Explanation:** The word \\"ABCCED\\" can be found in the grid following the path A -> B -> C -> C -> E -> D. **Example 2:** Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" ``` Output: `True` **Explanation:** The word \\"SEE\\" can be found in the grid following the path S -> E -> E. **Example 3:** Input: ```python board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" ``` Output: `False` **Explanation:** The word \\"ABCB\\" cannot be formed because after using the cell with \'B\' in row 0 and column 1, the same cell cannot be reused. **Requirements:** 1. The function should return a boolean indicating whether the word is found in the grid. 2. Implement efficient searching mechanisms to ensure performance within reasonable limits for grids of typical sizes (e.g., `m, n <= 200`).","solution":"from typing import List def word_search(board: List[List[str]], word: str) -> bool: if not board or not word: return False m, n = len(board), len(board[0]) def dfs(x, y, word_index): if word_index == len(word): return True if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != word[word_index]: return False # Save the character at the board position and mark it as visited temp = board[x][y] board[x][y] = \'#\' # Explore the neighbors in four possible directions found = ( dfs(x + 1, y, word_index + 1) or dfs(x - 1, y, word_index + 1) or dfs(x, y + 1, word_index + 1) or dfs(x, y - 1, word_index + 1) ) # Restore the character at the board position board[x][y] = temp return found for i in range(m): for j in range(n): if board[i][j] == word[0] and dfs(i, j, 0): return True return False"},{"question":"**File Renaming Automation** You are required to create a function called `rename_files(dir_path)`. Given the path to a directory, this function should rename all the files in that directory by appending a serial number starting from 1 to the end of each file\'s name, while retaining the original file extension. The renaming should be such that if a file is named \'example.txt\' and it is the first file in the directory, it will be renamed to \'example_1.txt\', the second file will be renamed to \'example_2.txt\', and so on. You must: 1. Use the `os` library\'s functions to interact with the file system. 2. Ensure that the function processes files only, and skips any subdirectories. Write the `rename_files` function that follows these specifications. Ensure that the code correctly handles different file types and renames them as expected without losing their file extensions. **Function Signature:** ```python def rename_files(dir_path: str): pass ``` **Example Usage:** ```python # Consider the directory contains the following files: [\'a.txt\', \'b.py\', \'c.jpg\'] rename_files(\\"/path/to/directory\\") # After execution, the directory should have: [\'a_1.txt\', \'b_2.py\', \'c_3.jpg\'] ``` **Constraints:** - The directory will only contain files with standard file extensions. - File names are guaranteed to be unique within the directory. - The directory path provided is always valid and accessible.","solution":"import os def rename_files(dir_path: str): Renames all files in the given directory by appending a serial number starting from 1 to the end of each file\'s name, retaining the original file extension. # Get a list of all files in the directory files = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))] # Sort files to maintain a predictable order files.sort() # Iterate over the files and rename them for index, filename in enumerate(files): base, ext = os.path.splitext(filename) new_name = f\\"{base}_{index + 1}{ext}\\" os.rename( os.path.join(dir_path, filename), os.path.join(dir_path, new_name) )"},{"question":"# Context You are given an array of integers representing the elevation of terrain. The goal is to determine the amount of water that can be trapped after it rains. The water is trapped between the elevations and can only accumulate in valleys caused by these elevations. This task involves calculating the total trapped water using an efficient algorithm. # Task Implement a function named `calculate_trapped_water` that computes the total amount of trapped water: 1. **Function Name**: `calculate_trapped_water` 2. **Parameters**: - `elevations`: A list of non-negative integers representing the elevation heights. 3. **Returns**: - An integer representing the total amount of water trapped after it rains. # Instructions: - Do not use any external libraries. - The function should use a two-pointer approach for optimal performance. # Example ```python elevations = [0,1,0,2,1,0,1,3,2,1,2,1] output = calculate_trapped_water(elevations) # The output should be 6 as 6 units of water can be trapped. # Explanation: The water trapped is illustrated below: # Elevation: [0,1,0,2,1,0,1,3,2,1,2,1] # Water trapped: [ ],[ ],[1],[ ],[1],[2],[1],[ ],[ ],[1],[ ] ``` # Additional Details: - The list of elevations will always have at least one element. - Edge cases should be considered, such as when no water can be trapped (e.g., monotonically increasing or decreasing elevations).","solution":"def calculate_trapped_water(elevations): Calculate the total amount of trapped water in the given elevations. Parameters: elevations (list): A list of non-negative integers representing the elevation heights. Returns: int: Total units of trapped water if not elevations: return 0 left, right = 0, len(elevations) - 1 left_max, right_max = elevations[left], elevations[right] trapped_water = 0 while left < right: if elevations[left] < elevations[right]: if elevations[left] >= left_max: left_max = elevations[left] else: trapped_water += left_max - elevations[left] left += 1 else: if elevations[right] >= right_max: right_max = elevations[right] else: trapped_water += right_max - elevations[right] right -= 1 return trapped_water"},{"question":"Given a list of integers `arr` and an integer `k`, write a function named `count_k_sum_sublists` that finds the number of contiguous sublists (subarrays) whose sum equals `k`. Your implementation should use an efficient approach to solve the problem in linear time. The function should adhere to the following signature: ```python def count_k_sum_sublists(arr: list[int], k: int) -> int: ``` **Input:** - A list of integers `arr` (1 <= len(arr) <= 10^5, -10^9 <= arr[i] <= 10^9 for each integer `arr[i]`) - An integer `k` (-10^9 <= k <= 10^9) **Output:** - Return the number of contiguous sublists whose sum equals `k`. Here is a brief explanation of an example: Example: ```python arr = [1, 1, 1] k = 2 output = count_k_sum_sublists(arr, k) print(output) # Output should be 2 ``` Explanation: - The function will find two sublists with a sum equal to `2`: [1, 1] (first two elements) and [1, 1] (last two elements). **Constraints:** 1. Your solution must be efficient and work for large inputs up to the maximum constraints. 2. You may use additional data structures to achieve the desired performance.","solution":"def count_k_sum_sublists(arr: list[int], k: int) -> int: Returns the number of contiguous sublists whose sum equals to k. count = 0 sum_so_far = 0 sum_count_map = {0: 1} # To handle sum = k at start of the array for num in arr: sum_so_far += num if (sum_so_far - k) in sum_count_map: count += sum_count_map[sum_so_far - k] if sum_so_far in sum_count_map: sum_count_map[sum_so_far] += 1 else: sum_count_map[sum_so_far] = 1 return count"},{"question":"You are required to write a function named `find_customers_with_most_purchases` that analyzes a CSV file containing transaction records to identify the top customers based on the number of purchases they made. The CSV file contains columns for `customer_id`, `product_id`, and `purchase_date`. Your function will: 1. Read the CSV file to extract the purchase data. 2. Count the total number of purchases made by each customer. 3. Identify the customer(s) with the highest number of purchases. 4. Return two lists: one for the `customer_id(s)` of the top customers, and one for their respective `purchase_counts`. You should use the `pandas.read_csv` function to read the CSV file and work with the data. Here’s an example of what the CSV file might look like: ```csv customer_id,product_id,purchase_date 1,101,2023-01-15 2,105,2023-02-18 1,103,2023-02-22 3,104,2023-03-01 2,101,2023-03-09 1,102,2023-04-15 2,103,2023-04-22 3,106,2023-05-01 4,107,2023-05-09 ``` **Function Signature:** ```python def find_customers_with_most_purchases(file_path: str) -> tuple[list[int], list[int]]: ``` **Requirements:** - Use the `pandas.read_csv` function to read the CSV file. - Implement your solution to correctly and efficiently calculate the top customers.","solution":"import pandas as pd def find_customers_with_most_purchases(file_path: str) -> tuple[list[int], list[int]]: Finds the customers with the most purchases from a CSV file containing transaction records. :param file_path: Path to the CSV file. :return: A tuple containing two lists: one with the customer_ids and another with their corresponding purchase counts. # Read the CSV file data = pd.read_csv(file_path) # Count purchases by customer_id purchase_counts = data[\'customer_id\'].value_counts() # Find the maximum purchase count max_purchase_count = purchase_counts.max() # Identify customers who have the maximum purchase count top_customers = purchase_counts[purchase_counts == max_purchase_count].index.tolist() top_purchase_counts = [max_purchase_count] * len(top_customers) return top_customers, top_purchase_counts"},{"question":"You are required to write a function `calculate_expression(expr)`, which evaluates a given expression containing integers and the operators `+`, `-`, `*`, `/`, and parentheses. The expression will always be valid and may contain spaces which should be ignored. To solve this problem, you should utilize the `re` and `operator` modules. The function should return the result of the expression as a floating-point number. **Function Signature:** ```python def calculate_expression(expr: str) -> float: ``` **Parameters:** - `expr` (str): A string representing a mathematical expression. The string can contain integers, the four basic arithmetic operators, parentheses, and spaces. **Returns:** - `float`: The result of the evaluated expression. **Example:** ```python expr = \\" 3 + 5 / 2 \\" print(calculate_expression(expr)) # Should return 5.5 expr = \\"10 + (2 * 5 - 3)\\" print(calculate_expression(expr)) # Should return 17.0 expr = \\"(1 + 2) * (3 / 4) - 5\\" print(calculate_expression(expr)) # Should return -2.75 ```","solution":"import re import operator from collections import deque def calculate_expression(expr: str) -> float: def parse_expression(expression): tokens = re.findall(r\'d+|[-+*/()]\', expression) return tokens def shunting_yard(parsed_tokens): prec = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] operators = deque() for token in parsed_tokens: if token.isdigit(): output.append(token) elif token in prec: while (operators and operators[-1] != \'(\' and prec[operators[-1]] >= prec[token]): output.append(operators.pop()) operators.append(token) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': output.append(operators.pop()) operators.pop() # remove \'(\' while operators: output.append(operators.pop()) return output def evaluate_postfix(postfix_tokens): operations = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.truediv } stack = deque() for token in postfix_tokens: if token.isdigit(): stack.append(float(token)) else: b = stack.pop() a = stack.pop() res = operations[token](a, b) stack.append(res) return stack[0] expr = expr.replace(\' \', \'\') parsed_tokens = parse_expression(expr) postfix_tokens = shunting_yard(parsed_tokens) result = evaluate_postfix(postfix_tokens) return result"},{"question":"You are asked to implement a function that processes log files from a given directory and extracts specific information from each log file. The function should be named `process_log_files` and should perform the following steps: 1. Traverse a given directory to find all files with a `.log` extension. 2. Open and read each `.log` file; assume the log files are plain text. 3. Each log file contains multiple lines, each line starting with a timestamp followed by a log level and the log message, for example: `2023-10-05 14:48:17 INFO User logged in`. 4. Filter out log messages that are not of the `ERROR` log level. 5. Extract and store details of the `ERROR` log messages, including the timestamp and log message. 6. Write the extracted details to a new file named `error_summary.log` in the same directory. Your implementation should handle potential file I/O errors gracefully and log error messages when appropriate. You may assume the necessary directory path is provided as an argument to the function. ```python def process_log_files(directory_path: str) -> bool: # Your implementation here ``` **Requirements**: - Use `os` and `os.path` modules to traverse the directory. - Use `with` statements for file operations to ensure proper resource management. - Handle exceptions that may arise from file I/O operations. - Return `False` if any error occurs during processing; return `True` upon successful completion.","solution":"import os def process_log_files(directory_path: str) -> bool: try: error_details = [] # Traverse the directory to find .log files for root, dirs, files in os.walk(directory_path): for file in files: if file.endswith(\'.log\'): file_path = os.path.join(root, file) with open(file_path, \'r\') as log_file: for line in log_file: parts = line.split(\' \', 3) if len(parts) >= 4 and parts[2] == \'ERROR\': timestamp = f\\"{parts[0]} {parts[1]}\\" message = parts[3].strip() error_details.append(f\\"{timestamp} {message}\\") # Write the extracted ERROR details to error_summary.log summary_file_path = os.path.join(directory_path, \'error_summary.log\') with open(summary_file_path, \'w\') as summary_file: for detail in error_details: summary_file.write(detail + \'n\') return True except Exception as e: print(f\\"An error occurred: {e}\\") return False"},{"question":"**In this problem, you are asked to write a class that models a simple Library System. The class will allow for adding books, borrowing books, returning books, and keeping track of the number of copies available for each book. Here are the requirements: 1. **Class Name:** `Library` 2. **Class Methods:** - `__init__(self)`: Initializes an empty dictionary to store books and their available copies. - `add_book(self, title, num_copies)`: Adds the specified number of copies of the book with the given title to the library. If the book already exists, it increments the available copies. - `borrow_book(self, title)`: Allows a user to borrow a book if it\'s available. It decreases the number of available copies by 1. If the book is not available, it returns a message indicating the book is not available. - `return_book(self, title)`: Allows a user to return a borrowed book. It increments the number of available copies by 1. - `get_available_copies(self, title)`: Returns the number of available copies for the given book title. If the book does not exist in the library, it returns 0. # Example Usage: ```python library = Library() library.add_book(\\"Python Programming\\", 3) library.add_book(\\"Data Science\\", 2) print(library.get_available_copies(\\"Python Programming\\")) # Output: 3 library.borrow_book(\\"Python Programming\\") print(library.get_available_copies(\\"Python Programming\\")) # Output: 2 library.return_book(\\"Python Programming\\") print(library.get_available_copies(\\"Python Programming\\")) # Output: 3 ``` # Task: Implement the `Library` class with the methods described above, ensuring it correctly manages the library\'s book inventory.**","solution":"class Library: def __init__(self): Initializes an empty dictionary to store books and their available copies. self.books = {} def add_book(self, title, num_copies): Adds the specified number of copies of the book with the given title to the library. If the book already exists, it increments the available copies. :param title: The title of the book. :param num_copies: The number of copies to add. if title in self.books: self.books[title] += num_copies else: self.books[title] = num_copies def borrow_book(self, title): Allows a user to borrow a book if it\'s available. It decreases the number of available copies by 1. If the book is not available, returns a message indicating the book is not available. :param title: The title of the book. :return: Message indicating the result. if title in self.books and self.books[title] > 0: self.books[title] -= 1 return f\\"Successfully borrowed {title}.\\" else: return f\\"{title} is not available.\\" def return_book(self, title): Allows a user to return a borrowed book. It increments the number of available copies by 1. :param title: The title of the book. if title in self.books: self.books[title] += 1 else: self.books[title] = 1 def get_available_copies(self, title): Returns the number of available copies for the given book title. If the book does not exist in the library, returns 0. :param title: The title of the book. :return: Number of available copies. return self.books.get(title, 0)"},{"question":"Write a function that takes a list of strings and returns the list sorted in ascending order by their lengths. If two strings have the same length, they should remain in their original relative order. You must not use any built-in sort functions. Implement your sorting algorithm from scratch. The function should return: list: A list of strings sorted by length in ascending order. Example: ``` Input: [\\"apple\\", \\"pie\\", \\"banana\\", \\"a\\", \\"pear\\"] Output: [\\"a\\", \\"pie\\", \\"pear\\", \\"apple\\", \\"banana\\"] ``` You should write self-contained code starting with: ``` def task_func(strings): ```","solution":"def task_func(strings): Sorts a list of strings by their lengths in ascending order. If two strings have the same length, they should remain in their original order. if not strings: return [] def merge(left, right): result = [] while left and right: if len(left[0]) <= len(right[0]): result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left or right) return result def merge_sort(lst): if len(lst) <= 1: return lst mid = len(lst) // 2 left = merge_sort(lst[:mid]) right = merge_sort(lst[mid:]) return merge(left, right) return merge_sort(strings)"},{"question":"Create a function to find the smallest missing positive integer from an unsorted list of integers. The function should handle both positive and negative integers and should operate in O(n) time and O(1) space complexity. The function should return: int: The smallest missing positive integer in the list. You should write self-contained code starting with: ``` def task_func(arr): ``` # Example: ``` # Example 1: arr = [3, 4, -1, 1] # Output: 2 # Explanation: The smallest missing positive integer is 2. # Example 2: arr = [1, 2, 0] # Output: 3 # Explanation: The smallest missing positive integer is 3. ```","solution":"def task_func(arr): Finds the smallest missing positive integer from an unsorted list of integers. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function `find_missing_elements(arr, n)` in Python that finds the missing elements in an array of integers containing numbers from 1 to `n`. Each number in the range 1 to `n` should appear exactly once, but some numbers might be missing in the given array. The function should return a sorted list of the missing numbers. # Function Signature ```python def find_missing_elements(arr: list, n: int) -> list: ``` # Input - `arr`: A list of integers with length `m` (where `m` ≤ `n`), containing distinct integers ranging from 1 to `n`. - `n`: An integer representing the maximum number in the range [1, n]. # Output - Returns a sorted list of integers representing the missing numbers from the given range. # Example ```python def find_missing_elements(arr: list, n: int) -> list: # Your implementation here # Sample usage print(find_missing_elements([1, 3, 4, 6], 6)) # Output: [2, 5] print(find_missing_elements([2, 5, 7, 9], 10)) # Output: [1, 3, 4, 6, 8, 10] print(find_missing_elements([], 5)) # Output: [1, 2, 3, 4, 5] ``` # Requirements - The function should handle cases where the list `arr` is empty. - The function should return an empty list if there are no missing elements.","solution":"def find_missing_elements(arr: list, n: int) -> list: Finds the missing elements in an array containing numbers from 1 to n. Parameters: arr (list): A list of integers containing distinct integers ranging from 1 to n. n (int): An integer representing the maximum value in the range [1, n]. Returns: list: A sorted list of integers representing the missing numbers from the given range. complete_set = set(range(1, n + 1)) given_set = set(arr) missing_elements = list(complete_set - given_set) missing_elements.sort() return missing_elements"},{"question":"You are given an array of integers which represents the daily temperatures recorded for a month. Write a function `find_hottest_days(temperatures)` that returns an array of integers representing the hottest temperatures of each week from the highest to the lowest. Consider each week to be composed of 7 consecutive days. Here are the requirements: 1. The input list, `temperatures`, will always have a length that is a multiple of 7 (i.e., `len(temperatures) % 7 == 0`). 2. Extract the maximum temperature from each 7-day period (week). 3. Sort and return these weekly maximum temperatures in descending order. **Function Signature:** ```python def find_hottest_days(temperatures: list) -> list: pass ``` **Example:** Given the array: ``` [30, 32, 35, 33, 31, 29, 28, 34, 36, 35, 37, 38, 34, 33, 31, 32, 33, 34, 35, 36, 37] ``` The function should: 1. Divide the array into weeks: - Week 1: [30, 32, 35, 33, 31, 29, 28] - Week 2: [34, 36, 35, 37, 38, 34, 33] - Week 3: [31, 32, 33, 34, 35, 36, 37] 2. Identify the hottest temperatures of each week: - Week 1: 35 - Week 2: 38 - Week 3: 37 3. Return these temperatures in descending order: `[38, 37, 35]` **Notes:** - You may assume the temperatures are integers. - Sorting should be based on descending order of the weekly maximum temperatures after identifying them.","solution":"def find_hottest_days(temperatures: list) -> list: Returns the hottest temperatures of each week in descending order. :param temperatures: List of daily temperatures for a month. :return: List of weekly maximum temperatures sorted in descending order. weeks = [temperatures[i:i+7] for i in range(0, len(temperatures), 7)] max_temps = [max(week) for week in weeks] max_temps.sort(reverse=True) return max_temps"},{"question":"This function takes a list of strings, groups them by their first letter, and returns a dictionary. Each key in the dictionary is the first letter, and the value is a list of strings that start with that letter. The output dictionary should have the keys sorted alphabetically. The function should output with: ``` dict: A dictionary with sorted keys and grouped list of strings. You should write self-contained code starting with: ``` ``` def group_by_first_letter(strings): ```","solution":"def group_by_first_letter(strings): from collections import defaultdict res = defaultdict(list) for string in strings: if string: # Check if string is not empty first_letter = string[0] res[first_letter].append(string) return dict(sorted(res.items()))"},{"question":"You are tasked with creating a function that simulates a basic two-dimensional random walk in a grid. The random walk starts at the origin (0, 0) and makes a series of steps, each of which has an equal probability of being in one of the four cardinal directions: up, down, left, or right. Your function should be named `random_walk`. Function Signature: ```python def random_walk(steps: int) -> list: pass ``` Parameters: - `steps` (int): The number of steps to be taken during the random walk. Returns: - `list`: A list of tuples representing the coordinates of each step in the random walk, including the origin. Requirements: - Use the `random` module to generate the random steps. - Each step should have an equal probability of moving up, down, left, or right. - The function should return a list of tuples, where each tuple represents the coordinates (x, y) of a position in the walk. Example Usage: ```python steps = 10 walk = random_walk(steps) print(walk) # Output might look like: # [(0, 0), (0, 1), (0, 2), (-1, 2), (-1, 1), (0, 1), (0, 0), (1, 0), (1, -1), (0, -1), (0, 0)] ``` This function call should simulate a random walk of 10 steps starting from the origin (0, 0). Each move is random and can result in any direction, creating a unique path each time the function is called.","solution":"import random def random_walk(steps: int) -> list: Simulates a random walk of given steps starting from origin (0, 0). Args: steps (int): The number of steps to be taken during the random walk. Returns: list: A list of tuples representing the coordinates of each step in the random walk. x, y = 0, 0 walk = [(x, y)] for _ in range(steps): direction = random.choice([\'up\', \'down\', \'left\', \'right\']) if direction == \'up\': y += 1 elif direction == \'down\': y -= 1 elif direction == \'left\': x -= 1 elif direction == \'right\': x += 1 walk.append((x, y)) return walk"},{"question":"You are given a list of integers where every element appears twice except for one element which appears exactly once. Your task is to implement a function to find the element that appears only once. Write a function called `find_unique_element(nums)` that accepts a list of integers: - `nums`: A list of integers where each integer appears exactly twice except for one integer which appears only once. Your function should return the integer that appears only once. To achieve this, you are required to: 1. Utilize bitwise operations to solve the problem efficiently. 2. Ensure the solution works in linear time complexity, O(n), and uses constant space. Example: ```python def find_unique_element(nums): # Your code here # Test case example_list = [4, 3, 2, 4, 1, 3, 2] print(find_unique_element(example_list)) # Output: 1 ```","solution":"def find_unique_element(nums): Returns the unique element in a list where every element appears twice except for one element. Utilizes bitwise XOR operation to find the unique element in O(n) time and O(1) space. Args: nums (list): List of integers where each integer appears exactly twice except for one integer which appears only once. Returns: int: The unique element. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"You are tasked with generating statistical insights from a CSV file using Python\'s `pandas` library. Write a function `analyze_sales_data` that fulfills the following requirements: 1. **Load the CSV file** into a DataFrame. The CSV file contains columns \'Date\', \'Product\', \'Units Sold\', \'Unit Price\'. 2. **Convert the \'Date\' column** to datetime format. 3. **Calculate total revenue** for each product. (Revenue is calculated as `Units Sold` * `Unit Price`) 4. **Determine the product** with the highest total revenue. 5. **Identify the month** with the highest sales volume (total units sold). 6. **Return a dictionary** with the following keys and corresponding values: - \'top_product\': Product name with the highest total revenue. - \'top_revenue\': The highest total revenue. - \'top_month\': The month with the highest sales volume in the format \'YYYY-MM\'. The function signature should be: ```python def analyze_sales_data(filename: str) -> dict: ```","solution":"import pandas as pd def analyze_sales_data(filename: str) -> dict: Analyzes sales data from a CSV file and provides statistical insights. Parameters: filename (str): The path to the CSV file. Returns: dict: A dictionary containing the top product by revenue, highest revenue, and the month with the highest sales volume. # Load the CSV file into a DataFrame df = pd.read_csv(filename) # Convert the \'Date\' column to datetime format df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Calculate total revenue for each product df[\'Revenue\'] = df[\'Units Sold\'] * df[\'Unit Price\'] product_revenue = df.groupby(\'Product\')[\'Revenue\'].sum() # Determine the product with the highest total revenue top_product = product_revenue.idxmax() top_revenue = product_revenue.max() # Identify the month with the highest sales volume (total units sold) df[\'Month\'] = df[\'Date\'].dt.to_period(\'M\') month_sales_volume = df.groupby(\'Month\')[\'Units Sold\'].sum() top_month = month_sales_volume.idxmax().strftime(\'%Y-%m\') return { \'top_product\': top_product, \'top_revenue\': top_revenue, \'top_month\': top_month }"},{"question":"In this problem, you are required to implement a function that simulates a simple e-commerce order processing system using classes and objects. You will then track the order status and print a summary of the order. Your task is to implement the following: 1. **Create a Product Class**: - A class `Product` with attributes `product_id`, `name`, `price`, and `quantity_in_stock`. - Methods to decrease the stock quantity when a product is purchased. 2. **Create an Order Class**: - A class `Order` with attributes `order_id`, `products` (a list of `Product` objects), and `quantities` (a list of quantities corresponding to the products). - Methods to add products to the order, calculate the total price, and update the stock of the products when the order is placed. 3. **Create an ECommerce System Class**: - A class `ECommerceSystem` to manage the products and orders. - Methods to add products to the system, create new orders, and print order summaries. The function signature for the main class is as follows: ```python class ECommerceSystem: def __init__(self): pass def add_product(self, product: Product) -> None: pass def create_order(self, order: Order) -> None: pass def print_order_summary(self, order_id: int) -> None: pass ``` **Input:** - Products: Instances of `Product` with specified attributes. - Orders: Instances of `Order` with specified attributes and associated methods. **Output:** - None: The function should not return anything but should perform actions and print results accordingly. *Note*: You must use object-oriented programming techniques to encapsulate the functionalities within classes and methods. # Example Usage ```python # Define some products product1 = Product(product_id=1, name=\\"Laptop\\", price=1000, quantity_in_stock=10) product2 = Product(product_id=2, name=\\"Mouse\\", price=50, quantity_in_stock=100) # Create the e-commerce system and add products system = ECommerceSystem() system.add_product(product1) system.add_product(product2) # Create an order order = Order(order_id=1) order.add_product(product1, 2) order.add_product(product2, 5) # Process the order system.create_order(order) # Print the order summary system.print_order_summary(order_id=1) ``` # Expected Output ``` Order ID: 1 Products: - Laptop: 2 units at 1000 each - Mouse: 5 units at 50 each Total Price: 2250 ```","solution":"class Product: def __init__(self, product_id, name, price, quantity_in_stock): self.product_id = product_id self.name = name self.price = price self.quantity_in_stock = quantity_in_stock def decrease_stock(self, quantity): if quantity > self.quantity_in_stock: raise ValueError(f\\"Not enough stock for product {self.name}\\") self.quantity_in_stock -= quantity class Order: def __init__(self, order_id): self.order_id = order_id self.products = [] self.quantities = [] def add_product(self, product, quantity): self.products.append(product) self.quantities.append(quantity) def calculate_total_price(self): total = 0 for product, quantity in zip(self.products, self.quantities): total += product.price * quantity return total def update_stock(self): for product, quantity in zip(self.products, self.quantities): product.decrease_stock(quantity) class ECommerceSystem: def __init__(self): self.products = [] self.orders = [] def add_product(self, product): self.products.append(product) def create_order(self, order): order.update_stock() self.orders.append(order) def print_order_summary(self, order_id): order = next((o for o in self.orders if o.order_id == order_id), None) if not order: print(f\\"Order ID {order_id} not found.\\") return print(f\\"Order ID: {order.order_id}\\") print(\\"Products:\\") for product, quantity in zip(order.products, order.quantities): print(f\\"- {product.name}: {quantity} units at {product.price} each\\") total_price = order.calculate_total_price() print(f\\"Total Price: {total_price}\\")"},{"question":"You are required to implement a function that calculates the average monthly temperature from a given set of daily temperature readings. The function should sum the provided temperatures and compute the average, ensuring to handle any potential anomalies in the data such as null or missing values. The function to be implemented is `average_monthly_temperature`, which should make use of appropriate data handling techniques to manage and filter out invalid entries. # Function Signature ```python def average_monthly_temperature(temperatures: List[Optional[float]]) -> float: pass ``` # Input Parameters - `temperatures`: A list of floats and `None` values representing the daily temperatures recorded for the month. Each entry represents the temperature for one day. If the temperature data for a day is missing or invalid, it is represented by `None`. # Output - Returns a float representing the average temperature for the month. # Tasks 1. Filter out `None` values from the list. 2. Calculate the average of the valid temperatures. 3. Ensure the function handles an edge case where all temperatures might be `None` by returning `0.0`. # Example ```python average_monthly_temperature([22.5, 23.0, None, 21.5, 25.0, None, 24.0, 22.0]) # Should return 22.857142857142858 average_monthly_temperature([None, None, None]) # Should return 0.0 ``` # Important Considerations - Use appropriate functions such as `sum` and `len` to calculate the average. - Handle lists that are either completely empty or contain only `None` values by returning an average temperature of `0.0` to avoid division by zero errors. - Consider using type annotations for the input parameters and return type for better clarity and type-checking. Remember to import the required typing module: ```python from typing import List, Optional ```","solution":"from typing import List, Optional def average_monthly_temperature(temperatures: List[Optional[float]]) -> float: Calculate the average monthly temperature from given daily readings. Filter out None values and compute the average of valid temperatures. # Filter out None values from the list valid_temperatures = [temp for temp in temperatures if temp is not None] # Handle the case where all temperatures are None if not valid_temperatures: return 0.0 # Calculate and return the average of valid temperatures return sum(valid_temperatures) / len(valid_temperatures)"},{"question":"Your task is to implement a function named `blur_image_areas` in Python using PIL (Pillow) library. This function processes an image to blur specific rectangular regions provided in a list of coordinates. To achieve this, you will: 1. Open the image using `PIL.Image`. 2. Iterate over the list of rectangles, each defined by four integers (x, y, width, height). 3. For each rectangle, extract the region from the image, apply a blur filter, and paste it back into the original image. The function signature is as follows: ```python def blur_image_areas(image_path, rectangles): \'\'\' Blurs specific rectangular areas in an image. Parameters: image_path (str): The file path to the input image. rectangles (list of tuples): A list of rectangles to blur, where each rectangle is a tuple (x, y, width, height). Returns: PIL.Image: The modified image with blurred regions. \'\'\' ``` Please use the following helper functions provided below within your implementation. Helper functions: ```python from PIL import Image, ImageFilter def blur_region(image, box): region = image.crop(box) blurred_region = region.filter(ImageFilter.GaussianBlur(radius=5)) image.paste(blurred_region, box) return image ``` **Requirements:** 1. The function must open the image from the provided path using `PIL.Image.open`. 2. Iterate through the list of rectangles, and for each rectangle: 1. Extract the region using the coordinates. 2. Apply a Gaussian blur with a radius of 5 to the region. 3. Paste the blurred region back into the image. 3. Return the resulting image with the blurred regions applied.","solution":"from PIL import Image, ImageFilter def blur_image_areas(image_path, rectangles): \'\'\' Blurs specific rectangular areas in an image. Parameters: image_path (str): The file path to the input image. rectangles (list of tuples): A list of rectangles to blur, where each rectangle is a tuple (x, y, width, height). Returns: PIL.Image: The modified image with blurred regions. \'\'\' # Open the image image = Image.open(image_path) # Process each rectangle and apply the blur for rect in rectangles: x, y, width, height = rect box = (x, y, x + width, y + height) region = image.crop(box) blurred_region = region.filter(ImageFilter.GaussianBlur(radius=5)) image.paste(blurred_region, box) return image"},{"question":"Your task is to write a function named `rotate_and_sum` that accepts two parameters: a list of integers and a number of positions to rotate. The function should rotate the list to the right by the specified number of positions and then return the sum of the elements in the rotated list. The list should be rotated in a circular manner, meaning that elements displaced from the end of the list reappear at the beginning. Function Signature: ```python def rotate_and_sum(nums: list[int], k: int) -> int: pass ``` # Input 1. `nums` (list[int]): A list of integers. 2. `k` (int): The number of positions to rotate the list. # Output - Return an integer representing the sum of the elements in the rotated list. # Example ```python nums = [1, 2, 3, 4, 5] k = 2 print(rotate_and_sum(nums, k)) # Outputs: 15 ``` # Explanation of Example Initially, the list is `[1, 2, 3, 4, 5]`. After rotating right by 2 positions, the list becomes `[4, 5, 1, 2, 3]`. The sum of the elements in the rotated list is `4 + 5 + 1 + 2 + 3 = 15`. # Requirements 1. Consider edge cases such as an empty list and non-positive rotation values. 2. Utilize list slicing techniques to achieve the rotation.","solution":"def rotate_and_sum(nums: list[int], k: int) -> int: Rotates the list to the right by `k` positions and returns the sum of the elements in the rotated list. Parameters: nums (list[int]): A list of integers. k (int): The number of positions to rotate the list. Returns: int: Sum of the elements in the rotated list. if not nums: return 0 n = len(nums) k = k % n # Normalize k to be within the list length # Rotating the list to the right by k positions rotated_list = nums[-k:] + nums[:-k] # Return the sum of the rotated list return sum(rotated_list)"},{"question":"You are asked to implement a function, `word_occurrences(sentence: str) -> Dict[str, int]`, which will calculate the number of occurrences of each word in a given sentence. Your function should: 1. Normalize the text to lowercase to ensure words are counted in a case-insensitive manner. 2. Remove any punctuation from the sentence to ensure words are counted correctly. 3. Split the sentence into words. 4. Count the occurrences of each word and store them in a dictionary where the keys are the words and the values are the counts. 5. Return the dictionary containing the word counts. **Requirements:** - Do not use any third-party libraries. Only the built-in `string` module can be used for handling punctuation. - Assume the `typing` library is already imported for type annotations. **Documentation References:** - `string.punctuation`: A string containing all the punctuation characters. - `str.lower`: A method that converts all uppercase characters in a string to lowercase. - `str.split`: A method that splits a string into a list using a specified delimiter (whitespace by default). Function Signature: ```python def word_occurrences(sentence: str) -> Dict[str, int]: pass ```","solution":"import string from typing import Dict def word_occurrences(sentence: str) -> Dict[str, int]: # Normalize the sentence to lowercase sentence = sentence.lower() # Remove punctuation translator = str.maketrans(\'\', \'\', string.punctuation) sentence = sentence.translate(translator) # Split the sentence into words words = sentence.split() # Count the occurrences of each word occurrences = {} for word in words: if word in occurrences: occurrences[word] += 1 else: occurrences[word] = 1 return occurrences"},{"question":"**Context:** You are tasked with writing a function to process a list of stock prices over a given number of days and determine the maximum possible profit from a single buy and a single sell. The buy must happen before the sell. **Objective:** Develop a Python function named `max_profit(prices: List[int]) -> int` that takes a single parameter: 1. `prices`: A list of integers representing the stock prices on successive days. The function should: - Determine the maximum profit that could have been achieved by buying and then later selling the stock. - Return the maximum profit as an integer. If no profit is possible, return 0. **Requirements:** - The function should have a time complexity of O(n), where n is the number of days. - Use a single pass algorithm by maintaining the minimum price observed and the maximum profit obtainable. **Function Signature:** ```python def max_profit(prices: List[int]) -> int: # Your code here ``` **Examples:** ```python # Example 1 prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. # Example 2 prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 # Explanation: No profit can be made as the prices are in descending order. # Example 3 prices = [1, 2, 3, 4, 5, 6] print(max_profit(prices)) # Output: 5 # Explanation: Buy on day 1 (price = 1) and sell on day 6 (price = 6), profit = 6-1 = 5. ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit that can be achieved from a single buy and a single sell. The buy must happen before the sell. :param prices: A list of integers representing stock prices :return: An integer representing the maximum profit, or 0 if no profit can be made if not prices: return 0 min_price = float(\'inf\') max_prof = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_prof: max_prof = price - min_price return max_prof"},{"question":"You are required to write a Python function that generates all possible anagrams of a given word. An anagram of a word is formed by rearranging its letters. For example, the anagrams of \\"cat\\" are \\"cat\\", \\"act\\", \\"tac\\", \\"tca\\", \\"atc\\", and \\"cta\\". The function should be named `generate_anagrams(word)` and it should perform the following steps: 1. Use the `itertools.permutations` function to generate all possible permutations of the input word. 2. Filter out duplicate permutations and maintain only unique anagrams. 3. Return the list of unique anagrams in lexicographical order. Your function should accept a single input parameter: - `word` (a string): The word for which to generate anagrams. The length of the word will be between 1 and 10 characters (inclusive). Ensure the returned list of anagrams is sorted in ascending lexicographical order. The function signature should be: ```python from itertools import permutations def generate_anagrams(word): Returns a sorted list of unique anagrams of the input word. pass ``` For example: ```python assert generate_anagrams(\\"cat\\") == [\\"act\\", \\"atc\\", \\"cat\\", \\"cta\\", \\"tac\\", \\"tca\\"] assert generate_anagrams(\\"aac\\") == [\\"aac\\", \\"aca\\", \\"caa\\"] ```","solution":"from itertools import permutations def generate_anagrams(word): Returns a sorted list of unique anagrams of the input word. # Generate all permutations of the given word perms = [\'\'.join(p) for p in permutations(word)] # Use a set to filter out duplicate permutations unique_anagrams = sorted(set(perms)) return unique_anagrams"},{"question":"This problem aims to help you understand and practice the usage of advanced Python list comprehensions, as well as manipulation of nested lists (matrices). You are required to create a function `rotate_matrix` that rotates a given square matrix 90 degrees clockwise. Here is a detailed description of each parameter that the function takes: - `matrix`: A list of lists representing a 2D square matrix (NxN). Each element in the inner lists is an integer. The core of the function involves: 1. Transposing the matrix (switching rows with columns). 2. Reversing each row of the resulting transposed matrix. Here is the function signature: ```python def rotate_matrix(matrix): # Your Implementation Here ``` All input arguments are assumed to be valid and pre-processed accordingly. # Task Implement the function `rotate_matrix` using list comprehensions and nested list manipulations. Be sure to account for the size and shape of the matrix. **Hint:** - You can achieve the transposition of the matrix using nested list comprehensions. - Reversing a list in Python can be done using slicing. # Example Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` # Expected Output: The rotated matrix after applying the 90 degrees clockwise rotation. ```python rotated_matrix = rotate_matrix(matrix) # Result should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Notes: 1. The input matrix will always be a square matrix (same number of rows and columns). 2. Ensure to follow best practices for list manipulations in Python using list comprehensions.","solution":"def rotate_matrix(matrix): Rotates the given N x N matrix 90 degrees clockwise. # Transpose the matrix using list comprehension transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix))] # Reverse each row of the transposed matrix to get the final rotated matrix rotated_matrix = [row[::-1] for row in transposed_matrix] return rotated_matrix"},{"question":"Using a DataFrame containing student exam scores, calculate the average score for each subject and create a horizontal bar plot to display the average scores. The DataFrame has columns: \'Student\' for student names and subjects (\'Math\', \'Science\', \'History\', etc.) containing their respective scores. Use Matplotlib to create and format the plot. The function should output with: Axes: A Matplotlib Axes object representing the average scores of each subject, with bars labeled by subject names and the title \'Average Exam Scores by Subject\'. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(df): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(df): Given a DataFrame of student exam scores, calculate the average score for each subject and create a horizontal bar plot to display the average scores. Parameters: - df: DataFrame with columns \'Student\' and subject names (e.g., \'Math\', \'Science\', \'History\') Returns: - ax: Matplotlib Axes object representing the average scores of each subject # Calculate average scores for each subject average_scores = df.mean(numeric_only=True) # Create the bar plot fig, ax = plt.subplots() average_scores.plot(kind=\'barh\', ax=ax) # Set plot title and labels ax.set_title(\'Average Exam Scores by Subject\') ax.set_xlabel(\'Average Score\') ax.set_ylabel(\'Subject\') # Display the plot plt.show() return ax"},{"question":"You are required to write a Python function named `aggregate_sales_data(json_file, db_file)` that reads sales data from a JSON file and stores the aggregated results in an SQLite database. This function should: 1. Read the JSON file containing multiple sales records. 2. Aggregate the sales data by `product_id` to compute the total sales amount and total quantity sold per product. 3. Create an SQLite table named `SALES_SUMMARY` to store the aggregation results. The table should have three columns: - `product_id` (text), which serves as the primary key - `total_quantity` (integer) - `total_amount` (real) The function should handle any SQLite exceptions related to integrity constraints (for example, trying to insert a record with a duplicate `product_id`). Here is the prototype of the function you need to complete: ```python import json import sqlite3 def aggregate_sales_data(json_file, db_file): pass ``` The `json_file` parameter will be a string containing the path to the JSON file with sales data, and `db_file` will be a string representing the SQLite database filename. # Example Suppose the `json_file` contains the following data: ```json [ {\\"product_id\\": \\"P001\\", \\"quantity\\": 3, \\"amount\\": 150.0}, {\\"product_id\\": \\"P002\\", \\"quantity\\": 2, \\"amount\\": 200.0}, {\\"product_id\\": \\"P001\\", \\"quantity\\": 1, \\"amount\\": 50.0}, {\\"product_id\\": \\"P003\\", \\"quantity\\": 5, \\"amount\\": 500.0} ] ``` You would use this data to create and populate the `SALES_SUMMARY` table in the SQLite database. The aggregated results would be: - For `product_id` \\"P001\\": `total_quantity` 4, `total_amount` 200.0 - For `product_id` \\"P002\\": `total_quantity` 2, `total_amount` 200.0 - For `product_id` \\"P003\\": `total_quantity` 5, `total_amount` 500.0","solution":"import json import sqlite3 def aggregate_sales_data(json_file, db_file): # Read and parse JSON data with open(json_file, \'r\') as file: sales_data = json.load(file) # Aggregate sales data by product_id aggregated_data = {} for record in sales_data: product_id = record[\'product_id\'] quantity = record[\'quantity\'] amount = record[\'amount\'] if product_id not in aggregated_data: aggregated_data[product_id] = {\'total_quantity\': 0, \'total_amount\': 0.0} aggregated_data[product_id][\'total_quantity\'] += quantity aggregated_data[product_id][\'total_amount\'] += amount # Connect to SQLite database (creating it if necessary) conn = sqlite3.connect(db_file) cursor = conn.cursor() # Create SALES_SUMMARY table cursor.execute(\'\'\'CREATE TABLE IF NOT EXISTS SALES_SUMMARY ( product_id TEXT PRIMARY KEY, total_quantity INTEGER, total_amount REAL)\'\'\') # Insert aggregated data into SALES_SUMMARY table for product_id, aggregates in aggregated_data.items(): try: cursor.execute(\'\'\'INSERT OR REPLACE INTO SALES_SUMMARY (product_id, total_quantity, total_amount) VALUES (?, ?, ?)\'\'\', (product_id, aggregates[\'total_quantity\'], aggregates[\'total_amount\'])) except sqlite3.IntegrityError as e: print(f\\"SQLite error occurred: {e}\\") # Commit the changes and close the connection conn.commit() conn.close()"},{"question":"You have been asked to design a Python function that manages reservations for a conference event. The function will allow users to reserve seats for a given session, ensuring no double-bookings occur. All information is to be managed using an SQLite database. The `reserve_seat` function should execute the following steps: 1. Connect to an SQLite database named `conference.db`, and retrieve all sessions from the `session` table. 2. Display a list of available sessions to the user and prompt them to select a session by its ID. 3. Prompt the user to input their name for the reservation. 4. Check if a reservation already exists for the given user and session combination in the `reservation` table. 5. If the user does not have an existing reservation for the selected session, insert the new reservation into the `reservation` table. The `reservation` table has the columns: `id` (autoincrement), `user_name`, and `session_id`. 6. Handle exceptions such as database connection errors or insertion errors gracefully. The function signature should be: ```python def reserve_seat(): pass ``` Here are some example structures for the tables: - `session` table: - columns: `id`, `name`, `start_time`, `end_time`. - `reservation` table: - columns: `id`, `user_name`, `session_id`.","solution":"import sqlite3 def reserve_seat(): try: conn = sqlite3.connect(\'conference.db\') cursor = conn.cursor() # Retrieve all sessions cursor.execute(\\"SELECT id, name FROM session\\") sessions = cursor.fetchall() if not sessions: print(\\"No available sessions.\\") return # Display available sessions print(\\"Available Sessions:\\") for session in sessions: print(f\\"ID: {session[0]}, Name: {session[1]}\\") # Prompt user to select a session by ID session_id = input(\\"Enter the session ID you want to reserve: \\") # Prompt user to input their name for the reservation user_name = input(\\"Enter your name: \\") # Check if a reservation already exists for the given user and session combination cursor.execute(\\"SELECT * FROM reservation WHERE user_name = ? AND session_id = ?\\", (user_name, session_id)) existing_reservation = cursor.fetchone() if existing_reservation: print(\\"You already have a reservation for this session.\\") else: # Insert a new reservation cursor.execute(\\"INSERT INTO reservation (user_name, session_id) VALUES (?, ?)\\", (user_name, session_id)) conn.commit() print(\\"Reservation successfully made.\\") except sqlite3.Error as e: print(f\\"An error occurred: {e}\\") finally: if conn: conn.close()"},{"question":"You are required to write a function named `calculate_histogram` that takes a list of integers and returns a dictionary representing the frequency histogram of these integers. # Function Signature ```python def calculate_histogram(numbers: List[int]) -> Dict[int, int]: ``` # Input - `numbers`: A list of integers where each integer can be any valid integer value, `numbers` (0 <= len(numbers) <= 10^6). # Output - Returns a dictionary where keys are the unique integers from the input list, and values are the frequency count of those integers. # Example ```python result = calculate_histogram([1, 2, 2, 3, 3, 3, 4]) print(result) ``` Output: ``` {1: 1, 2: 2, 3: 3, 4: 1} ``` # Explanation - The input list `[1, 2, 2, 3, 3, 3, 4]` contains the integers: 1 appears once, 2 appears twice, 3 appears thrice, and 4 appears once. - The function processes this list and generates a dictionary reflecting the frequency of each integer: `{1: 1, 2: 2, 3: 3, 4: 1}`. # Requirements - Efficiently handle large input sizes up to a length of 10^6. - Ensure the solution properly builds and returns the histogram dictionary. - Use appropriate data structures to ensure optimal performance (preferably O(n) time complexity).","solution":"from typing import List, Dict def calculate_histogram(numbers: List[int]) -> Dict[int, int]: Takes a list of integers and returns a dictionary representing the frequency histogram of these integers. histogram = {} for number in numbers: if number in histogram: histogram[number] += 1 else: histogram[number] = 1 return histogram"},{"question":"You need to create a function named `playlist_duration` that calculates the total duration of a music playlist. The function should prompt the user for the number of songs in the playlist and continuously ask for the duration of each song in the format \\"minutes:seconds\\". The function should then compute and print the total duration of the playlist in the \\"hours:minutes:seconds\\" format. The function should handle edge cases such as invalid input for time duration and ensure the input is in the correct format. If an invalid input is detected, the function should prompt the user again until the correct format is provided. Function Signature: ```python def playlist_duration(): pass ``` Example Usage: ```python > Enter the number of songs: 3 > Enter the duration of song 1 (minutes:seconds): 3:45 > Enter the duration of song 2 (minutes:seconds): 4:30 > Enter the duration of song 3 (minutes:seconds): 5:20 Total playlist duration: 0:13:35 ```","solution":"def playlist_duration(): def parse_duration(duration_str): try: minutes, seconds = map(int, duration_str.split(\\":\\")) if seconds < 0 or seconds >= 60: raise ValueError(\\"Seconds must be between 0 and 59\\") return minutes, seconds except: raise ValueError(\\"Invalid duration format. Please enter in \'minutes:seconds\' format.\\") total_seconds = 0 while True: try: num_songs = int(input(\\"Enter the number of songs: \\")) if num_songs <= 0: raise ValueError(\\"The number of songs must be a positive integer.\\") break except ValueError as ve: print(ve) for i in range(1, num_songs + 1): while True: try: duration = input(f\\"Enter the duration of song {i} (minutes:seconds): \\") minutes, seconds = parse_duration(duration) total_seconds += minutes * 60 + seconds break except ValueError as ve: print(ve) hours, remaining_seconds = divmod(total_seconds, 3600) minutes, seconds = divmod(remaining_seconds, 60) print(f\\"Total playlist duration: {hours}:{minutes}:{seconds}\\")"},{"question":"You are required to write a function in Python that uses the NetworkX and Matplotlib libraries to visualize a directed graph. The function should accept an adjacency list represented as a dictionary where keys are nodes, and values are lists of neighboring nodes to which the key node has edges. Your function should: - Create a directed graph using the NetworkX library. - Add edges to the graph as specified by the adjacency list. - Draw the graph using the NetworkX `draw` method with the following specifications: - Nodes should be drawn with a circular layout. - Node labels should be included in the visualization. - Arrowheads should be visible to emphasize the direction of edges. - Add an appropriate title to the plot indicating it is a \\"Directed Graph Visualization.\\" **Function Signature**: ```python def plot_directed_graph(adj_list: dict) -> None: pass ``` **Input**: - `adj_list`: A dictionary where keys are nodes (integers or strings) and values are lists of nodes to which the key node has directed edges. For example: ```python { \'A\': [\'B\', \'C\'], \'B\': [\'C\'], \'C\': [\'D\'], \'D\': [\'A\'] } ``` **Output**: - The function should render a plot with the specified characteristics. **Requirements**: 1. Use the NetworkX (`nx`) library to create and manipulate the graph. 2. Use the `networkx.draw` method with a circular layout. 3. Use the Matplotlib library for plotting the graph.","solution":"import networkx as nx import matplotlib.pyplot as plt def plot_directed_graph(adj_list: dict) -> None: This function visualizes a directed graph using NetworkX and Matplotlib, based on the provided adjacency list. Parameters: adj_list (dict): A dictionary representing the adjacency list of the graph. Returns: None # Create a directed graph G = nx.DiGraph() # Add edges to the graph from the adjacency list for node, neighbors in adj_list.items(): for neighbor in neighbors: G.add_edge(node, neighbor) # Draw the graph with a circular layout pos = nx.circular_layout(G) nx.draw(G, pos, with_labels=True, arrows=True) # Add title to the plot plt.title(\\"Directed Graph Visualization\\") # Display the plot plt.show()"},{"question":"You need to write a function that evaluates the mean squared error (MSE) between two lists of numbers. Mean squared error is a metric often used to measure the average squared difference between predicted and actual values, common in regression analysis. Your task is to create a function named `mean_squared_error` that takes in two lists: - `predictions`: a list of floating-point numbers representing the predicted values. - `actuals`: a list of floating-point numbers representing the actual values. The function should return a single float value which is the mean squared error between the two lists. # Requirements: - The two lists will always have the same length. - Do not use any libraries other than Python\'s built-in functions. The Mean Squared Error between two lists, (mathbf{p} = [p_1, p_2, ..., p_n]) and (mathbf{a} = [a_1, a_2, ..., a_n]), can be computed using the formula: [ text{MSE} = frac{1}{n} sum_{i=1}^n (p_i - a_i)^2 ] # Example: ```python predictions = [3.0, -0.5, 2.0, 7.0] actuals = [2.5, 0.0, 2.0, 8.0] print(mean_squared_error(predictions, actuals)) # Output should be approximately 0.375 ``` # Constraints: - Ensure that both input lists contain only floating-point numbers. - Do not use any external libraries such as numpy or pandas for computation.","solution":"def mean_squared_error(predictions, actuals): Calculate and return the mean squared error between two lists of numbers. Args: predictions (list of float): The list of predicted values. actuals (list of float): The list of actual values. Returns: float: The mean squared error between the predicted and actual values. n = len(predictions) total_error = sum((p - a) ** 2 for p, a in zip(predictions, actuals)) mse = total_error / n return mse"},{"question":"You are to implement a function `calculate_average_rating` that processes product reviews and computes the average rating for each product. You will work with Python\'s built-in data structures and write code to construct the required functionality. Your function should take a list of reviews as input. Each review is represented by a dictionary with the following keys: - `\'product_id\'`: a unique identifier for the product (integer). - `\'rating\'`: the rating given to the product (integer, between 1 and 5). The function should return a dictionary where each key is a product ID and each value is the average rating for that product, rounded to one decimal place. Detailed steps: 1. Iterate through the list of reviews. 2. Group the reviews by `product_id`. 3. Calculate the average rating for each product. 4. Return the result as a dictionary. Here’s the structure of your function: ```python def calculate_average_rating(reviews): # Step 1: Create a dictionary to keep track of the total ratings and counts for each product # Step 2: Process each review to update the dictionary # Step 3: Calculate the average rating for each product # Step 4: Return the resulting dictionary with averages rounded to one decimal place # Example usage reviews = [ {\'product_id\': 1, \'rating\': 4}, {\'product_id\': 1, \'rating\': 5}, {\'product_id\': 2, \'rating\': 3}, {\'product_id\': 2, \'rating\': 4}, {\'product_id\': 1, \'rating\': 2} ] print(calculate_average_rating(reviews)) # Output should be: {1: 3.7, 2: 3.5} ``` Complete the implementation to achieve the desired functionality.","solution":"def calculate_average_rating(reviews): Calculate the average rating for each product. :param reviews: List of review dictionaries, each containing \'product_id\' and \'rating\'. :return: Dictionary with product_id as keys and the average rating as values (rounded to one decimal place). # Step 1: Create a dictionary to keep track of the total ratings and counts for each product rating_data = {} # Step 2: Process each review to update the dictionary for review in reviews: product_id = review[\'product_id\'] rating = review[\'rating\'] if product_id in rating_data: rating_data[product_id][\'total\'] += rating rating_data[product_id][\'count\'] += 1 else: rating_data[product_id] = {\'total\': rating, \'count\': 1} # Step 3: Calculate the average rating for each product average_ratings = {} for product_id, data in rating_data.items(): total = data[\'total\'] count = data[\'count\'] average_ratings[product_id] = round(total / count, 1) # Step 4: Return the resulting dictionary with averages rounded to one decimal place return average_ratings"},{"question":"You are tasked with designing a simplified version of a digital music playlist system. This system should allow users to create playlists, add songs to them, play songs, and get the current playing song. For simplicity, each song can be represented by its title as a string. Write a Python class named `MusicPlaylist` that supports the following operations: 1. **Methods:** - `__init__()`: Initializes a new playlist instance with an empty playlist and nothing currently playing. - `add_song(song_title: str) -> None`: Adds a song with the given title to the playlist. - `play_song(song_title: str) -> None`: Sets the song with the given title as the currently playing song, if it exists in the playlist. - `get_current_song() -> Union[str, None]`: Returns the title of the currently playing song, or None if no song is currently playing. - `remove_song(song_title: str) -> bool`: Removes the song with the given title from the playlist. Returns True if the song was removed, False if the song was not found. - `list_songs() -> List[str]`: Returns a list of song titles currently in the playlist. 2. **Constraints:** - Assume the playlist can hold a maximum of 1000 songs. - Each song title is guaranteed to be unique within the playlist. - The operations should efficiently handle the constraints to maintain a responsive user experience. # Example Usage: ```python # Create a new playlist playlist = MusicPlaylist() # Add songs to the playlist playlist.add_song(\\"Song One\\") playlist.add_song(\\"Song Two\\") # List all songs in the playlist print(playlist.list_songs()) # Output: [\\"Song One\\", \\"Song Two\\"] # Play a song from the playlist playlist.play_song(\\"Song One\\") # Get the currently playing song print(playlist.get_current_song()) # Output: \\"Song One\\" # Remove a song from the playlist playlist.remove_song(\\"Song One\\") # Output: True # Try playing a removed song playlist.play_song(\\"Song One\\") # No effect as the song is removed # List all songs after removal print(playlist.list_songs()) # Output: [\\"Song Two\\"] ``` **Instructions:** 1. Implement the `MusicPlaylist` class with the specified methods. 2. Ensure the methods handle the constraints and edge cases effectively. 3. You may use built-in Python collections such as lists and dictionaries to manage the songs and the currently playing song.","solution":"from typing import List, Union class MusicPlaylist: def __init__(self): self.playlist = [] self.current_song = None def add_song(self, song_title: str) -> None: if len(self.playlist) < 1000 and song_title not in self.playlist: self.playlist.append(song_title) def play_song(self, song_title: str) -> None: if song_title in self.playlist: self.current_song = song_title def get_current_song(self) -> Union[str, None]: return self.current_song def remove_song(self, song_title: str) -> bool: if song_title in self.playlist: self.playlist.remove(song_title) if song_title == self.current_song: self.current_song = None return True return False def list_songs(self) -> List[str]: return self.playlist"},{"question":"You are tasked with implementing a function that normalizes a column of a pandas DataFrame using Min-Max normalization. The function should adjust the values in the specified column so that they are scaled to a range of [0, 1]. The formula for Min-Max normalization is: [ text{normalized_value} = frac{text{value} - text{min}}{text{max} - text{min}} ] Your task is to write a function named `normalize_column` which accepts two arguments: 1. `df`: A pandas DataFrame. 2. `column_name`: A string representing the name of the column to be normalized. Inside this function, you will: - Compute the minimum and maximum values of the specified column. - Apply the Min-Max normalization formula to each value in the column. - Replace the original values in the column with their normalized counterparts. - Return the modified DataFrame with the normalized column. Use the pandas library functions to accomplish these tasks. **Function Signature:** ```python def normalize_column(df, column_name): Normalizes a specified column in the DataFrame to range [0, 1] using Min-Max normalization. ``` **Example Usage:** ```python import pandas as pd # Example DataFrame data = {\'A\': [1, 2, 3, 4, 5], \'B\': [10, 20, 30, 40, 50]} df = pd.DataFrame(data) # Normalize column \'A\' normalized_df = normalize_column(df, \'A\') print(normalized_df) # The output DataFrame\'s \'A\' column should have values ranging from 0 to 1. ```","solution":"import pandas as pd def normalize_column(df, column_name): Normalizes a specified column in the DataFrame to range [0, 1] using Min-Max normalization. Parameters: df: pandas.DataFrame - The input DataFrame. column_name: str - The name of the column to be normalized. Returns: pandas.DataFrame - The DataFrame with the normalized column. if column_name not in df.columns: raise ValueError(f\\"Column \'{column_name}\' not found in DataFrame\\") min_val = df[column_name].min() max_val = df[column_name].max() if min_val == max_val: raise ValueError(f\\"Column \'{column_name}\' has all identical values, cannot normalize.\\") df[column_name] = (df[column_name] - min_val) / (max_val - min_val) return df"},{"question":"You are tasked with creating a function that analyzes text and generates insights about the frequency and relationships of certain words within the text corpus. Your function, named `analyze_text`, should accept the following parameters: 1. `texts` (a list of strings): A list containing multiple text documents to analyze. 2. `keywords` (a list of strings): A list of specific words to track. 3. `output_file` (a string): The name of the output file where the analysis data will be saved. # Function signature ```python def analyze_text(texts: List[str], keywords: List[str], output_file: str) -> None: ``` # Requirements - Analyze the occurrences of each keyword across all the text documents. - Compute the co-occurrence of pairs of keywords within the same document. - Calculate the Term Frequency-Inverse Document Frequency (TF-IDF) for each keyword. - Save the analysis results in a CSV file with columns: `Keyword`, `Frequency`, `Co-occurrence`, `TF-IDF`. # Example Usage and Output ```python texts = [ \\"The quick brown fox jumps over the lazy dog\\", \\"A quick movement of the enemy will jeopardize six gunboats\\", \\"All questions asked by five watched experts amaze the judge\\", \\"Jackdaws love my big sphinx of quartz\\" ] keywords = [\\"quick\\", \\"judge\\", \\"enemy\\", \\"love\\"] output_file = \\"text_analysis.csv\\" analyze_text(texts, keywords, output_file) ``` After running this function, a CSV file named `text_analysis.csv` will be generated with the following structure: ``` Keyword,Frequency,Co-occurrence,TF-IDF quick,2,{(\\"quick\\", \\"enemy\\"): 1, (\\"quick\\", \\"judge\\"): 0, ...},0.5 judge,1,{(\\"judge\\", \\"quick\\"): 0, (\\"judge\\", \\"enemy\\"): 0, ...},0.25 enemy,1,{(\\"enemy\\", \\"quick\\"): 1, (\\"enemy\\", \\"love\\"): 0, ...},0.25 love,1,{(\\"love\\", \\"quick\\"): 0, (\\"love\\", \\"judge\\"): 0, ...},0.25 ``` # Notes - Frequency: Total count of occurrences of each keyword across all documents. - Co-occurrence: A dictionary representing the number of times pairs of keywords appear together in the same document. - TF-IDF: Term Frequency-Inverse Document Frequency score for each keyword considering the entire corpus of texts. Uses standard TF-IDF algorithm.","solution":"import csv from collections import defaultdict, Counter from typing import List import math def analyze_text(texts: List[str], keywords: List[str], output_file: str) -> None: keyword_frequency = Counter() keyword_cooccurrence = defaultdict(lambda: defaultdict(int)) document_count = len(texts) doc_keyword_counts = [Counter() for _ in range(document_count)] # Calculate keyword frequency and co-occurrence for i, text in enumerate(texts): words = text.lower().split() for keyword in keywords: if keyword in words: keyword_frequency[keyword] += 1 doc_keyword_counts[i][keyword] += 1 for keyword in keywords: if keyword in words: for other_keyword in keywords: if other_keyword in words and keyword != other_keyword: keyword_cooccurrence[keyword][other_keyword] += 1 # Calculate TF-IDF keyword_tfidf = {} for keyword in keywords: tfidf = 0 for i in range(document_count): if doc_keyword_counts[i][keyword] > 0: tf = doc_keyword_counts[i][keyword] idf = math.log(document_count / sum(1 for doc in doc_keyword_counts if doc[keyword] > 0)) tfidf += (tf / sum(doc_keyword_counts[i].values())) * idf keyword_tfidf[keyword] = tfidf # Save the analysis results to a CSV file with open(output_file, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Keyword\', \'Frequency\', \'Co-occurrence\', \'TF-IDF\']) for keyword in keywords: cooccurrence_str = str(dict(keyword_cooccurrence[keyword])) writer.writerow([keyword, keyword_frequency[keyword], cooccurrence_str, keyword_tfidf[keyword]])"},{"question":"Write a function that generates a set of non-repeating random integers within a specified range, divides these integers into two equal halves (if the number of integers is even) or near equal halves (if odd), and returns aggregates of both halves. You need to implement the following function: ```python def split_aggregate_randoms(lower, upper, n): Generate a set of non-repeating random integers within a specified range and split into two aggregates. Parameters: lower (int): The lower bound of the range (inclusive). upper (int): The upper bound of the range (inclusive). n (int): The number of random integers to generate. Returns: tuple: A tuple containing two values, the aggregate sum of the first half and the aggregate sum of the second half. ``` You need to use the `random` library to generate the random integers. Example: For the input: ```python lower = 1 upper = 10 n = 6 ``` The function might generate a list of `[4, 7, 1, 10, 3, 5]`. After dividing into two halves, one half might be `[4, 7, 1]` and the other half `[10, 3, 5]`. The function should then return their sums, for example: `(12, 18)`. Note: The function should handle the case where `n` is greater than the number of possible unique integers within the range, returning an appropriate error message.","solution":"import random def split_aggregate_randoms(lower, upper, n): Generate a set of non-repeating random integers within a specified range and split into two aggregates. Parameters: lower (int): The lower bound of the range (inclusive). upper (int): The upper bound of the range (inclusive). n (int): The number of random integers to generate. Returns: tuple: A tuple containing two values, the aggregate sum of the first half and the aggregate sum of the second half. if n > (upper - lower + 1): raise ValueError(\\"The number of integers to generate exceeds the number of unique integers in the given range.\\") random_numbers = random.sample(range(lower, upper + 1), n) mid_index = n // 2 first_half = random_numbers[:mid_index] second_half = random_numbers[mid_index:] return (sum(first_half), sum(second_half))"},{"question":"In this task, you need to implement a function `rearrange_string(s)` that rearranges a string so that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, the function should return an empty string. The function should: 1. Count the frequency of each character in the input string. 2. Use a max heap to store characters by their frequencies. 3. Construct the rearranged string by alternating the highest frequency characters. 4. If at any point it becomes impossible to add a character without repeating an adjacent character, return an empty string. You are required to use the `collections.Counter` and `heapq` libraries to handle the frequency counting and heap manipulations respectively. Function Signature: ```python def rearrange_string(s: str) -> str: ... ``` Parameters: - `s` (str): The input string consisting of lowercase alphabetic characters. Returns: - `str`: The rearranged string where no two adjacent characters are the same if possible, otherwise an empty string. Example: ```python import collections import heapq s = \\"aaabc\\" print(rearrange_string(s)) # Output: \\"abaca\\" or an equivalent valid arrangement s = \\"aaab\\" print(rearrange_string(s)) # Output: \\"\\" ```","solution":"import collections import heapq def rearrange_string(s: str) -> str: # Step 1: Count the frequency of each character in the input string counter = collections.Counter(s) # Step 2: Use a max heap to store characters by their frequencies max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] # Step 3: Construct the rearranged string while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) freq += 1 prev_freq, prev_char = freq, char rearranged_str = \'\'.join(result) # Step 4: If it becomes impossible to add a character without repeating an adjacent character, return an empty string if len(rearranged_str) != len(s): return \\"\\" return rearranged_str"},{"question":"Write a function called `knight_minimum_moves` to determine the minimum number of moves required for a knight to move from its starting position to a target position on a standard 8x8 chessboard. The function signature is as follows: ```python def knight_minimum_moves(start, end): # Your code here ``` The function should take two parameters: 1. `start`: A tuple `(x, y)` representing the knight\'s starting position. 2. `end`: A tuple `(x, y)` representing the knight\'s target position. A knight can move in an L-shape, where it moves two squares in a horizontal or vertical direction and then one square perpendicular to that direction, or one square in a horizontal or vertical direction and then two squares perpendicular to that direction. The function should return the minimum number of moves the knight needs to reach the target position. # Constraints - Both `start` and `end` are tuples of integers representing valid squares on the chessboard (1 ≤ x, y ≤ 8). # Example Usage: ```python print(knight_minimum_moves((1, 1), (8, 8))) # Expected output: 6 print(knight_minimum_moves((1, 1), (2, 3))) # Expected output: 1 ``` # Hint: - Consider using Breadth-First Search (BFS) to explore the shortest path in the least moves manner from the starting position to the ending position.","solution":"from collections import deque def is_valid_position(x, y): Check if the position is within the boundaries of the chessboard. return 1 <= x <= 8 and 1 <= y <= 8 def knight_minimum_moves(start, end): Returns the minimum number of moves required for a knight to move from the starting position to the target position on a standard 8x8 chessboard. if start == end: return 0 directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, moves = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if (nx, ny) == end: return moves + 1 if is_valid_position(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 # This case should theoretically never be hit as the knight can reach any position from any other position."},{"question":"Write a function that takes a string representing a mathematical function `f(x)` as input and generates a DataFrame that evaluates this function over a specified range of `x` values. The DataFrame should have two columns: \'x\' and \'f(x)\', which contain the values of `x` and the corresponding function evaluations. Ensure that the input function can handle basic operations and functions such as addition, subtraction, multiplication, division, powers, and common mathematical functions like `sin`, `cos`, `exp`, etc. Use a customizable range and step size for the `x` values, and include error handling for invalid functions or out-of-bounds evaluations. The function should output: pandas.DataFrame: A DataFrame containing the steps of `x` and evaluated values `f(x)`. You should write self-contained code starting with: ``` import numpy as np import pandas as pd def evaluate_function(function_str, x_start, x_end, step_size): ```","solution":"import numpy as np import pandas as pd def evaluate_function(function_str, x_start, x_end, step_size): Evaluate a mathematical function over a specified range of x values. Args: - function_str (str): A string representing the mathematical function f(x). - x_start (float): The starting value of x. - x_end (float): The ending value of x. - step_size (float): The step size for the x values. Returns: - pd.DataFrame: A DataFrame with columns \'x\' and \'f(x)\'. # Create the range of x values x_values = np.arange(x_start, x_end + step_size, step_size) # Define the dataframe results = {\'x\': [], \'f(x)\': []} # Evaluate the function for each x value for x in x_values: try: # Evaluate the function using eval f_x = eval(function_str) results[\'x\'].append(x) results[\'f(x)\'].append(f_x) except Exception as e: # Handle errors print(f\\"Error evaluating function for x = {x}: {e}\\") results[\'x\'].append(x) results[\'f(x)\'].append(np.nan) # Convert to DataFrame df = pd.DataFrame(results) return df"},{"question":"You are asked to write a function named `missing_number` that takes a list of unique integers from 1 to ( n ) where one number is missing, and returns the missing integer. The integers are guaranteed to be unique, and the length of the list is ( n-1 ). To solve this problem, you will need to make use of basic arithmetic and Python list operations. # Function Signature ```python def missing_number(nums: List[int]) -> int: pass ``` # Input - A list of integers ( nums ) (1 ≤ len(nums) ≤ 999), where the numbers are unique and in the range from 1 to ( len(nums) + 1 ). # Output - An integer representing the missing number from the range. # Example ```python result = missing_number([1, 2, 4, 5]) print(result) # Output should be 3, since 3 is the missing number in the range 1 to 5. ``` # Useful Information For implementing this function, follow these steps: 1. Calculate the expected sum of the first ( n ) natural numbers using the formula ( n(n+1)/2 ), where ( n ) is ( len(nums) + 1 ). 2. Calculate the actual sum of the integers present in the list. 3. Subtract the actual sum from the expected sum to find the missing number. You should ensure your function follows these steps and correctly identifies the missing number.","solution":"from typing import List def missing_number(nums: List[int]) -> int: Finds the missing number from a list of unique integers from 1 to n. Args: nums: List[int] - A list of unique integers from 1 to n with one number missing Returns: int - The missing integer n = len(nums) + 1 expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum"},{"question":"Given a string of text, write a function that extracts all email addresses and phone numbers from the text and prints them out in a formatted way. Assume phone numbers can be in various formats (e.g., \'(123) 456-7890\', \'123.456.7890\', \'1234567890\', etc.). Print email addresses first, followed by phone numbers. Make sure the function handles texts realistically, considering common delimiters and formatting. The function should output with: ``` str: A formatted string with all email addresses and phone numbers, each separated by a newline. ``` You should write self-contained code starting with: ``` import re def extract_contacts(text: str) -> str: ``` Note that: 1. You may use regular expressions to identify email addresses and phone numbers. 2. Test your function with realistic sample text to ensure it extracts contacts accurately.","solution":"import re def extract_contacts(text: str) -> str: Extract email addresses and phone numbers from the given text. :param text: A string containing the text to extract contacts from. :return: A formatted string with all email addresses and phone numbers separated by a newline. # Define regex patterns for email addresses and phone numbers email_pattern = r\'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}\' phone_pattern = r\'((?d{3})?[-.s]?d{3}[-.s]?d{4})\' # Find all matches emails = re.findall(email_pattern, text) phones = re.findall(phone_pattern, text) # Combine and format the results contacts = emails + phones return \'n\'.join(contacts)"},{"question":"You are asked to implement a function called `predict_missing_values` that predicts and fills the missing values in a given dataset using a k-Nearest Neighbors (k-NN) regression model. The function should replace each missing value in the dataset with the prediction of the k-NN model trained on the non-missing values. # Inputs: - `X`: A 2D numpy array of shape `(n_samples, n_features)` representing the dataset. Some entries may contain `np.nan` indicating missing values. - `k`: An integer representing the number of neighbors to use for the k-NN regression model. # Outputs: - A 2D numpy array with the same shape as `X`, where all `np.nan` entries have been replaced by their predicted values using k-NN regression. # Function Signature: ```python def predict_missing_values(X: np.ndarray, k: int) -> np.ndarray: ``` # Requirements: - Use `sklearn.impute.SimpleImputer` to initially fill missing values with the mean of each feature. - Use `sklearn.neighbors.KNeighborsRegressor` to predict the missing values. - After predicting the missing values, replace the initial mean-filled values with the k-NN predictions in the original dataset. # Example: ```python from sklearn.impute import SimpleImputer from sklearn.neighbors import KNeighborsRegressor import numpy as np def predict_missing_values(X: np.ndarray, k: int) -> np.ndarray: # Step 1: Initially fill missing values with the mean of each feature imputer = SimpleImputer(strategy=\'mean\') X_imputed = imputer.fit_transform(X) # Step 2: Identify the indices of missing values missing_indices = np.argwhere(np.isnan(X)) # Step 3: Train a k-NN model on the non-missing values for index in missing_indices: row, col = index # Prepare the data for k-NN, excluding the current row with missing value known_X = np.delete(X_imputed, row, axis=0) known_y = np.delete(X_imputed[:, col], row, axis=0) # Train k-NN model knn = KNeighborsRegressor(n_neighbors=k) knn.fit(known_X, known_y) # Predict the missing value X_imputed[row, col] = knn.predict([X_imputed[row]])[0] return X_imputed # Example usage X = np.array([[1, np.nan, 3], [4, 5, np.nan], [7, 8, 9]]) k = 2 filled_X = predict_missing_values(X, k) print(filled_X) # Output will be a 2D numpy array with no missing values ```","solution":"import numpy as np from sklearn.impute import SimpleImputer from sklearn.neighbors import KNeighborsRegressor def predict_missing_values(X: np.ndarray, k: int) -> np.ndarray: # Step 1: Initially fill missing values with the mean of each feature imputer = SimpleImputer(strategy=\'mean\') X_imputed = imputer.fit_transform(X) # Step 2: Identify the indices of missing values missing_indices = np.argwhere(np.isnan(X)) # Step 3: Train a k-NN model on the non-missing values for row, col in missing_indices: # Prepare the data for k-NN, excluding the current row with missing value known_X = np.delete(X_imputed, row, axis=0) known_y = np.delete(X_imputed[:, col], row, axis=0) # Train k-NN model knn = KNeighborsRegressor(n_neighbors=k) knn.fit(known_X, known_y) # Predict the missing value X_imputed[row, col] = knn.predict([X_imputed[row]])[0] return X_imputed"},{"question":"Design a function named `find_k_largest_elements` that accepts two inputs: a list of numbers and an integer `k`, and returns a list consisting of the `k` largest elements from the input list, in descending order. The input list may contain duplicate elements. You are not allowed to use any pre-built sorting functions or methods like `sort()`, `sorted()`, `heapq.nlargest()`, etc. Instead, you must implement an algorithm to find the `k` largest elements. Follow these steps to implement the function: 1. Create a min-heap of size `k` and populate it with the first `k` elements from the input list. 2. Iterate through the rest of the input list. For each element, if it is larger than the smallest element in the heap, replace the smallest element with the current element and reheapify. 3. Convert the min-heap into a sorted list in descending order and return it. **Function Signature:** ```python from typing import List def find_k_largest_elements(nums: List[int], k: int) -> List[int]: pass ``` **Examples:** ```python # Example 1 nums = [3, 2, 1, 5, 6, 4] k = 2 print(find_k_largest_elements(nums, k)) # Expected Output: [6, 5] # Example 2 nums = [1, 1, 1, 2, 2, 3] k = 2 print(find_k_largest_elements(nums, k)) # Expected Output: [3, 2] # Example 3 nums = [9, 9, 8, 7, 6, 5, 8, 9] k = 3 print(find_k_largest_elements(nums, k)) # Expected Output: [9, 9, 9] ```","solution":"from typing import List import heapq def find_k_largest_elements(nums: List[int], k: int) -> List[int]: if k == 0: return [] # Create a min-heap with the first k elements min_heap = nums[:k] heapq.heapify(min_heap) # Iterate through the rest of the input list for num in nums[k:]: if num > min_heap[0]: heapq.heappop(min_heap) # Remove the smallest element heapq.heappush(min_heap, num) # Add the current element # Convert the heap into a list sorted in descending order return sorted(min_heap, reverse=True)"},{"question":"In this problem, you are required to create a function named `polynomial_deriv` that can compute the derivative of a polynomial. The polynomial will be given as a list of coefficients, with the nth element of the list representing the coefficient for the x^n term. Your task is to implement the `polynomial_deriv` function that should handle the following: - If the input list length is 1, implying a constant polynomial, the derivative should be a polynomial with a single term 0 (since the derivative of a constant is 0). - Otherwise, return a new list of coefficients representing the derivative of the polynomial. The function should ignore leading zero coefficients in the resulting list unless the result is the zero polynomial. Your `polynomial_deriv` function should be defined as: ```python def polynomial_deriv(coefficients): # Your implementation here ``` Examples: ```python print(polynomial_deriv([3, 2, 1])) # Should output [2, 2], corresponding to the derivative 2 + 2x. print(polynomial_deriv([0, 0, 1])) # Should output [0, 2], corresponding to the derivative 2x. print(polynomial_deriv([5])) # Should output [0], since the derivative of a constant is 0. print(polynomial_deriv([0, 0, 0])) # Should output [0], handling the zero polynomial case. ```","solution":"def polynomial_deriv(coefficients): Returns the derivative of the given polynomial as a list of coefficients. Parameters: coefficients (list): A list of coefficients representing the polynomial. Returns: list: A list of coefficients representing the derivative of the polynomial. # Check if the polynomial is a constant if len(coefficients) == 1: return [0] # Compute the derivative deriv = [coefficients[i] * i for i in range(1, len(coefficients))] # If the result is all zeros (zero polynomial), return [0] if all(coef == 0 for coef in deriv): return [0] return deriv"},{"question":"You are tasked with developing a system that tracks the inventory of a small library. The library needs to keep track of the books that are currently checked out and those that are available. Your task is to write a class named `Library` that manages the books in the library. Each book is uniquely identified by its title and has properties such as the author and publication year. The `Library` class should support the following operations: 1. Adding a new book to the library. 2. Checking out a book. 3. Returning a book. 4. Listing all books currently available in the library. 5. Listing all books currently checked out. Below is the exact class definition you should implement. ```python class Library: def __init__(self): Initializes the library with no books. self.available_books = {} self.checked_out_books = {} def add_book(self, title: str, author: str, year: int): Adds a new book to the library. Args: - title (str): The title of the book. - author (str): The author of the book. - year (int): The publication year of the book. self.available_books[title] = {\'author\': author, \'year\': year} def check_out(self, title: str) -> bool: Checks out a book from the library if it is available. Args: - title (str): The title of the book to check out. Returns: - bool: True if the book was checked out, False otherwise. if title in self.available_books: self.checked_out_books[title] = self.available_books.pop(title) return True return False def return_book(self, title: str) -> bool: Returns a book to the library if it was checked out. Args: - title (str): The title of the book to return. Returns: - bool: True if the book was returned, False otherwise. if title in self.checked_out_books: self.available_books[title] = self.checked_out_books.pop(title) return True return False def list_available_books(self) -> list: Lists all the books currently available in the library. Returns: - list: A list of titles of available books. return list(self.available_books.keys()) def list_checked_out_books(self) -> list: Lists all the books currently checked out. Returns: - list: A list of titles of checked out books. return list(self.checked_out_books.keys()) ``` **Usage Example:** ```python library = Library() library.add_book(\'The Great Gatsby\', \'F. Scott Fitzgerald\', 1925) library.add_book(\'1984\', \'George Orwell\', 1949) print(library.list_available_books()) # Output: [\'The Great Gatsby\', \'1984\'] print(library.check_out(\'1984\')) # Output: True print(library.list_available_books()) # Output: [\'The Great Gatsby\'] print(library.list_checked_out_books()) # Output: [\'1984\'] print(library.return_book(\'1984\')) # Output: True print(library.list_available_books()) # Output: [\'The Great Gatsby\', \'1984\'] ``` **Instructions:** 1. Implement the `Library` class as specified above. 2. Ensure that the methods handle the addition, checkout, return, and listing of books correctly. 3. Your class should maintain accurate lists of available and checked out books at all times.","solution":"class Library: def __init__(self): Initializes the library with no books. self.available_books = {} self.checked_out_books = {} def add_book(self, title: str, author: str, year: int): Adds a new book to the library. Args: - title (str): The title of the book. - author (str): The author of the book. - year (int): The publication year of the book. self.available_books[title] = {\'author\': author, \'year\': year} def check_out(self, title: str) -> bool: Checks out a book from the library if it is available. Args: - title (str): The title of the book to check out. Returns: - bool: True if the book was checked out, False otherwise. if title in self.available_books: self.checked_out_books[title] = self.available_books.pop(title) return True return False def return_book(self, title: str) -> bool: Returns a book to the library if it was checked out. Args: - title (str): The title of the book to return. Returns: - bool: True if the book was returned, False otherwise. if title in self.checked_out_books: self.available_books[title] = self.checked_out_books.pop(title) return True return False def list_available_books(self) -> list: Lists all the books currently available in the library. Returns: - list: A list of titles of available books. return list(self.available_books.keys()) def list_checked_out_books(self) -> list: Lists all the books currently checked out. Returns: - list: A list of titles of checked out books. return list(self.checked_out_books.keys())"},{"question":"You are tasked with writing a Python function called `students_average_score` that reads students\' scores from a CSV file, calculates the average score for each student, and returns a DataFrame with students\' names and their average scores. The function must use Pandas library functions `pd.read_csv` and `pd.DataFrame`. **Function Signature:** ```python def students_average_score(file_path: str) -> pd.DataFrame: Args: file_path (str): Path to the CSV file containing students\' scores. Returns: pd.DataFrame: Pandas DataFrame containing students\' names and their average scores. ``` **Requirements:** 1. Use `pd.read_csv` to read the CSV file. 2. The CSV file has columns \'Student\', \'Subject\', and \'Score\'. 3. Group the data by \'Student\' and calculate the average score for each student. 4. The returned DataFrame should have two columns: \'Student\' and \'Average Score\'. 5. The \'Average Score\' should be rounded to two decimal places. **Example Usage:** ```python # Example CSV content Student,Subject,Score Alice,Math,85 Alice,English,78 Bob,Math,82 Bob,History,90 Charlie,Math,95 Charlie,History,100 Charlie,English,97 # Basic Usage df_average_scores = students_average_score(\'students_scores.csv\') print(df_average_scores) # Expected Output Student Average Score 0 Alice 81.50 1 Bob 86.00 2 Charlie 97.33 ``` You can create a sample CSV file and place it in the working directory to test your function properly.","solution":"import pandas as pd def students_average_score(file_path: str) -> pd.DataFrame: Args: file_path (str): Path to the CSV file containing students\' scores. Returns: pd.DataFrame: Pandas DataFrame containing students\' names and their average scores. # Read the CSV file df = pd.read_csv(file_path) # Group by \'Student\' and calculate the mean of \'Score\' average_scores = df.groupby(\'Student\')[\'Score\'].mean().reset_index() # Rename the columns accordingly average_scores.columns = [\'Student\', \'Average Score\'] # Round the average scores to 2 decimal places average_scores[\'Average Score\'] = average_scores[\'Average Score\'].round(2) return average_scores"},{"question":"You are required to design a function `find_path_through_maze()` that takes a maze represented by a 2D list, where `1` represents open paths and `0` represents walls. The function should find a path from the top-left corner (0, 0) to the bottom-right corner of the maze, if one exists. The function should use a Depth-First Search (DFS) algorithm to find the path and return it as a list of tuples, where each tuple represents the coordinates of a cell in the path. If no path exists, return an empty list. The function `find_path_through_maze(maze)` should: 1. Take a 2D list `maze` as input. 2. Initialize a stack to keep track of the current path and a set to store visited nodes. 3. Use DFS to explore possible paths from the starting point to the endpoint. 4. Return the path as a list of coordinates if a path is found, otherwise return an empty list. **Example:** ```python def find_path_through_maze(maze): def is_valid_move(x, y): return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 1 def dfs(x, y, path): if (x, y) == (len(maze) - 1, len(maze[0]) - 1): path.append((x, y)) return True if is_valid_move(x, y): path.append((x, y)) maze[x][y] = -1 # Mark as visited if dfs(x + 1, y, path): return True if dfs(x - 1, y, path): return True if dfs(x, y + 1, path): return True if dfs(x, y - 1, path): return True path.pop() maze[x][y] = 1 # Unmark if not a valid path return False path = [] if dfs(0, 0, path): return path return [] # Test the function with an example maze maze = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1] ] print(find_path_through_maze(maze)) ``` Output: ``` [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 2), (3, 3)] ``` The function should efficiently find a path through the maze while ensuring that revisited steps are marked and backtracked if they lead to a dead end.","solution":"def find_path_through_maze(maze): def is_valid_move(x, y): return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 1 def dfs(x, y, path): if (x, y) == (len(maze) - 1, len(maze[0]) - 1): path.append((x, y)) return True if is_valid_move(x, y): path.append((x, y)) maze[x][y] = -1 # Mark as visited if dfs(x + 1, y, path): return True if dfs(x - 1, y, path): return True if dfs(x, y + 1, path): return True if dfs(x, y - 1, path): return True path.pop() maze[x][y] = 1 # Unmark if not a valid path return False path = [] if dfs(0, 0, path): return path return [] # Test the function with an example maze maze = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1] ] print(find_path_through_maze(maze))"},{"question":"Implement a function named `find_optimal_subarray` that finds the contiguous subarray within a one-dimensional NumPy array, `arr`, which has the largest sum. The function should return both the maximum sum and the subarray itself. # Inputs: - `arr`: A one-dimensional NumPy array of integers. # Outputs: - The function should return a tuple `(max_sum, subarray)` where `max_sum` is the maximum sum of any contiguous subarray of `arr`, and `subarray` is the actual subarray that yields this sum. # Requirements: 1. Use an efficient algorithm such as Kadane\'s algorithm for finding the maximum sum. 2. Ensure the solution handles both positive and negative integers. # Example: ```python import numpy as np arr = np.array([-2, 1, -3, 4, -1, 2, 1, -5, 4]) max_sum, subarray = find_optimal_subarray(arr) print(max_sum) # Output: 6 print(subarray) # Output: [4, -1, 2, 1] ``` # Constraints: - The input array `arr` will contain at least one element. - The input array can contain both positive and negative integers. Implement the function `find_optimal_subarray`.","solution":"import numpy as np def find_optimal_subarray(arr): Finds the contiguous subarray within a one-dimensional NumPy array `arr` which has the largest sum. Parameters: arr (np.ndarray): A one-dimensional NumPy array of integers. Returns: tuple: A tuple (max_sum, subarray) where max_sum is the maximum sum of any contiguous subarray of `arr` and subarray is the actual subarray that yields this sum. max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] s = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i subarray = arr[start:end+1] return max_sum, subarray.tolist()"}]'),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:R,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},P={class:"card-container"},D={key:0,class:"empty-state"},L=["disabled"],O={key:0},z={key:1};function j(r,e,l,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",P,[(n(!0),i(b,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",D,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",O,"See more"))],8,L)):u("",!0)])}const N=h(F,[["render",j],["__scopeId","data-v-4ee4b22e"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/8.md","filePath":"drive/8.md"}'),Y={name:"drive/8.md"},M=Object.assign(Y,{setup(r){return(e,l)=>(n(),i("div",null,[k(N)]))}});export{B as __pageData,M as default};
