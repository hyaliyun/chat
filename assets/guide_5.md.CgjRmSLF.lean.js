import{_ as f,o as n,c as r,a as t,m,t as h,C as g,M as _,U as b,f as l,F as y,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},R={class:"review-title"},W={class:"review-content"};function F(i,e,u,c,s,o){return n(),r("div",k,[t("div",T,[t("div",R,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),m(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",W,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),m(h(u.poem.solution),1)])])])}const A=f(q,[["render",F],["__scopeId","data-v-d4e4459c"]]),I=JSON.parse(`[{"question":"Write a python function to create a dictionary where the keys are words from a given sentence and the values are the number of occurrences of each word.","solution":"def word_count(sentence): Returns a dictionary that contains the words as keys and their number of occurrences as values. Parameters: sentence (str): A sentence which may contain multiple words. Returns: dict: A dictionary with words as keys and their occurrences as values. words = sentence.split() word_frequency = {} for word in words: word = word.lower() # To count words in a case-insensitive manner if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 return word_frequency"},{"question":"Write a python function to calculate the Mean Absolute Deviation (MAD) of a list of numbers. The function should take a list of numbers as its input and return the MAD of those numbers. The MAD is calculated as the average of the absolute differences between each number and the mean of the list.","solution":"def mean_absolute_deviation(numbers): Calculates the Mean Absolute Deviation (MAD) of a list of numbers. Parameters: numbers (list of float): A list of numbers. Returns: float: The Mean Absolute Deviation. if not numbers: return 0 mean = sum(numbers) / len(numbers) deviations = [abs(x - mean) for x in numbers] mad = sum(deviations) / len(deviations) return mad"},{"question":"Write a python function to check if an integer (signed or unsigned) is a power of 3.","solution":"def is_power_of_three(n): Checks whether the given integer \`n\` is a power of 3. :param n: The integer to check. :return: True if \`n\` is a power of 3, otherwise False. if n <= 0: return False while n % 3 == 0: n /= 3 return n == 1"},{"question":"Write a python function to find the second largest number in a list using programming.","solution":"def second_largest(numbers): Returns the second largest number in the list. Assumes the list has at least two distinct numbers. first = second = float('-inf') for number in numbers: if number > first: first, second = number, first elif number > second and number != first: second = number if second == float('-inf'): raise ValueError(\\"List does not contain enough distinct numbers\\") return second"},{"question":"Write a python function to format a given string to a title case. Title case formatting capitalizes the first letter of each word, except for certain small words like 'and', 'but', 'or', 'nor', 'for', 'so', 'yet', 'a', 'an', and 'the'.","solution":"def title_case(string): Formats the given string to title case. Title case capitalizes the first letter of each word except for certain small words like 'and', 'but', 'or', 'nor', 'for', 'so', 'yet', 'a', 'an', and 'the', unless they start the string. small_words = {'and', 'but', 'or', 'nor', 'for', 'so', 'yet', 'a', 'an', 'the'} words = string.lower().split() if not words: return \\"\\" words[0] = words[0].capitalize() for i in range(1, len(words)): if words[i] not in small_words: words[i] = words[i].capitalize() return ' '.join(words)"},{"question":"Write a python function to implement the binary search algorithm. However, instead of returning the index of the target, it should return the index of the closest lower value to the target in the array. If the target is less than the smallest element in the array, it should return -1.","solution":"def binary_search_closest_lower(arr, target): Implement binary search to find the index of the closest lower value to the target. Parameters: arr (List[int]): Sorted array of integers. target (int): Target integer. Returns: int: The index of the closest lower value to the target, or -1 if no such value exists. if not arr or target < arr[0]: return -1 low, high = 0, len(arr) - 1 closest_lower_index = -1 while low <= high: mid = (low + high) // 2 if arr[mid] < target: closest_lower_index = mid low = mid + 1 else: high = mid - 1 return closest_lower_index"},{"question":"Write a python function to remove the first occurrence of a substring from a given string. If the substring is not found, the function should return the original string. For example, if the input string is \\"apple\\" and the substring is \\"pp\\", the output should be \\"ale\\".","solution":"def remove_first_occurrence(main_string, substring): Removes the first occurrence of substring from main_string. If the substring is not found, the function returns the original main_string. index = main_string.find(substring) if index != -1: return main_string[:index] + main_string[index + len(substring):] return main_string"},{"question":"Write a python function to calculate the maximum Fibonacci number that is less than a given number n.","solution":"def max_fib_less_than(n): Returns the maximum Fibonacci number that is less than a given number n. if n <= 1: return 0 a, b = 0, 1 while b < n: a, b = b, a + b return a"},{"question":"Write a python function to find the reverse of a string. You should use slicing to achieve this. Also, provide a way to test the function with various string inputs.","solution":"def reverse_string(s): Returns the reversed string of s using slicing. return s[::-1]"},{"question":"Write a python function to sort a list of strings. The function should take two parameters: \`words_list\` (a list of strings) and \`reverse\` (a boolean indicating whether to sort the list in descending order). If \`reverse\` is False, the function should return the list sorted in ascending order. If \`reverse\` is True, the function should return the list sorted in descending order.","solution":"def sort_strings(words_list, reverse=False): Sorts a list of strings in ascending or descending order. Parameters: words_list (list): A list of strings to be sorted. reverse (bool): A boolean indicating whether to sort the list in descending order. Returns: list: The sorted list of strings. return sorted(words_list, reverse=reverse)"},{"question":"Write a python function to read a CSV file and output its contents as a dictionary. The dictionary should use the first row of the CSV as the keys and each subsequent row should be a dictionary value with corresponding keys. The module \`csv\` should be used.","solution":"import csv def read_csv_as_dict(file_path): Reads a CSV file and outputs its contents as a dictionary. Parameters: file_path (str): The path to the CSV file Returns: list: A list of dictionaries where each dictionary represents a row in the CSV file. with open(file_path, mode='r', newline='') as file: reader = csv.DictReader(file) return [row for row in reader]"},{"question":"Write a python function to find the value of n raised to the power of m without using the built-in Python function pow() or the ** operator. You should implement the function using recursion.","solution":"def power(n, m): Returns the value of n raised to the power of m using recursion. if m == 0: return 1 if m < 0: return 1 / power(n, -m) return n * power(n, m-1)"},{"question":"Write a python function to check if an array contains a given value.","solution":"def contains(arr, value): Check if array contains the given value. Args: arr (list): List of elements value: Element to be searched within the list Returns: bool: True if value is found in the array, False otherwise return value in arr"},{"question":"Write a python function to sort an array of integers using the Bubble Sort algorithm. Additionally, ensure that the function also logs each step of the sorting process, showing the array after each pass.","solution":"def bubble_sort(arr): Sorts an array of integers using the Bubble Sort algorithm. Logs each step of the sorting process, showing the array after each pass. n = len(arr) for i in range(n): # Track if any elements were swapped during this pass swapped = False # Perform a pass for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: # Swap adjacent elements if they're in the wrong order arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # Log the array after each pass print(f\\"Pass {i + 1}: {arr}\\") # If no elements were swapped, the array is already sorted if not swapped: break return arr"},{"question":"Write a python function to sort the array by the given order. For example, if the given array is [2, 3, 4, 5, 6] and the given order is [4, 3, 2, 6, 5], sort the array in the order that the elements appear in the second array. For example, the output would be [4, 3, 2, 6, 5].","solution":"def sort_array_by_order(array, order): Sorts the elements of \`array\` according to the order defined in \`order\`. :param array: List of integers to sort. :param order: List defining the order of the integers. :return: A new list sorted according to \`order\`. order_index_map = {val: idx for idx, val in enumerate(order)} sorted_array = sorted(array, key=lambda x: order_index_map.get(x, len(order_index_map))) return sorted_array"},{"question":"Write a python function to remove duplicates from a list of integers. The solution should be as efficient as possible and also consider the case where the list may contain negative numbers and zeros. How would you approach this problem?","solution":"def remove_duplicates(nums): Remove duplicates from a list of integers, including negative numbers and zeros. Returns a new list with duplicates removed. return list(set(nums))"},{"question":"Write a python function to remove all punctuation from a given string \`s\` and return the resulting string.","solution":"import string def remove_punctuation(s): Removes all punctuation from the given string s and returns the resulting string. return s.translate(str.maketrans('', '', string.punctuation))"},{"question":"Write a python function to sort the dictionary in ascending order by keys. Please provide a detailed explanation and a code example.","solution":"def sort_dict_by_keys(d): Sorts the given dictionary in ascending order by keys. Parameters: d (dict): The dictionary to sort. Returns: dict: A new dictionary sorted by keys. return dict(sorted(d.items()))"},{"question":"Write a python function to check if all elements of a list are distinct or not.","solution":"def all_elements_distinct(lst): Returns True if all elements in the list are distinct, otherwise False. return len(lst) == len(set(lst))"},{"question":"Write a python function to remove duplicates from a list while preserving the order of the elements. Can you do it without using any additional data structures?","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of the elements. index = 0 while index < len(lst): current_element = lst[index] current_pos = index + 1 while current_pos < len(lst): if lst[current_pos] == current_element: del lst[current_pos] else: current_pos += 1 index += 1 return lst"},{"question":"Write a python function to find and return the maximum number in a list. The function should handle an empty list by returning \`None\`.","solution":"def find_max(nums): Returns the maximum number in a list. Returns None if the list is empty. Args: nums (list): A list of numbers. Returns: int/float: The maximum number in the list, or None if the list is empty. if not nums: return None return max(nums)"},{"question":"Write a python function to reverse a string without using slicing, and without using any built-in functions or libraries that directly reverse strings (like \`reversed()\` or explicit slicing) except for basic string operations (like indexing). The function should also be efficient in terms of time complexity and space complexity.","solution":"def reverse_string(s): Reverses the input string without using slicing or built-in reverse functions. :param s: Input string to be reversed :return: Reversed string result = '' for char in s: result = char + result return result"},{"question":"Write a python function to add two numbers represented as strings without using any built-in functions to convert their values to integers or the \`int()\` function. The function should take two string parameters \`num1\` and \`num2\`, and return a string that represents the sum of the two numbers.","solution":"def add_strings(num1, num2): def str_to_int(num): # Convert the string to an integer manually result = 0 for char in num: result = result * 10 + (ord(char) - ord('0')) return result def int_to_str(num): # Convert the integer to a string manually if num == 0: return \\"0\\" result = \\"\\" while num > 0: result = chr((num % 10) + ord('0')) + result num //= 10 return result num1_int = str_to_int(num1) num2_int = str_to_int(num2) sum_int = num1_int + num2_int return int_to_str(sum_int)"},{"question":"Write a python function to calculate the average temperature from a given list of temperatures.","solution":"def average_temperature(temperatures): Returns the average temperature from the given list of temperatures. Parameters: temperatures (list of float): List containing temperature values. Returns: float: The average temperature. if not temperatures: # Empty list check. return 0.0 return sum(temperatures) / len(temperatures)"},{"question":"Write a python function to find the maximum number of occurrences of any substring of length \`K\` in a given string \`S\`.","solution":"def max_occurrences(S, K): Returns the maximum number of occurrences of any substring of length K in the string S. if K <= 0 or K > len(S): return 0 substring_count = {} for i in range(len(S) - K + 1): substr = S[i:i + K] if substr in substring_count: substring_count[substr] += 1 else: substring_count[substr] = 1 return max(substring_count.values())"},{"question":"Write a python function to find the longest word in a sentence that contains both uppercase and lowercase letters, and also has a length of at least 5 characters.","solution":"def longest_word_with_case_and_length(sentence): Finds the longest word in the sentence that contains both uppercase and lowercase letters and has a length of at least 5 characters. words = sentence.split() filtered_words = [ word for word in words if len(word) >= 5 and any(c.isupper() for c in word) and any(c.islower() for c in word) ] if not filtered_words: return None return max(filtered_words, key=len)"},{"question":"Write a python function to find median of two sorted arrays. The function should handle arrays of different sizes.","solution":"def find_median_sorted_arrays(nums1, nums2): Returns the median of two sorted arrays nums1 and nums2. # Merge the two arrays into one sorted array merged_array = sorted(nums1 + nums2) n = len(merged_array) # Calculate the median if n % 2 == 1: return merged_array[n // 2] else: return (merged_array[n // 2 - 1] + merged_array[n // 2]) / 2.0"},{"question":"Write a python function to calculate Fibonacci series up to a specified number of terms. The function should take an integer \`n\` as input and return a list containing the Fibonacci series up to \`n\` terms. For example, if \`n\` is 10, the function should return the first 10 terms of the Fibonacci series.","solution":"def fibonacci_series(n): Returns the Fibonacci series up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_series = [0, 1] for i in range(2, n): next_term = fib_series[-1] + fib_series[-2] fib_series.append(next_term) return fib_series"},{"question":"Write a python function to sort a list of integers in ascending order using the Bubble Sort algorithm. Explain how Bubble Sort works and its average and worst-case time complexity.","solution":"def bubble_sort(nums): Sorts a list of integers in ascending order using the Bubble Sort algorithm. n = len(nums) for i in range(n): # We use a flag to determine if a swap has been made swapped = False for j in range(0, n - i - 1): # Swap if the element found is greater than the next element if nums[j] > nums[j + 1]: nums[j], nums[j + 1] = nums[j + 1], nums[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break return nums"},{"question":"Write a python function to create a dictionary that maps each letter of the alphabet to its ASCII value.","solution":"def alphabet_to_ascii(): Returns a dictionary that maps each letter of the alphabet to its ASCII value. return {chr(i): i for i in range(ord('a'), ord('z') + 1)}"},{"question":"Write a python function to count the number of unique pairs in a list where the sum of the pair equals a target value.","solution":"def count_unique_pairs(numbers, target): Counts the number of unique pairs in the list 'numbers' where the sum of the pair equals 'target'. Args: numbers (list of int): The list of integers. target (int): The target sum. Returns: int: The number of unique pairs. seen = set() result = set() for number in numbers: complement = target - number if complement in seen: result.add(tuple(sorted((number, complement)))) seen.add(number) return len(result)"},{"question":"Write a python function to find the majority element in a list. The majority element is the one that appears more than (lfloor n/2 rfloor) times, where n is the list size.","solution":"def majority_element(nums): Find the majority element in a list. The majority element is the one that appears more than ⌊ n/2 ⌋ times, where n is the list size. :param nums: List of integers. :return: The majority element or None if no majority element exists. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > len(nums) // 2: return num return None"},{"question":"Write a python function to find the maximum path sum in a binary tree. The path may start and end anywhere in the tree. This problem is a variation of the classic Maximum Depth of Binary Tree problem.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): Returns the maximum path sum in the binary tree. The path may start and end anywhere in the tree. def max_gain(node): nonlocal max_sum if not node: return 0 # Recursive calls to the children left_gain = max(max_gain(node.left), 0) # Only take positive contributions right_gain = max(max_gain(node.right), 0) # Only take positive contributions # Path sum that passes through the node price_newpath = node.val + left_gain + right_gain # Update maximum path sum seen so far max_sum = max(max_sum, price_newpath) # For recursion, return the max gain if continuing the same path return node.val + max(left_gain, right_gain) max_sum = float('-inf') max_gain(root) return max_sum"},{"question":"Write a python function to find the maximum sum of a subarray within a given array. This function should take an array \`arr\` as a parameter and return the maximum sum. You should use Kadane's algorithm to solve this problem. Provide a detailed explanation and code with comments.","solution":"def max_subarray_sum(arr): Uses Kadane's algorithm to find the maximum sum of a subarray within a given array. :param arr: List of integers :return: Maximum sum of any contiguous subarray # Initialize the maximum sum and current subarray sum to the first element of the array max_sum = current_sum = arr[0] # Loop through elements of the array starting from the second element for num in arr[1:]: # Update the current sum to be the maximum of current element and sum of current element with the current sum current_sum = max(num, current_sum + num) # Update the maximum sum to be the maximum of itself and the new current sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the sum of all even numbers in a list of integers, using only functional programming principles.","solution":"from functools import reduce def sum_of_even_numbers(nums): Returns the sum of all even numbers in a list of integers. :param nums: List of integers :return: Sum of even integers return reduce(lambda acc, x: acc + x if x % 2 == 0 else acc, nums, 0)"},{"question":"Write a python function to remove all duplicate characters from a string, keeping only the first occurrence of each character. You can assume the string contains only lowercase alphabets a-z.","solution":"def remove_duplicates(s): Removes all duplicate characters from string \`s\`, keeping only the first occurrence of each character. :param s: String to process, containing only lowercase alphabets a-z. :return: A string with duplicates removed. seen = set() result = \\"\\" for char in s: if char not in seen: seen.add(char) result += char return result"},{"question":"Write a python function to find two numbers, sample1 and sample2, from a given list of numbers that have a specific sum, k. If there are no two numbers whose sum is k, return (None, None).","solution":"def find_pair_with_sum(numbers, k): Returns two numbers from the list 'numbers' that sum up to 'k'. If no such pair exists, returns (None, None). seen = {} for number in numbers: complement = k - number if complement in seen: return (complement, number) seen[number] = True return (None, None)"},{"question":"Write a python function to parse a simple mathematical expression string. The expression string will contain only numbers, addition (+), and subtraction (-) operators, with no spaces. Your function should return the result of the expression.","solution":"def parse_expression(expression): Parses a simple mathematical expression string containing only numbers, addition (+), and subtraction (-) operators, with no spaces, and returns the result of the expression. total = 0 current_number = \\"\\" operator = \\"+\\" for char in expression: if char.isdigit(): current_number += char else: if operator == \\"+\\": total += int(current_number) elif operator == \\"-\\": total -= int(current_number) operator = char current_number = \\"\\" if current_number: if operator == \\"+\\": total += int(current_number) elif operator == \\"-\\": total -= int(current_number) return total"},{"question":"Write a python function to reverse a list of integers using recursion. The function should take a list of integers as input and return a new list with the elements in reverse order.","solution":"def reverse_list_recursive(lst): Returns a new list with the elements of lst in reverse order using recursion. if len(lst) == 0: return [] return [lst[-1]] + reverse_list_recursive(lst[:-1])"},{"question":"Write a python function to find the sum of all positive numbers up to a given number n.","solution":"def sum_of_positives(n): Returns the sum of all positive numbers up to n. if n < 1: return 0 return sum(range(1, n + 1))"},{"question":"Write a python function to sort an array of positive integers by value of bits represent in binary","solution":"def sort_by_bits(arr): Sorts an array of positive integers by number of 1s in their binary representation. In case of tie, the numbers are sorted by their value. Parameters: arr (list): List of positive integers. Returns: list: Sorted list by number of 1s in binary representation and by value. return sorted(arr, key=lambda x: (bin(x).count('1'), x))"},{"question":"Write a python function to check if a number is a palindrome using slicing. Here is the input and output sample you can use for testing.","solution":"def is_palindrome(number): Checks if the given number is a palindrome. A number is considered a palindrome if it reads the same backward as forward. :param number: int :return: bool # Convert number to string for slicing num_str = str(number) # Check if the string is equal to its reverse return num_str == num_str[::-1]"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Can you provide a Python solution for this?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to calculate the sum of all the even numbers in a given list. The function should not include any even numbers that are divisible by 3.","solution":"def sum_even_not_divisible_by_3(numbers): Returns the sum of all even numbers in the list that are not divisible by 3. return sum(x for x in numbers if x % 2 == 0 and x % 3 != 0)"},{"question":"Write a python function to print out the hello world message to the output.","solution":"def print_hello_world(): Prints 'Hello, World!' to the output. print(\\"Hello, World!\\")"},{"question":"Write a python function to check if the value of a variable 'x' is 10 without using comparison operators.","solution":"def is_ten(x): Checks if the given value x is 10 without using comparison operators. Returns True if x is 10, and False otherwise. try: # This works because 10 / (x - 10) will raise a ZeroDivisionError if x is 10. 10 / (x - 10) except ZeroDivisionError: return True return False"},{"question":"Write a python function to count the number of unique words in a given text. A unique word is defined as a word that appears exactly once in the text. The function should return the count of such unique words.","solution":"import re from collections import Counter def count_unique_words(text): Returns the count of unique words in a given text. A unique word is defined as a word that appears exactly once in the text. # Normalize text by converting to lower case, and remove non-alphanumeric characters words = re.findall(r'bw+b', text.lower()) word_counts = Counter(words) unique_words_count = sum(1 for count in word_counts.values() if count == 1) return unique_words_count"},{"question":"Write a python function to create a Fibonacci sequence. The function takes 2 decimal numbers as inputs: the starting two numbers in the sequence. The function returns a list of numbers in the sequence up to and including the nth number. For example, if the inputs are the numbers 0 and 1, and the input representing the nth number is 10, you should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. If the inputs are 2 and 3 as the first two numbers in the sequence, and the nth number should be the 5th one, return [2, 3, 5, 8, 13].","solution":"def fibonacci_sequence(a, b, n): Returns a list of the first n numbers in the Fibonacci sequence starting with a and b. Parameters: a (int/float): The first number in the sequence. b (int/float): The second number in the sequence. n (int): The number of elements in the sequence to be generated. Returns: list: The Fibonacci sequence up to the nth number. sequence = [a, b] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a python function to move common elements from 'mylist' to the left side and keep the order of the uncommon elements.","solution":"def move_common_to_left(mylist, commons): Moves elements from commons list to the left side of mylist while maintaining the order of elements not in the commons list. common_elements = [x for x in mylist if x in commons] uncommon_elements = [x for x in mylist if x not in commons] return common_elements + uncommon_elements"},{"question":"Write a python function to test if a given array contains three consecutive odd numbers.","solution":"def contains_three_consecutive_odds(arr): Checks if the given array contains three consecutive odd numbers. Parameters: arr (list): The list of integers to check. Returns: bool: True if there are three consecutive odd numbers, False otherwise. count = 0 for num in arr: if num % 2 != 0: count += 1 if count == 3: return True else: count = 0 return False"},{"question":"Write a python function to calculate the factorial of a given number. You need to ensure that the function works for both non-negative integers and returns an appropriate error message for negative numbers.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, returns an appropriate error message. if n < 0: return \\"Error: Negative numbers do not have factorials.\\" elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to implement bubble sort and return the sorted list.","solution":"def bubble_sort(arr): Sorts a list using the bubble sort algorithm. Args: arr (list): The list to be sorted. Returns: list: The sorted list. n = len(arr) for i in range(n): # Track if a swap was made, if no swaps were made, the array is sorted swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no two elements were swapped by inner loop, then the list is sorted if not swapped: break return arr"},{"question":"Write a python function to calculate the factorial of a given number \`n\`. For example, the factorial of 5 (denoted as 5!) is 5*4*3*2*1 = 120.","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n+1): result *= i return result"},{"question":"Write a python function to find all words in a given sentence that start with a specific prefix. The function will accept two parameters: the sentence as a string and the prefix as a string. It should return a list of words that start with the given prefix. If no words are found, the function should return an empty list.","solution":"def words_with_prefix(sentence, prefix): Finds all words in a given sentence that start with a specific prefix. Parameters: sentence (str): The sentence to search within. prefix (str): The prefix to search for. Returns: list: A list of words that start with the given prefix. words = sentence.split() return [word for word in words if word.startswith(prefix)]"},{"question":"Write a python function to sort list of dictionaries by one or more keys. The function should take a list of dictionaries and a list of keys to sort by as arguments.","solution":"def sort_dicts_by_keys(dict_list, keys): Sorts a list of dictionaries by one or more keys. :param dict_list: List of dictionaries to sort :param keys: List of keys to sort by :return: Sorted list of dictionaries if not keys: return dict_list return sorted(dict_list, key=lambda x: tuple(x[k] for k in keys if k in x))"},{"question":"Write a python function to extract the largest number from a list of numbers.","solution":"def extract_largest_number(numbers): Returns the largest number from a list of numbers. :param numbers: List of numbers :return: The largest number in the list if not numbers: # check if the list is empty return None # return None for an empty list largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"question":"Write a python function to find the maximum of two numbers. The function should return the larger of the two numbers.","solution":"def find_max(a, b): Returns the maximum of two numbers. return a if a > b else b"},{"question":"Write a python function to reverse a string in Python. There are several ways to do this, but let's try three different methods.","solution":"def reverse_string_slicing(s: str) -> str: Reverses a string using slicing. return s[::-1] def reverse_string_loop(s: str) -> str: Reverses a string using a for loop and concatenation. reversed_string = \\"\\" for char in s: reversed_string = char + reversed_string return reversed_string def reverse_string_recursion(s: str) -> str: Reverses a string using recursion. if len(s) == 0: return s else: return reverse_string_recursion(s[1:]) + s[0]"},{"question":"Write a python function to find the sum of all even Fibonacci numbers less than 4000000.","solution":"def sum_even_fibonacci(limit=4000000): Returns the sum of all even Fibonacci numbers less than 'limit'. a, b = 1, 2 total_sum = 0 while a < limit: if a % 2 == 0: total_sum += a a, b = b, a + b return total_sum"},{"question":"Write a python function to remove leading zeros from a string.","solution":"def remove_leading_zeros(s): Removes leading zeros from a string. return s.lstrip('0')"},{"question":"Write a python function to find and return the greatest common divisor (GCD) of two numbers using the Euclidean algorithm. The Euclidean algorithm is an efficient method for computing the greatest common divisor (GCD) of two numbers, the largest number that divides both of them without leaving a remainder.","solution":"def gcd(a, b): Returns the Greatest Common Divisor (GCD) of a and b using the Euclidean algorithm. while b: a, b = b, a % b return abs(a)"},{"question":"Write a python function to calculate the factorial of a number. To increase the difficulty, also implement error handling to ensure that the input is a non-negative integer.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Raises ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to capture a string from the user and check if it contains only uppercase letters.","solution":"def is_all_uppercase(s): Returns True if the string s contains only uppercase letters, False otherwise. return s.isupper() and s.isalpha()"},{"question":"Write a python function to get all the unique words in a string that are separated by either a space or a comma.","solution":"def unique_words(text): Returns a list of unique words in the given text. Words are separated by either a space or a comma. # Replace commas with spaces and split the text into words words = text.replace(',', ' ').split() # Use a set to get unique words, then convert it back to a list unique_words_list = list(set(words)) return unique_words_list"},{"question":"Write a python function to calculate the total cost of an item after tax. The function should take in the price and tax rate as parameters, and return the total cost. If the price is negative, the function should return None to indicate an error.","solution":"def calculate_total_cost(price, tax_rate): Calculates the total cost of an item after tax. Parameters: price (float): the price of the item, should be non-negative. tax_rate (float): the tax rate to apply to the price, should be non-negative. Returns: float: the total cost inclusive of tax, or None if the price is negative. if price < 0 or tax_rate < 0: return None total_cost = price + (price * tax_rate) return total_cost"},{"question":"Write a python function to count the number of each character in a string and return a dictionary with the character as the key and its count as the value.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to find the nth Fibonacci number. The nth Fibonacci number is defined as the sum of the (n-1)th and (n-2)th Fibonacci numbers, with the first two numbers being 0 and 1 respectively. For example, the 6th Fibonacci number is 8, since the sequence starts 0, 1, 1, 2, 3, 5, 8, ...","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to convert an integer to a Roman numeral. Roman numerals are typically represented from left to right, and each character's representation increases in value from left to right, such as \\"I\\" for 1, \\"IV\\" for 4, \\"V\\" for 5, \\"IX\\" for 9, \\"X\\" for 10, etc. However, there are specific rules to subtract smaller values from larger values. For example, 4 is written as \\"IV\\" instead of \\"IIII\\" and 9 is written as \\"IX\\" instead of \\"VIIII\\".","solution":"def int_to_roman(num): Converts an integer to a Roman numeral. :param num: Integer to convert (1 to 3999 inclusive) :return: A string representing the Roman numeral equivalent of the given integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a python function to find the shortest path from a source to a destination in a grid. The grid contains obstacles represented by 1s and open spaces represented by 0s. You can only move up, down, left, or right, not diagonally. If there is no path from the source to the destination, return -1.","solution":"from collections import deque def shortest_path(grid, src, dest): Finds the shortest path in a grid from src to dest. Parameters: grid (list of list of int): 2D matrix containing 0s (open paths) and 1s (obstacles). src (tuple of int): (row, col) coordinates for the start position. dest (tuple of int): (row, col) coordinates for the destination position. Returns: int: Length of the shortest path from src to dest, or -1 if there is no path. rows, cols = len(grid), len(grid[0]) visited = set() queue = deque([(src[0], src[1], 0)]) # queue holds tuples of (row, col, distance) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: r, c, dist = queue.popleft() if (r, c) == dest: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a python function to decode a run-length encoded string. The input string will contain characters followed by a number indicating how many times the character should be repeated. For example, the string 'a3b2c1' should be decoded to 'aaabbcc'.","solution":"def decode_rle(encoded_str): Decodes a run-length encoded string. Parameters: encoded_str (str) : The run-length encoded string. Returns: str: Decoded string. decoded_str = \\"\\" i = 0 while i < len(encoded_str): char = encoded_str[i] count = 0 # Move to the number part and construct the count i += 1 while i < len(encoded_str) and encoded_str[i].isdigit(): count = count * 10 + int(encoded_str[i]) i += 1 decoded_str += char * count return decoded_str"},{"question":"Write a python function to merge sort an array of integers.","solution":"def merge_sort(arr): Perform a merge sort on an array of integers. if len(arr) <= 1: return arr def merge(left, right): sorted_array = [] left_index = right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_array.append(left[left_index]) left_index += 1 else: sorted_array.append(right[right_index]) right_index += 1 sorted_array.extend(left[left_index:]) sorted_array.extend(right[right_index:]) return sorted_array mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half)"},{"question":"Write a python function to find the minimum number of steps required to make the sum of the array elements equal to a given target using the minimum operations. Each operation can increase or decrease an array element by one.","solution":"def min_steps_to_target(arr, target): Given an array and a target sum, return the minimum number of steps required to make the sum of the array elements equal to the given target. Each step can increase or decrease an array element by one. Parameters: arr (list of int): The list of integers. target (int): The target sum. Returns: int: The minimum number of steps required. current_sum = sum(arr) steps_needed = abs(current_sum - target) return steps_needed"},{"question":"Write a python function to find the second largest number in a list. The list will contain at least two distinct numbers.","solution":"def second_largest(numbers): Returns the second largest number in the list. Assumes the list contains at least two distinct numbers. first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif number > second and number != first: second = number return second"},{"question":"Write a python function to convert a given string to the format \\"MM/DD/YYYY\\".","solution":"from datetime import datetime def convert_to_mm_dd_yyyy(date_str): Converts a date string to MM/DD/YYYY format. Parameters: date_str (str): Date string in any valid date format. Returns: str: The date string in MM/DD/YYYY format. dt = datetime.strptime(date_str, '%Y-%m-%d') return dt.strftime('%m/%d/%Y')"},{"question":"Write a python function to calculate the sum of the numbers ranging from 0 to \`n\` where \`n\` is a non-negative integer.","solution":"def sum_range(n): Returns the sum of the numbers from 0 to n, where n is a non-negative integer. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") return sum(range(n + 1))"},{"question":"Write a python function to find the frequency of a specific word in a text._handle special cases and edge conditions properly if there are multiple words with the same highest frequency.","solution":"def word_frequency(text, word): Returns the frequency of a specific word in a given text. :param text: The input text string. :param word: The word whose frequency we want to find. :return: The frequency of the word in the text. # Convert text to lowercase and split into words words = text.lower().split() word = word.lower() # Case insensitive comparison # Initialize word count count = words.count(word) return count"},{"question":"Write a python function to return the sum of the first N natural numbers.","solution":"def sum_of_natural_numbers(N): Returns the sum of the first N natural numbers. if N < 1: return 0 return N * (N + 1) // 2"},{"question":"Write a python function to search for a given element in an unsorted list using linear search. If the element is found, return its index; otherwise, return -1.","solution":"def linear_search(arr, target): Searches for the target element in the given list using linear search. Parameters: arr (list): A list of elements. target: The element to search for. Returns: int: The index of the target element if found, else -1. for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Write a python function to find the maximum element in a list. If the list is empty, the function should return None. The function should handle any type of elements within the list that support comparison. Use Python's built-in functions and exception handling to ensure robustness.","solution":"def find_max(lst): Returns the maximum element in a list. If the list is empty, returns \`None\`. if not lst: return None try: return max(lst) except TypeError: raise ValueError(\\"List contains elements that cannot be compared.\\")"},{"question":"Write a python function to find the top three largest numbers in a given list.","solution":"def top_three_largest_numbers(numbers): Returns the top three largest numbers in the list. If there are less than three numbers, returns all of them sorted in descending order. if not numbers: return [] sorted_numbers = sorted(numbers, reverse=True) # Return the first three numbers if there are at least three, otherwise return all numbers return sorted_numbers[:min(3, len(sorted_numbers))]"},{"question":"Write a python function to find the largest number in a list. The function should also return the index of the largest number in the list. If the list is empty, the function should return None for both the number and its index.","solution":"def find_largest_number(nums): Returns the largest number in the list and its index. If the list is empty, returns (None, None). if not nums: return (None, None) max_num = nums[0] max_index = 0 for i in range(1, len(nums)): if nums[i] > max_num: max_num = nums[i] max_index = i return (max_num, max_index)"},{"question":"Write a python function to find the second smallest element in a list of integers. If the list contains fewer than two elements, return None.","solution":"def second_smallest(numbers): Returns the second smallest element in a list of integers. If the list contains fewer than two elements, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) unique_numbers.sort() if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a python function to identify if a given string contains the substring \\"python\\". The function should return \`True\` if the substring exists and \`False\` otherwise.","solution":"def contains_python(s): Returns True if the substring 'python' exists in the given string s, otherwise False. return 'python' in s"},{"question":"Write a python function to find the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid, considering obstacles.","solution":"def unique_paths_with_obstacles(obstacle_grid): Calculate the number of unique paths from top-left corner to bottom-right corner on a grid with obstacles. :param obstacle_grid: List[List[int]], 2D grid where 1 represents an obstacle and 0 represents free space. :return: int, number of unique paths. if not obstacle_grid or obstacle_grid[0][0] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to check if the elements in a given list are strictly increasing.","solution":"def is_strictly_increasing(lst): Returns True if the elements in the list are strictly increasing, False otherwise. for i in range(len(lst) - 1): if lst[i] >= lst[i + 1]: return False return True"},{"question":"Write a python function to merge two sorted lists into a single sorted list. The function should avoid using any additional memory except for a few local variables.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list without using extra memory except for a few local variables. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to generate Fibonacci sequence up to n numbers, and return the sequence as a list.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to n numbers as a list. if n <= 0: return [] elif n == 1: return [0] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to find the total number of distinct paths in a matrix that from top-left to bottom-right, taking only steps either right or down. For a grid of size ( m times n ), how can we determine the number of unique paths?","solution":"def unique_paths(m, n): Returns the total number of distinct paths in a matrix of size m x n from top-left to bottom-right, taking only steps either right or down. if m == 0 or n == 0: return 0 # Initializing a 2D array with all 1s, size (m x n) dp = [[1] * n for _ in range(m)] # Starting from dp[i][j] = 1 for the first row and column already taken care of for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a python function to print all prime numbers up to a given number \`n\`.","solution":"def primes_up_to_n(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]]"},{"question":"Write a python function to return a new string of the first and last two characters. If the string is less than 2, return the empty string.","solution":"def first_and_last_two_chars(s): Returns a new string made of the first and last two characters of the input string s, or an empty string if the length of s is less than 2. if len(s) < 2: return \\"\\" return s[:2] + s[-2:]"},{"question":"Write a python function to calculate the reverse of a number. For example, if the input number is 123, the function should return 321.","solution":"def reverse_number(n): Returns the reverse of the input number n. reversed_number = 0 is_negative = n < 0 n = abs(n) while n != 0: reversed_number = reversed_number * 10 + n % 10 n //= 10 if is_negative: return -reversed_number return reversed_number"},{"question":"Write a python function to remove all elements of a given list for which a given function returns True. The function should functionality like the filter() built-in Python function.","solution":"def custom_filter(function, lst): Removes all elements of the given list for which the given function returns True. :param function: Function that returns a boolean value. :param lst: List of elements to be filtered. :return: A new list with elements for which the function returns False. return [item for item in lst if not function(item)]"},{"question":"Write a python function to check if a given number is a prime number. A prime number is only divisible by 1 and itself. For example, 2 is a prime number because it is only divisible by 1 and 2, but 4 is not because it is also divisible by 2.","solution":"def is_prime(n): Returns True if the given number n is a prime number, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a python function to find the maximum number that is divisible by 3, from an input list of integers. If no such number exists, return \`None\`.","solution":"def max_divisible_by_3(numbers): Returns the maximum number from the list that is divisible by 3. If no such number exists, returns None. divisible_by_3 = [num for num in numbers if num % 3 == 0] return max(divisible_by_3, default=None)"},{"question":"Write a python function to create and print a dictionary where each key is a character in a string and its corresponding value is its ASCII value.","solution":"def char_to_ascii_dict(input_string): Creates and returns a dictionary where each key is a character in the input_string and its value is the ASCII value. return {char: ord(char) for char in input_string}"},{"question":"Write a python function to join a list of strings and return the result. If the list is empty, return an empty string. If the list contains only one element, return that element. If the list contains multiple elements, join them with a comma and a space between each element.","solution":"def join_strings(strings): Joins a list of strings and returns the result. If the list is empty, returns an empty string. If the list contains only one element, returns that element. If the list contains multiple elements, joins them with a comma and a space between each element. if not strings: return \\"\\" elif len(strings) == 1: return strings[0] else: return \\", \\".join(strings)"},{"question":"Write a python function to initialize and sort a list with random numbers. The list should contain numbers between 1 and 100, with a length of 20. The function should print the sorted list and also return it for further use in the program.","solution":"import random def initialize_and_sort_list(): Initializes a list with 20 random numbers between 1 and 100, sorts the list, prints it, and returns it. random_list = [random.randint(1, 100) for _ in range(20)] sorted_list = sorted(random_list) print(sorted_list) return sorted_list"},{"question":"Write a python function to rotate elements of an array by \`k\` positions. The array elements should be rotated to the right by \`k\` positions.","solution":"def rotate_array(arr, k): Rotates the elements of the array to the right by k positions. Parameters: arr (list): The list of elements to be rotated. k (int): The number of positions to rotate the array. Returns: list: The rotated array. if not arr: return arr n = len(arr) k = k % n # Normalize k to avoid extra rotations return arr[-k:] + arr[:-k]"},{"question":"Write a python function to sort a list of tuples by the second item in each tuple. You should use lambda function inside your solution.","solution":"def sort_by_second_item(tuples_list): Sorts a list of tuples based on the second item of each tuple. Parameters: tuples_list (list): A list of tuples to be sorted. Returns: list: A sorted list of tuples based on the second item. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to solve the n-queens problem.","solution":"def solve_n_queens(n): Solve the N-Queens problem and return one of the possible solutions. :param n: The number of queens to place on an NxN chessboard. :return: A list of solutions where each solution is a list of n integers. The integer value corresponds to the column position of the queen in that row. def is_safe(board, row, col): # Check this column on the upper side. for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(board, row): if row == n: result.append(board.copy()) return for col in range(n): if is_safe(board, row, col): board[row] = col solve(board, row + 1) board[row] = -1 result = [] solve([-1] * n, 0) return result"},{"question":"Write a python function to find the median of two sorted arrays.","solution":"def findMedianSortedArrays(nums1, nums2): Finds the median of two sorted arrays. Args: nums1 : List[int] - The first sorted array. nums2 : List[int] - The second sorted array. Returns: float - The median of the two sorted arrays. nums = nums1 + nums2 nums.sort() n = len(nums) if n % 2 == 1: return float(nums[n // 2]) else: return (nums[n // 2 - 1] + nums[n // 2]) / 2.0"},{"question":"Write a python function to play the game of rock, paper, scissors. Let's assume that scissors cut paper, paper covers rock, and rock crushes scissors. The function should take as input the moves of two players and return a string that declares the winner or the tie breakers.","solution":"def rock_paper_scissors(player1, player2): Determines the outcome of a rock-paper-scissors game. Args: player1 (str): Move of player 1. Expected to be 'rock', 'paper', or 'scissors'. player2 (str): Move of player 2. Expected to be 'rock', 'paper', or 'scissors'. Returns: str: Result of the game: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"It's a tie\\". if player1 == player2: return \\"It's a tie\\" rules = { \\"rock\\": \\"scissors\\", \\"scissors\\": \\"paper\\", \\"paper\\": \\"rock\\" } if rules[player1] == player2: return \\"Player 1 wins\\" else: return \\"Player 2 wins\\""},{"question":"Write a python function to convert a string to a list. How should I approach this problem?","solution":"def string_to_list(s): Converts the input string to a list of characters. Parameters: s (str): The input string. Returns: list: A list of characters in the input string. return list(s)"},{"question":"Write a python function to return a list of the top k frequent elements in nums. You may return the answer in any order.","solution":"from collections import Counter def top_k_frequent(nums, k): Returns a list of the top k frequent elements in nums. count = Counter(nums) return [item for item, _ in count.most_common(k)]"},{"question":"Write a python function to retrieve the last n elements from a list.","solution":"def get_last_n_elements(lst, n): Returns the last n elements from a list. Parameters: lst (list): The list from which to retrieve the last n elements. n (int): The number of elements to retrieve. Returns: list: The last n elements from the list. if n <= 0: return [] return lst[-n:]"},{"question":"Write a python function to reverse the content of a text file using Python's built-in file handling function. The reversed content should then be saved in a new file named \\"reversed.txt\\".","solution":"def reverse_file_content(input_file_path): Reverses the content of a text file and writes the reversed content to 'reversed.txt'. Parameters: input_file_path (str): The path to the input text file. Returns: str: The path to the file containing the reversed content. with open(input_file_path, 'r') as file: content = file.read() reversed_content = content[::-1] output_file_path = 'reversed.txt' with open(output_file_path, 'w') as file: file.write(reversed_content) return output_file_path"},{"question":"Write a python function to return the maximum product that can be obtained from two numbers in the given array.","solution":"def max_product(arr): Returns the maximum product that can be obtained from two numbers in the given array. Parameters: arr (list of int): The array of integers. Returns: int: The maximum product of any two numbers in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements to calculate a product.\\") # Find the two largest numbers in the array max1 = max2 = float('-inf') for num in arr: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Find the two smallest numbers in the array (for cases with large negative numbers) min1 = min2 = float('inf') for num in arr: if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a python function to remove all comments from a string. The function should take two parameters: the input string and the type of comment. The function should return the string with all comments of the specified type removed.","solution":"def remove_comments(input_string, comment_type): Removes all comments of the specified type from the input string. Parameters: input_string (str): The string from which to remove comments. comment_type (str): The type of comments to remove (e.g., '#' for Python comments or '//' for C++ comments). Returns: str: The input string with all specified comments removed. import re if comment_type == '#': pattern = r\\"#.*?\\" elif comment_type == '//': pattern = r\\"//.*?\\" else: raise ValueError(f\\"Unsupported comment type: {comment_type}\\") return re.sub(pattern, '', input_string, flags=re.MULTILINE)"},{"question":"Write a python function to sort an array of integers in descending order without using any in-built functions such as sorted() or sort(), but implementing your own sorting algorithm. Implement a bubble sort technique.","solution":"def bubble_sort_desc(arr): Sorts an array of integers in descending order using bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Write a python function to return the minimum of three numbers.","solution":"def min_of_three(a, b, c): Returns the minimum of three numbers a, b, and c. return min(a, b, c)"},{"question":"Write a python function to find all anagrams of a string in a list of strings.","solution":"def find_anagrams(word, words_list): Find all anagrams of a given word in a list of strings. Parameters: - word (str): The word to find anagrams of. - words_list (list): The list of strings to search within. Returns: - list: A list of anagrams found in words_list. sorted_word = sorted(word) return [w for w in words_list if sorted(w) == sorted_word]"},{"question":"Write a python function to find the maximum sum of a subarray within a given 1D array. This is a classic problem known as the \\"Kadane's Algorithm\\". However, let's add an interesting twist. The function should also return the starting and ending indices of the subarray that gives this maximum sum. If there are multiple subarrays with the same maximum sum, return any one of them.","solution":"def max_subarray_with_indices(nums): Finds the maximum sum of any subarray within the given 1D array, and also returns the starting and ending indices of this subarray. max_sum = float('-inf') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, start, end"},{"question":"Write a python function to determine if a given number is a palindrome or not. A palindrome is a number (or a sequence of numbers or letters) which reads the same backward as forward. A negative number can be considered a non-palindrome.","solution":"def is_palindrome_number(num): Determine if a given number is a palindrome. A negative number is considered a non-palindrome. :param num: The number to be checked. :return: True if the number is a palindrome, False otherwise. if num < 0: return False str_num = str(num) return str_num == str_num[::-1]"},{"question":"Write a python function to find the maximum sum of a subarray within a given array, where the subarray must contain the element at index 0.","solution":"def max_subarray_with_index_0(arr): Finds the maximum sum of a subarray within 'arr', where the subarray must contain the element at index 0. Params: arr (list): List of integers Return: int: Maximum sum of the subarray containing index 0 if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(current_sum + num, num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to generate all possible palindromes of a given length \`n\`. A palindrome is a word, phrase, number, or other sequence of characters that reads the same backward as forward. The function should return a list of all possible palindromes of that length.","solution":"def generate_palindromes(n): Generates all possible palindromes of a given length n. Parameters: n (int): The length of the palindromes to generate. Returns: List[str]: A list of all possible palindromes of length n. if n <= 0: return [] if n == 1: return [chr(i) for i in range(ord('a'), ord('z') + 1)] half_length = (n + 1) // 2 half_strings = [''] for _ in range(half_length): new_half_strings = [] for s in half_strings: for char in range(ord('a'), ord('z') + 1): new_half_strings.append(s + chr(char)) half_strings = new_half_strings palindromes = [] for half in half_strings: if n % 2 == 0: complete = half + half[::-1] else: complete = half + half[-2::-1] palindromes.append(complete) return palindromes"},{"question":"Write a python function to find the intersection of two sets, but without using any built-in functions like \`intersection\`, \`&\`, or \`in\` keyword. How would you approach this problem? Provide an example to demonstrate your solution.","solution":"def custom_intersection(set1, set2): Returns the intersection of two sets without using built-in intersection functions. result = set() for elem in set1: for elem2 in set2: if elem == elem2: result.add(elem) break return result # Demonstration example set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6} print(custom_intersection(set1, set2)) # Output: {3, 4}"},{"question":"Write a python function to find all combinations of a given length from a list. The combinations should be returned as a list of tuples, where each tuple represents a combination. The function should take two parameters: a list of elements and the length of the combinations.","solution":"from itertools import combinations def find_combinations(elements, combination_length): Returns all combinations of a given length from the list of elements. Parameters: elements (list): A list of elements. combination_length (int): The length of each combination. Returns: list: A list of tuples, where each tuple is a combination of the specified length. return list(combinations(elements, combination_length))"},{"question":"Write a python function to solve the Eight Queens Problem using backtracking. The function should place 8 queens on an 8x8 chessboard such that no two queens threaten each other. A queen can attack another if they are on the same row, column, or diagonal.","solution":"def solve_n_queens(): Solves the Eight Queens problem using backtracking and returns one of the solutions. def is_safe(board, row, col): # Check current column for i in range(row): if board[i] == col: return False # Check upper diagonal on left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i] == j: return False # Check upper diagonal on right side for i, j in zip(range(row, -1, -1), range(col, len(board))): if board[i] == j: return False return True def solve(board, row): if row == len(board): result.append(board[:]) return for col in range(len(board)): if is_safe(board, row, col): board[row] = col solve(board, row + 1) board[row] = -1 board = [-1] * 8 result = [] solve(board, 0) return result[0] if result else []"},{"question":"Write a python function to find the highest product of any three numbers in a list.","solution":"def highest_product_of_three(numbers): Returns the highest product of any three numbers from the list. if len(numbers) < 3: raise ValueError(\\"List must contain at least three numbers\\") numbers.sort() # Maximum product could be the product of the three largest numbers or # the product of the two smallest and the largest number (considering possible negatives). return max(numbers[-1] * numbers[-2] * numbers[-3], numbers[0] * numbers[1] * numbers[-1])"},{"question":"Write a python function to find the minimum cost to connect all cities given a set of cities and the cost of connecting each pair of cities. The cities are represented as nodes in a graph, and the costs of connecting them are represented as edges with weights. You can only connect two cities at a time.","solution":"import heapq def minimum_cost_to_connect_cities(n, edges): Returns the minimum cost to connect all cities given the number of cities and the edges with their costs. :param n: int - Number of cities (nodes) :param edges: List of tuples (city1, city2, cost) :return: int - Minimum cost to connect all cities # Create adjacency list representation of the graph graph = {i: [] for i in range(n)} for city1, city2, cost in edges: graph[city1].append((cost, city2)) graph[city2].append((cost, city1)) # Priority queue to store the edges with cost min_heap = [(0, 0)] # (cost, start_node) visited = set() total_cost = 0 while min_heap: cost, node = heapq.heappop(min_heap) if node not in visited: visited.add(node) total_cost += cost for edge_cost, adjacent in graph[node]: if adjacent not in visited: heapq.heappush(min_heap, (edge_cost, adjacent)) if len(visited) == n: return total_cost else: return -1 # In case there are nodes that are not connected"},{"question":"Write a python function to find the maximum sum of a subarray that is a circular array.","solution":"def max_subarray_sum_circular(nums): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_kadane = kadane(nums) total_sum = sum(nums) max_wrap = total_sum + kadane([-x for x in nums]) if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Write a python function to print all the prime numbers up to a given number.","solution":"def primes_up_to(n): Returns a list of all prime numbers up to and including n. Parameters: n (int): The upper limit to find prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num ** 0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to convert a string to a list where each character in the string becomes an element in the list. For example, if the string is \\"hello\\", the function should return \`['h', 'e', 'l', 'l', 'o']\`.","solution":"def string_to_list(s): Converts a string to a list where each character in the string becomes an element in the list. Args: s (str): The input string to be converted. Returns: list: A list containing each character of the input string as an element. return list(s)"},{"question":"Write a python function to implement a basic version of the game Tic-Tac-Toe. This function should allow two players to play the game on a 3x3 board. The function should return the winner of the game or declare a draw if the game ends without a winner.","solution":"def tic_tac_toe(moves): Determines the outcome of a Tic-Tac-Toe game. Parameters: moves (list): A list of tuples representing the moves of the game. The list contains tuples with the format (row, col, player) where 'row' and 'col' are the board positions (0-indexed) and 'player' is either 'X' or 'O'. Returns: str: 'X' if player X wins, 'O' if player O wins, or 'Draw' if the game is a draw. board = [['' for _ in range(3)] for _ in range(3)] for move in moves: row, col, player = move board[row][col] = player # Check rows for i in range(3): if board[i][0] == board[i][1] == board[i][2] != '': return board[i][0] # Check columns for i in range(3): if board[0][i] == board[1][i] == board[2][i] != '': return board[0][i] # Check diagonals if board[0][0] == board[1][1] == board[2][2] != '': return board[0][0] if board[0][2] == board[1][1] == board[2][0] != '': return board[0][2] # Check for any empty spots for row in board: for cell in row: if cell == '': return 'Pending' return 'Draw'"},{"question":"Write a python function to find the shortest substring containing all the elements of a given array.","solution":"def shortest_substring_with_all_elements(s, arr): Finds the shortest substring of 's' that contains all elements specified in 'arr'. from collections import Counter if not s or not arr: return \\"\\" # Initialize counters and pointers required = Counter(arr) formed = 0 left, right = 0, 0 window_counts = {} min_length = float('inf') start_idx = 0 # Start sliding window while right < len(s): char = s[right] if char in required: window_counts[char] = window_counts.get(char, 0) + 1 if window_counts[char] == required[char]: formed += 1 while left <= right and formed == len(required): char = s[left] # Update minimum length and start index if (right - left + 1) < min_length: min_length = right - left + 1 start_idx = left # Remove the leftmost character if char in required: window_counts[char] -= 1 if window_counts[char] < required[char]: formed -= 1 left += 1 right += 1 return s[start_idx:start_idx + min_length] if min_length != float('inf') else \\"\\""},{"question":"Write a python function to find the number of occurrences of a word in a given text.","solution":"def count_word_occurrences(text, word): Returns the number of occurrences of a word in the given text. words = text.lower().split() target_word = word.lower() return sum(1 for w in words if w == target_word)"},{"question":"Write a python function to replace every space in a string with -.","solution":"def replace_spaces(string): Replaces every space in the string with '-'. return string.replace(' ', '-')"},{"question":"Write a python function to convert a string to a list of words, where each word is separated by a space.","solution":"def string_to_list_of_words(input_string): Converts a string to a list of words. Each word is separated by a space. return input_string.split()"},{"question":"Write a python function to reverse an integer. Reverse the digits of an integer. The integer might be positive or negative.","solution":"def reverse_integer(n): Reverse the digits of an integer. If the integer is negative, the negative sign should remain at the front after reversing. Args: n (int): The integer to reverse. Returns: int: The integer with its digits reversed. sign = -1 if n < 0 else 1 reversed_num = int(str(abs(n))[::-1]) return sign * reversed_num"},{"question":"Write a python function to generate all possible combinations of n integers from 1 to n, where each combination contains exactly k elements, and no two elements in a combination are consecutive.","solution":"from itertools import combinations def generate_combinations(n, k): Generate all possible combinations of n integers from 1 to n, where each combination contains exactly k elements, and no two elements in a combination are consecutive. Parameters: n (int): The upper limit of the range (inclusive). k (int): The number of elements in each combination. Returns: list of tuples: A list containing all valid combinations. all_combinations = combinations(range(1, n + 1), k) valid_combinations = [] for comb in all_combinations: if all(abs(comb[i] - comb[i+1]) > 1 for i in range(len(comb) - 1)): valid_combinations.append(comb) return valid_combinations"},{"question":"Write a python function to convert a list of dictionaries into a dictionary of dictionaries, where the keys of the outer dictionary are taken from a specific key in the inner dictionaries. for example,","solution":"def list_to_dict_of_dicts(list_of_dicts, key_field): Converts a list of dictionaries into a dictionary of dictionaries. Parameters: - list_of_dicts: list of dictionaries - key_field: the field name to be used as keys of the outer dictionary Returns: A dictionary of dictionaries. return {d[key_field]: d for d in list_of_dicts}"},{"question":"Write a python function to join a list of strings using comma and also ensure that each string is stripped of any leading/trailing whitespaces.","solution":"def join_and_strip(strings): Takes a list of strings, strips leading/trailing whitespaces from each, then joins them using a comma. Parameters: strings (list of str): List of strings to be processed. Returns: str: A single string with each element joined by a comma. stripped_strings = [s.strip() for s in strings] return ','.join(stripped_strings)"},{"question":"Write a python function to find the largest palindrome made from the product of two 3-digit numbers given that the largest palindrome made from the product of two 2-digit numbers is 9009 (91 x 99).","solution":"def is_palindrome(n): Check if a number is a palindrome. return str(n) == str(n)[::-1] def largest_palindrome_product(): Returns the largest palindrome made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(100, 1000): for j in range(i, 1000): product = i * j if is_palindrome(product) and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Write a python function to find the next greater element in an array. The function should return the next greater element for every element in the array. If there is no greater element to the right, the function should return -1 for that element.","solution":"def next_greater_elements(arr): Returns an array where each element is replaced by the next greater element to its right. If there is no such element, replace it with -1. n = len(arr) result = [-1] * n stack = [] for i in range(n): # Process the stack and set the result for elements that have the current element as next greater while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] # Push the current index onto the stack stack.append(i) return result"},{"question":"Write a python function to reverse a given list. You cannot use the built-in reverse() function or slicing method to solve this problem. You need to implement it using a loop.","solution":"def reverse_list(lst): Returns a reversed list. Parameters: lst (list): The list to be reversed. Returns: list: The reversed list. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a python function to count the number of occurrences of a substring within a string, but this time, consider case-insensitivity and treat consecutive identical substrings as a single occurrence.","solution":"import re def count_substring_occurrences(haystack, needle): Counts the occurrences of the substring 'needle' within the string 'haystack', treating case-insensitivity and consecutive identical substrings as a single occurrence. :param haystack: String in which to search for the substring :param needle: Substring to search for :return: Number of occurrences of needle in haystack # Convert both strings to lowercase to handle case-insensitivity haystack_lower = haystack.lower() needle_lower = needle.lower() # Create a regex pattern that matches the needle and collapses consecutive occurrences pattern = re.compile(rf'({re.escape(needle_lower)})(?:1)+', re.IGNORECASE) # Find all matches and return the count of unique (collapsed) occurrences unique_occurrences = pattern.findall(haystack_lower) return len(unique_occurrences)"},{"question":"Write a python function to calculate the sum of all numbers between 1 and n (inclusive) that are divisible by both 3 and 5.","solution":"def sum_divisible_by_3_and_5(n): Returns the sum of all numbers between 1 and n (inclusive) that are divisible by both 3 and 5. return sum(x for x in range(1, n+1) if x % 15 == 0)"},{"question":"Write a python function to read and process a CSV file using the csv module in Python. The function should take the name of the CSV file as input and return a list of dictionaries, where each dictionary represents a row in the CSV file with the column headers as keys. If the CSV file does not exist or is not accessible, the function should handle the error gracefully and return an error message.","solution":"import csv def read_csv_to_dict_list(file_name): Reads a CSV file and returns a list of dictionaries where each dictionary represents a row with column headers as keys. Parameters: file_name (str): The name of the CSV file to read. Returns: list: A list of dictionaries representing the rows of the CSV file, or a string with an error message if the file is not accessible. try: with open(file_name, mode='r', newline='') as csvfile: reader = csv.DictReader(csvfile) dict_list = [row for row in reader] return dict_list except FileNotFoundError: return \\"Error: The file was not found.\\" except IOError: return \\"Error: An IO error occurred while accessing the file.\\""},{"question":"Write a python function to return the bottom right minimum value of a non-empty 2D list (matrix).","solution":"def bottom_right_min(matrix): Returns the minimum value of the bottom-right element in a non-empty 2D list (matrix). if not matrix or not matrix[0]: return None bottom = matrix[-1] bottom_right_min_value = min(bottom) return bottom_right_min_value"},{"question":"Write a python function to implement the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a weighted graph. The function should take the adjacency matrix of the graph as input and return the shortest path matrix.","solution":"def floyd_warshall(adjacency_matrix): Implements the Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices in a weighted graph. Parameters: adjacency_matrix (list of list of ints): The adjacency matrix of the graph. Returns: list of list of ints: The shortest path matrix. # Number of vertices in the graph V = len(adjacency_matrix) # Initialize the solution matrix same as input graph matrix as a first step dist = [list(row) for row in adjacency_matrix] # Add all vertices one by one to the set of intermediate vertices. for k in range(V): # Pick all vertices as source one by one for i in range(V): # Pick all vertices as destination for the above-picked source for j in range(V): # If vertex k is on the shortest path from i to j, then update the value of dist[i][j] if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist"},{"question":"Write a python function to find common elements in two tuples.","solution":"def find_common_elements(tuple1, tuple2): Returns a tuple containing common elements in the two input tuples. return tuple(set(tuple1) & set(tuple2))"},{"question":"Write a python function to check if a given string has all unique characters, considering case sensitivity and special characters. You cannot use any additional data structures like arrays, sets, or dictionaries.","solution":"def has_all_unique_characters(s): Returns True if the string has all unique characters, else False. Considers case sensitivity and special characters. # Sort the string to bring duplicate characters together sorted_s = ''.join(sorted(s)) # Check for consecutive duplicates in sorted string for i in range(len(sorted_s) - 1): if sorted_s[i] == sorted_s[i + 1]: return False return True"},{"question":"Write a python function to check if a given number is a perfect square. Here is a simple test case","solution":"import math def is_perfect_square(num): Check if a given number is a perfect square. Parameters: num (int): The number to check. Returns: bool: True if num is a perfect square, False otherwise. if num < 0: return False sqrt_num = int(math.sqrt(num)) return sqrt_num * sqrt_num == num"},{"question":"Write a python function to solve the equation (ax^2 + bx + c = 0).","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Returns a tuple of solutions. Uses complex numbers to handle cases with non-real solutions. if a == 0: raise ValueError('Coefficient a cannot be 0') # Calculate the discriminant discriminant = b**2 - 4*a*c # Calculate the two solutions x1 = (-b + cmath.sqrt(discriminant)) / (2 * a) x2 = (-b - cmath.sqrt(discriminant)) / (2 * a) return (x1, x2)"},{"question":"Write a python function to sort a list of integers in descending order. The function should take a single input: a list of integers. The function should return the sorted list. If the list is empty or contains only one element, return the list as is. For example, given the list [4, 3, 2, 1], the function should return [4, 3, 2, 1].","solution":"def sort_descending(lst): Sorts a list of integers in descending order. Args: lst (list): A list of integers. Returns: list: The sorted list in descending order. if len(lst) <= 1: return lst else: return sorted(lst, reverse=True)"},{"question":"Write a python function to return the area of a circle. The function should take the radius as input and return the calculated area.","solution":"import math def circle_area(radius): Calculate the area of a circle given its radius. :param radius: The radius of the circle. :type radius: float :return: The area of the circle. :rtype: float if radius < 0: raise ValueError(\\"Radius cannot be negative.\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to implement a divide and conquer approach to solve a problem efficiently. For this problem, let's say we want to find the index of an element x in a sorted array using the binary search algorithm.","solution":"def binary_search(arr, x): Implements the binary search algorithm to find the index of element x in a sorted array arr. Returns the index of x if it is present in arr, else returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == x: return mid elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to determine if a string contains _only_ English letters, _a maximum of two consecutive vowels_, and _no spaces_. For example, 'abcde' should pass the test, but 'abc de' should not.","solution":"def is_valid_string(s): Determines if a string contains only English letters, a maximum of two consecutive vowels, and no spaces. # Check for English letters and no spaces if not s.isalpha(): return False # Define vowels vowels = set('AEIOUaeiou') # Check for consecutive vowels consecutive_vowel_count = 0 max_consecutive_vowels = 2 for char in s: if char in vowels: consecutive_vowel_count += 1 if consecutive_vowel_count > max_consecutive_vowels: return False else: consecutive_vowel_count = 0 return True"},{"question":"Write a python function to check if a given number is anAlphaNumeric","solution":"def is_alphanumeric(s): Check if the input string s is alphanumeric. Parameters: s (str): The string to be checked. Returns: bool: True if s is alphanumeric, False otherwise. return s.isalnum()"},{"question":"Write a python function to find the maximum element in an array using a for loop.","solution":"def find_maximum(arr): Returns the maximum element in the given array. Parameters: arr (list): A list of numbers. Returns: int/float: The maximum number in the array. Returns None if the array is empty. if not arr: return None max_element = arr[0] for num in arr: if num > max_element: max_element = num return max_element"},{"question":"Write a python function to find the maximum sum of subarray in a given list. The function should return the maximum sum. The list can contain negative numbers.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in the given list. Parameters: arr (list): List of integers that may contain negative numbers. Returns: int: Maximum sum of any subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the sum of all positive integers less than a given number n.","solution":"def sum_of_positives_below(n): Returns the sum of all positive integers less than n. return sum(range(n))"},{"question":"Write a python function to reverse a given string. You should not use any built-in string methods. The function should work for any length of the string.","solution":"def reverse_string(s): Reverses the given string without using built-in string reverse methods. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to solve the following problem: Given an array of integers, find the contiguous subarray (containing at least one number) which has the largest product and return its product. For example, given the array [2,3,-2,4], the largest product subarray is [2,3] with a product of 6.","solution":"def max_product_subarray(nums): Returns the largest product of a contiguous subarray. Parameters: nums (List[int]): List of integers Returns: int: The largest product of a contiguous subarray if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a python function to calculate the factorial of a number using recursion. Your function should take two parameters: \`n\` (the number to calculate factorial for) and \`limit\` (the maximum value of \`n\` for which the factorial is to be calculated).","solution":"def factorial(n, limit): Calculate the factorial of n using recursion with a limit check. If n exceeds limit, return -1. Parameters: n (int): The number to calculate the factorial for. limit (int): The maximum value of n for which the factorial is to be calculated. Returns: int: The factorial of n, or -1 if n exceeds limit. if n > limit: return -1 if n == 0 or n == 1: return 1 return n * factorial(n - 1, limit)"},{"question":"Write a python function to find the median of a list of numbers. If the list has an even number of elements, return the average of the two middle numbers.","solution":"def find_median(nums): Returns the median of a list of numbers. If the list has an even number of elements, the median is the average of the two middle numbers. nums = sorted(nums) n = len(nums) if n % 2 == 1: return nums[n // 2] else: return (nums[n // 2 - 1] + nums[n // 2]) / 2"},{"question":"Write a python function to merge two lists and eliminate duplicate elements, maintaining the original order of the first occurrence of each element.","solution":"def merge_and_deduplicate(list1, list2): Merges two lists and eliminates duplicate elements, maintaining the original order of the first occurrence of each element. Args: list1: First list. list2: Second list. Returns: A new list with merged elements without duplicates, maintaining the order of their first occurrence. result = [] seen = set() for element in list1 + list2: if element not in seen: seen.add(element) result.append(element) return result"},{"question":"Write a python function to insert a given string at the beginning of each line in a string. This function should take two parameters: the first is a string that will be inserted at the beginning of each line, and the second is the original string whose lines are to be prepended. The function should return the modified string.","solution":"def insert_at_beginning_of_each_line(insert_str, original_str): Inserts a given string at the beginning of each line in the original string. Args: insert_str (str): The string to insert at the beginning of each line. original_str (str): The original string whose lines are to be prepended. Returns: str: The modified string with insert_str at the beginning of each line. lines = original_str.split('n') modified_lines = [insert_str + line for line in lines] return 'n'.join(modified_lines)"},{"question":"Write a python function to find the maximum sum of a non-empty subarray of a 1D array of integers. The function should return the maximum sum found.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a non-empty subarray of the given list of integers. :param nums: List[int] - the list of integers :return: int - the maximum sum of any non-empty subarray if not nums: raise ValueError(\\"The input array must not be empty\\") current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the number of digits in a number using a loop.","solution":"def count_digits(n): Returns the number of digits in the integer n using a loop. if n < 0: n = -n if n == 0: return 1 count = 0 while n > 0: n //= 10 count += 1 return count"},{"question":"Write a python function to validate a decimal number.","solution":"import re def validate_decimal(number_str): Validates if the given string is a decimal number. A valid decimal number can optionally start with a sign (+/-), can be an integer with or without a fractional part, or just a fractional part starting with a dot. Args: number_str (str): The string to validate. Returns: bool: True if the string is a valid decimal number, False otherwise. pattern = r'^[+-]?(d+(.d*)?|.d+)' return bool(re.match(pattern, number_str))"},{"question":"Write a python function to determine whether there are three different numbers in the list that add up to the goal value. If there are, return the indices of these three numbers.","solution":"def three_sum_indices(nums, target): Returns a list of indices of three different numbers in nums that add up to the target. If no such three numbers exist, returns an empty list. nums_length = len(nums) # Iterate over each combination of three indices for i in range(nums_length - 2): for j in range(i + 1, nums_length - 1): for k in range(j + 1, nums_length): if nums[i] + nums[j] + nums[k] == target: return [i, j, k] return []"},{"question":"Write a python function to find all the prime numbers in a range of given numbers. For example, for a range from 10 to 20, the function should return [11, 13, 17, 19]. You can use a helper function to check if a number is prime or not.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(start, end): Returns a list of prime numbers in the given range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to scrape a website for product prices and store them in a dictionary. The website contains products listed in a table with columns for product name and price. You should make sure to handle exceptions for cases where the website structure might change or the data may not be present.","solution":"import requests from bs4 import BeautifulSoup def scrape_product_prices(url): Scrapes the given website for product prices and stores them in a dictionary. Expects the website to have a table with product names and prices. Handles exceptions for cases where the website structure might change or data may not be present. Parameters: url (str): The URL of the website to scrape. Returns: dict: A dictionary where keys are product names and values are prices. product_prices = {} try: response = requests.get(url) response.raise_for_status() # Raises an HTTPError if the HTTP request returned an unsuccessful status code. soup = BeautifulSoup(response.text, 'html.parser') # Try to find the table table = soup.find('table') if not table: raise ValueError('No table found on the provided URL.') rows = table.find_all('tr') for row in rows[1:]: # Skip the header row by starting from the second row cols = row.find_all('td') if len(cols) >= 2: product_name = cols[0].get_text(strip=True) product_price = cols[1].get_text(strip=True) product_prices[product_name] = product_price except requests.RequestException as e: # Handle network errors print(f\\"Network error occurred: {e}\\") except ValueError as e: # Handle value errors such as not finding a table print(f\\"Value error: {e}\\") return product_prices"},{"question":"Write a python function to determine if a given string has all distinct characters.","solution":"def has_all_distinct_characters(s): Determines if a given string has all distinct characters. Parameters: s (str): The string to check. Returns: bool: True if all characters in the string are unique, False otherwise. return len(set(s)) == len(s)"},{"question":"Write a python function to calculate Fibonacci numbers using memoization to optimize the solution. Memoization is a technique where the intermediate results of a function are stored so that the same calculations do not have to be redone when the same inputs occur again. The Fibonacci sequence is defined by the recurrence relation where F(n) = F(n-1) + F(n-2), with F(0) = 0 and F(1) = 1.","solution":"def fibonacci(n, memo=None): Calculate the nth Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to calculate the sum of integers in a list, but ignore any string values.","solution":"def sum_integers(lst): Returns the sum of integers in the list, ignoring any string values. return sum(x for x in lst if isinstance(x, int))"},{"question":"Write a python function to check if a string \\"s\\" is a palindrome ignore case and spaces. For example, \\"A man a plan a canal Panama\\" should return True.","solution":"def is_palindrome(s: str) -> bool: Check if the provided string is a palindrome, ignoring case and spaces. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove white spaces and convert to lower case filtered_s = ''.join(c.lower() for c in s if c.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Write a python function to reverse the strings in a given list of strings. For example, given the list \`[\\"hello\\", \\"world\\"]\`, the function should return \`[\\"olleh\\", \\"dlrow\\"]\`.","solution":"def reverse_strings(string_list): Reverses each string in the given list of strings. :param string_list: List of strings to be reversed. :return: List of reversed strings. return [s[::-1] for s in string_list]"},{"question":"Write a python function to determine a list of n integers that the sum of the squares of the two smallest numbers is equal to the square of the largest number. The function should return \`True\` if such a list exists, otherwise return \`False\`.","solution":"def check_sum_of_squares(nums): Determines if there exists a list of n integers such that the sum of the squares of the two smallest numbers is equal to the square of the largest number. Args: nums (list): List of integers Returns: bool: True if condition is met, otherwise False if len(nums) < 3: return False sorted_nums = sorted(nums) smallest, second_smallest, largest = sorted_nums[0], sorted_nums[1], sorted_nums[-1] # Calculate sum of squares of the two smallest numbers and square of the largest number sum_of_squares = smallest**2 + second_smallest**2 largest_square = largest**2 return sum_of_squares == largest_square"},{"question":"Write a python function to create a list with unique elements from the provided list while maintaining the original order. How can I achieve this in Python?","solution":"def unique_elements(original_list): Returns a list with unique elements while maintaining the original order. Parameters: original_list (list): The list from which to extract unique elements. Returns: list: A list with unique elements in the order they first appear in the original list. seen = set() unique_list = [] for item in original_list: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a python function to find the most common word in a given sentence and return the word and its count.","solution":"from collections import Counter import re def most_common_word(sentence): Returns the most common word in a given sentence and its count. words = re.findall(r'bw+b', sentence.lower()) word_counts = Counter(words) if not word_counts: return None, 0 most_common = word_counts.most_common(1)[0] return most_common"},{"question":"Write a python function to sort an array in ascending order using bubble sort, selection sort and insertion sort. Each sorting algorithm should be a separate function in the code. Here is a basic code for bubble sort, but you need to complete it for selection sort and insertion sort.","solution":"def bubble_sort(arr): Returns a sorted array using bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def selection_sort(arr): Returns a sorted array using selection sort algorithm. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr def insertion_sort(arr): Returns a sorted array using insertion sort algorithm. n = len(arr) for i in range(1, n): key = arr[i] j = i-1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to check if the square root of a number is an integer. The function should take a non-negative integer as input and return True if the square root is an integer, and False otherwise.","solution":"import math def is_square_root_integer(n): Returns True if the square root of n is an integer, otherwise False. if n < 0: raise ValueError(\\"The input must be a non-negative integer\\") sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a python function to get a all files and their subdirectories in a given directory. You can use os.walk() function which returns three values at a time- root, directories and files.","solution":"import os def get_all_files(directory): Returns a list of all files and their paths in a given directory and its subdirectories. :param directory: Path of the directory to scan :return: List of file paths file_list = [] for root, dirs, files in os.walk(directory): for file in files: file_list.append(os.path.join(root, file)) return file_list"},{"question":"Write a python function to remove duplicates from a list of numbers. The function should return a new list containing only unique numbers.","solution":"def remove_duplicates(numbers): Returns a list containing only unique numbers from the input list. return list(set(numbers))"},{"question":"Write a python function to detect a cycle in a singly linked list using Floyd's Tortoise and Hare algorithm.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def has_cycle(head): Detects if a cycle exists in the linked list using Floyd's Tortoise and Hare algorithm. :param head: ListNode, the head of the singly linked list :return: bool, True if a cycle exists, otherwise False if not head or not head.next: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Write a python function to find the minimum element in an array. The array is sorted in ascending order, but it may contain duplicates. The function should be efficient, ideally using binary search. Identify the edge case and provide optimal code.","solution":"def find_minimum_in_sorted_array_with_duplicates(arr): This function finds the minimum element in a sorted array which may contain duplicates. if not arr: raise ValueError(\\"Array should not be empty\\") left, right = 0, len(arr) - 1 while left < right: mid = left + (right - left) // 2 if arr[mid] > arr[right]: left = mid + 1 elif arr[mid] < arr[right]: right = mid else: # arr[mid] == arr[right] right -= 1 return arr[left]"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. Also, write a test function to verify its correctness.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones. The sequence starts as 0, 1, 1, 2, 3, 5, ... if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to convert an integer to a Roman numeral. The function should handle all cases including negative numbers, zero, and positive numbers, but since Roman numerals are typically used for positive integers, consider only negative numbers as invalid and only handle positive integers.","solution":"def int_to_roman(num): if num <= 0: return \\"Invalid input\\" val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' for i in range(len(val)): while num >= val[i]: num -= val[i] roman_num += syb[i] return roman_num"},{"question":"Write a python function to find the first pair of numbers in an array that add up to a given sum. If no pair is found, the function should return None.","solution":"def find_pair_with_sum(arr, target_sum): Finds the first pair of numbers in \`arr\` that add up to \`target_sum\`. If no pair is found, returns None. :param arr: List of integers. :param target_sum: Integer representing the target sum. :return: Tuple of two integers representing the first pair found that adds up to \`target_sum\`, or None if no such pair is found. seen = set() for num in arr: complement = target_sum - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"Write a python function to find the maximum number of unique elements in a list by removing at most one element.","solution":"def max_unique_elements(lst): Returns the maximum number of unique elements in the list by removing at most one element. from collections import Counter element_count = Counter(lst) unique_elements = len(element_count) # If already all elements are unique if all(value == 1 for value in element_count.values()): return unique_elements # Try removing each element one at a time and count unique elements max_unique = unique_elements for key in element_count: if element_count[key] > 1: max_unique = max(max_unique, unique_elements - 1) else: max_unique = max(max_unique, unique_elements) return max_unique"},{"question":"Write a python function to remove duplicates from a list of integers maintaining the original order of appearance.","solution":"def remove_duplicates(lst): Removes duplicates from a list of integers while maintaining the original order of appearance. :param lst: List of integers :return: List of integers with duplicates removed seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to return the smallest integer that can be formed by concatenating the digits of the given integer n.","solution":"def smallest_integer(n): Returns the smallest integer that can be formed by concatenating the digits of the given integer n. # Convert integer to a list of its digits digits = list(str(abs(n))) # Use abs to handle negative numbers gracefully # Sort the digits in ascending order digits.sort() # Concatenate the sorted digits to form the smallest integer smallest_number = int(\\"\\".join(digits)) return smallest_number"},{"question":"Write a python function to calculate the sum of all elements in a dictionary. The dictionary contains integers as values. Key can be anything but the values are integers.","solution":"def sum_of_dict_values(d): Returns the sum of all integer values in the dictionary \`d\`. return sum(d.values())"},{"question":"Write a python function to find the maximum product of numbers from a given list, but considering each pair of numbers in the list. The function should return the maximum product of any two distinct numbers in the list.","solution":"def max_product_of_pairs(nums): Returns the maximum product of any two distinct numbers in the list. if len(nums) < 2: raise ValueError(\\"At least two numbers are required\\") nums.sort(reverse=True) return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a python function to find the longest common prefix string amon an array of strings. **Input:** strs = [\\"flower\\",\\"flow\\",\\"flight\\"] **Expected Output:** \\"fl\\"","solution":"def longest_common_prefix(strs): Finds the longest common prefix string among an array of strings. :param strs: List of strings :return: The longest common prefix string if not strs: return \\"\\" # Start by assuming the entire first string is the common prefix prefix = strs[0] # Compare the assumed prefix with each subsequent string for string in strs[1:]: while string[:len(prefix)] != prefix: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Write a python function to find the maximum of four numbers.","solution":"def max_of_four(a, b, c, d): Returns the maximum of four numbers. return max(a, b, c, d)"},{"question":"Write a python function to calculate and return the nth Fibonacci number using recursion. However, to optimize it, use memoization (caching the results of expensive function calls and reusing them when the same inputs occur again).","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion and memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 result = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) memo[n] = result return result"},{"question":"Write a python function to count the number of collections in a given dictionary, where a collection is defined as a key with a value that is either an empty list or an empty dictionary.","solution":"def count_collections(data): Returns the number of collections in the given dictionary, where a collection is defined as a key with a value that is either an empty list or an empty dictionary. return sum(1 for value in data.values() if value == [] or value == {})"},{"question":"Write a python function to find all perfect squares under a given number n.","solution":"def perfect_squares(n): Returns a list of all perfect squares less than n. squares = [] i = 1 while i * i < n: squares.append(i * i) i += 1 return squares"},{"question":"Write a python function to check if a binary number is divisible by 3.","solution":"def is_binary_divisible_by_3(binary_num): Checks if a binary number (given as a string) is divisible by 3. :param binary_num: A string representing a binary number. :return: True if the binary number is divisible by 3, False otherwise. if not all(char in '01' for char in binary_num): raise ValueError(\\"Input must be a binary number\\") decimal_num = int(binary_num, 2) return decimal_num % 3 == 0"},{"question":"Write a python function to find the second largest element in an array of integers. The function should handle cases where the array may contain duplicate elements and should return the correct second largest element even if the largest element appears multiple times. If the array has less than 2 unique elements, the function should return \`None\` as there is no second largest element.","solution":"def second_largest(arr): Returns the second largest element in the array. If there are less than 2 unique elements, returns None. unique_elements = list(set(arr)) if len(unique_elements) < 2: return None unique_elements.sort() return unique_elements[-2]"},{"question":"Write a python function to count the number of elements with a unique value in an array of integers.","solution":"def count_unique_elements(arr): Returns the count of elements with a unique value in an array. Parameters: arr: List[int] - list of integers Returns: int - count of unique elements in the array from collections import Counter element_counts = Counter(arr) unique_count = sum(1 for count in element_counts.values() if count == 1) return unique_count"},{"question":"Write a python function to solve the Josephus problem using the principles of recursion. The Josephus problem is a theoretical problem related to a certain elimination game. People are standing in a circle waiting to be executed. Starting from the first person, every second person is eliminated until only one person remains. The goal is to find the order in which people are eliminated and the last person standing.","solution":"def josephus(n, k): Solves the Josephus problem using recursion. Args: n (int): The number of people in the circle. k (int): The step count for elimination (every k-th person is eliminated). Returns: int: The position of the last person remaining (1-indexed). if n == 1: return 1 else: return (josephus(n - 1, k) + k-1) % n + 1"},{"question":"Write a python function to return the maximum occurring character in a given string. The input string may contain up to 10^6 characters. What are some strategies to handle such large strings efficiently?","solution":"def max_occuring_char(s: str) -> str: Returns the maximum occurring character in the given string. If there are multiple characters with the same maximum frequency, it returns the lexicographically smallest character. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Find the character with the maximum frequency max_char = max(freq, key=lambda k: (freq[k], -ord(k))) return max_char"},{"question":"Write a python function to reverse all strings in a list. The function should take a list of strings as input and return a new list where each string is reversed.","solution":"def reverse_strings(strings): Takes a list of strings and returns a new list where each string is reversed. Parameters: strings (list of str): A list of strings to be reversed. Returns: list of str: A list where each string from the input list is reversed. return [s[::-1] for s in strings]"},{"question":"Write a python function to count the occurrences of a character in a string using recursion.","solution":"def count_char_recursively(s, char): Returns the number of occurrences of the character \`char\` in the string \`s\` using recursion. if not s: return 0 # Check if the first character matches \`char\` and make a recursive call to the rest of the string return (1 if s[0] == char else 0) + count_char_recursively(s[1:], char)"},{"question":"Write a python function to validate if a string is a URL and then fetch the domain and top-level domain (TLD). If the string is not a valid URL, raise an exception. Additionally, your function should handle multiple URL formats correctly, including but not limited to http, https, www. prefixes, and paths or query strings.","solution":"import re from urllib.parse import urlparse def extract_domain_and_tld(url): Validates a URL string and returns the domain and TLD. If the URL is invalid, raises a ValueError. # Regex to validate the URL regex = re.compile( r'^(?:http|ftp)s?://' # http:// or https:// or ftp:// r'(?P<domain>[w.-]+)' r'(?:.[w.-]+)*' r'(?P<tld>.[a-zA-Z]{2,6})' r'(?::d+)?' # optional port r'(?:/?|[/?]S+)', re.IGNORECASE) if re.match(regex, url) is None: raise ValueError(\\"Invalid URL\\") parsed_url = urlparse(url) domain = parsed_url.hostname tld = '.' + domain.split('.')[-1] return domain, tld"},{"question":"Write a python function to reverse a list of integers in-place without using extra space, and also, write a twist version of the function where you reverse every third element in the list.","solution":"def reverse_list(lst): Reverses the list in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst def reverse_every_third_element(lst): Reverses the position of every third element in the list. length = len(lst) for i in range(0, length-2, 3): lst[i], lst[i+2] = lst[i+2], lst[i] return lst"},{"question":"Write a python function to implement the quick sort algorithm. Your function should take an array as input and returns the sorted array.","solution":"def quick_sort(arr): Implements the quick sort algorithm. :param arr: List of elements to be sorted :return: Sorted list of elements if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray of a given array. This problem is known as the \\"Maximum Subarray Problem\\". Use Kadane's Algorithm to solve this problem.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane's Algorithm. if not arr: return 0 max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to calculate the factorial of a number using recursion. The factorial of a number n, denoted by n!, is the product of all positive integers not greater than n. For instance, 5! = 5 * 4 * 3 * 2 * 1 = 120. The factorial of 0 is defined as 1. Please provide a Python function that uses recursion to calculate this.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. The factorial of n (denoted as n!) is the product of all positive integers not greater than n. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to generate and return a list of Fibonacci numbers less than a given number n.","solution":"def fibonacci_less_than(n): Generate and return a list of Fibonacci numbers less than the given number n. fib_list = [] a, b = 0, 1 while a < n: fib_list.append(a) a, b = b, a + b return fib_list"},{"question":"Write a python function to multiply two 2D matrices.","solution":"def multiply_matrices(mat1, mat2): Multiplies two 2D matrices and returns the resultant matrix. Parameters: mat1 (list of list of int/float): The first matrix. mat2 (list of list of int/float): The second matrix. Returns: list of list of int/float: The resultant matrix product of mat1 and mat2. # Number of rows and columns in the resultant matrix result_rows = len(mat1) result_cols = len(mat2[0]) common_dim = len(mat2) # Initializing the resultant matrix with zeros result = [[0 for _ in range(result_cols)] for _ in range(result_rows)] # Matrix multiplication for i in range(result_rows): for j in range(result_cols): for k in range(common_dim): result[i][j] += mat1[i][k] * mat2[k][j] return result"},{"question":"Write a python function to find the nth power of x, use the power() function. hint: Use the built-in Python function \`pow(x, n)\` where \`x\` is the base and \`n\` is the exponent.","solution":"def nth_power(x, n): Returns x raised to the power of n using the built-in pow function. :param x: base number :param n: exponent return pow(x, n)"},{"question":"Write a python function to find the closest value to a given target in an array of integers. If there are two numbers with the same minimum difference to the target, return the smallest of them.","solution":"def closest_value(arr, target): Returns the value from the array that is closest to the target. If there are two numbers with the same minimum difference to the target, the smallest of them is returned. best_val = None min_diff = float('inf') for num in arr: diff = abs(num - target) if diff < min_diff or (diff == min_diff and num < best_val): min_diff = diff best_val = num return best_val"},{"question":"Write a python function to solve the problem of finding the greatest common divisor (GCD) of two positive numbers a and b using the Euclidean algorithm. The function should return the GCD of the two numbers. If either a or b is not a positive integer, the function should return None.","solution":"def gcd(a, b): Returns the greatest common divisor of two positive integers a and b using the Euclidean algorithm. If either a or b is not a positive integer, returns None. if not (isinstance(a, int) and isinstance(b, int)) or a <= 0 or b <= 0: return None while b: a, b = b, a % b return a"},{"question":"Write a python function to create a chess board with a size n x n and place a queen at a specific position. The function should return the chess board with the queen marked. The chess board should be represented as a 2D list where each cell is either '0' (empty) or 'Q' (queen).","solution":"def create_chess_board(n, queen_row, queen_col): Creates an n x n chess board with a queen placed at the specified position (queen_row, queen_col). Args: n (int): Size of the chess board. queen_row (int): The row position of the queen (0-indexed). queen_col (int): The column position of the queen (0-indexed). Returns: list: A 2D list representing the chess board with '0' for empty squares and 'Q' for the queen. # Create an empty n x n board filled with '0' board = [['0' for _ in range(n)] for _ in range(n)] # Place the queen at the specified position board[queen_row][queen_col] = 'Q' return board"},{"question":"Write a python function to check if a list is a palindrome. In a palindrome, the order of elements in the list is the same from left to right and right to left.","solution":"def is_palindrome(lst): Checks if a list is a palindrome. Parameters: lst (list): The list to check. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a python function to return the string 'your code is working' when it's called.","solution":"def check_code(): Returns the string 'your code is working' return 'your code is working'"},{"question":"Write a python function to calculate the sum of the first N natural numbers and then find the common sum when you add up the sums of the first N natural numbers for the first M terms. That is, calculate ((1+2+3+...+N) + (1+2+3+...+(N+1)) + (1+2+3+...+(N+2)) + ... + (1+2+3+...+(N+M-1)) + (1+2+3+...+(N+M))).","solution":"def sum_of_first_n_natural_numbers(n): Returns the sum of the first n natural numbers. return n * (n + 1) // 2 def common_sum(N, M): Returns the common sum when you add up the sums of the first N natural numbers for the first M terms. total_sum = 0 for i in range(M): total_sum += sum_of_first_n_natural_numbers(N + i) return total_sum"},{"question":"Write a python function to find the two numbers in an array that add up to a specific target number. Your function should return the indices of the two numbers in the array. If no two numbers add up to the target, return None.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the array that add up to the target. Parameters: nums (list): A list of integers. target (int): The target sum. Returns: list: A list containing the indices of the two numbers that add up to the target. None: If no two numbers add up to the target. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i return None"},{"question":"Write a python function to calculate the product of two numbers and return their result. The function should also handle cases where the inputs are not numbers and raise an appropriate error message.","solution":"def multiply(a, b): Returns the product of a and b. Raises a TypeError if inputs are not numbers. if not (isinstance(a, (int, float)) and isinstance(b, (int, float))): raise TypeError(\\"Both inputs must be numbers.\\") return a * b"},{"question":"Write a python function to generate all possible sequences where a given number n can be represented as a sum of distinct numbers. For example, if n is 4, the function should return [[1, 4], [2, 2], [1, 2, 1]].","solution":"def generate_sequences(n): Generate all possible sequences where the given number n can be represented as a sum of distinct numbers. Args: n (int) : The number to be represented as a sum of distinct numbers. Returns: List[List[int]]: A list of lists where each inner list is a sequence representing n. def backtrack(start, target, path, res): if target == 0: res.append(path.copy()) return for i in range(start, n+1): if i > target: break path.append(i) backtrack(i + 1, target - i, path, res) path.pop() result = [] backtrack(1, n, [], result) return result"},{"question":"Write a python function to find and return the set of all unique triplets in the array which gives the sum of zero.","solution":"def three_sum(nums): Find all unique triplets in the array that sum up to zero. :param nums: List of integers :return: List of unique triplets that sum up to zero nums.sort() result = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: summation = nums[i] + nums[left] + nums[right] if summation < 0: left += 1 elif summation > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Write a python function to count the number of valid substrings in a given string. A valid substring is one where all characters are the same. For example, in the string \\"aaaabbbcc\\", the valid substrings are \\"aaaa\\", \\"bb\\", and \\"cc\\".","solution":"def count_valid_substrings(s): Counts the number of valid substrings in a given string. A valid substring is one where all characters are the same. Args: - s (str): The input string. Returns: - int: The count of valid substrings where all characters are the same. count = 0 i = 0 while i < len(s): start = i while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 i += 1 return count"},{"question":"Write a python function to compute the factorial of a number using recursion and also provide a wrapping function that uses memoization to optimize the recursive factorial calculation.","solution":"def factorial_recursive(n): Computes the factorial of a number using recursion. if n <= 1: return 1 else: return n * factorial_recursive(n - 1) def factorial_memoized(): Returns the factorial function with memoization. memo = {} def helper(n): if n in memo: return memo[n] if n <= 1: memo[n] = 1 else: memo[n] = n * helper(n - 1) return memo[n] return helper"},{"question":"Write a python function to find the smallest Google Site Search result index of a specific phrase. Google Site Search API requires API key and is not covered in this question. However, assume you have already obtained an API key. The function should take a search phrase and return the index of the first result that matches the phrase. If no results match the phrase, return None.","solution":"import requests def find_smallest_index(api_key, cx, query, phrase): Find the smallest Google Site Search result index of a specific phrase. :param api_key: API key for Google Site Search :param cx: Custom Search Engine ID :param query: The search query :param phrase: The specific phrase to match :return: The index of the first result that matches the phrase or None if no match is found url = f'https://www.googleapis.com/customsearch/v1?key={api_key}&cx={cx}&q={query}' response = requests.get(url) results = response.json().get('items', []) for index, item in enumerate(results): if phrase in item.get('snippet', '') or phrase in item.get('title', ''): return index return None"},{"question":"Write a python function to check if an input number is a Narcissistic number (or Armstrong number). A Narcissistic number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself.","solution":"def is_narcissistic_number(number): Check if the given number is a Narcissistic (Armstrong) number. A Narcissistic number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself. Args: - number (int): The number to check. Returns: - bool: True if the number is a Narcissistic number, False otherwise. if number < 100 or number > 999: return False digits = [int(d) for d in str(number)] sum_of_cubes = sum(d ** 3 for d in digits) return sum_of_cubes == number"},{"question":"Write a python function to convert a given string to a snake case string. Snake case is when all words in a string are lowercase and connected by underscores.","solution":"import re def to_snake_case(s): Convert the provided string to snake_case. Parameters: s (str): The string to be converted to snake_case. Returns: str: The string in snake_case. s = s.strip() s = re.sub(r'[s]+', '_', s) s = re.sub(r'[^a-zA-Z0-9_]', '', s) return s.lower()"},{"question":"Write a python function to find the maximum palindrome in a string. A palindrome is a string that reads the same forwards and backwards. For example, \\"radar\\" is a palindrome.","solution":"def find_max_palindrome(s): Returns the maximum palindrome substring in the given string \`s\`. n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Check for even length palindrome low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a python function to generate a list of all possible binary sequences of a given length.","solution":"def generate_binary_sequences(n): Generates a list of all possible binary sequences of length n. :param n: Length of the binary sequences. :return: List of binary sequences. if n < 0: raise ValueError(\\"Length of the binary sequences cannot be negative.\\") if n == 0: return [''] result = [] def helper(s, length): if length == 0: result.append(s) return helper(s + '0', length - 1) helper(s + '1', length - 1) helper('', n) return result"},{"question":"Write a python function to find the maximum and minimum numbers in a list. The function should return a tuple with the maximum number as the first element and the minimum number as the second element.","solution":"def find_max_min(lst): Returns a tuple containing the maximum and minimum number in the list. If the list is empty, returns (None, None). if not lst: return (None, None) max_num = max(lst) min_num = min(lst) return (max_num, min_num)"},{"question":"Write a python function to implement a queue using a list. The function should support enqueue, dequeue, and isEmpty operations.","solution":"class Queue: def __init__(self): Initializes an empty queue. self.queue = [] def enqueue(self, item): Adds an item to the end of the queue. self.queue.append(item) def dequeue(self): Removes and returns the item from the front of the queue. If the queue is empty, raises an IndexError. if self.isEmpty(): raise IndexError(\\"dequeue from an empty queue\\") return self.queue.pop(0) def isEmpty(self): Returns True if the queue is empty, False otherwise. return len(self.queue) == 0"},{"question":"Write a python function to compare two strings and return the one with the greater number of characters. If both strings have the same number of characters, return \\"Both strings are equal in length.\\"","solution":"def compare_strings(s1, s2): Compares two strings by their length and returns the string with greater number of characters. If both strings have the same number of characters, returns \\"Both strings are equal in length.\\" if len(s1) > len(s2): return s1 elif len(s1) < len(s2): return s2 else: return \\"Both strings are equal in length.\\""},{"question":"Write a python function to find the maximum voltage given a list of voltages. The function should return the maximum voltage in the list.","solution":"def max_voltage(voltages): Returns the maximum voltage in the list of voltages. Parameters: voltages (list of float): A list of voltage values Returns: float: The maximum voltage in the list if not voltages: raise ValueError(\\"The list of voltages is empty\\") return max(voltages)"},{"question":"Write a python function to find two numbers in a list that add up to a given target","solution":"def two_sum(nums, target): Find two numbers in the list that add up to the target. Args: nums: List of integers. target: Integer target sum. Returns: A tuple of two integers that add up to the target. If no such numbers exist, return None. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return (complement, num) lookup[num] = i return None"},{"question":"Write a python function to sum the first n natural numbers. You need to handle potential errors such as non-integer inputs and negative inputs.","solution":"def sum_first_n_numbers(n): Returns the sum of the first n natural numbers. Handles non-integer and negative inputs by raising ValueError. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return n * (n + 1) // 2"},{"question":"Write a python function to find all prime numbers less than \`n\` using the prime number theorem. How can we make this more efficient compared to simply checking each number for primality?","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to check if a given string is a palindrome. Include a simple test to demonstrate its functionality.","solution":"def is_palindrome(s): Returns True if the given string \`s\` is a palindrome, otherwise False. A palindrome is a string that reads the same forward and backward. # removing non-alphanumeric characters and converting to lowercase cleaned = ''.join(char.lower() for char in s if char.isalnum()) return cleaned == cleaned[::-1]"},{"question":"Write a python function to find the largest number in a list using a loop.","solution":"def find_largest_number(numbers): Returns the largest number in the list. if not numbers: return None # Return None if the list is empty largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"question":"Write a python function to find the sum of the first n numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. For example, the first 5 numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.","solution":"def sum_first_n_fibonacci(n): Returns the sum of the first n numbers in the Fibonacci sequence. if n <= 0: return 0 elif n == 1: return 0 elif n == 2: return 1 fib_numbers = [0, 1] for _ in range(n - 2): fib_numbers.append(fib_numbers[-1] + fib_numbers[-2]) return sum(fib_numbers)"},{"question":"Write a python function to determine if a triangle is valid based on the lengths of its sides. The function should return a boolean value indicating whether the triangle is valid or not. A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side.","solution":"def is_valid_triangle(a, b, c): Determine if a triangle is valid based on the lengths of its sides. A triangle is valid if the sum of the lengths of any two sides is greater than the length of the third side. Parameters: a (int/float): Length of the first side b (int/float): Length of the second side c (int/float): Length of the third side Returns: bool: True if the triangle is valid, False otherwise return a + b > c and a + c > b and b + c > a"},{"question":"Write a python function to implement a breadth-first traversal of a graph using a queue.","solution":"from collections import deque def breadth_first_traversal(graph, start_node): Perform a breadth-first traversal of a graph starting from start_node. :param graph: A dictionary representing the adjacency list of the graph. :param start_node: The starting node for the breadth-first traversal. :return: A list of nodes in the order they were visited. visited = [] queue = deque([start_node]) while queue: node = queue.popleft() if node not in visited: visited.append(node) neighbors = graph[node] for neighbor in neighbors: if neighbor not in visited: queue.append(neighbor) return visited"},{"question":"Write a python function to find the value that is repeated the maximum number of times in a list.","solution":"from collections import Counter def most_frequent(nums): Returns the value that is repeated the maximum number of times in the given list. If there are multiple values with the same highest frequency, the function returns the first one encountered in the list. if not nums: return None count = Counter(nums) most_common_element, _ = count.most_common(1)[0] return most_common_element"},{"question":"Write a python function to find the length of the longest subsequence in a string which consists of the same character.","solution":"def longest_repeating_subsequence(s): Returns the length of the longest subsequence in a string which consists of the same character. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Check for the last sequence max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to extract a specific row using its index from a 2D list.","solution":"def extract_row(matrix, index): Returns the row at the specified index from a 2D list (matrix). Parameters: matrix (list of lists): A 2D list representing the matrix. index (int): The index of the row to be extracted. Returns: list: The row at the specified index. if index < 0 or index >= len(matrix): raise IndexError(\\"Index out of range\\") return matrix[index]"},{"question":"Write a python function to find the minimum element in a list and its index.","solution":"def find_min_element_and_index(lst): Returns the minimum element in the list and its index as a tuple. Args: lst (list): A list of elements. Returns: tuple: The minimum element and its index. if not lst: return None, -1 min_element = min(lst) min_index = lst.index(min_element) return min_element, min_index"},{"question":"Write a python function to find maximum and minimum numbers in a list with a single pass. In addition, the function should return their respective indices.","solution":"def find_max_min_with_indices(numbers): Returns the maximum and minimum numbers in a list along with their respective indices. if not numbers: return None, None, None, None max_val = min_val = numbers[0] max_index = min_index = 0 for index, number in enumerate(numbers): if number > max_val: max_val = number max_index = index if number < min_val: min_val = number min_index = index return max_val, max_index, min_val, min_index"},{"question":"Write a python function to find the nth Fibonacci number in a list of Fibonacci numbers.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"Write a python function to solve a linear equation. The function should accept three parameters: the coefficients of the linear equation in the form of (a, b, c) where the equation is ax + by = c. The function should return the solution as a tuple (x, y), or a string \\"No solution\\" if the equation has no solution, or \\"Infinite solutions\\" if there are infinite solutions.","solution":"def solve_linear_equation(a, b, c): Solves the linear equation ax + by = c for x and y. Parameters: - a, b, c: coefficients of the linear equation Returns: - A tuple (x, y) representing the solution if a unique solution exists - \\"No solution\\" if the equation has no solution - \\"Infinite solutions\\" if there are infinite solutions if a == 0 and b == 0: if c == 0: return \\"Infinite solutions\\" else: return \\"No solution\\" elif a == 0: x = 0 y = c / b elif b == 0: x = c / a y = 0 else: x = c / a y = (c - a * x) / b return (x, y)"},{"question":"Write a python function to find the second smallest element in a list. The function should handle cases where the list contains duplicates and return the second smallest unique element. If the list has less than two unique elements, the function should return None.","solution":"def second_smallest(nums): This function returns the second smallest unique element in the list nums. If there are less than two unique elements, it returns None. unique_nums = sorted(set(nums)) if len(unique_nums) < 2: return None return unique_nums[1]"},{"question":"Write a python function to implement a queue using two stacks. The function should support the following operations: enqueue, dequeue, and peek.","solution":"class QueueUsingTwoStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, item): self.stack1.append(item) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2.pop() else: return None def peek(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2[-1] else: return None"},{"question":"Write a python function to display each alphabet letter in a new line.","solution":"def display_alphabets(): Displays each alphabet letter in a new line. for letter in 'abcdefghijklmnopqrstuvwxyz': print(letter)"},{"question":"Write a python function to return the minimum number of coins required to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.","solution":"def coinChange(coins, amount): Returns the minimum number of coins required to make up the given amount. If the amount cannot be made up by any combination of the coins, returns -1. # Initialize DP array with amount + 1, which is an impossible high value dp = [amount + 1] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make the amount 0 # Iterate over each coin for coin in coins: # Update DP table for each amount from coin to target amount for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # If no combination found, return -1; otherwise, return the dp value for the amount return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"Write a python function to find the sum of all the numbers in a list. You should handle any exceptions that may arise during execution.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in a list. Parameters: numbers (list): A list containing numbers. Returns: int/float: Sum of all numbers in the list. Raises: ValueError: If 'numbers' contains non-numeric values. try: return sum(numbers) except TypeError: raise ValueError(\\"The list should only contain numbers.\\")"},{"question":"Write a python function to calculate the factorial of a number. Can you also explain the code?","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Factorial is defined as the product of all positive integers less than or equal to n. For n = 0, factorial is 1 by definition. :param n: non-negative integer whose factorial is to be computed :return: factorial of the input number n :raises: ValueError if n is a negative integer if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result # Explanation: # 1. The function checks if the input number \`n\` is negative and raises a ValueError if true. # 2. If \`n\` is 0, it returns 1 as 0! is defined to be 1. # 3. For positive values of \`n\`, it initializes a variable \`result\` to 1. # 4. It then iterates from 1 to \`n\` (inclusive) and multiplies the \`result\` with each loop variable \`i\`. # 5. Finally, it returns the computed factorial in \`result\`."},{"question":"Write a python function to flatten a nested dictionary to a flat dictionary where the keys are concatenated using dot notation. For example, given the nested dictionary \`{ 'a': 1, 'b': { 'c': 2, 'd': { 'e': 3 } } }\`, the output should be \`{ 'a': 1, 'b.c': 2, 'b.d.e': 3 }\`.","solution":"def flatten_dict(d, parent_key='', sep='.'): Flattens a nested dictionary where the keys are concatenated using dot notation. :param d: The dictionary to flatten. :param parent_key: The base key string used for recursive concatenation. :param sep: The separator used between keys. :return: A flattened dictionary. items = [] for k, v in d.items(): new_key = f'{parent_key}{sep}{k}' if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Write a python function to find the reverse of a string. The input string should be passed as a parameter to the function and the function should return the reverse of the string.","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to generate all unique permutations of a given list of numbers.","solution":"from itertools import permutations def unique_permutations(nums): Generate all unique permutations of a list of numbers. :param nums: List of integers. :return: List of unique permutations, where each permutation is represented as a tuple. return list(set(permutations(nums)))"},{"question":"Write a python function to find duplcate characters in a string. The function should return a set of duplicate characters.","solution":"def find_duplicate_characters(s): Returns a set of duplicate characters in the given string s. char_count = {} duplicates = set() for char in s: if char in char_count: char_count[char] += 1 duplicates.add(char) else: char_count[char] = 1 return duplicates"},{"question":"Write a python function to find the first character that appears more than once in the string s, return -1 if all characters are unique. For example, \\"abcdeabc\\" should return 'a', \\"abcdef\\" should return -1.","solution":"def first_repeated_char(s): Returns the first character that appears more than once in the string s, or -1 if all characters are unique. :param s: input string :return: first repeated character or -1 seen_chars = set() for char in s: if char in seen_chars: return char seen_chars.add(char) return -1"},{"question":"Write a python function to print all the prime numbers up to a given number using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of all primes up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes"},{"question":"Write a python function to find the maximum sum of a subarray using the sliding window technique. Provide a detailed explanation of your solution and answer the user quickly.","solution":"def max_subarray_sum(nums, k): Finds the maximum sum of a subarray with length k using the sliding window technique. :param nums: List of integers :param k: Length of the subarray :return: Maximum sum of the subarray with length k if len(nums) < k or k <= 0: return 0 max_sum = current_sum = sum(nums[:k]) for i in range(k, len(nums)): current_sum = current_sum + nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the sum of all even numbers in the range from a to b (both inclusive).","solution":"def sum_even_numbers(a, b): Returns the sum of all even numbers in the range from a to b (both inclusive). total_sum = 0 for number in range(a, b+1): if number % 2 == 0: total_sum += number return total_sum"},{"question":"Write a python function to retrieve all the prime numbers in a given range.","solution":"def primes_in_range(start, end): Returns a list of prime numbers in the given range from start to end (inclusive). def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True return [n for n in range(start, end + 1) if is_prime(n)]"},{"question":"Write a python function to create a list of all prime numbers in a given range. The function should accept two arguments: the lower and upper limits of the range. The function should return a list of all prime numbers in the range.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_in_range(lower, upper): Returns a list of all prime numbers in the range [lower, upper]. return [num for num in range(lower, upper + 1) if is_prime(num)]"},{"question":"Write a python function to sort a list of names in ascending order. The function should also handle names with apostrophes and special characters, ensuring they are sorted correctly.","solution":"def sort_names(names): Sorts a list of names in ascending order, correctly handling names with apostrophes and special characters. :param names: List of names to be sorted :type names: list of str :return: Sorted list of names :rtype: list of str return sorted(names)"},{"question":"Write a python function to calculate the number of days in a month given the month and year. For a leap year, February has 29 days, otherwise it has 28 days. You should assume that the input year is always a valid year.","solution":"def days_in_month(year, month): Returns the number of days in a given month of a given year. Parameters: year (int): The year as a four-digit number. month (int): The month as a number (1 for January, 2 for February, ..., 12 for December). Returns: int: The number of days in the month. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # List with the number of days in each month (default for non-leap years) days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year is_leap_year = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) # Adjust February days for leap years if is_leap_year and month == 2: return 29 # Return the number of days in the given month return days_in_months[month - 1]"},{"question":"Write a python function to determine the depth of the deepest level of nested brackets in a given string. The string will only contain brackets ('[', ']') and will be well-formed (each open bracket is matched with a closing bracket). The function should return an integer representing the maximum depth.","solution":"def max_bracket_depth(s): Returns the maximum depth of nested brackets in the string s. max_depth = 0 current_depth = 0 for char in s: if char == '[': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == ']': current_depth -= 1 return max_depth"},{"question":"Write a python function to validate a US social security number (SSN). The function should take an SSN as input and return True if the SSN is valid, and False otherwise. A valid SSN should follow the format \\"XXX-XX-XXXX\\", where each 'X' is a digit.","solution":"import re def is_valid_ssn(ssn): Validates a US social security number (SSN). An SSN is valid if the format is \\"XXX-XX-XXXX\\" where each 'X' is a digit. Args: ssn (str): The social security number to validate. Returns: bool: True if the ssn is valid, False otherwise. pattern = re.compile(r'^d{3}-d{2}-d{4}') return bool(pattern.match(ssn))"},{"question":"Write a python function to write to a file using Python's 'with' statement.","solution":"def write_to_file(file_path, content): Writes the given content to the specified file using Python's 'with' statement. :param file_path: str, path to the file to write to. :param content: str, content to be written to the file. with open(file_path, 'w') as file: file.write(content)"},{"question":"Write a python function to find the largest of three numbers and the smallest of three numbers.","solution":"def find_largest_and_smallest(a, b, c): Returns a tuple containing the largest and smallest of the three numbers a, b, and c. largest = max(a, b, c) smallest = min(a, b, c) return (largest, smallest)"},{"question":"Write a python function to reverse each word in a sentence and also return the reversed sentence.","solution":"def reverse_words(sentence): Reverses each word in a given sentence and also reverses the order of words in the sentence. Parameters: sentence (str): The input sentence to be reversed. Returns: str: The sentence with each word reversed and the order of words also reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] reversed_sentence = ' '.join(reversed_words[::-1]) return reversed_sentence"},{"question":"Write a python function to print all combinations of length k from the given array of distinct elements. The function should take two parameters: the array and the length of combinations (k).","solution":"from itertools import combinations def print_combinations(arr, k): Prints all combinations of length k from the given array of distinct elements. Parameters: arr (list): The array of distinct elements. k (int): The length of combinations to generate. comb = combinations(arr, k) for c in comb: print(c)"},{"question":"Write a python function to find the length of the longest substring in a given string s such that every character in the substring is unique. How can I do this using a sliding window approach?","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. :param s: Input string :return: Length of the longest substring with all unique characters char_index_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_index_map and char_index_map[char] >= left: left = char_index_map[char] + 1 char_index_map[char] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a python function to convert the case of a given string, i.e., convert all the uppercase characters to lower case and vice versa.","solution":"def convert_case(s): Converts the case of a given string, changing uppercase characters to lowercase and vice versa. return s.swapcase()"},{"question":"Write a python function to rearrange a string so that no two adjacent characters are the same. If it's not possible, return an empty string.","solution":"import heapq from collections import Counter def rearrange_string(s): Rearranges a string so that no two adjacent characters are the same. If it's not possible, returns an empty string. # Count the frequency of each character char_count = Counter(s) max_heap = [] # Convert count map to a max heap for char, count in char_count.items(): heapq.heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Add the previous character back if it's count is not zero if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update the previous character and its count prev_char = char prev_count = count + 1 # If the rearranged string's length is not equal to the original string's length, then it's not possible if len(result) != len(s): return \\"\\" return ''.join(result)"},{"question":"Write a python function to find the maximum element in an array using recursion. The function should return the maximum element found. If the array is empty, the function should return \`None\`.","solution":"def find_maximum_recursive(arr): Returns the maximum element in the array using recursion. If the array is empty, returns None. if not arr: return None if len(arr) == 1: return arr[0] max_of_rest = find_maximum_recursive(arr[1:]) return arr[0] if arr[0] > max_of_rest else max_of_rest"},{"question":"Write a python function to generate the Fibonacci sequence up to a specified number of terms. The function should take an integer as a parameter and return a list containing the Fibonacci sequence up to that number of terms.","solution":"def fibonacci(n): Generate a Fibonacci sequence up to n terms. Parameters: n (int): Number of terms in the Fibonacci sequence to generate. Returns: List[int]: A list containing the Fibonacci sequence up to n terms. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to convert a string that represents binary to an integer. The function should handle both positive and negative binary strings using two's complement representation.","solution":"def binary_to_integer(binary_str): Converts a binary string representing a number in two's complement format to an integer. Args: - binary_str (str): The binary string. Returns: - int: The integer representation of the binary string. if binary_str[0] == '0': # Positive number return int(binary_str, 2) else: # Negative number # Calculate two's complement manually n = len(binary_str) return int(binary_str, 2) - (1 << n)"},{"question":"Write a python function to remove all occurrences of a given value from a list. You need to implement the function \`remove_value(lst, val)\`. Here, \`lst\` is the input list and \`val\` is the value to remove from the list. The function should return a new list with all occurrences of \`val\` removed.","solution":"def remove_value(lst, val): Remove all occurrences of val from the list lst. Parameters: - lst: List of elements. - val: Value to be removed from the list. Returns: A new list with all occurrences of val removed. return [x for x in lst if x != val]"},{"question":"Write a python function to find all the roots of a quadratic equation ax^2 + bx + c = 0 using the quadratic formula. The function should return a tuple containing the roots, or a message indicating that there are no real roots. The quadratic formula is x = [-b ± sqrt(b^2 - 4ac)] / (2a).","solution":"import cmath def find_quadratic_roots(a, b, c): Returns the roots of the quadratic equation ax^2 + bx + c = 0 using the quadratic formula x = [-b ± sqrt(b^2 - 4ac)] / (2a). Parameters: a (float): coefficient of x^2 b (float): coefficient of x c (float): constant term Returns: tuple: roots of the quadratic equation if a == 0: return \\"Coefficient 'a' cannot be zero in a quadratic equation.\\" # calculate the discriminant discriminant = b**2 - 4*a*c # calculate the two roots root1 = (-b + cmath.sqrt(discriminant)) / (2 * a) root2 = (-b - cmath.sqrt(discriminant)) / (2 * a) # check if roots are real or complex if discriminant < 0: return (root1, root2) elif discriminant == 0: return (root1.real,) else: return (root1.real, root2.real)"},{"question":"Write a python function to reverse an array of integers.","solution":"def reverse_array(arr): Reverses the input array of integers. return arr[::-1]"},{"question":"Write a python function to get a Chinese character from a given string, and return it. If it doesn't exist, return None.","solution":"import re def find_chinese_character(s): Returns the first Chinese character from the input string 's'. If no Chinese character exists in the string, returns None. match = re.search(r'[u4e00-u9fff]', s) return match.group(0) if match else None"},{"question":"Write a python function to implement a binary tree data structure in Python. A binary tree is a hierarchical data structure consisting of nodes, where each node can have at most two children, referred to as the left child and the right child.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def insert(root, value): Insert a value into the binary tree rooted at root. Returns the new root of the binary tree. if root is None: return TreeNode(value) if value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root def inorder_traversal(root): Perform an inorder traversal of the binary tree rooted at root. Returns a list of values. if root is None: return [] return inorder_traversal(root.left) + [root.value] + inorder_traversal(root.right)"},{"question":"Write a python function to extract the largest area formed by consecutive 'X's in a given binary matrix.","solution":"def max_area_of_X(matrix): Returns the largest area formed by consecutive 'X's in a given binary matrix. if not matrix: return 0 rows = len(matrix) cols = len(matrix[0]) height = [0] * cols max_area = 0 for i in range(rows): for j in range(cols): if matrix[i][j] == 'X': height[j] += 1 else: height[j] = 0 max_area = max(max_area, largest_rectangle_area(height)) return max_area def largest_rectangle_area(heights): Helper function to calculate the largest rectangle in a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to find the number of distinct points in a given set of points. A point is represented as a tuple \`(x, y)\`. For example, \`(3, 4)\` represents a point with x-coordinate as 3 and y-coordinate as 4.","solution":"def count_distinct_points(points): Counts the number of distinct points in a given set of points. Args: points (list of tuples): A list where each element is a tuple representing a point (x, y). Returns: int: The number of distinct points. return len(set(points))"},{"question":"Write a python function to find the Euclidean distance between two points in a 2D plane. The function should take two tuples representing the coordinates of the two points and return the distance.","solution":"import math def euclidean_distance(point1, point2): Returns the Euclidean distance between two points in 2D plane. Parameters: point1 (tuple): The coordinates of the first point (x1, y1). point2 (tuple): The coordinates of the second point (x2, y2). Returns: float: The Euclidean distance between the two points. return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)"},{"question":"Write a python function to find the first n prime numbers and return them in a list. For example, for n=4, the first 4 prime numbers are [2, 3, 5, 7].","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def first_n_primes(n): Returns the first n prime numbers. primes = [] candidate = 2 while len(primes) < n: if is_prime(candidate): primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to reverse the order of the items in an array.","solution":"def reverse_array(arr): Returns the array with the order of the items reversed. return arr[::-1]"},{"question":"Write a python function to find the maximum length of a consecutive sequence in a list of integers.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence. if not nums: return 0 nums = set(nums) max_length = 0 for num in nums: if num - 1 not in nums: current_num = num current_length = 1 while current_num + 1 in nums: current_num += 1 current_length += 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to generate all possible combinations of长度为n的非空字符子串。字符数组仅包含小写字母，且不能为空。字符可以重复。注意：字符可以不按顺序出现。","solution":"import itertools def generate_combinations(chars, n): Generate all possible combinations of length n non-empty character substrings. Args: chars (str): String containing lowercase letters. n (int): Length of the combinations to generate. Returns: list: List of all possible combinations of length n. if not chars or n <= 0: return [] return [''.join(comb) for comb in itertools.combinations_with_replacement(chars, n)]"},{"question":"Write a python function to reverse the order of characters in each word within a sentence. The function should not reverse the单词长度，只应该reverse单词中的字符顺序。例如，输入 \\"Hello World from Alibaba Cloud\\" 应该输出 \\"olleH dlroW morf alibaba dlrow\\"。","solution":"def reverse_characters_in_words(sentence): Reverses the order of characters in each word within the sentence. Args: sentence (str): The sentence to reverse characters in words. Returns: str: A new sentence with each word's characters reversed. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a python function to find the most frequently occurring element in a list of integers. If there are multiple elements with the same highest frequency, return all of them in ascending order.","solution":"from collections import Counter from typing import List def most_frequent_elements(lst: List[int]) -> List[int]: Find the most frequently occurring element(s) in a list of integers. If there are multiple elements with the same highest frequency, return all of them in ascending order. if not lst: return [] count = Counter(lst) max_freq = max(count.values()) result = sorted([k for k, v in count.items() if v == max_freq]) return result"},{"question":"Write a python function to calculate the volume of a pyramid.","solution":"def pyramid_volume(base_length, base_width, height): Calculate the volume of a pyramid. Args: base_length (float): The length of the base of the pyramid. base_width (float): The width of the base of the pyramid. height (float): The height of the pyramid. Returns: float: The volume of the pyramid. return (base_length * base_width * height) / 3"},{"question":"Write a python function to generate the fibonnaci sequence up to \`n\` terms. The function should also return the nth term of the sequence.","solution":"def fibonacci(n): Generate the Fibonacci sequence up to n terms and return the nth term. :param n: Number of terms in the Fibonacci sequence :return: A tuple containing the list of the first n terms of the sequence and the nth term if n <= 0: return ([], None) sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) if n == 1: return ([0], 0) else: return (sequence, sequence[n-1])"},{"question":"Write a python function to find the first occurrence of a given target value in a sorted list, and return its index if the target is found. Otherwise, return -1. The result should be logged every time the function is called.","solution":"import logging # Set up logging logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__) def find_first_occurrence(arr, target): Finds the first occurrence of the target value in a sorted list and returns its index. If the target is not found, returns -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: result = mid right = mid - 1 # Continue to search in the left half to find the first occurrence elif arr[mid] < target: left = mid + 1 else: right = mid - 1 logger.info(f\\"find_first_occurrence called with arr={arr}, target={target}, result={result}\\") return result"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This is known as the Kadane's algorithm problem, and it's a fundamental algorithm in computer science.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This uses Kadane's algorithm. Parameters: nums (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. max_current = max_global = nums[0] for i in range(1, len(nums)): max_current = max(nums[i], max_current + nums[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to implement a Binary Search on an array of integers. The function should return the index of the target number if found, otherwise return -1.","solution":"def binary_search(arr, target): Implements binary search to find the index of the target number in a sorted array. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the second largest element in a list. The function should return the second largest element if it exists, otherwise, it should return None.","solution":"def second_largest(arr): Returns the second largest element in the list \`arr\`. If the second largest element does not exist, returns None. if not arr or len(arr) < 2: return None first = second = float('-inf') for num in arr: if num > first: first, second = num, first elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a python function to find the maximum product of two numbers in an array. The function should handle both positive and negative numbers.","solution":"def max_product_of_two_numbers(arr): Returns the maximum product of two numbers in the array. Handles both positive and negative numbers. Params: arr (list): List of integers. Returns: int: Maximum product of any two numbers in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") # Sorting the array arr.sort() # Maximum product can be found by using the two largest numbers or two smallest numbers max_product = max(arr[0] * arr[1], arr[-1] * arr[-2]) return max_product"},{"question":"Write a python function to compute the sum of all unique elements in an array. Unique elements are defined as elements that appear only once in the array.","solution":"def sum_of_unique_elements(arr): Returns the sum of all unique elements in the array. Unique elements are defined as elements that appear only once in the array. from collections import Counter counts = Counter(arr) return sum(element for element, count in counts.items() if count == 1)"},{"question":"Write a python function to reverse a string using a stack data structure. How do you initialize the stack data structure?","solution":"def reverse_string_using_stack(s): Reverses the string s using a stack data structure. # Initialize the stack stack = [] # Push all characters of the string to the stack for char in s: stack.append(char) # Pop characters from the stack and form the reversed string reversed_string = \\"\\" while stack: reversed_string += stack.pop() return reversed_string"},{"question":"Write a python function to calculate the bit-wise OR operation on two numbers and return the result.","solution":"def bitwise_or(a, b): Returns the bitwise OR of a and b. return a | b"},{"question":"Write a python function to count the total number of distinct paths from the top-left corner to the bottom-right corner of a given m x n grid, while avoiding obstacles. The grid is represented by a 2D list where 0 represents an empty cell and 1 represents an obstacle. An obstacle prevents any path that passes through it. You can move in any of the four directions (up, down, left, right) from the current cell.","solution":"def count_paths(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 def dfs(x, y, visited): if x == m-1 and y == n-1: return 1 visited.add((x, y)) total_paths = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: total_paths += dfs(nx, ny, visited) visited.remove((x, y)) return total_paths return dfs(0, 0, set())"},{"question":"Write a python function to sort a list of strings in alphabetical order ignoring case sensitivity. You can assume all strings are of length 10.","solution":"def sort_strings(strings): Sorts a list of strings in alphabetical order, ignoring case sensitivity. Parameters: strings (list): List of strings to be sorted. Returns: list: Alphabetically sorted list of strings, case insensitive. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a python function to calculate the sum of all the even numbers in a given list. You are expected to use a for loop to iterate through the list and determine whether each element is even.","solution":"def sum_of_even_numbers(numbers): Returns the sum of all even numbers in the given list. Parameters: numbers (list): List of integers to be checked. Returns: int: Sum of all even numbers in the list. total = 0 for number in numbers: if number % 2 == 0: total += number return total"},{"question":"Write a python function to find the kth smallest element in a frequency encoded list. The frequency of each element is defined by the number of times it appears consecutively in the list. For example, in the list \`\`\`[0, 0, 0, 2, 3, 4, 4, 4]\`\`\`, the frequency of 0 is 3, the frequency of 2 is 1, the frequency of 3 is 1, and the frequency of 4 is 3.","solution":"from collections import defaultdict def kth_smallest_frequency(elements, k): Find the kth smallest element in a list based on frequency. The frequency of each element is defined by the number of times it appears consecutively. :param elements: List of frequency encoded elements. :param k: The kth position in the list of unique elements sorted by their frequency. :return: The kth smallest element based on frequency. if not elements: raise ValueError(\\"The list is empty.\\") if k <= 0: raise ValueError(\\"k must be a positive integer.\\") freq_dict = defaultdict(int) prev_element = None count = 0 for element in elements: if element == prev_element: count += 1 else: if prev_element is not None: freq_dict[prev_element] += count prev_element = element count = 1 freq_dict[prev_element] += count # Add last element's count sorted_elements_by_freq = sorted(freq_dict.keys(), key=lambda x: freq_dict[x]) if k > len(sorted_elements_by_freq): raise ValueError(\\"k is larger than the number of unique elements.\\") return sorted_elements_by_freq[k - 1]"},{"question":"Write a python function to return the list of all factors of a given integer 'n'.","solution":"def factors(n): Returns a list of all factors of a given integer 'n'. if n == 0: return [] n = abs(n) result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to iterate through a list and generate a new list which excludes the elements that are divisible by 3.","solution":"def exclude_divisible_by_three(lst): Returns a new list excluding the elements that are divisible by 3. Parameters: lst (list): The input list of integers. Returns: list: A new list with elements not divisible by 3. return [x for x in lst if x % 3 != 0]"},{"question":"Write a python function to find the sum of all elements in a list. You should assume that the list is not empty and contains integers.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of all integers in the list. return sum(lst)"},{"question":"Write a python function to generate the following pattern. The pattern consists of numbers in an increasing sequence followed by a decrease back to 1. The pattern should consist of lines in the format \\"n - 1 2 3 4 ... n-1\\" for the numbers 1 to n-1. Each line should start with the index plus one and end with the previous index minus one.","solution":"def generate_pattern(n): Generates a list of strings representing the pattern requested. Args: n (int): The length of the increasing sequence. Returns: list of str: Each string represents a line in the pattern. pattern = [] for i in range(1, n+1): if i == 1: pattern.append(\\"1\\") else: pattern.append(f\\"{i} - \\" + \\" \\".join(map(str, range(1, i))) + f\\" {i-1}\\") return pattern"},{"question":"Write a python function to generate the nth Fibonacci number using recursion. The solution should be optimized to avoid repeated calculations of the same subproblems. To do this, use memoization.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to generate all GET requests for a given list of URLs and print the responses. How can we achieve this using the requests library?","solution":"import requests def fetch_urls(urls): Fetches the content of each URL from the given list of URLs using GET requests. :param urls: List of URLs to fetch. :type urls: list responses = [] for url in urls: try: response = requests.get(url) response.raise_for_status() responses.append(response.text) except requests.RequestException as e: responses.append(f\\"Error fetching {url}: {e}\\") return responses"},{"question":"Write a python function to find the maximum integer in a list. If the list is empty, the function should return None.","solution":"def find_max(lst): Returns the maximum integer in a list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to remove all odd numbers from the list and return the modified list.","solution":"def remove_odd_numbers(lst): Removes all odd numbers from the list lst and returns the modified list. return [x for x in lst if x % 2 == 0]"},{"question":"Write a python function to calculate the sum of all elements in a list of N integers, taking into account the possibility of negative numbers.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. return sum(lst)"},{"question":"Write a python function to find the largest number in a list with at least 2 elements.","solution":"def find_largest(numbers): Returns the largest number in a list of at least 2 elements. Parameters: numbers (list): A list containing at least 2 numerical elements. Returns: int/float: The largest number in the list. if len(numbers) < 2: raise ValueError(\\"The list must contain at least 2 elements.\\") largest = numbers[0] for number in numbers[1:]: if number > largest: largest = number return largest"},{"question":"Write a python function to find the median of a list of numbers without sorting the list. The median is the middle number in a sorted sequence of numbers. If there is an even number of numbers, then the median is the average of the two middle numbers.","solution":"def find_median(nums): Returns the median of the list nums without sorting it. def quick_select(nums, k): Returns the k-th smallest element from the list nums using Quickselect algorithm. if len(nums) == 1: return nums[0] pivot = nums[len(nums) // 2] lows = [el for el in nums if el < pivot] highs = [el for el in nums if el > pivot] pivots = [el for el in nums if el == pivot] if k < len(lows): return quick_select(lows, k) elif k < len(lows) + len(pivots): return pivot else: return quick_select(highs, k - len(lows) - len(pivots)) n = len(nums) if n % 2 == 1: return quick_select(nums, n // 2) else: return 0.5 * (quick_select(nums, n // 2 - 1) + quick_select(nums, n // 2))"},{"question":"Write a python function to reverse the order of words in a given sentence. Words are separated by spaces. Your function should remove any extra spaces in the sentence.","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence and removes any extra spaces. words = sentence.split() # Splits the sentence into words, removing any extra spaces. reversed_words = ' '.join(reversed(words)) # Reverses the word list and joins them with a single space. return reversed_words"},{"question":"Write a python function to rotate a list by K positions to the right.","solution":"def rotate_list(lst, k): Rotates the list lst by k positions to the right. Parameters: lst (List[int]): The list to be rotated. k (int): The number of positions to rotate the list. Returns: List[int]: The rotated list. if not lst: return lst k = k % len(lst) return lst[-k:] + lst[:-k]"},{"question":"Write a python function to extract email addresses from a given text. The function should return a list of all the email addresses found in the text. The email addresses should be in the format \\"username@domain.com\\".","solution":"import re def extract_emails(text): Extracts all email addresses from the given text. Args: text (str): The input text from which to extract email addresses. Returns: list: A list of all email addresses found in the text. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.findall(email_pattern, text)"},{"question":"Write a python function to find the maximum number in a list of integers and return the maximum number along with its index in the list. If the list is empty, the function should return \`None\`.","solution":"def find_max_with_index(nums): Returns the maximum number in a list of integers along with its index. If the list is empty, returns None. if not nums: return None max_num = nums[0] max_index = 0 for i in range(1, len(nums)): if nums[i] > max_num: max_num = nums[i] max_index = i return max_num, max_index"},{"question":"Write a python function to calculate the factorial of a number, but only if the number is even. If the number is odd, the function should return \`None\`.","solution":"def even_factorial(n): Returns the factorial of an even number n. If n is odd, returns None. if n % 2 != 0: return None factorial = 1 for i in range(2, n + 1): factorial *= i return factorial"},{"question":"Write a python function to check if a string contains a valid sequence of parentheses. The function should return \`True\` if the sequence is valid, otherwise return \`False\`.","solution":"def is_valid_parentheses(s): Checks if the input string contains a valid sequence of parentheses. Args: s (str): input string containing parentheses Returns: bool: True if the sequence is valid, False otherwise stack = [] matching_parentheses = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses.keys(): if stack == [] or stack.pop() != matching_parentheses[char]: return False else: # Ignore characters that are not parentheses continue return not stack"},{"question":"Write a python function to find the maximum repeated number in a given list of positive integers. If all numbers are unique, your function should return -1.","solution":"def max_repeated_number(arr): Returns the maximum repeated number in the list. If all numbers are unique, returns -1. if not arr: return -1 counts = {} max_repeated = -1 max_count = 1 # ensure we only track repeats for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 if counts[num] > max_count or (counts[num] == max_count and num > max_repeated): max_repeated = num max_count = counts[num] return max_repeated if max_count > 1 else -1"},{"question":"Write a python function to print the smallest and largest values in a list using a for loop. Write the function in a list named \\"my_list\\" and iterate through the list using a for loop to find and print the smallest and largest values.","solution":"def find_min_max(my_list): Finds and returns the smallest and largest values in a list. Parameters: my_list (list): List of numerical values. Returns: tuple: smallest and largest values in the list. if not my_list: return None, None smallest = largest = my_list[0] for number in my_list: if number < smallest: smallest = number elif number > largest: largest = number return smallest, largest"},{"question":"Write a python function to calculate the sum of the squares of the first \`n\` positive integers using a loop. Your function should return the sum. If the input number is negative or zero, raise a ValueError with an appropriate message.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first \`n\` positive integers. Raises ValueError if \`n\` is not a positive integer. if n <= 0: raise ValueError(\\"The input must be a positive integer\\") sum_squares = 0 for i in range(1, n + 1): sum_squares += i ** 2 return sum_squares"},{"question":"Write a python function to reverse the order of the elements in a stack. You are not allowed to use any additional data structures (like list, array, etc.) and you should only use the built-in stack operations provided in the question.","solution":"def reverse_stack(stack): Reverses the order of the elements in a stack using only stack operations. if len(stack) > 0: temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp) def insert_at_bottom(stack, item): if len(stack) == 0: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp)"},{"question":"Write a python function to find the single element in a sorted array where every other element appears twice. The array is such that all elements except one appear twice, and the single element appears only once. The array is sorted, and all elements are non-negative integers. The function should have a time complexity of O(log n) and a space complexity of O(1).","solution":"def single_element_in_sorted_array(nums): Returns the single element in a sorted array where every other element appears twice. Uses a binary search approach to achieve O(log n) time complexity and O(1) space complexity. Parameters: nums (list[int]): A sorted list of non-negative integers with exactly one unique element. Returns: int: The single unique element in the list. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 # Ensure mid is even so that mid^1 points to its partner if mid % 2 == 1: mid -= 1 if nums[mid] == nums[mid+1]: left = mid + 2 else: right = mid return nums[left]"},{"question":"Write a python function to generate a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(limit): Generate a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The maximum value up to which primes are to be found. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] # No primes less than 2 is_prime = [True] * (limit + 1) # Initialize the boolean array is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for num in range(2, int(limit**0.5) + 1): if is_prime[num]: for multiple in range(num*num, limit + 1, num): is_prime[multiple] = False # Extracting the prime numbers primes = [num for num, prime in enumerate(is_prime) if prime] return primes"},{"question":"Write a python function to remove all occurrences of a specified character from a string. For example, remove all occurrences of the character 'a' from the string \\"apple\\". The function should return the modified string.","solution":"def remove_character(s, char): Removes all occurrences of the specified character from the string. Parameters: s (str): The original string. char (str): The character to remove. Returns: str: The modified string with all occurrences of the specified character removed. return s.replace(char, \\"\\")"},{"question":"Write a python function to count the number of \`None\` elements in a given list.","solution":"def count_none_elements(lst): Returns the count of None elements in the given list. return lst.count(None)"},{"question":"Write a python function to check if all elements in a list are unique or not. If they are not, how do you remove duplicates from the list?","solution":"def is_unique(lst): Check if all elements in the list are unique. return len(lst) == len(set(lst)) def remove_duplicates(lst): Remove duplicates from the list. return list(set(lst))"},{"question":"Write a python function to reverse a string without using the slicing method. You should reverse the string using a loop and swap elements manually. Here's how you might approach the problem: Describe the steps and then provide the code.","solution":"def reverse_string(s): Reverses the given string \`s\` without using the slicing method. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. str_list = list(s) left, right = 0, len(str_list) - 1 while left < right: # Swap the characters str_list[left], str_list[right] = str_list[right], str_list[left] left += 1 right -= 1 return ''.join(str_list)"},{"question":"Write a python function to create a new dictionary with keys as fruit names and values as the number of fruits.","solution":"def create_fruit_dictionary(fruits): Takes a list of fruit names and returns a dictionary with the fruit names as keys and their respective counts as values. Parameters: fruits (list): A list of fruit names (strings). Returns: dict: A dictionary with fruit names as keys and counts as values. fruit_dict = {} for fruit in fruits: if fruit in fruit_dict: fruit_dict[fruit] += 1 else: fruit_dict[fruit] = 1 return fruit_dict"},{"question":"Write a python function to find all the prime factors of a given number using the sieve of Eratosthenes. The function should return a list of all prime factors of the input number in ascending order.","solution":"def sieve_of_eratosthenes(n): Helper function that returns a list of prime numbers up to n using the sieve of Eratosthenes. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes def prime_factors(n): Returns a list of all prime factors of the input number n in ascending order. primes = sieve_of_eratosthenes(n) factors = [] for prime in primes: while n % prime == 0: factors.append(prime) n //= prime return factors"},{"question":"Write a python function to count the number of set bits (1s) in the binary representation of a number.","solution":"def count_set_bits(n): Returns the number of set bits (1s) in the binary representation of n. Arguments: n -- a non-negative integer Returns: count -- the number of set bits (1s) in the binary representation of n count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a python function to reverse the order of elements in a tuple. Since tuples in Python are immutable, you cannot directly reverse them. What is the best way to achieve this?","solution":"def reverse_tuple(t): Returns a new tuple that is the reverse of the input tuple t. return t[::-1]"},{"question":"Write a python function to return the sum of all elements in a list. If the list is empty, return 0.","solution":"def sum_of_elements(elements): Returns the sum of all elements in a list. If the list is empty, return 0. Parameters: elements (list): A list of numerical elements. Returns: int: The sum of the elements in the list. return sum(elements)"},{"question":"Write a python function to reverse the lines in a text file","solution":"def reverse_lines_in_file(file_path): Reads the content of the file located at file_path, reverses the order of lines, and writes the reversed lines back to the file. Parameters: file_path (str): The path to the file to be processed. with open(file_path, 'r') as file: lines = file.readlines() reversed_lines = lines[::-1] with open(file_path, 'w') as file: file.writelines(reversed_lines)"},{"question":"Write a python function to find the clockwise rotation of an array by one position.","solution":"def rotate_clockwise_by_one(arr): Rotates the elements of the array by one position in the clockwise direction. if not arr: return arr return [arr[-1]] + arr[:-1]"},{"question":"Write a python function to partition a given list of integers around a pivot value, such that all elements less than the pivot are on the left, and all elements greater than the pivot are on the right. The pivot element itself should be in its correct position. This is similar to the partition step used in the Quicksort algorithm.","solution":"def partition(arr, pivot): Partitions the array around the pivot value. Parameters: arr (list of int): The list of integers to partition. pivot (int): The pivot value to partition around. Returns: list of int: The partitioned list with pivot in its correct position. less = [] equal = [] greater = [] for num in arr: if num < pivot: less.append(num) elif num == pivot: equal.append(num) else: greater.append(num) return less + equal + greater"},{"question":"Write a python function to find the maximum number of unique integers in all possible subarrays of an array.","solution":"def max_unique_integers(arr): Returns the maximum number of unique integers in all possible subarrays of the given array. # Using a set to keep track of unique elements unique_elements = set(arr) return len(unique_elements)"},{"question":"Write a python function to find the most frequent integer in a list. If there are multiple integers with the same highest frequency, return the smallest one.","solution":"def most_frequent_integer(lst): Returns the most frequent integer in the list. If there are multiple integers with the same highest frequency, the smallest one is returned. if not lst: return None frequency = {} for num in lst: frequency[num] = frequency.get(num, 0) + 1 most_frequent = min((key for key, value in frequency.items() if value == max(frequency.values()))) return most_frequent"},{"question":"Write a python function to reverse a list of numbers and return the reversed list.","solution":"def reverse_list(numbers): Reverses the provided list of numbers. Parameters: numbers (list): The list of numbers to be reversed. Returns: list: The reversed list of numbers. return list(reversed(numbers))"},{"question":"Write a python function to generate the Fibonacci sequence up to a given number. The function should return a list of Fibonacci numbers that are less than or equal to the given number.","solution":"def fibonacci_sequence(n): Generates the Fibonacci sequence up to the number n. Args: n (int): The upper limit for the Fibonacci numbers. Returns: list: A list of Fibonacci numbers less than or equal to n. if n < 0: return [] fib_seq = [] a, b = 0, 1 while a <= n: fib_seq.append(a) a, b = b, a + b return fib_seq"},{"question":"Write a python function to flatten a list that can handle multiple levels of nesting. The function should take a single argument, \`nested_list\`, which is a list potentially containing other lists at any depth. The function should return a new list containing all the elements from the nested list, flattened into a single level.","solution":"def flatten(nested_list): Flattens a nested list into a single level list. Args: nested_list: a list potentially containing other lists at any depth. Returns: A new list containing all the elements from the nested list, flattened into a single level. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a python function to find the longest common subsequence between two strings, s and t. The function should return the length of the longest subsequence. However, I want a recursive solution without memoization. Please ensure that the function handles cases where the input strings are empty.","solution":"def lcs_recursive(s, t): Returns the length of the longest common subsequence between two strings s and t using a recursive approach without memoization. if not s or not t: return 0 if s[-1] == t[-1]: return 1 + lcs_recursive(s[:-1], t[:-1]) else: return max(lcs_recursive(s[:-1], t), lcs_recursive(s, t[:-1]))"},{"question":"Write a python function to find and return the first missing positive integer in an unsorted integer array. The array can contain duplicate and negative numbers.","solution":"def first_missing_positive(nums): Returns the first missing positive integer in an unsorted integer array. The array can contain duplicate and negative numbers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to determine if a given value is a palindrome. A palindrome is a string that reads the same backward as forward, ignoring cases and non-alphanumeric characters.","solution":"import re def is_palindrome(s): Determines if the given string is a palindrome. A palindrome is a string that reads the same backward as forward, ignoring cases and non-alphanumeric characters. :param s: The string to check. :return: True if the string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Compare the cleaned string with its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to calculate the sum of all prime numbers less than \`n\`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_of_primes_less_than_n(n): Returns the sum of all prime numbers less than n. return sum(num for num in range(2, n) if is_prime(num))"},{"question":"Write a python function to count the frequency of each word in a given sentence. Assume that words are separated by spaces. If a word appears more than once, the function should return the count of all appearances of that word. For example, if the input sentence is \\"Hello World, there is another WORLD\\" it should return a dictionary with word counts {\\"Hello\\": 1, \\"World,\\": 1, \\"there\\": 1, \\"is\\": 1, \\"another\\": 1, \\"WORLD\\": 2}. Note that the function should be case-insensitive, so \\"World\\" and \\"WORLD\\" should be treated as the same word.","solution":"def count_word_frequency(sentence): Returns a dictionary with the frequency of each word in the sentence. The function is case-insensitive. import re words = re.findall(r'bw+b', sentence.lower()) freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict"},{"question":"Write a python function to find the sum of all prime numbers between two integers \`n\` and \`m\`.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sum_of_primes_between(n, m): Returns the sum of all prime numbers between integers n and m (inclusive). if n > m: n, m = m, n return sum(num for num in range(n, m + 1) if is_prime(num))"},{"question":"Write a python function to generate a list of prime numbers less than \`n\`.","solution":"def generate_primes(n): Returns a list of prime numbers less than n. if n < 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to find the maximum subarray sum using Kadane's algorithm. Provide '∞' to represent the largest possible integer.","solution":"def max_subarray_sum(arr): Returns the maximum subarray sum using Kadane's algorithm. if not arr: return float('-inf') max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # To represent the largest possible integer in computation INF = float('inf')"},{"question":"Write a python function to implement a first in first out (FIFO) queue. The functions to implement are \`enqueue\` and \`dequeue\`. The queue should be implemented using a list and should handle the cases where the queue is empty or full.","solution":"class FIFOQueue: def __init__(self, capacity): Initializes the queue with a set capacity. self.queue = [] self.capacity = capacity def enqueue(self, item): Adds an item to the end of the queue. Returns True if the item was added, or False if the queue is full. if len(self.queue) >= self.capacity: return False self.queue.append(item) return True def dequeue(self): Removes and returns the first item from the queue. Returns None if the queue is empty. if len(self.queue) == 0: return None return self.queue.pop(0) def is_empty(self): Checks if the queue is empty. Returns True if it is empty, False otherwise. return len(self.queue) == 0 def is_full(self): Checks if the queue is full. Returns True if it is full, False otherwise. return len(self.queue) >= self.capacity"},{"question":"Write a python function to replace all spaces in a string with hyphens.","solution":"def replace_spaces_with_hyphens(s): Replaces all spaces in the string s with hyphens. Parameters: s (str): The input string containing spaces. Returns: str: The modified string with spaces replaced by hyphens. return s.replace(' ', '-')"},{"question":"Write a python function to find the list of all possible consecutive sum of numbers in a list and return them as a list of lists. For example, given a list [10, 2, 3, 7, 4, 5] the output should be [[10], [10, 2], [2], [2, 3], [10, 2, 3, 7], [2, 3, 7], [3], [3, 7], [7], [4], [5], [4, 5]]. Note that the consecutive sublists can start and end anywhere in the original list.","solution":"def consecutive_sums(lst): Returns a list of lists, where each list is a consecutive sum of numbers in the input list. result = [] for start in range(len(lst)): for end in range(start + 1, len(lst) + 1): result.append(lst[start:end]) return result"},{"question":"Write a python function to count the number of times a character appears in a string. Here is the function signature : \`def count_char(s, char)\`.","solution":"def count_char(s, char): Returns the number of times the character \`char\` appears in the string \`s\`. :param s: The input string :param char: The character to count :return: Number of times \`char\` appears in \`s\` return s.count(char)"},{"question":"Write a python function to solve a given code problem. The function should take two parameters: the first parameter is the length of the array, and the second parameter is the array itself. The function should return the sum of all elements in the array.","solution":"def sum_array(length, arr): Returns the sum of all elements in the array. :param length: int, the length of the array :param arr: list of int, the array to sum up :return: int, the sum of all elements in the array return sum(arr)"},{"question":"Write a python function to implement Binary Search Tree(BST) operations including insert, delete, and search.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, node, key): if key < node.key: if node.left is None: node.left = TreeNode(key) else: self._insert(node.left, key) elif key > node.key: if node.right is None: node.right = TreeNode(key) else: self._insert(node.right, key) def search(self, key): return self._search(self.root, key) def _search(self, node, key): if node is None or node.key == key: return node if key < node.key: return self._search(node.left, key) else: return self._search(node.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, node, key): if node is None: return node if key < node.key: node.left = self._delete(node.left, key) elif key > node.key: node.right = self._delete(node.right, key) else: if node.left is None: return node.right elif node.right is None: return node.left temp = self._minValueNode(node.right) node.key = temp.key node.right = self._delete(node.right, temp.key) return node def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current"},{"question":"Write a python function to check if a number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. How can we write a function to determine if a given number \`n\` is a prime using Python?","solution":"def is_prime(n): Checks if the given number n is a prime number. Args: n (int): The number to be checked. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a python function to remove all the duplicate characters from a given string using a stack data structure.","solution":"def remove_duplicate_characters(string): Removes all duplicate characters from the input string using a stack data structure. :param string: The input string from which duplicate characters should be removed. :return: A string without duplicate characters, maintaining the order of their first occurrence. stack = [] seen = set() for char in string: if char not in seen: stack.append(char) seen.add(char) return ''.join(stack)"},{"question":"Write a python function to extract the first non-repeating character \`nonre\` from a given string. The function should return the first character that does not repeat. If all characters repeat, it should return an underscore \`_\`.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character from the string \`s\`. If every character repeats, it returns '_'. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return '_'"},{"question":"Write a python function to decimal to hex conversion","solution":"def decimal_to_hex(decimal_number): Converts a decimal number to its hexadecimal representation. if decimal_number < 0: raise ValueError(\\"The decimal number must be non-negative\\") return hex(decimal_number)[2:]"},{"question":"Write a python function to convert a string to a list of words, then filter out all the words that contain the letter 'a' and convert the resulting list back to a string.","solution":"def filter_words_containing_a(input_string): Converts a string to a list of words, filters out words containing the letter 'a', and converts the resulting list back to a string. words = input_string.split() filtered_words = [word for word in words if 'a' not in word.lower()] result_string = ' '.join(filtered_words) return result_string"},{"question":"Write a python function to solve a quadratic equation of the form ax^2 + bx + c = 0. The function should return the roots of the equation as a tuple. If the equation has real roots, return them in ascending order; if there are complex roots, return them in the form a+bi and a-bi. If the equation has no real roots, return None.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0. Returns the roots as a tuple. For real roots, returns them in ascending order. For complex roots, returns them as (real+imaginary_i, real-imaginary_i). If there are no real roots, returns None. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero.\\") discriminant = b**2 - 4*a*c if discriminant > 0: root1 = (-b - discriminant**0.5) / (2*a) root2 = (-b + discriminant**0.5) / (2*a) return (min(root1, root2), max(root1, root2)) elif discriminant == 0: root = -b / (2*a) return (root, root) else: root1 = (-b - cmath.sqrt(discriminant)) / (2*a) root2 = (-b + cmath.sqrt(discriminant)) / (2*a) return (root1, root2)"},{"question":"Write a python function to reverse a sentence and print each word separately.","solution":"def reverse_sentence(sentence): Reverses the given sentence and returns a list of words in reversed order. Parameters: sentence (str): The sentence to be reversed. Returns: list: List containing words of the reversed sentence. words = sentence.split() reversed_words = words[::-1] for word in reversed_words: print(word) return reversed_words"},{"question":"Write a python function to calculate the sum of multiples of a given number \`x\` up to \`n\`. For example, if \`x\` is 3 and \`n\` is 10, the function should return the sum of 3, 6, and 9.","solution":"def sum_of_multiples(x, n): Returns the sum of multiples of x up to n (inclusive). return sum(i for i in range(x, n + 1, x))"},{"question":"Write a python function to sort a given string in lexicographical order. The function should take a string as input and return the sorted string.","solution":"def sort_string_lexicographically(s): Sorts a given string in lexicographical order. Parameters: s (str): The input string to sort Returns: str: The sorted string return ''.join(sorted(s))"},{"question":"Write a python function to generate the longest increasing subsequence (LIS) from a list of integers. The function should return both the LIS and its length. Note that the original list may not be sorted or contain duplicates.","solution":"def longest_increasing_subsequence(arr): Function to find the longest increasing subsequence (LIS) and its length. if not arr: return [], 0 n = len(arr) dp = [1] * n prev_index = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev_index[i] = j max_len = max(dp) idx = dp.index(max_len) lis = [] while idx != -1: lis.append(arr[idx]) idx = prev_index[idx] lis.reverse() return lis, max_len"},{"question":"Write a python function to convert a list of strings into a single string with all the strings concatenated together. The function should handle the case where the list is empty.","solution":"def concatenate_strings(strings): Concatenates a list of strings into a single string. Parameters: strings (list): List of strings to concatenate. Returns: str: Concatenated string of all elements in the list. return ''.join(strings)"},{"question":"Write a python function to count the number of words in a given sentence. The function should be able to handle any sentence input by the user. Here is a sample sentence: \\"Hello, World!\\".","solution":"def count_words(sentence): Returns the count of words in the given sentence. Words are separated by whitespace. return len(sentence.split())"},{"question":"Write a python function to find the least frequent character in a string. If multiple characters have the same lowest frequency, return all of them. The function should ignore case and consider only alphabetic characters.","solution":"from collections import Counter def least_frequent_chars(s): Returns the list of least frequent characters in the string. The function ignores case and considers only alphabetic characters. # Filtering alphabetic characters and converting to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Using Counter to count frequencies char_count = Counter(filtered_chars) if not char_count: return [] # Finding the minimum frequency min_freq = min(char_count.values()) # Finding all characters with the minimum frequency least_frequent = [char for char, count in char_count.items() if count == min_freq] return least_frequent"},{"question":"Write a python function to find the smallest number in a given list of integers. If the list is empty, return \`None\`. Ensure your solution handles any potential errors gracefully.","solution":"def find_smallest_number(numbers): Returns the smallest number from a list of integers. If the list is empty, returns None. if not numbers: return None try: return min(numbers) except (TypeError, ValueError): return None"},{"question":"Write a python function to find the maximum product of a subarray in a given list of integers. The function should take a list of integers as input and return the maximum product that can be obtained from any subarray of the list.","solution":"def max_product_subarray(nums): Returns the maximum product of a subarray in the given list of integers. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: choices = (num, max_product * num, min_product * num) max_product = max(choices) min_product = min(choices) result = max(result, max_product) return result"},{"question":"Write a python function to compute the Jaccard similarity between two sets. The Jaccard similarity between two sets is defined as the size of their intersection divided by the size of their union.","solution":"def jaccard_similarity(set1, set2): Computes the Jaccard similarity between two sets. Jaccard similarity is defined as the size of the intersection divided by the size of the union of the two sets. Args: - set1 (set): The first set. - set2 (set): The second set. Returns: - float: The Jaccard similarity between set1 and set2. intersection = len(set1.intersection(set2)) union = len(set1.union(set2)) jaccard_sim = intersection / union if union != 0 else 0 return jaccard_sim"},{"question":"Write a python function to create CSV from dictionary data and ensure the CSV is sorted by column values","solution":"import csv def dict_to_sorted_csv(data, output_file, sort_by_column): Creates a CSV file from dictionary data and ensures the CSV is sorted by column values. Parameters: data (list of dicts): List containing dictionaries representing rows of CSV. output_file (str): The path to the output CSV file. sort_by_column (str): The column name to sort the CSV by. # Ensure there's data to write if not data: return # Sort the data sorted_data = sorted(data, key=lambda x: x.get(sort_by_column)) # Get the headers headers = sorted_data[0].keys() # Write the data to CSV with open(output_file, 'w', newline='') as csvfile: writer = csv.DictWriter(csvfile, fieldnames=headers) writer.writeheader() writer.writerows(sorted_data)"},{"question":"Write a python function to calculate the number of days between two dates using the datetime module. Here are some example dates: startDate = \\"2022-01-01\\" and endDate = \\"2022-12-31\\". The function should return the number of days between these two dates.","solution":"from datetime import datetime def days_between_dates(start_date, end_date): Calculate the number of days between two dates. Args: start_date (str): The start date in YYYY-MM-DD format. end_date (str): The end date in YYYY-MM-DD format. Returns: int: The number of days between the two dates. date_format = \\"%Y-%m-%d\\" start = datetime.strptime(start_date, date_format) end = datetime.strptime(end_date, date_format) delta = end - start return delta.days"},{"question":"Write a python function to count the number of good nodes in a binary tree. A good node is a node where the value is greater than or equal to the maximum value in its root-to-node path.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_good_nodes(root): Counts the number of good nodes in a binary tree. Each node in the binary tree is considered 'good' if it is greater than or equal to all the nodes in the path from the root to that node. :param root: TreeNode, the root node of the binary tree. :return: int, the number of good nodes in the binary tree. def helper(node, max_value): if not node: return 0 is_good = node.val >= max_value max_value = max(max_value, node.val) return (1 if is_good else 0) + helper(node.left, max_value) + helper(node.right, max_value) return helper(root, float('-inf'))"},{"question":"Write a python function to find the maximum number from a given list, but if no maximum number is found, return the minimum number from the list. If the list is empty, return None.","solution":"def find_max_or_min(lst): Returns the maximum number from a given list. If the list is empty, returns None. If the maximum number cannot be determined (e.g., in case all elements are the same or another condition), returns the minimum number from the list. if not lst: return None max_num = max(lst) min_num = min(lst) return max_num if max_num != min_num else min_num"},{"question":"Write a python function to find the maximum sum of any non-empty subarray (contiguous subarray) of the given list of integers.","solution":"def max_subarray_sum(nums): Finds the maximum sum of any non-empty subarray (contiguous subarray) of the given list of integers. if not nums: raise ValueError(\\"The input list cannot be empty\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to return the most common bit in a list of boolean values.","solution":"def most_common_bit(boolean_list): Returns the most common bit (most frequent boolean value) in a list of boolean values. If the list contains an equal number of True and False, it returns True. true_count = boolean_list.count(True) false_count = boolean_list.count(False) if true_count >= false_count: return True else: return False"},{"question":"Write a python function to determine if a given list of integers can form a sequence where each number is one more than the previous number. For example, \`[3, 4, 5]\` should return \`True\`, but \`[3, 5, 4]\` should return \`False\` because the sequence is not sorted in ascending order.","solution":"def is_consecutive_sequence(nums): Determines if a given list of integers can form a sequence where each number is one more than the previous number. :param nums: List of integers :return: Boolean indicating if the list forms a consecutive sequence if not nums: return True # An empty list is considered a valid consecutive sequence sorted_nums = sorted(nums) for i in range(len(sorted_nums) - 1): if sorted_nums[i] + 1 != sorted_nums[i + 1]: return False return True"},{"question":"Write a python function to find the most frequent string in a given list. If there are multiple strings with the same maximum frequency, return all of them in a list. If the input list is empty, return an empty string.","solution":"from collections import Counter from typing import List, Union def most_frequent_strings(strings: List[str]) -> Union[str, List[str]]: if not strings: return \\"\\" counter = Counter(strings) max_frequency = max(counter.values()) most_frequent = [string for string, count in counter.items() if count == max_frequency] if len(most_frequent) == 1: return most_frequent[0] else: return most_frequent"},{"question":"Write a python function to convert a valid roman numeral in the range [1, 3999] to an integer. Assume that the input is a string representing a valid Roman numeral in uppercase.","solution":"def roman_to_integer(roman): Convert a valid roman numeral string to an integer. Args: roman (str): A string representing a valid Roman numeral. Returns: int: The integer representation of the Roman numeral. roman_vals = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_vals[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a python function to remove the first occurrence of a given value from a list. If the value is not found, do nothing and return the original list.","solution":"def remove_first_occurrence(lst, value): Removes the first occurrence of the given value from the list if present. Args: lst (list): The list from which to remove the value. value: The value to remove from the list. Returns: list: The list with the first occurrence of the value removed, or the original list if the value was not found. if value in lst: lst.remove(value) return lst"},{"question":"Write a python function to solve the problem of finding the maximum depth of a binary search tree (BST). The function should take the root of the BST as its input and return an integer representing the maximum depth of the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary search tree. :param root: TreeNode, the root of the binary search tree :return: int, maximum depth of the tree if not root: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to check the data type of a variable and print the appropriate message based on the data type. If the data type is integer, print \\"The variable is an integer.\\" If the data type is string, print \\"The variable is a string.\\" For any other data type, print \\"The variable is of another data type.\\"","solution":"def check_data_type(variable): Check the data type of a variable and return the appropriate message. Parameters: variable: The variable to check. Returns: A string message indicating the data type of the variable. if isinstance(variable, int): return \\"The variable is an integer.\\" elif isinstance(variable, str): return \\"The variable is a string.\\" else: return \\"The variable is of another data type.\\""},{"question":"Write a python function to implement the FizzBuzz problem. The function takes an integer n as input, and it should print from 1 to n, but for multiples of three print \\"Fizz\\" instead of the number, and for multiples of five print \\"Buzz\\". For numbers which are multiples of both three and five print \\"FizzBuzz\\".","solution":"def fizzbuzz(n): Print the FizzBuzz sequence from 1 to n. For multiples of three, print \\"Fizz\\" instead of the number. For multiples of five, print \\"Buzz\\" instead of the number. For numbers which are multiples of both three and five, print \\"FizzBuzz\\". result = [] for i in range(1, n+1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a python function to extract and return the highest numerical value from a given string. The string contains multiple numerical values separated by spaces, and the values may include negative numbers as well.","solution":"def highest_value_from_string(s): Extracts and returns the highest numerical value from a given string. Parameters: s (str): Input string containing numerical values separated by spaces. Returns: int or float: The highest numerical value from the string. numbers = list(map(float, s.split())) return max(numbers)"},{"question":"Write a python function to reverse a string in-place. If the string is mutable in Python, does reversing a string in-place affect the original string?","solution":"def reverse_string(s): Returns the reversed string of s. return s[::-1]"},{"question":"Write a python function to count the number of words in a sentence that contain exactly two vowels and exactly three consonants. Let's make the function case-insensitive.","solution":"def count_words_with_vowels_consonants(sentence): Counts the number of words in a sentence that contain exactly two vowels and exactly three consonants. Case-insensitive. Parameters: sentence (str): The input sentence. Returns: int: The count of words meeting the criteria. vowels = set(\\"aeiou\\") def has_exactly_two_vowels_and_three_consonants(word): word = word.lower() vowel_count = sum(1 for char in word if char in vowels) consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels) return vowel_count == 2 and consonant_count == 3 words = sentence.split() return sum(1 for word in words if has_exactly_two_vowels_and_three_consonants(word))"},{"question":"Write a python function to find the longest common prefix among the given strings. If there is no common prefix, return an empty string.","solution":"def longest_common_prefix(strs): Function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. :param strs: List of strings :return: Longest common prefix as a string if not strs: return \\"\\" # Initialize the prefix to the first string prefix = strs[0] # Compare the prefix with each string for s in strs[1:]: while s[:len(prefix)] != prefix: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix"},{"question":"Write a python function to generate the first \`n\` Fibonacci numbers using a generator function. Here \`n\` is a non-negative integer passed to the function. Your function should yield each Fibonacci number one by one. Using Python's generator feature can help in efficient memory usage when dealing with large sequences like Fibonacci numbers.","solution":"def fibonacci_numbers(n): Generator function to yield first n Fibonacci numbers. a, b = 0, 1 count = 0 while count < n: yield a a, b = b, a + b count += 1"},{"question":"Write a python function to reverse the order of the nodes in a singly linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the order of nodes in a singly linked list. :param head: The head node of the singly linked list. :return: The new head node of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the intersection of two lists using list comprehension.","solution":"def intersection(lst1, lst2): Returns the intersection of two lists using list comprehension. return [item for item in lst1 if item in lst2]"},{"question":"Write a python function to perform a depth-first search (DFS) on a graph using recursion. The graph will be represented as an adjacency list.","solution":"def dfs(graph, start, visited=None): Perform a depth-first search (DFS) on a graph using recursion. :param graph: Dictionary representing the adjacency list of the graph. :param start: The node to start the DFS from. :param visited: Set to keep track of visited nodes. :return: List of nodes in the order they were visited. if visited is None: visited = set() visited.add(start) result = [start] for neighbor in graph.get(start, []): if neighbor not in visited: result.extend(dfs(graph, neighbor, visited)) return result"},{"question":"Write a python function to compare two strings and return the lexicographically smallest string. If both strings are equal, return the first string.","solution":"def smallest_string(str1, str2): Compares two strings and returns the lexicographically smallest string. If both strings are equal, returns the first string. return min(str1, str2)"},{"question":"Write a python function to format a given list of integers as reverse comma-separated string.","solution":"def format_reverse_comma_separated(int_list): Returns a string containing the reverse of a given list of integers, separated by commas. Parameters: - int_list: List[int] : List of integers. Returns: - str : Comma-separated string of integers in reverse order. reversed_list = int_list[::-1] return ','.join(map(str, reversed_list))"},{"question":"Write a python function to find the mode of a list of numbers. The mode is the number that appears most frequently in the list. If there are multiple modes, the function should return them as a list. Also, handle cases where the list is empty.","solution":"from collections import Counter def find_mode(numbers): Returns the mode(s) of a list of numbers. If there are multiple modes, it returns them as a list. If the list is empty, it returns an empty list. if not numbers: return [] count = Counter(numbers) max_freq = max(count.values()) modes = [num for num, freq in count.items() if freq == max_freq] return modes"},{"question":"Write a python function to return the count of even numbers in a given list. However, if the count of even numbers is even, then return the product of all even numbers. If the count of even numbers is odd, then return the sum of all even numbers.","solution":"def process_even_numbers(numbers): Returns the count of even numbers in the list. If the count is even, returns the product of all even numbers. If the count is odd, returns the sum of all even numbers. :param numbers: List of integers :return: Total count of even numbers or the product/sum based on the criteria. even_numbers = [num for num in numbers if num % 2 == 0] count = len(even_numbers) if count == 0: return count # If no even numbers, return 0 if count % 2 == 0: # Return the product of all even numbers product = 1 for num in even_numbers: product *= num return product else: # Return the sum of all even numbers return sum(even_numbers)"},{"question":"Write a python function to find the element that appears more than n/2 times in the list where n is the length of the list.","solution":"def majority_element(nums): Returns the element that appears more than n/2 times in the list nums. If no such element exists, return None. count = {} for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > len(nums) // 2: return num return None"},{"question":"Write a python function to remove all duplicates from a sorted list and return the length of the list after removing duplicates.","solution":"def remove_duplicates(nums): Removes duplicates from a sorted list and returns the length of the list after removing duplicates. Parameters: nums (List[int]): A sorted list of integers. Returns: int: The length of the list after removing duplicates. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a python function to generate Fibonacci series using recursion.","solution":"def fibonacci_recursive(n): Returns the nth number in the Fibonacci series (0-indexed) using recursion. if n < 0: raise ValueError(\\"Input cannot be negative\\") if n == 0: return 0 elif n == 1: return 1 else: return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)"},{"question":"Write a python function to find the number of distinct integers in a list. How can we use Python sets to solve this problem efficiently?","solution":"def distinct_integers(lst): Returns the number of distinct integers in the list. return len(set(lst))"},{"question":"Write a python function to check if a given string is palindrome, consider only alphabetic characters and ignore case sensitivity.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, considering only alphabetic characters and ignoring case sensitivity. filtered_chars = [char.lower() for char in s if char.isalpha()] return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to find the nth value from the end of the reversed A sorted list where \` A[i] = i+1 \` for all \` 0 ≤ i ≤ n\`. The function should return the nth smallest element from the reversed list.","solution":"def nth_from_end_reversed_sorted(n): Returns the nth value from the end of the reversed sorted list where A[i] = i+1. Args: - n (int): index to fetch the value from the end. Returns: - int: nth smallest value from the reversed list. if n <= 0: raise ValueError(\\"The value of n should be a positive integer.\\") return n"},{"question":"Write a python function to solve the problem of finding the longest strictly increasing subsequence in a list of integers. The function should return the length of this subsequence.","solution":"def length_of_lis(nums): Returns the length of the longest strictly increasing subsequence in the list of integers. if not nums: return 0 dp = [1]*len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to find the longest common prefix with the first string as the reference. The function should return the longest common prefix between the first and the second string in the list. If there is no common prefix, the function should return an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix between the first and second string in the list. If there is no common prefix, returns an empty string. if not strs or len(strs) < 2: return \\"\\" first_str, second_str = strs[0], strs[1] min_length = min(len(first_str), len(second_str)) for i in range(min_length): if first_str[i] != second_str[i]: return first_str[:i] return first_str[:min_length]"},{"question":"Write a python function to perform a linear search on a sorted list.","solution":"def linear_search(sorted_list, target): Perform a linear search on a sorted list. Parameters: sorted_list (list): The sorted list to search within. target (int/float/str): The target value to search for. Returns: int: The index of the target in the sorted list if found, otherwise -1. for index, value in enumerate(sorted_list): if value == target: return index return -1"},{"question":"Write a python function to validate an email address using the \`re\` module.","solution":"import re def validate_email(email): Validates an email address using regular expressions. Returns True if the email is valid, False otherwise. pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' if re.match(pattern, email): return True else: return False"},{"question":"Write a python function to find all the unique triplets in the array that sum to zero. Give an example where your function works and explain it using comments.","solution":"def three_sum(nums): Returns a list of all unique triplets in the array which give the sum of zero. Args: nums: List[int] - the input list of integers Returns: List[List[int]] - list of lists, where each internal list represents a triplet summing to zero nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate elements continue left, right = i + 1, len(nums) - 1 while left < right: summation = nums[i] + nums[left] + nums[right] if summation < 0: left += 1 elif summation > 0: right -= 1 else: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: # Skip duplicate elements left += 1 while left < right and nums[right] == nums[right - 1]: # Skip duplicate elements right -= 1 left += 1 right -= 1 return triplets"},{"question":"Write a python function to generate a list of the first \`n\` Fibonacci numbers. The Fibonacci sequence is a series of numbers where a number is the addition of the last two numbers, starting with 0 and 1.","solution":"def generate_fibonacci(n): Generates a list of the first \`n\` Fibonacci numbers. Parameters: n (int): The number of Fibonacci numbers to generate. Returns: list: A list of the first \`n\` Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0] if n > 1: fibonacci_sequence.append(1) for i in range(2, n): next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2] fibonacci_sequence.append(next_number) return fibonacci_sequence"},{"question":"Write a python function to calculate the sum of the digits of a number n. The function should not use the \`str\` or \`int\` functions in its implementation.","solution":"def sum_of_digits(n): Returns the sum of the digits of the number n without using str or int functions. if n < 0: n = -n sum_digits = 0 while n > 0: sum_digits += n % 10 n //= 10 return sum_digits"},{"question":"Write a python function to return the sum of the digits in a integer number. If the integer number is negative, first reverse the number and then sum the digits.","solution":"def sum_of_digits(n): Returns the sum of the digits in an integer number. If the integer number is negative, first reverse the number and then sum the digits. # Handle negative numbers by reversing the digits first if n < 0: n = int(str(n)[:0:-1]) # Sum the digits of the (possibly modified) number return sum(int(digit) for digit in str(n))"},{"question":"Write a python function to find the intersection of two sets, but return the result as a sorted list.","solution":"def intersection_as_sorted_list(set1, set2): Returns the intersection of two sets as a sorted list. intersection = set1 & set2 sorted_list = sorted(intersection) return sorted_list"},{"question":"Write a python function to find the maximum length of a contiguous subarray with sum k in a given list of integers.","solution":"def max_length_subarray_with_sum_k(nums, k): Finds the maximum length of a contiguous subarray with sum k in the given list of integers. Parameters: nums (list): A list of integers. k (int): The target sum of the subarray. Returns: int: The maximum length of a contiguous subarray with sum k. sum_dict = {} current_sum = 0 max_length = 0 for i, num in enumerate(nums): current_sum += num if current_sum == k: max_length = i + 1 # +1 because index starts from 0 if (current_sum - k) in sum_dict: max_length = max(max_length, i - sum_dict[current_sum - k]) if current_sum not in sum_dict: sum_dict[current_sum] = i return max_length"},{"question":"Write a python function to reverse a string using slicing. How does slicing work in this context?","solution":"def reverse_string(s): Returns the reversed string using slicing. return s[::-1] # Explanation of slicing in this context: # s[start:stop:step] # - start: The starting index of the slice. # - stop: The ending index of the slice. # - step: The step with which the slicing is done. # In this case, we use s[::-1], where: # - start is omitted, meaning it starts from the beginning of the string. # - stop is omitted, meaning it goes until the end of the string. # - step is -1, meaning it takes steps of size 1 going backwards, effectively reversing the string."},{"question":"Write a python function to generate a list of the first n Fibonacci numbers. The function should use recursion to calculate the Fibonacci sequence. Also, include a simple test harness that demonstrates the function's correctness.","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers using recursion. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_seq = fibonacci(n - 1) fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Write a python function to remove duplicates from an unsorted list while maintaining the original order using a different approach from the provided example.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining the original order. seen = set() output_list = [] for item in input_list: if item not in seen: seen.add(item) output_list.append(item) return output_list"},{"question":"Write a python function to remove consecutive duplicates from a string while preserving the original order of characters.","solution":"def remove_consecutive_duplicates(input_string): Removes consecutive duplicates from a string while preserving the original order of characters. Parameters: input_string (str): The input string from which consecutive duplicates need to be removed. Returns: str: A string with consecutive duplicates removed. if not input_string: return \\"\\" result = [input_string[0]] # Initialize with the first character for i in range(1, len(input_string)): if input_string[i] != input_string[i - 1]: result.append(input_string[i]) return ''.join(result)"},{"question":"Write a python function to calculate and return the factorial of a number. If the input number is negative, the function should raise a ValueError with a message \\"Factorial is not defined for negative numbers.\\" If the input number is not an integer, the function should raise a TypeError with a message \\"Input must be an integer.\\" If the input number is greater than 10, the function should raise a ValueError with a message \\"Input number is too large.\\"","solution":"def factorial(n): Calculates and returns the factorial of a number. Raises a ValueError for negative numbers, raises a TypeError for non-integers, and raises a ValueError if the number is greater than 10. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n > 10: raise ValueError(\\"Input number is too large.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to calculate the total revenue generated by a store that sells products. The function should take a list of tuples as input, where each tuple contains the product name, unit price, and quantity sold. The function should return the total revenue generated by the store.","solution":"def total_revenue(sales): Calculates the total revenue generated by a store. Parameters: sales (list of tuples): Each tuple contains the product name (str), unit price (float), and quantity sold (int). Returns: float: The total revenue generated by the store. return sum(unit_price * quantity_sold for _, unit_price, quantity_sold in sales)"},{"question":"Write a python function to find the maximum number in an array of integers. You should also include the functionality to handle any exceptions that might arise during the execution of the function.","solution":"def find_max(arr): Returns the maximum number in an array of integers. Handles exceptions if the input is not a list or if the list is empty. if not isinstance(arr, list): raise TypeError(\\"Input should be of type list.\\") if len(arr) == 0: raise ValueError(\\"Array should not be empty.\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a python function to return the squared value of each item in a list. Use the list comprehension.","solution":"def square_list(lst): Returns a list containing the squared value of each item in the input list. Parameters: lst (list): A list of numbers. Returns: list: A list of squared numbers. return [x**2 for x in lst]"},{"question":"Write a python function to determine if a given string is a valid email address. The function should use the \`re\` module for regular expression matching. The function should return \`True\` if the string is a valid email address, otherwise return \`False\`.","solution":"import re def is_valid_email(email): Determine if the given string is a valid email address using regular expression matching. Parameters: email (str): The email address to validate. Returns: bool: True if the email address is valid, otherwise False. email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' return re.match(email_regex, email) is not None"},{"question":"Write a python function to find the youngest person's age in a dictionary where keys are names and values are ages.","solution":"def find_youngest_age(ages_dict): Finds the youngest person's age in a dictionary where keys are names and values are ages. :param ages_dict: Dictionary of names and ages :return: Age of the youngest person if not ages_dict: return None return min(ages_dict.values())"},{"question":"Write a python function to count the number of unique words in a given string. You need to neglect the case sensitivity and punctuation. For example, \\"Hello, world!\\" and \\"hello world\\" should be considered identical in terms of unique words.","solution":"import string def count_unique_words(s): Returns the count of unique words in the input string s. The comparison is case-insensitive and ignores punctuation. # Convert string to lower case s = s.lower() # Remove punctuation translator = str.maketrans('', '', string.punctuation) s = s.translate(translator) # Split the string into words words = s.split() # Create a set of unique words unique_words = set(words) # Return the count of unique words return len(unique_words)"},{"question":"Write a python function to find the second largest number in a list of integers. If there is no second largest number (because the list is too short or all numbers are the same), return \`None\`.","solution":"def second_largest(numbers): Returns the second largest number in a list of integers. If there is no second largest (list too short or all elements the same), returns None. if len(numbers) < 2: return None first = second = float('-inf') for number in numbers: if number > first: second, first = first, number elif first > number > second: second = number return second if second != float('-inf') else None"},{"question":"Write a python function to convert a given string of numeric characters into an integer using bit manipulation.","solution":"def string_to_int(s): Converts a string of numeric characters into an integer using bit manipulation. if not s: raise ValueError(\\"Input string cannot be empty\\") result = 0 sign = 1 start_index = 0 if s[0] == '-': sign = -1 start_index = 1 for i in range(start_index, len(s)): if not ('0' <= s[i] <= '9'): raise ValueError(f\\"Invalid character '{s[i]}' in input string\\") result = (result << 3) + (result << 1) + (ord(s[i]) - ord('0')) return result * sign"},{"question":"Write a python function to calculate the Glasgow Coma Scale (GCS) score based on the input values of the patient's responses in three categories: Eye opening response, Verbal response, and Motor response.","solution":"def gcs_score(eye_response, verbal_response, motor_response): Calculates the Glasgow Coma Scale (GCS) score. Parameters: eye_response (int): Score for eye opening response. verbal_response (int): Score for verbal response. motor_response (int): Score for motor response. Returns: int: Total GCS score. return eye_response + verbal_response + motor_response"},{"question":"Write a python function to merge two dictionaries, with the second dictionary's values overwriting the first dictionary's values if there are any overlapping keys.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries, with the second dictionary's values overwriting the first dictionary's values if there are any overlapping keys. Parameters: dict1 (dict): First dictionary. dict2 (dict): Second dictionary. Returns: dict: Resulting dictionary after merging. merged_dict = dict1.copy() merged_dict.update(dict2) return merged_dict"},{"question":"Write a python function to return the smallest common multiple of two integers. What does smallest common multiple mean? Do you also mean the greatest common divisor?","solution":"import math def lcm(a, b): Returns the least common multiple of two integers a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a python function to calculate the factorial of a number. Here is the code you want to complete. Can you help me fix it?","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to return the second smallest unique number in a given list of numbers. For example, given the list [4, 2, 9, 2, 3, 5], the function should return 3. If the list does not have a distinct second smallest number, the function should return None.","solution":"def second_smallest_unique(numbers): Returns the second smallest unique number from the list, or None if it does not exist. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to find the first duplicate character in a given string.","solution":"def first_duplicate_character(s): Returns the first duplicate character in the string s. If there is no duplicate character, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to implement Graph using an adjacency list representation.","solution":"class Graph: def __init__(self): self.graph = {} def add_edge(self, vertex, edge): if vertex not in self.graph: self.graph[vertex] = [] self.graph[vertex].append(edge) def get_edges(self, vertex): return self.graph.get(vertex, []) def __repr__(self): return str(self.graph)"},{"question":"Write a python function to check a binary number has more 0s or more 1s. If both counts are equal then return the string \\"Equal\\". If the count of 0s is more then return \\"More Zero\\". If the count of 1s is more then return \\"More One\\".","solution":"def check_binary_string(binary_string): This function checks a binary string and returns whether it has more 0s, more 1s, or an equal number of 0s and 1s. Parameters: binary_string (str): A string consisting of '0's and '1's. Returns: str: \\"Equal\\" if there are an equal number of 0s and 1s. \\"More Zero\\" if there are more 0s than 1s. \\"More One\\" if there are more 1s than 0s. count_0 = binary_string.count('0') count_1 = binary_string.count('1') if count_0 > count_1: return \\"More Zero\\" elif count_1 > count_0: return \\"More One\\" else: return \\"Equal\\""},{"question":"Write a python function to check whether a binary string has alternating bits or not. A binary string has alternating bits if no two consecutive characters are the same.","solution":"def has_alternating_bits(binary_string): Check whether a binary string has alternating bits. A binary string has alternating bits if no two consecutive characters are the same. :param binary_string: str - The input binary string :return: bool - True if the binary string has alternating bits, False otherwise for i in range(1, len(binary_string)): if binary_string[i] == binary_string[i - 1]: return False return True"},{"question":"Write a python function to return the maximum value in an integer list.","solution":"def get_max_value(int_list): Returns the maximum value in an integer list. if not int_list: # check if the list is empty return None max_value = int_list[0] for num in int_list: if num > max_value: max_value = num return max_value"},{"question":"Write a python function to implement a circular queue with enqueue, dequeue, and display operations. The circular queue is implemented using a list with a fixed size.","solution":"class CircularQueue: def __init__(self, size): self.size = size self.queue = [None] * size self.front = self.rear = -1 def enqueue(self, data): # Check if the queue is full if (self.rear + 1) % self.size == self.front: return \\"Queue is Full\\" # If the queue is empty if self.front == -1: self.front = 0 # Update the rear and insert the new element self.rear = (self.rear + 1) % self.size self.queue[self.rear] = data return \\"Inserted\\" def dequeue(self): # Check if the queue is empty if self.front == -1: return \\"Queue is Empty\\" # Retrieve the element to be dequeued data = self.queue[self.front] # If the queue has only one element if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return data def display(self): if self.front == -1: return \\"Queue is Empty\\" elements = [] i = self.front while True: elements.append(self.queue[i]) if i == self.rear: break i = (i + 1) % self.size return elements"},{"question":"Write a python function to find the minimum number of mutations required to transform a given start string into a target string by changing exactly one character at a time, where only characters 'A', 'C', 'G', and 'T' are allowed. You can use a breadth-first search (BFS) approach for this task.","solution":"from collections import deque def minMutation(start, end, bank): Returns the minimum number of mutations required to transform the start string to the end string. if end not in bank: return -1 bank = set(bank) queue = deque([(start, 0)]) visited = set([start]) while queue: current, mutations = queue.popleft() if current == end: return mutations for i in range(len(current)): for char in 'ACGT': if char != current[i]: mutated = current[:i] + char + current[i+1:] if mutated in bank and mutated not in visited: visited.add(mutated) queue.append((mutated, mutations + 1)) return -1"},{"question":"Write a python function to convert an epoch timestamp to a human-readable date string.","solution":"import datetime def epoch_to_human_readable(epoch_timestamp): Converts an epoch timestamp to a human-readable date string format. Parameters: epoch_timestamp (int or float): The epoch timestamp to convert. Returns: str: The human-readable date string in 'YYYY-MM-DD HH:MM:SS' format. return datetime.datetime.utcfromtimestamp(epoch_timestamp).strftime('%Y-%m-%d %H:%M:%S')"},{"question":"Write a python function to replace all occurrences of a string with another string in a given text. The function will take three parameters: the original text, the string to be replaced, and the string to replace it with. The function should return the modified text.","solution":"def replace_string(original_text, to_replace, replace_with): Replaces all occurrences of 'to_replace' with 'replace_with' in the 'original_text'. :param original_text: The text in which replacements should be performed :param to_replace: The string to be replaced :param replace_with: The string to replace with :return: Modified text with replacements return original_text.replace(to_replace, replace_with)"},{"question":"Write a python function to find and print the maximum and minimum numbers from a given list of tuples. Each tuple contains three numbers.","solution":"def find_min_max(tuples_list): Given a list of tuples, each containing three numbers, find and print the maximum and minimum numbers in the entire list of tuples. Parameters: tuples_list (list of tuples): A list where each element is a tuple containing three numbers. Returns: tuple: A tuple containing the minimum and maximum numbers in the list of tuples. all_elements = [elem for tup in tuples_list for elem in tup] min_num = min(all_elements) max_num = max(all_elements) return (min_num, max_num)"},{"question":"Write a python function to find the given number is composite, prime, or neither.","solution":"def classify_number(num): Classifies the given number as 'prime', 'composite', or 'neither'. Parameters: - num (int): The number to be classified. Returns: - str: The classification of the number. if num < 2: return \\"neither\\" for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return \\"composite\\" return \\"prime\\""},{"question":"Write a python function to check if two lists have the same elements, regardless of their order. The function should take two input lists and return a boolean value indicating whether the two lists contain the same elements.","solution":"def have_same_elements(list1, list2): Check if two lists have the same elements, regardless of their order. Args: list1: First list to compare. list2: Second list to compare. Returns: bool: True if both lists have the same elements, False otherwise. return sorted(list1) == sorted(list2)"},{"question":"Write a python function to return the middle element of a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_middle(head): Returns the middle element of the linked list. If the list has an even number of nodes, returns the second middle node. :param head: ListNode, the head of the linked list :return: ListNode, the middle node of the linked list slow_ptr = head fast_ptr = head while fast_ptr and fast_ptr.next: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next return slow_ptr"},{"question":"Write a python function to find all the Armstrong numbers within a given range.","solution":"def is_armstrong(number): Check if a number is an Armstrong number. An Armstrong number of a given number of digits is a number such that the sum of its digits each raised to the power of the number of digits is equal to the number itself. digits = list(map(int, str(number))) num_digits = len(digits) return sum(digit ** num_digits for digit in digits) == number def find_armstrong_numbers(start, end): Find all Armstrong numbers within a given range [start, end]. Arguments: start -- the start of the range. end -- the end of the range. Returns: A list of Armstrong numbers within the provided range. return [num for num in range(start, end + 1) if is_armstrong(num)]"},{"question":"Write a python function to find the index of the longest increasing subsequence in a given list of integers. If there are multiple longest increasing subsequences, return the index of the first one.","solution":"def longest_increasing_subsequence_index(arr): Returns the starting index of the longest increasing subsequence in a given list of integers. If there are multiple longest increasing subsequences, it returns the index of the first one. if not arr: return -1 n = len(arr) longest_length = 0 longest_index = 0 current_length = 0 start_index = 0 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 else: if current_length > longest_length: longest_length = current_length longest_index = start_index start_index = i current_length = 0 if current_length > longest_length: longest_length = current_length longest_index = start_index return longest_index"},{"question":"Write a python function to find the maximum subarray sum in a given list of integers. The function should take the list as input and return the maximum sum of any contiguous subarray within the given list.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given list. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to search for a given element using binary search, not using recursion","solution":"def binary_search(arr, target): Searches for the target element in a sorted list arr using binary search. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 mid_val = arr[mid] if mid_val == target: return mid elif mid_val < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to sort three given numbers using selection sort algorithm.","solution":"def selection_sort_three_numbers(a, b, c): Sorts three given numbers using the selection sort algorithm. numbers = [a, b, c] n = len(numbers) for i in range(n): # Find the minimum element in remaining unsorted array min_index = i for j in range(i+1, n): if numbers[j] < numbers[min_index]: min_index = j # Swap the found minimum element with the first element numbers[i], numbers[min_index] = numbers[min_index], numbers[i] return numbers[0], numbers[1], numbers[2]"},{"question":"Write a python function to sort a list in ascending order and update the sorted list. Here is the initial unsorted list: items = [34, 2, 99, 23, 11]","solution":"def sort_list(items): Sorts the list in ascending order and returns it. return sorted(items)"},{"question":"Write a python function to sort an array in using bubble sort. Define the function to accept 2 parameters; the array to be sorted and the size of the array. The function should return the sorted array.","solution":"def bubble_sort(arr, n): Sorts an array using the bubble sort algorithm. Parameters: arr (list): The array to be sorted. n (int): The size of the array. Returns: list: The sorted array. for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to remove all falsy values from a list. A falsy value in Python is a value that is considered \`False\` in a boolean context. False, None, 0, 0.0, 0j, (), {}, [], and \`''\` (empty string) are all considered falsy values.","solution":"def remove_falsy_values(lst): Removes all falsy values from the provided list. Args: lst (list): The list from which to remove falsy values. Returns: list: A new list with all falsy values removed. return [item for item in lst if item]"},{"question":"Write a python function to parse a JSON string representing a list of dictionaries, where each dictionary contains keys \\"id\\" and \\"name\\". The function should return a dictionary where the keys are \\"id\\" values and the values are \\"name\\" values.","solution":"import json def parse_json_to_dict(json_str): Parses a JSON string representing a list of dictionaries, where each dictionary contains keys \\"id\\" and \\"name\\". Returns a dictionary where the keys are \\"id\\" values and the values are \\"name\\" values. list_of_dicts = json.loads(json_str) return {item['id']: item['name'] for item in list_of_dicts}"},{"question":"Write a python function to merge two sorted linked lists and return it as a new sorted linked list. The new list should be made by splicing together the nodes of the first two lists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merge two sorted linked lists l1 and l2 into a new sorted linked list. dummy = ListNode() # Starting point current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Write a python function to find a mode of a list of integers. The function should return the mode value if the list is not empty and contains at least one number. If the list is empty or does not contain any number, the function should return \`None\`.","solution":"from collections import Counter def find_mode(nums): Returns the mode of a list of integers. If the list is empty or does not contain any number, returns None. if not nums: return None count = Counter(nums) max_count = max(count.values()) mode_candidates = [key for key, val in count.items() if val == max_count] # If there's a tie for modes, return the smallest one return min(mode_candidates)"},{"question":"Write a python function to return the longest substring without repeating characters. For example, if the input is \\"dvdf\\", the output should be \\"vdf\\". Explain the code step by step.","solution":"def longest_substring_without_repeating(s): Returns the longest substring without repeating characters. start = 0 max_length = 0 max_substring = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 max_substring = s[start:i+1] used_chars[char] = i return max_substring"},{"question":"Write a python function to return the k-th smallest element from an array. When there are multiple valid solutions, return any of them.","solution":"import heapq def kth_smallest(arr, k): Returns the k-th smallest element from the array. Parameters: arr (list of int): The array from which to find the k-th smallest element. k (int): The position (1-based) of the smallest element to find. Returns: int: The k-th smallest element in the array. if not 1 <= k <= len(arr): raise ValueError(\\"k is out of bounds\\") min_heap = arr[:] heapq.heapify(min_heap) for _ in range(k - 1): heapq.heappop(min_heap) return heapq.heappop(min_heap)"},{"question":"Write a python function to find the smallest number that is evenly divisible by all numbers from 1 to n. This number is known as the least common multiple (LCM).","solution":"from functools import reduce import math def lcm(a, b): Returns the least common multiple of a and b. return a * b // math.gcd(a, b) def smallest_multiple(n): Returns the smallest number that is evenly divisible by all numbers from 1 to n. return reduce(lcm, range(1, n + 1))"},{"question":"Write a python function to solve the problem of finding the shortest subarray that has at least one repeated element, using the sliding window technique.","solution":"def shortest_subarray_with_duplicate(nums): Finds the shortest subarray that has at least one repeated element. Args: nums (list of int): List of integers. Returns: tuple: Indices (start, end) of the shortest subarray. Returns (-1, -1) if no duplicate exists. if len(nums) == 0: return -1, -1 num_indices = {} min_length = float('inf') start, end = -1, -1 for i, num in enumerate(nums): if num in num_indices: previous_index = num_indices[num] if i - previous_index < min_length: min_length = i - previous_index start, end = previous_index, i num_indices[num] = i return (start, end)"},{"question":"Write a python function to find the unique elements in a list and return them as a new list.","solution":"def find_unique_elements(input_list): Returns a list of unique elements from the input list. return list(set(input_list))"},{"question":"Write a python function to find the nth Fibonacci number. The function should use a looping structure and not recursion. The nth Fibonacci number is defined as F(n) = F(n-1) + F(n-2) with initial conditions F(0) = 0 and F(1) = 1. Your function should handle negative inputs by returning \\"Input should be a non-negative integer\\".","solution":"def fibonacci(n): Returns the nth Fibonacci number. If the input is negative, returns an error message. if not isinstance(n, int) or n < 0: return \\"Input should be a non-negative integer\\" if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to calculate the factorial of a given number. The function should be optimized for large numbers and should handle cases where the input number is negative and where the input number is zero. Write an appropriate test suite to validate the correctness of the function.","solution":"import math def factorial(n): Returns the factorial of a given number n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0: return 1 else: return math.factorial(n)"},{"question":"Write a python function to find a mean of an array.","solution":"def find_mean(array): Returns the mean of the given array. If the array is empty, it returns None. if not array: return None total_sum = sum(array) count = len(array) return total_sum / count"},{"question":"Write a python function to list the length of each string in a given list.","solution":"def list_string_lengths(str_list): Takes a list of strings and returns a list containing the length of each string. Parameters: str_list (list): List of strings Returns: list: List of integers representing the lengths of the strings return [len(s) for s in str_list]"},{"question":"Write a python function to reverse a string. You can use any method you like as long as the problem is solved. Additionally, provide a brief explanation of your solution.","solution":"def reverse_string(s: str) -> str: Reverses the given string and returns the reversed string. :param s: The string to be reversed. :return: The reversed string. return s[::-1]"},{"question":"Write a python function to take an array of integers and return the count of the number of elements that are less than the average of the array.","solution":"def count_below_average(arr): Returns the count of elements that are less than the average of the array. Args: arr (list): List of integers. Returns: int: Count of elements below the average. if not arr: return 0 average = sum(arr) / len(arr) count = sum(1 for x in arr if x < average) return count"},{"question":"Write a python function to find the largest continuous subarray sum in a list of integers. This function needs to return the maximum sum and the start and end indices of the subarray. If the list is empty, return None for all three values.","solution":"def largest_continuous_subarray_sum(arr): Finds the largest continuous subarray sum in a list of integers. Returns: max_sum (int): The maximum sum of the continuous subarray. start_index (int): The starting index of the subarray. end_index (int): The ending index of the subarray. if not arr: return None, None, None current_sum = max_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum < 0: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"Write a python function to check if the corresponding letters in two strings at the same positions are the same. The function should take two arguments. The first argument is the first string, and the second argument is a list of positions to be compared. The function should return a list containing Boolean values indicating whether the characters in the original string at the given positions are the same.","solution":"def check_matching_letters(string1, positions): Check if corresponding letters in two strings at the same positions are the same. Args: - string1 (str): The first string to be compared. - positions (list of tuple): A list of tuples, each containing two positions to be compared. Returns: - list: A list of Boolean values indicating whether the characters in the original string at the given positions are the same. result = [] for pos1, pos2 in positions: if pos1 < len(string1) and pos2 < len(string1): result.append(string1[pos1] == string1[pos2]) else: result.append(False) # One of the positions is out of range of the string1 return result"},{"question":"Write a python function to validate an Indian phone number. The phone number should be in the format +(country code) 10-digit local phone number. For instance, +91 9876543210 is a valid phone number.","solution":"import re def validate_indian_phone_number(phone_number): Validates an Indian phone number. The phone number should be in the format +(country code) 10-digit local phone number. Examples of valid phone numbers: +91 9876543210 Args: - phone_number (str): The phone number to validate. Returns: - bool: True if the phone number is valid, False otherwise. pattern = re.compile(r'^+91 d{10}') return bool(pattern.match(phone_number))"},{"question":"Write a python function to print the reverse of a string using recursion.","solution":"def reverse_string_recursive(s): Returns the reverse of a string using recursion. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a python function to scramble a string using Caesar cipher with a fixed shift of 3. The function should take a string as input and return the scrambled string. Remember to handle both uppercase and lowercase letters.","solution":"def caesar_cipher(input_string): Scrambles a string using Caesar cipher with a fixed shift of 3. result = [] shift = 3 for char in input_string: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') shifted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) result.append(shifted_char) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to check if a string is a palindrome using recursion. A palindrome is a word that reads the same backward as forward. Examples of palindromes include \\"racecar\\", \\"level\\", and \\"noon\\".","solution":"def is_palindrome_recursive(s): Returns True if the string \`s\` is a palindrome, False otherwise. Uses recursion to check the palindrome property. # Base cases if len(s) <= 1: return True if s[0] != s[-1]: return False # Recursive case return is_palindrome_recursive(s[1:-1])"},{"question":"Write a python function to find the largest and second largest number in a given list.","solution":"def find_largest_and_second_largest(numbers): Returns a tuple with the largest and second largest numbers in the given list. If there are fewer than two unique numbers, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return (unique_numbers[0], unique_numbers[1])"},{"question":"Write a python function to list all prime numbers up to a given number","solution":"def list_primes(n): Returns a list of all prime numbers up to n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to check if the given number N is divisible by 11.","solution":"def is_divisible_by_11(n): Checks if the given number n is divisible by 11. Parameters: n (int): The number to check. Returns: bool: True if n is divisible by 11, False otherwise. return n % 11 == 0"},{"question":"Write a python function to find the maximum element in a binary search tree (BST) without using recursion or any additional data structures.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_max_in_bst(root): Find the maximum element in a Binary Search Tree (BST) without using recursion or any additional data structures. Parameters: root (TreeNode): The root node of the BST. Returns: int: The maximum element in the BST. If the tree is empty, return None. if not root: return None current = root while current.right: current = current.right return current.val"},{"question":"Write a python function to check if an integer n is a multiple of k. if it is, return True, and if not, return False.","solution":"def is_multiple_of(n, k): Checks if n is a multiple of k. Parameters: n (int): The number to check. k (int): The potential divisor. Returns: bool: True if n is a multiple of k, otherwise False. if k == 0: raise ValueError(\\"k cannot be zero as division by zero is undefined.\\") return n % k == 0"},{"question":"Write a python function to return the sum of all numbers in a nested list. The function should handle both single and multiple levels of nesting.","solution":"def nested_sum(lst): Returns the sum of all numbers in a nested list. total = 0 for element in lst: if isinstance(element, list): total += nested_sum(element) else: total += element return total"},{"question":"Write a python function to illustrate the Towers of Hanoi problem using recursion.","solution":"def towers_of_hanoi(n, source, target, auxiliary, moves=None): Solve the Towers of Hanoi problem and return the list of moves. Parameters: n -- number of disks source -- the start rod target -- the target rod auxiliary -- the auxiliary rod moves -- the list of moves (initially None, and will be populated by the move sequences) Returns: A list of moves, each represented as a tuple (source_rod, target_rod) if moves is None: moves = [] if n > 0: towers_of_hanoi(n-1, source, auxiliary, target, moves) moves.append((source, target)) towers_of_hanoi(n-1, auxiliary, target, source, moves) return moves"},{"question":"Write a python function to reverse the given string without using any built-in string reversal methods.","solution":"def reverse_string(s): Reverses the given string without using any built-in string reversal methods. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to sort a list of dictionaries based on a specific key. The function should also handle cases where the key may not exist in some dictionaries in the list.","solution":"def sort_dicts_by_key(lst, key): Sort a list of dictionaries based on a specific key, handling cases where the key may not exist in some dictionaries. Args: lst (list): The list of dictionaries to sort. key (str): The key to sort the dictionaries by. Returns: list: A list of dictionaries sorted by the specified key. return sorted(lst, key=lambda d: d.get(key, float('inf')))"},{"question":"Write a python function to swap two numbers without using a temporary variable, that swaps two numbers given as inputs.","solution":"def swap_numbers(a, b): Swaps two numbers without using a temporary variable. Returns the swapped numbers. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a python function to find the largest number in a given list. Please include error handling for edge cases such as empty lists and lists containing non-numeric values.","solution":"def find_largest(nums): Returns the largest number in a given list. Handles edge cases such as empty list and non-numeric values. Parameters: nums (list): A list of elements Returns: largest (float): The largest number in the list if not nums: raise ValueError(\\"The list is empty\\") largest = float('-inf') for num in nums: if not isinstance(num, (int, float)): raise ValueError(f\\"List contains non-numeric value: {num}\\") if num > largest: largest = num return largest"},{"question":"Write a python function to solve a Sudoku puzzle. The function should take a 2D list representing a Sudoku board and solve it using backtracking.","solution":"def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. Args: board: List[List[int]] -- 2D list representing the Sudoku board, with 0 representing empty cells. Returns: bool -- True if the Sudoku puzzle is solved, otherwise False. find = find_empty(board) if not find: return True else: row, col = find for num in range(1, 10): if is_valid(board, num, (row, col)): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty(board): Finds an empty cell in the Sudoku board. Args: board: List[List[int]] -- 2D list representing the Sudoku board. Returns: tuple -- Position of an empty cell as (row, col). Returns None if no empty cell is found. for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 0: return (i, j) return None def is_valid(board, num, pos): Checks if placing a number in a given position is a valid move. Args: board: List[List[int]] -- 2D list representing the Sudoku board. num: int -- Number to place in the Sudoku board. pos: tuple -- Position to place the number as (row, col). Returns: bool -- True if the move is valid, otherwise False. for i in range(len(board[0])): if board[pos[0]][i] == num and pos[1] != i: return False for i in range(len(board)): if board[i][pos[1]] == num and pos[0] != i: return False box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y*3, box_y*3 + 3): for j in range(box_x*3, box_x*3 + 3): if board[i][j] == num and (i,j) != pos: return False return True"},{"question":"Write a python function to filter out all the even numbers in a list of integers and the numbers that are multiples of 3.","solution":"def filter_even_and_multiples_of_three(nums): Filters out even numbers and numbers that are multiples of 3 from a list. Args: nums (list of int): The list of integers to filter. Returns: list of int: A list with even numbers and numbers that are multiples of 3 removed. return [num for num in nums if num % 2 != 0 and num % 3 != 0]"},{"question":"Write a python function to find all pairs in an integer array whose sum is equal to a given number. The function should return the pairs as a list of tuples.","solution":"def find_pairs_with_sum(arr, target_sum): Returns a list of tuples containing pairs of integers from the array that add up to the target_sum. pairs = [] seen = set() for num in arr: complement = target_sum - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a python function to find the longest common subsequence between two strings using dynamic programming.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings. Args: s1 (str): The first string. s2 (str): The second string. Returns: int: The length of the longest common subsequence. m, n = len(s1), len(s2) # Create a 2D array to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a python function to find the sum of all prime numbers less than a given number n. Here, n is a positive integer and n < 10^6.","solution":"def sum_primes(n): Returns the sum of all prime numbers less than a given number n. if n < 2: return 0 sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return sum(num for num, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a python function to sort an array by parity and return the sorted array.","solution":"def sort_by_parity(arr): Sorts an array by parity. All even numbers come before odd numbers in the returned array. Parameters: arr (list of int): The input array to be sorted by parity. Returns: list of int: The array sorted by parity. return sorted(arr, key=lambda x: x % 2)"},{"question":"Write a python function to check if all elements in a list are greater than a given value.","solution":"def all_elements_greater_than(lst, value): Check if all elements in the list are greater than the specified value. Parameters: lst (list): A list of elements to check. value (numeric): The value to compare each element against. Returns: bool: True if all elements in the list are greater than the specified value, False otherwise. return all(element > value for element in lst)"},{"question":"Write a python function to round up a given number to the nearest multiple of a specified base. For instance, if the base is 10, you need to round up 23 to 30. If the base is 15, you need to round up 23 to 30. If the base is 4, you need to round up 23 to 24.","solution":"import math def round_up_to_base(number, base): Rounds up the given number to the nearest multiple of the specified base. Parameters: number (int or float): The number to round up. base (int or float): The base to which the number has to be rounded up. Returns: int or float: The rounded up number to the nearest multiple of the specified base. return math.ceil(number / base) * base"},{"question":"Write a python function to return the first word of a string.","solution":"def first_word(s): Returns the first word of the string. words = s.split() return words[0] if words else \\"\\""},{"question":"Write a python function to find and return the indices of all occurrences of the substring \\"bob\\" in the given string \`s\`. The function should return a list of indices where each index represents the starting position of the substring \\"bob\\" in the string \`s\`. If the substring \\"bob\\" is not found, the function should return an empty list.","solution":"def find_bob_indices(s): Returns a list of indices where the substring \\"bob\\" starts in the string s. indices = [] sub_str = \\"bob\\" sub_len = len(sub_str) for i in range(len(s) - sub_len + 1): if s[i:i + sub_len] == sub_str: indices.append(i) return indices"},{"question":"Write a python function to find a sub-string in a given string. It should return the starting and ending index of the sub-string if found, else return -1.","solution":"def find_substring(main_string, sub_string): Find a sub-string in a given string. Parameters: main_string (str): The main string to search in. sub_string (str): The sub-string to search for. Returns: tuple: A tuple containing the starting and ending index of the sub-string if found, else returns -1. start_idx = main_string.find(sub_string) if start_idx == -1: return -1 end_idx = start_idx + len(sub_string) - 1 return (start_idx, end_idx)"},{"question":"Write a python function to remove all duplicates from an unsorted linked list and return the sorted list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_duplicates_and_sort(head): Removes duplicates from an unsorted linked list and returns the sorted list. if not head: return None # Use a set to store values and avoid duplicates node_values = set() current = head # Traverse the list and collect unique values while current: node_values.add(current.val) current = current.next # Convert the set to a sorted list sorted_values = sorted(node_values) # Create a new sorted linked list without duplicates dummy = ListNode() current = dummy for value in sorted_values: current.next = ListNode(value) current = current.next return dummy.next"},{"question":"Write a python function to print reversed version of a string without using any slicing or built-in functions.","solution":"def reverse_string(s): Returns the reversed version of the input string s. reversed_s = '' for char in s: reversed_s = char + reversed_s return reversed_s"},{"question":"Write a python function to calculate the total number of digits in a given natural number.","solution":"def count_digits(n): Returns the total number of digits in a given natural number n. if n == 0: return 1 count = 0 while n > 0: n //= 10 count += 1 return count"},{"question":"Write a python function to filter a list based on a condition using list comprehension. For example, filter out the even numbers from a given list of integers.","solution":"def filter_even_numbers(numbers): Filters out the even numbers from a given list of integers. Args: numbers (list of int): List of integers. Returns: list of int: List containing only odd integers from the input list. return [num for num in numbers if num % 2 != 0]"},{"question":"Write a python function to merge two sorted lists into a single sorted list. The function should be efficient and not modify the original lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Args: list1 (list): A sorted list of elements. list2 (list): A sorted list of elements. Returns: list: A single, sorted list containing all the elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and append the smallest element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, append them to merged_list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, append them to merged_list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to convert a given string into title case and then check if it is a palindrome or not. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"def convert_and_check_palindrome(s): Converts the given string into title case and checks if it is a palindrome. Args: s (str): The input string. Returns: tuple: A tuple containing the title cased string and a boolean indicating if it's a palindrome. # Convert to title case title_cased = s.title() # Normalize the string by removing spaces and converting to lower case normalized = ''.join(filter(str.isalnum, s)).lower() # Check if the normalized string is a palindrome is_palindrome = normalized == normalized[::-1] return title_cased, is_palindrome"},{"question":"Write a python function to find the maximum sum of a subarray in a given array. I know this can be solved using Kadane's algorithm, but I want to understand the logic behind it. Could you explain this to me and also provide the code?","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray in the given array using Kadane's Algorithm. Parameters: arr (List[int]): A list of integers Returns: int: The maximum subarray sum if not arr: return 0 current_max = global_max = arr[0] for num in arr[1:]: current_max = max(num, current_max + num) global_max = max(global_max, current_max) return global_max"},{"question":"Write a python function to find the single number which appears only once in an array. All other elements appear exactly twice.","solution":"def single_number(nums): Finds the single number in the array that appears only once where all other elements appear exactly twice. Args: nums (List[int]): List of integers Returns: int: The single number that appears only once unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"Write a python function to get the intersection of two lists, making sure the elements of the new list are sorted.","solution":"def intersection_of_lists(list1, list2): Returns a sorted list of the intersection of list1 and list2. # Find the intersection of two sets and then convert it back to a sorted list return sorted(list(set(list1) & set(list2)))"},{"question":"Write a python function to calculate the sum of all digits in a given string. How would I define this function in order to ensure it correctly ignores non-numeric characters?","solution":"def sum_of_digits(s): Returns the sum of all digits in the given string s. Non-numeric characters are ignored. return sum(int(char) for char in s if char.isdigit())"},{"question":"Write a python function to convert all the uppercase characters in a string to lowercase and all the lowercase characters to uppercase in a given string.","solution":"def swap_case(s): Returns a new string with all the uppercase characters converted to lowercase and all the lowercase characters converted to uppercase. return s.swapcase()"},{"question":"Write a python function to find the two numbers that add up to a specific target number. The function should return their indices in the array.","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target. :param nums: List of integers :param target: Target integer sum of two elements in nums :return: List containing indices of the two elements that add up to target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a python function to read a CSV file and return a list of dictionaries where each dictionary represents a row in the CSV file. Each key-value pair in the dictionary represents a column name and the corresponding cell value for that row.","solution":"import csv def read_csv_to_dict_list(file_path): Reads a CSV file and returns a list of dictionaries representing each row. :param file_path: Path to the CSV file. :return: List of dictionaries where each dictionary represents a row. with open(file_path, mode='r', newline='', encoding='utf-8') as file: reader = csv.DictReader(file) return [row for row in reader]"},{"question":"Write a python function to find the intersection of sets and return the result as a list.","solution":"def intersection_of_sets(set1, set2): Finds the intersection of two sets and returns the result as a list. Parameters: set1 (set): First input set. set2 (set): Second input set. Returns: list: List containing the intersection of the two sets. return list(set1 & set2)"},{"question":"Write a python function to find the maximum sum of a continuous subarray from a given list of integers. The function should handle edge cases such as empty lists or lists with negative numbers.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a continuous subarray in a given list of integers. Handles edge cases such as empty lists and lists with negative numbers. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Write a python function to validate if a given string is a palindrome. A palindrome is a string that reads the same both ways (e.g., \\"racecar\\", \\"madam\\"). How can I implement this using a deque (double-ended queue)?","solution":"from collections import deque def is_palindrome(s): Validates if a given string \`s\` is a palindrome using a deque. Args: s (str): Input string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. d = deque(s) while len(d) > 1: if d.popleft() != d.pop(): return False return True"},{"question":"Write a python function to find the maximum numerical value in a list.","solution":"def find_max_value(lst): Returns the maximum numerical value in a list. :param lst: List of numerical values. :return: The maximum numerical value in the list. if not lst: raise ValueError(\\"The list is empty.\\") return max(lst)"},{"question":"Write a python function to generate all possible subsets of a given array of integers.","solution":"def generate_subsets(arr): Returns all possible subsets of the given array. def backtrack(start, path): subsets.append(path) for i in range(start, len(arr)): backtrack(i + 1, path + [arr[i]]) subsets = [] backtrack(0, []) return subsets"},{"question":"Write a python function to find the closest number to zero from a given list of numbers. If there are multiple numbers with the same distance to zero, return the first one encountered.","solution":"def closest_to_zero(numbers): Returns the closest number to zero from a given list of numbers. If there are multiple numbers with the same distance to zero, return the first one encountered. if not numbers: return None closest = numbers[0] for num in numbers[1:]: if abs(num) < abs(closest) or (abs(num) == abs(closest) and num == closest): closest = num return closest"},{"question":"Write a python function to find the largest number in a list of integers. The function should return the largest number in the list. If the list is empty, it should return None. Also, write appropriate unit tests to cover all edge cases.","solution":"def find_largest(numbers): Returns the largest number in a list of integers. If the list is empty, returns None. if not numbers: return None return max(numbers)"},{"question":"Write a python function to calculate the sum of all elements in a list. You are given a list of integers.","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list lst. return sum(lst)"},{"question":"Write a python function to perform run-length encoding on a given string. This function should take a string as input and return the run-length encoded version of the string. The run-length encoding algorithm works by replacing consecutive occurrences of the same character with the character followed by the count of occurrences. For example, \\"aaabbb\\" should be encoded as \\"a3b3\\". If a character occurs only once, it should be kept as is.","solution":"def run_length_encode(input_string): Perform run-length encoding on the input string. Args: input_string (str): The string to be encoded. Returns: str: The run-length encoded string. if not input_string: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(input_string)): if input_string[i] == input_string[i - 1]: count += 1 else: if count > 1: encoded_string.append(f\\"{input_string[i - 1]}{count}\\") else: encoded_string.append(input_string[i - 1]) count = 1 # Handle the last group of characters if count > 1: encoded_string.append(f\\"{input_string[-1]}{count}\\") else: encoded_string.append(input_string[-1]) return ''.join(encoded_string)"},{"question":"Write a python function to find the maximum difference between two elements in an array, where the smaller element appears before the larger element.","solution":"def max_diff(arr): Returns the maximum difference between two elements in an array, where the smaller element appears before the larger element. if not arr or len(arr) < 2: return 0 min_element = arr[0] max_difference = arr[1] - arr[0] for i in range(1, len(arr)): current_difference = arr[i] - min_element if current_difference > max_difference: max_difference = current_difference if arr[i] < min_element: min_element = arr[i] return max(0, max_difference) # Ensure we don't return a negative difference"},{"question":"Write a python function to find the first non-duplicate character in a given string. If there is no non-duplicate character, return an empty string.","solution":"def first_non_duplicate_char(s): Returns the first non-duplicate character in the given string. If there is no non-duplicate character, returns an empty string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return ''"},{"question":"Write a python function to input and output some numbers in a certain sequence, such as 1, 3, 5, 7, 9, 11, etc. The sequence starts with 1 and increments by 2 each time. How would you implement this in Python?","solution":"def generate_sequence(start, increment, count): Generates a sequence of numbers starting from 'start', incrementing by 'increment', and containing 'count' numbers. Parameters: start (int): The first number in the sequence. increment (int): The difference between each successive numbers in the sequence. count (int): The number of elements in the sequence. Returns: list: A list containing the sequence of numbers. sequence = [] current = start for _ in range(count): sequence.append(current) current += increment return sequence"},{"question":"Write a python function to perform a simple text summarization using a naive implementation of the compression method. This function should take a single string input and return a string that is a summary of the input text. The summary should be created by repeatedly replacing the most frequent word with 'x' until no more replacements can be made, then moving to the second most frequent word, and so on.","solution":"def summarize_text(text): Summarizes the given text by repeatedly replacing the most frequent word with 'x', then the next most frequent word with 'x', and so on. from collections import Counter words = text.split() word_counts = Counter(words) sorted_words = [item[0] for item in word_counts.most_common()] for i, word in enumerate(sorted_words): words = ['x' if w == word else w for w in words] return ' '.join(words)"},{"question":"Write a python function to find the first missing positive integer from an unsorted array of integers. For example, given the array \`[7, 8, 9, 11, 12]\`, the function should return \`1\` because \`1\` is the smallest positive integer that is missing from the array.","solution":"def first_missing_positive(nums): Function to find the first missing positive integer from an unsorted array. Parameters: nums (list): List of integers Returns: int: The first missing positive integer n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i]-1] != nums[i]: nums[nums[i]-1], nums[i] = nums[i], nums[nums[i]-1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to delete a node from a binomial heap given its key. What is a binomial heap and how can it be represented?","solution":"class BinomialHeapNode: def __init__(self, key): self.key = key self.degree = 0 self.parent = None self.child = None self.sibling = None class BinomialHeap: def __init__(self): self.head = None def _merge(self, h1, h2): if not h1: return h2 if not h2: return h1 if h1.key < h2.key: h1.sibling = self._merge(h1.sibling, h2) return h1 else: h2.sibling = self._merge(h1, h2.sibling) return h2 def union(self, heap): if not self.head: self.head = heap.head return if not heap.head: return new_head = self._merge(self.head, heap.head) self.head = None heap.head = None # Now perform union operation on the merged list prev = None curr = new_head next = curr.sibling while next: if curr.degree != next.degree or (next.sibling and next.sibling.degree == curr.degree): prev = curr curr = next else: if curr.key <= next.key: curr.sibling = next.sibling next.parent = curr next.sibling = curr.child curr.child = next curr.degree += 1 else: if not prev: new_head = next else: prev.sibling = next curr.parent = next curr.sibling = next.child next.child = curr next.degree += 1 curr = next next = curr.sibling self.head = new_head def insert(self, key): node = BinomialHeapNode(key) temp_heap = BinomialHeap() temp_heap.head = node self.union(temp_heap) def _reverse(self, node): prev = None curr = node while curr: next = curr.sibling curr.sibling = prev prev = curr curr = next return prev def _extract_min(self): if not self.head: return None min_prev = None min_node = self.head prev = self.head curr = self.head.sibling while curr: if curr.key < min_node.key: min_prev = prev min_node = curr prev = curr curr = curr.sibling if min_prev: min_prev.sibling = min_node.sibling else: self.head = min_node.sibling child = self._reverse(min_node.child) temp_heap = BinomialHeap() temp_heap.head = child self.union(temp_heap) return min_node def delete(self, key): self.decrease_key(key, float('-inf')) self._extract_min() def _find_node(self, root, key): node = root while node: if node.key == key: return node res = self._find_node(node.child, key) if res: return res node = node.sibling return None def decrease_key(self, old_key, new_key): node = self._find_node(self.head, old_key) if not node or new_key > node.key: return node.key = new_key curr = node parent = curr.parent while parent and curr.key < parent.key: curr.key, parent.key = parent.key, curr.key curr = parent parent = curr.parent"},{"question":"Write a python function to sort a list of dictionaries by a specific key. The function should also handle the case where the key does not exist in some dictionaries. In such cases, those dictionaries should be placed at the end of the sorted list while maintaining their order relative to each other. You can assume all dictionaries have at least one common key.","solution":"def sort_dicts_by_key(dicts, key): Sort a list of dictionaries by a specific key. Dictionaries missing the key are placed at the end in their original order. Parameters: dicts (list): List of dictionaries to be sorted. key (str): The key to sort the dictionaries by. Returns: list: A new list of dictionaries sorted by the specified key. with_key = [d for d in dicts if key in d] without_key = [d for d in dicts if key not in d] return sorted(with_key, key=lambda x: x[key]) + without_key"},{"question":"Write a python function to replace substrings in a string based on a dictionary mapping. You can assume that the dictionary keys are the substrings to be replaced, and the dictionary values are the substrings to replace them with.","solution":"def replace_substrings(s, replacements): Replaces substrings in string 's' based on the 'replacements' dictionary mapping. Parameters: s (str): The input string where replacements are to be made. replacements (dict): Dictionary containing old substrings as keys and new substrings as values. Returns: str: The string after performing the replacements. for old_sub, new_sub in replacements.items(): s = s.replace(old_sub, new_sub) return s"},{"question":"Write a python function to calculate the sum of all numbers in a given list. Ensure that your function handles both integer and floating-point numbers. Additionally, implement a condition that checks if the list is empty and return a message stating \\"List is empty\\" if true.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. Handles both integers and float numbers. If the list is empty, returns 'List is empty'. if not numbers: return \\"List is empty\\" return sum(numbers)"},{"question":"Write a python function to calculate the sum of all positive integers less than a given integer n. The function should handle large values of n efficiently.","solution":"def sum_positive_integers(n): Returns the sum of all positive integers less than n. if n <= 1: return 0 return (n * (n - 1)) // 2"},{"question":"Write a python function to calculate the area of a regular polygon. The function should take the number of sides and the length of each side as inputs and return the area of the polygon.","solution":"import math def polygon_area(number_of_sides, side_length): Calculate the area of a regular polygon. Parameters: number_of_sides (int): Number of sides of the polygon. side_length (float): Length of each side of the polygon. Returns: float: Area of the polygon. if number_of_sides < 3 or side_length <= 0: raise ValueError(\\"number_of_sides must be at least 3 and side_length must be positive.\\") apothem = side_length / (2 * math.tan(math.pi / number_of_sides)) perimeter = number_of_sides * side_length area = (perimeter * apothem) / 2 return area"},{"question":"Write a python function to sort an array in increasing order using the selection sort algorithm. The array can contain both positive and negative integers.","solution":"def selection_sort(arr): Sorts an array in increasing order using the selection sort algorithm. Parameters: arr (list): A list of integers, which can include both positive and negative numbers. Returns: list: The sorted list in increasing order. n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to find the maximum depth of a binomial heap. A binomial heap is a collection of binomial trees, where a binomial tree is a binary tree in which no node has more than two children and at each node, the key value of the child is less than or equal to its parent value. The depth of a binomial heap is the maximum depth among all its binomial trees.","solution":"def max_depth_of_binomial_heap(heap): Find the depth of a binomial heap. The depth of the binomial heap is the maximum depth among all its binomial trees. A binomial tree of order k has a depth of k, and a binomial heap is a collection of binomial trees where each binomial tree has different orders. Args: heap (list of dict): A list of dictionaries where each dictionary represents a binomial tree. Each dictionary contains the keys: - 'order': an integer representing the order of the binomial tree. Returns: int: The maximum depth among all binomial trees in the binomial heap. if not heap: return 0 max_depth = 0 for tree in heap: max_depth = max(max_depth, tree['order']) return max_depth"},{"question":"Write a python function to get the maximum product of two distinct numbers in an array. The array could contain both positive and negative integers.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct numbers in the array. Parameters: arr (list): A list of integers. Returns: int: The maximum product of two distinct numbers. if len(arr) < 2: return None # Not enough elements to form a product arr.sort() # The maximum product can be either from the two largest positive numbers # or from the two smallest negative numbers (since a negative * negative = positive). product1 = arr[-1] * arr[-2] product2 = arr[0] * arr[1] return max(product1, product2)"},{"question":"Write a python function to exchange the values of two variables.","solution":"def exchange_values(a, b): Exchange the values of a and b. Parameters: a: First variable b: Second variable Returns: tuple: Exchanged values (b, a) return b, a"},{"question":"Write a python function to identify duplicates in a list.","solution":"def find_duplicates(lst): Returns a list of duplicates in the given list. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to perform the following task: Given a list of integers, find the index of minimum value element in the given list because that's what a min() function does anyway, but you can't and should not use python's inbuilt min() function. You also can't use built-in sort() or sorted() function. You only can use loops and conditions.","solution":"def index_of_min_value(lst): Returns the index of the minimum value element in the given list. if not lst: raise ValueError('The list is empty.') min_index = 0 for i in range(1, len(lst)): if lst[i] < lst[min_index]: min_index = i return min_index"},{"question":"Write a python function to find the sum of all numbers in a list that are multiples of 3 or 5. For example, the list might be \`[10, 15, 20, 25, 30, 35, 36, 75]\`. The function should return \`275\` (since 15 + 20 + 25 + 30 + 35 + 36 + 75 = 275).","solution":"def sum_multiples_of_3_or_5(numbers): Returns the sum of all numbers in the list that are multiples of 3 or 5. return sum(n for n in numbers if n % 3 == 0 or n % 5 == 0)"},{"question":"Write a python function to generate prime numbers using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(limit): Generate all prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Parameters: limit (int): The upper bound of the range to look for prime numbers. Returns: list: A list of prime numbers up to the given limit. if limit < 2: return [] sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to find the maximum depth of a binary tree. The binary tree is represented using nested dictionaries, where each dictionary represents a node with optional \\"left\\" and \\"right\\" children.","solution":"def max_depth(tree): Returns the maximum depth of a binary tree. if tree is None: return 0 left_depth = max_depth(tree.get(\\"left\\")) right_depth = max_depth(tree.get(\\"right\\")) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to check if a given string includes any duplicate characters, and return the first duplicate character if found. If there are no duplicate characters, return None.","solution":"def first_duplicate_character(s): Returns the first duplicate character in the given string. If there are no duplicate characters, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to find the two largest integers in a given list.","solution":"def find_two_largest(numbers): Returns a tuple containing the two largest integers in the given list. If the list has fewer than two distinct elements, return None. if len(numbers) < 2: return None first_max = second_max = float('-inf') for number in numbers: if number > first_max: second_max = first_max first_max = number elif first_max > number > second_max: second_max = number if second_max == float('-inf'): return None return (first_max, second_max)"},{"question":"Write a python function to generate a valid expression that equals to the target using the numbers 1, 2, 3, 4, 5, 6, 7, 8, 9. Each number can only be used once in the expression.","solution":"from itertools import permutations def generate_expression_that_equals_target(target): Generates a valid expression using the numbers 1 to 9 that equals to the target. Each number can be used once in the expression. numbers = '123456789' operators = ['+', '-', '', '*', '/'] for perm in permutations(numbers): for i in range(4): for j in range(i + 2, 8): expression = ''.join(perm[:i+1]) + operators[0] + ''.join(perm[i+1:j+1]) + operators[1] + ''.join(perm[j+1:]) if eval(expression) == target: return expression return None"},{"question":"Write a python function to filter out the strings that correspond with the even numbers from a given list of numbers represented as strings.","solution":"def filter_even_strings(numbers): Filters out the strings that correspond with the even numbers from a given list of numbers represented as strings. Params: numbers (list): A list of numbers represented as strings. Returns: list: A list of strings which are even numbers. return [num for num in numbers if int(num) % 2 == 0]"},{"question":"Write a python function to solve the problem of finding the minimum number in a list of integers. The function should handle various edge cases, such as empty list, list with one element, and list with multiple elements.","solution":"def find_minimum(nums): Returns the minimum number in a list of integers. Handles edge cases such as empty list and list with one element. :param nums: List of integers :return: Minimum integer in the list :raises ValueError: If the list is empty if not nums: raise ValueError(\\"List is empty\\") minimum = nums[0] for num in nums: if num < minimum: minimum = num return minimum"},{"question":"Write a python function to reverse the order of elements in a list. Here is a sample list \`my_list = [1, 2, 3, 4, 5]\`. You should reverse the order of elements in this list. The order of elements in my_list should be reversed after the function call. The Modified list should be \`[5, 4, 3, 2, 1]\`.","solution":"def reverse_list(my_list): Reverses the order of elements in the input list. Args: my_list (list): The list to be reversed. Returns: list: The list with elements in reversed order. return my_list[::-1]"},{"question":"Write a python function to find the longest palindromic substring within a given string 's'.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if s == \\"\\" or len(s) == 1: return s def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(s, i, i) # Even length palindromes palindrome2 = expand_around_center(s, i, i + 1) # Update longest palindrome found if len(palindrome1) > len(longest): longest = palindrome1 if len(palindrome2) > len(longest): longest = palindrome2 return longest"},{"question":"Write a python function to reverse a string in a specific format.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to count the number of trailing zeroes in the binary representation of a given positive integer.","solution":"def count_trailing_zeroes(n): Returns the number of trailing zeroes in the binary representation of n. if n == 0: return 0 # Count trailing zeroes count = 0 while (n & 1) == 0: count += 1 n >>= 1 return count"},{"question":"Write a python function to find the pairs of elements in a list that add up to a certain target value.","solution":"def find_pairs_with_sum(arr, target): Finds all pairs in the list 'arr' that add up to 'target' value. Parameters: arr (list): List of integers to check for pairs. target (int): The target sum for pairs. Returns: list of tuples: Each tuple contains a pair of elements that add up to the target value. pairs = [] seen = set() for num in arr: complement = target - num if complement in seen: pairs.append((complement, num)) seen.add(num) return pairs"},{"question":"Write a python function to find the average of an array.","solution":"def average_array(arr): Returns the average of the elements in the array. Args: arr (list of int/float): List of numbers to find the average of. Returns: float: The average of the numbers in the array. if not arr: return 0 # Return 0 for an empty array to avoid division by zero return sum(arr) / len(arr)"},{"question":"Write a python function to find the minimum and maximum values in a list using a single pass through the list. The function should return a tuple containing the minimum and maximum values respectively.","solution":"def find_min_max(lst): Finds the minimum and maximum values in a list using a single pass. Parameters: lst (list): A list of numerical values. Returns: tuple: A tuple containing the minimum and maximum values respectively. if not lst: return None, None min_val = max_val = lst[0] for num in lst[1:]: if num < min_val: min_val = num elif num > max_val: max_val = num return min_val, max_val"},{"question":"Write a python function to find the second smallest element in a list. The list may contain duplicates and negative numbers. How can you handle these cases?","solution":"def second_smallest(numbers): Returns the second smallest element in a list. If the list has less than 2 unique elements, returns None. if not numbers or len(numbers) < 2: return None # Remove duplicates by using a set unique_numbers = set(numbers) if len(unique_numbers) < 2: return None # Convert back to a list and sort it to find the second smallest sorted_unique_numbers = sorted(unique_numbers) return sorted_unique_numbers[1]"},{"question":"Write a python function to find the factorial of a number using recursion. What are the base cases and recursive step in this function?","solution":"def factorial(n): Returns the factorial of n using recursion. :param n: non-negative integer :return: factorial of n # Base case: factorial of 0 or 1 is 1 if n == 0 or n == 1: return 1 # Recursive step: n * factorial of (n-1) else: return n * factorial(n - 1)"},{"question":"Write a python function to calculate the integer part (floor value) of a logarithm base 2 of a number n. The function should handle cases where n is not a power of 2.","solution":"import math def integer_log_base2(n): Returns the integer part (floor value) of a logarithm base 2 of a number n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return math.floor(math.log2(n))"},{"question":"Write a python function to check if a number is prime including edge cases for negative and non-integer numbers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. This function also handles edge cases such as negative numbers and non-integer inputs. if not isinstance(n, int) or n < 2: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a python function to round a given number to the nearest 10, 100, or 1000.","solution":"def round_to_nearest(number, nearest): Rounds the given number to the nearest 10, 100, or 1000. Parameters: number (float): The number to be rounded. nearest (int): The place to round the number to (10, 100, or 1000). Returns: int: The rounded number. if nearest not in [10, 100, 1000]: raise ValueError(\\"nearest must be one of 10, 100, or 1000\\") return round(number / nearest) * nearest"},{"question":"Write a python function to read a string from a user and check if the character count is even or odd.","solution":"def is_char_count_even_or_odd(s): Returns 'even' if the character count of the string is even, 'odd' otherwise. return 'even' if len(s) % 2 == 0 else 'odd'"},{"question":"Write a python function to compute the factorial of a given number=n. The function should be tested for n=5.","solution":"def factorial(n): Returns the factorial of the given number n. if n < 0: raise ValueError(\\"n should be a non-negative integer\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to transpose a matrix. The matrix is represented as a list of lists, and the transposed matrix should also be returned as a list of lists. Use list comprehension for the transposition process.","solution":"def transpose(matrix): Transposes the given matrix. Parameters: matrix (list of lists): The matrix to transpose Returns: list of lists: The transposed matrix return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"},{"question":"Write a python function to find the maximum number in a list using recursion and without using any built-in functions like \`max()\`.","solution":"def find_max_recursive(lst): Returns the maximum number in a given list using recursion. if len(lst) == 1: return lst[0] else: max_of_rest = find_max_recursive(lst[1:]) if lst[0] > max_of_rest: return lst[0] else: return max_of_rest"},{"question":"Write a python function to extract URL from a given text. URL in the text can start with http:// or https:// and can contain alphanumeric characters, hyphens, periods, and underscores.","solution":"import re def extract_urls(text): Extracts URLs from the given text. URLs start with http:// or https:// and can contain alphanumeric characters, hyphens, periods, and underscores. :param text: The input text from which URLs are to be extracted :return: A list of URLs found in the input text url_pattern = re.compile(r'http[s]?://[a-zA-Z0-9._-]+') return url_pattern.findall(text)"},{"question":"Write a python function to generate the gray code sequence for a given number \`n\`. In Gray code, two successive values differ in only one bit. Here is an example for n=2","solution":"def gray_code(n): Generate the sequence of Gray code for a given number n. Parameters: n (int): The number of bits. Returns: list[int]: The list of Gray code sequence. if n == 0: return [0] result = [] num_codes = 1 << n # Total 2^n Gray codes for i in range(num_codes): result.append(i ^ (i >> 1)) # Gray code formula return result"},{"question":"Write a python function to find the number of times the digit '1' appears in all integers between 0 and n (inclusive).","solution":"def count_digit_one(n): Returns the number of times the digit '1' appears in all integers between 0 and n (inclusive). count = 0 for i in range(n + 1): count += str(i).count('1') return count"},{"question":"Write a python function to find the maximum occurring character in a string and its frequency. You need to return a tuple (character, frequency). If there are multiple characters with the same maximum frequency, return the one that appears first in the string.","solution":"def max_occurring_char(s): Finds the maximum occurring character in a string and its frequency. If there are multiple characters with the same frequency, returns the one that appears first. Args: s (str): The input string Returns: tuple: A tuple containing the character and its frequency if not s: return (None, 0) frequency = {} max_char = s[0] max_count = 0 for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 if frequency[char] > max_count or (frequency[char] == max_count and s.index(max_char) > s.index(char)): max_char = char max_count = frequency[char] return (max_char, max_count)"},{"question":"Write a python function to find the nth palindrome in lexicographical order. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. The function should take an integer \`n\` as input and return the nth palindrome as a string.","solution":"def nth_lexicographical_palindrome(n): Returns the nth palindrome in lexicographical order. if n <= 0: return \\"\\" from itertools import product palindromes = [] # Keep generating palindromes until we reach the nth one length = 1 while len(palindromes) < n: half_length = (length + 1) // 2 for half in product('abcdefghijklmnopqrstuvwxyz', repeat=half_length): half_str = ''.join(half) if length % 2 == 0: palindromes.append(half_str + half_str[::-1]) else: palindromes.append(half_str + half_str[-2::-1]) if len(palindromes) == n: return palindromes[-1] length += 1 return \\"\\" # Test code print(nth_lexicographical_palindrome(1)) # \\"a\\" print(nth_lexicographical_palindrome(2)) # \\"b\\" print(nth_lexicographical_palindrome(26)) # \\"z\\" print(nth_lexicographical_palindrome(27)) # \\"aa\\""},{"question":"Write a python function to print out all the permutations of a given string. Your function should take a single string as input and print each permutation. For example, if the input string is \\"abc\\", your function should print \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\".","solution":"from itertools import permutations def print_permutations(s): Prints all permutations of a given string s. perm = permutations(s) for p in perm: print(''.join(p))"},{"question":"Write a python function to find the majority element in a list of integers, where the majority element is defined as the one that appears more than n/2 times in the list, where n is the length of the list.","solution":"def majority_element(nums): Finds the majority element in a list of integers, where the majority element is the one that appears more than n/2 times in the list. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Write a python function to find two numbers from a list of integers such that their sum equals a target value. If such numbers exist, return the pair of numbers. If no such pair exists, return an empty list. The function should have a time complexity of O(n).","solution":"def find_pair_with_sum(nums, target): Finds two numbers in the list \`nums\` such that their sum is equal to \`target\`. Args: nums (list of int): List of integers. target (int): The target sum value. Returns: list of int: A pair of numbers if found that sum to target, otherwise an empty list. num_set = set() for num in nums: complement = target - num if complement in num_set: return [complement, num] num_set.add(num) return []"},{"question":"Write a python function to reverse a string in place without using slicing or built-in functions like reversed() or ''.join().","solution":"def reverse_string(s): Reverses the input string s in place. str_list = list(s) # Convert string into a list of characters left = 0 right = len(str_list) - 1 while left < right: str_list[left], str_list[right] = str_list[right], str_list[left] left += 1 right -= 1 return ''.join(str_list)"},{"question":"Write a python function to find the most frequent integer in a given list while maintaining the order of their first appearance. If there are multiple integers with the same frequency, return the one that appears first. If the list is empty, return \`None\`.","solution":"def most_frequent_integer(lst): Returns the most frequent integer in the list while maintaining the order of their first appearance. If the list is empty, return None. if not lst: return None frequency = {} for num in lst: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 most_frequent = max(frequency, key=lambda k: (frequency[k], -lst.index(k))) return most_frequent"},{"question":"Write a python function to replace a specific word in a string with another word. For example, replace 'apple' with 'orange' in the string 'I like to eat apple'.","solution":"def replace_word(original_string, old_word, new_word): Replaces all occurrences of old_word with new_word in original_string. Parameters: original_string (str): The string to be modified. old_word (str): The word to be replaced. new_word (str): The word to replace with. Returns: str: The modified string with old_word replaced by new_word. return original_string.replace(old_word, new_word)"},{"question":"Write a python function to convert a string to Camel Case. The function should also remove any white spaces from the input string. Here is a sample input: \\"hello world\\". The expected output should be \\"helloWorld\\".","solution":"def to_camel_case(s): Converts a string to camel case and removes any white spaces. Example: \\"hello world\\" becomes \\"helloWorld\\". words = s.split() if len(words) == 0: return \\"\\" first_word = words[0].lower() camel_cased = first_word + ''.join(word.capitalize() for word in words[1:]) return camel_cased"},{"question":"Write a python function to find the maximum product of subtrees within a binary tree where each subtree is a connected component of the tree. The answer should be returned modulo 10^9+7.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right MOD = 10**9 + 7 def maxProduct(root: TreeNode) -> int: Compute the maximum product of sums of subtrees of a binary tree. # Compute total sum of the tree def compute_total_sum(node): if not node: return 0 node.value += compute_total_sum(node.left) + compute_total_sum(node.right) return node.value total_sum = compute_total_sum(root) # To store the result max_product = [0] def find_max_product(node): if not node: return 0 # Get sum of left and right subtrees left_sum = find_max_product(node.left) right_sum = find_max_product(node.right) if node.left: max_product[0] = max(max_product[0], left_sum * (total_sum - left_sum)) if node.right: max_product[0] = max(max_product[0], right_sum * (total_sum - right_sum)) return node.value find_max_product(root) return max_product[0] % MOD"},{"question":"Write a python function to find two numbers that add up to a specific target in an array of integers.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the specific target. :param nums: List of integers. :param target: Target sum. :return: A tuple of two indices. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement], i) num_map[num] = i return None"},{"question":"Write a python function to find both the maximum and minimum elements in an array efficiently.","solution":"def find_max_min(arr): Returns a tuple containing the maximum and minimum elements in the array. Takes an array 'arr' as input. if not arr: return None, None max_elem = min_elem = arr[0] for num in arr[1:]: if num > max_elem: max_elem = num elif num < min_elem: min_elem = num return max_elem, min_elem"},{"question":"Write a python function to find the length of the longest sentence in the paragraph. A sentence is defined as a string separated by spaces. A word is defined as a string of characters separated by spaces. The function should return the length of the longest word in the longest sentence. Please consider sentences and words to be case-sensitive and punctuation as part of the words.","solution":"def longest_sentence_length(paragraph): Returns the length of the longest word in the longest sentence in the paragraph. Sentences are separated by periods, exclamations marks, or question marks. Words are separated by spaces. import re # Split paragraph by sentence delimiters (., !, ?) sentences = re.split(r'[.!?]s*', paragraph) max_word_length = 0 for sentence in sentences: if sentence: words = sentence.split() if words: longest_word_in_sentence = max(words, key=len) max_word_length = max(max_word_length, len(longest_word_in_sentence)) return max_word_length"},{"question":"Write a python function to sort a list of dictionaries based on the 'age' value in ascending order.","solution":"def sort_by_age(lst): Sorts a list of dictionaries based on the 'age' value in ascending order. Args: lst (list): A list of dictionaries, each containing an 'age' key. Returns: list: A new list of dictionaries sorted by the 'age' key in ascending order. return sorted(lst, key=lambda x: x['age'])"},{"question":"Write a python function to sort an array in non-decreasing order. Your function should implement the Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts an array in non-decreasing order using the Bubble Sort algorithm. Parameters: arr (list): List of elements to be sorted (assumes elements are comparable). Returns: list: The sorted list in non-decreasing order. n = len(arr) for i in range(n): swapped = False # Traverse the array from 0 to n-i-1 for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the array is already sorted if not swapped: break return arr"},{"question":"Write a python function to find the nth missing number in an increasing sequence of positive integers. The sequence is given by a list of present integers, and all integers from 1 to m (where m is the length of the list plus the number of missing numbers) should be present in the sequence, but some are missing.","solution":"def find_nth_missing(sequence, n): Find the nth missing number in an increasing sequence of positive integers. :param sequence: List of present integers. :param n: The nth missing number to find. :return: The nth missing number. missing_numbers = [] sequence_set = set(sequence) max_val = len(sequence) + n for i in range(1, max_val + 1): if i not in sequence_set: missing_numbers.append(i) return missing_numbers[n - 1]"},{"question":"Write a python function to find the maximum profit from buying and selling a stock on different days. You can only hold one share of the stock at a time, and you must sell the stock before you buy it again. Given a list of daily stock prices, return the maximum profit that could be achieved.","solution":"def max_profit(prices): Returns the maximum profit that could be achieved from the given list of daily stock prices. if len(prices) < 2: return 0 # Not enough prices to make a profit min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Write a python function to return the first non-repeating character in a string. If there is no such character, return an underscore '_'. The function should ignore case.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string irrespective of case. If there is no such character, returns an underscore '_'. s = s.lower() count = {} # Count the occurrences of each character for char in s: if char in count: count[char] += 1 else: count[char] = 1 # Find the first character that occurs only once for char in s: if count[char] == 1: return char return '_'"},{"question":"Write a python function to check if all elements in the given list are integers and at least one of them is zero. Your function should return \`True\` if these conditions are met, and \`False\` otherwise.","solution":"def check_integers_with_zero(lst): Returns True if all elements in lst are integers and at least one of them is zero. Otherwise, returns False. if all(isinstance(x, int) for x in lst) and any(x == 0 for x in lst): return True return False"},{"question":"Write a python function to calculate the factorial of a large number using iterative approach.","solution":"def factorial_iterative(n): Calculates the factorial of a given number n using an iterative approach. Returns the factorial of n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to find the minimum element in a linked list without using any external data structures.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_min_in_linked_list(head: ListNode) -> int: Returns the minimum element in a linked list. if head is None: raise ValueError(\\"The linked list is empty\\") current = head min_value = head.value while current: if current.value < min_value: min_value = current.value current = current.next return min_value"},{"question":"Write a python function to reverse a string using slicing. Include appropriate comments to explain each step.","solution":"def reverse_string(s): Returns the reverse of the input string s. Uses Python slicing to reverse the string. # Return the string from end to start using slicing return s[::-1]"},{"question":"Write a python function to return the 1000th lexicographical permutation of the sequence 1, 2, 3, ..., n.","solution":"import math def get_lexicographical_permutation(n, k): Returns the kth lexicographical permutation of the sequence 1, 2, 3, ..., n. numbers = list(range(1, n + 1)) k -= 1 # reduce k to zero-based index permutation = [] for i in range(n, 0, -1): factorial = math.factorial(i - 1) index = k // factorial permutation.append(numbers.pop(index)) k %= factorial return permutation"},{"question":"Write a python function to print all subsets of a given set of elements. A subset is a set that contains only elements from the original set, and the subsets can vary in size from 0 (the empty set) to the size of the original set. For example, given the set {'a', 'b', 'c'}, the subsets are {}, {'a'}, {'b'}, {'c'}, {'a', 'b'}, {'a', 'c'}, {'b', 'c'}, {'a', 'b', 'c'}.","solution":"def get_subsets(s): Returns a list of all subsets of the given set s. Parameters: s (set): A set of elements. Returns: list: A list of subsets, each subset is represented as a set. subsets = [] s = list(s) # Convert set to list to index elements n = len(s) def backtrack(start, path): subsets.append(set(path)) for i in range(start, n): path.append(s[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return subsets"},{"question":"Write a python function to solve the perpetual calendar problem.","solution":"def day_of_the_week(year, month, day): Returns the day of the week for the given date. Parameters: year (int): The year (e.g., 2022) month (int): The month (1-12) day (int): The day of the month (1-31) Returns: str: The name of the day if month < 3: month += 12 year -= 1 K = year % 100 J = year // 100 f = day + (13 * (month + 1)) // 5 + K + K // 4 + J // 4 + 5 * J day_of_week = f % 7 days = [\\"Saturday\\", \\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"] return days[day_of_week]"},{"question":"Write a python function to find the maximum sum of two numbers in the array, but the two numbers must not be adjacent in the array.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of two non-adjacent numbers in the array. if len(arr) < 2: return 0 # Not enough elements to have two non-adjacent numbers. incl = 0 excl = 0 for num in arr: # Current max excluding num new_excl = max(excl, incl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"Write a python function to return the longest word in a string. If multiple words share the longest length, return the one that appears first. If the string is empty or contains only spaces, return an empty string.","solution":"def longest_word(s): Returns the longest word in the string s. If multiple words share the longest length, the function returns the one that appears first. If the string is empty or contains only spaces, returns an empty string. if not s.strip(): return \\"\\" words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a python function to check if a string is a valid binary string or not. A binary string is one that contains only '0' and '1', and may include any number of '0's or '1's in any order. The function should return True if the string is a valid binary string, otherwise return False. Additionally, the function should ignore any spaces in the string.","solution":"def is_valid_binary_string(s): Checks if the given string is a valid binary string. A valid binary string contains only '0' and '1', possibly with spaces. :param s: the string to check :return: True if the string is valid binary, False otherwise s = s.replace(\\" \\", \\"\\") # Remove spaces for char in s: if char not in ('0', '1'): return False return True"},{"question":"Write a python function to check if a given number is odd.","solution":"def is_odd(number): Checks if the given number is odd. Parameters: - number (int): The number to check. Returns: - bool: True if the number is odd, False otherwise. return number % 2 != 0"},{"question":"Write a python function to find the longest common prefix among all strings in a list. If no common prefix exists, return an empty string. This function should use divide and conquer strategy for its solution.","solution":"def longest_common_prefix(strs): if not strs: return \\"\\" def common_prefix(left, right): min_length = min(len(left), len(right)) for i in range(min_length): if left[i] != right[i]: return left[:i] return left[:min_length] def longest_common_prefix_dc(start, end): if start == end: return strs[start] else: mid = (start + end) // 2 lcp_left = longest_common_prefix_dc(start, mid) lcp_right = longest_common_prefix_dc(mid + 1, end) return common_prefix(lcp_left, lcp_right) return longest_common_prefix_dc(0, len(strs) - 1)"},{"question":"Write a python function to find the intersection of two lists. The intersection should be returned as a list of elements that are common in both lists, maintaining their order as they appear in the first list.","solution":"def list_intersection(list1, list2): Returns a list of elements that are common in both list1 and list2, maintaining their order as they appear in list1. return [item for item in list1 if item in list2]"},{"question":"Write a python function to remove all instances of 'x' from the given string and return the resulting string.","solution":"def remove_x(s): Removes all instances of 'x' from the string \`s\`. :param s: Input string :return: String with all 'x' characters removed return s.replace('x', '')"},{"question":"Write a python function to find the average of a list of numbers in Python. There is a small mistake in the code I provided. Can you help me find and correct it?","solution":"def average(numbers): Returns the average of a list of numbers. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a python function to find the second minimum number in a list. If the list has less than two unique numbers, return \`None\`.","solution":"def second_minimum(numbers): Returns the second minimum number in a list. If the list has less than two unique numbers, return None. unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to return the first duplicate value encountered while traversing an array using singly linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def first_duplicate(head): Returns the first duplicate value encountered while traversing a singly linked list. If no duplicates are found, returns None. seen = set() current = head while current: if current.value in seen: return current.value seen.add(current.value) current = current.next return None"},{"question":"Write a python function to find the smallest number in a list using recursion. The function should not use any built-in functions like min() or max().","solution":"def find_smallest_recursive(lst, n=None, smallest=None): Returns the smallest number in a list using recursion. if n is None: n = len(lst) - 1 if smallest is None: smallest = lst[n] if n < 0: return smallest if lst[n] < smallest: smallest = lst[n] return find_smallest_recursive(lst, n - 1, smallest) # Example usage: # print(find_smallest_recursive([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])) # Output should be 1"},{"question":"Write a python function to get the current date and time","solution":"from datetime import datetime def get_current_datetime(): Returns the current date and time. return datetime.now()"},{"question":"Write a python function to solve the N-Queens problem using the backtracking algorithm. The N-Queens problem is a classic combinatorial optimization problem where the goal is to place N queens on an N×N chessboard such that no two queens threaten each other. No two queens can be in the same row, the same column, or the same diagonal.","solution":"def solve_n_queens(n): Solves the N-Queens problem and returns all solutions as a list of lists. Each solution is represented as a list, where the value at the index represents the column of the queen in that row. def is_not_under_attack(row, col): # Check if the current placement is invalid by any previous queen locations. for prev_row in range(row): prev_col = queens[prev_row] if prev_col == col or prev_row + prev_col == row + col or prev_row - prev_col == row - col: return False return True def place_queen(row): for col in range(n): if is_not_under_attack(row, col): queens[row] = col if row + 1 == n: solutions.append(queens[:]) else: place_queen(row + 1) solutions = [] queens = [-1] * n place_queen(0) return solutions"},{"question":"Write a python function to check whether a number is palindromic or not. In the function, use the concept of stack to solve the problem. For example for 121 it should return True and for 123 it should return False.","solution":"def is_palindromic_number(n): Check whether a number is palindromic or not using stack concept. # Convert the number to string to easily process each digit. n_str = str(n) # Create a stack and push all characters of the string to the stack. stack = [] for char in n_str: stack.append(char) # Check if the string is equal to its reverse by popping from stack. reversed_str = \\"\\" while stack: reversed_str += stack.pop() return n_str == reversed_str"},{"question":"Write a python function to check if a number is prime or composite. If the number is prime, return \\"It is a prime number\\". If the number is a composite, return \\"It is a composite number\\". If the number is less than 2, return \\"Invalid Input\\" because there are no prime or composite numbers less than 2.","solution":"def check_prime_composite(n): Check if a number is prime or composite. Args: n: int - the number to check Returns: str - \\"It is a prime number\\", \\"It is a composite number\\", or \\"Invalid Input\\" if n < 2: return \\"Invalid Input\\" if n == 2: return \\"It is a prime number\\" for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return \\"It is a composite number\\" return \\"It is a prime number\\""},{"question":"Write a python function to convert from Celsius to Fahrenheit. Also, include error handling to ensure that the function only accepts numbers as input.","solution":"def celsius_to_fahrenheit(celsius): Convert Celsius to Fahrenheit. Parameters: celsius (float or int): Temperature in Celsius. Returns: float: Temperature in Fahrenheit. Raises: TypeError: If the input is not a number. if not isinstance(celsius, (int, float)): raise TypeError(\\"Input must be a number\\") return (celsius * 9/5) + 32"},{"question":"Write a python function to find the factorial of a number using recursion. The function should handle cases where the input is a negative number, returning a meaningful message, and when the input is a non-integer, returning an appropriate error message.","solution":"def factorial(n): Returns the factorial of n using recursion. For negative inputs, returns a meaningful message. For non-integer inputs, returns an error message. if not isinstance(n, int): return \\"Input must be an integer.\\" if n < 0: return \\"Factorial is not defined for negative numbers.\\" if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to generate all possible combinations of a given list of numbers using recursion. The function should return a list of lists, where each inner list represents a unique combination of the input list elements.","solution":"def combinations(lst): Generates all possible combinations of a given list of numbers using recursion. Args: lst (list): A list of numbers. Returns: list of lists: A list of all unique combinations of the input list elements. if len(lst) == 0: return [[]] current_element = lst[0] sub_combinations = combinations(lst[1:]) with_current = [[current_element] + combination for combination in sub_combinations] return sub_combinations + with_current"},{"question":"Write a python function to convert a list of integers into a single integer by concatenating its digits. For example, if the list is \`[1, 2, 3, 4]\`, the function should return \`1234\`.","solution":"def concatenate_digits(lst): Converts a list of integers into a single integer by concatenating its digits. Parameters: lst (list): List of integers to be concatenated. Returns: int: Single integer obtained by concatenating the digits. return int(''.join(map(str, lst)))"},{"question":"Write a python function to rotate an array one position to the right.","solution":"def rotate_array_right(arr): Rotates an array to the right by one position. Parameters: arr (list): The list to rotate. Returns: list: The rotated list. if len(arr) == 0: return arr return [arr[-1]] + arr[:-1]"},{"question":"Write a python function to find the maximum element and its index in a given list.","solution":"def find_max_with_index(lst): Returns the maximum element and its index in a list. if not lst: return None, None max_element = lst[0] max_index = 0 for index, element in enumerate(lst): if element > max_element: max_element = element max_index = index return max_element, max_index"},{"question":"Write a python function to convert kilograms to pounds, and then extend the functionality to convert pounds to kilograms using class and instance methods.","solution":"class Converter: def __init__(self, value): self.value = value def kg_to_lb(self): Converts the value from kilograms to pounds. 1 kilogram = 2.20462 pounds return self.value * 2.20462 def lb_to_kg(self): Converts the value from pounds to kilograms. 1 pound = 0.453592 kilograms return self.value * 0.453592"},{"question":"Write a python function to find and return the nth prime number using the Sieve of Eratosthenes algorithm.","solution":"def nth_prime(n): Finds and returns the nth prime number using the Sieve of Eratosthenes algorithm. if n < 1: raise ValueError(\\"n must be a positive integer\\") limit = 15 while True: sieve = [True] * limit sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit, start): sieve[multiple] = False primes = [num for num, is_prime in enumerate(sieve) if is_prime] if len(primes) >= n: return primes[n-1] limit *= 2"},{"question":"Write a python function to calculate the sum of elements in a list using a loop. Also, the function should return the sum. Make sure to test the function with a list of integers.","solution":"def sum_of_elements(lst): Returns the sum of elements in the list lst using a loop. total = 0 for num in lst: total += num return total"},{"question":"Write a python function to find the maximum sum of a subarray. You can use Kadane's algorithm. This problem is known as the \\"Maximum Subarray Problem\\" in computer science. The goal is to find the contiguous subarray within a one-dimensional array of numbers which has the largest sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray using Kadane's algorithm. if len(nums) == 0: return 0 max_ending_here = max_so_far = nums[0] for x in nums[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to validate an email address and return True if it's valid and False otherwise. The function should handle normal email formats, but not allow for email domains ending with .com, .edu, or .org.","solution":"import re def validate_email(email): Validates the given email address. Returns True if it is a valid email and the domain does not end with .com, .edu, or .org, otherwise returns False. # Simple regex pattern to verify the structure of an email pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' if not re.match(pattern, email): return False domain = email.split('.')[-1] if domain in ['com', 'edu', 'org']: return False return True"},{"question":"Write a python function to count the frequency of a given word in a paragraph. The function should be case-insensitive and should also ignore punctuation marks.","solution":"import string def count_word_frequency(paragraph, word): Returns the frequency of the given word in the paragraph. The function is case-insensitive and ignores punctuation marks. :param paragraph: str, the paragraph in which to count the frequency :param word: str, the word to count in the paragraph :return: int, the frequency of the word in the paragraph # Remove punctuation and convert to lowercase translator = str.maketrans('', '', string.punctuation) cleaned_paragraph = paragraph.translate(translator).lower() cleaned_word = word.lower() # Split the paragraph into words words = cleaned_paragraph.split() # Count the occurrences of the word return words.count(cleaned_word)"},{"question":"Write a python function to find the second largest element in a list. Assume all elements in the list are distinct.","solution":"def second_largest(numbers): Returns the second largest element in the list. Assumes all elements in the list are distinct. if len(numbers) < 2: raise ValueError(\\"List must contain at least two distinct elements\\") first, second = float('-inf'), float('-inf') for number in numbers: if number > first: second = first first = number elif number > second: second = number return second"},{"question":"Write a python function to find the square of the sum and the sum of the squares for the first n natural numbers.","solution":"def square_of_sum_and_sum_of_squares(n): Returns the square of the sum and the sum of the squares for the first n natural numbers. sum_of_n = n * (n + 1) // 2 square_of_sum = sum_of_n ** 2 sum_of_squares = sum(i ** 2 for i in range(1, n + 1)) return square_of_sum, sum_of_squares"},{"question":"Write a python function to generate FizzBuzz for a given range of numbers.","solution":"def fizz_buzz(start, end): Generates a list of FizzBuzz values from start to end (inclusive). For multiples of three, \\"Fizz\\" is added. For multiples of five, \\"Buzz\\" is added. For multiples of both three and five, \\"FizzBuzz\\" is added. Otherwise, the number itself is added. :param start: The starting integer of the range (inclusive). :param end: The ending integer of the range (inclusive). :return: A list containing FizzBuzz results. result = [] for i in range(start, end + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a python function to remove duplicates from a list of integers while preserving the order of the elements.","solution":"def remove_duplicates(lst): Removes duplicates from a list of integers while preserving the order of the elements. Parameters: lst (List[int]): A list of integers Returns: List[int]: A list of integers without duplicates, preserving the order. seen = set() result = [] for number in lst: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"Write a python function to find the maximum sum of a contiguous subarray in a 2D array. The array may contain both positive and negative numbers, and each subarray must contain at least one element.","solution":"def max_subarray_sum_2d(matrix): Finds the maximum sum of a contiguous subarray in a 2D array. def max_subarray_sum_1d(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far n = len(matrix) m = len(matrix[0]) max_sum = float('-inf') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, max_subarray_sum_1d(temp)) return max_sum"},{"question":"Write a python function to sort an array of integers based on frequency of elements.","solution":"from collections import Counter def frequency_sort(arr): Sorts an array of integers based on the frequency of elements. Elements with the same frequency are sorted by their value. :param arr: List of integers. :return: List of integers sorted by frequency and then by value. freq_count = Counter(arr) sorted_arr = sorted(arr, key=lambda x: (freq_count[x], x)) return sorted_arr"},{"question":"Write a python function to get the first n prime numbers. For example, n=5 would return [2,3,5,7,11].","solution":"def get_first_n_primes(n): Returns the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % prime != 0 for prime in primes) if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to check if a number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9 are perfect squares but 2 and 3 are not. Make sure to include a check function with different data points to validate your solution.","solution":"import math def is_perfect_square(n): Checks if a number n is a perfect square. if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a python function to return the list of all prime numbers up to and including a given number n, where n is a positive integer.","solution":"def primes_up_to_n(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to solve a one-dimensional bin packing problem. The function should take a list of item sizes and a bin capacity as input, and return the minimum number of bins used to pack all items.","solution":"def bin_packing(items, bin_capacity): Solve the one-dimensional bin packing problem and returns the minimum number of bins used. Args: items (list of int): The sizes of the items to be packed. bin_capacity (int): The capacity of each bin. Returns: int: The minimum number of bins required. items.sort(reverse=True) # Sort items in descending order bins = [] for item in items: placed = False for b in bins: if b + item <= bin_capacity: b += item placed = True break if not placed: bins.append(item) return len(bins)"},{"question":"Write a python function to reverse a string without using any additional data structures (like lists, tuples, etc.) and in-place. How would you explain the solution?","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to solve the Josephus Problem in a circular arrangement. The Josephus problem is a theoretical problem related to a certain elimination game. People are standing in a circle waiting to be executed. Starting from the first person in the circle, every kth person is eliminated until only one person is left.","solution":"def josephus(n, k): Solves the Josephus problem. Parameters: n (int): the number of people standing in the circle. k (int): the step rate for eliminating people (i.e., every kth person is eliminated). Returns: int: the position of the last remaining person (1-indexed). if n == 1: return 1 else: return (josephus(n-1, k) + k-1) % n + 1"},{"question":"Write a python function to calculate the factorial of a number. Answer the question in a step-by-step guide.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, the factorial is 1 by definition. if n < 0: raise ValueError(\\"Negative values are not allowed.\\") elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the intersection of two lists. The function should return a list containing only the elements that are present in both lists, and each element should appear only once in the result.","solution":"def intersection(list1, list2): Returns a list of elements that are present in both list1 and list2, with each element appearing only once. return list(set(list1) & set(list2))"},{"question":"Write a python function to count the number of rows and columns in a given 2D array (list of lists). Return the result as a tuple (rows, columns).","solution":"def count_rows_columns(matrix): Returns the number of rows and columns in a given 2D array. :param matrix: List of lists representing a 2D array. :return: A tuple (rows, columns) if not matrix: return (0, 0) rows = len(matrix) columns = len(matrix[0]) return (rows, columns)"},{"question":"Write a python function to find all the prime numbers between 1 and a given number \`n\` using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(n): Returns a list of prime numbers between 1 and the given number n using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, n + 1) if is_prime[p]] return primes"},{"question":"Write a python function to return the largest palindrome number that can be made from the product of two 3-digit numbers. A palindrome number is one that reads the same backward as forward.","solution":"def largest_palindrome_product(): Returns the largest palindrome number that can be made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(999, 99, -1): for j in range(i, 99, -1): product = i * j if str(product) == str(product)[::-1]: # Check if the product is a palindrome if product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"Write a python function to find the most frequent element in an array. The function should take an array as input and return the most frequent element.","solution":"def most_frequent_element(arr): Returns the most frequent element in the array. if not arr: return None frequency = {} for element in arr: frequency[element] = frequency.get(element, 0) + 1 most_frequent = max(frequency, key=frequency.get) return most_frequent"},{"question":"Write a python function to reverse a number without converting it to a string. I want to implement it using while loop.","solution":"def reverse_number(n): Reverses the given integer number without converting it to a string. reversed_num = 0 is_negative = n < 0 n = abs(n) while n > 0: reversed_num = reversed_num * 10 + n % 10 n = n // 10 if is_negative: reversed_num = -reversed_num return reversed_num"},{"question":"Write a python function to find the median of a list of numbers and demonstrate its usage.","solution":"def find_median(numbers): Finds the median of a list of numbers. Parameters: numbers (list): List of numbers Returns: float: The median of the list sorted_numbers = sorted(numbers) n = len(sorted_numbers) middle = n // 2 if n % 2 == 0: return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2.0 else: return sorted_numbers[middle] # Example usage: # numbers = [1, 3, 4, 2, 5] # print(find_median(numbers)) # Output should be 3"},{"question":"Write a python function to calculate the total cost of an order, given the price per item, the number of items, and an optional discount percentage. The function should return the total cost after applying the discount. If no discount is provided, no discount should be applied.","solution":"def calculate_total_cost(price_per_item, number_of_items, discount_percentage=0): Calculate the total cost of an order after applying an optional discount. :param price_per_item: The price of a single item :param number_of_items: The number of items being purchased :param discount_percentage: The optional discount percentage to be applied :return: The total cost after discount total_cost = price_per_item * number_of_items discount_amount = total_cost * (discount_percentage / 100) final_cost = total_cost - discount_amount return final_cost"},{"question":"Write a python function to find the number of inversions in a given array. An inversion is a pair of indexes \`i\` and \`j\` such that \`i < j\` and \`arr[i] > arr[j]\`.","solution":"def count_inversions(arr): Counts the number of inversions in an array. An inversion is a pair of indexes i, j such that i < j and arr[i] > arr[j]. Parameters: arr (list): The input array of integers. Returns: int: The number of inversions in the array. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count return merge_sort_and_count(arr, [0]*len(arr), 0, len(arr)-1)"},{"question":"Write a python function to reverse the first n characters in a string and keep the rest of the characters in their original order.","solution":"def reverse_first_n_chars(s, n): Reverses the first n characters in a string and keeps the rest of the characters in their original order. Parameters: s (str): The input string. n (int): The number of characters to reverse from the beginning. Returns: str: The modified string with the first n characters reversed. if n > len(s): return s[::-1] # If n is larger than the string length, reverse the entire string. reversed_part = s[:n][::-1] remaining_part = s[n:] return reversed_part + remaining_part"},{"question":"Write a python function to generate all the permutations of a string. The function should handle cases where the input string has duplicate characters and ensure that permutations are unique.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of unique permutations for the given string s. return sorted(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a python function to remove null or empty string items from a list. How can I do this?","solution":"def remove_null_or_empty_items(input_list): Removes null (None) or empty string items from the given list. Parameters: input_list (List): A list of items which may include None or empty strings. Returns: List: A list with all None or empty string items removed. return [item for item in input_list if item is not None and item != '']"},{"question":"Write a python function to find the longest common substring between two given strings. longestCommonSubstring(\\"logaroo\\", \\"lag\\") should return \\"log\\".","solution":"def longestCommonSubstring(s1, s2): Finds the longest common substring between two given strings s1 and s2. Args: s1 (str): The first string. s2 (str): The second string. Returns: str: The longest common substring. m, n = len(s1), len(s2) max_len = 0 end_index_s1 = 0 dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_len: max_len = dp[i][j] end_index_s1 = i else: dp[i][j] = 0 return s1[end_index_s1 - max_len:end_index_s1]"},{"question":"Write a python function to reverse the order of words in a string and return the modified string.","solution":"def reverse_words(s): Reverses the order of words in a string. return ' '.join(s.split()[::-1])"},{"question":"Write a python function to calculate the sum of all divisors of a given number 'n', excluding 'n' itself. For example, the sum of divisors of 6 is 1 + 2 + 3 = 6.","solution":"def sum_of_divisors(n): Returns the sum of all divisors of n, excluding n itself. sum_divisors = 0 for i in range(1, n): if n % i == 0: sum_divisors += i return sum_divisors"},{"question":"Write a python function to distinct consecutive duplicates from a string, keeping only the first occurrence of each consecutive duplicate group.","solution":"def remove_consecutive_duplicates(s): Given a string s, remove consecutive duplicate characters, keeping only the first occurrence of each group. if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Write a python function to detect the presence of a substring within a string, and return the substring if found along with its starting and ending index. If not found, return -1. The function should also handle case sensitivity and returns only one instance of the substring.","solution":"def find_substring(main_string, sub_string): Detects the presence of a substring within a string, and returns a tuple of the substring along with its starting and ending index if found. If not found, returns -1. Args: main_string (str): The string to search within. sub_string (str): The substring to search for. Returns: tuple or int: A tuple containing the substring and its starting and ending index if found, otherwise -1. start_index = main_string.find(sub_string) if start_index == -1: return -1 end_index = start_index + len(sub_string) - 1 return (sub_string, start_index, end_index)"},{"question":"Write a python function to parse a CSV file containing user data with columns 'Name', 'Age', and 'Occupation'. The function should return a list of dictionaries, where each dictionary represents a user and contains the keys 'Name', 'Age', and 'Occupation'.","solution":"import csv def parse_csv(file_path): Parses a CSV file containing user data with columns 'Name', 'Age', and 'Occupation'. Args: file_path (str): The path to the CSV file to parse. Returns: list[dict]: A list of dictionaries, where each dictionary contains 'Name', 'Age', and 'Occupation' keys. user_list = [] with open(file_path, mode='r', newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: user_list.append({ 'Name': row['Name'], 'Age': row['Age'], 'Occupation': row['Occupation'] }) return user_list"},{"question":"Write a python function to print all prime numbers between 0 and N. You should consider values of N up to 100,000.","solution":"def get_primes_up_to(n): Returns a list of all prime numbers up to n (inclusive). if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return [i for i in range(n + 1) if sieve[i]]"},{"question":"Write a python function to calculate the sum of quantities for a given list of dictionaries. Each dictionary in the list contains 'id' and 'quantity' keys. The function should return a dictionary where the keys are the 'id' values and the values are the sum of the corresponding 'quantity' values from all dictionaries in the list.","solution":"def sum_quantities(items): Returns a dictionary with the sum of quantities for each id in the list of items. Parameters: items (list of dicts): A list where each element is a dictionary containing 'id' and 'quantity'. Returns: dict: A dictionary where the keys are 'id's and values are the sum of quantities for that id. result = {} for item in items: _id = item['id'] if _id in result: result[_id] += item['quantity'] else: result[_id] = item['quantity'] return result"},{"question":"Write a python function to return the largest of three numbers given three inputs num1, num2, and num3. How can I do this?","solution":"def largest_of_three(num1, num2, num3): Returns the largest of three numbers. if num1 >= num2 and num1 >= num3: return num1 elif num2 >= num1 and num2 >= num3: return num2 else: return num3"},{"question":"Write a python function to find the sum of all even numbers between 1 and a given number n (inclusive). The given number n can be any positive integer. Your function should return the sum of all even numbers up to and including 'n'.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n (inclusive). return sum(i for i in range(1, n + 1) if i % 2 == 0)"},{"question":"Write a python function to calculate the factorial of a number using recursive approach. Also, handle the case when a negative number is passed as an argument and raise an appropriate exception.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using a recursive approach. Raises a ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to find the number of possible paths from the top left corner to the bottom right corner of an N x N grid, considering there are obstacles on the grid. The robot can only move either down or right at any point in time.","solution":"def num_paths_with_obstacles(grid): Returns the number of possible paths from the top left corner to the bottom right corner. The robot can only move either down or right at any point in time and there may be obstacles on the grid that block the path. :param grid: List of lists where grid[i][j] == 1 represents an obstacle and grid[i][j] == 0 represents a free space. :return: Number of possible paths. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 continue if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[-1][-1]"},{"question":"Write a python function to generate the Fibonacci sequence up to a given limit. The function should take an integer \`limit\` as an argument and return a list of Fibonacci numbers that are less than or equal to \`limit\`.","solution":"def fibonacci_sequence(limit): Generate a list of Fibonacci numbers up to a given limit. Args: limit (int): The upper limit for the Fibonacci sequence numbers. Returns: List of Fibonacci numbers that are less than or equal to limit. if limit < 0: return [] sequence = [] a, b = 0, 1 while a <= limit: sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to create a list of rolling window_view of an array without using numpy. You should write the rolling window_view function and a main function that uses this window_view function to compute the moving average of an array.","solution":"def rolling_window(arr, window_size): Create a list of rolling windows from the input array. Parameters: arr (list): Input array. window_size (int): Size of the rolling window. Returns: list: A list of rolling windows. if window_size > len(arr) or window_size <= 0: return [] return [arr[i:i + window_size] for i in range(len(arr) - window_size + 1)] def moving_average(arr, window_size): Compute the moving average of an array using the rolling windows. Parameters: arr (list): Input array. window_size (int): Size of the rolling window. Returns: list: A list of moving averages. windows = rolling_window(arr, window_size) return [sum(window) / window_size for window in windows]"},{"question":"Write a python function to generate the first n prime numbers and store them in a list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def generate_primes(n): Returns a list containing the first n prime numbers. if n < 1: return [] primes = [] candidate = 2 while len(primes) < n: for prime in primes: if candidate % prime == 0: break else: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to implement quicksort. Quick sort is a divide and conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort an array. Args: arr (list of int): The list to be sorted. Returns: list of int: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(less) + equal + quicksort(greater)"},{"question":"Write a python function to calculate the sum of all elements in a list. Provide a test case where the input is [2, 3, 4] and the expected output is 9.","solution":"def sum_of_list(lst): Returns the sum of all elements in the list. return sum(lst)"},{"question":"Write a python function to sort a list of names by their length. How can I do this?","solution":"def sort_names_by_length(names): Sort a list of names by their length in ascending order. Parameters: names (list of str): List of names to be sorted. Returns: list of str: Names sorted by their length. return sorted(names, key=len)"},{"question":"Write a python function to extract JSON data from a given URL and convert it into a dictionary.","solution":"import requests def extract_json_from_url(url): Extracts JSON data from the given URL and converts it into a dictionary. Parameters: url (str): The URL to fetch JSON data from. Returns: dict: A dictionary representation of the JSON data. response = requests.get(url) response.raise_for_status() return response.json()"},{"question":"Write a python function to find the maximum sum of a subarray within a given one-dimensional array. This function should also be able to handle negative numbers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within the given one-dimensional array. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to remove all duplicate characters from a string and return the modified string maintaining the original order of characters.","solution":"def remove_duplicates(s): Removes all duplicate characters from a string and returns the modified string maintaining the original order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to find the largest number in a list. The function should return the largest number if found, otherwise return None.","solution":"def find_largest_number(lst): Returns the largest number in a list. If the list is empty, returns None. if not lst: return None return max(lst)"},{"question":"Write a python function to remove all duplicates from a list of integers. For example, given the list \`[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\`, the function should return \`[1, 2, 3, 4]\`.","solution":"def remove_duplicates(input_list): Removes all duplicates from a list of integers. return list(set(input_list))"},{"question":"Write a python function to find the maximum frequency of an element in a list of integers. If the list is empty, return 0.","solution":"def max_frequency(nums): Returns the maximum frequency of an element in the list nums. If the list is empty, returns 0. if not nums: return 0 frequency_dict = {} for num in nums: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 return max(frequency_dict.values())"},{"question":"Write a python function to find the common elements between two sets.","solution":"def common_elements(set1, set2): Returns the common elements between two sets. return set1.intersection(set2)"},{"question":"Write a python function to merge two lists and return the result as a new list without duplicates. The function should also handle cases where the input lists contain non-numeric and non-list data types.","solution":"def merge_lists(list1, list2): Merges two lists and returns a new list without duplicates. The function should handle non-numeric and non-list data types. combined_list = list1 + list2 result_list = [] for item in combined_list: if item not in result_list: result_list.append(item) return result_list"},{"question":"Write a python function to append an element to the end of a list.","solution":"def append_to_list(lst, element): Appends the given element to the end of the list. lst.append(element) return lst"},{"question":"Write a python function to find the minimum number of jumps required to reach the end of the array. If the end cannot be reached, return -1. The function should take an array of non-negative integers where each element represents the maximum jump length from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the end of the array. If the end cannot be reached, returns -1. :param arr: List[int] - non-negative integers representing the maximum jump length from that position :return: int if not arr or len(arr) == 1: return 0 if arr[0] == 0: return -1 n = len(arr) max_reach = arr[0] steps = arr[0] jumps = 1 for i in range(1, n): if i == n - 1: return jumps max_reach = max(max_reach, i + arr[i]) steps -= 1 if steps == 0: jumps += 1 if i >= max_reach: return -1 steps = max_reach - i return -1"},{"question":"Write a python function to calculate the product of all odd numbers between 1 and 10.","solution":"def product_of_odds(): Returns the product of all odd numbers between 1 and 10. product = 1 for num in range(1, 11): if num % 2 != 0: product *= num return product"},{"question":"Write a python function to find the minimum number in a given list of integers. The list can contain both positive and negative integers. The function should return the smallest integer found in the list.","solution":"def find_minimum(nums): Returns the smallest integer in the list nums. if not nums: raise ValueError(\\"The list is empty\\") min_num = nums[0] for num in nums[1:]: if num < min_num: min_num = num return min_num"},{"question":"Write a python function to convert a number into its Roman numeral representation.","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. Parameters: num (int): The integer to be converted to a Roman numeral. Returns: str: The Roman numeral representation of the input integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a python function to check if a number is an Armstrong number. In the Python function, the user will provide an integer, and the function will return \`True\` if the number is an Armstrong number and \`False\` otherwise.","solution":"def is_armstrong(number): Checks if the given number is an Armstrong number. An Armstrong number for a given number of digits is an integer such that the sum of its own digits each raised to the power of the number of digits is equal to the number itself. :param number: int, the number to check :return: bool, True if the number is an Armstrong number, False otherwise digits = [int(d) for d in str(number)] num_digits = len(digits) sum_of_powers = sum([d ** num_digits for d in digits]) return sum_of_powers == number"},{"question":"Write a python function to find the length of the longest increasing subarray in a given array. An increasing subarray is a subarray where each element is strictly greater than the previous one.","solution":"def longest_increasing_subarray(arr): Returns the length of the longest increasing subarray. :param arr: List of integers. :return: Length of the longest increasing subarray. n = len(arr) if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if arr[i] > arr[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Write a python function to find the element that appears most frequently in the given list.","solution":"from collections import Counter def most_frequent_element(lst): Returns the element that appears most frequently in the given list. if not lst: return None count = Counter(lst) return count.most_common(1)[0][0]"},{"question":"Write a python function to convert a Roman numeral to an integer. How should the function handle cases with invalid Roman numerals as input?","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. If the input is not a valid Roman numeral, raise a ValueError. roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} valid_roman_numerals = {**roman_values, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900} i, total = 0, 0 while i < len(s): if i + 1 < len(s) and s[i:i+2] in valid_roman_numerals: total += valid_roman_numerals[s[i:i+2]] i += 2 elif s[i] in roman_values: total += roman_values[s[i]] i += 1 else: raise ValueError(f\\"Invalid Roman numeral: {s}\\") return total"},{"question":"Write a python function to return the number of vowels in a given string. The function should only consider 'a', 'e', 'i', 'o', and 'u' (both lowercase and uppercase) as vowels. Here is a sample string: \\"Hello, World!\\"","solution":"def count_vowels(input_string): Returns the number of vowels in the given string. Vowels considered are 'a', 'e', 'i', 'o', 'u' and their uppercase counterparts. :param input_string: str :return: int vowels = \\"aeiouAEIOU\\" return sum(1 for char in input_string if char in vowels)"},{"question":"Write a python function to find the maximum sum of a subarray within a given one-dimensional array of numbers. This function should implement Kadane's Algorithm. You need to handle cases where the array contains non-positive numbers.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a subarray within the given one-dimensional array of numbers using Kadane's Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to calculate the length of the hypotenuse of a right triangle given the lengths of the other two sides.","solution":"import math def hypotenuse_length(a, b): Returns the length of the hypotenuse of a right triangle given the lengths of the other two sides a and b. return math.sqrt(a**2 + b**2)"},{"question":"Write a python function to calculate the sum of the digits of a given positive integer. The function should also check if the sum is a prime number. If the sum is a prime number, return both the sum and a boolean value \`True\`. If the sum is not a prime number, return both the sum and a boolean value \`False\`.","solution":"def is_prime(n): Determines if the provided integer n is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_digits(n): Calculate the sum of the digits of a given positive integer n. Returns a tuple containing the sum and a boolean indicating whether the sum is a prime number. total = sum(int(digit) for digit in str(n)) return total, is_prime(total)"},{"question":"Write a python function to print all the perfect numbers between 1 and 1000. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, 6 is a perfection number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6.","solution":"def perfect_numbers_between_1_and_1000(): Returns a list of all the perfect numbers between 1 and 1000. def is_perfect(n): Check if a number is perfect. divisors = [i for i in range(1, n) if n % i == 0] return sum(divisors) == n return [n for n in range(1, 1001) if is_perfect(n)]"},{"question":"Write a python function to sum all values of a given 2D list and return the result.","solution":"def sum_2d_list(matrix): Returns the sum of all values in a given 2D list. Args: matrix (list of list of int/float): A 2D list of integers or floats. Returns: int/float: The sum of all values in the 2D list. total = 0 for row in matrix: total += sum(row) return total"},{"question":"Write a python function to create a list of dictionaries where each dictionary represents a user. Each dictionary should contain the keys 'name', 'age', and 'email', and the values should be read from the user as input.","solution":"def create_users_list(number_of_users): Create a list of dictionaries where each dictionary represents a user. Each dictionary contains the keys 'name', 'age', and 'email', and the values are read from the user as input. Parameters: number_of_users (int): The number of users to create. Returns: List[Dict[str, Union[str, int]]]: List of user dictionaries. users = [] for _ in range(number_of_users): user = {} user['name'] = input(\\"Enter user's name: \\") user['age'] = int(input(\\"Enter user's age: \\")) user['email'] = input(\\"Enter user's email: \\") users.append(user) return users"},{"question":"Write a python function to return the nth number in the Fibonacci sequence without using recursion.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for i in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to convert a given string to a dictionary where the keys are the characters and the values are their respective ASCII values.","solution":"def string_to_ascii_dict(s): Converts a given string to a dictionary where the keys are the characters and the values are their respective ASCII values. Parameters: s (str): input string Returns: dict: dictionary with characters as keys and ASCII values as values return {char: ord(char) for char in s}"},{"question":"Write a python function to find the most frequent word in a given text. If there are multiple words with the same highest frequency, return all of them.","solution":"from collections import Counter def most_frequent_words(text): Returns the most frequent word(s) in the given text. If multiple words have the same highest frequency, returns all of them in a list. words = text.split() counter = Counter(words) if not counter: return [] max_freq = max(counter.values()) most_frequent = [word for word, freq in counter.items() if freq == max_freq] return most_frequent"},{"question":"Write a python function to reverse an integer without changing the position of the digits '0' at the end. For example, if the input is 100, the output should be 1. If the input is -100, the output should be -1.","solution":"def reverse_integer(n): Reverses the integer n without changing the position of the digits '0' at the end. Example: 100 -> 1, -100 -> -1 if n == 0: return 0 # Handle negative numbers sign = -1 if n < 0 else 1 n_abs = abs(n) # Convert to string and strip trailing zeros n_str = str(n_abs).rstrip('0') # Reverse the string and convert back to integer reversed_str = n_str[::-1] reversed_int = int(reversed_str) # Restore the sign return sign * reversed_int"},{"question":"Write a python function to identify all the anagrams of a given string. How can I do this in Python?","solution":"from itertools import permutations def find_anagrams(s): Returns a list of all unique anagrams of the given string s. # Generate all permutations of the string and use a set to filter out duplicates anagrams = set([''.join(p) for p in permutations(s)]) return list(anagrams)"},{"question":"Write a python function to find the minimum number of operations required to convert a string \`s1\` to a string \`s2\`. The operations include insertion, deletion, and substitution of characters. This problem is also known as the Levenshtein distance problem. You should use dynamic programming to solve it.","solution":"def levenshtein_distance(s1, s2): Returns the minimum number of operations required to convert s1 to s2 using insertion, deletion, and substitution. m, n = len(s1), len(s2) # Create a DP table to memoize results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all of s2's characters elif j == 0: dp[i][j] = i # If s2 is empty, delete all of s1's characters elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are the same, ignore them else: dp[i][j] = 1 + min(dp[i-1][j], # Deletion dp[i][j-1], # Insertion dp[i-1][j-1]) # Substitution return dp[m][n]"},{"question":"Write a python function to find the intersection of two lists, but the intersection should only include elements that appear exactly once in both lists.","solution":"def intersection_unique_elements(list1, list2): Returns the intersection of two lists, but only includes elements that appear exactly once in both lists. unique_list1 = [x for x in list1 if list1.count(x) == 1] unique_list2 = [x for x in list2 if list2.count(x) == 1] intersection = set(unique_list1) & set(unique_list2) return list(intersection)"},{"question":"Write a python function to check if a given number is a multiple of another number.","solution":"def is_multiple(a, b): Returns True if a is a multiple of b, otherwise False. if b == 0: raise ValueError(\\"The divisor (b) cannot be zero.\\") return a % b == 0"},{"question":"Write a python function to traverse a multilevel list, add up the digits of each number, and return the total sum.","solution":"def sum_of_digits_in_multilevel_list(lst): Traverses a multilevel list, adds up the digits of each number, and returns the total sum. Parameters: lst (list): A nested list of integers Returns: int: The total sum of the digits total_sum = 0 def sum_digits(n): Returns the sum of the digits of a number n. return sum(int(digit) for digit in str(n) if digit.isdigit()) def traverse_and_sum(sublist): nonlocal total_sum for item in sublist: if isinstance(item, list): traverse_and_sum(item) elif isinstance(item, int): total_sum += sum_digits(item) traverse_and_sum(lst) return total_sum"},{"question":"Write a python function to extract the title from HTML content. The title should be returned as a string. If no title is found, return an empty string.","solution":"from bs4 import BeautifulSoup def extract_title(html_content): Extract the title from the given HTML content. :param html_content: A string containing HTML content :return: The title of the HTML content as a string, or an empty string if no title is found soup = BeautifulSoup(html_content, 'html.parser') title_tag = soup.find('title') if title_tag: return title_tag.string return \\"\\""},{"question":"Write a python function to count the maximum number of consecutive ones in a binary array.","solution":"def max_consecutive_ones(binary_array): Returns the maximum number of consecutive 1s in a binary array. Args: binary_array (list of int): A list containing 0s and 1s. Returns: int: The maximum number of consecutive 1s. max_count = 0 current_count = 0 for num in binary_array: if num == 1: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Write a python function to check if a given 2D list (matrix) is a magic square or not. A magic square is a square matrix in which the sums of the numbers in each row, each column, and both main diagonals are all the same.","solution":"def is_magic_square(matrix): Check if a given 2D list (matrix) is a magic square. :param matrix: List[List[int]] :return: bool n = len(matrix) # Check if matrix is square if not all(len(row) == n for row in matrix): return False # Calculate the sum of the first row sum_diagonal1 = sum_diagonal2 = 0 target_sum = sum(matrix[0]) for i in range(n): # Sum for rows and columns row_sum = sum(matrix[i]) col_sum = sum(matrix[j][i] for j in range(n)) # Check if sums match target_sum if row_sum != target_sum or col_sum != target_sum: return False # Sum for both diagonals sum_diagonal1 += matrix[i][i] sum_diagonal2 += matrix[i][n - 1 - i] if sum_diagonal1 != target_sum or sum_diagonal2 != target_sum: return False return True"},{"question":"Write a python function to return the sum of all pairs of numbers in a list of integers. The function should take a list of integers as input and return a single integer representing the sum of all pairs.","solution":"def sum_of_pairs(numbers): Returns the sum of all pairs of numbers in a list. A pair is formed by considering two subsequent elements in the list. Args: - numbers (list): a list of integers Returns: - int: the sum of all pairs total_sum = 0 n = len(numbers) for i in range(0, n-1, 2): total_sum += numbers[i] + numbers[i+1] return total_sum"},{"question":"Write a python function to find the indices of all occurrences of a given element in a list.","solution":"def find_indices(lst, element): Returns a list of indices where the element is found in the list. Parameters: lst (list): The list to search through. element: The element to find in the list. Returns: list: A list of indices where the element is found. return [index for index, value in enumerate(lst) if value == element]"},{"question":"Write a python function to add two numbers represented as string. The function should return the sum as a string. The numbers can be very large, so use built-in library for handling large integers.","solution":"def add_strings(num1, num2): Returns the sum of two numbers represented as strings. # Convert the string numbers to integers, add them, and convert the result back to string result = int(num1) + int(num2) return str(result)"},{"question":"Write a python function to append text to the end of a string.","solution":"def append_text(original_string, text_to_append): Appends the specified text to the end of the original string. Parameters: original_string (str): The original string. text_to_append (str): The text to append to the end of the original string. Returns: str: The resulting string after appending the text. return original_string + text_to_append"},{"question":"Write a python function to find the most repeated element in a list. If there are multiple elements with the same highest frequency, return all of them.","solution":"from collections import Counter from typing import List def most_repeated_elements(lst: List[int]) -> List[int]: Find the most repeated element(s) in a list. If there are multiple elements with the same highest frequency, return all of them. :param lst: List of integers :return: List of most repeated element(s) if not lst: return [] counter = Counter(lst) max_count = max(counter.values()) most_repeated = [item for item, count in counter.items() if count == max_count] return most_repeated"},{"question":"Write a python function to implement a quick sort algorithm on an array of integers. Can you provide a simple explanation and example of how to use this function?","solution":"def quick_sort(arr): Sorts an array of integers using the quick sort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) # Example of how to use this function example_array = [3, 6, 8, 10, 1, 2, 1] sorted_array = quick_sort(example_array) print(sorted_array) # Output will be [1, 1, 2, 3, 6, 8, 10]"},{"question":"Write a python function to generate Fibonacci Series up to given number n. Here is the prototype of the function : \`\`def generate_fibonacci(n):\`\`. The function should return a list of Fibonacci numbers up to \`n\`. For example, if \`n\` is 10, the function should return \`[0, 1, 1, 2, 3, 5, 8]\`.","solution":"def generate_fibonacci(n): Returns a list of Fibonacci numbers up to n. if n < 0: return [] fib_series = [0, 1] while True: next_fib = fib_series[-1] + fib_series[-2] if next_fib > n: break fib_series.append(next_fib) return fib_series[:1] if n == 0 else fib_series"},{"question":"Write a python function to find the minimum element in an array using a single loop. The function should return the minimum element and the index at which it occurs.","solution":"def find_min_element(arr): Returns the minimum element and its index in the array. Parameters: arr (list): The list of elements to search through. Returns: tuple: A tuple containing the minimum element and the index at which it occurs. if not arr: return None, None min_element = arr[0] min_index = 0 for i in range(1, len(arr)): if arr[i] < min_element: min_element = arr[i] min_index = i return min_element, min_index"},{"question":"Write a python function to convert string time to integer time. How should the function handle time in a 24-hour format?","solution":"def convert_time_to_minutes(time_str): Converts a time string in 'HH:MM' format to the number of minutes past midnight. :param time_str: String, time in 'HH:MM' format. :return: Integer, minutes past midnight. hours, minutes = map(int, time_str.split(':')) return hours * 60 + minutes"},{"question":"Write a python function to implement the \\"reverse\\" of bubble sort. This function should take a list of integers and sort it in reverse order using the bubble sort algorithm. The function should return the sorted list.","solution":"def reverse_bubble_sort(arr): Sort the list of integers in reverse order using the bubble sort algorithm. Args: arr (list): A list of integers to be sorted. Returns: list: The list sorted in reverse order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the nth largest element in a list of integers. The function should be efficient and handle large lists.","solution":"import heapq def nth_largest_element(lst, n): Returns the nth largest element in the list of integers. if n <= 0 or n > len(lst): raise ValueError(\\"n must be between 1 and the length of the list\\") return heapq.nlargest(n, lst)[-1]"},{"question":"Write a python function to convert a given list into a dictionary.","solution":"def list_to_dict(input_list): Converts a given list into a dictionary where the indices become the keys and the elements become the values. Args: input_list (list): A list of elements. Returns: dict: A dictionary with keys as indices and values as list elements. return {index: value for index, value in enumerate(input_list)}"},{"question":"Write a python function to find all the Fibonacci numbers that are less than a given integer n.","solution":"def fibonacci_less_than(n): Returns a list of all Fibonacci numbers less than n. if n <= 0: return [] fibonacci_sequence = [] a, b = 0, 1 while a < n: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Write a python function to find the first occurrence of a character in a string. The function should accept two parameters: the input string and the character to search for. If the character exists in the string, return the index of its first occurrence. Otherwise, return -1.","solution":"def find_first_occurrence(input_string, char_to_find): Returns the index of the first occurrence of char_to_find in input_string. If the character does not exist in the string, returns -1. if not input_string or not char_to_find: return -1 return input_string.find(char_to_find)"},{"question":"Write a python function to find the sum of all elements in a list. Please provide a function that is recursive, uses iteration, and includes error handling for non-numeric elements in the list.","solution":"def recursive_sum(lst): Returns the sum of all numeric elements in the list. Handles non-numeric elements by raising a ValueError. # Base case if not lst: return 0 # Check if the first element is numeric if not isinstance(lst[0], (int, float)): raise ValueError(f\\"Non-numeric element found: {lst[0]}\\") # Recursive step return lst[0] + recursive_sum(lst[1:]) def iterative_sum(lst): Returns the sum of all numeric elements in the list using iteration. Handles non-numeric elements by raising a ValueError. total = 0 for element in lst: if not isinstance(element, (int, float)): raise ValueError(f\\"Non-numeric element found: {element}\\") total += element return total"},{"question":"Write a python function to generate Fibonacci series up to n numbers and return the series as a list. The Fibonacci series is defined as a series of numbers in which each number after the first two is the sum of the two preceding ones. The sequence commonly starts with 0 and 1.","solution":"def fibonacci_series(n): Generates Fibonacci series up to n numbers and returns the series as a list. :param n: int - the number of terms in the Fibonacci series to generate :return: list - the Fibonacci series up to n numbers if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] series = [0, 1] for _ in range(2, n): next_term = series[-1] + series[-2] series.append(next_term) return series"},{"question":"Write a python function to find the sum of all even numbers and the sum of all odd numbers in a given range.","solution":"def sum_even_odd(start, end): Returns the sum of all even numbers and the sum of all odd numbers in the given range (inclusive). Parameters: - start: int, start of the range - end: int, end of the range Returns: - (int, int): tuple containing the sum of even numbers and the sum of odd numbers even_sum = 0 odd_sum = 0 for num in range(start, end + 1): if num % 2 == 0: even_sum += num else: odd_sum += num return even_sum, odd_sum"},{"question":"Write a python function to find all the prime numbers in a given list of numbers and return a list of those prime numbers.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes(numbers): Returns a list of prime numbers from the given list of numbers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to find the maximum value in a list of integers. The list may contain up to 10^6 elements, so consider time and space efficiency.","solution":"def find_maximum(nums): Returns the maximum value in a list of integers. if not nums: raise ValueError(\\"The list is empty\\") max_value = nums[0] for num in nums: if num > max_value: max_value = num return max_value"},{"question":"Write a python function to check whether a given date is a valid date or not. You should consider the rules of leap years for calculating the number of days in February.","solution":"def is_valid_date(year, month, day): Checks if the given date is valid. Considers leap year rules. Parameters: year (int): Year component of the date. month (int): Month component of the date. day (int): Day component of the date. Returns: bool: True if the date is valid, False otherwise. if year < 1 or month < 1 or month > 12 or day < 1: return False days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Leap year check if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0): days_in_month[1] = 29 if day > days_in_month[month - 1]: return False return True"},{"question":"Write a python function to reverse the digits of an integer. If reversing the digits causes the integer to go beyond the 32-bit signed integer range [-2^31, 2^31 - 1], then return 0. How can I approach this problem?","solution":"def reverse_integer(x): Reverses the digits of an integer, ensuring the result is within the 32-bit signed integer range. Args: x (int): The integer to reverse. Returns: int: The reversed integer or 0 if it falls outside the 32-bit signed integer range. NEGATIVE_LIMIT = -2**31 POSITIVE_LIMIT = 2**31 - 1 # Keep track of sign sign = -1 if x < 0 else 1 x = abs(x) # Reverse the digits reversed_x = int(str(x)[::-1]) # Apply the original sign reversed_x *= sign # Check if within the 32-bit signed integer range if reversed_x < NEGATIVE_LIMIT or reversed_x > POSITIVE_LIMIT: return 0 else: return reversed_x"},{"question":"Write a python function to check if all elements in a list are even.","solution":"def all_even(lst): Returns True if all elements in the list are even, False otherwise. for num in lst: if num % 2 != 0: return False return True"},{"question":"Write a python function to count the number of even digits in a given integer. The function should return 0 if the number is odd. The function should be named \`count_even_digits\` and should take a single argument \`number\`.","solution":"def count_even_digits(number): Returns the count of even digits in the given integer. If the number is odd, it returns 0. Parameters: number (int): The integer to be checked. Returns: int: The count of even digits or 0 if the number is odd. # Check if the number is odd if number % 2 != 0: return 0 # Convert number to string to iterate through each digit str_number = str(abs(number)) even_count = 0 # Check each digit if it is even for digit in str_number: if int(digit) % 2 == 0: even_count += 1 return even_count"},{"question":"Write a python function to convert a binary string to a decimal number. The function should handle both positive and negative binary strings. For positive binary strings, simply convert the binary number to a decimal. For negative binary strings, consider the two's complement representation. For example, \\"-1011\\" should be converted to decimal as -11.","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number. Supports both positive and negative binary strings using two's complement for negatives. if binary_str[0] == '-': # Two's complement negative binary binary_str = binary_str[1:] # Remove the negative sign return -int(binary_str, 2) else: # Positive binary return int(binary_str, 2)"},{"question":"Write a python function to solve the linear equations.","solution":"import numpy as np def solve_linear_equations(A, b): Solves the system of linear equations Ax = b for x. Parameters: A (2D list or numpy array): Coefficient matrix. b (1D list or numpy array): Ordinate or dependent variable values. Returns: numpy array: Solution set x. A = np.array(A) b = np.array(b) x = np.linalg.solve(A, b) return x"},{"question":"Write a python function to swap elements of a list in reverse order. For example, given the list [1, 2, 3, 4, 5], the function should return [5, 4, 3, 2, 1].","solution":"def reverse_list(lst): Returns a new list with the elements in reverse order. return lst[::-1]"},{"question":"Write a python function to find the largest sum of a subarray within a given 1D array. This_sum should start from the current element and must include the current element in the sum. max_sum should hold the maximum sum encountered so far. At each step, update these sums if appropriate and return the max_sum at the end. This is referred to as Kadane's algorithm.","solution":"def max_subarray_sum(arr): Finds the largest sum of a subarray within a given 1D array. This sum must start from the current element and must include the current element in the sum. Parameters: arr (list): A list of integers. Returns: int: The largest sum of a subarray. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the last node of the circular linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def get_last_node(head): Returns the last node of the circular linked list. Parameters: head (Node): The head node of the circular linked list. Returns: Node: The last node of the circular linked list. if head is None: return None current = head while current.next != head: current = current.next return current"},{"question":"Write a python function to find the kth largest element in a given 2D list (matrix) in a time complexity of O(klogk) where k is given.","solution":"import heapq def kth_largest(matrix, k): Finds the kth largest element in a given 2D list (matrix). Args: matrix (list of list of int): The 2D matrix from which to find the kth largest element. k (int): The position of the largest element to find. Returns: int: The kth largest element in the matrix. # Min-heap to store the largest k elements heap = [] # Iterate over all elements in the 2D matrix for row in matrix: for element in row: # Add element to heap heapq.heappush(heap, element) # If heap size exceeds k, remove the smallest element if len(heap) > k: heapq.heappop(heap) # The root of the heap is the kth largest element return heap[0]"},{"question":"Write a python function to return a list of numbers that can be divided by both \`3\` and \`5\`.","solution":"def divisible_by_3_and_5(numbers): Returns a list of numbers that are divisible by both 3 and 5. Parameters: numbers (list): List of numbers to check. Returns: list: List of numbers divisible by both 3 and 5. return [num for num in numbers if num % 3 == 0 and num % 5 == 0]"},{"question":"Write a python function to extract the first letter of each word in a string. For example, for the input \\"apple orange grape\\", the function should return \\"AOG\\".","solution":"def extract_first_letters(sentence): Extracts the first letter of each word in a sentence and returns them concatenated together in uppercase. Parameters: sentence (str): The input string from which to extract the letters. Returns: str: The concatenated first letters in uppercase. words = sentence.split() first_letters = ''.join(word[0].upper() for word in words) return first_letters"},{"question":"Write a python function to sort a list of tuples using the second item of each tuple as the key.","solution":"def sort_by_second_item(tuples_list): Sorts a list of tuples based on the second item of each tuple. Parameters: tuples_list (list): A list of tuples. Returns: list: A list of tuples sorted by the second item. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to return the total sum of all elements in a list. The function should take the list as an argument and return the sum of its elements.","solution":"def total_sum(elements): Returns the total sum of all elements in the list. :param elements: list of numbers :return: sum of elements in the list return sum(elements)"},{"question":"Write a python function to calculate the Fibonacci sequence using iteration.","solution":"def fibonacci(n): Returns the nth Fibonacci number using iteration. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to reverse the elements of an array and then sum all the elements of the reversed array.","solution":"def reverse_and_sum(arr): Reverses the elements of the array and then sums all the elements of the reversed array. Parameters: arr (list): A list of numbers. Returns: int: The sum of the elements of the reversed array. reversed_arr = arr[::-1] return sum(reversed_arr)"},{"question":"Write a python function to remove duplicate characters from a string in a single traversal. How would you hash characters and solve this problem using Python?","solution":"def remove_duplicate_characters(s): Removes duplicate characters from a string in a single traversal. Parameters: s (str): The input string Returns: str: The string with duplicate characters removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to prompt the user for their favorite color and then print out a message with their favorite color.","solution":"def favorite_color(): Prompts the user for their favorite color and prints out a message with their favorite color. color = input(\\"What is your favorite color? \\") print(f\\"Your favorite color is {color}!\\")"},{"question":"Write a python function to remove the duplicate elements from a list. What are the different ways to implement this solution? Provide examples.","solution":"def remove_duplicates(lst): Remove duplicates from a list while preserving the order of elements. Parameters: lst (list): The list from which to remove duplicates. Returns: list: A new list without duplicates, preserving the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the maximum depth of a binary tree. For this task, you can assume that the tree is represented using a standard Node class where each Node has a value and two children, left and right.","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree. if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to perform an inorder traversal on a binary tree. In-order traversal means visiting the left subtree of a node, then the node itself, and finally, the right subtree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorder_traversal(root): Perform an in-order traversal of a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: list: A list of values representing the in-order traversal. result = [] def inorder(node): if not node: return inorder(node.left) result.append(node.value) inorder(node.right) inorder(root) return result"},{"question":"Write a python function to recursively find the float number between 0 and 1 that has the binary representation of length \`n\` and is closest to 0.5.","solution":"def closest_to_half(n, current=\\"\\", depth=0): Recursively finds the float number between 0 and 1 that has the binary representation of length \`n\` and is closest to 0.5. if depth == n: return float(int(current, 2)) / 2**n # exploring with '1' and '0' at the current depth with_zero = closest_to_half(n, current + \\"0\\", depth + 1) with_one = closest_to_half(n, current + \\"1\\", depth + 1) if abs(with_zero - 0.5) < abs(with_one - 0.5): return with_zero else: return with_one"},{"question":"Write a python function to find all unique pairs of numbers in a given list that sum up to a specific target sum. The function should return a list of tuples, where each tuple contains a pair of numbers that add up to the target sum. The function should ignore duplicates in the list and ensure that each pair is unique.","solution":"def find_unique_pairs(nums, target): Finds all unique pairs of numbers in the given list that sum up to the target sum. Args: nums (list): List of integers. target (int): Target sum. Returns: list of tuples: Unique pairs that sum up to the target. nums = list(set(nums)) # Remove duplicates nums.sort() # Optional: Sort the list for easier processing result = [] seen = set() for i in range(len(nums)): complement = target - nums[i] if complement in seen: result.append((complement, nums[i])) seen.add(nums[i]) return result"},{"question":"Write a python function to find the maximum element in a list using recursion. How would you solve this problem step-by-step?","solution":"def find_max(arr): Returns the maximum element in a list using recursion. Parameters: arr (list): A list of comparable elements Returns: max_element: The maximum element in the list # Base case: If there's only one element, return it if len(arr) == 1: return arr[0] # Recursive case: Find the maximum of the rest of the list max_of_rest = find_max(arr[1:]) # Compare the first element with the maximum of the rest of the list if arr[0] > max_of_rest: return arr[0] else: return max_of_rest"},{"question":"Write a python function to generate all combinations of a list of elements. The function should take a list as input and return a list of lists, where each inner list represents a unique combination of the elements from the input list.","solution":"from itertools import combinations def generate_combinations(elements): Generate all combinations of the given list of elements. Parameters: elements (list): A list of elements to generate combinations from. Returns: list: A list of lists where each inner list is a unique combination of the elements. all_combinations = [] for r in range(1, len(elements) + 1): all_combinations.extend(combinations(elements, r)) return [list(comb) for comb in all_combinations]"},{"question":"Write a python function to find the mid-point of a linked list using the two-pointer technique. If the linked list has an even number of nodes, return the second middle node.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def find_mid_point(head): Finds the mid-point of the linked list. If the linked list has an even number of nodes, returns the second middle node. :param head: ListNode, the head of the linked list :return: ListNode, the mid-point node of the linked list if not head: return None slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow"},{"question":"Write a python function to replace the second to last element of a list with a specified value. If the list has less than two elements, return an empty list. Here is a sample code that attempts to solve this problem, but it does not work as expected. Could you please fix the code?","solution":"def replace_second_to_last(lst, value): Replaces the second to last element of the list with the specified value. If the list has less than two elements, returns an empty list. Parameters: lst (list): The original list. value: The value to replace the second to last element with. Returns: list: The modified list if it has at least two elements, otherwise an empty list. if len(lst) < 2: return [] else: lst[-2] = value return lst"},{"question":"Write a python function to calculate the factorial of a given number. However, instead of using recursion, you should use a loop to determine the factorial.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using a loop. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to remove all duplicates without any method like set() or using temp variable, also try not to use sort() function.","solution":"def remove_duplicates(lst): Remove all duplicate elements from a list without using set or a temporary variable. Args: lst (list): The list with potential duplicates. Returns: list: A new list with duplicates removed. result = [] for item in lst: if item not in result: result.append(item) return result"},{"question":"Write a python function to generate the following output based on a given string.","solution":"def character_count(s): Returns a dictionary with characters as keys and their counts as values. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write a python function to sort a list of strings alphabetically and return the sorted list. The function should also ensure that all strings are converted to the same case (either upper or lower) for a proper alphabetical comparison. You can choose to convert them to either lower or upper case.","solution":"def sort_strings_alphabetically(strings): Sorts a list of strings alphabetically, converting all strings to the same case. Parameters: strings (list): List of strings to sort. Returns: list: Alphabetically sorted list of strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a python function to parse a JSON string and extract all string values that appear in the JSON structure. For example, given the JSON string '{\\"a\\": \\"1\\",\\"b\\" : \\"2\\",\\"c\\": {\\"d\\": \\"3\\",\\"e\\": {\\"f\\": \\"4\\",\\"g\\": \\"5\\"}}', the function should return all string values as a list: ['1', '2', '3', '4', '5'].","solution":"import json def extract_string_values(json_str): Parses a JSON string and extracts all string values that appear in the JSON structure. Parameters: json_str (str): A JSON-formatted string. Returns: List[str]: A list of all string values in the JSON structure. def recursive_extract(data): if isinstance(data, dict): for value in data.values(): yield from recursive_extract(value) elif isinstance(data, list): for item in data: yield from recursive_extract(item) elif isinstance(data, str): yield data data = json.loads(json_str) return list(recursive_extract(data))"},{"question":"Write a python function to convert an integer to a binary string, ensuring the result has a leading '0b' prefix.","solution":"def int_to_binary(n): Converts an integer to a binary string with '0b' prefix. Args: n (int): The integer to be converted. Returns: str: The binary string representation of the integer with '0b' prefix. return bin(n)"},{"question":"Write a python function to find and return the minimun element in an unsorted list of integers.","solution":"def find_minimum(nums): Returns the minimum element in an unsorted list of integers. Parameters: nums (list): A list of integers Returns: int: The minimum element in the list if not nums: raise ValueError(\\"The list is empty\\") min_val = nums[0] for num in nums: if num < min_val: min_val = num return min_val"},{"question":"Write a python function to find the maximum profit that can be achieved by buying and selling stocks multiple times. You are only allowed to complete at most one transaction (i.e., buy one and sell one share of the stock) per day. Multiple transactions can be made at the same time (i.e., you can trade multiple times). However, you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before buying again).","solution":"def max_profit(prices): Calculate the maximum profit from multiple transactions on given stock prices. Parameters: prices (list): A list of stock prices where prices[i] is the price of the stock on the i-th day. Returns: int: Maximum profit that can be achieved. n = len(prices) if n == 0: return 0 max_profit = 0 for i in range(1, n): if prices[i] > prices[i-1]: max_profit += prices[i] - prices[i-1] return max_profit"},{"question":"Write a python function to sort a list of tuples based on the second value in each tuple, using the \`sorted()\` function. Your function should take a list of tuples as an argument and return an array where the tuples are sorted based on the second value.","solution":"def sort_tuples_by_second_value(tuples_list): Returns a list of tuples sorted by the second value in each tuple. Args: tuples_list (list of tuple): A list of tuples to be sorted. Returns: list of tuple: The list of tuples sorted based on the second value. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to check if a given list is sorted in ascending order, considering both integers and floating-point numbers. The function should handle an empty list and a list with a single element. It should also handle lists with mixed data types that raise an appropriate exception.","solution":"def is_sorted(lst): Checks if the list is sorted in ascending order. Handles both integers and floating-point numbers. Args: lst (list): The list to check. Returns: bool: True if the list is sorted in ascending order, False otherwise. Raises: TypeError: If the list contains mixed data types that cannot be compared. if not lst or len(lst) == 1: return True try: for i in range(len(lst) - 1): if lst[i] > lst[i + 1]: return False return True except TypeError: raise TypeError(\\"List contains elements that cannot be compared\\")"},{"question":"Write a python function to count the number of bits required to flip to convert integer A to integer B.","solution":"def count_bits_to_flip(A, B): Returns the number of bits required to flip to convert integer A to integer B. # XOR of A and B will have bits set wherever A and B differ xor = A ^ B # Count the number of set bits in the result count = 0 while xor: count += xor & 1 xor >>= 1 return count"},{"question":"Write a python function to calculate the sum of even numbers from 1 to a given integer 'n' using recursion.","solution":"def sum_of_even_numbers(n): Returns the sum of even numbers from 1 to the given integer n using recursion. if n < 2: return 0 elif n % 2 == 0: return n + sum_of_even_numbers(n-2) else: return sum_of_even_numbers(n-1)"},{"question":"Write a python function to find the minimum number of jumps to reach the end of the array from the first element. You can assume that you can jump from index i to i+nums[i] where 0 <= i < n.","solution":"def min_jumps(nums): Finds the minimum number of jumps to reach the end of the array from the first element. :param nums: List of non-negative integers representing max jump lengths. :return: Minimum number of jumps to reach the last element in the array. if len(nums) <= 1: return 0 jumps = 0 current_end = 0 current_farthest = 0 for i in range(len(nums)): current_farthest = max(current_farthest, i + nums[i]) if i == current_end: jumps += 1 current_end = current_farthest if current_end >= len(nums) - 1: break return jumps"},{"question":"Write a python function to add all the elements of a list, but not the elements that are multiples of 3.","solution":"def sum_except_multiples_of_three(lst): Returns the sum of all the elements in the list except for those which are multiples of 3. return sum(x for x in lst if x % 3 != 0)"},{"question":"Write a python function to find the first repeating character in a string. If no character repeats, return None. VLAN tag","solution":"def first_repeating_character(s): Returns the first repeating character in the string s. If no character repeats, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to generate a random maze of a given size and complexity level. The complexity is defined as in \\"Generating Mazes by Hand\\" - https://weblog.jamisbuck.org/2011/1/2/maze-generation-recursive-backtracking.html. The time complexity of your solution is significantly less than O(N^2) since the complexity doesn't depend on the size of the maze itself, but rather the number of steps in creating the maze.","solution":"import random def generate_maze(width, height, complexity=0.75, density=0.75): Generate a random maze using recursive backtracking algorithm. :param width: Width of the maze. :param height: Height of the maze. :param complexity: The complexity of the maze (number of turns). :param density: The density of the maze (number of walls). :return: A maze represented as a list of lists. # Adjust width and height to ensure they are odd width = int(width // 2 * 2 + 1) height = int(height // 2 * 2 + 1) # Create an empty grid maze = [[0 for x in range(width)] for y in range(height)] # Fill borders for x in range(width): maze[0][x] = maze[height - 1][x] = 1 for y in range(height): maze[y][0] = maze[y][width - 1] = 1 # Determine the number of components complexity = int(complexity * (5 * (width + height))) density = int(density * ((height // 2) * (width // 2))) def carve_passages_from(cx, cy): directions = [(2, 0), (-2, 0), (0, 2), (0, -2)] random.shuffle(directions) for dx, dy in directions: nx, ny = cx + dx, cy + dy if 1 <= nx < height and 1 <= ny < width and maze[nx][ny] == 0: if sum([maze[nx + dx][ny + dy] for dx, dy in directions]) == 1: maze[nx - dx // 2][ny - dy // 2] = maze[nx][ny] = 1 carve_passages_from(nx, ny) for _ in range(density): x, y = random.randint(0, height // 2) * 2, random.randint(0, width // 2) * 2 if maze[x][y] == 0: maze[x][y] = 1 carve_passages_from(x, y) return maze"},{"question":"Write a python function to find the minimum value in a given list of integers. You need to solve this without using the built-in min() function.","solution":"def find_minimum(lst): Finds the minimum value in a list of integers without using the built-in min() function. Parameters: lst (list): A list of integers. Returns: int: The minimum value in the list. if not lst: raise ValueError(\\"The list is empty\\") minimum = lst[0] for num in lst[1:]: if num < minimum: minimum = num return minimum"},{"question":"Write a python function to find all anagrams of a string, assuming the input string contains only lower case letters.","solution":"from collections import Counter def find_anagrams(s): Returns all anagrams of a string. if len(s) <= 1: return [s] anagrams_set = set() def backtrack(path, counter): if len(path) == len(s): anagrams_set.add(path) return for char in counter: if counter[char] > 0: counter[char] -= 1 backtrack(path + char, counter) counter[char] += 1 backtrack(\\"\\", Counter(s)) return list(anagrams_set)"},{"question":"Write a python function to solve the problem: Write a function that takes a string containing only digits from 0 to 9, and returns the sum of all digits in the string. If the string is empty or contains no digits, the function should return 0.","solution":"def sum_of_digits(s): Returns the sum of all digits in the string. Parameters: - s (str): A string containing only digits from 0 to 9. Returns: - int: The sum of all digits in the string. If the string is empty or contains no digits, returns 0. if not s or not s.isdigit(): return 0 return sum(int(char) for char in s)"},{"question":"Write a python function to solve the problem of two sum. The function should accept an array of integers and a target integer. It should return the indices of the two numbers such that they add up to the target. If there are no two numbers that add up to the target, return an empty list.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to the target. :param nums: List of integers :param target: Target sum :return: List of two indices num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a python function to find the maximum profit in the stock market. You can only buy and sell one share of stock at a time and you cannot buy and sell the same share of stock at the same day. The function should take a list of prices as input and return the maximum profit that can be achieved.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling one share of stock. :param prices: List of integer prices where prices[i] is the price of the stock on day i :return: Maximum profit achievable, or 0 if no profit can be made if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price else: profit = price - min_price if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a python function to print a square of a given size.","solution":"def print_square(size): Prints a square of the given size using asterisks (*). Parameters: size (int): The size of the square. Returns: None if size <= 0: raise ValueError(\\"Size must be a positive integer\\") square = 'n'.join(['*' * size for _ in range(size)]) return square"},{"question":"Write a python function to remove all occurrences of a specific element from a list. If no elements match the specified element, the function should return the original list.","solution":"def remove_element(lst, element): Removes all occurrences of 'element' from 'lst'. If 'element' is not found, returns the original list. return [x for x in lst if x != element]"},{"question":"Write a python function to reverse the characters of every word in a sentence. To reverse the characters of every word in a sentence, you can create a function that splits the sentence into words, reverses each word, and then joins them back together.","solution":"def reverse_words(sentence): Reverses the characters of every word in the given sentence. Args: sentence (str): The sentence to process. Returns: str: The sentence with each word's characters reversed. words = sentence.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to check whether a given array has a sub-array (of size 2 or more) with a sum equal to a given value. To give you a better understanding, let's say we have an array like [3, 1, 2, 5, 4] and a target sum = 7. The function should return True if there is a sub-array that adds up to the target sum (in this case, it would return True since [2, 5] or [1, 2, 4] both add up to 7), and False otherwise.","solution":"def has_subarray_with_sum(arr, target): Check if there is a sub-array of size 2 or more in the array that sums to the target value. :param arr: List of integers :param target: Integer target sum :return: Boolean value indicating if such a sub-array exists curr_sum = 0 sum_map = {} for i in range(len(arr)): curr_sum += arr[i] if curr_sum == target and i >= 1: return True if (curr_sum - target) in sum_map: if (i - sum_map[curr_sum - target]) >= 2: return True sum_map[curr_sum] = i return False"},{"question":"Write a python function to get the first element of a list.","solution":"def get_first_element(lst): Returns the first element of a list. Parameters: lst (list): A list from which the first element is to be extracted. Returns: The first element of the list if the list is not empty, else None. if lst: return lst[0] return None"},{"question":"Write a python function to convert the first letter of every word in a input sentence to uppercase.","solution":"def capitalize_first_letter(sentence): Converts the first letter of every word in the given sentence to uppercase. Parameters: sentence (str): The input sentence. Returns: str: The sentence with the first letter of every word in uppercase. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Write a python function to check if a number is a vowel. Assistance remembered.","solution":"def is_vowel(character): Returns True if the input character is a vowel (a, e, i, o, u), case insensitive. Returns False otherwise. vowels = \\"aeiouAEIOU\\" return character in vowels"},{"question":"Write a python function to find all distinct solutions to the N-Queens problem. The NQueens problem is a classic combinatorial problem where the goal is to place N queens on an N×N chessboard so that no two queens threaten each other. A queen can attack another queen if they are in the same row, column, or diagonal.","solution":"def solve_n_queens(n): Solve the N-Queens problem and return all distinct solutions. Each solution is represented as a list of strings, where 'Q' indicates a queen and '.' indicates an empty space. def is_valid(board, row, col): # Check if the current position is attacked by any previously placed queens for i in range(row): if board[i] == col or board[i] - i == col - row or board[i] + i == col + row: return False return True def solve(row, board): if row == n: # Convert the board to the desired format and add it to the results solution = [] for i in range(n): row_representation = \\".\\" * board[i] + \\"Q\\" + \\".\\" * (n - board[i] - 1) solution.append(row_representation) results.append(solution) return for col in range(n): if is_valid(board, row, col): board[row] = col solve(row + 1, board) board[row] = -1 results = [] board = [-1] * n solve(0, board) return results"},{"question":"Write a python function to find the number of integers from 1 to 1000 that are divisible by a given number n.","solution":"def count_divisibles(n): Returns the number of integers from 1 to 1000 that are divisible by n. if n == 0: raise ValueError(\\"n must be a non-zero integer\\") return 1000 // n"},{"question":"Write a python function to find the number of elements between a given start value and end value in a sorted array. The function should return the count of elements that are within the range [start, end], inclusive.","solution":"def count_elements_in_range(sorted_array, start, end): Returns the count of elements within the range [start, end] in a sorted array. :param sorted_array: List[int] - A sorted list of integers :param start: int - Start of the range (inclusive) :param end: int - End of the range (inclusive) :return: int - The count of elements within the range [start, end] if not sorted_array or start > end: return 0 left_index = binary_search_left(sorted_array, start) right_index = binary_search_right(sorted_array, end) return right_index - left_index + 1 def binary_search_left(arr, target): Finds the leftmost (first) position where \`target\` should be inserted to maintain sorted order. lo, hi = 0, len(arr) while lo < hi: mid = (lo + hi) // 2 if arr[mid] < target: lo = mid + 1 else: hi = mid return lo def binary_search_right(arr, target): Finds the rightmost (last) position where \`target\` could be inserted to maintain sorted order. lo, hi = 0, len(arr) while lo < hi: mid = (lo + hi) // 2 if arr[mid] <= target: lo = mid + 1 else: hi = mid return lo - 1"},{"question":"Write a python function to calculate the area of a circle and print it to the console. The function should take one parameter, which is the radius of the circle.","solution":"import math def calculate_circle_area(radius): Returns the area of a circle given its radius. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return math.pi * (radius ** 2)"},{"question":"Write a python function to count the occurrences of each character in a given string. Use a dictionary to store the characters as keys and their counts as values. Additionally, return this dictionary.","solution":"def count_characters(s): Returns a dictionary with the count of occurrences of each character in the string s. character_counts = {} for char in s: if char in character_counts: character_counts[char] += 1 else: character_counts[char] = 1 return character_counts"},{"question":"Write a python function to return all prime numbers within a given range","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_in_range(start, end): Returns a list of all prime numbers within the given range [start, end]. prime_numbers = [] for num in range(start, end+1): if is_prime(num): prime_numbers.append(num) return prime_numbers"},{"question":"Write a python function to find the lowest common ancestor (LCA) of two given nodes in a binary tree. Each node in the binary tree contains a value. The LCA of two nodes is the lowest node in the tree that has both nodes as descendants (where each node can be a descendant of itself).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowest_common_cestor(root, p, q): if root is None or root == p or root == q: return root left = lowest_common_cestor(root.left, p, q) right = lowest_common_cestor(root.right, p, q) if left and right: return root return left if left else right"},{"question":"Write a python function to solve the \\"Two Sum\\" problem. The Two Sum problem is a classic example in algorithms where given an array of integers and a target integer, you need to find two numbers such that they add up to the target. Your function should return the indices of the two numbers in the array, while assuming that each input would have exactly one solution, and the same element cannot be used twice.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Args: nums (List[int]): List of integers. target (int): Target sum integer. Returns: List[int]: Indices of the two numbers. num_map = {} # To store the number and its index for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"Write a python function to count the number of occurrences of the the substring \\"cat\\" in the string \\"The cat sat on the mat\\".","solution":"def count_cat_occurrences(input_string): Returns the number of occurrences of the substring 'cat' in the given input string. return input_string.count(\\"cat\\")"},{"question":"Write a python function to count the frequency of words in a given string, and return a dictionary where the keys are the words and the values are their respective counts.","solution":"def count_word_frequency(s): Returns a dictionary where the keys are words and values are their respective counts. Parameters: s (str): The input string. Returns: dict: A dictionary with words as keys and their respective counts as values. words = s.split() frequency = {} for word in words: frequency[word] = frequency.get(word, 0) + 1 return frequency"},{"question":"Write a python function to find the highest and lowest temperatures for a given list of daily temperatures. The function should return a tuple containing two elements: the minimum and maximum temperatures.","solution":"def find_high_low(temperatures): Returns a tuple containing the minimum and maximum temperatures from the given list. if not temperatures: raise ValueError(\\"The temperatures list should not be empty\\") return (min(temperatures), max(temperatures))"},{"question":"Write a python function to find and print all numbers from 1 to 100 that are divisible by 2 or 3.","solution":"def find_divisible_by_2_or_3(): Returns a list of numbers from 1 to 100 that are divisible by 2 or 3. result = [] for num in range(1, 101): if num % 2 == 0 or num % 3 == 0: result.append(num) return result"},{"question":"Write a python function to find the maximum sum of a subarray that contains an even number of integers. The function should take a list of integers as input and return the maximum sum.","solution":"def max_even_length_subarray_sum(nums): Returns the maximum sum of a subarray that contains an even number of integers. Parameters: nums (list of int): A list of integers Returns: int: The maximum sum of a subarray with an even number of integers max_sum = float('-inf') current_sum = 0 for i in range(len(nums)): current_sum = 0 for j in range(i, len(nums)): current_sum += nums[j] if (j - i + 1) % 2 == 0: # Check if the subarray length is even max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if a binary tree is also a binary search tree (BST). A binary tree is considered a binary search tree if for every node, all nodes in its left subtree are smaller (less than) the node's value and all nodes in its right subtree are larger (greater than) the node's value. Also, both the left and the right subtree must also be binary search trees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_bst(node, min_val=float('-inf'), max_val=float('inf')): Determines if a binary tree is a binary search tree (BST). Parameters: node (TreeNode): The root node of the binary tree. min_val (float): The minimum allowed value for the current node (default is negative infinity). max_val (float): The maximum allowed value for the current node (default is positive infinity). Returns: bool: True if the tree is a BST, False otherwise. if not node: return True if not (min_val < node.val < max_val): return False return (is_bst(node.left, min_val, node.val) and is_bst(node.right, node.val, max_val))"},{"question":"Write a python function to find if a graph is a complete graph or not. A complete graph is a simple undirected graph in which every pair of distinct vertices is connected by a unique edge. The function should take an adjacency list representation of the graph as input and return True if the graph is complete, and False otherwise. A graph is represented as a dictionary where keys are vertices and values are lists of adjacent vertices.","solution":"def is_complete_graph(graph): Determines if the given graph is a complete graph. Parameters: graph (dict): The adjacency list representation of the graph. Returns: bool: True if the graph is complete, False otherwise. vertices = list(graph.keys()) vertex_count = len(vertices) for vertex, neighbors in graph.items(): if len(neighbors) != vertex_count - 1: return False for neighbor in vertices: if neighbor != vertex and neighbor not in neighbors: return False return True"},{"question":"Write a python function to reverse the order of elements in a list. The function should also ensure that all the elements are correctly positioned in their new reversed order within the same list data structure. The function should not use any built-in functions like reverse(), reversed(), slicing etc. to generate the reversed list. It should implement the reversal logic manually.","solution":"def reverse_list(arr): Reverses the order of elements in the list arr in place. left = 0 right = len(arr) - 1 while left < right: # Swap the elements at left and right indices arr[left], arr[right] = arr[right], arr[left] # Move towards the middle left += 1 right -= 1 return arr"},{"question":"Write a python function to calculate the remaining battery level after a series of charging and discharging events. The battery starts at 0% and the initial maximum battery capacity is set to 100%. However, whenever the battery reaches 100%, it should stop accepting charges. If the required charge level is higher than the current battery level, the battery charges up to 100%. The battery cannot go below 0%. Additionally, you should not use the \`+\` operator or the \`+=\` operator to increase the battery level.","solution":"def calculate_battery_level(events): Calculates the remaining battery level after a series of charging and discharging events. Args: events (list): A list of integers where positive values represent charging events and negative values represent discharging events. Returns: int: The remaining battery level. battery_level = 0 max_capacity = 100 for event in events: if event > 0: # Charging event for _ in range(event): if battery_level < max_capacity: battery_level = min(battery_level + 1, max_capacity) else: # Discharging event for _ in range(-event): if battery_level > 0: battery_level = max(battery_level - 1, 0) return battery_level"},{"question":"Write a python function to parse a JSON string and return a dictionary.","solution":"import json def parse_json_string(json_string): Parses a JSON string and returns a dictionary. :param json_string: A string containing JSON data. :return: A dictionary representing the parsed JSON data. return json.loads(json_string)"},{"question":"Write a python function to reverse a string. You are not allowed to use any slicing techniques or built-in string functions that directly reverse the string. You also should not use a loop to traverse through the string. Let's say the string is \\"Hello world!\\", I would want the output to be \\"!dlrow olleH\\".","solution":"def reverse_string(s): Reverses the given string without using slicing, built-in string reversal functions, or loops. if len(s) == 0: return s return reverse_string(s[1:]) + s[0]"},{"question":"Write a python function to find the second maximum element in a given list of numbers.","solution":"def second_maximum(numbers): Returns the second maximum element in a given list of numbers. If the list has fewer than 2 unique elements, return None. if len(numbers) < 2: return None first_max = second_max = float('-inf') for number in numbers: if number > first_max: second_max = first_max first_max = number elif number > second_max and number != first_max: second_max = number return second_max if second_max != float('-inf') else None"},{"question":"Write a python function to find the closest value to target in a given list of numbers.","solution":"def closest_value(numbers, target): Returns the value in numbers that is closest to the target. if not numbers: return None # handle the case where the list is empty return min(numbers, key=lambda x: abs(x - target))"},{"question":"Write a python function to convert a decimal number to a specified base (between 2 and 36). The function should handle decimal numbers, both positive and negative, as well as numbers with fractional parts. The function should also be able to handle non-integer bases, such as 2.5, by rounding them to the nearest whole number before conversion.","solution":"from math import modf, floor def decimal_to_base(decimal_number, base): Converts a decimal number to the specified base (between 2 and 36). The base is rounded to the nearest integer if it is not an integer. Args: decimal_number (float): The decimal number to be converted. base (float): The base to which the decimal number is to be converted. Returns: str: The converted number as a string in the specified base. if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36, inclusive.\\") base = round(base) if base == 10: return str(decimal_number) base_chars = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" integral_part = int(modf(decimal_number)[1]) fractional_part = modf(decimal_number)[0] sign = \\"-\\" if decimal_number < 0 else \\"\\" integral_str = convert_integral_part(abs(integral_part), base, base_chars) fractional_str = convert_fractional_part(abs(fractional_part), base, base_chars) return sign + integral_str + (fractional_str if fractional_str else \\"\\") def convert_integral_part(integral, base, base_chars): if integral == 0: return \\"0\\" result = \\"\\" while integral > 0: result = base_chars[integral % base] + result integral //= base return result def convert_fractional_part(fractional, base, base_chars, precision=12): result = \\"\\" if fractional == 0: return result result += \\".\\" count = 0 while fractional != 0 and count < precision: fractional *= base digit = floor(fractional) result += base_chars[digit] fractional -= digit count += 1 return result"},{"question":"Write a python function to convert a string to a list of integers. The input string will contain integers separated by commas and spaces. Each integer should be parsed correctly as an integer and added to the list. Spaces should be ignored.","solution":"def string_to_int_list(s): Converts a string containing integers separated by commas and spaces into a list of integers. Args: s (str): The input string. Returns: List[int]: The list of parsed integers. return [int(x) for x in s.split(', ') if x]"},{"question":"Write a python function to print the first 10 numbers of the Fibonacci sequence. How would you correctly implement this?","solution":"def fibonacci_sequence(n=10): Returns the first n numbers of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a python function to find the average of even numbers in a list. If there are no even numbers, the function should return -1. Use list comprehension and the \`filter\` function to accomplish this task.","solution":"def average_of_evens(numbers): Returns the average of even numbers in the list. If there are no even numbers, returns -1. evens = list(filter(lambda x: x % 2 == 0, numbers)) if len(evens) == 0: return -1 return sum(evens) / len(evens)"},{"question":"Write a python function to create a list of unique element from given list, maintaining the original order of elements as they appeared in the list.","solution":"def unique_elements(lst): Given a list, return a new list with unique elements, maintaining their original order. :param lst: List of elements :return: List of unique elements in original order seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"Write a python function to find the most frequent element in an array. If multiple elements share the same highest frequency, return the smallest one.","solution":"def most_frequent_element(arr): Find the most frequent element in an array. If multiple elements share the highest frequency, return the smallest one. from collections import Counter if not arr: return None # Handle the edge case of an empty list frequency = Counter(arr) most_frequent = max(frequency.items(), key=lambda x: (x[1], -x[0])) return most_frequent[0]"},{"question":"Write a python function to find the common elements in three lists.","solution":"def find_common_elements(list1, list2, list3): Returns a list of common elements in three lists. # Use set intersection to find common elements common_elements = set(list1) & set(list2) & set(list3) return list(common_elements)"},{"question":"Write a python function to calculate the area of a triangle given the lengths of its three sides. The function should use Heron's formula to compute the area. Heron's formula states that the area of a triangle whose sides have lengths a, b, and c is the square root of (s*(s-a)*(s-b)*(s-c)), where s is the semi-perimeter of the triangle (s = (a+b+c)/2).","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle given the lengths of its three sides using Heron's formula. s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a python function to return the first duplicate number in a list. If no duplicate is found, return -1.","solution":"def first_duplicate(nums): Returns the first duplicate number in the list. If no duplicate is found, returns -1. Parameters: nums (list): A list of integers. Returns: int: The first duplicate number or -1 if no duplicate is found. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a python function to calculate the sum of two fractions representing the same quantity in two different units. For example, one fraction could be in tons and the other in kilograms. The function should take the numerator and denominator of both fractions as inputs and return the sum as a fraction in its simplest form.","solution":"from fractions import Fraction def sum_fractions(n1, d1, n2, d2): Returns the sum of two fractions in its simplest form. The fractions are represented by their numerators and denominators. fraction1 = Fraction(n1, d1) fraction2 = Fraction(n2, d2) result = fraction1 + fraction2 return result.numerator, result.denominator"},{"question":"Write a python function to iterate through elements of a list using list comprehension.","solution":"def iterate_list(lst): Returns a new list containing the elements of the input list plus one. return [x + 1 for x in lst]"},{"question":"Write a python function to find the maximum sum of all possible subarrays of a given array.","solution":"def max_subarray_sum(arr): Returns the maximum sum of all possible subarrays of the given array. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if a given integer n is perfect number or not.","solution":"def is_perfect_number(n): Returns True if n is a perfect number, else False. A perfect number is a positive integer that is equal to the sum of its proper divisors. Proper divisors of a number are those divisors excluding the number itself. if n <= 1: return False divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum == n"},{"question":"Write a python function to sort an array of 0s, 1s and 2s in O(n) time complexity.","solution":"def sort_012(arr): Sort an array of 0s, 1s and 2s in O(n) time complexity. low = 0 high = len(arr) - 1 mid = 0 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: arr[high], arr[mid] = arr[mid], arr[high] high -= 1 return arr"},{"question":"Write a python function to get the maximum and minimum value from a list. Can you implement it also using the built-in functions max() and min()?","solution":"def get_max_and_min(lst): Returns the maximum and minimum values from a list using built-in max() and min() functions. Args: lst (list): A list of numerical values. Returns: tuple: A tuple containing the maximum and minimum values from the list. if not lst: return (None, None) return (max(lst), min(lst))"},{"question":"Write a python function to break an integer into its individual digits and store them in a list. For example, the integer 1234 should yield a list [1, 2, 3, 4].","solution":"def break_into_digits(n): Breaks an integer into its individual digits and returns them as a list. :param n: Integer to be broken into digits :return: List of individual digits return [int(digit) for digit in str(abs(n))]"},{"question":"Write a python function to convert a hexadecimal string into the corresponding binary representation. The output should be a string.","solution":"def hex_to_bin(hex_str): Converts a hexadecimal string into the corresponding binary representation. The output is a string. :param hex_str: Hexadecimal string :return: Binary string representation # Remove potential '0x' prefix from the hexadecimal string hex_str = hex_str.strip().lower() if hex_str.startswith(\\"0x\\"): hex_str = hex_str[2:] # Convert hexadecimal to an integer integer_value = int(hex_str, 16) # Convert integer to binary and remove '0b' prefix bin_str = bin(integer_value)[2:] return bin_str"},{"question":"Write a python function to find the second highest unique number in a list. If the list has less than two unique numbers, return \`None\`.","solution":"def second_highest_unique(lst): Returns the second highest unique number in a list. If the list has less than two unique numbers, return None. unique_nums = list(set(lst)) if len(unique_nums) < 2: return None unique_nums.sort(reverse=True) return unique_nums[1]"},{"question":"Write a python function to merge two sorted lists into a single sorted list using the merge sorting algorithm.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. Args: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1 or list2 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to solve the problem: given a sorted array arr[] of size N, find the floor of x. If the floor of x doesn't exist in the array, return -1.","solution":"def find_floor(arr, N, x): Returns the floor of x in a sorted array arr. If the floor does not exist, returns -1. :param arr: List[int] - A sorted array of integers :param N: int - The size of the array :param x: int - The target value to find the floor for :return: int - The floor of x or -1 if it does not exist # Initialize result floor = -1 # Implementing binary search left, right = 0, N - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == x: return arr[mid] elif arr[mid] < x: floor = arr[mid] left = mid + 1 else: right = mid - 1 return floor"},{"question":"Write a python function to find the lowest common ancestor (LCA) between two nodes in a binary search tree (BST).","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def lowestCommonAncestor(root, p, q): Finds the lowest common ancestor (LCA) of two nodes p and q in a BST. # If both p and q are smaller than root, LCA lies in left while root: if p.val < root.val and q.val < root.val: root = root.left # If both p and q are greater than root, LCA lies in right elif p.val > root.val and q.val > root.val: root = root.right else: break return root"},{"question":"Write a python function to find the Minimum Spanning Tree (MST) of a graph using Kruskal's algorithm.","solution":"class DisjointSet: def __init__(self, vertices): self.parent = {v: v for v in vertices} self.rank = {v: 0 for v in vertices} def find(self, vertex): if self.parent[vertex] != vertex: self.parent[vertex] = self.find(self.parent[vertex]) return self.parent[vertex] def union(self, root1, root2): if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 def kruskal(vertices, edges): Returns the Minimum Spanning Tree using Kruskal's algorithm. vertices: List of vertices in the graph edges: List of edges in the graph, where each edge is represented as a tuple (weight, vertex1, vertex2) mst = [] disjoint_set = DisjointSet(vertices) edges.sort() for weight, u, v in edges: root1 = disjoint_set.find(u) root2 = disjoint_set.find(v) if root1 != root2: mst.append((u, v, weight)) disjoint_set.union(root1, root2) return mst"},{"question":"Write a python function to find the sum of all the elements in a given array. The function should be designed with a time complexity of O(n).","solution":"def sum_array(arr): Returns the sum of all the elements in the given array. Parameters: arr (list): A list of numbers. Returns: int/float: Sum of all the elements in the array. return sum(arr)"},{"question":"Write a python function to calculate the total cost of items in a shopping cart with a given discount rate. The function should take a list of item prices and a discount rate as input, and return the total cost after applying the discount. The discount is applied to the sum of all the item prices.","solution":"def calculate_total_cost(prices, discount_rate): Calculate the total cost of items after applying the discount. :param prices: List of item prices. :param discount_rate: Discount rate as a decimal (e.g., 0.1 for 10%). :return: Total cost after applying the discount. total_cost_before_discount = sum(prices) discount = total_cost_before_discount * discount_rate total_cost_after_discount = total_cost_before_discount - discount return total_cost_after_discount"},{"question":"Write a python function to generate Fibonacci numbers up to a certain limit. The function should take a single integer as an input, which represents the maximum value of the Fibonacci sequence to be generated.","solution":"def fibonacci_up_to(limit): Generate Fibonacci numbers up to a certain limit (inclusive). Parameters: limit (int): The maximum value of the Fibonacci sequence to be generated. Returns: list: A list containing Fibonacci numbers up to the specified limit. if limit < 0: return [] fib_sequence = [] a, b = 0, 1 while a <= limit: fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Write a python function to remove the trailing whitespaces from a string.","solution":"def remove_trailing_whitespace(s): Removes trailing whitespace characters from the given string. return s.rstrip()"},{"question":"Write a python function to check if a number is prime or not. How can this function be optimized to handle larger numbers more efficiently?","solution":"def is_prime(n): Returns True if \`n\` is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to find the nth smallest number in an array. The function signature is \`def nth_smallest(nums, n):\`. The function should return the nth smallest number in the array without modifying the original array. If the array is empty or n is not in a valid range, the function should return \`None\`.","solution":"def nth_smallest(nums, n): Finds the nth smallest number in the array. :param nums: List of integers :param n: Integer, the position (1-based) of the smallest number to find :returns: The nth smallest number or None if the array is empty or n is out of range if not nums or n < 1 or n > len(nums): return None sorted_nums = sorted(nums) return sorted_nums[n - 1]"},{"question":"Write a python function to find the most frequent integer in a list. If multiple integers have the same highest frequency, return all of them in a list. What should the function return if the list is empty?","solution":"from collections import Counter def most_frequent_integer(lst): Returns the most frequent integer(s) in the list. If multiple integers have the same highest frequency, returns all of them in a list. If the list is empty, returns an empty list. if not lst: return [] count = Counter(lst) max_freq = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_freq] return most_frequent"},{"question":"Write a python function to countdown from a passed in number to 1.","solution":"def countdown(n): Takes an integer n and prints a countdown from n to 1. if n < 1: return [] result = [] for i in range(n, 0, -1): result.append(i) return result"},{"question":"Write a python function to search a given number in a sorted array (in ascending order). The function should return the index of the number if it is present, else return -1.","solution":"def binary_search(arr, target): Searches for a target number in a sorted array and returns its index if found. Otherwise, returns -1. Parameters: arr (list): A list of sorted integers in ascending order. target (int): The number to search for in the array. Returns: int: The index of the target number if found, else -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the maximum rectangle area in a histogram given the histogram's bar widths and heights. For example, if the input is [2, 1, 5, 6, 2, 3], the output is 10.","solution":"def largest_rectangle_area(heights): Calculate the maximum rectangle area in a histogram given bar heights. :param heights: List of integers representing the bar heights. :return: The area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to find the nth largest element in a list. The function should handle cases where the list might contain duplicate elements and return the nth largest unique element.","solution":"def nth_largest_unique_element(numbers, n): Returns the nth largest unique element from the list numbers. If there are not enough unique elements, return None. unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) if n <= len(unique_numbers): return unique_numbers[n-1] else: return None"},{"question":"Write a python function to find the number of integers in the given list that are even, odd, positive, and negative.","solution":"def count_integers(lst): Returns the number of integers in the given list that are even, odd, positive, and negative. The result is provided in the format of a dictionary. counts = { 'even': 0, 'odd': 0, 'positive': 0, 'negative': 0, } for num in lst: if num % 2 == 0: counts['even'] += 1 else: counts['odd'] += 1 if num > 0: counts['positive'] += 1 elif num < 0: counts['negative'] += 1 return counts"},{"question":"Write a python function to find the index of the first occurrence of a substring in a string, ignoringcase. The function should be named \`find_substring_index\` and it should take two parameters: the main string and the substring to find. If the substring is not found, the function should return -1.","solution":"def find_substring_index(main_string, substring): Returns the index of the first occurrence of the substring in the main string, case insensitive. If the substring is not found, returns -1. # Convert both strings to lowercase main_string = main_string.lower() substring = substring.lower() # Find and return the index of the substring return main_string.find(substring)"},{"question":"Write a python function to convert a binary string to a decimal number with string output. The function should take a binary string as input and return a string表示的 decimal number.","solution":"def binary_to_decimal(binary_str): Converts a binary string to a decimal number represented as a string. :param binary_str: A string representing a binary number. :return: A string representing the decimal number. decimal_num = int(binary_str, 2) return str(decimal_num)"},{"question":"Write a python function to reverse a string without using any slicing or built-in reverse functions. You must use a loop to iterate through the string from both ends and swap characters until the middle.","solution":"def reverse_string(s): Reverses a string without using any slicing or built-in reverse functions. chars = list(s) left, right = 0, len(chars) - 1 while left < right: chars[left], chars[right] = chars[right], chars[left] left += 1 right -= 1 return ''.join(chars)"},{"question":"Write a python function to get the number of unique substrings in a given string. A substring is a contiguous sequence of characters within a string. For example, the string \\"abcabc\\" contains \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"ca\\", \\"abc\\", \\"bca\\", \\"cab\\", and \\"abcabc\\" (repeated substring).","solution":"def unique_substrings(s): Returns the number of unique substrings in the given string s. substrings = set() n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a python function to return the square root of a given number.","solution":"import math def sqrt(number): Returns the square root of the given number. if number < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") return math.sqrt(number)"},{"question":"Write a python function to find the first and last appearances of each character in a given string.","solution":"def first_and_last_appearances(s): Returns a dictionary with keys as characters and values as a tuple containing the first and last appearances of each character in the given string. char_positions = {} for index, char in enumerate(s): if char not in char_positions: char_positions[char] = [index, index] else: char_positions[char][1] = index # Convert the list to tuple for char in char_positions: char_positions[char] = tuple(char_positions[char]) return char_positions"},{"question":"Write a python function to check if a given file path is a valid file path in Python. The function should return \`True\` if the file path is valid, otherwise \`False\`.","solution":"import os def is_valid_file_path(file_path): Checks if the given file path is a valid file path. Parameters: file_path (str): The file path to check. Returns: bool: True if the file path is valid, otherwise False. return os.path.isfile(file_path)"},{"question":"Write a python function to sort a list that contains both integers and strings. The integers should come first, followed by the strings, and both should be sorted in ascending order. For example, given the list \`mixed_list = [3, 1, 'banana', 'apple', 2, 'cherry']\`, the function should return \`[1, 2, 3, 'apple', 'banana', 'cherry']\`.","solution":"def sort_mixed_list(mixed_list): Sorts a list that contains both integers and strings. Integers come first, followed by strings, both sorted in ascending order. integers = sorted([x for x in mixed_list if isinstance(x, int)]) strings = sorted([x for x in mixed_list if isinstance(x, str)]) return integers + strings"},{"question":"Write a python function to calculate the product of all even numbers in a list. You should use list comprehension and the \`reduce\` function from the \`functools\` module to achieve this.","solution":"from functools import reduce def product_of_evens(nums): Returns the product of all even numbers in the list. If no even numbers exist, returns 1. evens = [num for num in nums if num % 2 == 0] if not evens: return 1 return reduce(lambda x, y: x * y, evens)"},{"question":"Write a python function to check if a string has a repeating character in it. You should use a dictionary to keep track of characters as you iterate through the string. If a character is already in the dictionary, it means that the character has been seen before. Return \`True\` if a repeating character is found, and \`False\` otherwise.","solution":"def has_repeating_character(s): Checks if the string s has a repeating character. Args: s (str): The input string. Returns: bool: True if a repeating character is found, False otherwise. seen = {} for char in s: if char in seen: return True seen[char] = 1 return False"},{"question":"Write a python function to sort an integer array \`nums\` in descending order and return the sorted array.","solution":"def sort_descending(nums): Sorts an array of integers in descending order and returns the sorted array. Parameters: nums (list of int): The array of integers to be sorted. Returns: list of int: The sorted array in descending order. return sorted(nums, reverse=True)"},{"question":"Write a python function to reverse the words in a string. For example given the string \\"hello world)this is a test\\", it should return \\"test a is this world hello\\".","solution":"def reverse_words(s): Returns a string with the words in reverse order. Args: s (str): input string. Returns: str: a string with the words reversed. words = s.split() reversed_words = ' '.join(reversed(words)) return reversed_words"},{"question":"Write a python function to calculate the sum of the first N natural numbers using recursion. The function should be tested with the provided test cases.","solution":"def sum_of_natural_numbers(n): Returns the sum of the first n natural numbers using recursion. if n <= 0: return 0 else: return n + sum_of_natural_numbers(n - 1)"},{"question":"Write a python function to count the occurrences of each word in a given string. The string can contain multiple sentences and spaces. Your function should ignore case sensitivity (e.g., 'Hello' and 'hello' are considered the same word) and should also ignore any special characters. Only words consisting of alphanumeric characters are considered.","solution":"import re from collections import Counter def count_word_occurrences(input_string): Count the occurrences of each word in the input string. Words are considered case-insensitively and special characters are ignored. # Convert the string to lowercase input_string = input_string.lower() # Use regex to find all words consisting of alphanumeric characters words = re.findall(r'bw+b', input_string) # Count the occurrences of each word word_counts = Counter(words) return word_counts"},{"question":"Write a python function to sort a list of integers in ascending order. The function should take a list of integers as an input and return the sorted list without using the built-in sort() function or the sorted() function. Your goal is to implement the sorting algorithm manually.","solution":"def manual_sort(lst): Sorts a list of integers in ascending order using Bubble Sort algorithm. Parameters: lst (list): List of integers to sort. Returns: list: Sorted list of integers in ascending order. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Write a python function to find the shortest subarray with a sum greater than or equal to a given value \`S\`.","solution":"def shortest_subarray_with_sum(nums, S): Finds the length of the shortest subarray with a sum greater than or equal to S. n = len(nums) min_length = float('inf') current_sum = 0 start_index = 0 for end_index in range(n): current_sum += nums[end_index] while current_sum >= S: min_length = min(min_length, end_index - start_index + 1) current_sum -= nums[start_index] start_index += 1 return min_length if min_length != float('inf') else 0"},{"question":"Write a python function to calculate the SQL query that will insert a new row into a table. The function should take the table name, the column names, and the corresponding values as input and return the SQL query as a string.","solution":"def generate_insert_query(table_name, columns, values): Generates an SQL insert query for a given table name, columns, and their corresponding values. Parameters: table_name (str): The name of the table. columns (list of str): The list of columns in which the data should be inserted. values (list): The corresponding values to be inserted. Returns: str: The SQL insert query as a string. # Ensure columns and values have the same length if len(columns) != len(values): raise ValueError(\\"Columns and values must have the same length.\\") # Convert values to SQL-friendly format formatted_values = [] for value in values: if isinstance(value, str): formatted_values.append(f\\"'{value}'\\") elif value is None: formatted_values.append(\\"NULL\\") else: formatted_values.append(str(value)) # Generate the SQL query columns_str = \\", \\".join(columns) values_str = \\", \\".join(formatted_values) query = f\\"INSERT INTO {table_name} ({columns_str}) VALUES ({values_str});\\" return query"},{"question":"Write a python function to find the binary representation of a number using recursion.","solution":"def to_binary(n): Returns the binary representation of a non-negative integer n using recursion. if n == 0: return \\"0\\" elif n == 1: return \\"1\\" else: return to_binary(n // 2) + str(n % 2)"},{"question":"Write a python function to demonstrate the use of a for loop to iterate over a dictionary and print each key-value pair.","solution":"def print_dictionary_items(d): Iterates over a dictionary and prints each key-value pair. for key, value in d.items(): print(f\\"{key}: {value}\\")"},{"question":"Write a python function to calculate the factorial of a positive integer. For example, the factorial of 5 is 120. The function should also include error handling for non-positive integers and invalid inputs.","solution":"def factorial(n): Returns the factorial of a positive integer n. Includes error handling for non-positive integers and invalid inputs. if not isinstance(n, int): raise TypeError(\\"Input must be an integer.\\") if n < 1: raise ValueError(\\"Input must be a positive integer.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to detect anomalous data in a time series using a rolling window. For each data point, the function should compute the mean and standard deviation of the data in a rolling window of size \\"window_size\\" and return a list of booleans, where True indicates an anomalous data point.","solution":"import numpy as np def detect_anomalies(time_series, window_size, threshold=2): Detects anomalies in a time series using a rolling window approach. Parameters: - time_series (list of float): The input time series data. - window_size (int): The size of the rolling window. - threshold (float): The number of standard deviations from the mean to consider a value as an anomaly. Returns: - list of bool: A list of booleans where True indicates an anomalous data point. anomalies = [False] * len(time_series) if len(time_series) >= window_size: for i in range(window_size, len(time_series)): window = time_series[i - window_size:i] mean = np.mean(window) std_dev = np.std(window) if abs(time_series[i] - mean) > threshold * std_dev: anomalies[i] = True return anomalies"},{"question":"Write a python function to reverse a given string repository","solution":"def reverse_string(s): Returns the reverse of a given string. return s[::-1]"},{"question":"Write a python function to find the number of distinct islands in a grid represented as a 2D array.","solution":"def numDistinctIslands(grid): Returns the number of distinct islands in the given grid. Args: grid: List[List[int]] - a 2D array representing the grid where 1 is land and 0 is water. Returns: int - the number of distinct islands. def dfs(x, y, origin_x, origin_y, island_shape): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != 1: return grid[x][y] = -1 # mark the cell as visited island_shape.append((x - origin_x, y - origin_y)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: dfs(x + dx, y + dy, origin_x, origin_y, island_shape) distinct_islands = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_shape = [] dfs(i, j, i, j, island_shape) distinct_islands.add(tuple(island_shape)) return len(distinct_islands)"},{"question":"Write a python function to find the smallest even number in a given list that is greater than or equal to 5 and returns its index. If no such number exists, return -1.","solution":"def smallest_even_greater_equal_five(numbers): Returns the index of the smallest even number in the list that is greater than or equal to 5. If no such number exists, returns -1. index = -1 smallest_even = float('inf') for i, num in enumerate(numbers): if num >= 5 and num % 2 == 0: if num < smallest_even: smallest_even = num index = i return index"},{"question":"Write a python function to reverse a string without using slicing, and explain the logic behind it.","solution":"def reverse_string(s): Reverses the input string without using slicing. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str # Explanation: # The function iterates through each character in the input string \`s\`. # For each character, it appends this character to the front of \`reversed_str\`. # Thus, the end of the input string \`s\` ends up at the start of \`reversed_str\`, # effectively reversing the string."},{"question":"Write a python function to find the most frequent element in a list. If there is a tie, return the smallest element among those with the highest frequency. Here is the function signature: \`def find_most_frequent(arr)\`.","solution":"def find_most_frequent(arr): Returns the most frequent element in a list. If there is a tie, returns the smallest element among those with the highest frequency. if not arr: return None from collections import Counter # Count the frequency of each element count = Counter(arr) # Find the maximum frequency max_freq = max(count.values()) # Extract elements with the maximum frequency most_frequent_elements = [k for k, v in count.items() if v == max_freq] # Return the smallest element among the most frequent elements return min(most_frequent_elements)"},{"question":"Write a python function to generate all permutations of a given list. Make sure to handle the case where the list might contain duplicate elements.","solution":"from itertools import permutations def unique_permutations(lst): Returns all unique permutations of a given list. return list(set(permutations(lst)))"},{"question":"Write a python function to check if the second list is a sublist of the first list or not.","solution":"def is_sublist(main_list, sub_list): Check if sub_list is a sublist of main_list. Args: main_list (list): The main list to be checked. sub_list (list): The list to check if it is a sublist of main_list. Returns: bool: True if sub_list is a sublist of main_list, False otherwise. # Handling edge cases where sub_list is empty if not sub_list: return True # Sequence matching operation len_main = len(main_list) len_sub = len(sub_list) for i in range(len_main - len_sub + 1): if main_list[i:i + len_sub] == sub_list: return True return False"},{"question":"Write a python function to print the first 10 Fibonacci numbers. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def first_10_fibonacci(): Returns the first 10 Fibonacci numbers as a list. fib_sequence = [] a, b = 0, 1 for _ in range(10): fib_sequence.append(a) a, b = b, a + b return fib_sequence"},{"question":"Write a python function to generate and print a Fibonacci sequence. The sequence should stop once it reaches a given limit n.","solution":"def fibonacci_sequence(limit): Generates and returns the Fibonacci sequence up to a given limit. Parameters: limit (int): The upper limit of the Fibonacci sequence. Returns: list: A list containing the Fibonacci sequence up to the given limit. if limit < 0: return [] fib_sequence = [0, 1] while True: next_number = fib_sequence[-1] + fib_sequence[-2] if next_number > limit: break fib_sequence.append(next_number) return fib_sequence"},{"question":"Write a python function to find the maximum substring sum using the Kadane's algorithm basic version. What is the time and space complexity of this algorithm?","solution":"def max_subarray_sum(nums): Returns the maximum sum of the subarray using Kadane's algorithm. Parameters: nums (list): A list of integers. Returns: int: The maximum subarray sum. # Initialize the maximum sum and the current subarray sum max_sum = float('-inf') current_sum = 0 for num in nums: # Update the current subarray sum current_sum = max(num, current_sum + num) # Update the maximum subarray sum seen so far max_sum = max(max_sum, current_sum) return max_sum # Time Complexity: O(n) - We iterate through the list once. # Space Complexity: O(1) - We use a constant amount of extra space."},{"question":"Write a python function to check if two binary strings are anagrams of each other or not. Two binary strings are anagrams of each other if the number of 1's in both strings are same.","solution":"def are_binary_anagrams(str1, str2): Checks if two binary strings are anagrams of each other. Two binary strings are anagrams if they contain the same number of '1's. return str1.count('1') == str2.count('1')"},{"question":"Write a python function to calculate the sum of a series where each term is given by the formula ( a_n = 2^n + 3n ), for ( n ) ranging from 1 to 100 (inclusive).","solution":"def sum_of_series(): Returns the sum of the series where each term is 2^n + 3*n for n ranging from 1 to 100 (inclusive). total_sum = 0 for n in range(1, 101): term = 2**n + 3*n total_sum += term return total_sum"},{"question":"Write a python function to create a password generator based on user input for minimum and maximum length. The generator should create a random password using uppercase, lowercase, digits, and special characters. Ensure that the password generated is at least 4 characters long and does not include any repeated characters.","solution":"import random import string def generate_password(min_length, max_length): Generates a random password with no repeated characters. The password will be between min_length and max_length inclusive. It includes uppercase, lowercase, digits, and special characters. if min_length < 4 or max_length < min_length: raise ValueError(\\"Minimum length must be at least 4 and max_length must be greater than or equal to min_length.\\") all_characters = string.ascii_letters + string.digits + string.punctuation # ensure all character types are included while True: password = random.sample(all_characters, random.randint(min_length, max_length)) if (any(c.isupper() for c in password) and any(c.islower() for c in password) and any(c.isdigit() for c in password) and any(c in string.punctuation for c in password)): return ''.join(password)"},{"question":"Write a python function to sort a list in ascending order in-place. The list should only contain integers. You should not use any built-in sort functions. Implement your solution using bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of integers in ascending order using the bubble sort algorithm. Parameters: arr (list): A list of integers. Returns: None: The list is sorted in-place. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]"},{"question":"Write a python function to implement the Breadth-First Search (BFS) algorithm to find the shortest path from a source node to all other nodes in a graph. The graph will be represented as an adjacency list.","solution":"from collections import deque, defaultdict def bfs_shortest_paths(graph, start): Uses the Breadth-First Search (BFS) algorithm to find the shortest path from the start node to all other nodes in the graph. :param graph: Dictionary representing an adjacency list of the graph. :param start: The start node. :return: Dictionary of shortest paths from start node to each other node. # Dictionary to store shortest path from start to each node shortest_paths = {start: [start]} # Queue for BFS queue = deque([start]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in shortest_paths: # If the neighbor has not been visited, add it to shortest_paths and queue shortest_paths[neighbor] = shortest_paths[current] + [neighbor] queue.append(neighbor) return shortest_paths"},{"question":"Write a python function to check if a string is rotated version of another string. For example, \\"waterbottle\\" is a rotated version of \\"erbottlewat\\".","solution":"def is_rotated_version(str1, str2): Check if str2 is a rotated version of str1. if len(str1) != len(str2): return False return str2 in (str1 + str1)"},{"question":"Write a python function to find the shortest path from a source to a target in a weighted graph. You are required to implement a priority queue and relax edges to find the shortest path. Assume that all weights are non-negative.","solution":"import heapq def dijkstra(graph, start, target): Find the shortest path in a weighted graph from start to target. :param graph: A dictionary representing the graph, where the keys are nodes, and values are dictionaries of neighboring nodes with their edge weights. :param start: The starting node. :param target: The target node. :return: Tuple containing (total_distance, path from start to target). # Priority queue to store (distance, node) priority_queue = [(0, start)] # Distance from start to each node distances = {node: float('inf') for node in graph} # Dictionary to store the path previous_nodes = {node: None for node in graph} # Set the distance from start to start as 0 distances[start] = 0 while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the target node is reached, rebuild the path if current_node == target: path = [] while previous_nodes[current_node] is not None: path.insert(0, current_node) current_node = previous_nodes[current_node] path.insert(0, start) return current_distance, path if current_distance > distances[current_node]: continue # Relax edges for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return float('inf'), [] # If there's no path from start to target"},{"question":"Write a python function to find the length of the longest sequence of consecutive numbers in a list.","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest sequence of consecutive numbers in a list. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: # Only check for sequences starting with the lowest number if num - 1 not in nums_set: current_num = num current_streak = 1 # Check for consecutive numbers in the sequence while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a python function to find all prime numbers up to a given number using the Sieve of Eratosthenes algorithm. The function should take a single integer \`n\` as input and return a list of all prime numbers less than or equal to \`n\`.","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers up to a given number n using the Sieve of Eratosthenes algorithm. Args: n (int): The upper limit to find primes. Returns: List[int]: A list of all prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Write a python function to compute a broad shouldering Base64 encoding of a given string.","solution":"import base64 def broad_shouldering_base64_encode(input_string): Encodes a given string using Base64 encoding. Args: input_string (str): The string to encode. Returns: str: The Base64 encoded string. # Encode the input string to bytes input_bytes = input_string.encode('utf-8') # Use base64 to encode the bytes encoded_bytes = base64.b64encode(input_bytes) # Convert the encoded bytes back to string encoded_string = encoded_bytes.decode('utf-8') return encoded_string"},{"question":"Write a python function to remove the duplicate characters from a given string \`s\`. The function should preserve the relative order of the characters.","solution":"def remove_duplicates(s): Removes duplicate characters from a given string while preserving the order of characters. Args: s (str): The input string from which duplicates need to be removed. Returns: str: A string with duplicates removed, maintaining the original order of characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to generate all unique permutations of a string. The function should return a list of all permutations, and there should be no duplicate permutations in the list.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the input string s. return list(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a python function to find the difference between the sum of the squares and the square of the sum for the numbers in a given list.","solution":"def difference_sum_squares_square_sum(nums): This function calculates the difference between the sum of the squares and the square of the sum for the numbers in the given list. Args: nums (list): A list of numbers. Returns: int: The difference between the sum of the squares and the square of the sum. sum_of_squares = sum(x**2 for x in nums) square_of_sum = sum(nums)**2 return square_of_sum - sum_of_squares"},{"question":"Write a python function to calculate the sum of the greatest common divisors (GCD) of all pairs (i, j) where 1 ≤ i < j ≤ n, and n is a positive integer.","solution":"import math from itertools import combinations def sum_of_gcds(n): Calculate the sum of the greatest common divisors (GCD) of all pairs (i, j) where 1 ≤ i < j ≤ n. Parameters: n (int): A positive integer Returns: int: The sum of the GCDs of all pairs (i, j) gcd_sum = 0 for i, j in combinations(range(1, n+1), 2): gcd_sum += math.gcd(i, j) return gcd_sum"},{"question":"Write a python function to detect if a word contains only non-repeating characters.","solution":"def has_unique_characters(word): Returns True if the word contains only non-repeating characters, else False. return len(set(word)) == len(word)"},{"question":"Write a python function to determine if a given list of numbers is sorted in non-decreasing order. If it is, your function should return the square of the last element in the list. If it's not sorted, return the sum of all elements squared.","solution":"def check_sorted_and_compute(numbers): Determines if the list is sorted in non-decreasing order. If sorted, returns the square of the last element. If not sorted, returns the sum of all elements squared. if numbers == sorted(numbers): return numbers[-1] ** 2 else: return sum(x ** 2 for x in numbers)"},{"question":"Write a python function to delete an element from a given list of integers. The function should delete all occurrences of the specified element. If the element is not found, the function should return the original list unchanged.","solution":"def delete_element(lst, element): Deletes all occurrences of the specified element from the list. Parameters: lst (list): The list of integers. element (int): The element to be deleted from the list. Returns: list: A new list with all occurrences of the specified element removed. return [x for x in lst if x != element]"},{"question":"Write a python function to find the transpose of a matrix.","solution":"def transpose(matrix): Returns the transpose of the given 2D matrix. if not matrix or not matrix[0]: return [] return [list(row) for row in zip(*matrix)]"},{"question":"Write a python function to generate all possible combinations of a list of distinct numbers, including the empty set and the original set itself.","solution":"from itertools import combinations def generate_combinations(nums): Returns a list of all possible combinations of the list, including the empty set and the original set. result = [] n = len(nums) for i in range(n+1): comb = list(combinations(nums, i)) result.extend(comb) return result"},{"question":"Write a python function to calculate the Fibonacci sequence up to the nth number. The function should be recursive. Also, optimize it to avoid repeated calculations by using memoization.","solution":"def fibonacci(n, memo=None): Returns the nth number in the Fibonacci sequence. Optimized with memoization to avoid repeated calculations. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to create a new list which contains the elements of two lists but excludes the elements that are present in both lists.","solution":"def symmetric_difference(list1, list2): Returns a new list which contains the elements of two lists but excludes the elements that are present in both lists. set1 = set(list1) set2 = set(list2) symmetric_diff = list((set1 - set2) | (set2 - set1)) return symmetric_diff"},{"question":"Write a python function to calculate the total cost of items in a shopping cart, each item has a price and a quantity. The function should take a list of tuples, where each tuple contains an item's price (float) and quantity (int). The function should return the total cost as a float. If the list is empty, the function should return 0.0.","solution":"def calculate_total_cost(cart): Calculate the total cost of items in a shopping cart. The cart is a list of tuples where each tuple contains: - price (float) - quantity (int) The function returns the total cost as a float. If the list is empty, it returns 0.0. if not cart: return 0.0 total_cost = 0.0 for price, quantity in cart: total_cost += price * quantity return total_cost"},{"question":"Write a python function to print all numbers from 1 to 100 in steps of 3, but skip the multiples of 7.","solution":"def print_numbers(): Prints all numbers from 1 to 100 in steps of 3, but skips the multiples of 7. for i in range(1, 101, 3): if i % 7 != 0: print(i)"},{"question":"Write a python function to detect cycles in a directed graph using DFS","solution":"def detect_cycle(graph): Detects cycles in a directed graph using Depth First Search (DFS). :param graph: A dictionary representing the graph where the keys are nodes and the values are lists of adjacent nodes. :return: A boolean indicating whether a cycle is found. def dfs(node, visited, rec_stack): # Mark current node as visited and add to recursion stack visited[node] = True rec_stack[node] = True # Recur for all neighbours for neighbour in graph.get(node, []): if not visited.get(neighbour, False): if dfs(neighbour, visited, rec_stack): return True elif rec_stack.get(neighbour, False): return True # Remove the node from recursion stack rec_stack[node] = False return False visited = {} rec_stack = {} # Call the recursive helper function to detect cycle in different DFS trees for node in graph: if not visited.get(node, False): if dfs(node, visited, rec_stack): return True return False"},{"question":"Write a python function to calculate the date and time going forward from a given start time and duration.","solution":"from datetime import datetime, timedelta def add_duration(start_time_str, duration_str): Calculates the date and time going forward from a given start time and duration. :param start_time_str: The starting time as a string in the format \\"YYYY-MM-DD HH:MM:SS\\". :param duration_str: The duration to add as a string in the format \\"DAYS HOURS:MINUTES:SECONDS\\". :return: The new date and time after adding the duration as a string in the format \\"YYYY-MM-DD HH:MM:SS\\". start_time = datetime.strptime(start_time_str, \\"%Y-%m-%d %H:%M:%S\\") days, time = duration_str.split() hours, minutes, seconds = map(int, time.split(':')) duration = timedelta(days=int(days), hours=hours, minutes=minutes, seconds=seconds) new_time = start_time + duration return new_time.strftime(\\"%Y-%m-%d %H:%M:%S\\")"},{"question":"Write a python function to find the first and last occurrence of a given number in a sorted array. If the number is not found, return -1 for both positions.","solution":"def find_first_and_last_occurrence(arr, target): Returns the first and last occurrence of the target number in a sorted array. If the target is not found, returns -1 for both positions. :param arr: List[int] - sorted array of integers :param target: int - the number to find :return: Tuple[int, int] - the first and last occurrence positions def binary_search(arr, target, find_first): low, high = 0, len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: result = mid if find_first: high = mid - 1 # Search left else: low = mid + 1 # Search right elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return result first_pos = binary_search(arr, target, True) last_pos = binary_search(arr, target, False) return (first_pos, last_pos)"},{"question":"Write a python function to find the missing number in an array of integers ranging from 1 to n. The array is 0-indexed and contains unique numbers from 1 to n except one.","solution":"def find_missing_number(arr): Finds the missing number in an array of integers ranging from 1 to n. :param arr: List of integers containing unique numbers from 1 to n except one. :return: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Write a python function to reverse the order of a given list in-place. Without using any built-in functions like reverse() or slicing. You should only use the swapping technique.","solution":"def reverse_list_inplace(lst): Reverses the order of the given list in-place using the swapping technique. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to solve the problem of merging two sorted arrays into one sorted array using the merge algorithm from merge sort.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. :param arr1: First sorted array :param arr2: Second sorted array :return: A single merged and sorted array merged_array = [] i, j = 0, 0 # Compare elements from both arrays and insert the smallest element into merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to calculate the sum of numbers in an array.","solution":"def sum_of_array(numbers): Returns the sum of all numbers in the array. Parameters: numbers (list): A list of numbers Returns: int/float: The sum of all numbers in the array return sum(numbers)"},{"question":"Write a python function to find the most significant bit (MSB) of a given integer.","solution":"def find_msb(n): Returns the position of the most significant bit (MSB) of a given integer. if n == 0: return -1 msb_position = 0 while n > 0: n = n >> 1 msb_position += 1 return msb_position - 1"},{"question":"Write a python function to check if a given number is a valid phone number. A valid phone number should be in the format of 12 digits, where the prefix is 1 and the next two digits are between 2 and 9, and the next 8 digits can be any digit.","solution":"import re def is_valid_phone_number(number): Checks if the given number is a valid phone number. A valid phone number has 12 digits, starts with '1', followed by a digit between 2 and 9, and followed by 8 more digits that could be any digit. :param number: str, the phone number to check :return: bool, True if the number is valid, False otherwise pattern = r\\"^1[2-9][0-9]{8}\\" return bool(re.match(pattern, number))"},{"question":"Write a python function to find a specific key in a dictionary and return its value. If the key is not found, the function should return None.","solution":"def find_key(dictionary, key): Returns the value associated with the specified key in the dictionary. If the key is not found, returns None. return dictionary.get(key)"},{"question":"Write a python function to return the factorial of a number and handle large numbers effectively.","solution":"import math def factorial(n): Returns the factorial of a given number n. For large numbers, it will return the factorial without overflow issues. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") return math.factorial(n)"},{"question":"Write a python function to validate a given string as a valid hexadecimal number. The function should return \`True\` if the string is a valid hexadecimal number, otherwise \`False\`.","solution":"import re def is_valid_hexadecimal(s): Returns True if the string \`s\` is a valid hexadecimal number, otherwise False. pattern = re.compile(r'^[0-9a-fA-F]+') return bool(pattern.match(s))"},{"question":"Write a python function to find the minimum number of operations needed to convert a given string \`to_be_reduced\` to another string \`target\` using the following operations: insert, delete, or replace a character. This function should implement the Levenshtein distance algorithm.","solution":"def levenshtein_distance(to_be_reduced, target): Returns the minimum number of operations needed to convert \`to_be_reduced\` to \`target\` using insert, delete, or replace a character. Implements the Levenshtein distance algorithm. m, n = len(to_be_reduced), len(target) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp array for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are same, ignore last char and recur for remaining string elif to_be_reduced[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Write a python function to replace all occurrences of a substring in a string, considering the case sensitivity.","solution":"def replace_substring(s, old, new): Replace all occurrences of the substring 'old' with the substring 'new' return s.replace(old, new)"},{"question":"Write a python function to find a number in a sorted list that is repeated K number of times. If such a number exists, return its index. If no such number exists, return -1.","solution":"def find_repeated_k_times(nums, k): Finds a number in a sorted list that is repeated K number of times. Returns the index of the first occurrence of that number. If no such number exists, returns -1. last_index = len(nums) - 1 for i in range(len(nums)): if i + k - 1 <= last_index and nums[i] == nums[i + k - 1]: return i return -1"},{"question":"Write a python function to parse a string of a date in the format \\"dd-MM-yyyy\\" and return the day, month, and year as integers. For example, given the input string \\"01-09-2020\\", the function should return (1, 9, 2020).","solution":"def parse_date(date_str): Parses a date string of the format \\"dd-MM-yyyy\\" and returns the day, month, and year as integers. :param date_str: A string representing the date in the format \\"dd-MM-yyyy\\" :return: A tuple (day, month, year) with each element as an integer day, month, year = map(int, date_str.split('-')) return day, month, year"},{"question":"Write a python function to find the 4 elements from the given array such that the sum of the 4 elements is equal to a given number 'S'. If there are multiple combinations that add up to 'S', return all of them. The function should return a list of lists, where each inner list represents the combination that adds up to 'S'.","solution":"def four_sum(nums, target): Finds unique quadruplets in the array which gives the sum of target. :param nums: List[int] - list of integers :param target: int - target sum :return: List[List[int]] - list of unique quadruplets nums.sort() quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: sum_4 = nums[i] + nums[j] + nums[left] + nums[right] if sum_4 == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_4 < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Write a python function to read and write data to a CSV file.","solution":"import csv def read_csv(file_path): Reads the content of a CSV file and returns it as a list of dictionaries. :param file_path: The path to the CSV file to be read :return: List of dictionaries representing the rows in the CSV file data = [] try: with open(file_path, mode='r', newline='') as file: reader = csv.DictReader(file) for row in reader: data.append(row) except Exception as e: print(f\\"Error reading the CSV file: {e}\\") return data def write_csv(file_path, data, fieldnames): Writes the given data to a CSV file. :param file_path: The path to the CSV file to be written :param data: A list of dictionaries representing rows to be written to the CSV file :param fieldnames: A list of field names for the CSV file columns try: with open(file_path, mode='w', newline='') as file: writer = csv.DictWriter(file, fieldnames=fieldnames) writer.writeheader() for row in data: writer.writerow(row) except Exception as e: print(f\\"Error writing to the CSV file: {e}\\")"},{"question":"Write a python function to convert a given dictionary into a JSON string. Use the json library to convert the dictionary.","solution":"import json def dict_to_json_string(input_dict): Converts a given dictionary into a JSON string. :param input_dict: Dictionary to convert. :return: JSON string representation of the dictionary. return json.dumps(input_dict)"},{"question":"Write a python function to create a string with alternating uppercase and lowercase letters based on a given string.","solution":"def alternate_case(input_string): Creates a string with alternating uppercase and lowercase letters based on the given string. result = [] for i, char in enumerate(input_string): if i % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return ''.join(result)"},{"question":"Write a python function to read a list of strings and count the occurrences of each string in the list. Return the counts as a dictionary.","solution":"def count_occurrences(strings): Counts the occurrences of each string in the list. Args: strings (list of str): List of strings to count occurrences of. Returns: dict: A dictionary with strings as keys and their counts as values. counts = {} for string in strings: if string in counts: counts[string] += 1 else: counts[string] = 1 return counts"},{"question":"Write a python function to sort a list of tuples in Python. If two tuples have the same first element, sort them by the second element in ascending order. If the second elements are also the same, sort by the third element, and so on. The function should be able to handle tuples of any length.","solution":"def sort_tuples(tuples_list): Sort a list of tuples. If two tuples have the same first element, sort them by the second element in ascending order. If the second elements are also the same, sort by the third element, and so on. :param tuples_list: List of tuples to be sorted :return: Sorted list of tuples return sorted(tuples_list)"},{"question":"Write a python function to write CSV file from a list of dictionaries. The function should take two parameters: the list of dictionaries and the file name. The dictionary's key represents the columns header and the dictionary's value represents the row's cell value.","solution":"import csv def write_csv(data, filename): Writes a list of dictionaries to a CSV file. Parameters: data (list of dict): List of dictionaries where keys correspond to the columns. filename (str): The name of the file to write the data to. if not data: raise ValueError(\\"Data should not be empty\\") keys = data[0].keys() with open(filename, 'w', newline='') as output_file: dict_writer = csv.DictWriter(output_file, fieldnames=keys) dict_writer.writeheader() dict_writer.writerows(data)"},{"question":"Write a python function to sort a list of strings in lexicographical order, ignoring case sensitivity.","solution":"def sort_strings_ignore_case(strings): Sorts a list of strings in lexicographical order, ignoring case sensitivity. Args: strings (list of str): The list of strings to sort. Returns: list of str: The sorted list of strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"Write a python function to find the second minimum value in a list.","solution":"def second_minimum(numbers): Finds the second minimum value in a list of numbers. If the list has fewer than 2 unique elements, return None. if len(set(numbers)) < 2: return None first_min = float('inf') second_min = float('inf') for num in numbers: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num return second_min if second_min != float('inf') else None"},{"question":"Write a python function to calculate the number of days in a given month.","solution":"def days_in_month(year, month): Returns the number of days in a given month. Args: year (int): The year of the date. month (int): The month of the date (1-12). Returns: int: Number of days in the month. Raises: ValueError: If the month is not in the range 1-12. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") # Check for months with 30 days if month in [4, 6, 9, 11]: return 30 # Check for February if month == 2: # Check for leap year if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 # All other months have 31 days return 31"},{"question":"Write a python function to check if a number is divisible by 2, 3, or 5.","solution":"def is_divisible_by_2_3_or_5(n): Checks if the number n is divisible by 2, 3, or 5. Parameters: n (int): The number to check. Returns: bool: True if n is divisible by 2, 3, or 5, otherwise False. return n % 2 == 0 or n % 3 == 0 or n % 5 == 0"},{"question":"Write a python function to find the maximum amount of water that can be trapped between the given buildings. The input is a list of non-negative integers representing the heights of buildings and the output should be the total amount of trapped water.","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a python function to find peaks in a given array. A peak is defined as an element which is not smaller than its neighbors. For the elements at the ends, we only need to consider one neighbor.","solution":"def find_peaks(arr): Returns a list of peak elements in an array. A peak element is an element which is not smaller than its neighbors. For the elements at the ends, we only need to consider one neighbor. n = len(arr) peaks = [] if n == 0: return peaks if n == 1 or arr[0] >= arr[1]: peaks.append(arr[0]) for i in range(1, n - 1): if arr[i] >= arr[i - 1] and arr[i] >= arr[i + 1]: peaks.append(arr[i]) if n > 1 and arr[-1] >= arr[-2]: peaks.append(arr[-1]) return peaks"},{"question":"Write a python function to calculate the factorial of a given number using iteration and another function to calculate the factorial using recursion. Compare their performance and discuss the trade-offs.","solution":"def factorial_iterative(n): Returns the factorial of a given number using iteration. result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of a given number using recursion. if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) import time def compare_performance(n): Compare the performance of iterative and recursive factorial functions. start_iterative = time.time() factorial_iterative(n) end_iterative = time.time() start_recursive = time.time() factorial_recursive(n) end_recursive = time.time() iterative_time = end_iterative - start_iterative recursive_time = end_recursive - start_recursive return { \\"iterative_time\\": iterative_time, \\"recursive_time\\": recursive_time } def discuss_tradeoffs(n): Discuss the trade-offs between iterative and recursive implementation. performance = compare_performance(n) discussion = ( f\\"For n={n}, the iterative approach took {performance['iterative_time']} seconds \\" f\\"while the recursive approach took {performance['recursive_time']} seconds.n\\" f\\"Trade-offs:n\\" f\\"1. Iterative approach typically has a lower function call overhead and is generally faster for large values of n.n\\" f\\"2. Recursive approach is more elegant and easier to read but can be slower due to function call overhead.n\\" \\"3. Recursive approach can hit the maximum recursion depth limit for very large n, leading to a RecursionError.\\" ) return discussion"},{"question":"Write a python function to find the largest number that can be formed by concatenating numbers from a given list of numbers. The function should return the string representation of the largest number.","solution":"from typing import List def largest_number(nums: List[int]) -> str: Given a list of non-negative integers, arranges them such that they form the largest number. nums = list(map(str, nums)) nums.sort(key=lambda x: x*10, reverse=True) result = ''.join(nums) return '0' if result[0] == '0' else result"},{"question":"Write a python function to implement a basic calculator that can perform basic arithmetic operations (addition, subtraction, multiplication, and division). The function should take two parameters and the operation as a string.","solution":"def basic_calculator(a, b, operation): Perform basic arithmetic operations. Parameters: a (float): The first number. b (float): The second number. operation (str): The operation to perform. One of 'add', 'subtract', 'multiply', 'divide'. Returns: float: The result of the arithmetic operation. if operation == 'add': return a + b elif operation == 'subtract': return a - b elif operation == 'multiply': return a * b elif operation == 'divide': if b == 0: raise ValueError(\\"Division by zero is not allowed.\\") return a / b else: raise ValueError(\\"Invalid operation. Supported operations are: 'add', 'subtract', 'multiply', 'divide'.\\")"},{"question":"Write a python function to remove duplicates from a list and update the list in place without using any additional data structures.","solution":"def remove_duplicates(nums): Removes duplicates from the given list \`nums\` in place without using additional data structures. if not nums: return nums write_index = 1 for read_index in range(1, len(nums)): if nums[read_index] != nums[read_index - 1]: nums[write_index] = nums[read_index] write_index += 1 # Truncate the list to remove extra elements after \`write_index\` del nums[write_index:] return nums"},{"question":"Write a python function to check if a number is even or odd. If the number is even, return \\"Even\\". If the number is odd, return \\"Odd\\". If the number is not a valid integer, return \\"Invalid\\".","solution":"def check_even_odd(number): Checks if a number is even or odd. If the number is even, return \\"Even\\". If the number is odd, return \\"Odd\\". If the number is not a valid integer, return \\"Invalid\\". if not isinstance(number, int): return \\"Invalid\\" return \\"Even\\" if number % 2 == 0 else \\"Odd\\""},{"question":"Write a python function to implement the Longest Common Substring (LCS) problem. The function should take two strings as input and return the maximum length of the common substring.","solution":"def longest_common_substring(str1, str2): Returns the length of the longest common substring between two strings. m = len(str1) n = len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] max_length = 0 for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) return max_length"},{"question":"Write a python function to determine if a number is a solution to a given quadratic equation. The function should take three parameters, representing the coefficients of the quadratic equation, and one parameter for the number to check.","solution":"def is_solution(a, b, c, x): Determine if x is a solution to the quadratic equation ax^2 + bx + c = 0. Parameters: a (float): Coefficient of x^2 b (float): Coefficient of x c (float): Constant term x (float): The number to check Returns: bool: True if x is a solution, False otherwise return a * x**2 + b * x + c == 0"},{"question":"Write a python function to calculate the sum of all even numbers in a list from index \`i\` to \`j\` (both inclusive).","solution":"def sum_of_even_numbers(lst, i, j): Calculates the sum of all even numbers in a list from index i to index j (both inclusive). Parameters: lst (list): The list of integers. i (int): The starting index. j (int): The ending index. Returns: int: The sum of all even numbers from index i to j. if i < 0 or j >= len(lst) or i > j: raise ValueError(\\"Invalid indices\\") return sum(num for num in lst[i:j+1] if num % 2 == 0)"},{"question":"Write a python function to extract the first element from each sublist in a list of lists.","solution":"def extract_first_elements(list_of_lists): Extracts the first element from each sublist in a list of lists. Parameters: list_of_lists (list): A list of lists Returns: list: A list containing the first element from each sublist return [sublist[0] for sublist in list_of_lists if sublist]"},{"question":"Write a python function to validate a credit card number.","solution":"def validate_credit_card(number: str) -> bool: Validates a credit card number using the Luhn algorithm. Args: number (str): The credit card number in string format. Returns: bool: True if the card number is valid, False otherwise. # Strip spaces or dashes from the number number = number.replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\") # Check if the number contains only digits if not number.isdigit(): return False # Implementing the Luhn Algorithm total = 0 reverse_digits = number[::-1] for i, digit in enumerate(reverse_digits): n = int(digit) if i % 2 == 1: n *= 2 if n > 9: n -= 9 total += n return total % 10 == 0"},{"question":"Write a python function to generate the first n lines of the Pascal's Triangle.","solution":"def generate_pascals_triangle(n): Generates the first n lines of Pascal's Triangle. :param n: Number of lines of the Pascal's Triangle to generate. :type n: int :return: List of lists representing Pascal's Triangle. :rtype: List[List[int]] if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Write a python function to find the closest value to a given target value within a sorted array. You can assume the array contains only unique elements. It's designed to help with scenarios like locating the nearest time in a sorted list of timestamps.","solution":"def find_closest_value(arr, target): Returns the closest value to the given target in a sorted array. Parameters: arr (list of int/float): The sorted array to search in. target (int/float): The target value for which to find the closest value. Returns: int/float: The closest value to the target in the array. if not arr: raise ValueError(\\"The array should not be empty.\\") left, right = 0, len(arr) - 1 closest = arr[0] while left <= right: mid = (left + right) // 2 if abs(arr[mid] - target) < abs(closest - target): closest = arr[mid] if arr[mid] < target: left = mid + 1 elif arr[mid] > target: right = mid - 1 else: return arr[mid] # exact match found return closest"},{"question":"Write a python function to extract a section of a list using Python slicing. The function should take three parameters: the list, the start index, and the end index. It should return the sliced list.","solution":"def slice_list(input_list, start, end): Returns a section of input_list from start index to end index (exclusive). Args: input_list (list): The original list to be sliced. start (int): The start index (inclusive). end (int): The end index (exclusive). Returns: list: The sliced list. return input_list[start:end]"},{"question":"Write a python function to check if a string is multiline or not.","solution":"def is_multiline(text): Returns True if the text contains multiple lines, otherwise False. return 'n' in text"},{"question":"Write a python function to implement a binary search on a sorted array. The function should return the index of the target value if it is found, and -1 if the target value is not in the array. You也需要提供一个辅助函数来测试这个binary search函数，至少进行3次测试。","solution":"def binary_search(arr, target): Performs binary search on a sorted array to find the target value. Returns the index of the target value if found, otherwise returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find a path from the root to a given node in a binary tree, where each node is represented as an integer and the tree is represented as a list of lists. Each inner list represents a level in the tree, where the first element of the inner list is the root node and subsequent elements are child nodes. For example, [[1], [2, 3], [4, 5, 6]] represents a tree with root 1, and children 2 and 3 at level 2.","solution":"def find_path(tree, target): Finds a path from the root to the given target node in a binary tree. :param tree: List of lists representing the tree levels. :param target: The integer value representing the target node. :return: List of nodes representing the path from root to target node or an empty list if node is not found. if not tree: return [] def dfs(tree, level, index, path, target): if level >= len(tree) or index >= len(tree[level]): return False path.append(tree[level][index]) if tree[level][index] == target: return True left_child_index = 2 * index right_child_index = 2 * index + 1 if (dfs(tree, level + 1, left_child_index, path, target) or dfs(tree, level + 1, right_child_index, path, target)): return True path.pop() return False path = [] if dfs(tree, 0, 0, path, target): return path else: return []"},{"question":"Write a python function to find all the prime numbers up to a given number n. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def find_primes_up_to(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to find the minimum element in a 2D matrix. However, if the matrix is empty or not a matrix (i.e., not a list of lists), the function should handle these cases gracefully by returning \`None\`. Additionally, if the matrix contains non-numeric elements, the function should ignore those elements and only consider numeric values.","solution":"def find_min_in_matrix(matrix): Finds the minimum numeric element in a 2D matrix. Ignores non-numeric elements and returns None for invalid input. Parameters: matrix (list of lists): The 2D matrix to search in. Returns: float: The minimum numeric element, or None for empty/invalid input. if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): return None min_element = float('inf') found_numeric = False for row in matrix: for element in row: if isinstance(element, (int, float)): if element < min_element: min_element = element found_numeric = True return min_element if found_numeric else None"},{"question":"Write a python function to find the sum of the subsequence series S(n,k) where S(n,k) is the sum of the squares from 1 to k for each k from 1 to n. The function should return the sum of all these sums. For example, if n=3, the function should return 1^2 + (1^2 + 2^2) + (1^2 + 2^2 + 3^2) = 14.","solution":"def sum_of_subsequences(n): Returns the sum of the subsequence series S(n,k) where S(n,k) is the sum of the squares from 1 to k for each k from 1 to n. total_sum = 0 for k in range(1, n + 1): subsequence_sum = sum(i ** 2 for i in range(1, k + 1)) total_sum += subsequence_sum return total_sum"},{"question":"Write a python function to find the factorial of a number iteratively, and another function that compares the results iterating and recursively.","solution":"def factorial_iterative(n): Returns the factorial of n using an iterative approach. result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Returns the factorial of n using a recursive approach. if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1) def compare_factorial_methods(n): Compares the result of the iterative and recursive factorial methods. Returns True if they are the same, otherwise False. iterative_result = factorial_iterative(n) recursive_result = factorial_recursive(n) return iterative_result == recursive_result"},{"question":"Write a python function to return the sum of the first n odd integers.","solution":"def sum_of_first_n_odd_integers(n): Returns the sum of the first n odd integers. n: int - number of first odd integers to sum returns: int - sum of the first n odd integers return n * n"},{"question":"Write a python function to reverse the order of elements in an array and then print the reversed array.","solution":"def reverse_array(arr): Reverses the order of elements in the input array. Parameters: arr (list): The list of elements to be reversed. Returns: list: The list with elements in reversed order. return arr[::-1]"},{"question":"Write a python function to calculate the maximum values from a list of lists using list comprehension and the built-in \`max()\` function.","solution":"def max_values(list_of_lists): Returns a list containing the maximum value from each list within the list of lists. Parameters: list_of_lists (list of lists): A list where each element is a list of integers. Returns: list: A list containing the maximum values from each inner list. return [max(inner_list) for inner_list in list_of_lists if inner_list]"},{"question":"Write a python function to reverse a linked list. Reverse a linked list either iteratively or recursively.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node def reverse_linked_list(head): Reverses the linked list iteratively. If the head is None, return None. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find the maximum subarray whose sum is grater than zero. If no such subarray exists, return an empty list.","solution":"def max_subarray_sum_positive(arr): Finds the maximum subarray with a sum greater than zero. Args: arr (list): The input list of integers. Returns: list: The subarray with the maximum sum that is greater than zero, or an empty list if no such subarray exists. max_sum = 0 max_subarray = [] current_sum = 0 current_subarray = [] for num in arr: if current_sum + num > 0: current_subarray.append(num) current_sum += num else: current_subarray = [] current_sum = 0 if current_sum > max_sum: max_sum = current_sum max_subarray = current_subarray[:] return max_subarray"},{"question":"Write a python function to find the first non-repeating character in a string. For example, given the string 'aabbc', the function should return the first character that does not repeat which is 'c'.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the given string. If all characters repeat, return None. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a python function to reverse the order of elements in a list. You should not use built-in functions like \`reverse()\`, \`[::-1]\`, or any other direct function to reverse the list. Instead, implement the reversal manually using a simple loop.","solution":"def reverse_list(lst): Reverses the order of elements in a list manually using a loop and returns the reversed list. reversed_lst = [] for i in range(len(lst)-1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Write a python function to find out the smallest common multiple (LCM) of two integers. The function should take two parameters, \`a\` and \`b\`, and return their LCM. The LCM is the smallest positive integer that is divisible by both \`a\` and \`b\`.","solution":"from math import gcd def lcm(a, b): Returns the least common multiple (LCM) of two integers a and b. The LCM is the smallest positive number that is divisible by both a and b. return abs(a * b) // gcd(a, b)"},{"question":"Write a python function to rearrange an array such that all negative numbers appear before positive numbers, preserving the order of appearance.","solution":"def rearrange_array(arr): Rearranges an array such that all negative numbers appear before positive numbers, preserving their order. negative_numbers = [x for x in arr if x < 0] positive_numbers = [x for x in arr if x >= 0] return negative_numbers + positive_numbers"},{"question":"Write a python function to find the maximum number of consecutive 1's in a binary array. You can use the built-in functions like count, max, etc., but try not to use any sort functions or algorithms to solve this problem.","solution":"def find_max_consecutive_ones(nums): Finds the maximum number of consecutive 1's in a binary array. Args: nums (list): Binary array. Returns: int: Maximum number of consecutive 1's. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Write a python function to remove duplicates from a list using list comprehension and set.","solution":"def remove_duplicates(input_list): Removes duplicates from a list using set and list comprehension. Args: input_list (list): The list from which duplicates need to be removed. Returns: list: A list without duplicates. # Use a set to track seen elements and list comprehension to filter seen = set() return [x for x in input_list if not (x in seen or seen.add(x))]"},{"question":"Write a python function to read a string from the user and return the string reversed.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to swap two numbers without using a third variable. You can assume the input is always valid (two integers).","solution":"def swap_numbers(a, b): Swaps two numbers without using a third variable. a = a + b b = a - b a = a - b return a, b"},{"question":"Write a python function to swap the elements at even indices with the elements at odd indices in a list. If the list has an odd number of elements, the last element remains unchanged.","solution":"def swap_even_odd_indices(lst): Swaps elements at even indices with elements at odd indices in the list. If the list has an odd number of elements, the last element remains unchanged. Args: lst (list): A list of elements to be swapped. Returns: list: A list with swapped elements. swapped_list = lst.copy() length = len(lst) for i in range(0, length - 1, 2): swapped_list[i], swapped_list[i + 1] = swapped_list[i + 1], swapped_list[i] return swapped_list"},{"question":"Write a python function to filter out the even numbers from a given list. You will receive the list as a parameter and the function should return a new list containing only the even numbers from the original list.","solution":"def filter_even_numbers(numbers): Filters out the even numbers from a list. Parameters: numbers (list): A list of integers. Returns: list: A list containing only the even numbers from the original list. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a python function to perform matrix multiplication on two given matrices.","solution":"def matrix_multiply(A, B): Multiply two matrices A and B. Args: A (list of list of int/float): The first matrix B (list of list of int/float): The second matrix Returns: list of list of int/float: The result of multiplication of A and B. # Get the number of rows and columns of A and B num_rows_A, num_cols_A = len(A), len(A[0]) num_rows_B, num_cols_B = len(B), len(B[0]) # Ensure matrices A and B can be multiplied if num_cols_A != num_rows_B: raise ValueError(\\"Number of columns of A must equal number of rows of B\\") # Initialize the result matrix with zeros result = [[0 for _ in range(num_cols_B)] for __ in range(num_rows_A)] # Perform matrix multiplication for i in range(num_rows_A): for j in range(num_cols_B): for k in range(num_cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to find the \\"k\\"th missing positive number in a sorted array of integers. The array is sorted in ascending order and contains only distinct integers. The function should handle arrays that may not start from 1 and may contain gaps between consecutive numbers.","solution":"def find_kth_missing(arr, k): Returns the k-th missing positive number in a sorted array of integers. Parameters: arr (List[int]): A sorted array of distinct integers. k (int): The index of the missing positive number to find. Returns: int: The k-th missing positive number. missing_count = 0 current = 1 for num in arr: while current < num: missing_count += 1 if missing_count == k: return current current += 1 current += 1 while missing_count < k: missing_count += 1 if missing_count == k: return current current += 1"},{"question":"Write a python function to count the number of occurrences of each character in a string and return the result as a dictionary. Elegant and efficient.","solution":"def count_char_occurrences(s): Counts the number of occurrences of each character in the string s and returns the result as a dictionary. :param s: input string :return: dictionary with characters as keys and their counts as values char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to generate a list of prime numbers between 1 to n (inclusive).","solution":"def generate_primes(n): Generates a list of prime numbers between 1 and n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, int(num**0.5) + 1): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to insert an element in a sorted array while maintaining sorted order. The function should take three arguments - the array (list), the element to insert, and the position where the element is to be inserted. If the position is invalid, the function should return False.","solution":"def insert_element_sorted(array, element, position): Inserts an element into a sorted array at specified position while maintaining sorted order. Parameters: - array: List of sorted elements. - element: Element to be inserted. - position: Index where the element is to be inserted. Returns: - True if insertion is successful and maintains sorted order. - False if position is invalid or insertion disrupts sorted order. if position < 0 or position > len(array): return False # Check if insertion maintains sorted order if (position > 0 and array[position - 1] > element) or (position < len(array) and array[position] < element): return False # Insertion process array.insert(position, element) return True"},{"question":"Write a python function to merge two sorted arrays without using the built-in function 'sorted' or any other data structure for sorting. You should use a merge function similar to the merge step in merge sort. Analyze the time complexity of your solution.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged_array = [] i, j = 0, 0 # Traverse both arrays and add smaller of both elements to merged_array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to find the maximum depth of binary tree from root to leaf.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxDepth(root): Returns the maximum depth of a binary tree from root to leaf. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to convert a given 1 dimension numpy array to a 2D numpy array with a specific number of columns. The number of rows should be dynamic based on the length of the input array and the number of columns. If the input array length is not perfectly divisible by the number of columns, the last row will contain the remaining elements.","solution":"import numpy as np def convert_to_2d(arr, num_columns): Converts a 1-dimensional numpy array to a 2-dimensional numpy array with a specified number of columns. Parameters: arr (numpy.ndarray): Input 1D numpy array. num_columns (int): Number of columns for the output 2D array. Returns: numpy.ndarray: The reshaped 2D numpy array. num_rows = int(np.ceil(len(arr) / num_columns)) arr_padded = np.pad(arr, (0, num_rows * num_columns - len(arr)), constant_values=(0,)) return arr_padded.reshape(num_rows, num_columns)"},{"question":"Write a python function to compute the Nth Harmonic Number. The Nth Harmonic Number is defined as the sum of the reciprocals of the first N natural numbers. The function should be named \`HarmonicNumber\` and should take an integer \`N\` as an argument. The function should return the Nth Harmonic Number.","solution":"def HarmonicNumber(N): Returns the Nth Harmonic Number, which is the sum of the reciprocals of the first N natural numbers. if N <= 0: raise ValueError(\\"N should be a positive integer\\") harmonic_number = 0.0 for i in range(1, N + 1): harmonic_number += 1 / i return harmonic_number"},{"question":"Write a python function to calculate the power of a number. The function must be able to handle both positive and negative numbers and also the base 0 and the exponent 0. Handle the case where the exponent is a negative integer. Your function should return a proper error message for invalid inputs, such as non-numeric inputs or negative bases with non-integer exponents.","solution":"def power(base, exponent): Calculates the power of a number. Returns the value of \`base\` raised to the power \`exponent\` or an error message for invalid inputs. if not isinstance(base, (int, float)) or not isinstance(exponent, (int, float)): return \\"Error: Inputs must be numeric.\\" if base < 0 and not float(exponent).is_integer(): return \\"Error: Negative base with a non-integer exponent is invalid.\\" if base == 0 and exponent == 0: return \\"Result is undefined.\\" return base ** exponent"},{"question":"Write a python function to implement binary search on a sorted list of numbers. If the number is found, return its index. Otherwise, return -1. The function should have a time complexity of O(log n).","solution":"def binary_search(arr, target): Perform binary search on a sorted list of numbers. Parameters: arr (list): A sorted list of numbers. target (int): The number to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to find the shortest path in a graph using Dijkstra's algorithm. Dijkstra's algorithm is used for finding the shortest path between a node and all other nodes in a graph. It works by initially setting the distance to the source node to 0 and the distances to all other nodes to infinity. The algorithm then iteratively selects the node with the smallest distance, updates the distances to its neighbors, and continues until it has visited all nodes.","solution":"import heapq def dijkstra(graph, start): Returns the shortest path from the start node to all other nodes in the graph using Dijkstra's algorithm. :param graph: A dictionary representing the graph where the keys are node names and the values are dictionaries of neighboring node names and their corresponding edge weights. :param start: The starting node. :return: A dictionary where the keys are node names and the values are the shortest path distance from the start node to that node. # Initialize the distance to all nodes as infinity and to the start node as 0 distances = {node: float('inf') for node in graph} distances[start] = 0 # Priority queue to store nodes to explore priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If the current distance is greater than the recorded shortest distance, skip if current_distance > distances[current_node]: continue # Update the distance for each neighbor for neighbor, weight in graph[current_node].items(): distance = current_distance + weight # Only consider this new path if it is shorter if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to find the nth Fibonacci number using recursion with memoization. The function should take an integer \`n\` as input and return the nth Fibonacci number.","solution":"def fibonacci(n, memo=None): Returns the nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to find the number of unique pairs summing up to a given target.","solution":"def unique_pairs(nums, target): Finds the number of unique pairs that sum up to the given target. Parameters: nums (list): List of integers. target (int): The target sum for the pairs. Returns: int: The number of unique pairs that sum up to the target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs)"},{"question":"Write a python function to multiply two complex numbers in Python.","solution":"def multiply_complex(c1, c2): Multiplies two complex numbers and returns the result. :param c1: First complex number (a + bj) :param c2: Second complex number (c + dj) :return: Product of c1 and c2 as a complex number return (c1 * c2)"},{"question":"Write a python function to print all the prime numbers less than or equal to a given number n. The function should use the Sieve of Eratosthenes algorithm for finding prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False # 0 and 1 are not prime numbers for i in range(2, int(n**0.5) + 1): if primes[i]: for j in range(i*i, n + 1, i): primes[j] = False return [i for i, is_prime in enumerate(primes) if is_prime]"},{"question":"Write a python function to find the kth largest element in an array of n integers. You may assume k is always valid and 1 ≤ k ≤ n.","solution":"import heapq def find_kth_largest(nums, k): Returns the k-th largest element in an array. :param nums: List of integers :param k: k-th largest position :return: k-th largest element if not nums or k < 1 or k > len(nums): raise ValueError(\\"k is out of bounds\\") # Use a min-heap of size k min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heapreplace(min_heap, num) return min_heap[0]"},{"question":"Write a python function to find the next greater element for list of integers. The function should return a list where the i-th element is the next greater element of the i-th element in the input list. If there is no greater element to the right, set the value to -1.","solution":"def next_greater_element(nums): Returns a list where the i-th element is the next greater element of the i-th element in nums. If there is no greater element to the right, set the value to -1. result = [-1] * len(nums) stack = [] for i in range(len(nums)): while stack and nums[stack[-1]] < nums[i]: index = stack.pop() result[index] = nums[i] stack.append(i) return result"},{"question":"Write a python function to find the highest product of any three numbers in a given list. The list can contain both positive and negative numbers. Here is a list [1, 2, 3, 4, -1, -2, -3, -4]. How can I write this function?","solution":"def highest_product_of_three(nums): Returns the highest product of any three numbers in the given list. if len(nums) < 3: raise ValueError(\\"List must have at least three numbers\\") nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Write a python function to generate a list of the first N even natural numbers. Use list comprehension for this purpose. Additionally, the function should raise a ValueError if the input is less than 1.","solution":"def first_n_even_numbers(n): Returns a list of the first N even natural numbers. Raises a ValueError if n is less than 1. if n < 1: raise ValueError(\\"The input must be greater than or equal to 1\\") return [2 * i for i in range(1, n + 1)]"},{"question":"Write a python function to convert a given string into a list of ascii values for each character.","solution":"def string_to_ascii(s): Converts a given string into a list of ASCII values for each character. Parameters: s (str): The input string. Returns: list: List of ASCII values of characters in the string. return [ord(char) for char in s]"},{"question":"Write a python function to find the largest of two numbers.","solution":"def largest(a, b): Returns the largest of two numbers a and b. if a > b: return a else: return b"},{"question":"Write a python function to calculate the sum of all prime numbers within a given range. The function takes two integers \`start\` and \`end\` as input and returns the sum of prime numbers between \`start\` and \`end\` (inclusive).","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes(start, end): Returns the sum of all prime numbers in the range [start, end]. return sum(n for n in range(start, end + 1) if is_prime(n))"},{"question":"Write a python function to remove duplicates from a list while preserving the original order of elements. If the list contains nested lists, the function should also remove duplicates from each nested list.","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving the original order of elements. If the list contains nested lists, it removes duplicates from each nested list too. def remove_duplicates_from_inner_list(inner_lst): seen = set() result = [] for item in inner_lst: if item not in seen: seen.add(item) result.append(item) return result if all(not isinstance(i, list) for i in lst): return remove_duplicates_from_inner_list(lst) result = [] for item in lst: if isinstance(item, list): result.append(remove_duplicates_from_inner_list(item)) else: if item not in result: result.append(item) return result"},{"question":"Write a python function to solve the following problem: Given an array nums of integers, find if the array contains any duplicates.","solution":"def contains_duplicate(nums): Returns True if the array contains any duplicates, otherwise False. return len(nums) != len(set(nums))"},{"question":"Write a python function to compute the nth Fibonacci number. The function should use memoization to optimize its performance. Memoization is a technique where you store the results of expensive function calls and reuse them when the same inputs occur again.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to find the kth smallest element in an unsorted array. The function should have a time complexity of O(n log n).","solution":"def kth_smallest(arr, k): Returns the kth smallest element in the unsorted array arr. The function sorts the array and returns the k-1 indexed element to get the kth element as the count starts from 1. Time complexity: O(n log n) due to sorting. arr.sort() return arr[k - 1]"},{"question":"Write a python function to multiply two numbers without using the multiplication operator.","solution":"def multiply(a, b): Multiplies two numbers without using the multiplication operator by repeated addition. result = 0 positive = True if a < 0 and b < 0: a, b = abs(a), abs(b) elif a < 0: a, positive = abs(a), not positive elif b < 0: b, positive = abs(b), not positive for _ in range(b): result += a return result if positive else -result"},{"question":"Write a python function to find the maximum and minimum elements in a given list. Can you provide a step-by-step solution?","solution":"def find_max_min(lst): Returns the maximum and minimum elements in the given list. Parameters: lst (list): A list of numerical values. Returns: tuple: A tuple containing maximum and minimum elements in the format (max, min). if not lst: raise ValueError(\\"The list should not be empty.\\") max_element = lst[0] min_element = lst[0] for element in lst: if element > max_element: max_element = element if element < min_element: min_element = element return (max_element, min_element)"},{"question":"Write a python function to extract the maximum integer from a given positive integer \`n\`. The function should ignore the duplicates of the digits in the integer and only consider each digit once. For example, if the input is \`n = 123241\`, the function should return \`4\` because \`4\` is the largest digit that appears only once in the number.","solution":"def max_unique_digit(n): Returns the maximum unique digit from the given integer n. Parameters: n (int): A positive integer. Returns: int: The largest digit that appears only once in the number. digit_count = {} str_n = str(n) # Count the occurrences of each digit for digit in str_n: digit_count[digit] = digit_count.get(digit, 0) + 1 # Filter out digits that appear more than once unique_digits = [int(digit) for digit, count in digit_count.items() if count == 1] # Return the maximum unique digit or -1 if there are no unique digits return max(unique_digits) if unique_digits else -1"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a given array (both the array and subarray elements are integers). The function should return the maximum sum found. For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the maximum sum of any contiguous subarray is 6 (i.e., the subarray [4,-1,2,1]).","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray within the given array using Kadane's Algorithm. if not arr: raise ValueError(\\"Array is empty\\") max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the sum of squares of all prime numbers upto n","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_squares_of_primes(n): Returns the sum of squares of all prime numbers up to n. return sum(x**2 for x in range(2, n + 1) if is_prime(x))"},{"question":"Write a python function to generate the Fibonacci sequence in reverse order up to a given length of the sequence. For example, if the length is 5, the output should be [3, 2, 1, 0, -1].","solution":"def reverse_fibonacci(n): Returns the Fibonacci sequence in reverse order up to a given length n. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return list(reversed(fib_sequence[:n]))"},{"question":"Write a python function to check if a given number is a perfect square or not. If it is not a perfect square, return the nearest perfect square greater than the given number.","solution":"import math def nearest_perfect_square(n): Check if a given number is a perfect square or not. If it is not a perfect square, return the nearest perfect square greater than the given number. Parameters: n (int): The number to check Returns: int: Nearest perfect square greater than or equal to n if n < 0: return 0 # handle negative input, closest perfect square is zero sqrt_n = int(math.sqrt(n)) if sqrt_n * sqrt_n == n: return n # n is a perfect square # Find the next perfect square return (sqrt_n + 1) * (sqrt_n + 1)"},{"question":"Write a python function to find the minimum number of jumps required to reach the end of the array (last element). You can only jump from index i to index i + arr[i] where arr is the array of integers representing the maximum jump length from that position.","solution":"def min_jumps(arr): Returns the minimum number of jumps required to reach the end of the array. if len(arr) <= 1: return 0 if arr[0] == 0: return -1 max_reach = arr[0] step = arr[0] jumps = 1 for i in range(1, len(arr)): if i == len(arr) - 1: return jumps max_reach = max(max_reach, i + arr[i]) step -= 1 if step == 0: jumps += 1 if i >= max_reach: return -1 step = max_reach - i return -1"},{"question":"Write a python function to sort three integers x, y, and z. The function should accept three integers as arguments and return a list with the integers sorted in ascending order. If the function receives two or more integers with the same value, it should handle ties correctly. Your function should work for both negative and positive integers.","solution":"def sort_three_integers(x, y, z): Returns a list with the three integers x, y, and z sorted in ascending order. return sorted([x, y, z])"},{"question":"Write a python function to solve thePainter's Partition problem using a binary search approach. The function should take an array of non-negative integers representing the time taken to paint each board and an integer m representing the number of painters available. The function should return the minimum time required to paint all the boards.","solution":"def is_feasible(boards, n, m, max_time): Helper function to check if it is feasible to paint all boards within max_time given m painters. painters_count = 1 current_time = 0 for time in boards: if current_time + time <= max_time: current_time += time else: painters_count += 1 current_time = time if painters_count > m: return False return True def minimum_time(boards, m): Returns the minimum time required to paint all boards using m painters. if not boards or m == 0: return 0 low, high = max(boards), sum(boards) while low < high: mid = (low + high) // 2 if is_feasible(boards, len(boards), m, mid): high = mid else: low = mid + 1 return low"},{"question":"Write a python function to reverse a list of strings. Also, identify the immediate duplicate of the reversed list and return it. If no immediate duplicate is found, return a message saying \\"No immediate duplicate found\\".","solution":"def reverse_and_find_duplicate(strings): Reverses the list of strings and checks for immediate duplicates. Parameters: strings (list): List of strings to be reversed. Returns: str: The immediate duplicate if found, otherwise a message. reversed_list = strings[::-1] for i in range(len(reversed_list) - 1): if reversed_list[i] == reversed_list[i + 1]: return reversed_list[i] return \\"No immediate duplicate found\\""},{"question":"Write a python function to sort a list of integers in ascending order and return the sorted list.","solution":"def sort_list(arr): Sorts a list of integers in ascending order. Parameters: arr (list): A list of integers. Returns: list: The sorted list of integers. return sorted(arr)"},{"question":"Write a python function to determine if there exists a unique triple (a, b, c) such that (a^2 + b^2 = c^2) where a, b, and c are integers between 1 and 100.","solution":"def unique_pythagorean_triples(): Returns a list of unique triples (a, b, c) such that a^2 + b^2 = c^2 where a, b, and c are integers between 1 and 100. triples = [] for a in range(1, 101): for b in range(a, 101): # Ensure b >= a to avoid duplicates c_squared = a**2 + b**2 c = int(c_squared**0.5) if c_squared == c**2 and c <= 100: triples.append((a, b, c)) return triples"},{"question":"Write a python function to count the number of even digits in a given integer.","solution":"def count_even_digits(n): Returns the number of even digits in a given integer n. # Convert the number to its absolute value and then to a string n_str = str(abs(n)) # Count the number of even digits even_digits_count = sum(1 for digit in n_str if int(digit) % 2 == 0) return even_digits_count"},{"question":"Write a python function to determine the players with the highest scores in a game. Given a list of players and their scores, return the player(s) with the highest score. If there are multiple players with the same highest score, return all of them. The function should handle empty lists and return an empty list if there are no players.","solution":"def highest_scoring_players(players_scores): Returns the player(s) with the highest score. If there are multiple players with the same highest score, return all of them. If the input list is empty, return an empty list. Args: players_scores (list of tuples): A list of tuples where each tuple contains a player's name (str) and their score (int). Returns: list: A list of player(s) who have the highest score. if not players_scores: return [] max_score = max(players_scores, key=lambda x: x[1])[1] return [player for player, score in players_scores if score == max_score]"},{"question":"Write a python function to extract the first and last names of people from a text string.","solution":"import re def extract_names(text): Extracts first and last names from a text string. Assumes that first and last names are capitalized words not separated by non-alphabetic characters (e.g., John Doe, but not John-Doe). Parameters: text (str): The input text containing names. Returns: list: A list of tuples containing the first and last names. name_pattern = re.compile(r'b([A-Z][a-z]+) ([A-Z][a-z]+)b') return name_pattern.findall(text)"},{"question":"Write a python function to find the nth Fibonacci number using the Matrix Exponentiation method. This method involves using matrix exponentiation to efficiently compute Fibonacci numbers, which is particularly useful for large n. Please provide a detailed explanation of the code and the method used.","solution":"def matrix_multiply(A, B): Multiplies two 2x2 matrices A and B. return [ [A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]] ] def matrix_power(matrix, n): Raises the matrix to the power of n using exponentiation by squaring. result = [[1, 0], [0, 1]] # Identity matrix base = matrix while n > 0: if n % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) n //= 2 return result def fibonacci_matrix_exponentiation(n): Returns the nth Fibonacci number using matrix exponentiation method. if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result = matrix_power(F, n - 1) return result[0][0]"},{"question":"Write a python function to check whether the input string is a palindrome ignoring the case and considering only alphabetic characters.","solution":"def is_palindrome(s): Checks if the input string s is a palindrome, ignoring case and considering only alphabetic characters. # Filter out non-alphabetic characters and convert everything to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Compare the filtered list to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to perform a merge sort on an array.","solution":"def merge_sort(arr): Performs a merge sort on the input array. Parameters: arr (list): The array to sort. Returns: list: The sorted array. if len(arr) <= 1: return arr # Find the middle point and divide it mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge the sorted halves return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into one sorted list. Parameters: left (list): The left sorted array. right (list): The right sorted array. Returns: list: The merged and sorted array. sorted_arr = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_arr.append(left[left_index]) left_index += 1 else: sorted_arr.append(right[right_index]) right_index += 1 # Append any remaining elements from left or right list while left_index < len(left): sorted_arr.append(left[left_index]) left_index += 1 while right_index < len(right): sorted_arr.append(right[right_index]) right_index += 1 return sorted_arr"},{"question":"Write a python function to calculate the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3.","solution":"def sum_of_cubes(n): Returns the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3. return sum(i**3 for i in range(1, n+1))"},{"question":"Write a python function to find the most frequent even number in a list. If the list does not contain any even numbers or if there are multiple even numbers but no clear most frequent one, the function should return -1.","solution":"from collections import Counter def most_frequent_even(numbers): Returns the most frequent even number in the list. If the list does not contain any even numbers or if there is no clear most frequent one, returns -1. even_numbers = [num for num in numbers if num % 2 == 0] if not even_numbers: return -1 count = Counter(even_numbers) most_common = count.most_common() if len(most_common) == 1: return most_common[0][0] max_count = most_common[0][1] frequent_evens = [num for num, cnt in most_common if cnt == max_count] if len(frequent_evens) > 1: return -1 return frequent_evens[0]"},{"question":"Write a python function to reverse a string in-place using a two-pointer technique.","solution":"def reverse_in_place(s): Reverses a string in-place using a two-pointer technique. chars = list(s) # Convert the string to a list to manipulate it in place left, right = 0, len(chars) - 1 while left < right: # Swap the characters at left and right chars[left], chars[right] = chars[right], chars[left] # Move the pointers left, right = left + 1, right - 1 return ''.join(chars)"},{"question":"Write a python function to find the first duplicate in an array of integers.","solution":"def find_first_duplicate(nums): Returns the first duplicate number in the array. If there are no duplicates, returns None. seen = set() for num in nums: if num in seen: return num seen.add(num) return None"},{"question":"Write a python function to print a pyramid of a given height \`h\`.","solution":"def print_pyramid(h): Prints a pyramid of height h. if not isinstance(h, int) or h <= 0: raise ValueError(\\"Height must be a positive integer\\") for i in range(1, h + 1): print(' ' * (h - i) + '*' * (2 * i - 1))"},{"question":"Write a python function to check if a given string is a valid parenthesis string (also known as a balanced string).","solution":"def is_valid_parenthesis(s): Checks if the given string s is a valid parenthesis string. A string is a valid parenthesis string if every opening parenthesis has a corresponding closing parenthesis and all the pairs are properly nested. stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() else: continue # ignore non-parenthesis characters return len(stack) == 0"},{"question":"Write a python function to print the first n terms of the Fibonacci sequence. Here \`n\` is the number of terms to be printed.","solution":"def fibonacci(n): Prints the first n terms of the Fibonacci sequence. sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence"},{"question":"Write a python function to generate all possible combinations of a given list, including the empty set and the list itself. This function should return all combinations in ascending order of their lengths.","solution":"from itertools import combinations def generate_combinations(input_list): Generates all possible combinations of the input list, including the empty set and the list itself, sorted by ascending order of their lengths. all_combinations = [] for r in range(len(input_list) + 1): all_combinations.extend(combinations(input_list, r)) return all_combinations"},{"question":"Write a python function to return a reversed copy of a given list.","solution":"def reverse_list(lst): Returns a reversed copy of the given list. return lst[::-1]"},{"question":"Write a python function to find the maximum and minimum value in a list in a single pass","solution":"def find_max_and_min(lst): Returns the maximum and minimum value in a list in a single pass. Parameters: lst (list): The list of numbers. Returns: tuple: A tuple containing the maximum and minimum value in the list. Raises: ValueError: If the list is empty. if not lst: raise ValueError(\\"List is empty\\") max_val = min_val = lst[0] for num in lst[1:]: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Write a python function to print the first 'n' lines of the Fibonacci sequence.","solution":"def fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence and returns them as a list. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence"},{"question":"Write a python function to identify prime numbers within a given range. The function should find all prime numbers between two integers, inclusive. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Make sure to test your function with some examples to ensure its correctness.","solution":"def is_prime(n): Determines if a number is prime. Args: n (int): The number to check for primality. Returns: bool: True if the number is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_numbers_in_range(start, end): Finds all prime numbers in a given range [start, end]. Args: start (int): The start of the range. end (int): The end of the range. Returns: list: A list of prime numbers within the range [start, end]. primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to count the number of 1's in the binary representation of a non-negative integer.","solution":"def count_ones_in_binary(n): Returns the number of 1's in the binary representation of a non-negative integer n. Parameters: n (int): A non-negative integer. Returns: int: The count of 1's in the binary representation of n. return bin(n).count('1')"},{"question":"Write a python function to calculate the area of a triangle given its base and height using the formula: ( text{Area} = frac{1}{2} times text{base} times text{height} ).","solution":"def area_of_triangle(base, height): Returns the area of a triangle given its base and height. return 0.5 * base * height"},{"question":"Write a python function to check whether a list of integers contains any duplicates. If duplicates are found, the function should return \`True\`. If no duplicates are found, return \`False\`. Additionally, provide a brief description of your solution.","solution":"def contains_duplicates(nums): Checks whether the list nums contains any duplicate integers. Parameters: nums (list): A list of integers. Returns: bool: True if there are duplicates, False otherwise. return len(nums) != len(set(nums))"},{"question":"Write a python function to add all integers in a nested list using recursion.","solution":"def sum_nested_list(nested_list): Recursively sums all integers in a nested list. :param nested_list: A list which may contain integers and/or other lists :return: Sum of all integers in the nested list total = 0 for element in nested_list: if isinstance(element, list): total += sum_nested_list(element) elif isinstance(element, int): total += element return total"},{"question":"Write a python function to solve the \\"Two Sum\\" problem. The problem is defined as finding two numbers in a list that add up to a specific target number. The function should return the indices of the two numbers such that they add up to the target. If no two numbers add up to the target, the function should return an empty list.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. If no such numbers exist, return an empty list. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"Write a python function to sort the elements in a list in descending order. The list may contain both integers and floating-point numbers. The function should return the sorted list.","solution":"def sort_descending(numbers): Returns the list of numbers sorted in descending order. Args: numbers (list): A list containing integers and/or floating-point numbers. Returns: list: Sorted list in descending order. return sorted(numbers, reverse=True)"},{"question":"Write a python function to extract emails from a string that contains multiple email addresses separated by commas, spaces, or a combination of both. Also, ensure the script handles cases where the input string is None, empty, or does not contain any valid email addresses.","solution":"import re def extract_emails(text): Extracts and returns a list of email addresses from a given string. Handles cases where the input string is None, empty, or does not contain any valid email addresses. :param text: String containing email addresses separated by commas, spaces, or both. :return: List of email addresses or an empty list if no valid email addresses are found. if text is None: return [] # Regular expression to match email addresses email_regex = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' emails = re.findall(email_regex, text) return emails"},{"question":"Write a python function to return the missing number in a given list of numbers from 1 to n. The function should work even if there are duplicate numbers in the list.","solution":"def find_missing_number(arr, n): Returns the missing number in the array from the range 1 to n. This function can handle duplicates in the input list. expected_sum = n * (n + 1) // 2 actual_sum = sum(set(arr)) return expected_sum - actual_sum"},{"question":"Write a python function to return a binary representation of an integer. The binary should be padded with 0s to a minimum of 8 bits. If the input integer is smaller than 8 bits when converted to binary, return the binary representation padded with 0s.","solution":"def int_to_binary(n): Returns the binary representation of an integer padded with 0s to a minimum of 8 bits. return format(n, '08b')"},{"question":"Write a python function to convert a string to Pig Latin. In Pig Latin, a word is formed by taking the first letter of a word and moving it to the end and appending \\"ay\\". For example, \\"hello\\" becomes \\"ellohay\\". Handle both uppercase and lowercase letters appropriately.","solution":"def to_pig_latin(word): Converts a word to Pig Latin. Moves the first letter to the end and adds 'ay'. Handles both uppercase and lowercase letters appropriately. if len(word) > 0: first_letter = word[0] rest_of_word = word[1:] pig_latin_word = rest_of_word + first_letter.lower() + \\"ay\\" if word[0].isupper(): pig_latin_word = pig_latin_word.capitalize() return pig_latin_word return word"},{"question":"Write a python function to find the shortest path between two nodes in a weighted graph. Use Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start, end): Returns the shortest path between start and end nodes in a weighted graph. Uses Dijkstra's algorithm. :param graph: dict, keys are nodes and values are lists of tuples (neighbor, weight) :param start: start node :param end: end node :return: list of nodes representing the shortest path queue = [(0, start)] distances = {start: 0} predecessors = {start: None} visited = set() while queue: current_distance, current_node = heapq.heappop(queue) if current_node in visited: continue visited.add(current_node) if current_node == end: break for neighbor, weight in graph.get(current_node, []): distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance predecessors[neighbor] = current_node heapq.heappush(queue, (distance, neighbor)) if end not in distances: return None # No path exists # Reconstruct path path = [] while end is not None: path.append(end) end = predecessors[end] return path[::-1]"},{"question":"Write a python function to get the maximum number in a list of numbers. What should the function signature look like? The function should handle an empty list gracefully by returning None.","solution":"from typing import List, Optional def get_maximum(numbers: List[int]) -> Optional[int]: Returns the maximum number in a list of numbers. Parameters: - numbers (List[int]): A list of integers. Returns: - Optional[int]: The maximum number in the list or None if the list is empty. if not numbers: return None return max(numbers)"},{"question":"Write a python function to find the maximum value and its index from a list of numbers. If the list is empty, return return None for both the maximum value and the index. The function should also be able to handle lists containing negative numbers.","solution":"def max_value_and_index(numbers): Returns the maximum value and its index from a list of numbers. If the list is empty, returns (None, None). Parameters: numbers (list): List of numbers. Returns: tuple: Maximum value and its index. if not numbers: return None, None max_value = max(numbers) max_index = numbers.index(max_value) return max_value, max_index"},{"question":"Write a python function to sum the numbers in a list. The function should handle an empty list gracefully and return 0 in such a case. Additionally, ensure that the function can take both integers and floats in the list.","solution":"def sum_numbers(numbers): Returns the sum of numbers in the provided list. Handles both integers and floats. Returns 0 if the list is empty. return sum(numbers)"},{"question":"Write a python function to sort the elements of an array using the selection sort algorithm. Please provide the function definition, a brief explanation of the algorithm, and a check function to verify the solution with provided data points.","solution":"def selection_sort(arr): Sorts an array using the selection sort algorithm. The selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from the unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array: 1. The subarray which is already sorted. 2. The remaining subarray which is unsorted. In every iteration of the selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray. n = len(arr) for i in range(n): # Find the minimum element in the remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to reverse a string and then append the reversed string to the original string.","solution":"def reverse_and_append(original_string): Reverses the input string and appends the reversed string to the original string. Args: original_string (str): The string to be reversed and appended. Returns: str: The original string concatenated with its reverse. reversed_string = original_string[::-1] return original_string + reversed_string"},{"question":"Write a python function to convert a list of strings into a list of their corresponding ASCII values.","solution":"def strings_to_ascii(strings): Converts a list of strings into a list of their corresponding ASCII values. Args: strings (list of str): List of strings to convert. Returns: list of list of int: List of corresponding ASCII values for each string. return [[ord(char) for char in string] for string in strings]"},{"question":"Write a python function to print all the prime numbers between two given numbers (inclusive). The function should accept two integer parameters and print all the prime numbers from the smaller to the greater number. You should also consider edge cases.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def print_primes_between(a, b): Prints all prime numbers between a and b (inclusive). if a > b: a, b = b, a for number in range(a, b + 1): if is_prime(number): print(number)"},{"question":"Write a python function to find the number of distinct substrings of a given string 's'.","solution":"def distinct_substrings(s): Returns the number of distinct substrings of the given string 's'. substrings = set() n = len(s) # Generate all possible substrings for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"Write a python function to find the maximum sum of a subarray of size K in a one-dimensional array of integers.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of size k. if len(arr) < k or k <= 0: return 0 # Initialize the maximum sum as the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Traverse the array from k to end for i in range(k, len(arr)): # Update the current sum to move the window to the right current_sum += arr[i] - arr[i - k] # Update the maximum sum if the current sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the first missing positive number in a list of integers. For example, given the array [3, 4, -1, 1], the function should return 2 because it is the first missing positive number.","solution":"def first_missing_positive(nums): Returns the first missing positive number in the given list of integers. n = len(nums) # Mark numbers (num < 0) and (num > n) with a special marker number (n+1) for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use index as a hash key and number sign as a presence detector for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # The first index of a positive number is the missing smallest positive number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Write a python function to find the maximum sum of elements in a subarray of a given array of integers, such that no two elements are adjacent and the sum must be non-negative.","solution":"def max_non_adjacent_sum(nums): Find the maximum sum of elements in a subarray such that no two elements are adjacent, and the sum must be non-negative. if not nums: return 0 n = len(nums) if n == 1: return max(0, nums[0]) # Initialize the dp array dp = [0] * n dp[0] = max(0, nums[0]) if n > 1: dp[1] = max(dp[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i], nums[i]) return dp[-1]"},{"question":"Write a python function to find the second largest number in a list of list of integers. If the list is empty or has only one element, the function should return None.","solution":"def second_largest(lists): Returns the second largest number in a list of list of integers. If the list is empty or has only one element, returns None. # Flatten the list of lists all_numbers = [num for sublist in lists for num in sublist] if len(all_numbers) < 2: return None # Remove duplicates and sort the list in descending order unique_numbers = list(set(all_numbers)) unique_numbers.sort(reverse=True) # If there are at least two unique numbers, return the second largest if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a python function to find all the subsets of a given string. The function should return a list of subsets, where each subset is represented as a list of characters. The subsets should be printed in lexicographic sorted order.","solution":"from itertools import combinations def find_all_subsets(s): Returns all subsets of the input string in lexicographic sorted order. Each subset is represented as a list of characters. sorted_string = sorted(s) subsets = [] for i in range(len(sorted_string) + 1): for combo in combinations(sorted_string, i): subsets.append(list(combo)) return subsets"},{"question":"Write a python function to determine the maximum number of unique characters in any contiguous substring of a given string. The function should return the length of the substring with the maximum number of unique characters.","solution":"def max_unique_chars_substring(s): Returns the length of the substring with the maximum number of unique characters. max_length = 0 start = 0 char_map = {} for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a python function to find the minimum cost of climbing stairs. The cost of climbing each stair is given in an array. The minimum cost to reach the top of the stair is the sum of the cost from the bottom up, with the rule that you can either step one step or two steps at a time.","solution":"def minCostClimbingStairs(cost): Returns the minimum cost to reach the top of the stairs. cost : List[int] An array where cost[i] is the cost of climbing the i-th step. n = len(cost) if n == 0: return 0 elif n == 1: return cost[0] dp = [0] * n dp[0] = cost[0] dp[1] = cost[1] for i in range(2, n): dp[i] = cost[i] + min(dp[i-1], dp[i-2]) return min(dp[-1], dp[-2])"},{"question":"Write a python function to count the number of distinct pairs of integers in a list where the sum of the pairs equals a given number.","solution":"def count_pairs_with_sum(numbers, target_sum): Returns the count of distinct pairs in the list 'numbers' whose sum equals 'target_sum'. seen = set() pairs = set() for number in numbers: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"Write a python function to return True if an integer is a perfect square or cube, and False otherwise.","solution":"def is_perfect_square_or_cube(n): Returns True if the integer n is a perfect square or a perfect cube, and False otherwise. if n < 0: return False # Check for perfect square square_root = int(n ** 0.5) if square_root * square_root == n: return True # Check for perfect cube cube_root = int(n ** (1/3)) if cube_root * cube_root * cube_root == n: return True return False"},{"question":"Write a python function to convert all lowercase letters in a string to uppercase without using any built-in string methods like upper(), islower(), etc.","solution":"def to_uppercase(s): Converts all lowercase letters in the string s to uppercase without using any built-in string methods like upper(). result = [] for char in s: if 'a' <= char <= 'z': # Convert lowercase to uppercase by subtracting 32 from its ASCII value result.append(chr(ord(char) - 32)) else: result.append(char) return ''.join(result)"},{"question":"Write a python function to find the list of prime numbers up to a given non-negative integer \`n\`. You can assume that \`n\` is less than 1000.","solution":"def find_primes(n): Returns a list of prime numbers from 2 up to a given non-negative integer n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num in range(2, n+1) if sieve[num]]"},{"question":"Write a python function to find the most frequent character in a string and its frequency. To solve this problem, please ignore case sensitivity and consider only alphanumeric characters (ignoring spaces, punctuation, etc.). Additionally, ensure that your code handles an empty string input gracefully by returning an appropriate message.","solution":"import re from collections import Counter def most_frequent_char(s): Returns the most frequent alphanumeric character in the string and its frequency. Ignores case sensitivity and non-alphanumeric characters. Args: s (str): Input string. Returns: tuple: (most_frequent_character, frequency) OR str message for empty input. # Filter alphanumeric characters and convert to lowercase filtered_s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() if not filtered_s: return \\"The string is empty or contains no alphanumeric characters.\\" # Get frequency of each character freq = Counter(filtered_s) # Find the character with max frequency most_frequent_character, frequency = freq.most_common(1)[0] return (most_frequent_character, frequency)"},{"question":"Write a python function to find the sum of numbers from 1 to 100.","solution":"def sum_of_numbers(): Returns the sum of numbers from 1 to 100. return sum(range(1, 101))"},{"question":"Write a python function to identify and return the index of the first occurrence of 0 in a list. If there is no 0 in the list, return -1.","solution":"def find_first_zero(arr): Returns the index of the first occurrence of 0 in the list. If there is no 0 in the list, returns -1. try: return arr.index(0) except ValueError: return -1"},{"question":"Write a python function to find all the pairs of numbers in a list that yield the maximum sum and the minimum sum. The list will contain integer numbers and it is guaranteed that the list will have at least two elements.","solution":"def find_max_min_sum_pairs(lst): Find the pairs of numbers in a list that yield the maximum and minimum sum. Args: lst (list): List of integers with at least two elements. Returns: tuple: (max_sum_pairs, min_sum_pairs) max_sum_pairs: List of pairs that yield the maximum sum. min_sum_pairs: List of pairs that yield the minimum sum. if len(lst) < 2: raise ValueError(\\"The list must contain at least two elements.\\") # Sort the list to easily find the largest and smallest elements sorted_lst = sorted(lst) # Maximum sum pairs are the two largest elements max_sum = sorted_lst[-1] + sorted_lst[-2] max_sum_pairs = [((sorted_lst[-2], sorted_lst[-1]))] # Minimum sum pairs are the two smallest elements min_sum = sorted_lst[0] + sorted_lst[1] min_sum_pairs = [((sorted_lst[0], sorted_lst[1]))] return max_sum_pairs, min_sum_pairs"},{"question":"Write a python function to remove all duplicates from a list. The function \`remove_duplicates\` should take a list as input and return a new list with all duplicates removed. The function should consider only the first occurrence of each element and remove all subsequent duplicates.","solution":"def remove_duplicates(input_list): Remove all duplicates from the input list, keeping only the first occurrence of each element. Parameters: input_list (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to detect whether a given string is a permutation of a palindrome. A palindrome reads the same backward as forward. A permutation of a palindrome has at most one character with an odd count.","solution":"def is_permutation_of_palindrome(s): Checks if a given string is a permutation of a palindrome. :param s: str - input string :return: bool - True if the string is a permutation of a palindrome, False otherwise # Removing spaces and converting to lowercase s = s.replace(\\" \\", \\"\\").lower() # Dictionary to count characters char_count = {} # Counting each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Counting odd occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # At most one odd occurrence is allowed return odd_count <= 1"},{"question":"Write a python function to calculate the Best First Search (BFS) path from the source node to destination node in a given graph. The graph is represented as an adjacency list. If there is no path found in the graph, return \`None\`. Additionally, you should be able to handle both directed and undirected graphs.","solution":"from collections import deque def bfs(graph, source, destination): Returns the path from source to destination using Best First Search (BFS). If no path is found, returns None. Parameters: graph (dict): The graph represented as adjacency list. source (any): The source node. destination (any): The destination node. Returns: list/None: The path from source to destination. None if no path is found. if source not in graph or destination not in graph: return None visited = set() queue = deque([(source, [source])]) while queue: current_node, path = queue.popleft() if current_node == destination: return path for neighbor in graph.get(current_node, []): if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return None"},{"question":"Write a python function to merge two lists of dictionaries, merging by a unique key in each dictionary. If there are duplicate keys, the corresponding dictionaries should be merged, with later dictionaries taking precedence.","solution":"def merge_dicts_by_key(list1, list2, key): Merges two lists of dictionaries by a specified unique key, with dictionaries from the second list taking precedence in case of duplicate keys. Parameters: - list1: List of dictionaries - list2: List of dictionaries - key: The key on which to merge the dictionaries Returns: - A merged list of dictionaries. merged_dict = {d[key]: d for d in list1} merged_dict.update({d[key]: d for d in list2}) return list(merged_dict.values())"},{"question":"Write a python function to generate an Arithemetic Progression (AP) based on the starting number, the number of terms, and the common difference.","solution":"def arithmetic_progression(start, num_terms, common_diff): Generates an arithmetic progression (AP) based on the starting number, the number of terms, and the common difference. Parameters: start (int): The first term of the sequence. num_terms (int): The number of terms in the sequence. common_diff (int): The common difference between consecutive terms. Returns: list: A list containing the arithmetic progression. return [start + common_diff * i for i in range(num_terms)]"},{"question":"Write a python function to reverse a stack using recursion. You can use only one additional stack or no additional stack and you are allowed to use extra space on the recursion call stack.","solution":"def reverse_stack(stack): This function reverses the stack using recursion. if not stack: return # Pop the top element of the stack top = stack.pop() # Reverse the remaining stack reverse_stack(stack) # Insert the popped element at the bottom of the reversed stack insert_at_bottom(stack, top) def insert_at_bottom(stack, item): A helper function to insert an item at the bottom of a stack. if not stack: stack.append(item) else: top = stack.pop() insert_at_bottom(stack, item) stack.append(top)"},{"question":"Write a python function to compute the shortest path between a source vertex and all other vertices in an undirected graph where all edge weights are 1. The function should return a dictionary where the keys are the vertices and the values are the shortest distances from the source vertex.","solution":"from collections import deque, defaultdict def shortest_path_unweighted_graph(graph, source): Compute the shortest path between a source vertex and all other vertices in an undirected graph where all edge weights are 1. The function returns a dictionary where the keys are the vertices and the values are the shortest distances from the source vertex. :param graph: a dictionary representing the adjacency list of the undirected graph :param source: the source vertex :return: a dictionary with shortest distances from the source vertex to all other vertices distances = {vertex: float('inf') for vertex in graph} distances[source] = 0 queue = deque([source]) while queue: current_vertex = queue.popleft() for neighbor in graph[current_vertex]: if distances[neighbor] == float('inf'): distances[neighbor] = distances[current_vertex] + 1 queue.append(neighbor) return distances"},{"question":"Write a python function to remove all falsy values from a list.","solution":"def remove_falsy_values(lst): Removes all falsy values from the given list. Falsy values in Python include: False, None, 0, \\"\\", [], {}, and set(). Args: lst (list): The input list from which falsy values are to be removed. Returns: list: A new list with all falsy values removed. return [item for item in lst if item]"},{"question":"Write a python function to count the occurrences of each character in a string and return the result as a dictionary. The function should ignore case sensitivity by converting all characters to lowercase before counting.","solution":"def count_characters(s): Counts the occurrences of each character in the string and returns the result as a dictionary. Ignores case sensitivity. Parameters: s (str): The string to count characters in Returns: dict: A dictionary with characters as keys and their counts as values s = s.lower() # Convert the string to lowercase character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count"},{"question":"Write a python function to check if a list is a subset of another list.","solution":"def is_subset(list1, list2): Checks if list1 is a subset of list2. return all(item in list2 for item in list1)"},{"question":"Write a python function to evaluate an arithmetic expression given as a string. The expression consists of non-negative integers, '+', '-', '*', and '/' operators, and parentheses '(' and ')'. The evaluation should follow the standard arithmetic rules, including operator precedence and parentheses. You should dynamically determine the operator to be evaluated next by iterating through the string from left to right.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression string consisting of non-negative integers, '+', '-', '*', '/', and parentheses '()' according to standard arithmetic rules and operator precedence. import operator def higher_precedence(op1, op2): precedence = {'+': 1, '-': 1, '*': 2, '/': 2} return precedence[op1] > precedence[op2] def apply_operator(ops, values): op = ops.pop() right = values.pop() left = values.pop() operations = { '+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv } values.append(operations[op](left, right)) def evaluate(expression): ops = [] values = [] i = 0 while i < len(expression): if expression[i] == ' ': i += 1 continue if expression[i] == '(': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == ')': while ops and ops[-1] != '(': apply_operator(ops, values) ops.pop() else: while ops and ops[-1] in \\"+-*/\\" and higher_precedence(ops[-1], expression[i]): apply_operator(ops, values) ops.append(expression[i]) i += 1 while ops: apply_operator(ops, values) return values[0] return evaluate(expression)"},{"question":"Write a python function to check if the given string is a palindrome, ignore case sensitivity and spaces.","solution":"def is_palindrome(s): Checks if the given string is a palindrome, ignoring case sensitivity and spaces. # Remove spaces and convert to lower case cleaned = ''.join(c for c in s if c.isalnum()).lower() return cleaned == cleaned[::-1]"},{"question":"Write a python function to generate a list of the first 'n' multiples of a given number 'm'.","solution":"def multiples(n, m): Returns a list of the first 'n' multiples of a given number 'm'. Parameters: n (int): The number of multiples to generate. m (int): The number whose multiples are to be generated. Returns: list: A list of the first 'n' multiples of 'm'. return [m * i for i in range(1, n + 1)]"},{"question":"Write a python function to return the most frequent element in a list. If there is a tie, return all elements with the highest frequency. The list will contain at least one element.","solution":"from collections import Counter def most_frequent_elements(lst): Returns a list of the most frequent elements in the input list. If there's a tie, returns all elements with the highest frequency. Assumes the input list contains at least one element. freq_counter = Counter(lst) max_freq = max(freq_counter.values()) most_frequent = [elem for elem, count in freq_counter.items() if count == max_freq] return most_frequent"},{"question":"Write a python function to calculate the sum of all elements in a list. The function should be recursive.","solution":"def recursive_sum(lst): Recursively calculates the sum of all elements in a list. :param lst: List of numbers. :return: Sum of all elements in the list. if not lst: return 0 return lst[0] + recursive_sum(lst[1:])"},{"question":"Write a python function to determine the minimum number of coins needed to make up a given amount. You can use any type of coin, but you can only use each type once.","solution":"def min_coins(coins, amount): Determines the minimum number of coins needed to make up a given amount. Each coin type can only be used once. :param coins: List of coin denominations available. :param amount: The target amount. :return: Minimum number of coins needed to make up the given amount. If not possible, return -1. # Using dynamic programming to solve the problem dp = [float('inf')] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(amount, coin - 1, -1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to remove all characters from a string \`s\` that appear more than once. The order of the remaining characters should be the same as in the original string.","solution":"def remove_duplicates(s): Removes all characters from the string \`s\` that appear more than once. char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 result = ''.join([char for char in s if char_count[char] == 1]) return result"},{"question":"Write a python function to find the most occurring character in a string. If there's a tie, return all the characters that have the highest frequency. For example, given the string \\"hello world\\", the function should return {'l': 3} as 'l' appears the most.","solution":"from collections import Counter def most_occurring_characters(s): Returns a dictionary of the most occurring character(s) in the string 's' with their frequency. If there's a tie, return all the characters that have the highest frequency. if not s: return {} # Count the frequency of each character in the string counter = Counter(s) # Find the highest frequency max_frequency = max(counter.values()) # Find all characters with the highest frequency result = {char: freq for char, freq in counter.items() if freq == max_frequency} return result"},{"question":"Write a python function to sort an array and then solve a radix sort algorithm using bucket sort as a subroutine.","solution":"def bucket_sort(arr): Sorts an array using bucket sort algorithm. if len(arr) == 0: return arr # Determine minimum and maximum values min_value = min(arr) max_value = max(arr) # Number of buckets bucket_count = len(arr) buckets = [[] for _ in range(bucket_count)] # Distribute input array values into buckets for i in range(len(arr)): # Index in bucket index = int((arr[i] - min_value) / (max_value - min_value + 1) * bucket_count) buckets[index].append(arr[i]) # Sort individual buckets and concatenate the results for bucket in buckets: bucket.sort() sorted_array = [] for bucket in buckets: sorted_array.extend(bucket) return sorted_array def radix_sort(arr): Sorts an array using radix sort algorithm with bucket sort as subroutine. if len(arr) == 0: return arr # Get the maximum number to know the number of digits max_value = max(arr) exp = 1 # exponent and corresponds to the place (1s, 10s, 100s...) while max_value // exp > 0: arr = counting_sort_by_digit(arr, exp) exp *= 10 return arr def counting_sort_by_digit(arr, exp): n = len(arr) # Output array to store sorted numbers output = [0] * n # Count array to store occurrence of digits (0-9 for base 10 integers) count = [0] * 10 # Store occurrences in count[] for i in range(0, n): index = (arr[i] // exp) % 10 count[index] += 1 # Change count[i] so it contains the actual position of this digit in output[] for i in range(1, 10): count[i] += count[i - 1] # Build the output array for i in range(n - 1, -1, -1): index = (arr[i] // exp) % 10 output[count[index] - 1] = arr[i] count[index] -= 1 return output"},{"question":"Write a python function to find the number of pairs in an array that have a sum equal to a given value.","solution":"def count_pairs_with_sum(arr, target_sum): Returns the number of pairs in the array that have a sum equal to the target value. Parameters: arr (List[int]): List of integers. target_sum (int): The target sum for the pairs. Returns: int: Number of pairs with sum equal to the target value. count = 0 seen = {} for num in arr: difference = target_sum - num if difference in seen: count += seen[difference] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"Write a python function to find the second smallest number in an unsorted list. The function should handle cases where the list might have duplicates and return the second smallest unique number.","solution":"def second_smallest(lst): Returns the second smallest unique number in the list. If the list has fewer than 2 unique numbers, return None. unique_numbers = sorted(set(lst)) # Remove duplicates and sort if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"Write a python function to check if a given number is a power of 4.","solution":"def is_power_of_4(n): Returns True if n is a power of 4, False otherwise. if n <= 0: return False while n % 4 == 0: n //= 4 return n == 1"},{"question":"Write a python function to convert a given integer (in base 10) to its binary representation as a string where the string contains only '0' and '1'. Ensure the binary string does not include any leading zeros, except for the string \\"0\\".","solution":"def int_to_binary(n): Converts a given integer to its binary representation as a string. The string should not include any leading zeros, except for the string \\"0\\". Args: n (int): The integer to convert. Returns: str: The binary representation of the integer. if n == 0: return \\"0\\" return bin(n)[2:]"},{"question":"Write a python function to generate all possible subsets of a set and return them as a list of lists.","solution":"def generate_subsets(s): Returns all possible subsets of the set \`s\`. Parameters: s (set): The input set. Returns: list of lists: A list containing all subsets of the input set. subsets = [[]] for elem in s: subsets += [subset + [elem] for subset in subsets] return subsets"},{"question":"Write a python function to find the length of the longest substring without repeating characters in a given string \`s\`.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. if not s: return 0 char_map = {} start = max_length = 0 for i, char in enumerate(s): if char in char_map and start <= char_map[char]: start = char_map[char] + 1 else: max_length = max(max_length, i - start + 1) char_map[char] = i return max_length"},{"question":"Write a python function to get the element that appears the most number of times in a list.","solution":"from collections import Counter def most_frequent_element(lst): Returns the element that appears the most number of times in the list. If there are multiple elements with the same highest frequency, the first encountered element is returned. if not lst: raise ValueError(\\"The list is empty\\") counter = Counter(lst) most_common = counter.most_common(1) return most_common[0][0]"},{"question":"Write a python function to group words that are anagrams into a dictionary where the keys are the sorted strings of the anagrams.","solution":"def group_anagrams(words): Groups words that are anagrams into a dictionary where the keys are the sorted strings of the anagrams. anagrams_dict = {} for word in words: sorted_word = ''.join(sorted(word)) if sorted_word not in anagrams_dict: anagrams_dict[sorted_word] = [] anagrams_dict[sorted_word].append(word) return anagrams_dict"},{"question":"Write a python function to return the square of the input number.","solution":"def square(number): Returns the square of the input number. return number ** 2"},{"question":"Write a python function to calculate the binomial coefficient C(n, k) using dynamic programming. The binomial coefficient C(n, k) is the number of ways to choose k elements from a set of n elements without regard to the order of selection.","solution":"def binomial_coefficient(n, k): Returns the binomial coefficient C(n, k). if k > n or n < 0 or k < 0: return 0 if k == 0 or k == n: return 1 # Initialize a (n+1) x (k+1) table with zeros C = [[0 for x in range(k+1)] for y in range(n+1)] # Calculate value of Binomial Coefficient in bottom up manner for i in range(n+1): for j in range(min(i, k)+1): # Base Cases if j == 0 or j == i: C[i][j] = 1 # Calculate value using previously stored values else: C[i][j] = C[i-1][j-1] + C[i-1][j] return C[n][k]"},{"question":"Write a python function to remove all the even numbers in a list and return the new list.","solution":"def remove_even_numbers(lst): Removes all even numbers from a list and returns the new list. Parameters: lst (list): A list of integers. Returns: list: A new list with all even numbers removed. return [num for num in lst if num % 2 != 0]"},{"question":"Write a python function to find the next greater element to the left for all elements in the input array and return the corresponding values in a list. If there is no greater element to the left, return -1 for that position.","solution":"def next_greater_element_to_left(nums): Finds the next greater element to the left for each element in the nums list. If there is no greater element to the left, returns -1 for that position. Parameters: nums (list): List of integers. Returns: list: A list where the value at each index i is the next greater element to the left of nums[i], or -1 if no such element exists. result = [] stack = [] for num in nums: while stack and stack[-1] <= num: stack.pop() if stack: result.append(stack[-1]) else: result.append(-1) stack.append(num) return result"},{"question":"Write a python function to find the maximum number in a given list of integers, without using any built-in functions like max() or sort().","solution":"def find_maximum(numbers): Returns the maximum number from a list of integers. if not numbers: raise ValueError(\\"The list is empty.\\") max_number = numbers[0] for number in numbers[1:]: if number > max_number: max_number = number return max_number"},{"question":"Write a python function to generate all unique combinations of k numbers chosen from 1 to n, where 1 ≤ k ≤ n.","solution":"from itertools import combinations def combine(n, k): Returns all unique combinations of k numbers chosen from 1 to n. if k > n or k < 1 or n < 1: return [] return list(combinations(range(1, n+1), k))"},{"question":"Write a python function to find all the pairs of numbers in a list that add up to a specific target sum. The function should return a list of tuples, where each tuple contains a pair of numbers that satisfy the condition.","solution":"def find_pairs_with_sum(numbers, target_sum): Returns a list of tuples where each tuple contains pairs of numbers that add up to the target sum. pairs = [] seen = set() for number in numbers: complement = target_sum - number if complement in seen: pairs.append((complement, number)) seen.add(number) return pairs"},{"question":"Write a python function to find the biggest difference between an element and its left neighbor in a sequence.","solution":"def biggest_difference(sequence): Returns the biggest difference between an element and its left neighbor in the sequence. if not sequence or len(sequence) < 2: return 0 max_difference = float('-inf') for i in range(1, len(sequence)): difference = sequence[i] - sequence[i - 1] if difference > max_difference: max_difference = difference return max_difference"},{"question":"Write a python function to extract and return the inner HTML of a specified element from a given HTML string. If the element with the specified ID does not exist, the function should return an empty string. The function should handle nested elements and style attributes properly. The result should be clean HTML string without the tags.","solution":"from bs4 import BeautifulSoup def extract_inner_html(html_str, element_id): Extract and return the inner HTML of a specified element with the given ID from the HTML string. If the element does not exist, returns an empty string. Args: html_str (str): The HTML string. element_id (str): The ID of the element to extract inner HTML from. Returns: str: Inner HTML of the specified element or empty string if element does not exist. soup = BeautifulSoup(html_str, 'html.parser') element = soup.find(id=element_id) return \\"\\".join(str(child) for child in element.contents) if element else \\"\\""},{"question":"Write a python function to generate all unique permutations of a given list of numbers. The function should handle lists of varying lengths and return a list of lists, where each inner list is a unique permutation. The function also should avoid generating duplicates permutations.","solution":"from itertools import permutations def unique_permutations(nums): Generates all unique permutations of a given list of numbers. Args: nums: A list of numbers. Returns: A list of lists, where each inner list is a unique permutation of the input list. # Using set to avoid duplicates unique_perms = set(permutations(nums)) return [list(perm) for perm in unique_perms]"},{"question":"Write a python function to create and print multiplication tables for any given number within the range 1 to 10. The function should also accept two additional parameters, \`start_row\` and \`end_row\`, which define the range of rows to print (inclusive). If \`start_row\` or \`end_row\` are outside the valid range (1 to 10), they should be adjusted to be within this range.","solution":"def print_multiplication_table(number, start_row=1, end_row=10): Prints the multiplication table for a given number within the range 1 to 10. The printed rows of the table are defined by start_row and end_row (inclusive). If start_row or end_row are outside the valid range (1 to 10), they are adjusted to be within this range. start_row = max(1, min(10, start_row)) end_row = max(1, min(10, end_row)) if start_row > end_row: start_row, end_row = end_row, start_row for i in range(start_row, end_row + 1): print(f\\"{number} x {i} = {number * i}\\")"},{"question":"Write a python function to find the longest palindromic substring in the given string. The string may contain digits, letters, and other special characters.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] if s == \\"\\" or len(s) == 1: return s longest = \\"\\" for i in range(len(s)): # Odd length palindromes substr1 = expand_around_center(s, i, i) # Even length palindromes substr2 = expand_around_center(s, i, i+1) if len(substr1) > len(longest): longest = substr1 if len(substr2) > len(longest): longest = substr2 return longest"},{"question":"Write a python function to find the nth number in the Fibonacci sequence, where n is a non-negative integer. The function should be efficient and use memoization to avoid redundant calculations.","solution":"def fibonacci(n, memo=None): Returns the nth number in the Fibonacci sequence using memoization. Parameters: n (int): The position in the Fibonacci sequence. memo (dict): A dictionary to store previously computed results. Returns: int: The nth Fibonacci number. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to find the minimum element in an array using the divide and conquer approach.","solution":"def find_minimum(arr, low, high): Finds the minimum element in an array using divide and conquer approach. :param arr: List of integers :param low: Starting index of the segment to be considered :param high: Ending index of the segment to be considered :return: The minimum element in the segment of the array # If there's only one element if low == high: return arr[low] # If there are two elements if high == low + 1: if arr[low] < arr[high]: return arr[low] else: return arr[high] # For more than two elements mid = (low + high) // 2 return min(find_minimum(arr, low, mid), find_minimum(arr, mid + 1, high))"},{"question":"Write a python function to find the maximum element in a 2D lists (a list of lists).","solution":"def find_max_in_2d_list(lst): Find the maximum element in a 2D list (list of lists). Parameters: lst (list of lists of int/float): 2D list to search in. Returns: int/float: The maximum element found in the 2D list. if not lst or not any(lst): # Check for empty list or list with empty sublists return None max_element = float('-inf') for sublist in lst: for item in sublist: if item > max_element: max_element = item return max_element"},{"question":"Write a python function to convert a given number into the corresponding binary representation, but only considering the least significant 4 bits of the input number. You can assume the input number will be a non-negative integer.","solution":"def least_significant_4_bits_binary(num): Convert a given number into the corresponding binary representation, but only considering the least significant 4 bits of the input number. Args: num (int): A non-negative integer. Returns: str: A string representing the binary form of the least significant 4 bits. return format(num & 0b1111, '04b')"},{"question":"Write a python function to print the odd numbers from 1 to 100. How can we optimize this function? Please provide performance-related insights.","solution":"def print_odd_numbers(): Prints all odd numbers from 1 to 100. for number in range(1, 101, 2): print(number) # Optimization insights: # 1. Instead of iterating through all numbers from 1 to 100 and checking if they are odd, # we can directly use the step parameter of the range function to iterate only through odd numbers. # This will reduce the unnecessary checks and streamline the loop execution. # 2. The loop starts at 1 and increments by 2 on each iteration, ensuring every number printed is odd. # This approach minimizes the total number of iterations and condition checks."},{"question":"Write a python function to find the count of unique characters in a string. For example, given the string \\"mississippi\\", the function should return 4 because there are 4 unique characters: 'm', 'i', 's', and 'p'.","solution":"def count_unique_characters(s): Returns the count of unique characters in the string s. return len(set(s))"},{"question":"Write a python function to find and print the top N numbers from a given list that are divisible by a given number 'k'. The function should also handle cases where some numbers in the list are not integers.","solution":"def find_top_n_divisible(numbers, k, n): Finds and returns the top N numbers from the given list that are divisible by the given number k. Args: numbers (list): List of numbers. k (int): The divisor. n (int): The number of top divisible numbers to return. Returns: list: Top N numbers from the list that are divisible by k. If there are less than N numbers divisible by k, return all such numbers. if not isinstance(k, int) or not isinstance(n, int): raise ValueError(\\"k and n must be integers\\") # Filter out non-integer values and find numbers divisible by k divisible_numbers = [num for num in numbers if isinstance(num, int) and num % k == 0] # Sort the divisible numbers in descending order divisible_numbers.sort(reverse=True) # Return the top N numbers return divisible_numbers[:n]"},{"question":"Write a python function to return the first and last element of a given list.","solution":"def first_and_last(lst): Returns a tuple containing the first and last element of lst. If the list is empty, returns (None, None). If the list has one element, returns a tuple with the same element twice. if not lst: return (None, None) return (lst[0], lst[-1])"},{"question":"Write a python function to check whether the given string \`a\` is a.substring of \`b\` or not. If \`a\` is a substring, return \`True\`, otherwise return \`False\`. The function has to be named \`check_substring\`.","solution":"def check_substring(a, b): Returns True if string \`a\` is a substring of string \`b\`, otherwise returns False. return a in b"},{"question":"Write a python function to find the largest number in a list. How can you optimize the function to minimize the number of comparisons?","solution":"def find_largest_number(numbers): Returns the largest number in a list. This function is optimized to minimize the number of comparisons. if not numbers: raise ValueError(\\"The list is empty\\") largest = numbers[0] # Initialize the largest number with the first element for number in numbers[1:]: if number > largest: largest = number return largest"},{"question":"Write a python function to generate all permutations of a string \`s\`.","solution":"from itertools import permutations def generate_permutations(s): Generates all permutations of the string \`s\`. return [''.join(p) for p in permutations(s)]"},{"question":"Write a python function to format a phone number. The function should take a string as input, which is the phone number in any format and convert it into a standard US phone number format (XXX-XXX-XXXX). Assume that the input string will contain only digits (0-9) and possibly spaces or dashes.","solution":"def format_phone_number(phone): Formats a given phone number string into the standard US phone number format (XXX-XXX-XXXX). Args: - phone (str): The phone number in any format containing only digits, spaces or dashes. Returns: - str: Formatted phone number in the form (XXX-XXX-XXXX). # Removing any spaces or dashes from the input clean_phone = ''.join(c for c in phone if c.isdigit()) # Formatting into (XXX-XXX-XXXX) formatted_phone = f\\"{clean_phone[:3]}-{clean_phone[3:6]}-{clean_phone[6:10]}\\" return formatted_phone"},{"question":"Write a python function to calculate the factorial of a number \`n\`. The factorial of a non-negative integer \`n\` is the product of all positive integers less than or equal to \`n\`. The factorial of 0 is 1, by definition.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. The factorial of n (denoted as n!) is the product of all positive integers less than or equal to n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to generate all Possible Substrings of a String.","solution":"def generate_substrings(s): Generate all possible substrings of a given string. Parameters: s (str): The input string. Returns: List[str]: A list containing all possible substrings of the input string. substrings = [] length = len(s) for i in range(length): for j in range(i + 1, length + 1): substrings.append(s[i:j]) return substrings"},{"question":"Write a python function to find the minimum element in a binary search tree (BST) without using recursion. You are provided with a class \`TreeNode\` which defines the structure of a node in the BST.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def find_minimum_iterative(root): Finds the minimum element in a binary search tree without using recursion. :param root: TreeNode, the root of the binary search tree :return: TreeNode, the node with the minimum value in the binary search tree if root is None: return None current = root while current.left is not None: current = current.left return current"},{"question":"Write a python function to count the number of words in a given text. You should split the text into words by spaces and count the number of words.","solution":"def count_words(text): Counts the number of words in a given text. Words are separated by spaces. Parameters: text (str): The input text. Returns: int: The number of words in the text. return len(text.split())"},{"question":"Write a python function to merge two sorted lists in ascending order. For example, if \`list1 = [1, 3, 5]\` and \`list2 = [2, 4, 6]\`, the function should return \`[1, 2, 3, 4, 5, 6]\`.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists in ascending order. :param list1: First sorted list :param list2: Second sorted list :return: A new list containing all elements from both lists in ascending order merged_list = [] i, j = 0, 0 # Compare elements from both lists and append the smaller element to the merged list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to convert a number from decimal to binary, and also return the binary number as an integer.","solution":"def decimal_to_binary(num): Converts a decimal number to its binary representation and returns it as an integer. Parameters: num (int): The decimal number to be converted. Returns: str: The binary representation of the number as a string. int: The binary representation of the number as an integer. binary_str = bin(num)[2:] # Getting the binary string without '0b' prefix binary_int = int(binary_str) return binary_str, binary_int"},{"question":"Write a python function to solve this problem: \\"Given a string s and an integer k, find the length of the longest substring of s, where the difference between the maximum and minimum value of its digits is at most k.\\"","solution":"def longest_substring_with_digit_diff_k(s, k): def is_valid(substring, k): digits = [int(ch) for ch in substring] return max(digits) - min(digits) <= k n = len(s) max_len = 0 for i in range(n): for j in range(i, n): if is_valid(s[i:j + 1], k): max_len = max(max_len, j - i + 1) return max_len"},{"question":"Write a python function to calculate the sum of all even numbers up to n. The function should take an integer n as an input and return the sum of all even numbers from 0 to n (inclusive). If n is less than 0, the function should return None. Use a for loop to implement this functionality.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 0 to n (inclusive). If n is less than 0, returns None. if n < 0: return None total = 0 for i in range(0, n + 1): if i % 2 == 0: total += i return total"},{"question":"Write a python function to find the most common element in a list of numbers. If there are multiple elements with the same highest count, return all of them in a list.","solution":"from collections import Counter def most_common_element(numbers): Returns a list of the most common elements in the list of numbers. If there are multiple elements with the same highest count, return all of them in a list. if not numbers: return [] count = Counter(numbers) max_count = max(count.values()) most_common = [num for num, cnt in count.items() if cnt == max_count] return most_common"},{"question":"Write a python function to generate all subsets of a given set of distinct integers nums and return them in any order.","solution":"def subsets(nums): Generates all subsets of a given set of distinct integers. :param nums: List of distinct integers :return: List of all subsets (each subset is a list of integers) def backtrack(start, path): res.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) res = [] backtrack(0, []) return res"},{"question":"Write a python function to reverse every 'k' elements in a given list. If there are less than 'k' elements left in the list, reverse the remaining elements. If 'k' is less or equal to 0, return the list as is.","solution":"def reverse_k_elements(lst, k): if k <= 0: return lst length = len(lst) for i in range(0, length, k): lst[i:i+k] = lst[i:i+k][::-1] return lst"},{"question":"Write a python function to find the first n Fibonacci numbers using list comprehension.","solution":"def fibonacci(n): Returns the first n Fibonacci numbers. if n <= 0: return [] fibs = [0, 1] [fibs.append(fibs[-1] + fibs[-2]) for _ in range(2, n)] return fibs[:n]"},{"question":"Write a python function to calculate the area of a triangle given its vertices (x1, y1), (x2, y2), and (x3, y3). How would you approach this problem?","solution":"def calculate_triangle_area(x1, y1, x2, y2, x3, y3): Calculate the area of a triangle given its vertices (x1, y1), (x2, y2), and (x3, y3). Parameters: x1, y1: Coordinates of the first vertex x2, y2: Coordinates of the second vertex x3, y3: Coordinates of the third vertex Returns: float: Area of the triangle return 0.5 * abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2))"},{"question":"Write a python function to merge two lists and return the merged list in descending order.","solution":"def merge_and_sort_descending(list1, list2): Merges two lists and returns the merged list in descending order. Parameters: - list1: First list to be merged - list2: Second list to be merged Returns: - A merged list sorted in descending order merged_list = list1 + list2 return sorted(merged_list, reverse=True)"},{"question":"Write a python function to convert a binary number (represented as a string) to its equivalent decimal number using stacks. The function should handle binary numbers of arbitrary length.","solution":"def binary_to_decimal(binary_str): Convert a binary number (as a string) to its equivalent decimal number using a stack. stack = list(binary_str) # Using list as stack decimal_value = 0 power = 0 while stack: bit = stack.pop() # Pop from stack decimal_value += int(bit) * (2 ** power) power += 1 return decimal_value"},{"question":"Write a python function to create a new list containing only even numbers from a given list.","solution":"def filter_even_numbers(numbers): Returns a new list containing only the even numbers from the given list. Parameters: numbers (list): A list of integers. Returns: list: A list containing only even integers from the input list. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a python function to find the all the fibonacci numbers in a list. Please make sure to handle edge cases properly, like if the list is empty or contains no fibonacci numbers.","solution":"def is_fibonacci(n): if n < 0: return False if n == 0 or n == 1: return True a, b = 0, 1 while b < n: a, b = b, a + b return b == n def find_fibonacci_in_list(nums): Finds all Fibonacci numbers in the given list. Parameters: nums (list): List of integers to check for Fibonacci numbers. Returns: list: A list containing all Fibonacci numbers from the input list (if any). Returns an empty list if no Fibonacci numbers are found or if the input list is empty. return [num for num in nums if is_fibonacci(num)]"},{"question":"Write a python function to reverse a number and then print the reversed number.","solution":"def reverse_number(number): Reverses the digits of the given number and returns the reversed number. If the number is negative, the sign is retained in the reversed number. negative = number < 0 reversed_number = int(str(abs(number))[::-1]) return -reversed_number if negative else reversed_number"},{"question":"Write a python function to iteratively remove all duplicates from a given linked list maintaining the order of nodes.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def remove_duplicates_from_linked_list(head): Removes duplicates from the linked list while maintaining the order. if head is None: return None current = head seen = set() prev = None while current is not None: if current.value in seen: prev.next = current.next # Remove duplicate else: seen.add(current.value) prev = current current = current.next return head"},{"question":"Write a python function to return the difference between the largest and smallest number in a list. If the list is empty or None, return 0.","solution":"def difference_between_max_and_min(numbers): Returns the difference between the largest and smallest number in the list 'numbers'. If the list is empty or None, returns 0. if not numbers: return 0 return max(numbers) - min(numbers)"},{"question":"Write a python function to reverse a given string by preserving the position of all special characters.","solution":"def reverse_string_preserve_special(s): Reverse a given string by preserving the position of all special characters. # Extract only the alphabetic characters. chars = [c for c in s if c.isalnum()] # Reverse the list of alphabetic characters. chars.reverse() # Create an iterator from the reversed list. chars_iter = iter(chars) # Generate the resulting string with preserved special character positions. result = [next(chars_iter) if c.isalnum() else c for c in s] return ''.join(result)"},{"question":"Write a python function to find the maximum profit from buying and selling a stock given a list of daily prices. You should only be able to complete at most one transaction (i.e., buy one and sell one share of the stock). If no profit can be made, return 0.","solution":"def max_profit(prices): Calculate the maximum profit from a list of stock prices where you can only complete at most one transaction. :param prices: List of daily stock prices :return: Maximum profit achievable if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to find and return the longest word in a given string. If there are multiple words with the same maximum length, return the first such word that appears.","solution":"def longest_word(string): Returns the longest word in a given string. In case of a tie, returns the first word with the maximum length. words = string.split() if not words: return \\"\\" longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"Write a python function to calculate the area of a triangle given the lengths of its sides a, b, and c. The function should also validate if the input lengths can form a valid triangle. If they can form a valid triangle, calculate and return the area; otherwise, return an appropriate error message.","solution":"import math def triangle_area(a, b, c): Returns the area of a triangle given the lengths of its sides a, b, and c. Validates if the input lengths can form a triangle. If not, returns an error message. # Check for the triangle inequality theorem if a + b <= c or b + c <= a or c + a <= b: return \\"Invalid triangle sides.\\" # Using Heron's formula to calculate the area of a triangle s = (a + b + c) / 2 # Semi-perimeter area = math.sqrt(s * (s - a) * (s - b) * (s - c)) # Area calculation return area"},{"question":"Write a python function to convert a given string to an integer. If the string is not convertible to an integer, the function should handle the exception and return -1. Additionally, you should handle the case where the string is empty.","solution":"def string_to_integer(s): Converts a given string to an integer. If the string is not convertible, returns -1. Parameters: s (str): The string to convert. Returns: int: The converted integer or -1 if the string cannot be converted. try: return int(s) except (ValueError, TypeError): return -1"},{"question":"Write a python function to loop through a list of integers and count the number of odd numbers.","solution":"def count_odd_numbers(numbers): Returns the count of odd numbers in the given list of integers. count = 0 for number in numbers: if number % 2 != 0: count += 1 return count"},{"question":"Write a python function to implement LRU Cache. A cache is used to store data so future requests for that data can be served faster. It can hold a fixed number of entries and evicts the least recently used entry when full.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with given capacity. self.capacity = capacity self.cache = OrderedDict() def get(self, key: int): Return the value of the key if the key exists, otherwise return -1. if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int): Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the cache grows beyond the capacity, evict the least recently used item. if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"Write a python function to check whether the input password is valid or not. The password is considered valid if it contains at least one uppercase letter, one lowercase letter, one digit, and one special character, and its length is at least 8 characters.","solution":"def is_valid_password(password): Checks whether the input password is valid or not. A valid password should: - Contain at least one uppercase letter - Contain at least one lowercase letter - Contain at least one digit - Contain at least one special character - Be at least 8 characters long :param password: str :return: bool if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"!@#%^&*()-_+=<>?/|}{~:;\\" for char in password) return has_upper and has_lower and has_digit and has_special"},{"question":"Write a python function to remove duplicates from a list and return the new list. The function should not use any additional data structures.","solution":"def remove_duplicates(lst): Removes duplicates from a list and returns the new list. No additional data structures are used. i = 0 while i < len(lst): j = i + 1 while j < len(lst): if lst[i] == lst[j]: lst.pop(j) else: j += 1 i += 1 return lst"},{"question":"Write a python function to generate all prime numbers less than a given number n.","solution":"def generate_primes(n): Generate all prime numbers less than a given number n. if n <= 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers. p = 2 while p * p < n: if is_prime[p]: for multiples in range(p * p, n, p): is_prime[multiples] = False p += 1 return [num for num in range(2, n) if is_prime[num]]"},{"question":"Write a python function to return the count of distinct pairs in an array where the sum of each pair equals a specific target number.","solution":"def count_pairs_with_sum(arr, target): Returns the count of distinct pairs (i, j) where arr[i] + arr[j] == target. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Write a python function to find the maximum number in an unsorted array of integers.","solution":"def find_maximum(arr): Returns the maximum number in an unsorted array of integers. if not arr: raise ValueError(\\"Array is empty\\") max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num"},{"question":"Write a python function to find the maximum sum of a subarray within an array containing both positive and negative numbers.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a subarray within an array containing both positive and negative numbers using Kadane's Algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to print odd numbers between 1 to 1000 and count the number of odd numbers.","solution":"def print_and_count_odds(): Prints odd numbers between 1 and 1000 and returns the count of odd numbers. odd_count = 0 for number in range(1, 1001): if number % 2 != 0: print(number) odd_count += 1 return odd_count"},{"question":"Write a python function to calculate the height of a binary tree.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def height_of_binary_tree(root): Returns the height of the binary tree. if root is None: return 0 left_height = height_of_binary_tree(root.left) right_height = height_of_binary_tree(root.right) return max(left_height, right_height) + 1"},{"question":"Write a python function to get the nth fibonacci number. The function should be recursive and then create a test script to run it.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a recursive approach. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to find the minimum number of swaps required to sort an array. You can swap any two elements of the array in a single swap, and you want to minimize the total number of swaps.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arrpos = [*enumerate(arr)] arrpos.sort(key=lambda it: it[1]) # Sort the array by the array values visited = {k: False for k in range(n)} swaps = 0 for i in range(n): # If the element is already in the right position or has been visited if visited[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: # Mark the node as visited visited[j] = True # Move to the next node j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Write a python function to find the maximum difference between consecutive numbers in a list of integers.","solution":"def max_difference(nums): Returns the maximum difference between consecutive numbers in a list of integers. if len(nums) < 2: return 0 max_diff = 0 for i in range(1, len(nums)): diff = abs(nums[i] - nums[i-1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"Write a python function to detect single-cycle and multi-cycle conflicts.","solution":"def detect_conflicts(instructions): Detects single-cycle and multi-cycle conflicts in given instructions. Parameters: instructions (list of dicts): List of instructions, where each instruction is a dictionary with 'name', 'start_cycle', and 'duration' keys. Returns: tuple: (single_cycle_conflict, multi_cycle_conflict) single_cycle_conflict (bool): True if there is any single-cycle conflict, False otherwise. multi_cycle_conflict (bool): True if there is any multi-cycle conflict, False otherwise. single_cycle_conflict = False multi_cycle_conflict = False for i in range(len(instructions)): for j in range(i + 1, len(instructions)): start_i, duration_i = instructions[i]['start_cycle'], instructions[i]['duration'] start_j, duration_j = instructions[j]['start_cycle'], instructions[j]['duration'] # Single cycle conflict detection if start_i == start_j: single_cycle_conflict = True # Multi cycle conflict detection end_i = start_i + duration_i - 1 end_j = start_j + duration_j - 1 if (start_i <= end_j and start_j <= end_i): multi_cycle_conflict = True return single_cycle_conflict, multi_cycle_conflict"},{"question":"Write a python function to add the contents of two input files to a third file in the same directory. If the files are not in the same directory, specify the path in your function.","solution":"import os def concatenate_files(file1_path, file2_path, output_file_path): Concatenates the contents of file1 and file2 and writes the result to output_file. Parameters: file1_path (str): path to the first input file file2_path (str): path to the second input file output_file_path (str): path to the output file try: with open(file1_path, 'r') as file1, open(file2_path, 'r') as file2, open(output_file_path, 'w') as output_file: output_file.write(file1.read()) output_file.write(file2.read()) except FileNotFoundError as e: raise e"},{"question":"Write a python function to find the maximum sum of a subarray within a given array. This is known as Kadane's Algorithm. Additionally, provide a brief explanation of Kadane's Algorithm in your answer.","solution":"def max_subarray_sum(arr): Implements Kadane's Algorithm to find the maximum sum of a subarray within a given array. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global # Brief Explanation: # Kadane's Algorithm is used to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. # The algorithm iterates through the array, keeping track of the current maximum sum of the subarray ending at the current position. # It updates the global maximum sum whenever it finds a new maximum."},{"question":"Write a python function to calculate the square root of a given number using the bisection method. The bisection method is a root-finding method that repeatedly bisects an interval and then selects a subinterval in which a root must lie for further processing.","solution":"def bisection_sqrt(number, tolerance=1e-7): Calculate the square root of a given number using the bisection method. Args: number (float): The number to find the square root of. tolerance (float): The tolerance level for the approximation. Returns: float: The approximate square root of the number. if number < 0: raise ValueError(\\"Cannot compute the square root of a negative number.\\") if number == 0: return 0.0 lower_bound = 0 upper_bound = max(1, number) midpoint = (lower_bound + upper_bound) / 2.0 while abs(midpoint**2 - number) > tolerance: if midpoint**2 < number: lower_bound = midpoint else: upper_bound = midpoint midpoint = (lower_bound + upper_bound) / 2.0 return midpoint"},{"question":"Write a python function to extract all prime numbers from a given list of integers and return the list of prime numbers. The function should be named \`findPrimes\` and it should take one parameter: \`nums\` (a list of integers).","solution":"def findPrimes(nums): Returns a list of prime numbers from the given list of integers. Parameters: nums (list): A list of integers. Returns: list: A list containing the prime numbers from the given list. def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True return [num for num in nums if is_prime(num)]"},{"question":"Write a python function to calculate the sum of all prime numbers between 1 and 100.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_primes(): Returns the sum of all prime numbers between 1 and 100. return sum(n for n in range(1, 101) if is_prime(n))"},{"question":"Write a python function to reverse the order of characters in a given string and then convert all characters to uppercase. Here is an example string: \\"Hello, World!\\"","solution":"def reverse_and_uppercase(string): Reverses the order of characters in the given string and converts all characters to uppercase. Args: string (str): The input string to be transformed. Returns: str: The transformed string with characters reversed and in uppercase. return string[::-1].upper()"},{"question":"Write a python function to calculate the number of pairs (i, j) in a given list A, such that \`A[i] xor A[j] <= B\`. Here, \`xor\` is the bitwise XOR operation, and \`B\` is a given positive integer. The function should take in two parameters: a list of non-negative integers \`A\` and an integer \`B\`. The function should return the total number of valid pairs. Additionally, your function should be optimized for large lists and constraints in terms of performance.","solution":"def count_xor_pairs(A, B): Returns the number of pairs (i, j) such that A[i] xor A[j] <= B. :param A: List of non-negative integers. :param B: A positive integer. :return: The number of valid pairs. count = 0 n = len(A) for i in range(n): for j in range(i + 1, n): if (A[i] ^ A[j]) <= B: count += 1 return count"},{"question":"Write a python function to calculate the sum of all the digits in the binary representation of a given decimal number.","solution":"def sum_of_binary_digits(n): Returns the sum of all the digits in the binary representation of a given decimal number. :param n: Integer, the given decimal number. :return: Integer, the sum of all the digits in the binary representation of n. binary_repr = bin(n)[2:] # Get the binary representation of the number return sum(int(digit) for digit in binary_repr)"},{"question":"Write a python function to count up to a given positive integer \`n\`, and return a list of the squares of each number from 1 to \`n\`.","solution":"def count_squares(n): Returns a list of squares of each number from 1 to n. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") return [i**2 for i in range(1, n+1)]"},{"question":"Write a python function to check if a given URL is valid.","solution":"import re def is_valid_url(url): Checks if the given URL is valid. Parameters: url (str): The URL to check Returns: bool: True if the URL is valid, False otherwise url_pattern = re.compile( r'^(https?|ftp)://' # protocol r'((([A-Za-z0-9-]+.)+[A-Za-z]{2,})|' # domain name r'localhost|' # localhost r'(d{1,3}.){3}d{1,3})' # or ipv4 r'(:d+)?' # optional port r'(/[-A-Za-z0-9@:%_+.~#?&//=]*)?' # resource path r'(?[;&a-zd%_.~+=-]*)?' # query string r'(#[-a-zd_]*)?', re.IGNORECASE) # fragment locator return re.match(url_pattern, url) is not None"},{"question":"Write a python function to calculate the factorial of a number递归实现","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to find the sum of element at each corresponding position in two lists. If one list is longer than the other, append the missing elements with a default value (0).","solution":"def sum_corresponding_elements(list1, list2, default_value=0): Finds the sum of elements at each corresponding position in two lists. If one list is longer than the other, append the missing elements with a default value. Args: list1: First list of numbers. list2: Second list of numbers. default_value: Value to append for missing elements. Default is 0. Returns: A new list containing the sum of corresponding elements. max_len = max(len(list1), len(list2)) result = [] for i in range(max_len): elem1 = list1[i] if i < len(list1) else default_value elem2 = list2[i] if i < len(list2) else default_value result.append(elem1 + elem2) return result"},{"question":"Write a python function to solve the 0/1 Knapsack problem using dynamic programming. The function should take a list of item weights, a list of item values, and the capacity of the knapsack as input, and return the maximum value that can be obtained by either including or excluding each item for the current weight limit.","solution":"def knapsack(weights, values, capacity): Solves the 0/1 Knapsack problem using dynamic programming. Parameters: - weights: List of weights of items. - values: List of values of items. - capacity: Capacity of the knapsack. Returns: The maximum value that can be obtained without exceeding the capacity. n = len(weights) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): for w in range(1, capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Write a python function to identify and return the longest subsequence in a given string that is a palindrome. A palindromic subsequence is a sequence that reads the same backward as forward. If there are multiple subsequences of the maximum length, return any one of them.","solution":"def longest_palindrome_subsequence(s): Returns the longest palindromic subsequence in the given string s. n = len(s) if n == 0: return \\"\\" dp = [[0] * n for _ in range(n)] # Single letter palindromes for i in range(n): dp[i][i] = 1 # Build the DP table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) # Reconstruct the palindrome sequence i, j = 0, n - 1 result = [''] * dp[0][n-1] left, right = 0, len(result) - 1 while i <= j: if s[i] == s[j]: result[left] = s[i] result[right] = s[j] left += 1 right -= 1 i += 1 j -= 1 elif dp[i+1][j] > dp[i][j-1]: i += 1 else: j -= 1 return ''.join(result)"},{"question":"Write a python function to find the top \`k\` largest numbers in an array \`nums\` and return them sorted in descending order.","solution":"def top_k_largest(nums, k): Returns the top k largest numbers in the list \`nums\` sorted in descending order. :param nums: List of numbers. :param k: Number of top largest elements to return. :return: List of top k largest numbers sorted in descending order. if k <= 0: return [] sorted_nums = sorted(nums, reverse=True) return sorted_nums[:k]"},{"question":"Write a python function to print BFS (Breadth First Traversal) of a graph.","solution":"from collections import deque, defaultdict def bfs_traversal(graph, start_vertex): Perform BFS (Breadth First Search) traversal of a graph from a starting vertex. :param graph: Dictionary representing the graph where keys are vertex numbers and values are lists of adjacent vertices. :param start_vertex: The starting vertex for the BFS traversal. :return: List of vertices in the order they are visited in BFS. visited = set() queue = deque([start_vertex]) bfs_order = [] while queue: vertex = queue.popleft() if vertex not in visited: visited.add(vertex) bfs_order.append(vertex) # Enqueue all adjacent vertices that are not visited queue.extend(neighbor for neighbor in graph[vertex] if neighbor not in visited) return bfs_order"},{"question":"Write a python function to reverse a string. Implement your function without using Python's slicing syntax.","solution":"def reverse_string(s): Returns the reverse of the input string s. reversed_str = [] for char in s: reversed_str.insert(0, char) return ''.join(reversed_str)"},{"question":"Write a python function to find the maximum profit that can be achieved from buying and selling a stock multiple times (i.e., there is no cooldown period). Your function should take a list of integers priceList, where each element represents the stock price at a particular time. You should consider that you can only hold at most one stock at a time. For example, if the input list is [1, 3, 2, 10 ], the maximum profit is 9, which can be obtained by buying on day 0 and selling on day 1, then buying on day 2 and selling on day 3.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling a stock multiple times. if not prices or len(prices) < 2: return 0 total_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i-1]: total_profit += prices[i] - prices[i-1] return total_profit"},{"question":"Write a python function to find the most frequent words in a given list of words. Return the top k most frequent words.","solution":"from collections import Counter def top_k_frequent(words, k): Returns the top k most frequent words from the given list of words. count = Counter(words) most_common = count.most_common(k) return [word for word, _ in most_common]"},{"question":"Write a python function to find the largest rectangle under a histogram given the heights of the histogram's bars.","solution":"def largest_rectangle_area(heights): Function to find the largest rectangle under a histogram given the heights of the histogram's bars. :param heights: List[int], list of integers representing the heights of the histogram's bars. :return: int, the area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to check the validity of a given phone number in the format of \`+1 123 456 7890\`.","solution":"import re def is_valid_phone_number(phone_number): Check the validity of a given phone number in the format of \\"+1 123 456 7890\\". pattern = re.compile(r'^+1 d{3} d{3} d{4}') return bool(pattern.match(phone_number))"},{"question":"Write a python function to solve the 2-SUM problem: Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Write a python function to extract all occurrences of a specified substring within a given string. The function should return a list of start indices where the substring is found. If the substring is not found, return an empty list.","solution":"def find_substring_occurrences(main_string, substring): Returns a list of start indices where the substring is found in the main string. If the substring is not found, returns an empty list. :param main_string: The string where the occurrences of substring are to be found. :param substring: The substring to be found in the main string. :return: A list of starting indices where the substring is found. if not main_string or not substring: return [] indices = [] start = 0 while True: start = main_string.find(substring, start) if start == -1: break indices.append(start) start += 1 # move start position to avoid finding the same substring again return indices"},{"question":"Write a python function to check if a given string represents a valid binary number or not. The string should only contain '0's and '1's.","solution":"def is_binary_string(s): Returns True if the string s represents a valid binary number (contains only '0's and '1's), otherwise False. return all(char in '01' for char in s)"},{"question":"Write a python function to count the number of unique substrings of a given string. To illustrate your function, you should count unique substrings for a sample string, such as \\"abcabc\\".","solution":"def count_unique_substrings(s): Returns the count of unique substrings of the given string s. unique_substrings = set() # Iterate over all possible substrings and add them to the set for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings) # Sample usage sample_string = \\"abcabc\\" count = count_unique_substrings(sample_string) print(f\\"Number of unique substrings in '{sample_string}': {count}\\")"},{"question":"Write a python function to filter out all the prime numbers in a given list of integers. A prime number is a natural number greater than 1 and has no positive divisors other than 1 and itself.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Filters out all the prime numbers in the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to calculate the sum of all numbers in a given list. Write a function called sumList() that takes a list of numbers as an argument and returns the sum of all the numbers in the list. If the list is empty, the function should return 0.","solution":"def sumList(numbers): Returns the sum of all numbers in the given list. :param numbers: List of numbers :return: Sum of all numbers in the list, or 0 if the list is empty return sum(numbers)"},{"question":"Write a python function to remove all instances of a given value from a list. The function should return the length of the modified list. The function should not use any built-in list methods like \`remove()\`, \`pop()\`, \`delete()\`, etc. Instead, the function should shift elements to overwrite the removed elements.","solution":"def remove_value_from_list(nums, val): Removes all instances of val from the list nums by shifting elements. Returns the length of the modified list. index = 0 for i in range(len(nums)): if nums[i] != val: nums[index] = nums[i] index += 1 return index"},{"question":"Write a python function to find the maximum value in a given list of integers without using any built-in functions like max() and sorted(). Assume the list contains at least one integer.","solution":"def find_max_value(numbers): Returns the maximum value in a given list of integers. Parameters: numbers (list): List of integers Returns: int: The maximum integer in the list # Assume the list has at least one integer max_value = numbers[0] for number in numbers[1:]: if number > max_value: max_value = number return max_value"},{"question":"Write a python function to create a dictionary from a list of tuples.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary where each tuple becomes a key-value pair. If a key repeats, the last value in the tuples list for that key will be stored in the dictionary. :param tuples_list: List of tuples where each tuple contains exactly 2 elements - key and value. :return: Dictionary created from the list of tuples. return dict(tuples_list)"},{"question":"Write a python function to transform strings from snake_case to PascalCase.","solution":"def snake_to_pascal(snake_str): Transforms a string from snake_case to PascalCase. components = snake_str.split('_') return ''.join(x.title() for x in components)"},{"question":"Write a python function to display a menu of product prices and their names. The function should allow the user to select a product by entering the corresponding number. If the user enters the number, it should display the product name and its price. If the user enters 'q' or 'Q', it should exit the menu. If the user enters an invalid product number, it should prompt the user to enter a valid number. The function can handle a maximum of 10 products.","solution":"def display_menu(products): Displays a menu of product prices and their names. Allows the user to select a product by entering the corresponding number. If the user enters 'q' or 'Q', it exits the menu. If the user enters an invalid product number, it prompts to enter a valid number. Args: products (list of tuple): List of tuples where each tuple contains the product name and price. while True: print(\\"nMenu:\\") for idx, (name, price) in enumerate(products): print(f\\"{idx + 1}. {name} - {price:.2f}\\") choice = input(\\"Select a product number or enter 'q' to quit: \\").strip() if choice.lower() == 'q': print(\\"Exiting the menu.\\") break elif choice.isdigit() and 1 <= int(choice) <= len(products): idx = int(choice) - 1 print(f\\"You selected: {products[idx][0]} - {products[idx][1]:.2f}\\") else: print(\\"Invalid selection. Please enter a valid number.\\")"},{"question":"Write a python function to check if every row, column, and diagonal (both the main diagonal and the secondary diagonal) of a 3x3 matrix contains distinct elements. If every row, column, and diagonal has distinct elements, the function should return True; otherwise, it should return False.","solution":"def is_valid_3x3_matrix(matrix): Checks if every row, column, and diagonal of a 3x3 matrix contains distinct elements. Args: matrix (list of list of int): A 3x3 matrix. Returns: bool: True if every row, column, and diagonal contains distinct elements, otherwise False. # Check if matrix is 3x3 if len(matrix) != 3 or any(len(row) != 3 for row in matrix): return False # Helper function to check if all elements in the list are unique def all_unique(lst): return len(lst) == len(set(lst)) # Check rows and columns for i in range(3): if not all_unique(matrix[i]): # Check row return False if not all_unique([matrix[j][i] for j in range(3)]): # Check column return False # Check main diagonal if not all_unique([matrix[i][i] for i in range(3)]): return False # Check secondary diagonal if not all_unique([matrix[i][2-i] for i in range(3)]): return False return True"},{"question":"Write a python function to find the intersection of two arrays. The function should take two lists as input and return a list containing the common elements between the two lists.","solution":"def intersection(arr1, arr2): Returns a list containing the common elements between arr1 and arr2. return list(set(arr1) & set(arr2))"},{"question":"Write a python function to check if the Binary representation of a number contains a continuous sequence of 1s or not. For example, if we take the number 5, its binary representation is \\"101\\", and there is no continuous sequence of 1s. So, the function should return \`False\`. However, if we take the number 6, its binary representation is \\"110\\", and there is a continuous sequence of 1s. So, the function should return \`True\`.","solution":"def has_continuous_ones(n): Returns True if binary representation of n contains a continuous sequence of 1s, False otherwise. bin_representation = bin(n)[2:] # Get binary representation and remove '0b' prefix return '11' in bin_representation"},{"question":"Write a python function to return a string composed by repeating the original string \`n\` times.","solution":"def repeat_string(s, n): Returns a string composed by repeating the original string \`s\` \`n\` times. return s * n"},{"question":"Write a python function to find the sum of a series 1^p + 2^p + 3^p + ... + n^p","solution":"def series_sum(n, p): Find the sum of the series 1^p + 2^p + 3^p + ... + n^p. Parameters: n (int): The upper limit of the series. p (int): The exponent to which each number is raised. Returns: int: The sum of the series. return sum(i ** p for i in range(1, n + 1))"},{"question":"Write a python function to implement quick sort.","solution":"def quick_sort(arr): Sorts an array using the quicksort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to get the maximum value in a list of dictionaries. Each dictionary contains the keys 'name' and 'score'.","solution":"def get_max_score(dict_list): Returns the maximum score from a list of dictionaries. Each dictionary contains the keys 'name' and 'score'. Parameters: dict_list (list): List of dictionaries with keys 'name' and 'score' Returns: int: Maximum score found in the list of dictionaries. if not dict_list: return None return max([d['score'] for d in dict_list])"},{"question":"Write a python function to calculate the highest profit from a stock market. You will be given an array of prices where prices[i] is the price of a given stock on the ith day. You can only buy one stock and sell it later, and you cannot buy and sell on the same day. You should create a function that returns the maximum profit possible.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a list of stock prices. You can buy one stock and sell it later. You cannot buy and sell on the same day. :param prices: List[int], list of stock prices where prices[i] is the price of a given stock on the ith day. :return: int, the maximum profit possible. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to solve the problem of finding the number of ways to solve the Nim game. In this game, there are several piles of stones. Players take turns removing any number of stones from any one pile. The player who removes the last stone wins. The game starts with \`n\` stones in a single pile, and two players take turns removing stones. The first player to remove the last stone loses. Given \`n\` stones, determine the number of ways the first player can win if both players play optimally.","solution":"def nim_game_ways(n): Determine the number of ways the first player can win in a Nim game with a single pile of n stones where the first player to remove the last stone loses. Args: n (int): The number of stones in the single pile. Returns: int: The number of ways the first player can win. # Since the first player loses if they take the last stone, they need an odd number of stones to win. if n % 2 == 1: return n // 2 # If n is even, the first player loses. else: return 0"},{"question":"Write a python function to generate prime numbers up to a given limit. The function should print all the prime numbers up to that limit. The function should take an integer as input and should print the prime numbers up to that integer.","solution":"def generate_primes(limit): Generate a list of prime numbers up to the given limit. Parameters: limit (int): The upper limit (inclusive) to generate prime numbers. Returns: List[int]: A list of prime numbers up to the given limit. if limit < 2: return [] primes = [] for num in range(2, limit + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to print all elements of a list using recursion.","solution":"def print_list_recursive(lst, index=0): Prints all elements of a list using recursion. Parameters: lst (list): The list of elements to print. index (int): The current index to print (default is 0). if index < len(lst): print(lst[index]) print_list_recursive(lst, index + 1)"},{"question":"Write a python function to find the number of elements divisible by 3 in a list. How would you call this function with a list of numbers?","solution":"def count_divisible_by_3(numbers): Returns the number of elements in the list that are divisible by 3. return sum(1 for x in numbers if x % 3 == 0) # Example call numbers = [3, 1, 6, 7, 9, 11, 12] result = count_divisible_by_3(numbers) print(f\\"Number of elements divisible by 3: {result}\\")"},{"question":"Write a python function to find the number of leaves in a binary tree. A leaf node is a node with no children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_leaves(root): Returns the number of leaf nodes in a binary tree. if root is None: return 0 if root.left is None and root.right is None: return 1 return count_leaves(root.left) + count_leaves(root.right)"},{"question":"Write a python function to find all combinations of numbers from a given list that sum up to a target value. The function should return a list of lists, where each inner list represents a unique combination of numbers that add up to the target.","solution":"from typing import List def find_combinations(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, target, path): if target == 0: result.append(path) return if target < 0: return for i in range(start, len(nums)): backtrack(i + 1, target - nums[i], path + [nums[i]]) result = [] nums.sort() backtrack(0, target, []) return result"},{"question":"Write a python function to detect the duplicate elements in a list.","solution":"def find_duplicates(lst): Returns a list of duplicate elements in the given list. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to sort the keys in a dictionary by their corresponding values in descending order.","solution":"def sort_dict_by_value_desc(d): Sorts the keys in a dictionary by their corresponding values in descending order. Parameters: d (dict): The dictionary to sort. Returns: list: A list of keys sorted by their values in descending order. sorted_keys = sorted(d, key=d.get, reverse=True) return sorted_keys"},{"question":"Write a python function to calculate the sum of the digits in the factorial of a given number \`n\`. For example, if \`n = 5\`, the factorial is \`120\`. The sum of the digits in \`120\` is \`1 + 2 + 0 = 3\`. So, the function should return \`3\`.","solution":"import math def sum_of_digits_in_factorial(n): Returns the sum of the digits in the factorial of a given number n. factorial_value = math.factorial(n) return sum(int(digit) for digit in str(factorial_value))"},{"question":"Write a python function to generate all subsets of a given set of elements. The function should return a list of all subsets. For example, if the input is \`[1, 2, 3]\`, the output should be \`[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\`.","solution":"from itertools import combinations def all_subsets(elements): Generates all subsets of a given set of elements. Parameters: elements (list): A list of elements Returns: list: A list of all subsets subsets = [] for i in range(len(elements) + 1): for subset in combinations(elements, i): subsets.append(list(subset)) return subsets"},{"question":"Write a python function to find the frequency of each word in a given string sentence. Consider words as sequences of characters separated by spaces.","solution":"def word_frequency(sentence): Returns a dictionary with the frequency of each word in the given sentence. Parameters: sentence (str): A string representing the sentence to analyze. Returns: dict: A dictionary where the keys are words and values are their frequencies. words = sentence.split() frequency = {} for word in words: frequency[word] = frequency.get(word, 0) + 1 return frequency"},{"question":"Write a python function to sort a list of tuples by the second item in each tuple using lambda function.","solution":"def sort_by_second_item(tuples_list): Sorts a list of tuples by the second item in each tuple. Parameters: tuples_list (List[Tuple]): A list of tuples to be sorted Returns: List[Tuple]: A new list of tuples sorted by the second item of each tuple return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to convert a decimal number to binary without using built-in functions and elaborate on the process.","solution":"def decimal_to_binary(decimal_number): Converts a decimal number to binary representation. if decimal_number == 0: return '0' remainders = [] while decimal_number > 0: remainder = decimal_number % 2 remainders.append(str(remainder)) decimal_number //= 2 # Reverse the list to get the correct binary representation return ''.join(remainders[::-1])"},{"question":"Write a python function to convert a list of dictionaries into a single dictionary using a specific key, where the value of this key becomes the key for the new dictionary and the original dictionary becomes the value.","solution":"def convert_list_to_dict(list_of_dicts, key): Converts a list of dictionaries into a single dictionary using a specific key. Parameters: - list_of_dicts: List[Dict] - The list of dictionaries to convert. - key: str - The key to use for the new dictionary. Returns: - dict - The resulting dictionary. result = {} for d in list_of_dicts: if key in d: new_key = d[key] # Create a copy of the dictionary without the key new_value = {k: v for k, v in d.items() if k != key} result[new_key] = new_value return result"},{"question":"Write a python function to find the coordinates of a point given that it is on a line passing through two other points, and a point's distance from a specific point. You are given the coordinates of the two points on the line (x1, y1, x2, y2), the position of the point on the line (which can be one of: 'top', 'middle', 'bottom'), and the distance of the point from a specific coordinate (x_specific, y_specific).","solution":"from math import sqrt def find_coordinates(x1, y1, x2, y2, position, x_specific, y_specific): Returns the coordinates of a point on the line passing through (x1, y1) and (x2, y2) at the specified position: top, middle, bottom. if position == 'top': return (x1, y1) elif position == 'middle': return ((x1 + x2) / 2, (y1 + y2) / 2) elif position == 'bottom': return (x2, y2) else: return None def distance(x1, y1, x2, y2): Returns the distance between two points (x1, y1) and (x2, y2). return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)"},{"question":"Write a python function to generate a list of Lucas numbers up to n. The Lucas series is similar to Fibonacci but starts with 2 and 1 instead of 0 and 1. The nth Lucas number Tn is always the sum of its preceding two numbers Tn−1 and Tn−2.","solution":"def generate_lucas_numbers(n): Generate a list of Lucas numbers up to the nth term (inclusive). Parameters: n (int): The number of terms in the Lucas series to generate. Returns: list: A list containing the first n Lucas numbers. if n <= 0: return [] elif n == 1: return [2] elif n == 2: return [2, 1] lucas_numbers = [2, 1] for i in range(2, n): next_lucas = lucas_numbers[-1] + lucas_numbers[-2] lucas_numbers.append(next_lucas) return lucas_numbers"},{"question":"Write a python function to find the first character in a string that does not repeat?","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a string. If all characters repeat or the string is empty, returns None. count = {} for char in s: if char in count: count[char] += 1 else: count[char] = 1 for char in s: if count[char] == 1: return char return None"},{"question":"Write a python function to find the smallest window in a string containing all characters of another string. The function should return the size of the smallest window. If no such window exists, return -1.","solution":"def smallest_window_containing_all_chars(s, t): Finds the size of the smallest window in string s containing all characters of string t. If no such window exists, returns -1. from collections import Counter if not s or not t or len(t) > len(s): return -1 dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 window_counts = {} formed = 0 ans = float(\\"inf\\"), None, None # window length, left, right while r < len(s): char = s[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return ans[0] if ans[0] != float(\\"inf\\") else -1"},{"question":"Write a python function to calculate the factorial of a number. The function should be able to handle large numbers and should use Python's built-in support for efficiently handling large results. Let's start by understanding what factorial is.","solution":"def factorial(n): Returns the factorial of a given number n. Factorial of n (n!) is defined as the product of all positive integers less than or equal to n. :param n: int, the number to calculate the factorial of :return: int, factorial of the input number n if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to identify whether a number is prime. The function must return \`True\` if the number is prime and \`False\` if it is not prime. The solution should be optimized to handle large numbers efficiently.","solution":"def is_prime(n): Returns True if n is a prime number, else returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a python function to achieve this. I have an array of integers, I want to generate all possible combinations of elements in the array without replacement. For example, for the input [1, 2, 3], the output should be [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]].","solution":"from itertools import combinations def generate_combinations(arr): Generates all possible combinations of elements in the array without replacement. :param arr: List of integers :return: List of combinations, where each combination is represented as a list result = [] for i in range(len(arr) + 1): for combo in combinations(arr, i): result.append(list(combo)) return result"},{"question":"Write a python function to remove duplicates from a list while maintaining the original order of the list. You should use a more Pythonic approach.","solution":"def remove_duplicates(lst): Removes duplicates from a list while maintaining the original order. Args: lst: A list of elements. Returns: A list with duplicates removed, maintaining the original order. seen = set() return [x for x in lst if not (x in seen or seen.add(x))]"},{"question":"Write a python function to reverse a string without using slicing or any built-in string functions (like reverse(), upper(), lower(), etc.). You should only use basic string operations and control structures.","solution":"def reverse_string(s): Reverses the given string without using slicing or built-in string functions. reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to reverse a string values. For example, if the input string is \\"Hello World\\", the output should be \\"dlroW olleH\\".","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a python function to reverse a given string, but keep the original string unchanged.","solution":"def reverse_string(s): Returns the reverse of the given string s without altering the original string. return s[::-1]"},{"question":"Write a python function to flatten a list which can contain other lists as elements, up to a specified depth.","solution":"def flatten_list(lst, depth): Flattens a list up to the specified depth. Parameters: lst: List to be flattened. depth: Depth up to which to flatten the list. Returns: Flattened list up to the specified depth. if depth == 0: return lst flattened_list = [] for item in lst: if isinstance(item, list): flattened_list.extend(flatten_list(item, depth - 1)) else: flattened_list.append(item) return flattened_list"},{"question":"Write a python function to find the maximum and minimum value from a list of tuples. Each tuple contains three numbers. Your function should return these values within another tuple.","solution":"def find_max_min_from_tuples(tuples_list): Given a list of tuples where each tuple contains three numbers, this function returns a tuple of two elements: the maximum and minimum number found in the list of tuples. if not tuples_list: return None, None max_val = float('-inf') min_val = float('inf') for tup in tuples_list: max_val = max(max_val, *tup) min_val = min(min_val, *tup) return max_val, min_val # Example usage: # input_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)] # result = find_max_min_from_tuples(input_list) # result will be (9, 1)"},{"question":"Write a python function to select the maximum value from a list of numbers.","solution":"def select_max(numbers): Returns the maximum value from a list of numbers. :param numbers: List of numbers :return: The maximum number if not numbers: raise ValueError(\\"The list is empty.\\") return max(numbers)"},{"question":"Write a python function to check if a list is symmetric (i.e., reads the same backward as forward). For example, the list \`[1, 2, 3, 2, 1]\` is symmetric. How can we implement this in Python?","solution":"def is_symmetric(lst): Returns True if the list is symmetric, False otherwise. A list is symmetric if it reads the same backward as forward. return lst == lst[::-1]"},{"question":"Write a python function to convert a given string from binary to decimal. The binary string will only contain '1's and '0's.","solution":"def binary_to_decimal(binary_string): Converts a binary string to a decimal number. return int(binary_string, 2)"},{"question":"Write a python function to find the sum of all numbers in a given list. You should use basic list functions without employing any built-in Python functions like \`sum()\`.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the given list. Args: numbers (list): A list of numbers. Returns: int: Sum of all numbers in the list. total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to find the number of nodes in a binary search tree (BST) using DFS approach. The function should take the root of the BST as its argument.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes_dfs(root): Returns the number of nodes in a binary search tree (BST) using Depth-First Search (DFS) approach. if root is None: return 0 left_count = count_nodes_dfs(root.left) right_count = count_nodes_dfs(root.right) return 1 + left_count + right_count"},{"question":"Write a python function to remove duplicates from a list while maintaining the original order of elements. You should ensure that the solution leverages Python's built-in capabilities to achieve the task.","solution":"def remove_duplicates(lst): Removes duplicates from a list while maintaining the original order of elements. Args: lst (list): The list from which to remove duplicates. Returns: list: A new list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to find the highest score in a list of scores. If the list is empty, return \`None\`.","solution":"def highest_score(scores): Returns the highest score in the list of scores. If the list is empty, return None. Parameters: scores (list): A list of scores (numbers). Returns: number or None: The highest score or None if the list is empty. if not scores: return None return max(scores)"},{"question":"Write a python function to detect a cycle in a linked list. If a cycle is detected, return the node where the cycle starts. If there is no cycle, return None.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def detect_cycle(head): Detects a cycle in a linked list. If a cycle is detected, returns the node where the cycle starts. If there is no cycle, returns None. if not head or not head.next: return None slow = head fast = head # Detect cycle using Floyd's Tortoise and Hare algorithm while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: # Cycle detected, now find the start of the cycle slow = head while slow != fast: slow = slow.next fast = fast.next return slow return None"},{"question":"Write a python function to multiply the numbers in a list together.","solution":"from functools import reduce from operator import mul def multiply_list(numbers): Returns the product of all numbers in the list. :param numbers: A list of numbers. :return: Product of all numbers in the list. if not numbers: return 1 # convention: product of an empty list is 1 return reduce(mul, numbers)"},{"question":"Write a python function to reverse the characters of the words in a string, without reversing the order of the words themselves.","solution":"def reverse_characters_in_words(s): Reverse the characters of the words in a string, without reversing the order of the words themselves. Args: s (str): Input string Returns: str: String with characters in words reversed return ' '.join(word[::-1] for word in s.split())"},{"question":"Write a python function to calculate the product of two polynomials represented as dictionaries. The keys of the dictionaries represent the powers of x and the values represent the coefficients of the polynomial. The function should return a dictionary representing the product of the two polynomials.","solution":"def multiply_polynomials(poly1, poly2): Multiplies two polynomials represented as dictionaries. The keys represent the powers of x, and the values represent the coefficients. Args: poly1 (dict): The first polynomial. poly2 (dict): The second polynomial. Returns: dict: A dictionary representing the product of the two polynomials. product = {} for power1, coeff1 in poly1.items(): for power2, coeff2 in poly2.items(): power = power1 + power2 coeff = coeff1 * coeff2 if power in product: product[power] += coeff else: product[power] = coeff return product"},{"question":"Write a python function to reverse a string without reversing the words, but the characters in each word should be reversed. Also, make sure the function maintains the original word order and spaces.","solution":"def reverse_characters_in_words(s): Reverses the characters in each word of the string s without changing the word order. words = s.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a python function to return a list containing only the prime numbers from the given list of integers.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to insert a value into the correct position in a sorted list such that the list remains sorted after insertion. The function should return the new sorted list without modifying the original list.","solution":"def insert_into_sorted_list(sorted_list, value): Inserts a value into a sorted list and returns a new sorted list with the value inserted. new_list = sorted_list.copy() for i in range(len(new_list)): if value < new_list[i]: new_list.insert(i, value) break else: new_list.append(value) return new_list"},{"question":"Write a python function to calculate the time difference between two timestamps. The timestamps are given in the format 'HH:MM:SS'. Your function should handle any errors that may arise from parsing the timestamps.","solution":"from datetime import datetime def time_difference(timestamp1, timestamp2): Calculate the time difference between two timestamps in the format 'HH:MM:SS'. Returns the time difference in seconds. try: time_format = \\"%H:%M:%S\\" t1 = datetime.strptime(timestamp1, time_format) t2 = datetime.strptime(timestamp2, time_format) diff = abs((t2 - t1).total_seconds()) return diff except ValueError as e: print(f\\"Error: {e}\\") return None"},{"question":"Write a python function to sort a list of dictionaries by a specific key's value. For example, I have a list of dictionaries like [{\\"name\\": \\"John\\", \\"age\\": 30}, {\\"name\\": \\"Jane\\", \\"age\\": 25}, {\\"name\\": \\"Jack\\", \\"age\\": 35}], and I want to sort it by the \\"age\\" key in ascending order. How can I achieve this?","solution":"def sort_dicts_by_key(dict_list, key): Sorts a list of dictionaries by the specified key in ascending order. Args: dict_list (list): A list of dictionaries. key (str): The key to sort the dictionaries by. Returns: list: A list of dictionaries sorted by the specified key. return sorted(dict_list, key=lambda x: x[key])"},{"question":"Write a python function to find the nth prime number. The function should take a single integer input n and return the nth prime number starting from 2.","solution":"def nth_prime(n): Returns the nth prime number starting from 2. if n < 1: raise ValueError(\\"n must be greater than 0\\") primes = [] num = 2 while len(primes) < n: for prime in primes: if num % prime == 0: break else: primes.append(num) num += 1 return primes[-1]"},{"question":"Write a python function to generate a list of prime numbers from 2 to n, where n is a positive integer. The function should be efficient and use a common algorithm for finding primes.","solution":"def generate_primes(n): Returns a list of prime numbers from 2 to n (inclusive). if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, n + 1): if is_prime[i]: primes.append(i) for j in range(i * i, n + 1, i): is_prime[j] = False return primes"},{"question":"Write a python function to resize an image using PIL (Pillow) library according to the given width and height.","solution":"from PIL import Image def resize_image(input_path, output_path, width, height): Resize the image to the given width and height. :param input_path: The path to the input image :param output_path: The path to save the resized image :param width: The desired width of the resized image :param height: The desired height of the resized image with Image.open(input_path) as img: img_resized = img.resize((width, height)) img_resized.save(output_path)"},{"question":"Write a python function to find the minimum element in a circularly sorted list that might contain duplicates. The list is sorted in ascending order and then rotated. For example, the list [3, 4, 5, 1, 2] is sorted and then rotated. The function should return the minimum element in the list.","solution":"def find_min_in_rotated_sorted_array(nums): Finds the minimum element in a circularly sorted list that might contain duplicates. The list is sorted in ascending order and then rotated. Parameters: nums (list): A list of integers which is a rotated sorted list. Returns: int: The minimum element in the list. if not nums: raise ValueError(\\"Input list is empty\\") left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if nums[mid] < nums[right]: right = mid elif nums[mid] > nums[right]: left = mid + 1 else: right -= 1 return nums[left]"},{"question":"Write a python function to find the middle element of an array. If the array has an even number of elements, return the second middle element.","solution":"def find_middle_element(arr): Returns the middle element of the array. If the array has an even number of elements, it returns the second middle element. if not arr: return None mid_index = len(arr) // 2 return arr[mid_index]"},{"question":"Write a python function to check if a number is a perfect square without using any built-in functions like math.sqrt(), it's time complexity should be O(1).","solution":"def is_perfect_square(n): Check if a number is a perfect square without using any built-in functions. Parameters: n (int): The number to check Returns: bool: True if n is a perfect square, False otherwise if n < 0: return False if n == 0 or n == 1: return True start = 1 end = n while start <= end: mid = (start + end) // 2 mid_squared = mid * mid if mid_squared == n: return True elif mid_squared < n: start = mid + 1 else: end = mid - 1 return False"},{"question":"Write a python function to check if a given string is a palindrome. A palindrome is a word which remains the same when its letters are reversed. For example, \\"radar\\" is a palindrome, but \\"hello\\" is not.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string s is a palindrome. :param s: The string to check. :returns: True if s is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase for uniformity clean_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is equal to its reverse return clean_s == clean_s[::-1]"},{"question":"Write a python function to reverse the order of characters in the string 'hello world'.","solution":"def reverse_string(s): Reverses the order of characters in the given string. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a python function to find the maximum number in a list. If the list is empty, return None. If the list contains non-numeric values, raise a ValueError with an appropriate error message.","solution":"def find_max_number(lst): Finds and returns the maximum number in a list. If the list is empty, returns None. If the list contains non-numeric values, raises a ValueError. :param lst: List of numbers :return: Maximum number or None if not lst: return None for item in lst: if not isinstance(item, (int, float)): raise ValueError(\\"List must contain only numeric values.\\") return max(lst)"},{"question":"Write a python function to calculate the product of all numbers in a list. If the list contains a zero, return 'zero', as the product will be zero regardless. If the list is empty, return 1.","solution":"def product_of_list(numbers): Returns the product of all numbers in the list. If the list contains a zero, return 'zero'. If the list is empty, return 1. if not numbers: return 1 product = 1 for number in numbers: if number == 0: return 'zero' product *= number return product"},{"question":"Write a python function to implement the quicksort algorithm and return the sorted list.","solution":"def quicksort(arr): Implement the quicksort algorithm to sort a list. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to return numbers from 1 to n that are divisible by either 3 or 5","solution":"def divisible_by_3_or_5(n): Returns a list of numbers from 1 to n that are divisible by either 3 or 5. return [i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0]"},{"question":"Write a python function to find the sum of all unique elements in a given list.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in the given list. return sum(e for e in set(lst) if lst.count(e) == 1)"},{"question":"Write a python function to solve a Sudoku puzzle. The function should take a 9x9 grid as input and return the solved grid. Check the validity of the Sudoku puzzle by ensuring all rows, columns, and 3x3 sub-squares contain the digits from 1 to 9 without repetition.","solution":"def solve_sudoku(board): Solves the given Sudoku puzzle. Args: board (list of list of int): 9x9 Sudoku puzzle, where empty cells are represented by 0. Returns: list of list of int: Solved 9x9 Sudoku puzzle. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False box_row, box_col = 3 * (row // 3), 3 * (col // 3) for i in range(3): for j in range(3): if board[box_row + i][box_col + j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True solve(board) return board"},{"question":"Write a python function to print the binary representation of a given number. However, the function should handle negative numbers as well and print their binary representation in two's complement form.","solution":"def binary_representation(number): Returns the binary representation of a given number. Handles negative numbers by giving their representation in two's complement form. if number >= 0: return bin(number)[2:] else: # Compute two's complement representation for the negative number bits = 32 # Assuming 32-bit integer for the example return bin((1 << bits) + number)[2:]"},{"question":"Write a python function to calculate the length of the longest subarray with distinct elements.","solution":"def longest_subarray_with_distinct_elements(arr): Calculate the length of the longest subarray with distinct elements. :param arr: List of integers :return: Integer length of the longest subarray with distinct elements n = len(arr) if n == 0: return 0 max_len = 0 start = 0 seen_elements = {} for end in range(n): if arr[end] in seen_elements: start = max(start, seen_elements[arr[end]] + 1) seen_elements[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a python function to convert a string representation of a binary tree to its corresponding tree structure. The string representation is in the form of a structured string where nodes are represented by their values, and the left and right subtrees are denoted by the characters 'L' and 'R'. For example, the string \\"1(L2(R4)R3)\\" represents a binary tree where the root is 1, with a left child 2 and a right child 3, where 2 has a right child 4.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def str_to_tree(s): if not s: return None def parse(s, start): if start >= len(s) or s[start] == ')': return None, start # Extract the numeric value for the current node val = 0 is_negative = False if s[start] == '-': is_negative = True start += 1 while start < len(s) and s[start].isdigit(): val = val * 10 + int(s[start]) start += 1 if is_negative: val = -1 * val node = TreeNode(val) # Parse the left and right children if they exist if start < len(s) and s[start] == '(': start += 1 if start < len(s) and s[start] == 'L': node.left, start = parse(s, start + 1) if start < len(s) and s[start] == 'R': node.right, start = parse(s, start + 1) if start < len(s) and s[start] == ')': start += 1 return node, start root, _ = parse(s, 0) return root"},{"question":"Write a python function to find the factorial of a given number. You should handle both positive integer and non-negative float numbers. user should also input the number of decimal places for the result when a float number is passed.","solution":"def factorial(n, decimal_places=2): Returns the factorial of a given number n. If n is a float, the result is rounded to the specified number of decimal places. if not isinstance(n, (int, float)) or n < 0: raise ValueError(\\"Input must be a non-negative integer or float.\\") # Factorial for integer part from math import factorial as int_factorial if isinstance(n, int): return int_factorial(n) # Factorial for float part using Gamma function from math import gamma result = gamma(n + 1) return round(result, decimal_places)"},{"question":"Write a python function to check whether an input string is a palindrome. A palindrome is a string which, when reversed, reads the same as the original string. If the input string is a palindrome, your function should return \`True\`. Otherwise, it should return \`False\`.","solution":"def is_palindrome(s): Checks if the input string s is a palindrome. Args: s (str): The input string to check. Returns: bool: True if s is a palindrome, False otherwise. # Remove any spaces and convert to lowercase for standard comparison cleaned_s = s.replace(\\" \\", \\"\\").lower() # Compare the string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Write a python function to calculate the perimeter of a circle given its radius.","solution":"import math def perimeter_of_circle(radius): Returns the perimeter of a circle given its radius. return 2 * math.pi * radius"},{"question":"Write a python function to find the highest number in a list using recursion.","solution":"def find_highest_number_recursive(lst): Returns the highest number in a list using recursion. if len(lst) == 1: return lst[0] else: max_of_rest = find_highest_number_recursive(lst[1:]) return lst[0] if lst[0] > max_of_rest else max_of_rest"},{"question":"Write a python function to sort an array nums and return the sorted array. I am especially interested in understanding how the sorting algorithm works behind the scenes.","solution":"def bubble_sort(nums): Returns the sorted array using the bubble sort algorithm. Bubble sort is a simple comparison-based algorithm where each pair of adjacent elements is compared and the elements are swapped if they are in the wrong order. This process is repeated until the list is sorted. n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: # Swap the elements nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"question":"Write a python function to parse a JSON file and return the data.","solution":"import json def parse_json_file(file_path): Parses a JSON file and returns the data. Args: file_path (str): The path to the JSON file. Returns: dict: The parsed JSON data. with open(file_path, 'r') as file: data = json.load(file) return data"},{"question":"Write a python function to filter out numbers that are not perfect squares from a given list of integers.","solution":"import math def is_perfect_square(n): Returns True if n is a perfect square, otherwise False. if n < 0: return False return math.isqrt(n) ** 2 == n def filter_perfect_squares(numbers): Filters out numbers that are not perfect squares from the given list of integers. Parameters: numbers (list of int): A list of integers. Returns: list of int: A list containing only the perfect squares from the input list. return [num for num in numbers if is_perfect_square(num)]"},{"question":"Write a python function to check whether the elements in an array are in strictly increasing or strictly decreasing order.","solution":"def is_strictly_ordered(arr): Checks whether the elements in the array are in strictly increasing or strictly decreasing order. Parameters: arr (list): List of numbers. Returns: bool: True if the array is strictly increasing or decreasing, False otherwise. if not arr or len(arr) == 1: return True increasing = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) decreasing = all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)) return increasing or decreasing"},{"question":"Write a python function to find a unique number in a list. I have a list for example [1,2,2,3,3,4,4,4,5]. The numbers 2 and 4 have appeared twice, 1,3,5 appeared only once. How can I find a number that appeared only once in this list.","solution":"def find_unique_number(numbers): Returns the first number that appears only once in the list. # Create a dictionary to count occurrences of each number count_dict = {} for number in numbers: count_dict[number] = count_dict.get(number, 0) + 1 # Find the first number that appears only once for number in numbers: if count_dict[number] == 1: return number return None # In case no unique number is found"},{"question":"Write a python function to sort a list of integers in ascending order. You should use the built-in sort function.","solution":"def sort_integers(lst): Sorts a list of integers in ascending order. lst.sort() return lst"},{"question":"Write a python function to find the longest word in a list of words. The function should take a list of words as an argument and return the longest word in that list. If the list is empty, it should return None. If there are multiple words with the same maximum length, return the first one that appears in the list.","solution":"def find_longest_word(words): Returns the longest word in the given list of words. If there are multiple words with the same length, returns the first one. If the list is empty, returns None. if not words: return None longest_word = words[0] for word in words[1:]: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Write a python function to find the number of inversions in an array efficiently. Inversion count for an array is the count of pairs (i, j) such that i < j and arr[i] > arr[j].","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all elements left to i in the left subarray # are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into the main array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): Function to count inversions in an array. temp_arr = [0] * len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"Write a python function to reverse the order of a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses the order of a linked list. Args: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. previous = None current = head while current is not None: next_node = current.next current.next = previous previous = current current = next_node return previous"},{"question":"Write a python function to sort a list of tuples. The tuples represent objects with a 'name' and 'age', and the list is to be sorted primarily by 'age' and secondarily by 'name'.","solution":"def sort_tuples(data): Sorts a list of tuples containing ('name', 'age') primarily by 'age' and secondarily by 'name'. Args: data (list of tuples): List of tuples where each tuple contains (name, age). Returns: list of tuples: Sorted list of tuples. return sorted(data, key=lambda x: (x[1], x[0]))"},{"question":"Write a python function to create a Fibonacci sequence generator that yields each number in the sequence up to a specified limit.","solution":"def fibonacci(limit): Generator that yields Fibonacci sequence numbers up to a specified limit. :param limit: The upper limit for the values in the Fibonacci sequence. a, b = 0, 1 while a <= limit: yield a a, b = b, a + b"},{"question":"Write a python function to merge two lists without removing any duplicates between them.","solution":"def merge_lists(list1, list2): Merges two lists without removing any duplicates. return list1 + list2"},{"question":"Write a python function to print the nth Fibonacci number. The Fibonacci sequence is defined as a sequence of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first five numbers in the Fibonacci sequence are 0, 1, 1, 2, 3.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return \\"Input should be a positive integer.\\" elif n == 1: return 0 elif n == 2: return 1 else: a, b = 0, 1 for _ in range(n-2): a, b = b, a + b return b"},{"question":"Write a python function to find the majority element in an array. The majority element is the element that appears more than ⌊n / 2⌋ times. If no such element exists, return -1. Your function should be efficient, ideally with better than O(n^2) time complexity.","solution":"def find_majority_element(nums): Returns the majority element in an array which appears more than ⌊ n / 2 ⌋ times. If no majority element exists, returns -1. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) if nums.count(candidate) > len(nums) // 2: return candidate return -1"},{"question":"Write a python function to find the largest number in an unsorted list of integers. What would be the time complexity of this function?","solution":"def find_largest_number(nums): Returns the largest number in the unsorted list of integers. if not nums: # If the list is empty, return None return None largest = nums[0] for num in nums[1:]: if num > largest: largest = num return largest # The time complexity of this function is O(n), where n is the number of elements in the list."},{"question":"Write a python function to Check if Two Strings are Anagrams using Python (using collections.Counter)","solution":"from collections import Counter def are_anagrams(str1, str2): Checks if two strings are anagrams. return Counter(str1) == Counter(str2)"},{"question":"Write a python function to remove all the words with length less than 3 from a string. The input will be a string containing multiple words separated by spaces, and the output should be a string with the words filtered out based on the length requirement.","solution":"def remove_short_words(input_string): Remove all words with length less than 3 from the input string. Parameters: input_string (str): The string containing multiple words separated by spaces. Returns: str: The string with words less than 3 characters filtered out. return ' '.join(word for word in input_string.split() if len(word) >= 3)"},{"question":"Write a python function to find the minimum number in a given list.","solution":"def find_minimum(lst): Returns the minimum number in the given list. if not lst: raise ValueError(\\"The list is empty, cannot determine the minimum value.\\") return min(lst)"},{"question":"Write a python function to return the fibonacci number at position n using recursion.","solution":"def fibonacci(n): Returns the Fibonacci number at position n using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") if n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to return the highest overlapping substring that occurs multiple times in a given text.","solution":"def highest_overlapping_substring(text): Returns the highest overlapping substring that occurs multiple times in the given text. Parameters: text (str): The input text. Returns: str: The highest overlapping substring, or empty string if none found. n = len(text) def check_substring_length(length): seen = {} for i in range(n - length + 1): substr = text[i:i + length] if substr in seen: return substr seen[substr] = True return \\"\\" low, high = 0, n result = \\"\\" while low <= high: mid = (low + high) // 2 substr = check_substring_length(mid) if substr: result = substr low = mid + 1 else: high = mid - 1 return result"},{"question":"Write a python function to remove a line from a string if it contains a specific keyword. The function should also handle cases where the keyword is surrounded by punctuation marks (e.g., \\"keyword!\\", \\"keyword.\\", \\"keyword,\\").","solution":"import re def remove_line_with_keyword(text, keyword): Removes a line from a string if it contains the specified keyword. The function handles cases where the keyword is surrounded by punctuation marks. pattern = r'b' + re.escape(keyword) + r'b' lines = text.split(\\"n\\") result_lines = [line for line in lines if not re.search(pattern, line)] return \\"n\\".join(result_lines)"},{"question":"Write a python function to sort an array using the bubble sort algorithm and also count the number of swaps made during the sorting process.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm and counts the number of swaps made. Parameters: arr (list): The list of elements to be sorted. Returns: tuple: A tuple containing the sorted array and the number of swaps made. n = len(arr) swaps = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return arr, swaps"},{"question":"Write a python function to find the number of islands in a grid. By \\"island,\\" we mean a maximal set of connected 1's (representing land) in four directions (up, down, left, right).","solution":"def num_islands(grid): Returns the number of islands in the given grid. An island is defined as a maximal set of connected 1's (land) in four directions (up, down, left, right). :param grid: List of List containing integers (0's and 1's) :return: Integer representing number of islands if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or visited[r][c] or grid[r][c] == 0: return visited[r][c] = True for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: #up, down, left, right dfs(r + dr, c + dc) island_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1 and not visited[i][j]: island_count += 1 dfs(i, j) return island_count"},{"question":"Write a python function to solve the 8 puzzle problem using the A* algorithm.","solution":"import heapq def heuristic(state, goal): Computes the Manhattan distance heuristic between the current state and the goal state. distance = 0 for i in range(1, 9): xi, yi = divmod(state.index(i), 3) xg, yg = divmod(goal.index(i), 3) distance += abs(xi - xg) + abs(yi - yg) return distance def get_neighbors(state): Returns the neighbors of the given state. neighbors = [] index = state.index(0) # Find the empty slot x, y = divmod(index, 3) moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right for move in moves: nx, ny = x + move[0], y + move[1] if 0 <= nx < 3 and 0 <= ny < 3: new_index = nx * 3 + ny new_state = list(state) new_state[index], new_state[new_index] = new_state[new_index], new_state[index] neighbors.append(tuple(new_state)) return neighbors def astar_8_puzzle(start, goal): Solves the 8 puzzle problem using the A* algorithm. start = tuple(start) goal = tuple(goal) frontier = [] heapq.heappush(frontier, (0, start)) came_from = {start: None} cost_so_far = {start: 0} while frontier: current_priority, current = heapq.heappop(frontier) if current == goal: break for neighbor in get_neighbors(current): new_cost = cost_so_far[current] + 1 if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]: cost_so_far[neighbor] = new_cost priority = new_cost + heuristic(neighbor, goal) heapq.heappush(frontier, (priority, neighbor)) came_from[neighbor] = current path = [] node = goal while node is not None: path.append(node) node = came_from[node] return path[::-1] # Return reversed path def solve_8_puzzle(start, goal): Wrapper function to solve the 8 puzzle and return only the list of moves. solution_path = astar_8_puzzle(start, goal) return [list(state) for state in solution_path]"},{"question":"Write a python function to perform a loop execution using for loop or while loop, to count the number of digits in an integer. Here's the function signature: count_digits(n) that takes an integer n as input and returns the number of digits in n.","solution":"def count_digits(n): Returns the number of digits in the integer n. if n == 0: return 1 count = 0 n = abs(n) # Handle negative numbers by taking the absolute value while n > 0: n //= 10 count += 1 return count"},{"question":"Write a python function to find the second largest element in an unsorted array. The function should return the second largest element, or -1 if it does not exist. The function should have a time complexity of O(n) and a space complexity of O(1).","solution":"def second_largest_element(arr): Returns the second largest element in the array, or -1 if it does not exist. if len(arr) < 2: return -1 first, second = float('-inf'), float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else -1"},{"question":"Write a python function to calculate the factorial of a number using recursion. Then, implement a check function to ensure your factorial function is working correctly.","solution":"def factorial(n): Returns the factorial of n using recursion. if n == 0: return 1 else: return n * factorial(n - 1) def check_factorial(): Checks the correctness of the factorial function by comparing its output with known values. test_cases = {0: 1, 1: 1, 2: 2, 3: 6, 4: 24, 5: 120, 6: 720, 7: 5040} for n, expected in test_cases.items(): assert factorial(n) == expected, f\\"Failed for n = {n}\\" print(\\"All test cases passed!\\")"},{"question":"Write a python function to find the maximum sum of elements within a given list of integers, where no two consecutive elements can be included in the sum.","solution":"def max_non_consecutive_sum(nums): Returns the maximum sum of elements within the given list of integers, where no two consecutive elements can be included in the sum. if not nums: # If the list is empty return 0 if len(nums) == 1: # If there's only one element return nums[0] # Initialize the two variables to keep track of the maximum sums incl = nums[0] # Sum including the first element excl = 0 # Sum excluding the first element for i in range(1, len(nums)): # Current maximum excluding i new_excl = max(incl, excl) # Current maximum including i incl = excl + nums[i] excl = new_excl # Return the maximum of incl and excl return max(incl, excl)"},{"question":"Write a python function to generate a list of prime numbers up to a given number \`n\`. For example, if \`n\` is 10, the function should return [2, 3, 5, 7].","solution":"def generate_primes(n): Generates a list of prime numbers up to a given number n. Args: n (int): The upper limit (inclusive) for generating prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for p in range(2, n + 1): if is_prime[p]: primes.append(p) for multiple in range(p * p, n + 1, p): is_prime[multiple] = False return primes"},{"question":"Write a python function to calculate the sum of the digits of a given number. Make sure to handle cases where the number might be negative.","solution":"def sum_of_digits(num): Returns the sum of the digits of a given number. If the number is negative, its sign is ignored in the calculation. num = abs(num) return sum(int(digit) for digit in str(num))"},{"question":"Write a python function to solve the problem of finding the maximum subarray sum. The function should take a list of integers as input and return the maximum sum of any contiguous subarray within the input list. For example, for the input list [-2,1,-3,4,-1,2,1,-5,4], the function should return 6, which corresponds to the subarray [4,-1,2,1].","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the input list. if not nums: # Handle empty list input return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to search for a target value in a two-dimensional list, often referred to as a matrix. The function should return the indices \`[row, column]\` if the target is found, otherwise, return \`[-1, -1]\`.","solution":"def search_matrix(matrix, target): Searches for the target value in the two-dimensional list (matrix). Parameters: matrix (list of list of int): The 2D list to search within. target (int): The value to search for. Returns: list: A list containing the row and column indices of the target if found, otherwise [-1, -1]. for i, row in enumerate(matrix): for j, value in enumerate(row): if value == target: return [i, j] return [-1, -1]"},{"question":"Write a python function to find the number of times each unique element appears in the array. Use dictionary to store the count of each unique element and return the dictionary as the result.","solution":"def count_elements(arr): Returns a dictionary with the count of each unique element in the array. count_dict = {} for element in arr: if element in count_dict: count_dict[element] += 1 else: count_dict[element] = 1 return count_dict"},{"question":"Write a python function to find the maximum sum of a contiguous subarray, which has a subarray length of exactly k, and the sum must include at least one element that is even.","solution":"def max_sum_subarray_with_even(arr, k): Returns the maximum sum of a contiguous subarray of length exactly k that includes at least one even number. :param arr: List of integers :param k: Length of the subarray :return: Maximum sum of the subarray # Initial variables n = len(arr) max_sum = float('-inf') # Iterate through the array to find the maximum sum subarray of length k that contains at least one even number for i in range(n - k + 1): current_subarray = arr[i:i+k] current_sum = sum(current_subarray) if any(x % 2 == 0 for x in current_subarray): # Check if there is at least one even number max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the second smallest number in a list. If the list has fewer than two elements, return None. Here is a sample list: [3, 2, 5, 1, 4]","solution":"def second_smallest(numbers): Returns the second smallest number in a list. If the list has fewer than two elements, returns None. if len(numbers) < 2: return None # Sort the list and return the second unique smallest number sorted_unique_numbers = sorted(set(numbers)) if len(sorted_unique_numbers) < 2: return None return sorted_unique_numbers[1]"},{"question":"Write a python function to check if the parentheses are valid.","solution":"def is_valid_parentheses(s): Checks if the parentheses in the string are valid. Args: s (str): The string containing parentheses. Returns: bool: True if parentheses are valid, False otherwise. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in s: if char in mapping: top_element = stack.pop() if stack else '#' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a python function to convert a given integer to a string representation in a specified base. The base can be any integer from 2 to 36. The function should return the string representation of the number in the given base.","solution":"def int_to_base_str(number, base): Converts an integer to a string representation in a given base (from 2 to 36). if not (2 <= base <= 36): raise ValueError(\\"Base must be between 2 and 36\\") if number == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" sign = \\"\\" if number < 0: sign = \\"-\\" number = -number while number > 0: result = digits[number % base] + result number //= base return sign + result"},{"question":"Write a python function to find the two numbers in the list which have the least sum. You should return the sum itself. The list will always contain positive integers, and there will always be at least two numbers.","solution":"def find_least_sum(nums): Returns the sum of the two smallest numbers in the list nums. if len(nums) < 2: raise ValueError(\\"List must contain at least two numbers\\") # Find the two smallest unique numbers in the list first_min = float('inf') second_min = float('inf') for num in nums: if num < first_min: first_min, second_min = num, first_min elif num < second_min: second_min = num return first_min + second_min"},{"question":"Write a python function to sort an array in ascending order using the bubble sort algorithm. I would like a detailed explanation along with the code.","solution":"def bubble_sort(arr): Sorts an array in ascending order using the bubble sort algorithm. :param arr: List of elements to be sorted :return: Sorted list of elements n = len(arr) # Traverse through all elements in the array for i in range(n): # Flag to detect any swap swapped = False # Traverse the array from 0 to n-i-1 # Last i elements are already sorted, no need to compare them for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the array is sorted if not swapped: break return arr"},{"question":"Write a python function to translate a given string into Pig Latin.","solution":"def translate_to_pig_latin(s): Translates a given string into Pig Latin. def translate_word(word): vowels = \\"aeiou\\" if word[0].lower() in vowels: return word + \\"ay\\" else: first_vowel_index = next((i for i, char in enumerate(word) if char.lower() in vowels), len(word)) return word[first_vowel_index:] + word[:first_vowel_index] + \\"ay\\" return ' '.join(translate_word(word) for word in s.split()) # Example usage: # translate_to_pig_latin(\\"hello world\\") would return \\"ellohay orldway\\""},{"question":"Write a python function to determine whether a number is a perfect square. Here, we define a perfect square as an integer whose square root is an integer. For instance, 4, 9, 16 are perfect squares (square root is an integer reading perfectly), while 18 is not a perfect square (square root includes a decimal value which is not an acceptable output).","solution":"import math def is_perfect_square(n): Determines whether the integer n is a perfect square. Parameters: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False square_root = int(math.sqrt(n)) return square_root * square_root == n"},{"question":"Write a python function to find all permutations of a string. How can I approach writing such a function in Python?","solution":"from itertools import permutations def find_permutations(s): Returns all permutations of the input string s. return [''.join(p) for p in permutations(s)]"},{"question":"Write a python function to determine if a string contains only alphanumeric characters (letters or numbers).","solution":"def is_alphanumeric(s): Determines if the given string 's' contains only alphanumeric characters. Parameters: s (str): The string to be checked. Returns: bool: True if the string contains only alphanumeric characters, False otherwise. return s.isalnum()"},{"question":"Write a python function to solve the following problem: Given a sorted array of integers \`nums\` and an integer \`target\`, write a function \`twoSum\` that returns the indices of the two numbers such that they add up to the target. The indices are 1-based, not 0-based. If no such two numbers exist, return [-1, -1].","solution":"def twoSum(nums, target): Given a sorted array of integers nums and an integer target, returns the indices of the two numbers such that they add up to the target. 1-based indices. Args: nums (List[int]): A sorted list of integers. target (int): The target sum. Returns: List[int]: A list of two integers representing the 1-based indices of the two numbers if found, else [-1, -1]. left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: return [left + 1, right + 1] elif current_sum < target: left += 1 else: right -= 1 return [-1, -1]"},{"question":"Write a python function to determine if a string is a decimal number. The function should return \`True\` if the string is a decimal number (i.e., it represents a real number as opposed to an integer), and \`False\` otherwise.","solution":"def is_decimal_number(s): Determines if a string is a decimal number. Parameters: s (str): The input string. Returns: bool: True if the string is a decimal number, False otherwise. try: float_number = float(s) return '.' in s or 'e' in s.lower() # Check for the presence of a decimal point or exponent except ValueError: return False"},{"question":"Write a python function to efficiently count the number of distinct elements in a list. You should ensure that the function handles large lists efficiently and requires minimal memory usage.","solution":"def count_distinct_elements(lst): Returns the number of distinct elements in the list. return len(set(lst))"},{"question":"Write a python function to calculate the total value of an inventory where the value is the cost price times the quantity of items.","solution":"def calculate_inventory_value(inventory): Calculates the total value of an inventory. Parameters: inventory (list of dict): A list of dictionaries where each dictionary represents an item with keys 'cost_price' and 'quantity'. Returns: float: The total value of the inventory. total_value = 0.0 for item in inventory: total_value += item['cost_price'] * item['quantity'] return total_value"},{"question":"Write a python function to calculate the median of an array. The array can have an odd or even number of elements. If the array has an odd number of elements, the median is the middle element. If the array has an even number of elements, the median is the average of the two middle elements. If the array is empty, the function should return \\"Array is empty\\".","solution":"def median(arr): Returns the median of the array. If the array is empty, returns \\"Array is empty\\". if not arr: return \\"Array is empty\\" arr.sort() n = len(arr) if n % 2 == 1: return arr[n // 2] else: return (arr[n // 2 - 1] + arr[n // 2]) / 2"},{"question":"Write a python function to reverse a given integer using a recursive approach.","solution":"def reverse_integer(n): Recursively reverses a given integer. Args: n: int - The integer to reverse. Returns: int - The reversed integer. def reverse_helper(n, reverted): if n == 0: return reverted reverted = (reverted * 10) + (n % 10) return reverse_helper(n // 10, reverted) is_negative = n < 0 n = abs(n) reversed_n = reverse_helper(n, 0) return -reversed_n if is_negative else reversed_n"},{"question":"Write a python function to find the Moore's Voting Algorithm. The Moore's Voting Algorithm is used for finding the majority element in an array. The majority element is the element that appears more than n/2 times. If no such element exists, return -1.","solution":"def moore_voting_algorithm(nums): Finds the majority element in the given array using Moore's Voting Algorithm. The majority element is the element that appears more than n/2 times. If no such element exists, return -1. candidate = None count = 0 # Find the candidate for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 # Verify the candidate if candidate is not None: count = sum(1 for num in nums if num == candidate) if count > len(nums) // 2: return candidate return -1"},{"question":"Write a python function to check if a given integer is divisible by either 7 or 11.","solution":"def is_divisible_by_7_or_11(n): Returns True if the given integer n is divisible by either 7 or 11. return n % 7 == 0 or n % 11 == 0"},{"question":"Write a python function to merge two sorted arrays into one sorted array without duplicates.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array without duplicates. :param arr1: List[int] - First sorted array :param arr2: List[int] - Second sorted array :return: List[int] - Merged sorted array without duplicates result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: if not result or result[-1] != arr1[i]: result.append(arr1[i]) i += 1 elif arr1[i] > arr2[j]: if not result or result[-1] != arr2[j]: result.append(arr2[j]) j += 1 else: if not result or result[-1] != arr1[i]: result.append(arr1[i]) i += 1 j += 1 while i < len(arr1): if not result or result[-1] != arr1[i]: result.append(arr1[i]) i += 1 while j < len(arr2): if not result or result[-1] != arr2[j]: result.append(arr2[j]) j += 1 return result"},{"question":"Write a python function to find the second smallest and second largest numbers in a list. If the list does not contain enough elements to determine these values, return None for the missing value(s).","solution":"def second_smallest_and_largest(nums): Returns the second smallest and second largest numbers in a list. If the list does not contain enough elements, return None for the missing value(s). if len(nums) < 2: return (None, None) unique_nums = list(set(nums)) if len(unique_nums) < 2: return (None, None) unique_nums.sort() second_smallest = unique_nums[1] if len(unique_nums) > 1 else None second_largest = unique_nums[-2] if len(unique_nums) > 1 else None return (second_smallest, second_largest)"},{"question":"Write a python function to find the second smallest number in a list of 6 numbers.","solution":"def second_smallest(numbers): Returns the second smallest number from a list of 6 numbers. :param numbers: List of 6 integers :return: The second smallest integer in the list if len(numbers) != 6: raise ValueError(\\"List must contain exactly 6 numbers\\") # Using a set to remove duplicates, then converting back to a sorted list unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") return unique_numbers[1]"},{"question":"Write a python function to print the fibonnaci sequence up to a given number n. Ensure that the function is efficient and uses dynamic programming to calculate the sequence up to n.","solution":"def fibonacci(n): Returns the Fibonacci sequence up to n. if n <= 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while True: next_value = fib_sequence[-1] + fib_sequence[-2] if next_value >= n: break fib_sequence.append(next_value) return fib_sequence"},{"question":"Write a python function to find the minimum cost to connect all nodes in a graph. The graph will be given as an adjacency matrix, where \`matrix[i][j]\` represents the cost to connect nodes \`i\` and \`j\`. If there is no connection between \`i\` and \`j\`, \`matrix[i][j]\` will be \`0\`.","solution":"import heapq def minimum_cost_to_connect_nodes(matrix): This function finds the minimum cost to connect all nodes in a graph given by the adjacency matrix. n = len(matrix) visited = [False] * n min_heap = [(0, 0)] # (cost, node) total_cost = 0 nodes_connected = 0 while nodes_connected < n and min_heap: cost, u = heapq.heappop(min_heap) if not visited[u]: visited[u] = True total_cost += cost nodes_connected += 1 for v in range(n): if matrix[u][v] != 0 and not visited[v]: heapq.heappush(min_heap, (matrix[u][v], v)) # Check if all nodes are connected if nodes_connected == n: return total_cost else: return float('inf') # Return infinity if all nodes can't be connected # Example usage: # matrix = [ # [0, 2, 0, 6, 0], # [2, 0, 3, 8, 5], # [0, 3, 0, 0, 7], # [6, 8, 0, 0, 9], # [0, 5, 7, 9, 0] # ] # print(minimum_cost_to_connect_nodes(matrix)) # Output: 16"},{"question":"Write a python function to solve the Sudoku puzzle using depth-first search (DFS). The function should take a 2D list representing the Sudoku puzzle and return the solved puzzle. The empty cells are denoted by 0.","solution":"def is_valid(board, row, col, num): Check whether it is legal to assign num to the given row, col. # Check the row for j in range(9): if board[row][j] == num: return False # Check the column for i in range(9): if board[i][col] == num: return False # Check the 3x3 sub-grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve_sudoku(board): Solve the Sudoku puzzle using DFS. empty_cell = find_empty_cell(board) if not empty_cell: return True # If there is no empty cell, we are done row, col = empty_cell for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_cell(board): Find an empty cell in the Sudoku board. for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None"},{"question":"Write a python function to swap the elements of two arrays at given positions.","solution":"def swap_elements(arr1, arr2, pos1, pos2): Swaps elements of arr1 and arr2 at given positions pos1 and pos2. Args: arr1 (list): First array. arr2 (list): Second array. pos1 (int): The position in the first array to swap. pos2 (int): The position in the second array to swap. Returns: tuple: A tuple of the modified arrays. if pos1 < 0 or pos1 >= len(arr1) or pos2 < 0 or pos2 >= len(arr2): raise IndexError(\\"Index out of range\\") arr1[pos1], arr2[pos2] = arr2[pos2], arr1[pos1] return arr1, arr2"},{"question":"Write a python function to convert a given integer to its fixed length binary representation. The fixed length should be 8 bits.","solution":"def int_to_fixed_length_binary(n): Converts an integer to its fixed-length 8-bit binary representation. Args: n (int): The integer to convert. Returns: str: Fixed-length 8-bit binary representation of the integer. if n < 0 or n > 255: raise ValueError(\\"The integer must be in the range 0 to 255 inclusive.\\") return format(n, '08b')"},{"question":"Write a python function to evaluate the expression of two numbers and an operator provided by the user. The operator can be '+', '-', '*', or '/'.","solution":"def evaluate_expression(a, b, operator): Evaluates the expression with two numbers and an operator. Supported operators are '+', '-', '*', and '/'. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed\\") return a / b else: raise ValueError(\\"Invalid operator. Supported operators are '+', '-', '*', and '/'\\")"},{"question":"Write a python function to check whether a string contains any duplicate characters or not","solution":"def has_duplicate_chars(s): Returns True if the string contains any duplicate characters, otherwise False. return len(s) != len(set(s))"},{"question":"Write a python function to remove duplicates from a list. You should solve the problem using two different approaches.","solution":"def remove_duplicates_method1(lst): Removes duplicates from the list using a set. return list(set(lst)) def remove_duplicates_method2(lst): Removes duplicates from the list while maintaining order. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"Write a python function to find the cumulative sum of all numbers in a given list.","solution":"def cumulative_sum(numbers): Returns the cumulative sum of a list of numbers. Parameters: numbers (list): A list of numbers. Returns: list: A list of cumulative sums. if not numbers: return [] cumulative_sums = [numbers[0]] for i in range(1, len(numbers)): cumulative_sums.append(cumulative_sums[-1] + numbers[i]) return cumulative_sums"},{"question":"Write a python function to count the total number of vowel appearances in a given string, considering both uppercase and lowercase vowels.","solution":"def count_vowels(s): Returns the total number of vowel appearances in the given string. It considers both uppercase and lowercase vowels. :param s: Input string :return: Number of vowels in the input string vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a python function to find the maximum depth of a binary tree. You should solve it recursively.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_depth(root): Returns the maximum depth of a binary tree rooted at the given node. if root is None: return 0 else: left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Write a python function to count the occurrences of a given word in a text. The text can be a long string containing multiple sentences. Here is my text: \\"The quick brown fox jumps over the lazy dog. The fox is running away from theもある\\" their anywhere.\\"\\".","solution":"def count_word_occurrences(text, word): Counts the occurrences of a given word in the text. Parameters: text (str): The text to search within. word (str): The word to count occurrences of. Returns: int: The number of times the word occurs in the text. # Convert both text and word to lowercase to make the search case insensitive text_lower = text.lower() word_lower = word.lower() # Split the text into words words = text_lower.split() # Count the occurrences return words.count(word_lower)"},{"question":"Write a python function to find the number of distinct prime factors of a given number n, where 1<=n<=10^8.","solution":"def count_distinct_prime_factors(n): Returns the number of distinct prime factors of n. if n < 2: return 0 distinct_factors = set() # Check for number of 2s if n is even while n % 2 == 0: distinct_factors.add(2) n = n // 2 # Check for odd factors for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: distinct_factors.add(i) n = n // i # This condition is to check if n itself is a prime number if n > 2: distinct_factors.add(n) return len(distinct_factors)"},{"question":"Write a python function to calculate the number of days between two dates and return the result in weeks.","solution":"from datetime import datetime def days_between_dates_in_weeks(date1, date2): Calculate the number of days between two dates and return the result in weeks. Parameters: - date1 (str): The first date in 'YYYY-MM-DD' format. - date2 (str): The second date in 'YYYY-MM-DD' format. Returns: - result_in_weeks (float): The number of days between the two dates in weeks. d1 = datetime.strptime(date1, '%Y-%m-%d') d2 = datetime.strptime(date2, '%Y-%m-%d') delta = abs((d2 - d1).days) result_in_weeks = delta / 7 return result_in_weeks"},{"question":"Write a python function to check if all the characters in a given string are in lowercase. If so, return True; otherwise, return False.","solution":"def is_all_lowercase(s: str) -> bool: Check if all characters in the string are in lowercase. return s.islower()"},{"question":"Write a python function to check if a given number is perfect cube or not. If it is, return its cube root otherwise return the number itself.","solution":"def is_perfect_cube(n): Checks if a given number n is a perfect cube. If n is a perfect cube, returns its cube root. Otherwise, returns the number itself. if n < 0: candidate = int(round(abs(n)**(1/3.0))) * -1 else: candidate = int(round(n**(1/3.0))) if candidate ** 3 == n: return candidate else: return n"},{"question":"Write a python function to find the number of distinct ways to reach the nth step of a staircase, where each time you can either climb 1 step or 2 steps.","solution":"def climb_stairs(n): Returns the number of distinct ways to reach the nth step of a staircase, where each time you can either climb 1 step or 2 steps. if n == 0 or n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Write a python function to calculate the sum of all perfect squares less than or equal to a given number \`n\`.","solution":"import math def sum_of_perfect_squares(n): Returns the sum of all perfect squares less than or equal to n. limit = int(math.sqrt(n)) return sum(i ** 2 for i in range(1, limit + 1))"},{"question":"Write a python function to find the longest substring with all unique characters.","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters in the given string s. last_seen = {} start = 0 max_len = 0 max_substr = \\"\\" for end in range(len(s)): if s[end] in last_seen: start = max(start, last_seen[s[end]] + 1) last_seen[s[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end+1] return max_substr"},{"question":"Write a python function to get a string with the first letter of each word capitalized in a sentence and return the capitalized string","solution":"def capitalize_first_letter(sentence): Returns a string with the first letter of each word capitalized in a sentence. return ' '.join(word.capitalize() for word in sentence.split())"},{"question":"Write a python function to find all the prime numbers up to a given number 'n'. The function should return a list of these prime numbers. For example, find_primes(10) should return [2, 3, 5, 7].","solution":"def find_primes(n): Returns a list of all prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Write a python function to find the area of a triangle given its base and height. The function should take two parameters, the base and the height of the triangle, and return the area. The area can be calculated using the formula 0.5 * base * height. Make sure to include a docstring with a brief description of the function.","solution":"def triangle_area(base, height): Returns the area of a triangle given its base and height. Parameters: base (float): The base length of the triangle. height (float): The height of the triangle. Returns: float: The area of the triangle. return 0.5 * base * height"},{"question":"Write a python function to read a 10x10 grid from a CSV file and find the sum of all elements in the grid.","solution":"import csv def read_and_sum_csv_grid(file_path): Reads a 10x10 grid from a CSV file and returns the sum of all elements in the grid. Parameters: file_path (str): The path to the CSV file. Returns: int: The sum of all elements in the grid. total_sum = 0 with open(file_path, mode='r') as file: csv_reader = csv.reader(file) for row in csv_reader: row_sum = sum(int(item) for item in row) total_sum += row_sum return total_sum"},{"question":"Write a python function to generate a Fibonacci sequence. The function should accept two arguments, the first argument is the length of the sequence and the second argument is the number of starting elements in the sequence. For example, if the length is 10 and the number of starting elements is 2, the function should generate a Fibonacci sequence starting with 0 and 1 (or any two numbers provided by the user) of length 10.","solution":"def generate_fibonacci(length, start_elements): Generates a Fibonacci sequence of a given length, starting with given start_elements. :param length: The length of the desired Fibonacci sequence. :param start_elements: A list of starting elements for the sequence. :return: A list representing the Fibonacci sequence. if length <= 0: return [] if len(start_elements) < 2: raise ValueError(\\"There must be at least 2 starting elements.\\") sequence = start_elements[:length] # Initialize the sequence with start_elements, trimmed to length if necessary while len(sequence) < length: next_element = sequence[-1] + sequence[-2] sequence.append(next_element) return sequence"},{"question":"Write a python function to detect if a string is a palindrome, allowing for case-insensitivity and ignoring spaces.","solution":"def is_palindrome(s): Detect if a string is a palindrome, allowing for case-insensitivity and ignoring spaces. Parameters: s (str): The string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. # Remove spaces and convert to lowercase filtered_string = ''.join(s.split()).lower() # Check if filtered string is equal to its reverse return filtered_string == filtered_string[::-1]"},{"question":"Write a python function to calculate the factorial of a number. The function should handle both positive integers and zero. If the input is negative, the function should return an appropriate error message. Additionally, the function should efficiently compute the factorial. Consider the constraints that the input will be within the range of a standard Python integer (-sys.maxsize - 1) to sys.maxsize.","solution":"def factorial(n): Computes the factorial of a non-negative integer n. If n is negative, returns an error message indicating that factorial is not defined for negative numbers. if not isinstance(n, int): return \\"Error: Input should be an integer.\\" if n < 0: return \\"Error: Factorial is not defined for negative numbers.\\" if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the closest number to the average of a list of numbers. This function should return the number itself if there is more than one closest number to the average.","solution":"def closest_to_average(lst): Returns the number closest to the average from the list. If there is more than one closest number, return the number itself. if not lst: return None average = sum(lst) / len(lst) closest_number = min(lst, key=lambda x: (abs(x - average), x)) return closest_number"},{"question":"Write a python function to determine the minimum number of swaps required to sort an array in non-decreasing order.","solution":"def min_swaps_to_sort(arr): Determine the minimum number of swaps required to sort an array in non-decreasing order. Args: arr : List[int] - The input array Returns: int - The minimum number of swaps required n = len(arr) # Create a list of tuples where each tuple contains the element and its index arr_pos = list(enumerate(arr)) # Sort the array by the element values arr_pos.sort(key=lambda it: it[1]) # To keep track of visited elements, initialize a visied array visited = [False] * n swaps = 0 for i in range(n): # If already visited or element is already in the right place, skip it if visited[i] or arr_pos[i][0] == i: continue # Calculate the size of the cycle cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 # Update the number of swaps needed if cycle_size > 1: swaps += (cycle_size - 1) return swaps"},{"question":"Write a python function to count the number of occurrences of a string within another string.","solution":"def count_occurrences(main_string, sub_string): Returns the number of occurrences of sub_string within main_string. return main_string.count(sub_string)"},{"question":"Write a python function to find the minimum size of a subset in a given array such that the sum of the elements in the subset is greater than or equal to half the sum of the entire array.","solution":"def min_subset_size(arr): Finds the minimum size of a subset such that the sum of the subset's elements is greater than or equal to half the sum of the entire array. arr_sum = sum(arr) half_sum = arr_sum / 2 arr_sorted = sorted(arr, reverse=True) subset_sum = 0 count = 0 for num in arr_sorted: subset_sum += num count += 1 if subset_sum >= half_sum: return count # If the above loop doesn't return, it means the array is empty return 0"},{"question":"Write a python function to check if two numbers are coprime or not. Two numbers are said to be coprime if their GCD (Greatest Common Divisor) is 1.","solution":"from math import gcd def are_coprime(a, b): Check if two numbers a and b are coprime. Two numbers are said to be coprime if their GCD (Greatest Common Divisor) is 1. Parameters: a (int): First number. b (int): Second number. Returns: bool: True if a and b are coprime, otherwise False. return gcd(a, b) == 1"},{"question":"Write a python function to get the lowest integer from a list that contains both positive and negative integers. The function should be named \`find_lowest_integer()\`.","solution":"def find_lowest_integer(nums): Returns the lowest integer from a list of integers. Parameters: nums (List[int]): A list of integers containing both positive and negative values. Returns: int: The lowest integer in the list. if not nums: raise ValueError(\\"The list is empty\\") return min(nums)"},{"question":"Write a python function to get the maximum repeated number in a list considering the frequency of each number.","solution":"from collections import Counter def get_max_repeated_number(nums): Returns the number that is repeated the maximum number of times in the list. If there are multiple such numbers, the smallest one is returned. if not nums: return None count = Counter(nums) max_frequency = max(count.values()) max_repeated_numbers = [num for num, freq in count.items() if freq == max_frequency] return min(max_repeated_numbers)"},{"question":"Write a python function to calculate the number of ways to distribute 'n' identical items among 'k' distinct groups.","solution":"def distribute_items(n, k): Returns the number of ways to distribute 'n' identical items among 'k' distinct groups. This problem can be solved using the combinatorial \\"stars and bars\\" theorem. Formula: C(n + k - 1, k - 1) = (n + k - 1)! / [(k - 1)! * n!] Parameters: - n (int): Number of identical items - k (int): Number of distinct groups Returns: - int: Number of ways to distribute items from math import comb return comb(n + k - 1, k - 1)"},{"question":"Write a python function to filter a list of names based on a given substring. The function should return a new list containing only the names that contain the substring.","solution":"def filter_names(names, substring): Filters a list of names based on a given substring. Parameters: - names: List of strings representing names. - substring: The substring to filter the names. Returns: - A list of names containing the substring. return [name for name in names if substring in name]"},{"question":"Write a python function to find the middle element in a list on both sides (if even number of elements) or return the middle one. For example, the function should return three elements for list [1,2,3,4,5].","solution":"def find_middle_elements(lst): Returns the middle element(s) of the list. If the list has an odd number of elements, it returns the single middle one. If the list has an even number of elements, it returns the two middle elements. length = len(lst) if length == 0: return [] elif length % 2 == 1: # Odd number of elements, return the middle one mid_index = length // 2 return [lst[mid_index]] else: # Even number of elements, return the two middle ones mid_index1 = (length // 2) - 1 mid_index2 = length // 2 return [lst[mid_index1], lst[mid_index2]]"},{"question":"Write a python function to remove all non-alphabetic characters from a given string and return the cleaned string.","solution":"def remove_non_alphabetic_characters(input_string): Removes all non-alphabetic characters from the given string. Parameters: input_string (str): The string from which non-alphabetic characters are to be removed. Returns: str: A string containing only alphabetic characters. return ''.join(char for char in input_string if char.isalpha())"},{"question":"Write a python function to convert a string to a list of bytes.","solution":"def string_to_bytes(s): Converts a string to a list of bytes. Args: s (str): The input string. Returns: List[int]: A list of byte values. return list(s.encode())"},{"question":"Write a python function to compute the nth Fibonacci number using recursion. The function should be defined in a class named \`FibonacciCalculator\`. The function should handle the base cases (n=0 and n=1) properly, and use recursion for other cases. Additionally, include a docstring with a brief description of the function.","solution":"class FibonacciCalculator: @staticmethod def fibonacci(n): Computes the nth Fibonacci number using recursion. Parameters: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number. Raises: ValueError: If n is negative. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 else: return FibonacciCalculator.fibonacci(n-1) + FibonacciCalculator.fibonacci(n-2)"},{"question":"Write a python function to check the validity of an IP address","solution":"import re def is_valid_ip(ip): Returns True if the string \`ip\` is a valid IP address, False otherwise. pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9]).){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]?[0-9])') return bool(pattern.match(ip))"},{"question":"Write a python function to count the frequency of elements in an array and return a dictionary with elements as keys and their frequencies as values.","solution":"def count_frequencies(array): Counts the frequency of elements in the given array and returns a dictionary with elements as keys and their frequencies as values. :param array: List of elements to count frequencies. :type array: list :return: Dictionary with elements as keys and frequencies as values. :rtype: dict frequency_dict = {} for element in array: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Write a python function to check if the given graph is bipartite. A graph is bipartite if we can color its vertices into two different colors such that no two adjacent vertices share the same color. The graph is represented as an adjacency list.","solution":"from collections import deque def is_bipartite(graph): Check if the given graph is bipartite. Parameters: graph (dict): The adjacency list representing the graph. Returns: bool: True if the graph is bipartite, otherwise False. color = {} def bfs(node): queue = deque([node]) color[node] = 0 while queue: current = queue.popleft() current_color = color[current] next_color = 1 - current_color for neighbor in graph[current]: if neighbor not in color: color[neighbor] = next_color queue.append(neighbor) elif color[neighbor] == current_color: return False return True for node in graph: if node not in color: if not bfs(node): return False return True"},{"question":"Write a python function to count the number of nodes in a binary search tree (BST) that lie within a given range. The function should take the root of the BST and the range as input and return the count of such nodes.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def count_nodes_in_range(root, low, high): Count the number of nodes in a BST that lie within a given range [low, high]. if not root: return 0 if root.val < low: # All nodes in the left subtree are less than root.val, and hence less than 'low' return count_nodes_in_range(root.right, low, high) elif root.val > high: # All nodes in the right subtree are greater than root.val, and hence greater than 'high' return count_nodes_in_range(root.left, low, high) else: # Count the root node and continue in both subtrees return 1 + count_nodes_in_range(root.left, low, high) + count_nodes_in_range(root.right, low, high)"},{"question":"Write a python function to find the nth Fibonacci number. The function should be efficient and avoid redundant calculations. You can use recursion or memoization to achieve this.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization to avoid redundant calculations. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to generate the first 10 Fibonacci numbers. The Fibonacci sequence starts with 0 and 1, and each number after that is the sum of the two preceding ones.","solution":"def generate_fibonacci(n=10): Generate the first n Fibonacci numbers. Parameters: n (int): the number of Fibonacci numbers to generate (default is 10). Returns: list: a list containing the first n Fibonacci numbers. if n <= 0: return [] fibonacci_sequence = [0, 1] while len(fibonacci_sequence) < n: fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence[:n]"},{"question":"Write a python function to extract the first letter of each word from a string.","solution":"def extract_first_letters(input_string): Returns a string containing the first letter of each word from the input string. Parameters: input_string (str): The string from which to extract the first letters of each word. Returns: str: A string of the first letters of each word. words = input_string.split() first_letters = [word[0] for word in words] return ''.join(first_letters)"},{"question":"Write a python function to merge two sorted arrays and return the merged array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array arr2 (list): Second sorted array Returns: list: Merged sorted array merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to find the longest palindromic substring in a given string. A palindromic substring is a string that reads the same backward as forward. For example, in the string \\"babad\\", \\"aba\\" and \\"bab\\" are palindromic substrings. How can I write a function that finds the longest one?","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s or len(s) == 1: return s longest = \\"\\" def expand_around_center(left, right): nonlocal longest while left >= 0 and right < len(s) and s[left] == s[right]: current_substr = s[left:right + 1] if len(current_substr) > len(longest): longest = current_substr left -= 1 right += 1 for i in range(len(s)): expand_around_center(i, i) expand_around_center(i, i + 1) return longest"},{"question":"Write a python function to remove all the non-alphanumeric characters from a given string. You should keep spaces between alphanumeric characters intact. Also, ensure that all spaces are reduced to a single space.","solution":"import re def clean_string(s): Removes all non-alphanumeric characters from a given string and ensures that all spaces between alphanumeric characters are reduced to a single space. # Use regular expression to replace non-alphanumeric characters with an empty string cleaned = re.sub(r'[^a-zA-Z0-9s]', '', s) # Reduce multiple spaces to a single space cleaned_single_space = re.sub(r's+', ' ', cleaned) # Strip leading and trailing spaces return cleaned_single_space.strip()"},{"question":"Write a python function to generate a matrix of a given dimension. The function should fill this matrix with the numbers from a given sequence in a spiral order. The sequence is provided as a list of integers. The function should handle cases where the sequence is shorter or longer than the number of cells in the matrix.","solution":"def generate_spiral_matrix(rows, cols, sequence): Generates a matrix of given dimensions \`rows\` x \`cols\` and fills it with the numbers from the given list \`sequence\` in spiral order. Parameters: rows (int): Number of rows in the matrix. cols (int): Number of columns in the matrix. sequence (list): List of integers to fill the matrix with. Returns: list: A 2D list representing the matrix filled in spiral order. matrix = [[0] * cols for _ in range(rows)] direction = [(0, 1), (1, 0), (0, -1), (-1, 0)] row, col, dir_idx = 0, 0, 0 seq_idx = 0 for _ in range(rows * cols): matrix[row][col] = sequence[seq_idx] if seq_idx < len(sequence) else 0 seq_idx += 1 next_row = row + direction[dir_idx][0] next_col = col + direction[dir_idx][1] if 0 <= next_row < rows and 0 <= next_col < cols and matrix[next_row][next_col] == 0: row, col = next_row, next_col else: dir_idx = (dir_idx + 1) % 4 row += direction[dir_idx][0] col += direction[dir_idx][1] return matrix"},{"question":"Write a python function to find the length of the longest common subsequence (LCS) between two strings using dynamic programming. The function should take two parameters: the two strings and return the length of their LCS.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between two strings. # Create a 2D array to store lengths of subsequence m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array in bottom up manner for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Write a python function to take a list of integers as input and return a list that contains only the even numbers from the original list.","solution":"def filter_even_numbers(int_list): Returns a list containing only the even numbers from the original list. :param int_list: List of integers. :return: List of even integers. return [num for num in int_list if num % 2 == 0]"},{"question":"Write a python function to find the transpose of a matrix. The function should take a 2D list (list of lists) as input and return the transposed matrix.","solution":"def transpose(matrix): Return the transpose of a given 2D matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Write a python function to count the unique elements in a list and return the count along with a list of these unique elements.","solution":"def count_unique_elements(lst): Returns the count of unique elements in the list along with the list of unique elements. Args: lst (list): A list of elements Returns: tuple: A tuple where the first element is the count of unique elements and the second element is a list of these unique elements unique_elements = list(set(lst)) return len(unique_elements), unique_elements"},{"question":"Write a python function to reverse a list in place. Ensure the function does not use any additional data structures and modifies the list directly.","solution":"def reverse_list_in_place(lst): Reverses a list in place without using any additional data structures. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to calculate the total sum of a given list of numbers and return the result. The list can contain both integers and floating-point numbers.","solution":"def total_sum(numbers): Returns the total sum of a given list of numbers (integers and floating-point numbers). return sum(numbers)"},{"question":"Write a python function to calculate the sum of the first \`n\` natural numbers efficiently.","solution":"def sum_natural_numbers(n): Returns the sum of the first n natural numbers. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") return (n * (n + 1)) // 2"},{"question":"Write a python function to find the longest common substring in two strings. You can use Dynamic Programming to solve this problem.","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] longest_length = 0 longest_end_pos = 0 for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest_length: longest_length = dp[i][j] longest_end_pos = i else: dp[i][j] = 0 return s1[longest_end_pos - longest_length: longest_end_pos]"},{"question":"Write a python function to get the number of users who are active in a community where the last active time of users are recorded in a list. The list contains the timestamps of the last active time for each user in seconds since the Unix epoch (January 1, 1970). Assume that a user is considered active if their last active time is within the last 30 minutes.","solution":"import time def get_active_users(last_active_times, current_time=None): Returns the number of active users in the community. A user is considered active if their last active time is within the last 30 minutes from the current time. Parameters: - last_active_times: List of timestamps (in seconds since the Unix epoch) representing the last active time of users. - current_time: The current time in seconds since the Unix epoch. If None, the current system time is used. Returns: - int: Number of active users. if current_time is None: current_time = time.time() thirty_minutes = 30 * 60 # 30 minutes in seconds active_users_count = sum(1 for last_active in last_active_times if current_time - last_active <= thirty_minutes) return active_users_count"},{"question":"Write a python function to find the ASCII value of the first character of a string.","solution":"def first_char_ascii(s): Returns the ASCII value of the first character of the string s. If the string is empty, it raises ValueError. if not s: raise ValueError(\\"The input string is empty.\\") return ord(s[0])"},{"question":"Write a python function to generate the first \`n\` prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.","solution":"def generate_primes(n): Generates the first n prime numbers. :param n: The number of prime numbers to generate. :return: A list containing the first n prime numbers. if n <= 0: return [] primes = [] candidate = 2 # Start checking for primes from 2 while len(primes) < n: is_prime = True for p in primes: if candidate % p == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Write a python function to calculate the area of a circle given the radius. You need to use the formula \`A = πr^2\` where \`A\` is the area and \`r\` is the radius. Use the \`math\` module for the value of \`π\`.","solution":"import math def area_of_circle(radius): Calculate the area of a circle given the radius. Args: radius (float): The radius of the circle. Returns: float: The area of the circle. return math.pi * radius**2"},{"question":"Write a python function to detect a loop in a singly linked list. The function should return \`True\` if there is a loop, and \`False\` otherwise.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next_node = next_node def has_cycle(head): Detects if there is a cycle in a singly linked list. :param head: ListNode, the head of the singly linked list. :return: bool, True if there is a cycle, False otherwise. slow = head fast = head while fast and fast.next_node: slow = slow.next_node fast = fast.next_node.next_node if slow == fast: return True return False"},{"question":"Write a python function to find all the prime numbers within an interval [l, r].","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes_in_interval(l, r): Returns a list of all prime numbers in the interval [l, r]. primes = [] for num in range(l, r + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write a python function to find all numbers in a given list that are divisible by 3 but not by 5.","solution":"def find_divisible_by_3_not_by_5(numbers): Returns a list of numbers from the input list that are divisible by 3 but not by 5. :param numbers: List of integers. :return: List of integers divisible by 3 but not by 5. return [num for num in numbers if num % 3 == 0 and num % 5 != 0]"},{"question":"Write a python function to find the number of distinct islands in a grid. An island is surrounded by water, and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.","solution":"def num_distinct_islands(grid): Returns the number of distinct islands in the grid. An island is a group of '1's connected horizontally or vertically. def dfs(x, y, island_shape, direction): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] != '1': return grid[x][y] = '0' island_shape.append(direction) dfs(x + 1, y, island_shape, 'd') # down dfs(x - 1, y, island_shape, 'u') # up dfs(x, y + 1, island_shape, 'r') # right dfs(x, y - 1, island_shape, 'l') # left island_shape.append('b') # backtrack unique_islands = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': island_shape = [] dfs(i, j, island_shape, 's') # start unique_islands.add(tuple(island_shape)) return len(unique_islands)"},{"question":"Write a python function to check if a number is divisible by another number and return a boolean result.","solution":"def is_divisible(a, b): Returns True if 'a' is divisible by 'b', otherwise False. if b == 0: raise ValueError(\\"Division by zero is not allowed.\\") return a % b == 0"},{"question":"Write a python function to find the third smallest element in a list of numbers. If there is no such element, return \`None\`.","solution":"def third_smallest(numbers): Returns the third smallest element in the list of numbers. If there is no third smallest element, returns None. if len(numbers) < 3: return None unique_numbers = list(set(numbers)) # Remove duplicates if len(unique_numbers) < 3: return None unique_numbers.sort() return unique_numbers[2]"},{"question":"Write a python function to calculate the sum of an arbitrary number of integers and return the result.","solution":"def sum_of_integers(*args): Returns the sum of any number of integer arguments. return sum(args)"},{"question":"Write a python function to solve the equation of the form 2x^2 + 4x - 6 = 0, using the quadratic formula.","solution":"import math def solve_quadratic(a, b, c): Solves the quadratic equation of the form ax^2 + bx + c = 0. Args: a, b, c: Coefficients of the quadratic equation. Returns: A tuple of two solutions. discriminant = b ** 2 - 4 * a * c if discriminant < 0: return None, None sqrt_discriminant = math.sqrt(discriminant) x1 = (-b + sqrt_discriminant) / (2 * a) x2 = (-b - sqrt_discriminant) / (2 * a) return x1, x2 def solve_given_quadratic(): return solve_quadratic(2, 4, -6)"},{"question":"Write a python function to count the frequency of elements in a list. Here is the function signature: \`def count_frequency(lst)\`: the function takes a list of elements as input and returns a dictionary where the keys are the elements from the list and the values are the frequencies of these elements. If the list is empty, the function should return an empty dictionary. Here is an example call to the function: \`count_frequency([1, 2, 3, 2, 1, 3, 3])\` should return \`{1: 2, 2: 2, 3: 3}\`.","solution":"def count_frequency(lst): Returns a dictionary with the frequency count of elements in the list. Parameters: lst (list): The list of elements Returns: dict: A dictionary with elements as keys and their frequencies as values frequency_dict = {} for element in lst: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Write a python function to find the two numbers that add up to a specific target. You can assume that the list has no duplicates and each element should only be used once. For example, if the list \`nums = [2, 7, 11, 15]\` and the target is \`9\`, the function should return the indices \`[0, 1]\`.","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target. Args: nums: list of integers target: integer target sum Returns: A list of two integers representing the indices of the numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None # if there is no solution"},{"question":"Write a python function to find the element that appears most frequently in an array. If there are multiple elements with the same highest frequency, return the smallest one.","solution":"def most_frequent_element(arr): Returns the element that appears most frequently in the array. If multiple elements have the same highest frequency, return the smallest one. if not arr: return None from collections import Counter count = Counter(arr) max_frequency = max(count.values()) most_frequent_elements = [key for key, value in count.items() if value == max_frequency] return min(most_frequent_elements)"},{"question":"Write a python function to find whether the string \`s\` contains any duplicate characters. If it does, return \`True\` else \`False\`.","solution":"def has_duplicate_characters(s): Checks if the string s contains any duplicate characters. Parameters: s (str): The string to check. Returns: bool: True if there are duplicate characters, False otherwise. char_set = set() for char in s: if char in char_set: return True char_set.add(char) return False"},{"question":"Write a python function to find the first missing positive integer in a list that contains both positive and negative integers.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an unsorted list of integers. if not nums: return 1 n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to remove all duplicates from a list of integers, keeping only the first occurrence of each integer.","solution":"def remove_duplicates(lst): Removes all duplicates from a list of integers, keeping only the first occurrence of each integer. Args: lst: List of integers. Returns: A list of integers with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to count how many palindromic substrings are in a given string \`S\`. A palindrome is a sequence that reads the same forwards and backwards. A substring is a contiguous sequence of characters within a string.","solution":"def count_palindromic_substrings(S): Returns the count of palindromic substrings in the given string S. n = len(S) count = 0 def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return count"},{"question":"Write a python function to reverse a string without using any built-in functions, recursion, or slicing. Ensure the function handles all possible exceptions and edge cases.","solution":"def reverse_string(s): Returns the reversed string of s without using any built-in functions, recursion, or slicing. if not isinstance(s, str): raise ValueError(\\"The input must be a string\\") result = \\"\\" for char in s: result = char + result return result"},{"question":"Write a python function to calculate the factorial of a given number. Make sure your function includes a docstring that explains its purpose, parameters, and return value. Also, include a simple check function with a couple of data points to verify the correctness of your factorial function.","solution":"def factorial(n): Calculates the factorial of a given number n. Parameters: n (int): The number to calculate the factorial of. Should be a non-negative integer. Returns: int: The factorial of the number n. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to write a file with a given string content.","solution":"def write_to_file(file_path, content): Writes the given string content to a file specified by file_path. :param file_path: Path to the file where the content should be written. :param content: String content to be written in the file. with open(file_path, 'w') as file: file.write(content)"},{"question":"Write a python function to generate all the unique combinations of a given list of items.","solution":"from itertools import combinations def unique_combinations(items): Generate all unique combinations of items in the given list. Parameters: items (list): The list of items to generate combinations from. Returns: list: A list of tuples, each tuple representing a unique combination. result = [] n = len(items) for r in range(1, n+1): result.extend(combinations(items, r)) return result"},{"question":"Write a python function to find the maximum AND sum of all possible subsets of a given list. The AND sum of a subset is the result of performing the AND operation on all element pairs in the subset.","solution":"from functools import reduce from itertools import combinations from typing import List def max_and_sum_subsets(nums: List[int]) -> int: Finds the maximum AND sum of all possible subsets of a given list. The AND sum of a subset is the result of performing the AND operation on all element pairs in the subset. def and_sum(subset): # Perform AND operation across all pairs in the subset return reduce(lambda x, y: x & y, subset) max_and_sum = 0 n = len(nums) for r in range(1, n+1): for subset in combinations(nums, r): max_and_sum = max(max_and_sum, and_sum(subset)) return max_and_sum"},{"question":"Write a python function to find the minimum cost to connect all the ropes in given list such that each operation (connecting two ropes) has a cost equal to the sum of their lengths. Assume that we always choose the two ropes with the minimum lengths to connect.","solution":"import heapq def min_cost_to_connect_ropes(ropes): Given a list of rope lengths, returns the minimum cost to connect all the ropes into one. The cost to connect two ropes of lengths A and B is A + B. if not ropes: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"Write a python function to sort a list of dictionaries by a specific key in each dictionary. The key to sort by is passed as an argument to the function. For example, you should be able to sort a list of dictionaries by the \\"name\\" or \\"age\\" key.","solution":"def sort_dicts_by_key(lst, key): Sorts a list of dictionaries by the specified key. Parameters: lst (list): A list of dictionaries. key (str): The key to sort the dictionaries by. Returns: list: A sorted list of dictionaries. return sorted(lst, key=lambda x: x[key])"},{"question":"Write a python function to generate all possible subsets of a given list (the empty set is also a subset).","solution":"from itertools import chain, combinations def all_subsets(lst): Generate all possible subsets of a given list, including the empty set. return list(chain.from_iterable(combinations(lst, r) for r in range(len(lst) + 1)))"},{"question":"Write a python function to replace all the occurrences of a given string in a text with another string using regular expressions.","solution":"import re def replace_string(text, old, new): Replaces all occurrences of a given string in a text with another string using regular expressions. :param text: The text in which to replace the string. :param old: The string to be replaced. :param new: The string that will replace the old string. :return: The modified text with the old string replaced by the new string. return re.sub(re.escape(old), new, text)"},{"question":"Write a python function to implement a bubble sort algorithm and demonstrate its usage with a sample list.","solution":"def bubble_sort(arr): Sorts an array of numbers using bubble sort algorithm. Parameters: arr (list): List of elements to be sorted. Returns: list: Sorted list of elements. n = len(arr) for i in range(n): swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True if not swapped: break return arr # Sample list to demonstrate bubble sort sample_list = [64, 34, 25, 12, 22, 11, 90] sorted_list = bubble_sort(sample_list) sorted_list"},{"question":"Write a python function to toggle all bits of a number using bitwise operators.","solution":"def toggle_bits(number: int) -> int: Toggle all bits of the given number using bitwise NOT operator. return ~number"},{"question":"Write a python function to find all unique occurrences of a substring in a string. Your function should return a dictionary where the keys are the unique substrings and the values are lists of their starting indices. Ensure that your function handles overlapping occurrences as well.","solution":"def find_substring_occurrences(s, substring): Returns a dictionary where the keys are the unique substrings and the values are lists of their starting indices in the string \`s\`. Handles overlapping occurrences. occurrences = {} len_sub = len(substring) for i in range(len(s) - len_sub + 1): if s[i:i + len_sub] == substring: if substring not in occurrences: occurrences[substring] = [] occurrences[substring].append(i) return occurrences"},{"question":"Write a python function to reverse the order of characters in a string without using any built-in functions or slicing.","solution":"def reverse_string(s): Reverses the order of characters in a string. Args: s (str): The input string to be reversed. Returns: str: The reversed string. reversed_str = '' for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Write a python function to find the intersection of two sets without using the built-in intersection method.","solution":"def set_intersection(set1, set2): Returns the intersection of two sets without using the built-in intersection method. intersection = set() for element in set1: if element in set2: intersection.add(element) return intersection"},{"question":"Write a python function to check if a number is a perfect square. A perfect square is an integer that is the square of an integer. For example, 16 is a perfect square because it is 4^2. How can you write a function that checks this efficiently?","solution":"import math def is_perfect_square(num): Check if a number is a perfect square. A perfect square is an integer that is the square of an integer. Parameters: num (int): The number to be checked. Returns: bool: True if the number is a perfect square, False otherwise. if num < 0: return False sqrt_num = math.isqrt(num) return sqrt_num * sqrt_num == num"},{"question":"Write a python function to find the second largest number in a list. If there is no distinct second largest, return the largest number.","solution":"def second_largest(nums): Returns the second largest number in a list. If there is no distinct second largest, returns the largest number. # Convert the list to a set to remove duplicates unique_nums = list(set(nums)) # If there's only one unique item, return it (since there's no second largest) if len(unique_nums) == 1: return unique_nums[0] # Sort the unique numbers in descending order unique_nums.sort(reverse=True) # The second item in this sorted list is the second largest number return unique_nums[1]"},{"question":"Write a python function to merge two sorted lists without using any extra space. The solution should efficiently merge the lists by ensuring the merged list is sorted and do not use any additional lists for the process.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list without using extra space. The merged list is stored in list1. n = len(list1) m = len(list2) # Traverse both lists and compare elements i, j = 0, 0 while i < n and j < m: if list1[i] <= list2[j]: i += 1 else: list1.insert(i, list2[j]) j += 1 n += 1 i += 1 while j < m: list1.append(list2[j]) j += 1 return list1"},{"question":"Write a python function to convert temperatures from Celsius to Fahrenheit. The function should take one parameter temperature_celsius and return the temperature in Fahrenheit.","solution":"def celsius_to_fahrenheit(temperature_celsius): Converts temperature from Celsius to Fahrenheit. :param temperature_celsius: Temperature in Celsius :return: Temperature in Fahrenheit return (temperature_celsius * 9/5) + 32"},{"question":"Write a python function to find the top 10 most frequent words in a given string.","solution":"from collections import Counter import re def top_10_frequent_words(s): Returns the top 10 most frequent words in the given string \`s\`. # Remove non-alphanumeric characters and convert to lowercase words = re.findall(r'w+', s.lower()) # Get word frequency count word_count = Counter(words) # Get the top 10 most common words most_common = word_count.most_common(10) return [word for word, _ in most_common]"},{"question":"Write a python function to filter words with length greater than 5 and return a list of these words.","solution":"def filter_long_words(words): Filters and returns a list of words that have more than 5 characters. Parameters: words (list): A list of strings Returns: list: A list of strings that have more than 5 characters. return [word for word in words if len(word) > 5]"},{"question":"Write a python function to convert a list of integers into a binary strings. Each integer should be represented as a binary string in the output list.","solution":"def integers_to_binary_strings(integers): Converts a list of integers into a list of binary strings. Parameters: integers (list[int]): List of integers to convert. Returns: list[str]: List of binary string representations. return [bin(num)[2:] for num in integers]"},{"question":"Write a python function to find and print all the list elements that are divisible by both 3 and 5.","solution":"def find_divisible_by_3_and_5(lst): Finds and returns all elements in the list that are divisible by both 3 and 5. Args: lst: List of integers. Returns: A list of integers from the input list that are divisible by both 3 and 5. return [x for x in lst if x % 15 == 0]"},{"question":"Write a python function to read from a CSV file and return the number of rows in it. Here, \`csvFilePath\` is a string that represents the file path to the CSV file.","solution":"import csv def count_rows_in_csv(csvFilePath): Reads from a CSV file and returns the number of rows in it. :param csvFilePath: str, path to the CSV file :return: int, number of rows in the CSV file with open(csvFilePath, mode='r', newline='') as file: reader = csv.reader(file) return sum(1 for row in reader)"},{"question":"Write a python function to check if a binary tree is symmetric, meaning the binary tree is the same when viewed from the left side and the right side.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_symmetric(root): Check if a binary tree is symmetric. A binary tree is symmetric if it is a mirror reflection of itself. This function checks if the given tree is symmetric. :param root: TreeNode, the root of the binary tree :return: bool, True if the binary tree is symmetric, False otherwise if not root: return True def is_mirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root.left, root.right)"},{"question":"Write a python function to find the sum of all the smallest numbers in a matrix. The matrix is a list of lists where each inner list represents a row in the matrix.","solution":"def sum_of_smallest_numbers(matrix): Returns the sum of the smallest numbers in each row of the matrix. if not matrix or not all(matrix): return 0 return sum(min(row) for row in matrix)"},{"question":"Write a python function to check if a number is divisible by both 3 and 7. How can this be achieved using a simple if-else statement in Python?","solution":"def is_divisible_by_3_and_7(number): Returns True if 'number' is divisible by both 3 and 7, otherwise returns False. if number % 3 == 0 and number % 7 == 0: return True else: return False"},{"question":"Write a python function to find all the numbers in a range that are divisible by both 3 and 5.","solution":"def find_divisible_by_3_and_5(start, end): Returns a list of numbers in the range from start to end that are divisible by both 3 and 5. result = [] for num in range(start, end + 1): if num % 3 == 0 and num % 5 == 0: result.append(num) return result"},{"question":"Write a python function to calculate the product of all prime numbers in a given list. If there are no prime numbers, return \`0\`.","solution":"def is_prime(num): Helper function to check whether a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def product_of_primes(numbers): Returns the product of all prime numbers in the given list. If there are no prime numbers, returns 0. primes = [num for num in numbers if is_prime(num)] if not primes: return 0 product = 1 for prime in primes: product *= prime return product"},{"question":"Write a python function to implement linear search in an array.","solution":"def linear_search(arr, target): Performs a linear search on the given array to find the target value. Parameters: arr (list): List of elements to search through. target (any): The value to be searched for. Returns: int: The index of the target value in the array if found, otherwise -1. for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Write a python function to check if a continuous sequence of integers contains a number that is not a power of 2.","solution":"def contains_non_power_of_2(sequence): Returns True if the sequence contains at least one number that is not a power of 2, otherwise False. def is_power_of_2(n): return n > 0 and (n & (n - 1)) == 0 return any(not is_power_of_2(x) for x in sequence)"},{"question":"Write a python function to implement the classic game of Nim. In Nim, n players take turns removing objects from non-empty heaps. On each turn, a player must remove at least one object, and may remove any number of objects from a single non-empty heap. The player who removes the last object wins.","solution":"class NimGame: def __init__(self, heap_size): Initialize the game with a given heap size. self.heap_size = heap_size def remove_objects(self, num_objects): Simulates a player removing objects from the heap. if num_objects < 1 or num_objects > self.heap_size: raise ValueError(\\"Invalid number of removed objects.\\") self.heap_size -= num_objects def is_game_over(self): Check if the game is over (i.e., the heap_size is zero). return self.heap_size == 0 def get_heap_size(self): Get the current number of objects in the heap. return self.heap_size"},{"question":"Write a python function to generate a random password with a given length. The password should include at least one uppercase letter, one lowercase letter, one digit, and one special character.","solution":"import random import string def generate_password(length): Generates a random password with the given length. The password includes at least one uppercase letter, one lowercase letter, one digit, and one special character. if length < 4: raise ValueError(\\"Length must be at least 4 to accommodate all character types.\\") password_chars = [] password_chars.append(random.choice(string.ascii_uppercase)) password_chars.append(random.choice(string.ascii_lowercase)) password_chars.append(random.choice(string.digits)) password_chars.append(random.choice(string.punctuation)) if length > 4: password_chars.extend(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length-4)) random.shuffle(password_chars) return ''.join(password_chars)"},{"question":"Write a python function to count the occurrences of an alphabet in a string. The function should take two arguments: the string and the alphabet to be counted. The function should return the count of the alphabet in the string. If the alphabet is not found, return 0.","solution":"def count_alphabet_occurrences(string, alphabet): Returns the count of the occurrences of an alphabet in the given string. :param string: The string in which to count the alphabet occurrences. :param alphabet: The alphabet character to count in the string. :return: The count of the alphabet in the string. if not string or not alphabet or len(alphabet) != 1: return 0 return string.count(alphabet)"},{"question":"Write a python function to find the number of elements in a list that are either less than 10 or greater than 50, but not both.","solution":"def count_elements(lst): Returns the number of elements in the list that are either less than 10 or greater than 50. count = 0 for element in lst: if (element < 10) != (element > 50): count += 1 return count"},{"question":"Write a python function to get the minimum value in a list. You can only use the basic list operations and built-in comparisons.","solution":"def get_minimum_value(lst): Returns the minimum value in a list. Assumes the list is non-empty. if not lst: raise ValueError(\\"The list is empty.\\") min_value = lst[0] for value in lst[1:]: if value < min_value: min_value = value return min_value"},{"question":"Write a python function to identify the most occurring element in an array and return it. If there are multiple elements with the same highest frequency, return any one of them.","solution":"from collections import Counter def most_occurring_element(arr): Returns the most occurring element in the array. If there are multiple elements with the same highest frequency, returns any one of them. if not arr: return None # Handling empty array edge case count = Counter(arr) most_common_element, _ = count.most_common(1)[0] return most_common_element"},{"question":"Write a python function to clean data from a JSON file, main task is to remove all entries where the value of a specific field is null or empty. To achieve this, iterate over the records and keep only those records where the value of the field \\"status\\" ( filed name is string ) is not null and not an empty string.","solution":"import json def clean_data(json_data, field=\\"status\\"): Removes all entries from the list where the specified field's value is null or an empty string. Args: json_data (list): List of dictionaries containing the data. field (str): The field to check for null or empty values. Returns: list: Cleaned list of dictionaries. cleaned_data = [entry for entry in json_data if entry.get(field) not in (None, \\"\\")] return cleaned_data"},{"question":"Write a python function to reverse the strings in a list without using any built-in functions such as \`reverse()\` or slicing. Additionally, you should ensure that your function works for any mutable sequence, not just lists. You can convert the sequence to a list for working purposes but any conversions back to the original sequence type (e.g., converting a list back to a tuple) should be done at the end.","solution":"def reverse_sequence(seq): Reverses the elements of a mutable sequence (e.g., list, tuple) without using built-in reverse functions or slicing. Parameters: seq (sequence): The input sequence such as a list or a tuple. Returns: sequence: The reversed sequence, same type as the input. # Convert the sequence to a list for manipulation seq_list = list(seq) # Initialize pointers for the start and end of the list start, end = 0, len(seq_list) - 1 # Perform the in-place reversal while start < end: # Swap the elements at the start and end seq_list[start], seq_list[end] = seq_list[end], seq_list[start] # Move the pointers towards the center start += 1 end -= 1 # Convert the list back to the original sequence type if necessary if isinstance(seq, tuple): return tuple(seq_list) else: return seq_list"},{"question":"Write a python function to calculate the sum and product of numbers in a list. The function should return both sums and products.","solution":"def sum_and_product(numbers): Returns the sum and product of the numbers in the given list. :param numbers: List of numbers :return: A tuple containing the sum and product of the numbers total_sum = sum(numbers) total_product = 1 for number in numbers: total_product *= number return total_sum, total_product"},{"question":"Write a python function to return the nth Fibonacci number. The Fibonacci sequence is defined by the recurrence relation: F(n) = F(n-1) + F(n-2), with seed values F(0) = 0 and F(1) = 1. The function should handle large values of n efficiently.","solution":"def fibonacci(n): Returns the nth Fibonacci number. The Fibonacci sequence is defined by the recurrence relation: F(n) = F(n-1) + F(n-2), with seed values F(0) = 0 and F(1) = 1. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the longest increasing subsequence (LIS) in a sequence of numbers. The LIS is the longest subsequence of a given sequence in which the elements are in strictly increasing order. For example, in the sequence [10, 22, 9, 33, 21, 50, 41, 60], the longest increasing subsequence is [10, 22, 33, 50, 60].","solution":"def longest_increasing_subsequence(sequence): Returns the longest increasing subsequence in a given sequence of numbers. if not sequence: return [] n = len(sequence) dp = [1] * n pred = [-1] * n for i in range(1, n): for j in range(i): if sequence[i] > sequence[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 pred[i] = j max_len = max(dp) lis_index = dp.index(max_len) lis = [] while lis_index != -1: lis.append(sequence[lis_index]) lis_index = pred[lis_index] return lis[::-1]"},{"question":"Write a python function to check if a given list is a palindrome. A palindrome is a sequence that reads the same backward as forward. For example, \\"racecar\\" is a palindrome. Here is a list: \`[1, 2, 3, 2, 1]\`. Write a function that will return \`True\` if the list is a palindrome, and \`False\` otherwise.","solution":"def is_palindrome(lst): Checks if the given list is a palindrome. Parameters: lst (list): The list to check. Returns: bool: True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Write a python function to find the largest sum of contiguous subarrays using Kadane's Algorithm. Also, implement a mechanism to return the start and end index of the subarray.","solution":"def kadane(arr): Returns the largest sum of contiguous subarray using Kadane's Algorithm along with the start and end indexes. if not arr: return 0, -1, -1 max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if arr[i] > current_sum + arr[i]: current_sum = arr[i] s = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, start, end"},{"question":"Write a python function to solve the longest increasing subsequence problem (LIS).","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of numbers. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to find the length of the longest suffix of the input string that is a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" is a palindrome.","solution":"def longest_palindromic_suffix(s): Returns the length of the longest palindrome suffix of the input string. def is_palindrome(sub): return sub == sub[::-1] max_len = 0 for i in range(len(s)): if is_palindrome(s[i:]): max_len = len(s) - i break return max_len"},{"question":"Write a python function to generate the nth Fibonacci number. The function should be efficient and consider edge cases.","solution":"def fibonacci(n): Returns the nth Fibonacci number. This function uses an iterative approach for efficiency. if n <= 0: raise ValueError('n must be a positive integer') elif n == 1: return 0 elif n == 2: return 1 fib_prev, fib_curr = 0, 1 for _ in range(2, n): fib_prev, fib_curr = fib_curr, fib_prev + fib_curr return fib_curr"},{"question":"Write a python function to generate all permutations of a given string and store them in an array.","solution":"from itertools import permutations def generate_permutations(s): Generates all permutations of a given string and stores them in an array. Args: s (str): The input string. Returns: list: A list containing all permutations of the input string. perm = permutations(s) return [''.join(p) for p in perm]"},{"question":"Write a python function to find the highest occurring character in a string. If there is more than one character with the same highest frequency, return all of them in a list. Sort the list in alphabetical order and return it.","solution":"from collections import Counter def highest_occurring_characters(s): Returns the highest occurring character(s) in a string. If there is more than one character with the same highest frequency, return all of them in a list. Sort the list in alphabetical order. if not s: return [] # Counter to calculate frequencies of characters count = Counter(s) # Find the maximum frequency max_freq = max(count.values()) # Find all characters with maximum frequency max_chars = [char for char, freq in count.items() if freq == max_freq] # Sort characters in alphabetical order max_chars.sort() return max_chars"},{"question":"Write a python function to find the first character that repeats in a given string. Consider the first repetition to be the one that appears first from the beginning of the string. For example, the first character that repeats in the string \\"programming\\" is 'r'.","solution":"def first_repeating_character(s): Finds the first character that repeats in a given string. Returns the character if found, otherwise returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to generate the nth Fibonacci number using iteration.","solution":"def fibonacci(n): Returns the nth Fibonacci number using iteration. n: int - the position in the Fibonacci sequence (0-based index) if n < 0: raise ValueError(\\"n must be a non-negative integer\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"Write a python function to count the occurrences of each character in a string, ignoring case sensitivity and excluding non-alphabetic characters.","solution":"def count_char_occurrences(s): Counts the occurrences of each character in a string, ignoring case sensitivtiy and excluding non-alphabetic characters. Parameters: s (str): Input string Returns: dict: Dictionary with characters as keys and their counts as values from collections import defaultdict result = defaultdict(int) for char in s: if char.isalpha(): result[char.lower()] += 1 return dict(result)"},{"question":"Write a python function to check if a given list of integers is sorted in ascending or descending order and return the corresponding string. If the list is neither ascending nor descending, return 'Unsorted'.","solution":"def check_sorted_order(lst): Returns the sorting order of the list 'lst'. It returns 'Ascending' if the list is sorted in ascending order, 'Descending' if sorted in descending order, and 'Unsorted' otherwise. if lst == sorted(lst): return 'Ascending' elif lst == sorted(lst, reverse=True): return 'Descending' else: return 'Unsorted'"},{"question":"Write a python function to calculate the nth Fibonacci number using both iterative and recursive methods. Compare their performance for large values of n.","solution":"import time def fib_recursive(n): Returns the nth Fibonacci number using recursion. if n <= 1: return n return fib_recursive(n - 1) + fib_recursive(n - 2) def fib_iterative(n): Returns the nth Fibonacci number using iteration. if n <= 1: return n a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b def compare_fibonacci_performance(n): start_time = time.time() fib_recursive_result = fib_recursive(n) fib_recursive_time = time.time() - start_time start_time = time.time() fib_iterative_result = fib_iterative(n) fib_iterative_time = time.time() - start_time return { 'fib_recursive_result': fib_recursive_result, 'fib_recursive_time': fib_recursive_time, 'fib_iterative_result': fib_iterative_result, 'fib_iterative_time': fib_iterative_time }"},{"question":"Write a python function to find the average depth of all paths in a binary tree. For this problem, you are given a binary tree with nodes that have integer values. The task is to find the average depth of all paths from the root of the tree to the leaf nodes. Each path must use each node exactly once (no backtracking allowed).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_average_depth(root): def dfs(node, depth): if not node: return (0, 0) if not node.left and not node.right: return (depth, 1) left_sum, left_count = dfs(node.left, depth + 1) right_sum, right_count = dfs(node.right, depth + 1) return (left_sum + right_sum, left_count + right_count) if not root: return 0.0 total_depth, total_paths = dfs(root, 0) return total_depth / total_paths"},{"question":"Write a python function to convert a string into a list of ASCII values.","solution":"def string_to_ascii_list(s): Converts a string into a list of ASCII values. Parameters: s (str): The input string. Returns: list: A list containing the ASCII values of the characters in the input string. return [ord(char) for char in s]"},{"question":"Write a python function to find the maximum element in a list of numbers. If the list is empty, the function should return None.","solution":"def find_max(nums): Returns the maximum element in a list of numbers. If the list is empty, returns None. if not nums: return None return max(nums)"},{"question":"Write a python function to shift an array by given positions. If the number of positions is greater than the size of an array, the function should handle it gracefully, shifting the elements in a circular manner.","solution":"def shift_array(arr, positions): Shifts elements of the array by specified positions in a circular manner. If positions is greater than array length, it effectively wraps around. Parameters: arr (list): The array to be shifted positions (int): Number of positions to shift the array Returns: list: The shifted array if not arr: return [] n = len(arr) positions = positions % n return arr[-positions:] + arr[:-positions]"},{"question":"Write a python function to find the next permutation of a sequence of numbers in lexicographic order. If the given sequence is the last permutation, return the first permutation in lexicographical order.","solution":"def next_permutation(seq): Returns the next permutation of a sequence of numbers in lexicographic order. If the given sequence is the last permutation, returns the first permutation in lexicographical order. seq = list(seq) n = len(seq) if n <= 1: return seq i = n - 2 while i >= 0 and seq[i] >= seq[i + 1]: i -= 1 if i == -1: return sorted(seq) j = n - 1 while seq[j] <= seq[i]: j -= 1 seq[i], seq[j] = seq[j], seq[i] seq[i + 1:] = reversed(seq[i + 1:]) return seq"},{"question":"Write a python function to find the third smallest number in a list of integers. If the list contains less than three elements, the function should return None. If the list has duplicate numbers, they should be considered in the third smallest determination.","solution":"def third_smallest(lst): Returns the third smallest number in a list of integers. If the list contains less than three elements, the function returns None. if len(lst) < 3: return None lst.sort() return lst[2]"},{"question":"Write a python function to convert the first character of a string to uppercase.","solution":"def capitalize_first_character(s): Returns the string with the first character converted to uppercase. if not s: return s return s[0].upper() + s[1:]"},{"question":"Write a python function to create a function that takes in a string and returns the number of uppercase, lowercase, digits, and special characters in the string. Write a example usage of the function.","solution":"def count_character_types(s): Takes a string \`s\` and returns a dictionary with the count of uppercase characters, lowercase characters, digits, and special characters. char_count = {\\"uppercase\\": 0, \\"lowercase\\": 0, \\"digits\\": 0, \\"special\\": 0} for char in s: if char.isupper(): char_count[\\"uppercase\\"] += 1 elif char.islower(): char_count[\\"lowercase\\"] += 1 elif char.isdigit(): char_count[\\"digits\\"] += 1 else: char_count[\\"special\\"] += 1 return char_count # Example usage of the function example_string = \\"Hello, World! 123\\" print(count_character_types(example_string))"},{"question":"Write a python function to get the shortest path between two nodes in a weighted graph using Dijkstra's algorithm. Assume the graph is represented using an adjacency matrix where the value at position (i, j) is the weight of the edge between nodes i and j (or infinity if there is no edge). You should return the shortest path length from the source node to the destination node.","solution":"import heapq def dijkstra(adjacency_matrix, source, destination): Uses Dijkstra's algorithm to find the shortest path in a weighted graph. Parameters: adjacency_matrix (list of lists of int): A 2D list where the element at (i, j) is the weight of the edge from node i to node j. source (int): The starting node. destination (int): The target node. Returns: int: The shortest path length from source to destination, or float('inf') if no path exists. n = len(adjacency_matrix) distances = [float('inf')] * n distances[source] = 0 priority_queue = [(0, source)] # (distance, node) while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_node == destination: return current_dist # Found the shortest path to the destination if current_dist > distances[current_node]: continue for neighbor, weight in enumerate(adjacency_matrix[current_node]): if weight == float('inf'): continue distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return float('inf') if distances[destination] == float('inf') else distances[destination]"},{"question":"Write a python function to count how many times a given substring appears in a string, considering case sensitivity.","solution":"def count_substring(main_string, substring): Counts how many times substring appears in main_string, considering case sensitivity. return main_string.count(substring)"},{"question":"Write a python function to find the minimum element in a given list, but do not use the built-in \`min()\` function. Also, the function should handle an empty list by returning \`None\`.","solution":"def find_min_element(arr): Returns the minimum element in the \`arr\` list. If the list is empty, returns None. Parameters: arr (list): A list of elements Returns: The minimum element or None if the list is empty. if not arr: return None min_element = arr[0] for element in arr: if element < min_element: min_element = element return min_element"},{"question":"Write a python function to generate random text using a Markov chain.","solution":"import random from collections import defaultdict def build_markov_chain(text, n=2): Build a Markov chain from the provided text. Parameters: - text (str): The input text used to build the Markov chain. - n (int): The number of words to consider for the state (default is 2). Returns: - defaultdict: A dictionary representing the Markov chain. words = text.split() markov_chain = defaultdict(list) for i in range(len(words)-n): state = tuple(words[i:i+n]) next_word = words[i+n] markov_chain[state].append(next_word) return markov_chain def generate_random_text(chain, length=50, seed=None): Generate random text using the provided Markov chain. Parameters: - chain (dict): The Markov chain dictionary. - length (int): The number of words to generate (default is 50). - seed (tuple, optional): The initial state to start the text generation from. Returns: - str: The randomly generated text. if not chain: return \\"\\" current_state = seed or random.choice(list(chain.keys())) text = list(current_state) for _ in range(length - len(current_state)): next_words = chain.get(current_state, None) if not next_words: break next_word = random.choice(next_words) text.append(next_word) current_state = tuple(text[-len(current_state):]) return ' '.join(text)"},{"question":"Write a python function to remove all occurrences of the character 'a' from a string using list comprehensions.","solution":"def remove_a_from_string(input_string): Remove all occurrences of the character 'a' from the input string using list comprehensions. Parameters: input_string (str): The string from which 'a' should be removed Returns: str: A new string with all occurrences of 'a' removed return ''.join([char for char in input_string if char != 'a'])"},{"question":"Write a python function to return the minimum value between two numbers. You need to do it without using the built-in min function. Additionally, the function should be able to handle the case where both numbers are the same.","solution":"def minimum(a, b): Returns the minimum value between two numbers a and b. if a < b: return a else: return b"},{"question":"Write a python function to generate a list of prime numbers up to a given limit n. Consider 2 as the first prime number, and the function should return a list of all prime numbers less than n.","solution":"def generate_primes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime]"},{"question":"Write a python function to simulate the behavior of a B-Tree in the context of searching through a dataset that is expected to expand and shrink dynamically, such as storing application logs. B-Trees are known for their efficiency in handling large datasets and O(log n) search times, making them a great choice for scenarios like these. Your function should include basic operations such as insert, delete, and find, and demonstrate how to balance the tree after insertions and deletions to maintain the B-Tree properties.","solution":"class BTreeNode: def __init__(self, t, leaf=False): self.t = t # Minimum degree (defines the range for number of keys) self.leaf = leaf # True if leaf node, False otherwise self.keys = [] # Store keys self.children = [] # Store children def insert_non_full(self, key): i = len(self.keys) - 1 if self.leaf: self.keys.append(None) while i >= 0 and self.keys[i] > key: self.keys[i + 1] = self.keys[i] i -= 1 self.keys[i + 1] = key else: while i >= 0 and self.keys[i] > key: i -= 1 if len(self.children[i + 1].keys) == 2 * self.t - 1: self.split_child(i + 1, self.children[i + 1]) if self.keys[i + 1] < key: i += 1 self.children[i + 1].insert_non_full(key) def split_child(self, i, y): z = BTreeNode(y.t, y.leaf) self.children.insert(i + 1, z) self.keys.insert(i, y.keys[self.t - 1]) z.keys = y.keys[self.t:(2 * self.t - 1)] y.keys = y.keys[0:(self.t - 1)] if not y.leaf: z.children = y.children[self.t:(2 * self.t)] y.children = y.children[0:self.t] def find(self, key): i = 0 while i < len(self.keys) and key > self.keys[i]: i += 1 if i < len(self.keys) and self.keys[i] == key: return True elif self.leaf: return False else: return self.children[i].find(key) class BTree: def __init__(self, t): self.root = BTreeNode(t, True) self.t = t def insert(self, key): root = self.root if len(root.keys) == 2 * self.t - 1: new_root = BTreeNode(self.t, False) new_root.children.append(self.root) new_root.split_child(0, root) new_root.insert_non_full(key) self.root = new_root else: root.insert_non_full(key) def find(self, key): return self.root.find(key)"},{"question":"Write a python function to perform the operation of wave sorting on a given list of integers. Wave sorting arranges the list in a way that elements at even indexes are not smaller than their neighbors and elements at odd indexes are not greater than their neighbors. That is, the sorted array is in the form a[0] >= a[1] <= a[2] >= a[3] <= a[4]...","solution":"def wave_sort(arr): Arranges the list in wave form a[0] >= a[1] <= a[2] >= a[3] .... n = len(arr) # Sort the array arr.sort() # Swap adjacent elements to form the wave pattern for i in range(0, n-1, 2): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"Write a python function to return the sum of the digits of a given number. For instance, if the number is 123, the sum should be 6 (1+2+3). If the number is 987, the sum should be 24 (9+8+7).","solution":"def sum_of_digits(number): Returns the sum of the digits of a given number. # Convert the number to its absolute value to handle negative numbers number = abs(number) # Convert the number to a string to iterate over each character return sum(int(digit) for digit in str(number))"},{"question":"Write a python function to perform the QuickSort algorithm on a list of integers.","solution":"def quicksort(arr): Sorts the list \`arr\` using the QuickSort algorithm and returns the sorted list. if len(arr) <= 1: # Base case: a list of zero or one elements is already sorted return arr else: pivot = arr[len(arr) // 2] # Choose the middle element as the pivot lesser = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(lesser) + equal + quicksort(greater)"},{"question":"Write a python function to find the maximum element in a list using recursion without using any built-in functions.","solution":"def find_max_recursive(lst): Returns the maximum element in a list using recursion. Parameters: lst (list of int/float): The list of numbers from which to find the maximum element. Returns: int/float: The maximum element in the list. if len(lst) == 1: return lst[0] else: max_of_rest = find_max_recursive(lst[1:]) return lst[0] if lst[0] > max_of_rest else max_of_rest"},{"question":"Write a python function to find an element in array using binary search.","solution":"def binary_search(arr, target): Searches for target in a sorted array arr using binary search. Returns the index of target if found, otherwise returns -1. :param arr: List[int] - A list of sorted integers :param target: int - The target integer to search for :return: int - Index of target if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to print all the odd numbers from 1 to 100 using a for loop.","solution":"def print_odd_numbers(): Prints all the odd numbers from 1 to 100. odd_numbers = [] for number in range(1, 101): if number % 2 != 0: odd_numbers.append(number) return odd_numbers"},{"question":"Write a python function to sort an array such that all the even numbers appear first, the odd numbers appear second, the negative numbers appear first among the even numbers, and the positive numbers appear after among the odd numbers.","solution":"def custom_sort(arr): Sort the array such that all even numbers appear first, followed by odd numbers, among even numbers negative numbers appear first then positive numbers, and similarly among odd numbers. sorted_arr = sorted(arr, key=lambda x: (x % 2, x)) return sorted_arr"},{"question":"Write a python function to swap elements of two lists without using a temporary variable.","solution":"def swap_elements(list1, list2): Swap elements of two lists without using a temporary variable. This function assumes both lists have the same length. for i in range(len(list1)): list1[i], list2[i] = list2[i], list1[i]"},{"question":"Write a python function to sort an array using the bubble sort algorithm with a worst-case time complexity of O(n^2).","solution":"def bubble_sort(arr): This function sorts an array using the bubble sort algorithm. The worst-case time complexity of bubble sort is O(n^2). n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to evaluate a postfix expression (Reverse Polish Notation). A postfix expression is an arithmetic expression where every operator follows its operands.","solution":"def evaluate_postfix(expression): Evaluate a postfix expression and return the result. :param expression: List of strings, each being either an operand or an operator :return: Result of the postfix expression evaluation stack = [] for token in expression: if token.isdigit() or (token[0] == '-' and token[1:].isdigit()): stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == '+': stack.append(operand1 + operand2) elif token == '-': stack.append(operand1 - operand2) elif token == '*': stack.append(operand1 * operand2) elif token == '/': stack.append(int(operand1 / operand2)) # Use int() to perform integer division return stack[0]"},{"question":"Write a python function to find the duplicate characters in a string and their counts.","solution":"def find_duplicates(s): Finds duplicate characters in a string and returns a dictionary with the characters as keys and their counts as values. from collections import Counter # Creating a counter object to count occurrences of each character counter = Counter(s) # Filtering out characters that only appear once duplicates = {char: count for char, count in counter.items() if count > 1} return duplicates"},{"question":"Write a python function to count the number of distinct values in an array.","solution":"def count_distinct_values(arr): Returns the number of distinct values in the array. return len(set(arr))"},{"question":"Write a python function to generate a pyramid pattern of a given height.","solution":"def pyramid_pattern(height): Generates a pyramid pattern of a given height and returns it as a list of strings. Each string represents a row in the pyramid. The pyramid is centered and consists of '*' characters. pyramid = [] for i in range(height): spaces = ' ' * (height - i - 1) stars = '*' * (2 * i + 1) pyramid.append(spaces + stars + spaces) return pyramid"},{"question":"Write a python function to delete a given key from a dictionary. If the key does not exist, the function should return the dictionary unchanged.","solution":"def delete_key_from_dict(d, key): Deletes a given key from the dictionary. If the key does not exist, return the dictionary unchanged. Parameters: d (dict): The dictionary from which the key should be deleted. key : The key to be deleted. Returns: dict: The updated dictionary. if key in d: del d[key] return d"},{"question":"Write a python function to find the duplicate elements in a list without using any additional data structures.","solution":"def find_duplicates(nums): This function takes a list of numbers and returns a list of duplicate elements without using any additional data structures. duplicates = [] nums.sort() for i in range(1, len(nums)): if nums[i] == nums[i-1] and (nums[i] not in duplicates or len(duplicates) == 0): duplicates.append(nums[i]) return duplicates"},{"question":"Write a python function to determine the least common multiple (LCM) of two numbers. The function should be named \`find_lcm\` and take two integer parameters, \`num1\` and \`num2\`. The function should return the least common multiple of the two numbers. Optionally, the function can also take an optional third parameter \`mode\` which can be either 'auto' or 'manual'. If \`mode\` is 'auto', the function should automatically determine the LCM without asking the user for any input. If \`mode\` is 'manual', the function should ask the user to enter the values of \`num1\` and \`num2\` and then return the LCM. Please include error handling to ensure that the input values are integers and that the \`mode\` parameter, if provided, is either 'auto' or 'manual'.","solution":"def find_lcm(num1=None, num2=None, mode='auto'): Returns the least common multiple (LCM) of two numbers. Parameters: num1 (int): The first number. num2 (int): The second number. mode (str): The mode of input, 'auto' or 'manual'. Defaults to 'auto'. Returns: int: The least common multiple of num1 and num2. def gcd(a, b): while b: a, b = b, a % b return a def lcm(a, b): return abs(a * b) // gcd(a, b) if mode not in ['auto', 'manual']: raise ValueError(\\"Mode must be either 'auto' or 'manual'\\") if mode == 'manual': try: num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) except ValueError: raise ValueError(\\"Both inputs must be integers\\") else: if not isinstance(num1, int) or not isinstance(num2, int): raise ValueError(\\"Both num1 and num2 must be integers\\") return lcm(num1, num2)"},{"question":"Write a python function to perform a breadth-first search on a 2D grid. The function should take a grid (a list of lists of integers), and a starting position (also represented as a tuple of integers). Each cell in the grid is either 0 (representing an open path) or 1 (representing a barrier). The function should return the order in which the cells are visited using breadth-first search. If the starting position is a barrier, the function should return an empty list.","solution":"from collections import deque def bfs(grid, start): Perform a breadth-first search on a 2D grid. :param grid: List of lists of integers (0 for open path, 1 for barrier) :param start: Tuple of integers representing the starting position :return: List of tuples representing the order in which the cells are visited rows, cols = len(grid), len(grid[0]) start_row, start_col = start if grid[start_row][start_col] == 1: return [] queue = deque([start]) visited = set([start]) order_of_visit = [] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up while queue: current = queue.popleft() order_of_visit.append(current) for dr, dc in directions: new_row, new_col = current[0] + dr, current[1] + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col)) visited.add((new_row, new_col)) return order_of_visit"},{"question":"Write a python function to reverse a integer and return the reversed integer. If reversing the integer causes the integer to go out of the bounds of a 32-bit signed integer (which is -2^{31} to 2^{31} - 1), then return 0.","solution":"def reverse_integer(x): Reverses the digits of the integer x. If reversed integer goes out of 32-bit signed integer bounds, returns 0. sign = -1 if x < 0 else 1 x_abs_str = str(abs(x)) reversed_abs_str = x_abs_str[::-1] reversed_int = sign * int(reversed_abs_str) if reversed_int < -2**31 or reversed_int > 2**31 - 1: return 0 return reversed_int"},{"question":"Write a python function to count the number of items in a list that are less than the number 5.","solution":"def count_less_than_five(items): Returns the number of items in the list that are less than 5. return sum(1 for item in items if item < 5)"},{"question":"Write a python function to search for a specific element in a given array and return its index. If the element is not found, return -1.","solution":"def search_element(arr, target): Searches for a specific element in a given array and returns its index. If the element is not found, returns -1. :param arr: List of elements to search within :param target: The element to search for :return: Index of the element if found, -1 otherwise try: return arr.index(target) except ValueError: return -1"},{"question":"Write a python function to solve a linear equation in the form of ax + b = 0. The function should take three inputs: a, b, and a boolean value that indicates whether the equation is solved for x. If the boolean value is True, the function should return the solution for x. If the boolean value is False, the function should return the equation in string form.","solution":"def solve_linear_equation(a, b, solve_for_x): Solves a linear equation of the form ax + b = 0. Parameters: - a (float): Coefficient of x. - b (float): Constant term. - solve_for_x (bool): Whether to solve for x or return the equation as a string. Returns: - float or str: The solution for x if solve_for_x is True, otherwise the equation in string form. if solve_for_x: if a == 0: return None if b != 0 else \\"Infinite solutions\\" return -b / a else: return f\\"{a}x + {b} = 0\\""},{"question":"Write a python function to print \\"hello world\\" 100 times.","solution":"def print_hello_world_100_times(): Prints 'hello world' 100 times. for _ in range(100): print(\\"hello world\\")"},{"question":"Write a python function to count the occurrences of a substring within a string using the Boyer-Moore string search algorithm.","solution":"def boyer_moore_search(pattern, text): Boyer-Moore string search algorithm to find all occurrences of a pattern in a given text. Args: pattern (str): The substring to be searched within the text. text (str): The text in which the substring is to be searched. Returns: int: The number of occurrences of the substring within the text. def bad_character_heuristic(string, size): bad_char = [-1] * 256 for i in range(size): bad_char[ord(string[i])] = i return bad_char m = len(pattern) n = len(text) if m == 0 or n == 0: return 0 bad_char = bad_character_heuristic(pattern, m) s = 0 occurrences = 0 while s <= n - m: j = m - 1 while j >= 0 and pattern[j] == text[s + j]: j -= 1 if j < 0: occurrences += 1 s += m - bad_char[ord(text[s + m])] if s + m < n else 1 else: s += max(1, j - bad_char[ord(text[s + j])]) return occurrences"},{"question":"Write a python function to find the number of occurrences of the substring \\"cat\\" in a given string. For example, if the string is \\"The cat sat on the mat with a cat\\" it should return 2.","solution":"def count_cat_occurrences(s): Returns the number of occurrences of the substring \\"cat\\" in the given string s. return s.lower().count(\\"cat\\")"},{"question":"Write a python function to sort an array of subarrays based on the length of the inner subarrays.","solution":"def sort_by_inner_length(arr): Sorts an array of subarrays based on the length of the inner subarrays. Parameters: arr (list of lists): The input array of subarrays. Returns: list of lists: The sorted array with subarrays ordered by their lengths. return sorted(arr, key=len)"},{"question":"Write a python function to extract all words from a given string and return them as a list. If the string contains any non-word characters, ignore them. Only alphanumeric characters should be considered as part of words.","solution":"import re def extract_words(input_string): Extracts all words from the input string and returns them as a list. Only alphanumeric characters are considered as part of words. return re.findall(r'bw+b', input_string)"},{"question":"Write a python function to count the number of months with 28, 29, 30, and 31 days in a given year. The output should be in the format of a tuple containing four elements. The first element in the tuple should denote the number of months that have 28 days, the second element should denote the number of months with 29 days (i.e., leap years), the third element should denote the number of months with 30 days, and the fourth element should denote the number of months with 31 days.","solution":"def count_days_in_months(year): Returns a tuple with the number of months with 28, 29, 30, and 31 days in the given year. Args: year (int): The year to check. Returns: tuple: (number of 28-day months, number of 29-day months, number of 30-day months, number of 31-day months) # Check if it's a leap year is_leap = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) # In a leap year, February has 29 days, otherwise it has 28 days days_in_february = 29 if is_leap else 28 # Months with fixed number of days days_in_months = { 'January': 31, 'February': days_in_february, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31 } count_28 = sum(1 for days in days_in_months.values() if days == 28) count_29 = sum(1 for days in days_in_months.values() if days == 29) count_30 = sum(1 for days in days_in_months.values() if days == 30) count_31 = sum(1 for days in days_in_months.values() if days == 31) return (count_28, count_29, count_30, count_31)"},{"question":"Write a python function to sort a list of dictionaries by the value of a given key. The function should take three arguments: a list of dictionaries, a key by which to sort, and a boolean argument that decides whether to sort in ascending or descending order. The function should return a new list of dictionaries sorted accordingly.","solution":"def sort_dicts_by_key(dicts_list, sort_key, ascending=True): Sorts a list of dictionaries by the given key. Args: dicts_list (list): List of dictionaries to be sorted. sort_key (str): The key to sort the dictionaries by. ascending (bool): If True, sort in ascending order, otherwise sort in descending order. Returns: list: A new list of dictionaries sorted by the given key. return sorted(dicts_list, key=lambda x: x[sort_key], reverse=not ascending)"},{"question":"Write a python function to check if a given number is perfect or not. Explain your approach and code.","solution":"def is_perfect_number(n): Checks if a number n is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. Parameters: n (int): The number to check. Returns: bool: True if the number is perfect, False otherwise. if n <= 1: return False sum_of_divisors = 0 # Iterate through possible divisors. for i in range(1, n): if n % i == 0: sum_of_divisors += i # Check if the sum of divisors is equal to the number itself. return sum_of_divisors == n"},{"question":"Write a python function to validate if a string is a valid integer. The function should return \`True\` if the string represents a valid integer, and \`False\` otherwise. A valid integer can be either positive or negative, and may contain leading and trailing whitespaces.","solution":"def is_valid_integer(s): Returns True if the string s is a valid integer, otherwise False. A valid integer can have leading and trailing whitespaces and can be positive or negative. s = s.strip() # Removing leading and trailing whitespaces if s == \\"\\": return False if s[0] in ('-', '+'): return s[1:].isdigit() return s.isdigit()"},{"question":"Write a python function to find the first even number in a list of integers. If there are no even numbers, return -1.","solution":"def first_even_number(lst): Returns the first even number in the list. If there are no even numbers, returns -1. for num in lst: if num % 2 == 0: return num return -1"},{"question":"Write a python function to find the maximum depth of a binary tree. The tree is represented as a list of tuples, where each tuple represents a node and its children. For example, the tree \`(1, [(2, []), (3, [])])\` represents a node with value 1, and children 2 and 3, each of which is a leaf node.","solution":"def max_depth(tree): Returns the maximum depth of a binary tree represented as a nested tuple. :param tree: Tuple representing the node and its children, example: (1, [(2, []), (3, [])]) :return: Integer representing the maximum depth of the binary tree if not tree: return 0 node, children = tree if not children: return 1 return 1 + max(max_depth(child) for child in children)"},{"question":"Write a python function to find the average of a list of numbers. The function should take a list of numbers as the input and return the average of those numbers.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. :param numbers: List of numbers to calculate the average for. :type numbers: list of float or int :return: The average of the numbers in the list. :rtype: float if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"Write a python function to solve the following problem: Given a string, print vowels in it in reverse order.","solution":"def reverse_vowels(s): Returns a string with vowels in it in reverse order. Parameters: s (str): The input string. Returns: str: The string with reversed vowels. vowels = 'aeiouAEIOU' s_list = list(s) vowel_positions = [i for i in range(len(s)) if s[i] in vowels] vowel_chars = [s[i] for i in vowel_positions][::-1] for i, pos in enumerate(vowel_positions): s_list[pos] = vowel_chars[i] return ''.join(s_list)"},{"question":"Write a python function to return the maximum value in a list of integers. If the list is empty, return \`None\`.","solution":"def find_max(numbers): Returns the maximum value in a list of integers. If the list is empty, return None. if not numbers: return None return max(numbers)"},{"question":"Write a python function to count the number of lowercase letters in a given string. The function should return the count of lowercase letters.","solution":"def count_lowercase_letters(s): Returns the number of lowercase letters in the given string s. return sum(1 for char in s if char.islower())"},{"question":"Write a python function to extract the first occurring alphabetic letter from a string, ignoring case and non-alphabetic characters.","solution":"def first_alpha_char(s): Returns the first occurring alphabetic letter from the string s. Ignores case and non-alphabetic characters. for char in s: if char.isalpha(): return char.lower() return None"},{"question":"Write a python function to check if a number is anti-prime. An anti-prime (or highly composite number) is a positive integer with more divisors than any smaller positive integer. The function should take an integer as input and return True if it is anti-prime, False otherwise.","solution":"def count_divisors(n): Helper function to count the number of divisors of n. count = 0 for i in range(1, n+1): if n % i == 0: count += 1 return count def is_anti_prime(num): Returns True if num is an anti-prime, False otherwise. An anti-prime (or highly composite number) is a positive integer with more divisors than any smaller positive integer. if num < 1: return False num_divisors = count_divisors(num) for i in range(1, num): if count_divisors(i) >= num_divisors: return False return True"},{"question":"Write a python function to print all the odd numbers in a list using a list comprehension. Your function should take a list of numbers as input and print out a list of all the odd numbers in that list. Make sure to use list comprehension as part of your solution.","solution":"def print_odd_numbers(numbers): Prints a list of all odd numbers present in the input list using list comprehension. :param numbers: List of integers :return: List of odd integers odd_numbers = [num for num in numbers if num % 2 != 0] print(odd_numbers) return odd_numbers"},{"question":"Write a python function to implement the Bubble Sort algorithm. The function should take a list of integers as input and return the sorted list using the Bubble Sort algorithm.","solution":"def bubble_sort(arr): Sorts a list of integers using the Bubble Sort algorithm. Parameters: arr (list): A list of integers to be sorted. Returns: list: The sorted list of integers. n = len(arr) for i in range(n): # Track if a swap was made swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no swaps were made, the list is already sorted if not swapped: break return arr"},{"question":"Write a python function to swap the elements of an array at positions \`i\` and \`j\`.","solution":"def swap_elements(arr, i, j): Swaps the elements of the array arr at positions i and j. Parameters: arr (list): The array where elements are to be swapped. i (int): The index of the first element. j (int): The index of the second element. Returns: list: The array with the elements swapped. if i < 0 or j < 0 or i >= len(arr) or j >= len(arr): raise IndexError(\\"Index out of range.\\") arr[i], arr[j] = arr[j], arr[i] return arr"},{"question":"Write a python function to replace all occurrences of a given character in a string with another character.","solution":"def replace_char(string, old_char, new_char): Replaces all occurrences of old_char with new_char in the given string. :param string: The input string in which to replace characters. :param old_char: The character to be replaced. :param new_char: The character to replace with. :return: A new string with all occurrences of old_char replaced by new_char. return string.replace(old_char, new_char)"},{"question":"Write a python function to implement the Levenshtein distance algorithm, which calculates the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. The function should take two string parameters and return the Levenshtein distance between them.","solution":"def levenshtein_distance(s1, s2): Calculate the Levenshtein distance between two strings. if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"question":"Write a python function to copy a linked list with both random and next pointers.","solution":"class Node: def __init__(self, value, next=None, random=None): self.value = value self.next = next self.random = random def copy_linked_list_with_random_pointer(head): if not head: return None # Step 1: Create a new node for each node and insert it right after the original node current = head while current: new_node = Node(current.value, current.next, None) current.next = new_node current = new_node.next # Step 2: Assign random pointers for the new nodes current = head while current: if current.random: current.next.random = current.random.next current = current.next.next # Step 3: Separate the original list from the copied list current = head new_head = head.next while current: copy = current.next current.next = copy.next if copy.next: copy.next = copy.next.next current = current.next return new_head"},{"question":"Write a python function to find the minimum and maximum value of a given list of integers without using in-built \`min()\` and \`max()\` functions.","solution":"def find_min_max(lst): Returns a tuple (min_value, max_value) of the list of integers. if not lst: # handle empty list return None, None min_value = max_value = lst[0] for num in lst[1:]: if num < min_value: min_value = num if num > max_value: max_value = num return min_value, max_value"},{"question":"Write a python function to remove the minimum element from a list and return a new list without the minimum element.","solution":"def remove_minimum_element(lst): Removes the minimum element from the list and returns a new list without the minimum element. :param lst: list of numbers :return: new list without the minimum element if not lst: return [] min_elem = min(lst) lst.remove(min_elem) return lst"},{"question":"Write a python function to print nth highest salary from a given list of salaries in the format 'as per salary rank xx is yyy'. For example, if 'n=2', the output for 'salaries = [3000, 7000, 5000, 10000, 2000]' should be 'as per salary rank 2 is 7000'.","solution":"def nth_highest_salary(salaries, n): Returns a string stating the nth highest salary from a list of salaries. if n < 1 or n > len(salaries): return \\"Invalid rank\\" sorted_salaries = sorted(salaries, reverse=True) nth_salary = sorted_salaries[n-1] return f'as per salary rank {n} is {nth_salary}'"},{"question":"Write a python function to convert a list of integers into a linked list. Each node in the linked list will store an integer from the list. If the list is empty, an empty linked list should be returned.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def list_to_linked_list(numbers): Converts a list of integers into a linked list. Each node in the linked list will store an integer from the list. :param numbers: List of integers :return: Head of the linked list or None if the list is empty if not numbers: return None head = ListNode(numbers[0]) current_node = head for number in numbers[1:]: current_node.next = ListNode(number) current_node = current_node.next return head"},{"question":"Write a python function to convert hexadecimal to binary and vice versa.","solution":"def hex_to_bin(hex_str): Converts a hexadecimal string to a binary string. return bin(int(hex_str, 16))[2:] def bin_to_hex(bin_str): Converts a binary string to a hexadecimal string. return hex(int(bin_str, 2))[2:]"},{"question":"Write a python function to return the reverse of a list.","solution":"def reverse_list(lst): Returns the reverse of the given list. Parameters: lst (list): A list of elements. Returns: list: A list containing the elements of lst in reverse order. return lst[::-1]"},{"question":"Write a python function to calculate the sum of the series 1 + (1/2) + (1/3) + ... + (1/n), where n is a positive integer. This series is known as the harmonic series. Can you also write a small portion of documentation for this function?","solution":"def harmonic_sum(n): Calculates the sum of the harmonic series up to the nth term. The harmonic series is defined as: 1 + (1/2) + (1/3) + ... + (1/n) :param n: A positive integer representing the number of terms :return: The sum of the harmonic series up to the nth term if n <= 0: raise ValueError(\\"n must be a positive integer\\") sum_series = 0 for i in range(1, n + 1): sum_series += 1 / i return sum_series"},{"question":"Write a python function to get the first non-repeated character in a string. If there is no non-repeated character, the function should return \`None\`. For example, given the string \\"programming\\", the function should return \\"p\\" because \\"p\\" is the first character that does not repeat in the string.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If there is no non-repeated character, returns None. char_count = {} # Count the occurrences of each character in the string for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a python function to find the factorial of a number using recursion. The function should handle large numbers efficiently by using memoization to store previously computed factorials.","solution":"def factorial(n, memo={}): Returns the factorial of n using memoization to handle large numbers efficiently. if n in memo: return memo[n] if n == 0 or n == 1: return 1 else: memo[n] = n * factorial(n-1, memo) return memo[n]"},{"question":"Write a python function to check if the string starts with a certain substring and another function that checks if the string ends with a certain substring.","solution":"def starts_with(main_string, substring): Checks if the main_string starts with the substring. return main_string.startswith(substring) def ends_with(main_string, substring): Checks if the main_string ends with the substring. return main_string.endswith(substring)"},{"question":"Write a python function to check if a list contains any pair of numbers that sum up to a specific value. The function should take in a list of integers and the target sum, and return a boolean indicating whether such a pair exists.","solution":"def has_pair_with_sum(lst, target): Checks if there exists any pair of numbers in the list that sum up to the target value. Parameters: lst (list): List of integers. target (int): Target sum. Returns: bool: True if a pair with sum equals to target exists, otherwise False. seen = set() for num in lst: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Write a python function to encrypt a message using Caesar cipher. The function should take in two parameters: the plain text and the shift value. The function should only encrypt alphabetic characters and ignore other characters. The shift should wrap around, i.e., 'z' shifted by 1 should become 'a'.","solution":"def caesar_cipher_encrypt(plain_text, shift): Encrypts a message using the Caesar cipher. :param plain_text: str, the message to encrypt :param shift: int, the shift value for the cipher :return: str, the encrypted message encrypted_message = [] for char in plain_text: if char.isalpha(): # Shift character shift_amount = shift % 26 if char.islower(): new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a')) else: new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A')) encrypted_message.append(new_char) else: # Non-alphabetic characters are added unchanged encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Write a python function to remove duplicates from a list. Here is the syntax for the function: \`remove_duplicates(lst)\`. The function should take a list as an input and return a new list with duplicates removed.","solution":"def remove_duplicates(lst): Removes duplicates from the list. Parameters: lst (list): The input list from which duplicates need to be removed. Returns: list: A new list with duplicates removed. return list(dict.fromkeys(lst))"},{"question":"Write a python function to calculate the average of a list of numbers. If the list is empty, the function should return \`None\`. Additionally, include a function to test the correctness of the average function using unit tests.","solution":"def calculate_average(numbers): Returns the average of a list of numbers. If the list is empty, returns None. if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a python function to find all distinct permutation of a given string. You may use any libraries from Python's standard library.","solution":"from itertools import permutations def distinct_permutations(s): Returns a list of all distinct permutations of the input string. return sorted(set([''.join(p) for p in permutations(s)]))"},{"question":"Write a python function to implement a breadth-first search (BFS) algorithm on a graph. The function should take the graph as an input and return the traversal order as a list.","solution":"from collections import deque def bfs(graph, start_node): Perform BFS on a graph starting from start_node. Args: graph (dict): A dictionary representing the adjacency list of the graph. start_node: The node to start the BFS traversal from. Returns: list: The order of traversal in a BFS manner. visited = set() queue = deque([start_node]) traversal_order = [] while queue: current_node = queue.popleft() if current_node not in visited: visited.add(current_node) traversal_order.append(current_node) # Enqueue all adjacent nodes for neighbor in graph.get(current_node, []): if neighbor not in visited: queue.append(neighbor) return traversal_order"},{"question":"Write a python function to find the maximum of three numbers using the \`if-elif-else\` statement.","solution":"def max_of_three(a, b, c): Returns the maximum of three numbers. if a >= b and a >= c: return a elif b >= a and b >= c: return b else: return c"},{"question":"Write a python function to determine whether the binary representation of a given integer is a palindrome.","solution":"def is_binary_palindrome(n): Checks if the binary representation of a given integer n is a palindrome. Parameters: - n: integer Returns: - True if the binary representation is a palindrome, False otherwise. binary_representation = bin(n)[2:] # Convert to binary and remove the '0b' prefix return binary_representation == binary_representation[::-1]"},{"question":"Write a python function to that replaces every letter in the string with the next letter in the alphabet. For example, 'a' should become 'b', 'b' should become 'c', etc., and 'z' should become 'a'.","solution":"def replace_next_letter(s): Replaces every letter in the string with the next letter in the alphabet. 'z' should become 'a'. Parameters: s (str): The input string. Returns: str: The string with each letter replaced by the next letter in the alphabet. result = [] for char in s: if 'a' <= char <= 'z': # Check if the character is a lowercase letter result.append(chr((ord(char) - ord('a') + 1) % 26 + ord('a'))) elif 'A' <= char <= 'Z': # Check if the character is an uppercase letter result.append(chr((ord(char) - ord('A') + 1) % 26 + ord('A'))) else: # Non-alphabetical characters remain the same result.append(char) return ''.join(result)"},{"question":"Write a python function to calculate the sum of an arithmetic sequence. The function should take three parameters: the first term (a), the common difference (d), and the number of terms (n).","solution":"def sum_arithmetic_sequence(a, d, n): Returns the sum of the first n terms of an arithmetic sequence with first term 'a' and common difference 'd'. # Using the formula: n/2 * (2a + (n-1)d) return n * (2 * a + (n - 1) * d) // 2"},{"question":"Write a python function to perform a preorder traversal of a binary tree and return the values as a list.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def preorder_traversal(root): Perform a preorder traversal of a binary tree. Return the values as a list. if root is None: return [] # Preorder: Visit root, then left subtree, then right subtree return [root.val] + preorder_traversal(root.left) + preorder_traversal(root.right)"},{"question":"Write a python function to print the nth fibonacci number. However, the twist is you have to print every number less than n which appears in the fibonacci sequence and terminate the function if you find the nth number. For example, if n is 10, the function should print the numbers less than 10 in the fibonacci sequence and return when it reaches 10.","solution":"def fibonacci_printer(n): Prints Fibonacci numbers less than n until the nth Fibonacci number is reached or exceeded. a, b = 0, 1 count = 1 # To track the position in Fibonacci sequence while True: if a >= n: return # Terminates if nth Fibonacci number is reached or exceeded print(a) a, b = b, a + b count += 1"},{"question":"Write a python function to implement a binary search tree, and perform operations such as insertion, deletion, and searching of a node.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) else: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def search(self, key): return self._search(self.root, key) def _search(self, root, key): if root is None or root.val == key: return root if key < root.val: return self._search(root.left, key) return self._search(root.right, key) def delete(self, key): self.root = self._delete(self.root, key) def _delete(self, root, key): if root is None: return root if key < root.val: root.left = self._delete(root.left, key) elif key > root.val: root.right = self._delete(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left root.val = self._min_value_node(root.right).val root.right = self._delete(root.right, root.val) return root def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def inorder_traversal(self): result = [] self._inorder_traversal(self.root, result) return result def _inorder_traversal(self, root, result): if root: self._inorder_traversal(root.left, result) result.append(root.val) self._inorder_traversal(root.right, result)"},{"question":"Write a python function to reverse a list of integers. The function should be able to handle a list of any length and reverse its elements without using any built-in reverse functions or slicing.","solution":"def reverse_list(lst): Reverses a list of integers. Args: lst (list): List of integers to reverse. Returns: list: The reversed list. start = 0 end = len(lst) - 1 while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 return lst"},{"question":"Write a python function to calculate the first 100 prime numbers and sum them up. The user should be able to run this function directly and print out the result. Please add comments for code understanding.","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_first_100_primes(): Calculate and return the sum of the first 100 prime numbers. primes = [] num = 2 # Start checking for primes from the first prime number. while len(primes) < 100: if is_prime(num): primes.append(num) num += 1 return sum(primes) # Run the function and print the sum of the first 100 primes. result = sum_of_first_100_primes() print(f\\"The sum of the first 100 prime numbers is: {result}\\")"},{"question":"Write a python function to print all the even numbers between 1 and 20 (inclusive) using a loop.","solution":"def print_even_numbers(): Prints all even numbers between 1 and 20 inclusive. even_numbers = [] for number in range(1, 21): if number % 2 == 0: even_numbers.append(number) return even_numbers"},{"question":"Write a python function to solve a system of linear equations using the NumPy library. The function should take a 2D list or NumPy array of coefficients for the system, and a list or NumPy array of constants. The function should return the solution as a NumPy array.","solution":"import numpy as np def solve_linear_system(coefficients, constants): Solves a system of linear equations. Parameters: - coefficients (2D list or np.ndarray): Coefficients of the linear equations. - constants (list or np.ndarray): Constants of the linear equations. Returns: - np.ndarray: Solution to the system of linear equations. coefficients = np.array(coefficients) constants = np.array(constants) solution = np.linalg.solve(coefficients, constants) return solution"},{"question":"Write a python function to find the number of times a specific word appears in a given text. The function should be case-insensitive and should also handle punctuation.","solution":"import re def count_word_occurrences(text, word): Returns the number of times a specific word appears in the given text. The search is case-insensitive and ignores punctuation. # Remove punctuation and make the text lower case text = re.sub(r'[^ws]', '', text).lower() word = word.lower() # Split the text into words words = text.split() # Count occurrences of the word return words.count(word)"},{"question":"Write a python function to find the most common character in a string, excluding spaces.","solution":"from collections import Counter def most_common_char(s): Returns the most common character in a string, excluding spaces. If there are multiple characters with the same highest frequency, it returns the first one encountered. # Filter out spaces and count frequency of each character filtered_s = s.replace(' ', '') if not filtered_s: return None count = Counter(filtered_s) most_common = count.most_common(1)[0][0] return most_common"},{"question":"Write a python function to find the average of two numbers. Create a check function to validate your code with given test cases.","solution":"def average(a, b): Returns the average of a and b. return (a + b) / 2"},{"question":"Write a python function to implement merge sort algorithm. Merge Sort uses a divide-and-conquer approach to sort an array. It splits the array into two halves, recursively sorts them, and then merges them back together. The function should take a list of integers as input and return the sorted list.","solution":"def merge_sort(arr): Implements the merge sort algorithm. Takes a list of integers and returns the sorted list. if len(arr) <= 1: return arr mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) return merge(left_half, right_half) def merge(left, right): Merges two sorted lists into a single sorted list. sorted_list = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a python function to sort a list of strings based on a custom comparison logic. The comparison logic should be based on the length of the string, and within strings of the same length, they should be sorted alphabetically.","solution":"def custom_sort(strings): Sort a list of strings based on their length, and alphabetically within strings of the same length. return sorted(strings, key=lambda s: (len(s), s.lower()))"},{"question":"Write a python function to check if a given number is a palindrome. Write another function to check if a given string is a palindrome.","solution":"def is_number_palindrome(n): Checks if the given number is a palindrome. original = str(n) reverse = original[::-1] return original == reverse def is_string_palindrome(s): Checks if the given string is a palindrome. original = s.replace(' ', '').lower() reverse = original[::-1] return original == reverse"},{"question":"Write a python function to find the maximum and minimum elements in a list using a single traversal through the list.","solution":"def find_max_min(nums): Finds the maximum and minimum elements in a list using a single traversal. Args: nums (list): A list of numbers. Returns: tuple: A tuple containing the maximum and minimum element. if not nums: return None max_num = min_num = nums[0] for num in nums[1:]: if num > max_num: max_num = num if num < min_num: min_num = num return max_num, min_num"},{"question":"Write a python function to calculate the factorials of a given list of numbers. For example, if the list is \`[3, 4, 5]\`, the factorial of 3 is \`6\`, the factorial of 4 is \`24\`, and the factorial of 5 is \`120\`. The function should return a list containing the factorials of the original numbers in the same order.","solution":"from math import factorial def list_factorials(numbers): Returns a list of factorials of the given list of numbers. :param list numbers: A list of integers. :return: A list of factorials of given numbers. :rtype: list return [factorial(number) for number in numbers]"},{"question":"Write a python function to identify and remove duplicates from a list of integers. The function should take a list of integers as input and return a new list with all duplicates removed.","solution":"def remove_duplicates(input_list): Takes a list of integers and returns a new list with duplicates removed. return list(set(input_list))"},{"question":"Write a python function to insert a node at a given position in a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next class LinkedList: def __init__(self): self.head = None def insert_at_position(self, value, position): Insert a node with \`value\` at position \`position\`. If \`position\` is 0, the node becomes the new head. new_node = ListNode(value) if position == 0: new_node.next = self.head self.head = new_node return current = self.head for _ in range(position - 1): if current is None: raise IndexError(\\"Position out of bounds\\") current = current.next new_node.next = current.next current.next = new_node def to_list(self): Utility method to convert the linked list to a Python list for easier verification. result = [] current = self.head while current: result.append(current.value) current = current.next return result"},{"question":"Write a python function to find the intersection of two integer arrays. The intersection should contain each element only once, and the result should be sorted in ascending order. Additionally, the solution should have a time complexity of O(nlogn) or better.","solution":"def intersection(nums1, nums2): Returns a sorted list of the unique intersection of two integer arrays. nums1_set = set(nums1) nums2_set = set(nums2) result = sorted(nums1_set & nums2_set) return result"},{"question":"Write a python function to find the nth number in the Fibonacci sequence. The sequence starts with 1 and 1, and each subsequent number is the sum of the two preceding ones. Example: 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. The sequence starts with 1 and 1, and each subsequent number is the sum of the two preceding ones. :param n: The position in the Fibonacci sequence :type n: int :return: The nth number in the Fibonacci sequence :rtype: int if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to find the frequency of each character in a given string. The function should return a dictionary where the keys are the characters and the values are their respective frequencies. You should also handle cases where the input string might contain uppercase and lowercase letters the same. To ensure consistency, convert all characters to lowercase or uppercase before counting the frequencies.","solution":"from collections import defaultdict def character_frequency(s): Returns the frequency of each character in the given string. The function converts all characters to lowercase to ensure consistency. freq = defaultdict(int) for char in s.lower(): freq[char] += 1 return dict(freq)"},{"question":"Write a python function to find the mode of a list of numbers.","solution":"from collections import Counter def find_mode(numbers): Returns the mode of a list of numbers. If multiple numbers are modes, it returns a list of them. if not numbers: return None counter = Counter(numbers) max_count = max(counter.values()) modes = [num for num, count in counter.items() if count == max_count] if len(modes) == 1: return modes[0] return modes"},{"question":"Write a python function to generate a list of all possible permutations of a given string s and return them in lexicographical order.","solution":"from itertools import permutations def generate_permutations(s): Generates a list of all possible permutations of the given string \`s\` and returns them in lexicographical order. perm = sorted(set(''.join(p) for p in permutations(s))) return perm"},{"question":"Write a python function to detect the presence of at least one pair of consecutive numbers in a list of integers.","solution":"def has_consecutive_numbers(nums): Detect the presence of at least one pair of consecutive numbers in a list of integers. Args: nums (list of int): The list of integers to check. Returns: bool: True if there is at least one pair of consecutive numbers, False otherwise. for i in range(len(nums) - 1): if nums[i] + 1 == nums[i + 1] or nums[i] - 1 == nums[i + 1]: return True return False"},{"question":"Write a python function to find all occurrences of a pattern in a given string using regular expressions. The function should return a list of all substrings that match the pattern.","solution":"import re def find_all_occurrences(pattern, string): Finds all occurrences of a pattern in a given string. Parameters: pattern (str): The regular expression pattern to search for. string (str): The string to search within. Returns: list: A list of all substrings that match the pattern. return re.findall(pattern, string)"},{"question":"Write a python function to generate and return a list of all possible anagrams of a given string. An anagram is a rearrangement of letters of a word or phrase to form another word or phrase. Note: The function should ignore case sensitivity and should return unique anagrams, not duplicates.","solution":"from itertools import permutations def generate_anagrams(s): Generates and returns a list of all possible unique anagrams of the given string. :param s: Input string :return: List of unique anagrams s = s.lower() # Ignore case sensitivity # Generate all permutations of the string perms = set(permutations(s)) # Convert each permutation tuple to a string anagrams = [''.join(p) for p in perms] return anagrams"},{"question":"Write a python function to compute the factorial of a positive integer. The function should handle the case where the input is less than or equal to 0 by returning \\"Invalid input\\".","solution":"def factorial(n): Returns the factorial of a positive integer n. If n is less than or equal to 0, returns \\"Invalid input\\". if n <= 0: return \\"Invalid input\\" elif n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Write a python function to calculate the SHA-256 hash of a given string.","solution":"import hashlib def calculate_sha256(input_string): Returns the SHA-256 hash of the input_string. sha256_hash = hashlib.sha256() sha256_hash.update(input_string.encode('utf-8')) return sha256_hash.hexdigest()"},{"question":"Write a python function to sort a given list of strings in dictionary order.","solution":"def sort_strings(strings): Sorts a given list of strings in dictionary order. Parameters: strings (list of str): List of strings to be sorted. Returns: list of str: Sorted list of strings in dictionary order. return sorted(strings)"},{"question":"Write a python function to count the occurrence of 4 adjacent samples that have approximately the same value.","solution":"def count_adjacent_same_values(samples, tolerance=1e-5): Counts the occurrence of 4 adjacent samples that have approximately the same value. Args: samples (list): List of float/int samples. tolerance (float): The threshold for considering two values approximately the same. Returns: int: Count of 4 adjacent samples that have approximately the same value. if len(samples) < 4: return 0 count = 0 for i in range(len(samples) - 3): if ( abs(samples[i] - samples[i + 1]) <= tolerance and abs(samples[i + 1] - samples[i + 2]) <= tolerance and abs(samples[i + 2] - samples[i + 3]) <= tolerance ): count += 1 return count"},{"question":"Write a python function to remove duplicates from a list of integers and return a new list without duplicates. The function should be efficient and work in linear time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from a list of integers and returns a new list without duplicates. Parameters: lst (list): A list of integers Returns: list: A new list without duplicates return list(set(lst))"},{"question":"Write a python function to find the maximum value in a list. Here is the list: \`[3, 5, 1, 8, 2, 9, 4, 7]\`.","solution":"def find_max_value(numbers): Returns the maximum value in the list of numbers. :param numbers: List of integers :return: The maximum integer value in the list if not numbers: raise ValueError(\\"The list cannot be empty\\") max_value = numbers[0] for num in numbers: if num > max_value: max_value = num return max_value # List provided in the question numbers = [3, 5, 1, 8, 2, 9, 4, 7] max_value = find_max_value(numbers)"},{"question":"Write a python function to find the maximum profit you can make by buying and selling a stock at most twice. You cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","solution":"def max_profit(prices): Calculate the maximum profit with at most two transactions. :param prices: List of stock prices :return: Maximum profit if not prices or len(prices) < 2: return 0 n = len(prices) max_profit_one_transaction = [0] * n max_profit_two_transactions = [0] * n # Calculate max profit for one transaction min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) max_profit_one_transaction[i] = max(max_profit_one_transaction[i-1], prices[i] - min_price) # Calculate max profit for two transactions max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) max_profit_two_transactions[i] = max(max_profit_two_transactions[i+1], max_price - prices[i]) # Combine the two max_profit = 0 for i in range(n): max_profit = max(max_profit, max_profit_one_transaction[i] + max_profit_two_transactions[i]) return max_profit"},{"question":"Write a python function to reverse a stack. You can use only one additional stack structure, you are not allowed to use any other data structure like arrays, lists, etc.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if not self.is_empty(): return self.stack.pop() raise IndexError(\\"pop from empty stack\\") def is_empty(self): return len(self.stack) == 0 def __len__(self): return len(self.stack) def __repr__(self): return repr(self.stack) def reverse_stack(orig_stack): Reverses the given stack using only one additional stack. temp_stack = Stack() while not orig_stack.is_empty(): temp_stack.push(orig_stack.pop()) while not temp_stack.is_empty(): orig_stack.push(temp_stack.pop())"},{"question":"Write a python function to find the square root of a given number n to a specific precision 'p' using the Babylonian method.","solution":"def babylonian_sqrt(n, p): Returns the square root of a number 'n' with precision 'p' using the Babylonian method. Parameters: n (float): The number to find the square root of. p (int): The precision (number of decimal places). Returns: float: The square root of 'n' rounded to 'p' decimal places. if n < 0: raise ValueError(\\"Cannot compute the square root of a negative number\\") if p < 0: raise ValueError(\\"Precision cannot be negative\\") x = n y = 1.0 e = 0.1 ** (p + 1) while abs(x - y) > e: x = (x + y) / 2 y = n / x return round(x, p)"},{"question":"Write a python function to merge multiple dictionaries from a list into a single dictionary. If there are duplicate keys, the values from the later dictionaries in the list should overwrite those from the earlier dictionaries.","solution":"def merge_dictionaries(dicts): Merges a list of dictionaries into a single dictionary. If there are duplicate keys, the values from the later dictionaries in the list will overwrite those from the earlier dictionaries. Parameters: dicts (List[dict]): List of dictionaries to merge. Returns: dict: Merged dictionary. merged_dict = {} for d in dicts: merged_dict.update(d) return merged_dict"},{"question":"Write a python function to find the third largest number in a list. How can I approach this problem?","solution":"def third_largest(nums): Returns the third largest number in the list nums. if len(nums) < 3: return None nums_sorted = sorted(nums, reverse=True) return nums_sorted[2] if len(nums_sorted) >= 3 else None"},{"question":"Write a python function to find all files under \\"/path/to/search\\" which have the \\".py\\" file extension and store the full path of each file in a list. Return an empty list if no files are found.","solution":"import os def find_python_files(directory): Returns a list of full paths to all .py files found under the given directory. Parameters: directory (str): The path to the directory to be searched. Returns: List[str]: A list containing full paths to all .py files. python_files = [] for root, dirs, files in os.walk(directory): for file in files: if file.endswith(\\".py\\"): python_files.append(os.path.join(root, file)) return python_files"},{"question":"Write a python function to convert a string to a list of words. The function should ignore any leading or trailing whitespace and consider words to be separated by one or more spaces. If the input string is empty or only contains whitespaces, the function should return an empty list.","solution":"def string_to_word_list(s): Converts a string to a list of words. Ignores leading or trailing whitespace and considers words to be separated by one or more spaces. :param s: Input string :return: List of words return s.strip().split()"},{"question":"Write a python function to calculate the mean of a list of numbers and return it as a float.","solution":"def calculate_mean(numbers): Returns the mean of a list of numbers as a float. :param numbers: List of numbers :return: Mean of the numbers if not numbers: return 0.0 return sum(numbers) / len(numbers)"},{"question":"Write a python function to wrap a string using indentation. The function should take at least two arguments, the string to wrap and the string to use for indentation. The function should return the original string wrapped with the given indentation on each line.","solution":"def wrap_string(text, indentation): Wraps the given text with the given indentation on each line. Args: text (str): The string to be wrapped. indentation (str): The string to use for indentation. Returns: str: The wrapped string. # Split the text into lines lines = text.split('n') # Wrap each line with the indentation wrapped_lines = [indentation + line for line in lines] # Join the wrapped lines with newline characters and return return 'n'.join(wrapped_lines)"},{"question":"Write a python function to sort a list of integers using the bubble sort algorithm. Also, handle the case where the list might be empty or contain duplicates.","solution":"def bubble_sort(arr): Sorts a list of integers using the bubble sort algorithm. Handles empty lists and lists with duplicates. n = len(arr) if n == 0: return arr # Return immediately if the list is empty to save computation for i in range(n): swapped = False for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] # Swap the elements swapped = True # If no two elements were swapped in the inner loop, then the list is already sorted if not swapped: break return arr"},{"question":"Write a python function to print the numbers from 1 to \\"N\\" inclusively, where \\"N\\" is the input number. If \\"N\\" is less than or equal to zero, your function should print nothing.","solution":"def print_numbers(N): Prints the numbers from 1 to N inclusively. If N is less than or equal to zero, prints nothing. if N <= 0: return for number in range(1, N+1): print(number)"},{"question":"Write a python function to sort the numbers in a list using the quick sort algorithm. Implement quick sort to sort a list of integers.","solution":"def quick_sort(arr): Sorts a list of integers using the quick sort algorithm. Parameters: arr (list): A list of integers to sort Returns: list: A new list of sorted integers if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)"},{"question":"Write a python function to replace all vowels in a given string with the method approach","solution":"def replace_vowels(s): Replaces all vowels in the input string with the character '*'. vowels = \\"aeiouAEIOU\\" result = [] for char in s: if char in vowels: result.append('*') else: result.append(char) return ''.join(result)"},{"question":"Write a python function to implement a basic calculator that supports the operations +,-, *, /, and % (Modulus division). The function should take at least three arguments: the calculation operator and the two operands. It should return the result of the calculation.","solution":"def calculator(operator, operand1, operand2): Perform basic calculations based on the provided operator and operands. Parameters: operator (str): A string indicating the operation ('+', '-', '*', '/', '%') operand1 (float/int): The first operand. operand2 (float/int): The second operand. Returns: float/int: The result of the calculation. if operator == '+': return operand1 + operand2 elif operator == '-': return operand1 - operand2 elif operator == '*': return operand1 * operand2 elif operator == '/': if operand2 == 0: raise ValueError(\\"Cannot divide by zero\\") return operand1 / operand2 elif operator == '%': if operand2 == 0: raise ValueError(\\"Cannot modulo by zero\\") return operand1 % operand2 else: raise ValueError(\\"Invalid operator\\")"},{"question":"Write a python function to calculate the sum of all even Fibonacci numbers up to a given limit. For example, if the limit is 4, the even Fibonacci numbers are 2 and 8, and the sum is 10.","solution":"def sum_even_fibonacci(limit): Calculates the sum of all even Fibonacci numbers up to a given limit. :param limit: The upper limit for the Fibonacci sequence. :return: Sum of even Fibonacci numbers up to the given limit. a, b = 1, 2 sum_even = 0 while a <= limit: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Write a python function to remove duplicates and sort an array of numbers.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from the array and sorts the result in ascending order. Parameters: arr (list): List of numbers Returns: list: Sorted list of numbers with duplicates removed return sorted(set(arr))"},{"question":"Write a python function to print all the prime numbers between two numbers 'a' and 'b', inclusive. The function should take two parameters, with a < b.","solution":"def print_primes_between(a, b): Prints all prime numbers between a and b, inclusive. Parameters: a (int): The starting integer (inclusive). b (int): The ending integer (inclusive). def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True primes = [num for num in range(a, b + 1) if is_prime(num)] return primes"},{"question":"Write a python function to remove duplicates from a list of numbers using a different approach than the nested loop method. You can use a set to help remove duplicates. How would you implement this function?","solution":"def remove_duplicates(numbers): Removes duplicates from a list of numbers using a set. Args: numbers (list): A list of numbers. Returns: list: A list with duplicates removed. return list(set(numbers))"},{"question":"Write a python function to merge two sorted lists into a new sorted list using the merge sort technique. The function should take two sorted lists as input and return the merged sorted list. Ensure that the function has a time complexity of O(n + m), where n and m are the lengths of the input lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a new sorted list. i, j = 0, 0 merged_list = [] while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a python function to convert a given string 's' to a list of integers where each integer represents the ASCII value of the corresponding character in the string.","solution":"def string_to_ascii_list(s): Converts a given string to a list of integers where each integer is the ASCII value of the corresponding character in the string. return [ord(char) for char in s]"},{"question":"Write a python function to check if a given string is a valid palindrome ignoring cases and spaces.","solution":"def is_valid_palindrome(s): Returns True if the given string is a palindrome ignoring cases and spaces, otherwise returns False. # Remove spaces and convert to lowercase cleaned = ''.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to check if a string is a number or not, but ignore the leading and trailing whitespaces, and also consider dot, comma, and minus sign as valid number characters.","solution":"def is_number(s): Check if the input string s is a number, ignoring leading and trailing whitespaces. Considers dot, comma and minus sign as valid number characters. try: float(s.strip().replace(',', '')) return True except ValueError: return False"},{"question":"Write a python function to implement a stack.","solution":"class Stack: A simple Stack implementation using a list. def __init__(self): self.items = [] def push(self, item): Pushes an item onto the stack. self.items.append(item) def pop(self): Removes and returns the item at the top of the stack. Returns None if the stack is empty. if not self.is_empty(): return self.items.pop() return None def peek(self): Returns the item at the top of the stack without removing it. Returns None if the stack is empty. if not self.is_empty(): return self.items[-1] return None def is_empty(self): Returns True if the stack is empty, False otherwise. return len(self.items) == 0 def size(self): Returns the number of items in the stack. return len(self.items)"},{"question":"Write a python function to replace all occurrences of a given substring with another substring in a string. For example, if the string is \\"Hello world, world is beautiful\\", and the substrings are \\"world\\" and \\"Earth\\", the resulting string should be \\"Hello Earth, Earth is beautiful\\".","solution":"def replace_substring(s, old_substring, new_substring): Returns a new string with all occurrences of old_substring replaced by new_substring in s. return s.replace(old_substring, new_substring)"},{"question":"Write a python function to find the binary representation of the given decimal number. The function should take an integer as input and return a string representing the binary equivalent of the number. The function should not use any built-in functions like bin() to convert the number.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. Args: n (int): A decimal number. Returns: str: A string representing the binary equivalent of the number. if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: remainder = n % 2 binary = str(remainder) + binary n = n // 2 if is_negative: binary = \\"-\\" + binary return binary"},{"question":"Write a python function to construct a URL shortener and explain the code line by line.","solution":"import string import random class URLShortener: A simple URL shortener class. def __init__(self): Initialize the URL shortener with a dictionary to store URL mappings and a base URL for the service. self.url_map = {} # This dictionary stores the mapping from short to long URL self.base_url = \\"http://short.url/\\" # Base URL for the shortened URLs self.chars = string.ascii_letters + string.digits # Characters used for generating the short URL key def generate_short_link(self, long_url): Generates a short URL for the given long URL. :param long_url: The original URL to be shortened. :return: A shortened URL. while True: short_key = ''.join(random.choices(self.chars, k=6)) # Generate a random 6-character string if short_key not in self.url_map: # Ensure the generated key is unique break self.url_map[short_key] = long_url # Store the mapping return self.base_url + short_key # Return the full short URL def get_long_url(self, short_url): Retrieves the original long URL from the short URL. :param short_url: The shortened URL. :return: The original long URL, or None if not found. short_key = short_url.replace(self.base_url, \\"\\") # Extract the short key from the short URL return self.url_map.get(short_key) # Return the original long URL if found, else None"},{"question":"Write a python function to generate the Fibonacci sequence with a given length. The function should take two parameters: \`n\` (the length of the sequence to generate) and \`mode\` (either 'loop' for iterative method or 'recursive' for recursive method). The function should return the Fibonacci sequence as a list.","solution":"def fibonacci(n, mode='loop'): Generates the Fibonacci sequence of length n. Parameters: n (int): Length of the sequence to generate. mode (str): Method to generate the sequence ('loop' for iterative, 'recursive' for recursive). Returns: list: Fibonacci sequence of length n. if mode == 'loop': return fibonacci_loop(n) elif mode == 'recursive': return fibonacci_recursive_helper(n) else: raise ValueError(\\"Invalid mode. Use 'loop' or 'recursive'.\\") def fibonacci_loop(n): sequence = [] a, b = 0, 1 for _ in range(n): sequence.append(a) a, b = b, a + b return sequence def fibonacci_recursive_helper(n): sequence = [] for i in range(n): sequence.append(fibonacci_recursive(i)) return sequence def fibonacci_recursive(n): if n <= 1: return n else: return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)"},{"question":"Write a python function to find the length of the longest pallindrome substring in a given string.","solution":"def longest_palindrome_substring(s: str) -> int: Returns the length of the longest palindrome substring in the given string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 if s is None or len(s) == 0: return 0 start = end = 0 for i in range(len(s)): len1 = expand_around_center(s, i, i) # Odd length palindrome len2 = expand_around_center(s, i, i + 1) # Even length palindrome max_len = max(len1, len2) if max_len > end - start: start = i - (max_len - 1) // 2 end = i + max_len // 2 return end - start + 1"},{"question":"Write a python function to check if a string has all unique characters, using Python's set data structure.","solution":"def has_unique_characters(s): Returns True if the string s has all unique characters, otherwise returns False. return len(set(s)) == len(s)"},{"question":"Write a python function to convert a binary string to a boolean array. The binary string will consist of 0s and 1s and the function should return a boolean array with the same elements as the binary string, but where each element True for 1 and False for 0.","solution":"def binary_string_to_boolean_array(binary_string): Converts a binary string to a boolean array. Parameters: binary_string (str): A string of '0's and '1's. Returns: list: A list of booleans where '1' is True and '0' is False. return [char == '1' for char in binary_string]"},{"question":"Write a python function to calculate the sum of a dictionary's all values and return the sum. You can make use of built-in functions and methods if available.","solution":"def sum_dict_values(d): Returns the sum of all values in the dictionary. return sum(d.values())"},{"question":"Write a python function to add two numbers represented by linked lists. The linked list represents a number in reverse order. For example, 123 is represented as 3 -> 2 -> 1.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by linked lists l1 and l2. The numbers are represented in reverse order. Returns the sum as a linked list in the same reverse order. dummy_head = ListNode() current = dummy_head carry = 0 while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 total = total % 10 current.next = ListNode(total) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a python function to calculate the frequency of each word in a given string. The function should ignore case and return a dictionary where the keys are the words and the values are their frequencies.","solution":"def word_frequency(s): Returns a dictionary with the frequency of each word in the given string. The function is case-insensitive. # Convert string to lower case to ignore case and split into words words = s.lower().split() frequency = {} for word in words: # Increment count for each word in the dictionary if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"Write a python function to find the most frequent word in a text. You should return the most frequent word(s) and their frequency in a dictionary. If there are multiple words with the highest frequency, return all of them.","solution":"from collections import Counter def most_frequent_words(text): Returns the most frequent word(s) in the text and their frequency. If there are multiple words with the highest frequency, return all of them in a dictionary. :param text: Input text as a string :type text: str :return: Dictionary with most frequent word(s) and their frequency :rtype: dict # Replace punctuations with spaces and lower the cases words = text.lower().replace('.', '').replace(',', '').replace('!', '').replace('?', '').split() word_counts = Counter(words) if not word_counts: return {} max_freq = max(word_counts.values()) most_frequent = {word: freq for word, freq in word_counts.items() if freq == max_freq} return most_frequent"},{"question":"Write a python function to reverse a string. ** reverse_string(\\"hello\\") should return \\"olleh\\"**","solution":"def reverse_string(s): Returns the reverse of the input string s. return s[::-1]"},{"question":"Write a python function to reverse a string. You should also handle edge cases such as an empty string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a python function to convert a string to a list of words. The function should handle punctuation and treat words separated by commas, spaces, or new lines as individual words in the list.","solution":"import re def string_to_word_list(s): Converts a string into a list of words. The function handles punctuation and treats words separated by commas, spaces, or new lines as individual words in the list. Args: s (str): Input string. Returns: list: List of words. # Use regex to split the string by any non-word characters words = re.split(r'W+', s) # Filter out any empty strings that result from the splitting return [word for word in words if word]"},{"question":"Write a python function to reverse a string. The function should work in both Python 2 and Python 3. Additionally, demonstrate how to handle type checking and basic exception handling within the function.","solution":"def reverse_string(s): Reverses the given string. Args: s (str): The string to be reversed. Returns: str: The reversed string. Raises: TypeError: If the input is not a string. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") return s[::-1]"},{"question":"Write a python function to print the first n Fibonacci numbers using recursion. However, the function should handle the base cases and recursion properly to avoid infinite recursion.","solution":"def fib_recursive(n, a=0, b=1): Returns the first n Fibonacci numbers using recursion. if n <= 0: return [] elif n == 1: return [a] return [a] + fib_recursive(n-1, b, a+b)"},{"question":"Write a python function to convert a string to a binary string.","solution":"def string_to_binary(input_string): Converts a string to a binary string. Each character in the input_string is converted to its 8-bit binary representation. return ''.join(format(ord(char), '08b') for char in input_string)"},{"question":"Write a python function to check if the input is an integer. How should you do it?","solution":"def is_integer(value): Checks if the input value is an integer. Parameters: value: The input value to check. Returns: bool: True if input is an integer, else False return isinstance(value, int)"},{"question":"Write a python function to create a generator that yields the squares of numbers from 1 to n.","solution":"def squares_generator(n): Generator function that yields the squares of numbers from 1 to n. for i in range(1, n+1): yield i*i"},{"question":"Write a python function to check if a string contains only alphanumeric characters (letters and numbers) and has a minimum length of 8 characters.","solution":"def is_valid_string(input_string): Check if the input string contains only alphanumeric characters and has a minimum length of 8 characters. Args: input_string: str - The string to be checked. Returns: bool - True if the string meets the criteria, False otherwise. return input_string.isalnum() and len(input_string) >= 8"},{"question":"Write a python function to calculate the sum of the squares of all numbers from 1 to n (inclusive) using a for loop. The function should be named \`sum_squares\` and it should take one parameter, \`n\`, which is an integer representing the upper limit of the range.","solution":"def sum_squares(n): Returns the sum of the squares of all numbers from 1 to n (inclusive). total = 0 for i in range(1, n + 1): total += i * i return total"},{"question":"Write a python function to compute the binomial coefficient C(n,k) using dynamic programming.","solution":"def binomial_coefficient(n, k): Returns the binomial coefficient C(n, k) using dynamic programming. if k > n: return 0 # Create a 2D table to store previously calculated values dp = [[0] * (k + 1) for _ in range(n + 1)] # Compute binomial coefficients using the iterative approach for i in range(n + 1): for j in range(min(i, k) + 1): # Base cases if j == 0 or j == i: dp[i][j] = 1 else: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] return dp[n][k]"},{"question":"Write a python function to find the maximum depth of a binary tree. The function should take in a binary tree represented as a list of lists, where each sublist represents a node and contains the node value followed by its two children as their indices in the list. The binary tree is assumed to be well-formed with no index out of bounds.","solution":"def max_depth(tree): Returns the maximum depth of the binary tree. Args: tree (list): A list of lists where each sublist contains the node value and its two children as indices. Returns: int: The maximum depth of the binary tree. if not tree: return 0 def depth(node_index): if node_index == -1: return 0 left_index = tree[node_index][1] right_index = tree[node_index][2] return 1 + max(depth(left_index), depth(right_index)) return depth(0)"},{"question":"Write a python function to sort a list of tuples in ascending order using a custom comparator, where the comparator should compare the second element in each tuple.","solution":"def sort_tuples_by_second_element(tuples_list): Sort a list of tuples in ascending order based on the second element. Parameters: tuples_list (list): List of tuples to be sorted. Returns: list: Sorted list of tuples. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Write a python function to check if a number is divisible by another number. If the number is divisible, your function should return the quotient, otherwise, it should return \\"not divisible\\".","solution":"def check_divisibility(dividend, divisor): Checks if the dividend is divisible by the divisor. If divisible, returns the quotient, otherwise returns 'not divisible'. if divisor == 0: return \\"division by zero is undefined\\" if dividend % divisor == 0: return dividend // divisor else: return \\"not divisible\\""},{"question":"Write a python function to find a sorted array that the difference between its maximum element and minimum element is less than or equal to 1.","solution":"def find_sorted_array_with_diff_1(arr): Find a sorted subarray such that the difference between its maximum and minimum element is <= 1. if not arr: return [] sorted_arr = sorted(arr) subarray = [sorted_arr[0]] for num in sorted_arr[1:]: if abs(num - subarray[0]) <= 1: subarray.append(num) else: break return subarray"},{"question":"Write a python function to find the number of days in the passed year.","solution":"def number_of_days_in_year(year): Returns the number of days in the given year. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 366 return 365"},{"question":"Write a python function to count the number of 1s in a binary number. The function should take an integer as input and return the count of 1 bits in its binary representation.","solution":"def count_ones_in_binary(n): Returns the count of 1 bits in the binary representation of the given integer. Parameters: n (int): The integer to be converted to binary and counted. Returns: int: The number of 1 bits in the binary representation of n. return bin(n).count('1')"},{"question":"Write a python function to count the number of missing values in a given 2D array. A missing value is represented by \`None\`. The function should take a 2D array as input and return the count of \`None\` values in the array.","solution":"def count_missing_values(arr): Returns the count of None values in a given 2D array. :param arr: List[List[Any]] - The 2D array to count None values in. :return: int - The count of None values. count = 0 for row in arr: count += row.count(None) return count"},{"question":"Write a python function to convert a given string into an integer. If the string is not a valid integer, the function should raise a ValueError. The function should also handle leading and trailing whitespaces in the string.","solution":"def string_to_integer(s): Converts a given string into an integer. Handles leading/trailing spaces and raises ValueError if the string is not a valid integer. if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") s = s.strip() # Remove leading/trailing whitespaces try: return int(s) except ValueError: raise ValueError(f\\"Invalid integer value: '{s}'\\")"},{"question":"Write a python function to convert a string of parentheses into a balanced string by adding the minimum number of parentheses. The goal is to make sure that every opening parenthesis has a corresponding closing parenthesis and vice versa.","solution":"def balance_parentheses(s): Returns a balanced string by adding the minimum number of parentheses. open_needed = 0 # Count of '(' needed close_needed = 0 # Count of ')' needed for char in s: if char == '(': # For an opening parenthesis, we expect a closing one close_needed += 1 elif char == ')': if close_needed > 0: close_needed -= 1 # Matching with an earlier '(' else: open_needed += 1 # Need an opening parenthesis for this ')' # Add the necessary '(' at the beginning and ')' at the end return '(' * open_needed + s + ')' * close_needed"},{"question":"Write a python function to count the number of times a word appears in a file. You should handle exceptions and edge cases. For instance, the word could be case-sensitive, and the file could not exist.","solution":"def count_word_occurrences(file_path, word): Counts the number of times a word (case-sensitive) appears in a file. :param file_path: str, path to the file :param word: str, the word to search for :return: int, the count of the word occurrences try: with open(file_path, 'r', encoding='utf-8') as file: content = file.read() return content.split().count(word) except FileNotFoundError: print(f\\"Error: The file {file_path} does not exist.\\") return -1"},{"question":"Write a python function to write data to a CSV file. The function should take two arguments: the filename and a list of lists, where each inner list represents a row in the CSV file.","solution":"import csv def write_to_csv(filename, data): Writes data to a CSV file. Parameters: filename (str): The name of the file to write to. data (list of lists): The data to write; each inner list represents a row. with open(filename, mode='w', newline='') as file: writer = csv.writer(file) for row in data: writer.writerow(row)"},{"question":"Write a python function to determine the second largest number in a list. Provide a detailed explanation of the function and solution.","solution":"def second_largest(numbers): Returns the second largest number in a list. This function first identifies the largest number in the list and then finds the largest number among the rest, i.e., the second largest. Parameters: numbers (list): A list of integers. Returns: int: The second largest number in the list or None if it does not exist. if len(numbers) < 2: return None first = second = float('-inf') for num in numbers: if num > first: second = first first = num elif first > num > second: second = num return second if second != float('-inf') else None"},{"question":"Write a python function to find out all the even numbers from the provided list and return them as a new list.","solution":"def find_even_numbers(numbers): Returns a list of all the even numbers from the provided list. :param numbers: List of integers. :return: List of even integers. return [num for num in numbers if num % 2 == 0]"},{"question":"Write a python function to check if a list contains any duplicate elements. If it does, return a set containing the duplicate elements. If there are no duplicates, return an empty set.","solution":"def find_duplicates(lst): Checks if a list contains any duplicate elements and returns a set of duplicates. If there are no duplicates, returns an empty set. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return duplicates"},{"question":"Write a python function to calculate the cumulative sum of a list.","solution":"def cumulative_sum(lst): Returns a list where each element is the cumulative sum of the elements up to that point in the input list. cum_sum = [] total = 0 for num in lst: total += num cum_sum.append(total) return cum_sum"},{"question":"Write a python function to find the first occurrence of a given character in a string, excluding any spaces.","solution":"def first_occurrence_excluding_spaces(s, char): Returns the index of the first occurrence of 'char' in 's', excluding spaces. If 'char' is not found in 's' excluding spaces, returns -1. for index, ch in enumerate(s): if ch == ' ': continue if ch == char: return index return -1"},{"question":"Write a python function to find the smallest positive integer \`n\` such that the sum of the digits of \`n\` is equal to \`k\`. The digits can be in any form (integer, float, or any combination of them), and you should handle these cases where possible.","solution":"def smallest_positive_integer_with_digit_sum(k): Finds the smallest positive integer n such that the sum of its digits is equal to k. if k <= 0: return None # There are no positive integers with non-positive digit sum. # Start with the smallest positive integer, 1, and check further n = 1 while True: if sum(int(digit) for digit in str(n)) == k: return n n += 1"},{"question":"Write a python function to detect a cycle in a graph represented as an adjacency list using Depth First Search (DFS). If a cycle is detected, the function should return \`True\`.","solution":"def has_cycle(graph): Detects a cycle in a directed graph using DFS. :param graph: Dictionary where keys are nodes and values are lists of adjacent nodes. :return: True if the graph has a cycle, False otherwise. def dfs(node): if node in visited: return False if node in rec_stack: return True rec_stack.add(node) for neighbor in graph.get(node, []): if dfs(neighbor): return True rec_stack.remove(node) visited.add(node) return False visited = set() rec_stack = set() for node in graph: if dfs(node): return True return False"},{"question":"Write a python function to solve the problem of finding the shortest path in a weighted graph using Dijkstra's algorithm. Dijkstra’s algorithm is very commonly used to solve this kind of problem. The graph is represented as an adjacency list.","solution":"import heapq def dijkstra(graph, start): Finds the shortest path in a weighted graph using Dijkstra's algorithm. Parameters: graph (dict): The graph represented as an adjacency list. The keys are the node ids and the values are lists of tuples (neighbor, weight). start (any): The starting node for the algorithm. Returns: tuple: Two dictionaries - distances, previous_nodes representing the shortest distance to each node and the previous node in the path respectively. # Priority queue to store (distance, node) priority_queue = [] heapq.heappush(priority_queue, (0, start)) # Dictionary to store the shortest distance to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Dictionary to store the previous node in the path previous_nodes = {node: None for node in graph} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # Nodes can only be added to the queue if they improve upon the known shortest path to a node if current_distance > distances[current_node]: continue # Examine all the neighbors of the current node for neighbor, weight in graph[current_node]: distance = current_distance + weight # If a shorter path to the neighbor is found if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return distances, previous_nodes # Example Usage # graph = { # 'A': [('B', 1), ('C', 4)], # 'B': [('A', 1), ('C', 2), ('D', 5)], # 'C': [('A', 4), ('B', 2), ('D', 1)], # 'D': [('B', 5), ('C', 1)] # } # distances, previous_nodes = dijkstra(graph, 'A') # print(distances) # print(previous_nodes)"},{"question":"Write a python function to check if two strings are isomorphic. Two strings are isomorphic if the characters in the first string can be replaced to get the second string, maintaining the mapping of characters. For example, \\"egg\\" and \\"add\\" are isomorphic, but \\"egg\\" and \\"adda\\" are not.","solution":"def is_isomorphic(str1, str2): Check if two strings are isomorphic. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if strings are isomorphic, otherwise False. if len(str1) != len(str2): return False mapping1 = {} mapping2 = {} for c1, c2 in zip(str1, str2): if c1 in mapping1 and mapping1[c1] != c2: return False if c2 in mapping2 and mapping2[c2] != c1: return False mapping1[c1] = c2 mapping2[c2] = c1 return True"},{"question":"Write a python function to generate all possible combinations of a given list, where the order matters and repetition is allowed. You should implement this function using recursion. Additionally, handle the edge case where the input list is empty.","solution":"def generate_combinations(input_list, length): Generates all possible combinations of the given length from the input_list, where the order matters and repetition is allowed using recursion. Parameters: input_list (list): The list of items to generate combinations from. length (int): The desired length of the combinations. Returns: list: A list of combinations, each combination is represented as a list. if length == 0: return [[]] if not input_list: return [] combinations = [] for item in input_list: for sub_combination in generate_combinations(input_list, length - 1): combinations.append([item] + sub_combination) return combinations"},{"question":"Write a python function to add two numbers represented by linked lists. The leftmost node of the linked list contains the least significant digit, and each node contains a single digit.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Add two numbers represented by linked lists. :param l1: ListNode representing first number :param l2: ListNode representing second number :return: ListNode representing their sum dummy_head = ListNode(0) current = dummy_head carry = 0 while l1 is not None or l2 is not None: x = l1.val if l1 is not None else 0 y = l2.val if l2 is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Write a python function to find the factors of a given number and return them in ascending order.","solution":"def find_factors(n): Returns a list of factors of n in ascending order. factors = [] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to find the longest substring with exactly k unique characters in a given string. For example, if the input string is \\"aabacbebebe\\" and k=3, the function should return \\"cbebebe\\", which is the longest substring with exactly 3 unique characters.","solution":"def longest_substring_with_k_unique_chars(s, k): Finds the longest substring with exactly k unique characters in a given string. :param s: The input string :param k: The number of unique characters :return: The longest substring with exactly k unique characters from collections import defaultdict n = len(s) if k == 0: return \\"\\" if n == 0 or k > n: return \\"\\" left = 0 right = 0 max_length = 0 max_substring = \\"\\" char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k: if right - left + 1 > max_length: max_length = right - left + 1 max_substring = s[left:right+1] right += 1 return max_substring"},{"question":"Write a python function to check if a binary tree is a complete binary tree.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_complete_binary_tree(root): Check if the binary tree is complete. A complete binary tree is a binary tree in which all the levels are completely filled except possibly for the lowest one, which is filled from the left. :param root: TreeNode, the root of the binary tree :return: bool, True if the binary tree is complete, False otherwise if not root: return True queue = deque([root]) reached_end = False while queue: current = queue.popleft() if not current: reached_end = True else: if reached_end: return False queue.append(current.left) queue.append(current.right) return True"},{"question":"Write a python function to extract and return all the numbers from a given string. The function should handle the extraction of integers and floating-point numbers (including negative and positive numbers).","solution":"import re def extract_numbers(s): Extracts and returns all the numbers (both integers and floating-point, including negative ones) from a given string. :param s: The input string :type s: str :return: A list of numbers found in the string :rtype: list of floats # Regex pattern for matching both integers and floating-point numbers pattern = r'-?d+.?d*' numbers = re.findall(pattern, s) return [float(num) for num in numbers]"},{"question":"Write a python function to check if a given integer \`n\` is a perfect square. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares while 2, 3, and 14 are not.","solution":"import math def is_perfect_square(n): Returns True if 'n' is a perfect square, False otherwise. if n < 0: return False root = int(math.sqrt(n)) return root * root == n"},{"question":"Write a python function to count the number of connected components in an undirected graph. Each element in the input list represents a connection between two nodes. For example, if the input is [(1, 2), (2, 3), (4, 5)], there are three connected components: {1, 2, 3} and {4, 5}, and the node {6} is not connected to any other node.","solution":"def count_connected_components(edges): Returns the number of connected components in an undirected graph. :param edges: List of tuples where each tuple represents an edge (u, v) :return: Number of connected components from collections import defaultdict # Function to perform DFS and mark all the vertices reachable from v def dfs(v, visited, adjacency_list): stack = [v] while stack: vertex = stack.pop() if vertex not in visited: visited.add(vertex) stack.extend(adjacency_list[vertex]) # Building the adjacency list adjacency_list = defaultdict(list) nodes = set() for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) nodes.add(u) nodes.add(v) # Variable to count the number of connected components connected_components = 0 visited = set() # Loop through all nodes and perform DFS if the node is not visited yet for node in nodes: if node not in visited: # Perform DFS dfs(node, visited, adjacency_list) # Increment the number of connected components connected_components += 1 return connected_components"},{"question":"Write a python function to find all unique pairs in a list that add up to a specific target value.","solution":"def find_pairs_with_sum(nums, target): Finds all unique pairs in a list that sum up to a specific target value. Parameters: nums (list): The list of integers to search through. target (int): The target sum value. Returns: list: A list of tuples, each containing a pair of numbers that add up to the target. nums.sort() left, right = 0, len(nums) - 1 pairs = [] while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pairs.append((nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Write a python function to find the number of unique possible complete binary trees that can be made with N nodes (N is even). A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.","solution":"def count_complete_binary_trees(N): Returns the number of unique possible complete binary trees with N nodes. Assumption: N is even. # Function to calculate the Catalan number def catalan_number(n): if n == 0 or n == 1: return 1 catalan = [0] * (n + 1) catalan[0] = catalan[1] = 1 for i in range(2, n + 1): catalan[i] = 0 for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] return catalan[n] if N % 2 != 0 or N <= 0: raise ValueError(\\"N must be an even positive integer\\") # The number of unique complete binary trees with N nodes is given by the (N/2)-th Catalan number return catalan_number(N // 2)"},{"question":"Write a python function to find the longest common prefix (LCP) among a list of strings. The function should return the LCP if it exists, otherwise, return an empty string.","solution":"def longest_common_prefix(strs): Find the longest common prefix among a list of strings. Parameters: strs (List[str]): A list of strings. Returns: str: The longest common prefix, or an empty string if no common prefix exists. if not strs: return \\"\\" # Start by assuming the whole first string is the common prefix prefix = strs[0] # Iterate over the rest of the strings for s in strs[1:]: # Reduce the prefix until it matches the start of the current string while s[:len(prefix)] != prefix and prefix: prefix = prefix[:-1] # If the prefix is empty, there is no common prefix if not prefix: return \\"\\" return prefix"},{"question":"Write a python function to merge two lists and sort the merged list in ascending order. Return the sorted merged list.","solution":"def merge_and_sort(list1, list2): Merges two lists and sorts the merged list in ascending order. Args: list1 (list): First list to merge. list2 (list): Second list to merge. Returns: list: Sorted merged list. merged_list = list1 + list2 merged_list.sort() return merged_list"},{"question":"Write a python function to implement a basic calculator that can perform the operations of addition (+), subtraction (-), multiplication (*), and division (/). The function should take in two numbers and an operator as arguments and return the result of the operation. If the operator is not one of the specified operations, the function should return \\"Invalid operation\\".","solution":"def basic_calculator(a, b, operator): Performs a calculation based on the given operator. Parameters: a (float): The first number. b (float): The second number. operator (str): The operator ('+', '-', '*', '/'). Returns: float: The result of the calculation or a string indicating an invalid operation. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: return \\"Cannot divide by zero\\" return a / b else: return \\"Invalid operation\\""},{"question":"Write a python function to check if all the characters in a string appear at least twice.","solution":"def all_chars_at_least_twice(s): Check if all characters in a string appear at least twice. Args: s (str): The input string. Returns: bool: True if all characters appear at least twice, False otherwise. from collections import Counter # Count occurrences of each character char_count = Counter(s) # Check if all characters appear at least twice for count in char_count.values(): if count < 2: return False return True"},{"question":"Write a python function to test if a string counts as the same when read forward and backwards. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, disregarding spaces, punctuation, and capitalization.","solution":"def is_palindrome(s): Returns True if the provided string is a palindrome, False otherwise. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a python function to print all the perfect squares of numbers between 1 to n. Perfect squares are numbers that can be expressed as the product of an integer with itself.","solution":"def perfect_squares(n): Returns a list of perfect squares between 1 and n (inclusive if n is a perfect square). :param n: The upper limit of the range to check for perfect squares. :type n: int :return: A list of perfect squares between 1 and n. :rtype: List[int] squares = [] i = 1 while i * i <= n: squares.append(i * i) i += 1 return squares"},{"question":"Write a python function to find the maximum size of a rectangular matrix that can fit within another rectangular matrix.","solution":"def max_submatrix_size(rows_A, cols_A, rows_B, cols_B): Determines the maximum rectangular sub-matrix size of matrix B that can fit into matrix A. Parameters: rows_A (int): Number of rows in matrix A cols_A (int): Number of columns in matrix A rows_B (int): Number of rows in matrix B cols_B (int): Number of columns in matrix B Returns: tuple: A tuple containing the maximum number of rows and columns of the sub-matrix (number of rows, number of columns) if rows_B <= rows_A and cols_B <= cols_A: return (rows_B, cols_B) else: return (min(rows_A, rows_B), min(cols_A, cols_B))"},{"question":"Write a python function to calculate the length of the longest subsequence in a given string, where all characters in the subsequence are distinct.","solution":"def longest_distinct_subsequence(s): Returns the length of the longest subsequence in a given string where all characters are distinct. char_set = set() max_length = 0 current_length = 0 for char in s: if char not in char_set: char_set.add(char) current_length += 1 else: max_length = max(max_length, current_length) char_set = {char} current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to find the most frequent element in a list. If there is a tie, return the first one encountered. How can I solve this problem?","solution":"def most_frequent_element(lst): Finds the most frequent element in a list. If there is a tie, returns the first one encountered. Parameters: lst (list): A list of elements. Returns: The most frequent element in the list. if not lst: return None frequency = {} max_frequency = 0 most_frequent = lst[0] for item in lst: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 if frequency[item] > max_frequency: max_frequency = frequency[item] most_frequent = item elif frequency[item] == max_frequency and lst.index(item) < lst.index(most_frequent): most_frequent = item return most_frequent"},{"question":"Write a python function to find the second smallest element in a list. If the list has fewer than 2 elements, the function should return None.","solution":"def second_smallest(numbers): Returns the second smallest element in a list. If the list has fewer than 2 elements, returns None. if len(numbers) < 2: return None first, second = float('inf'), float('inf') for number in numbers: if number < first: first, second = number, first elif first < number < second: second = number return second if second != float('inf') else None"},{"question":"Write a python function to find the shortest path in a grid. The grid is represented by a 2D list where 0 represents an empty cell and 1 represents a cell with an obstacle. The function should return the length of the shortest path from the top-left corner to the bottom-right corner of the grid. If no path exists, the function should return -1.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path from the top-left corner to the bottom-right corner of the grid. Args: - grid (list of list of int): 2D grid where 0 represents an empty cell and 1 represents a cell with an obstacle. Returns: - int: The length of the shortest path from the top-left to the bottom-right corner. Returns -1 if no path exists. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a python function to determine if a given string is a palindrome. The function should return True if the string is a palindrome, and False otherwise. Additionally, handle cases where the string may contain non-alphanumeric characters, ignoring them.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, False otherwise. Ignores non-alphanumeric characters and is case-insensitive. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Write a python function to find the maximum digital sum of a number a^b where a, b < 100","solution":"def max_digital_sum(limit): Finds the maximum digital sum of a number a^b where a, b < limit. def digital_sum(n): return sum(int(digit) for digit in str(n)) max_sum = 0 for a in range(1, limit): for b in range(1, limit): num = a ** b current_sum = digital_sum(num) if current_sum > max_sum: max_sum = current_sum return max_sum # Special limit as per the user's specification def max_digital_sum_100(): return max_digital_sum(100)"},{"question":"Write a python function to get the maximum profit that can be earned from the stock market in a single transaction. The price of the stock on a given day is stored in a list where the index represents the day. You can only buy and sell once. For example, if the list is [7,1,5,3,6,4], the maximum profit you can earn is by buying at the price of 1 (day 2) and selling at the price of 6 (day 5), so the maximum profit is 5.","solution":"def max_profit(prices): Calculate the maximum profit that can be earned from a list of stock prices. You can buy and sell the stock only once. :param prices: List of prices where index represents the day. :return: Maximum profit from buying and selling the stock once. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Write a python function to find the number of subarrays in an array that contain an even number of 1s.","solution":"def count_subarrays_with_even_ones(arr): This function returns the number of subarrays that contain an even number of 1s. even_count = 0 odd_count = 0 current_count = 0 total_subarrays = 0 for num in arr: if num == 1: current_count += 1 if current_count % 2 == 0: total_subarrays += even_count + 1 even_count += 1 else: total_subarrays += odd_count odd_count += 1 return total_subarrays"},{"question":"Write a python function to find the first appearance of a character in a string. The function should take two strings as input: the first string is the main string \`main_str\` and the second string is the character \`char\`. The function should return the index of the first occurrence of the character in the main string. If the character is not found, the function should return -1.","solution":"def find_first_appearance(main_str, char): Returns the index of the first occurrence of the character 'char' in the string 'main_str'. If 'char' is not found in 'main_str', returns -1. return main_str.find(char)"},{"question":"Write a python function to solve the FizzBuzz challenge.","solution":"def fizzbuzz(n): Returns 'Fizz' if n is divisible by 3, 'Buzz' if n is divisible by 5, 'FizzBuzz' if n is divisible by both 3 and 5, otherwise returns n. if n % 3 == 0 and n % 5 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return n"},{"question":"Write a python function to find the maximum sum of a non-empty subarray in a given array of integers. A subarray is a contiguous part of an array. For example, for the array [1, -2, 3, 10, -4, 7, 2, -5], the maximum sum of a non-empty subarray is 18, which is the sum of the subarray [3, 10, -4, 7, 2]. Use Kadane's Algorithm to solve this problem.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a non-empty subarray in a given array of integers. Uses Kadane's Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to check if a year is a leap year or not, given the year as an integer.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, otherwise False. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a python function to find the nth multiple of a given number, which is also a Fibonacci number.","solution":"def nth_multiple_fibonacci(num, nth): Returns the nth multiple of a given number that is also a Fibonacci number. Parameters: num (int): The given number. nth (int): The nth multiple to find. Returns: int: The nth multiple of the given number that is also a Fibonacci number. def is_multiple_of(n, divisor): return n % divisor == 0 def fibonacci_generator(): a, b = 0, 1 while True: yield a a, b = b, a + b fib_gen = fibonacci_generator() count = 0 while True: fib_num = next(fib_gen) if is_multiple_of(fib_num, num): count += 1 if count == nth: return fib_num"},{"question":"Write a python function to find the maximum product of segments in a number. The number can be split into any number of parts, each part being a non-empty integer and the product of these parts should be the maximum possible.","solution":"def max_product_of_segments(n): Given an integer n, this function finds the maximum product of its segments. n can be split into any number of parts, each part being a non-empty integer, and the product of these parts should be the maximum possible. if n <= 3: return n - 1 if n % 3 == 0: return 3 ** (n // 3) elif n % 3 == 1: return 3 ** (n // 3 - 1) * 4 else: # n % 3 == 2 return 3 ** (n // 3) * 2"},{"question":"Write a python function to remove all the letters in a string and only keep the digits.","solution":"def remove_letters(input_string): Removes all letters from the input string and only keeps the digits. :param input_string: String from which letters are to be removed. :return: A string containing only the digits from the input string. return ''.join(char for char in input_string if char.isdigit())"},{"question":"Write a python function to find the length of the longest substring of a given string without repeating characters without using any built-in functions or libraries other than the standard library in python.","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. start = 0 max_len = 0 used_char = {} for i, char in enumerate(s): if char in used_char and start <= used_char[char]: start = used_char[char] + 1 else: max_len = max(max_len, i - start + 1) used_char[char] = i return max_len"},{"question":"Write a python function to perform an in-order traversal of a binary search tree (BST) without using recursion. The function should return the elements in the order they are visited during the traversal.","solution":"def inorder_traversal(root): Perform in-order traversal of a binary search tree without using recursion. :param root: TreeNode, the root of the BST :return: List[int], the elements in the order they are visited result = [] stack = [] current = root while current is not None or stack: # Reach the left most TreeNode while current is not None: stack.append(current) current = current.left # Current must be None at this point current = stack.pop() result.append(current.val) # We have visited the node and its left subtree. # Now, it's right subtree's turn current = current.right return result class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right"},{"question":"Write a python function to check whether a string is a rotation of another string using the dictionary data structure.","solution":"def is_rotation_using_dictionary(s1, s2): Check if s2 is a rotation of s1 using dictionary data structure. :param s1: Original string :param s2: Possible rotation of original string :return: True if s2 is a rotation of s1, otherwise False if len(s1) != len(s2): return False # Concatenate s1 with itself concatenated = s1 + s1 # Check if s2 is a substring of concatenated string return s2 in concatenated"},{"question":"Write a python function to find the nth Fibonacci number. The function should be efficient enough to handle large values of n without causing a stack overflow or excessive memory usage.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach to handle large values of n efficiently. if n <= 0: raise ValueError(\\"n must be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, a + b return b"},{"question":"Write a python function to implement a stack data structure with push, pop, and peek operations. The stack should also support a min function that retrieves the minimum element in constant time.","solution":"class MinStack: def __init__(self): Initialize the stack. self.stack = [] self.min_stack = [] def push(self, value): Push a value onto the stack. self.stack.append(value) if not self.min_stack or value <= self.min_stack[-1]: self.min_stack.append(value) def pop(self): Remove the element on the top of the stack and return it. if not self.stack: raise IndexError(\\"pop from empty stack\\") value = self.stack.pop() if value == self.min_stack[-1]: self.min_stack.pop() return value def peek(self): Get the top element of the stack. if not self.stack: raise IndexError(\\"peek from empty stack\\") return self.stack[-1] def get_min(self): Retrieve the minimum element in the stack. if not self.min_stack: raise IndexError(\\"get_min from empty stack\\") return self.min_stack[-1]"},{"question":"Write a python function to calculate the sum of the series where each term is the square of the difference between the current number and its index. The series is from 1 to n. For example, if n=4, the series is (1-1)^2 + (2-0)^2 + (3-2)^2 + (4-3)^2 = 1 + 4 + 1 + 1 = 7.","solution":"def sum_of_series(n): Returns the sum of the series where each term is the square of the difference between the current number and its index (from 1 to n). return sum((i - (i-1)) ** 2 for i in range(1, n+1))"},{"question":"Write a python function to remove duplicate characters from a string, preserving the order of appearance.","solution":"def remove_duplicates(s): Returns a string with duplicate characters removed, preserving the order of appearance. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to count the number of elements to the right of a given element that are greater than the element itself. The given element is identified by its value. For instance, if the input array is [1, 2, 3, 2, 1, 5] and the given element is 3, the function should return 1 because there is only one element (5) to the right of 3 that is greater than 3.","solution":"def count_greater_elements(arr, element): Counts the number of elements to the right of the given element in the array that are greater than the element itself. Parameters: arr (list): The input array. element (any): The given element whose right-side elements are to be considered. Returns: int: The count of elements greater than the given element. try: index = arr.index(element) except ValueError: return 0 count = 0 for val in arr[index+1:]: if val > element: count += 1 return count"},{"question":"Write a python function to convert a given string to a list of integers where each character's ASCII value is represented.","solution":"def string_to_ascii_list(s): Converts a given string to a list of integers where each integer represents the ASCII value of the corresponding character in the string. Parameters: s (str): The input string. Returns: List[int]: A list of integers representing the ASCII values of the characters in the string. return [ord(char) for char in s]"},{"question":"Write a python function to insert a given string to be inserted at a specified index in a list. The function should take three parameters: the list to be modified, the string to be inserted, and the index at which the string should be inserted.","solution":"def insert_string_at_index(lst, string, index): Inserts a given string into a specified index within a list. Parameters: lst (list): The list to be modified. string (str): The string to be inserted. index (int): The index at which to insert the string. Returns: list: A new list with the string inserted at the specified index. lst.insert(index, string) return lst"},{"question":"Write a python function to find the shortest substring of a string that contains all unique characters. For example, if the input is \\"abcabcbb\\", the output should be \\"abc\\" because it is the shortest substring that contains all unique characters.","solution":"def shortest_unique_substring(s): Finds the shortest substring of a string that contains all unique characters. if not s: return \\"\\" unique_chars = set(s) required_char_count = len(unique_chars) min_len = float('inf') min_substring = \\"\\" left, right = 0, 0 char_count = {} while right < len(s): # include the right character into the window if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 # check if the window is valid while len(char_count) == required_char_count: # update the minimum length and substring current_length = right - left + 1 if current_length < min_len: min_len = current_length min_substring = s[left:right+1] # try to reduce the window size by moving left pointer char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 # move the right pointer right += 1 return min_substring"},{"question":"Write a python function to find the best time to buy and sell stock in a way that maximizes profit. You can complete at most one transaction. If no profit is possible, return 0.","solution":"def max_profit(prices): This function takes a list of prices and returns the maximum profit that can be achieved by making at most one buy-sell transaction. If no profit is possible, it returns 0. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to find the minimum number of coins required to make up a given amount using a given list of coin denominations. The function should be efficient and return the minimum number of coins, or -1 if it's not possible to make up that amount using the given coin denominations.","solution":"def min_coins(coins, amount): Function to find the minimum number of coins required to make up a given amount. If it's not possible to make up that amount, return -1. Parameters: coins (list): List of coin denominations available. amount (int): The target amount to make up. Returns: int: Minimum number of coins required or -1 if not possible. # Initialize DP array with a large number, dp[0] = 0 dp = [float('inf')] * (amount + 1) dp[0] = 0 # Fill the DP array for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to convert a given string into a 'camelCase' string.","solution":"def to_camel_case(s): Converts a given string into camelCase. Parameters: s (str): Input string. Returns: str: camelCase formatted string. words = s.split() if not words: return \\"\\" # The first word is all lower-case, subsequent words have their first letter capitalized first_word = words[0].lower() camel_case_words = [first_word] + [word.capitalize() for word in words[1:]] return ''.join(camel_case_words)"},{"question":"Write a python function to remove all the vowels from a given string \`s\`. Define another function to remove all the consonants from the string. Then, test both functions on a sample input.","solution":"def remove_vowels(s): Remove all vowels from the given string s. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels]) def remove_consonants(s): Remove all consonants from the given string s. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char in vowels])"},{"question":"Write a python function to remove all occurrences of a given value from a list and return the modified list. The function should be named \`remove_value\` and should take three parameters: \`lst\` (the original list), \`value\` (the value to be removed), and a boolean \`in_place\` (which if set to True, modifies the list in place and returns None; if False, returns a new list).","solution":"def remove_value(lst, value, in_place=True): Removes all occurrences of \`value\` from \`lst\`. Parameters: lst (list): The original list. value: The value to be removed. in_place (bool): If True, modifies the list in place and returns None. If False, returns a new list with values removed. Returns: list or None: None if in_place is True, otherwise a new list with the value removed. if in_place: while value in lst: lst.remove(value) return None else: return [item for item in lst if item != value]"},{"question":"Write a python function to add two numbers using a while loop.","solution":"def add_with_while_loop(a, b): Returns the sum of a and b using a while loop. result = a count = 0 while count < abs(b): if b > 0: result += 1 else: result -= 1 count += 1 return result"},{"question":"Write a python function to find the second smallest number in a list of integers. If there is no second smallest number (because the list is too short or all numbers are the same), the function should return \`None\`.","solution":"def second_smallest(numbers): Returns the second smallest number in a list of integers. If there is no second smallest number, returns None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to print \\"Hello World!\\" multiple times. The number of times is provided as an input parameter to the function.","solution":"def print_hello_world(times): Prints \\"Hello World!\\" the number of times specified by the input parameter. :param times: The number of times to print \\"Hello World!\\". for _ in range(times): print(\\"Hello World!\\")"},{"question":"Write a python function to reverse a string using slicing. You are expected to handle cases where the input might not be a string, and return a meaningful error message for such cases.","solution":"def reverse_string(s): Reverses a given string using slicing. Parameters: s (str): the string to reverse Returns: str: the reversed string str: an error message if the input is not a string if not isinstance(s, str): return \\"Input is not a string\\" return s[::-1]"},{"question":"Write a python function to check if a binary tree is height-balanced or not. A binary tree is considered height-balanced if the absolute difference between the heights of the left and right subtree of any node is not more than 1.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Checks if a binary tree is height-balanced. :param root: TreeNode, the root of the binary tree. :return: bool, True if the tree is height-balanced, False otherwise. def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 height = max(left_height, right_height) + 1 return height, balanced _, result = check_height(root) return result"},{"question":"Write a python function to implement a queue data structure using list.","solution":"class Queue: def __init__(self): Initializes the queue. self.items = [] def is_empty(self): Returns True if the queue is empty, False otherwise. return self.items == [] def enqueue(self, item): Adds an item to the rear of the queue. self.items.append(item) def dequeue(self): Removes and returns the item from the front of the queue. if self.is_empty(): raise IndexError(\\"Dequeue from an empty queue\\") return self.items.pop(0) def size(self): Returns the number of items in the queue. return len(self.items) def peek(self): Returns the item at the front of the queue without removing it. if self.is_empty(): raise IndexError(\\"Peek from an empty queue\\") return self.items[0]"},{"question":"Write a python function to implement depth-first search (DFS) on a binary tree. The function should return the nodes of the tree in a depth-first post-order traversal. The function should take the root of the binary tree as input and should return a list of the nodes' values.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def dfs_post_order(root): Perform depth-first search in post-order traversal on a binary tree. Args: root (TreeNode): The root of the binary tree. Returns: List[int]: The nodes' values in post-order traversal. if root is None: return [] result = [] def post_order(node): if node is not None: post_order(node.left) post_order(node.right) result.append(node.val) post_order(root) return result"},{"question":"Write a python function to remove duplicates from a list and return the modified list. You should ensure that the function operates in linear time complexity, O(n).","solution":"def remove_duplicates(lst): Removes duplicates from the input list and returns the modified list. seen = set() output = [] for item in lst: if item not in seen: seen.add(item) output.append(item) return output"},{"question":"Write a python function to determine if a number is a perfect square. Here is the number we are checking: 49.","solution":"import math def is_perfect_square(n): Determines if the given number n is a perfect square. Args: n (int): The number to check. Returns: bool: True if n is a perfect square, False otherwise. if n < 0: return False root = math.isqrt(n) return root * root == n # Check if 49 is a perfect square is_perfect_square_49 = is_perfect_square(49)"},{"question":"Write a python function to generate the nth Fibonacci number using an iterative approach. The Fibonacci sequence is defined by starting with F(0) = 0 and F(1) = 1, and each subsequent number is the sum of the two preceding ones.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"Write a python function to identify prime numbers within a given range. Additionally, for each prime number identified, calculate and return the sum of its digits.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_digits(n): Calculate the sum of digits of a number. return sum(int(digit) for digit in str(n)) def prime_numbers_with_digit_sums(start, end): Identify the prime numbers within a given range and for each prime number, calculate and return the sum of its digits. Returns a list of tuples where each tuple contains a prime number and its digit sum. result = [] for number in range(start, end + 1): if is_prime(number): digit_sum = sum_of_digits(number) result.append((number, digit_sum)) return result"},{"question":"Write a python function to merge two sorte arrays","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Args: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: Merged and sorted array. merged_array = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append any remaining elements from arr1 or arr2 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a python function to recursively print the elements of a list. How can we do this?","solution":"def print_list_elements(lst, index=0): Recursively prints the elements of a list. :param lst: List of elements to be printed. :param index: Current index to be printed. if index < len(lst): print(lst[index]) print_list_elements(lst, index + 1)"},{"question":"Write a python function to read a file, remove duplicate lines, and save the result back to a new file.","solution":"def remove_duplicate_lines(input_file, output_file): Reads a file, removes duplicate lines, and writes the result to a new file. Parameters: - input_file (str): The path of the input file to read from. - output_file (str): The path of the output file to write the result to. seen_lines = set() with open(input_file, 'r') as infile: with open(output_file, 'w') as outfile: for line in infile: if line not in seen_lines: outfile.write(line) seen_lines.add(line)"},{"question":"Write a python function to find the number of occurrences of a substring in a string without using the built-in count() method.","solution":"def count_substring_occurrences(main_string, substring): Returns the number of occurrences of the substring in the main_string. count = 0 substring_length = len(substring) for i in range(len(main_string) - substring_length + 1): if main_string[i:i+substring_length] == substring: count += 1 return count"},{"question":"Write a python function to calculate the area of a circle given its radius. The function should handle the case where the radius is not provided (use a default value of 1) and return the area formatted to 2 decimal places.","solution":"import math def area_of_circle(radius=1): Calculates the area of a circle given its radius. If the radius is not provided, it defaults to 1. Returns the area formatted to 2 decimal places. area = math.pi * (radius ** 2) return round(area, 2)"},{"question":"Write a python function to calculate the sum of factorial of each digit in a number. Here is the number 123, the function should return the factorials of its digits i.e 1!, 2!, and 3!, then return the summation of these factorials i.e. 1+2+6 = 9.","solution":"import math def sum_of_factorial_of_digits(number): Returns the sum of the factorial of each digit in the number. Parameters: number (int): The number whose digits' factorials are to be summed. Returns: int: The sum of the factorial of each digit. # Convert the number to string to iterate over each digit str_number = str(number) # Calculate the sum of the factorial of each digit factorial_sum = sum(math.factorial(int(digit)) for digit in str_number) return factorial_sum"},{"question":"Write a python function to find the first non-repeating character in a string. I can't use any additional data structures like dictionaries, lists, or sets. I also can't use any functions that reduce the problem to one that I can't solve without using additional data structures. I have to solve this problem by converting the string into an array and then iterating over it to check for the first non-repeating character.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in a string. If all characters repeat, returns None. length = len(s) for i in range(length): found_duplicate = False for j in range(length): if s[i] == s[j] and i != j: found_duplicate = True break if not found_duplicate: return s[i] return None"},{"question":"Write a python function to filter out and return all prime numbers from a given list of integers, using list comprehension.","solution":"def is_prime(n): Checks if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(numbers): Filters and returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a python function to generate all the subsets of a given set without using any built-in functions like combinations() or powerset().","solution":"def subsets(s): Returns a list of all subsets of the given set s. result = [] def backtrack(curr, index): result.append(curr[:]) for i in range(index, len(s)): curr.append(s[i]) backtrack(curr, i + 1) curr.pop() backtrack([], 0) return result"},{"question":"Write a python function to reverse a list of strings. The function should take a list of strings as input and return a new list with the strings in reverse order. If the input list is empty, the function should return an empty list.","solution":"def reverse_list_of_strings(strings): Returns a new list with the strings in reverse order. :param strings: List of strings to be reversed :type strings: list :return: Reversed list of strings :rtype: list # Return the reversed list return strings[::-1]"},{"question":"Write a python function to calculate the sum of the squares of the first N natural numbers, where the sum is only considered for numbers that are divisible by a given divisor K.","solution":"def sum_of_squares_divisible_by_k(N, K): Returns the sum of the squares of the first N natural numbers that are divisible by K. Parameters: N (int): The range of natural numbers to consider. K (int): The divisor to check divisibility. Returns: int: The sum of the squares of natural numbers divisible by K. return sum(i ** 2 for i in range(1, N + 1) if i % K == 0)"},{"question":"Write a python function to find the number of occurrences of the word \\"python\\" in a given string in a case-insensitive manner. You should also provide a second version of the function that returns a dictionary with the word \\"python\\" as the key and the total count as the value.","solution":"def count_python_occurrences(text): Returns the number of occurrences of the word 'python' in a given string in a case-insensitive manner. return text.lower().split().count('python') def count_python_occurrences_dict(text): Returns a dictionary with the word 'python' as the key and the total count as the value. return {'python': text.lower().split().count('python')}"},{"question":"Write a python function to validate an email address format.","solution":"import re def validate_email(email): Validates the format of an email address. Returns True if valid, False otherwise. if not isinstance(email, str): return False # Regular expression pattern for validating an email address email_regex = r\\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\" # Use re.match to see if the email matches the pattern return re.match(email_regex, email) is not None"},{"question":"Write a python function to compute the factorial of a number using recursion. Also, write a program to check if the factorial of a number is palindromic. A palindromic number reads the same forward and backward.","solution":"def factorial(n): Computes the factorial of a number n using recursion. if n == 0 or n == 1: return 1 else: return n * factorial(n - 1) def is_palindromic_number(n): Checks if the number n is palindromic. return str(n) == str(n)[::-1]"},{"question":"Write a python function to find the longest common subsequence (LCS) between two strings. What is Longest Common Subsequence?","solution":"def longest_common_subsequence(text1, text2): Returns the length of the longest common subsequence of text1 and text2. # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (len(text2) + 1) for _ in range(len(text1) + 1)] # Populate the dp array from bottom-up for i in range(len(text1) - 1, -1, -1): for j in range(len(text2) - 1, -1, -1): if text1[i] == text2[j]: dp[i][j] = 1 + dp[i + 1][j + 1] else: dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) # The length of the longest common subsequence will be in dp[0][0] return dp[0][0]"},{"question":"Write a python function to join all elements in a list of strings into a single string, separated by spaces.","solution":"def join_strings(strings): Joins all elements in a list of strings into a single string, separated by spaces. :param strings: List[str] - List of strings to join :return: str - Single string with all elements joined by spaces return ' '.join(strings)"},{"question":"Write a python function to find the maximum depth of a binary tree. The binary tree is represented as a list of lists, where each sublist represents a level in the tree, and each element in the sublist represents a node.","solution":"def max_depth(tree): Returns the maximum depth of a binary tree represented as a list of lists. Parameters: tree (list): A list of lists where each sublist represents a level in the tree. Returns: int: The maximum depth of the tree. return len(tree)"},{"question":"Write a python function to find the number of words and sentences in a given string.","solution":"import re def count_words_and_sentences(text): Returns the number of words and sentences in the given text. Args: text (str): The input text string to be analyzed. Returns: tuple: A tuple containing two integers - the number of words and the number of sentences. # Counting words words = re.findall(r'bw+b', text) # Counting sentences using a simple heuristic (period, question mark, exclamation mark) sentences = re.findall(r'[.!?]+', text) return (len(words), len(sentences))"},{"question":"Write a python function to determine whether an integer is a palindrome or not. The function should not use any extra space (caveat: you are allowed to use the call stack for recursion).","solution":"def is_palindrome(n): Returns True if the integer n is a palindrome, False otherwise. # Negative numbers are not palindromes if n < 0: return False # Create reversed number original = n reversed_num = 0 while n > 0: reversed_num = reversed_num * 10 + n % 10 n //= 10 return original == reversed_num"},{"question":"Write a python function to solve a puzzle involving chess knights that can move in an \\"L\\" shape on a chessboard. The function should determine if a knight, starting from a given square, can reach a target square by making a series of legal knight moves. The function should also return the minimum number of moves required to reach the target square.","solution":"from collections import deque def is_valid_move(x, y, n): Check if the given position (x, y) is within the bounds of the board. return 0 <= x < n and 0 <= y < n def min_knight_moves(n, start, target): Returns the minimum number of knight moves required to reach the target square from the starting square on an n x n chessboard. # Directions in which a knight can move directions = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # BFS initialization queue = deque([(start[0], start[1], 0)]) visited = set([(start[0], start[1])]) while queue: x, y, moves = queue.popleft() if (x, y) == target: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, n) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1 # No valid path found (though this should not occur with a normal chessboard)"},{"question":"Write a python function to calculate the area of a circle given the radius. The function should return the area rounded to 2 decimal places.","solution":"import math def area_of_circle(radius): Calculates the area of a circle given the radius. The area is rounded to 2 decimal places. :param radius: The radius of the circle :return: The area of the circle rounded to 2 decimal places area = math.pi * (radius ** 2) return round(area, 2)"},{"question":"Write a python function to convert a list of integers into a list of binary strings. Each number in the list should be converted to its 8-bit binary representation.","solution":"def to_8bit_binary(int_list): Converts a list of integers into a list of 8-bit binary strings. Each integer in the list is converted to its 8-bit binary representation. Parameters: int_list (List[int]): A list of integers. Returns: List[str]: A list of 8-bit binary strings. return [format(num, '08b') for num in int_list]"},{"question":"Write a python function to sort a list of dictionaries by an arbitrary key, the key is provided by user.","solution":"def sort_dicts_by_key(dicts, key): Sorts a list of dictionaries by a specified key. Parameters: - dicts: List of dictionaries to be sorted. - key: The key to sort the dictionaries by. Returns: - A new list of dictionaries sorted by the specified key. return sorted(dicts, key=lambda x: x[key])"},{"question":"Write a python function to climb a staircase using recursion. The function should take two parameters: the total number of steps in the staircase (n) and the maximum number of steps one can advance at a time (k). The function should return the number of distinct ways one can climb the staircase.","solution":"def climb_stairs(n, k): Returns the number of distinct ways to climb a staircase with \`n\` steps, where the maximum number of steps one can advance at a time is \`k\`. Args: n (int): Total number of steps in the staircase. k (int): Maximum number of steps one can advance at a time. Returns: int: Number of distinct ways to climb the staircase. if n == 0: return 1 elif n < 0: return 0 total_ways = 0 for i in range(1, k+1): total_ways += climb_stairs(n - i, k) return total_ways"},{"question":"Write a python function to check if a list of strings contains any duplicates. You should return \`True\` if there are duplicates and \`False\` otherwise.","solution":"def has_duplicates(strings): Check if a list of strings contains any duplicates. :param strings: List of strings to check. :return: True if there are duplicates, False otherwise. return len(strings) != len(set(strings))"},{"question":"Write a python function to find the minimum 'k' numbers from a given list of integers.","solution":"import heapq def find_min_k_numbers(nums, k): Returns the k smallest numbers from the list nums. Parameters: nums (list): List of integers k (int): Number of smallest elements to find Returns: list: k smallest numbers from nums if k <= 0: return [] return heapq.nsmallest(k, nums)"},{"question":"Write a python function to find the sum of all odd numbers in a given list. The function should handle any length list and should return the sum as an integer.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of all odd numbers in a given list. :param numbers: List of integers :return: Integer sum of odd numbers return sum(num for num in numbers if num % 2 != 0)"},{"question":"Write a python function to generate the nth Fibonacci number using recursion. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with initial conditions F(0) = 0 and F(1) = 1. Your function should use recursion to calculate the nth Fibonacci number. Additionally, include a simple check function to test your solution with a few data points.","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a python function to find the number of days in a given month and year. The function should handle both leap years and non-leap years. A typical non-leap year has 365 days, and a leap year has 366 days. The leap year condition is that the year is divisible by 4, except for years which are both divisible by 100 and not divisible by 400.","solution":"def number_of_days_in_month(year, month): Returns the number of days in a given month and year. if month < 1 or month > 12: raise ValueError(\\"Invalid month. Month should be between 1 and 12.\\") # Days in each month (index 1-based for months 1 to 12) month_days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year for February if month == 2 and is_leap_year(year): return 29 else: return month_days[month] def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Write a python function to generate the longest palindrome from a given string. The function should consider only alphanumeric characters and ignore cases. For example, given the string 'a man, a plan, a canal: Panama', the function should return 'AmanaplanacanalPanama'.","solution":"def longest_palindrome(s): Generates the longest palindrome from given string considering only alphanumeric characters and ignoring cases. import re s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() return s[::-1].capitalize()"},{"question":"Write a python function to sum numbers in a list of lists","solution":"def sum_list_of_lists(list_of_lists): Sums numbers in a list of lists. Parameters: - list_of_lists: a list where each element is a list of numbers Returns: - The sum of all the numbers in the list of lists. total_sum = 0 for sublist in list_of_lists: total_sum += sum(sublist) return total_sum"},{"question":"Write a python function to calculate the sum of all odd numbers in a list using a lambda function.","solution":"def sum_of_odd_numbers(numbers): Returns the sum of all odd numbers in the given list. return sum(filter(lambda x: x % 2 != 0, numbers))"},{"question":"Write a python function to check if a number in a binary tree is a perfect binary tree or not. In a perfect binary tree, all internal nodes have two children and all leaves are at the same level.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.value = key def get_depth(node): depth = 0 while node is not None: depth += 1 node = node.left return depth def is_perfect_binary_tree(root, depth, level=0): if root is None: return True if root.left is None and root.right is None: return depth == level + 1 if root.left is None or root.right is None: return False return (is_perfect_binary_tree(root.left, depth, level + 1) and is_perfect_binary_tree(root.right, depth, level + 1)) def check_perfect_binary_tree(root): depth = get_depth(root) return is_perfect_binary_tree(root, depth)"},{"question":"Write a python function to calculate the square root of a number using the Newton-Raphson method. The function should take a single argument, \`x\`, and return the square root of \`x\`. If \`x\` is negative, the function should return None, as the square root of a negative number is not a real number.","solution":"def sqrt_newton_raphson(x): Returns the square root of x using the Newton-Raphson method. If x is negative, returns None. if x < 0: return None tolerance = 1e-10 guess = x / 2.0 while abs(guess * guess - x) > tolerance: guess = (guess + x / guess) / 2.0 return guess"},{"question":"Write a python function to reverse a number. For example, if input is 12345, the function should return 54321.","solution":"def reverse_number(n): Returns the reversed form of the input number n. reversed_num = int(str(n)[::-1]) if n >= 0 else -int(str(n)[:0:-1]) return reversed_num"},{"question":"Write a python function to print a diamond pattern of a given size.","solution":"def print_diamond(size): Function to print a diamond pattern of the given size. :param size: An integer indicating the maximum width and height of the diamond. if size < 1: return \\"Size must be a positive integer.\\" diamond = [] # Top part for i in range(size): line = ' ' * (size - i - 1) + '*' * (2 * i + 1) diamond.append(line) # Bottom part for i in range(size - 2, -1, -1): line = ' ' * (size - i - 1) + '*' * (2 * i + 1) diamond.append(line) return \\"n\\".join(diamond)"},{"question":"Write a python function to find the smallest number in a given list. You can assume that the list will not be empty and that all elements will be integers.","solution":"def find_smallest_number(numbers): Returns the smallest number in the given list of integers. :param numbers: List of integers :return: The smallest integer in the list return min(numbers)"},{"question":"Write a python function to calculate and return the factorial of a number without using any inbuilt functions or libraries. You can use only basic operators and control structures.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, returns 1 since 0! = 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the two numbers which sum is closest to a given number","solution":"def closest_sum_pair(nums, target): Finds the two numbers in the list 'nums' whose sum is closest to 'target'. Args: nums (list of int): List of integers. target (int): The target sum. Returns: tuple: Pair of integers from the list whose sum is closest to the target. if len(nums) < 2: raise ValueError(\\"The list must contain at least two numbers.\\") closest_pair = (nums[0], nums[1]) closest_diff = abs(nums[0] + nums[1] - target) for i in range(len(nums)): for j in range(i + 1, len(nums)): current_sum = nums[i] + nums[j] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_pair = (nums[i], nums[j]) return closest_pair"},{"question":"Write a python function to calculate the factorial of a number, but only if the number is non-negative. If the number is negative, the function should raise a ValueError with the message \\"Input must be non-negative.\\"","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Input must be non-negative.\\") elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to return the unique elements from a given list, keeping the order of elements as they appear. Also, provide a piece of code to demonstrate its correctness.","solution":"def unique_elements(lst): Returns unique elements from a given list, preserving their order. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"Write a python function to check if the digits in a given number are in ascending order.","solution":"def digits_in_ascending_order(number): Check if the digits in a given number are in ascending order. :param number: An integer whose digits are to be checked. :return: True if the digits are in ascending order, False otherwise. str_number = str(number) for i in range(len(str_number) - 1): if str_number[i] > str_number[i + 1]: return False return True"},{"question":"Write a python function to calculate the area of a triangle given the lengths of its three sides. Use Heron's formula. The function should also check if the input sides can form a valid triangle before calculating the area.","solution":"from math import sqrt def is_valid_triangle(a, b, c): Check if three sides can form a valid triangle. return a + b > c and a + c > b and b + c > a def triangle_area(a, b, c): Calculate the area of a triangle given the lengths of its three sides using Heron's formula. Ensure the sides form a valid triangle before calculating the area. if not is_valid_triangle(a, b, c): raise ValueError(\\"The given sides do not form a valid triangle.\\") # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area using Heron's formula area = sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. How can I optimize this function to avoid redundant calculations?","solution":"def fibonacci(n, memo={}): Calculates the nth Fibonacci number using recursion with memoization. :param n: Integer, the position in the Fibonacci sequence. :param memo: Dictionary used for memoization to store already calculated Fibonacci numbers. :return: The nth Fibonacci number. if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to generate a list of prime numbers between a given range. For example, if the range is between 10 and 20, the list should return [11, 13, 17, 19].","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def generate_primes(start, end): Returns a list of prime numbers between the given range [start, end]. return [num for num in range(start, end + 1) if is_prime(num)]"},{"question":"Write a python function to find the third maximum number in an array of integers. If the third maximum does not exist, return the maximum number. If the array has less than three unique numbers, return the maximum number.","solution":"def third_max(nums): Returns the third maximum number in an array of integers. If the third maximum does not exist, returns the maximum number. if len(nums) < 3: return max(nums) nums = list(set(nums)) nums.sort(reverse=True) if len(nums) < 3: return nums[0] return nums[2]"},{"question":"Write a python function to validate a given credit card number using the Luhn algorithm. The function should take a string representing the credit card number as input and return \`True\` if the card number is valid, and \`False\` otherwise. The Luhn algorithm is a simple checksum formula used to validate a variety of identification numbers, such as credit card numbers, IMEI numbers, etc.","solution":"def luhn_algorithm(card_number): Validates a credit card number using the Luhn algorithm. Parameters: card_number (str): The credit card number as a string. Returns: bool: True if the card number is valid, False otherwise. def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) checksum = 0 # Reverse the credit card number and process the digits digits.reverse() for i, digit in enumerate(digits): if i % 2 == 1: digit = digit * 2 if digit > 9: digit -= 9 checksum += digit return checksum % 10 == 0"},{"question":"Write a python function to calculate the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive.","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the given string s. The function is case-insensitive. vowels = 'aeiou' return sum(1 for char in s.lower() if char in vowels)"},{"question":"Write a python function to flatten a nested list. The function should handle multiple levels of nesting.","solution":"def flatten(nested_list): Flattens a nested list into a single list of elements. flattened_list = [] def flatten_helper(lst): for item in lst: if isinstance(item, list): flatten_helper(item) else: flattened_list.append(item) flatten_helper(nested_list) return flattened_list"},{"question":"Write a python function to check if a list contains a sublist that forms a palindrome. A palindrome is a sequence of characters that reads the same backward as forward.","solution":"def contains_palindromic_sublist(lst): Returns True if there exists a sublist within the list \`lst\` that forms a palindrome. n = len(lst) # Helper function to check if a sublist is a palindrome def is_palindrome(sublist): return sublist == sublist[::-1] # Check all sublists for i in range(n): for j in range(i + 2, n + 1): # j starts from i+2 to ensure at least a size of 2 for palindrome candidate if is_palindrome(lst[i:j]): return True return False"},{"question":"Write a python function to detect outliers in a dataset. The function should take a numpy array as input and return a list of indices of the outliers.","solution":"import numpy as np def detect_outliers(data): Detects outliers in a dataset using the IQR method. Parameters: data (numpy array): The input dataset. Returns: list: A list of indices of the outliers. q1 = np.percentile(data, 25) q3 = np.percentile(data, 75) iqr = q3 - q1 lower_bound = q1 - 1.5 * iqr upper_bound = q3 + 1.5 * iqr outliers = [] for index, value in enumerate(data): if value < lower_bound or value > upper_bound: outliers.append(index) return outliers"},{"question":"Write a python function to solve the following problem statement: Given an integer array arr, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. If there is no such subarray, return 0. For example, given the array: [-2, 1, -3, 4, -1, 2, 1, -5, 4], the contiguous subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def max_subarray_sum(arr): Given an integer array arr, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Parameters: arr (list of int): The input array containing integers. Returns: int: The sum of the contiguous subarray with the largest sum. If the array is empty, return 0. if not arr: return 0 max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to find the largest element in a list \`nums\` and return its index and value. If there are multiple occurrences of the same largest value, return the index of the first occurrence.","solution":"def find_largest(nums): Finds the largest element in a list and returns its index and value. Args: nums (list): A list of numerical values. Returns: tuple: A tuple containing the index of the largest element and the value. if not nums: return None # Handling empty list case largest_index = 0 largest_value = nums[0] for i in range(1, len(nums)): if nums[i] > largest_value: largest_value = nums[i] largest_index = i return (largest_index, largest_value)"},{"question":"Write a python function to calculate the sum of elements in a list, but only if the element is greater than a given threshold. How do you test this function with different data points?","solution":"def sum_above_threshold(lst, threshold): Returns the sum of elements in lst that are greater than the given threshold. Parameters: lst (list): A list of numbers. threshold (number): The threshold number. Returns: int/float: The sum of elements greater than the threshold. return sum(x for x in lst if x > threshold)"},{"question":"Write a python function to convert a nested list of integers to a flat list. The function should be able to handle arbitrary levels of nesting.","solution":"def flatten(nested_list): Flattens a nested list of integers to a single-level list. :param nested_list: List[int] or List[List] or List[List[...]] :return: List of integers flat_list = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flat_list.append(item) _flatten(nested_list) return flat_list"},{"question":"Write a python function to find the maximum sum of a subarray in a given 2D array of integers. The function should be able to handle both positive and negative integers. The subarray must be contiguous.","solution":"def max_subarray_sum_2d(matrix): Finds the maximum sum of a subarray in a given 2D array of integers. if not matrix or not matrix[0]: return 0 def kadane(arr): max_sum = cur_sum = arr[0] for num in arr[1:]: cur_sum = max(num, cur_sum + num) max_sum = max(max_sum, cur_sum) return max_sum rows, cols = len(matrix), len(matrix[0]) max_sum = float('-inf') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Write a python function to generate all permutations of a given list of numbers.","solution":"from itertools import permutations def generate_permutations(lst): Returns a list of all permutations of the given list of numbers. return [list(p) for p in permutations(lst)]"},{"question":"Write a python function to solve the problem of finding the most frequent element in an array. If there are multiple elements with the same highest frequency, return the smallest one.","solution":"def most_frequent_element(arr): Finds the most frequent element in the array. If multiple elements have the same highest frequency, return the smallest one. if not arr: return None from collections import Counter element_count = Counter(arr) max_frequency = max(element_count.values()) most_frequent = [k for k, v in element_count.items() if v == max_frequency] return min(most_frequent)"},{"question":"Write a python function to add two numbers given as strings. The function should also handle large numbers that exceed the capacity of standard integer types.","solution":"def add_str_numbers(a, b): Returns the sum of two numbers given as strings. Handles large numbers that exceed the capacity of standard integer types. return str(int(a) + int(b))"},{"question":"Write a python function to create a copy of a list.","solution":"def copy_list(original_list): Creates and returns a copy of the provided list. :param original_list: list to be copied :return: copy of the original list return original_list[:]"},{"question":"Write a python function to predict the performance of stocks based on historical price data using linear regression.","solution":"from sklearn.linear_model import LinearRegression import numpy as np def predict_stock_performance(dates, prices, future_date): Predicts the stock performance based on historical price data using linear regression. Parameters: dates (list of int): List of days (as integers) representing the date of each historical price. prices (list of float): List of stock prices corresponding to each date. future_date (int): The future date (as integer) for which we want to predict the price. Returns: float: The predicted stock price for the future date. # Reshape dates for sklearn Linear Regression dates = np.array(dates).reshape(-1, 1) prices = np.array(prices) # Initialize and train the linear regression model model = LinearRegression() model.fit(dates, prices) # Predict the stock price for the future date future_date = np.array([[future_date]]) predicted_price = model.predict(future_date) return predicted_price[0]"},{"question":"Write a python function to check if the app is running on a mobile device or not. If the function is running on a mobile device, return True else False. Mobile devices can be Android, iOS, or any other mobile platforms.","solution":"import platform def is_mobile(): Checks if the app is running on a mobile device. Returns: bool: True if running on a mobile device, else False mobile_platforms = ['android', 'ios', 'win32', 'darwin'] current_platform = platform.system().lower() if current_platform.startswith('linux'): try: with open('/proc/device-tree/model') as model_file: if 'raspberry pi' in model_file.read().lower(): return True except FileNotFoundError: pass return current_platform in mobile_platforms"},{"question":"Write a python function to find the most frequently occurring word in a string.","solution":"def most_frequent_word(text): Returns the most frequently occurring word in the given string. If there are multiple words with the same frequency, it returns one of them. from collections import Counter import re # Using regex to split the text into words, handling punctuation words = re.findall(r'bw+b', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Find the most common word(s) most_common = word_counts.most_common(1) # Return the most frequently occurring word return most_common[0][0] if most_common else None"},{"question":"Write a python function to find the day of the week for a given date. The function should take two parameters: the year and the month. The function should return the day of the week as a string.","solution":"import datetime def find_day_of_week(year, month, day): Returns the day of the week for a given date. :param year: int :param month: int :param day: int :return: str date = datetime.date(year, month, day) return date.strftime(\\"%A\\")"},{"question":"Write a python function to find the greatest common divisor (GCD) of two positive integers. The function should take two parameters, \`a\` and \`b\`, and return their GCD. Additionally, provide a brief explanation of your solution and how it works.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two positive integers a and b. while b: a, b = b, a % b return a"},{"question":"Write a python function to remove all the unnecessary white spaces in a string. python","solution":"def remove_extra_spaces(input_string): Remove all unnecessary white spaces from the input string. Only single spaces will remain between words, and no leading or trailing spaces. :param input_string: string from which to remove unnecessary white spaces :return: cleaned string with no extra white spaces return ' '.join(input_string.split())"},{"question":"Write a python function to find the product of two matrices.","solution":"def matrix_product(A, B): Returns the product of two matrices A and B. Parameters: A (list of lists): The first matrix B (list of lists): The second matrix Returns: list of lists: The product of matrices A and B # Get the number of rows and columns for both matrices rows_A, cols_A = len(A), len(A[0]) rows_B, cols_B = len(B), len(B[0]) # Verify that the number of columns in A is equal to the number of rows in B if cols_A != rows_B: raise ValueError(\\"Number of columns in A must be equal to the number of rows in B\\") # Initialize the result matrix with zeros result = [[0 for _ in range(cols_B)] for _ in range(rows_A)] # Perform matrix multiplication for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to create a list of unique characters in a given string. The order should be the same as the first appearance of each character.","solution":"def unique_characters(s): Returns a list of unique characters in the given string, maintaining the order of their first appearance. seen = set() unique_chars = [] for char in s: if char not in seen: seen.add(char) unique_chars.append(char) return unique_chars"},{"question":"Write a python function to check if a given list of strings is sorted in non-decreasing order. The function should return \`True\` if the list is sorted, otherwise \`False\`. Assume the list contains only integers as strings and does not contain any non-integer values.","solution":"def is_sorted(lst): Checks if the given list of string representations of integers is sorted in non-decreasing order. Parameters: lst (list): A list of strings, each representing an integer. Returns: bool: True if the list is sorted in non-decreasing order, False otherwise. return all(int(lst[i]) <= int(lst[i+1]) for i in range(len(lst) - 1))"},{"question":"Write a python function to print \\"Hello, World!\\" to the console. This function should also return the string \\"Hello, World!\\" from the function.","solution":"def hello_world(): Prints and returns 'Hello, World!'. greeting = \\"Hello, World!\\" print(greeting) return greeting"},{"question":"Write a python function to find the minimum path sum in a grid. The grid contains non-negative integers, and each step you can move to the right or down. At the end of your path, return the minimum sum of all numbers along the path from the top-left corner to the bottom-right corner.","solution":"def min_path_sum(grid): Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # initialize the first row for i in range(1, n): grid[0][i] += grid[0][i-1] # initialize the first column for i in range(1, m): grid[i][0] += grid[i-1][0] # propagate the minimum path sum for each cell for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[-1][-1]"},{"question":"Write a python function to find the maximum product of three numbers in an array. The array may contain both positive and negative numbers. Your function should have a time complexity of O(n).","solution":"def max_product_of_three(nums): Returns the maximum product of three numbers in an array. if len(nums) < 3: raise ValueError(\\"The input array must contain at least three numbers\\") max1, max2, max3 = float('-inf'), float('-inf'), float('-inf') min1, min2 = float('inf'), float('inf') for num in nums: if num > max1: max3, max2, max1 = max2, max1, num elif num > max2: max3, max2 = max2, num elif num > max3: max3 = num if num < min1: min2, min1 = min1, num elif num < min2: min2 = num return max(max1 * max2 * max3, min1 * min2 * max1)"},{"question":"Write a python function to remove all the duplicates from the list and return the new list without using any extra space.","solution":"def remove_duplicates(nums): Removes all duplicates from the list nums and returns the new list. i = 0 while i < len(nums): if nums[i] in nums[:i]: nums.pop(i) else: i += 1 return nums"},{"question":"Write a python function to find whether a number is amicable or not. explain your code along the way.","solution":"def is_amicable_number(n): def sum_of_divisors(num): Returns the sum of proper divisors of num. Proper divisors exclude the number itself. return sum(i for i in range(1, num) if num % i == 0) # Step 1: Compute the sum of divisors of n sum1 = sum_of_divisors(n) # Step 2: Compute the sum of divisors of sum1 sum2 = sum_of_divisors(sum1) # Step 3: Check if the sum of divisors of sum1 is equal to n, and n is not equal to sum1 return sum1 != n and sum2 == n"},{"question":"Write a python function to perform quick sort on a list of numbers. Quick sort is a divide and conquer algorithm.","solution":"def quick_sort(arr): Sorts the input list of numbers using the Quick Sort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"Write a python function to compare two strings and return if one is a subsequence of the other. A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not).","solution":"def is_subsequence(s1, s2): Returns True if s1 is a subsequence of s2 or s2 is a subsequence of s1, otherwise False. def check_subsequence(smaller, larger): it = iter(larger) return all(c in it for c in smaller) return check_subsequence(s1, s2) or check_subsequence(s2, s1)"},{"question":"Write a python function to find the second largest number in a list of integers. If the list has fewer than two elements, return None. Ensure your solution handles negative numbers and non-integer values gracefully, by ignoring them. Only consider integers for the analysis.","solution":"def second_largest(numbers): Returns the second largest number in a list of integers. Non-integer values are ignored. If the list has fewer than two integers, returns None. # Filter out non-integer values integers = [num for num in numbers if isinstance(num, int)] if len(integers) < 2: return None # Use a set to retain unique integer values unique_integers = set(integers) if len(unique_integers) < 2: return None # Sort the unique integers and return the second largest sorted_unique_integers = sorted(unique_integers, reverse=True) return sorted_unique_integers[1]"},{"question":"Write a python function to check if a list of numbers is strictly increasing or decreasing. A list is considered strictly increasing if each element is greater than the previous one, and strictly decreasing if each element is less than the previous one. Your function should return \`True\` if the list is strictly monotonic, and \`False\` otherwise.","solution":"def is_strictly_monotonic(lst): Check if the list of numbers is strictly monotonic. Strictly monotonic means the list is either strictly increasing or strictly decreasing. Parameters: lst (list): List of numbers Returns: bool: True if the list is strictly monotonic, False otherwise if len(lst) < 2: return True # Empty or single-element list is considered monotonic increasing = True decreasing = True for i in range(1, len(lst)): if lst[i] <= lst[i - 1]: increasing = False if lst[i] >= lst[i - 1]: decreasing = False return increasing or decreasing"},{"question":"Write a python function to find the duplicate elements of a given list.","solution":"def find_duplicates(lst): Returns a list of duplicate elements in the given list. Parameters: lst (list): A list of elements which can be of any data type. Returns: list: A list containing the duplicate elements. seen = set() duplicates = set() for item in lst: if item in seen: duplicates.add(item) else: seen.add(item) return list(duplicates)"},{"question":"Write a python function to find the sum of all digits in a given number. For example, if the number is 123, then the sum of its digits is 6.","solution":"def sum_of_digits(number): Returns the sum of all digits in the given number. return sum(int(digit) for digit in str(abs(number)))"},{"question":"Write a python function to find the nth largest number in a list.","solution":"def nth_largest(numbers, n): Returns the nth largest number in the list. if n < 1 or n > len(numbers): raise ValueError(\\"n must be between 1 and the length of the list.\\") sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[n-1]"},{"question":"Write a python function to multiply two matrices. The matrices are stored as 2D lists, and the function should return the product of the matrices.","solution":"def multiply_matrices(A, B): Multiplies two matrices A and B. Args: A (list of list of int/float): Matrix A B (list of list of int/float): Matrix B Returns: list of list of int/float: The resulting matrix product of A and B if len(A[0]) != len(B): raise ValueError(\\"A's column count must be equal to B's row count.\\") # Initialize the result matrix with zeros result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] # Compute the product for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"Write a python function to calculate the factorial of a number. You will implement this using recursion.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to return the list of all even numbers from 0 to n (inclusive) that are divisible by 3. You can assume n will always be a positive integer.","solution":"def even_numbers_divisible_by_3(n): Returns a list of all even numbers from 0 to n (inclusive) that are divisible by 3. :param n: A positive integer :return: List of even numbers from 0 to n (inclusive) that are divisible by 3 return [i for i in range(0, n + 1) if i % 2 == 0 and i % 3 == 0]"},{"question":"Write a python function to check if a given number is a palindrome in any base between 2 and 16.","solution":"def is_palindrome_in_any_base(n): Checks if the given number n is a palindrome in any base between 2 and 16. Parameters: n (int): The number to check. Returns: bool: True if n is a palindrome in any base, False otherwise. def is_palindrome(s): return s == s[::-1] def to_base(n, b): if n == 0: return \\"0\\" digits = [] while n: digits.append(int(n % b)) n //= b return ''.join(str(x) for x in digits[::-1]) for base in range(2, 17): if is_palindrome(to_base(n, base)): return True return False"},{"question":"Write a python function to count the number of zeros in an array.","solution":"def count_zeros(arr): Counts the number of zeros in the array. Parameters: arr (list): The array where zeros should be counted. Returns: int: The number of zeros in the array. return arr.count(0)"},{"question":"Write a python function to reverse the order of elements in an array. For example, if the input array is [1, 2, 3, 4, 5], the function should return [5, 4, 3, 2, 1].","solution":"def reverse_array(arr): Reverses the order of elements in an array. Parameters: arr (list): The array to reverse. Returns: list: The array with elements in reversed order. return arr[::-1]"},{"question":"Write a python function to find the minimum number of steps required to convert a string to its 1337-hangman form. In 1337-hangman, every 'a' is replaced by '4', 'e' is replaced by '3', and 'o' is replaced by '0'.","solution":"def min_steps_to_1337_hangman(s): Returns the minimum number of steps required to convert a string to its 1337-hangman form. In 1337-hangman: 'a' is replaced by '4' 'e' is replaced by '3' 'o' is replaced by '0' steps = 0 for char in s: if char == 'a': steps += 1 elif char == 'e': steps += 1 elif char == 'o': steps += 1 return steps"},{"question":"Write a python function to implement a stack that supports push, pop and get_min operations all in constant time. The stack should also handle duplicate values correctly.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if not self.stack: raise IndexError(\\"Pop from empty stack\\") val = self.stack.pop() if val == self.min_stack[-1]: self.min_stack.pop() return val def get_min(self): if not self.min_stack: raise IndexError(\\"Get min from empty stack\\") return self.min_stack[-1]"},{"question":"Write a python function to identify a word in a sentence that is closest to the given word in terms of Levenshtein distance. Levenshtein distance is the minimum number of single-character edits (insertions, deletions or substitutions) required to change a word into the other.","solution":"def levenshtein_distance(word1, word2): Calculates the Levenshtein distance between two words. len1, len2 = len(word1), len(word2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(len1 + 1): dp[i][0] = i for j in range(len2 + 1): dp[0][j] = j for i in range(1, len1 + 1): for j in range(1, len2 + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1) return dp[-1][-1] def closest_word(sentence, target_word): Finds the word in the sentence that is closest to the target word based on Levenshtein distance. words = sentence.split() closest_word = None min_distance = float('inf') for word in words: distance = levenshtein_distance(word, target_word) if distance < min_distance: min_distance = distance closest_word = word return closest_word"},{"question":"Write a python function to perform Kadane's algorithm for finding the largest sum contiguous subarray. The function \`maxSubArraySum\` should take a list of integers and return the maximum sum of any contiguous subarray within the list.","solution":"def maxSubArraySum(nums): Finds the largest sum contiguous subarray using Kadane's algorithm. Parameters: nums (list): A list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 # Assuming an empty list returns a sum of 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to return all subsets of a set, but do not include the empty set as a subset.","solution":"from itertools import chain, combinations def all_subsets_nonempty(s): Returns all subsets of a set s, excluding the empty set. s_list = list(s) all_subsets = list(chain.from_iterable(combinations(s_list, r) for r in range(1, len(s_list) + 1))) return [set(subset) for subset in all_subsets]"},{"question":"Write a python function to extract the distinct values from a list. How can it be scaled up for a list with millions of items?","solution":"def extract_distinct_values(lst): Extracts distinct values from a list. :param lst: List of values (can be of any type). :return: List of distinct values. return list(set(lst))"},{"question":"Write a python function to find the shortest path in a graph using Dijkstra's algorithm. The graph is represented as a dictionary where keys are nodes and values are lists of tuples representing the connected nodes and the weight of the edge connecting them. For example, {\\"A\\": [(\\"B\\", 1), (\\"C\\", 4)], \\"B\\": [(\\"A\\", 1), (\\"C\\", 2), (\\"D\\", 5)], \\"C\\": [(\\"A\\", 4), (\\"B\\", 2), (\\"D\\", 1)], \\"D\\": [(\\"B\\", 5), (\\"C\\", 1)]}.","solution":"import heapq def dijkstra(graph, start): Find the shortest paths from the start node to all other nodes in the graph using Dijkstra's algorithm. Parameters: graph (dict): A dictionary where keys are nodes and values are lists of tuples (neighbor, weight). start (str): The starting node. Returns: dict: The shortest path distances from the start node to all other nodes. # Priority queue to store (distance, node) priority_queue = [(0, start)] # Dictionary to store the shortest distance to each node distances = {node: float('inf') for node in graph} distances[start] = 0 # Set to keep track of visited nodes visited = set() while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) # If this node has already been visited, skip it if current_node in visited: continue # Mark the node as visited visited.add(current_node) # Update distances to neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it's better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Write a python function to sort a list of integers in ascending order using the quicksort algorithm. Explain each step of the process involved in your code.","solution":"def quicksort(arr): Sorts a list of integers in ascending order using the quicksort algorithm. if len(arr) <= 1: return arr else: pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] # Debug output print(f\\"Pivot: {pivot}, Less than pivot: {less_than_pivot}, Greater than pivot: {greater_than_pivot}\\") return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot) # Explanation of each step: # 1. Base Case: If the list has 1 or no elements, it is already sorted. # 2. Choose a Pivot: Select the first element of the list as the pivot. # 3. Partitioning: # - Create a list of elements less than or equal to the pivot. # - Create another list of elements greater than the pivot. # 4. Recursively apply the quicksort to the two lists obtained. # 5. Concatenate the results: Combine the sorted less_than_pivot, pivot, and sorted greater_than_pivot."},{"question":"Write a python function to find the minimum element in a given list. The function should return the minimum element along with its index in the list.","solution":"def find_min_element(arr): Returns the minimum element and its index in the list. Parameters: arr (list): A list of numbers Returns: tuple: A tuple containing the minimum element and its index if not arr: raise ValueError(\\"The list cannot be empty\\") min_element = arr[0] min_index = 0 for index, element in enumerate(arr): if element < min_element: min_element = element min_index = index return min_element, min_index"},{"question":"Write a python function to flip an image horizontally.","solution":"def flip_image_horizontally(image): Flips the given image horizontally. :param image: List of lists representing the image where each inner list is a row of pixels. :return: The horizontally flipped image. return [row[::-1] for row in image]"},{"question":"Write a python function to convert a given binary number to decimal. For example, if the binary number is 1011, the function should return 11.","solution":"def binary_to_decimal(binary_str): Converts a binary number represented as a string to a decimal number. Parameters: binary_str (str): The binary number as a string. Returns: int: The decimal equivalent of the binary number. return int(binary_str, 2)"},{"question":"Write a python function to find the smallest odd number in a list. If the list does not contain any odd numbers, return None.","solution":"def smallest_odd_number(numbers): Returns the smallest odd number in the list of numbers. If there are no odd numbers, returns None. odd_numbers = [num for num in numbers if num % 2 != 0] if odd_numbers: return min(odd_numbers) else: return None"},{"question":"Write a python function to count the number of substrings that contain only unique characters in a given string. How can this problem be solved using sliding window technique?","solution":"def count_unique_substrings(s): Returns the number of substrings containing only unique characters in the given string. n = len(s) unique_substrings_count = 0 # Using a sliding window approach char_set = set() left = 0 for right in range(n): # Slide the window to exclude repeated character while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) # All substrings ending at right and starting from left to current right index are unique unique_substrings_count += right - left + 1 return unique_substrings_count"},{"question":"Write a python function to convert a dictionary into a list of tuples. Each tuple should contain a key-value pair from the dictionary.","solution":"def dict_to_list_of_tuples(d): Converts a dictionary into a list of tuples where each tuple is a key-value pair. :param d: A dictionary to convert. :return: A list of tuples representing the dictionary's key-value pairs. return list(d.items())"},{"question":"Write a python function to generate a list of all the prime numbers less than a given number n. You should use the Sieve of Eratosthenes algorithm to find the prime numbers. Additionally, provide a brief explanation of the algorithm and how it can be used to find prime numbers.","solution":"def sieve_of_eratosthenes(n): Generates a list of all prime numbers less than the given number n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Initialize a list of booleans representing potential primality of each number. is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers. for i in range(2, int(n**0.5) + 1): if is_prime[i]: for multiple in range(i*i, n, i): is_prime[multiple] = False # Extract the list of primes. primes = [i for i in range(n) if is_prime[i]] return primes"},{"question":"Write a python function to find the minimum number of coins required to achieve a given number 'n'. You can use any combination of coins with denominations 1, 3, and 4.","solution":"def min_coins(n): Returns the minimum number of coins required to achieve n using denominations 1, 3, and 4. # Create a list to store the minimum coins needed for each amount up to n dp = [float('inf')] * (n + 1) dp[0] = 0 # Base case: 0 coins are needed to make amount 0 # Loop through all integers from 1 to n for i in range(1, n + 1): for coin in [1, 3, 4]: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[n]"},{"question":"Write a python function to check if a sentence is a palindrome. A palindrome is a sentence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization.","solution":"import re def is_palindrome(sentence): Check if the given sentence is a palindrome. :param sentence: str, the sentence to check. :return: bool, True if the sentence is a palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lowercase cleaned_sentence = ''.join(re.findall(r'w+', sentence)).lower() # Check if the cleaned sentence is equal to its reverse return cleaned_sentence == cleaned_sentence[::-1]"},{"question":"Write a python function to count the number of even numbers in an array.","solution":"def count_even_numbers(arr): Returns the count of even numbers in the given array. Parameters: arr (list of int): The array to count even numbers in. Returns: int: The count of even numbers in the array. return sum(1 for x in arr if x % 2 == 0)"},{"question":"Write a python function to sort a list of numbers in ascending order using the QuickSort algorithm.","solution":"def quicksort(arr): Returns a new list that is the sorted version of the input list \`arr\` using the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quicksort(less) + equal + quicksort(greater)"},{"question":"Write a python function to convert a string into a morse code string.","solution":"# Morse Code Dictionary MORSE_CODE_DICT = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': '/' } def string_to_morse_code(input_string): Converts a given string into its morse code equivalent. Parameters: input_string (str): The string to be converted to morse code. Returns: str: The converted morse code string. return ' '.join(MORSE_CODE_DICT.get(char.upper(), '') for char in input_string)"},{"question":"Write a python function to merge two sorted singly linked lists in-place without using extra space.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted singly linked lists in-place without using extra space. :param l1: ListNode, the first sorted linked list :param l2: ListNode, the second sorted linked list :return: ListNode, the merged sorted linked list # Create a dummy node to form the new list dummy = ListNode() current = dummy # Use two-pointers to merge lists in-place while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # Attach the remaining part if there are any nodes left current.next = l1 if l1 else l2 return dummy.next"},{"question":"Write a python function to reverse the order of characters in all the words in a string. Mystery","solution":"def reverse_words(s): Reverses the order of characters in all the words in a string. return ' '.join(word[::-1] for word in s.split())"},{"question":"Write a python function to check if all elements in a list are equal.","solution":"def all_elements_equal(lst): Returns True if all elements in the list are equal, False otherwise. return all(x == lst[0] for x in lst)"},{"question":"Write a python function to compute the Euclidean distance between two points in a multi-dimensional space.","solution":"import math def euclidean_distance(point1, point2): Calculates the Euclidean distance between two points in a multi-dimensional space. Parameters: point1 (tuple or list): Coordinates of the first point. point2 (tuple or list): Coordinates of the second point. Returns: float: Euclidean distance between point1 and point2. if len(point1) != len(point2): raise ValueError(\\"Both points must have the same number of dimensions.\\") return math.sqrt(sum((x - y) ** 2 for x, y in zip(point1, point2)))"},{"question":"Write a python function to count the number of characters in a string, but only count the characters that are different. For example, if the input string is \\"abca\\", the function should return 3 since there are three unique characters: 'a', 'b', and 'c'.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. return len(set(s))"},{"question":"Write a python function to filter and print even numbers from a list of integers. How can you use list comprehension to achieve this?","solution":"def filter_even_numbers(numbers): Filters and returns even numbers from a list of integers using list comprehension. return [number for number in numbers if number % 2 == 0]"},{"question":"Write a python function to find the maximum sum of elements in the subarray of an array such that no two elements are adjacent. For example, if the array is [3,2,7,10] the output should be 13 (3 + 10).","solution":"def max_sum_no_adjacent(arr): Finds the maximum sum of elements in the subarray of an array such that no two elements are adjacent. if not arr: return 0 n = len(arr) if n == 1: return arr[0] incl = arr[0] excl = 0 for i in range(1, n): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"Write a python function to detect edges in an image and return an edged image. You should use the Canny edge detection algorithm and need to adjust the \`low_threshold\` and \`high_threshold\` parameters to detect edges at different intensities.","solution":"import cv2 import numpy as np def detect_edges(image_path, low_threshold, high_threshold): Detect edges in an image using the Canny edge detection algorithm. Parameters: - image_path: str, path to the input image - low_threshold: int, first threshold for the hysteresis procedure - high_threshold: int, second threshold for the hysteresis procedure Returns: - edged_image: np.ndarray, image with edges detected # Read the image in grayscale image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) if image is None: raise ValueError(f\\"Image not found at path: {image_path}\\") # Apply Canny edge detection edged_image = cv2.Canny(image, low_threshold, high_threshold) return edged_image"},{"question":"Write a python function to sort a list using insertion sort algorithm.","solution":"def insertion_sort(arr): Sorts the input list using the insertion sort algorithm. Parameters: arr (list): A list of elements to be sorted. Returns: list: Sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to find the first non-repeating character in a given string. If no such character exists, return '#'. The string consists of lowercase English letters only.","solution":"def first_non_repeating_character(s): Finds the first non-repeating character in a given string. Returns '#' if no such character exists. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return '#'"},{"question":"Write a python function to check if a given number is a perfect square. The function should return True if the number is a perfect square, and False otherwise. Additionally, implement a simple test function that checks the correctness of the solution using a few test cases.","solution":"import math def is_perfect_square(number): Checks if a given number is a perfect square. Parameters: number (int): The number to check Returns: bool: True if the number is a perfect square, False otherwise if number < 0: return False sqrt = math.isqrt(number) return sqrt * sqrt == number"},{"question":"Write a python function to calculate the sum of numbers from a list that are greater than a given number \`n\`.","solution":"def sum_greater_than(lst, n): Returns the sum of numbers in the list that are greater than n. Parameters: lst (list of int): The list of numbers. n (int): The threshold number. Returns: int: The sum of numbers greater than n. return sum(filter(lambda x: x > n, lst))"},{"question":"Write a python function to return a list of的第一个值,即列表的第一个元素，如果列表为空，返回'Empty List'.","solution":"def get_first_element(lst): Returns the first element of the list if the list is not empty. Returns 'Empty List' if the list is empty. return lst[0] if lst else 'Empty List'"},{"question":"Write a python function to evaluate postfix expression. A postfix expression, also known as Reverse Polish Notation (RPN), is a mathematical expression where every operator follows its operands. The operators supported are +, -, *, and /. You can assume that the given postfix expression is always valid.","solution":"def evaluate_postfix(expression): Evaluates a postfix (Reverse Polish Notation) expression and returns the result. Arguments: expression : str - A string containing the postfix expression with elements separated by spaces. Returns: int/float - The result of the evaluated postfix expression. stack = [] for token in expression.split(): if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': stack.append(a / b) else: stack.append(float(token)) # Push number to stack, assuming all inputs can be converted to float. return stack[0]"},{"question":"Write a python function to find the largest number of a list of positive integers where the sum of its digits is equal to a given number \`k\`. If there are no such numbers, return -1.","solution":"def largest_number_with_digit_sum(numbers, k): Returns the largest number from the list where the sum of its digits equals to k. If no such number exists, returns -1. def digit_sum(n): return sum(int(digit) for digit in str(n)) # Filter numbers by digit sum and find the maximum if exists valid_numbers = [num for num in numbers if digit_sum(num) == k] return max(valid_numbers, default=-1)"},{"question":"Write a python function to count the number of permutations of a given string, considering transformations like swapping of letters in different cases.","solution":"import itertools def count_case_permutations(s: str) -> int: Returns the count of unique permutations of a string with considering case transformations. # Convert the string to a list of characters chars = list(s) # Generate all permutations of the string perms = set(itertools.permutations(chars)) # Calculate the number of possible case transformations num_transformations = 1 << len(s) # 2^len(s) which is the number of transformations total_permutations_with_case = len(perms) * num_transformations return total_permutations_with_case"},{"question":"Write a python function to take an integer input and return True if the number is odd, and False if the number is even.","solution":"def is_odd(num): Returns True if the input integer is odd, False if it is even. return num % 2 != 0"},{"question":"Write a python function to check whether a given 2D list (matrix) is a diagonal matrix or not. A diagonal matrix is a square matrix in which all the elements outside the main diagonal are zero.","solution":"def is_diagonal_matrix(matrix): Checks if a given 2D list (matrix) is a diagonal matrix. A diagonal matrix is a square matrix in which all the elements outside the main diagonal are zero. :param matrix: List[List[int]] - 2D list representing the matrix :return: bool - True if the matrix is a diagonal matrix, False otherwise # Check if the matrix is square if not matrix or any(len(row) != len(matrix) for row in matrix): return False # Check if all elements outside the main diagonal are zero size = len(matrix) for i in range(size): for j in range(size): if i != j and matrix[i][j] != 0: return False return True"},{"question":"Write a python function to find the shortest path in a binary matrix where 0 represents an obstacle and 1 represents a walkable path. The function should return the length of the shortest path from the top-left corner (0,0) to the bottom-right corner (m-1,n-1) of the matrix. If there is no path, return -1. The function should not allow diagonal movements.","solution":"from collections import deque def shortestPathBinaryMatrix(grid): Finds the shortest path in a binary matrix from top-left to bottom-right corner. Args: grid (List[List[int]]): Binary matrix where 0 represents an obstacle and 1 represents a walkable path. Returns: int: Length of the shortest path or -1 if there is no such path. if not grid or grid[0][0] == 0 or grid[-1][-1] == 0: return -1 n = len(grid) m = len(grid[0]) # Initialize directions for right, down, left, up movements directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize queue for BFS queue = deque([(0, 0, 1)]) # (row, col, distance) grid[0][0] = 0 # Mark as visited while queue: row, col, dist = queue.popleft() # Check if we reached the bottom-right corner if row == n - 1 and col == m - 1: return dist # Explore 4 possible directions (right, down, left, up) for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == 1: queue.append((new_row, new_col, dist + 1)) grid[new_row][new_col] = 0 # Mark as visited return -1 # No path found"},{"question":"Write a python function to interchange first and last elements in a list.","solution":"def interchange_first_last(lst): Interchange the first and last elements of the list. Parameters: lst (list): The list whose elements are to be interchanged. Returns: list: The list with first and last elements interchanged. if len(lst) < 2: return lst # If the list has fewer than 2 elements, return it as is. # Swap the first and last element lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"Write a python function to find the missing number in an array of distinct integers in the range of 1 to n (where n is the length of the array + 1). For example, in the array [1, 2, 4], the missing number is 3.","solution":"def find_missing_number(arr): Finds the missing number in an array of distinct integers in the range of 1 to n. Parameters: arr (list): A list of distinct integers. Returns: int: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"Write a python function to find the minimum value in a given list of numbers. The function should use a for loop to iterate through the list and determine the smallest number. If the list is empty, the function should return \`None\`.","solution":"def find_minimum(lst): Returns the minimum value from a list of numbers. If the list is empty, return None. if not lst: return None min_value = lst[0] for num in lst: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to solve a linear equation of the form ax + b = 0. The function should return the solution as a floating-point number.","solution":"def solve_linear_equation(a, b): Solves the linear equation ax + b = 0. Parameters: a (float): Coefficient of x. b (float): Constant term. Returns: float: The solution of the equation. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be zero.\\") return -b / a"},{"question":"Write a python function to remove duplicates from a list. Write an example of how to use this function with a given list.","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed from the input list. Preserves the order of the first occurrences. :param lst: List of elements (can be of any type) :return: List with duplicates removed seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result # Example usage: # Example list with duplicates input_list = [1, 2, 3, 2, 1, 4, 5, 3, 6] # Removing duplicates output_list = remove_duplicates(input_list) print(output_list) # Output: [1, 2, 3, 4, 5, 6]"},{"question":"Write a python function to perform an in-order traversal of the binary search tree (BST) and return a list of the elements in the order they were visited. Make the solution iterative.","solution":"def inorder_traversal_iterative(root): Perform an in-order traversal of a binary search tree (BST) iteratively. :param root: The root node of the BST. :return: A list of elements in in-order traversal order. result = [] stack = [] current = root while current is not None or stack: # Reach the leftmost Node of the current Node while current is not None: # Place pointer to a tree node on the stack before traversing the node's left subtree stack.append(current) current = current.left # Current must be None at this point current = stack.pop() result.append(current.val) # we have visited the node and its left subtree. Now, it's right subtree's turn current = current.right return result # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right"},{"question":"Write a python function to extract the text from a given HTML code and return it as a string. Can you also ensure that any HTML tags in the extracted text are removed? Use BeautifulSoup from the requests_html library to achieve this.","solution":"from bs4 import BeautifulSoup def extract_text_from_html(html: str) -> str: Extracts text from HTML and removes any HTML tags. Args: html (str): HTML content as string Returns: str: Extracted text without any HTML tags soup = BeautifulSoup(html, 'html.parser') return soup.get_text()"},{"question":"Write a python function to prove all integers in an array are even, using recursion.","solution":"def are_all_even(numbers): Given a list of integers, returns True if all numbers are even, otherwise False. Uses recursion to check each number. if len(numbers) == 0: return True if numbers[0] % 2 != 0: return False return are_all_even(numbers[1:])"},{"question":"Write a python function to return the first character that appears only once in a string.","solution":"def first_unique_char(s): Returns the first character that appears only once in the string s. If no unique character exists, returns None. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first unique character for char in s: if char_count[char] == 1: return char return None"},{"question":"Write a python function to reverse the characters of each word in a given string. The function should preserve the original order of the words and spaces between them. For example, if the input is \\"hello world\\", the output should be \\"olleh dlrow\\".","solution":"def reverse_each_word(s): Reverses each word in the given string, maintaining the position of spaces. :param s: str :return: str return ' '.join(word[::-1] for word in s.split(' '))"},{"question":"Write a python function to reverse a string using recursion. The function should not use any loops or built-in string slicing functions to reverse the string. Instead, it should rely solely on recursive calls.","solution":"def reverse_string_recursive(s): Reverse a string using recursion. :param s: The string to be reversed. :return: The reversed string. # Base case: if the string is empty or a single character, return it as-is. if len(s) <= 1: return s # Recursive case: reverse the substring starting from the second character, # then concatenate the first character at the end. return reverse_string_recursive(s[1:]) + s[0]"},{"question":"Write a python function to trim the borders of a binary image to produce an image with the following property: the number of black pixels is minimized and the number of white pixels in the border of the result is maximized. If there are multiple possible answers, you can return any one of them.","solution":"import numpy as np def trim_borders(image): Trims the borders of a binary image to minimize black pixels in the borders and maximize white pixels in the border of the result. Args: image (List[List[int]]): A 2D binary image represented by a list of lists. Returns: List[List[int]]: The trimmed binary image. # Convert image to numpy array for easier manipulation image = np.array(image) # Find borders with white pixels top, bottom = 0, image.shape[0] - 1 while top <= bottom and np.all(image[top] == 1): top += 1 while top <= bottom and np.all(image[bottom] == 1): bottom -= 1 left, right = 0, image.shape[1] - 1 while left <= right and np.all(image[:, left] == 1): left += 1 while left <= right and np.all(image[:, right] == 1): right -= 1 # If all rows or columns are removed, return an empty image if top > bottom or left > right: return [[]] # Return the trimmed image return image[top:bottom + 1, left:right + 1].tolist()"},{"question":"Write a python function to reverse a string using slicing. Create a function named \`reverse_string\` that takes a string as input and returns the reversed version of the string.","solution":"def reverse_string(s): Returns the reversed version of the input string s. return s[::-1]"},{"question":"Write a python function to find the maximum occurring character in a given string and its count. If there are multiple characters with the same maximum count, it should return all such characters and their counts.","solution":"from collections import Counter def max_occurring_char(s): Returns a list of tuples where each tuple contains a character and its maximum count in the string s. If multiple characters have the same maximum count, it returns all such characters. if not s: return [] # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency max_count = max(char_count.values()) # Gather all characters with the maximum frequency result = [(char, count) for char, count in char_count.items() if count == max_count] return result"},{"question":"Write a python function to return the last three elements in a list using slicing.","solution":"def last_three_elements(lst): Returns the last three elements of the list using slicing. If the list has less than three elements, it returns the entire list. return lst[-3:]"},{"question":"Write a python function to find the smallest number edge in a list of integers. By \\"smallest number edge,\\" I mean the smallest number that appears more than once in the list. If no such number exists, the function should return None.","solution":"def smallest_number_edge(nums): Returns the smallest number that appears more than once in the list. If no such number exists, the function returns None. from collections import Counter counts = Counter(nums) edges = [num for num, count in counts.items() if count > 1] return min(edges) if edges else None"},{"question":"Write a python function to find the length of the longest common subsequence between two input strings. Your input will be two strings. The output will be an integer representing the length of the longest common subsequence.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence between str1 and str2. n = len(str1) m = len(str2) # Create a 2D array to store the length of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Building the dp array for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Write a python function to check if the sum of digits of a number is divisible by 3 without any remainder.","solution":"def is_sum_of_digits_divisible_by_3(num): Returns True if the sum of digits of num is divisible by 3, otherwise False. sum_of_digits = sum(int(digit) for digit in str(num)) return sum_of_digits % 3 == 0"},{"question":"Write a python function to remove duplicates from a sorted list and return the new list with unique elements. The function should iterate through the list only once. How can this be done efficiently?","solution":"def remove_duplicates(sorted_list): Removes duplicates from a sorted list and returns a new list with unique elements. if not sorted_list: return [] unique_elements = [sorted_list[0]] for i in range(1, len(sorted_list)): if sorted_list[i] != sorted_list[i-1]: unique_elements.append(sorted_list[i]) return unique_elements"},{"question":"Write a python function to generate a matrix based on the input list of lists where each element is a list of integers. The function should return a new matrix where the elements are the sum of the corresponding elements in each input list. For example, if the input is \`[[0, 3, 8], [7, 0, 4], [8, 4, 9]]\`, the output should be \`[25, 7, 21]\`. How would you write this function?","solution":"def generate_matrix_sum(input_lists): Generates a matrix where each element is the sum of the corresponding elements in each input list. Args: input_lists (list of lists of int): A list containing lists of integers. Returns: list of int: A new list where each element is the sum of the corresponding elements. if not input_lists: return [] # All lists are assumed to be of the same length num_elements = len(input_lists[0]) result = [0] * num_elements for lst in input_lists: for i in range(num_elements): result[i] += lst[i] return result"},{"question":"Write a python function to solve the problem: A number can be expressed as the product of two or more positive integers whose sum equals the original number. These numbers are known as the proper divisors of the number. Write a function to calculate and return all the proper divisors of a given number n.","solution":"def proper_divisors(n): Returns a list of all proper divisors of the input number n. Proper divisors are positive divisors other than 'n' itself. divisors = [] for i in range(1, n): if n % i == 0: divisors.append(i) return divisors"},{"question":"Write a python function to calculate the nth Fibonacci number using recursion. What is the complexity of this approach?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. Parameters: n (int): The position of the desired Fibonacci number (0-indexed). Returns: int: The nth Fibonacci number. if n <= 0: raise ValueError(\\"n should be a positive integer\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # The time complexity of this approach is O(2^n) because it solves two subproblems simultaneously for each call. # The space complexity is O(n) because of the recursion stack."},{"question":"Write a python function to take a list of strings and return a list with the strings that are anagrams of each other. An anagram is a word or phrase that is made by rearranging the letters of another, such as 'cinema', formed from 'iceman'.","solution":"from collections import defaultdict def find_anagrams(words): Takes a list of strings and returns a list with the strings that are anagrams of each other. anagrams = defaultdict(list) for word in words: # Sort the letters of the word and use it as a key sorted_word = ''.join(sorted(word)) anagrams[sorted_word].append(word) # Filter out the lists with more than one word (which are anagrams) return [group for group in anagrams.values() if len(group) > 1]"},{"question":"Write a python function to find a triplet in an array that sums to a given number \`s\`. If such a triplet exists, return the triplet as a list, otherwise return \`None\`.","solution":"def find_triplet(nums, s): Finds a triplet in the list \`nums\` that sums to \`s\`. Args: nums: List of integers. s: Target sum. Returns: A list of three integers that sum to \`s\` if such a triplet exists, otherwise \`None\`. nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == s: return [nums[i], nums[left], nums[right]] elif current_sum < s: left += 1 else: right -= 1 return None"},{"question":"Write a python function to convert a given string to reverse string.","solution":"def reverse_string(s): Returns the reverse of the given string s. return s[::-1]"},{"question":"Write a python function to calculate the factorial of a number. The function should take an integer as an input and return the factorial of that number. The user should be able to input any non-negative integer, and the function should handle errors appropriately if a negative number is inputted. You should also include a main function that lets the user input and output the results.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is negative, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def main(): try: number = int(input(\\"Enter a non-negative integer: \\")) print(f\\"The factorial of {number} is {factorial(number)}\\") except ValueError as e: print(e)"},{"question":"Write a python function to create a dictionary from a list of tuples, where each tuple contains two elements: the first element is the key and the second is the value.","solution":"def list_to_dict(tuples_list): Converts a list of tuples into a dictionary. Parameters: tuples_list (list): A list of tuples, where each tuple contains two elements: the first is the key and the second is the value. Returns: dict: A dictionary created from the tuples. return dict(tuples_list)"},{"question":"Write a python function to reverse a linked list. The linked list is represented as a sequence of nodes, where each node contains a reference to the next node, and the last node has a reference to \`None\` to indicate the end of the list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list. Parameters: head (ListNode): The head of the linked list. Returns: ListNode: The new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to find and return the maximum-length palindromic substring in a given string. If there are more than one maximum-length palindromic substrings, return the first one encountered.","solution":"def longest_palindromic_substring(s): Returns the maximum-length palindromic substring in the given string. If there are more than one maximum-length palindromic substrings, returns the first one encountered. if s == \\"\\": return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] max_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes palindrome1 = expand_around_center(i, i) if len(palindrome1) > len(max_palindrome): max_palindrome = palindrome1 # Even length palindromes palindrome2 = expand_around_center(i, i + 1) if len(palindrome2) > len(max_palindrome): max_palindrome = palindrome2 return max_palindrome"},{"question":"Write a python function to detect if a given binary tree is a mirror of itself (i.e., symmetric around its center).","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric(root): Determines if a binary tree is symmetric. Args: root (TreeNode): The root node of the binary tree. Returns: bool: True if the tree is symmetric, False otherwise. def is_mirror(t1, t2): if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root, root)"},{"question":"Write a python function to remove the nth occurrence of a word from a string.","solution":"def remove_nth_occurrence(s, word, n): Removes the nth occurrence of a word from a string. :param s: Input string :param word: Word to be removed :param n: The nth occurrence of the word to remove :return: Modified string after removing the nth occurrence of the word words = s.split() count = 0 for i, w in enumerate(words): if w == word: count += 1 if count == n: del words[i] break return ' '.join(words)"},{"question":"Write a python function to convert a number to binary. The function should handle exceptions if the input is not a valid integer.","solution":"def number_to_binary(number): Converts an integer to its binary representation. Parameters: number (int): The number to be converted to binary. Returns: str: Binary representation of the number if valid integer input is provided. Raises: TypeError: If the input is not an integer. if not isinstance(number, int): raise TypeError(\\"Input must be an integer\\") return bin(number)[2:]"},{"question":"Write a python function to return the smallest positive integer not present in the list.","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer that is not present in the list. if not nums: return 1 n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap elements to their correct positions nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to convert a decimal number to its binary representation without using any built-in functions for binary conversion. The function should take an integer as input and return a string representing the binary form of the number.","solution":"def decimal_to_binary(n): Converts a decimal number to its binary representation. if n == 0: return \\"0\\" binary_representation = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary_representation = str(n % 2) + binary_representation n = n // 2 if is_negative: binary_representation = \\"-\\" + binary_representation return binary_representation"},{"question":"Write a python function to find the pivot element in a given array, where pivot element is defined as the element which is smaller than its right and greater than its left. Consider the first and last positions as non-pivotal.","solution":"def find_pivot_element(arr): This function finds and returns the pivot element from the array where pivot element is defined as the element which is smaller than its right and greater than its left. The first and last positions are considered non-pivotal. :param arr: List[int] - A list of integers :return: int or None if no pivot element is found if len(arr) < 3: return None # No pivot possible if array is less than 3 elements for i in range(1, len(arr) - 1): if arr[i - 1] < arr[i] > arr[i + 1]: return arr[i] return None # If no pivot element is found"},{"question":"Write a python function to send a POST request with JSON data to a specified URL and return the response.","solution":"import requests def send_post_request(url, data): Sends a POST request with JSON data to a specified URL and returns the response. Parameters: url (str): The URL to send the POST request to. data (dict): The JSON data to send in the POST request. Returns: requests.Response: The response object from the POST request. response = requests.post(url, json=data) return response"},{"question":"Write a python function to check if a given string is a balanced parentheses string (also known as a balanced bracket string). A string is considered balanced if each type of opening brackets has a corresponding closing bracket in the correct order.","solution":"def is_balanced_parentheses(s): Check if a given string is a balanced parentheses string. stack = [] brackets = {\\"(\\": \\")\\", \\"[\\": \\"]\\", \\"{\\": \\"}\\"} for char in s: if char in brackets.keys(): # If it's an opening bracket stack.append(char) elif char in brackets.values(): # If it's a closing bracket if not stack or brackets[stack.pop()] != char: return False return not stack # Return True if stack is empty, meaning all brackets were matched"},{"question":"Write a python function to find the maximum element in a comma-separated string.","solution":"def find_max_element(comma_separated_string): Finds the maximum element in a comma-separated string of numbers. # Convert the string into a list of integers numbers = list(map(int, comma_separated_string.split(','))) # Return the maximum element return max(numbers)"},{"question":"Write a python function to find the sum of even numbers in a list and the sum of odd numbers in a list.","solution":"def sum_even_odd(numbers): Returns a tuple with the sum of even numbers and the sum of odd numbers in the list. sum_even = sum(num for num in numbers if num % 2 == 0) sum_odd = sum(num for num in numbers if num % 2 != 0) return (sum_even, sum_odd)"},{"question":"Write a python function to solve this problem: given an array of integers, return an array with each array element's value replaced by the number of elements that are less than the current element. For example, given the array [3, 1, 4, 1, 5], the output should be [2, 0, 3, 0, 4].","solution":"def count_less_than_each(arr): Given an array of integers, returns an array with each array element's value replaced by the number of elements that are less than the current element. result = [] for i in arr: count = sum(1 for j in arr if j < i) result.append(count) return result"},{"question":"Write a python function to find the maximum value in a 2D array.","solution":"def find_max_2d_array(arr): Returns the maximum value in a 2D array. if not arr or not arr[0]: # Check if the 2D array is empty or contains empty sublists return None max_val = arr[0][0] for row in arr: for value in row: if value > max_val: max_val = value return max_val"},{"question":"Write a python function to modify a list of dictionaries, appending \\"_new\\" to all keys in each dictionary. For example, if the list has one dictionary \`{'key': 'value'}\`, it should be transformed to \`{'key_new': 'value_new'}\`. If the list contains multiple dictionaries, the function should handle them all accordingly.","solution":"def modify_dicts(dicts): Modifies a list of dictionaries, appending \\"_new\\" to all keys and values in each dictionary. Parameters: dicts (list): A list of dictionaries to modify. Returns: list: A list of modified dictionaries with \\"_new\\" appended to keys and values. modified_dicts = [] for d in dicts: new_dict = {f\\"{key}_new\\": f\\"{value}_new\\" for key, value in d.items()} modified_dicts.append(new_dict) return modified_dicts"},{"question":"Write a python function to return the nth Fibonacci number. The function should handle negative numbers by returning -1. For non-integer inputs, return None.","solution":"def fibonacci(n): Returns the nth Fibonacci number. If n is negative, returns -1. If n is not an integer, returns None. if not isinstance(n, int): return None if n < 0: return -1 elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to calculate the sum and average of n numbers. The function should take a list of numbers as an argument and return both the sum and the average.","solution":"def sum_and_average(numbers): Calculate the sum and average of a list of numbers. Parameters: numbers (list): A list of numbers. Returns: tuple: A tuple containing the sum and the average of the numbers. total_sum = sum(numbers) average = total_sum / len(numbers) if numbers else 0 return total_sum, average"},{"question":"Write a python function to find the single number in a non-empty array of integers where every other number appears twice. The function should return the unique number without using any extra space and in O(n) time complexity.","solution":"def find_single_number(nums): Returns the single number in a non-empty array where every other number appears twice. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"Write a python function to detect the frequency of each unique element in a list. You should return a dictionary where keys are the unique elements and values are their corresponding frequencies.","solution":"def element_frequencies(lst): Returns a dictionary with the frequency of each unique element in the list. Parameters: lst (list): The list of elements to analyze. Returns: dict: A dictionary where the keys are the unique elements from the list and the values are their frequencies. frequency_dict = {} for element in lst: if element in frequency_dict: frequency_dict[element] += 1 else: frequency_dict[element] = 1 return frequency_dict"},{"question":"Write a python function to merge two lists of integers and sort the merged list. The function should also remove any duplicate integers from the merged list.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists of integers, removes duplicates, and sorts the result. Parameters: - list1: A list of integers. - list2: A list of integers. Returns: - A sorted list of unique integers. merged_list = list1 + list2 unique_sorted_list = sorted(set(merged_list)) return unique_sorted_list"},{"question":"Write a python function to iterate over a list of tuples and print each tuple in a formatted string.","solution":"def print_formatted_tuples(tuples_list): Iterates over a list of tuples and prints each tuple in a formatted string. :param tuples_list: List of tuples to be iterated over. for tup in tuples_list: print(f\\"Tuple: {tup}\\")"},{"question":"Write a python function to count the number of substrings within a string that are palindromes. A palindrome is a string that reads the same forward and backward.","solution":"def count_palindromic_substrings(s): Returns the count of palindromic substrings within a string. count = 0 for i in range(len(s)): for j in range(i+1, len(s)+1): substring = s[i:j] if substring == substring[::-1]: count += 1 return count"},{"question":"Write a python function to count the number of words in a given string that have more than 5 characters. How can I solve this problem?","solution":"def count_words_longer_than_five(s): Counts the number of words in the given string that have more than 5 characters. Parameters: s (str): The input string. Returns: int: The count of words longer than 5 characters. words = s.split() count = 0 for word in words: if len(word) > 5: count += 1 return count"},{"question":"Write a python function to remove extra spaces from a string. The function should remove all leading, trailing, and multiple consecutive spaces between words.","solution":"def remove_extra_spaces(s): Removes leading, trailing, and multiple consecutive spaces between words in the string s. Args: s (str): The input string with potential extra spaces. Returns: str: The string with extra spaces removed. # Split the string on whitespace and join with a single space return ' '.join(s.split())"},{"question":"Write a python function to toggle between the uppercase and lowercase of a string. For example, if the input string is \\"HelloWorld\\", the output should be \\"hELLOwORLD\\". If the input is \\"PythonPROFESSOR\\", the output should be \\"pYTHONs professor\\".","solution":"def toggle_case(s): Toggles the case of each character in the input string. Parameters: s (str): Input string whose case needs to be toggled. Returns: str: String with toggled case for each character. return ''.join([char.lower() if char.isupper() else char.upper() for char in s])"},{"question":"Write a python function to convert Roman numerals to integers. For example, the Roman numeral \\"III\\" corresponds to the integer 3, and \\"XIV\\" to the integer 14.","solution":"def roman_to_int(s): Converts a Roman numeral to an integer. :param s: A string representing the Roman numeral. :return: An integer representing the Roman numeral. roman_numerals = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_numerals[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Write a python function to find the largest number in a list in less than 5 lines of code.","solution":"def find_largest_number(numbers): Returns the largest number in a list. return max(numbers) if numbers else None"},{"question":"Write a python function to read a file and write its contents to a new file, appending a line \\"End of file\\" at the end of its contents.","solution":"def copy_file_with_footer(src_file, dest_file): Reads the contents of src_file and writes it to dest_file, appending \\"End of file\\" at the end. with open(src_file, 'r') as source: contents = source.read() with open(dest_file, 'w') as destination: destination.write(contents) destination.write(\\"nEnd of file\\")"},{"question":"Write a python function to return the maximum possible product of an array of integers by multiplying all elements together.","solution":"def max_product(arr): Returns the maximum possible product of an array of integers by multiplying all elements together. if not arr: return 0 max_product = arr[0] for num in arr[1:]: max_product *= num return max_product"},{"question":"Write a python function to find all of the first n prime numbers. You should use the Sieve of Eratosthenes algorithm for this task.","solution":"def sieve_of_eratosthenes(n): Returns the first n prime numbers using the Sieve of Eratosthenes algorithm. if n <= 0: return [] def nth_upper_bound(n): Estimate the upper bound for the nth prime using the nth prime approximation if n < 6: return 15 from math import log return int(n * (log(n) + log(log(n))) + 10) upper_bound = nth_upper_bound(n) sieve = [True] * (upper_bound + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes p = 2 while p ** 2 <= upper_bound: if sieve[p]: for i in range(p * p, upper_bound + 1, p): sieve[i] = False p += 1 primes = [i for i, is_prime in enumerate(sieve) if is_prime] return primes[:n]"},{"question":"Write a python function to find the maximum element in a list of tuples where each tuple contains three elements. The function should return the maximum value among all the third elements of the tuples.","solution":"def max_third_element(tuple_list): Returns the maximum element among all the third elements of the tuples in the list. Parameters: tuple_list (list of tuples): A list where each element is a tuple with three elements. Returns: int/float: The maximum value among the third elements of the tuples. if not tuple_list: raise ValueError(\\"The list of tuples is empty\\") return max(t[2] for t in tuple_list)"},{"question":"Write a python function to generate a dictionary with keys as plt solid style names and values as corresponding linestyle characters from the matplotlib library.","solution":"import matplotlib.pyplot as plt def generate_linestyle_dict(): Generates a dictionary with keys as matplotlib line style names and values as the corresponding line style characters. linestyle_dict = { f'solid': plt.Line2D((0,1),(0,0), linestyle='solid').get_linestyle(), f'dashed': plt.Line2D((0,1),(0,0), linestyle='dashed').get_linestyle(), f'dashdot': plt.Line2D((0,1),(0,0), linestyle='dashdot').get_linestyle(), f'dotted': plt.Line2D((0,1),(0,0), linestyle='dotted').get_linestyle() } return linestyle_dict"},{"question":"Write a python function to check if a given string is a valid Python identifier.","solution":"def is_valid_identifier(identifier: str) -> bool: Checks if the given string is a valid Python identifier. return identifier.isidentifier()"},{"question":"Write a python function to sort a list of numbers in ascending order without using the built-in \`sort()\` function. Can you provide a step-by-step explanation of the process?","solution":"def bubble_sort(numbers): Sorts a list of numbers in ascending order using the bubble sort algorithm. n = len(numbers) for i in range(n): # Flag to detect if any swapping happens swapped = False for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: # Swap if the element found is greater than the next element numbers[j], numbers[j+1] = numbers[j+1], numbers[j] swapped = True # If no elements were swapped in the inner loop, list is sorted if not swapped: break return numbers"},{"question":"Write a python function to find the maximum sum of a sub-array of a given array. This function should handle large arrays and return the maximum sum in linear time.","solution":"def max_sub_array_sum(arr): Finds the maximum sum of a sub-array in the given array using Kadane's Algorithm. This function operates in O(n) time complexity. Parameters: arr (list of int): The input array Returns: int: The maximum sum of any sub-array if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to generate a set of all possible combinations of a string with repetitions allowed.","solution":"from itertools import product def generate_combinations_with_repetition(s): Generates a set of all possible combinations of a string with repetition allowed. Parameters: s (str): The input string. Returns: set: A set of all unique combinations. combo_set = set() for i in range(1, len(s) + 1): for combo in product(s, repeat=i): combo_set.add(''.join(combo)) return combo_set"},{"question":"Write a python function to find the maximum profit from buying and selling a stock.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling a single stock. :param prices: List of stock prices where the index represents the day. :return: Maximum profit if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit"},{"question":"Write a python function to find the missing number in an array that contains unique integers from 1 to n. The array may not be sorted, and there may be one integer missing. How can I approach this problem?","solution":"def find_missing_number(arr): Finds the missing number in an array containing unique integers from 1 to n. n = len(arr) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(expected_sum - actual_sum)"},{"question":"Write a python function to count the occurrences of each unique character in a string and return a dictionary with characters as keys and counts as values.","solution":"def count_characters(s): Returns a dictionary with characters as keys and their counts as values. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to determine if a given list of numbers is strictly increasing or not. The function should return a boolean value indicating whether the list is strictly increasing or not.","solution":"def is_strictly_increasing(nums): Determines if the given list of numbers is strictly increasing. Parameters: nums (list): A list of numbers. Returns: bool: True if the list is strictly increasing, False otherwise. for i in range(len(nums) - 1): if nums[i] >= nums[i + 1]: return False return True"},{"question":"Write a python function to determine if a graph is a tree. A tree is a connected graph with no cycles. How can we implement this check using graph traversal?","solution":"def is_tree(graph): Determines if the given graph is a tree. A graph is a tree if it is connected and has no cycles. Graph is represented as an adjacency list {node: [neighbors]}. :param graph: dict, an adjacency list representation of the graph :return: bool, True if the graph is a tree, False otherwise if not graph: return True def dfs(node, parent): visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if not dfs(neighbor, node): return False elif neighbor != parent: return False return True # Pick any starting node start_node = next(iter(graph)) visited = set() # Check for cycle and if it is connected if not dfs(start_node, None): return False # Check if all nodes were visited (graph is connected) return len(visited) == len(graph)"},{"question":"Write a python function to check if a number is an nth perfect power.","solution":"def is_nth_perfect_power(num, n): Determines if a number is an nth perfect power. Parameters: num (int): The number to be checked. n (int): The power to be checked against. Returns: bool: True if num is an nth perfect power, False otherwise. if num <= 1 or n <= 1: return False root = int(num ** (1/n)) # Get the integer part of the nth root return root**n == num or (root + 1)**n == num # Check if num is exactly a perfect nth power"},{"question":"Write a python function to solve the LeetCode problem - Number of 1 Bits.","solution":"def hammingWeight(n: int) -> int: Returns the number of '1' bits in the binary representation of the given integer. :param n: An integer. :return: The number of '1' bits in the binary representation of the integer. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a python function to parse a string representing a binary tree in a special format and convert it into a binary tree structure. The tree is represented by a string where each node's value is separated by a '#', and nodes at the same level are separated by a '/'.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def parse_binary_tree(tree_string): if not tree_string: return None levels = tree_string.split('/') nodes = [[TreeNode(int(val)) for val in level.split('#')] for level in levels] for i in range(len(nodes) - 1): level, next_level = nodes[i], nodes[i + 1] current_child = 0 for node in level: if current_child < len(next_level): node.left = next_level[current_child] current_child += 1 if current_child < len(next_level): node.right = next_level[current_child] current_child += 1 return nodes[0][0] if nodes else None"},{"question":"Write a python function to calculate the area of a circle given its radius. The function should also handle cases where the radius is negative or zero. For negative and zero values, the function should return a message indicating that the radius is invalid.","solution":"import math def area_of_circle(radius): Calculate the area of a circle given its radius. If the radius is negative or zero, return an error message. Args: radius (float): radius of the circle Returns: float or str: area of the circle if radius is positive, otherwise an error message if radius <= 0: return \\"Invalid radius. Radius must be positive.\\" return math.pi * radius ** 2"},{"question":"Write a python function to find the longest word in a string. If there are multiple words with the same maximum length, return the first one encountered. How would you test this function with different scenarios?","solution":"def longest_word(sentence): Returns the longest word in a given sentence. If there are multiple words with the same length, returns the first one encountered. words = sentence.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Write a python function to count the number of nodes in a binary tree.","solution":"class TreeNode: Node of a binary tree. def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Count the number of nodes in a binary tree. :param root: TreeNode, the root of the binary tree :return: int, the number of nodes in the binary tree if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Write a python function to retrieve the winning candidate from an election result data structure. The function should accept the path to a CSV file containing election results as input, read the data, compute the total votes received by each candidate, and return the candidate with the highest number of votes.","solution":"import csv def get_winning_candidate(csv_file_path): Reads election results from a CSV file, computes the total votes for each candidate, and returns the candidate with the highest number of votes. Parameters: csv_file_path (str): The path to the CSV file containing election results. Returns: str: The name of the candidate with the highest number of votes. votes = {} with open(csv_file_path, mode='r') as file: reader = csv.reader(file) next(reader) # Skip the header row for row in reader: candidate = row[1] # Assuming candidate name is in the second column votes[candidate] = votes.get(candidate, 0) + 1 winning_candidate = max(votes, key=votes.get) return winning_candidate"},{"question":"Write a python function to generate game maps for a game using a random map generator. The game uses a 2D grid, where each cell can either be land, water, or a forest. The game map should be a list of lists where 0 represents land, 1 represents water, and 2 represents forest.","solution":"import random def generate_game_map(rows, cols): Generates a game map with specified number of rows and columns. Each cell in the map can either be: - 0 (land) - 1 (water) - 2 (forest) :param rows: number of rows in the map :param cols: number of columns in the map :return: a 2D list representing the game map return [[random.choice([0, 1, 2]) for _ in range(cols)] for _ in range(rows)]"},{"question":"Write a python function to calculate the greatest common divisor (GCD) of two integers using the iterative approach of the Euclidean algorithm. Here is an initial implementation which has the error in it.","solution":"def gcd(a, b): Calculate the greatest common divisor of two integers using the iterative Euclidean algorithm. while b != 0: a, b = b, a % b return abs(a)"},{"question":"Write a python function to find the majority element in an array.","solution":"def majority_element(nums): Function to find the majority element in an array. The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += 1 if num == candidate else -1 return candidate"},{"question":"Write a python function to find the sum of all numbers from 1 to provided number using recursion.","solution":"def sum_recursive(n): Returns the sum of all numbers from 1 to n using recursion. if n <= 1: return n return n + sum_recursive(n - 1)"},{"question":"Write a python function to validate that a given string is a valid number. A valid number may contain integers, decimal points, negative signs, and scientific notation. Here is an example of a valid number: \\"-123.456e7\\". However, the string \\"abc\\" or \\"-123.e\\" would not be valid numbers.","solution":"import re def is_valid_number(s): Validate if the given string is a valid number. A valid number may contain integers, decimal points, negative signs, and scientific notation. # Regular expression pattern to confirm the validity of the number pattern = re.compile(r'^-?d+(.d+)?(e-?d+)?', re.IGNORECASE) return bool(pattern.match(s))"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. This is a classic problem known as \\"Maximum Subarray Problem\\".","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within a one-dimensional array. :param nums: List of integers :return: Integer, the maximum sum of the contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to sort a list of integers using the bucket sort algorithm. Bucket sort is a distribution sort where the input is partitioned into approximately equal-sized buckets and each bucket is sorted individually using a simple sorting algorithm. The resulting sorted buckets are then concatenated together to form a sorted list.","solution":"def bucket_sort(arr): Sorts a list of integers using the bucket sort algorithm. if not arr: return arr # Find the minimum and maximum value in the array min_value, max_value = min(arr), max(arr) # Initialize buckets bucket_count = len(arr) buckets = [[] for _ in range(bucket_count)] # Distribute the array elements into buckets for num in arr: index = int((num - min_value) / (max_value - min_value + 1) * bucket_count) buckets[index].append(num) # Sort each bucket and concatenate the results sorted_arr = [] for bucket in buckets: sorted_arr.extend(sorted(bucket)) return sorted_arr"},{"question":"Write a python function to calculate the sum of all positive numbers in a given list. The function should ignore any non-positive numbers and only add up the positive numbers. If there are no positive numbers, the function should return 0.","solution":"def sum_of_positive_numbers(numbers): Calculates the sum of all positive numbers in the given list. Args: numbers (list): A list of numbers. Returns: int: The sum of all positive numbers in the list. Returns 0 if there are no positive numbers. sum_positive = sum(num for num in numbers if num > 0) return sum_positive"},{"question":"Write a python function to check if all elements in a given list of integers are consecutive.","solution":"def are_consecutive(lst): Checks if all elements in a given list of integers are consecutive. if not lst: # if the list is empty, return True as there are no gaps return True lst_sorted = sorted(lst) for i in range(len(lst_sorted) - 1): if lst_sorted[i] + 1 != lst_sorted[i + 1]: return False return True"},{"question":"Write a python function to find the shortest path from node A to node B in a graph using DFS. Here, the graph can be represented in the dictionary form with key-value pairs as nodes and their adjacent nodes. Please also use a helper stack to guide the DFS process. Do not use recursion.","solution":"def dfs_shortest_path(graph, start, goal): Return the shortest path from start to goal using DFS with a stack. The graph is represented as an adjacency list dictionary. Parameters: - graph: dict, adjacency list representation of the graph. - start: any, start node. - goal: any, goal node. Returns: - list, shortest path as a list of nodes from start to goal. If no path exists, returns an empty list. # Stack for DFS: stores tuples of (current node, path from start to current node) stack = [(start, [start])] visited = set() while stack: (current, path) = stack.pop() if current not in visited: if current == goal: return path visited.add(current) # Extend paths to the neighbors for neighbor in graph.get(current, []): if neighbor not in visited: stack.append((neighbor, path + [neighbor])) return [] # No path found"},{"question":"Write a python function to implement a rotating array. A rotating array means the elements of the array are shifted to the right by k places, and the elements at the end of the array are wrapped around to the beginning. For instance, if you have an array [1, 2, 3, 4, 5] and k=2, the result should be [4, 5, 1, 2, 3].","solution":"def rotate_array(arr, k): Rotates the elements of the array to the right by k positions. Parameters: arr (list): The list of elements to be rotated. k (int): The number of positions to rotate the array. Returns: list: The rotated array. n = len(arr) if n == 0: return arr k = k % n # Ensure k is within the bound of the array length return arr[-k:] + arr[:-k]"},{"question":"Write a python function to print \\"Hello World\\" in the console. The function should be named \`print_hello_world()\`. After defining the function, call it to display the message in the console.","solution":"def print_hello_world(): Prints \\"Hello World\\" to the console. print(\\"Hello World\\") # Calling the function to display the message print_hello_world()"},{"question":"Write a python function to find the first character that appears more than once in a string and return that character. If no character appears more than once, the function should return None.","solution":"def first_repeating_character(s): Returns the first character that appears more than once in the string s. If no character appears more than once, returns None. seen = set() for char in s: if char in seen: return char seen.add(char) return None"},{"question":"Write a python function to calculate the total of values in a list.","solution":"def total(lst): Returns the total of values in the list. return sum(lst)"},{"question":"Write a python function to filter a list of integers by checking if they are divisible by a given divisor. The function should be named \`filter_divisible_numbers\` and it takes two parameters: \`numbers\` (the list of integers to filter) and \`divisor\` (the integer to check divisibility against).","solution":"def filter_divisible_numbers(numbers, divisor): Filters the list of integers and returns a new list containing only the elements that are divisible by the given divisor. :param numbers: List of integers to filter. :param divisor: Integer to check divisibility against. :return: List of integers divisible by the divisor. return [number for number in numbers if number % divisor == 0]"},{"question":"Write a python function to solve the LeetCode problem 542. \\"01 Matrix\\" problem where I need to find the distance of the nearest 0 for each cell in the matrix. The solution should handle matrices with dimensions up to 100x100.","solution":"from collections import deque from typing import List def updateMatrix(mat: List[List[int]]) -> List[List[int]]: rows, cols = len(mat), len(mat[0]) dist = [[float('inf')] * cols for _ in range(rows)] queue = deque() for r in range(rows): for c in range(cols): if mat[r][c] == 0: dist[r][c] = 0 queue.append((r, c)) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols: if dist[nr][nc] > dist[r][c] + 1: dist[nr][nc] = dist[r][c] + 1 queue.append((nr, nc)) return dist"},{"question":"Write a python function to convert a dictionary to a list of strings, where each string is a key-value pair in the format \\"key:value\\".","solution":"def dict_to_list_of_strings(d): Converts a dictionary to a list of strings, where each string is a key-value pair in the format 'key:value' Parameters: d (dict): The dictionary to convert. Returns: list: A list of strings representing the key-value pairs. return [f\\"{key}:{value}\\" for key, value in d.items()]"},{"question":"Write a python function to validate an American express card number using Luhn algorithm.","solution":"def validate_amex(card_number): Validates an American Express card number using the Luhn algorithm. An American Express card number must: - Start with 34 or 37 - Be 15 digits long card_number = str(card_number) # Check length if len(card_number) != 15: return False # Check starting digits if not (card_number.startswith('34') or card_number.startswith('37')): return False # Luhn algorithm for validation def luhn_checksum(card_number): def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) odd_digits = digits[-1::-2] even_digits = digits[-2::-2] checksum = 0 checksum += sum(odd_digits) for d in even_digits: checksum += sum(digits_of(d * 2)) return checksum % 10 return luhn_checksum(card_number) == 0"},{"question":"Write a python function to get all the odd numbers in a list and return them as a new list.","solution":"def get_odd_numbers(lst): Returns a list of all odd numbers from the input list. Parameters: lst (list): A list of integers. Returns: list: A list of odd integers. return [num for num in lst if num % 2 != 0]"},{"question":"Write a python function to find the leaves of a binary tree. A binary tree leaf is a node that doesn't have any children.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_leaves(root): Find the leaves of a binary tree. :param root: TreeNode, the root of the binary tree :return: list of leaf node values if not root: return [] if not root.left and not root.right: return [root.value] left_leaves = find_leaves(root.left) right_leaves = find_leaves(root.right) return left_leaves + right_leaves"},{"question":"Write a python function to calculate the sum of all the even numbers in a list. The function should also check if the list contains only integers, and if not, raise a TypeError. Additionally, ensure that the function handles an empty list by returning 0.","solution":"def sum_of_evens(lst): Returns the sum of all even numbers in the list. If the list contains non-integer elements, raises a TypeError. if not all(isinstance(x, int) for x in lst): raise TypeError(\\"All elements in the list must be integers\\") return sum(x for x in lst if x % 2 == 0)"},{"question":"Write a python function to calculate the sum of all numbers in a list. How can I do this using a loop?","solution":"def sum_of_list(numbers): Returns the sum of all numbers in the list using a loop. :param numbers: List of numbers :return: Sum of the numbers total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to simulate rolling a dice face. The function should take no parameters and return a random int representing the dice face. The returned value should be between 1 and 6, inclusive.","solution":"import random def roll_dice(): Simulates rolling a dice and returns a face value between 1 and 6. return random.randint(1, 6)"},{"question":"Write a python function to check if a given list of numbers is a valid permutation of another list. A permutation is a rearrangement of the elements of one set into some sequence or order.","solution":"def is_valid_permutation(list1, list2): Check if list1 is a valid permutation of list2. Parameters: list1 (List[int]): First list of numbers. list2 (List[int]): Second list of numbers. Returns: bool: True if list1 is a valid permutation of list2, False otherwise. return sorted(list1) == sorted(list2)"},{"question":"Write a python function to find the maximum sum of a contiguous subarray with a minimum length of 1.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray with a minimum length of 1. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to add two numbers represented as linked lists. The digits are stored in reverse order, and each node contains a single digit. You should return the result as a linked list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Given two numbers represented as linked lists in reverse order, returns their sum as a linked list in reverse order. dummy_head = ListNode(0) p, q, current = l1, l2, dummy_head carry = 0 while p is not None or q is not None: x = p.val if p is not None else 0 y = q.val if q is not None else 0 total = carry + x + y carry = total // 10 current.next = ListNode(total % 10) current = current.next if p is not None: p = p.next if q is not None: q = q.next if carry > 0: current.next = ListNode(carry) return dummy_head.next"},{"question":"Write a python function to convert a given string to its corresponding ASCII values. Each character in the string should be converted to its ASCII value and each ASCII value should be separated by a space.","solution":"def string_to_ascii(s): Converts a given string to its corresponding ASCII values separated by spaces. Parameters: s (str): The input string. Returns: str: A string representing the ASCII values of the characters in the input string separated by spaces. return ' '.join(str(ord(char)) for char in s)"},{"question":"Write a python function to find the number of set bits in an integer.","solution":"def count_set_bits(n): Returns the number of set bits (1s) in the binary representation of the integer n. count = 0 while n: count += n & 1 n >>= 1 return count"},{"question":"Write a python function to sort numbers in an array using the Bubble Sort algorithm. Explain the steps involved and how the function works.","solution":"def bubble_sort(arr): Function to sort numbers in an array using the Bubble Sort algorithm. Bubble Sort is a simple comparison-based sorting algorithm. Parameters: arr (list): A list of numbers to be sorted. Returns: list: The sorted list of numbers. n = len(arr) # Traverse through all elements in the list for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the list from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to print the numbers from 1 to 100 and their squares.","solution":"def print_numbers_and_squares(): Prints the numbers from 1 to 100 and their squares. for i in range(1, 101): print(f\\"{i}: {i**2}\\") # Call the function to display the results print_numbers_and_squares()"},{"question":"Write a python function to generate html links in a list. For example, given a list of websites, the function should return a list of html link tags. For example, given [\\"google.com\\", \\"facebook.com\\"], the function should return [\\"<a href='http://google.com'>google.com</a>\\", \\"<a href='http://facebook.com'>facebook.com</a>\\"].","solution":"def generate_html_links(websites): Returns a list of HTML link tags for given websites. Parameters: websites (list of str): A list of website URLs. Returns: list of str: A list of HTML link tags. return [f\\"<a href='http://{site}'>{site}</a>\\" for site in websites]"},{"question":"Write a python function to filter out strings in a list that are either palindromes or have at least one repeated character.","solution":"def filter_strings(strings): Filters out strings in a list that are either palindromes or have at least one repeated character. Parameters: strings (list of str): List of strings to be filtered. Returns: list of str: Filtered list of strings. def is_palindrome(s): return s == s[::-1] def has_repeated_char(s): return len(s) != len(set(s)) return [s for s in strings if not is_palindrome(s) and not has_repeated_char(s)]"},{"question":"Write a python function to convert a string to a list of characters, then reverse the list and finally print the reversed list.","solution":"def reverse_string_to_list(s): Convert the string s to a list of characters, reverse the list, and return it. char_list = list(s) char_list.reverse() return char_list # Example usage: # reversed_list = reverse_string_to_list(\\"hello\\") # print(reversed_list) # Output: ['o', 'l', 'l', 'e', 'h']"},{"question":"Write a python function to remove duplicates from a list of dictionaries in Python based on a specific key. For example, given a list of dictionaries where each dictionary represents a person, with a 'name' and 'age' key, how can I remove duplicate entries based on the 'name' key?","solution":"def remove_duplicates(dict_list, key): Removes duplicate dictionaries from a list based on a specific key. Parameters: dict_list (list): List of dictionaries to be de-duplicated. key (str): The key to check for duplicates. Returns: list: A list of dictionaries with duplicates removed based on the key. seen = set() result = [] for d in dict_list: k = d[key] if k not in seen: result.append(d) seen.add(k) return result"},{"question":"Write a python function to return the most frequent character in a string. In case of a tie, return the first character that appears with the maximum frequency.","solution":"from collections import Counter def most_frequent_character(s): Returns the most frequent character in the string s. In case of a tie, it returns the first character that appears with the maximum frequency. if not s: return None # Count characters in the string count = Counter(s) # Find the maximum frequency max_freq = max(count.values()) # Find the first character with maximum frequency for char in s: if count[char] == max_freq: return char"},{"question":"Write a python function to print the Fibonacci series up to n terms. The function should take an integer \`n\` as input and print the first \`n\` terms of the Fibonacci series.","solution":"def fibonacci_series(n): Print the Fibonacci series up to n terms. if n <= 0: return [] series = [0] * n if n >= 1: series[0] = 0 if n >= 2: series[1] = 1 for i in range(2, n): series[i] = series[i-1] + series[i-2] return series"},{"question":"Write a python function to print the sum and average of numbers in a list.","solution":"def sum_and_average(numbers): Returns the sum and average of the numbers in a list. Parameters: numbers (list): a list of numbers (int or float) Returns: tuple: sum and average of the numbers if not numbers: return (0, 0) total_sum = sum(numbers) average = total_sum / len(numbers) return total_sum, average"},{"question":"Write a python function to find the maximum number in a list using recursion. How would you implement this solution?","solution":"def find_max_recursive(lst): Returns the maximum number in a list using recursion. # Base case: If the list has only one element, return that element if len(lst) == 1: return lst[0] # Recursive case: Compare the first element with the maximum of the rest return max(lst[0], find_max_recursive(lst[1:]))"},{"question":"Write a python function to identify the top 3 most frequent elements in an array, given an array A and a positive integer k.","solution":"from collections import Counter def top_k_frequent(A, k): Return k most frequent elements in array A. :param A: List of elements :param k: Positive integer indicating the number of top frequent elements to return :return: List of k most frequent elements if k <= 0: raise ValueError(\\"k must be a positive integer\\") counter = Counter(A) most_common = counter.most_common(k) return [item for item, count in most_common]"},{"question":"Write a python function to print all possible solutions to the N-Queens puzzle. Each solution is a list of strings where \\"Q\\" represents a queen and \\".\\" represents an empty space.","solution":"def solve_n_queens(n): Returns all possible solutions to the N-Queens puzzle where n is the number of queens. Each solution is represented as a list of strings. def create_board(state): Creates a board representation from the list of column positions of queens. board = [] for i in range(n): row = ['.'] * n row[state[i]] = 'Q' board.append(''.join(row)) return board def can_place(row, col): Checks if a queen can be placed at (row, col). for prev_row in range(row): # Check column attacks and diagonal attacks if state[prev_row] == col or state[prev_row] - prev_row == col - row or state[prev_row] + prev_row == col + row: return False return True def solve(row): Recursively searches for solutions if row == n: result.append(create_board(state)) return for col in range(n): if can_place(row, col): state[row] = col solve(row + 1) state[row] = -1 # Reset state (backtrack) result = [] state = [-1] * n # To keep track of the column position of queens solve(0) return result"},{"question":"Write a python function to find the smallest element in a list.","solution":"def find_smallest_element(lst): Returns the smallest element in the list. :param lst: List of elements. :return: The smallest element in the list. if not lst: raise ValueError(\\"The list is empty\\") smallest = lst[0] for elem in lst[1:]: if elem < smallest: smallest = elem return smallest"},{"question":"Write a python function to count the number of islands in a 2D grid where '1' represents land and '0' represents water. An island is defined as a group of 1's connected either horizontally, vertically, or diagonally. Plugins are available for extending functionality.","solution":"def num_islands(grid): Count the number of islands in a 2D grid where '1' represents land and '0' represents water. An island is defined as a group of 1's connected either horizontally, vertically, or diagonally. if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0': return grid[i][j] = '0' # Mark the cell as visited by replacing '1' with '0' # Explore all 8 possible directions (including diagonals) dfs(grid, i - 1, j) dfs(grid, i + 1, j) dfs(grid, i, j - 1) dfs(grid, i, j + 1) dfs(grid, i - 1, j - 1) dfs(grid, i - 1, j + 1) dfs(grid, i + 1, j - 1) dfs(grid, i + 1, j + 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == '1': dfs(grid, i, j) count += 1 return count"},{"question":"Write a python function to take a list of tuples that contain user information (name, age, height in cm) and return a list of tuples sorted by age in ascending order.","solution":"def sort_users_by_age(users): Takes a list of tuples that contain user information (name, age, height in cm) and returns a list of tuples sorted by age in ascending order. :param users: List of tuples, where each tuple contains (name, age, height in cm) :return: List of tuples sorted by age in ascending order return sorted(users, key=lambda user: user[1])"},{"question":"Write a python function to read a csv file and convert its contents into a dictionary where the keys are the values from the first column (acting as the key) and the values are the corresponding row data as a list (acting as the value).","solution":"import csv def csv_to_dict(csv_file_path): Reads a CSV file and converts its contents into a dictionary. The keys are the values from the first column, and the values are the corresponding row data as a list. result_dict = {} with open(csv_file_path, 'r') as file: reader = csv.reader(file) for row in reader: key = row[0] value = row[1:] result_dict[key] = value return result_dict"},{"question":"Write a python function to sort an array without using the sort() function and without using any additional data structures or libraries. Implement the algorithm in place.","solution":"def bubble_sort(arr): Sorts an array in place using the bubble sort algorithm. n = len(arr) # Traverse through all elements in the array for i in range(n): # Last i elements are already in place for j in range(0, n - i - 1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] # Usage #arr = [64, 34, 25, 12, 22, 11, 90] #bubble_sort(arr) #print(\\"Sorted array is:\\", arr)"},{"question":"Write a python function to convert a nested list into a flat list.","solution":"def flatten(nested_list): Flattens a nested list into a flat list. flat_list = [] for item in nested_list: if isinstance(item, list): flat_list.extend(flatten(item)) else: flat_list.append(item) return flat_list"},{"question":"Write a python function to print the largest number in a list.","solution":"def find_largest_number(numbers): Returns the largest number in a list of numbers. if not numbers: raise ValueError(\\"The list is empty\\") return max(numbers)"},{"question":"Write a python function to implement the binary search algorithm. How should the function be designed to efficiently search for an element in a sorted list? What are the key conditions and steps involved in the binary search algorithm?","solution":"def binary_search(arr, target): Performs binary search on a sorted list 'arr' to find the index of 'target'. Returns the index of 'target' if found, else returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 mid_value = arr[mid] if mid_value == target: return mid elif mid_value < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to calculate the sum of all positive divisors (excluding the number itself) of a given number. For instance, for the number 28, the divisors are 1, 2, 4, 7, and 14, and their sum is 28.","solution":"def sum_of_positive_divisors(n): Returns the sum of all positive divisors of n, excluding n itself. if n <= 1: return 0 divisors_sum = 0 for i in range(1, n): if n % i == 0: divisors_sum += i return divisors_sum"},{"question":"Write a python function to find the Nth Fibonacci number using recursion without memoization. How can we improve this function by adding memoization to make it more efficient?","solution":"def nth_fibonacci(n): Returns the Nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return nth_fibonacci(n - 1) + nth_fibonacci(n - 2) # Improved version with memoization def nth_fibonacci_memo(n, memo=None): Returns the Nth Fibonacci number using recursion with memoization. if memo is None: memo = {} if n <= 0: raise ValueError(\\"n must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: if n not in memo: memo[n] = nth_fibonacci_memo(n - 1, memo) + nth_fibonacci_memo(n - 2, memo) return memo[n]"},{"question":"Write a python function to return the most common number in a list. If there are multiple numbers with the same highest frequency, return the smallest of them.","solution":"from collections import Counter def most_common_number(nums): Returns the most common number in a list. If there are multiple numbers with the same highest frequency, returns the smallest of them. if not nums: return None # Depending on the requirements, handling empty list case count = Counter(nums) most_common_count = max(count.values()) most_common_nums = [num for num, freq in count.items() if freq == most_common_count] return min(most_common_nums)"},{"question":"Write a python function to find the smallest number greater than a given number that is composed only of prime digits (2, 3, 5, 7).","solution":"def is_prime_digit(num): Check if the given number is composed only of prime digits (2, 3, 5, 7). prime_digits = {'2', '3', '5', '7'} return all(char in prime_digits for char in str(num)) def next_number_with_prime_digits(n): Find the smallest number greater than n that is composed only of prime digits (2, 3, 5, 7). num = n + 1 while not is_prime_digit(num): num += 1 return num"},{"question":"Write a python function to test if a string has all unique characters. How can you optimize this function?","solution":"def has_all_unique_chars(s): Returns True if the string s has all unique characters, False otherwise. return len(s) == len(set(s))"},{"question":"Write a python function to solve the puzzle of placing N queens on an N×N chessboard So that no two queens threaten each other. A queen can attack another queen if they are in the same row, the same column, or on the same diagonal.","solution":"def solve_n_queens(n): Solves the N-Queens puzzle and returns one possible solution as a list of strings. Each string represents one row of the chessboard, with 'Q' representing a queen and '.' representing an empty space. def is_valid(board, row, col): for i in range(row): if board[i][col] == 'Q': return False if col - (row - i) >= 0 and board[i][col - (row - i)] == 'Q': return False if col + (row - i) < n and board[i][col + (row - i)] == 'Q': return False return True def solve(board, row): if row == n: solutions.append([\\"\\".join(row) for row in board]) return for col in range(n): if is_valid(board, row, col): board[row][col] = 'Q' solve(board, row + 1) board[row][col] = '.' board = [[\\".\\" for _ in range(n)] for _ in range(n)] solutions = [] solve(board, 0) return solutions # Example usage: # print(solve_n_queens(4))"},{"question":"Write a python function to find the maximum sum of non-adjacent elements in a given array of integers. Do not use recursion in your solution. Additionally, the function should handle arrays with negative numbers and zeros.","solution":"def max_sum_non_adjacent(nums): Return the maximum sum of non-adjacent elements in the given array. if not nums: return 0 incl = 0 # max sum including the current element excl = 0 # max sum excluding the current element for num in nums: new_excl = max(incl, excl) # new excl will be max of incl and excl before current element incl = excl + num # incl is old excl plus current element excl = new_excl # update excl to the new value of new_excl return max(incl, excl)"},{"question":"Write a python function to convert a decimal number into binary without using the built-in bin() function.","solution":"def decimal_to_binary(n): Convert a decimal number to its binary representation without using the built-in bin() function. if n == 0: return \\"0\\" binary = \\"\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary"},{"question":"Write a python function to solve a linear equation in two unknowns and return the solution. The function should take coefficients of every term and constants, and return the values of the two unknowns.","solution":"def solve_linear_equation(a1, b1, c1, a2, b2, c2): Solves the system of linear equations: a1*x + b1*y = c1 a2*x + b2*y = c2 Returns a tuple (x, y) if there's a solution, or throws ValueError if no unique solution exists. # Calculate determinant det = a1 * b2 - a2 * b1 if det == 0: raise ValueError(\\"The system has no unique solution\\") # Calculate x and y using Cramer's rule x = (c1 * b2 - c2 * b1) / det y = (a1 * c2 - a2 * c1) / det return (x, y)"},{"question":"Write a python function to find the maximum and minimum elements in a list. The function should handle an empty list and return None for both values in that case.","solution":"def find_max_min(lst): Returns a tuple (max, min) of the maximum and minimum element in the list. If the list is empty, returns (None, None). if not lst: return (None, None) maximum = max(lst) minimum = min(lst) return (maximum, minimum)"},{"question":"Write a python function to find all the partitions of a given positive integer n into parts that are non-increasing. For example, for n=4, the function should return all non-increasing partitions of 4 such as [4], [3,1], [2,2], [2,1,1], [1,1,1,1].","solution":"def partitions(n): Generate all partitions of the positive integer n into non-increasing parts. Parameters: n (int): The integer to partition. Returns: list: A list of lists, each containing a partition of n. def helper(n, max_val): if n == 0: return [[]] result = [] for i in range(min(n, max_val), 0, -1): for rest in helper(n - i, i): result.append([i] + rest) return result return helper(n, n)"},{"question":"Write a python function to get the type of variable x.","solution":"def get_type(x): Returns the type of variable x as a string. return type(x).__name__"},{"question":"Write a python function to remove all occurrences of the letter 'a' from the given string and return the new string.","solution":"def remove_a_from_string(s): Removes all occurrences of the letter 'a' from the given string. Parameters: s (str): The input string. Returns: str: The string with all 'a' characters removed. return s.replace('a', '')"},{"question":"Write a python function to calculate the factorial of a given non-negative integer \`n\` using functional programming approach. Additionally, the function should be able to handle exceptions and return an error message if the input is not a non-negative integer.","solution":"from functools import reduce import operator def factorial(n): Returns the factorial of a non-negative integer n. If the input is not a non-negative integer, returns an error message. if not isinstance(n, int) or n < 0: return \\"Error: Input must be a non-negative integer.\\" return reduce(operator.mul, range(1, n+1), 1)"},{"question":"Write a python function to count all alphabets in a given string.","solution":"def count_alphabets(s): Returns the count of alphabet characters in the given string s. return sum(c.isalpha() for c in s)"},{"question":"Write a python function to convert all the lowercase letters in a string to uppercase.","solution":"def to_uppercase(s): Converts all the lowercase letters in a string to uppercase. Parameters: s (str): The input string Returns: str: The string with all lowercase letters converted to uppercase return s.upper()"},{"question":"Write a python function to reverse each string in a list using list comprehension. The function should take a list of strings as an input and return a new list with each string reversed.","solution":"def reverse_strings(strings): Reverses each string in the given list of strings. Parameters: strings (list): A list of strings to be reversed. Returns: list: A new list with each string reversed. return [s[::-1] for s in strings]"},{"question":"Write a python function to reverse the order of words in a sentence without reversing the characters of each word. For instance, given the sentence \\"Hello world from Alibaba Cloud\\", the function should return \\"Cloud Alibaba from world Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a sentence without reversing the characters of each word. Args: sentence (str): The input sentence. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to find the nth Fibonacci number. This function should optimize the time complexity by using memorization. The nth Fibonacci number is defined as the sum of the two preceding ones, usually starting with 0 and 1. The sequence goes 0, 1, 1, 2, 3, 5, 8, 13, and so forth.","solution":"def nth_fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization. Parameters: n (int): The position in the Fibonacci sequence to retrieve. memo (dict): A dictionary used to store previously calculated Fibonacci numbers to optimize performance. Returns: int: The nth Fibonacci number. if n in memo: return memo[n] if n <= 1: return n memo[n] = nth_fibonacci(n - 1, memo) + nth_fibonacci(n - 2, memo) return memo[n]"},{"question":"Write a python function to validate if a given string is a valid international phone number.","solution":"import re def validate_phone_number(phone_number): Validates if a given string is a valid international phone number. For the purpose of this function, a valid international phone number starts with a '+' sign followed by 10 to 15 digits. Args: phone_number (str): The phone number to validate. Returns: bool: True if the phone number is valid, False otherwise. pattern = re.compile(r'^+d{10,15}') return bool(pattern.match(phone_number))"},{"question":"Write a python function to find the maximum product of a subset of an array of integers. The function should ignore zero values and handle negative numbers correctly.","solution":"def max_product_subset(arr): Returns the maximum product of a subset of the given array of integers. # Filter out zero values arr = [x for x in arr if x != 0] # If array is empty now, return 0 if not arr: return 0 # Find number of negative numbers neg_count = sum(1 for x in arr if x < 0) # If there's only one negative number and no other numbers, return it if neg_count == len(arr) and len(arr) == 1: return arr[0] # If there are an even number of negative numbers, we can consider all for maximizing product if neg_count % 2 == 0: product = 1 for num in arr: product *= num else: # If odd number of negative numbers, we skip the largest (in absolute value) negative number max_negative = max(x for x in arr if x < 0) product = 1 flag = False for num in arr: if num == max_negative and not flag: flag = True continue product *= num return product"},{"question":"Write a python function to find the prime factors of a number n. The number n will be less than 10000. The function should return a list of prime factors.","solution":"def prime_factors(n): Returns a list of prime factors of the number n. The function handles n < 10000. factors = [] # Check for number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point # So we can skip one element (i.e. i = i + 2) for i in range(3, int(n**0.5)+1, 2): # While i divides n, add i and divide n while n % i == 0: factors.append(i) n = n // i # This condition is to check if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a python function to get the next item in a circular linked list. Given a node reference, return the next node in the circular linked list. The circular linked list is represented by a class with methods for insertion, deletion, and traversal. Your function should not create or modify any part of the list, but only use the given node reference.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.head = None def insert(self, data): new_node = Node(data) if not self.head: self.head = new_node new_node.next = new_node else: temp = self.head while temp.next != self.head: temp = temp.next temp.next = new_node new_node.next = self.head def get_next_node(self, node): Returns the next node in the circular linked list given a node reference. return node.next"},{"question":"Write a python function to check if a number is a perfect cube. A perfect cube is an integer that can be expressed as the cube of another integer. For example, 27 is a perfect cube because it can be written as 3 * 3 * 3. How can you verify if a number is a perfect cube?","solution":"def is_perfect_cube(n): Returns True if the given number is a perfect cube, False otherwise. if n < 0: n = -n cube_root = round(n ** (1/3)) return cube_root ** 3 == n"},{"question":"Write a python function to calculate the sum of squared differences of two lists of numbers. The function should take two equal-length lists as input and return the sum of squared differences between corresponding elements.","solution":"def sum_of_squared_differences(list1, list2): Returns the sum of squared differences between corresponding elements of two lists. Parameters: list1 (list of int/float): First list of numbers. list2 (list of int/float): Second list of numbers, of the same length as list1. Returns: int/float: The sum of squared differences. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") sum_squared_diff = 0 for x, y in zip(list1, list2): sum_squared_diff += (x - y) ** 2 return sum_squared_diff"},{"question":"Write a python function to convert a binary tree into a string that mimics a zigzag level order traversal. The string should represent the tree in a way that shows the levels of the tree with a zigzag pattern, where the nodes at odd levels are printed from left to right and the nodes at even levels are printed from right to left.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def zigzag_level_order_string(root): if not root: return \\"\\" result = [] current_level = deque([root]) left_to_right = True while current_level: level_length = len(current_level) level_nodes = [] for _ in range(level_length): if left_to_right: node = current_level.popleft() level_nodes.append(str(node.value)) if node.left: current_level.append(node.left) if node.right: current_level.append(node.right) else: node = current_level.pop() level_nodes.append(str(node.value)) if node.right: current_level.appendleft(node.right) if node.left: current_level.appendleft(node.left) result.append(\\" \\".join(level_nodes)) left_to_right = not left_to_right return \\"n\\".join(result) # For example usage: # root = TreeNode(3) # root.left = TreeNode(9) # root.right = TreeNode(20) # root.right.left = TreeNode(15) # root.right.right = TreeNode(7) # print(zigzag_level_order_string(root))"},{"question":"Write a python function to determine if a string \`s\` contains a substring that is a palindrome, considering case sensitivity and punctuation. A substring is a contiguous sequence of characters within a string.","solution":"def has_palindrome_substring(s): Determines if a string contains a substring that is a palindrome. :param s: Input string :return: True if there is a palindrome substring, False otherwise def is_palindromic(substr): return substr == substr[::-1] n = len(s) for i in range(n): for j in range(i + 2, n + 1): if is_palindromic(s[i:j]): return True return False"},{"question":"Write a python function to implement Dijkstra's algorithm for finding the shortest path from a single source vertex to all other vertices in a weighted graph.","solution":"import heapq def dijkstra(graph, start_vertex): Implements Dijkstra's algorithm to find the shortest path from a single source vertex to all other vertices in a weighted graph. Parameters: graph (dict): A dictionary representing the adjacency list of the graph where keys are vertex identifiers and values are lists of tuples (neighbor, weight). start_vertex: The starting vertex for Dijkstra's algorithm. Returns: dict: A dictionary where the keys are vertices and values are the shortest distance from the start_vertex. # Initialize the shortest path dictionary with infinite distance for all vertices except the starting vertex shortest_paths = {vertex: float('inf') for vertex in graph} shortest_paths[start_vertex] = 0 # Priority queue to hold vertices to explore priority_queue = [(0, start_vertex)] heapq.heapify(priority_queue) while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) # Skip processing if the distance is not current if current_distance > shortest_paths[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight # Only consider this new path if it's better if distance < shortest_paths[neighbor]: shortest_paths[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return shortest_paths"},{"question":"Write a python function to validate a phone number using regular expressions. A valid phone number can start with '+' followed by 1-3 digits and must contain exactly 10 digits following.","solution":"import re def validate_phone_number(phone_number): pattern = r'^+d{1,3}d{10}' return bool(re.match(pattern, phone_number))"},{"question":"Write a python function to find the length of the longest consecutive sequence in an array which contains only created for the characters 'a', 'b', and 'c'.","solution":"def longest_consecutive_sequence(arr): Finds the length of the longest consecutive sequence in an array which contains only characters 'a', 'b', and 'c'. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Write a python function to calculate the sum of all elements in a list of integers using a loop. Ensure the function should handle an empty list and return 0. How can you use assertions to test the function?","solution":"def sum_of_elements(lst): Returns the sum of all elements in the list. Parameters: lst (list): A list of integers. Returns: int: The sum of all integers in the list. Returns 0 if the list is empty. total = 0 for num in lst: total += num return total"},{"question":"Write a python function to generate a Fibonacci sequence based on the number of terms desired. The function should take an integer \`n\` as input and return a list containing the first \`n\` terms of the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two terms are 0 and 1, and each subsequent term is the sum of the two preceding ones. For example, if \`n=5\`, the function should return \`[0, 1, 1, 2, 3]\`.","solution":"def fibonacci_sequence(n): Generates the first n terms of the Fibonacci sequence. Parameters: n (int): The number of terms desired. Returns: list: A list containing the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a python function to calculate the Mean Absolute Error (MAE) between the predicted and actual values. The function should take in two lists \`actual\` and \`predicted\` representing the true values and the predicted values respectively.","solution":"def mean_absolute_error(actual, predicted): Calculates the Mean Absolute Error (MAE) between two lists of numbers. Parameters: actual (list of float): The list of actual values. predicted (list of float): The list of predicted values. Returns: float: The Mean Absolute Error (MAE). if len(actual) != len(predicted): raise ValueError(\\"The length of actual and predicted lists must be the same.\\") error_sum = sum(abs(a - p) for a, p in zip(actual, predicted)) mae = error_sum / len(actual) return mae"},{"question":"Write a python function to generate the nth Fibonacci number. Fibonacci numbers are a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1.","solution":"def fibonacci(n): Returns the nth Fibonacci number. :param n: Non-negative integer representing the position in Fibonacci sequence. :return: The nth Fibonacci number. if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") elif n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for i in range(2, n+1): a, b = b, a + b return b"},{"question":"Write a python function to determine if a given string starts with any of the given prefixes. If it does, return the prefix that matches. If not, return an empty string.","solution":"def find_prefix(string, prefixes): Returns the prefix if the given string starts with any of the given prefixes. Otherwise, returns an empty string. Parameters: string (str): The string to check. prefixes (list of str): The list of prefixes to check against. Returns: str: The matching prefix, or an empty string if there is no match. for prefix in prefixes: if string.startswith(prefix): return prefix return \\"\\""},{"question":"Write a python function to remove duplicates from a list while maintaining order. You should use python set to help with this.","solution":"def remove_duplicates(input_list): Remove duplicates from the list while maintaining order. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a python function to count and store the frequency of a single character in a string. The function should return a dictionary where the keys are the single-character strings and the values are the counts of those characters in the input string.","solution":"def char_frequency(s): Returns a dictionary with the frequency count of each character in the string s. freq_dict = {} for char in s: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Write a python function to find and return all the parent nodes of a given node in a binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_parents(root, target): Finds and returns all the parent nodes of a given target node in a binary tree. def helper(node, target, parents): if not node: return False if node.val == target: return True parents.append(node) if helper(node.left, target, parents) or helper(node.right, target, parents): return True parents.pop() return False parents = [] helper(root, target, parents) return parents"},{"question":"Write a python function to find the maximum number of rectangular patches needed to cover a square area. Each patch can be any size, but each patch must be a rectangle. The side length of the patches can vary from 1 to 10^9. The area to be covered is a square with a side length of 2 * 10^9. The function should return the minimum number of patches required.","solution":"def min_patches_for_square_area(side_length): Returns the minimum number of rectangular patches needed to cover a square area with the given side length. :param side_length: Side length of the square area (an integer) :return: Minimum number of patches required (an integer) # Each patch can only cover an area of up to 10^9 * 10^9 max_patch_area = 10**9 * 10**9 # Area of the square square_area = side_length * side_length # Minimum number of patches needed min_patches = (square_area + max_patch_area - 1) // max_patch_area return min_patches"},{"question":"Write a python function to check if an integer is a palindrome without using additional memory or reversing the integer.","solution":"def is_palindrome(num): Check if an integer is a palindrome without using additional memory or reversing the integer. if num < 0: return False # Calculate the number of digits in the number divisor = 1 while num // divisor >= 10: divisor *= 10 while num != 0: leading = num // divisor trailing = num % 10 if leading != trailing: return False # Remove the leading and trailing digits num = (num % divisor) // 10 # Adjust the divisor divisor = divisor // 100 return True"},{"question":"Write a python function to sort a given list in descending order using merge sort algorithm.","solution":"def merge_sort_desc(lst): Sorts the given list in descending order using the merge sort algorithm. if len(lst) <= 1: return lst mid = len(lst) // 2 left_half = merge_sort_desc(lst[:mid]) right_half = merge_sort_desc(lst[mid:]) return merge_desc(left_half, right_half) def merge_desc(left, right): Merges two lists into one in descending order. result = [] while left and right: if left[0] > right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left) result.extend(right) return result"},{"question":"Write a python function to calculate the result of a provided arithmetic expression using eval()","solution":"def calculate_expression(expression): Calculates the result of a provided arithmetic expression. Args: expression (str): A string representing a valid arithmetic expression. Returns: float: Result of the evaluated arithmetic expression. try: return eval(expression) except Exception as e: return f\\"Error: {e}\\""},{"question":"Write a python function to convert prefix to infix. Given a Prefix expression, write a function to convert it to an equivalent Infix expression. The prefix expression is in the form of a string.","solution":"def is_operator(c): return c in \\"+-*/\\" def prefix_to_infix(prefix_expression): stack = [] # Read the prefix expression in reverse order for ch in prefix_expression[::-1]: if is_operator(ch): # Pop two operands from stack op1 = stack.pop() op2 = stack.pop() # Form the infix expression new_expr = f\\"({op1}{ch}{op2})\\" # Push back this new infix expression stack.append(new_expr) else: # Push operand to stack stack.append(ch) # Stack now contains the infix expression return stack[0]"},{"question":"Write a python function to solve the problem of minimum number of jumps to reach the end of the array. In this problem, the array represents a series of non-negative integers where each integer represents your maximum jump length at that position. For example, if the array is [2, 3, 1, 1, 4], the minimum number of jumps to reach the last index is 2.","solution":"def min_jumps(arr): Returns the minimum number of jumps to reach the end of the array. if len(arr) <= 1: return 0 jumps = 0 max_reach = 0 step_end = 0 for i in range(len(arr)): max_reach = max(max_reach, i + arr[i]) if i == step_end: jumps += 1 step_end = max_reach if step_end >= len(arr) - 1: break return jumps"},{"question":"Write a python function to find the length of the longest subarray with at most k distinct elements.","solution":"def longest_subarray_with_k_distinct(nums, k): Returns the length of the longest subarray with at most k distinct elements. from collections import defaultdict n = len(nums) if n == 0 or k == 0: return 0 left, right = 0, 0 max_length = 0 current_elements = defaultdict(int) while right < n: current_elements[nums[right]] += 1 while len(current_elements) > k: current_elements[nums[left]] -= 1 if current_elements[nums[left]] == 0: del current_elements[nums[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Write a python function to convert a given string to a list where each character is a separate element in the list.","solution":"def string_to_list(s): Converts a given string to a list where each character is a separate element. Parameters: s (str): The input string. Returns: list: A list of characters from the input string. return list(s)"},{"question":"Write a python function to check if a number is a perfect square, a perfect cube, or both. A perfect square is a number that can be expressed as (n^2), and a perfect cube is a number that can be expressed as (n^3). If the number is both, return \\"Both\\". If it is only a perfect square, return \\"Square\\". If it is only a perfect cube, return \\"Cube\\". If it is neither, return \\"Neither\\".","solution":"import math def check_number_type(n): Checks if a number is a perfect square, a perfect cube, or both. Arguments: n -- the number to be checked. Returns: \\"Both\\" if the number is both a perfect square and a perfect cube. \\"Square\\" if the number is only a perfect square. \\"Cube\\" if the number is only a perfect cube. \\"Neither\\" if the number is neither. if n < 0: return \\"Neither\\" is_square = (math.isqrt(n) ** 2 == n) is_cube = (round(n ** (1/3)) ** 3 == n) if is_square and is_cube: return \\"Both\\" elif is_square: return \\"Square\\" elif is_cube: return \\"Cube\\" else: return \\"Neither\\""},{"question":"Write a python function to solve the missing number problem where one number from 1 to n is missing from the input array. The input array is sorted and the missing number is guaranteed to be between 1 and n. How would you approach this problem?","solution":"def find_missing_number(arr): Find the missing number in a sorted array of numbers from 1 to n. :param arr: List[int] - A sorted list of integers from 1 to n with one number missing. :return: int - The missing number. # Initialize left and right pointers left, right = 0, len(arr) - 1 # Binary search for the missing number while left <= right: mid = (left + right) // 2 # If the mid element is as expected, missing number is in the right half if arr[mid] == mid + 1: left = mid + 1 else: # otherwise, missing number is in the left half right = mid - 1 # The left pointer will be at the position of the missing number return left + 1"},{"question":"Write a python function to generate a correctly formatted markdown list that contains the elements of a list. The function signature is \`def generate_markdown_list(input_list: List[str]) -> str:\`","solution":"from typing import List def generate_markdown_list(input_list: List[str]) -> str: Generates a correctly formatted markdown list from the elements of input_list. Args: input_list (List[str]): A list containing string elements to be formatted into markdown list items. Returns: str: A string representing the formatted markdown list. return 'n'.join([f\\"* {item}\\" for item in input_list])"},{"question":"Write a python function to remove all occurrences of a given value from a list. For example, given a list [1, 2, 3, 4, 3, 5, 3] and a value 3, the function should remove all occurrences of 3 and return [1, 2, 4, 5].","solution":"def remove_occurrences(lst, value): Removes all occurrences of value from the list lst and returns the new list. return [x for x in lst if x != value]"},{"question":"Write a python function to find the sum of positive numbers in a list until a negative number is encountered. The function should return the sum and count of the positive numbers processed before encountering the negative number. The function should also return the index of the first negative number encountered.","solution":"def sum_positives_until_negative(nums): Returns the sum and count of positive numbers until a negative number is encountered. Also returns the index of the first negative number encountered. :param nums: List of integers :return: A tuple containing the sum of positive numbers, count of positive numbers, and index of the first negative number encountered. (sum_positive, count_positive, first_negative_index) sum_positive = 0 count_positive = 0 first_negative_index = -1 for index, num in enumerate(nums): if num < 0: first_negative_index = index break if num > 0: sum_positive += num count_positive += 1 return (sum_positive, count_positive, first_negative_index)"},{"question":"Write a python function to return the maximum absolute difference between two elements in an array. The function should work for any array of integers, not just sorted arrays. What are the time and space complexity of the function?","solution":"def max_absolute_difference(arr): Returns the maximum absolute difference between two elements in an array. Args: arr (list of int): List of integers Returns: int: Maximum absolute difference between any two elements in the array if not arr: return 0 # Assuming 0 for empty array case max_element = max(arr) min_element = min(arr) return abs(max_element - min_element)"},{"question":"Write a python function to generate the nth Fibonacci number using recursion. What is time complexity and space complexity of this approach?","solution":"def fibonacci(n): Returns the nth Fibonacci number using recursion. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) # Time complexity: O(2^n) # Space complexity: O(n) due to the recursion call stack"},{"question":"Write a python function to find the longest sequence of characters that repeats twice without overlapping in a given string.","solution":"def longest_repeating_substring(s): Finds the longest sequence of characters that repeats twice without overlapping in a given string. n = len(s) max_len = 0 result = \\"\\" # Dynamic programming table to store the lengths of longest repeating substrings dp = [[0 for _ in range(n+1)] for _ in range(n+1)] # Building the DP array from bottom up for i in range(1, n+1): for j in range(i+1, n+1): # If characters match and are not in the same substring if s[i-1] == s[j-1] and dp[i-1][j-1] < (j - i): dp[i][j] = dp[i-1][j-1] + 1 # Checking if this is the maximum length substring found so far if dp[i][j] > max_len: max_len = dp[i][j] result = s[i-max_len:i] else: dp[i][j] = 0 return result"},{"question":"Write a python function to remove a specific element from a list and return the updated list. If the element doesn't exist, return the original list.","solution":"def remove_element(lst, elem): Removes the first occurrence of elem from the list lst and returns the updated list. If elem is not in lst, returns the original list. :param lst: List of elements :param elem: Element to be removed :return: Updated list with the element removed if elem in lst: lst.remove(elem) return lst"},{"question":"Write a python function to calculate the number of connected components in an undirected graph represented by an adjacency list.","solution":"def number_of_connected_components(graph): Calculate the number of connected components in an undirected graph. Parameters: graph (dict): An adjacency list representing the undirected graph. Returns: int: Number of connected components in the graph. def dfs(node, visited): visited.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited) visited = set() count = 0 for node in graph: if node not in visited: count += 1 dfs(node, visited) return count"},{"question":"Write a python function to find the number of pixels with more than 255 values in an image after stretching its histogram to the full range (0-255). Histogram stretching involves normalizing the pixel values such that the lowest value becomes 0 and the highest value becomes 255, while preserving the relative difference between values.","solution":"import numpy as np def count_pixels_above_255(image): Counts the number of pixels with values more than 255 after histogram stretching. Args: - image: a numpy array representing the grayscale image. Returns: - count: the number of pixels with values above 255. if not image.size: return 0 # Find the minimum and maximum pixel values in the image min_val = image.min() max_val = image.max() # If all pixel values are the same, the image cannot be stretched if min_val == max_val: return 0 # Stretch the histogram stretched_image = ((image - min_val) / (max_val - min_val)) * 255 # Count the number of pixels that have a value more than 255 count = np.sum(stretched_image > 255) return int(count)"},{"question":"Write a python function to return the square root of a given number. You can use any standard library functions you need.","solution":"import math def square_root(x): Returns the square root of the given number x. If x is negative, the function returns None. if x < 0: return None return math.sqrt(x)"},{"question":"Write a python function to find and return the indices of elements in a list that are even numbers.","solution":"def find_even_indices(lst): Returns the indices of elements in the list that are even numbers. Parameters: lst (list): The list to check for even numbers. Returns: list: The indices of even numbers in the list. return [i for i, num in enumerate(lst) if num % 2 == 0]"},{"question":"Write a python function to reverse a stack using recursion without the use of auxiliary stack.","solution":"def insert_at_bottom(stack, item): Helper function that inserts an item at the bottom of a stack using recursion. if not stack: stack.append(item) else: temp = stack.pop() insert_at_bottom(stack, item) stack.append(temp) def reverse_stack(stack): Reverses a stack using recursion. if stack: temp = stack.pop() reverse_stack(stack) insert_at_bottom(stack, temp) return stack"},{"question":"Write a python function to calculate the factorial of a given number. The function should return the factorial of the number. If the input number is negative, the function should return \\"Factorial of negative number is not defined\\". If the input number is not an integer, the function should return \\"Input must be an integer\\". What would be the Python code to implement this?","solution":"def factorial(n): Returns the factorial of a given number. If the number is negative, returns an error message. If the number is not an integer, returns an error message. if not isinstance(n, int): return \\"Input must be an integer\\" if n < 0: return \\"Factorial of negative number is not defined\\" if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"Write a python function to solve the problem: \\"Given a string, find the number of unique words in it.\\"","solution":"def count_unique_words(s): Returns the number of unique words in the given string. Parameters: s (str): The input string. Returns: int: The number of unique words in the string. words = s.split() unique_words = set(words) return len(unique_words)"},{"question":"Write a python function to find the three numbers in a list that have the smallest sum. If the list has less than three elements, return \\"Insufficient elements\\". Also, if the list has any non-integer elements, return \\"Invalid input\\".","solution":"def smallest_three_sum(arr): Returns the three numbers in a list that have the smallest sum. If the list has less than three elements, return \\"Insufficient elements\\". If the list has any non-integer elements, return \\"Invalid input\\". if len(arr) < 3: return \\"Insufficient elements\\" if not all(isinstance(x, int) for x in arr): return \\"Invalid input\\" arr.sort() return arr[:3], sum(arr[:3])"},{"question":"Write a python function to remove N characters from a string, where these N characters are at the beginning of the string.","solution":"def remove_n_characters(string, n): Removes the first n characters from the string. Parameters: string (str): The original string n (int): The number of characters to remove from start Returns: str: The string after removing the first n characters if n <= 0: return string return string[n:]"},{"question":"Write a python function to check if the string \`str\` is a palindrome.","solution":"def is_palindrome(s): Checks if the provided string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward (ignoring spaces, punctuation, and capitalization). Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Removing spaces, punctuation, and converting to lowercase cleaned = ''.join(c.lower() for c in s if c.isalnum()) # Checking if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to find the two numbers in an array that sum up to a specific target, without using any built-in tools, such as hash tables or any additional data structures.","solution":"def find_pair_sum(nums, target): Returns a tuple of two numbers from the list \`nums\` that sum up to the \`target\`. If no such pair exists, return None. for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: return (nums[i], nums[j]) return None"},{"question":"Write a python function to determine if a number is a perfect square. Your solution should be based on the provided code snippet and not exceed 300 words.","solution":"import math def is_perfect_square(n): Determines if a given number n is a perfect square. Parameters: - n: int, the number to check Returns: - bool: True if n is a perfect square, False otherwise if n < 0: return False sqrt_n = math.isqrt(n) return sqrt_n * sqrt_n == n"},{"question":"Write a python function to find the highest common factor (HCF) or greatest common divisor (GCD) of two numbers. The function should be self-contained with clear documentation.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of two numbers a and b. The algorithm used is the Euclidean algorithm. while b: a, b = b, a % b return a"},{"question":"Write a python function to implement a recursive algorithm that calculates the power of a number base \`b\` raised to an exponent \`n\`. The function should handle both positive and negative exponents. If the exponent is negative, the function should compute the reciprocal of the power for positive exponent.","solution":"def power(b, n): Returns the result of base b raised to the power n. If n is negative, returns the reciprocal of the power. # Base cases if n == 0: return 1 elif n < 0: return 1 / power(b, -n) elif n == 1: return b # Recursive case half_pow = power(b, n // 2) if n % 2 == 0: return half_pow * half_pow else: return b * half_pow * half_pow"},{"question":"Write a python function to print the pattern of the letter 'F' using nested loops.","solution":"def print_F_pattern(): Prints the pattern of the letter 'F' using nested loops. for i in range(7): for j in range(5): if i == 0 or i == 3: print('*', end='') elif j == 0: print('*', end='') else: print(' ', end='') print()"},{"question":"Write a python function to print \\"hello world\\" to the console. What would be the code for that?","solution":"def print_hello_world(): Prints \\"hello world\\" to the console. print(\\"hello world\\")"},{"question":"Write a python function to calculate the sum of cubes of the first n natural numbers. For example, if n=5, the function should return 225 (since 1^3 + 2^3 + 3^3 + 4^3 + 5^3 = 225).","solution":"def sum_of_cubes(n): Returns the sum of cubes of the first n natural numbers. return sum(i**3 for i in range(1, n+1))"},{"question":"Write a python function to rotate a string by 1.","solution":"def rotate_string_by_1(s): Rotates the input string s by 1 character to the right. Args: s (str): Input string Returns: str: Rotated string if not s: return s return s[-1] + s[:-1]"},{"question":"Write a python function to find the rate of interest per annum.","solution":"def calculate_annual_interest_rate(principal, time, interest): Calculate the rate of interest per annum. Parameters: principal (float): The principal amount. time (float): The time period in years. interest (float): The interest earned over the time period. Returns: float: The annual interest rate. if principal <= 0 or time <= 0: raise ValueError(\\"Principal and time must be greater than zero\\") return (interest / (principal * time)) * 100"},{"question":"Write a python function to replace all occurrences of a character in a string with another character. For example, if the input string is \\"hello world\\" and you want to replace all occurrences of 'o' with '0', the output should be \\"hell0 w0rld\\". Please provide the solution using Python.","solution":"def replace_characters(input_string, char_to_replace, replacement_char): Replaces all occurrences of \`char_to_replace\` in \`input_string\` with \`replacement_char\`. Args: input_string (str): The string in which replacements will be made. char_to_replace (str): The character to be replaced. replacement_char (str): The character to replace with. Returns: str: The new string with all occurrences of \`char_to_replace\` replaced by \`replacement_char\`. return input_string.replace(char_to_replace, replacement_char)"},{"question":"Write a python function to delete duplicates from a list while preserving the order of the original list. You should also handle large lists efficiently.","solution":"def delete_duplicates(lst): Remove duplicates from the list while preserving order. seen = set() unique_lst = [] for item in lst: if item not in seen: seen.add(item) unique_lst.append(item) return unique_lst"},{"question":"Write a python function to move all zeroes to the end of a given list without changing the relative order of non-zero elements.","solution":"def move_zeros_to_end(lst): Moves all zeros in the list to the end without changing the order of non-zero elements. :param lst: List of integers :return: The same list with zeros moved to the end non_zero_elements = [x for x in lst if x != 0] zero_count = lst.count(0) return non_zero_elements + [0] * zero_count"},{"question":"Write a python function to find the maximum sum of elements in any contiguous subarray of a given array. This is known as the maximum subarray problem. You need to return the maximum sum found. The function should handle both positive and negative numbers.","solution":"def max_subarray_sum(nums): Finds the maximum sum of elements in any contiguous subarray. Parameters: nums (list of int): List of integers. Returns: int: Maximum sum of elements in any contiguous subarray. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to reverse a sequence of words. The sequence can contain any kind of characters, but you should ignore spaces, punctuation, and use only the word characters (letters, digits). Also, ensure the function handles an empty string case.","solution":"import re def reverse_words_sequence(input_string): Reverse the sequence of words in the input string, ignoring spaces and punctuation. Parameters: input_string (str): The input string containing any kind of characters. Returns: str: A string with the words reversed, composed of letters and digits only. # Extract only word characters (letters and digits) words = re.findall(r'bw+b', input_string) # Reverse the list of words reversed_words = words[::-1] # Join them into a single string reversed_string = ' '.join(reversed_words) return reversed_string"},{"question":"Write a python function to check if a given list of combinations is unique, meaning no two combinations are the same. Here is my string \`s = 'racecar'\` and need to find if all combinations of a length of 3 are unique.","solution":"def are_combinations_unique(s, k): Checks if all combinations of length k in the string s are unique. :param s: The input string. :param k: The length of the combinations. :return: True if all combinations are unique, False otherwise. combinations = set() for i in range(len(s) - k + 1): combo = s[i:i+k] if combo in combinations: return False combinations.add(combo) return True # Example usage s = 'racecar' k = 3 print(are_combinations_unique(s, k)) # Output: True"},{"question":"Write a python function to reverse a string. In your solution, avoid using slicing or built-in functions to reverse a string. Instead, use recursion.","solution":"def reverse_string(s): Returns the reversed string using recursion. if len(s) == 0: return s else: return reverse_string(s[1:]) + s[0]"},{"question":"Write a python function to convert a given string to a list of words, removing any punctuation.","solution":"import string def string_to_word_list(s): Converts a given string s to a list of words, removing any punctuation. translator = str.maketrans('', '', string.punctuation) cleaned_string = s.translate(translator) words = cleaned_string.split() return words"},{"question":"Write a python function to print odd numbers from a list using list comprehension.","solution":"def print_odd_numbers(lst): Returns a list of odd numbers from the given list. return [num for num in lst if num % 2 != 0]"},{"question":"Write a python function to find the maximum and minimum values in a list of integers using a single traversal of the list.","solution":"def find_max_min(lst): Returns the maximum and minimum values in a list of integers using a single traversal of the list. if not lst: raise ValueError(\\"List is empty\\") max_val = min_val = lst[0] for num in lst[1:]: if num > max_val: max_val = num if num < min_val: min_val = num return max_val, min_val"},{"question":"Write a python function to convert a string to an integer. This function should handle both positive and negative numbers.","solution":"def string_to_integer(s): Converts a string to an integer handling both positive and negative numbers. Parameters: s (str): The string representing the integer to be converted. Returns: int: The integer representation of the string. if not s: raise ValueError(\\"Input string cannot be empty\\") try: return int(s) except ValueError: raise ValueError(\\"Input string is not a valid integer\\")"},{"question":"Write a python function to calculate the sum of all numbers in a list. Can you provide a brief explanation of how the function works?","solution":"def sum_of_list(numbers): Calculates the sum of all numbers in a list. Parameters: numbers (list): A list of numbers. Returns: int or float: The sum of all numbers in the list. total = 0 for number in numbers: total += number return total"},{"question":"Write a python function to find all unique triples in an array which gives the sum of zero.","solution":"def three_sum(nums): Given an array nums of n integers, find all unique triplets in the array which gives the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total < 0: left += 1 elif total > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Write a python function to create a list of Fibonacci sequence and return the nth number in the sequence.","solution":"def fibonacci_nth(n): Returns the nth number in the Fibonacci sequence. Parameters: n (int): The index (0-based) of the Fibonacci sequence number to be returned. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"n must be a non-negative integer\\") if n == 0: return 0 elif n == 1: return 1 fib_seq = [0, 1] for i in range(2, n + 1): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq[n]"},{"question":"Write a python function to check if a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots. Each number can be represented by up to three digits and cannot have leading zeros except for the number 0.","solution":"def is_ipv4_address(ip): Check if a given string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots. No leading zeros except for the number 0 are allowed. :param ip: A string to check for IPv4 validity. :return: True if the string is a valid IPv4 address, False otherwise. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if part != '0' and part.startswith('0'): return False if not 0 <= int(part) <= 255: return False return True"},{"question":"Write a python function to find the maximum sum of an increasing subsequence in an array. An increasing subsequence is defined as a sequence of numbers where each next number in the sequence is greater than the current number.","solution":"def max_sum_increasing_subsequence(arr): Finds the maximum sum of an increasing subsequence in an array. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of an increasing subsequence. if not arr: return 0 n = len(arr) # Initialize the dp array where dp[i] will be storing the maximum sum of the # increasing subsequence ending with arr[i] dp = arr[:] # Fill dp[] using the above recursive formula for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] # Pick the maximum value from dp[] return max(dp)"},{"question":"Write a python function to solve the FizzBuzz problem. The FizzBuzz problem is a common interview question where you have to print numbers from 1 to a given number \`n\`. However, for multiples of 3, print \\"Fizz\\" instead of the number, and for multiples of 5, print \\"Buzz\\". For numbers which are multiples of both 3 and 5, print \\"FizzBuzz\\".","solution":"def fizz_buzz(n): Returns a list of strings representing the FizzBuzz sequence from 1 to n. For multiples of 3, the string \\"Fizz\\" is added. For multiples of 5, the string \\"Buzz\\" is added. For multiples of both 3 and 5, the string \\"FizzBuzz\\" is added. Otherwise, the string of the number itself is added. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a python function to find the frequency of each word in a string, ignoring case sensitivity and punctuation.","solution":"import string def word_frequency(s): Returns a dictionary with the frequency of each word in the string s, ignoring case and punctuation. # Remove punctuation and convert to lowercase translator = str.maketrans('', '', string.punctuation) cleaned_s = s.translate(translator).lower() words = cleaned_s.split() frequency_dict = {} for word in words: if word in frequency_dict: frequency_dict[word] += 1 else: frequency_dict[word] = 1 return frequency_dict"},{"question":"Write a python function to detect the cycle in a linked list using Floyd's cycle detection algorithm (tortoise and hare).","solution":"class ListNode: def __init__(self, value: int = 0, next=None): self.value = value self.next = next def has_cycle(head: ListNode) -> bool: Detects if there is a cycle in a linked list using Floyd's Cycle Detection Algorithm (Tortoise and Hare). if not head or not head.next: return False slow = head fast = head.next while fast and fast.next: if slow == fast: return True slow = slow.next fast = fast.next.next return False"},{"question":"Write a python function to print a right-angled triangle of stars (*), with a specified number of rows. The function should take one integer parameter that represents the number of rows in the triangle.","solution":"def print_triangle(rows): Prints a right-angled triangle of stars (*) with the specified number of rows. Parameters: rows (int): The number of rows of the triangle. for i in range(1, rows + 1): print('*' * i)"},{"question":"Write a python function to remove all white spaces from a string and then reverse the resulting string.","solution":"def remove_spaces_and_reverse(s): Removes all white spaces from the given string and then reverses the resulting string. no_spaces = s.replace(\\" \\", \\"\\") return no_spaces[::-1]"},{"question":"Write a python function to find the sum of all unique elements in a list. A unique element is one that appears only once in the list. The function should return the sum of all such elements.","solution":"def sum_of_unique_elements(lst): Returns the sum of all unique elements in the list. A unique element is one that appears only once in the list. from collections import Counter element_counts = Counter(lst) unique_sum = sum([x for x in element_counts if element_counts[x] == 1]) return unique_sum"},{"question":"Write a python function to find a missing number in an array. The array contains numbers from 1 to n with one number missing. The function should return the missing number.","solution":"def find_missing_number(arr, n): Finds the missing number in an array of numbers from 1 to n with one number missing. :param arr: List of integers from 1 to n with one number missing :param n: The number n indicating the range of numbers from 1 to n :return: The missing number expected_sum = n * (n + 1) // 2 actual_sum = sum(arr) return expected_sum - actual_sum"},{"question":"Write a python function to generate all the possible combinations of a given list of distinct numbers.","solution":"import itertools def generate_combinations(numbers): Returns all the possible combinations of a given list of distinct numbers. combinations = [] for r in range(1, len(numbers) + 1): combinations.extend(itertools.combinations(numbers, r)) return combinations"},{"question":"Write a python function to find the maximum area of a container that can be formed by two lines drawn from an array of integers. The function should return the area of the container, not the indices of the lines.","solution":"def max_area(height): Returns the maximum area of a container formed by lines drawn from the array of integers. :param height: List of integers representing the height of lines. :return: Integer representing the maximum area. left, right = 0, len(height) - 1 max_area = 0 while left < right: width = right - left current_height = min(height[left], height[right]) current_area = width * current_height max_area = max(max_area, current_area) # Move the smaller height to try and find a taller line for larger area if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"Write a python function to reverse a list in-place. In other words, the function should not create a new list but rather reverse the elements of the list using only list operations. You should also ensure that the function maintains the original type of the elements inside the list.","solution":"def reverse_in_place(lst): Reverses a list in place using list operations. Parameters: lst (list): The list to be reversed Returns: None: The list is reversed in place, hence no return value. left = 0 right = len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Write a python function to find the sum of all numbers in a list. If the list is empty, return 0. The function should handle both integers and floats.","solution":"def sum_of_list(numbers): Returns the sum of all numbers in a list. If the list is empty, returns 0. The function handles both integers and floats. return sum(numbers)"},{"question":"Write a python function to print all nodes at a given distance d from a root node. The target node is specified by its value, not by a pointer initially. You need to traverse from the root until you find the node, and then print all nodes at distance d from that node.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def find_nodes_at_distance(root, target_value, distance): Prints all nodes at a given distance d from the target node. def find_target(root, target): if not root: return None if root.value == target: return root left = find_target(root.left, target) if left: return left right = find_target(root.right, target) return right def nodes_at_distance_k(root, k): if not root: return if k == 0: result.append(root.value) return nodes_at_distance_k(root.left, k - 1) nodes_at_distance_k(root.right, k - 1) target_node = find_target(root, target_value) if not target_node: return result = [] nodes_at_distance_k(target_node, distance) return result"},{"question":"Write a python function to find the third highest number in a list. If the list does not have a third highest number, return None.","solution":"def third_highest_number(nums): Finds the third highest number in a list. If the list does not have a third highest number, return None. if len(nums) < 3: return None unique_nums = list(set(nums)) if len(unique_nums) < 3: return None unique_nums.sort(reverse=True) return unique_nums[2]"},{"question":"Write a python function to find the frequency of occurrence of a given word in a sentence. The function should take two parameters: the sentence and the word to search for. It should return the frequency of the word in the sentence.","solution":"def word_frequency(sentence, word): Returns the frequency of occurrence of a given word in a sentence. :param sentence: The sentence in which to count the word. :param word: The word whose frequency is to be counted. :return: Integer count of the word's occurrence in the sentence. words = sentence.split() return words.count(word)"},{"question":"Write a python function to remove a given element from a list. The function should take in a list and an element to remove as parameters. If the element exists in the list, it should be removed and then return the updated list. If the element does not exist, the function should return the original list unchanged. Return None if the input list is None.","solution":"def remove_element(lst, element): Removes the given element from the list if it exists. Parameters: lst (list): The list to remove the element from. element: The element to remove from the list. Returns: list: The updated list with the element removed. If the element does not exist in the list, returns the original list. If the input list is None, returns None. if lst is None: return None try: lst.remove(element) except ValueError: pass return lst"},{"question":"Write a python function to print all the numbers between 1 and n that are divisible by 2 but not by 3.","solution":"def find_numbers(n): Returns a list of numbers between 1 and n that are divisible by 2 but not by 3. result = [] for i in range(1, n + 1): if i % 2 == 0 and i % 3 != 0: result.append(i) return result"},{"question":"Write a python function to reverse a linked list iteratively. Your function should take a single parameter, which is the head of the linked list.","solution":"class ListNode: Definition for singly-linked list. def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses a singly linked list iteratively. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a python function to check if a given number is a Kaprekar number. A Kaprekar number is a positive integer n whose square can be split into two parts where the sum of both parts equals the original number n. Is there an easy way to do this in Python?","solution":"def is_kaprekar(n): Checks if the given number n is a Kaprekar number. if n < 1: return False squared = n ** 2 str_squared = str(squared) midpoint = len(str_squared) // 2 left_part = str_squared[:midpoint] or '0' right_part = str_squared[midpoint:] left_number = int(left_part) right_number = int(right_part) return n == left_number + right_number"},{"question":"Write a python function to find the first repeated element in a list. Your function should take a list of integers as input and return the first integer that appears more than once. If there is no repeated element, the function should return -1.","solution":"def first_repeated_element(nums): Finds the first repeated element in a list of integers. Args: nums (list of int): The list of integers to search through. Returns: int: The first repeated integer, or -1 if no repeated element is found. seen = set() for num in nums: if num in seen: return num seen.add(num) return -1"},{"question":"Write a python function to find the factorial of a given positive integer. The function should use recursion for calculating the factorial. The factorial of a number ( n ) is the product of all positive integers less than or equal to ( n ), denoted as ( n! ). By definition, ( 0! ) is ( 1 ).","solution":"def factorial(n): Returns the factorial of a given positive integer n using recursion. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to reverse a string and remove all non-alphanumeric characters.","solution":"def reverse_and_clean_string(s): Reverses the input string and removes all non-alphanumeric characters. # Remove non-alphanumeric characters clean_s = ''.join(char for char in s if char.isalnum()) # Reverse the cleaned string reversed_s = clean_s[::-1] return reversed_s"},{"question":"Write a python function to compute the nth Fibonacci number using dynamic programming approach. You should use a bottom-up method, storing the computed values in an array to solve each subproblem just once.","solution":"def fibonacci(n): Returns the nth Fibonacci number using a bottom-up dynamic programming approach. if n <= 0: return 0 elif n == 1: return 1 # Initialize the base cases. fib = [0] * (n + 1) fib[1] = 1 # Build the Fibonacci sequence from the bottom up. for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to remove duplicates from a list of numbers. Please provide an explanation for each step in your solution.","solution":"def remove_duplicates(nums): Remove duplicates from a list of numbers. Args: nums: List of numbers which may contain duplicates. Returns: List of numbers with duplicates removed. # Use a set to remove duplicates since sets do not allow duplicate values. unique_nums = list(set(nums)) # Return the resulting list without duplicates return unique_nums"},{"question":"Write a python function to remove duplicate characters from a string, preserving the order of their first occurrence. For example, given the string \\"programming\\", the function should return \\"progamin\\".","solution":"def remove_duplicates(input_string): Removes duplicate characters from the input string, preserving the order of their first occurrence. :param input_string: The string from which to remove duplicate characters. :return: A new string with duplicate characters removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return ''.join(result)"},{"question":"Write a python function to implement a selection sort algorithm. Implement the function that takes a list of integers as input and returns the sorted list using the selection sort technique.","solution":"def selection_sort(arr): Sorts a list of integers using the selection sort algorithm. :param arr: List of integers :return: Sorted list of integers n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"Write a python function to rank words from a given string. The ranking should be based on the frequency of occurrence of each word. If two words have the same frequency, they should be ranked based on their first occurrence in the string.","solution":"def rank_words(text): Rank words from the given string based on frequency. If two words have the same frequency, rank them based on their first occurrence in the string. Args: text (str): The input string to rank words from. Returns: List[str]: A list of words ranked by frequency and first occurrence. from collections import defaultdict word_count = defaultdict(int) first_occurrence = {} words = text.split() for index, word in enumerate(words): word_count[word] += 1 if word not in first_occurrence: first_occurrence[word] = index # Sorting by frequency (descending) and first_occurrence (ascending) ranked_words = sorted(word_count.keys(), key=lambda x: (-word_count[x], first_occurrence[x])) return ranked_words"},{"question":"Write a python function to generate Fibonacci series up to a given number of terms. The function should take an integer as input and return a list of integers representing the Fibonacci series up to that number of terms.","solution":"def fibonacci(n): Generates Fibonacci series up to n terms. :param n: Number of terms in the Fibonacci series. :type n: int :return: List of integers representing the Fibonacci series. :rtype: list if n <= 0: return [] elif n == 1: return [0] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series"},{"question":"Write a python function to find the nth minimum number in an array. If the nth minimum number does not exist, return -1.","solution":"def nth_minimum(arr, n): Returns the nth minimum number in the array. If the nth minimum does not exist, returns -1. :param arr: List of integers :param n: integer representing the nth minimum number to find :return: nth minimum number or -1 if it doesn't exist if n > len(arr) or n <= 0: return -1 # Remove duplicates and sort the array unique_sorted_arr = sorted(set(arr)) # Check if the nth minimum number exists if n > len(unique_sorted_arr): return -1 return unique_sorted_arr[n - 1]"},{"question":"Write a python function to calculate the sum of all numbers from 1 to n using the formula for the sum of an arithmetic series: n * (n + 1) / 2.","solution":"def sum_of_numbers(n): Calculate the sum of all numbers from 1 to n using the formula for the sum of an arithmetic series: n * (n + 1) / 2. Parameters: n (int): The upper limit of the range (inclusive). Returns: int: The sum of all numbers from 1 to n. return n * (n + 1) // 2"},{"question":"Write a python function to find the product of all elements in a list. The function should be named \`product_list\`. It should take a list of numbers as its parameter and return the product of all numbers in the list. The function should handle an empty list by returning 1, as the product of an empty list can be considered as 1 (neutral element of multiplication).","solution":"def product_list(numbers): Returns the product of all elements in a list. Parameters: numbers (list): A list of numbers Returns: int/float: The product of all numbers in the list. Returns 1 for an empty list. product = 1 for number in numbers: product *= number return product"},{"question":"Write a python function to reverse a doubly linked list. The function should take the head of the doubly linked list as an input and return the new head after reversing. The doubly linked list is defined with class Node, where each node has attributes 'value', 'left', and 'right'.","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def reverse_doubly_linked_list(head): if not head: return None current = head new_head = None while current: new_head = current # Swap the left and right pointers current.left, current.right = current.right, current.left # Move on to next node in the original list, which is the previous node in the new list current = current.left return new_head"},{"question":"Write a python function to reverse a string but ignore case sensitivity.","solution":"def reverse_string_ignore_case(s): Returns the reversed version of the input string s, but ignores case sensitivity. return s[::-1]"},{"question":"Write a python function to find the maximum sum of a subarray of a given non-empty array of integers. You can use Kadane's algorithm for this task. Can you provide the code?","solution":"def max_subarray_sum(nums): Returns the maximum sum of a subarray within the given list of integers. Implements Kadane's algorithm. if not nums: raise ValueError(\\"The input array must be non-empty\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find all prime numbers between two given numbers. In this function, the function input will always be two positive non-negative numbers. The function output will be a list of all prime numbers between the given range.","solution":"def is_prime(n): Check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_primes_between(a, b): Finds all prime numbers between two given non-negative numbers a and b (inclusive). Returns a list of prime numbers in the range [a, b]. return [num for num in range(a, b + 1) if is_prime(num)]"},{"question":"Write a python function to compute the sum of all odd numbers in a list. The function should use recursion.","solution":"def sum_of_odd_numbers(lst): Returns the sum of all odd numbers in the list using recursion. if not lst: return 0 first, rest = lst[0], lst[1:] if first % 2 != 0: return first + sum_of_odd_numbers(rest) else: return sum_of_odd_numbers(rest)"},{"question":"Write a python function to search for a substring within a given string. If the substring is found, return the starting index; otherwise, return -1.","solution":"def find_substring(main_string, substring): Searches for a substring within a given string. If found, returns the starting index of the substring. If not found, returns -1. return main_string.find(substring)"},{"question":"Write a python function to perform XOR operation on two integers and return the result.","solution":"def xor(a, b): Returns the result of XOR operation between a and b. return a ^ b"},{"question":"Write a python function to split a given list into two separate lists, maintaining the original order of elements, but placing all elements divisible by 3 into one list and all other elements into another list.","solution":"def split_list(lst): Splits the given list into two separate lists: - One containing elements divisible by 3 - One containing the remaining elements Parameters: lst (list): The list to be split Returns: tuple: A tuple containing two lists as described above div_by_3 = [x for x in lst if x % 3 == 0] not_div_by_3 = [x for x in lst if x % 3 != 0] return div_by_3, not_div_by_3"},{"question":"Write a python function to find the maximum sum of a subarray in a given array using Kadane's algorithm. Explain the algorithm and its efficiency.","solution":"def max_subarray_sum(nums): Finds the maximum sum of a subarray in the given array using Kadane's algorithm. Args: nums (List[int]): A list of integers. Returns: int: The maximum sum of a subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global"},{"question":"Write a python function to convert a string to a list of integers","solution":"def string_to_int_list(s): Takes a string representing integers separated by spaces and returns a list of integers. return [int(num) for num in s.split()]"},{"question":"Write a python function to find the sum of all the numbers in a given list using recursion. The function should take a list of integers as input and return the sum of all elements in the list.","solution":"def sum_recursive(numbers): Returns the sum of all elements in the list of numbers using recursion. if not numbers: return 0 return numbers[0] + sum_recursive(numbers[1:])"},{"question":"Write a python function to clone/copy a linked list. A linked list is represented as a series of nodes, where each node contains data and a link to the next node. To clone a linked list, you need to create a new linked list with the same data and structure as the original linked list.","solution":"class Node: A class representing a node in a linked list. def __init__(self, data): self.data = data self.next = None def clone_linked_list(head): Clones a linked list starting from the head node. :param head: The head node of the linked list to be cloned. :return: The head node of the cloned linked list. if not head: return None # Create a map to hold the old nodes as keys and new nodes as values old_to_new = {} # First pass to create new nodes for each old node current = head while current: old_to_new[current] = Node(current.data) current = current.next # Second pass to set next pointers on new nodes current = head while current: if current.next: old_to_new[current].next = old_to_new[current.next] current = current.next return old_to_new[head]"},{"question":"Write a python function to calculate the factorial of a given number. The function should handle both positive integers and non-negative floats. However, if the input is a negative integer, it should raise a \`ValueError\` with the message \\"Factorial is not defined for negative numbers\\".","solution":"import math def factorial(n): Returns the factorial of a given number if it's non-negative. If the number is negative, raises a ValueError. Parameters: n (int, float): The number to calculate the factorial for. Returns: int: The factorial of the number. Raises: ValueError: If the number is negative. if isinstance(n, float): if n.is_integer(): n = int(n) else: raise ValueError(\\"Factorial is not defined for non-integer numbers\\") if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") return math.factorial(n)"},{"question":"Write a python function to check if a given URL is valid or not. You may use the urllib library in python which has a function urlretrieve. You can make use of exception handling when verifying a URL.","solution":"import urllib.request def is_url_valid(url): Checks if the given URL is valid by attempting to retrieve it. Returns True if the URL is valid, otherwise returns False. try: with urllib.request.urlopen(url) as response: return response.status == 200 except Exception: return False"},{"question":"Write a python function to calculate and print out the frequency of each character in a given string, and sort them in ascending order based on their frequencies.","solution":"def character_frequency(s): Takes a string s as input and returns a list of tuples with each character and its frequency, sorted in ascending order by frequency. from collections import Counter # Calculate the frequency of each character freq = Counter(s) # Sort the characters based on their frequency sorted_freq = sorted(freq.items(), key=lambda item: item[1]) for char, count in sorted_freq: print(f\\"{char}: {count}\\") # Returning the result for testing purposes return sorted_freq"},{"question":"Write a python function to find the first missing positive integer in an unsorted list of integers. For example, if the list is [3, 4, -1, 1], the first missing positive integer is 2.","solution":"def first_missing_positive(nums): Find the first missing positive integer in an unsorted list of integers. Args: nums (List[int]): List of integers. Returns: int: The first missing positive integer. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a python function to find the number of rows and columns in a given 2D array (matrix) and return them as a tuple. If the 2D array is not rectangular, your function should find the smallest rectangle that can contain all elements and return that as the dimensions of the matrix.","solution":"def find_matrix_dimensions(matrix): Returns the dimensions of the given 2D array (matrix) as a tuple (rows, columns). If the matrix is not rectangular, finds the smallest rectangle that can contain all elements. rows = len(matrix) if rows == 0: return (0, 0) max_columns = max(len(row) for row in matrix) return (rows, max_columns)"},{"question":"Write a python function to validate a phone number in the format (xxx) xxx-xxxx. The function should return True if the phone number is valid, and False otherwise.","solution":"import re def validate_phone_number(phone_number): Validates if the phone number is in the format (xxx) xxx-xxxx. Args: phone_number (str): The phone number to validate. Returns: bool: True if the phone number is valid, False otherwise. pattern = re.compile(r\\"^(d{3}) d{3}-d{4}\\") return bool(pattern.match(phone_number))"},{"question":"Write a python function to calculate the total distance traveled by a cyclist given the number of segments and the distances of each segment.","solution":"def total_distance(segments): Returns the total distance traveled by a cyclist given the distances of each segment. :param segments: A list of distances of each segment :return: Total distance traveled return sum(segments)"},{"question":"Write a python function to find the Nth digit of a given number S, where S is the concatenation of all natural numbers up to a certain limit. For example, if the limit is 10, S will be \\"12345678910\\".","solution":"def find_nth_digit(limit, n): Returns the Nth digit of the concatenation of all natural numbers from 1 up to the limit. Parameters: limit (int): The limit up to which the natural numbers are concatenated. n (int): The position of the digit to find in the concatenated string. Returns: str: The Nth digit as a string. concatenated_string = ''.join(str(i) for i in range(1, limit + 1)) if n < 1 or n > len(concatenated_string): return None # N is out of range return concatenated_string[n - 1]"},{"question":"Write a python function to calculate the factorial of a given number using both iterative and recursive methods. Additionally, demonstrate how to optimize the 'iterative' method for large numbers using the modulus operation.","solution":"def factorial_iterative(n, mod=None): Returns the factorial of n using iterative method. Optionally uses modulus operation for large numbers. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i if mod is not None: result %= mod return result def factorial_recursive(n): Returns the factorial of n using recursive method. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0 or n == 1: return 1 else: return n * factorial_recursive(n - 1)"},{"question":"Write a python function to determine if a given string is a palindrome, a permutation of a palindrome, or neither.","solution":"from collections import Counter def is_palindrome(s): Check if the given string is a palindrome. s = s.replace(\\" \\", \\"\\").lower() return s == s[::-1] def can_form_palindrome(s): Check if any permutation of the given string can form a palindrome. s = s.replace(\\" \\", \\"\\").lower() count = Counter(s) odd_counts = sum(1 for count in count.values() if count % 2 != 0) return odd_counts <= 1 def determine_string_type(s): Determine if the string is a palindrome, a permutation of a palindrome, or neither. if is_palindrome(s): return \\"palindrome\\" elif can_form_palindrome(s): return \\"permutation of a palindrome\\" else: return \\"neither\\""},{"question":"Write a python function to solve the N-Queens problem. The N-Queens problem is the problem of placing N queens on an N×N chessboard such that no two queens threaten each other. Two queens threaten each other if they are in the same row, column, or diagonal. The function should return all possible distinct solutions to the N-Queens puzzle, where each solution is represented as a list of strings, where each string represents a row of the board, with 'Q' denoting a queen and '.' denoting an empty space.","solution":"def solve_n_queens(N): Solves the N-Queens problem and returns all possible distinct solutions. Parameters: N (int): The size of the chessboard (N x N) and the number of queens. Returns: List[List[str]]: A list of solutions, where each solution is represented as a list of strings. solutions = [] board = [[\\".\\" for _ in range(N)] for _ in range(N)] def is_safe(board, row, col): # Check this row on the left side for i in range(col): if board[row][i] == 'Q': return False # Check upper diagonal on the left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 'Q': return False # Check lower diagonal on the left side for i, j in zip(range(row, N), range(col, -1, -1)): if board[i][j] == 'Q': return False return True def solve(board, col): if col >= N: solutions.append([\\"\\".join(row) for row in board]) return True res = False for i in range(N): if is_safe(board, i, col): board[i][col] = 'Q' res = solve(board, col + 1) or res board[i][col] = '.' return res solve(board, 0) return solutions"},{"question":"Write a python function to print the numbers from 10 to 20, but skip numbers that are divisible by 5.","solution":"def print_numbers(): Prints numbers from 10 to 20, but skips numbers that are divisible by 5. for number in range(10, 21): if number % 5 == 0: continue print(number)"},{"question":"Write a python function to find the max profit from buying and selling a stock. The function should take a list of stock prices where prices[i] is the price of the given stock on the ith day. You can only buy and sell once, and you must buy before you sell. For example, if the input list is prices = [7, 1, 5, 3, 6, 4], then the maximum profit is 5 because you buy on day 2 (price = 1) and sell on day 5 (price = 6), which gives a profit of 6-1 = 5.","solution":"def max_profit(prices): Function to find the maximum profit from buying and selling a stock. The function takes a list of stock prices where prices[i] is the price of the given stock on the ith day. You can only buy and sell once, and you must buy before you sell. Args: prices (list): List of stock prices. Returns: int: The maximum profit that can be achieved. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a python function to calculate the factorial of a number and then use this function in a loop to calculate the factorial of numbers from 1 to 5.","solution":"def factorial(n): Returns the factorial of a given number n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result def calculate_factorials_up_to_5(): Calculates the factorial of numbers from 1 to 5 and returns a list of the results. factorials = [] for i in range(1, 6): factorials.append(factorial(i)) return factorials"},{"question":"Write a python function to find the shortest distance between any two points in a list of points. Each point is represented as a tuple (x, y). The function should return the minimum distance. If there are no points or only one point, the function should return \`None\`.","solution":"import math def shortest_distance(points): Finds the shortest distance between any two points in the list. Each point is represented as a tuple (x, y). Args: points (list of tuples): A list of points where each point is a tuple (x, y) Returns: float: The minimum distance between any two points or None if there are less than 2 points. if len(points) < 2: return None def distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) min_dist = float('inf') n = len(points) for i in range(n): for j in range(i + 1, n): dist = distance(points[i], points[j]) if dist < min_dist: min_dist = dist return min_dist"},{"question":"Write a python function to convert a string to a list of integer values.","solution":"def string_to_int_list(s): Converts a string of comma-separated numbers into a list of integers. Args: s (str): The input string with comma-separated numbers. Returns: list: A list of integers. return [int(item) for item in s.split(',')] if s else []"},{"question":"Write a python function to print \\"Hello world\\" 10 times. How can this be done using a loop?","solution":"def print_hello_world_10_times(): Prints \\"Hello world\\" 10 times using a loop. for _ in range(10): print(\\"Hello world\\")"},{"question":"Write a python function to partition a linked list around a value x such that all nodes less than x come before all nodes greater than or equal to x.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition(head, x): Partitions the linked list around value x such that all nodes less than x come before all nodes greater than or equal to x. :param head: ListNode -> the head of the linked list :param x: int -> the pivot value :return: ListNode -> the head of the modified linked list if head is None: return None less_head = ListNode(0) # Dummy head for less than x list greater_head = ListNode(0) # Dummy head for greater or equal to x list less = less_head greater = greater_head while head is not None: if head.val < x: less.next = head less = less.next else: greater.next = head greater = greater.next head = head.next # Connect less than x list to the greater or equal to x list greater.next = None # Important to avoid cycle in linked list less.next = greater_head.next return less_head.next"},{"question":"Write a python function to print the Fibonacci series for a given number","solution":"def fibonacci_series(n): Returns the Fibonacci series up to the nth number. if n <= 0: return [] if n == 1: return [0] series = [0, 1] while len(series) < n: series.append(series[-1] + series[-2]) return series # Example usage: # print(fibonacci_series(10)) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"question":"Write a python function to find the maximum product of pairs in a list of numbers.","solution":"def max_product_of_pairs(numbers): Returns the maximum product of pairs in a list of numbers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements to form a pair\\") max1 = max2 = float('-inf') min1 = min2 = float('inf') for num in numbers: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"Write a python function to parse a given HTML string and extract all the \`<img>\` tags along with their \`src\` attributes.","solution":"from bs4 import BeautifulSoup def extract_img_tags(html_string): Parses a given HTML string and extracts all <img> tags with their src attributes. Args: html_string (str): The input HTML string to parse. Returns: List[Tuple[str, str]]: A list of tuples where each tuple contains the full <img> tag and the src attribute value. soup = BeautifulSoup(html_string, 'html.parser') img_tags = soup.find_all('img') result = [(str(tag), tag.get('src')) for tag in img_tags] return result"},{"question":"Write a python function to print the multiplication table of any given number using a for loop.","solution":"def multiplication_table(number): Prints the multiplication table of the given number from 1 to 10. Args: number (int): The number for which to print the multiplication table. for i in range(1, 11): print(f\\"{number} x {i} = {number * i}\\")"},{"question":"Write a python function to find the minimum element in a sorted and rotated array (an array that is sorted in ascending order, then rotated at some pivot point). The array does not contain duplicate elements.","solution":"def find_min_in_rotated_array(arr): Finds the minimum element in a sorted and rotated array. :param arr: List[int] - List of integers that has been sorted and then rotated :return: int - Minimum element in the array low, high = 0, len(arr) - 1 while low < high: mid = (low + high) // 2 if arr[mid] > arr[high]: # The minimum is in the right part low = mid + 1 else: # The minimum is in the left part or at mid high = mid return arr[low]"},{"question":"Write a python function to find the minimum value in a list of integers. Ensure the function handles an empty list by returning None, and include comprehensive tests to validate your function.","solution":"def find_minimum(lst): Returns the minimum value in a list of integers. If the list is empty, returns None. if not lst: return None return min(lst)"},{"question":"Write a python function to split a linked list into k consecutive sublists.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def split_list_to_parts(head, k): # Start by counting the length of the list current = head length = 0 while current: length += 1 current = current.next # Calculate the size of each part part_size = length // k remainder = length % k current = head result = [] for i in range(k): part_head = current prev = None for j in range(part_size + (i < remainder)): if current: prev = current current = current.next if prev: prev.next = None result.append(part_head) return result"},{"question":"Write a python function to find all the duplicates in an integer array using a hash map.","solution":"def find_duplicates(arr): Returns a list of all duplicates in the given integer array using a hash map. num_count = {} duplicates = [] for num in arr: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 for num, count in num_count.items(): if count > 1: duplicates.append(num) return duplicates"},{"question":"Write a python function to detect a loop in a linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def has_cycle(head): Returns True if there is a cycle in the linked list. slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a python function to get the odd numbers in a list. You should return a list of odd numbers from the input list.","solution":"def get_odd_numbers(lst): Returns a list of odd numbers from the input list. Parameters: lst (list): A list of integers. Returns: list: A list containing only the odd numbers from the input list. return [num for num in lst if num % 2 != 0]"},{"question":"Write a python function to check if the number is even or odd and return a message indicating the same.","solution":"def check_even_or_odd(number): Returns a message indicating whether the number is even or odd. if number % 2 == 0: return \\"The number is even\\" else: return \\"The number is odd\\""},{"question":"Write a python function to remove duplicates and sort a list of numbers.","solution":"def remove_duplicates_and_sort(nums): Removes duplicates from the list and returns the sorted list. Parameters: nums (list): The input list of numbers. Returns: list: A sorted list with duplicates removed. return sorted(set(nums))"},{"question":"Write a python function to generate a list of prime numbers within a given range using the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(start, end): Generates a list of prime numbers within the given range [start, end] using the Sieve of Eratosthenes algorithm. if start > end: return [] # Initialize a boolean array indicating the primality of each number sieve = [True] * (end + 1) p = 2 while (p * p <= end): if sieve[p]: for i in range(p * p, end + 1, p): sieve[i] = False p += 1 primes = [p for p in range(max(2, start), end + 1) if sieve[p]] return primes"},{"question":"Write a python function to return all prime numbers in a list that are less than or equal to a given number \`num\`.","solution":"def sieve_of_eratosthenes(num): Returns a list of all prime numbers less than or equal to \`num\` using the Sieve of Eratosthenes algorithm. if num < 2: return [] is_prime = [True] * (num + 1) p = 2 while (p * p <= num): if (is_prime[p] == True): for i in range(p * p, num + 1, p): is_prime[i] = False p += 1 primes = [p for p in range(2, num + 1) if is_prime[p]] return primes"},{"question":"Write a python function to find the median of a list of numbers, whether the list length is odd or even.","solution":"def find_median(numbers): Returns the median of a list of numbers. sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n % 2 == 1: # if length of the list is odd return sorted_numbers[n // 2] else: # if length of the list is even mid1 = n // 2 mid2 = mid1 - 1 return (sorted_numbers[mid1] + sorted_numbers[mid2]) / 2"},{"question":"Write a python function to compute the nth Fibonacci number using the golden ratio approximation. The Fibonacci sequence is defined as F(n) = F(n-1) + F(n-2) with the initial conditions F(0) = 0 and F(1) = 1. The golden ratio, φ, is given by (1 + sqrt(5))/2. The nth Fibonacci number can be approximated using the formula F(n) = (φ^n) / sqrt(5). Use this formula to create your function. Note: Since direct computation using the golden ratio approximation may lead to inaccuracies due to floating-point arithmetic, use the rounding function to ensure the result is an integer.","solution":"import math def fibonacci_approx(n): Returns the nth Fibonacci number using the golden ratio approximation. phi = (1 + math.sqrt(5)) / 2 fibonacci_number = round((phi**n) / math.sqrt(5)) return fibonacci_number"},{"question":"Write a python function to find the second smallest number in a list. How can you handle cases where the list might not have a second smallest number? For example, if the list is empty or has only one unique element, the function should return None.","solution":"def second_smallest(numbers): Finds the second smallest number in a list. Returns None if the list does not have a second smallest number (e.g., if the list is empty or has only one unique element). if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a python function to list all files and directories in a given path. The function should recursively list all sub-directories and their contents.","solution":"import os def list_files_and_directories(path): Returns a list of all files and directories in the given path, including subdirectories. :param path: The directory path to start the listing from :return: A list of files and directories with their relative paths from the input path file_list = [] for root, dirs, files in os.walk(path): for name in dirs: file_list.append(os.path.relpath(os.path.join(root, name), path)) for name in files: file_list.append(os.path.relpath(os.path.join(root, name), path)) return file_list"},{"question":"Write a python function to remove all instances of a given substring from a string and return the modified string. The function should take two parameters: the original string and the substring to be removed. If the substring is not found, the function should return the original string unchanged.","solution":"def remove_substring(original_str, sub_str): Removes all instances of sub_str from original_str and returns the modified string. Parameters: original_str (str): The original string from which the substring will be removed. sub_str (str): The substring to remove from the original string. Returns: str: The modified string with all instances of sub_str removed. return original_str.replace(sub_str, '')"},{"question":"Write a python function to return the first non-repeated character in a string. If all characters are repeated, return None. Your function should work for any string but should perform efficiently, ideally with O(n) time complexity.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If all characters are repeated, returns None. character_count = {} for char in s: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 for char in s: if character_count[char] == 1: return char return None"},{"question":"Write a python function to sort an array in ascending order by comparing each element with its adjacent element and swapping if the current element is greater than the adjacent element. This method is called Bubble Sort. Implement the Bubble Sort algorithm and confirm its correctness with examples.","solution":"def bubble_sort(arr): Sorts the input array in ascending order using the Bubble Sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a python function to find the least common multiple (LCM) of two numbers. The function should take two integers as input and return the least common multiple of the two numbers.","solution":"import math def lcm(a, b): Returns the least common multiple of a and b. if a == 0 or b == 0: return 0 return abs(a * b) // math.gcd(a, b)"},{"question":"Write a python function to create and print a right-angled triangle, isosceles triangle, and equilateral triangle using ASCII art.","solution":"def print_right_angled_triangle(height): Print a right-angled triangle of given height using ASCII art. for i in range(1, height + 1): print('*' * i) def print_isosceles_triangle(height): Print an isosceles triangle of given height using ASCII art. for i in range(1, height + 1): print(' ' * (height - i) + '*' * (2 * i - 1)) def print_equilateral_triangle(height): Print an equilateral triangle of given height using ASCII art. for i in range(1, height + 1): print(' ' * (height - i) + '*' * (2 * i - 1))"},{"question":"Write a python function to check if a string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. Here's an example of a palindrome: \\"madam\\". Deserve to get the code with comments explaining each step.","solution":"def is_palindrome(s): Check if the given string s is a palindrome. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Removing all non-alphanumeric characters and converting to lower case cleaned = ''.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a python function to flatten a nested list of integers. The function should take a list that may contain integers or other lists as elements and return a flat list containing only integers.","solution":"def flatten_nested_list(nested_list): Recursively flattens a nested list of integers. result = [] for element in nested_list: if isinstance(element, list): result.extend(flatten_nested_list(element)) else: result.append(element) return result"},{"question":"Write a python function to count the number of words in a given sentence. Words are considered to be separated by spaces. For instance, for the sentence \\"hello world\\", the function should return 2.","solution":"def count_words(sentence): Returns the number of words in a given sentence. Parameters: sentence (str): The input sentence. Returns: int: The number of words in the sentence. if not sentence: return 0 return len(sentence.split())"},{"question":"Write a python function to manage the borrowing and returning of library books. The function should support adding books to the library, borrowing books, and returning books. It should also handle cases where a book is unavailable.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title, count=1): if title in self.books: self.books[title] += count else: self.books[title] = count def borrow_book(self, title): if title in self.books and self.books[title] > 0: self.books[title] -= 1 return f\\"You have borrowed '{title}'\\" else: return f\\"Sorry, '{title}' is currently unavailable\\" def return_book(self, title): if title in self.books: self.books[title] += 1 else: self.books[title] = 1 return f\\"You have returned '{title}'\\""},{"question":"Write a python function to find the sum of all even numbers between 0 and n (inclusive). The function should be well-documented and include examples in its docstring.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers between 0 and n (inclusive). Parameters: n (int): The upper bound of the range (inclusive). Returns: int: The sum of all even numbers between 0 and n. Examples: >>> sum_even_numbers(10) 30 >>> sum_even_numbers(5) 6 >>> sum_even_numbers(0) 0 return sum(i for i in range(0, n+1) if i % 2 == 0)"},{"question":"Write a python function to find the maximum number of words in a single sentence from a list of sentences.","solution":"def max_words_in_sentence(sentences): Returns the maximum number of words in a single sentence from a list of sentences. Parameters: sentences (list): A list of sentences (strings). Returns: int: The maximum number of words in a single sentence. return max(len(sentence.split()) for sentence in sentences)"},{"question":"Write a python function to calculate the sum of the first N elements of the Fibonacci sequence. The Fibonacci sequence is defined by the recurrence relation F(n) = F(n-1) + F(n-2), with F(0) = 0 and F(1) = 1. The input N is always a positive integer. You should implement the function using iteration, not recursion.","solution":"def sum_fibonacci(N): Returns the sum of the first N elements of the Fibonacci sequence. Parameters: N (int): The number of elements of the Fibonacci sequence to sum. Returns: int: The sum of the first N elements of the Fibonacci sequence. if N <= 0: return 0 a, b = 0, 1 total_sum = 0 for _ in range(N): total_sum += a a, b = b, a + b return total_sum"},{"question":"Write a python function to find the longest increasing path in a matrix. A longest increasing path is defined as a path from any cell to other cells such that all cells along the path are in strictly increasing order. The path does not need to be diagonal.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) cache = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(x, y): if cache[x][y] != -1: return cache[x][y] directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] > matrix[x][y]: length = 1 + dfs(nx, ny) max_length = max(max_length, length) cache[x][y] = max_length return max_length longest_path = 0 for i in range(rows): for j in range(cols): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Write a python function to find the sum of two lists. The function should be able to handle lists of integers, floats, and strings. For strings, concatenate them instead of adding them. The function should take two lists as input arguments and return a new list containing the results.","solution":"def sum_of_two_lists(list1, list2): Returns a new list which is the element-wise sum or concatenation (for strings) of list1 and list2. It is assumed that list1 and list2 are of the same length. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") result = [] for a, b in zip(list1, list2): if isinstance(a, str) and isinstance(b, str): result.append(a + b) else: result.append(a + b) return result"},{"question":"Write a python function to count the number of times each element appears in a list and return a dictionary with the counts.","solution":"def count_elements(lst): Returns a dictionary with the count of each element in the list. counts = {} for element in lst: if element in counts: counts[element] += 1 else: counts[element] = 1 return counts"},{"question":"Write a python function to solve the \\"Two Sum\\" problem. Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target. Args: nums (list of int): List of integers. target (int): The target sum. Returns: list of int: Indices of the two numbers. num_map = {} for index, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], index] num_map[num] = index # Example usage: # print(two_sum([2, 7, 11, 15], 9)) # Output: [0, 1]"},{"question":"Write a python function to check if a list contains any repeated elements.","solution":"def has_repeated_elements(lst): Returns True if there are any repeated elements in the list, False otherwise. return len(lst) != len(set(lst))"},{"question":"Write a python function to count the occurrences of a word in a text. The function should be case-insensitive and consider whole words only, avoiding partial words that are part of longer words. For example, searching for \\"the\\" should not count occurrences within words like \\"although\\".","solution":"import re def count_occurrences(text, word): Returns the count of occurrences of the word in the text. The search is case-insensitive and considers whole words only. pattern = r'b' + re.escape(word) + r'b' return len(re.findall(pattern, text, re.IGNORECASE))"},{"question":"Write a python function to sort a list of integers in ascending order using the selection sort algorithm. The function should work for both positive and negative integers. The input list is received via user input. The output should be displayed in ascending order.","solution":"def selection_sort(lst): Sorts a list of integers in ascending order using the selection sort algorithm. Parameters: lst (list): A list of integers Returns: list: A new list with the integers sorted in ascending order n = len(lst) for i in range(n): # Find the minimum element in unsorted array min_idx = i for j in range(i + 1, n): if lst[j] < lst[min_idx]: min_idx = j # Swap the found minimum element with the first element lst[i], lst[min_idx] = lst[min_idx], lst[i] return lst"},{"question":"Write a python function to display all the numbers from 1 to 20 in reverse order using a for loop.","solution":"def display_reverse(): Returns a list of numbers from 1 to 20 in reverse order. result = [] for i in range(20, 0, -1): result.append(i) return result"},{"question":"Write a python function to get the absolute value of a number, but also handle the case where the number is not a valid number (i.e., it cannot be converted to a float).","solution":"def absolute_value(number): Returns the absolute value of the input number. If the input cannot be converted to a float, returns None. try: return abs(float(number)) except (ValueError, TypeError): return None"},{"question":"Write a python function to explain the concept of function overloading in python. Function overloading is a feature in which two or more functions can have the same name but different parameters. Each function performs a different task. Can you provide Python code examples to demonstrate function overloading?","solution":"from functools import singledispatch # Python does not support function overloading natively. # However, we can achieve similar functionality using the \`singledispatch\` decorator for function overloading based on argument types. # Base function to be overloaded @singledispatch def describe(arg): raise NotImplementedError('Unsupported type') # Overloading for integers @describe.register(int) def _(arg: int): return f\\"This is an integer: {arg}\\" # Overloading for strings @describe.register(str) def _(arg: str): return f\\"This is a string: '{arg}'\\" # Overloading for lists @describe.register(list) def _(arg: list): return f\\"This is a list of length {len(arg)}: {arg}\\" # Overloading for dictionaries @describe.register(dict) def _(arg: dict): return f\\"This is a dictionary with {len(arg)} keys: {arg.keys()}\\""},{"question":"Write a python function to find the smallest positive number that is evenly divisible by all the numbers from 1 to n, where n is a positive integer provided by the user. The function should be named \`find_smallest_divisible\` and take one parameter \`n\`.","solution":"from math import gcd from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return a * b // gcd(a, b) def find_smallest_divisible(n): Returns the smallest positive number that is evenly divisible by all the numbers from 1 to n. return reduce(lcm, range(1, n + 1))"},{"question":"Write a python function to find the maximum value in a nested dictionary.","solution":"def find_max_in_nested_dict(nested_dict): Finds the maximum value in a nested dictionary. :param nested_dict: Dictionary which can contain other dictionaries or values :return: The maximum value found in the dictionary max_value = float('-inf') def find_max(d): nonlocal max_value for key, value in d.items(): if isinstance(value, dict): find_max(value) else: if value > max_value: max_value = value find_max(nested_dict) return max_value"},{"question":"Write a python function to find the nth Fibonacci number using recursion with memoization. Fibonacci numbers are a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few numbers in the Fibonacci sequence are 0, 1, 1, 2, 3, 5, 8, 13, ...","solution":"def fibonacci(n, memo={0: 0, 1: 1}): Returns the nth Fibonacci number using recursion with memoization. Parameters: n (int): The position in the Fibonacci sequence. memo (dict): A dictionary to store the computed Fibonacci numbers. Returns: int: The nth Fibonacci number. if n not in memo: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a python function to reverse the characters of each word in a string. For example, \\"hello world\\" should become \\"olleh dlrow\\".","solution":"def reverse_words(sentence): Reverses the characters of each word in a string. :param sentence: A string with words to reverse. :return: A new string with each word's characters reversed. return ' '.join(word[::-1] for word in sentence.split())"},{"question":"Write a python function to return the duplicates present in a list.","solution":"def find_duplicates(arr): Returns a list of duplicates present in the input list. duplicates = [] seen = set() for item in arr: if item in seen and item not in duplicates: duplicates.append(item) else: seen.add(item) return duplicates"},{"question":"Write a python function to evaluate the value of two Roman numerals and return their sum. For example, if the input is \`num1 = \\"MCDLXXI\\"\` and \`num2 = \\"MCMXCIV\\"\`, the function should return the sum of these two Roman numerals, which should be \`2445\`.","solution":"def roman_to_int(s): Converts a Roman numeral to an integer. roman_to_int_map = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_int_map[char] if value < prev_value: total -= value else: total += value prev_value = value return total def sum_roman_numerals(num1, num2): Evaluates the value of two Roman numerals and returns their sum. int_num1 = roman_to_int(num1) int_num2 = roman_to_int(num2) return int_num1 + int_num2"},{"question":"Write a python function to find the shortest word in a list of words.","solution":"def shortest_word(words): Returns the shortest word in a list of words. :param words: List of words :return: Shortest word in the list if not words: return None return min(words, key=len)"},{"question":"Write a python function to find the sum of all positive integers up to and including \`n\`.","solution":"def sum_positive_integers(n): Returns the sum of all positive integers up to and including n. If n is less than or equal to 0, returns 0. if n <= 0: return 0 return n * (n + 1) // 2"},{"question":"Write a python function to find the number of unique days with at least one activity in a given month. The input is a list of tuples, where each tuple represents an activity's start and end date in the format (day, month). The output should be a dictionary where the keys are the unique months and the values are the number of unique days within those months with at least one activity.","solution":"def unique_days_with_activities(activities): Returns a dictionary with the number of unique days with at least one activity for each month. Parameters: activities (list): List of tuples (start_day, end_day, month). Returns: dict: Dictionary where keys are the unique months and values are the number of unique days with at least one activity in that month. from collections import defaultdict days_with_activities = defaultdict(set) for start_day, end_day, month in activities: for day in range(start_day, end_day + 1): days_with_activities[month].add(day) return {month: len(days) for month, days in days_with_activities.items()}"},{"question":"Write a python function to calculate the sum of all nodes in a binary tree. How would you write this function, and what data structure would you use?","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_nodes(root): Returns the sum of all nodes in a binary tree. if root is None: return 0 return root.value + sum_of_nodes(root.left) + sum_of_nodes(root.right)"},{"question":"Write a python function to implement a binary search in an array that returns the index of the target element if it exists, or -1 otherwise. This Binary Search should divide the array into smaller parts and explore only the relevant parts of the array during each iteration. The function should be implemented iteratively, not recursively.","solution":"def binary_search(arr, target): Performs an iterative binary search on a sorted array to find the index of the target element. Parameters: arr (list): A sorted list of elements. target: The element to search for in the array. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 mid_val = arr[mid] if mid_val == target: return mid elif mid_val < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function to check if a given string is a palindrome using a stack (LIFO data structure).","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome using a stack. :param s: The string to check. :return: True if the string is a palindrome, False otherwise. # Removing any non-alphanumeric characters and converting to lower case s = ''.join(char.lower() for char in s if char.isalnum()) # Initialize a stack stack = [] # Push all characters of string to stack for char in s: stack.append(char) # Check palindrome by popping from stack for char in s: if char != stack.pop(): return False return True"},{"question":"Write a python function to convert an integer to a specified base (between 2 and 36) and return the result as a string. The function should handle negative numbers as well.","solution":"def int_to_base(n, base): Converts an integer n to a specified base (between 2 and 36) and returns the result as a string. The function handles negative numbers as well. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36\\") if n == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" sign = \\"-\\" if n < 0 else \\"\\" n = abs(n) result = [] while n: result.append(digits[n % base]) n //= base result = result[::-1] return sign + \\"\\".join(result)"},{"question":"Write a python function to check if a number is prime or not. Your function should return the number with a string indicating whether it is a prime number or not.","solution":"def check_prime(n): Checks if the given number n is a prime number or not. Returns a string indicating whether the number is prime. if n <= 1: return f\\"{n} is not a prime number\\" if n == 2: return f\\"{n} is a prime number\\" if n % 2 == 0: return f\\"{n} is not a prime number\\" for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return f\\"{n} is not a prime number\\" return f\\"{n} is a prime number\\""},{"question":"Write a python function to find the minimum element in a sorted and rotated list. A sorted and rotated list is one that has been sorted in ascending order and then rotated. For example, [3, 4, 5, 1, 2] is a sorted and rotated list because it was originally [1, 2, 3, 4, 5] then rotated 2 steps to the right. The list will not contain duplicates.","solution":"def find_min_in_rotated_sorted_list(nums): Finds the minimum element in a sorted and rotated list. :param nums: List of integers that is sorted in ascending order and then rotated. :return: The minimum element in the list. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[right]: left = mid + 1 else: right = mid return nums[left]"},{"question":"Write a python function to detect a cycle in a directed graph using DFS. The graph is represented as an adjacency list.","solution":"def has_cycle(graph): Detects if there is a cycle in a directed graph using DFS. :param graph: Dictionary representing an adjacency list of the directed graph {node: [list of adjacent nodes]} :return: True if there is a cycle, False otherwise def dfs(node): nonlocal has_cycle if node in visiting: has_cycle = True return if node in visited: return visiting.add(node) for neighbour in graph.get(node, []): dfs(neighbour) visiting.remove(node) visited.add(node) visited = set() visiting = set() has_cycle = False for node in graph: if node not in visited: dfs(node) if has_cycle: break return has_cycle"},{"question":"Write a python function to find the maximum sum of a contiguous subarray within the given 1D array of integers. For example, if the input is \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the output should be \`6\` because \`[4, -1, 2, 1]\` has the largest sum.","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray within the given 1D array of integers. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a python function to check if all pairs of consecutive numbers in a given list are distinct. You need to pass a list of integers to this function. The function should return True if all pairs are distinct, False otherwise.","solution":"def are_all_pairs_distinct(nums): Check if all pairs of consecutive numbers in a list are distinct. Parameters: nums (list): A list of integers. Returns: bool: True if all pairs are distinct, False otherwise. for i in range(len(nums) - 1): if nums[i] == nums[i + 1]: return False return True"},{"question":"Write a python function to implement the quicksort algorithm. The function should take a list of numbers as an input and return the sorted list.","solution":"def quicksort(arr): Implements the quicksort algorithm to sort a list of numbers. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a python function to calculate the factorial of a given number. Assume the number is non-negative. You should use recursion to solve this problem. The function should also include error handling for cases when a negative number is passed as input.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using recursion. Raises a ValueError if n is negative. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a python function to check if a given list of integers is sorted in ascending order. The function should return \`True\` if the list is sorted, and \`False\` otherwise. Additionally, the function should also check if the list contains any non-integer elements and return \`False\` for such cases. The function should be efficient and handle large lists gracefully.","solution":"def is_sorted(lst): Checks if a given list of integers is sorted in ascending order. Returns False if the list contains any non-integer elements. if not all(isinstance(x, int) for x in lst): return False return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))"},{"question":"Write a python function to merge two lists of integers and return a new sorted list.","solution":"def merge_and_sort_lists(list1, list2): Merges two lists of integers and returns a new sorted list. Args: list1 (list of int): The first list of integers. list2 (list of int): The second list of integers. Returns: list of int: A new sorted list containing all elements from list1 and list2. merged_list = list1 + list2 merged_list.sort() return merged_list"},{"question":"Write a python function to reverse the order of words in a sentence. For instance, if the sentence is \\"Hello my name is Qwen\\", the function should return \\"Qwen is name my Hello\\". Note that the order of the characters in each word should remain the same.","solution":"def reverse_words(sentence): Reverses the order of words in a sentence. Parameters: sentence (str): The sentence to reverse the words of. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words)"},{"question":"Write a python function to find the length of the longest duplicate substring of a given string. If there is no duplicate substring, return 0.","solution":"def longest_duplicate_substring(s): Returns the length of the longest duplicate substring in the given string s. If there is no duplicate substring, returns 0. n = len(s) mod = 2**63 - 1 base = 256 def search_len(length): h = 0 for i in range(length): h = (h * base + ord(s[i])) % mod seen = {h} base_l = pow(base, length, mod) for i in range(1, n - length + 1): h = (h * base - ord(s[i - 1]) * base_l + ord(s[i + length - 1])) % mod if h in seen: return i seen.add(h) return -1 left, right = 0, n while left < right: mid = (left + right + 1) // 2 if search_len(mid) != -1: left = mid else: right = mid - 1 return left"},{"question":"Write a python function to check if a string s has evenly split into two halves, meaning they are mirror images of each other. The function should return True if it is possible to split the string into two halves that are mirror images of each other, otherwise return False.","solution":"def is_mirror_image(s): Checks if the input string can be evenly split into two halves that are mirror images of each other. :param s: input string :return: True if the two halves are mirror images, False otherwise n = len(s) if n % 2 != 0: return False mid = n // 2 left_half = s[:mid] right_half = s[mid:][::-1] return left_half == right_half"},{"question":"Write a python function to check if a given matrix is a skew-symmetric matrix.","solution":"def is_skew_symmetric(matrix): Check if the given matrix is a skew-symmetric matrix. A matrix is skew-symmetric if for all i and j, the condition A[i][j] = -A[j][i] is satisfied. Also, this implies that the diagonal elements of the matrix are all zero. :param matrix: List of lists where each sublist represents a row in the matrix :return: True if the matrix is skew-symmetric, False otherwise n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != -matrix[j][i]: return False return True"},{"question":"Write a python function to perform insertion sort on an array of integers.","solution":"def insertion_sort(arr): Perform insertion sort on an array of integers. Parameters: arr (list): A list of integers to be sorted. Returns: list: A sorted list of integers. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a python function to find the largest rectangle area in a histogram. The histogram is represented by a list of integers where each integer represents a bar's height, and the width of each bar is 1. The function should handle edge cases such as empty lists and lists with all bars of zero height.","solution":"def largestRectangleArea(heights): Finds the largest rectangle area in a histogram represented by heights. Parameters: heights (List[int]): A list of integers where each integer represents the height of a bar in the histogram Returns: int: The area of the largest rectangle that can be formed in the histogram if not heights: return 0 stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a python function to find the minimum number of coins required to make a given amount using a given set of coin denominations.","solution":"def min_coins(coins, amount): Find the minimum number of coins needed to make up a given amount using a given set of coin denominations. :param coins: List[int] - The denominations of coins available. :param amount: int - The total amount of money to make. :return: int - The minimum number of coins required to make up the amount, or -1 if it's not possible. # Initialize an array to store the minimum coins needed for each amount from 0 to the given amount dp = [float('inf')] * (amount + 1) dp[0] = 0 # Loop over each coin and each sub-amount to fill the dp array for coin in coins: for x in range(coin, amount + 1): if dp[x - coin] != float('inf'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Write a python function to check if a given number is a power of 2. A number is a power of 2 if there exists an integer x such that 2^x equals the number. In other words, the number should be greater than zero and has exactly one bit set in its binary representation.","solution":"def is_power_of_two(n): Check if a given number is a power of 2. Parameters: n (int): The number to check. Returns: bool: True if the number is a power of 2, False otherwise. return n > 0 and (n & (n - 1)) == 0"},{"question":"Write a python function to rotate a matrix by 90 degrees clockwise.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given matrix by 90 degrees clockwise. Args: matrix (list of lists): The matrix to rotate. Returns: list of lists: The rotated matrix. if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) rotated_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): rotated_matrix[c][rows - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Write a python function to find the 'n' smallest elements in a list. The function should return these elements in sorted order.","solution":"def n_smallest_elements(lst, n): Returns the n smallest elements in lst, sorted in ascending order. Args: lst (list): The list from which to find the smallest elements. n (int): The number of smallest elements to find. Returns: list: The n smallest elements in sorted order. if n <= 0: return [] return sorted(lst)[:n]"},{"question":"Write a python function to sort the elements in a given list in descending order and return the sorted list.","solution":"def sort_descending(lst): Sorts the elements in a given list in descending order. Parameters: lst (List[int]): A list of integers to be sorted. Returns: List[int]: The list sorted in descending order. return sorted(lst, reverse=True)"},{"question":"Write a python function to find the maximum sum subarray with at least one element.","solution":"def max_subarray_sum(nums): Finds the maximum sum subarray with at least one element. :param nums: List of integers :return: Integer, the maximum sum of a subarray if not nums: raise ValueError(\\"Array must contain at least one element\\") max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to find the second largest number in a list. If the list is smaller than 2, return \`None\`. If there are duplicates, the same number should be considered twice when finding the second largest number.","solution":"def second_largest(numbers): Returns the second largest number in a list. If the list has fewer than 2 unique numbers, returns None. if len(numbers) < 2: return None first_largest = second_largest = float('-inf') for number in numbers: if number > first_largest: second_largest = first_largest first_largest = number elif number > second_largest and number != first_largest: second_largest = number return second_largest if second_largest != float('-inf') else None"},{"question":"Write a python function to generate a Fibonacci series with the given number of terms. The function should take an integer \`n\` as input and return a list of the first \`n\` Fibonacci numbers.","solution":"def generate_fibonacci(n): Returns a list of the first n Fibonacci numbers. Fibonacci series starts with 0 and 1, and the next numbers are the sum of the previous two. if n <= 0: return [] elif n == 1: return [0] fibonacci_list = [0, 1] while len(fibonacci_list) < n: fibonacci_list.append(fibonacci_list[-1] + fibonacci_list[-2]) return fibonacci_list"},{"question":"Write a python function to find the maximum possible sum of an array by rearranging its elements. The new array should be such that the elements are in a non-decreasing order and the sum of the first three elements is maximized.","solution":"def maximize_sum(arr): Returns the maximum possible sum of the first three elements of the array by rearranging its elements in a non-decreasing order. if len(arr) < 3: raise ValueError(\\"Array should have at least three elements\\") # Sort array in non-decreasing order arr.sort() # Return the sum of the last three elements (which will be the largest three) return arr[-1] + arr[-2] + arr[-3]"},{"question":"Write a python function to check if the input number is a Magical Triplet number or not. A Magical Triplet number is defined as a perfect square of a prime number. Your function should return \`True\` if the number is a Magical Triplet number, and \`False\` otherwise.","solution":"from math import isqrt def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, isqrt(n) + 1, 2): if n % i == 0: return False return True def is_magical_triplet_number(n): Returns True if the input number n is a Magical Triplet number. A Magical Triplet number is defined as a perfect square of a prime number. if n <= 0: return False root = isqrt(n) return root * root == n and is_prime(root)"},{"question":"Write a python function to find strongly connected components (SCCs) in a directed graph using the Kosaraju's algorithm.","solution":"def kosaraju_scc(graph): Find the Strongly Connected Components (SCCs) in a directed graph using Kosaraju's algorithm. Parameters: graph (dict): A dictionary representing the graph where keys are nodes and values are lists of adjacent nodes. Returns: list: A list of lists, where each inner list is a strongly connected component. def dfs(vertex, visited, stack): visited.add(vertex) for neighbor in graph.get(vertex, []): if neighbor not in visited: dfs(neighbor, visited, stack) stack.append(vertex) def reverse_graph(graph): reversed_graph = {} for u in graph: for v in graph[u]: if v not in reversed_graph: reversed_graph[v] = [] reversed_graph[v].append(u) return reversed_graph def dfs_reverse(vertex, visited, component): visited.add(vertex) component.append(vertex) for neighbor in reversed_graph.get(vertex, []): if neighbor not in visited: dfs_reverse(neighbor, visited, component) stack = [] visited = set() # First pass: order vertices by finish time in decreasing order for vertex in graph: if vertex not in visited: dfs(vertex, visited, stack) # Reverse the graph reversed_graph = reverse_graph(graph) visited.clear() scc = [] # Second pass: find SCCs in the reversed graph while stack: vertex = stack.pop() if vertex not in visited: component = [] dfs_reverse(vertex, visited, component) scc.append(component) return scc"},{"question":"Write a python function to find the longest common substring between two strings. You should find the longest common substring that appears consecutively in both strings. What should be the function signature and how would you implement it?","solution":"def longest_common_substring(s1, s2): Returns the longest common substring between two strings that appears consecutively. Args: s1, s2: Input strings Returns: The longest common substring. if not s1 or not s2: return \\"\\" # Initialize a table to track matches table = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)] longest = 0 longest_end_pos = 0 for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): if s1[i - 1] == s2[j - 1]: table[i][j] = table[i - 1][j - 1] + 1 if table[i][j] > longest: longest = table[i][j] longest_end_pos = i # Extract the longest substring start_pos = longest_end_pos - longest return s1[start_pos:longest_end_pos]"},{"question":"Write a python function to convert a given string to a list of words. The function should split the string at each space character and return a list of words.","solution":"def string_to_words(s): Converts a given string to a list of words. :param s: The string to be converted. :type s: str :return: A list of words. :rtype: list return s.split()"},{"question":"Write a python function to read and write to a file. The function should accept three parameters: the filename, the data to be written, and the mode ('r' for reading, 'w' for writing, 'a' for appending). The function should handle exceptions properly.","solution":"def read_or_write_file(filename, data, mode): This function reads from or writes to a file based on the specified mode. Parameters: filename (str): The name of the file to read from or write to. data (str): The data to be written to the file, if applicable. mode (str): The mode to open the file in. Should be 'r' (read), 'w' (write), or 'a' (append). Returns: str: The content of the file when reading. None: When writing or appending to the file. if mode not in ['r', 'w', 'a']: raise ValueError(\\"Mode should be 'r', 'w', or 'a'\\") try: with open(filename, mode) as file: if mode == 'r': return file.read() else: file.write(data) except Exception as e: raise e"},{"question":"Write a python function to remove all the vowels from a given string and return the resulting string. The vowels to be removed should include 'a', 'e', 'i', 'o', 'u' in both lowercase and uppercase forms.","solution":"def remove_vowels(s): Removes all vowels from the given string s and returns the resulting string. Vowels include 'a', 'e', 'i', 'o', 'u' and their uppercase counterparts. vowels = set(\\"aeiouAEIOU\\") return ''.join(char for char in s if char not in vowels)"},{"question":"Write a python function to find the closest value for a given target in a binary search tree (BST). The BST is not necessarily balanced. The function should return the closest value to the target. If there are two numbers with the same difference to the target, the smaller number should be returned.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def closest_value(root, target): Returns the closest value to the target in a BST. If there are two numbers with the same difference to the target, the smaller number is returned. closest = root.val while root: # Update the closest value if a closer one is found if abs(root.val - target) < abs(closest - target) or (abs(root.val - target) == abs(closest - target) and root.val < closest): closest = root.val # Move left or right depending on the comparison if target < root.val: root = root.left else: root = root.right return closest"},{"question":"Write a python function to convert a given 2D list (matrix) into its string representation, where each element is separated by a specific delimiter.","solution":"def matrix_to_string(matrix, delimiter): Converts a given 2D list (matrix) into its string representation using the specified delimiter. Parameters: matrix (list of lists): The 2D list to be converted. delimiter (str): The delimiter to be used to separate elements. Returns: str: The string representation of the matrix. return 'n'.join([delimiter.join(map(str, row)) for row in matrix])"},{"question":"Write a python function to count the number of unique words in a given sentence. Ignore case and punctuation. For example, the sentence \\"Hello, world!\\" should return 2.","solution":"import re from collections import Counter def count_unique_words(sentence): Returns the number of unique words in a given sentence. Words are considered unique ignoring case and punctuation. # Remove punctuation using regex and lower the case of the sentence cleaned_sentence = re.sub(r'[^ws]', '', sentence).lower() # Split the sentence into words words = cleaned_sentence.split() # Use a Counter to count the frequency of each word word_count = Counter(words) # The number of unique words is the length of the keys in the Counter return len(word_count)"},{"question":"Write a python function to replace a substring in a string.","solution":"def replace_substring(original_string, old_substring, new_substring): Replaces all occurrences of old_substring in original_string with new_substring. Args: - original_string (str): The string to perform the replacement on. - old_substring (str): The substring to be replaced. - new_substring (str): The substring to replace with. Returns: - str: A new string with the replacements. return original_string.replace(old_substring, new_substring)"},{"question":"Write a python function to extract email addresses from a given string. The function should use regular expressions to find all occurrences of email addresses in the string and return them as a list of strings.","solution":"import re def extract_emails(text): Extract all email addresses from a given string. Args: text (str): Text containing email addresses. Returns: list of str: List of email addresses found in the text. email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' return re.findall(email_pattern, text)"},{"question":"Write a python function to create a list of all the unique factors of a given positive integer n, excluding 1 and n itself.","solution":"def unique_factors(n): Returns a list of unique factors of a given positive integer n, excluding 1 and n itself. factors = [] for i in range(2, n): if n % i == 0: factors.append(i) return factors"},{"question":"Write a python function to take a string as input and return a string with all the vowels removed. Name the function \`remove_vowels\`.","solution":"def remove_vowels(input_string): Takes a string as input and returns a string with all the vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Write a python function to convert a binary string to an equivalent decimal number.","solution":"def binary_to_decimal(binary_str): Converts a binary string to an equivalent decimal number. :param binary_str: A string representing a binary number (e.g., '1101') :return: The decimal (base 10) integer equivalent of the binary number decimal_number = int(binary_str, 2) return decimal_number"},{"question":"Write a python function to generate all possible combinations of 2 numbers from a given list of unique numbers. The function should return a list of tuples, with each tuple representing a unique combination.","solution":"from itertools import combinations def generate_combinations(numbers): Generate all possible combinations of 2 numbers from a given list of unique numbers. :param numbers: List of unique numbers :return: List of tuples, each tuple representing a unique combination of 2 numbers return list(combinations(numbers, 2))"},{"question":"Write a python function to solve the following problem: Leetcode 1. Two Sum","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Args: nums (List[int]): List of integers target (int): Target sum Returns: List[int]: Indices of the two numbers num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a python function to check the validity of the input password.","solution":"import re def is_valid_password(password): Checks the validity of the input password based on the following rules: 1. At least 8 characters long. 2. Contains both uppercase and lowercase characters. 3. Contains at least one numeric digit. 4. Contains at least one special character from the set (!, @, #, , %, ^, &, *) :param password: The password string to validate :return: True if the password is valid, False otherwise if len(password) < 8: return False if not re.search(r\\"[A-Z]\\", password): return False if not re.search(r\\"[a-z]\\", password): return False if not re.search(r\\"[0-9]\\", password): return False if not re.search(r\\"[!@#%^&*]\\", password): return False return True"},{"question":"Write a python function to find the \\"n-th\\" Fibonacci number using an iterative approach. Explain how this function works.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using an iterative approach. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a python function to reverse a given string by word instead of character. For example, the string \\"hello world\\" becomes \\"world hello\\".","solution":"def reverse_string_by_word(s): Reverses the order of words in a given string s. return ' '.join(s.split()[::-1])"},{"question":"Write a python function to check if a number is a Fibonacci number using the iterative method. The function should return \`True\` if the number is a Fibonacci number and \`False\` otherwise.","solution":"def is_fibonacci(num): Returns True if num is a Fibonacci number, otherwise False. if num < 0: return False a, b = 0, 1 while a <= num: if a == num: return True a, b = b, a + b return False"},{"question":"Write a python function to generate the first \`n\` rows of Pascal's Triangle.","solution":"def pascals_triangle(n): Generates the first n rows of Pascal's Triangle. Args: n: An integer indicating the number of rows. Returns: A list of lists, where each sublist is a row in Pascal's Triangle. if n == 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Write a python function to solve the following problem: You are given a 2D grid representing a maze, where 0 represents an open path and 1 represents an obstacle. Starting from the top-left corner, find the shortest path to the bottom-right corner. You can only move either down or right at any point in time.","solution":"from collections import deque def shortest_path_in_maze(grid): Finds the shortest path in the maze from the top-left corner to the bottom-right corner. Parameters: grid: List of lists where 0 represents an open path and 1 represents an obstacle. Returns: The length of the shortest path or -1 if no such path exists. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(1, 0), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, path_length) visited = set((0, 0)) while queue: r, c, length = queue.popleft() if r == rows - 1 and c == cols - 1: return length for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, length + 1)) return -1"},{"question":"Write a python function to find the average of a list of numbers. The list can contain integers and floating-point numbers. The function should handle an empty list and return 0.0 in that case.","solution":"def average(numbers): Returns the average of a list of numbers. If the list is empty, returns 0.0. if not numbers: return 0.0 return sum(numbers) / len(numbers)"},{"question":"Write a python function to find the maximum and minimum element in an array using the divide and conquer method.","solution":"def find_max_min(arr): Returns both the maximum and minimum element in the array using the divide and conquer method. :param arr: List of integers :return: Tuple of two integers (max_element, min_element) def max_min_rec(arr, left, right): # If the array contains only one element if left == right: return arr[left], arr[left] # If the array contains only two elements if left + 1 == right: if arr[left] > arr[right]: return arr[left], arr[right] else: return arr[right], arr[left] # Find the midpoint mid = (left + right) // 2 # Recursively find the max and min in the left and right halves max1, min1 = max_min_rec(arr, left, mid) max2, min2 = max_min_rec(arr, mid + 1, right) # Return the overall max and min return max(max1, max2), min(min1, min2) if not arr: # if the array is empty raise ValueError(\\"Array is empty\\") return max_min_rec(arr, 0, len(arr) - 1)"},{"question":"Write a python function to compute the sum of all multiples of 2 or 5 below 1000.","solution":"def sum_of_multiples_of_2_or_5_below_1000(): Returns the sum of all multiples of 2 or 5 below 1000. return sum(x for x in range(1000) if x % 2 == 0 or x % 5 == 0)"},{"question":"Write a python function to reverse the elements of a given list without using the reverse() method or any other built-in methods like slicing or the reversed() function.","solution":"def reverse_list(lst): Reverses the elements of lst in place without using built-in methods. Args: lst : list The list of elements to be reversed. Returns: list The reversed list. # Implementing reversing using two-pointer technique left = 0 right = len(lst) - 1 while left < right: # Swap elements at left and right indices lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst"},{"question":"Write a python function to count the numbers of each character in a string and store the result in a dictionary.","solution":"def count_characters(s): Counts the number of each character in a string and stores the result in a dictionary. :param s: Input string :return: Dictionary with characters as keys and their counts as values char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a python function to sort an array based on a given index, this index can change the sorting criteria, i.e if index is 0 we sort by the first element, if index is 1 we sort by the second element and so on.","solution":"def sort_by_index(arr, index): Sorts a list of lists/tuples based on the given index. Parameters: arr (list): A list of lists or tuples to be sorted. index (int): The index based on which the list should be sorted. Returns: list: A sorted list based on the given index. return sorted(arr, key=lambda x: x[index])"},{"question":"Write a python function to check if a given string is palindrome or not. Additionally, provide its time and space complexity.","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. A string is a palindrome if it reads the same forwards and backwards. Parameters: s (str): The string to check. Returns: bool: True if s is a palindrome, False otherwise. # Normalize the string by converting it to lowercase s = s.lower() # Compare the string with its reverse return s == s[::-1] # Time complexity: O(n) where n is the length of the string # Space complexity: O(n) due to normalizing copying of the string"},{"question":"Write a python function to convert a string input to an integer if possible. If the conversion is not possible, return the original string and print an error message indicating that the string is not a valid integer.","solution":"def convert_to_int(input_str): Converts the input string to an integer if possible. Args: input_str (str): The input string to be converted. Returns: int or str: The integer representation of the string, or the original string if conversion is not possible. try: return int(input_str) except ValueError: print(\\"Error: The input string is not a valid integer.\\") return input_str"},{"question":"Write a python function to determine if a number is a perfect power of another number. A perfect power is a number that can be expressed as an integer raised to an integer power, including the base and power being 1. Additionally, handle the case where the input number is less than or equal to 0, in which case the function should return \\"Invalid input\\". The solution should be efficient, suitable for large numbers.","solution":"import math def is_perfect_power_of(num, base): Determine if num is a perfect power of base. Return True if it is, else False. If num <= 0, return \\"Invalid input\\". if num <= 0: return \\"Invalid input\\" if base == 1: return num == 1 power = math.log(num, base) return math.isclose(power, round(power))"},{"question":"Write a python function to find the longest symmetric subsequence of a sequence of strings. A symmetric subsequence is a sequence that reads the same backwards as forwards. The function should return the longest length of such a subsequence.","solution":"def longest_symmetric_subsequence(seq): Returns the length of the longest symmetric subsequence in the sequence of strings. def lcs(X, Y): Helper function to find the Longest Common Subsequence (LCS) between two sequences X and Y. m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence # Initialize the LCS matrix L = [[0] * (n + 1) for _ in range(m + 1)] # Build the L[m+1][n+1] in bottom-up fashion for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[m][n] # Reverse the sequence rev_seq = seq[::-1] # Find the Longest Common Subsequence between the original and reversed sequences return lcs(seq, rev_seq)"},{"question":"Write a python function to solve the following problem: Given an array of integers nums and an integer k. Find all the values in the array where the maximum element is at least k.","solution":"def find_values_with_max_at_least_k(nums, k): Returns a list of values from the array \`nums\` where the maximum element is at least \`k\`. if not nums: return [] max_val = max(nums) if max_val < k: return [] return [num for num in nums if num >= k]"},{"question":"Write a python function to find the maximum and minimum value in an array of n integers.","solution":"def find_max_and_min(arr): Returns a tuple containing the maximum and minimum value in the array. Parameters: arr (list): List of integers Returns: tuple: (max_value, min_value) if not arr: raise ValueError(\\"Array cannot be empty\\") max_value = arr[0] min_value = arr[0] for number in arr[1:]: if number > max_value: max_value = number if number < min_value: min_value = number return (max_value, min_value)"},{"question":"Write a python function to find the majority element in an array using the Boyer-Moore Voting Algorithm. The majority element is the one that appears more than ⌊n / 2⌋ times in the array, where n is the size of the array.","solution":"def majority_element(nums): Returns the majority element in the array using the Boyer-Moore Voting Algorithm. The majority element is the element that appears more than n / 2 times. candidate = None count = 0 # Find the candidate for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify the candidate count = sum(1 for num in nums if num == candidate) if count > len(nums) // 2: return candidate else: return None # In case there is no majority element"},{"question":"Write a python function to find the factor of given number.","solution":"def factors(n): Returns a list of factors of the given number n. if n < 1: raise ValueError(\\"Input must be a positive integer\\") result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"question":"Write a python function to remove the text between two specified delimiters. For example, given the string \\"Hello [world] everyone\\", and the delimiters \\"[ ]\\", the function should return \\"Hello everyone\\".","solution":"import re def remove_text_between_delimiters(text, start_delim, end_delim): Removes the text between the specified start and end delimiters, including the delimiters themselves. pattern = re.escape(start_delim) + '.*?' + re.escape(end_delim) return re.sub(pattern, '', text)"},{"question":"Write a python function to find all the elements in a list that are greater than a given number k.","solution":"def find_elements_greater_than_k(lst, k): Returns a list of elements from lst that are greater than k. Parameters: lst (list): List of elements to check k : The number to compare the elements with Returns: list: A list of elements that are greater than k return [elem for elem in lst if elem > k]"},{"question":"Write a python function to find the minimum value in a given list of numbers. You should not use the built-in min function for this task.","solution":"def find_minimum(numbers): Returns the minimum value in the given list of numbers. Parameters: numbers (list): A list of numeric values Returns: The minimum value in the list if not numbers: raise ValueError(\\"The list is empty\\") min_value = numbers[0] for num in numbers[1:]: if num < min_value: min_value = num return min_value"},{"question":"Write a python function to find the longest consecutive elements sequence in an array of integers. The function should return the length of this sequence.","solution":"def longest_consecutive_sequence(nums): Finds the length of the longest consecutive elements sequence in an array of integers. Parameters: nums (List[int]): List of integers. Returns: int: The length of the longest consecutive elements sequence. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a python function to generate all possible substrings of a given input string and print them. The function should also return the count of all unique substrings.","solution":"def generate_substrings(s): Generates all possible substrings of the given input string s and returns the count of unique substrings. substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) # Print all unique substrings for substr in substrings: print(substr) return len(substrings)"},{"question":"Write a python function to calculate the nth Fibonacci number using dynamic programming. The function should take an integer n as input and return the nth Fibonacci number. The function should optimize the calculation by using a bottom-up approach with memoization to avoid redundant calculations.","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. Args: n (int): The position in the Fibonacci sequence (0-indexed). Returns: int: The nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Write a python function to solve the following problem: For a given array, find and return the maximum sum of all possible subarrays (repeating of elements allowed).","solution":"def max_subarray_sum(arr): Returns the maximum sum of all possible subarrays. Implemented using Kadane's Algorithm. if not arr: return 0 max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Write a python function to calculate the total number of vowels in a string. Please include a brief explanation for each part of the code you provide.","solution":"def total_vowels(s): Returns the total number of vowels in the string \`s\`. vowels = 'aeiouAEIOU' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a python function to solve the Longest Increasing Subsequence (LIS) problem. The function should return the length of the LIS that can be derived from a list of integers. The LIS is defined as a subsequence where each element is larger than the previous element.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in nums. if not nums: return 0 dp = [1] * len(nums) # dp[i] represents the length of the LIS ending at nums[i] for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a python function to sort a list of numbers in ascending order. You should use the Bubble Sort algorithm.","solution":"def bubble_sort(numbers): Sorts a list of numbers in ascending order using the Bubble Sort algorithm. Parameters: numbers (list): A list of numbers to be sorted. Returns: list: The sorted list of numbers. n = len(numbers) for i in range(n): for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return numbers"},{"question":"Write a python function to find the maximum subarray sum using Kadane's Algorithm. Kadane's Algorithm is a dynamic programming approach that efficiently solves the maximum subarray problem. The algorithm scans the array from left to right, keeping track of the maximum subarray sum ending at the current position and updating the global maximum sum found so far.","solution":"def max_subarray_sum(nums): Returns the maximum subarray sum using Kadane's Algorithm. Parameters: nums (list of int): List of integers Returns: int: Maximum subarray sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a python function to convert a binary string to its decimal equivalent using the built-in \`bin\` and \`int\` functions. The function should handle strings of varying lengths and validate that the input string is indeed a binary string.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. Parameters: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary string, or raises ValueError if input is not a valid binary string. # Validate input string if not all(ch in '01' for ch in binary_str): raise ValueError(\\"Input string is not a valid binary string\\") # Convert to decimal using int with base 2 return int(binary_str, 2)"},{"question":"Write a python function to find and return all the elements that appear more than once in an array. How can you optimize the function for large datasets?","solution":"def find_duplicates(arr): Returns a list of elements that appear more than once in the input array. :param arr: List of elements :type arr: List[int] :return: List of duplicate elements :rtype: List[int] element_count = {} duplicates = [] for elem in arr: if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 for elem, count in element_count.items(): if count > 1: duplicates.append(elem) return duplicates"},{"question":"Write a python function to reverse the words in a given string without using any in-built function.","solution":"def reverse_words(s): Reverses the words in a given string. Parameters: s (str): The string to reverse words in. Returns: str: The string with the words reversed. words = [] length = len(s) i = 0 while i < length: if s[i] != ' ': word_start = i while i < length and s[i] != ' ': i += 1 words.append(s[word_start:i]) i += 1 reversed_sentence = ' '.join(words[::-1]) return reversed_sentence"},{"question":"Write a python function to validate an email address. The function should check if the email address is in the correct format and if it exists. If the email address is in the correct format, the function should check if it exists in a predefined list of valid emails. If the email address is not in the correct format, the function should return \\"Invalid format\\". If the email address does not exist in the list of valid emails, the function should return \\"Email does not exist\\".","solution":"import re def validate_email(email, valid_emails): Validates an email address for correct format and existence in a given list of valid emails. Parameters: email (str): The email address to validate. valid_emails (list): A list of valid email addresses. Returns: str: \\"Invalid format\\" if the email address is not in correct format. \\"Email does not exist\\" if the email does not exist in the list of valid emails. \\"Valid email\\" if the email is in the correct format and exists in the list. email_regex = r\\"^[w.-]+@[w.-]+.w+\\" if not re.match(email_regex, email): return \\"Invalid format\\" if email not in valid_emails: return \\"Email does not exist\\" return \\"Valid email\\""},{"question":"Write a python function to calculate the sum of all elements in a two-dimensional list (matrix).","solution":"def sum_matrix(matrix): Returns the sum of all elements in a two-dimensional list (matrix). return sum(sum(row) for row in matrix)"},{"question":"Write a python function to sort a list of item using the merge sort algorithm.","solution":"def merge_sort(arr): Sorts a list of items using the merge sort algorithm. Parameters: arr (list): A list of items to be sorted. Returns: list: The sorted list. if len(arr) > 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] # Recursive call on each half merge_sort(left) merge_sort(right) i = j = k = 0 # Copy data to temp arrays left[] and right[] while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 # Checking if any element was left while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 return arr"},{"question":"Write a python function to find all numbers in the range from 2 to the given parameter n, that are divisible by either 3 or 5.","solution":"def find_divisible_by_3_or_5(n): Returns a list of numbers in the range from 2 to n that are divisible by either 3 or 5. return [i for i in range(2, n + 1) if i % 3 == 0 or i % 5 == 0]"},{"question":"Write a python function to find the maximum number in a list. After writing the function, call it with the list [1, 2, 3, 4, 5]. What should be the output?","solution":"def find_maximum(nums): Returns the maximum number in a list. if not nums: return None max_num = nums[0] for num in nums: if num > max_num: max_num = num return max_num # Example call example_list = [1, 2, 3, 4, 5] output = find_maximum(example_list) output # Expected output is 5"},{"question":"Write a python function to remove whitespaces from a string using recursion.","solution":"def remove_whitespace_recursively(s): Removes all whitespace characters from the input string using recursion. if len(s) == 0: return s if s[0].isspace(): return remove_whitespace_recursively(s[1:]) else: return s[0] + remove_whitespace_recursively(s[1:])"},{"question":"Write a python function to find the smallest number in a list. If the list is empty or None, the function should return None. Here's the function体内有哪些需要处理的特殊情况？","solution":"def find_smallest_number(numbers): Returns the smallest number in a list. If the list is empty or None, returns None. if not numbers: return None return min(numbers)"},{"question":"Write a python function to generate \`n\` unique random numbers ranging from 1 to \`m\` (both inclusive) and return them as a list. If \`n\` is greater than \`m\`, the function should raise a \`ValueError\` with the message \\"n cannot be greater than m\\".","solution":"import random def generate_unique_random_numbers(n, m): Generate n unique random numbers ranging from 1 to m (inclusive). Parameters: n (int): Number of unique random numbers to generate. m (int): Upper limit of the range (inclusive). Returns: list: A list of n unique random numbers. Raises: ValueError: If n is greater than m. if n > m: raise ValueError(\\"n cannot be greater than m\\") return random.sample(range(1, m + 1), n)"},{"question":"Write a python function to calculate the factorial of a given number \`n\`. The function should not use any built-in factorial functions. You are only allowed to use loops.","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. If n is 0, returns 1 as 0! is defined to be 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to find the second largest number in an array. The function should take an array as input and return the second largest element. If the second largest number does not exist, return None.","solution":"def second_largest(nums): Returns the second largest number in an array. If the array does not have at least two unique numbers, returns None. :param nums: List of integers :return: Second largest integer or None if len(nums) < 2: return None first_max = second_max = float('-inf') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max and num != first_max: second_max = num return second_max if second_max != float('-inf') else None"},{"question":"Write a python function to sort a list of numbers.","solution":"def sort_numbers(numbers): Returns the sorted list of numbers. return sorted(numbers)"},{"question":"Write a python function to translate a given text to a secret code. The secret code should be created by shifting each character in the text by one position ahead in the alphabet. For example, 'A' becomes 'B', 'B' becomes 'C', ..., 'Z' wraps around to 'A'. Also, 'a' becomes 'b', 'b' becomes 'c', ..., 'z' wraps around to 'a'. Ignore the case of the characters and consider only alphabetic characters.","solution":"def translate_to_secret_code(text): Translates the given text to a secret code by shifting each character in the text by one position ahead in the alphabet. It wraps around for 'Z' to 'A' and 'z' to 'a'. Non-alphabetic characters are ignored. secret_code = [] for char in text: if 'A' <= char <= 'Z': new_char = chr((ord(char) - ord('A') + 1) % 26 + ord('A')) elif 'a' <= char <= 'z': new_char = chr((ord(char) - ord('a') + 1) % 26 + ord('a')) else: new_char = char secret_code.append(new_char) return ''.join(secret_code)"},{"question":"Write a python function to find the factorial of a number. Implement it using both a recursive and an iterative approach.","solution":"def factorial_recursive(n): Returns the factorial of a number using the recursive approach. if n == 0: return 1 else: return n * factorial_recursive(n - 1) def factorial_iterative(n): Returns the factorial of a number using the iterative approach. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to implement a Binary Search Tree (BST) and perform an in-order traversal to print the tree's elements. Additionally, implement a check to verify if the tree is balanced.","solution":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = Node(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = Node(key) else: self._insert(root.left, key) else: if root.right is None: root.right = Node(key) else: self._insert(root.right, key) def in_order_traversal(self): elements = [] self._in_order_traversal(self.root, elements) return elements def _in_order_traversal(self, root, elements): if root: self._in_order_traversal(root.left, elements) elements.append(root.val) self._in_order_traversal(root.right, elements) def is_balanced(self): return self._is_balanced(self.root) def _is_balanced(self, root): if root is None: return True left_height = self._height(root.left) right_height = self._height(root.right) if abs(left_height - right_height) > 1: return False return self._is_balanced(root.left) and self._is_balanced(root.right) def _height(self, root): if root is None: return 0 return max(self._height(root.left), self._height(root.right)) + 1"},{"question":"Write a python function to check if a given number is a \\"weird number.\\" A weird number is defined as a positive integer greater than 20 that is not a prime number but has a sum of its proper divisors (excluding itself) (sumexv) that is greater than the number itself.","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_of_proper_divisors(n): divisors_sum = 1 for i in range(2, int(n**0.5) + 1): if n % i == 0: if i == n // i: divisors_sum += i else: divisors_sum += i + n // i return divisors_sum def is_weird_number(n): if n <= 20: return False if is_prime(n): return False sum_divisors = sum_of_proper_divisors(n) if sum_divisors > n: return True return False"},{"question":"Write a python function to calculate the sum of the first \`n\` terms of a geometric sequence, given the first term \`a\` and the common ratio \`r\`. The function should return the sum.","solution":"def geometric_sum(a, r, n): Calculate the sum of the first n terms of a geometric sequence. :param a: The first term of the sequence. :param r: The common ratio. :param n: The number of terms. :return: The sum of the first n terms. if r == 1: return a * n else: return a * (1 - r ** n) / (1 - r)"},{"question":"Write a python function to find the shortest path in a graph using Dijkstra's algorithm. The graph will be represented using an adjacency list where the keys are the nodes and the values are dictionaries mapping connected nodes to their respective distances.","solution":"import heapq def dijkstra(graph, start): Implements Dijkstra's algorithm to find the shortest path in a graph. :param graph: Dictionary representing the graph as an adjacency list :param start: The starting node for the shortest paths :return: A tuple containing two dictionaries: distances and previous nodes distances = {node: float('inf') for node in graph} previous_nodes = {node: None for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return distances, previous_nodes"},{"question":"Write a python function to sort a given list of integers. You should use the bubble sort algorithm.","solution":"def bubble_sort(arr): Sorts a given list of integers using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if any elements were swapped in this iteration swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap if the element found is greater than the next element arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no two elements were swapped in the inner loop, then the list is sorted if not swapped: break return arr"},{"question":"Write a python function to find the most common element in a list of integers.","solution":"from collections import Counter def most_common_element(lst): Returns the most common element in a list of integers. If there are multiple elements with the same highest frequency, any one of them is returned. if not lst: return None counter = Counter(lst) most_common = counter.most_common(1)[0][0] return most_common"},{"question":"Write a python function to calculate the factorial of a number. The function should be able to handle both positive and negative integers. However, it should only compute the factorial for non-negative integers and raise a \`ValueError\` if a negative integer is provided. The function should also handle large numbers by using Python's built-in \`int\` type, which can represent arbitrarily large integers.","solution":"def factorial(n): Calculate the factorial of a non-negative integer n. Raise a ValueError if n is a negative integer. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers.\\") elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a python function to generate all possible permutations of a given string. Ensure that your function works for both lower and upper case characters, as well as digits. How would you call the function with the input \\"abc\\"?","solution":"from itertools import permutations def generate_permutations(s): Generates all possible permutations of the input string \`s\`. Args: s (str): The input string. Returns: List[str]: A list of all permutations of the input string. return [''.join(p) for p in permutations(s)] # Call the function with input \\"abc\\" permutations_of_abc = generate_permutations(\\"abc\\") print(permutations_of_abc)"},{"question":"Write a python function to sort a list of strings in descending order.","solution":"def sort_strings_descending(strings_list): Sorts a list of strings in descending order. Parameters: strings_list (list): The list of strings to be sorted. Returns: list: The sorted list of strings in descending order. return sorted(strings_list, reverse=True)"}]`),N={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},C={class:"card-container"},P={key:0,class:"empty-state"},S=["disabled"],L={key:0},z={key:1};function E(i,e,u,c,s,o){const d=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=a=>s.searchQuery=a),placeholder:"Search..."},null,512),[[b,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=a=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),r(y,null,v(o.displayedPoems,(a,p)=>(n(),w(d,{key:p,poem:a},null,8,["poem"]))),128)),o.displayedPoems.length===0?(n(),r("div",P,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),o.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...a)=>o.loadMore&&o.loadMore(...a))},[s.isLoading?(n(),r("span",z,"Loading...")):(n(),r("span",L,"See more"))],8,S)):l("",!0)])}const D=f(N,[["render",E],["__scopeId","data-v-b086fd72"]]),H=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"guide/5.md","filePath":"guide/5.md"}'),V={name:"guide/5.md"},B=Object.assign(V,{setup(i){return(e,u)=>(n(),r("div",null,[x(D)]))}});export{H as __pageData,B as default};
