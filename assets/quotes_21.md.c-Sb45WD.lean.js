import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as w,p as y,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(r,e,l,m,s,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(k,[["render",A],["__scopeId","data-v-421cd600"]]),S=JSON.parse('[{"question":"You are working on a collaborative text editor, and one of the cooler features you want to add is \\"highlighting positives\\". Basically, you\'re performing sentiment analysis on text and want to bold any phrases that have a positive sentiment so that they\'re easy to spot. The challenge here is to write a function that will search through a given text and wrap any positively-connotated word in a pair of `<b></b>` tags. For simplicity, let\'s assume we have a predefined list of positive words as follows: ``` positive_words = [\\"good\\", \\"great\\", \\"excellent\\", \\"awesome\\", \\"fantastic\\", \\"marvelous\\", \\"wonderful\\"] ``` Write a function `highlight_positives(text: str) -> str` that takes a `text` string and returns the `text` with all occurrences of any words in the `positive_words` list wrapped in `<b></b>` tags. For example: ``` input: \\"This is a good day. An excellent opportunity awaits.\\" output: \\"This is a <b>good</b> day. An <b>excellent</b> opportunity awaits.\\" input: \\"Everything is awesome! We are having a fantastic time.\\" output: \\"Everything is <b>awesome</b>! We are having a <b>fantastic</b> time.\\" ``` Notes: - The function should be case insensitive; however, the original case of the text should be preserved in the output. - Words should be matched exactly; substrings should not be highlighted. For example, \\"good\\" should not match \\"goodbye\\". - Assume the given text consists only of alphabetic characters and spaces. No need to handle punctuation, numbers, or other special characters.","solution":"import re positive_words = [\\"good\\", \\"great\\", \\"excellent\\", \\"awesome\\", \\"fantastic\\", \\"marvelous\\", \\"wonderful\\"] def highlight_positives(text: str) -> str: Wraps all occurrences of positive words in the text with <b></b> tags. def bold_match(match): return f\\"<b>{match.group(0)}</b>\\" # Create pattern to match whole words from positive_words pattern = r\'b(\' + \'|\'.join(re.escape(word) for word in positive_words) + r\')b\' # Use re.sub with case insensitive flag to substitute matches with bold tags highlighted_text = re.sub(pattern, bold_match, text, flags=re.IGNORECASE) return highlighted_text"},{"question":"Galaxy Explorers have discovered a new alien language on planet Xenon. The language follows an interesting structure; each word is composed of a sequence of repetitive units. A unit is defined as one or more characters that repeat to form the word. Your task is to determine the smallest unit of repetition for a given word. For instance, the word \\"ababab\\" is made up of the repeating unit \\"ab\\". If no smaller repeating unit exists, the word itself is the smallest repeating unit. -----Input----- Input to the program consists of a single line containing the string word (where the size of word should be <= 50). The string consists of only lowercase alphabets. -----Output----- Output should consist of a single line indicating the smallest unit of repetition for the given word. -----Example----- Input: abcabcabc Output: abc Input: aaaaaa Output: a","solution":"def smallest_repetitive_unit(word): Determines the smallest unit of repetition for a given word. Parameters: word (str): The input word composed of lowercase alphabets. Returns: str: The smallest unit of repetition. length = len(word) for i in range(1, length // 2 + 1): unit = word[:i] if length % i == 0: if unit * (length // i) == word: return unit return word"},{"question":"# Background A common task in statistical analysis is to sort a dataset to quickly find the median value. The median is the middle number in a sorted, ascending or descending, list of numbers and can be more descriptive of that data set than the average. # Task: Given an unsorted list of integers, write a function that returns the median value. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements. # Assumptions: - The input list will contain at least one integer. - You can use built-in sorting functions. # Example: Input: ``` [12, 4, 5, 3, 8, 7] ``` Output: ``` 6.0 ``` Input: ``` [7, 1, 3, 4] ``` Output: ``` 3.5 ```","solution":"def find_median(nums): Returns the median value of a list of integers. If the list has an odd number of elements, the median is the middle element. If the list has an even number of elements, the median is the average of the two middle elements. nums = sorted(nums) n = len(nums) mid = n // 2 if n % 2 == 1: return nums[mid] else: return (nums[mid - 1] + nums[mid]) / 2"},{"question":"# Scrambled Words! Your task in this kata is to write a function that takes a scrambled sentence and returns the original sentence by rearranging the words based on their positions. # Description Each word in the input string will contain exactly one digit `1-9` that signifies its position in the original sentence. The function should remove these digits and return the words in the correct order. # Input The input will be a single string containing scrambled words, separated by spaces. Each word will have exactly one digit `1-9`. # Output The function should return a single string containing the words ordered by their digits and separated by a single space. The digits should be removed in the output. Examples ```python unscramble(\\"is2 Thi1s T4est 3a\\") ``` should return: ```python \\"This is a Test\\" ``` ```python unscramble(\\"4of Fo1r pe6ople g3ood th5e the2\\") ``` should return: ```python \\"For the good of the people\\" ``` # Invalid input - If any word does not contain exactly one digit, return an empty string. # Additional information - The input string will not be empty. - There will be no repeated position digits. - The words will not contain any other digits outside the `1-9` range. - Words may contain punctuation or other symbols which should not be altered or removed. The function should adhere to these rules and provide the correct unscrambled sentence or an empty string for invalid inputs.","solution":"import re def unscramble(sentence): Unscramble the sentence based on the digit in each word. Args: sentence (str): A scrambled sentence with each word containing exactly one digit (1-9). Returns: str: The original sentence with words ordered by their digits and digits removed. words = sentence.split() ordered_words = [] # Create a dictionary to store words based on their position word_dict = {} for word in words: match = re.search(r\'d\', word) if match is None or len(re.findall(r\'d\', word)) != 1: return \\"\\" # if word does not contain exactly one digit position = int(match.group()) word_dict[position] = re.sub(r\'d\', \'\', word) # Sort words by their position and join into a sentence ordered_sentence = \' \'.join(word_dict[pos] for pos in sorted(word_dict.keys())) return ordered_sentence"},{"question":"Consider an online bookstore which keeps track of book ratings. Each rating is a number between 1 and 5 (inclusive). For a given list of ratings, the bookstore wants to calculate the average rating, but they want to exclude both the highest and the lowest rating to provide a more balanced view. Write a function that accepts a list of integers representing ratings and returns the average rating as a float after excluding the highest and lowest rating. If there are multiple instances of the highest or lowest rating, only one instance of each is removed. If the list has fewer than 3 ratings, the function should return 0.0 to signify that a meaningful average cannot be calculated. For example, given the ratings `[4, 1, 5, 5, 1, 3, 4]`, the highest rating is `5` and the lowest rating is `1`. After removing one instance each of the highest and lowest ratings, the list becomes `[4, 5, 1, 3, 4]`. The average of this list is `3.4`. ```python def balanced_average(ratings): pass # Example usage: print(balanced_average([4, 1, 5, 5, 1, 3, 4])) # Returns 3.4 print(balanced_average([4, 2])) # Returns 0.0 print(balanced_average([4, 3, 5, 1, 2])) # Returns 3.0 print(balanced_average([1, 2, 3, 4, 5, 6, 7])) # Returns 4.0 print(balanced_average([])) # Returns 0.0 ``` The function should perform the following steps: 1. Check if the list has fewer than 3 elements. If so, return 0.0. 2. Remove one instance of the highest and one instance of the lowest rating from the list. 3. Calculate the average of the remaining ratings and return it as a float. If after removing the highest and lowest rating, the list becomes empty, return 0.0.","solution":"def balanced_average(ratings): Returns the average rating excluding the highest and lowest rating from the list. If the list has fewer than 3 ratings, returns 0.0. if len(ratings) < 3: return 0.0 ratings_copy = sorted(ratings) ratings_copy.pop(0) # Remove the lowest rating ratings_copy.pop(-1) # Remove the highest rating if len(ratings_copy) == 0: return 0.0 return sum(ratings_copy) / len(ratings_copy)"},{"question":"Complete the function that takes a single positive integer `n` and returns the sum of all the even Fibonacci numbers that are less than or equal to `n`. More scientifically: Let `F(i)` denote the i-th Fibonacci number. The function should return `{ sum(F(i)) : F(i) % 2 == 0, F(i) ≤ n }`. Example Given `n = 10`, the function should return `10`, because the even Fibonacci numbers less than or equal to `10` are `2` and `8`, and their sum is `10`. - **Note**: The input values can be very large. You will need an efficient solution to handle large values of `n`.","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers less than or equal to n. a, b = 1, 2 sum_even = 0 while a <= n: if a % 2 == 0: sum_even += a a, b = b, a + b return sum_even"},{"question":"Given a list of integers, your task is to determine whether you can partition the list into two subsets such that the sum of the elements in both subsets is equal. You need to return True if you can partition the list into two such subsets and False otherwise. For example: ``` can_partition([1, 5, 11, 5]) = True Explanation: The given list can be partitioned into [1, 5, 5] and [11]. Both subsets sum up to 11. can_partition([1, 2, 3, 5]) = False Explanation: The given list cannot be partitioned into two subsets that have equal sum. ``` You may assume the length of the input list will not exceed 200 and the sum of the elements will not exceed 10000.","solution":"def can_partition(nums): Determines whether the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If total sum is odd, we cannot partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to store subproblems results dp = [False] * (target + 1) dp[0] = True for num in nums: # Traverse backwards to not overwrite previous results for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Alice has recently learned about prime numbers and their significance in various fields of computer science, including cryptography. As a practice exercise, she decides to write a function that finds all prime numbers up to a certain number `n` using the Sieve of Eratosthenes algorithm. However, she also wants the function to output the sum of these prime numbers. Alice needs your help to implement this. Can you write a function for her to achieve this task? -----Input section----- The input consists of a single integer `n` which denotes the upper limit up to which Alice wants to find the prime numbers. -----Output section----- Output the sum of all prime numbers less than or equal to `n`. -----Input constraints----- 1 ≤ n ≤ 10^6 -----Sample Input----- 10 -----Sample Output----- 17 -----Explanation----- The prime numbers less than or equal to 10 are 2, 3, 5, and 7, and their sum is 17.","solution":"def sum_of_primes(n): Returns the sum of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for i in range(2, int(n**0.5) + 1): if sieve[i]: for j in range(i*i, n + 1, i): sieve[j] = False return sum(i for i in range(2, n + 1) if sieve[i])"},{"question":"**Task: Implement an LRU Cache** **Background information** Least Recently Used (LRU) cache is a type of data structure that allows quick lookups of stored data while maintaining a cap on the size of the stored data. When the limit is reached and a new item must be added, the least recently used item will be removed from the cache to make room for the new item. The cache should provide O(1) time complexity for both the get and put operations. We will implement an LRU Cache using two main operations: 1. **get(key)**: Return the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. 2. **put(key, value)**: Insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. **Your task is to implement the LRUCache class:** ```python class LRUCache: def __init__(self, capacity: int): Initialize the LRU cache with a positive capacity. # Your implementation here def get(self, key: int) -> int: Retrieve the value of the key if found in the cache, otherwise return -1. # Your implementation here def put(self, key: int, value: int) -> None: Insert the value if the key is not already present. If the cache reaches its capacity, invalidate the least recently used item before inserting the new item. # Your implementation here ``` **Example Usage:** ```python # Initialize the cache with a capacity of 2 cache = LRUCache(2) # Add (1, 1) to the cache cache.put(1, 1) # Add (2, 2) to the cache cache.put(2, 2) # Retrieve value for key 1 from the cache, should return 1 print(cache.get(1)) # Output: 1 # Add (3, 3) to the cache, this will remove the least recently used item (2, 2) cache.put(3, 3) # Try to retrieve value for key 2, should return -1 (not found) print(cache.get(2)) # Output: -1 # Add (4, 4) to the cache, this will remove (1, 1) cache.put(4, 4) # Try to retrieve value for key 1, should return -1 (not found) print(cache.get(1)) # Output: -1 # Retrieve value for key 3, should return 3 print(cache.get(3)) # Output: 3 # Retrieve value for key 4, should return 4 print(cache.get(4)) # Output: 4 ``` **Constraints:** - The number of calls to `get` and `put` should be in the range [1, 3000]. - `0 <= key <= 10000` - `0 <= value <= 10^5`","solution":"class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.order = [] def get(self, key: int) -> int: if key in self.cache: self.order.remove(key) self.order.append(key) return self.cache[key] else: return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.order.remove(key) elif len(self.cache) >= self.capacity: lru = self.order.pop(0) del self.cache[lru] self.cache[key] = value self.order.append(key)"},{"question":"You are managing a warehouse and must organize boxes onto shelves. You have a total of `n` boxes, each with a weight. There are `m` shelves available and each shelf has a maximum weight capacity it can hold. Your task is to determine the minimum number of shelves required to store all the boxes without exceeding any shelf\'s weight limit. You can assume that each shelf can only hold up to its maximum capacity and cannot be stacked beyond that. Also, you can place the boxes on any shelf as long as it adheres to the shelf\'s weight limit. -----Input----- The first line contains two integers `n` (`1 ≤ n ≤ 10^5`): the number of boxes, and `m` (`1 ≤ m ≤ 100`): the number of shelves. The second line contains `n` integers, where each integer represents the weight of a box (`1 ≤ weight ≤ 1000`). The next `m` lines each contain a single integer, representing the maximum weight capacity of the respective shelves (`1 ≤ capacity ≤ 10^4`). -----Output----- Print a single integer: the minimum number of shelves required to store all the boxes. If it\'s not possible to store all the boxes, print `-1`. -----Example----- Input 6 3 2 3 5 6 7 8 10 15 20 Output 2 -----Note----- In the example, the six boxes can be divided among the three shelves as: - Shelf 1: boxes of weight 2, 3, and 5 (total weight 10) - Shelf 2: boxes of weight 6 and 7 (total weight 13) - Shelf 3: box of weight 8 (total weight 8) Thus, only two shelves are required to store all the boxes without exceeding any shelf\'s weight limit.","solution":"def min_shelves_required(n, m, box_weights, shelf_capacities): boxes = sorted(box_weights, reverse=True) shelves = sorted(shelf_capacities, reverse=True) used_shelves = [0] * m for box in boxes: placed = False for i in range(m): if used_shelves[i] + box <= shelves[i]: used_shelves[i] += box placed = True break if not placed: return -1 # We want to return the count of non-zero shelves used return len([shelf_weight for shelf_weight in used_shelves if shelf_weight > 0])"},{"question":"You are provided with a `n x n` chessboard and Q queries. Each query provides the coordinates of a starting point (x1, y1) and an ending point (x2, y2). For each query, calculate the sum of all the elements within the specified subrectangle of the chessboard (inclusive of the border cells). The elements on the chessboard are the row-major index of the cells starting from 1. For example, in a 3 x 3 chessboard, the elements are: ``` 1 2 3 4 5 6 7 8 9 ``` Given the queries (1,1) to (2,2), (2,2) to (3,3), the answers would be 12 and 28, respectively. -----Input:----- - First line contains a single integer T, the number of test cases. - For each test case, the first line contains two integers n and Q, representing the size of the chessboard and the number of queries respectively. - The next Q lines each contain four integers x1, y1, x2, y2 representing the top-left and bottom-right coordinates of the subrectangle. -----Output:----- - For each query, print the sum of the elements in the specified subrectangle. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 1000 - 1 leq Q leq 10000 - 1 leq x1, y1, x2, y2 leq n -----Sample Input:----- 1 3 2 1 1 2 2 2 2 3 3 -----Sample Output:----- 12 28 -----Explanation:----- - Query 1: The subrectangle from (1,1) to (2,2) is: ``` 1 2 4 5 ``` Sum: 1+2+4+5 = 12 - Query 2: The subrectangle from (2,2) to (3,3) is: ``` 5 6 8 9 ``` Sum: 5+6+8+9 = 28","solution":"def get_chessboard_sum(n, queries): results = [] for query in queries: x1, y1, x2, y2 = query sum_value = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): sum_value += i * n + (j + 1) results.append(sum_value) return results"},{"question":"In Scala, an indirectly recursive function is one that makes a call to another function, which in turn calls the original function. This indirect recursion can be useful for implementing algorithms that need to alternate between different behaviors or states in each call. Implement two mutually recursive functions, `evenSum` and `oddSum`, that compute the sum of elements at even and odd indices of a given list, respectively. The functions should both handle empty lists gracefully, returning 0 in such cases. For example: ``` val list1 = List(1, 2, 3, 4, 5) evenSum(list1) should return 9 // 1 + 3 + 5 oddSum(list1) should return 6 // 2 + 4 val list2 = List(10, 20, 30, 40) evenSum(list2) should return 40 // 10 + 30 oddSum(list2) should return 60 // 20 + 40 val emptyList = List() evenSum(emptyList) should return 0 oddSum(emptyList) should return 0 val singleElementList = List(7) evenSum(singleElementList) should return 7 oddSum(singleElementList) should return 0 ``` You are not allowed to use loops (for, while) or explicit accumulators (var) in your solution. Use pattern matching and recursion to achieve the result. Define these two functions in a way that they call each other, forming an indirect recursion that processes the input list correctly.","solution":"def evenSum(lst): Returns the sum of elements at even indices in the list. if not lst: return 0 return lst[0] + oddSum(lst[1:]) def oddSum(lst): Returns the sum of elements at odd indices in the list. if not lst: return 0 return evenSum(lst[1:])"},{"question":"Create a function that finds all anagrams of a given word from a list of potential candidates. Your function will receive 2 arguments: a word as a string, and a list of candidate words as a list. Assumptions: * The word and candidate words will only contain lowercase letters. * The list of candidate words can have any number of items, including zero. Examples: ```python find_anagrams(\\"listen\\", [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\"]) ==> returns [\\"inlets\\"] find_anagrams(\\"race\\", [\\"care\\", \\"acer\\", \\"nice\\", \\"hello\\"]) ==> returns [\\"care\\", \\"acer\\"] ```","solution":"def find_anagrams(word, candidates): Returns a list of anagrams of the given word from the list of candidate words. sorted_word = sorted(word) return [candidate for candidate in candidates if sorted(candidate) == sorted_word]"},{"question":"Imagine you are given a list of strings. Your task is to write a function ```common_prefix(lst)``` that finds the longest common prefix in a list of strings. If no common prefix exists, return an empty string. For instance: ```common_prefix([\'apple\', \'ape\', \'april\'])``` should return `\'ap\'`. ```common_prefix([\'car\', \'dog\', \'racecar\'])``` should return `\'\'`. Function signature: ```def common_prefix(lst: List[str]) -> str:``` Constraints: - The length of the input array will be in the range [1, 100]. - All strings in the input array will be of length in the range [1, 100]. - All strings in the input array will contain only lowercase English letters. Your implementation should handle the worst-case scenario efficiently.","solution":"from typing import List def common_prefix(lst: List[str]) -> str: Returns the longest common prefix from a list of strings. If no common prefix exists, returns an empty string. if not lst: return \\"\\" # Sort the list to bring lexicographically smallest and largest strings # at the ends for comparison lst.sort() # The smallest and largest string in sorted list will help determine # the minimum common prefix length first = lst[0] last = lst[-1] # Compare characters one by one between the smallest and largest string i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 # The common prefix is the substring from start to the point where they differ return first[:i]"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine whether it is possible to rearrange the characters in S to form a string that contains no two adjacent characters being the same. -----Input----- The first line of the input contains a single integer T, the number of test cases. T test cases follow. Each test case consists of a single line containing the string S. -----Output----- For each test case, output a single line containing \\"YES\\" if it\'s possible to rearrange the string such that no two adjacent characters are the same. Otherwise, output \\"NO\\". -----Constraints----- 1 ≤ T ≤ 100000 1 ≤ |S| ≤ 100000 The sum of lengths of all strings in a single test does not exceed 100000 -----Example----- Input: 2 aabb aaab Output: YES NO -----Explanation----- Case 1. The string \\"aabb\\" can be rearranged to \\"abab\\", which has no two same adjacent characters, thus the output is \\"YES\\". Case 2. The string \\"aaab\\" has three \'a\'s and one \'b\'. No matter how we arrange these characters, two \'a\'s will always end up next to each other, thus the output is \\"NO\\".","solution":"from collections import Counter def can_rearrange_no_adjacent(T, test_cases): results = [] for S in test_cases: char_count = Counter(S) max_count = max(char_count.values()) if max_count <= (len(S) + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, find two indices such that the elements at these indices sum up to a specific target number. Assume that each input would have exactly one solution, and you may not use the same element twice. Return the indices of the two numbers as a tuple `(index1, index2)` sorted in ascending order. `Note`: Indices start from `1` for this problem. Examples: ```python find_indices([2, 7, 11, 15], 9) => (1, 2) // Because 2 + 7 = 9 find_indices([3, 2, 4], 6) => (2, 3) // Because 2 + 4 = 6 find_indices([3, 3], 6) => (1, 2) // Because 3 + 3 = 6 ```","solution":"def find_indices(nums, target): Given an array of integers, find two indices such that the elements at these indices sum up to the target number. Indices start from 1. :param nums: List[int] - list of integers :param target: int - target sum :return: Tuple[int, int] - tuple of indices sorted in ascending order num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: index1 = num_to_index[complement] + 1 index2 = i + 1 return (index1, index2) if index1 < index2 else (index2, index1) num_to_index[num] = i"},{"question":"Given an integer array, you are required to perform the following types of operations: 1) Update the value at a specific index in the array. 2) Report the product of all elements in the array within a given range. The array is initially filled with positive integers. The operations are provided in the form of queries, where each query is either an update or a product report. # Input Format: - The first line contains an integer `N`, denoting the size of the array. - The second line contains `N` space-separated integers, denoting the elements of the array. - The next line contains an integer `Q`, denoting the number of queries. - The next `Q` lines contain one of the following types of queries: - `\\"U x y\\"`: Update the value at index `x` to `y`. (0-based index) - `\\"P l r\\"`: Report the product of all elements in the range `[l, r]` (inclusive). (0-based indices) # Output Format: - For each query of type `\\"P l r\\"`, print the product of the elements in the specified range. # Constraints: - ( 1 leq N leq 50,000 ) - ( 1 leq A[i] leq 1,000,000 ) - ( 1 leq Q leq 50,000 ) - ( 0 leq x < N ) - ( 0 leq l leq r < N ) - The product of elements in any range will fit within a 64-bit signed integer. # Example: Input: ``` 5 3 2 4 5 6 4 P 0 2 U 3 10 P 1 3 P 0 4 ``` Output: ``` 24 80 1440 ``` Explanation: - For the first query `\\"P 0 2\\"`, the product of the subarray `[3, 2, 4]` is ( 3 times 2 times 4 = 24 ). - The second query `\\"U 3 10\\"` updates the value at index 3 to 10, so the array becomes `[3, 2, 4, 10, 6]`. - For the third query `\\"P 1 3\\"`, the product of the subarray `[2, 4, 10]` is ( 2 times 4 times 10 = 80 ). - For the fourth query `\\"P 0 4\\"`, the product of the subarray `[3, 2, 4, 10, 6]` is ( 3 times 2 times 4 times 10 times 6 = 1440 ).","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [1] * (2 * self.n) for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] * self.tree[2 * i + 1] def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] * self.tree[2 * pos + 1] def query(self, left, right): left += self.n right += self.n + 1 result = 1 while left < right: if left % 2: result *= self.tree[left] left += 1 if right % 2: right -= 1 result *= self.tree[right] left //= 2 right //= 2 return result def process_queries(array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == \'U\': _, x, y = query x = int(x) y = int(y) segment_tree.update(x, y) elif query[0] == \'P\': _, l, r = query l = int(l) r = int(r) result = segment_tree.query(l, r) results.append(result) return results"},{"question":"Write a function, `smallest_missing_positive`, that takes a list of integers and returns the smallest positive integer (greater than 0) that does not appear in the list. Your solution should have a time complexity less than O(n^2). # result positive integer # example smallest_missing_positive([3, 4, -1, 1]) should return 2 smallest_missing_positive([1, 2, 0]) should return 3 # constraints - Your solution should have a time complexity less than O(n^2). - You may assume that the input list will contain at most 100,000 integers. - Duplicates may be present in the list. - The integers in the list can range from -100,000 to 100,000.","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer (greater than 0) that does not appear in the list. nums = [num for num in nums if num > 0] num_set = set(nums) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"# Task: You need to write a function `find_pairs` that takes a list of integers and a target sum as input, then returns a list of unique pairs of numbers from the input list that add up to the target sum. Each pair must be represented as a sorted tuple, and the overall result should be a list of these tuples sorted in ascending order. * If no pairs can be found, the function should return an empty list. # Examples: find_pairs([1, 2, 3, 4, 5], 6): [(1, 5), (2, 4)] find_pairs([5, 6, 7, 8, 9], 12): [(3, 9), (5, 7)] find_pairs([1, 1, 2, 45, 46, 46], 47): [(1, 46), (2, 45)] find_pairs([1, 2, 3, 4], 8): [] Note: Each pair should be listed only once and each number can only be used once in a pair. ```Hint: Use sorting and two-pointer technique to find pairs```","solution":"def find_pairs(nums, target): Returns a list of unique pairs of numbers from the input list that add up to the target sum. Each pair is represented as a sorted tuple, and the result is a list of these tuples sorted in ascending order. nums.sort() left, right = 0, len(nums) - 1 pairs = [] seen = set() while left < right: current_sum = nums[left] + nums[right] if current_sum == target: pair = (nums[left], nums[right]) if pair not in seen: pairs.append(pair) seen.add(pair) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return pairs"},{"question":"Design a function that simulates the path of a robot moving on a 2D grid. The robot starts at the origin (0, 0), and it can move up, down, left, or right based on a sequence of commands. Your task is to determine the robot\'s final position after executing all the commands. # Task Create a function `final_position(commands)` that takes a string of commands and returns the robot\'s final coordinates as a tuple `(x, y)`. ```python def final_position(commands: str) -> (int, int): # your code here ``` # Input - `commands`: A string consisting of the characters \'U\', \'D\', \'L\', \'R\', where each character represents a command for the robot to move up, down, left, or right respectively. * \'U\' means move up (increase y by 1) * \'D\' means move down (decrease y by 1) * \'L\' means move left (decrease x by 1) * \'R\' means move right (increase x by 1) # Output - Returns a tuple `(x, y)` representing the final position of the robot. # Example ```python print(final_position(\\"UDLR\\")) # Output: (0, 0) print(final_position(\\"UUU\\")) # Output: (0, 3) print(final_position(\\"RRDD\\")) # Output: (2, -2) ``` # Notes - The robot always starts at the origin (0,0). - The string may be empty, in which case the robot remains at the origin. - The final position should be returned as a tuple `(x, y)`.","solution":"def final_position(commands: str) -> (int, int): Determines the robot\'s final position on a 2D grid after a sequence of commands. Arguments: commands -- A string consisting of the characters \'U\', \'D\', \'L\', \'R\'. Returns: A tuple representing the final coordinates (x, y). x, y = 0, 0 # start at origin for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Student has a list of N integers. They want to sort this list, but with a twist. They want all the odd numbers to come before the even numbers, while maintaining the relative order of odd and even numbers from the original list. Help the student by writing a function that performs this operation. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines. - The first line contains an integer N. - The second line contains N space-separated integers representing the list. -----Output:----- For each test case, output the rearranged list, with all odd numbers before even numbers, maintaining the relative order of odds and evens. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 0 leq each integer leq 10000 -----Sample Input:----- 2 5 1 2 3 4 5 6 4 1 3 2 7 6 -----Sample Output:----- 1 3 5 2 4 1 3 7 4 2 6","solution":"def rearrange_list(N, integers): Rearranges the list such that all odd numbers come before the even numbers, while maintaining the relative order of odds and evens from the original list. odd_numbers = [x for x in integers if x % 2 != 0] even_numbers = [x for x in integers if x % 2 == 0] return odd_numbers + even_numbers def process_input(T, test_cases): Handles multiple test cases for rearrange_list function. results = [] for i in range(T): N = test_cases[i][0] integers = test_cases[i][1] rearranged_list = rearrange_list(N, integers) results.append(rearranged_list) return results"},{"question":"The wizard is creating a unique series of numbers to perform a complicated spell. Each number in the series is generated based on the previously given number and follows a specific mathematical operation. The wizard needs your help to generate these numbers accurately. ----Input:---- - The first line will contain N, the number of test cases. - Each test case contains a single line of input, one integer M. ----Output:---- For each test case, output the series of numbers in a single line separated by spaces, starting from 1 up to the Mth number, where each number follows the generated pattern described below. ----Constraints---- - 1 leq N leq 100 - 1 leq M leq 50 ----Sample Input:---- 3 1 2 5 ----Sample Output:---- 1 1 2 1 3 5 7 9 ----Explanation:---- For M = 1, the series is \\"1\\" (starting from 1) For M = 2, the series is \\"1 2\\" (starting from 1 and then add 1) For M = 5, the series is \\"1 3 5 7 9\\" (starting from 1 and then add 2, then 2 again, and so on, increasing each next term by 2 compared to the previous term)","solution":"def generate_series(M): Generates the series of numbers as per the given specification. The series starts from 1 and each next term is 2 greater than the previous. Parameters: M (int): The length of the series to generate. Returns: list: The generated series of length M. series = [] current_number = 1 for i in range(M): series.append(current_number) current_number += 2 return series def main(test_cases): results = [] for M in test_cases: series = generate_series(M) results.append(series) return results"},{"question":"A gardener is planning the layout of a new garden. He wants to plant rows of flowers, each row having the same total height, but he also wants the least number of rows possible. Given an array of integers that represent the height of each flower, help the gardener find the smallest number of rows needed to plant all the flowers so that the sum of heights in each row is equal. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: - The first line contains one integer N, the number of flowers. - The second line contains N space-separated integers representing the height of each flower. -----Output:----- For each test case, output a single line containing the minimum number of rows required. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 1 leq height[i] leq 1000 -----Sample Input:----- 2 5 1 2 2 3 3 4 2 2 1 1 -----Sample Output:----- 3 2 -----EXPLANATION:----- For the first test case, one possible arrangement is: - Row 1: [1, 3] (Total height = 4) - Row 2: [2, 2] (Total height = 4) - Row 3: [3] (Total height = 3) For the second test case, one possible arrangement is: - Row 1: [2, 1, 1] (Total height = 4) - Row 2: [2] (Total height = 2)","solution":"from collections import Counter def min_number_of_rows(T, test_cases): results = [] for i in range(T): N, heights = test_cases[i] height_counter = Counter(heights) max_count = max(height_counter.values()) results.append(max_count) return results"},{"question":"You are organizing a small competition where participants roll a single six-sided die multiple times, and you want to keep track of the results in a unique way. Specifically, you want to output the rolls in a compressed format that displays each consecutive series of the same number in the format of `number:count`. For example: - If the rolls are `1112233`, the compressed format should be `1:3,2:2,3:2`. - If the rolls are `5566661`, the compressed format should be `5:2,6:4,1:1`. Write a function `compress_rolls` that takes a string representing the rolls of the die and returns the compressed format. # Function Signature ```python def compress_rolls(rolls: str) -> str: ``` # Input - `rolls`: A string of length `n` (1 ≤ n ≤ 100), representing the rolls of the die. Each character in the string is a number between `1` and `6`. # Output - The function should return a single string in the compressed format described above. # Example ```python >>> compress_rolls(\\"1112233\\") \\"1:3,2:2,3:2\\" >>> compress_rolls(\\"5566661\\") \\"5:2,6:4,1:1\\" ``` You can assume that the input will always be valid: - The input string will have a length of at least 1 and at most 100. - Each character in the string will be a digit between \'1\' and \'6\'.","solution":"def compress_rolls(rolls: str) -> str: if not rolls: return \\"\\" result = [] current_char = rolls[0] count = 1 for char in rolls[1:]: if char == current_char: count += 1 else: result.append(f\\"{current_char}:{count}\\") current_char = char count = 1 result.append(f\\"{current_char}:{count}\\") return \\",\\".join(result)"},{"question":"You are given a string expression representing a simple mathematical formula that consists only of positive integers and the operators +, -, * and /. There are no parentheses, and operator precedence should be respected (i.e., * and / are evaluated before + and -). Write a function that evaluates the expression and returns the result as a float. The input string is guaranteed to be a valid mathematical expression. Examples: ```python evaluate_expression(\\"3+5\\") # Returns: 8.0 evaluate_expression(\\"10+2*6\\") # Returns: 22.0 evaluate_expression(\\"100*2+12\\") # Returns: 212.0 evaluate_expression(\\"100*2/5\\") # Returns: 40.0 evaluate_expression(\\"10*2-5/5+3\\") # Returns: 22.0 ``` # Constraints: - The input string length does not exceed 100 characters. - The operations are always valid and do not produce division by zero.","solution":"def evaluate_expression(expression): Evaluates a simple mathematical expression string consisting of positive integers and the operators +, -, *, and /. Operator precedence is respected. import re # Split expression into tokens of numbers and operators tokens = re.findall(r\'d+|+|-|*|/\', expression) # Lists to hold numbers and operators separately values = [] operators = [] def apply_operator(operators, values): rhs = values.pop() lhs = values.pop() op = operators.pop() if op == \'+\': values.append(lhs + rhs) elif op == \'-\': values.append(lhs - rhs) elif op == \'*\': values.append(lhs * rhs) elif op == \'/\': values.append(lhs / rhs) # Precedences for operators precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} for token in tokens: if token.isdigit(): # Push number to values stack values.append(float(token)) else: # Token is an operator while (operators and precedence[operators[-1]] >= precedence[token]): apply_operator(operators, values) operators.append(token) # Apply remaining operators while operators: apply_operator(operators, values) # The final value on the values stack is the result return values[0]"},{"question":"You are given an array of positive integers where each integer represents the height of a vertical bar. The width of each bar is identical. Find the area of the largest rectangle that can be formed in the histogram by choosing a set of consecutive bars. # Example Example 1: Input: [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle can be formed with the bars heights [5, 6] which has an area of 5 * 2 = 10. Example 2: Input: [2,4] Output: 4 Explanation: The largest rectangle can be formed using either bar, both have an area of 2 * 1 = 2 Your goal is to determine the maximum area of the rectangle using any subset of consecutive bars. # Constraints: - The length of the input array will be between 1 and 1000. - Each integer in the input array will be between 1 and 10^5.","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can be formed in the histogram represented by the heights array. stack = [] max_area = 0 heights.append(0) # Append a zero height to ensure the stack is emptied at the end. for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"You are given two positive integers n and m (1 le n, m le 100). You need to fill an n times m grid such that each cell contains a positive integer, and the sum of the integers in each row is equal to the sum of the integers in each column. Determine if such a grid is possible, and if so, construct the grid. To clarify, the sums can be any positive integers, but they have to be identical across all rows and across all columns. For example, for n=3, m=3, one possible 3x3 grid could be: begin{vmatrix} 1 & 1 & 1 1 & 1 & 1 1 & 1 & 1 end{vmatrix} In this grid, each row sums to 3 and each column sums to 3. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case is described by two positive integers n and m (1 le n, m le 100), where n and m are the dimensions of the grid. -----Output----- For each test case, print: \\"YES\\" (without quotes) and the required grid (if there are several answers, print any) if it exists, or \\"NO\\" (without quotes) if it does not exist. To print the grid n times m, print n rows, each of which consists of m positive integers separated by spaces. -----Example----- Input 4 3 3 2 2 4 5 1 6 Output YES 1 1 1 1 1 1 1 1 1 YES 1 1 1 1 YES 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 YES 1 1 1 1 1 1","solution":"def construct_grid(t, dimensions): results = [] for n, m in dimensions: # we can always construct a grid where each element is 1, which satisfies the sum condition grid = [[1] * m for _ in range(n)] result_str = \\"YESn\\" + \\"n\\".join(\\" \\".join(map(str, row)) for row in grid) results.append(result_str) return \\"n\\".join(results) # Read input in the format of test cases and dimensions (for actual implementation) # t = int(input()) # dimensions = [tuple(map(int, input().split())) for _ in range(t)] # output = construct_grid(t, dimensions) # print(output)"},{"question":"Given a 2D matrix matrix, handle multiple queries of the following types: 1. update(row, col, val) - Update the element at position (row, col) to val. 2. sumRegion(row1, col1, row2, col2) - Calculate the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). Example: Given matrix = [ [3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5] ] sumRegion(2, 1, 4, 3) -> 8 update(3, 2, 2) sumRegion(2, 1, 4, 3) -> 10 Note: - The matrix is only modifiable by the update function. - You may assume the number of calls to update and sumRegion function is distributed evenly.","solution":"class NumMatrix: def __init__(self, matrix): if not matrix or not matrix[0]: return self.matrix = matrix self.rows, self.cols = len(matrix), len(matrix[0]) self.tree = [[0] * (self.cols + 1) for _ in range(self.rows + 1)] self.nums = [[0] * self.cols for _ in range(self.rows)] for r in range(self.rows): for c in range(self.cols): self.update(r, c, matrix[r][c]) def update(self, row, col, val): if not self.matrix: return delta = val - self.nums[row][col] self.nums[row][col] = val r, c = row + 1, col + 1 while r <= self.rows: while c <= self.cols: self.tree[r][c] += delta c += c & -c r += r & -r c = col + 1 # reset c for the next iteration of r def sumRegion(self, row1, col1, row2, col2): if not self.matrix: return 0 return (self._sum(row2 + 1, col2 + 1) - self._sum(row1, col2 + 1) - self._sum(row2 + 1, col1) + self._sum(row1, col1)) def _sum(self, row, col): total = 0 r, c = row, col while r > 0: while c > 0: total += self.tree[r][c] c -= c & -c r -= r & -r c = col # reset c for the next iteration of r return total"},{"question":"Given a string containing only lowercase letters, you need to remove all instances of a specific character and then reverse the resulting string. Write a function that takes in a string and a character to remove, and returns the processed string. Function Signature: ```python def remove_and_reverse(input_string: str, remove_char: str) -> str: # your code here ``` Example: ```python input_string = \\"hello\\" remove_char = \\"l\\" Result: \\"oeh\\" input_string = \\"abcdefg\\" remove_char = \\"e\\" Result: \\"gfbdca\\" ``` Note: - The function should be case-sensitive, meaning it distinguishes between \'a\' and \'A\'. - You may assume that the `remove_char` is always a single lowercase letter.","solution":"def remove_and_reverse(input_string: str, remove_char: str) -> str: Removes all instances of remove_char from input_string and returns the reversed result. # Remove all instances of remove_char filtered_string = input_string.replace(remove_char, \'\') # Reverse the filtered string and return it reversed_string = filtered_string[::-1] return reversed_string"},{"question":"In a bustling city, there are n traffic lights aligned on a straight road. Each traffic light can show either a green light or a red light. You want to find the minimum number of traffic lights you need to switch from red to green so that there is at least one segment of k consecutive green lights on the road. Note that you are given the initial color of each traffic light. -----Input----- The first line of the input contains two integers n (1 le n le 100) and k (1 le k le n) — the number of traffic lights and the required segment length of consecutive green lights. The second line contains a string of n characters, where each character is either \'R\' (red) or \'G\' (green), representing the initial state of each traffic light. -----Output----- Print a single integer — the minimum number of traffic lights you need to switch from red to green to have at least one segment of k consecutive green lights. -----Example----- Input 7 3 RRGGRRR Output 1 -----Note----- In the given example, you need at least one segment of 3 consecutive green lights. You can achieve this by changing the first \'R\' to \'G\', thus forming the segment \\"GGG\\". Therefore, the answer is 1.","solution":"def min_switches_to_consecutive_green(n, k, state): Returns the minimum number of switches required to get at least one segment of k consecutive green lights. min_switches = float(\'inf\') for i in range(n - k + 1): segment = state[i:i + k] switches = segment.count(\'R\') min_switches = min(min_switches, switches) return min_switches"},{"question":"Given a string `s` and a list of strings `words`, return an array of integers representing the starting indices of all substrings in `s` that are a concatenation of each word in `words` exactly once and without any intervening characters. For example: ```python findSubstring(\\"barfoothefoobarman\\", [\\"foo\\", \\"bar\\"]); ``` should return ```python [0, 9] ``` (Note: The order of the concatenated words does not matter.) ```if:python Ensure all strings in `words` are of the same length. The input string `s` and the words in the list `words` contain only lowercase English letters. ```","solution":"def findSubstring(s, words): Returns the starting indices of all substrings in s that are a concatenation of each word in words exactly once. if not words or not s: return [] word_len = len(words[0]) total_words_len = word_len * len(words) words_count = {} for word in words: if word in words_count: words_count[word] += 1 else: words_count[word] = 1 result_indices = [] for i in range(len(s) - total_words_len + 1): seen_words = {} for j in range(0, len(words)): word_start = i + j * word_len word = s[word_start:word_start + word_len] if word in words_count: if word in seen_words: seen_words[word] += 1 else: seen_words[word] = 1 if seen_words[word] > words_count[word]: break else: break if seen_words == words_count: result_indices.append(i) return result_indices"},{"question":"A sequence of integers a_1, a_2, ..., a_n is called \\"balanced\\" if for every 1 ≤ i ≤ n, the sum of the elements to the left of a_i is equal to the sum of the elements to the right of a_i. You are given an integer n. Determine if there exists a balanced sequence of length n. If such a sequence exists, print it. Otherwise, print \\"-1\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. -----Output----- Print \\"-1\\" (without the quotes) if no balanced sequence exists. Otherwise, print n integers a_1, a_2, ..., a_n separated by spaces representing the balanced sequence. -----Examples----- Input 1 Output 0 Input 2 Output -1 Input 3 Output 1 0 1 Input 4 Output -1 Note: - For n = 1, the sequence [0] is balanced. - For n = 2, no such sequence exists. - For n = 3, the sequence [1, 0, 1] is balanced.","solution":"def find_balanced_sequence(n): Determines if a balanced sequence of length n exists. If exists, returns the sequence as a list of integers. If not, returns -1. if n % 2 == 0: return -1 else: half = n // 2 sequence = [1] * half + [0] + [1] * half return sequence"},{"question":"Create a function `find_majority_element(nums)` that takes a list of integers `nums` and returns the majority element, if it exists. The majority element is the element that appears more than `n // 2` times, where `n` is the length of the list. If no such element exists, return `None`. The function should handle an empty list by returning `None`. For example: ``` find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) should return 4 find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) should return None ```","solution":"def find_majority_element(nums): Returns the majority element if it exists, else returns None. A majority element is an element that appears more than n // 2 times, where n is the length of the list. n = len(nums) if n == 0: return None element_count = {} for num in nums: element_count[num] = element_count.get(num, 0) + 1 if element_count[num] > n // 2: return num return None"},{"question":"=====Function Descriptions===== Python makes it extremely easy to perform operations on collections of items. Among the most frequently used collections are lists and sets. Sets are a great tool for storing and performing operations on unique items. Python provides a multitude of methods to work with sets, such as union, intersection, difference, and symmetric difference. For instance, given two sets a and b: - The union of a and b is the set of elements that belong to a or b or both. It is calculated like this: >>> a.union(b) - The intersection of a and b is the set of elements that both a and b have in common. It can be computed like this: >>> a.intersection(b) - The difference of a and b is the set of elements that are in a but not in b. You can find it like this: >>> a.difference(b) - The symmetric difference of a and b is the set of elements that are in either a or b but not in both. This can be found using: >>> a.symmetric_difference(b) =====Problem Statement===== You are given two sets, each containing exactly ten unique integers. Print four lines: - The first line should contain the union of the two sets sorted in ascending order. - The second line should contain the intersection of the two sets sorted in ascending order. - The third line should contain the difference of the first set and the second set sorted in ascending order. - The fourth line should contain the symmetric difference of the two sets sorted in ascending order. =====Input Format===== The first line contains ten space-separated integers representing the first set. The second line contains ten space-separated integers representing the second set. =====Constraints===== Each integer is in the range 1 to 100, inclusive. =====Sample Input===== ``` 1 2 3 4 5 6 7 8 9 10 5 6 7 8 9 10 11 12 13 14 ``` =====Sample Output===== ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 5 6 7 8 9 10 1 2 3 4 1 2 3 4 11 12 13 14 ```","solution":"def set_operations(a, b): Returns the union, intersection, difference, and symmetric difference of two sets, sorted in ascending order. a_set = set(a) b_set = set(b) union_result = sorted(a_set.union(b_set)) intersection_result = sorted(a_set.intersection(b_set)) difference_result = sorted(a_set.difference(b_set)) sym_difference_result = sorted(a_set.symmetric_difference(b_set)) return union_result, intersection_result, difference_result, sym_difference_result"},{"question":"Implement a function that simulates a basic calculator that can handle simple arithmetic operations. The function should meet these requirements: + Accepts a string as its parameter representing a mathematical expression (ex. `\\"5+6\\"` or `\\"12-4\\"`) + Supports the four basic arithmetic operations: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`) + Returns the result of the calculation as a number **Note:** The input expression will always be a valid expression consisting of two integers and one operator. The integers should be non-negative, and the result should be a finite number (i.e., division by zero should not occur). Example ``` \\"5+6\\" --> 11 \\"12-4\\" --> 8 \\"7*3\\" --> 21 \\"20/5\\" --> 4 ```","solution":"def basic_calculator(expression): Simulates a basic calculator that can handle simple arithmetic operations. Parameters: expression (str): A string representing a mathematical expression (e.g., \\"5+6\\") Returns: float: The result of the calculation. if \'+\' in expression: numbers = expression.split(\'+\') return float(numbers[0]) + float(numbers[1]) elif \'-\' in expression: numbers = expression.split(\'-\') return float(numbers[0]) - float(numbers[1]) elif \'*\' in expression: numbers = expression.split(\'*\') return float(numbers[0]) * float(numbers[1]) elif \'/\' in expression: numbers = expression.split(\'/\') return float(numbers[0]) / float(numbers[1])"},{"question":"Write a function to convert a given time duration in seconds into a formatted string representing days, hours, minutes, and seconds. # Inputs: `duration_sec` - An integer representing the total duration in seconds. It must be non-negative. # Outputs: A string formatted as follows: `DD days, HH hours, MM minutes, and SS seconds` With: - `DD`: days - `HH`: hours - `MM`: minutes - `SS`: seconds # Example Input: `duration_sec = 93784` Output: `1 days, 2 hours, 3 minutes, and 4 seconds`","solution":"def format_duration(duration_sec): Converts a duration from seconds into a formatted string of \'DD days, HH hours, MM minutes, and SS seconds\'. Parameters: duration_sec (int): Duration in seconds (must be non-negative). Returns: str: Formatted time duration. days = duration_sec // (24 * 3600) duration_sec %= (24 * 3600) hours = duration_sec // 3600 duration_sec %= 3600 minutes = duration_sec // 60 seconds = duration_sec % 60 return f\\"{days} days, {hours} hours, {minutes} minutes, and {seconds} seconds\\""},{"question":"Implement a Playlist class to manage a music playlist. The class should support the following operations: 1. Playlist() - Initializes an empty playlist. 2. void addTrack(int trackId, String trackName) - Adds a track with the given trackId and trackName to the playlist. 3. boolean removeTrack(int trackId) - Removes the track with the given trackId from the playlist. Returns true if the track was removed, otherwise returns false. 4. String playNext() - Plays the next track in the playlist and removes it from the list. If there are no tracks left, returns \\"No tracks to play\\". 5. List<String> getPlaylist() - Returns a list of all track names currently in the playlist in the order they were added. Example 1: Input [\\"Playlist\\", \\"addTrack\\", \\"addTrack\\", \\"addTrack\\", \\"getPlaylist\\", \\"playNext\\", \\"getPlaylist\\", \\"removeTrack\\", \\"removeTrack\\", \\"getPlaylist\\"] [[], [1, \\"Song A\\"], [2, \\"Song B\\"], [3, \\"Song C\\"], [], [], [], [2], [4], []] Output [null, null, null, null, [\\"Song A\\", \\"Song B\\", \\"Song C\\"], \\"Song A\\", [\\"Song B\\", \\"Song C\\"], true, false, [\\"Song C\\"]] Explanation Playlist playlist = new Playlist(); playlist.addTrack(1, \\"Song A\\"); // Playlist becomes [\\"Song A\\"] playlist.addTrack(2, \\"Song B\\"); // Playlist becomes [\\"Song A\\", \\"Song B\\"] playlist.addTrack(3, \\"Song C\\"); // Playlist becomes [\\"Song A\\", \\"Song B\\", \\"Song C\\"] playlist.getPlaylist(); // Returns [\\"Song A\\", \\"Song B\\", \\"Song C\\"] playlist.playNext(); // Plays \\"Song A\\" and removes it from the playlist, returns \\"Song A\\". Playlist becomes [\\"Song B\\", \\"Song C\\"] playlist.getPlaylist(); // Returns [\\"Song B\\", \\"Song C\\"] playlist.removeTrack(2); // Removes the track with trackId 2, returns true. Playlist becomes [\\"Song C\\"] playlist.removeTrack(4); // Attempt to remove a non-existent track, returns false playlist.getPlaylist(); // Returns [\\"Song C\\"] Constraints: - Track IDs and track names are unique. - There will be at most 1000 operations performed. - Track names will be non-empty strings with a maximum length of 100 characters. - Track IDs will be positive integers.","solution":"class Playlist: def __init__(self): self.playlist = [] self.track_map = {} def addTrack(self, trackId, trackName): if trackId not in self.track_map: self.playlist.append(trackName) self.track_map[trackId] = trackName def removeTrack(self, trackId): if trackId in self.track_map: trackName = self.track_map.pop(trackId) self.playlist.remove(trackName) return True return False def playNext(self): if not self.playlist: return \\"No tracks to play\\" next_track = self.playlist.pop(0) for trackId, trackName in list(self.track_map.items()): if trackName == next_track: del self.track_map[trackId] break return next_track def getPlaylist(self): return self.playlist"},{"question":"Write a function that takes a string of comma-separated numbers as input and returns the sum of the squares of those numbers. Assume the input string will always contain valid integers separated by commas. For example, ``` input: \\"1,2,3,4\\" output: 30 Explanation: 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30 ``` Another example, ``` input: \\"10,20,30\\" output: 1400 Explanation: 10^2 + 20^2 + 30^2 = 100 + 400 + 900 = 1400 ``` Write a function `sum_of_squares(input_string)` that implements this functionality.","solution":"def sum_of_squares(input_string): Returns the sum of the squares of the numbers in the comma-separated string. Parameters: input_string (str): A string of comma-separated numbers. Returns: int: The sum of the squares of the input numbers. numbers = map(int, input_string.split(\',\')) return sum(number ** 2 for number in numbers)"},{"question":"Given a series of beakers, each containing an initial amount of a certain chemical, you are to perform a sequence of mixing operations. In each mixing operation, you take a specified amount of chemical from one beaker and add it to another. Your task is to determine the final amount of chemical in each beaker after performing all the given mixing operations. -----Constraints----- - All values in input are integers. - 1 leq N leq 100000 - 0 leq V_i leq 10^9 - 1 leq M leq 200000 - 1 leq A_i, B_i leq N - 1 leq K_i leq V_{A_i} -----Input----- Input is given from Standard Input in the following format: N M V_1 V_2 ldots V_N (A_1 B_1 K_1) (A_2 B_2 K_2) ldots (A_M B_M K_M) The first line contains two integers, N and M, representing the number of beakers and the number of mixing operations respectively. The second line contains N integers V_1, V_2, ..., V_N, representing the initial amounts of chemical in each beaker. The next M lines each contain three integers A_i, B_i, and K_i representing the i-th mixing operation: transfer K_i units of chemical from beaker A_i to beaker B_i. -----Output----- Print a line containing N integers separated with space, representing the final amounts of chemical in each beaker after all mixing operations. -----Sample Input----- 3 3 10 5 8 1 2 3 2 3 4 3 1 5 -----Sample Output----- 12 4 7 Explanation of Sample Input and Output: 1. Initially, the beakers contain [10, 5, 8] 2. Transfer 3 units from beaker 1 to beaker 2: [7, 8, 8] 3. Transfer 4 units from beaker 2 to beaker 3: [7, 4, 12] 4. Transfer 5 units from beaker 3 to beaker 1: [12, 4, 7] Thus, the final amounts of chemical in each beaker are [12, 4, 7]","solution":"def final_amounts(N, M, V, operations): for operation in operations: A, B, K = operation V[A - 1] -= K # Since A is 1-indexed, we use A-1 for 0-indexed list V[B - 1] += K # Since B is 1-indexed, we use B-1 for 0-indexed list return V"},{"question":"Your task is to implement a simplified version of the A* algorithm for navigating a robot in a 2D grid. The robot starts at position `(0,0)` of the grid and needs to reach the bottom-right corner `(n-1, n-1)`. The grid contains cells marked as `0` (walkable) and `1` (obstacle). The robot can move up, down, left, or right but cannot move diagonally. It cannot move through cells marked as obstacles. The A* algorithm combines features of both Dijkstra\'s and Greedy Best-First-Search. It uses both the actual path cost from the start (g) and the estimated cost to the goal (h). For this implementation, we will use the Manhattan distance as the heuristic, which is the sum of the absolute differences of the current cell\'s coordinates from the goal coordinates. You need to write a function `shortest_path` that takes a 2D grid and returns the length of the shortest path from `(0,0)` to `(n-1,n-1)`. If there is no possible path, return `-1`. Here are the function signatures: - Python: `def shortest_path(grid: List[List[int]]) -> int` **Examples:** ```python assert shortest_path([[0,0,0], [0,1,0], [0,0,0]]) == 4 assert shortest_path([[0,1], [1,0]]) == -1 assert shortest_path([[0,0,1], [1,0,1], [1,0,0]]) == 4 ``` **Constraints:** 1. The grid is an `n x n` array where `1 <= n <= 100`. 2. The grid cells contain either a `0` or `1`. 3. If the start or end cell is `1`, return `-1` because it is not possible to start or finish there. 4. If `n` is `1` and the cell is `0`, return `0` since no movement is needed.","solution":"from heapq import heappush, heappop from typing import List, Tuple def manhattan_distance(x1: int, y1: int, x2: int, y2: int) -> int: return abs(x1 - x2) + abs(y1 - y2) def shortest_path(grid: List[List[int]]) -> int: n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(0,1), (1,0), (0,-1), (-1,0)] open_set = [(0 + manhattan_distance(0, 0, n-1, n-1), 0, 0, 0)] while open_set: f, g, x, y = heappop(open_set) if (x, y) == (n-1, n-1): return g if grid[x][y] == 2: continue grid[x][y] = 2 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0: heappush(open_set, (g + 1 + manhattan_distance(nx, ny, n-1, n-1), g + 1, nx, ny)) return -1"},{"question":"=====Problem Statement===== You have been assigned the task of validating passwords for a secured system. A valid password should satisfy the following criteria: 1. It must contain at least one lowercase letter. 2. It must contain at least one uppercase letter. 3. It must contain at least one digit. 4. It must contain at least one special character from the set: [@, #, , %, &, *]. 5. Its length must be between 8 to 16 characters (inclusive). Write a function `validate_password` which accepts a string as an argument and returns a boolean value: `True` if the string meets the password requirements, and `False` otherwise. =====Function Signature===== ```python def validate_password(password: str) -> bool: ``` =====Input Format===== A single string representing the password to be validated. =====Constraints===== 1 <= len(password) <= 100 =====Output Format===== A boolean value (True or False) indicating whether the password is valid. =====Sample Input===== ``` Password@123 ``` =====Sample Output===== ``` True ``` =====Explanation===== The string \\"Password@123\\" contains at least one lowercase letter, one uppercase letter, one digit, one special character, and the length is within the specified range, so it satisfies all the requirements. =====Sample Input===== ``` password ``` =====Sample Output===== ``` False ``` =====Explanation===== The string \\"password\\" lacks an uppercase letter, a digit, and a special character, thus failing to meet all the password requirements.","solution":"import re def validate_password(password: str) -> bool: Validate the password based on the given criteria. if not 8 <= len(password) <= 16: return False if not re.search(r\\"[a-z]\\", password): return False if not re.search(r\\"[A-Z]\\", password): return False if not re.search(r\\"d\\", password): return False if not re.search(r\\"[@#%&*]\\", password): return False return True"},{"question":"Given a string `s` and an array of substrings `words`, find the starting indices of all substrings in `s` that are concatenations of each word in `words` exactly once, without any intervening characters. Each of the words in `words` is of the same length. Write a function that returns a list of starting indices of such substrings. # Example ``` Input: s = \\"barfoothefoobarman\\", words = [\\"foo\\",\\"bar\\"] Output: [0,9] Input: s = \\"wordgoodgoodgoodbestword\\", words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: [] ``` # Constraints * `1 <= s.length <= 10^4` * `1 <= words.length <= 5000` * `1 <= words[i].length <= 30`","solution":"def findSubstring(s, words): from collections import Counter if not s or not words: return [] word_length = len(words[0]) word_count = len(words) total_length = word_length * word_count words_counter = Counter(words) result = [] for i in range(word_length): start = i current_counter = Counter() for j in range(i, len(s) - word_length + 1, word_length): word = s[j:j + word_length] if word in words_counter: current_counter[word] += 1 while current_counter[word] > words_counter[word]: current_counter[s[start:start + word_length]] -= 1 start += word_length if j + word_length - start == total_length: result.append(start) else: current_counter.clear() start = j + word_length return result"},{"question":"A string is defined to be a \\"balanced string\\" if it has an equal number of lowercase \'a\' and \'b\' characters, regardless of their order in the string. For instance, the strings \\"abab\\", \\"aabb\\", and \\"bbbaaa\\" are all balanced strings. On the other hand, the strings \\"aaab\\", \\"aab\\", and \\"bba\\" are not balanced. Write a function called `isBalancedString` that accepts a string and returns `true` if the string is balanced according to the criteria above, and `false` otherwise. Examples: ``` - \\"aabbab\\" is balanced because it contains 3 \'a\'s and 3 \'b\'s. - \\"abcbaa\\" is not balanced because, although it contains both \'a\' and \'b\' characters, it has 3 \'a\'s and only 1 \'b\'. - \\"bbbaaa\\" is balanced because it contains 3 \'a\'s and 3 \'b\'s. - \\"aaaabbbb\\" is balanced because it contains 4 \'a\'s and 4 \'b\'s. - \\"ab\\" is balanced because it contains 1 \'a\' and 1 \'b\'. ``` ```python def isBalancedString(s: str) -> bool: return s.count(\'a\') == s.count(\'b\') ```","solution":"def isBalancedString(s: str) -> bool: Returns True if the string has an equal number of \'a\' and \'b\' characters, False otherwise. return s.count(\'a\') == s.count(\'b\')"},{"question":"Write a function that simulates a basic arithmetic expression evaluator. The function should accept a string containing a simple arithmetic expression with non-negative integers and the operators +, -, *, and / (integer division). The expression will not have any parentheses and the operators will perform arithmetic calculations obeying the standard operator precedence rules (*/ before +-). The function should return the result of evaluating the expression as an integer. For example: - evaluate_expression(\\"3+5*2\\") should return 13 - evaluate_expression(\\"10/2-3\\") should return 2","solution":"def evaluate_expression(expression): import re def parse_expression(expression): tokens = re.findall(r\'d+|[+/*-]\', expression) return tokens def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) tokens = parse_expression(expression) values = [] operators = [] precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} for token in tokens: if token.isdigit(): values.append(int(token)) else: while (operators and precedence[operators[-1]] >= precedence[token]): apply_operator(operators, values) operators.append(token) while operators: apply_operator(operators, values) return values[0]"},{"question":"# Task Given an array of integers, find all unique triplets in the array which gives the sum of zero. # Example For `nums = [-1, 0, 1, 2, -1, -4]`, the output should be `[[ -1, -1, 2 ], [ -1, 0, 1 ]]` For `nums = [0, 1, 1]`, the output should be `[]` For `nums = [ 0, 0, 0 ]`, the output should be `[[0, 0, 0]]` # Input/Output - `[input]` integer array `nums` Array of integers. Constraints: `0 ≤ nums.length ≤ 3000, -10^5 ≤ nums[i] ≤ 10^5.` - `[output]` a 2D integer array An array of all unique triplets in `nums` which gives the sum of zero. Any triplet can be in any order within the inner array, but the elements in the output array must be sorted in non-descending order.","solution":"def three_sum(nums): Returns all unique triplets in the array which sum to zero. nums.sort() result = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, length - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"You are given an array of integers where each element represents the height of a building. An observer is standing to the left of the array and looking to the right. The observer can see a building if and only if that building is taller than all the buildings to its left. Write a function that returns the number of buildings that are visible to the observer. Example 1: Input: [3, 7, 8, 3, 6, 1] Output: 3 Explanation: The observer can see the buildings with heights 3, 7, and 8. The building with height 6 is not visible because it is blocked by the building with height 8. Example 2: Input: [1, 2, 3, 4, 5] Output: 5 Explanation: The observer can see all the buildings as each building is taller than the previous one. Example 3: Input: [5, 4, 3, 2, 1] Output: 1 Explanation: The observer can only see the first building as all subsequent buildings are shorter. Note: 1. The length of the array will be between 1 and 1000. 2. Each element of the array will be a positive integer not exceeding 1000.","solution":"def count_visible_buildings(heights): Returns the number of buildings visible to the observer standing to the left. if not heights: return 0 max_height = heights[0] count = 1 # The first building is always visible for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"A florist is organizing her inventory and needs a program that will help her categorize the flowers based on their properties. Each flower is identified by its type and color. She wants to organize these flowers such that all flowers of the same type are grouped together, and within each type, they are sorted by color. -----Input:----- - The first line contains an integer N, the number of test cases. - For each test case, the first line contains an integer M, the number of flowers. - Then M lines follow, each containing two strings: the type and color of the flower. -----Output:----- For each test case, output the type of flower followed by its colors, sorted alphabetically within each type. Types should also be listed alphabetically. -----Constraints----- - 1 leq N leq 5 - 1 leq M leq 15 - The type and color strings contain only lowercase English letters and have lengths between 1 and 10. -----Sample Input:----- 2 3 rose red lily white rose yellow 4 tulip purple daffodil yellow rose pink daffodil white -----Sample Output:----- lily white rose red yellow daffodil white yellow rose pink tulip purple -----EXPLANATION:----- In the first test case, the type of flowers \\"rose\\" and \\"lily\\" are sorted alphabetically, and within \\"rose\\", the colors \\"red\\" and \\"yellow\\" are sorted. In the second test case, the types are \\"daffodil\\", \\"rose\\", and \\"tulip\\". Each type\'s colors are listed alphabetically as well.","solution":"def categorize_flowers(test_cases): result = [] for flowers in test_cases: flower_dict = {} for flower in flowers: flower_type, flower_color = flower if flower_type not in flower_dict: flower_dict[flower_type] = [] flower_dict[flower_type].append(flower_color) sorted_flower_types = sorted(flower_dict.keys()) for flower_type in sorted_flower_types: colors = sorted(flower_dict[flower_type]) result.append(f\'{flower_type} {\\" \\".join(colors)}\') return result def process_input(input_data): lines = input_data.strip().split(\'n\') idx = 0 num_tests = int(lines[idx]) idx += 1 test_cases = [] for _ in range(num_tests): num_flowers = int(lines[idx]) idx += 1 flowers = [] for _ in range(num_flowers): flower_type, flower_color = lines[idx].split() flowers.append((flower_type, flower_color)) idx += 1 test_cases.append(flowers) return test_cases"},{"question":"# Task Imagine you are given a special type of vending machine that provides a treat for every interaction. Each interaction with the machine can distribute a varying number of treats based on the following rule: - The machine always starts by giving `initialTreats` treats. - After each interaction, the next interaction will give `multiplier` times the number of treats given in the last interaction. - The machine has a specific `limit`, which it cannot exceed in total treats given out over all interactions. Determine the maximum number of interactions you can make while not exceeding the total treat limit. # Example For `initialTreats = 2`, `multiplier = 3`, and `limit = 20`, the output should be `2`. Here is the reasoning: ``` 1. The first interaction gives 2 treats. 2. The second interaction gives 2 * 3 = 6 treats. Thus, the total treats are 2 + 6 = 8, which is within the limit of 20. If another interaction occurs, it would give 6 * 3 = 18 treats, making the total 26, which exceeds the limit. Therefore, the maximum number of interactions you can make is 2. ``` # Input/Output - `[input]` integer `initialTreats` The number of treats the vending machine provides on the first interaction. Constraints: 1 ≤ `initialTreats` ≤ 10. - `[input]` integer `multiplier` The multiplier for the number of treats given in each subsequent interaction. Constraints: 2 ≤ `multiplier` ≤ 5. - `[input]` integer `limit` The maximum total number of treats the vending machine can give out. Constraints: 1 ≤ `limit` ≤ 1000. - `[output]` an integer The maximum number of interactions the vending machine can undergo without exceeding the total treat limit.","solution":"def max_interactions(initialTreats, multiplier, limit): total_treats = 0 count = 0 current_treats = initialTreats while total_treats + current_treats <= limit: total_treats += current_treats count += 1 current_treats *= multiplier return count"},{"question":"A classic coding problem involves checking if a given string is a palindrome—a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Write a function `is_palindrome(s)` that takes in a string `s` and determines if it is a palindrome. The function should return `True` if the string is a palindrome and `False` otherwise. For example, ```python is_palindrome(\\"A man, a plan, a canal, Panama!\\") = True is_palindrome(\\"racecar\\") = True is_palindrome(\\"hello\\") = False ``` Note: - Ignore spaces, punctuation, and capitalization. - The input string will always be a valid string containing alphabetic characters, spaces, and common punctuation marks.","solution":"import re def is_palindrome(s): Determines if the given string s is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s (str): Input string to check Returns: bool: True if s is a palindrome, False otherwise # Remove all non-alphanumeric characters and convert to lowercase filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the filtered string reads the same forwards and backwards return filtered_s == filtered_s[::-1]"},{"question":"Given an integer array `nums`, find all subarrays of length `k` that contain the maximum possible sum. Implement the function `max_sum_subarrays(nums, k)` that takes in an array of integers `nums` and an integer `k` representing the length of the subarrays. The function should return a list of all subarrays of length `k` with the maximum possible sum, sorted in the order they appear in the input array. # Example ```python nums = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 max_sum_subarrays(nums, k) -> [[4, 2, 10, 23]] nums = [2, 1, 5, 1, 3, 2] k = 3 max_sum_subarrays(nums, k) -> [[5, 1, 3]] nums = [1, 1, 1, 1] k = 2 max_sum_subarrays(nums, k) -> [[1, 1], [1, 1], [1, 1]] ``` # Constraints * The input array `nums` will have at least one valid subarray of length `k`. * 1 <= k <= len(nums) * Each element of `nums` will be an integer between -10^5 and 10^5. * The length of the list returned should match the number of subarrays that achieve the maximum sum.","solution":"def max_sum_subarrays(nums, k): Finds all subarrays of length k with the maximum possible sum. Args: nums (list): List of integers. k (int): Length of subarrays. Returns: list: List of subarrays of length k with the maximum possible sum. if not nums or k > len(nums): return [] n = len(nums) max_sum = float(\'-inf\') subarrays = [] # Compute sum of first subarray of length k current_sum = sum(nums[:k]) max_sum = current_sum # Store first subarray subarrays.append(nums[:k]) # Use sliding window to find other subarrays with length k and their sums for i in range(1, n - k + 1): current_sum = current_sum - nums[i-1] + nums[i+k-1] if current_sum > max_sum: max_sum = current_sum subarrays = [nums[i:i+k]] elif current_sum == max_sum: subarrays.append(nums[i:i+k]) return subarrays"},{"question":"Description Given an array of integers `arr` and an integer `k`, determine whether there are two distinct indices `i` and `j` in the array such that `arr[i]` and `arr[j]` add up to `k`. Write a function: ```python def find_pair_with_sum(arr: List[int], k: int) -> bool: pass ``` - The function should return `True` if such a pair exists, and `False` otherwise. # Important Info: * The input array `arr` can be of any length and can contain negative and positive integers. * There will be no duplicate elements in the array. # Examples ```python arr = [10, 15, 3, 7] k = 17 ``` Calling `find_pair_with_sum(arr, k)` should return `True` because `10 + 7` is `17`. ```python arr = [1, 2, 3, 9] k = 8 ``` Calling `find_pair_with_sum(arr, k)` should return `False` because no two numbers in the array add up to `8`. ```python arr = [-1, -2, -3, -4, -5] k = -8 ``` Calling `find_pair_with_sum(arr, k)` should return `True` because `-3 + -5` is `-8`.","solution":"from typing import List def find_pair_with_sum(arr: List[int], k: int) -> bool: Returns True if there are two distinct indices i and j in the array such that arr[i] + arr[j] == k seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"You are designing a system to keep track of reservations at a restaurant. Each reservation can be for a different table, and no two reservations can overlap in time. Every table is identified by a unique number. Your task is to determine if all reservations in the list can be accommodated without any time overlap for any of the tables. -----Input:----- - First line will contain T, the number of test cases. - For each test case: - The first line will contain N, the number of reservations. - The next N lines will contain two integers each: Si and Ei separated by space, where Si is the start time and Ei is the end time of the reservation. -----Output:----- For each test case, output \\"ACCEPTED\\" if all reservations can be accommodated without any overlap, and \\"REJECTED\\" otherwise. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 100 - 0 leq Si < Ei leq 1000 -----Subtasks----- - 30 points: 1 leq N leq 10 - 70 points: Original constraints -----Sample Input:----- 2 3 1 3 2 5 4 6 2 1 2 2 3 -----Sample Output:----- REJECTED ACCEPTED -----Explanation:----- In the first test case, the second reservation (2, 5) overlaps with the first reservation (1, 3), so the answer is \\"REJECTED\\". In the second test case, there are no overlapping reservations, so the answer is \\"ACCEPTED\\".","solution":"def can_accommodate_reservations(test_cases): results = [] for reservations in test_cases: reservations.sort() # Sort by start time accepted = True for i in range(1, len(reservations)): if reservations[i][0] < reservations[i - 1][1]: accepted = False break results.append(\\"ACCEPTED\\" if accepted else \\"REJECTED\\") return results def parse_input(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 reservations = [] for __ in range(N): Si, Ei = map(int, lines[index].split()) reservations.append((Si, Ei)) index += 1 test_cases.append(reservations) return test_cases def restaurant_reservations(input_text): test_cases = parse_input(input_text) results = can_accommodate_reservations(test_cases) for result in results: print(result)"},{"question":"Substring Repeated Pattern Write a function that takes a single string as input and determines if the string can be constructed by taking a substring of it and repeating that substring multiple times. # Note: - The function should return True if the input string can be constructed by repeating one of its substrings. - Consider at least one repetition of the substring. # Example: ```python repeated_pattern(\\"abab\\") == True repeated_pattern(\\"aba\\") == False repeated_pattern(\\"abcabcabcabc\\") == True ``` # Explanation: - \\"abab\\" can be constructed by repeating the substring \\"ab\\". - \\"aba\\" cannot be constructed by repeating any of its substrings. - \\"abcabcabcabc\\" can be constructed by repeating the substring \\"abc\\".","solution":"def repeated_pattern(s): Determines if the string can be constructed by repeating a substring of it. n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return True return False"},{"question":"=====Function Descriptions===== .defaultdict A defaultdict is a dictionary-like object which provides all methods provided by a dictionary but takes a first argument (default_factory) as a default data type for the dictionary. Using defaultdict is more convenient than using dict.setdefault() method. >>> from collections import defaultdict >>> d = defaultdict(list) >>> d[\'key\'].append(1) >>> d[\'key\'].append(2) >>> print(d) defaultdict(<class \'list\'>, {\'key\': [1, 2]}) =====Problem Statement===== In a university, student clubs often need to track events and the students who plan to attend those events. They want a dictionary where each event name is associated with a list of student names who will attend that event. If an event is mentioned that is not yet in the dictionary, a new entry is automatically created with that event name and an empty list of student names. You are given a list of tuples where each tuple consists of an event name and a student name. Your task is to use a defaultdict to create a dictionary wherein each event name (key) maps to a list of student names (values) who plan to attend that event. =====Input Format===== The first line contains an integer n, the number of event-student pairs. The next n lines each contain an event name followed by the student\'s name who will attend, separated by a space. =====Constraints===== 1 <= n <= 1000 =====Output Format===== Print the defaultdict where the key is the event name and the value is the list of students (sorted alphabetically) who will attend that event. =====Sample Input===== 5 Workshop Alice Workshop Bob Seminar Charlie Workshop Dave Seminar Eve =====Sample Output===== defaultdict(<class \'list\'>, {\'Workshop\': [\'Alice\', \'Bob\', \'Dave\'], \'Seminar\': [\'Charlie\', \'Eve\']})","solution":"from collections import defaultdict def track_events(n, event_student_pairs): Given a list of tuples where each tuple consists of an event name and a student name, this function creates a dictionary using defaultdict wherein each event name (key) maps to a list of student names (values) who plan to attend that event. The student names in the lists are sorted alphabetically. :param n: int, the number of event-student pairs :param event_student_pairs: list of tuples, each tuple contains event name and student name :return: defaultdict with event names as keys and sorted list of student names as values event_dict = defaultdict(list) for event, student in event_student_pairs: event_dict[event].append(student) for key in event_dict: event_dict[key].sort() return event_dict # Example usage: # pairs = [(\'Workshop\', \'Alice\'), (\'Workshop\', \'Bob\'), (\'Seminar\', \'Charlie\'), (\'Workshop\', \'Dave\'), (\'Seminar\', \'Eve\')] # print(track_events(5, pairs))"},{"question":"Create a function that takes an array of integers and returns a new array where each element is replaced with the product of all other elements in the original array. Do not use division in your solution. For example: productArray([1, 2, 3, 4]) => [24, 12, 8, 6] In the example above, *24* is the product of *2*, *3*, and *4*, *12* is the product of *1*, *3*, and *4*, *8* is the product of *1*, *2*, and *4*, and *6* is the product of *1*, *2*, and *3*.","solution":"def productArray(arr): Returns a new array where each element is replaced with the product of all other elements in the original array. length = len(arr) if length == 0: return [] # Initialize two lists to keep track of the product of all elements # to the left and to the right of each element in the array. left_products = [1] * length right_products = [1] * length result = [1] * length # Calculate the left products for i in range(1, length): left_products[i] = arr[i - 1] * left_products[i - 1] # Calculate the right products for i in range(length - 2, -1, -1): right_products[i] = arr[i + 1] * right_products[i + 1] # Calculate the product of elements except self for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Suppose you are working with a vending machine that dispenses different beverages. The machine is currently stocked with a variety of drinks, each identified by a unique ID and a name. The machine keeps track of the quantity of each drink available. Each time a drink is dispensed, the quantity should decrease by one. You need to implement a simple inventory management system for this vending machine. Your system should be able to handle the following tasks: 1. **Add a new drink**: Given an ID, a name, and an initial quantity, add a new drink to the inventory. 2. **Dispense a drink**: Given a drink ID, decrease the quantity of the corresponding drink by one if it is available. If the drink is not available, return \\"Drink not available\\". 3. **Get inventory**: Return a list of all drinks along with their names and quantities. Implement a class `VendingMachine` with the following methods: - `__init__()`: Initializes an empty inventory. - `add_drink(drink_id: str, name: str, quantity: int)`: Adds a new drink to the inventory. - `dispense(drink_id: str) -> str`: Dispenses a drink and returns \\"Dispensed\\" if successful, otherwise returns \\"Drink not available\\". - `get_inventory() -> List[Tuple[str, str, int]]`: Returns a list of tuples, each containing the drink ID, name, and quantity. Example: ```python vm = VendingMachine() vm.add_drink(\\"001\\", \\"Coca-Cola\\", 10) vm.add_drink(\\"002\\", \\"Pepsi\\", 5) vm.add_drink(\\"003\\", \\"Sprite\\", 8) print(vm.get_inventory()) # Expected output: [(\'001\', \'Coca-Cola\', 10), (\'002\', \'Pepsi\', 5), (\'003\', \'Sprite\', 8)] print(vm.dispense(\\"002\\")) # Expected output: \\"Dispensed\\" print(vm.get_inventory()) # Expected output: [(\'001\', \'Coca-Cola\', 10), (\'002\', \'Pepsi\', 4), (\'003\', \'Sprite\', 8)] print(vm.dispense(\\"004\\")) # Expected output: \\"Drink not available\\" ``` Ensure your code handles edge cases, such as dispensing a drink that is not in the inventory or adding a drink with a pre-existing ID.","solution":"from typing import List, Tuple class VendingMachine: def __init__(self): Initializes an empty inventory. self.inventory = {} def add_drink(self, drink_id: str, name: str, quantity: int): Adds a new drink to the inventory. If the drink already exists, it updates the name and quantity. if drink_id in self.inventory: self.inventory[drink_id][\'name\'] = name self.inventory[drink_id][\'quantity\'] += quantity else: self.inventory[drink_id] = {\'name\': name, \'quantity\': quantity} def dispense(self, drink_id: str) -> str: Dispenses a drink and returns \\"Dispensed\\" if successful, otherwise returns \\"Drink not available\\". if drink_id in self.inventory and self.inventory[drink_id][\'quantity\'] > 0: self.inventory[drink_id][\'quantity\'] -= 1 return \\"Dispensed\\" else: return \\"Drink not available\\" def get_inventory(self) -> List[Tuple[str, str, int]]: Returns a list of tuples, each containing the drink ID, name, and quantity. return [(drink_id, item[\'name\'], item[\'quantity\']) for drink_id, item in self.inventory.items()]"},{"question":"You are a software developer for a company that manages a series of highway toll booths. Each toll booth records the number of cars passing through it every hour. Given the traffic data for each toll booth, you need to identify the longest period of continuous hours during which the number of cars passing through each toll booth did not decrease. More formally, for a given toll booth traffic data represented by an array of integers, you need to find the length of the longest subarray such that for every pair of hours (i, j) (where i le j) in this subarray, the condition text{cars}[i] le text{cars}[j] holds. You have to answer t independent queries. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of queries. The first line of each query contains one integer n (1 le n le 10^5) — the number of hours the toll booth traffic data is recorded for. The following line of each query contains n integers, representing the traffic data of the toll booth for each hour. Each integer is between 1 and 10^9. The sum of n over all queries does not exceed 10^6. -----Output----- For each query, print one integer — the length of the longest period of continuous hours during which the number of cars passing through the toll booth did not decrease. -----Example----- Input 3 5 1 2 3 2 3 6 3 3 4 2 2 5 4 8 7 6 5 Output 3 3 1 -----Note----- In the first query, the longest period where the number of cars did not decrease is from hour 1 to hour 3 or hour 3 to hour 5, both giving a length of 3. In the second query, it is from hour 2 to hour 4, giving a length of 3. In the third query, no period longer than 1 hour satisfies the condition, so the output is 1.","solution":"def longest_non_decreasing_subarray(queries): For each query in the input, determines the length of the longest subarray of non-decreasing integers. Parameters: queries (list of tuples): Each tuple contains (n, arr) where n is the number of hours and arr is the list of integers representing traffic data. Returns: list of int: Each element is the length of the longest non-decreasing subarray for the corresponding query. results = [] for n, arr in queries: max_length = 1 current_length = 1 for i in range(1, n): if arr[i] >= arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"# Task Given an array of integers, sort the array in such a way that the maximum difference between any two consecutive elements in the sorted array is minimized. If there are multiple answers, return the one with the smallest first element. # Example For `arr = [4, 2, 1, 3]`, the output should be `[1, 2, 3, 4]` For `arr = [10, 1, 5, 3]`, the output should be `[3, 1, 5, 10]` For `arr = [1, 10, 2, 9]`, the output should be `[1, 2, 9, 10]` # Input/Output - `[input]` array of integers `arr` - An array of integers. The array will contain at least 2 elements. - Constraints: `2 ≤ arr.length ≤ 1000`, `1 ≤ arr[i] ≤ 10^5` - `[output]` an array of integers","solution":"def minimize_max_difference(arr): Sorts the array such that the maximum difference between any two consecutive elements in the sorted array is minimized. return sorted(arr)"},{"question":"Given an integer array `nums`, move all 0\'s to the end of it while maintaining the relative order of the non-zero elements. Return the modified array with all zeroes moved to the end. You must do this in place without making a copy of the array. Example 1: Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2: Input: nums = [0,0,1] Output: [1,0,0] Example 3: Input: nums = [2,1,2,0,3,0,4] Output: [2,1,2,3,4,0,0] Constraints: 1 <= nums.length <= 10^4 -2^31 <= nums[i] <= 2^31 - 1","solution":"def move_zeroes(nums): Moves all zeroes in the list `nums` to the end while maintaining the relative order of the non-zero elements. This is done in place. last_non_zero_found_at = 0 for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at], nums[i] = nums[i], nums[last_non_zero_found_at] last_non_zero_found_at += 1 return nums"},{"question":"Given a string, determine if it can be rearranged into a palindrome. A palindrome is a word that reads the same backward as forward. For this assessment, ignore spaces and consider only alphanumeric characters. Example 1: Input: s = \\"Tact Coa\\" Output: true Explanation: The possible palindrome permutations are \\"taco cat\\", \\"atco cta\\", etc. Example 2: Input: s = \\"hello\\" Output: false Explanation: It is not possible to rearrange \\"hello\\" into a palindrome. Constraints: - The input string length is between 1 and 50 characters. - The string will contain printable ASCII characters only.","solution":"def can_rearrange_to_palindrome(s): Determine if the input string can be rearranged to form a palindrome. :param s: Input string. :return: Boolean indicating if the rearrangement to palindrome is possible. import re from collections import Counter # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(cleaned_s) # At most one character can have an odd frequency to be able to form a palindrome odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function that takes a string input and returns the count of vowels (a, e, i, o, u, both uppercase and lowercase) in the string. Examples: ``` \\"hello world\\": 3 \\"HELLO\\": 2 \\"python\\": 1 \\"bcdfg\\": 0 ``` ~~~if:sql You will be given a table: `text_data`, with a column: `input_string`. Return a table with a column: `vowel_count`. ~~~","solution":"def count_vowels(input_string): Returns the count of vowels (a, e, i, o, u, both uppercase and lowercase) in the input string. vowels = \\"aeiouAEIOU\\" return sum(1 for char in input_string if char in vowels)"},{"question":"Given an array of integers and a target integer, return the number of continuous subarrays that sum up to the target. Example 1: Input: nums = [1,1,1], target = 2 Output: 2 Explanation: The continuous subarrays [1,1] and [1,1] both sum up to 2. Example 2: Input: nums = [1,2,3], target = 3 Output: 2 Explanation: The continuous subarrays [1,2] and [3] both sum up to 3. Example 3: Input: nums = [-1,-1,1], target = 0 Output: 1 Explanation: The continuous subarray [-1,1] sums up to 0. Constraints: - The length of the array should be between 1 and 10^4. - The range of integer values in the array can be between -10^5 and 10^5. - The target integer can be any value within the range of -10^7 to 10^7.","solution":"def subarray_sum(nums, target): Returns the number of continuous subarrays that sum up to the target. count = 0 current_sum = 0 sum_dict = {0: 1} for num in nums: current_sum += num if current_sum - target in sum_dict: count += sum_dict[current_sum - target] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"Array Rotation Write a function that rotates the elements of a list to the right by a given number of steps. The rotation should be performed circularly, meaning that elements that go past the end of the list should come back around to the front. # Example: ```python rotate_array([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] rotate_array([1, 2, 3], 5) == [2, 3, 1] rotate_array([7, 9, 11], 0) == [7, 9, 11] rotate_array([], 3) == [] ``` # Constraints: - The input list can contain integers (both positive and negative). - The number of steps can be a non-negative integer. - If the input list is empty, the function should return an empty list. # Notes: - Ensure that your solution is efficient for large lists. - Consider edge cases such as rotating by zero steps or rotating an empty list.","solution":"def rotate_array(arr, steps): Rotates the elements of a list to the right by the given number of steps. Args: arr (list of int): The list to be rotated. steps (int): The number of steps to rotate the array. Returns: list of int: The rotated list. if not arr: return [] n = len(arr) steps = steps % n # To handle cases where steps > len(arr) return arr[-steps:] + arr[:-steps]"},{"question":"You are given two strings S and T consisting of lowercase alphabets. You are allowed to transform string S into string T using the following operation any number of times: - Choose any character from S and replace it with another character. Choosing the same character and replacing it multiple times with different characters is allowed. Your task is to determine the minimum number of operations required to transform string S into string T. Note that the length of string S and string T are guaranteed to be the same. -----Input ----- The first line of input contains an integer N, denoting the length of the strings S and T. The second line contains the string S of length N. The third line contains the string T of length N. -----Output ----- Output a single integer representing the minimum number of operations required to transform string S into string T. -----Constraints: ----- - 1 ≤ N ≤ 105 - S and T consist of lowercase English letters only. -----Example:----- Input: 5 abcde bcdae Output: 5 Explanation: In the first example, to transform \\"abcde\\" into \\"bcdae\\", we can perform the following operations: 1. Replace \'a\' with \'b\' 2. Replace \'b\' with \'c\' 3. Replace \'c\' with \'d\' 4. Replace \'d\' with \'a\' 5. Replace \'e\' with \'e\' Optimal operations: 5 operations, one for each character in S. -----Example 2:----- Input: 4 abcd abcd Output: 0 Explanation: In the second example, \\"abcd\\" is already equal to \\"abcd\\". Thus, no operations are needed. Note: The goal is to determine the minimum number of single-character replacements needed to transform S into T.","solution":"def min_operations_to_transform(S, T): Determine the minimum number of operations required to transform string S into string T. Parameters: S (str): the starting string T (str): the target string Returns: int: The minimum number of operations required operations_needed = 0 # Loop through each character in both strings and count the differences for s_char, t_char in zip(S, T): if s_char != t_char: operations_needed += 1 return operations_needed # Example usage S = \\"abcde\\" T = \\"bcdae\\" print(min_operations_to_transform(S, T)) # Output: 5"},{"question":"# Task You discovered some strings representing email addresses on your computer. Each email address is described in the general format: `local_part@domain`. Your task is to determine how many unique email addresses there are. In this scenario, there are some rules for interpreting emails: 1. Any dots (`.`) in the local part are ignored. 2. If there is a plus sign (`+`) in the local part, everything after it is ignored. # Example For: ``` emails = [\\"test.email+alex@leetcode.com\\", \\"test.e.mail+bob.cathy@leetcode.com\\", \\"testemail+david@lee.tcode.com\\"] ``` the output should be `2`. Explanation: ``` \\"test.email+alex@leetcode.com\\" and \\"test.e.mail+bob.cathy@leetcode.com\\" will both be interpreted as \\"testemail@leetcode.com\\". Therefore, they count as the same unique email address. \\"testemail+david@lee.tcode.com\\" is interpreted as \\"testemail@lee.tcode.com\\" and is unique. ``` # Input/Output - `[input]` array of strings `emails` Array of email addresses. Constraints: `1 ≤ emails.length ≤ 100, 1 ≤ emails[i].length ≤ 100.` - `[output]` an integer value The number of unique email addresses you found.","solution":"def num_unique_emails(emails): Determines the number of unique email addresses. Args: emails (list of str): a list of email address strings Returns: int: the number of unique email addresses unique_emails = set() for email in emails: local_part, domain = email.split(\'@\') local_part = local_part.split(\'+\')[0].replace(\'.\', \'\') unique_emails.add(f\\"{local_part}@{domain}\\") return len(unique_emails)"},{"question":"Write a function `primes_between(a, b)` that returns a list of all prime numbers between `a` and `b` (including `a` and `b`, if they themselves are prime). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For instance, the list of prime numbers between 10 and 30 is [11, 13, 17, 19, 23, 29]. For example: ```python primes_between(10, 20) == [11, 13, 17, 19] primes_between(30, 50) == [31, 37, 41, 43, 47] primes_between(1, 10) == [2, 3, 5, 7] ```","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def primes_between(a, b): Returns a list of all prime numbers between a and b (inclusive). return [num for num in range(a, b + 1) if is_prime(num)]"},{"question":"Task Emily is participating in a treasure hunt event in her city. The city is represented as a grid of size `n` x `m` where each cell can either be `0` representing an open path, or `1` representing an obstacle. Emily starts at the top-left corner of the grid and her goal is to transport the treasures she finds to the bottom-right corner. Emily can move in the following ways: - Right: She moves from `(i, j)` to `(i, j + 1)`. - Down: She moves from `(i, j)` to `(i + 1, j)`. However, there are some special cells in the grid where exactly one treasure is hidden. The event organizers provide the coordinates of these special cells. Your task is to help Emily calculate the maximum number of treasures she can collect on her way from the top-left corner to the bottom-right corner. # Input - `grid`: An `n` x `m` integer array representing the city and its obstacles. - `1 <= n, m <= 50`. - `treasures`: A list of tuples where each tuple contains two integers representing the coordinates of a cell containing a treasure. - The coordinates are 0-based. # Output An integer representing the maximum number of treasures Emily can collect. # Example For ``` grid = [ [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0] ] treasures = [(0, 2), (2, 2), (3, 2)] ``` The output should be `2`. One of the possible paths is: ``` Right -> Right -> Down -> Down -> Right Collected treasures: (0, 2), (3, 2) Number of treasures: 2 ```","solution":"def max_treasures(grid, treasures): n, m = len(grid), len(grid[0]) treasure_set = set(treasures) dp = [[-float(\'inf\')] * m for _ in range(n)] dp[0][0] = 1 if (0, 0) in treasure_set else 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = -float(\'inf\') else: if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if (i, j) in treasure_set else 0)) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if (i, j) in treasure_set else 0)) return max(0, dp[n-1][m-1])"},{"question":"=====Function Descriptions===== Sum and Product We can calculate the sum of elements in an array using the numpy.sum function. Similarly, we can calculate the product of elements in an array using numpy.prod. import numpy my_array = numpy.array([1, 2, 3, 4]) print numpy.sum(my_array) print numpy.prod(my_array) #Output 10 24 =====Problem Statement===== You are given a NXM integer array matrix with space separated elements (N = rows and M = columns). Your task is to calculate and print the sum of elements for each row and the product of elements for each column. =====Input Format===== The first line contains the space separated values of N and M. The next N lines contain the space separated elements of M columns. =====Output Format===== First, print the sum of elements for each row as a list. Then, print the product of elements for each column as a list.","solution":"import numpy as np def sum_and_product_of_matrix_elements(matrix): Returns the sum of elements for each row and the product of elements for each column of the input matrix. Args: matrix (list of lists of int): 2D list representing the matrix. Returns: tuple: (row_sums, column_products) row_sums is a list of sums of each row. column_products is a list of products of each column. np_matrix = np.array(matrix) row_sums = np.sum(np_matrix, axis=1).tolist() column_products = np.prod(np_matrix, axis=0).tolist() return row_sums, column_products"},{"question":"In this exercise, you will need to create a function named `matrixDiagonalSum`. This function will take a 2D list (matrix) of integers as input and will return the sum of the two diagonals of the matrix. The matrix will always be a square matrix (same number of rows and columns). The primary diagonal of the matrix runs from the top-left corner to the bottom-right corner, and the secondary diagonal runs from the top-right corner to the bottom-left corner. - You should start by identifying the elements that belong to both diagonals. - Compute the sum of the primary diagonal elements. - Compute the sum of the secondary diagonal elements. - Return the total sum of the primary and secondary diagonals. Note: If an element lies on both diagonals (in the case of odd dimensions), it should only be counted once in the sum. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] matrixDiagonalSum(matrix) # Output: 25 (1 + 5 + 9 + 3 + 7) ```","solution":"def matrixDiagonalSum(matrix): Calculates the sum of the primary and secondary diagonals of a square matrix. :param matrix: 2D list of integers :return: integer sum of the two diagonals n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] if n % 2 == 1: # If odd dimensions, remove the double-counted middle element middle_index = n // 2 secondary_diagonal_sum -= matrix[middle_index][middle_index] return primary_diagonal_sum + secondary_diagonal_sum"},{"question":"Write a function that takes a list of integers and returns a new list containing the integers that are palindromes. A palindrome is a number that reads the same forward and backward. # Examples - Input: [123, 121, 454, 32, 303] - Output: [121, 454, 303] - Input: [10, 101, 20] - Output: [101]","solution":"def is_palindrome(number): Checks if a given number is a palindrome. number_str = str(number) return number_str == number_str[::-1] def filter_palindromes(numbers): Returns a new list containing the integers that are palindromes. Parameters: - numbers: List of integers Returns: - List of integers that are palindromes return [number for number in numbers if is_palindrome(number)]"},{"question":"Given a string `s` and an integer `k`, write a function `rearrangeString(s, k)` that rearranges the characters of `s` such that the same characters are at least `k` distance apart. If it is not possible to rearrange the string, return an empty string `\\"\\"`. # Input: - `s`: a string of lowercase English letters. - `k`: an integer representing the minimum distance between the same characters. # Output: - A rearranged string according to the given constraints, or an empty string if no such rearrangement is possible. # Constraints: - The string `s` can have a maximum length of 10000. - `0 <= k <= length of s` # Examples: ``` rearrangeString(\\"aabbcc\\", 3) => \\"abcabc\\" rearrangeString(\\"aaabc\\", 3) => \\"\\" rearrangeString(\\"aaadbbcc\\", 2) => \\"abacabcd\\" rearrangeString(\\"aaaaa\\", 1) => \\"aaaaa\\" rearrangeString(\\"aabbcc\\", 0) => \\"aabbcc\\" rearrangeString(\\"aabbcc\\", 1) => \\"abcabc\\" rearrangeString(\\"aaa\\", 2) => \\"\\" ```","solution":"from collections import Counter import heapq def rearrangeString(s, k): if k == 0: return s counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) rearranged = [] wait_queue = [] while max_heap: count, char = heapq.heappop(max_heap) rearranged.append(char) wait_queue.append((count + 1, char)) if len(wait_queue) >= k: released = wait_queue.pop(0) if released[0] < 0: heapq.heappush(max_heap, released) if len(rearranged) != len(s): return \\"\\" return \\"\\".join(rearranged)"},{"question":"A detective agency has a list of suspects for a series of crimes. Each suspect has a unique ID and a list of alibis (timestamps) for the dates they claim were not present at the crime scene. The agency needs to determine if any suspect has an alibi that matches the timestamp of the crime. Your task is to filter out the suspects who have a matching alibi for the crime timestamp. The crime timestamp and the list of suspects with their alibis will be provided as input. Write a function `filter_suspects` that takes the following arguments: - `crime_timestamp` (string): a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\" - `suspects` (list): a list where each element is a dictionary with two keys: - `\\"id\\"` (int): the unique ID of the suspect - `\\"alibis\\"` (list): a list of alibi timestamps (strings) in the format \\"YYYY-MM-DD HH:MM:SS\\" The function should return a list of suspect IDs who have at least one alibi timestamp that matches exactly with the `crime_timestamp`. # Example: ```python crime_timestamp = \\"2023-09-15 18:30:00\\" suspects = [ {\\"id\\": 1, \\"alibis\\": [\\"2023-09-15 18:30:00\\", \\"2023-09-16 20:00:00\\"]}, {\\"id\\": 2, \\"alibis\\": [\\"2023-09-14 08:00:00\\"]}, {\\"id\\": 3, \\"alibis\\": [\\"2023-09-15 17:30:00\\", \\"2023-09-16 18:30:00\\"]} ] output = filter_suspects(crime_timestamp, suspects) # output should be [1] ``` # Constraints: - The `crime_timestamp` will always be a valid timestamp. - The `suspects` list will have at most 100 suspects. - Each suspect will have at most 10 alibis. - All timestamps will be in the format \\"YYYY-MM-DD HH:MM:SS\\".","solution":"def filter_suspects(crime_timestamp, suspects): Filters out suspects who have a matching alibi for the crime timestamp. :param crime_timestamp: The timestamp of the crime in \\"YYYY-MM-DD HH:MM:SS\\" format. :param suspects: A list of dictionaries where each dictionary has two keys: \\"id\\" (int) and \\"alibis\\" (list of strings with timestamps). :return: A list of suspect IDs who have at least one alibi matching the crime_timestamp. matching_suspects = [] for suspect in suspects: if crime_timestamp in suspect[\'alibis\']: matching_suspects.append(suspect[\'id\']) return matching_suspects"},{"question":"You are given a list of integers. Your task is to find all unique Pythagorean triplets `(a, b, c)` in the list such that `a^2 + b^2 = c^2`. Each number in the list should be used at most once in the triplets. If there are multiple ways to form a triplet with the same set of numbers, consider only the lowest set. Return the triplets in lexicographic order. Input: - A list of positive integers. Output: - A list of unique Pythagorean triplets in lexicographic order. If no triplets are found, return an empty list. For example: ```python find_triplets([3, 1, 4, 6, 5]) # should return [(3, 4, 5)] find_triplets([10, 4, 6, 12, 5]) # should return [] because there are no Pythagorean triplets find_triplets([5, 12, 13, 9, 40, 41]) # should return [(5, 12, 13), (9, 40, 41)] ``` Good luck!","solution":"def find_triplets(nums): Returns a list of unique Pythagorean triplets (a, b, c) from the list of integers such that a^2 + b^2 = c^2. The triplets are returned in lexicographic order. nums.sort() n = len(nums) triplets = set() for i in range(n - 2): for j in range(i + 1, n - 1): a, b = nums[i], nums[j] c_squared = a ** 2 + b ** 2 c = int(c_squared ** 0.5) if c * c == c_squared and c in nums[j + 1:]: triplets.add((a, b, c)) return sorted(triplets)"},{"question":"Write a function that takes a list of integers and returns the integer that appears most frequently. If there are multiple integers with the same highest frequency, return the smallest one. The list is always non-empty and contains only integers. Examples: ```python [1, 3, 2, 2, 4, 3, 3] => 3 [1, 1, 2, 2] => 1 [5, 5, 5, 1, 1, 1] => 1 [7] => 7 ```","solution":"def most_frequent_integer(nums): Returns the integer that appears most frequently. If there are multiple integers with the same highest frequency, returns the smallest one. Parameters: nums (list): A list of integers. Returns: int: The integer that appears most frequently, or the smallest one if there is a tie. from collections import Counter count = Counter(nums) max_frequency = max(count.values()) # Return the smallest integer among those with the maximum frequency return min(key for key, value in count.items() if value == max_frequency)"},{"question":"=====Function Descriptions===== transpose The transpose tool creates a new array which is a transposed version of the original array, that is, it flips the original array over its diagonal. (a). Using transpose to flip the dimensions of an array import numpy my_array = numpy.array([[1, 2, 3], [4, 5, 6]]) print numpy.transpose(my_array) #Output [[1 4] [2 5] [3 6]] flatten The flatten tool returns a copy of the array collapsed into one dimension. (b). Using flatten to collapse an array import numpy my_array = numpy.array([[1, 2, 3], [4, 5, 6]]) print my_array.flatten() #Output [1 2 3 4 5 6] =====Problem Statement===== You are given a 2D array of dimensions N x M. Your task is to perform two operations on this array and print the results: 1. Transpose the array. 2. Flatten the transposed array. =====Input Format===== The first line contains two space separated integers N (number of rows) and M (number of columns). The next N lines contain M space separated integers. =====Output Format===== First, print the transposed array. Then, print the flattened transposed array.","solution":"import numpy as np def transpose_and_flatten(n, m, array): Transpose the given N x M array and then flatten the transposed array. Parameters: n (int): Number of rows. m (int): Number of columns. array (list of lists of int): The N x M array. Returns: tuple: Transposed array and flattened transposed array. np_array = np.array(array) transposed_array = np.transpose(np_array) flattened_transposed_array = transposed_array.flatten() return transposed_array, flattened_transposed_array"},{"question":"Write a function `find_pairs` that accepts two parameters, an integer `target` and a list of integers `numbers`. The function should return a list of all unique pairs of numbers from the list that add up to the target number. Each pair should be a tuple (a, b), where a <= b, and the pairs should be sorted in ascending order based on the first element of the tuple. If there are multiple pairs that have the same first element, then sort based on the second element of the tuple. Example: ```python find_pairs(5, [1, 2, 3, 4, -1, 0, 2, 3, 4, 5]) => [(0, 5), (1, 4), (2, 3)] find_pairs(7, [0, 1, 6, 2, 5, -1, 3, 4, 2, 7]) => [(0, 7), (1, 6), (2, 5), (3, 4)] find_pairs(0, [2, -2, 4, -4, 5, -5]) => [(-5, 5), (-4, 4), (-2, 2)] ``` Assume that the input list will only contain integers and there will be no duplicate pairs in the output.","solution":"def find_pairs(target, numbers): Return a list of all unique pairs of numbers from the list that add up to the target number. Each pair should be a tuple (a, b), where a <= b, and the pairs should be sorted in ascending order. numbers.sort() pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"Maximal Occurrences Given a string, find the character that appears the most frequently. Return the character and its count as a tuple. If there are multiple characters with the same highest frequency, return the character that comes first in alphabetical order. Consider only the alphabetical characters (a-z and A-Z) and ignore case (i.e., \'A\' and \'a\' should be considered the same character). Non-alphabetical characters should be ignored. Examples: - For the input \\"aabbCC\\", the output should be (\'a\', 2). - For the input \\"Hello, World!\\", the output should be (\'l\', 3). - For the input \\"12345\\", the output should be None, as there are no alphabetical characters. Note that the function should return None if the input string does not contain any alphabetical characters.","solution":"def maximal_occurrences(s): from collections import Counter import string # Normalize the string to lowercase and filter only alphabetical characters normalized_str = \'\'.join(c for c in s.lower() if c in string.ascii_lowercase) # If there are no alphabetical characters, return None if not normalized_str: return None # Count the occurrences of each character counts = Counter(normalized_str) # Find the character with the maximum frequency. If there\'s a tie, min will select alphabetically first one. max_char = min([char for char in counts if counts[char] == max(counts.values())]) return (max_char, counts[max_char])"},{"question":"You have a list of strings representing file paths. Your goal is to write a function that normalizes these file paths. In UNIX-like operating systems, the `.` symbol represents the current directory, while `..` represents the parent directory. Multiple consecutive slashes are treated as a single slash (e.g., `///` is equivalent to `/`). For example, given the file path `\\"/a/./b/../../c/\\"`, it can be simplified to `\\"/c\\"`. Given the file path `\\"/../\\"`, it can be simplified to `\\"/\\"`. Given the file path `/home//foo/`, it can be simplified to `/home/foo`. Write a function `normalize_paths(paths: List[str]) -> List[str]` that takes a list of file paths and returns a list of the corresponding normalized paths. Here are some additional examples for you to consider: - `\\"/a//b////c/d//././/..\\"` should simplify to `\\"/a/b/c\\"`. - `\\"/a/../../b/../c//.//\\"` should simplify to `\\"/c\\"`. - `\\"/a//b////c/d//././/..//\\"` should simplify to `\\"/a/b/c\\"`. Plan your algorithm and implement the `normalize_paths` function in Python. # Function Signature ```python def normalize_paths(paths: List[str]) -> List[str]: pass ``` # Constraints - The input list `paths` will have at least one file path. - The input list `paths` will contain only valid UNIX-like file path strings. # Example: ```python normalize_paths([\\"/a//b////c/d//././/..\\", \\"/../\\", \\"/home//foo/\\"]) # Should return [\\"/a/b/c\\", \\"/\\", \\"/home/foo\\"] ```","solution":"from typing import List def normalize_paths(paths: List[str]) -> List[str]: def normalize_path(path: str) -> str: parts = path.split(\'/\') stack = [] for part in parts: if part == \\"..\\": if stack: stack.pop() elif part and part != \\".\\": stack.append(part) return \\"/\\" + \\"/\\".join(stack) return [normalize_path(path) for path in paths]"},{"question":"You are given a list of tuples representing the stock of items in a warehouse, where each tuple contains the item name and its quantity. Your task is to write a function that takes this list of stock and a target quantity and returns a new list of items whose quantities are less than or equal to the target quantity in **reverse alphabetical order**. Example ```python stock_list = [(\'Apple\', 10), (\'Banana\', 5), (\'Orange\', 3), (\'Pineapple\', 12), (\'Grapes\', 8)] target = 8 filter_stock(stock_list, target) ==> [(\'Grapes\', 8), (\'Banana\', 5), (\'Orange\', 3)] ```","solution":"def filter_stock(stock_list, target): Returns a list of items whose quantities are less than or equal to the target quantity in reverse alphabetical order. :param stock_list: List of tuples where each tuple contains the item name and its quantity :param target: Integer representing the target quantity :return: Filtered and sorted list of items in reverse alphabetical order filtered_list = [(item, quantity) for item, quantity in stock_list if quantity <= target] return sorted(filtered_list, key=lambda x: x[0], reverse=True)"},{"question":"Implement a function that takes a string representing a specific time duration (in hours and minutes) and an integer representing the number of minutes to add to this time. The function should return the new time in the same format (hours and minutes). The input time will be in the format of \\"HH:MM\\", and the integer could be positive or negative. Ensure that the result handles changes across midnight correctly. For example: * `time_addition(\\"14:30\\", 40)` should return `\\"15:10\\"` * `time_addition(\\"23:50\\", 20)` should return `\\"00:10\\"` * `time_addition(\\"00:30\\", -40)` should return `\\"23:50\\"` You can assume that the input time will always be a valid \\"HH:MM\\" format and the minutes to add will be within the range of -1440 and 1440.","solution":"def time_addition(current_time, minutes_to_add): Adds minutes_to_add to the current_time. # Split the current time into hours and minutes hours, minutes = map(int, current_time.split(\':\')) # Convert everything to minutes total_minutes = hours * 60 + minutes + minutes_to_add # Adjust for overflow/underflow total_minutes = total_minutes % 1440 # Convert back to hours and minutes new_hours = total_minutes // 60 new_minutes = total_minutes % 60 return f\\"{new_hours:02d}:{new_minutes:02d}\\""},{"question":"Description: Write a function that takes a string of comma-separated integers and returns the sum of even integers and the product of odd integers. # Examples ``` even_sum_odd_product(\\"1,2,3,4,5\\") === (6, 15) # (2+4, 1*3*5) even_sum_odd_product(\\"6,7,8,9\\") === (14, 63) # (6+8, 7*9) even_sum_odd_product(\\"10,11,12\\") === (22, 11) # (10+12, 11) even_sum_odd_product(\\"1,3,5\\") === (0, 15) # (no evens, 1*3*5) even_sum_odd_product(\\"2,4,6\\") === (12, 1) # (2+4+6, no odds, default product is 1) ```","solution":"def even_sum_odd_product(s): Returns a tuple containing the sum of even integers and the product of odd integers from a string of comma-separated integers. Args: s (str): string of comma-separated integers. Returns: tuple: (sum of even integers, product of odd integers) numbers = list(map(int, s.split(\',\'))) even_sum = sum(n for n in numbers if n % 2 == 0) odd_product = 1 odd_found = False for n in numbers: if n % 2 == 1: odd_product *= n odd_found = True if not odd_found: odd_product = 1 return even_sum, odd_product"},{"question":"Given an array of integers `nums`, you are tasked with finding a contiguous subarray (containing at least one number) which has the maximum sum and return its sum. Additionally, return the starting and ending indices of this subarray (1-indexed). If there are multiple such subarrays, return the one with the smallest starting index. You need to implement a function which takes the array `nums` as input and returns a tuple containing the maximum sum, the starting index, and the ending index. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: (6, 4, 7) Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6 with starting index 4 and ending index 7. Example 2: Input: nums = [1] Output: (1, 1, 1) Explanation: The subarray [1] has the maximum sum 1 with starting index 1 and ending index 1. Example 3: Input: nums = [5,4,-1,7,8] Output: (23, 1, 5) Explanation: The subarray [5, 4, -1, 7, 8] has the maximum sum 23 with starting index 1 and ending index 5. Example 4: Input: nums = [-1,-2,-3,-4] Output: (-1, 1, 1) Explanation: The subarray [-1] has the maximum sum -1 with starting index 1 and ending index 1. Constraints: 1 <= nums.length <= 1000 -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): Returns the maximum sum of a contiguous subarray in the given array `nums` and the starting and ending indices (1-indexed) of that subarray. max_sum = float(\'-inf\') current_sum = 0 start = 0 max_start = 0 end = 0 for i in range(len(nums)): if current_sum <= 0: current_sum = nums[i] start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum max_start = start end = i return (max_sum, max_start + 1, end + 1)"},{"question":"Write a function that simulates a simple voting system for a small club election. The function should accept a list of votes where each vote is a string representing the candidate voted for. The function should return the name of the candidate with the most votes. In case of a tie, return a list of names of the candidates who have the highest number of votes, sorted in alphabetical order. For example: ```python votes = [\\"Alice\\", \\"Bob\\", \\"Alice\\", \\"Eve\\", \\"Bob\\", \\"Alice\\"] ``` The function should return: ```python \\"Alice\\" ``` If the votes were: ```python votes = [\\"Alice\\", \\"Bob\\", \\"Eve\\", \\"Bob\\", \\"Alice\\", \\"Eve\\"] ``` The function should return: ```python [\\"Alice\\", \\"Bob\\", \\"Eve\\"] ``` If no votes are cast, the function should return \\"No votes\\". Ensure to handle case sensitivity, i.e., \\"alice\\" and \\"Alice\\" should be considered different candidates.","solution":"from collections import Counter def find_winner(votes): Returns the candidate with the most votes, or a list of candidates sorted alphabetically in case of a tie. If no votes are cast, returns \\"No votes\\". if not votes: return \\"No votes\\" vote_count = Counter(votes) max_votes = max(vote_count.values()) winners = [candidate for candidate, count in vote_count.items() if count == max_votes] if len(winners) == 1: return winners[0] else: return sorted(winners)"},{"question":"You are given an array of integers where the elements range from 1 to n, and each integer appears at most twice. Your task is to find the integer that appears exactly twice in the array. -----Input----- - The first line contains an integer n, which denotes the maximum number in the array. - The second line contains n+1 integers, separated by spaces, which represent the array elements. -----Output----- - Print a single integer — the number that appears exactly twice in the array. -----Constraints----- - 2 leq n leq 100 - Each integer in the array ranges between 1 and n. -----Sample Input 1:----- 5 1 2 3 4 5 3 -----Sample Input 2:----- 6 1 6 2 6 4 5 3 -----Sample Output 1:----- 3 -----Sample Output 2:----- 6","solution":"def find_duplicate(n, arr): Finds the integer that appears exactly twice in the array. Parameters: n (int): The maximum number in the array. arr (list): List of integers with the elements ranging from 1 to n, each appearing at most twice. Returns: int: The number that appears exactly twice in the array. frequency = [0] * (n + 1) for number in arr: frequency[number] += 1 if frequency[number] == 2: return number"},{"question":"You are given a 2D grid consisting of 1s (land) and 0s (water). An island is a group of 1s connected horizontally or vertically. The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn\'t have \\"lakes\\", meaning the water inside the island (not connected to the water around the island) counts as land. Implement a function to find the perimeter of the island. Example 1: Input: [[0,1,0,0], [1,1,1,0], [0,1,0,0], [1,1,0,0]] Output: 16 Explanation: The perimeter is the 16 fence walls that are enclosing the island. Example 2: Input: [[1,0]] Output: 4 Explanation: The perimeter of the single land cell is 4. Note: The grid length and width are no more than 100.","solution":"def island_perimeter(grid): Calculate the perimeter of an island in a grid. :param grid: A list of lists representing the grid. :return: An integer representing the perimeter of the island. perimeter = 0 rows = len(grid) cols = len(grid[0]) for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Each cell is initially assumed to add 4 to the perimeter perimeter += 4 # Check adjacent cells to subtract shared sides if r > 0 and grid[r-1][c] == 1: # Top neighbor perimeter -= 2 if c > 0 and grid[r][c-1] == 1: # Left neighbor perimeter -= 2 return perimeter"},{"question":"Write a function that takes an array of integers and returns a new array containing only the prime numbers from the original array. If there are no prime numbers in the input array, the function should return an empty array. Examples ``` [2, 3, 4, 5, 6] => [2, 3, 5] [1, 4, 6, 8, 9, 10] => [] [7, 11, 13, 17, 19] => [7, 11, 13, 17, 19] [15, 18, 20, 22, 24, 25] => [] ``` Constraints - The input array may contain negative numbers, zero, and positive numbers. - The array length will be between 0 to 100 inclusive (0 <= array.length <= 100). - For any number less than 2, consider it as non-prime. - Optimize for readability and understandability above all else.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_primes(arr): Returns a list containing only the prime numbers in the given array. return [x for x in arr if is_prime(x)]"},{"question":"You are given an integer array `nums` that contains `n` integers, where `n` is an even number. The array is sorted in non-decreasing order. Create a function to find the minimum possible maximum difference between smallest and largest elements in each pair when the array is divided into pairs. In other words, partition the array into `n/2` pairs such that the maximum difference within any pair is minimized, and return the minimized maximum difference. Example 1: Input: nums = [1, 3, 6, 19, 20, 22] Output: 3 Explanation: The array can be partitioned into pairs as follows: (1, 3), (6, 19), (20, 22). The differences in these pairs are [2, 13, 2]. The maximum difference is 13. Example 2: Input: nums = [4, 7, 10, 12, 15, 20] Output: 2 Explanation: The array can be partitioned into pairs as follows: (4, 7), (10, 12), (15, 20). The differences in these pairs are [3, 2, 5]. The maximum difference is 5. Example 3: Input: nums = [1, 2, 3, 4, 5, 6] Output: 1 Explanation: The array can be partitioned into pairs as follows: (1, 2), (3, 4), (5, 6). The differences in these pairs are [1, 1, 1]. The maximum difference is 1. Constraints: 2 <= nums.length <= 1000 nums.length % 2 == 0 0 <= nums[i] <= 10^6","solution":"def min_max_pair_diff(nums): Finds the minimum possible maximum difference between smallest and largest elements in each pair when the array is divided into pairs. n = len(nums) nums.sort() # Ensure the array is sorted in non-decreasing order min_max_diff = float(\'inf\') for i in range(0, n, 2): # Step through the array in increments of 2 diff = nums[i+1] - nums[i] # Calculate the difference between the pair min_max_diff = min(min_max_diff, diff) return min_max_diff"},{"question":"-----Input----- Write a program to determine if a given string can be rearranged to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. -----Problem Statement----- The input consists of a single line containing a string `s`. The string will only contain lowercase alphabets and will have a maximum length of 1000 characters. Your task is to determine whether we can rearrange the characters of the string `s` to form a palindrome. -----Output----- Output \\"YES\\" if the given string can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Example----- Input: aabbcc Output: YES Input: aabbc Output: YES Input: abc Output: NO","solution":"def can_rearrange_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): input string containing only lowercase alphabets Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Write a function that calculates the minimum number of coins needed to make a specified amount of change. You are given a list of the denominations of the coins available. For example: ```python calculate_min_coins([1, 5, 10, 25], 36) -> 3 (25 + 10 + 1) calculate_min_coins([1, 3, 4], 6) -> 2 (3 + 3) calculate_min_coins([2, 5, 10], 1) -> -1 (not possible) calculate_min_coins([1, 5, 10, 25], 0) -> 0 (no coins needed) ``` If it\'s not possible to make the specified amount with the given denominations, return -1. If the amount is zero, return 0. If the list of denominations is empty, return -1. The function should optimize for the minimum number of coins used. Have fun coding it and please don\'t forget to vote and rank this kata! 😊","solution":"def calculate_min_coins(coins, amount): Calculate the minimum number of coins needed to make up the given amount. If it\'s not possible, return -1. if amount == 0: return 0 if not coins: return -1 # Initialize DP array with a value greater than the maximum possible coins needed dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Base case: no coins needed for amount 0 for coin in coins: for x in range(coin, amount + 1): if dp[x - coin] != float(\'inf\'): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"Write a function to calculate the total sum of each distinct element in a list after removing all its duplicates. The function should return the sum of the elements in the modified list. # Example: ```python calculate_sum([4, 5, 7, 5, 4, 8]) --> 24 ``` Explanation: - Original list: [4, 5, 7, 5, 4, 8] - After removing duplicates: [4, 5, 7, 8] - Sum of unique elements: 4 + 5 + 7 + 8 = 24","solution":"def calculate_sum(lst): Returns the sum of each distinct element in a list after removing duplicates. Parameters: lst (list): A list of integers Returns: int: Sum of the distinct elements of the list return sum(set(lst))"},{"question":"Given two strings s and t, write a function to determine if t is an anagram of s. Example 1: Input: s = \\"anagram\\", t = \\"nagaram\\" Output: true Example 2: Input: s = \\"rat\\", t = \\"car\\" Output: false Explanation: t is an anagram of s if it uses the same characters in the same frequency. Constraints: - 1 <= s.length, t.length <= 5000 - s and t consist of lowercase letters only.","solution":"def is_anagram(s, t): Determine if t is an anagram of s. Args: s: string t: string Returns: bool: True if t is an anagram of s, False otherwise. return sorted(s) == sorted(t)"},{"question":"**Story** You are tasked with monitoring a city\'s traffic by tracking the movement of vehicles at various intersections. Each intersection can be represented as a node in a graph, and each road between intersections can be represented as an edge. Due to a recent city planning initiative, the roads are being reconstructed, and some roads will be temporarily closed. You need to ensure an efficient way to determine if there is a still a path from a given starting intersection to a target intersection when these closures occur. **Formal problem** *Input:* - A list of tuples representing the connections/roads between intersections in the city, where each tuple `(u, v)` signifies a road between intersections `u` and `v`. - A starting intersection `start` and a target intersection `target`. - A list of tuples representing the closed roads for the duration of the monitoring effort. *Output:* A boolean value: `true` if there is still a path from `start` to `target` considering the closed roads, `false` otherwise. **Example** *Input:* ``` roads = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 5)] start = 1 target = 4 closed_roads = [(2, 3), (4, 5)] ``` *Output:* ``` false ``` *Explanation:* With the given roads, there are paths such as `1 -> 2 -> 3 -> 4` and `1 -> 5 -> 4`. When the roads `(2, 3)` and `(4, 5)` are closed, these paths are broken, and no path remains connecting intersection `1` to `4`. **Notes and hints** - The list of roads represents an undirected graph. - The intersections are represented as integer values. - Handling larger input sizes might be needed, so consider efficient graph traversal algorithms like BFS or DFS. - Ensure to consider edge cases with no initial connection paths or all roads being closed.","solution":"def can_reach(roads, start, target, closed_roads): from collections import defaultdict, deque # Step 1: Build the graph from the roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Step 2: Remove the closed roads from the graph for u, v in closed_roads: if v in graph[u]: graph[u].remove(v) if u in graph[v]: graph[v].remove(u) # Step 3: Perform BFS to check if there is a path from start to target queue = deque([start]) visited = set() while queue: current = queue.popleft() if current == target: return True if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False"},{"question":"You are given an integer array nums sorted in non-decreasing order and an integer k. Your task is to split the array into exactly k non-empty continuous subarrays such that the largest sum among these subarrays is minimized. Return the minimized largest sum. Example 1: Given nums = [7, 2, 5, 10, 8], k = 2 Return: 18 Explanation: The optimal way to split nums into 2 subarrays is [7, 2, 5] and [10, 8], where the sums are 14 and 18. Therefore, the minimized largest sum is 18. Example 2: Given nums = [1, 2, 3, 4, 5], k = 2 Return: 9 Explanation: The optimal way to split nums into 2 subarrays is [1, 2, 3, 4] and [5], where the sums are 10 and 5. Therefore, the minimized largest sum is 9. Example 3: Given nums = [1, 4, 4], k = 3 Return: 4 Explanation: The optimal way to split nums into 3 subarrays is [1], [4], and [4], where each subarray sum is 4. Therefore, the minimized largest sum is 4.","solution":"def splitArray(nums, k): def can_split(mid): current_sum = 0 partitions = 1 for num in nums: if current_sum + num > mid: partitions += 1 current_sum = num if partitions > k: return False else: current_sum += num return True left, right = max(nums), sum(nums) result = right while left <= right: mid = (left + right) // 2 if can_split(mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Given a string of words separated by spaces, write a function to reverse the order of characters in each word while maintaining the original word order. Preserve the original whitespace and punctuation. Here are some examples: ```python reverse_characters_in_words(\\"Hello World!\\") == \\"olleH !dlroW\\" reverse_characters_in_words(\\"Python coding is fun\\") == \\"nohtyP gnidoc si nuf\\" reverse_characters_in_words(\\"Keep calm and code on\\") == \\"peeK mlac dna edoc no\\" reverse_characters_in_words(\\" Leading and trailing spaces \\") == \\" gnidaeL dna gniliart secaps \\" reverse_characters_in_words(\\"123 abc 456 def\\") == \\"321 cba 654 fed\\" ``` These examples cover various edge cases, including punctuation, numbers, multiple spaces, and mixed-case characters. Your implementation should accurately handle all these scenarios.","solution":"def reverse_characters_in_words(s): Reverse characters in each word while maintaining the original word order. Preserve the original whitespace and punctuation. words = s.split(\\" \\") reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"Task A **winning streak** is a sequence of consecutive elements in a list that are all the same. You are to implement a function that takes a list of integers and returns the length of the longest winning streak in the list. Example: ``` longest_streak([1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5]) => 4 longest_streak([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 1 longest_streak([5, 5, 5, 5, 1, 1, 1, 2, 2, 2, 2, 2]) => 5 ``` Your task is to write the function `longest_streak(lst)` that returns the length of the longest winning streak.","solution":"def longest_streak(lst): Returns the length of the longest winning streak (sequence of consecutive elements that are the same) in the list. Parameters: lst (list): List of integers. Returns: int: Length of the longest winning streak. if not lst: return 0 max_streak = 1 current_streak = 1 for i in range(1, len(lst)): if lst[i] == lst[i-1]: current_streak += 1 else: if current_streak > max_streak: max_streak = current_streak current_streak = 1 return max(current_streak, max_streak)"},{"question":"Given a set of parentheses, write a function `scoreParentheses` that computes the score of the string based on the following rules: - `()` has a score of 1. - `AB` has a score equal to `A + B`, where `A` and `B` are balanced parentheses strings. - `(A)` has a score equal to `2 * score(A)`, where `A` is a balanced parentheses string. For example: ``` scoreParentheses(\\"()\\") => 1 scoreParentheses(\\"(())\\") => 2 scoreParentheses(\\"()()\\") => 2 scoreParentheses(\\"(()(()))\\") => 6 ``` Additional Notes: - The input string will always be a balanced parentheses string. - You may assume the maximum length of the input string is 30.","solution":"def scoreParentheses(s): Computes the score of a balanced parentheses string s based on the rules: - \\"()\\" has a score of 1. - \\"AB\\" has a score equal to A + B, where A and B are balanced parentheses strings. - \\"(A)\\" has a score equal to 2 * score(A), where A is a balanced parentheses string. :param s: str: A balanced parentheses string :return: int: The score of the parentheses string stack = [] for char in s: if char == \'(\': stack.append(char) else: if stack[-1] == \'(\': stack.pop() stack.append(1) else: score = 0 while isinstance(stack[-1], int): score += stack.pop() stack.pop() # pop the \'(\' stack.append(2 * score) return sum(stack)"},{"question":"Vowel and Consonant Counter Write a function `countVowelsAndConsonants` that takes a string as an argument and returns a dictionary with two keys: `\'vowels\'` and `\'consonants\'`. The values should be the respective counts of vowels and consonants in the string. **Notes:** - Vowels are \\"aeiou\\". - Input will always be a string containing only alphabetical characters. - Consider both uppercase and lowercase letters as having the same vowel/consonant status (e.g. \'A\' is a vowel, just like \'a\'). - The output dictionary should be case insensitive. **Examples:** - `countVowelsAndConsonants(\\"HappyEnd\\")` should return `{\'vowels\': 2, \'consonants\': 6}` - `countVowelsAndConsonants(\\"Rhythm\\")` should return `{\'vowels\': 0, \'consonants\': 6}` - `countVowelsAndConsonants(\\"Beautiful\\")` should return `{\'vowels\': 5, \'consonants\': 4}`","solution":"def countVowelsAndConsonants(s): Returns a dictionary with counts of vowels and consonants in the given string. Parameters: s (str): The input string containing only alphabetical characters. Returns: dict: A dictionary with keys \'vowels\' and \'consonants\', containing their respective counts. vowels = \\"aeiou\\" s = s.lower() vowel_count = sum(1 for char in s if char in vowels) consonant_count = sum(1 for char in s if char.isalpha() and char not in vowels) return {\'vowels\': vowel_count, \'consonants\': consonant_count}"},{"question":"You are given an array of N integers representing the heights of different towers. You are also provided with Q queries. Each query consists of two integers l and r (1-based index) that define a range of towers. For each query, you need to determine the height of the tallest tower within the specified range. -----Constraints----- - 1 leq N leq 100,000 - 1 leq height of each tower leq 1,000,000 - 1 leq Q leq 100,000 - 1 leq l leq r leq N -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Q l_1 r_1 l_2 r_2 : l_Q r_Q -----Output----- For each query, print the height of the tallest tower within the specified range. -----Sample Input----- 5 3 1 4 1 5 3 1 3 2 4 3 5 -----Sample Output----- 4 4 5 Explanation: 1. For the first query (1, 3), the tallest tower between the 1st and 3rd towers has a height of 4. 2. For the second query (2, 4), the tallest tower between the 2nd and 4th towers has a height of 4. 3. For the third query (3, 5), the tallest tower between the 3rd and 5th towers has a height of 5.","solution":"def tallest_tower_in_range(heights, queries): Given an array of tower heights and a list of queries, return a list of the heights of the tallest tower within each specified range (1-based index). Args: heights (list): list of integers representing the heights of the towers. queries (list): list of tuples where each tuple contains two integers (l, r). representing the range (1-based index inclusive). Returns: list: heights of the tallest towers for each query range. results = [] for l, r in queries: max_height = max(heights[l-1:r]) # converting 1-based index to 0-based results.append(max_height) return results"},{"question":"For this exercise, you will create a function `merge_dicts` that takes any number of dictionaries and merges them into a single dictionary. If the same key is present in multiple dictionaries, the value from the last dictionary containing the key should be used in the final result. The following are examples of how this function would be used and what the expected results would be: ```python merge_dicts({\'a\': 1, \'b\': 2}, {\'b\': 3, \'c\': 4}, {\'a\': 5, \'d\': 6}) # returns {\'a\': 5, \'b\': 3, \'c\': 4, \'d\': 6} merge_dicts({\'x\': 7}, {\'y\': 8, \'z\': 9}, {\'y\': 10, \'x\': 11}) # returns {\'x\': 11, \'y\': 10, \'z\': 9} ```","solution":"def merge_dicts(*dicts): Merges any number of dictionaries into a single dictionary. If the same key is present in multiple dictionaries, the value from the last dictionary containing the key is used. result = {} for d in dicts: result.update(d) return result"},{"question":"Create a function that computes the total ribbon length required to wrap a given set of boxes. Each box is represented as a tuple of three integers (length, width, height). The ribbon length for each box is defined as the smallest perimeter of any one face plus the volume of the box. Some examples: ``` [(2, 3, 4)] -> 10 (smallest perimeter) + 24 (volume) = 34 [(1, 1, 10)] -> 4 (smallest perimeter) + 10 (volume) = 14 [(2, 3, 4), (1, 1, 10)] -> (34) + (14) = 48 ``` Write a function: ```python def total_ribbon_length(boxes: List[Tuple[int, int, int]]) -> int: # Your code here ``` If the input list is empty, return 0. If a tuple within the list does not contain exactly three positive integers, return -1.","solution":"from typing import List, Tuple def total_ribbon_length(boxes: List[Tuple[int, int, int]]) -> int: def ribbon_length_for_box(length: int, width: int, height: int) -> int: perimeters = [ 2 * (length + width), 2 * (width + height), 2 * (height + length) ] smallest_perimeter = min(perimeters) volume = length * width * height return smallest_perimeter + volume total_length = 0 for box in boxes: if len(box) != 3 or not all(isinstance(dimension, int) and dimension > 0 for dimension in box): return -1 length, width, height = box total_length += ribbon_length_for_box(length, width, height) return total_length"},{"question":"Write a function that takes a string containing a mathematical expression in infix notation and returns its result as an integer. - The string will contain only positive integers and the operators `+`, `-`, `*`, `/` (integer division). - The string will not contain any whitespace. - The expression may contain parentheses `()` to indicate precedence. Examples: `\\"2+3*4\\"` -> 14 `\\"(2+3)*4\\"` -> 20 `\\"10+(2*5)-3\\"` -> 17 `\\"20/(4+1)\\"` -> 4 *Attention: You should handle the operator precedence and parentheses correctly.*","solution":"def evaluate_expression(expression): Evaluates a mathematical expression in infix notation and returns the result as an integer. The expression contains only positive integers and the operators +, -, *, / (integer division), and may contain parentheses to indicate precedence. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operation(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b def calculate(values, operators): right = values.pop() left = values.pop() op = operators.pop() values.append(apply_operation(left, right, op)) values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': calculate(values, operators) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): calculate(values, operators) operators.append(expression[i]) i += 1 while len(operators) != 0: calculate(values, operators) return values[-1]"},{"question":"Write a function named `numberToWords` that converts a non-negative integer less than 1000 to its English words representation. The function should handle all valid inputs and return the corresponding English words. For example: ```if-not:julia,racket numberToWords(0) -> \\"zero\\" numberToWords(5) -> \\"five\\" numberToWords(13) -> \\"thirteen\\" numberToWords(85) -> \\"eighty-five\\" numberToWords(100) -> \\"one hundred\\" numberToWords(342) -> \\"three hundred forty-two\\" numberToWords(999) -> \\"nine hundred ninety-nine\\" ```","solution":"def numberToWords(num): if num == 0: return \\"zero\\" below_20 = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\", \\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] def words(n): if n < 20: return below_20[n] elif n < 100: return tens[n // 10] + (\\"-\\" + below_20[n % 10] if (n % 10 != 0) else \\"\\") else: return below_20[n // 100] + \\" hundred\\" + (\\" \\" + words(n % 100) if (n % 100 != 0) else \\"\\") return words(num)"},{"question":"Write a function that accepts an integer `n` as input and returns a list containing the fibonacci sequence up to the `n`th term. # Requirements - Your function should handle values of `n` >= 1. - The fibonacci sequence is defined as: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two. # Notes - Implement an efficient solution that avoids unnecessary computations.","solution":"def fibonacci(n): Returns a list containing the Fibonacci sequence up to the nth term. Parameters: n (int): the number of terms in the Fibonacci sequence to generate Returns: list: a list containing the Fibonacci sequence up to the nth term if n == 1: return [0] elif n == 2: return [0, 1] fib_seq = [0, 1] for i in range(2, n): fib_seq.append(fib_seq[-1] + fib_seq[-2]) return fib_seq"},{"question":"Given an integer array `nums` where each integer appears exactly three times except for one integer which appears only once, find and return the single instance integer. You must implement a solution with a linear runtime complexity and use only constant extra space. Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99 Constraints: * 1 <= nums.length <= 3 * 10^4 * -2^31 <= nums[i] <= 2^31 - 1 * Each element in `nums` appears exactly three times except for one element which appears once.","solution":"def singleNumber(nums): Returns the single instance integer in the list of integers `nums` where each integer appears exactly three times except for one integer which appears only once. ones, twos = 0, 0 for num in nums: # `twos` holds the num that appears twice twos |= ones & num # `ones` holds the num that appears once ones ^= num # `threes` holds the num appeared three times threes = ones & twos # if num appeared three times # remove it ones &= ~threes twos &= ~threes return ones"},{"question":"Create a function that calculates the total distance traveled by a frog in a series of jumps. The function takes in an array of positive integers representing the distance of each jump and a boolean representing whether the frog can double-jump (a double-jump allows the frog to jump twice the distance of a regular jump). If double-jumping is allowed, every other jump (starting from the second jump) is doubled in distance. If double-jumping is not allowed, the frog travels the exact distance of each jump as provided in the array. Return the total distance traveled by the frog. **Examples:** ```python # Example 1: distance_jumps = [5, 3, 8, 2] can_double_jump = True # The frog makes the following jumps: 5, 6 (3*2), 8, 4 (2*2) # Total distance: 5 + 6 + 8 + 4 = 23 total_distance(distance_jumps, can_double_jump) → 23 # Example 2: distance_jumps = [7, 4, 5, 3] can_double_jump = False # The frog makes the following jumps: 7, 4, 5, 3 # Total distance: 7 + 4 + 5 + 3 = 19 total_distance(distance_jumps, can_double_jump) → 19 ``` **Function Signature:** ```python def total_distance(distance_jumps: list, can_double_jump: bool) -> int: # Your code here ``` **Constraints:** - The length of the distance_jumps array will be between 1 and 1000. - Each jump distance in the array will be between 1 and 10^3.","solution":"def total_distance(distance_jumps: list, can_double_jump: bool) -> int: Calculate the total distance traveled by a frog in a series of jumps. Args: distance_jumps (list): A list of integers representing the distance of each jump. can_double_jump (bool): A boolean indicating if the frog can double-jump. Returns: int: The total distance traveled by the frog. total_distance = 0 for i in range(len(distance_jumps)): if can_double_jump and i % 2 == 1: total_distance += distance_jumps[i] * 2 else: total_distance += distance_jumps[i] return total_distance"},{"question":"Given a list of integers, determine if each integer is a \\"Perfect Number\\". A Perfect Number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. For example, the number 6 has proper divisors 1, 2, and 3, and 1 + 2 + 3 = 6, so 6 is a Perfect Number. -----Input----- A list of <100 integers, one on each line, all less than 10^9. -----Output----- For each integer, output \\"YES\\" if it is a Perfect Number, otherwise output \\"NO\\". -----Example----- Input: 6 28 10 Output: YES YES NO","solution":"def is_perfect_number(num): Determines if a number is a Perfect Number. A Perfect Number is a positive integer that is equal to the sum of its proper divisors, excluding the number itself. if num <= 1: return False divisor_sum = 1 # Start with 1, which is a proper divisor of any positive integer sqrt_num = int(num**0.5) for i in range(2, sqrt_num + 1): if num % i == 0: divisor_sum += i + (num // i if i != num // i else 0) return divisor_sum == num def check_perfect_numbers(numbers): Given a list of integers, determine if each integer is a \\"Perfect Number\\". Returns a list of \\"YES\\" or \\"NO\\". return [\\"YES\\" if is_perfect_number(num) else \\"NO\\" for num in numbers]"},{"question":"Write a function that calculates the total number of ways to decode a given string containing only digits. Each digit or group of digits can be decoded as letters based on the mapping: \'1\' -> \'A\', \'2\' -> \'B\', ..., \'26\' -> \'Z\'. The input to the function will be a non-empty string of digits. For example: - The string \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). So, there are 2 possible decodings. - The string \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). So, there are 3 possible decodings. Develop a function `numDecodings(s: str) -> int` that returns the number of different ways to decode a string. **Constraints**: - The length of the input string will not exceed 100. - The input string will only contain digits and will not start with \'0\'. **Examples**: - `numDecodings(\\"123\\")` should return 3 (as \\"ABC\\", \\"LC\\", \\"AW\\"). - `numDecodings(\\"06\\")` should return 0 (no valid decodings).","solution":"def numDecodings(s: str) -> int: if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and \'10\' <= s[i - 2:i] <= \'26\': dp[i] += dp[i - 2] return dp[n]"},{"question":"Objective Create a function that takes a list of integers and returns the maximum possible sum of a contiguous subarray. A contiguous subarray of a list is a subset of the elements where all the elements are next to each other in the original list. Examples | Input | Output | |-----------------------------------|--------| | `[1, -3, 2, 1, -1]` | 3 | | `[4, -1, 2, 1, -5, 4]` | 6 | | `[-2, -3, 4, -1, -2, 1, 5, -3]` | 7 | | `[10, -2, -1, 5, -10, 7, -1, -4]` | 12 | Consider the edge case where the input list is empty. In this case, the function should return 0. The function should also handle cases where all numbers in the array are negative, returning the least negative number.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a contiguous subarray in the given list. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Implement a function `inverse_word_order(sentence)` that takes in a string `sentence`. The function should rearrange the words in the sentence in the reverse order of their appearance and return the resulting string. # Input: - A single string `sentence` containing alphabetic characters and spaces, with no leading or trailing spaces. - The length of the sentence will be between 1 and 1000 characters. # Output: - A single string with the words in the reverse order, maintaining the same spacing between words as in the original sentence. # Example: ```python inverse_word_order(\\"the quick brown fox jumps over the lazy dog\\") ``` Output: ``` \\"dog lazy the over jumps fox brown quick the\\" ``` # Note: - Consider the spaces between the words in the sentence. The input sentence will not have extra spaces. **Hint:** You may use the `split()` method to break the sentence into words and `join()` method to concatenate them back together in the desired order.","solution":"def inverse_word_order(sentence): Returns the sentence with its words in the reverse order. Parameters: sentence (str): A string containing words separated by spaces. Returns: str: A string with the words in the reverse order, maintaining the same spacing. # Split the sentence into words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list into a single string separated by spaces reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"A company has a server, which is represented by a grid of dimensions M times N, where each cell in the grid represents a unit of processing power. The processing power of the cell located at (i, j) is given by a matrix P of size M times N. The company\'s goal is to identify a rectangular subgrid within this grid that has the maximum sum of processing power. Your task is to write a program that returns the maximum sum of processing power that can be obtained from any rectangular subgrid within the grid. -----Input----- - The first line of the input contains two integers M and N denoting the number of rows and columns in the grid. - The next M lines each contain N integers. The j-th integer in the i-th row of these M lines represents P[i][j], the processing power of the cell located at (i, j). -----Output----- Print a single integer, which is the maximum sum of processing power that can be obtained from any rectangular subgrid in the grid. -----Constraints----- - 1 le M, N le 300 - -10^5 le P[i][j] le 10^5 -----Example Input----- 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 -----Example Output----- 29 -----Explanation----- In the example case, the maximum sum of processing power is achieved by the subgrid: ``` 3 8 10 -4 -1 1 ``` The sum of this subgrid is 3 + 8 + 10 + (-4) + (-1) + 1 = 17 + 2 = 29. Hence, the output is 29.","solution":"def max_sum_subgrid(M, N, grid): # Initialize max sum as the smallest possible value max_sum = -float(\'inf\') # Prefix sums for rows for top in range(M): temp_sums = [0] * N for bottom in range(top, M): for col in range(N): temp_sums[col] += grid[bottom][col] # Use Kadane\'s algorithm to find the max sum subarray in temp_sums max_sum = max(max_sum, kadane(temp_sums)) return max_sum def kadane(arr): max_ending_here = max_so_far = -float(\'inf\') for x in arr: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far # input processing function for testing def process_input(input_data): input_lines = input_data.strip().split(\'n\') M, N = map(int, input_lines[0].split()) grid = [list(map(int, line.split())) for line in input_lines[1:]] return M, N, grid # Handle the given example input and output M = 4 N = 5 grid = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] print(max_sum_subgrid(M, N, grid)) # Output: 29"},{"question":"You are given a collection of intervals on a number line, each represented by a tuple with a start and end point `(start, end)`. Write a function to merge all overlapping intervals and return the resulting collection of merged intervals. Two intervals overlap if they share at least one point. The input is an array of tuples, where each tuple consists of two integers representing the start and end of an interval. The output should be a new array of tuples with merged intervals in ascending order of their start points. Example: Input: `[(1, 3), (2, 4), (5, 7), (6, 8)]` Output: `[(1, 4), (5, 8)]` Function Signature: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ```","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not intervals: return [] # Sort intervals by the start points intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: last = merged[-1] if current[0] <= last[1]: # Overlapping intervals merged[-1] = (last[0], max(last[1], current[1])) else: merged.append(current) return merged"},{"question":"In the world of blockchain, transactions are grouped into blocks. Each block contains data about transactions and a hash of the previous block, forming a blockchain. Consider a simplified blockchain implemented as a singly linked list, where each node represents a block, and contains two attributes: `data` (a string representing transactions) and `prev_hash` (a string representing the hash of the previous block). To ensure data integrity, every time a new block is added, its hash should be calculated based on its data and the hash of the previous block. For simplicity, you can assume the hash function is a predefined function `simple_hash` which takes a string as input and returns its hash as a string. You are required to implement a blockchain with the following operations: 1. Adding a new block with given transaction data. 2. Getting the hash of the latest block. Define a class `Blockchain` representing the blockchain with the following methods: # Method 1 **`__init__`** - This method initializes an empty blockchain with a genesis block. - The hash of the genesis block will be `\\"0\\"` and the data will be an empty string. # Method 2 **`add_block(data: str) -> None`** - This method adds a new block to the blockchain with the given `data` as the block\'s transaction data. - It calculates the hash of the new block based on its data and the hash of the previous block. # Method 3 **`get_latest_hash() -> str`** - This method returns the hash of the latest block in the blockchain. For the hashing function, assume that `simple_hash` is defined as follows: ```python def simple_hash(s: str) -> str: hash_value = 0 for char in s: hash_value = (hash_value * 31 + ord(char)) % 1_000_000_007 return str(hash_value) ``` # Input 1. A sequence of operations where each operation is either: - `\\"ADD, <transaction_data>\\"` representing a call to `add_block(data)`. - `\\"HASH\\"` representing a call to `get_latest_hash()`. # Output - For each `\\"HASH\\"` operation, output the hash of the latest block. # Example Assume the following sequence of operations: ``` [\\"ADD, Alice pays Bob 10 BTC\\", \\"HASH\\", \\"ADD, Bob pays Charlie 5 BTC\\", \\"HASH\\"] ``` The output would be: ``` hash1 hash2 ``` where `hash1` and `hash2` are the hashes of the latest blocks after the respective `ADD` operations. # Explanation 1. Initially, the blockchain is empty with the genesis block having a hash of `\\"0\\"`. 2. After the first `ADD` operation, a new block with data `\\"Alice pays Bob 10 BTC\\"` is appended. The hash of this block is calculated as `simple_hash(\\"Alice pays Bob 10 BTC\\" + \\"0\\")`. 3. The first `HASH` operation returns this hash. 4. The second `ADD` operation adds another block with data `\\"Bob pays Charlie 5 BTC\\"` and calculates its hash based on the previous hash. 5. The second `HASH` operation returns the new latest hash. Make sure you handle each operation efficiently and the blockchain maintains the integrity of the hash chaining.","solution":"def simple_hash(s: str) -> str: hash_value = 0 for char in s: hash_value = (hash_value * 31 + ord(char)) % 1_000_000_007 return str(hash_value) class Block: def __init__(self, data: str, prev_hash: str): self.data = data self.prev_hash = prev_hash self.hash = simple_hash(data + prev_hash) class Blockchain: def __init__(self): genesis_block = Block(\'\', \'0\') self.blocks = [genesis_block] def add_block(self, data: str) -> None: prev_hash = self.blocks[-1].hash new_block = Block(data, prev_hash) self.blocks.append(new_block) def get_latest_hash(self) -> str: return self.blocks[-1].hash"},{"question":"Write a function called `extract_subsequence` which takes a string `s` and an integer `k`, and returns the lexicographically smallest subsequence of length `k`. The input string `s` consists of lowercase alphabets (\'a\' to \'z\'). The function should find the smallest subsequence that maintains the relative order of characters in the original string. If multiple subsequences of the same lexicographical value exist, return any of them. For example: - Given `s = \\"bacd\\"` and `k = 2`, the function should return `\\"ac\\"`. - Given `s = \\"bcabc\\"` and `k = 3`, the function should return `\\"abc\\"`. The function signature is as follows: ```python def extract_subsequence(s: str, k: int) -> str: pass ```","solution":"def extract_subsequence(s: str, k: int) -> str: Returns the lexicographically smallest subsequence of length k that maintains the relative order of characters in the original string s. stack = [] remaining = len(s) for char in s: while stack and stack[-1] > char and len(stack) + remaining - 1 >= k: stack.pop() if len(stack) < k: stack.append(char) remaining -= 1 return \'\'.join(stack)"},{"question":"Given a grid of size m x n, you are initially positioned at the top-left corner (i.e., grid[0][0]). You are required to find the number of unique paths to reach the bottom-right corner (i.e., grid[m-1][n-1]). You can only move either down or right at any point in time. Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example 2: Input: m = 7, n = 3 Output: 28 Explanation: From the top-left corner, there are a total of 28 ways to reach the bottom-right corner. Note: m and n will be at most 100.","solution":"def unique_paths(m, n): Returns the number of unique paths in a m x n grid from top-left to bottom-right corner # Create a 2D array `dp` with `m` rows and `n` columns initialized to 1 dp = [[1] * n for _ in range(m)] # Start filling the dp array from the cell at (1, 1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the value in the bottom-right cell return dp[m-1][n-1]"},{"question":"=====Problem Statement===== You are working with a team of data analysts who need to validate email addresses for a new application. The goal is to ensure that all email addresses entered by users meet the formal criteria for valid email addresses. A valid email address has the following characteristics: ► It must have exactly one \'@\' symbol. ► The local part (username) must: - start with an alphanumeric character (a-z, A-Z, 0-9). - only contain alphanumeric characters and these special characters: \'.\', \'_\', \'%\', \'+\', \'-\'. ► The domain part must: - contain at least one \'.\'. - only contain alphanumeric characters and the special character \'-\'. - not start or end with a special character. - the last part (top-level domain) must be at least 2 characters long. =====Example===== Valid Email Addresses: - simple@example.com - very.common@example.co.in - long.email+tag@sub.company-name.com Invalid Email Addresses: - plainaddress # Missing \'@\' symbol → Invalid - @missingusername.com # Missing username → Invalid - username@.com # Domain starts with \'.\' → Invalid - username@company. # TLD is less than 2 characters long → Invalid =====Input Format===== The first line of input contains an integer N. The next N lines contain email addresses. =====Constraints===== 0 < N < 100 =====Output Format===== Print \'Valid\' if the email address is valid. Otherwise, print \'Invalid\'. Do not print the quotes.","solution":"import re def validate_email(email): Validate if given email address is valid according to the specified criteria. Parameters: email (str): The email address to validate. Returns: str: \'Valid\' if the email address is valid, otherwise \'Invalid\'. email_regex = re.compile( r\\"^[a-zA-Z0-9][a-zA-Z0-9._%+-]*@[a-zA-Z0-9-]+(.[a-zA-Z0-9-]+)*.[a-zA-Z]{2,}\\" ) if re.match(email_regex, email): return \'Valid\' else: return \'Invalid\'"},{"question":"Fruit Basket Sorting Write a function that takes an array of fruit objects and sorts them by their type, then by their weight in descending order. Each fruit object has the properties: type (string), and weight (number). Function Signature: `def sort_fruits(fruits: List[Dict[str, Union[str, float]]]) -> List[Dict[str, Union[str, float]]]:` Example: Input: ```python fruits = [ {\'type\': \'apple\', \'weight\': 1.2}, {\'type\': \'banana\', \'weight\': 1.1}, {\'type\': \'banana\', \'weight\': 1.3}, {\'type\': \'apple\', \'weight\': 1.0} ] ``` Output: ```python [ {\'type\': \'apple\', \'weight\': 1.2}, {\'type\': \'apple\', \'weight\': 1.0}, {\'type\': \'banana\', \'weight\': 1.3}, {\'type\': \'banana\', \'weight\': 1.1} ] ``` Note: - The sorted list should first group the fruits by their type in alphabetical order. - Within each type, the fruits should be sorted by their weight in descending order.","solution":"from typing import List, Dict, Union def sort_fruits(fruits: List[Dict[str, Union[str, float]]]) -> List[Dict[str, Union[str, float]]]: Sorts an array of fruit objects first by their type (alphabetically), then by their weight in descending order. return sorted(fruits, key=lambda fruit: (fruit[\'type\'], -fruit[\'weight\']))"},{"question":"You are given a list of n unique integers. Construct an operation to apply on some of the integers to rearrange the list such that after applying the operation exactly once, the sum of every prefix of the list is unique. -----Input----- The first line contains one integer n (1 ≤ n ≤ 22) — the size of the list. The second line contains n space-separated distinct integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the list. -----Output----- If it is not possible to achieve the condition by applying the operation exactly once, print -1. Otherwise, print the reordered list with the operation applied. If multiple answers exist, print any of them. -----Description of the Operation----- The operation consists of selecting two indices i and j (1 ≤ i, j ≤ n), and swapping the elements at these indices. -----Examples----- Input 3 3 1 2 Output 1 3 2 Input 4 4 1 3 2 Output 1 4 2 3 -----Note----- A prefix of a list is any leading segment of the list. For example, the prefixes of the list [a, b, c] are [], [a], [a, b], and [a, b, c]. Ensure that the sums of these prefixes (after applying the swap exactly once) are all unique.","solution":"def rearrange_list(n, a): # Check if there\'s only one element which automatically satisfies the condition if n == 1: return a # Sort the list to easily generate distinct prefix sums a.sort() # Prefix sums have to be unique, sorted unique elements guarantee it. rearranged = a return rearranged"},{"question":"Tic-Tac-Toe Checker Tic-Tac-Toe is played on a 3x3 grid by two players who take turns marking spaces with \'X\' or \'O\'. The player who succeeds in placing three of their marks in a horizontal, vertical, or diagonal row wins the game. You will receive a 3x3 list of lists representing a Tic-Tac-Toe board: ```python tic_tac_toe_board = [[\\"X\\", \\"O\\", \\"X\\"], [\\"O\\", \\"X\\", \\"O\\"], [\\"O\\", \\"X\\", \\"X\\"]] ``` Write a function that receives such a board and returns the winner (\\"X\\" or \\"O\\") or \\"Draw\\" if there is no winner. Your function signature should be: ```python def check_tic_tac_toe_winner(board: list) -> str: ```","solution":"def check_tic_tac_toe_winner(board: list) -> str: Determines the winner of a Tic-Tac-Toe game or returns \\"Draw\\" if there is no winner. :param board: A 3x3 list of lists representing the Tic-Tac-Toe board. :return: \\"X\\", \\"O\\", or \\"Draw\\" # Check rows and columns for i in range(3): if board[i][0] == board[i][1] == board[i][2] != \\" \\": return board[i][0] if board[0][i] == board[1][i] == board[2][i] != \\" \\": return board[0][i] # Check diagonals if board[0][0] == board[1][1] == board[2][2] != \\" \\": return board[0][0] if board[0][2] == board[1][1] == board[2][0] != \\" \\": return board[0][2] return \\"Draw\\""},{"question":"A warehouse management system needs to track the most frequently accessed items across different categories to optimize their placement. The system should periodically report the top `N` most accessed items for each category. Given a log of accesses where each access is represented by a tuple `(timestamp, category, item_id)`, write a function that processes this log and returns the most accessed `N` items for each category. For simplicity, assume the log is ordered by ascending timestamps. # Input - A list of tuples representing the access log, each tuple contains: - `timestamp` (string): The time of access in the format `\\"YYYY-MM-DD HH:MM:SS\\"`. - `category` (string): The category of the item accessed. - `item_id` (string): The unique identifier of the item accessed. - An integer `N` representing the number of top accessed items to report for each category. # Output - A dictionary where the keys are category names, and the values are lists of the top `N` most accessed `item_id`s for that category, ordered by their access frequency (highest to lowest). If there is a tie in frequency, the tie should be broken by the item IDs in lexicographical order. # Example ```python access_log = [ (\\"2023-01-01 10:00:00\\", \\"electronics\\", \\"itemA\\"), (\\"2023-01-01 10:01:00\\", \\"electronics\\", \\"itemB\\"), (\\"2023-01-01 10:02:00\\", \\"clothing\\", \\"itemC\\"), (\\"2023-01-01 10:03:00\\", \\"clothing\\", \\"itemC\\"), (\\"2023-01-01 10:04:00\\", \\"electronics\\", \\"itemA\\"), (\\"2023-01-01 10:05:00\\", \\"clothing\\", \\"itemD\\"), (\\"2023-01-01 10:06:00\\", \\"clothing\\", \\"itemC\\"), (\\"2023-01-01 10:07:00\\", \\"electronics\\", \\"itemB\\") ] N = 2 def top_accessed_items(access_log, N): pass top_accessed_items(access_log, N) ``` # Expected Output ```python { \\"electronics\\": [\\"itemA\\", \\"itemB\\"], \\"clothing\\": [\\"itemC\\", \\"itemD\\"] } ``` # Notes - Assume that all item IDs within a category are unique. - Ensure the function performs efficiently, as it might process large logs.","solution":"from collections import defaultdict, Counter def top_accessed_items(access_log, N): Returns the top N most accessed items for each category. Parameters: access_log (list of tuples): Each tuple contains (timestamp, category, item_id) N (int): Number of top accessed items to return for each category Returns: dict: Keys are categories, values are lists of top N accessed item_ids access_count = defaultdict(Counter) for _, category, item_id in access_log: access_count[category][item_id] += 1 top_items = {} for category, counter in access_count.items(): sorted_items = sorted(counter.items(), key=lambda x: (-x[1], x[0])) top_items[category] = [item_id for item_id, _ in sorted_items[:N]] return top_items"},{"question":"You are given an array of integers representing the inventory count of different types of fruits in a grocery store. Each element `inventory[i]` denotes the number of fruits of type `i`. The store shelves need to be refilled such that each type of fruit appears continuously on the shelves and follows the order given in the array. For instance, if the array is `[3, 2, 1]`, it means there should be 3 fruits of the first type, followed by 2 fruits of the second type, and 1 fruit of the third type. Write a function that returns the shelf arrangement as a single string, where each fruit type is represented by a different lowercase letter starting from \'a\'. Example 1: Input: inventory = [3, 2, 1] Output: \\"aaabbc\\" Explanation: There are 3 fruits of type \'a\', followed by 2 fruits of type \'b\', and 1 fruit of type \'c\'. The correct arrangement is \\"aaabbc\\". Example 2: Input: inventory = [1, 1, 1, 1] Output: \\"abcd\\" Explanation: There is 1 fruit of type \'a\', 1 fruit of type \'b\', 1 fruit of type \'c\', and 1 fruit of type \'d\'. The correct arrangement is \\"abcd\\". Example 3: Input: inventory = [5] Output: \\"aaaaa\\" Explanation: There are 5 fruits of type \'a\'. The correct arrangement is \\"aaaaa\\". Constraints: 1 <= inventory.length <= 26 1 <= inventory[i] <= 10","solution":"def shelf_arrangement(inventory): Returns a string representing the shelf arrangement of fruits. Each fruit type is represented by a lowercase letter starting from \'a\'. Params: inventory (list of int): List representing the count of each type of fruit. Returns: str: A string representing the shelf arrangement. shelf = [] for i, count in enumerate(inventory): shelf.append(chr(97 + i) * count) # \'a\' -> 97 + i gives the alphabet corresponding to the type return \'\'.join(shelf)"},{"question":"You are given a list of package delivery orders which consist of a sender, a receiver, and a list of items. Each order specifies the sender and receiver as strings, and the list of items as a list of strings. Each item string is unique within an order, and items are also not shared between different orders. Your task is to group these orders by their sender, and within each sender group, sort the orders by the name of the receiver in ascending order. Then, for each group of orders from the same sender, output the sender, followed by each receiver and their corresponding items. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of package delivery orders. Each of the next n lines contains a string formatted as \\"sender:receiver:item1,item2,...,itemk\\", where: - `sender` consists of lowercase English letters and the length of the sender is positive and doesn\'t exceed 20. - `receiver` consists of lowercase English letters and the length of the receiver is positive and doesn\'t exceed 20. - The items are non-empty strings consisting of lowercase English letters and each string doesn\'t exceed 20 characters. The number of items (k) in each order is positive and doesn\'t exceed 50. -----Output----- First print m — the number of unique senders. Next m sections should contain the description of each sender and their orders, one sender per section. Each section starts with the sender\'s name in a line, followed by the orders sent by that sender, sorted by the receiver\'s name. For each order, print the receiver followed by the list of items in the format given in the input. -----Example----- Input 5 anna:betty:apple anna:carol:banana,cat david:frank:dog anna:alice:elephant david:george:fish Output 2 anna alice:elephant betty:apple carol:banana,cat david frank:dog george:fish","solution":"def group_and_sort_orders(n, orders): from collections import defaultdict # Organize orders into a dictionary grouped by sender grouped_orders = defaultdict(list) for order in orders: sender, receiver, items = order.split(\':\', 2) items_list = items.split(\',\') grouped_orders[sender].append((receiver, items_list)) # Sort orders within each sender group by receiver\'s name for sender in grouped_orders: grouped_orders[sender].sort(key=lambda x: x[0]) # Get the sorted list of senders sorted_senders = sorted(grouped_orders.keys()) # Preparing the output result = [str(len(sorted_senders))] for sender in sorted_senders: result.append(sender) for receiver, items in grouped_orders[sender]: result.append(f\\"{receiver}:{\',\'.join(items)}\\") return result"},{"question":"Create a function that takes two arguments: 1. An array of words 2. A string representing a character The function must return an array of all the words that start with the given character. The words should be in the same order as they appear in the input array. If no words start with the given character, return an empty array. The function should be case-insensitive, meaning that the search should treat uppercase and lowercase characters as equivalent. **Example:** ```python filter_words([\'apple\', \'banana\', \'apricot\', \'blueberry\', \'cherry\'], \'a\') ``` **Output:** ```python [\'apple\', \'apricot\'] ``` ```python filter_words([\'apple\', \'banana\', \'Apricot\', \'Blueberry\', \'cherry\'], \'B\') ``` **Output:** ```python [\'banana\', \'Blueberry\'] ```","solution":"def filter_words(words, character): Returns an array of words from the input list that start with the given character (case insensitive). return [word for word in words if word.lower().startswith(character.lower())]"},{"question":"Alice is learning about binary search trees (BST) and their properties. She knows that a BST is a tree data structure where each node has at most two children, referred to as the left child and the right child. For any given node with value V, all values in the left subtree are less than V, and all values in the right subtree are greater than V. Alice wants to build a BST, but instead of inserting nodes one by one, she wants to construct the BST from its level order traversal. The level order traversal of a BST is a sequence where nodes are visited level-by-level, starting from the root. If multiple nodes are on the same level, they are visited from left to right. Write a program to construct a BST from a given level order traversal and then output the in-order traversal of the constructed BST. The in-order traversal of a BST is defined as visiting the left subtree, the current node, and then the right subtree recursively. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of nodes in the BST. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the level order traversal of the BST. -----Output----- Print a single line with n space-separated integers representing the in-order traversal of the constructed BST. -----Example----- Input 7 4 2 6 1 3 5 7 Output 1 2 3 4 5 6 7 -----Note----- In the given example, the BST constructed from the level order traversal is: ``` 4 / 2 6 / / 1 3 5 7 ``` The in-order traversal of this tree is: 1, 2, 3, 4, 5, 6, 7.","solution":"from collections import deque class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def construct_bst_from_level_order(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = deque([root]) index = 1 while index < len(level_order): node = queue.popleft() # Check and insert left child if index < len(level_order) and level_order[index] < node.val: node.left = TreeNode(level_order[index]) queue.append(node.left) index += 1 # Check and insert right child if index < len(level_order) and level_order[index] > node.val: node.right = TreeNode(level_order[index]) queue.append(node.right) index += 1 return root def inorder_traversal(root): if not root: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) def bst_inorder_from_level_order(n, level_order): root = construct_bst_from_level_order(level_order) return inorder_traversal(root)"},{"question":"You are provided with N integer points on a 2D Cartesian plane. Your task is to determine the maximum number of points that lie on the same straight line. To clarify, you need to find a line (a linear function in two dimensions) which passes through the largest number of given points. ----- Input - The first line of input contains a single integer T, the number of test cases. - For each test case, the first line contains the integer N, representing the number of points. - The following N lines each contain two space-separated integers x and y, representing the coordinates of each point. ----- Output - For each test case, output a single integer, the maximum number of points that lie on the same straight line. ----- Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 300 - -1000 ≤ x, y ≤ 1000 ----- Example Input: 2 4 1 1 2 2 3 3 4 4 6 1 1 1 2 2 2 2 3 3 3 4 4 Output: 4 4 ----- Explanation In the first test case, all the four points lie on the line y = x. In the second test case, the points (1, 1), (2, 2), (3, 3), and (4, 4) lie on the line y = x. Thus, the maximum number of points on a single line is 4.","solution":"from collections import defaultdict from math import gcd def max_points_on_line(points): if len(points) < 3: return len(points) def get_slope(point1, point2): x1, y1 = point1 x2, y2 = point2 dx = x2 - x1 dy = y2 - y1 if dx == 0: return \'inf\' g = gcd(dx, dy) return (dy // g, dx // g) max_points = 1 for i in range(len(points)): slopes = defaultdict(int) duplicate = 1 for j in range(i+1, len(points)): if points[i] == points[j]: duplicate += 1 else: slope = get_slope(points[i], points[j]) slopes[slope] += 1 if slopes: max_points = max(max_points, max(slopes.values()) + duplicate) else: max_points = max(max_points, duplicate) return max_points def max_points_in_cases(test_cases): results = [] for case in test_cases: results.append(max_points_on_line(case)) return results"},{"question":"You are given a grid with R rows and C columns, filled with integers. The task is to find the minimum path sum from the top-left corner of the grid to the bottom-right corner. You can only move either down or right at any point in time. -----Input----- The first line contains two integers R and C, indicating the number of rows and columns in the grid (1 ≤ R, C ≤ 100). Each of the following R lines contains C integers representing the values in the grid. Each value in the grid is between 0 and 1000, inclusive. -----Output----- Print the minimum path sum from the top-left corner to the bottom-right corner. -----Constraints----- 1 ≤ R, C ≤ 100 0 ≤ Grid[i][j] ≤ 1000 -----Sample Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Sample Output----- 7 -----Explanation----- The path 1→3→1→1→1 minimizes the sum. In the above grid, the total path sum is 1 + 3 + 1 + 1 + 1 = 7. This is the minimum path sum from the top-left corner to the bottom-right corner, with only movements allowed to the right or down.","solution":"def min_path_sum(grid): R = len(grid) C = len(grid[0]) dp = [[0] * C for _ in range(R)] dp[0][0] = grid[0][0] for i in range(1, R): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, C): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[R-1][C-1] def find_min_path_sum(R, C, grid_values): grid = [] for i in range(R): grid.append(grid_values[i * C:(i + 1) * C]) return min_path_sum(grid)"},{"question":"Given a non-empty array of integers, you\'d like to know if there exists a pair of indices (i, j) such that i < j and the sum of the elements at these indices is equal to a given target value. Write a function that determines if such a pair exists. If such indices exist, return a pair of these indices. Otherwise, return an empty array. Your function should return the indices as an array [i, j] of length 2 such that array[i] + array[j] == target and i < j. Example 1: Input: array = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because array[0] + array[1] == 9, we return [0, 1]. Example 2: Input: array = [1, 2, 3, 4, 6], target = 6 Output: [1, 3] Explanation: Because array[1] + array[3] == 6, we return [1, 3]. Example 3: Input: array = [3, 3], target = 6 Output: [0, 1] Explanation: Because array[0] + array[1] == 6, we return [0, 1]. Note: * You may assume that each input would have exactly one solution. * You may not use the same element twice.","solution":"def find_pair_with_target_sum(arr, target): Returns the indices of the two numbers such that they add up to target. Args: arr: List of integers. target: Target integer sum. Returns: A list with two indices if a pair is found; otherwise, an empty list. index_map = {} for index, number in enumerate(arr): difference = target - number if difference in index_map: return [index_map[difference], index] index_map[number] = index return []"},{"question":"Create a function `snailPath(matrix)` that determines if there is a path for a snail to navigate from the top-left corner to the bottom-right corner of a given 2D array grid. The snail can only move through cells that contain the value `1` and can only travel in four directions: up, down, left, and right. The grid will be represented as a list of lists containing the values `1` (traversable cell) or `0` (blocked cell). The function should return `True` if a path exists and `False` if a path does not exist. # Example: ```python matrix = [ [1, 0, 0, 1], [1, 1, 0, 0], [0, 1, 1, 0], [1, 0, 1, 1] ] snailPath(matrix) => True ``` # Explanation: - In the example above, a path exists from the top-left corner (0, 0) to the bottom-right corner (3, 3). # Constraints: - The grid will always contain at least one cell and the dimensions of the grid will be between 1 and 100. - Each cell will either be `1` or `0`. # Testing: Evaluate the solution with multiple tests, including edge cases such as: - Grids that are entirely `1`s or `0`s. - Grids where no path is possible and grids where the path zigzags or is straightforward.","solution":"def snailPath(matrix): rows, cols = len(matrix), len(matrix[0]) if matrix[0][0] == 0 or matrix[rows-1][cols-1] == 0: return False def dfs(row, col, visited): if row == rows - 1 and col == cols - 1: return True visited.add((row, col)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and (new_row, new_col) not in visited and matrix[new_row][new_col] == 1: if dfs(new_row, new_col, visited): return True return False visited = set() return dfs(0, 0, visited)"},{"question":"Design a parking lot management system. You need to build a class that will manage the parking lot and provide information about available parking spots. The parking lot has a fixed number of parking spots, and each spot can have a vehicle parked or can be vacant. Each vehicle can be identified by its license plate number and has a type: car, bike, or bus. The parking lot can accept any type of vehicle, but there are a limited number of spots designated for each type of vehicle. Your task is to design a class `ParkingLot` that has the following methods: - `__init__(self, num_car_spots: int, num_bike_spots: int, num_bus_spots: int)`: Initializes the parking lot with the given number of car, bike, and bus spots. All spots start out as vacant. - `park_vehicle(self, license_plate: str, vehicle_type: str) -> bool`: Parks a vehicle with the given license plate number and vehicle type (which can be \\"car\\", \\"bike\\", or \\"bus\\") in the parking lot. Returns `True` if the vehicle was successfully parked, and `False` otherwise (for instance, if there are no available spots for the vehicle type). - `remove_vehicle(self, license_plate: str) -> bool`: Removes the vehicle with the given license plate number from the parking lot. Returns `True` if the vehicle was successfully removed, and `False` otherwise (for instance, if there is no vehicle with that license plate in the parking lot). - `get_available_spots(self) -> dict`: Returns a dictionary with the count of available spots for each vehicle type. You should implement this class in Python. -----Input----- The input will be provided as a series of method calls to an instance of the `ParkingLot` class. You need to define each method as specified. -----Output----- Output from the methods should be in accordance with the return type. For instance, a boolean value (True or False) should be returned from methods `park_vehicle` and `remove_vehicle`, and a dictionary should be returned from `get_available_spots`. -----Examples----- ```python # Example usage parking_lot = ParkingLot(num_car_spots=3, num_bike_spots=2, num_bus_spots=1) # Park vehicles print(parking_lot.park_vehicle(\\"ABC123\\", \\"car\\")) # Returns True print(parking_lot.park_vehicle(\\"XYZ789\\", \\"bike\\")) # Returns True print(parking_lot.park_vehicle(\\"DEF456\\", \\"car\\")) # Returns True print(parking_lot.park_vehicle(\\"GHI101\\", \\"bus\\")) # Returns True print(parking_lot.park_vehicle(\\"JJJ111\\", \\"car\\")) # Returns True print(parking_lot.park_vehicle(\\"KLM222\\", \\"bus\\")) # Returns False, no bus spots left # Remove vehicles print(parking_lot.remove_vehicle(\\"ABC123\\")) # Returns True print(parking_lot.remove_vehicle(\\"NOP333\\")) # Returns False, vehicle not found # Get available spots print(parking_lot.get_available_spots()) # Returns {\'car\': 1, \'bike\': 1, \'bus\': 1} ``` -----Note----- - Ensure that the state of the parking lot is consistent throughout the operations. - Handle edge cases like parking a vehicle with the same license plate number which is already parked.","solution":"class ParkingLot: def __init__(self, num_car_spots: int, num_bike_spots: int, num_bus_spots: int): self.total_spots = { \'car\': num_car_spots, \'bike\': num_bike_spots, \'bus\': num_bus_spots } self.available_spots = { \'car\': num_car_spots, \'bike\': num_bike_spots, \'bus\': num_bus_spots } self.parked_vehicles = {} def park_vehicle(self, license_plate: str, vehicle_type: str) -> bool: if vehicle_type not in self.available_spots: return False if self.available_spots[vehicle_type] > 0 and license_plate not in self.parked_vehicles: self.parked_vehicles[license_plate] = vehicle_type self.available_spots[vehicle_type] -= 1 return True return False def remove_vehicle(self, license_plate: str) -> bool: if license_plate in self.parked_vehicles: vehicle_type = self.parked_vehicles.pop(license_plate) self.available_spots[vehicle_type] += 1 return True return False def get_available_spots(self) -> dict: return self.available_spots.copy()"},{"question":"A detective, Sherlock, is investigating a series of break-ins. He\'s found a pattern in which all the addresses of the break-in locations are unique substrings of an encrypted string. The encrypted string `s` is a composition of lower-case English letters. Detectives have asked for your help to calculate the total number of unique substrings for a given encrypted string. Your task is to write a program that determines the number of unique substrings for each given string. -----Input:----- - The first line contains an integer T representing the number of test cases. - The next T lines contain a string s where 1 leq |s| leq 10^5 and s consists of only lower-case English alphabets. -----Output:----- For each test case, output a single integer representing the number of unique substrings in the given string. -----Constraints----- - 1 leq T leq 10 - 1 leq |s| leq 10^5 -----Sample Input:----- 2 ababa abcd -----Sample Output:----- 9 10 -----EXPLANATION:----- Test case 1: Distinct substrings of \\"ababa\\" are: \\"a\\", \\"b\\", \\"ab\\", \\"aba\\", \\"abab\\", \\"ba\\", \\"bab\\", \\"baba\\", \\"ababa\\". Test case 2: Distinct substrings of \\"abcd\\" are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\".","solution":"def count_unique_substrings(s): Function to count the total number of unique substrings for a given string s. # Use a set to track unique substrings unique_substrings = set() # Loop through all possible substrings and add them to the set for i in range(len(s)): for j in range(i + 1, len(s) + 1): unique_substrings.add(s[i:j]) return len(unique_substrings) def process_test_cases(T, test_cases): Process the test cases and return the result for each input string. results = [] for s in test_cases: results.append(count_unique_substrings(s)) return results"},{"question":"Fibonacci Words In the realm of algorithmic storytelling, you\'ve encountered a unique sequence called \\"Fibonacci Words\\". These words are neither numbers nor common textual sequences, but rather strings constructed similarly to the well-known Fibonacci numbers. **Definition**: The Fibonacci Word sequence is defined recursively as follows: 1. `W(0) = \\"0\\"` 2. `W(1) = \\"01\\"` 3. `W(n) = W(n-1) + W(n-2)` for `n > 1` This means: - `W(2) = W(1) + W(0) = \\"01\\" + \\"0\\" = \\"010\\"` - `W(3) = W(2) + W(1) = \\"010\\" + \\"01\\" = \\"01001\\"` - `W(4) = W(3) + W(2) = \\"01001\\" + \\"010\\" = \\"01001010\\"` Given an integer `n`, your task is to write a function `fib_word` that returns the Fibonacci Word `W(n)`. # Input - `n` : An integer (0 ≤ n ≤ 23) # Output - A string representing the `n-th` Fibonacci Word. # Examples ```python fib_word(0) # Output: \\"0\\" fib_word(1) # Output: \\"01\\" fib_word(2) # Output: \\"010\\" fib_word(3) # Output: \\"01001\\" fib_word(4) # Output: \\"01001010\\" ``` # Note - The length of the Fibonacci Word grows exponentially. Ensure your function handles the input efficiently considering the constraints. - Aim to use an iterative or memoized recursive approach instead of a simple recursive method to avoid repeated calculations. Consider edge cases and provide an optimized solution for this interesting algorithmic problem.","solution":"def fib_word(n): Returns the n-th Fibonacci Word. Parameters: n (int): The index of the Fibonacci Word to generate. Returns: str: The n-th Fibonacci Word. if n == 0: return \\"0\\" elif n == 1: return \\"01\\" a, b = \\"0\\", \\"01\\" for i in range(2, n + 1): a, b = b, b + a return b"},{"question":"You are given a word `s` and a pattern `p`. Your task is to determine if the pattern matches the entire word. The pattern supports `\'.\'` which matches any single character and `\'*\'` which matches zero or more of the preceding element. Note that `\'.\'` and `\'*\'` can be combined in the pattern. For example, `\\".*\\"` matches any sequence of characters including the empty sequence. Consider the following cases for `\'*\'`: 1. If `\'*\'` is used to replace the preceding element zero times. 2. If `\'*\'` is used to replace the preceding element one or more times. Write a function `is_match(s: str, p: str) -> bool` that returns `True` if the given word matches the pattern, otherwise `False`. -----Input----- The input consists of two strings `s` and `p` where: - `s` has length between 0 and 50 inclusive and contains only lowercase English letters. - `p` has length between 0 and 50 inclusive and contains only lowercase English letters, `\'.\'`, and `\'*\'`. -----Output----- The output is a single boolean value, `True` or `False`, indicating whether the pattern matches the word or not. -----Examples----- Input s = \\"aa\\" p = \\"a*\\" Output True Input s = \\"ab\\" p = \\".*\\" Output True Input s = \\"aab\\" p = \\"c*a*b\\" Output True Input s = \\"mississippi\\" p = \\"mis*is*p*.\\" Output False [Explanation] In the first example, `a*` can match zero or more \'a\', so it matches \\"aa\\". In the second example, `.*` can match any character sequence, so it matches \\"ab\\". In the third example, `c*` can disappear, then `a*` can match \\"aa\\", and `b` matches itself. In the fourth example, the pattern cannot match the string \\"mississippi\\". This problem tests understanding of dynamic programming and pattern matching techniques.","solution":"def is_match(s: str, p: str) -> bool: Given a word s and a pattern p, determine if the pattern matches the entire word. The pattern includes \'.\' which matches any single character and \'*\' which matches zero or more of the preceding element. # Initialize a 2D DP table with False values dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] dp[0][0] = True # Empty string matches with empty pattern # Handle cases where the pattern contains \'*\' at the beginning for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] # Fill the DP table for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == s[i - 1] or p[j - 1] == \'.\': dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] # Consider \'*\' matches zero characters if p[j - 2] == s[i - 1] or p[j - 2] == \'.\': dp[i][j] = dp[i][j] or dp[i - 1][j] return dp[len(s)][len(p)]"},{"question":"Write a function that takes a string containing a sentence and returns the most frequent word along with its frequency. In case of a tie, return the word that appears first in the sentence. The function should ignore punctuation and be case-insensitive. For example, given the sentence `\\"The cat and the dog both chased the mouse in the house\\"`, the output should be `(\\"the\\", 4)`. For the sentence `\\"Hello, hello! How are you? I hope you are doing well. Well, well, hello again!\\"`, the output should be `(\\"hello\\", 3)`.","solution":"import re from collections import Counter def most_frequent_word(sentence): Find the most frequent word in the sentence, ignoring punctuation and case. Parameters: sentence (str): A sentence containing words. Returns: tuple: The most frequent word and its frequency. # Remove punctuation and lower the cases words = re.findall(r\'bw+b\', sentence.lower()) # Count the frequency of each word word_count = Counter(words) # Find the word with the highest frequency; in case of tie, return the first one that appears in the sentence. most_common_word, most_common_count = None, 0 for word in words: if word_count[word] > most_common_count: most_common_word = word most_common_count = word_count[word] return most_common_word, most_common_count"},{"question":"Linova has been inspired by the diverse landscapes in her kingdom and wants to create a unique way for her people to travel. The kingdom can be represented as a tree with `n` nodes (cities) and `n-1` edges (roads). A path between two cities is defined as the sequence of node visits starting from one city and ending in another without repeating any nodes. Linova wants to build a new road connecting two unconnected cities in her kingdom that maximizes the shortest distance traveling between all pairs of cities. Can you help her determine the maximum possible shortest distance between any two pairs of cities after adding exactly one new road? -----Input----- The first line contains a single integer n (2le nle 10^5), the number of cities in the kingdom. Each of the next n-1 lines contains two integers u and v (1le u,vle n), denoting there is a road connecting city u and city v. It is guaranteed that from any city, you can reach any other city by the roads. -----Output----- Print a single integer — the maximum possible shortest distance between any pair of cities upon adding exactly one new road between any two initially unconnected cities. -----Examples----- Input 5 1 2 1 3 3 4 3 5 Output 2 Input 4 1 2 2 3 3 4 Output 2 Input 3 1 2 1 3 Output 1 -----Note----- In the first example, adding a new road between cities 4 and 5 makes the shortest path from any pair of cities {4, 5} to {1, 2, 3} increase by 1. In the second example, even though we add a new road between cities 1 and 4, the maximum shortest path length remains the optimal 2 across other pairs by balancing the travel paths. In the third example, adding a road between either unconnected pair of remaining cities results in a maximum shortest distance increase of 1.","solution":"from collections import deque, defaultdict def find_farthest_node(start, graph, n): visited = [False] * (n + 1) dist = [0] * (n + 1) queue = deque([start]) visited[start] = True farthest_node = start while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) dist[neighbor] = dist[node] + 1 if dist[neighbor] > dist[farthest_node]: farthest_node = neighbor return farthest_node, dist[farthest_node] def max_shortest_distance(n, roads): if n == 2: return 1 # Special case: If there\'s only one edge, adding another road will make distance 1 at most graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Find one of the farthest points (u) from an arbitrary start node (1) u, _ = find_farthest_node(1, graph, n) # Find the farthest point (v) from node u, which is one end of the longest path v, diameter = find_farthest_node(u, graph, n) # The result is the diameter of the tree divided by 2, rounded up. return (diameter + 1) // 2"},{"question":"# Merge Sorted Linked Lists You are given k singly linked lists, each of which is sorted in ascending order. Your task is to merge these k lists into one single sorted linked list and return its head. Each linked list has the structure: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` # Task: Write a function `merge_k_lists` that takes a list of ListNode objects (each representing the head of a sorted linked list) and merges all the linked lists into one sorted linked list. ```python def merge_k_lists(lists: List[ListNode]) -> ListNode: # Implementation here ``` # Example: ```python # Example linked lists: # List 1: 1 -> 4 -> 5 # List 2: 1 -> 3 -> 4 # List 3: 2 -> 6 lists = [ ListNode(1, ListNode(4, ListNode(5))), ListNode(1, ListNode(3, ListNode(4))), ListNode(2, ListNode(6)) ] merged_head = merge_k_lists(lists) # This should return the merged linked list: # 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6 ``` # Constraints: - `k == len(lists)` - `0 <= k <= 10^4` - `0 <= total number of nodes <= 10^4` - Each linked list is sorted in ascending order. Tip: You may use a priority queue (heap) to keep track of the next node to be merged, ensuring that you always add the smallest available node to the resulting list.","solution":"import heapq class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_k_lists(lists): min_heap = [] # Initialize the heap for i, node in enumerate(lists): if node: heapq.heappush(min_heap, (node.val, i, node)) dummy = ListNode(0) current = dummy while min_heap: val, i, node = heapq.heappop(min_heap) current.next = node current = current.next if node.next: heapq.heappush(min_heap, (node.next.val, i, node.next)) return dummy.next"},{"question":"You are given a list of integers where every integer appears an even number of times, except for one. Write a function to find and return the integer that appears an odd number of times. * The function should take one parameter: a list of integers which contains at least one integer appearing an odd number of times. * The function should return the integer that appears an odd number of times. **Further points:** * The function should handle lists with varying lengths efficiently. * Try to achieve it with a time complexity of O(n). # Example Consider the list [2, 2, 3, 4, 3, 3, 4]. The function should return 3 as it is the only number that appears an odd number of times in the list.","solution":"def find_odd_occurrence(lst): Returns the integer from the list that appears an odd number of times. result = 0 for number in lst: result ^= number return result"},{"question":"You are given a rectangular grid of size N times M. Each cell in the grid contains an integer, which can be either 0 or 1. The cells with value 0 represent water, and the cells with value 1 represent land. A lake is defined as a group of one or more connected water cells (0s) surrounded by land cells (1s) completely on all sides horizontally and vertically (not diagonally). Given the grid, your task is to count the number of lakes present in the grid. -----Input----- - The first line of the input contains two integers N and M separated by space, the number of rows and columns in the grid. - Each of the next N lines contains M space-separated integers denoting the grid. -----Output----- Print a single integer, the number of lakes in the grid. -----Constraints----- - 1 le N, M le 1000 - Each element of the grid is either 0 or 1 -----Example Input----- 6 8 1 0 1 1 1 1 1 1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 -----Example Output----- 2","solution":"def count_lakes(grid, N, M): Returns the number of lakes in the grid. def is_valid(x, y): return 0 <= x < N and 0 <= y < M def dfs(x, y): # Depth First Search to mark connected water (0) cells stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if is_valid(nx, ny) and grid[nx][ny] == 0: grid[nx][ny] = -1 # Mark the cell as visited stack.append((nx, ny)) def is_lake(x, y): if grid[x][y] != 0: return False # Check if the current 0 cell is surrounded by 1s for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and grid[nx][ny] == 1: return True return False lake_count = 0 for i in range(N): for j in range(M): if grid[i][j] == 0 and is_lake(i, j): lake_count += 1 dfs(i, j) return lake_count # Read input def main(): N, M = map(int, input().split()) grid = [] for _ in range(N): grid.append(list(map(int, input().split()))) print(count_lakes(grid, N, M)) if __name__ == \\"__main__\\": main()"},{"question":"Alyssa is planning to organize a small coding bootcamp for her friends, but she needs to prepare some example questions for them. One problem she has thought of involves processing a string to perform specific transformations, and she could use your help in finalizing it. Given a string s consisting of characters \'0\' and \'1\' only, find the length of the longest contiguous substring that contains an equal number of \'0\'s and \'1\'s. # Input - The first line of input contains a single integer T, the number of test cases. - Each of the next T lines contains one string s consisting of characters \'0\' and \'1\' only. # Output For each test case, output the length of the longest contiguous substring that has an equal number of \'0\'s and \'1\'s. # Constraints - 1 le T le 10 - 1 le |s| le 10^5 # Example Input ``` 2 110100110 10101 ``` # Example Output ``` 8 4 ``` # Explanation In the first example case, the longest contiguous substring with equal number of \'0\'s and \'1\'s is \\"11010011\\" which has length 8. In the second example case, the longest contiguous substring with equal number of \'0\'s and \'1\'s is \\"1010\\" which has length 4. Design a function to solve this problem efficiently for large inputs.","solution":"def find_max_length_contiguous_equal_01(s): Returns the length of the longest contiguous substring that has an equal number of \'0\'s and \'1\'s. max_len = 0 count = 0 count_map = {0: -1} # To handle the case when the longest sequence starts from index 0 for i in range(len(s)): if s[i] == \'0\': count -= 1 else: count += 1 if count in count_map: max_len = max(max_len, i - count_map[count]) else: count_map[count] = i return max_len def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(find_max_length_contiguous_equal_01(s)) return results"},{"question":"Write a function that takes a string representing a time in 24-hour format (e.g., \\"14:30\\") and returns a string with the time converted to 12-hour format including \\"AM\\" or \\"PM\\" (e.g., \\"2:30 PM\\"). For example: * The input \\"00:00\\" should return \\"12:00 AM\\". * The input \\"13:45\\" should return \\"1:45 PM\\". Consider the following edge cases: * The input \\"12:00\\" should return \\"12:00 PM\\". * The input \\"00:05\\" should return \\"12:05 AM\\". Ensure the function handles invalid input by raising an appropriate error message. Good luck! Note: Strings that represent times outside the \\"00:00\\" to \\"23:59\\" range are considered invalid inputs.","solution":"def convert_to_12_hour_format(time_24): Converts a time from 24-hour format to 12-hour format with AM/PM. :param time_24: A string representing time in 24-hour format (e.g., \\"14:30\\"). :return: A string representing time in 12-hour format with AM/PM (e.g., \\"2:30 PM\\"). :raises ValueError: If the input time is not in the correct 24-hour format. try: hours, minutes = map(int, time_24.split(\\":\\")) except ValueError: raise ValueError(\\"Invalid time format. Expected \'HH:MM\'.\\") if not (0 <= hours < 24) or not (0 <= minutes < 60): raise ValueError(\\"Hour should be between 00 and 23, and minutes between 00 and 59.\\") period = \\"AM\\" if hours < 12 else \\"PM\\" hours = hours % 12 hours = 12 if hours == 0 else hours return f\\"{hours}:{minutes:02d} {period}\\""},{"question":"Given an array of integers nums and an integer target, return the two numbers such that they add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example: Input: nums = [2, 7, 11, 15], target = 9 Output: [2, 7] Explanation: Because nums[0] + nums[1] == 9, we return [2, 7]. Input: nums = [3, 2, 4], target = 6 Output: [2, 4] Input: nums = [3, 3], target = 6 Output: [3, 3]","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return the two numbers such that they add up to the target. Args: nums (List[int]): List of integers. target (int): Target sum. Returns: List[int]: A list containing the two integers that add up to the target. num_dict = {} for num in nums: complement = target - num if complement in num_dict: return [complement, num] num_dict[num] = True # Example usage: # nums = [2, 7, 11, 15], target = 9 # Output: [2, 7]"},{"question":"Given an integer array `nums` of length `n` and an integer `k`, write a function `kth_largest_element(nums, k)` that returns the `k`-th largest element in the array. Constraints: - You may assume that k is always valid, 1 ≤ k ≤ n. - You must solve it in O(n) time complexity on average. # Example: ```python def kth_largest_element(nums, k): # Your code here # Example usage: print(kth_largest_element([3, 2, 1, 5, 6, 4], 2)) # Output: 5 print(kth_largest_element([3, 2, 3, 1, 2, 4, 5, 5, 6], 4)) # Output: 4 ``` # Explanation: - In the first example, the sorted array is `[1, 2, 3, 4, 5, 6]` and the 2nd largest element is `5`. - In the second example, the sorted array is `[1, 2, 2, 3, 3, 4, 5, 5, 6]` and the 4th largest element is `4`. Hint: - Consider using the Quickselect algorithm which is a selection algorithm to find the k-th smallest element in an unordered list.","solution":"import random def partition(nums, left, right): pivot_index = random.randint(left, right) pivot_value = nums[pivot_index] nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left for i in range(left, right): if nums[i] < pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[store_index], nums[right] = nums[right], nums[store_index] return store_index def quickselect(nums, left, right, k_smallest): if left == right: return nums[left] pivot_index = partition(nums, left, right) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(nums, left, pivot_index - 1, k_smallest) else: return quickselect(nums, pivot_index + 1, right, k_smallest) def kth_largest_element(nums, k): n = len(nums) index_to_find = n - k return quickselect(nums, 0, n - 1, index_to_find)"},{"question":"A company has an internal task automation system where each task has prerequisites that need to be completed before the task itself can be started. You are given a list of tasks labeled from 0 to n - 1, and a list of prerequisite pairs. Each prerequisite pair is represented as `[a, b]`, which means that task `b` must be completed before task `a` can start. Given the list of task labels and the list of prerequisite pairs, write a function to find a valid order in which the tasks can be completed. If there are multiple valid orders, return any one of them. If it is not possible to complete all tasks (due to a cycle in the prerequisite dependencies), return an empty list. # Input - An integer `n` representing the number of tasks. - A list of prerequisite pairs where each pair is of the form `[a, b]`, representing that task `b` must precede task `a`. # Output - A list of integers representing the order in which tasks should be completed, or an empty list if no valid order exists. # Example Input ``` 4 [[1, 0], [2, 0], [3, 1], [3, 2]] ``` Output ``` [0, 1, 2, 3] ``` or ``` [0, 2, 1, 3] ``` Input ``` 2 [[1, 0], [0, 1]] ``` Output ``` [] ``` # Note In the first example, the tasks can be completed in the order `[0, 1, 2, 3]` or `[0, 2, 1, 3]`. In the second example, it is impossible to complete the tasks due to a cycle between tasks 0 and 1. Therefore, the output is an empty list.","solution":"from collections import defaultdict, deque def find_task_order(n, prerequisites): # Create a graph and an in-degree array graph = defaultdict(list) in_degree = [0] * n # Populate the graph and in-degree array for dest, src in prerequisites: graph[src].append(dest) in_degree[dest] += 1 # Queue for nodes with no incoming edges queue = deque([i for i in range(n) if in_degree[i] == 0]) result = [] # Process nodes with no incoming edges while queue: node = queue.popleft() result.append(node) # Decrease the in-degree of neighboring nodes for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If result contains all tasks, return the result, otherwise return an empty list return result if len(result) == n else []"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to find the length of the longest substring that contains at most k distinct characters. Hints: - Utilize a sliding window approach to keep track of the distinct characters within the substring. - Think about how you can adjust the window boundaries effectively to ensure an optimal solution in linear time.","solution":"def length_of_longest_substring_k_distinct(s, k): Finds the length of the longest substring that contains at most k distinct characters. :param s: Input string consisting of lowercase letters. :param k: Integer indicating the maximum number of distinct characters. :return: Length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 char_map = {} left = 0 max_len = 0 for right in range(len(s)): char = s[right] if char in char_map: char_map[char] += 1 else: char_map[char] = 1 # While we have more than k distinct characters while len(char_map) > k: left_char = s[left] char_map[left_char] -= 1 if char_map[left_char] == 0: del char_map[left_char] left += 1 # Update max_len max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a function `find_majority_element` that takes in an array of integers and returns the majority element. The majority element is the element that appears more than half the time in the array. If no such element exists, return `None`. Implement the solution with O(n) time complexity and O(1) space complexity. Examples: ``` find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) => 4 find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 2]) => None find_majority_element([1]) => 1 ```","solution":"def find_majority_element(nums): Finds and returns the majority element in an array. The majority element is the element that appears more than half the time in the array. If no such element exists, returns None. Args: nums (list): List of integers Returns: int: Majority element or None if no majority element exists. count = 0 candidate = None # Phase 1: Find a candidate for majority element for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Phase 2: Verify if the candidate is the majority element if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"Given an array of integers and an integer k, determine if there exist three distinct elements in the array whose sum is exactly k. -----Input----- - The first line of the input contains two integers n and k, where n is the number of elements in the array and k is the target sum. - The second line contains n space-separated integers representing the elements of the array. -----Output----- If there exist three distinct elements in the array whose sum is exactly k, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - 3 le n le 10^5 - -10^9 le k le 10^9 - -10^9 le text{array[i]} le 10^9 -----Subtasks----- Subtask #1 (30 points): - 3 le n le 200 Subtask #2 (70 points): original constraints -----Example Input----- 8 22 1 4 45 6 10 8 12 -3 -----Example Output----- YES","solution":"def three_sum_exists(arr, k): Determines if there exist three distinct elements in the array whose sum is exactly k. Parameters: arr: List[int], the list of numbers k: int, the target sum Returns: str: \\"YES\\" if there exist such three elements, \\"NO\\" otherwise n = len(arr) arr.sort() for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: return \\"YES\\" elif current_sum < k: left += 1 else: right -= 1 return \\"NO\\""},{"question":"# Task Imagine a fictional scenario where celestial bodies and their gravitational pull need to be simulated. You are tasked to create a system that calculates the positions of these celestial bodies on a 2D plane considering their initial positions, movement directions, and magnitudes. Given the initial positions, directions (unit vectors), and speeds (magnitudes) of two celestial bodies, your task is to compute their positions after a given time `t`. The positions, directions, and speeds are represented as follows: - Initial positions are given as (x1, y1) and (x2, y2) for the first and second celestial bodies respectively. - Directions are given as (dx1, dy1) and (dx2, dy2) for the first and second celestial bodies respectively, indicating the direction of movement on the 2D plane. - Speeds are given as v1 and v2 for the first and second celestial bodies respectively. - Time `t` is a non-negative integer representing the duration for which the celestial bodies travel in their respective directions. Using this data, compute the final positions of the celestial bodies after time `t` has elapsed. Your task is to implement the function `calculate_positions(initials, directions, speeds, t)` where: - `initials` is a list of tuples representing initial positions of the celestial bodies as `[(x1, y1), (x2, y2)]`. - `directions` is a list of tuples representing the direction vectors of the celestial bodies as `[(dx1, dy1), (dx2, dy2)]`. - `speeds` is a list of speeds of the celestial bodies as `[v1, v2]`. - `t` is the time duration both bodies travel. The function should return a list of final positions of the celestial bodies as `[(x1\', y1\'), (x2\', y2\')]`. # Example For `initials = [(0, 0), (1, 1)]`, `directions = [(1, 0), (0, 1)]`, `speeds = [1, 2]`, and `t = 3`, the output should be `[(3, 0), (1, 7)]`. Explanation: - Body 1 starts at (0, 0), moves in the direction (1, 0) with speed 1 for 3 time units. - Final position of body 1: `(0 + 1*3, 0 + 0*3) = (3, 0)` - Body 2 starts at (1, 1), moves in the direction (0, 1) with speed 2 for 3 time units. - Final position of body 2: `(1 + 0*3, 1 + 2*3) = (1, 7)` # Input - `initials`: list of tuples containing initial positions `[(x1, y1), (x2, y2)]` (0 ≤ x, y ≤ 1000). - `directions`: list of tuples containing direction vectors `[(dx1, dy1), (dx2, dy2)]` (−1 ≤ dx, dy ≤ 1). - `speeds`: list of integers `[v1, v2]` (0 ≤ v ≤ 100). - `t`: integer time duration (0 ≤ t ≤ 1000). # Output - List of tuples representing final positions of the celestial bodies `[(x1\', y1\'), (x2\', y2\')]`. # Constraints - It is guaranteed that the directions are unit vectors. - Inputs will always be valid.","solution":"def calculate_positions(initials, directions, speeds, t): Given initial positions, directions, speeds, and time duration, calculate the final positions of celestial bodies. initials: List of tuples (initial positions) e.g. [(x1, y1), (x2, y2)] directions: List of tuples (direction vectors) e.g. [(dx1, dy1), (dx2, dy2)] speeds: List of integers (speeds) e.g. [v1, v2] t: Integer (time duration) return: List of tuples (final positions) e.g. [(x1\', y1\'), (x2\', y2\')] final_positions = [] for i in range(len(initials)): xi, yi = initials[i] dxi, dyi = directions[i] vi = speeds[i] xf = xi + dxi * vi * t yf = yi + dyi * vi * t final_positions.append((xf, yf)) return final_positions"},{"question":"You are given a string containing a sentence. Your task is to create a function that will return a new string with the words of the sentence in reverse order. The words should be reversed, not the characters within each word. --- ```python def reverse_sentence(sentence): words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words) # Example usage: >>> reverse_sentence(\'The quick brown fox jumps over the lazy dog\') \'dog lazy the over jumps fox brown quick The\' >>> reverse_sentence(\'Hello World\') \'World Hello\' >>> reverse_sentence(\'\') \'\' # An empty string should return an empty string >>> reverse_sentence(\'OneWord\') \'OneWord\' # A single word should return the same word ```","solution":"def reverse_sentence(sentence): Returns a new string with the words of the sentence in reverse order. Parameters: sentence (str): A string containing the sentence to be reversed. Returns: str: A new string with words in reverse order. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words) # Example usage: # reverse_sentence(\'The quick brown fox jumps over the lazy dog\') # Output: \'dog lazy the over jumps fox brown quick The\'"},{"question":"**Anagram Grouping** -- An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: ``` Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` Task Given an array of strings, group the anagrams together. You can return the output in any order. **Notes:** - All inputs will be in lowercase. - Ensure that each string is considered only once. # Function Signature ```python def group_anagrams(strs: List[str]) -> List[List[str]]: pass ```","solution":"from typing import List, Dict def group_anagrams(strs: List[str]) -> List[List[str]]: Groups anagrams together from the given list of strings. Args: strs : List[str] - list of strings to group Returns: List[List[str]] - list of groups of anagrams anagram_map: Dict[str, List[str]] = {} for word in strs: # Sort the word to get the base form of the anagram sorted_word = \'\'.join(sorted(word)) if sorted_word not in anagram_map: anagram_map[sorted_word] = [] anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"Consider a game where two players, Alice and Bob, take turns picking stones from a pile. The players start with an initial pile of N stones. Alice always goes first. On their turn, a player must pick either 1, 2, or 3 stones. The player who cannot make a move (because no stones are left) loses the game. Determine who will win the game if both players play optimally. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single integer N — the number of stones in the initial pile. -----Output----- For each test case, output a single line containing one string — the name of the winner (\\"Alice\\" or \\"Bob\\" without the quotes). -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 -----Example----- Input: 5 1 2 3 4 5 Output: Alice Alice Alice Bob Alice -----Explanation----- Test case 1. Alice starts and picks the only stone. Bob cannot make a move. Alice wins. Test case 2. Alice picks 2 stones. Bob cannot move. Alice wins. Test case 3. Alice picks all 3 stones. Bob cannot move. Alice wins. Test case 4. Alice picks 1 stone. Bob can pick all 3 remaining stones. Alice cannot move. Bob wins. Test case 5. Alice can pick 1 stone or 3 stones but either way, Bob can then pick the remaining stones such that Alice cannot make a valid move next. Therefore, Alice wins by picking 3 stones this time.","solution":"def determine_winner(num_stones): Determines the winner given the number of stones. Parameters: num_stones (int): The number of stones in the pile. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. # Alice wins if the number of stones is not a multiple of 4 # Alice loses if the number of stones is a multiple of 4 if num_stones % 4 == 0: return \\"Bob\\" else: return \\"Alice\\" def main(T, test_cases): Processes multiple test cases and returns the results. Parameters: T (int): The number of test cases. test_cases (list): The list of the number of stones for each test case. Returns: list of str: List containing the results of each test case. results = [] for num_stones in test_cases: results.append(determine_winner(num_stones)) return results"},{"question":"A courier company operates a drone delivery system in a grid city. The city is represented as an MxN grid where each cell either has a building or open space. The drone can only fly over open spaces and deliver packages to buildings. The drone starts at the top-left corner of the grid (0, 0) and flies to the bottom-right corner (M-1, N-1). The drone can fly in four directions: up, down, left, or right. Write a program to find the shortest path for the drone from the starting point to the destination, avoiding buildings. If it is not possible to reach the destination, return -1. -----Input:----- - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case starts with two integers M and N - the dimensions of the grid. - The next M lines contain N integers each, representing the grid. 0 represents an open space, and 1 represents a building. -----Output:----- For each test case, output a single integer representing the length of the shortest path if one exists, otherwise -1. -----Constraints----- - 1 leq T leq 100 - 1 leq M, N leq 100 - The grid is not necessarily square. -----Sample Input:----- 2 3 3 0 0 0 1 1 0 0 0 0 3 3 0 1 0 1 0 0 0 1 0 -----Sample Output:----- 4 -1 -----EXPLANATION:----- For the first test case, the shortest path from (0, 0) to (2, 2) is: (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2), which has a length of 4. For the second test case, there is no way to reach (2, 2) from (0, 0), hence the output is -1.","solution":"from collections import deque def shortest_path_in_grid(grid): M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # Down, Right, Up, Left queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == M-1 and y == N-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def find_shortest_paths(T, test_cases): results = [] for case in test_cases: M, N, grid = case results.append(shortest_path_in_grid(grid)) return results"},{"question":"You have been given a sequence of integers in an array representing the heights of trees in a forest. A lumberjack wants to cut down the trees so that the forest looks aesthetically pleasing. To achieve this, the lumberjack needs to ensure that no two adjacent trees have the same height. The lumberjack can cut the height of any tree (reduce the height) any number of times. Please note, he can only cut the trees; he cannot increase their height. Write a function that returns the minimum total amount of height that needs to be cut off from the trees to achieve the goal of making no two adjacent trees the same height. Your function should return a single integer which is the minimum sum of height reductions required. **Function Signature:** ```python def minimal_cut_to_alternate_heights(heights: List[int]) -> int: pass ``` # Input - `heights` (List[int]): a list of integers where each integer represents the height of a tree. The length of `heights` will be between 1 and 100,000, and the height of each tree will be between 1 and 1,000,000. # Output - An integer representing the minimum total amount of height that needs to be cut off to ensure no two adjacent trees have the same height. # Example: ```python assert minimal_cut_to_alternate_heights([5, 4, 3, 5, 4, 5]) == 0 assert minimal_cut_to_alternate_heights([3, 3, 3, 3, 3]) == 6 assert minimal_cut_to_alternate_heights([1, 2, 1, 2, 1, 2, 1, 2]) == 0 assert minimal_cut_to_alternate_heights([4, 4, 4, 4, 4]) == 6 assert minimal_cut_to_alternate_heights([5, 5, 6, 6, 7, 7, 8, 8]) == 6 ``` In the first example, the input list `[5, 4, 3, 5, 4, 5]` already satisfies the condition that no two adjacent trees have the same height, so no height reduction is necessary, resulting in a return value of `0`. In the second example, the input list `[3, 3, 3, 3, 3]` requires reducing the height of every other tree by 1 unit, resulting in a return value of `6`. Note: Multiple solutions may exist, and any solution which achieves the minimal cuts required is acceptable.","solution":"from typing import List def minimal_cut_to_alternate_heights(heights: List[int]) -> int: n = len(heights) if n <= 1: return 0 cuts = 0 for i in range(1, n): if heights[i] == heights[i - 1]: # A tree must be cut so that the current one is different from the previous one cuts += 1 heights[i] -= 1 # Cut the current tree by 1 return cuts"},{"question":"In a magical forest, there are N mystical animals numbered from 1 through N. Each animal has a unique power level. These power levels are represented as an array of integers where the ith animal has a power level represented by the ith element of the array. The animals have formed a hierarchy such that direct parent-child relationships exist. Each animal, except for the king of the forest, has exactly one animal that it reports to (its parent). The king of the forest does not report to any other animal. You are given the parent-child relationships in the form of N-1 pairs. Each pair (u, v) indicates that animal u is the parent of animal v. The forest is very competitive, and each animal wants to know the maximum power level of all the animals in its subtree. Your task is to compute the maximum power level for each animal\'s subtree. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of mystical animals. - The second line contains N space-separated integers, where the ith integer denotes the power level of the ith animal. - The next N-1 lines each contain two space-separated integers u and v, denoting there is a hierarchical relationship where animal u is the parent of animal v. -----Output----- - For each test case, output N space-separated integers where the ith integer is the maximum power level in the subtree of the ith animal. -----Constraints----- - 1 ≤ T ≤ 3 - 1 ≤ N ≤ 10^5 - 1 ≤ Power level ≤ 10^9 -----Example----- Input: 1 5 10 5 6 7 15 1 2 1 3 3 4 3 5 Output: 15 5 15 7 15 -----Explanation----- For the given example: - The subtree of animal 1 includes animals 2, 3, 4, and 5. The maximum power level in this subtree is 15. - The subtree of animal 2 includes only itself, and its power level is 5. - The subtree of animal 3 includes animals 4 and 5. The maximum power level in this subtree is 15. - The subtree of animal 4 includes only itself, and its power level is 7. - The subtree of animal 5 includes only itself, and its power level is 15.","solution":"def calculate_max_power_subtree(N, power_levels, tree_edges): from collections import defaultdict, deque # Build the tree tree = defaultdict(list) in_degree = [0] * (N + 1) for u, v in tree_edges: tree[u].append(v) in_degree[v] += 1 # Find the root (King of the forest), which has no parents root = next(x for x in range(1, N + 1) if in_degree[x] == 0) # Function to perform DFS and compute maximum power levels def dfs(node): max_power = power_levels[node - 1] for child in tree[node]: max_power = max(max_power, dfs(child)) max_powers[node - 1] = max_power return max_powers[node - 1] # Array to store the maximum power level in subtree of each animal max_powers = [0] * N dfs(root) return max_powers def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] power_levels = test_cases[i][1] tree_edges = test_cases[i][2] result = calculate_max_power_subtree(N, power_levels, tree_edges) results.append(result) return results"},{"question":"# Task Write a function that counts the number of unique paths from the top-left corner to the bottom-right corner of a grid with obstacles. # Purpose This problem tests your ability to work with dynamic programming and understand pathfinding algorithms in a constrained environment. # Intent The goal is to develop an efficient algorithm to count the number of unique paths considering various constraints. This problem emphasizes the importance of handling edge cases such as obstacles and grid boundaries. # Problem Statement You are given a grid represented by a 2D list `grid` of size `m x n`. Each cell in the grid contains either 0 or 1, where 0 represents an empty space and 1 represents an obstacle. Find the number of unique paths from the top-left corner (grid[0][0]) to the bottom-right corner (grid[m-1][n-1]) of the grid, moving only down or right at any point in time. You must write a function `unique_paths_with_obstacles(grid: List[List[int]]) -> int` that returns the count of such unique paths. # Function Signature ```python from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: pass ``` # Example ```python # Example 1 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] assert unique_paths_with_obstacles(grid) == 2 # Example 2 grid = [ [0, 1], [0, 0] ] assert unique_paths_with_obstacles(grid) == 1 # Example 3 grid = [ [1, 0], [0, 0] ] assert unique_paths_with_obstacles(grid) == 0 ``` # Constraints - `m == len(grid)` - `n == len(grid[i])` for all `0 <= i < m` - `1 <= m, n <= 100` - `grid[i][j]` is 0 or 1 # Additional Information - If the starting or ending position is an obstacle, return 0.","solution":"from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"The security system at a museum is based on a series of check-in points. Each check-in point logs the entry and exit times of individuals. Your task is to analyze the logs and determine the total time each individual spends within the museum. Each log entry consists of a check-in time and a check-out time for a given individual. The goal is to calculate the total time spent by each individual across multiple visits. -----Input:----- - The first line contains an integer N, representing the number of log entries. - Each of the next N lines contains three space-separated values: the individual\'s ID (a string), the check-in time (in minutes since the museum opened), and the check-out time (in minutes since the museum opened). -----Output:----- For each unique individual ID that appears in the logs, output a line containing the individual’s ID followed by the total time in minutes they spent within the museum. The output lines should be sorted in ascending order of individual IDs. -----Constraints----- - 1 leq N leq 10^5 - The individual IDs are alphanumeric strings with a maximum length of 20 characters. - The check-in and check-out times are integers such that 0 leq text {check-in time} < text{check-out time} leq 10^9 -----Sample Input:----- 5 alice 10 50 bob 5 30 alice 60 120 charlie 10 50 bob 35 55 -----Sample Output:----- alice 100 bob 45 charlie 40 -----EXPLANATION:----- - Alice has two log entries: [10, 50] and [60, 120]. The total time spent is (50 - 10) + (120 - 60) = 40 + 60 = 100 minutes. - Bob has two log entries: [5, 30] and [35, 55]. The total time spent is (30 - 5) + (55 - 35) = 25 + 20 = 45 minutes. - Charlie has one log entry: [10, 50]. The total time spent is 50 - 10 = 40 minutes.","solution":"def calculate_total_time(logs): Calculate the total time spent in the museum for each individual ID. :param logs: List of log entries where each entry is a tuple of (ID, check_in, check_out) :return: List of tuples containing individual IDs and their corresponding total time spent time_spent = {} for log in logs: person_id, check_in, check_out = log if person_id not in time_spent: time_spent[person_id] = 0 time_spent[person_id] += check_out - check_in result = sorted(time_spent.items()) return result def process_input(input_string): Process the given input string to extract the log entries :param input_string: The input string containing the number of logs followed by the logs :return: List of log entries lines = input_string.strip().split(\'n\') N = int(lines[0]) logs = [] for i in range(1, N + 1): parts = lines[i].split() logs.append((parts[0], int(parts[1]), int(parts[2]))) return logs # Example usage: # input_string = \\"5nalice 10 50nbob 5 30nalice 60 120ncharlie 10 50nbob 35 55\\" # logs = process_input(input_string) # print(calculate_total_time(logs))"},{"question":"=====Problem Statement===== A valid email address follows these rules: 1. It must have exactly one \\"@\\" symbol. 2. The local part (part before the \\"@\\") can contain alphanumeric characters and special characters: \\".\\", \\"-\\", and \\"_\\". It cannot start or end with a special character, and the special characters cannot be consecutive. 3. The domain part (part after the \\"@\\") must contain at least one \\".\\" but cannot start or end with \\".\\". It should only contain alphanumeric characters and \\".\\". Examples Valid Email Addresses john.doe@example.com my-email@domain.co hello_world123@sub.domain.com Invalid Email Addresses john..doe@example.com my-email@domain..com hello@world@domain.com -abc@domain.com abc@domain-.com You are given N email addresses. Your task is to identify and print all valid email addresses in order of their occurrence from top to bottom. =====Input Format===== The first line contains N, the number of email addresses. The next N lines contain the email addresses. =====Constraints===== 0<N<100 =====Output Format===== Output the valid email addresses on separate lines.","solution":"import re def is_valid_email(email): Check if an email address is valid based on the given rules. pattern = re.compile( r\'^[a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*@[a-zA-Z0-9]+(?:.[a-zA-Z0-9]+)+\' ) return pattern.match(email) is not None def filter_valid_emails(emails): Filters a list of email addresses, returning only the valid ones. return [email for email in emails if is_valid_email(email)]"},{"question":"You are given a string `s` consisting of lowercase alphabets and you need to find the length of the longest substring with at most two distinct characters. Return an integer representing the length of such a substring. Example ``` s = \\"eceba\\" # The longest substring with at most two distinct characters is \\"ece\\" with length 3. s = \\"ccaabbb\\" # The longest substring with at most two distinct characters is \\"aabbb\\" with length 5. ```","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if not s: return 0 left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): if len(char_map) < 2 or s[right] in char_map: char_map[s[right]] = char_map.get(s[right], 0) + 1 right += 1 else: while len(char_map) >= 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given an array of integers where every element appears twice except for one. Your task is to find the element that appears only once. Write a function `findUniqueElement(arr)` that takes in an array `arr` and returns the unique element. You must implement a solution with a linear runtime complexity and use only constant extra space. **Example:** ```python findUniqueElement([2, 2, 1]) -> 1 findUniqueElement([4, 1, 2, 1, 2]) -> 4 findUniqueElement([1]) -> 1 ``` **Constraints:** 1. The length of the array is at least 1 and at most 10^6. 2. Each element in the array is between -3 * 10^4 and 3 * 10^4.","solution":"def findUniqueElement(arr): Returns the element that appears only once in the array. Args: arr (list of int): The array of integers where every element appears twice except for one. Returns: int: The unique element that appears only once. unique = 0 for num in arr: unique ^= num return unique"},{"question":"# Task Given a list of integers, determine the length of the longest subsequence that forms an arithmetic progression. An arithmetic progression is a sequence of numbers in which the difference between any two consecutive elements is the same. # Examples For `lst = [1, 7, 10, 13, 14, 19]`, the result should be `4`. The longest arithmetic progression is `[1, 7, 13, 19]`. For `lst = [1, 3, 5, 7, 9]`, the result should be `5`. The entire list itself is an arithmetic progression. For `lst = [1, 4, 7, 10, 13, 16, 19]`, the result should be `7`. The entire list itself is an arithmetic progression. # Input & Output - `[input]` list `lst` A list of integers. Constraints: `0 <= len(lst) <= 1000`, `-10^5 <= lst[i] <= 10^5` - `[output]` an integer Length of the longest subsequence that forms an arithmetic progression.","solution":"def longest_arith_seq_length(lst): if not lst: return 0 n = len(lst) if n == 1: return 1 # Dictionary to store the length of the longest arithmetic subsequence dp = [{} for _ in range(n)] longest = 1 for i in range(n): for j in range(i): diff = lst[i] - lst[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest = max(longest, dp[i][diff]) return longest"},{"question":"Given an integer array representing the heights of histogram bars, write a function to find the largest rectangular area that can be formed inside the histogram. # Input Your function will receive an array of non-negative integers, where each integer represents the height of a histogram bar. The width of each bar is 1. # Output Your function should return an integer, the area of the largest rectangle that can be formed within the bounds of the histogram. # Constraints - The length of the array will be at least 1 and will not exceed 10^5. - The height of the bars will not exceed 10^4. # Example ```python histogram = [2, 1, 5, 6, 2, 3] print(largest_rectangle(histogram)) # Output: 10 histogram = [6, 2, 5, 4, 5, 1, 6] print(largest_rectangle(histogram)) # Output: 12 ``` # Explanation For the first example: - The largest rectangle possible has an area of 2 bars of height 5 (by merging the 5 and 6 height bars) or 2 bars of height 2 (by merging height 2 bars), producing a total area of 2*5 = 10. For the second example: - The largest rectangle possible is from index 2 to index 4 with height 4: total area of 3*4 = 12. Implement the function in your preferred programming language.","solution":"def largest_rectangle(histogram): Find the largest rectangle area in a histogram. :param histogram: List[int] - List of non-negative integers representing histogram bar heights. :return: int - The area of the largest rectangle that can be formed within the bins of the histogram. stack = [] max_area = 0 index = 0 while index < len(histogram): # If this bar is higher than the bar at stack\'s top, push it to the stack if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with histogram[top_of_stack] stack as the smallest (or minimum height) bar \'h\' area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Ash, a gardener, is trying to figure out how many distinct flower arrangements he can make. Ash has N unique flowers and he wants to arrange exactly R out of these N flowers in a row. Ash needs your help to calculate the number of different arrangements possible (also known as permutations). -----Input:----- - The first line will contain a single integer T, the number of test cases. - Each test case will consist of a single line of input containing two integers N (the total number of unique flowers) and R (the number of flowers to arrange). -----Output:----- For each test case, output a single line containing the number of different arrangements possible. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 12 - 0 leq R leq N -----Sample Input:----- 3 3 2 5 3 4 4 -----Sample Output:----- 6 60 24 -----Explanation:----- For the first test case: - Ash has 3 flowers and wants to arrange 2 of them. The number of ways to do this is given by the permutation formula P(n, r) = n! / (n - r)! - For N=3 and R=2: P(3, 2) = 3! / 1! = 6 For the second test case: - For N=5 and R=3: P(5, 3) = 5! / 2! = 60 For the third test case: - For N=4 and R=4: P(4, 4) = 4! / 0! = 24","solution":"import math def count_permutations(T, cases): Returns the number of distinct permutations possible for each case. Parameters: T (int): Number of test cases. cases (list of tuples): Each tuple contains two integers N and R. Returns: list of int: List containing the results for each test case. results = [] for N, R in cases: if R > N: results.append(0) else: results.append(math.factorial(N) // math.factorial(N - R)) return results"},{"question":"A gardener is experimenting with a binary tree representation for his plants. He wants to visualize the tree levels in a unique way. Given the height of the tree, help the gardener print each level of the binary tree in reverse order from bottom to top, and left to right within each level. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer H indicating the height of the binary tree. -----Output:----- For each test case, output the levels of the binary tree in reverse order from bottom to top, each level on a new line. Numbers should be left to right within each level. -----Constraints----- - 1 leq T leq 100 - 1 leq H leq 10 -----Sample Input:----- 2 2 3 -----Sample Output:----- 2 1 1 4 5 6 7 2 3 1 -----EXPLANATION:----- For height 2, the binary tree levels from top to bottom are: ``` 1 / 2 3 ``` Reversing this order from bottom to top gives us: ``` 2 1 1 ``` For height 3, the binary tree levels from top to bottom are: ``` 1 / 2 3 / / 4 5 6 7 ``` Reversing this order from bottom to top gives us: ``` 4 5 6 7 2 3 1 ```","solution":"def get_tree_levels(height): Generates the levels of a binary tree of given height in reverse order from bottom to top, and left to right within each level. if height == 0: return [] levels = [] value = 1 for level in range(height): levels.append([value + i for i in range(2**level)]) value += 2**level return levels[::-1] def process_test_cases(test_cases): results = [] for height in test_cases: levels = get_tree_levels(height) for level in levels: results.append(\\" \\".join(map(str, level))) return results"},{"question":"Your task is to write a function `rearrangeString` that takes a string `s` as input and rearranges the characters so that no two adjacent characters are the same. If it is not possible to rearrange the string to meet this condition, return an empty string `\\"\\"`. For example, if the input string is `aab`, one possible output is `aba`. If the input string is `aaab`, then it\'s not possible to rearrange the string to meet the condition, so the output should be `\\"\\"`. # Function Signature ```python def rearrangeString(s: str) -> str: pass ``` # Input - A single string `s` consisting of lowercase English letters where `1 <= len(s) <= 500`. # Output - A rearranged string such that no two adjacent characters are the same, or an empty string `\\"\\"` if no such arrangement is possible. # Examples ```python rearrangeString(\\"aab\\") # Output: \\"aba\\" rearrangeString(\\"aaab\\") # Output: \\"\\" ``` # Constraints - You must always return the output in the shortest form. If there are multiple valid outputs, return any one of them. - Consider the frequency of each character and find the best possible way to rearrange them to avoid consecutive repetitions. If impossible, return `\\"\\"`.","solution":"from heapq import heappush, heappop from collections import Counter def rearrangeString(s: str) -> str: # Count frequency of each character counter = Counter(s) max_heap = [] # Create a max heap based on the count of characters for char, freq in counter.items(): heappush(max_heap, (-freq, char)) result = [] prev_freq, prev_char = 0, \'\' while max_heap: freq, char = heappop(max_heap) result.append(char) # Since we used one instance of `char`, we need to update the previous frequency (if valid) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Update previous character and its frequency for the next round prev_freq, prev_char = freq + 1, char # Decrease frequency as we\'ve used one char rearranged_string = \'\'.join(result) # If the rearranged string\'s length is equal to the original string\'s length, it\'s successfully rearranged if len(rearranged_string) == len(s): return rearranged_string else: return \\"\\" # Example usage: # print(rearrangeString(\\"aab\\")) # Should print something like \\"aba\\" # print(rearrangeString(\\"aaab\\")) # Should print \\"\\""},{"question":"Write a function that takes in a list of integers, representing the amount of rainfall recorded over a series of days. The function should return the length of the longest continuous subarray where the sum of the rainfall amounts is less than or equal to a given threshold. If no such subarray exists, return 0.","solution":"def longest_subarray_rainfall(rainfall, threshold): Returns the length of the longest continuous subarray where the sum of the rainfall amounts is less than or equal to the given threshold. n = len(rainfall) max_len = 0 current_sum = 0 left = 0 for right in range(n): current_sum += rainfall[right] while current_sum > threshold and left <= right: current_sum -= rainfall[left] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"# Manage Thirst of a Camel You are part of a desert expedition using camels to transport your supplies. Your camel can drink from an array of water stations placed along the route. Each element in the array represents the amount of water available at a respective station. The camel can drink a maximum of `d` liters of water at each station. If the water available at a station exceeds `d`, the camel will only consume `d` liters. You need to calculate the total amount of water the camel can drink from start to finish. Write a function: ```python def total_water(camel_drinks, d): # your code here ``` **Input:** - `camel_drinks` (list of integers): an array of non-negative integers where each integer represents the amount of water available at one station. - `d` (integer): a non-negative integer that represents the maximum amount of water the camel can drink at each station. **Output:** - Return an integer that represents the total amount of water the camel can drink along the route. Example ```python total_water([10, 20, 5, 30, 15], 10) == 40 # Explanation: # The camel drinks: # - from the 1st station: 10 liters (all available water) # - from the 2nd station: 10 liters (max capacity) # - from the 3rd station: 5 liters (all available water) # - from the 4th station: 10 liters (max capacity) # - from the 5th station: 10 liters (max capacity) # Total: 10 + 10 + 5 + 10 + 10 = 45 total_water([5, 8, 2, 12], 6) == 20 # Explanation: # The camel drinks: # - from the 1st station: 5 liters (all available water) # - from the 2nd station: 6 liters (max capacity) # - from the 3rd station: 2 liters (all available water) # - from the 4th station: 6 liters (max capacity) # Total: 5 + 6 + 2 + 6 = 19 ``` **Constraint:** - 1 <= len(camel_drinks) <= 10^4 - 0 <= camel_drinks[i] <= 10^3 - 0 <= d <= 10^3","solution":"def total_water(camel_drinks, d): Calculates the total amount of water the camel can drink from start to finish. Parameters: camel_drinks (list of integers): Amount of water available at each station d (integer): Maximum amount of water the camel can drink at each station Returns: int: Total amount of water the camel can drink along the route total = 0 for water in camel_drinks: total += min(water, d) return total"},{"question":"# Task * **_Given_** *an integer array* `arr` *of* `n` *positive integers, **_return_** *another integer array with the count of each digit (0-9) appearing in the numbers*. ___ # Consider an Example: **_With the array_ [123, 456, 789, 0]**, *the output array should contain the count of each digit*: * Digit **0** appears *1 time*. * Digit **1** appears *1 time*. * Digit **2** appears *1 time*. * Digit **3** appears *1 time*. * Digit **4** appears *1 time*. * Digit **5** appears *1 time*. * Digit **6** appears *1 time*. * Digit **7** appears *1 time*. * Digit **8** appears *1 time*. * Digit **9** appears *1 time*. So the output should be **[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]**. ___ # Notes: * **_The input array_** *has* `n` *positive integers*. * **_The integers_** *can have leading zeros*. * **_Repetition_** *in digits may occur*. ___ # Input >> Output Examples: ``` digitCount([123, 456, 789, 0]) ==> return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] ``` **_Explanation_**: *There are **one** occurrence of each digit in the given array*. ___ ``` digitCount([11, 22, 33]) ==> return [0, 2, 2, 2, 0, 0, 0, 0, 0, 0] ``` **_Explanation_**: *There are **two** occurrences of digits 1, 2, and 3, and **zero** of the other digits in the given array*. ___ ``` digitCount([99, 999]) ==> return [0, 0, 0, 0, 0, 0, 0, 0, 0, 5] ``` **_Explanation_**: *There are **five** occurrences of digit 9, and **zero** of the other digits in the given array*. ___ ___ ___ Translation Enjoy Learning !!","solution":"def digitCount(arr): Returns an array with the count of each digit (0-9) appearing in the numbers. :param arr: List[int] - a list of positive integers. :return: List[int] - a list of length 10 where the i-th element is the count of digit i. digit_counts = [0] * 10 for number in arr: for char in str(number): digit_counts[int(char)] += 1 return digit_counts"},{"question":"Write a function `rotate_matrix` that takes a square matrix (a list of lists) and rotates it 90 degrees clockwise. The function should return the rotated matrix. For example: ```python rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] rotate_matrix([ [1, 2], [3, 4] ]) == [ [3, 1], [4, 2] ] rotate_matrix([ [1] ]) == [ [1] ] ```","solution":"def rotate_matrix(matrix): Rotates a square matrix 90 degrees clockwise. N = len(matrix) # Create a new matrix to store the result rotated_matrix = [[0]*N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N-1-i] = matrix[i][j] return rotated_matrix"},{"question":"# Task: You need to write a function `diamondPattern` that returns a diamond pattern up to `n` rows, where `n` is the parameter. Rules/Notes: * If the argument is 0 or a negative integer, it should return an empty string \\"\\". * The widest part of the diamond (the middle row) will have `2n-1` asterisks (`*`). * The diamond should have a total of `2n-1` rows. * The total width (number of columns) for each row in the diamond will be `2n-1`. # Examples: diamondPattern(3): ``` * *** ***** *** * ``` diamondPattern(5): ``` * *** ***** ******* ********* ******* ***** *** * ``` diamondPattern(0): ``` ``` diamondPattern(2): ``` * *** * ```","solution":"def diamondPattern(n): Generates a diamond pattern up to n rows. :param n: number of rows to generate the diamond pattern. :return: A string representation of the diamond pattern. if n <= 0: return \\"\\" diamond = [] width = 2 * n - 1 for i in range(n): stars = \'*\' * (2 * i + 1) diamond.append(stars.center(width)) for i in range(n - 2, -1, -1): stars = \'*\' * (2 * i + 1) diamond.append(stars.center(width)) return \'n\'.join(diamond)"},{"question":"Write a function that accepts a list of integers and a target integer. The function should return the two distinct indices of the list that add up to the target integer. If there are no such indices, return `None`. **Hint:** Use a hashmap (dictionary) to store the indices of the elements you have already seen. For each element, check if its complement (target minus current element) exists in the hashmap. **Constraints:** 1. Each input list will have at least two integers. 2. Each integer in the list will be within the range from -1000 to 1000. 3. There will be at most one valid pair of indices. **Example:** Input: ```python numbers = [2, 7, 11, 15] target = 9 ``` Output: ```python [0, 1] ``` Explanation: The integers at indices 0 and 1 (2 and 7) add up to the target value 9. Input: ```python numbers = [3, 2, 4] target = 6 ``` Output: ```python [1, 2] ``` Explanation: The integers at indices 1 and 2 (2 and 4) add up to the target value 6.","solution":"def find_two_sum_indices(numbers, target): Returns the indices of two distinct elements from the list that add up to the target. If no such elements exist, returns None. num_to_index = {} for i, num in enumerate(numbers): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return None"},{"question":"Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Note that k is guaranteed to be a positive integer. Assume that the input string is always valid. No extra white spaces, square brackets are well-formed, etc. You may assume that the input contains only digits, square brackets, and lowercase English letters. Example 1: Input: \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" Example 2: Input: \\"3[a2[c]]\\" Output: \\"accaccacc\\" Example 3: Input: \\"2[abc]3[cd]ef\\" Output: \\"abcabccdcdcdef\\" Example 4: Input: \\"abc3[cd]xyz\\" Output: \\"abccdcdcdxyz\\"","solution":"def decode_string(s): Given an encoded string, return its decoded string where encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. stack = [] current_string = \\"\\" current_num = 0 for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string = \\"\\" current_num = 0 elif char == \']\': last_string, num = stack.pop() current_string = last_string + num * current_string else: current_string += char return current_string"},{"question":"Task Your task is to implement a function that converts a given integer into its corresponding Roman numeral representation. # Roman Numeral Conversion Roman numerals are represented by different combinations of letters from the Roman alphabet. The following table shows the representation of some Roman numerals: | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals follow specific rules of construction for representing numbers. For example: - 3 is represented as \\"III\\" - 4 is represented as \\"IV\\" - 9 is represented as \\"IX\\" - 58 is represented as \\"LVIII\\" # Input/Output - `[input]` integer `num` - A positive integer between 1 and 3999 (inclusive) - `[output]` string - A string representing the Roman numeral equivalent of the input number. # Example ```python convert_to_roman(3) ==> \\"III\\" convert_to_roman(4) ==> \\"IV\\" convert_to_roman(58) ==> \\"LVIII\\" convert_to_roman(1994) ==> \\"MCMXCIV\\" ```","solution":"def convert_to_roman(num): Converts an integer to its Roman numeral representation. :param num: int - an integer between 1 and 3999 inclusive :return: str - Roman numeral representation of the given integer val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syms[i] num -= val[i] i += 1 return roman_num"},{"question":"You have a grid of size n x m. Each cell in the grid can either be traversable (.) or blocked (#). You want to know in how many ways you can start from the top-left corner (1,1) and reach the bottom-right corner (n,m) by only moving down or right, without stepping on any blocked cell. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, the first line contains two space-separated integers n and m denoting the number of rows and columns in the grid respectively. Each of the next n lines contains a string of length m, representing the grid. A \'.\' indicates a traversable cell, while a \'#\' indicates a blocked cell. -----Output----- For each test case, output a single line corresponding to the number of ways to reach the bottom-right corner from the top-left corner. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ n, m ≤ 50 - The grid will always have \'.\' at the start position (1,1) and end position (n,m). -----Example----- Input 2 3 3 ... .#. ... 3 3 ... # ... Output: 2 0 -----Explanation----- In the first example, you can reach the bottom-right corner from the top-left corner in the following 2 ways: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is no way to reach the bottom-right corner as the entire second row is blocked.","solution":"def count_ways_to_reach_end(grid, n, m): # Initialize DP table to hold number of ways to get to each cell dp = [[0 for _ in range(m)] for _ in range(n)] # Start is always accessible dp[0][0] = 1 # Populate dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The bottom-right corner will have the number of ways to get to (n, m) return dp[n-1][m-1] def process_test_cases(T, test_cases): results = [] for test_case in test_cases: n, m, grid = test_case result = count_ways_to_reach_end(grid, n, m) results.append(result) return results"},{"question":"You are given a job to design an online system for a movie rental service. In this system, movies can be rented and returned by customers. Each time a movie is rented or returned, the system must be updated accordingly. The system should be able to handle queries that check whether a specific movie is available or not. ----Input---- First line contains two integers, N (number of operations) and M (number of movies). Next N lines describe the operations in one of the following forms: - \\"rent movie_id\\" (indicating that the movie with the given id is rented) - \\"return movie_id\\" (indicating that the movie with the given id is returned) - \\"query movie_id\\" (checking whether the movie with the given id is currently available) Each movie_id is an integer from 1 to M. ----Output---- For each \\"query movie_id\\" operation, output \\"Available\\" if the movie is available or \\"Rented\\" if it\'s currently rented. ----Example---- Input: 7 5 rent 1 rent 2 query 1 return 1 query 1 query 2 query 3 Output: Rented Available Rented Available","solution":"def movie_rental_system(commands, N, M): Process the list of commands and return the results of the \'query\' commands. Args: commands (list): List of strings representing the operations. N (int): Number of operations. M (int): Number of movies. Returns: list: List of results for \'query\' commands. movies = [True] * (M + 1) # A list to track the availability of each movie, index 0 is unused results = [] for command in commands: parts = command.split() action = parts[0] movie_id = int(parts[1]) if action == \\"rent\\": movies[movie_id] = False elif action == \\"return\\": movies[movie_id] = True elif action == \\"query\\": if movies[movie_id]: results.append(\\"Available\\") else: results.append(\\"Rented\\") return results"},{"question":"Jane loves palindromes and has a special affection for strings. For one of her assignments, she was given a string s consisting of lowercase English letters. She needs to find out the length of the longest palindromic substring in the given string s. A substring is a contiguous segment of a string, and a palindrome is a string that reads the same forward and backward. Your task is to help Jane by writing a program that calculates the length of the longest palindromic substring in s. -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 1000), where |s| denotes the length of the string. The string s contains only lowercase English letters. -----Output----- Print the length of the longest palindromic substring in s. -----Examples----- Input babad Output 3 Input cbbd Output 2 Input a Output 1 -----Note----- In the first example, the palindrome \\"bab\\" is the longest, and it has a length of 3. In the second example, the palindrome \\"bb\\" is the longest with a length of 2. In the third example, the palindrome \\"a\\" is the longest, with a length of 1. If there are multiple palindromic substrings of the same length, any one of them could be considered.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in s. n = len(s) if n == 0: return 0 # Create a table to store results of subproblems dp = [[False for _ in range(n)] for __ in range(n)] max_length = 1 # At least every single character is a palindrome # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: max_length = length start = i return max_length"},{"question":"Write a function to manipulate the elements of an array according to specified instructions. The function should receive a number specifying the operation and an array of integers. The function should perform the specified operation on the array and return the resulting array. -----Input:----- - The first line contains a single integer T representing the number of test cases. Each test case consists of two lines. - The first line of each test case contains an integer N representing the operation to be performed. - 1 means reverse the array. - 2 means find the sum of array elements. - 3 means find the product of array elements. - The second line contains the integer array. -----Output:----- For each test case, output a single line: - If the operation is 1, output the reversed array. - If the operation is 2, output the sum of array elements. - If the operation is 3, output the product of array elements. -----Constraints----- - 1 leq T leq 100 - 1 leq length_of_array leq 100 - 1 leq array_elements leq 100 -----Sample Input:----- 3 1 4 1 2 3 4 2 3 10 20 30 3 5 1 2 3 4 5 -----Sample Output:----- 4 3 2 1 60 120 -----EXPLANATION:----- In the first test case, the array [1, 2, 3, 4] is reversed to [4, 3, 2, 1]. In the second test case, the sum of the array elements [10, 20, 30] is 60. In the third test case, the product of the array elements [1, 2, 3, 4, 5] is 120.","solution":"def manipulate_array(N, arr): Manipulate the array based on the instruction N. - If N is 1, reverse the array. - If N is 2, find the sum of the array elements. - If N is 3, find the product of the array elements. Parameters: - N: int - Instruction for the manipulation - arr: list of int - The array to be manipulated Returns: - list or int: Result of the manipulation if N == 1: return arr[::-1] elif N == 2: return sum(arr) elif N == 3: product = 1 for number in arr: product *= number return product else: raise ValueError(\\"Invalid operation code. Supported codes are 1, 2, and 3.\\")"},{"question":"You are given a string s consisting of n characters. You want to transform the string into a palindrome by performing the following operation exactly once: Select a segment of the string, reverse it, and replace the segment with the reversed string. It is guaranteed that it is always possible to make the string a palindrome using this operation. -----Input----- The first line contains one integer n (1 le n le 100,000): the length of the string. The second line contains a string s of length n, consisting of lowercase Latin letters. -----Output----- The output should contain two integers l and r (1 le l le r le n): the bounds of the segment to reverse. -----Example----- Input 5 abcba Output 1 5","solution":"def find_palindrome_segment(n, s): Given a string s of length n, find the minimum segment that needs to be reversed to make the string a palindrome. :param n: Length of the string (an integer) :param s: The string (a string of lowercase Latin letters) :return: A tuple (l, r) representing the segment to reverse # Initialize pointers to traverse from left and right left, right = 0, n - 1 # Find the first and last mismatched characters while left < right: if s[left] == s[right]: left += 1 right -= 1 else: break # If no mismatch was found, the whole string should be reversed to itself is a palindrome if left >= right: return (1, n) # Check reversing the found mismatched segment segment_start, segment_end = left, right while left < right: if s[left] == s[right]: left += 1 right -= 1 else: return (segment_start + 1, segment_end + 1) return (segment_start + 1, segment_end + 1)"},{"question":"Implement a function `find_first_non_repeating_letter` that takes a string `s` and returns the first non-repeating character. If all characters are repeating or the string is empty, return an empty string. Examples: Input: ``` s = \\"stress\\" Output: t Explanation: The first non-repeating character is \'t\'. Input: ``` s = \\"moonmen\\" Output: m Explanation: The first non-repeating character is \'m\'. Input: ``` s = \\"aabbcc\\" Output: ``` Explanation: All characters are repeating, so the result is an empty string. Input: ``` s = \\"\\" Output: ``` Explanation: The string is empty, so the result is an empty string. Note: - The function should be case insensitive. - The input string will contain only alphabetic characters (both upper and lower case).","solution":"def find_first_non_repeating_letter(s): Returns the first non-repeating character in the string s. If all characters are repeating or the string is empty, returns an empty string. s_lower = s.lower() for index, char in enumerate(s_lower): if s_lower.count(char) == 1: return s[index] return \\"\\""},{"question":"You are given a circular buffer (ring buffer) of fixed-size. The buffer is a data structure that uses a single, fixed-size buffer whose end is connected to the beginning, forming a circle. This buffer should support the following operations: - **write(value)**: Writes an element to the end of the buffer (write position). If the buffer is full, it should overwrite the oldest data in the buffer. - **read()**: Reads and removes the oldest element from the buffer (read position). If the buffer is empty, it should return `None`. Implement the circular buffer using the given class template in Python. Your implementation should be efficient and make use of the buffer in a circular manner. ```python class CircularBuffer: def __init__(self, size): Initializes the buffer with a given size. Args: size (int): The size of the circular buffer. self.size = size self.buffer = [None] * size self.read_pos = 0 self.write_pos = 0 self.is_full = False def write(self, value): Writes a value to the buffer. Args: value (Any): The value to write to the buffer. raise NotImplementedError(\\"Write method not implemented\\") def read(self): Reads and removes the oldest value from the buffer. Returns: Any: The oldest value from the buffer, or `None` if the buffer is empty. raise NotImplementedError(\\"Read method not implemented\\") # Example usage: cb = CircularBuffer(3) cb.write(1) cb.write(2) print(cb.read()) # Output: 1 cb.write(3) cb.write(4) print(cb.read()) # Output: 2 print(cb.read()) # Output: 3 print(cb.read()) # Output: 4 print(cb.read()) # Output: None (buffer is empty) ``` Implement the `write` and `read` methods for the `CircularBuffer` class in a way that ensures efficient circular management of the buffer elements. You need to handle edge cases like buffer overwriting when full and reading from an empty buffer appropriately.","solution":"class CircularBuffer: def __init__(self, size): Initializes the buffer with a given size. Args: size (int): The size of the circular buffer. self.size = size self.buffer = [None] * size self.read_pos = 0 self.write_pos = 0 self.is_full = False def write(self, value): Writes a value to the buffer. Args: value (Any): The value to write to the buffer. self.buffer[self.write_pos] = value if self.is_full: self.read_pos = (self.read_pos + 1) % self.size self.write_pos = (self.write_pos + 1) % self.size self.is_full = self.write_pos == self.read_pos def read(self): Reads and removes the oldest value from the buffer. Returns: Any: The oldest value from the buffer, or `None` if the buffer is empty. if self.read_pos == self.write_pos and not self.is_full: return None value = self.buffer[self.read_pos] self.buffer[self.read_pos] = None self.read_pos = (self.read_pos + 1) % self.size self.is_full = False return value # Example usage: cb = CircularBuffer(3) cb.write(1) cb.write(2) print(cb.read()) # Output: 1 cb.write(3) cb.write(4) print(cb.read()) # Output: 2 print(cb.read()) # Output: 3 print(cb.read()) # Output: 4 print(cb.read()) # Output: None (buffer is empty)"},{"question":"**Task Description:** As part of the expansion plans for your robotics simulation lab, you need to assign tasks to multiple robots. Each robot has a specific, limited capacity for carrying out tasks within a given time frame. To optimize the task distribution among the robots, you aim to minimize the total time taken to complete all assigned tasks. Consider you have `M` robots and `N` tasks. You are required to distribute the tasks in such a way that the time taken by the robot finishing last is minimized. Each robot can work on only one task at a time, but a robot can work on multiple tasks sequentially. Each task has a predefined duration, and each robot has a fixed maximum time they can work before they must stop. **Input:** The input consists of multiple test cases: - The first line of each test case contains two integers `M` and `N`, representing the number of robots and the number of tasks respectively. - The second line contains `M` integers, where each integer `Ro` represents the maximum time the corresponding robot can work. - The third line contains `N` integers, where each integer `T` represents the duration of each task. Each test case is separated by a blank line. The end of input is indicated by `EOF`. **Output:** For each test case, output a single integer, the minimized total time taken by the robots to complete all assigned tasks such that the load is distributed optimally. If it\'s not possible to assign tasks within the constraints, output -1 for that test case. **Constraints:** - 1 ≤ M, N ≤ 1000 - 1 ≤ Ro ≤ 10000 (Time capacity of each robot) - 1 ≤ T ≤ 1000 (Duration of each task) **Example:** **Input:** ``` 3 5 8 10 12 2 4 6 8 10 2 3 7 5 6 8 9 ``` **Output:** ``` 12 -1 ``` In the first test case, it is possible to distribute the tasks in such a way that the time taken by the robot finishing last is 12. In the second test case, it is impossible to distribute the tasks within the given constraints, hence the output is -1. **Explanation:** - In the first test case, the tasks can be distributed among robots as follows: - Robot 1: Tasks with durations 4, 8 (total time 12) - Robot 2: Task with duration 10 (total time 10) - Robot 3: Tasks with durations 2, 6 (total time 8) The robot finishing last in this scenario takes 12 units of time. - In the second test case, no valid assignment exists within the given robot capacities, hence the output is -1.","solution":"def minimize_max_time(M, N, robot_caps, task_durations): Distributes tasks among robots to minimize the maximum time taken by the robot finishing last. Returns -1 if not possible to distribute tasks within given constraints. tasks = sorted(task_durations, reverse=True) robots = [0] * M def can_complete(time_limit): robots_copy = robot_caps[:] for task in tasks: assigned = False for i in range(M): if robots_copy[i] >= task and (robots[i] + task) <= time_limit: robots[i] += task robots_copy[i] -= task assigned = True break if not assigned: return False return True lower_bound, upper_bound = max(tasks), sum(tasks) while lower_bound < upper_bound: mid = (lower_bound + upper_bound) // 2 robots = [0] * M if can_complete(mid): upper_bound = mid else: lower_bound = mid + 1 robots = [0] * M if not can_complete(lower_bound): return -1 return lower_bound def parse_input(input_str): lines = input_str.strip().split(\'n\') test_cases = [] i = 0 while i < len(lines): if lines[i] == \'\': i += 1 continue M, N = map(int, lines[i].split()) robot_caps = list(map(int, lines[i + 1].split())) task_durations = list(map(int, lines[i + 2].split())) test_cases.append((M, N, robot_caps, task_durations)) i += 4 return test_cases def solve_task_distribution(input_str): test_cases = parse_input(input_str) results = [] for M, N, robot_caps, task_durations in test_cases: result = minimize_max_time(M, N, robot_caps, task_durations) results.append(result) return results"},{"question":"Write a function `find_max_product` that takes in a list of integers and returns the maximum product that can be obtained from any pair of numbers in the list. Your implementation should not use any built-in function that directly solves the problem. Example: ```python find_max_product([1, 10, 2, 6, 5, 3]) # should return 60, which is 10*6 find_max_product([-10, -20, 5, 7]) # should return 200, which is -10*-20 ``` Constraints: - The list length will be at least 2. - The integers can be both positive and negative.","solution":"def find_max_product(nums): n = len(nums) if n < 2: raise ValueError(\\"The input list must have at least two integers.\\") # Initialize the highest and lowest products of two numbers max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in nums: # Update maximum values if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num # Update minimum values if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"You are given an array of integers representing the heights of buildings, where the width of each building is 1 unit. The array starts from the leftmost building to the rightmost building. Find the maximum area of a rectangle that can be formed within the skyline profile. Example 1: Input: [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The rectangle with maximum area has a height of 2 and spans from the 3rd to the 6th building, covering a width of 5-2=3, resulting in an area of 2*5=10. Example 2: Input: [2, 4] Output: 4 Explanation: The rectangle with maximum area has a height of 4 and spans only one building, resulting in an area of 4*1=4. Note: 1 <= heights.length <= 20000 0 <= heights[i] <= 10000","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can fit in the skyline profile given by heights. stack = [] max_area = 0 index = 0 while index < len(heights): # Push current building index to stack if building is not smaller than the building at stack top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top height top_of_stack = stack.pop() # Calculate area with heights[top_of_stack] as the smallest height area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) # Now pop the remaining buildings from stack and calculate area while stack: top_of_stack = stack.pop() area = heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index) max_area = max(max_area, area) return max_area"},{"question":"You are given an array `hours` representing the hours worked by an employee in each day of a week. An employee works efficiently if they work at least `T` hours in a day. Your task is to calculate the total number of days in which the employee worked efficiently. However, the employee can use a special time management technique that makes them work efficiently for `K` consecutive days, regardless of how many hours they actually worked on those days. This special technique can only be used once in the week. Return the maximum number of days the employee could be considered to have worked efficiently in the week. Example: ``` Input: hours = [6, 4, 8, 7, 5, 9, 3], T = 6, K = 3 Output: 5 Explanation: By default, the days on which the employee worked efficiently are: [0, 2, 3, 5] (4 days). By applying the special technique to the days [3, 4, 5], the efficiently worked days are increased to 5 days. ``` Note: - 1 <= T <= 24 - 1 <= K <= 7 - 1 <= hours.length == 7 - 0 <= hours[i] <= 24","solution":"def max_efficient_days(hours, T, K): Calculate the maximum number of days an employee could be considered to have worked efficiently. :param hours: List of integers representing hours worked each day. :param T: Minimum hours needed to consider a day worked efficiently. :param K: Number of consecutive days where the special technique can be applied. :return: Maximum number of days worked efficiently. n = len(hours) current_efficiency_count = sum(1 for hour in hours if hour >= T) max_efficiency_count = current_efficiency_count for i in range(n - K + 1): additional_efficiency = 0 for j in range(i, i + K): if hours[j] < T: additional_efficiency += 1 total_efficiency = current_efficiency_count + additional_efficiency for j in range(i, i + K): if hours[j] >= T: total_efficiency -= 1 max_efficiency_count = max(max_efficiency_count, total_efficiency) return max_efficiency_count"},{"question":"Given a string, find the length of the longest substring without repeating characters. Return the length of that substring. For example: - For the input string `\\"abcabcbb\\"`, the output should be `3`, corresponding to the substring `\\"abc\\"`. - For the input string `\\"bbbbb\\"`, the output should be `1`, corresponding to the substring `\\"b\\"`. - For the input string `\\"pwwkew\\"`, the output should be `3`, corresponding to the substring `\\"wke\\"`. Note that `pwke` is a substring of the original string, but `wke` is a longer substring without repeating characters.","solution":"def length_of_longest_substring(s): Given a string, find the length of the longest substring without repeating characters. char_index = {} max_length = 0 start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"Exploring Function Relationships You are given a mysterious function `hidden_function` which accepts two integers as parameters and returns an integer. You do not have access to its full implementation, but you can call it as follows: ```python result = hidden_function(a, b) ``` Your task is to figure out the relationship between the inputs and the output of this function. To do this, you can call the `hidden_function` with different pairs of integer inputs and analyze the outputs. Once you believe you have understood the behavior of `hidden_function`, implement your own function `replica_function(a, b)` that mimics the `hidden_function`. Your `replica_function` should match the output of the `hidden_function` for the same inputs. Your solution will be tested against several test cases, and to pass, your `replica_function` must return the exact result as `hidden_function` for a variety of inputs. Here is the structure of the function you need to implement: ```python def replica_function(a, b): # Implement the logic deduced from hidden_function pass ``` To assist you, the `hidden_function` is available for testing but is not shown here. You will need to test and deduce its logic based on the outputs for different inputs. Validate your solution by ensuring your `replica_function` produces the same output as `hidden_function` for several test cases, as external test cases may differ from those you use to deduce the logic.","solution":"def hidden_function(a, b): # This implementation is a placeholder. # Replace with the actual logic for real testing. return a + b # Example behavior, needs to be deduced. def replica_function(a, b): Mimics the behavior of hidden_function based on deduced logic. return a + b # Based on initial guessed behavior"},{"question":"Write a function with the signature shown below: ```python def sum_even_fibs(limit): return 0 ``` * returns the sum of all even Fibonacci numbers that are less than or equal to the given `limit`. * Fibonacci sequence starts with 0, 1 and each subsequent number is the sum of the previous two. * If `limit` is less than 2, return 0.","solution":"def sum_even_fibs(limit): Returns the sum of all even Fibonacci numbers that are less than or equal to the given limit. Parameters: limit (int): The upper limit for Fibonacci numbers. Returns: int: Sum of all even Fibonacci numbers up to the given limit. if limit < 2: return 0 a, b = 0, 1 sum_even = 0 while b <= limit: if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"Given two arrays of integers nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order. Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Note: Each element in the result must be unique. The arrays might contain duplicate elements within themselves. Follow up: Can you solve it in O(N) time and O(1) space?","solution":"def intersection(nums1, nums2): Returns an array of unique elements that are common to both nums1 and nums2. return list(set(nums1) & set(nums2))"},{"question":"An old wizard has a collection of magical ingredients, each with a distinct power level represented by an integer. To create a powerful potion, he needs to choose ingredients such that their combined power is as close as possible to a target value without exceeding it. Can you help the wizard find the combination of ingredients that maximizes the total power without exceeding the target? -----Input:----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N (number of ingredients) and M (target power level). - The second line of each test case contains N space-separated integers P_1, P_2, ldots, P_N representing the power levels of the ingredients. -----Output:----- For each test case, print a single line containing one integer, the maximum total power possible without exceeding the target. -----Constraints----- - 1 le T le 10 - 1 le N le 100 - 1 le M le 10^9 - 1 le P_i le 10^6 -----Sample Input:----- 2 5 10 1 2 3 4 5 4 8 5 4 3 2 -----Sample Output:----- 10 8","solution":"from itertools import combinations def max_combination_power(test_cases): results = [] for test_case in test_cases: N, M, power_levels = test_case max_power = 0 for comb_length in range(1, N + 1): for comb in combinations(power_levels, comb_length): comb_sum = sum(comb) if comb_sum <= M: max_power = max(max_power, comb_sum) results.append(max_power) return results # Function for parsing input def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) power_levels = list(map(int, lines[index + 1].split())) test_cases.append((N, M, power_levels)) index += 2 return test_cases # Function for formatting output def format_output(results): return \'n\'.join(map(str, results))"},{"question":"In a galaxy far, far away, data is stored in an unusual format. There is an archive with data logs, and each data log has a unique identifier (ID). However, due to intergalactic interference, some of the data logs have been duplicated. Your task is to help the Galactic Archives Department by removing all duplicates and retaining only the first occurrence of each data log. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of data logs. - The second line contains N space-separated integers D_1, D_2, ldots, D_N representing the unique IDs of the data logs. -----Output----- For each test case, print a single line containing the list of unique data log IDs in the order of their first appearance. -----Constraints----- - 1 le T le 100 - 1 le N le 1,000 - 0 le D_i le 1,000,000 -----Example Input----- 3 5 1 2 2 1 3 4 5 5 5 5 6 1 1000000 1 1000000 500000 500000 -----Example Output----- 1 2 3 5 1 1000000 500000 -----Explanation----- Example case 1: The first occurrence of data log IDs are 1, 2, and 3. Example case 2: All data log IDs are the same, so only one occurrence is retained. Example case 3: The first occurrences of data log IDs are 1, 1000000, and 500000.","solution":"def remove_duplicates(t, test_cases): result = [] for i in range(t): N = test_cases[i][0] logs = test_cases[i][1] seen = set() unique_logs = [] for log in logs: if log not in seen: seen.add(log) unique_logs.append(log) result.append(unique_logs) return result"},{"question":"You are given a 2D grid containing only \'1\'s (land) and \'0\'s (water). The grid represents a map of a group of islands where \'1\'s form land, and each cell is connected to its horizontally or vertically adjacent cells (the grid is not wrapped around). You will need to find the number of distinct islands (connected components of \'1\'s). Example 1: Input: [[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"]] Output: 3 Explanation: There are three islands in the grid. The first island is in the top left corner, the second island is in the middle, and the third island is in the bottom right corner. Example 2: Input: [[\\"1\\",\\"0\\",\\"0\\",\\"1\\",\\"0\\"],[\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"],[\\"0\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"],[\\"1\\",\\"0\\",\\"1\\",\\"0\\",\\"1\\"]] Output: 5 Explanation: There are five islands in this grid. Note: grid.length == grid[i].length 1 <= grid.length <= 100 1 <= grid[i].length <= 100","solution":"def numIslands(grid): Returns the number of distinct islands in the grid. if not grid: return 0 def dfs(grid, i, j): if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited dfs(grid, i+1, j) dfs(grid, i-1, j) dfs(grid, i, j+1) dfs(grid, i, j-1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count"},{"question":"In a kingdom of Sylvania, the royal family loves palindromes. A string is called a **palindrome** if it reads the same backward as forward. The king has issued a decree that every subject must be able to transform any given string into a palindrome by removing at most one character. The king desires to know whether his subjects are following this decree or not. Given a string S, determine if it’s possible to make the string a palindrome by removing at most one character. If it’s possible, return \\"YES\\", otherwise return \\"NO\\". --- Input --- - The first line contains a single integer N denoting the number of test cases. - The description of N test cases follows. - Each test case contains a single line with a string S. --- Output --- For each test case, print \\"YES\\" if it\'s possible to make S a palindrome by removing at most one character. Otherwise, print \\"NO\\". --- Constraints --- - 1 le N le 10 - 1 le |S| le 10^5 - S consists only of lowercase English letters. --- Example Input --- 3 abca racecar abcdef --- Example Output --- YES YES NO --- Explanation --- - For the example 1, by removing \'c\', the string \\"abca\\" becomes \\"aba\\", which is a palindrome. - For the example 2, \\"racecar\\" is already a palindrome. - For the example 3, no single character removal from \\"abcdef\\" can make it a palindrome.","solution":"def can_form_palindrome(s): Determines if it\'s possible to make the string a palindrome by removing at most one character. def is_palindrome_range(s, i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # try removing either left or right character return is_palindrome_range(s, left+1, right) or is_palindrome_range(s, left, right-1) left += 1 right -= 1 return True def follow_decree(test_cases): For given test cases, checks if each string can be transformed into a palindrome by removing at most one character. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Your task is to write a function that takes a list of integers and returns a new list where each element is the product of all the elements in the original list except the one at that position. You may not use division in your solution. #Input A list of integers that can be positive, negative, or zero. The list will have at least one integer. #Examples 1. ([1, 2, 3, 4]) -> [24, 12, 8, 6] 2. ([0, 1, 2, 3, 4]) -> [24, 0, 0, 0, 0] 3. ([-1, 1, 0, -3, 3]) -> [0, 0, 9, 0, 0] 4. ([1, 5, 2]) -> [10, 2, 5] 5. ([9]) -> [1] 6. ([1, 2, 3, 0]) -> [0, 0, 0, 6]","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in the original list except the one at that position. length = len(nums) if length == 0: return [] # Edge case: empty list # Initialize the output array with 1\'s result = [1] * length # Initialize prefix and postfix products prefix = 1 postfix = 1 # Compute prefix products for i in range(length): result[i] = prefix prefix *= nums[i] # Compute postfix products and the final result for i in range(length - 1, -1, -1): result[i] *= postfix postfix *= nums[i] return result"},{"question":"Create a function that simulates a simple temperature conversion toolkit. The function should accept two parameters: the temperature value (as a float) and the scale (as a string: \'C\' for Celsius, \'F\' for Fahrenheit, and \'K\' for Kelvin). The function should convert the temperature to the other two scales and return a dictionary with the results. Round all converted temperatures to two decimal places. Example: ``` convert_temperature(25.0, \'C\') ``` should return ``` {\'F\': 77.00, \'K\': 298.15} convert_temperature(77.0, \'F\') ``` should return ``` {\'C\': 25.00, \'K\': 298.15} convert_temperature(298.15, \'K\') ``` should return ``` {\'C\': 25.00, \'F\': 77.00} ``` Ensure to handle invalid input by returning an empty dictionary.","solution":"def convert_temperature(value, scale): Convert the given temperature value to other two scales. Parameters: value (float): Temperature value to be converted. scale (str): The scale of the given temperature value, \'C\' for Celsius, \'F\' for Fahrenheit, \'K\' for Kelvin. Returns: dict: A dictionary with converted temperature values. Empty dictionary if input is invalid. try: value = float(value) # Ensure the temperature value is float except ValueError: return {} if scale not in (\'C\', \'F\', \'K\'): return {} conversions = {} if scale == \'C\': conversions[\'F\'] = round((value * 9/5) + 32, 2) conversions[\'K\'] = round(value + 273.15, 2) elif scale == \'F\': conversions[\'C\'] = round((value - 32) * 5/9, 2) conversions[\'K\'] = round(((value - 32) * 5/9) + 273.15, 2) elif scale == \'K\': conversions[\'C\'] = round(value - 273.15, 2) conversions[\'F\'] = round(((value - 273.15) * 9/5) + 32, 2) return conversions"},{"question":"Description You are required to design a function that can determine if a given string is a valid hexadecimal number. Hexadecimal numbers are represented in base-16 and they consist of the following characters: - Digits from 0 to 9 - Letters from A to F (uppercase) - Letters from a to f (lowercase) The rules for a valid hexadecimal number are as follows: - The string should not be empty. - The string can optionally start with \\"0x\\" or \\"0X\\". - If it starts with \\"0x\\" or \\"0X\\", it should be followed by at least one valid hexadecimal character (0-9, a-f, A-F). - If it does not start with \\"0x\\" or \\"0X\\", it should consist entirely of valid hexadecimal characters (0-9, a-f, A-F). You may assume that the input will always be a string. Examples: # Extra info - You will only be passed strings. - The string may contain any length of characters, as long as it meets the above criteria. # Example cases: ```python is_valid_hex(\\"0x1A3F\\"): True is_valid_hex(\\"0Xabc123\\"): True is_valid_hex(\\"123abc\\"): True is_valid_hex(\\"GHI\\"): False is_valid_hex(\\"\\"): False is_valid_hex(\\"0x\\"): False ```","solution":"def is_valid_hex(s: str) -> bool: Returns True if the provided string is a valid hexadecimal number, False otherwise. if not s: return False # Strip the optional \\"0x\\" or \\"0X\\" prefix if present if s.startswith(\'0x\') or s.startswith(\'0X\'): s = s[2:] if not s: # If the string is empty after removing the prefix return False return False valid_hex_chars = set(\'0123456789abcdefABCDEF\') for char in s: if char not in valid_hex_chars: return False return True"},{"question":"# Task: Your task is to: - Write a function to determine whether a message can be constructed from the letters in a given magazine. - Each letter in the magazine string can only be used once in the message. - The method should be called `can_construct_message` or `Magazine.canConstructMessage` and it takes in two strings: `message` and `magazine`. The function should return `True` if the message can be constructed from the magazine, and `False` otherwise. # Examples: ```python can_construct_message(\\"hello\\", \\"heohlleo\\") => True ``` > __CALCULATION:__ The magazine contains two `l`\'s, two `e`\'s, one `h`, and one `o`, which are enough to construct the message \\"hello\\". ```python can_construct_message(\\"baby\\", \\"bba\\") => False ``` > __CALCULATION:__ The magazine does not contain enough `y` to construct the message \\"baby\\". ```python can_construct_message(\\"aabbcc\\", \\"abacbcabc\\") => True ``` > __CALCULATION:__ The magazine contains three `a`\'s, three `b`\'s and three `c`\'s which are enough to construct the message \\"aabbcc\\". # Notes: - Only lowercase alphabetic characters will be used. - The length of the `message` and `magazine` will not exceed 100,000 characters.","solution":"def can_construct_message(message, magazine): from collections import Counter message_counter = Counter(message) magazine_counter = Counter(magazine) for char, count in message_counter.items(): if magazine_counter[char] < count: return False return True"},{"question":"You are given a list of integers representing a permutation of the numbers from 1 to n, where some of the numbers are replaced with zeros. You need to restore the missing values while maintaining the permutation property, i.e., every number from 1 to n should appear exactly once. Write a function that takes a list of integers (where some elements are zeros) and returns a list that represents the restored permutation. If there are multiple possible solutions, return any of them. -----Input----- The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 200 000), the length of the permutation. The second line contains n integers, a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ n), where each integer in the list represents an element of the permutation, and 0 indicates a missing value. -----Output----- Print a single line containing n integers, the restored permutation. -----Examples----- Input 5 0 2 3 0 5 Output 1 2 3 4 5 Input 6 0 2 0 4 0 6 Output 1 2 3 4 5 6 Input 4 0 0 3 0 Output 1 2 3 4 -----Note----- In the first sample, the missing numbers 1 and 4 are inserted to make the permutation complete. In the second sample, the missing numbers 1, 3, and 5 are inserted to complete the permutation. In the third sample, the missing numbers 1, 2, and 4 are inserted to form a valid permutation. You may return any valid permutation.","solution":"def restore_permutation(n, permutation): Restore the missing values in the permutation. Parameters: - n: int, length of the permutation - permutation: list of int, the permutation with some values replaced with 0 Returns: - list of int, the restored permutation # Determine which numbers are missing missing_numbers = set(range(1, n+1)) - set(permutation) missing_numbers = sorted(list(missing_numbers)) restored_permutation = [] for value in permutation: if value == 0: restored_permutation.append(missing_numbers.pop(0)) else: restored_permutation.append(value) return restored_permutation"},{"question":"Given a list of **n** integers, write a function to return an array of integers such that each element at index **i** of the new array is the product of all the numbers in the original array except the one at **i**. You must solve it without using division and in O(n) time. Example: Input: [1, 2, 3, 4, 5] Output: [120, 60, 40, 30, 24] Input: [3, 2, 1] Output: [2, 3, 6] (Note: Be mindful of edge cases such as empty arrays or arrays with one element.)","solution":"def product_except_self(nums): Returns an array such that each element at index i is the product of all numbers in the original array except the one at i, without using division and in O(n) time. if not nums: return [] n = len(nums) if n == 1: return [1] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"Given an integer array nums and an integer k, return true if it is possible to divide this array into pairs of ints such that the sum of each pair is divisible by k, else return false. Example 1: Input: nums = [1,2,3,4,5,10,6,7,8,9], k = 5 Output: true Explanation: Pairs that can be formed are (1,9), (2,8), (3,7), (4,6), (5,10) and each pair sums up to a multiple of 5. Example 2: Input: nums = [1,2,3,4,5,6], k = 7 Output: true Explanation: Pairs that can be formed are (1,6), (2,5) and (3,4) and each pair sums up to a multiple of 7. Example 3: Input: nums = [1,2,3,4,5,6], k = 10 Output: false Explanation: There is no way to pair the array in such a way that the sum of each pair is a multiple of 10. Example 4: Input: nums = [2,4,6,8], k = 2 Output: true Explanation: All possible pairs (2,4), (4,6), (6,8) sum up to 6, 10, and 14 respectively, all of which are multiples of 2. Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^9 1 <= k <= 10^9","solution":"from collections import Counter def canArrange(nums, k): Determines if the elements of `nums` can be arranged into pairs such that the sum of each pair is divisible by `k`. remainder_count = Counter(num % k for num in nums) for remainder in remainder_count: if remainder == 0: if remainder_count[remainder] % 2 != 0: return False else: if remainder_count[remainder] != remainder_count[k - remainder]: return False return True"},{"question":"Ali is working on a project to help with event management. He is tasked with creating a program to manage invitations to guests. Each invitation has a guest\'s name and a priority level. Ali needs to write a function that sorts the invitations first by priority level in descending order, and if two guests have the same priority level, their names should be sorted in alphabetical order. -----Input----- The first line contains an integer N, indicating the number of invitations. Each of the following N lines contains a string S representing the guest\'s name and an integer P representing the priority level, separated by a space. -----Output----- Output N lines, each containing a guest\'s name and priority level, sorted first by priority level in descending order, and then by name in alphabetical order. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ |S| ≤ 100 - 1 ≤ P ≤ 100 -----Example----- Input: 5 Jane 2 David 3 Alice 2 Bob 1 Charlie 3 Output: Charlie 3 David 3 Alice 2 Jane 2 Bob 1","solution":"def sort_invitations(n, invitations): Sorts invitations by priority level in descending order, and by name in alphabetical order for the same priority level. Parameters: - n: int, number of invitations - invitations: List of tuples [(name, priority), ...] Returns: - List of tuples [(name, priority), ...] sorted accordingly # Sorting by priority (descending) and name (alphabetical) sorted_invites = sorted(invitations, key=lambda x: (-x[1], x[0])) return sorted_invites # Function to read input and process output def process_invitations(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) invitations = [(line.split()[0], int(line.split()[1])) for line in lines[1:]] sorted_invites = sort_invitations(n, invitations) output_lines = [f\\"{name} {priority}\\" for name, priority in sorted_invites] return \\"n\\".join(output_lines)"},{"question":"You are given a list of numbers representing the scores of players in a game. Your task is to determine the rank of each player based on their scores. The ranks should start from 1 for the highest score. If two players have the same score, they should have the same rank, and the next rank after them should be skipped (i.e., if two players are ranked 1, the next player should be ranked 3). Implement the function ```calculate_ranks``` that takes a list of integers as its input and returns a list of integers representing the ranks of the players in the same order as the input list. ```python from typing import List def calculate_ranks(scores: List[int]) -> List[int]: pass # Example usage: # should return [1, 2, 2, 4] print(calculate_ranks([100, 90, 90, 80])) # should return [3, 3, 1, 2] print(calculate_ranks([70, 70, 100, 90])) # should return [1, 2, 3, 4, 5] print(calculate_ranks([100, 90, 80, 70, 60])) ``` For the sake of simplicity: - You can assume all scores are positive integers. - The list can contain up to 10,000 scores.","solution":"from typing import List def calculate_ranks(scores: List[int]) -> List[int]: Calculate the ranks based on the scores provided. sorted_scores = sorted(enumerate(scores), key=lambda x: x[1], reverse=True) ranks = [0] * len(scores) rank = 1 for i, (index, score) in enumerate(sorted_scores): if i > 0 and score < sorted_scores[i-1][1]: rank = i + 1 ranks[index] = rank return ranks"},{"question":"Given a list of integers, write a function that groups these integers by the number of digits they contain and prints each group on a new line in ascending order of the integers within the group. For example, given the list `[123, 56, 1, 7890, 23, 456, 12, 6, 789]`, the expected output should be: ``` 1 6 12 23 56 123 456 789 7890 ``` Write a function `group_and_print(nums)` that takes a list of integers `nums` and prints the grouped result as specified. Each group should be printed on a new line with integers separated by a space.","solution":"def group_and_print(nums): Groups integers by the number of digits they contain and prints each group on a new line in ascending order of the integers within the group. from collections import defaultdict # Dictionary to hold numbers grouped by their digit length groups = defaultdict(list) for num in nums: length = len(str(abs(num))) # Get digit length groups[length].append(num) # Sort and print each group for length in sorted(groups.keys()): group = sorted(groups[length]) print(\\" \\".join(map(str, group)))"},{"question":"You are given a log file detailing various activities captured within a software system. Each log entry consists of a timestamp and a status message. Your task is to write a function that extracts and returns all status messages that have occurred within a given time range. Function Signature: ```python def filter_logs(logs: List[str], start_time: str, end_time: str) -> List[str]: ``` # Input - `logs` (List[str]): A list of log entries, where each log entry is a string formatted as \\"YYYY-MM-DD HH:MM:SS - status_message\\". - `start_time` (str): A string representing the start time in the format \\"YYYY-MM-DD HH:MM:SS\\". - `end_time` (str): A string representing the end time in the same format as the start time. # Output - `filtered_logs` (List[str]): A list of status messages that have timestamps between start_time and end_time, inclusive of the start and end times. # Example ```python logs = [ \\"2023-10-01 10:00:00 - System started.\\", \\"2023-10-01 10:05:00 - User login.\\", \\"2023-10-01 10:10:00 - User logout.\\", \\"2023-10-01 10:15:00 - System shut down.\\" ] start_time = \\"2023-10-01 10:00:00\\" end_time = \\"2023-10-01 10:10:00\\" filter_logs(logs, start_time, end_time) # Output: [\\"System started.\\", \\"User login.\\", \\"User logout.\\"] ``` # Notes - The log entries are provided in ascending order of time. - A log entry should be included in the output if its timestamp is within the provided `start_time` and `end_time`, including boundary times.","solution":"from typing import List from datetime import datetime def filter_logs(logs: List[str], start_time: str, end_time: str) -> List[str]: Extracts and returns all status messages that have occurred within a given time range. Parameters: - logs (List[str]): A list of log entries in the format \\"YYYY-MM-DD HH:MM:SS - status_message\\". - start_time (str): The start time in the format \\"YYYY-MM-DD HH:MM:SS\\". - end_time (str): The end time in the same format \\"YYYY-MM-DD HH:MM:SS\\". Returns: - List[str]: A list of status messages within the given time range. start_dt = datetime.strptime(start_time, \\"%Y-%m-%d %H:%M:%S\\") end_dt = datetime.strptime(end_time, \\"%Y-%m-%d %H:%M:%S\\") filtered_logs = [] for log in logs: timestamp_str, message = log.split(\\" - \\", 1) timestamp_dt = datetime.strptime(timestamp_str, \\"%Y-%m-%d %H:%M:%S\\") if start_dt <= timestamp_dt <= end_dt: filtered_logs.append(message) return filtered_logs"},{"question":"A group of adventurers is exploring a forest filled with magical stones. Each stone has a magical power level. The adventurers need to collect stones in such a way that the difference between the total power levels of stones collected by two teams is minimized. You have to help them find this minimal difference. You are given an array of integers where each integer represents the power level of a stone. Divide the array into two subsets such that the absolute difference between the sum of the power levels in the two subsets is minimized. Return the minimal absolute difference. -----Input----- The first line contains one integer t (1 leq t leq 100) — the number of test cases. Each of the next t lines contains an integer n (1 leq n leq 100) followed by n integers representing the power levels of the stones (1 leq text{power level} leq 10^4). -----Output----- Output t lines, each containing one integer — the minimal absolute difference for each test case. -----Example----- Input 2 5 1 2 3 4 5 4 10 20 15 25 Output 1 0 -----Note----- In the first test case, you can divide the array into sets {1, 2, 4} and {3, 5}. The sums are 7 and 8, and the minimal difference is 1. In the second test case, you can divide the array into sets {10, 25} and {20, 15}. The sums are 35 and 35, and the minimal difference is 0.","solution":"def minimal_difference(test_cases): def subset_sum(arr, n, total_sum): dp = [[False for _ in range(total_sum + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: diff = total_sum - 2 * j break return diff results = [] for case in test_cases: n, *arr = case total_sum = sum(arr) results.append(subset_sum(arr, n, total_sum)) return results"},{"question":"Given a list of integers, return the length of the longest contiguous sublist that contains only unique elements. For example, given the list `[1, 2, 3, 1, 2, 3, 4, 5]`, the contiguous sublist with all unique elements is `[1, 2, 3, 4, 5]` which has a length of 5. Some examples: - `[1, 2, 2, 3, 4, 5, 5] => 4` (The sublist is [2, 3, 4, 5]) - `[4, 4, 4, 4] => 1` (The sublist is [4]) - `[1, 2, 3, 4, 5] => 5` (The sublist is [1, 2, 3, 4, 5]) - `[5, 4, 3, 2, 1] => 5` (The sublist is [5, 4, 3, 2, 1]) **NOTES:** * The input list may contain integers in no specific order. * The length of the list is guaranteed to be at least 1.","solution":"def longest_unique_sublist(nums): Returns the length of the longest contiguous sublist that contains only unique elements. seen = set() left = 0 max_length = 0 for right in range(len(nums)): while nums[right] in seen: seen.remove(nums[left]) left += 1 seen.add(nums[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Create a function that takes an integer `n` and returns the nth row of Pascal\'s triangle as a list. Pascal\'s triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s triangle are indexed starting from 0, and the elements within each row are also indexed starting from 0. The value at the ith position in the nth row of Pascal\'s triangle can be computed using the binomial coefficient formula: ``` C(n, i) = n! / (i! * (n - i)!) ``` # Example ``` Input: n = 3 Output: [1, 3, 3, 1] Input: n = 0 Output: [1] Input: n = 1 Output: [1, 1] ``` # Constraints - The function should be able to handle values of `n` up to at least 20. - The input `n` will always be a non-negative integer.","solution":"from math import comb def pascal_row(n): Returns the nth row of Pascal\'s triangle as a list. Parameters: n (int): the row index (0-indexed) Returns: list: the nth row of Pascal\'s triangle return [comb(n, i) for i in range(n + 1)]"},{"question":"Given a binary matrix grid, return the number of square submatrices that have all ones. A square submatrix is a submatrix in which the number of rows equals the number of columns, and all its elements are 1s. Example 1: Input: grid = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] Output: 15 Explanation: There are 10 squares of size 1x1. There are 4 squares of size 2x2. There is 1 square of size 3x3. Total number of squares = 10 + 4 + 1 = 15. Example 2: Input: grid = [ [1,0,1], [1,1,0], [1,1,0] ] Output: 7 Explanation: There are 6 squares of size 1x1. There is 1 square of size 2x2. Total number of squares = 6 + 1 = 7. Constraints: 1. 1 <= grid.length <= 300 2. 1 <= grid[0].length <= 300 3. grid[i][j] is 0 or 1","solution":"def countSquares(grid): Returns the number of square submatrices with all ones. rows = len(grid) cols = len(grid[0]) dp = [[0] * cols for _ in range(rows)] total_squares = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 total_squares += dp[i][j] return total_squares"},{"question":"You are given an array of n integers. Your task is to select a contiguous subarray such that the sum of its elements is maximized. However, the selected subarray must contain at least one negative number. If it\'s not possible to satisfy the constraint, return -1. -----Input:----- - The first line contains T, the number of test cases. - The first line of each test case contains n, the size of the array. - The second line of each test case contains n integers representing the elements of the array. -----Output:----- For each test case, output the maximum subarray sum which includes at least one negative number. If there is no such subarray, output -1. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 10^5 - -10^9 leq text{array}[i] leq 10^9 - The sum of n over all testcases doesn\'t exceed 10^5. -----Sample Input:----- 3 5 1 2 3 -4 5 4 -1 -2 -3 -4 3 1 2 3 -----Sample Output:----- 7 -1 -1 -----Explanation:----- In the first test case: - The subarray [1, 2, 3, -4, 5] is the best choice and produces a sum of 7. - Note that [1, 2, 3, 5] doesn\'t contain any negative number and is not valid for the answer. In the second test case: - The whole array is chosen as the subarray since it satisfies the constraint and produces a sum of -1. In the third test case: - There are no negative numbers in the array, so the answer is -1.","solution":"def max_subarray_with_negative(T: int, test_cases: list) -> list: For each test case, find the maximum sum of a contiguous subarray that contains at least one negative number. Args: T (int): Number of test cases. test_cases (list): A list of tuples, each tuple containing: - an integer n (size of the array) - a list of n integers (the array elements) Returns: list: A list of integers representing the result for each test case. results = [] for i in range(T): n, array = test_cases[i] found_negative = False max_ending_here = float(\'-inf\') max_so_far = float(\'-inf\') for x in array: if x < 0: found_negative = True max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) if not found_negative: results.append(-1) else: results.append(max_so_far) return results"},{"question":"A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In this task, you are given a string, and you must determine the length of the longest palindromic substring within that string. Input --- The input consists of a single line containing a string `s` of length `1 ≤ |s| ≤ 1000`. The string consists only of printable ASCII characters. Output --- Output the length of the longest palindromic substring. Example --- For the input string: ``` babad ``` The longest palindromic substring is either \\"bab\\" or \\"aba\\", and the output would be: ``` 3 ``` For the input string: ``` cbbd ``` The longest palindromic substring is \\"bb\\", and the output would be: ``` 2 ``` Note: You must solve this problem using dynamic programming or any optimal solution with a complexity better than or equal to O(n^2).","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 # Create a table to store the results of subproblems dp = [[0] * n for _ in range(n)] max_length = 1 for i in range(n): dp[i][i] = True # Single letter is palindrome # Check for a window of size 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check windows of size greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 # Ending index of the current window # Check if s[i] to s[j] is a palindrome if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"Alien Dictionary Order You have been given a list of words from a fictional alien language. The order of the letters in this language is unknown. However, the words are sorted lexicographically according to the rules of this alien language. Since the ordering of the letters is unknown, you need to derive the order of characters in the alien language from the given list of words. Write a function `alienOrder(words)` that takes a list of words and returns a string that represents the characters in the alien language in the correct order. If there are multiple valid orders, return any one of them. If there is no valid order, return an empty string. Examples ```python alienOrder([\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"]) -> \\"wertf\\" alienOrder([\\"z\\", \\"x\\", \\"z\\"]) -> \\"\\" alienOrder([\\"abc\\", \\"ab\\"]) -> \\"\\" ``` # Note: 1. The input list `words` contains only words with lowercase English letters. 2. The length of `words` does not exceed 100. 3. The length of each word is between 1 and 100. # Explanation: In the first example, the words `[\\"wrt\\", \\"wrf\\", \\"er\\", \\"ett\\", \\"rftt\\"]` can be ordered as follows: 1. From \\"wrt\\" -> \\"wrf\\", we can deduce that `t` comes before `f`. 2. From \\"wrf\\" -> \\"er\\", we can deduce that `w` comes before `e`. 3. From \\"er\\" -> \\"ett\\", we can deduce that `r` comes before `t`. 4. From \\"ett\\" -> \\"rftt\\", we can deduce that `e` comes before `r`. For the second example, the words `[\\"z\\", \\"x\\", \\"z\\"]` have an invalid ordering because `z` comes before `x` in the first two, but after `x` in the last one. Therefore, no valid order can be obtained. For the third example, the given words `[\\"abc\\", \\"ab\\"]` are invalid because `abc` cannot come before `ab` lexicographically, making it impossible to determine a valid order. Constraints: - You may assume that there is only one `alienOrder` function in your entire code. - External libraries or packages are not allowed (stick to standard Python libraries).","solution":"from collections import defaultdict, deque def alienOrder(words): # Initialize the graph and the in-degree dictionary graph = defaultdict(list) in_degree = {char: 0 for word in words for char in word} # Build the graph for first, second in zip(words, words[1:]): for c1, c2 in zip(first, second): if c1 != c2: if c2 not in graph[c1]: graph[c1].append(c2) in_degree[c2] += 1 break else: if len(second) < len(first): return \\"\\" # Initialize the queue with nodes of 0 in-degree queue = deque([char for char in in_degree if in_degree[char] == 0]) # Perform topological sort order = [] while queue: char = queue.popleft() order.append(char) for neighbor in graph[char]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == len(in_degree): return \\"\\".join(order) else: return \\"\\""},{"question":"Alex is building a custom memory manager for a new application. As part of the system, he needs to maintain the most recent `K` unique elements that are being processed by the application. Whenever a new element is processed: - If the element is not in the current list, it should be added to the front of the list. - If the element is already present, it should be moved to the front. - If the list exceeds size `K`, the oldest element (the one at the end of the list) should be removed. Your task is to simulate this process and determine the state of the memory manager after processing a series of elements. -----Input:----- - The first line of the input contains an integer `T` denoting the number of test cases. The description of `T` test cases follows. - The first line of each test case contains two integers `N` and `K`, where `N` is the number of elements to be processed and `K` is the maximum size of the list. - The second line of each test case contains `N` integers representing the sequence of elements to be processed. -----Output:----- For each test case, print a single line containing the state of the memory manager (the list of `K` most recent unique elements) from front to back. -----Constraints----- - 1 leq T leq 100 - 1 leq N, K leq 1000 - 1 leq text{elements} leq 100000 -----Sample Input:----- 2 5 3 1 2 3 1 4 6 2 1 2 1 2 1 2 -----Sample Output:----- 4 1 3 2 1 -----EXPLANATION:----- For the first test case: - Process 1: List becomes [1] - Process 2: List becomes [2, 1] - Process 3: List becomes [3, 2, 1] - Process 1: List becomes [1, 3, 2] (1 is moved to the front) - Process 4: List becomes [4, 1, 3] (2 is removed as size exceeds K) For the second test case: - Process 1: List becomes [1] - Process 2: List becomes [2, 1] - Process 1: List becomes [1, 2] (1 is moved to the front) - Process 2: List becomes [2, 1] (2 is moved to the front) - Process 1: List becomes [1, 2] (1 is moved to the front) - Process 2: List becomes [2, 1] (2 is moved to the front)","solution":"def memory_manager(T, test_cases): results = [] for case in test_cases: N, K, elements = case mem_list = [] for elem in elements: if elem in mem_list: mem_list.remove(elem) mem_list = [elem] + mem_list if len(mem_list) > K: mem_list.pop() results.append(\\" \\".join(map(str, mem_list))) return results # Function to process input and output def process_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] line_index = 1 for _ in range(T): N, K = map(int, lines[line_index].split()) elements = list(map(int, lines[line_index + 1].split())) test_cases.append((N, K, elements)) line_index += 2 results = memory_manager(T, test_cases) return \\"n\\".join(results)"},{"question":"A popular way of understanding sorting algorithms is through visual representation. Write a function `visualize_bubble_sort` that takes a list of integers as input and returns a list of lists, where each sublist represents the state of the list after each full pass of the Bubble Sort algorithm. Each full pass refers to iterating through the entire list once to bubble up the largest element to its correct position. For example, `visualize_bubble_sort([4, 3, 1, 2])` should return: [ [3, 1, 2, 4], [1, 2, 3, 4], [1, 2, 3, 4] ] Explanation: 1. After the first pass, the largest element (4) is bubbled up to the end: `[3, 1, 2, 4]` 2. After the second pass, the next largest element (3) is bubbled up to its correct position: `[1, 2, 3, 4]` 3. After the third pass, the list is already sorted but for clarity, it\'s included in the output again. Consider edge cases such as an empty list or a list with one element, which should be returned as is.","solution":"def visualize_bubble_sort(arr): Performs bubble sort on the input list and visualizes the state of the list after each full pass. Parameters: arr (list): List of integers to sort. Returns: list of lists: Each sublist represents the state of the list after each full pass of the bubble sort. n = len(arr) result = [] for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True result.append(arr[:]) if not swapped: break return result"},{"question":"-----Problem description.----- You are tasked with rotating the elements of a 2D array in a clockwise direction. Given a square matrix of integers, rotate the matrix 90 degrees clockwise. -----Input----- - The first line of input contains an integer T, the number of test cases. - Each test case starts with an integer N, the size of the NxN matrix. - The next N lines contain N space-separated integers each, representing the matrix. -----Output----- - For each test case, output the NxN matrix rotated 90 degrees clockwise, each row on a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 50 - -1000 ≤ matrix element ≤ 1000 -----Example----- Input: 2 3 1 2 3 4 5 6 7 8 9 2 10 20 30 40 Output: 7 4 1 8 5 2 9 6 3 30 10 40 20 -----Explanation----- In the first test case, the 3x3 matrix: 1 2 3 4 5 6 7 8 9 is rotated 90 degrees clockwise to become: 7 4 1 8 5 2 9 6 3 In the second test case, the 2x2 matrix: 10 20 30 40 is rotated 90 degrees clockwise to become: 30 10 40 20","solution":"def rotate_matrix_clockwise(matrix): Rotates the given NxN matrix 90 degrees clockwise. N = len(matrix) return [[matrix[N - j - 1][i] for j in range(N)] for i in range(N)] def rotate_matrices(test_cases): Takes a list of test cases where each test case is a tuple containing the matrix size and the matrix, and returns the rotated matrices. return [rotate_matrix_clockwise(matrix) for _, matrix in test_cases]"},{"question":"You are working on a project to analyze weather patterns in different regions. One component of the project is to determine the sequence of the longest consecutive increasing temperature readings in a given list of daily temperatures. Given a list of temperature readings, you need to write a program that finds the length of the longest consecutive subarray where each temperature is higher than the previous day\'s temperature. ---Input--- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a space-separated list of integers a_1, a_2, ldots, a_n (1 le n le 10^5; -100 le a_i le 100) representing the temperature readings. It is guaranteed that the total number of elements in all test cases does not exceed 10^6. ---Output--- For each test case, output a single integer — the length of the longest sequence of consecutive days with increasing temperatures. ---Example--- Input: 3 30 31 32 28 29 30 31 25 27 30 29 30 31 -5 -4 -3 -2 -1 0 1 Output: 4 4 7 ---Note--- In the first example, the longest sequence of increasing temperatures is [28, 29, 30, 31], so the answer is 4. In the second example, both [25, 27, 30] and [29, 30, 31] have a length of 3, but the longer is [29, 30, 31]. In the third example, the whole list [-5, -4, -3, -2, -1, 0, 1] is increasing, so the answer is 7.","solution":"def longest_increasing_sequence_length(temperatures): Returns the length of the longest increasing sequence of temperatures. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] > temperatures[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(test_cases): results = [] for temperatures in test_cases: results.append(longest_increasing_sequence_length(temperatures)) return results"},{"question":"Given a list of `n` integers, return the maximum sum of any **non-empty** subsequence with the condition that the selected subsequence does not contain any consecutive numbers from the original list. Examples: Input: `[3, 2, 7, 10]` Output: 13 Explanation: The subsequence is [3, 10] (sum is 13). Input: `[3, 2, 5, 10, 7]` Output: 15 Explanation: The subsequence is [3, 5, 7] (sum is 15). Input: `[2, 1, 4, 9]` Output: 11 Explanation: The subsequence is [2, 9] (sum is 11). Note: - The list can contain negative numbers. - The list can be empty, in which case return 0.","solution":"def max_non_consecutive_subsequence_sum(nums): Returns the maximum sum of any non-empty subsequence with the condition that the selected subsequence does not contain any consecutive numbers from the original list. if not nums: return 0 incl = 0 # Maximum sum including the current element excl = 0 # Maximum sum excluding the current element for num in nums: # Current max excluding i (No neighboring element constraint) new_excl = max(incl, excl) # Current max including i incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"A group of biologists is studying a forest ecosystem and they record the heights of trees. They have a list of tree heights and need to determine some statistical information about the trees. Specifically, they want to know the height of the shortest tree, the height of the tallest tree, and the average height of the trees (rounded down to the nearest integer). -----Input----- An integer N denoting the number of trees. A list of N space-separated integers representing the heights of the trees. -----Output----- In the first line, output the height of the shortest tree. In the second line, output the height of the tallest tree. In the third line, output the average height of the trees rounded down to the nearest integer. -----Constraints----- 1 <= N <= 1000 1 <= height of each tree <= 10000 -----Example----- Input: 5 10 20 30 40 50 Output: 10 50 30 -----Explanation----- The shortest tree has a height of 10, the tallest tree has a height of 50, and the average height is (10+20+30+40+50)/5 = 30.","solution":"import math def tree_statistics(N, heights): Computes and returns the height of the shortest tree, the height of the tallest tree, and the average height of the trees rounded down to the nearest integer. Parameters: N (int): The number of trees. heights (list of int): List of tree heights. Returns: tuple: (shortest_height, tallest_height, average_height) shortest_height = min(heights) tallest_height = max(heights) average_height = math.floor(sum(heights) / N) return shortest_height, tallest_height, average_height"},{"question":"Write a function that takes a string identifying a given time in 12-hour AM/PM format and converts it to 24-hour military time. Example: ```python convert_to_military_time(\\"07:05:45PM\\") # => returns \\"19:05:45\\" convert_to_military_time(\\"12:00:00AM\\") # => returns \\"00:00:00\\" ``` ```f# convertToMilitaryTime \\"07:05:45PM\\" // => returns \\"19:05:45\\" convertToMilitaryTime \\"12:00:00AM\\" // => returns \\"00:00:00\\" ``` Note: 1. The string format will be `hh:mm:ssAM` or `hh:mm:ssPM`. 2. 12:00:00AM is 00:00:00 in 24-hour format. 3. 12:00:00PM is 12:00:00 in 24-hour format.","solution":"def convert_to_military_time(time_str): Converts a 12-hour AM/PM time format string to a 24-hour military time format string. Args: time_str (str): A string representing time in 12-hour AM/PM format (e.g., \\"07:05:45PM\\") Returns: str: The corresponding time in 24-hour military time format (e.g., \\"19:05:45\\") period = time_str[-2:] hour = int(time_str[:2]) minute_seconds = time_str[2:-2] if period == \\"AM\\": if hour == 12: hour = 0 return \\"{:02d}{}\\".format(hour, minute_seconds) else: # PM if hour != 12: hour += 12 return \\"{:02d}{}\\".format(hour, minute_seconds)"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to find the maximum product of two distinct elements from the list. =====Input Format===== A single line containing space-separated integers representing the list. =====Constraints===== 2 <= len(list) <= 1000 -1000 <= element <= 1000 =====Output Format===== Print a single integer representing the maximum product of two distinct elements from the list.","solution":"def max_product_of_two(lst): Returns the maximum product of two distinct elements from the list. if len(lst) < 2: return None max1 = max2 = float(\'-inf\') min1 = min2 = float(\'inf\') for num in lst: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2, min1 * min2)"},{"question":"--- # Background You have recently joined a programming class and have to complete a series of exercises on string manipulation in Python. For one of the exercises, you need to write a program that transforms strings according to a set of rules. # Rules Specific letters in the string need to be replaced by other letters based on the following rules: * Replace every occurrence of \'A\' with \'B\' * Replace every \'B\' with \'C\' * Replace every \'C\' with \'A\' * All other characters should remain unchanged * If a character\'s case is uppercase, it should remain uppercase in the output * Similarly, if the character\'s case is lowercase, it should remain lowercase in the output Write a function `transform_string(sentence: str) -> str` that takes a string `sentence` and returns the transformed string according to the above rules. # Examples ```python assert transform_string(\\"ABCA\\") == \\"BCAB\\" assert transform_string(\\"Hello World!\\") == \\"Hello World!\\" assert transform_string(\\"abcABC\\") == \\"bcaBCA\\" assert transform_string(\\"AaBbCc\\") == \\"BbCcAa\\" assert transform_string(\\"XYZ\\") == \\"XYZ\\" ``` # Constraints * The input string `sentence` will only contain printable ASCII characters. * The input string length will be between 0 and 100 characters. --- Write a function `transform_string(sentence: str) -> str` that implements the rules described above. ```python def transform_string(sentence: str) -> str: # Your implementation here ```","solution":"def transform_string(sentence: str) -> str: Transforms the given string by replacing each occurrence of \'A\' with \'B\', \'B\' with \'C\', and \'C\' with \'A\'. The transformation respects the case of the letters. :param sentence: Input string to transform :return: Transformed string transformation = { \'A\': \'B\', \'B\': \'C\', \'C\': \'A\', \'a\': \'b\', \'b\': \'c\', \'c\': \'a\' } return \'\'.join(transformation.get(char, char) for char in sentence)"},{"question":"Jenna is an avid gamer who loves grid-based puzzle games. Recently, she has encountered a thrilling new game called \\"Treasure Grid\\". In this game, Jenna plays on a 2D grid, and each cell in the grid can contain either an obstacle (\'#\') or a treasure (\'.\'). Jenna\'s goal is to determine the largest rectangular area within the grid that contains only treasures. The grid is represented as an \'N\' by \'M\' matrix, where \'N\' is the number of rows and \'M\' is the number of columns. Jenna wants to write a program that can rapidly calculate the largest area of treasure cells (\'.\') she can find in a single rectangular section of the grid. -----Input----- The first line of the input contains an integer \'T\' denoting the number of test cases. The description of \'T\' test cases follows. For each test case: - The first line contains two integers \'N\' and \'M\' - the number of rows and columns of the grid, respectively. - Each of the next \'N\' lines contains a string of length \'M\' consisting of characters \'400 characters in total. -----Output----- For each test case, output a single integer corresponding to the largest area of treasure cells that can be found within a rectangular sub-section of the grid. -----Constraints----- Subtask #1: (40 points) - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 50 Subtask #2: (60 points) - 1 ≤ T ≤ 5 - 1 ≤ N, M ≤ 100 -----Example----- Input: 2 4 4 #. #..# .# #..# 3 3 . . # Output: 4 1 -----Explanation----- In the first example, the largest rectangle with only treasures has an area of 4, which is the 2x2 area from coordinates (2,2) to (3,3). In the second example, the largest rectangle with only treasures has an area of 1, which is any single cell containing a \'.\'.","solution":"def max_histogram_area(histogram): Calculate the maximum rectangular area in the histogram (a list of non-negative integers). stack = [] max_area = 0 index = 0 while index < len(histogram): # Push current bar onto stack if it is higher than bar at stack top if not stack or histogram[index] >= histogram[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with histogram[top_of_stack] as the smallest bar area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area max_area = max(max_area, area) # Calculate area for remaining bars in stack while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_treasure_area(grid, N, M): Calculate the largest rectangular area with treasures (\'.\') in the 2D grid. if N == 0 or M == 0: return 0 # Initialize the heights array heights = [0] * M largest_area = 0 for row in grid: for col in range(M): if row[col] == \'.\': heights[col] += 1 else: heights[col] = 0 # Calculate the maximum area with the histogram heights largest_area = max(largest_area, max_histogram_area(heights)) return largest_area def solve_treasure_grid(test_cases): results = [] for grid, N, M in test_cases: result = largest_treasure_area(grid, N, M) results.append(result) return results"},{"question":"-----Question:----- You are working on a software that tracks the growth of plants in a greenhouse. Each plant grows according to a unique growth pattern defined by an initial height, a growth rate per day, and a maximum height limit. Your task is to determine the day on which each plant reaches its maximum height. The growth of each plant is characterized by three parameters: - Initial height of the plant (H) - Daily growth rate (G) - Maximum height limit (L) The height of the plant at any given day can be calculated as: Height on day (n) = H + n * G A plant stops growing once it reaches or exceeds its maximum height limit (L). If the initial height is already greater than or equal to the maximum height limit, the plant will not grow any further. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, three integers H, G, and L. -----Output:----- For each test case, output the day on which the plant reaches its maximum height. If the plant never reaches or exceeds its maximum height, output \\"Infinity\\". -----Constraints----- - 1 ≤ T ≤ 100000 - 1 ≤ H, G, L ≤ 10^9 - G > 0 -----Sample Input:----- 3 10 5 50 5 0 20 15 2 15 -----Sample Output:----- 8 Infinity 0","solution":"def days_to_reach_max_height(T, test_cases): results = [] for H, G, L in test_cases: if H >= L: results.append(0) elif G == 0: results.append(\'Infinity\') else: days = (L - H + G - 1) // G # This ensures we use ceiling division results.append(days) return results"},{"question":"After a long day of playing their favorite game, Alphonse and Edward like to relax by solving exciting puzzles. One day, Winry challenges them with the following problem: Consider a grid of size N x M where each cell contains a non-negative integer. A path is defined as a sequence of cells starting from the top-left corner to the bottom-right corner. You can only move right or down from a cell. The cost of a path is the sum of the integers in the cells visited along the path. Find the number of unique paths that have the minimum cost. As the number of unique paths can be very large, return the answer modulo 1000000007. -----Input:----- - The first line contains T, the number of test cases. The test cases follow. - For each test case, the first line contains two integers N and M, representing the dimensions of the grid. - The next N lines contain M integers each, describing the grid. -----Output:----- For each test case, output a single integer denoting the number of unique paths with the minimum cost modulo 1000000007. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 300 - 0 ≤ grid[i][j] ≤ 1000 -----Sample Input:----- 2 2 2 1 3 2 1 3 3 1 2 3 4 8 2 1 5 3 -----Sample Output:----- 1 1 -----Explanation:----- In the first test case, the minimal cost path is [1 -> 2 -> 1] with only one possible path giving a total cost of 1 + 2 + 1 = 4. In the second test case, the minimal cost path is [1 -> 4 -> 1 -> 5 -> 3] with only one possible path giving a total cost of 1 + 4 + 1 + 5 + 3 = 14.","solution":"def min_cost_paths(t, test_cases): MOD = 1000000007 results = [] for case in test_cases: n, m, grid = case dp = [[float(\'inf\')] * m for _ in range(n)] paths = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] paths[0][0] = 1 for i in range(n): for j in range(m): if i > 0: if dp[i][j] > dp[i-1][j] + grid[i][j]: dp[i][j] = dp[i-1][j] + grid[i][j] paths[i][j] = paths[i-1][j] elif dp[i][j] == dp[i-1][j] + grid[i][j]: paths[i][j] = (paths[i][j] + paths[i-1][j]) % MOD if j > 0: if dp[i][j] > dp[i][j-1] + grid[i][j]: dp[i][j] = dp[i][j-1] + grid[i][j] paths[i][j] = paths[i][j-1] elif dp[i][j] == dp[i][j-1] + grid[i][j]: paths[i][j] = (paths[i][j] + paths[i][j-1]) % MOD results.append(paths[n-1][m-1]) return results def process_input(input_data): data = input_data.splitlines() t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, data[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, data[index].split()))) index += 1 test_cases.append((n, m, grid)) return t, test_cases"},{"question":"Given a list of strings, return a new list with only those strings that have strictly increasing ASCII values when read from left to right. If none of the strings meet the criteria, return an empty list. For example, \\"abc\\" (ASCII values: 97, 98, 99) has strictly increasing ASCII values, while \\"abac\\" (ASCII values: 97, 98, 97, 99) does not. ```python def strictly_increasing_strings(strings: list) -> list: def is_strictly_increasing(s): return all(ord(s[i]) < ord(s[i+1]) for i in range(len(s) - 1)) return [s for s in strings if is_strictly_increasing(s)] strictly_increasing_strings([\\"abc\\", \\"def\\", \\"axa\\", \\"ghi\\"]) # => [\\"abc\\", \\"def\\", \\"ghi\\"] strictly_increasing_strings([\\"hello\\", \\"world\\", \\"a\\", \\"xyz\\"]) # => [\\"a\\", \\"xyz\\"] ```","solution":"def strictly_increasing_strings(strings: list) -> list: def is_strictly_increasing(s): return all(ord(s[i]) < ord(s[i+1]) for i in range(len(s) - 1)) return [s for s in strings if is_strictly_increasing(s)]"},{"question":"Given an array of non-negative integers representing the amount of rainwater stored at various points between heights, calculate how much water it can trap after raining. Note: - Each input array element represents the height of the bar at that index. - Assume the width of each bar is 1. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The array represents a histogram with a total of 6 units of water trapped. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The array represents a histogram with a total of 9 units of water trapped.","solution":"def trap(height): Calculate how much water can be trapped after raining. Parameters: height (list): List of non-negative integers representing the height of bars. Returns: int: Total units of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Given a 2D grid of size m x n filled with non-negative integers, a robot initially positioned at the top-left corner (0, 0) needs to move to the bottom-right corner (m-1, n-1). The robot can only move either down or right at any point in time. You are tasked with finding the total number of unique paths that the robot can take to reach its destination, while avoiding any squares that are obstacles. An obstacle is represented by a 1 in the grid, and a free space is represented by a 0. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. The next m lines contain n integers each, where each integer is either 0 or 1, representing the grid. -----Output----- Output a single integer — the number of unique paths the robot can take to reach the bottom-right corner. If there is no valid path, output 0. -----Examples----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 3 0 1 0 0 0 0 Output: 1 Input: 3 2 0 1 0 1 0 0 Output: 1","solution":"def unique_paths_with_obstacles(grid): Calculate the number of unique paths in a grid with obstacles. :param grid: List[List[int]] - 2D grid where 0 is free space and 1 is an obstacle :return: int - Number of unique paths from top-left to bottom-right. m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"# Task You are given a string `s` consisting of lowercase English letters where the same letter does not appear more than twice consecutively. Your task is to determine the minimum number of operations required to make the string no longer have any character that appears more than twice consecutively. In each operation, you can choose any letter in the string and replace it with any other lowercase English letter. # Example For `s = \\"aaabbc\\"`, the output should be `1`. You can replace \'a\' with any other character: - Changing \\"aaabbc\\" to \\"aabbbc\\" makes \'a\' appear twice consecutively. For `s = \\"aaaaaa\\"`, the output should be `4`. You need to break the consecutive \'a\'s at least 4 times: - Changing \\"aaaaaa\\" to \\"aabaaa\\" (2 operations) to get \\"aabbba\\". # Input/Output - `[input]` string s A string that is guaranteed to not have any character appear more than twice consecutively. Constraints: `2 ≤ s.length ≤ 100` - `[output]` an integer value The minimum number of operations required to ensure no character appears more than twice consecutively.","solution":"def min_operations_to_fix_string(s): Determine the minimum number of operations required to make the string such that no character appears more than twice consecutively. count = 0 i = 0 while i < len(s): repeat_length = 1 # Count the length of the current run of the same character while i + repeat_length < len(s) and s[i] == s[i + repeat_length]: repeat_length += 1 # For every third or more consecutive characters, one operation is needed. if repeat_length > 2: count += (repeat_length - 2) # Move to the next group of characters. i += repeat_length return count"},{"question":"You are given a chessboard with dimensions `n x n`. Each cell on the chessboard can either be empty or occupied by a piece. Each piece can either be a pawn, knight, bishop, rook, queen, or king. The pieces can be of either white or black color. Your task is to write a function `valid_chessboard(arr)` that checks if the given chessboard configuration is valid according to standard chess rules. The function should return `True` if the chessboard is valid, and `False` otherwise. The `arr` input will be a 2D list of strings where: - `\\".\\"` represents an empty cell. - `\\"P\\"`, `\\"N\\"`, `\\"B\\"`, `\\"R\\"`, `\\"Q\\"`, `\\"K\\"` represent white pawns, knights, bishops, rooks, queens, and kings respectively. - `\\"p\\"`, `\\"n\\"`, `\\"b\\"`, `\\"r\\"`, `\\"q\\"`, `\\"k\\"` represent black pawns, knights, bishops, rooks, queens, and kings respectively. # Rules for a valid configuration: 1. There must be exactly one white king (`\\"K\\"`) and exactly one black king (`\\"k\\"`). 2. Each side can have a maximum of 8 pawns (`\\"P\\"` or `\\"p\\"`). 3. No pawns should be on the first (`arr[0]`) or last (`arr[n-1]`) row. 4. The chessboard must have pieces only from the defined set above. # Example: ``` arr = [ [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\"k\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\"P\\", \\".\\", \\".\\", \\".\\"], [\\"N\\", \\".\\", \\".\\", \\"r\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\".\\", \\"K\\"] ] valid_chessboard(arr) should return True ``` # Notes: - The input list `arr` will always represent a square chessboard of size `n x n` where `1 <= n <= 8`. - Every cell in the chessboard is either empty or contains one valid piece. - Ensure to check the number and placement of pawns according to the rules.","solution":"def valid_chessboard(arr): Checks if the given chessboard configuration is valid according to standard chess rules. n = len(arr) # Initialize counters for pieces counts = { \\"K\\": 0, \\"k\\": 0, \\"P\\": 0, \\"p\\": 0, \\"N\\": 0, \\"n\\": 0, \\"B\\": 0, \\"b\\": 0, \\"R\\": 0, \\"r\\": 0, \\"Q\\": 0, \\"q\\": 0, \\".\\": 0 # We also keep track of empty cells for convenience } # Fill the counters for all pieces for row in arr: for cell in row: if cell not in counts: return False counts[cell] += 1 # There must be exactly one white king and exactly one black king if counts[\\"K\\"] != 1 or counts[\\"k\\"] != 1: return False # Each side can have a maximum of 8 pawns if counts[\\"P\\"] > 8 or counts[\\"p\\"] > 8: return False # No pawns should be on the first or last row for i in range(n): if arr[0][i] == \\"P\\" or arr[0][i] == \\"p\\" or arr[n-1][i] == \\"P\\" or arr[n-1][i] == \\"p\\": return False return True"},{"question":"Task Implement an operation-based calculator function, `operation_calculator`, that performs a series of operations specified in a string to compute the result. The function, `operation_calculator`, takes a single parameter, `operations`, which is a string comprised of digits (0-9), operations such as `+`, `-`, `*`, `/`, and parentheses `()`. The operations in the string should be applied in the order they appear, respecting the order of operations for arithmetic. You need to ensure that: - The given arithmetic expression is valid. - Division by zero should be handled gracefully, returning the string \\"Invalid operation\\". - Parentheses properly indicate precedence of operations. The `operations` string will contain only valid characters and be in correct format, so you don\'t have to handle malformed input. Your function should return the resulting value as an integer if the arithmetic expression is valid; if there is a division by zero at any point in the calculation, the function should return \\"Invalid operation\\". Examples - `operation_calculator(\\"4+2*3\\")` should return `10` - `operation_calculator(\\"(3+2)*(2+2)\\")` should return `20` - `operation_calculator(\\"8/4+5\\")` should return `7` - `operation_calculator(\\"(1+2)*(3/(2-2))\\")` should return `\\"Invalid operation\\"`","solution":"def operation_calculator(operations): Evaluates the arithmetic expression provided in operations string. :param operations: a string representing a valid arithmetic expression :return: the result of the expression as an integer, or \\"Invalid operation\\" for division by zero try: # Evaluate the expression using eval. We assume the input is valid and safe as described. result = eval(operations) # Check if the result is a finite number. if isinstance(result, (int, float)): return int(result) except ZeroDivisionError: return \\"Invalid operation\\""},{"question":"Tyler is developing a feature for his new software application that organizes pieces of text into a hierarchy. Each piece of text is represented as a string and has an importance level associated with it, represented as an integer. The hierarchy should be constructed such that each piece of text has exactly one \\"parent\\" piece of text, except for the root piece of text, which has no parent. Each piece of text\'s importance must be greater than the importance of its parent. Additionally, Tyler wants the hierarchy to have the longest possible chain from the root to a leaf (a node with no children). Given a list of n pieces of text, each with a unique importance level, help Tyler create the hierarchy that maximizes the length of the chain from the root to the deepest leaf. -----Input----- - The first line contains an integer n (2 ≤ n ≤ 1000) — the number of pieces of text. - The next n lines each contain a string followed by an integer separated by a space, representing a piece of text and its importance level. -----Output----- - In the first line, print the length of the longest chain. - In each of the next n-1 lines, print two integers: the indices of the pieces of text in the input list that are connected by a parent-child relationship. The root piece of text should not be listed as a child. If there are multiple valid hierarchies, print any of them. -----Examples----- Input 4 a 5 b 3 c 8 d 7 Output 3 2 1 4 2 3 4 Input 5 apple 1 banana 2 cherry 3 date 4 elderberry 5 Output 5 1 2 2 3 3 4 4 5","solution":"def create_hierarchy(n, texts_importances): Creates a hierarchy of texts based on their importance levels, ensuring each text\'s importance is greater than its parent\'s. The hierarchy aims to maximize the length of the chain from the root to the deepest leaf. Parameters: n (int): Number of pieces of text. texts_importances (list of tuple): List of tuples where each tuple consists of a string and an integer Returns: tuple: Number of levels in the hierarchy and the connections between the texts. # Sort texts based on importance sorted_texts = sorted(texts_importances, key=lambda x: x[1]) chain_length = n connections = [(i + 1, i + 2) for i in range(n - 1)] return chain_length, connections # Example usage n = 4 texts_importances = [(\\"a\\", 5), (\\"b\\", 3), (\\"c\\", 8), (\\"d\\", 7)] result = create_hierarchy(n, texts_importances) print(result[0]) for connection in result[1]: print(connection[0], connection[1])"},{"question":"Write a function that takes a string of characters and finds the length of the longest substring without repeating characters. -----Input----- - The input consists of a single string s, where 1 leq |s| leq 1000. The string contains only printable ASCII characters. -----Output----- - Print a single integer — the length of the longest substring without repeating characters. -----Constraints----- - The input string will be non-empty and contain only printable ASCII characters. -----Sample Input 1:----- abrkaabcdefghijjxxx -----Sample Input 2:----- bbbbb -----Sample Input 3:----- pwwkew -----Sample Output 1:----- 10 -----Sample Output 2:----- 1 -----Sample Output 3:----- 3","solution":"def longest_substring_without_repeating(s): Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Given a string s consisting of lowercase English letters and integers, rewrite the string such that each integer, n, is replaced by the sequence of letters that precedes it repeated n times. If there are multiple integers in a row, apply each of them independently on the preceding sequence. For example: Input: s = \\"a2b1\\" Output: \\"aab\\" Input: s = \\"x3y2z1\\" Output: \\"xxxyyz\\" Input: s = \\"m5n3p2\\" Output: \\"mmmmmnnnpp\\" Input: s = \\"a2b2c3\\" Output: \\"aabbccc\\" Constraints: - The string length should not exceed 100 characters. - There will be at least one letter preceding each integer.","solution":"def expand_string(s): Expands the string such that each integer, n, follows by the sequence of letters and repeats them n times. For example: Input: \\"a2b1\\" Output: \\"aab\\" result = [] i = 0 while i < len(s): if s[i].isalpha(): seq_start = i while i + 1 < len(s) and s[i + 1].isdigit(): i += 1 seq_end = i number = int(s[seq_start + 1:seq_end + 1]) if seq_end > seq_start else 1 result.append(s[seq_start] * number) i += 1 return \'\'.join(result)"},{"question":"Map Zipping Given two lists of equal length, write a function zip_lists that takes the lists as input and returns a dictionary where the elements of the first list are the keys and the elements of the second list are the corresponding values. You can assume that the lists contain only hashable items. # For example: ```python list1 = [\'a\', \'b\', \'c\'] list2 = [1, 2, 3] result = zip_lists(list1, list2) print(result) ``` Should output: ```python {\'a\': 1, \'b\': 2, \'c\': 3} ``` # Constraints: - both input lists will have the same non-zero length - the elements in the lists will be of compatible types to form key-value pairs in a dictionary","solution":"def zip_lists(list1, list2): Returns a dictionary where the elements of the first list are the keys and the elements of the second list are the corresponding values. return dict(zip(list1, list2))"},{"question":"# Story In software development, it is common to encounter lists of integers where we want to find a specific subsequence that forms a meaningful structure. In this problem, you are required to find the longest increasing subsequence (LIS) within a given list of integers. The LIS is a subsequence of a list in which the elements are in sorted order, strictly increasing, and they are ideally not required to be contiguous. # Info The problem is to write a function that takes a list of integers as input and returns the length of the longest increasing subsequence. A subsequence is derived from a sequence by deleting some or no elements without changing the order of the remaining elements. # Examples ```python [10, 9, 2, 5, 3, 7, 101, 18] ``` The result will be: ```python 4 # The longest increasing subsequence is [2, 3, 7, 101] ``` ```python [0, 1, 0, 3, 2, 3] ``` The result will be: ```python 4 # The longest increasing subsequence is [0, 1, 2, 3] ``` # Input: - `sequence` A list of integers. # Output: - Integer representing the length of the longest increasing subsequence. # Precondition: - The length of the sequence does not exceed 10^3 (1000). - The values in the sequence are all integers within the range [-10^6, 10^6]. # Function Signature ```python def longest_increasing_subsequence(sequence: List[int]) -> int: # Your code here pass ```","solution":"def longest_increasing_subsequence(sequence): if not sequence: return 0 dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"# Code Smells In software development, \\"code smells\\" are certain structures in the code that indicate a deeper problem. They are often not bugs but rather weaknesses in design that may slow down development or increase the chance of bugs or failures in the future. # Common Code Smells Here are some examples of common code smells: 1. **Long Method**: A method that is too long to understand easily. 2. **Large Class**: A class that does too much. 3. **Feature Envy**: A method that seems more interested in data from another class than in its own data. 4. **Duplicated Code**: Repeating code in multiple places. 5. **Long Parameter List**: A method that takes too many parameters. 6. **Primitive Obsession**: Using primitive data types to represent domain ideas. # Kata Task You are given a class `Employee` with the following attributes and method: ```python class Employee: def __init__(self, name, age, salary, department): self.name = name self.age = age self.salary = salary self.department = department def display(self): print(\\"Name:\\", self.name) print(\\"Age:\\", self.age) print(\\"Salary:\\", self.salary) print(\\"Department:\\", self.department) ``` Identify at least three code smells in the given `Employee` class and provide refactored code to improve its design. Note that a proper refactoring might involve creating additional classes or methods to encapsulate data and behavior more effectively. **Answers should include:** 1. An explanation of the identified code smells. 2. The refactored version of the `Employee` class. --- *Good Luck. DM.* --- See also * [Code Smells](https://martinfowler.com/bliki/CodeSmell.html) * [Refactoring](https://refactoring.guru/refactoring)","solution":"# Explanation of Code Smells in the given Employee class: # 1. Long Method: The `display` method performs multiple tasks - displaying name, age, salary, and department. # 2. Large Class: The Employee class has multiple responsibilities — holding employee details and displaying them. # 3. Primitive Obsession: The `department` attribute is a primitive string instead of an entity that could encapsulate more related data and behavior. # Refactored Version of Employee Class class Department: def __init__(self, name): self.name = name def __str__(self): return self.name class Employee: def __init__(self, name, age, salary, department): self.name = name self.age = age self.salary = salary self.department = department def display(self): info = [ f\\"Name: {self.name}\\", f\\"Age: {self.age}\\", f\\"Salary: {self.salary}\\", f\\"Department: {self.department}\\" ] return \\"n\\".join(info)"},{"question":"Task Your task is to implement a class `ElevatorSystem` that simulates the operation of a bank of elevators. The system consists of a configurable number of elevators and provides basic functionalities, such as moving the elevators to different floors, picking up passengers, and dropping them off. # ElevatorSystem Class The `ElevatorSystem` class should have the following methods: 1. `__init__(self, num_elevators: int, num_floors: int)`: Initializes the elevator system with the specified number of elevators and floors. Initially, all elevators should be at the ground floor (floor 0) and empty. 2. `pickup(self, floor: int, direction: str)`: Requests an elevator to pick up passengers at the specified floor, intending to go in the specified direction (\'up\' or \'down\'). 3. `dropoff(self, elevator_id: int, floor: int)`: Requests a specific elevator to drop off passengers at the specified floor. 4. `step(self)`: Advances the system by one time unit, during which each elevator should move one floor closer to its next destination (if it has one). 5. `status(self)`: Returns a list of tuples representing the status of each elevator. Each tuple should contain: - The current floor of the elevator - The direction of movement (\'up\', \'down\', or \'idle\') - A list of floors to which the elevator is scheduled to stop # Example Usage ```python elevator_system = ElevatorSystem(num_elevators=3, num_floors=10) elevator_system.pickup(3, \'up\') elevator_system.step() print(elevator_system.status()) # [(0, \'up\', [3]), (0, \'idle\', []), (0, \'idle\', [])] elevator_system.step() print(elevator_system.status()) # [(1, \'up\', [3]), (0, \'idle\', []), (0, \'idle\', [])] elevator_system.pickup(5, \'down\') elevator_system.step() print(elevator_system.status()) # [(2, \'up\', [3]), (0, \'idle\', []), (0, \'idle\', [])] ``` # Constraints - You may assume that the system will not receive more requests than it can handle at any given time. - Implementations should prioritize efficiency, especially in terms of how elevators are assigned to pickup requests. - The method `step()` should make sure that each elevator moves one floor per time unit even if there are multiple requests in the queue for the same elevator. In summary, you need to implement the `ElevatorSystem` class with the described methods, ensuring that the system operates logically and efficiently.","solution":"class ElevatorSystem: def __init__(self, num_elevators: int, num_floors: int): self.num_floors = num_floors self.elevators = [{\'current_floor\': 0, \'direction\': \'idle\', \'stops\': []} for _ in range(num_elevators)] def pickup(self, floor: int, direction: str): # Find the idle elevator or the nearest moving in the correct direction best_elevator = None smallest_distance = float(\'inf\') for elevator in self.elevators: current_floor = elevator[\'current_floor\'] if elevator[\'direction\'] == \'idle\': distance = abs(current_floor - floor) if distance < smallest_distance: smallest_distance = distance best_elevator = elevator elif ((direction == \'up\' and elevator[\'direction\'] == \'up\' and current_floor <= floor) or (direction == \'down\' and elevator[\'direction\'] == \'down\' and current_floor >= floor)): distance = abs(current_floor - floor) if distance < smallest_distance: smallest_distance = distance best_elevator = elevator if best_elevator: best_elevator[\'stops\'].append(floor) if best_elevator[\'direction\'] == \'idle\': best_elevator[\'direction\'] = direction best_elevator[\'stops\'].sort(reverse=(direction == \'down\')) def dropoff(self, elevator_id: int, floor: int): if 0 <= elevator_id < len(self.elevators): self.elevators[elevator_id][\'stops\'].append(floor) if self.elevators[elevator_id][\'direction\'] == \'idle\': self.elevators[elevator_id][\'direction\'] = (\'up\' if self.elevators[elevator_id][\'current_floor\'] < floor else \'down\') self.elevators[elevator_id][\'stops\'].sort(reverse=(self.elevators[elevator_id][\'direction\'] == \'down\')) def step(self): for elevator in self.elevators: if elevator[\'direction\'] != \'idle\': if elevator[\'stops\']: next_stop = elevator[\'stops\'][0] if elevator[\'current_floor\'] < next_stop: elevator[\'current_floor\'] += 1 elevator[\'direction\'] = \'up\' elif elevator[\'current_floor\'] > next_stop: elevator[\'current_floor\'] -= 1 elevator[\'direction\'] = \'down\' if elevator[\'current_floor\'] == next_stop: elevator[\'stops\'].pop(0) if not elevator[\'stops\']: elevator[\'direction\'] = \'idle\' else: elevator[\'direction\'] = \'idle\' def status(self): return [(elevator[\'current_floor\'], elevator[\'direction\'], elevator[\'stops\']) for elevator in self.elevators]"},{"question":"The function **is_balanced** in mathematics, checks if all parentheses in an expression are correctly balanced. An expression is considered balanced if: 1. Each opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. Each closing parenthesis \')\' has a corresponding opening parenthesis \'(\'. The following are examples where parentheses are balanced: ```python \\"(a + b)\\" \\"(a + (b + c))\\" \\"(a + (b + (c + d)))\\" ``` On the other hand, the following are examples where parentheses are not balanced: ```python \\"(a + b\\" \\"a + b)\\" \\"(a + (b + c)\\" \\"a + (b + c))\\" ``` We need a function, **is_balanced()**, that takes a string representing a mathematical expression and returns a boolean value indicating if the parentheses in the expression are balanced. Let\'s see some cases: ```python is_balanced(\\"(a + b)\\") => True is_balanced(\\"(a + (b + c))\\") => True is_balanced(\\"((a + b) + c)\\") => True is_balanced(\\"(a + b\\") => False is_balanced(\\"a + b)\\") => False is_balanced(\\"(a + (b + c)\\") => False is_balanced(\\"a + (b + c))\\") => False ``` The function should ignore all characters in the string except for the parentheses. Happy coding!","solution":"def is_balanced(expression): Checks if all parentheses in the expression are balanced. Parameters: expression (str): The input string representing a mathematical expression. Returns: bool: True if the parentheses are balanced, False otherwise. stack = [] for char in expression: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Description You are a *Store Manager* and you need to manage the inventory effectively. Your task is to create a system that keeps track of products and their quantities in the store. Specifically, you need to perform a series of operations such as adding new products, updating quantities, and deleting products. For simplicity, every product has a unique name. Here are the types of operations you need to handle: 1. Add a new product with a specified quantity. 2. Increase the quantity of an existing product. 3. Decrease the quantity of an existing product. 4. Remove a product from the inventory if its quantity drops to zero. You are provided with a list of operations to perform, where each operation is represented as a tuple. Your task is to process each operation in the order given and return the final state of the inventory. # Valid Operations - `(\\"ADD\\", product, quantity)` - Adds a new product with the specified quantity. If the product already exists, increase its quantity by the specified amount. - `(\\"INCREASE\\", product, quantity)` - Increases the quantity of the specified product by the given amount. - `(\\"DECREASE\\", product, quantity)` - Decreases the quantity of the specified product by the given amount. If the resulting quantity is zero or less, remove the product from the inventory. - `(\\"REMOVE\\", product)` - Explicitly removes the specified product from the inventory. # Input - A list of operations, `operations`. Each operation is a tuple as described above. # Output - A dictionary representing the final state of the inventory, where the keys are product names, and the values are their quantities. # Example ```python operations = [ (\\"ADD\\", \\"apple\\", 10), (\\"ADD\\", \\"banana\\", 5), (\\"INCREASE\\", \\"banana\\", 3), (\\"DECREASE\\", \\"apple\\", 8), (\\"REMOVE\\", \\"banana\\"), (\\"ADD\\", \\"orange\\", 7) ] # Resulting inventory: {\\"apple\\": 2, \\"orange\\": 7} def manage_inventory(operations): inventory = {} for operation in operations: action = operation[0] product = operation[1] if action == \\"ADD\\": quantity = operation[2] if product in inventory: inventory[product] += quantity else: inventory[product] = quantity elif action == \\"INCREASE\\": quantity = operation[2] if product in inventory: inventory[product] += quantity elif action == \\"DECREASE\\": quantity = operation[2] if product in inventory: inventory[product] -= quantity if inventory[product] <= 0: del inventory[product] elif action == \\"REMOVE\\": if product in inventory: del inventory[product] return inventory ```","solution":"def manage_inventory(operations): inventory = {} for operation in operations: action = operation[0] product = operation[1] if action == \\"ADD\\": quantity = operation[2] if product in inventory: inventory[product] += quantity else: inventory[product] = quantity elif action == \\"INCREASE\\": quantity = operation[2] if product in inventory: inventory[product] += quantity elif action == \\"DECREASE\\": quantity = operation[2] if product in inventory: inventory[product] -= quantity if inventory[product] <= 0: del inventory[product] elif action == \\"REMOVE\\": if product in inventory: del inventory[product] return inventory"},{"question":"Your task is to write a function that takes a list of integers and returns a list of the same integers but without any consecutive duplicates. The function should preserve the original order of elements. Example ----- `input: [1, 2, 2, 3, 3, 3, 4, 4, 5]` `output: [1, 2, 3, 4, 5]` Another example ----- `input: [7, 7, 6, 6, 6, 5, 5, 5, 5, 4, 3]` `output: [7, 6, 5, 4, 3]`","solution":"def remove_consecutive_duplicates(lst): Returns a list of integers without any consecutive duplicates. if not lst: return [] result = [lst[0]] for num in lst[1:]: if num != result[-1]: result.append(num) return result"},{"question":"Write a function that takes two strings and returns true if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another, typically using all original letters exactly once. Examples: ``` areAnagrams(\\"listen\\", \\"silent\\") => returns true areAnagrams(\\"triangle\\", \\"integral\\") => returns true areAnagrams(\\"apple\\", \\"pale\\") => returns false ```","solution":"def areAnagrams(str1, str2): Returns true if str1 and str2 are anagrams of each other. # Clean strings by converting to lower case and removing spaces str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # Anagrams should have the same length if len(str1) != len(str2): return False # Sort and compare return sorted(str1) == sorted(str2)"},{"question":"Write a function called \\"findFirstUniqueChar\\". Given a string, \\"findFirstUniqueChar\\" returns the first character that does not repeat. If every character repeats, return null. Example: var output = findFirstUniqueChar(\'swiss\'); console.log(output); // --> \'w\' var output = findFirstUniqueChar(\'aabb\'); console.log(output); // --> null","solution":"def findFirstUniqueChar(s): Returns the first character in the string s that does not repeat. If every character repeats, returns None. :param s: string :return: character or None # Create a hash map to store frequency of each character char_count = {} # Fill the hash map with the frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find and return the first unique character for char in s: if char_count[char] == 1: return char return None"},{"question":"You are given a collection of words. You need to determine the number of pairs of these words that form palindromic concatenations. A palindromic concatenation is defined as a pair of words (a, b) such that the concatenation of a and b (i.e., a + b) is a palindrome. Each word can only form pairs with other words and cannot be used more than once in a pair (i.e., if a word is used in one pair, it cannot be reused in another pair). Your task is to calculate the maximum number of unique pairs of words that can be formed which result in a palindromic concatenation in each test case. -----Input----- The first line contains the integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains the integer n (1 le n le 10^5) — the number of words. The next n lines of each test case contain one word each. Each word consists of lowercase English letters and has a length between 1 and 100 inclusive. The total number of words over all test cases does not exceed 10^5. -----Output----- For each test case, print one integer — the maximum number of unique pairs of words forming palindromic concatenations. -----Example----- Input 3 5 ab ba abc cba abc 4 aa bb cc dd 3 rotor motor madam Output 2 0 0 Explanation: In the first case, there are two palindromic concatenations: \\"ab\\" + \\"ba\\" and \\"abc\\" + \\"cba\\". In the second case, no palindromic pairs can be formed. In the third case, none of the words can form palindromic concatenations with each other.","solution":"def count_palindromic_pairs(words): Given a list of words, count the number of unique pairs that form palindromic concatenations. Args: words (list): List of words. Returns: int: Maximum number of unique pairs of words forming palindromic concatenations. from collections import Counter word_count = Counter(words) used = Counter() pairs = 0 for word in words: if used[word] < word_count[word]: rev_word = word[::-1] if rev_word != word and used[rev_word] < word_count[rev_word]: pairs += 1 used[word] += 1 used[rev_word] += 1 return pairs def maximum_palindromic_pairs(test_cases): For each test case, calculate the maximum number of unique pairs of words that form palindromic concatenations. Args: test_cases (list): List of test cases, each a tuple of (n, words), where n is the number of words and words is a list of words. Returns: list: List of integers where each integer is the maximum number of unique pairs for the corresponding test case. results = [] for n, words in test_cases: results.append(count_palindromic_pairs(words)) return results # Reading inputs and defining the function to handle multiple test cases def process_input(input_lines): lines = iter(input_lines) t = int(next(lines)) test_cases = [] for _ in range(t): n = int(next(lines)) words = [next(lines).strip() for _ in range(n)] test_cases.append((n, words)) return test_cases def process_output(results): return \\"n\\".join(map(str, results)) def main(input_lines): test_cases = process_input(input_lines) results = maximum_palindromic_pairs(test_cases) return process_output(results)"},{"question":"Given an integer array `nums`, return the maximum difference between any two elements such that the larger element comes after the smaller element in the array. If no such elements exist, return -1. Example 1: Input: nums = [2, 3, 10, 6, 4, 8, 1] Output: 8 Explanation: The maximum difference is between 3 and 10, which is 10 - 2 = 8. Example 2: Input: nums = [7, 1, 5, 4] Output: 4 Explanation: The maximum difference is between 1 and 5, which is 5 - 1 = 4. Example 3: Input: nums = [9, 4, 3, 2] Output: -1 Explanation: There are no two elements which satisfy the condition that the larger element comes after the smaller element in the array. Example 4: Input: nums = [1, 5, 2, 10] Output: 9 Explanation: The maximum difference is between 1 and 10, which is 10 - 1 = 9. Constraints: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 10^4","solution":"def max_difference(nums): Returns the maximum difference between any two elements such that the larger element comes after the smaller element in the array. If no such elements exist, returns -1. if len(nums) < 2: return -1 min_element = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_element: max_diff = max(max_diff, nums[i] - min_element) min_element = min(min_element, nums[i]) return max_diff"},{"question":"Amit is an avid reader who loves to encode secret messages in his favorite books. He uses a numeric keypad encoding technique, where each letter is replaced by a corresponding number similar to those found on old mobile phone keypads. The mapping used by Amit is shown below: ``` 2 - ABC 3 - DEF 4 - GHI 5 - JKL 6 - MNO 7 - PQRS 8 - TUV 9 - WXYZ ``` For a given word, encode it using the provided keypad mapping technique, and output the encoded sequence of numbers. Amit wants you to help him with automating the process. ------Input:------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single line consisting of a string S, with no whitespace and all uppercase English alphabets. ------Output:------ For each test case, print a single line containing the encoded sequence of numbers corresponding to the input string. ------Constraints------ - 1 ≤ T ≤ 100 - 1 ≤ Length of S ≤ 100 - String S consists of only uppercase English alphabets. ------Sample Input:------ 3 HELLO WORLD CODING ------Sample Output:------ 43556 96753 263464","solution":"def encode_message(s): keypad_mapping = { \'A\': \'2\', \'B\': \'2\', \'C\': \'2\', \'D\': \'3\', \'E\': \'3\', \'F\': \'3\', \'G\': \'4\', \'H\': \'4\', \'I\': \'4\', \'J\': \'5\', \'K\': \'5\', \'L\': \'5\', \'M\': \'6\', \'N\': \'6\', \'O\': \'6\', \'P\': \'7\', \'Q\': \'7\', \'R\': \'7\', \'S\': \'7\', \'T\': \'8\', \'U\': \'8\', \'V\': \'8\', \'W\': \'9\', \'X\': \'9\', \'Y\': \'9\', \'Z\': \'9\' } encoded_message = \'\'.join(keypad_mapping[char] for char in s) return encoded_message"},{"question":"Function Memoization is a technique used to optimize functions by storing the results of expensive function calls and returning the cached result when the same inputs occur again. This principle can significantly improve performance, particularly for recursive functions with overlapping subproblems, like the computation of Fibonacci numbers. Memoization > Memoization is a technique to store function results to avoid redundant calculations. It leverages a cache to save computed values. Given a function `fib` to compute Fibonacci numbers: ```python def fib(n): if n <= 0: return 0 elif n == 1: return 1 else: return fib(n - 1) + fib(n - 2) ``` We can use a memoization technique to optimize this Fibonacci calculation. A memoized version of `fib` would store previously computed values in a cache to avoid redundant computations. # Example A simple way to implement memoization for the `fib` function is as follows: ```python def memoize(f): cache = {} def memoized_func(x): if x not in cache: cache[x] = f(x) return cache[x] return memoized_func memoized_fib = memoize(fib) print(memoized_fib(50)) # The computed result for fib(50) ``` Task Your task is to implement a memoization decorator called `memoize_decorator` that can be applied to any function to enable memoization. For example: ```python @memoize_decorator def fib(n): if n <= 0: return 0 elif n == 1: return 1 else: return fib(n - 1) + fib(n - 2) print(fib(50)) # The computed result for fib(50) ``` The memoized `fib` function should store the results of previous computations and return the cached result for the same input values, demonstrating an optimized approach using memoization. # Requirements 1. Implement the `memoize_decorator` function. 2. Use the decorator on a `fib` function and test it to ensure it calculates Fibonacci numbers with optimized performance. 3. Ensure the solution handles large inputs without significant delay, thanks to memoization. # Example Usage ```python @memoize_decorator def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1) print(factorial(10)) # Should output 3628800 with optimized performance ``` The `memoize_decorator` should be flexible enough to work with any function, similar to the above example. Ensure the implementation is efficient, concise, and demonstrates a clear understanding of the memoization technique.","solution":"def memoize_decorator(func): Memoization decorator to cache function results. cache = {} def memoized_func(x): if x not in cache: cache[x] = func(x) return cache[x] return memoized_func @memoize_decorator def fib(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fib(n - 1) + fib(n - 2)"},{"question":"You are given an array of integers, and you need to determine the maximum possible product of any non-empty subset of its elements such that the product is even. If no such subset exists, return -1. -----Input:----- - The first line contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N denoting the size of the array. - The next line contains N space-separated integers a1, a2, ..., aN representing the elements of the array. -----Output:----- For each test case, output the maximum possible product of any non-empty subset of the array that is even. If no such subset exists, print -1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ ai ≤ 10^9 -----Sample Input:----- 2 3 1 3 5 4 2 3 4 5 -----Sample Output:----- -1 40 -----EXPLANATION:----- In the first test case, there are no even numbers, hence no even product is possible, so the output is -1. In the second test case, the subset {2, 4, 5} gives 2 * 4 * 5 = 40, which is the maximum even product possible.","solution":"def max_even_product(test_cases): results = [] for arr in test_cases: even_numbers = [num for num in arr if num % 2 == 0] if not even_numbers: results.append(-1) else: product = 1 for num in arr: product *= num results.append(product) return results"},{"question":"Write a function that takes a list of integers as input and returns a new list with duplicates removed and the original order preserved. Examples: input: output: [1, 2, 3, 2, 4, 1] -> [1, 2, 3, 4] [7, 9, 7, 1, 9, 1] -> [7, 9, 1] [5, 5, 5, 5, 5] -> [5] [1, 2, 3, 4, 5] -> [1, 2, 3, 4, 5] [] -> [] You can assume that all inputs are valid lists of integers.","solution":"def remove_duplicates(input_list): Returns a new list with duplicates removed and the original order preserved. Parameters: - input_list: list of integers Returns: - list of integers with duplicates removed seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Write a function named `findSingle` that takes an array of integers where every element appears exactly three times, except for one element which appears exactly once. Implement an algorithm to find and return the single element that appears only once. Your function should operate with a linear runtime complexity and without using extra space. Example: ``` Input: [2, 2, 3, 2] Output: 3 Input: [0, 1, 0, 1, 0, 1, 99] Output: 99 ``` Constraints: - The length of the input array will be in the range [1, 10^4]. - The array contains only integers, and each element except one appears exactly three times.","solution":"def findSingle(nums): Finds the single element in the array where every element appears exactly three times except for one, which appears exactly once. :param nums: List of integers :return: The single integer that appears exactly once one = two = 0 for num in nums: # add num to `one` if num has not been added to `two` one = (one ^ num) & ~two # add num to `two` if num has not been added to `one` two = (two ^ num) & ~one return one"},{"question":"Given a string s and an array of strings dict, return the longest string in dict that can be formed by deleting some characters of the given string s. If there are more than one possible results, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string. Example 1: Input: s = \\"abpcplea\\", dict = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] Output: \\"apple\\" Example 2: Input: s = \\"abpcplea\\", dict = [\\"a\\",\\"b\\",\\"c\\"] Output: \\"a\\" Constraints: * 1 <= s.length <= 1000 * 1 <= len(dict[i]) <= 1000 * dict[i] may not be empty. * s and dict[i] consist of lower-case English letters.","solution":"def findLongestWord(s, dictionary): def is_subsequence(x): it = iter(s) return all(char in it for char in x) dictionary.sort(key=lambda x: (-len(x), x)) for word in dictionary: if is_subsequence(word): return word return \\"\\""},{"question":"Word Ladder Transformation Path A Word Ladder is a sequence of words all of the same length where each word in the sequence differs from the previous word by exactly one letter. Given a dictionary of valid words and two words - a start word and an end word, find the shortest transformation sequence from start to end, such that you can only change one letter at a time and each transformed word must exist in the dictionary. You are required to write a function which returns the shortest transformation path if there is one, otherwise return an empty list. Input: - `startWord` - the initial word (string) - `endWord` - the final word (string) - `wordList` - a list of dictionary words (list of strings) Output: - a list representing the shortest transformation path from `startWord` to `endWord` - if no such transformation is possible, return an empty list Example: - `wordLadder(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"])` - should return `[\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"]` Notes: - the length of `startWord` and `endWord` is equal - all words contain only lowercase alphabetic characters - if multiple paths of the same length exist, return any one of them - if `startWord` is the same as `endWord`, return a list containing just that word Example function signature: ```python def wordLadder(startWord: str, endWord: str, wordList: List[str]) -> List[str]: # Your code here ```","solution":"from collections import deque from typing import List def wordLadder(startWord: str, endWord: str, wordList: List[str]) -> List[str]: if endWord not in wordList: return [] wordSet = set(wordList) queue = deque([[startWord]]) visited = set([startWord]) while queue: path = queue.popleft() current_word = path[-1] if current_word == endWord: return path for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordSet and next_word not in visited: visited.add(next_word) new_path = list(path) new_path.append(next_word) queue.append(new_path) return []"},{"question":"Task: Write a function that takes a sentence as input and returns the sentence in reverse word order, while maintaining the words themselves in their original order. Rules: 1. You should split the sentence into words based on spaces. 2. Reverse the order of the words. 3. Join the words back into a single string separated by spaces. Example: Input: `The quick brown fox jumps over the lazy dog` Output: `dog lazy the over jumps fox brown quick The`","solution":"def reverse_sentence(sentence): Returns the sentence with words in reversed order. :param sentence: str, the input sentence :return: str, the sentence with words reversed words = sentence.split() reversed_words = words[::-1] reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"Write a function that takes an integer `n` as input and returns `True` if `n` is a palindrome number, otherwise return `False`. A palindrome number is a number that remains the same when its digits are reversed. Example: ```python isPalindrome(121) // should return True isPalindrome(-121) // should return False isPalindrome(10) // should return False ```","solution":"def isPalindrome(n): Returns True if the integer n is a palindrome number, False otherwise. A palindrome number is a number that remains the same when its digits are reversed. str_n = str(n) return str_n == str_n[::-1]"},{"question":"You are given an integer array A of length N. Your task is to find if it is possible to split the array into exactly K non-empty continuous subarrays such that the sum of each subarray is a prime number. Prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples of prime numbers include 2, 3, 5, 7, 11, and so on. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ K ≤ N - 1 ≤ A[i] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N -----Output----- If it is possible to split the array in the desired way, print \\"YES\\". Otherwise, print \\"NO\\". -----Sample Input----- 5 3 3 7 1 2 11 -----Sample Output----- YES The array can be split into subarrays [3], [7], and [1, 2, 11], where the sum of each subarray (3, 7, and 14) includes only prime numbers. Note that sum of array [1, 2, 11] is 14, which is not a prime, thus the combination [1, 2], [11] will work. -----Sample Input----- 5 2 4 6 2 5 9 -----Sample Output----- NO In this case, there is no way to divide the array into two subarrays where the sum of each subarray is a prime number.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def can_split_into_k_primes(N, K, A): # Helper function to compute prefix sums def prefix_sums(arr): p_sum = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): p_sum[i] = p_sum[i - 1] + arr[i - 1] return p_sum p_sum = prefix_sums(A) # Memoization array dp = [[False] * (N + 1) for _ in range(K + 1)] dp[0][0] = True for k in range(1, K + 1): for i in range(1, N + 1): for j in range(i): if dp[k - 1][j] and is_prime(p_sum[i] - p_sum[j]): dp[k][i] = True break return \\"YES\\" if dp[K][N] else \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) print(can_split_into_k_primes(N, K, A)) if __name__ == \\"__main__\\": main()"},{"question":"# Maximal Perimeter of Triangle Write a function that takes an array of positive integers and returns the maximum perimeter of a triangle that can be formed with three of these integers. If it is impossible to form any triangle with the given integers, return 0. **Note**: A triangle is possible only if the sum of any two sides is greater than the third side. Example ``` [2, 1, 2] => 5 [1, 2, 1] => 0 [3, 2, 3, 4] => 10 ```","solution":"def maximal_perimeter_of_triangle(arr): Function to find the maximum perimeter of a triangle that can be formed with three sides chosen from the input array. If it\'s not possible to form a triangle, returns 0. arr.sort(reverse=True) for i in range(len(arr) - 2): if arr[i] < arr[i + 1] + arr[i + 2]: return arr[i] + arr[i + 1] + arr[i + 2] return 0"},{"question":"You are given a list of integers, which may contain both positive and negative numbers. Your task is to find the contiguous subarray (containing at least one number) which has the maximum sum and return its sum. **Input** - The first line contains an integer T denoting the number of test cases. - For each test case, the first line contains an integer N denoting the number of elements in the array. - The second line contains N space-separated integers a_1, a_2, ldots, a_N representing the elements of the array. **Output** For each test case, print a single line containing one integer ― the maximum sum of the contiguous subarray. **Constraints** - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^4 leq a_i leq 10^4 for each valid i **Example Input** ``` 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 ``` **Example Output** ``` 9 -1 ``` **Explanation** Example case 1: The contiguous subarray with the maximum sum is [1,2,3,-2,5] which gives a sum of 9. Example case 2: The contiguous subarray with the maximum sum is [-1] which gives a sum of -1.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def solve_max_subarray(test_cases): Solves the problem for the given test cases and returns the results. results = [] for case in test_cases: _, arr = case # We don\'t particularly need the length N, hence ignored results.append(max_subarray_sum(arr)) return results"},{"question":"Given an array of integers, you need to determine if it is possible to partition the array into exactly two subsets such that the sum of elements in both subsets is equal. Write a function `canPartition(nums: List[int]) -> bool` that takes an array of integers `nums` and returns a boolean indicating whether the array can be partitioned into two subsets with equal sum. Examples: ``` canPartition([1, 5, 11, 5]) => True canPartition([1, 2, 3, 5]) => False canPartition([2, 2, 3, 5]) => False ```","solution":"from typing import List def canPartition(nums: List[int]) -> bool: Determines if it is possible to partition the array into two subsets such that the sum of elements in both subsets is equal. :param nums: List of integers :return: Boolean indicating whether the array can be partitioned total_sum = sum(nums) # If the total sum is odd, it can\'t be partitioned into two equal parts if total_sum % 2 != 0: return False target_sum = total_sum // 2 # Initialize a dp array to store if a sum is achievable dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for j in range(target_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target_sum]"},{"question":"Write a function `find_frequent_elements(nums, k)` that accepts a list of integers `nums` and an integer `k`, and returns a list of the `k` most frequent elements in `nums`. The returned list should be sorted by the frequency of elements in descending order. If two elements have the same frequency, the element with the smaller value should come first. **Examples:** ```python find_frequent_elements([1,1,1,2,2,3], 2) # returns [1, 2] find_frequent_elements([4,4,1,2,2,3,3,3], 1) # returns [3] find_frequent_elements([1], 1) # returns [1] find_frequent_elements([1,2,2,3,3,3,4,4,4,4], 2) # returns [4, 3] ``` **Constraints:** - The function should run in O(n log n) time or better. - The input list `nums` will have at most 10^4 elements. - The integer `k` is guaranteed to be between 1 and the number of unique elements in `nums`.","solution":"from collections import Counter def find_frequent_elements(nums, k): Returns a list of the k most frequent elements in nums, sorted by frequency in descending order. If two elements have the same frequency, the smaller element comes first. count = Counter(nums) # Create a sorted list of elements based on frequency (descending) and then by value (ascending) sorted_elements = sorted(count.items(), key=lambda x: (-x[1], x[0])) # Extract the top k elements result = [element for element, frequency in sorted_elements[:k]] return result"},{"question":"Write a function `detect_the_escape_artist` that identifies whether given descriptions contain references to the infamous master escape artist, Houdini. A description contains a reference if it includes any of the following terms (case insensitive): \\"Houdini\\", \\"escape artist\\", or \\"master of escape\\". Your function should take a single string argument, `description`, and return a boolean indicating whether any of the terms are present in the given text. **Example:** ```python print(detect_the_escape_artist(\\"He performed extraordinary feats, truly embodying the spirit of a master of escape!\\")) # should return True print(detect_the_escape_artist(\\"This magician could rival even Houdini himself with his tricks.\\")) # should return True print(detect_the_escape_artist(\\"His acts of illusion were unparalleled.\\")) # should return False ``` You can assume that the input will be a non-empty string.","solution":"def detect_the_escape_artist(description): Identifies whether the given description contains references to Houdini, escape artist, or master of escape. Parameters: description (str): the description text to be analyzed Returns: bool: True if any of the terms are present, False otherwise terms = [\\"houdini\\", \\"escape artist\\", \\"master of escape\\"] description_lower = description.lower() for term in terms: if term in description_lower: return True return False"},{"question":"A software company is developing a new feature for its chatting application which allows users to convert a message into shorthand notation. The idea is to replace certain common words with their abbreviated form to make texting quicker and easier. The company provided a dictionary that maps each word to its abbreviation. Your task is to write a function that reads a given message and converts it into its shorthand notation using the provided dictionary. If a word in the message does not have an abbreviation in the dictionary, it should remain unchanged. -----INPUT----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains a single integer N, the number of words in the message. - The second line of each test case contains N space-separated words representing the message. - The third line of each test case contains an integer D, the number of dictionary entries. - The next D lines contain two space-separated strings: the word and its abbreviation. -----OUTPUT----- For each test case, output a single line containing the message in shorthand notation. -----CONSTRAINTS----- 1 <= T <= 50 1 <= N <= 100 1 <= D <= 100 Word length <= 15 -----EXAMPLE INPUT----- 2 5 I love to code daily 3 love lv code cd daily dly 4 Hello world good morning 2 Hello Hlo morning mrng -----EXAMPLE OUTPUT----- I lv to cd dly Hlo world good mrng","solution":"def convert_to_shorthand(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] words = test_cases[i][\'words\'] D = test_cases[i][\'D\'] dictionary = test_cases[i][\'dictionary\'] shorthand_dict = {} for word, abbrev in dictionary: shorthand_dict[word] = abbrev converted_message = [] for word in words: if word in shorthand_dict: converted_message.append(shorthand_dict[word]) else: converted_message.append(word) results.append(\\" \\".join(converted_message)) return results # Sample dictionary to demonstrate usage test_cases = [ { \'N\': 5, \'words\': [\'I\', \'love\', \'to\', \'code\', \'daily\'], \'D\': 3, \'dictionary\': [ (\'love\', \'lv\'), (\'code\', \'cd\'), (\'daily\', \'dly\') ] }, { \'N\': 4, \'words\': [\'Hello\', \'world\', \'good\', \'morning\'], \'D\': 2, \'dictionary\': [ (\'Hello\', \'Hlo\'), (\'morning\', \'mrng\') ] } ] # Example usage T = 2 print(convert_to_shorthand(T, test_cases))"},{"question":"Design a function that takes a string representing a binary number and returns the decimal equivalent as an integer. If the input is not a valid binary number (contains characters other than \'0\' and \'1\'), the function should return **\'Invalid binary number!\'**. Additionally, ensure the function correctly handles an empty string, returning **\'Invalid binary number!\'** in such cases. Example ==== ``` Input: \\"1101\\" Output: 13 Input: \\"10201\\" Output: \\"Invalid binary number!\\" Input: \\"\\" Output: \\"Invalid binary number!\\" ```","solution":"def binary_to_decimal(binary_str): Convert a binary string to its decimal equivalent. Parameters: binary_str (str): A string representing a binary number. Returns: int: Decimal equivalent of the binary number, or a string \'Invalid binary number!\' if input is invalid. if not binary_str: return \'Invalid binary number!\' for char in binary_str: if char not in (\'0\', \'1\'): return \'Invalid binary number!\' return int(binary_str, 2)"},{"question":"Create a function that evaluates an arithmetic expression in Reverse Polish Notation (RPN). Your function will receive an array of strings representing the expression. Assumptions: * The array will contain only valid arithmetic expressions. * The array will contain integers and the operators \'+\', \'-\', \'*\', \'/\'. * Division should be treated as integer division, so `3 / 2` should equal `1`. Examples: ```python evaluate_rpn([\\"2\\", \\"1\\", \\"+\\", \\"3\\", \\"*\\"]) ==> returns 9 evaluate_rpn([\\"4\\", \\"13\\", \\"5\\", \\"/\\", \\"+\\"]) ==> returns 6 evaluate_rpn([\\"10\\", \\"6\\", \\"9\\", \\"3\\", \\"+\\", \\"-11\\", \\"*\\", \\"/\\", \\"*\\", \\"17\\", \\"+\\", \\"5\\", \\"+\\"]) ==> returns 22 ```","solution":"def evaluate_rpn(tokens): Evaluates an arithmetic expression in Reverse Polish Notation (RPN). Args: tokens (list of str): A list of strings representing the RPN expression. Returns: int: The result of the RPN expression evaluation. stack = [] for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # Integer division else: stack.append(int(token)) return stack[0]"},{"question":"A company has a database storing users\' details. Occasionally, a script must run to identify and remove duplicate records. Each record is a dictionary containing keys: \'name\', \'email\', and \'phone\'. Two records are considered duplicates if at least two out of these three fields match. Your task is to write a function `remove_duplicates(users)` that takes a list of user records and returns a new list with duplicates removed, keeping only one copy of each duplicated set. The function should prioritize keeping the first instance of each duplicate it encounters. **Example:** ```python users = [ {\'name\': \'John Doe\', \'email\': \'john@example.com\', \'phone\': \'555-1234\'}, {\'name\': \'Jane Smith\', \'email\': \'jane@example.com\', \'phone\': \'555-5678\'}, {\'name\': \'John R. Doe\', \'email\': \'john@example.com\', \'phone\': \'555-9101\'}, {\'name\': \'Johnny Doe\', \'email\': \'john@example.com\', \'phone\': \'555-9101\'}, {\'name\': \'Jane Smith\', \'email\': \'jane@domain.com\', \'phone\': \'555-5678\'}, ] # Call the function unique_users = remove_duplicates(users) # Result should be unique_users = [ {\'name\': \'John Doe\', \'email\': \'john@example.com\', \'phone\': \'555-1234\'}, {\'name\': \'Jane Smith\', \'email\': \'jane@example.com\', \'phone\': \'555-5678\'}, {\'name\': \'John R. Doe\', \'email\': \'john@example.com\', \'phone\': \'555-9101\'}, ] ``` Implement the `remove_duplicates` function. Make sure it runs efficiently even for large lists of user records.","solution":"def remove_duplicates(users): Remove duplicates from the list of user records, keeping only the first instance of each duplicate set. seen = [] unique_users = [] for user in users: # For each user, check for duplicates is_duplicate = False for seen_user in seen: if sum(1 for k in [\'name\', \'email\', \'phone\'] if user[k] == seen_user[k]) >= 2: is_duplicate = True break # If it\'s not a duplicate, add to the list of seen users and unique_users if not is_duplicate: seen.append(user) unique_users.append(user) return unique_users"},{"question":"In a certain game, there are n players arranged in a circle. Each player has a certain amount of initial health points, represented by an array h of length n. The goal is to remove players from the circle one by one until only one player remains, following a particular set of rules. The rules for removing a player are: 1. At each step, choose any player to initiate an attack. 2. The chosen player will attack and remove the adjacent player (either to their left or to their right). The health points of the chosen player is then reduced by the health points of the removed player. 3. The game continues until only one player remains in the circle. Given multiple queries, each represented by the initial health points array h for a set of players, determine the minimum possible health points of the final remaining player. -----Input----- The first line of input contains a single integer t (1 le t le 10^3) — the number of queries. The first line of each query contains a single integer n (2 le n le 10^5) — the number of players. The second line of each query contains n integers h_i (1 le h_i le 10^9), the initial health points of the players. It is guaranteed that the sum of n across all queries does not exceed 5 cdot 10^5. -----Output----- For each query, print a single integer: The minimum possible health points of the final remaining player. -----Example----- Input 3 3 5 2 8 4 1 4 3 2 5 9 1 7 6 1 Output 1 1 1 -----Note----- In the first query, one of the optimal sequences of attacks could be: - Player 1 (health 5) attacks Player 3 (health decreases to 5 - 8 = -3 which is discarded) - Player 3 is removed. Now the circle is [2, -3], during circle formation, Player 2 with health 2 attacks Player with health -3, making the remaining player with health as 1 - The player with health 1 remains. Thus, the minimum possible health points of the final player is 1.","solution":"def final_health_points(h): Given the health points array h, returns the minimum possible health points of the final remaining player. return min(h) def process_queries(queries): Processes multiple queries where each query consists of `h` (health points array) Returns the minimum health points of the final remaining player for each query. results = [] for h in queries: results.append(final_health_points(h)) return results"},{"question":"Alex is learning about binary trees. He came across a problem where he needs to determine the maximum sum of nodes for any path in a binary tree. A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A path can start and end at any node in the tree, and it does not have to go through the root of the tree. Given a binary tree, help Alex to find the maximum sum of nodes for any path in the binary tree. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows. - For each test case, the first line contains an integer N denoting the number of nodes in the binary tree. - The second line contains N space-separated integers where the i-th integer represents the value of the i-th node. - The next N-1 lines describe the edges of the binary tree. Each edge is represented by two integers u and v which indicate that there is an edge between nodes u and v. -----Output----- For each test case, print a single integer representing the maximum sum of nodes for any path in the binary tree. -----Constraints----- - 1 le T le 10 - 1 le N le 10^4 - -10^4 le text{Node values} le 10^4 - The sum of N over all test cases does not exceed 5 cdot 10^4 -----Example Input----- 2 5 4 -10 3 5 2 1 2 1 3 3 4 3 5 3 1 2 3 1 2 1 3 -----Example Output----- 12 6 -----Explanation----- Example case 1: The path with the maximum sum is 3 to 1 to 4 to 5 which results in a sum of 4 + 5 + 3 = 12. Example case 2: The path with the maximum sum is 1 to 3 to 2 which results in a sum of 1 + 2 + 3 = 6.","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def find_maximum_path_sum(root): def helper(node): nonlocal max_sum if not node: return 0 left_max = max(helper(node.left), 0) right_max = max(helper(node.right), 0) current_sum = node.value + left_max + right_max max_sum = max(max_sum, current_sum) return node.value + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum def build_tree_from_edges(node_values, edges): nodes = {i: TreeNode(value) for i, value in enumerate(node_values, 1)} for u, v in edges: if nodes[u].left is None: nodes[u].left = nodes[v] else: nodes[u].right = nodes[v] return nodes[1] def max_sum_for_all_cases(num_cases, cases): results = [] for case in cases: N, nodes, edges = case tree_root = build_tree_from_edges(nodes, edges) results.append(find_maximum_path_sum(tree_root)) return results"},{"question":"You are working on a project to analyze a large text file. You need to write a function that will read the file and count the occurrences of each word. The function should then return the n most frequent words in the text file. Task: Create a function that takes two parameters, `file_path` and `n`, and returns a list of the n most frequent words in the file located at `file_path`. Words should be compared case-insensitively, and the returned list should contain the words in decreasing order of frequency. Description of edge cases: 1. If `n` is less than or equal to 0, return an empty list. 2. If the file cannot be read (for example, if the file does not exist), return an empty list. 3. If the file is empty or contains no words, return an empty list. What each parameter looks like: ```python type(file_path) #=> str : a string representing the path to the file. type(n) #=> int : a positive integer representing the number of top frequent words to return. type(top_n_words(file_path, n)) #=> list ``` Some examples: Assume the file at `\\"example.txt\\"` contains the following text: `\\"This is a test. This test is only a test.\\"` ```python top_n_words(\\"example.txt\\", 2) #=> [\\"test\\", \\"this\\"] top_n_words(\\"example.txt\\", 3) #=> [\\"test\\", \\"this\\", \\"is\\"] top_n_words(\\"example.txt\\", 0) #=> [] ``` Remember to ignore punctuation and normalize words to lowercase. You can assume that words are separated by spaces and/or punctuation.","solution":"import re from collections import Counter def top_n_words(file_path, n): Reads the file at file_path, counts the occurrences of each word (case-insensitively), and returns a list of the n most frequent words in the text file. if n <= 0: return [] try: with open(file_path, \'r\') as file: text = file.read() except Exception: return [] # Normalize text: convert to lowercase and remove punctuation words = re.findall(r\'bw+b\', text.lower()) if not words: return [] word_counts = Counter(words) most_common = word_counts.most_common(n) # Extract just the words from the most_common tuples return [word for word, count in most_common]"},{"question":"You\'ve been given an array of integers. Your task is to write a function that returns the longest contiguous subarray where the absolute difference between every two adjacent elements is less than or equal to 1. If multiple subarrays have the same length, return the one that appears first. Example: ``` >>> longest_subarray([4, 7, 5, 6, 5, 6, 3, 8]) [5, 6, 5, 6] >>> longest_subarray([1, 2, 2, 3, 4, 1, 2, 2, 1]) [1, 2, 2, 3, 4] ```","solution":"def longest_subarray(arr): if not arr: return [] max_len = 1 current_start = 0 result_start = 0 for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) <= 1: if i - current_start + 1 > max_len: max_len = i - current_start + 1 result_start = current_start else: current_start = i return arr[result_start:result_start + max_len]"},{"question":"Given an array of integers `prices` representing the price of a stock on different days, create an algorithm that determines the maximum profit you can achieve by buying and selling the stock within one or more non-overlapping intervals. Note that you can buy and sell a stock multiple times. *Parameters*: - `prices` array (integers): The price of a given stock on the i-th day. *Example input*: ``` prices = [7, 1, 5, 3, 6, 4] ``` *Output*: ``` 7 ``` Explanation: - Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. - Buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. - Total profit is 4 + 3 = 7. # Constraints: * `1 <= prices.length <= 10^4` * `0 <= prices[i] <= 10^4` # Notes: * You cannot sell a stock before you buy one. * You cannot buy and sell on the same day. * It is allowed to perform multiple transactions (buy one day and sell on the next day, then buy another day and sell on a later day). Examples: ``` Input: prices = [1, 2, 3, 4, 5] Output: 4 Explanation: - Buy on day 1 (price = 1), sell on day 5 (price = 5), profit = 5-1 = 4. - Note that you cannot buy and sell on the same day. Input: prices = [7, 6, 4, 3, 1] Output: 0 Explanation: - In this case, no transactions are made, so the max profit = 0. ```","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock. Buying and selling can be done multiple times as long as they don\'t overlap. :param prices: List[int] - List of stock prices on different days :return: int - Maximum profit achievable max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. Example input: ``` [1, 2, 3, 4] [4, 5, 6] ``` Expected output: ``` [24, 12, 8, 6] [30, 24, 20] ```","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. if not nums: return [] length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"-----Problem Statement----- Volleyball is a popular sport at XYZ University, and it is played during most sporting events at the university. Due to the growing interest, the university decided to create a schedule where each pair of students plays at least one match with each other. Each student is represented by a unique integer id. Your task is to help the university to schedule the matches by providing the correct pairings for a given number of students. You need to generate all unique pairs for n students, with each pair represented as a tuple of two integers (a, b), where `1 <= a < b <= n`. -----Input:----- - The first line contains an integer `T`, representing the number of test cases. - Each test case consists of one integer n, representing the number of students. -----Output:----- For each test case, output all unique pairs (a, b) in lexicographically sorted order, with each pair on a new line. Output an empty line after the pairs of each test case. -----Constraints----- - 1 leq T leq 100 - 2 leq n leq 100 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 2 1 3 2 3 1 2 1 3 1 4 2 3 2 4 3 4 -----EXPLANATION:----- - For 3 students, the unique pairs can be generated as (1, 2), (1, 3), and (2, 3). - For 4 students, the unique pairs are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4).","solution":"def generate_unique_pairs(n): Generates all unique pairs (a, b) for given n students, where 1 <= a < b <= n. pairs = [] for a in range(1, n): for b in range(a + 1, n + 1): pairs.append((a, b)) return pairs def solve(t, test_cases): Process multiple test cases to generate unique pairs for each number of students. result = [] for n in test_cases: pairs = generate_unique_pairs(n) result.append(pairs) return result"},{"question":"Write a function called `sum_of_distances` that calculates the sum of the Manhattan distances from every point to every other point in a given list of 2D coordinates. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as `|x1 - x2| + |y1 - y2|`. # Parameters - A list of tuples, where each tuple contains two integers representing the coordinates (x, y). # Output - Return the sum of the Manhattan distances for all unique pairs of points in the list. # Examples ```python sum_of_distances([(0, 0), (1, 1), (2, 2)]) #(0,0) to (1,1): |0-1| + |0-1| = 2 #(0,0) to (2,2): |0-2| + |0-2| = 4 #(1,1) to (2,2): |1-2| + |1-2| = 2 #Total: 2 + 4 + 2 = 8 => 8 sum_of_distances([(1, 2), (3, 4), (5, 6)]) #(1,2) to (3,4): |1-3| + |2-4| = 4 #(1,2) to (5,6): |1-5| + |2-6| = 8 #(3,4) to (5,6): |3-5| + |4-6| = 4 #Total: 4 + 8 + 4 = 16 => 16 ``` # Constraints - The input list will have at least two points and at most 1000 points. - Each coordinate will be an integer within the range [-10^3, 10^3].","solution":"def sum_of_distances(coords): Calculates the sum of the Manhattan distances from every point to every other point in the list of 2D coordinates. Parameters: coords (list of tuples): A list of tuples, where each tuple contains two integers representing the coordinates (x, y). Returns: int: The sum of the Manhattan distances for all unique pairs of points in the list. total_distance = 0 n = len(coords) for i in range(n): for j in range(i + 1, n): x1, y1 = coords[i] x2, y2 = coords[j] total_distance += abs(x1 - x2) + abs(y1 - y2) return total_distance"},{"question":"A zebra array is an array where all elements appear an equal number of times. Given a list of integers, write a function named `isZebraArray`/`is_zebra_array`/`IsZebraArray` that returns `true` if its argument is a zebra array, and `false` otherwise. # Examples: ``` [3, 3, 1, 1, 2, 2] => true (as elements 3, 1, and 2 all appear exactly 2 times each) [3, 3, 1, 2, 2, 2] => false (as element 1 appears 1 time, and elements 3 and 2 appear 2 and 3 times respectively) [5, 5, 5, 6, 6] => false (as element 5 appears 3 times and element 6 appears 2 times) [4, 4, 4, 4] => true (as element 4 appears 4 times) ``` Input: * An array of integers. Output: * A boolean value indicating whether the input is a zebra array.","solution":"def is_zebra_array(arr): Determines if the array is a zebra array. Parameters: arr (list): A list of integers. Returns: bool: True if the array is a zebra array, False otherwise. from collections import Counter if not arr: return True # An empty array can be considered a zebra array count = Counter(arr) count_values = list(count.values()) return len(set(count_values)) == 1"},{"question":"You are given a forest represented as a 2D grid of cells. Each cell in the grid can be either empty (denoted by \'.\'), a tree (denoted by \'T\'), or water (denoted by \'W\'). You want to count the number of isolated groups of trees in the forest. A group of trees is isolated if all the trees in the group are directly or indirectly connected (horizontally or vertically) and any path from a tree in the group to a tree not in the group must pass through water cells. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of each testcase follows. - Each test case starts with two space-separated integers M and N denoting the number of rows and columns in the grid respectively. - The next M lines contain N characters each representing the cells in the grid. -----Output----- For each testcase, print \\"Case i: \\", and then the answer, where i is the testcase number, 1-indexed. -----Constraints----- - 1 ≤ T ≤ 200 - 1 ≤ M, N ≤ 100 -----Example----- Input: 2 5 5 .T... .T.T. .W... ..T.. ..... 4 5 .T... .WTT. .T..W .W.T. Output: Case 1: 3 Case 2: 2 -----Explanation----- In the first testcase, the isolated groups of trees are: 1. The single tree at position (0, 1) 2. The trees at position (1, 1) and (2, 1) 3. The trees at position (1, 3) and (1, 4) In the second testcase, the isolated groups of trees are: 1. The single tree at position (0, 1) 2. The trees at position (2, 1) and (2, 2) Note: Trees connected diagonally do not form a single group.","solution":"def num_of_isolated_groups(grid): if not grid or not grid[0]: return 0 M, N = len(grid), len(grid[0]) visited = [[False for _ in range(N)] for _ in range(M)] def is_water_or_visited(i, j): return grid[i][j] == \'W\' or visited[i][j] def explore(i, j): if i < 0 or i >= M or j < 0 or j >= N or is_water_or_visited(i, j): return if grid[i][j] == \'.\': return visited[i][j] = True explore(i + 1, j) explore(i - 1, j) explore(i, j + 1) explore(i, j - 1) group_count = 0 for i in range(M): for j in range(N): if grid[i][j] == \'T\' and not visited[i][j]: group_count += 1 explore(i, j) return group_count def forest_isolated_groups(T, test_cases): results = [] for idx in range(T): M, N, grid = test_cases[idx] result = num_of_isolated_groups(grid) results.append(f\\"Case {idx + 1}: {result}\\") return results"},{"question":"Task: * Implement a function to group anagrams from a list of words. # # Rules: - parameter ```words``` The list of words to group, where each word is a string. - return a list of lists, each containing words that are anagrams of each other. # # Example: ``` group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) returns [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] group_anagrams([\\"\\"]), [\\"\\"]); group_anagrams([\\"a\\"]), [\\"a\\"]); ```","solution":"from collections import defaultdict def group_anagrams(words): Groups the words that are anagrams of each other. :param words: List of words as strings. :return: List of lists, each containing words that are anagrams of each other. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"In a small town, there are M cafes, each offering a variety of different dishes. To simplify, let\'s represent each cafe as a number from 1 to M and each dish by a pair of numbers: its price and the calorie count. Each customer has a preference for cafes and a maximum calorie intake for a meal. The customer will select the cheapest dish available that doesn\'t exceed their calorie limit. You will be asked T queries. Each query consists of the customer\'s preferred cafes and their maximum allowed calorie intake. Find the price the customer has to pay for their meal based on their preferences. If no dish satisfies their criteria, print -1. Note that for each query, the total number of dishes is always the same since dishes are restocked immediately after a purchase. -----Input:----- - First line contains M and T - Each of the next M lines contains a list of dishes for each cafe. Each list starts with an integer L (number of dishes offered by the cafe) followed by L pairs of integers. Each pair consists of a price and the calorie count. - Each of the next T lines contains a query. Each query is described as follows: - First line consists of c and C where c is the size of the preference subset of cafes. - Second line consists of c integers describing the cafes the customer prefers. -----Output:----- For each query, print the price to be paid based on the customer\'s preferences and calorie limit. -----Constraints----- - 1 leq M, T leq 100 - 1 leq L leq 100 - 1 leq price, calorie leq 10^4 - 1 leq c leq M - 1 leq C leq 10^4 -----Sample Input:----- 3 2 2 500 600 700 800 3 300 500 400 600 500 900 1 600 700 2 400 1 3 1 2 3 -----Sample Output:----- 400 300 -----Explanation:----- Query 1: Preferred cafes are {1, 3}, maximum calorie limit is 400. - Cafe 1: No dish within calorie limit (600, 800). - Cafe 3: Only one dish available (600), exceeding the limit. Hence, answer is -1. Query 2: Preferred cafes are {2, 3}, maximum calorie limit is 1400. - Cafe 2: Dishes within calorie limit are (300, 500), (400, 600), priced at 300 and 400 respectively. - Cafe 3: Only one dish available (600). The cheapest viable dish is 300. Hence, answer is 300.","solution":"def find_cheapest_dish(M, T, cafe_data, queries): results = [] for query in queries: c, C = query[0] preferred_cafes = query[1] min_price = float(\'inf\') for cafe_index in preferred_cafes: dishes = cafe_data[cafe_index - 1] for price, calorie in dishes: if calorie <= C and price < min_price: min_price = price if min_price == float(\'inf\'): results.append(-1) else: results.append(min_price) return results # Helper function to process the input into the required format def process_input(M, T, raw_data, raw_queries): cafe_data = [] curr_index = 0 for _ in range(M): L = raw_data[curr_index] dishes = [] for i in range(L): price = raw_data[curr_index + 1 + 2 * i] calorie = raw_data[curr_index + 2 + 2 * i] dishes.append((price, calorie)) curr_index += 1 + 2 * L cafe_data.append(dishes) queries = [] for i in range(T): c_C = (raw_queries[2 * i][0], raw_queries[2 * i][1]) cafes = raw_queries[2 * i + 1] queries.append((c_C, cafes)) return cafe_data, queries"},{"question":"Implement a function that transposes a given rectangular matrix. The transpose of a matrix is obtained by swapping the rows with columns. # Input - A 2D list (`matrix`) representing the matrix to be transposed. The matrix contains only integers and is non-empty. You can assume that all rows in the matrix have the same number of elements. # Output - Return a 2D list showing the transposed matrix. # Example ```python def transpose(matrix): # Your code here matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(transpose(matrix)) # Output should be: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] ``` ```python matrix = [ [1, 2], [3, 4], [5, 6] ] print(transpose(matrix)) # Output should be: # [ # [1, 3, 5], # [2, 4, 6] # ] ```","solution":"def transpose(matrix): Returns the transpose of the given matrix. return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]"},{"question":"Function Description: You are given a list of tuples `(A, B)` representing relations in a network, where `A` is a prerequisite of `B`. Each element is a string representing unique tasks. Write a function to determine the longest path of prerequisite tasks. If no cyclic dependency exists, return the number of tasks in the longest possible prerequisite path. If a cycle is detected, return -1. Example: Input: [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\"), (\\"a\\", \\"d\\"), (\\"d\\", \\"e\\"), (\\"c\\", \\"e\\")] Output: 4 Explanation: The longest path is \\"a\\" -> \\"d\\" -> \\"e\\" -> \\"c\\". Note: - 1 <= relations.length <= 1000 - Each task name A and B is a string of length between 1 and 10. - The given list won\'t include duplicate relations. - You may assume that the list contains no self-loops (i.e., no tuple `(A, A)`). The function signature is: ```python def longest_prerequisite_path(relations: List[Tuple[str, str]]) -> int: pass ```","solution":"from typing import List, Tuple def longest_prerequisite_path(relations: List[Tuple[str, str]]) -> int: from collections import defaultdict, deque # Build a graph and in-degree count graph = defaultdict(list) indegree = defaultdict(int) for a, b in relations: graph[a].append(b) indegree[b] += 1 if a not in indegree: indegree[a] = 0 # Topological sort using Kahn\'s algorithm zero_indegree = deque([node for node in indegree if indegree[node] == 0]) longest_path = defaultdict(int) while zero_indegree: node = zero_indegree.popleft() for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree.append(neighbor) longest_path[neighbor] = max(longest_path[neighbor], longest_path[node] + 1) # Check for cycle if any(indegree[node] > 0 for node in indegree): return -1 # Return the length of the longest path return max(longest_path.values(), default=0)"},{"question":"Tom is a string enthusiast. He defines the attractiveness of a string as the sum of the ASCII values of its characters multiplied by the length of the string. For example, the attractiveness of the string \\"abc\\" is (97+98+99)*3 = 294*3 = 882. Tom has N strings, and he wants to know the total attractiveness of each string. Write a program to help Tom compute the attractiveness of all the strings. ---Input--- The first line contains an integer N denoting the number of strings. Each of the next N lines contains a single string. ---Output--- For each string, output a single line containing the attractiveness of the string. ---Constraints--- - 1 ≤ N ≤ 10,000 - 1 ≤ length of string ≤ 1,000 ---Example--- Input: 3 abc xyz hello Output: 882 878 3190","solution":"def attractiveness(strings): Compute and return the attractiveness of each string in the list. :param strings: List of strings :return: List of attractiveness values corresponding to each string results = [] for s in strings: ascii_sum = sum(ord(char) for char in s) attractiveness_value = ascii_sum * len(s) results.append(attractiveness_value) return results"},{"question":"In a given integer array `nums`, you need to find a contiguous subarray that has the largest sum, and then return that sum. A subarray is a contiguous part of an array. If the input array is empty, return `0`. The input array can contain both positive and negative numbers. **Example:** ```python Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum = 6. ``` **Constraints:** - The length of the array will be in the range [0, 1000]. - The array will contain integers in the range [-10^4, 10^4].","solution":"def max_subarray_sum(nums): Function to find the sum of the contiguous subarray within a one-dimensional numeric array `nums` that has the largest sum. :param nums: List[int] - List of integers :return: int - The largest sum of the contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function CommonElements that takes two lists of integers and returns a new list containing only the elements that appear in both of the input lists. The resulting list should not contain any duplicates, even if the input lists do. Sorting of the resulting list is not required. Example: - Input: CommonElements([1, 2, 2, 3], [2, 3, 3, 4]) - Output: [2, 3]","solution":"def CommonElements(list1, list2): Returns a list containing the common elements in both list1 and list2, without duplicates. set1 = set(list1) set2 = set(list2) common_elements = list(set1 & set2) # Use intersection of sets to find common elements return common_elements"},{"question":"Given a list of non-negative integers, you are tasked with forming two numbers such that their product is maximized. Return the maximum product that can be achieved by multiplying any two different elements from the list. Example 1: Input: nums = [3, 4, 5, 2] Output: 20 Example 2: Input: nums = [1, 5, 4, 5] Output: 25 Example 3: Input: nums = [7, 1, 8, 3, 6, 4] Output: 56 Note: - The length of the list will be at least 2 and up to 10^5. - The elements of the list are non-negative integers and will be within the range [0, 10^4].","solution":"def max_product(nums): Returns the maximum product of two distinct elements in the list nums. # Sort the list in descending order and pick the first two elements nums.sort(reverse=True) return nums[0] * nums[1]"},{"question":"Binary trees are a crucial data structure in computer science. Implement a function that identifies whether a given binary tree is balanced. A balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than one. Your function should return a boolean value, `True` if the tree is balanced and `False` otherwise. # Definition for a binary tree node is: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Function signature ```python def is_balanced(root: Optional[TreeNode]) -> bool: pass ``` # Example Given binary tree [3,9,20,None,None,15,7]: ``` 3 / 9 20 / 15 7 ``` Return `True`. Given binary tree [1,2,2,3,3,None,None,4,4]: ``` 1 / 2 2 / 3 3 / 4 4 ``` Return `False`. # Constraints - The number of nodes in the tree is in the range [0, 5000]. - ( -10^4 <= Node.val <= 10^4 ).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def height_and_balanced(node): if not node: return 0, True left_height, left_balanced = height_and_balanced(node.left) right_height, right_balanced = height_and_balanced(node.right) current_height = max(left_height, right_height) + 1 current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balanced _, balanced = height_and_balanced(root) return balanced"},{"question":"Martin is building a city by placing numbered buildings in a row. The buildings are located at integer points on a number line. Each building has a unique height given as an integer. Martin wants to ensure that his new city has a skyline with specific properties. He defines the skyline of his city as the sequence of heights when viewed from a certain angle, and he wants each building to be part of a \\"special skyline\\". A special skyline is one where every height in the sequence is greater than or equal to any height that appears to its left (i.e., the heights form a non-decreasing sequence). Given a sequence of buildings with their respective heights, Martin wants to find out the length of the longest subsequence of buildings that can form a special skyline. Write a program that computes this length for him. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer n denoting the number of buildings. - The second line of each test case contains n integers h_1, h_2, ..., h_n representing the heights of the buildings. -----Output----- For each test case, print a single line containing one integer — the length of the longest subsequence that can form a special skyline. -----Constraints----- - 1 le T le 100 - 1 le n le 10^5 - 0 le h_i le 10^9 - the sum of n over all test cases does not exceed 10^6 -----Example Input----- 2 5 3 10 2 1 20 4 3 2 6 4 -----Example Output----- 3 2","solution":"def longest_special_skyline(seq): Finds the length of the longest subsequence that is a non-decreasing sequence from bisect import bisect_left if not seq: return 0 lis = [] for height in seq: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) def process_test_cases(test_cases): results = [] for n, buildings in test_cases: results.append(longest_special_skyline(buildings)) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n = int(lines[idx]) buildings = list(map(int, lines[idx + 1].strip().split())) test_cases.append((n, buildings)) idx += 2 return test_cases"},{"question":"Given a positive integer `n`, you need to find the minimal number of steps to reduce `n` to 1 according to the following rules: 1. If `n` is divisible by 2, you may reduce it to `n / 2`. 2. If `n` is divisible by 3, you may reduce it to `n / 3`. 3. Decrement `n` by 1. Write a function to determine the minimal number of steps required. Example: Input: 10 Output: 3 Explanation: 10 -> 9 -> 3 -> 1 Input: 15 Output: 4 Explanation: 15 -> 5 -> 4 -> 2 -> 1","solution":"def min_steps_to_one(n): Given a positive integer n, find the minimal number of steps to reduce n to 1 following the rules: 1. If n is divisible by 2, you may reduce it to n / 2. 2. If n is divisible by 3, you may reduce it to n / 3. 3. Decrement n by 1. Args: n (int): Positive integer n. Returns: int: Minimal number of steps to reduce n to 1. dp = [0] * (n + 1) for i in range(2, n + 1): dp[i] = dp[i - 1] + 1 if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"A company is planning to distribute a bonus to its employees. The company has decided to distribute the bonus based on each employee\'s performance score. Given the performance scores of the employees, the company wants to maximize the sum of bonuses distributed while adhering to a few constraints. Each employee has a unique performance score, and each performance score is a positive integer. The company follows these constraints: - The bonus given to each employee must be a distinct positive integer. - The total number of employees is N. - The maximum possible bonus that can be given to any employee is B. - The difference in bonus between any two employees must be at most D. - The minimum bonus that can be given to any employee is 1. Help the company determine the maximum possible sum of bonuses distributed to all employees or determine if it is impossible to distribute the bonuses satisfying the given constraints. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, B, and D. -----Output----- For each test case, print a single line containing one integer — the maximum possible sum of bonuses distributed to the employees, or -1 if it is not possible to satisfy the constraints. -----Constraints----- - 1 le T le 50 - 1 le N le 10^6 - 1 le B le 10^9 - 1 le D le 10^6 -----Example Input----- 2 4 7 2 3 5 3 -----Example Output----- 18 12 -----Explanation----- Example case 1: There are four employees and the maximum bonus that can be given is 7. The maximum sum of bonuses can be achieved by 1, 2, 3, 4 since the differences and distinct bonuses satisfy the constraints. The sum is 1 + 2 + 3 + 4 = 10, but by maximizing within the parameters and maintaining distinct bonuses under given constraints, bonuses could be 3, 5, 7, 3 for a sum of 18. Example case 2: The bonuses are 1, 2, and 4 satisfying the maximal condition. Total sum is 1 + 4 + 5 = 12 which maximizes within the allowed difference.","solution":"def max_bonus_sum(t, cases): results = [] for case in cases: N, B, D = case if N > B: results.append(-1) continue bonuses = [] current_bonus = 1 for i in range(N): bonuses.append(current_bonus) current_bonus += 1 if any((bonuses[i+1] - bonuses[i] > D for i in range(N-1))) or bonuses[-1] > B: results.append(-1) else: results.append(sum(bonuses)) return results # Example usage (uncomment to run) # cases = [ # (4, 7, 2), # (3, 5, 3) # ] # t = len(cases) # print(max_bonus_sum(t, cases)) # Output should be [18, 12]"},{"question":"# Task Given a string `s`, output a new string where each character in `s` is repeated a number of times equal to its position in the original string (1-based index). Example: For `s = \\"abc\\"`, the result should be `\\"abbccc\\"`. Explanation: - The character \'a\' at position 1 is repeated 1 time. - The character \'b\' at position 2 is repeated 2 times. - The character \'c\' at position 3 is repeated 3 times. Therefore, the resulting string is `\\"abbccc\\"`. # Input/Output - `[input]` string `s` A non-empty string consisting of lowercase English letters. - `[output]` string A new string with the specified repetition pattern.","solution":"def repeat_characters(s): Returns a new string where each character in `s` is repeated a number of times equal to its position in the original string (1-based index). result = [] for i, char in enumerate(s): result.append(char * (i + 1)) return \'\'.join(result)"},{"question":"You are given a grid of size m x n where each cell represents a portion of land (represented by a \'1\') or water (represented by a \'0\'). Your task is to find the number of distinct islands in the grid. An island is formed by connecting adjacent lands horizontally or vertically, but not diagonally. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume that all four edges of the grid are surrounded by water. Write a function that takes a 2D binary grid as input and returns the count of islands. Example: Input: [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 0, 0] ] Output: 3 Explanation: The grid contains three distinct islands. Constraints: - m == grid.length - n == grid[i].length - 1 <= m, n <= 300 - grid[i][j] is \'0\' or \'1\'","solution":"def num_islands(grid): if not grid: return 0 m, n = len(grid), len(grid[0]) def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited dfs(i-1, j) # up dfs(i+1, j) # down dfs(i, j-1) # left dfs(i, j+1) # right count = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': dfs(i, j) count += 1 return count"},{"question":"You are given an array `nums` of length `n` consisting of distinct integers. Construct a new array `rotated` by rotating `nums` exactly `k` positions to the right, such that no element in the new array `rotated` remains in its original position from `nums`. A rotation to the right by `k` positions means that elements from the end of the array move to the front. For example, rotating the array `[1, 2, 3, 4, 5]` by `2` positions to the right yields the array `[4, 5, 1, 2, 3]`. -----Input----- The first line contains two integers `n` and `k` (1 ≤ n ≤ 100, 0 ≤ k < n) — the size of the array and the number of positions to rotate. The second line contains `n` space-separated distinct integers `nums_1, nums_2, ..., nums_n` (1 ≤ nums_i ≤ 10^5) — the elements of the array. -----Output----- If it is not possible to construct such an array `rotated`, print `-1`. Otherwise, print `n` space-separated integers `rotated_1, rotated_2, ..., rotated_n` representing the new rotated array where no element is in its original index. If there are multiple valid outputs, print any of them. -----Examples----- Input 5 3 1 2 3 4 5 Output 3 4 5 1 2 Input 4 1 10 20 30 40 Output 40 10 20 30 -----Note----- A right rotation by `k` positions means that the element which was at position `n-k` (considering 0-based indexing) moves to position 0, `n-k+1` to position 1, and so on. However, ensure upon rotation that no element stays in its original position. For example, after rotating `[1, 2, 3, 4, 5]` by 2 positions to the right resulting in `[4, 5, 1, 2, 3]`, element 1 stayed in its position if the original index is compared. The expected output would avoid such configurations.","solution":"def rotate_and_validate(n, k, nums): Rotates the array `nums` `k` positions to the right and makes sure no element remains in its original position. if n == 1: return -1 k = k % n rotated = nums[-k:] + nums[:-k] for i in range(n): if nums[i] == rotated[i]: return -1 return rotated"},{"question":"# Palindromic Substrings Write a function to count how many substrings in a given string are palindromes. A palindromic string is a string that reads the same forward and backward. For example, in the string `abc`, there are 3 palindromic substrings - \\"a\\", \\"b\\", \\"c\\". In the string `aaa`, there are 6 palindromic substrings - \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\". Function should return the number of palindromic substrings in the string. ```python def count_palindromic_substrings(s: str) -> int: # Your code here ``` ```python print(count_palindromic_substrings(\\"abc\\")) # Output: 3 print(count_palindromic_substrings(\\"aaa\\")) # Output: 6 ```","solution":"def count_palindromic_substrings(s: str) -> int: def is_palindrome(sub: str) -> bool: return sub == sub[::-1] count = 0 for i in range(len(s)): for j in range(i+1, len(s)+1): if is_palindrome(s[i:j]): count += 1 return count"},{"question":"You are developing a software for a bookstore, and one feature requested by the owner is the ability to reorder books to ensure variety and adequate stock visibility on the shelves. The bookstore arranges books in sections by genre, and within each genre, books are displayed in alphabetical order by title. If there are multiple books with the same title, they are then sorted by author name. Write a function to determine the order of books on a shelf. The function should accept a list of tuples, where each tuple contains two strings: the book title and the author\'s name. The function should return a list of tuples sorted alphabetically by title, and then by author name if titles are identical. Keep in mind that the input list may be empty, in which case the function should return an empty list. Example: ```python books = [(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\"), (\\"Moby Dick\\", \\"Herman Melville\\"), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\"), (\\"Moby Dick\\", \\"Anonymous\\")] # Output: [(\\"Moby Dick\\", \\"Anonymous\\"), (\\"Moby Dick\\", \\"Herman Melville\\"), (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\"), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\")] ```","solution":"def sort_books(books): This function takes a list of tuples containing book titles and author names and returns a list of tuples sorted by book title, and then by author name if titles are identical. Parameters: books (list of tuple): List of tuples containing (title, author) Returns: list of tuple: Sorted list of books by title and then by author return sorted(books, key=lambda x: (x[0], x[1]))"},{"question":"Write a function to validate an IPv4 address. An IPv4 address is a valid string if it consists of four octets, each between 0 and 255, inclusive, and separated by periods (\\".\\"), with no extra leading zeros. For instance, \\"192.168.0.1\\" and \\"127.0.0.1\\" are valid IPv4 addresses, but \\"256.256.256.256\\", \\"192.168.01.1\\", and \\"192.168.0.999\\" are not. Input A string representing the IPv4 address. Output If the input string is a valid IPv4 address, return ```\\"Valid IPv4 address\\"```; otherwise, return ```\\"Invalid IPv4 address\\"```. Example validate_ip(\\"192.168.0.1\\") # should return Valid IPv4 address validate_ip(\\"256.256.256.256\\") # should return Invalid IPv4 address","solution":"def validate_ip(ip: str) -> str: Validates if the input string is a valid IPv4 address. :param ip: A string representing the IPv4 address. :return: \\"Valid IPv4 address\\" if the input string is a valid IPv4 address; otherwise, returns \\"Invalid IPv4 address\\". octets = ip.split(\'.\') # IPv4 address must be exactly 4 octets if len(octets) != 4: return \\"Invalid IPv4 address\\" for octet in octets: # Each octet must be a number, and in the range 0 to 255 if not octet.isdigit() or not (0 <= int(octet) <= 255): return \\"Invalid IPv4 address\\" # Each octet must not have leading zeros if len(octet) > 1 and octet[0] == \'0\': return \\"Invalid IPv4 address\\" return \\"Valid IPv4 address\\""},{"question":"Balanced Brackets Balanced Brackets: This problem involves checking if a given string has balanced brackets. Every opening bracket must have a corresponding closing bracket in the correct order. Task Your task is to write a function that takes a string as input and returns `true` if the brackets are balanced, and `false` otherwise. The brackets to be checked are `{}`, `[]`, and `()`. - A balanced string should return `true`, e.g., `{[()()]}` and `({[]})` are balanced strings. - An unbalanced string should return `false`, e.g., `{[(])}` and `([)]` are unbalanced strings. Ensure your solution accounts for edge cases, such as empty strings (which are considered balanced), and strings without any brackets (also balanced). Reference: [Stack data structures](https://en.wikipedia.org/wiki/Stack_(abstract_data_type)), [string parsing](https://en.wikipedia.org/wiki/String_processing).","solution":"def is_balanced(s: str) -> bool: Check if the input string has balanced brackets. Args: s (str): Input string to be checked. Returns: bool: True if the input string has balanced brackets, False otherwise. stack = [] brackets = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in brackets.values(): stack.append(char) elif char in brackets.keys(): if stack == [] or brackets[char] != stack.pop(): return False return stack == []"},{"question":"Write a function to compute the product of a list of numbers using recursion. The input will be a list of numbers, and the output should be a single number which is the product of all the numbers in the list. Your function should work for an empty list as well by returning 1, as the product of no numbers is considered 1 (the multiplicative identity). For example: ```python product([]) ``` should return: ```python 1 ``` Given another example: ```python product([4, 5, 6]) ``` should return: ```python 120 ``` In more detail, this calculation looks like: ``` 4 * 5 = 20 20 * 6 = 120 result: 120 ``` Note that the function should handle both positive and negative integers, as well as floating-point numbers. Additional Details: - Ensure your code handles edge cases such as an empty list. - Recursion should be the primary mechanism to solve this problem; avoid using loops or the reduce function from functools.","solution":"def product(numbers): Returns the product of a list of numbers using recursion. If the list is empty, returns 1. if not numbers: return 1 return numbers[0] * product(numbers[1:])"},{"question":"Overlapping Intervals Overview Given a list of intervals, the objective is to determine if any of the intervals overlap. An interval is represented as a tuple of two integers, where the first integer is the start time and the second integer is the end time. For example: (1, 5) - represents an interval from time 1 to time 5 Two intervals overlap if they share any time in common, excluding the endpoints. For example: (1, 5) and (4, 10) overlap (1, 5) and (5, 10) do not overlap Task Define a function `doIntervalsOverlap` that returns whether any intervals in the given list overlap. # Input - A list of tuples, where each tuple contains two integers. Each tuple represents an interval. # Output - A boolean value (`True`/`False`) indicating if any intervals overlap. # Function Signature ```python def doIntervalsOverlap(intervals: List[Tuple[int, int]]) -> bool: pass ``` # Examples ```python # Example 1: # The intervals (1, 3) and (2, 4) overlap assert doIntervalsOverlap([(1, 3), (2, 4)]) == True # Example 2: # The intervals (1, 2), (3, 4), and (5, 6) do not overlap assert doIntervalsOverlap([(1, 2), (3, 4), (5, 6)]) == False # Example 3: # The intervals (1, 2) and (2, 3) do not overlap assert doIntervalsOverlap([(1, 2), (2, 3)]) == False ```","solution":"from typing import List, Tuple def doIntervalsOverlap(intervals: List[Tuple[int, int]]) -> bool: Returns True if any intervals in the given list overlap, False otherwise. # Sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) # Iterate through the sorted intervals and check for overlap for i in range(1, len(intervals)): # Fetch previous and current intervals prev = intervals[i-1] curr = intervals[i] # If the end time of the previous interval is greater than the start time of the current interval if prev[1] > curr[0]: return True return False"},{"question":"You are given a matrix of integers \'matrix\' containing \'n\' rows and \'m\' columns, and an integer \'target\'. Your task is to find the position of the target in the matrix. Return the row and column indices of the target as a list [row, col]. The matrix follows these properties: 1. Integers in each row are sorted in ascending order from left to right. 2. The first integer of each row is greater than the last integer of the previous row. If the target is not found, return [-1, -1]. Example 1: Given matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 3 Return: [0, 1] Example 2: Given matrix = [ [1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 50] ] target = 13 Return: [-1, -1] Example 3: Given matrix = [ [1, 3] ] target = 3 Return: [0, 1]","solution":"def search_matrix(matrix, target): Find the position of the target in a sorted matrix. Parameters: matrix (list of list of int): The matrix of integers. target (int): The target integer. Returns: list: A list containing the row and column indices of the target or [-1, -1] if the target is not found. if not matrix or not matrix[0]: return [-1, -1] n, m = len(matrix), len(matrix[0]) left, right = 0, n * m - 1 while left <= right: mid = (left + right) // 2 mid_val = matrix[mid // m][mid % m] if mid_val == target: return [mid // m, mid % m] elif mid_val < target: left = mid + 1 else: right = mid - 1 return [-1, -1]"},{"question":"Task: You need to write a function **common_elements** that takes two lists as arguments and returns a list containing all the common elements between them, in the order they appear in the first list. If no common elements are found, the function should return an empty list. Examples: common_elements([1, 2, 3, 4], [2, 4, 6, 8]) should return: [2, 4] common_elements([\'a\', \'b\', \'c\', \'d\'], [\'x\', \'y\', \'a\', \'z\']) should return: [\'a\'] common_elements([100, 200, 300], [400, 500, 600]) should return: [] Notes: - The input lists can contain any type of elements. - Both input lists and the output list should preserve the order of elements.","solution":"def common_elements(list1, list2): Returns a list containing all the common elements between list1 and list2, in the order they appear in list1. return [element for element in list1 if element in list2]"},{"question":"# Background In a competition, each participant\'s score is recorded after every round. A participant\'s maximum score up to a given round is the highest score they have achieved in all the rounds up to and including that round. Given a list of scores, where each element represents a participant\'s score in a particular round, return a list of maximum scores up to and including each round. # Task: Write a function that takes a list of integers representing scores in each round and returns a list of integers representing the maximum scores up to and including each round. # Assumptions: - The input list will contain at least one element. - All scores will be non-negative integers. # Example: ```python Input: [2, 3, 1, 5, 4] Output: [2, 3, 3, 5, 5] ```","solution":"def max_scores_up_to_each_round(scores): Given a list of scores, return a list of the maximum scores up to and including each round. :param scores: List of integers representing scores in each round. :return: List of integers representing the maximum scores up to and including each round. max_up_to_now = [] current_max = scores[0] for score in scores: if score > current_max: current_max = score max_up_to_now.append(current_max) return max_up_to_now"},{"question":"Write a function ```python def find_anagrams(word_list) ``` that takes a list of words and groups them into anagram sets. Each set should contain words that are anagrams of each other. The function should return a list of these sets, ignoring case, and the order of words within the sets should be preserved from the original list. E.g ```python find_anagrams([\'listen\', \'silent\', \'enlist\', \'google\', \'goo\', \'elgoog\', \'inlets\']) # returns [[\'listen\', \'silent\', \'enlist\', \'inlets\'], [\'google\', \'elgoog\'], [\'goo\']] ``` An empty input list should return an empty list. Each set in the output list should contain words that are exact anagrams of each other.","solution":"from collections import defaultdict def find_anagrams(word_list): Groups words into sets of anagrams, ignoring case. Parameters: word_list (list of str): List of words to group into anagrams. Returns: list of list of str: A list of sets of anagrams. anagrams = defaultdict(list) for word in word_list: sorted_word = \'\'.join(sorted(word.lower())) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given a grid filled with characters. Your task is to count the number of distinct \\"islands\\" in the grid. An island is defined as a group of connected non-empty cells (\'1\') surrounded by water (\'0\'). Cells are considered connected if they are adjacent horizontally or vertically (but not diagonally). For example, the following grid has two distinct islands: ``` 11110 11010 11000 00000 ``` and this grid has five distinct islands: ``` 11000 11000 00100 00001 00011 ``` Write a function `count_islands(grid)` which takes a list of strings representing the grid and returns the number of distinct islands. **Function Signature**: ``` def count_islands(grid: List[str]) -> int: pass ``` **Input**: - grid: A list of strings, where each string is of equal length consisting of \'0\'s and \'1\'s representing the grid. **Output**: - The function should return an integer, the number of distinct islands. **Constraints**: - The number of rows and columns in the grid will not exceed 100. - The function should run efficiently within these constraints. **Example**: ``` assert count_islands([ \\"11110\\", \\"11010\\", \\"11000\\", \\"00000\\" ]) == 1 assert count_islands([ \\"11000\\", \\"11000\\", \\"00100\\", \\"00001\\", \\"00011\\" ]) == 4 ```","solution":"from typing import List def count_islands(grid: List[str]) -> int: if not grid: return 0 num_rows, num_cols = len(grid), len(grid[0]) visited = [[False]*num_cols for _ in range(num_rows)] def dfs(r, c): if r < 0 or c < 0 or r >= num_rows or c >= num_cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True dfs(r + 1, c) dfs(r - 1, c) dfs(r, c + 1) dfs(r, c - 1) island_count = 0 for r in range(num_rows): for c in range(num_cols): if grid[r][c] == \'1\' and not visited[r][c]: island_count += 1 dfs(r, c) return island_count"},{"question":"Write a function that determines if a given string is an anagram of another string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once. Assume the comparison is case-insensitive and ignore spaces, punctuation, and special characters. The function should take two strings as input and return a boolean indicating whether they are anagrams. Examples can be found in the test fixture.","solution":"import re def are_anagrams(str1, str2): Determines if str1 and str2 are anagrams of each other, ignoring case, spaces, and punctuation. # Remove non-alphabetic characters and convert to lowercase clean_str1 = re.sub(r\'[^a-zA-Z]\', \'\', str1).lower() clean_str2 = re.sub(r\'[^a-zA-Z]\', \'\', str2).lower() # Check if sorted cleaned strings are equal return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Write a function that determines the minimum number of steps required to transform a given string s1 into another string s2. You can perform three types of operations on the string: 1. Insert a character. 2. Remove a character. 3. Replace a character. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated strings s1 and s2. Constraints 1 <= T <= 100 1 <= length(s1), length(s2) <= 100 Output Format For each test case, print a single integer representing the minimum number of operations required to transform s1 into s2. Sample Input 2 horse ros intention execution Sample Output 3 5 Explanation In the 1st testcase, we can transform \\"horse\\" to \\"ros\\" with the following 3 operations: 1. Remove \'h\': \\"horse\\" -> \\"orse\\" 2. Replace \'o\' with \'r\': \\"orse\\" -> \\"rrse\\" 3. Remove \'r\': \\"rrse\\" -> \\"rse\\" In the 2nd testcase, we can transform \\"intention\\" to \\"execution\\" with the following 5 operations: 1. Replace \'i\' with \'e\': \\"intention\\" -> \\"entention\\" 2. Replace \'n\' with \'x\': \\"entention\\" -> \\"exenttion\\" 3. Replace \'t\' with \'c\': \\"exenttion\\" -> \\"excnetion\\" 4. Remove \'n\': \\"excnetion\\" -> \\"excetion\\" 5. Insert \'u\': \\"excetion\\" -> \\"execution\\"","solution":"def min_steps(s1, s2): Returns the minimum number of steps required to transform s1 into s2. # Length of the strings m, n = len(s1), len(s2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table with base cases for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Insert all characters of s2 elif j == 0: dp[i][j] = i # Remove all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def transform_strings(test_cases): Given a list of tuples, each containing two strings (s1, s2), return a list of the minimum number of operations required to transform s1 into s2. results = [] for s1, s2 in test_cases: results.append(min_steps(s1, s2)) return results"},{"question":"You are given an array of positive integers representing the heights of N people standing in a line. Each person wants to move to a position where they can see the front without their view being blocked. A person can see the front if there is no person taller than them standing in front of them. Specifically, a person at index i can see the front if for all j < i, height[j] < height[i]. Your task is to determine the minimum number of swaps needed to rearrange the people such that everyone can see the front. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N representing the number of people. - The second line contains N positive integers representing the heights of the people in the initial order. -----Output----- For each test case, print a single line containing one integer - the minimum number of swaps required so that everyone can see the front. -----Constraints----- - 1 le T le 10^3 - 1 le N le 10^3 - 1 le text{heights}[i] le 10^6 -----Example Input----- 3 4 4 1 3 2 5 5 1 2 3 4 7 2 3 4 5 6 7 8 -----Example Output----- 2 4 0 -----Explanation----- Example case 1: We can swap 4 and 1, then 3 and 2. This gives the order [1, 2, 3, 4], and everyone can see the front. Example case 2: We can swap 5 with 1, then 5 with 2, 5 with 3, and finally 5 with 4. This gives the order [1, 2, 3, 4, 5]. Example case 3: The array is already sorted in ascending order, so no swaps are necessary.","solution":"def minimum_swaps_to_see_front(T, test_cases): Given T test cases with each test case containing the number N and a list of heights, returns a list of minimum number of swaps required for each test case such that everyone can see the front. results = [] for case in test_cases: N, heights = case sorted_heights = sorted(heights) swaps = 0 for i in range(N): while heights[i] != sorted_heights[i]: swap_idx = heights.index(sorted_heights[i]) heights[i], heights[swap_idx] = heights[swap_idx], heights[i] swaps += 1 results.append(swaps) return results"},{"question":"# Task A string is considered \'balanced\' if all characters appear the same number of times. Write a function that determines whether a given string is balanced. # Example For `s = \\"aabbcc\\"`, the result should be `True`. For `s = \\"aabbccc\\"`, the result should be `False`. For `s = \\"abcdabcd\\"`, the result should be `True`. # Input/Output - `[input]` string `s` The input string containing only lowercase alphabetical characters. `1 <= len(s) <= 10^5` - `[output]` a boolean Returns `True` if the string is balanced, otherwise returns `False`.","solution":"def is_balanced(s): Determines if all characters in the input string appear the same number of times. Args: s (str): The input string containing only lowercase alphabetical characters. Returns: bool: True if the string is balanced; otherwise, False. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Get the frequency of the first character to compare with others initial_count = next(iter(char_count.values())) # Check if all characters have the same frequency for count in char_count.values(): if count != initial_count: return False return True"},{"question":"You are given a list of `n` integers representing the heights of students standing in a line in a playground. The students are about to participate in a lining-up activity, where each student is assigned a position in the line as per a specified new order. You are given a list `order` of the same length with distinct integers from `0` to `n-1` inclusive. This list `order` represents the new positions of the students in the line, such that the i-th student\'s new position in the line is `order[i]`. Your task is to return a new list representing the heights of students in their new positions after rearrangement as per the `order` list. Example 1: Input: heights = [150, 160, 155, 165], order = [2, 0, 3, 1] Output: [160, 165, 150, 155] Explanation: The new positions of the students will be: Student with height 150 moves to position 2. Student with height 160 moves to position 0. Student with height 155 moves to position 3. Student with height 165 moves to position 1. Example 2: Input: heights = [170, 180, 160], order = [1, 2, 0] Output: [160, 170, 180] Example 3: Input: heights = [130, 120, 140, 110], order = [3, 2, 1, 0] Output: [110, 140, 120, 130] Constraints: * n == order.length == heights.length * 1 <= n <= 100 * 100 <= heights[i] <= 200 * 0 <= order[i] < n","solution":"def rearrange_heights(heights, order): Rearranges the heights of students according to the new positions specified in the order list. :param heights: List of integers representing the heights of students. :param order: List of integers representing the new positions of the students. :return: List of integers representing the heights of students in their new order. n = len(heights) new_heights = [0] * n for i in range(n): new_heights[order[i]] = heights[i] return new_heights"},{"question":"Given a rectangular grid of size R times C, your task is to find the number of distinct islands present in the grid. An island is defined as a group of contiguous cells containing the value 1, and contiguous cells are those that share an edge (top, bottom, left, or right). Two islands are considered distinct if and only if their shapes (relative positions of their 1\'s) are different. -----Input:----- - First line will contain T, the number of test cases. - For each test case: - The first line contains two space-separated integers R and C indicating the dimensions of the grid. - The next R lines each contain C space-separated integers representing the grid. -----Output:----- For each test case, output a single line containing the number of distinct islands. -----Constraints:----- - 1 leq T leq 10 - 1 leq R, C leq 50 - Grid elements are either 0 or 1 -----Sample Input:----- 2 3 3 1 0 1 0 1 0 1 0 1 4 5 1 1 0 0 0 1 0 0 1 1 0 0 0 0 0 1 0 1 1 0 -----Sample Output:----- 1 3 -----Explanation:----- In the first test case, there is only one distinct island shape. In the second test case, the three islands have distinct shapes and are thus considered different.","solution":"from typing import List, Tuple def num_distinct_islands(grid: List[List[int]]) -> int: def dfs(r, c, direction): if 0 <= r < R and 0 <= c < C and grid[r][c] == 1: grid[r][c] = -1 # Mark the cell visited shape.append(direction) dfs(r - 1, c, \'u\') # up dfs(r + 1, c, \'d\') # down dfs(r, c - 1, \'l\') # left dfs(r, c + 1, \'r\') # right shape.append(\'b\') # backtrack distinct_islands = set() R, C = len(grid), len(grid[0]) for r in range(R): for c in range(C): if grid[r][c] == 1: shape = [] dfs(r, c, \'o\') # origin distinct_islands.add(tuple(shape)) return len(distinct_islands) def find_distinct_islands(t: int, test_cases: List[Tuple[int, int, List[List[int]]]]) -> List[int]: results = [] for R, C, grid in test_cases: results.append(num_distinct_islands(grid)) return results"},{"question":"You are tasked with developing an event scheduling system for a new conference center. The conference center hosts multiple events every day. Each event has a start time and an end time, and no two events can overlap in the same room. Your job is to determine the minimum number of rooms required to host all events scheduled for a given day. You are given a list of events, each represented by a pair of integers [start, end]. Your task is to write a function that returns the minimum number of rooms required. Function Signature: ```python def minConferenceRooms(events: List[Tuple[int, int]]) -> int: pass ``` -----Input----- - You will be given multiple test cases. - Each test case starts with an integer T (number of test cases, 1 <= T <= 100). - For each test case, the first line contains an integer N (number of events, 1 <= N <= 10^5). - The next N lines each contain two integers start and end (0 <= start < end <= 10^9) representing the start and end times of an event. -----Output----- For each test case, output a single line containing the minimum number of rooms required to host all events. -----Example----- Input: 2 3 1 4 2 5 7 8 4 0 30 5 10 15 20 30 35 Output: 2 2 Explanation: - In the first test case, we need two rooms: 1. One room for the event (1, 4) 2. Another room for the event (2, 5) - The event (7, 8) can be accommodated in either of the rooms after previous events are finished. - In the second test case, we also need two rooms: 1. One room for events (0, 30) and (30, 35) 2. Another room for overlapping events (5, 10) and (15, 20)","solution":"from typing import List, Tuple def minConferenceRooms(events: List[Tuple[int, int]]) -> int: if not events: return 0 start_times = sorted(event[0] for event in events) end_times = sorted(event[1] for event in events) s_ptr, e_ptr = 0, 0 used_rooms = 0 max_rooms = 0 while s_ptr < len(events): if start_times[s_ptr] < end_times[e_ptr]: used_rooms += 1 s_ptr += 1 else: used_rooms -= 1 e_ptr += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms"},{"question":"You are participating in a robot programming competition where your robot needs to navigate a grid. The grid is represented as a 2D array of size `m x n`. Each cell in the grid can either be free (represented by a 0) or contain an obstacle (represented by a 1). The robot can only move right or down from any given cell. Your task is to write a function that calculates the number of unique paths the robot can take to reach the bottom-right corner of the grid from the top-left corner. The robot cannot move into cells containing obstacles. Function Signature ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: ``` Input - `grid`: A 2D list of integers representing the grid. `1 <= m, n <= 100`. Output - An integer representing the number of unique paths from the top-left corner to the bottom-right corner. Example ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths_with_obstacles(grid)) # Output: 2 ``` Explanation In this example, there are two paths the robot can take: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Note - If the top-left or bottom-right cell is an obstacle, there is no valid path.","solution":"from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) # If the start or end point is an obstacle, return 0 as there is no valid path if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Create a DP table to store the number of unique paths to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 # Fill in the values for the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill in the values for the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill in the DP table by checking from top to bottom, left to right for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Create a program that simulates a vending machine. The machine should have a selection of products, each with a unique product code, price, and quantity in stock. The vending machine should handle the following operations: 1. Display the available products along with their prices and quantities. 2. Allow a user to select a product by entering its product code. 3. Prompt the user to insert money. The user can insert bills or coins. 4. If the inserted money is less than the product price, prompt the user to insert more money. 5. If the inserted money is equal to or more than the product price, dispense the product, adjust the quantity in stock, and return any change. 6. If the selected product is out of stock, notify the user and allow them to select another product or get a refund. 7. Maintain a count of the total money inserted into the machine. Write a class `VendingMachine` that manages the operations listed above. You may assume the below format for the products and their details: ```python products = { \\"A1\\": {\\"name\\": \\"Soda\\", \\"price\\": 1.25, \\"quantity\\": 10}, \\"A2\\": {\\"name\\": \\"Chips\\", \\"price\\": 0.75, \\"quantity\\": 5}, \\"A3\\": {\\"name\\": \\"Candy\\", \\"price\\": 0.65, \\"quantity\\": 8} } ``` The class should handle input for selecting products, inserting money, and should display appropriate messages at each step. You may also include helper methods as needed. Example Usage: ```python vm = VendingMachine(products) vm.display_products() vm.select_product(\\"A1\\") vm.insert_money(1.00) vm.insert_money(0.50) ``` Expected Output: ``` Products available: Code: A1, Name: Soda, Price: 1.25, Quantity: 10 Code: A2, Name: Chips, Price: 0.75, Quantity: 5 Code: A3, Name: Candy, Price: 0.65, Quantity: 8 Selected product: Soda. Price: 1.25 Inserted 1.00. Total inserted: 1.00 Inserted 0.50. Total inserted: 1.50 Dispensing product: Soda. Returning change: 0.25 ```","solution":"class VendingMachine: def __init__(self, products): self.products = products self.current_selection = None self.total_inserted = 0.0 self.total_money = 0.0 def display_products(self): print(\\"Products available:\\") for code, details in self.products.items(): print(f\\"Code: {code}, Name: {details[\'name\']}, Price: {details[\'price\']:.2f}, Quantity: {details[\'quantity\']}\\") def select_product(self, code): if code in self.products: self.current_selection = code product = self.products[code] if product[\'quantity\'] > 0: print(f\\"Selected product: {product[\'name\']}. Price: {product[\'price\']:.2f}\\") else: print(f\\"Sorry, {product[\'name\']} is out of stock.\\") self.current_selection = None else: print(\\"Invalid product code.\\") def insert_money(self, amount): if self.current_selection: self.total_inserted += amount print(f\\"Inserted {amount:.2f}. Total inserted: {self.total_inserted:.2f}\\") self.dispense_product() def dispense_product(self): if self.current_selection: product = self.products[self.current_selection] if self.total_inserted >= product[\'price\']: change = self.total_inserted - product[\'price\'] product[\'quantity\'] -= 1 self.total_money += product[\'price\'] print(f\\"Dispensing product: {product[\'name\']}. Returning change: {change:.2f}\\") self.total_inserted = 0.0 self.current_selection = None else: print(f\\"Inserted money is less than the product price. Insert more money.\\") def refund(self): if self.total_inserted > 0: print(f\\"Refunding {self.total_inserted:.2f}\\") self.total_inserted = 0.0 # Example products products = { \\"A1\\": {\\"name\\": \\"Soda\\", \\"price\\": 1.25, \\"quantity\\": 10}, \\"A2\\": {\\"name\\": \\"Chips\\", \\"price\\": 0.75, \\"quantity\\": 5}, \\"A3\\": {\\"name\\": \\"Candy\\", \\"price\\": 0.65, \\"quantity\\": 8} }"},{"question":"Implement a function to determine if a given string can be used to form a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. The function should take a single argument which is a string containing only lowercase alphabets and return a boolean value indicating whether the string can be rearranged to form a palindrome. # Requirements: 1. The function should ignore spaces and punctuation. 2. The function should not be case sensitive. 3. Return `True` if the string can be rearranged to form a palindrome, otherwise return `False`. Examples ``` \\"racecar\\" ==> True \\"civic\\" ==> True \\"ivicc\\" ==> True \\"aabb\\" ==> True \\"abc\\" ==> False \\"ab\\" ==> False \\"aba\\" ==> True ``` Note: - A string can be rearranged to form a palindrome if at most one character appears an odd number of times.","solution":"def can_form_palindrome(s): Determine if the given string can be rearranged to form a palindrome. :param s: str :return: bool from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A counter for the odd frequency characters odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # If more than one character has an odd count, it cannot form a palindrome if odd_count > 1: return False return True"},{"question":"Given a 2D matrix of integers, write a function that finds the maximum sum of any hourglass shape within the matrix. An hourglass is defined as a subset of values with the following form: ``` a b c d e f g ``` For example, consider the following 4x4 matrix: ``` 1 2 3 0 0 4 0 0 2 1 3 4 1 2 1 5 ``` The hourglass sums are as follows: ``` Hourglass 1: 1 2 3 4 2 1 3 Sum: 1 + 2 + 3 + 4 + 2 + 1 + 3 = 16 Hourglass 2: 2 3 0 0 1 3 4 Sum: 2 + 3 + 0 + 0 + 1 + 3 + 4 = 13 Hourglass 3: 3 0 0 0 3 4 5 Sum: 3 + 0 + 0 + 0 + 3 + 4 + 5 = 15 ``` In this example, the maximum hourglass sum is 16. Write a function `hourglass_sum(matrix)` that takes a 2D list of integers as input and returns the maximum hourglass sum found in the matrix. Assume the dimensions of the matrix are at least 3x3. ```python def hourglass_sum(matrix): # Your code here ``` Example: ```python matrix = [ [1, 2, 3, 0], [0, 4, 0, 0], [2, 1, 3, 4], [1, 2, 1, 5] ] print(hourglass_sum(matrix)) # Output: 16 ``` Features of the random tests: - Number of tests = 50 - Matrix dimensions can range from 3x3 to 10x10","solution":"def hourglass_sum(matrix): Returns the maximum hourglass sum in a given 2D matrix. An hourglass is defined as: a b c d e f g rows = len(matrix) cols = len(matrix[0]) max_sum = float(\'-inf\') for i in range(rows - 2): for j in range(cols - 2): current_sum = ( matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j+1] + matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2] ) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Inventor Anna has developed a new recipe that combines packaged candies and fruits. Each package of candies contains exactly 4 candies and 1 wrapper, each fruit contains exactly 1 fruit and 1 stem. She has invited a large group of friends to taste her new recipe at her home, so she has a large amount of candies and fruits but for some reason, her inventory is incomplete. Her inventory can only tell her the total number of candies, total number of wrappers, and total number of stems. Your task is to write a function: ```Python calculate_inventory(candies, wrappers, stems) ``` ```Csharp Dictionary calculate_inventory(int candies, int wrappers, int stems) ``` that returns a dictionary: ```python {\\"packages\\" : packages_count, \\"fruit\\" : fruits_count} ``` ```Csharp new Dictionary(){{\\"packages\\", packages_count},{\\"fruit\\", fruits_count}} ``` Parameters `candies, wrappers, stems` are integers, all tests have valid input. Examples: ```python calculate_inventory(40, 10, 8); # Should return {\\"fruit\\" : 8, \\"packages\\" : 10} calculate_inventory(32, 8, 15); # Should return {\\"fruit\\" : 15, \\"packages\\" : 8} ``` ```Csharp calculate_inventory(40, 10, 8); // Should return Dictionary(){{\\"fruit\\", 8},{\\"packages\\", 10}} calculate_inventory(32, 8, 15); // Should return Dictionary(){{\\"fruit\\", 15},{\\"packages\\", 8}} ```","solution":"def calculate_inventory(candies, wrappers, stems): Returns a dictionary with the count of candy packages and fruits. :param candies: total number of candies :param wrappers: total number of wrappers :param stems: total number of stems :return: dictionary with \'packages\' and \'fruit\' # Since each package contains exactly 4 candies and 1 wrapper packages = wrappers # Each fruit contains exactly 1 stem fruits = stems return {\\"packages\\": packages, \\"fruit\\": fruits}"},{"question":"Alice likes to play a game where she flips two coins. Each coin can either land on heads (H) or tails (T). If the two coins land on heads and tails (in either order), Alice wins the game. Write a function that takes the outcomes of the two coin flips as input (each being either \'H\' or \'T\') and returns true if Alice wins the game and false if she doesn\'t.","solution":"def did_alice_win(coin1, coin2): Returns True if Alice wins the game, i.e., one coin is heads (H) and the other is tails (T). Otherwise, returns False. :param str coin1: Outcome of the first coin flip (\'H\' or \'T\'). :param str coin2: Outcome of the second coin flip (\'H\' or \'T\'). :return: Whether Alice wins the game. :rtype: bool return (coin1 == \'H\' and coin2 == \'T\') or (coin1 == \'T\' and coin2 == \'H\')"},{"question":"Write a function that checks the validity of a given password based on the criteria mentioned below and returns a relevant message. The password is considered valid if: 1. The password length should be between 8 and 15 characters. 2. The password should contain at least one uppercase letter (A-Z). 3. The password should contain at least one lowercase letter (a-z). 4. The password should contain at least one digit (0-9). 5. The password should contain at least one special character from the set: #, @, !, &, % If the password does not meet one or more of the above criteria, return a string showing which criteria were not met. For example, if the password does not meet criteria 2 and 3, return \\"Password must contain at least one uppercase letter and one lowercase letter.\\" Ensure that the error messages: - Mention all unmet criteria in the order they appear above. - Use proper grammar and punctuation. - Combine multiple errors into a single, readable message. If the password is valid, return \\"Password is valid.\\" Write a function `check_password` that takes a string as input and returns a string as described above.","solution":"import re def check_password(password): Function to check the validity of a password based on specific criteria. Args: password (str): The password to check. Returns: str: A string indicating whether the password is valid or what criteria were not met. errors = [] if not (8 <= len(password) <= 15): errors.append(\\"password length should be between 8 and 15 characters\\") if not re.search(r\'[A-Z]\', password): errors.append(\\"contain at least one uppercase letter (A-Z)\\") if not re.search(r\'[a-z]\', password): errors.append(\\"contain at least one lowercase letter (a-z)\\") if not re.search(r\'[0-9]\', password): errors.append(\\"contain at least one digit (0-9)\\") if not re.search(r\'[#@!&%]\', password): errors.append(\\"contain at least one special character from the set: #, @, !, &, %\\") if errors: return \\"Password must \\" + \' and \'.join(errors) + \'.\' return \\"Password is valid.\\""},{"question":"Task Write a function `get_weighted_average(grades)` that calculates the weighted average of a list of grades. The input is a list of tuples where each tuple contains a grade and its corresponding weight. The function should return the weighted average rounded to two decimal places. The weighted average is calculated by summing up the product of each grade and its weight and then dividing by the sum of the weights. # Input - A list of tuples, `grades`, where each tuple contains: - An integer representing the grade (0 <= grade <= 100) - An integer representing the weight (1 <= weight <= 10) # Output - A float representing the weighted average of the grades, rounded to two decimal places. # Examples ```python get_weighted_average([(90, 1), (80, 2), (70, 3)]) # Output: 78.33 get_weighted_average([(50, 1), (50, 1), (50, 1)]) # Output: 50.00 get_weighted_average([(95, 1), (85, 2)]) # Output: 88.33 ``` # Constraints - You can assume the list of grades will have at least one element. - Ensure the function handles cases where the list of grades varies in size and weight distribution accurately.","solution":"def get_weighted_average(grades): Calculate the weighted average of a list of grades. Parameters: grades (list of tuples): List of tuples where each tuple contains a grade and its corresponding weight. Returns: float: The weighted average, rounded to two decimal places. total_weighted_score = 0 total_weight = 0 for grade, weight in grades: total_weighted_score += grade * weight total_weight += weight weighted_average = total_weighted_score / total_weight return round(weighted_average, 2)"},{"question":"Create a function `sequences(start, step, length, type)` that generates a series of numbers based on the given type. The function parameters are: - `start`: The first number in the sequence. - `step`: The difference between consecutive numbers. - `length`: The total number of numbers in the sequence. - `type`: The type of sequence to generate. It can be one of `\\"arithmetic\\"`, `\\"geometric\\"`, `\\"fibonacci\\"`. Types of sequences: - `\\"arithmetic\\"`: Each number is the sum of the previous number and `step`. - `\\"geometric\\"`: Each number is the product of the previous number and `step`. - `\\"fibonacci\\"`: Each number is the sum of the previous two numbers. The first two numbers in the sequence are `start` and `step`. Function signature: ```python def sequences(start, step, length, type): # Your code here pass ``` Examples: ```python sequences(2, 3, 5, \\"arithmetic\\") -> [2, 5, 8, 11, 14] sequences(2, 3, 5, \\"geometric\\") -> [2, 6, 18, 54, 162] sequences(0, 1, 5, \\"fibonacci\\") -> [0, 1, 1, 2, 3] ``` Note: - For the `\\"arithmetic\\"` and `\\"geometric\\"` types, if `length` is 0, return an empty list. - For the `\\"fibonacci\\"` type, the `start` and `step` parameters represent the first two numbers in the Fibonacci sequence respectively. If `length` is 0 or 1, return the corresponding sublist from the sequence\'s start. - Ensure the function handles edge cases appropriately such as `length` being negative or zero.","solution":"def sequences(start, step, length, type): if length <= 0: return [] if type == \\"arithmetic\\": return [start + i * step for i in range(length)] elif type == \\"geometric\\": return [start * (step ** i) for i in range(length)] elif type == \\"fibonacci\\": if length == 1: return [start] sequence = [start, step] for i in range(2, length): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence[:length] else: raise ValueError(\\"Invalid sequence type\\")"},{"question":"A social media platform has n users and m friendships. Each user is represented by a unique integer id from 1 to n. A friendship between users i and j is represented as an undirected edge between nodes i and j in a graph. The platform wants to identify all possible friendship triangles, which is a set of three users (i, j, k) such that each pair among (i, j, k) is friends with each other. Your task is to write a program to count the number of these friendship triangles. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 500 000) representing the number of users and friendships respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) meaning there is a friendship between user u and user v. There can be multiple friendships between the same pair of users, but they should be considered just once for the purpose of this task. -----Output----- Print a single integer representing the number of friendship triangles. -----Examples----- Input 5 6 1 2 2 3 3 1 4 5 2 1 1 3 Output 1 Input 4 4 1 2 2 3 3 4 4 1 Output 0 -----Explanation----- In the first example, there is only one unique triangle among users (1, 2, 3). In the second example, there are no triangles formed among the users.","solution":"def count_friendship_triangles(n, m, friendships): from collections import defaultdict graph = defaultdict(set) # Build the graph for u, v in friendships: graph[u].add(v) graph[v].add(u) triangle_count = 0 # Check for triangles for i in range(1, n + 1): for j in graph[i]: if j > i: # Ensure we only count once for k in graph[j]: if k > j and k in graph[i]: triangle_count += 1 return triangle_count"},{"question":"You are given a list of integers `nums` representing an altitude map where `nums[i]` is the altitude at index `i`. The rainwater that can be trapped at index `i` is the amount of water that can be stored on it, considering the altitudes to the left and right of it. Write a function to calculate the maximum amount of rainwater that can be trapped after raining. Example 1: Input: nums = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (where the width of each bar is 1) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rainwater are being trapped. Example 2: Input: nums = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map is represented by array [4,2,0,3,2,5]. In this case, 9 units of rainwater are being trapped. Example 3: Input: nums = [2,0,2] Output: 2 Explanation: The above elevation map is represented by array [2,0,2]. In this case, 2 units of rainwater are being trapped. Constraints: - 1 <= nums.length <= 20000 - 0 <= nums[i] <= 1000","solution":"def trap_rainwater(nums): if not nums: return 0 n = len(nums) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = nums[0] for i in range(1, n): left_max[i] = max(left_max[i-1], nums[i]) right_max[n-1] = nums[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], nums[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - nums[i] return water_trapped"},{"question":"Write a function findMaxLength that takes as parameter a string (s). The function should return the length of the longest substring without any repeating characters. The input string will only contain lowercase English letters and will have a length between 1 and 10^4. findMaxLength(\\"abcabcbb\\") should return 3 because the longest substring without repeating characters is \\"abc\\" which has a length of 3. findMaxLength(\\"bbbbb\\") should return 1 because the longest substring without repeating characters is \\"b\\" which has a length of 1. findMaxLength(\\"pwwkew\\") should return 3 because the longest substring without repeating characters is \\"wke\\" which has a length of 3.","solution":"def findMaxLength(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): The input string containing only lowercase English letters. Returns: int: The length of the longest substring without repeating characters. char_map = {} max_length = 0 start = 0 for end, char in enumerate(s): if char in char_map: start = max(start, char_map[char] + 1) char_map[char] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A retail store is having a promotional sale for N days. Each day, they have a different discount rate. The store keeps track of the number of customers visiting each day and records the sales revenue for each day. The total revenue for a day is computed as the product of the number of customers and the discount rate. Your task is to determine the day with the highest total revenue. If there are multiple days with the same revenue, return the earliest day. Note that the day number starts from 1. For example, suppose N is 5, the customers visiting each day are [100, 200, 150, 180, 130], and the discount rates are [10, 5, 20, 15, 30]. The revenues for the 5 days are as follows: Day 1: 100 * 10 = 1000 Day 2: 200 * 5 = 1000 Day 3: 150 * 20 = 3000 Day 4: 180 * 15 = 2700 Day 5: 130 * 30 = 3900 Thus, the day with the highest revenue is day 5. -----Input format----- Line 1: A single integer, N. Line 2: N space-separated integers, the number of customers visiting each day. Line 3: N space-separated integers, the discount rates for each day. -----Output format----- A single integer, the earliest day with the highest total revenue. -----Sample input----- 5 100 200 150 180 130 10 5 20 15 30 -----Sample output----- 5 -----Test data----- - Subtask 1 (30 marks) : 1 ≤ N ≤ 1,000. - Subtask 2 (70 marks) : 1 ≤ N ≤ 200,000. -----Note----- The answer might not fit in a variable of type int. We recommend that type long long be used for computing all revenues. If you use printf and scanf, you can use %lld for long long.","solution":"def highest_revenue_day(N, customers, discount_rates): Returns the earliest day with the highest total revenue. Parameters: N (int): Number of days. customers (list): List of integers representing the number of customers visiting each day. discount_rates (list): List of integers representing the discount rates for each day. Returns: int: The earliest day with the highest total revenue. max_revenue = 0 best_day = 0 for i in range(N): revenue = customers[i] * discount_rates[i] if revenue > max_revenue: max_revenue = revenue best_day = i + 1 return best_day"},{"question":"Write a function that takes an array of integers and returns a new array containing only the prime numbers from the original array. If no prime numbers are found, the function should return an empty array. The function should filter the list in such a way that preserves the original order of the elements that are prime numbers. Examples: ```python filter_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # [2, 3, 5, 7] filter_primes([10, 15, 20, 21, 22]) # [] filter_primes([29, 37, 41, 43]) # [29, 37, 41, 43] filter_primes([0, 1, 5, 10, 17]) # [5, 17] ``` Consider edge cases such as negative numbers and zero, which are not prime, and arrays containing only non-prime numbers. The function should handle these gracefully.","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(arr): Return a new array containing only the prime numbers from the original array. return [num for num in arr if is_prime(num)]"},{"question":"You are given an array of N integers. You need to determine the number of unique pairs (i, j) such that i < j and the sum of A[i] and A[j] is even. -----Input----- The first line contains an integer T, the number of test cases. Each test case contains two lines. The first line of a test case contains an integer N, the number of elements in the array. The second line contains N space-separated integers, representing the array elements. -----Output----- For each test case, print the required number of unique pairs in one line. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ A[i] ≤ 109 -----Example----- Input: 2 4 1 2 3 4 3 2 4 6 Output: 2 3 -----Explanation----- For the first test case, the valid pairs are (1,3) and (2,4) with sums 4 and 6 respectively, both of which are even. For the second test case, all pairs (2,4), (2,6), and (4,6) have even sums.","solution":"def count_even_sum_pairs(test_cases): For each test case, this function calculates the number of unique pairs (i, j) such that i < j and the sum of A[i] and A[j] is even. results = [] for case in test_cases: N, array = case odd_count = sum(1 for x in array if x % 2 != 0) even_count = N - odd_count # Number of pairs is combination of choosing two from odd numbers and two from even numbers even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 results.append(even_pairs + odd_pairs) return results # Function to process the input and output in simplified form def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) test_cases.append((N, array)) index += 2 return count_even_sum_pairs(test_cases)"},{"question":"# Counting Unique Elements in a List You are given a list of elements. Your task is to write a function that counts the number of unique elements in the list. Input A single list containing integers. The list may contain duplicates. Output Return an integer representing the count of unique elements in the list. Examples ```python count_unique_elements([1, 2, 2, 3, 4, 4, 5]) => 5 count_unique_elements([7, 8, 9, 10, 7, 8, 11]) => 5 count_unique_elements([1, 1, 1, 1, 1, 1]) => 1 ``` Notes * The elements in the input list lie within the range of [-10^6, 10^6]. * The length of the list can be up to 10^5.","solution":"def count_unique_elements(lst): Returns the number of unique elements in the list. return len(set(lst))"},{"question":"You are given a string S consisting of lowercase Latin letters. You need to determine the length of the longest substring that contains only unique characters. -----Input:----- - The first line contains an integer T, the number of test cases. - The next T lines contain a string S. -----Output:----- For each test case, output a single integer representing the length of the longest substring with all unique characters. -----Constraints:----- - 1 leq T leq 100 - 1 leq |S| leq 1000 -----Sample Input:----- 3 abcabcbb bbbbb pwwkew -----Sample Output:----- 3 1 3 -----Explanation:----- In the first case, the longest substring that has all unique characters is \\"abc\\", which has a length of 3. In the second case, the longest substring is \\"b\\", which has a length of 1. In the third case, the longest substring is \\"wke\\", which has a length of 3.","solution":"def longest_unique_substring_length(s): Determine the length of the longest substring that contains only unique characters. n = len(s) char_index = {} max_len = 0 start = 0 for i in range(n): if s[i] in char_index and start <= char_index[s[i]]: start = char_index[s[i]] + 1 else: max_len = max(max_len, i - start + 1) char_index[s[i]] = i return max_len def process_test_cases(t, test_cases): Process multiple test cases. t: number of test cases. test_cases: list of test case strings. results = [] for case in test_cases: results.append(longest_unique_substring_length(case)) return results"},{"question":"Task Write a function that counts the number of unique paths for a robot on a grid. Objective Implement a function `uniquePaths(m, n)` that calculates the number of unique paths a robot can take to reach from the top-left corner to the bottom-right corner of an `m x n` grid. The robot can only move either down or right at any point in time. Guidelines # Input - `m` (an integer): the number of rows in the grid. - `n` (an integer): the number of columns in the grid. # Output - An integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Constraints - The function should handle grids as small as `1x1` and as large as `100x100`. - Execution time should be efficient enough for the upper limit grids. # Example ```python print(uniquePaths(3, 7)) # Output: 28 print(uniquePaths(3, 2)) # Output: 3 print(uniquePaths(1, 1)) # Output: 1 print(uniquePaths(100, 100)) # Expect a large number ``` # Hints 1. Use dynamic programming. 2. Think about how the number of paths to each cell in the grid can be determined by the number of paths to the cells directly above and to the left of it.","solution":"def uniquePaths(m, n): Returns the number of unique paths for a robot to move from the top-left corner to the bottom-right corner of an m x n grid. :param m: Number of rows in the grid :param n: Number of columns in the grid :return: Number of unique paths from top-left to bottom-right corner if m == 1 or n == 1: return 1 dp = [[1] * n for _ in range(m)] for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an array of integers representing a list of tasks required to be completed in a given order, and each task has a specific cost associated with it. However, some tasks are mandatory and must be performed, and others are optional. Each task has a cost and a boolean flag indicating whether it is mandatory (True) or optional (False). Write a function ```optimize_schedule(tasks)``` that takes in a list of tuples where each tuple represents a task. Each tuple will have the form ```(cost, mandatory)```, where ```cost``` is a non-negative integer and ```mandatory``` is a boolean. The goal is to return a tuple containing the list of mandatory tasks and the list of optional tasks such that the total cost of mandatory tasks does not exceed a given threshold. The threshold will be given an integer. Example: ```python tasks = [(10, True), (15, False), (20, True), (5, False), (30, True)] threshold = 40 ``` One possible solution would be: ```python mandatory = [(10, True), (20, True)] optional = [(15, False), (5, False), (30, True)] ``` The function should ensure that the sum of costs of the mandatory tasks is less than or equal to the threshold, and the lists provided in the return are correctly partitioned into mandatory and optional tasks. Constraints: - The length of tasks list is `<= 50`. - Each cost is in the range `0 <= cost <= 1000`. - Total mandatory tasks\' costs in input will not exceed the threshold.","solution":"def optimize_schedule(tasks, threshold): Returns two lists: one for filtered mandatory tasks and another for optional tasks. :param tasks: List[Tuple[int, bool]], a list of tasks each represented as a tuple (cost, mandatory) :param threshold: int, maximum total cost for mandatory tasks :return: Tuple[List[Tuple[int, bool]], List[Tuple[int, bool]]], a tuple containing two lists mandatory_tasks = [] optional_tasks = [] for task in tasks: cost, mandatory = task if mandatory: if sum(t[0] for t in mandatory_tasks) + cost <= threshold: mandatory_tasks.append(task) else: optional_tasks.append(task) else: optional_tasks.append(task) return mandatory_tasks, optional_tasks"},{"question":"Given a list of strings, you are to sort them in lexicographical (dictionary) order, ignoring case. -----Input----- t – the number of strings in the list, then t lines follow [t <= 10^6]. Each line contains one string: S [1 <= length(S) <= 1000] -----Output----- Output the given strings in lexicographical order, ignoring case. -----Example----- Input: 5 apple Banana grape cherry Fig Output: apple Banana cherry Fig grape","solution":"def sort_strings_lexicographically(t, strings): Sorts a list of strings in lexicographical order ignoring case. Parameters: t (int): The number of strings in the list. strings (List[str]): The list of strings. Returns: List[str]: The sorted list of strings. return sorted(strings, key=lambda s: s.lower())"},{"question":"In this task, you will simulate a simplified version of the classic \\"Battleship\\" game on a 5x5 grid. # Task Given a 5x5 grid and a list of ship coordinates, determine the result of a list of attacks. Ships are represented by the letter \'S\' and attacks will be represented by their coordinates. You need to implement a function that returns one of these three possible outcomes as a string: - `You sunk all battleships` - `Misses: X, Hits: Y` - `Congratulations! All ships destroyed after N attacks` # Rules - The input `ships` is a list of tuples/arrays containing ship coordinates, e.g., `[(0,0), (1,1), (2,2), (3,3), (4,4)]` - The input `attacks` is a list of tuples/arrays containing attack coordinates, e.g., `[(0,0), (1,1), (0,1), (1,2), (4,4)]` - You must process the attacks in the order they appear. - If an attack hits a ship, it is considered a \\"Hit\\". - If an attack does not hit a ship, it is considered a \\"Miss\\". - If all ships are hit before all attacks are processed, the function should immediately return `Congratulations! All ships destroyed after N attacks` where N is the index+1 of the last attack. - If at the end of all attacks, not all ships are destroyed, you should return `Misses: X, Hits: Y` where X is the number of misses and Y is the number of hits. # Assumptions - Each coordinate given in the `ships` list is unique. - No duplicate coordinates will be present in the `attacks` list. - Grid coordinates are zero-based and range from (0,0) to (4,4). Good luck!","solution":"def battleship_simulation(ships, attacks): ship_set = set(ships) hits = 0 misses = 0 for i, attack in enumerate(attacks): if attack in ship_set: hits += 1 ship_set.remove(attack) if len(ship_set) == 0: return f\\"Congratulations! All ships destroyed after {i + 1} attacks\\" else: misses += 1 return f\\"Misses: {misses}, Hits: {hits}\\""},{"question":"In a coding competition, developers are given a simple string manipulation task. They need to check if one string is a rotation of another string using only one call to a string handling method. -----Input----- The input contains two strings, `s1` and `s2`. -----Output----- Print \\"true\\" if `s2` is a rotation of `s1`, otherwise print \\"false\\". -----Constraints----- - The strings `s1` and `s2` will consist of lowercase letters and have lengths in the range [1, 100]. -----Sample Input----- waterbottle erbottlewat -----Sample Output----- true -----Output details----- The string \\"waterbottle\\" can be rotated to \\"erbottlewat\\", so the output is \\"true\\". Other examples include \\"abc\\" -> \\"cab\\" or \\"bca\\". If the strings were \\"hello\\" and \\"lohel\\", the output would be \\"true\\". If the strings were \\"hello\\" and \\"helol\\", the output would be \\"false\\".","solution":"def is_rotation(s1, s2): Checks if s2 is a rotation of s1. :param s1: Original string :param s2: String to check if it is a rotation of s1 :return: True if s2 is a rotation of s1, otherwise False if len(s1) != len(s2): return False combined = s1 + s1 return s2 in combined"},{"question":"Linda has an array `nums` consisting of `n` non-negative integers. She can perform a series of `q` update operations on the array. Each update operation is provided by three integers `type`, `x`, and `y`. - If `type` is 1, it means you need to add the integer `y` to the element at index `x` of the array. - If `type` is 2, it means you need to multiply the element at index `x` of the array by the integer `y`. After performing all the update operations, Linda wants you to return the final state of the array. -----Input:----- - The first line of the input contains an integer `n` — the number of elements in the array `nums`. - The second line contains `n` space-separated integers representing the array `nums`. - The third line contains an integer `q` — the number of update operations. - Each of the next `q` lines contains three space-separated integers `type`, `x`, `y` — describing the update operation. -----Output:----- Print the final state of the array as a single line of space-separated integers. -----Constraints----- - (1 leq n leq 100,000) - (0 leq nums[i] leq 10^9) - (1 leq q leq 100,000) - (1 leq type leq 2) - (0 leq x < n) - (0 leq y leq 10^9) -----Sample Input:----- 5 1 2 3 4 5 3 1 0 10 2 2 2 1 4 1 -----Sample Output:----- 11 2 6 4 6 -----Explanation:----- Example case: Performing the first update: add 10 to the element at index 0, array becomes [11, 2, 3, 4, 5] Performing the second update: multiply the element at index 2 by 2, array becomes [11, 2, 6, 4, 5] Performing the third update: add 1 to the element at index 4, array becomes [11, 2, 6, 4, 6] Return the final state of the array after performing all operations.","solution":"def apply_operations(n, nums, q, operations): for operation in operations: type, x, y = operation if type == 1: nums[x] += y elif type == 2: nums[x] *= y return nums"},{"question":"You are given a sequence of n positive integers a_1, a_2, ..., a_{n} and an integer k. Determine the maximum sum of any k elements of the sequence that are removed, along with the remaining sum of the sequence. -----Input----- The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000), the length of the sequence and the number of elements to remove, respectively. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10,000), representing the sequence. -----Output----- Output a single number, denoting the maximum sum of k removed elements, along with the remaining sum of the sequence. Your answer will be considered correct if it matches the exact output format. -----Examples----- Input 5 2 3 1 9 7 5 Output 16 9 Input 6 3 5 1 3 6 8 2 Output 19 6 Input 8 4 10 20 15 5 25 30 40 35 Output 130 35 -----Explanation----- For the first case, removing the elements 9 and 7 results in the maximum sum of 16 for the removed elements, while the remaining sum is 3+1+(5)=9. For the second case, removing the elements 8, 6, and 5 results in the maximum sum of 19 for the removed elements, leaving the remaining sequence sum to be 5+1+3=9. For the third example, removing the elements 40, 35, 30, and 25 leads to the maximum sum of the removed elements being 130, leaving behind 10+20+15+5=50 in the remaining sequence sum.","solution":"def max_removed_and_remaining_sum(n, k, sequence): This function calculates the maximum sum of removed k elements and the remaining sum of the sequence. :param n: int - the length of the sequence :param k: int - the number of elements to remove :param sequence: list of int - the sequence of integers :return: tuple - (maximum sum of removed k elements, remaining sum of the sequence) sorted_sequence = sorted(sequence, reverse=True) max_removed_sum = sum(sorted_sequence[:k]) remaining_sum = sum(sequence) - max_removed_sum return max_removed_sum, remaining_sum"},{"question":"**Hack the Password** A security company has hired you as a consultant to help find a flaw in their password verification system. The company\'s password policy is as follows: 1. The password must be at least 8 characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set `!@#%^&*()-_+=`. Create a function called `verify_password(password)` that takes a string `password` and returns a boolean value indicating whether the password meets all the mentioned requirements. Example: ```python verify_password(\\"Password123!\\") # True verify_password(\\"Pass123\\") # False verify_password(\\"password123!\\") # False verify_password(\\"PASSWORD123!\\") # False verify_password(\\"Password!\\") # False verify_password(\\"Password123\\") # False verify_password(\\"P@ssword\\") # True verify_password(\\"P@ssw123\\") # True ```","solution":"def verify_password(password): This function verifies if the provided password meets the specified security company requirements: 1. Must be at least 8 characters long. 2. Must contain at least one uppercase letter. 3. Must contain at least one lowercase letter. 4. Must contain at least one digit. 5. Must contain at least one special character from the set `!@#%^&*()-_+=`. Args: password (str): The password string to be verified. Returns: bool: True if the password meets all requirements, False otherwise. if len(password) < 8: return False has_upper = any(char.isupper() for char in password) has_lower = any(char.islower() for char in password) has_digit = any(char.isdigit() for char in password) has_special = any(char in \\"!@#%^&*()-_+=\\" for char in password) return has_upper and has_lower and has_digit and has_special"},{"question":"Create a function that takes in an integer n and returns the nth number in the Fibonacci sequence using dynamic programming (also known as memoization). The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 Your function should efficiently compute the result by storing the intermediate Fibonacci values and reusing them to avoid redundant calculations. ```python def fibonacci(n): # Base cases if n == 0: return 0 elif n == 1: return 1 # Initialize cache to store Fibonacci values fib_cache = [0] * (n + 1) fib_cache[1] = 1 # Compute Fibonacci values using dynamic programming for i in range(2, n + 1): fib_cache[i] = fib_cache[i - 1] + fib_cache[i - 2] return fib_cache[n] # Example usage: # fibonacci(0) # --> 0 # fibonacci(1) # --> 1 # fibonacci(10) # --> 55 ```","solution":"def fibonacci(n): Returns the nth Fibonacci number. # Base cases if n == 0: return 0 elif n == 1: return 1 # Initialize cache to store Fibonacci values fib_cache = [0] * (n + 1) fib_cache[1] = 1 # Compute Fibonacci values using dynamic programming for i in range(2, n + 1): fib_cache[i] = fib_cache[i - 1] + fib_cache[i - 2] return fib_cache[n]"},{"question":"You are given a list of integers. You need to find the smallest positive integer that cannot be represented as the sum of any subset of the given list. -----Input----- - The first line contains an integer T denoting the number of test cases. Each test case follows in the subsequent lines. - The first line of each test case contains an integer N denoting the size of the list. - The second line contains N integers separated by space representing the elements of the list. -----Output----- For each test case, output a single integer — the smallest positive integer that cannot be represented as the sum of any subset of the given list. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq element of the list leq 10^9 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 3 1 2 2 4 1 2 5 10 -----Example Output----- 6 4","solution":"def smallest_unreachable_sum(t, test_cases): results = [] for test_case in test_cases: n, arr = test_case arr.sort() smallest_unreachable = 1 for num in arr: if num > smallest_unreachable: break smallest_unreachable += num results.append(smallest_unreachable) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0].strip()) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx].strip()) arr = list(map(int, lines[idx + 1].strip().split())) test_cases.append((N, arr)) idx += 2 return T, test_cases"},{"question":"You have a list of n unique integers and you want to find all pairs of integers in this list that add up to a specific target number. Your task is to write a function that takes two arguments, a list of integers and a target sum, and returns a list of pairs (tuples) of integers that add up to the target sum. The integers in each pair should be ordered such that the first integer is less than the second integer. For example, given the input list nums = [2, 4, 3, 5, 7, -1, 8, -2] target = 6 The output should be [(2, 4), (-2, 8), (-1, 7)] The list of pairs should be sorted in ascending order based on the first element of the pair, and if the first elements are equal, then based on the second element. Note: Make sure your solution is efficient in terms of both time and space complexity.","solution":"def find_pairs_with_sum(nums, target): Finds all pairs of integers in the list that add up to the target sum. Args: nums: list of integers target: integer Returns: list of tuples (a, b) where a + b = target and a < b nums.sort() # Sort the input list for ordered pairs pairs = [] seen = set() for num in nums: complement = target - num if complement in seen: if complement < num: pairs.append((complement, num)) else: pairs.append((num, complement)) seen.add(num) pairs.sort() return pairs"},{"question":"A company provides its employees with access card swipe data for entry and exit times into various office buildings. Each entry is logged with the employee ID, timestamp, and type of swipe (entry or exit). The data is provided in the form of a list of strings, where each string represents a single swipe record in the format: ``` \\"employee_ID,timestamp,entry_type\\" ``` - `employee_ID`: A unique identifier for each employee (integer). - `timestamp`: The time at which the swipe occurred (formatted as \\"YYYY-MM-DD HH:MM\\"). - `entry_type`: Either the string \\"entry\\" or the string \\"exit\\". For instance, a list entry `\\"123,2021-09-01 08:00,entry\\"` indicates that employee with ID 123 entered the building at 8:00 AM on September 1, 2021. Your task is to write a function `compute_office_hours(data)` that takes the list of swipe records as input and returns a dictionary where the keys are employee IDs, and the values are the total minutes each employee spent inside the buildings based on the given swipe data. Ensure that every entry is followed by a corresponding exit; if there\'s an unmatched entry without a subsequent exit or vice versa, you should discard those records for that employee. **Function signature:** ```python def compute_office_hours(data: List[str]) -> Dict[int, int]: pass ``` **Example:** Given the input list: ```python data = [ \\"123,2021-09-01 08:00,entry\\", \\"123,2021-09-01 12:00,exit\\", \\"124,2021-09-01 09:00,entry\\", \\"124,2021-09-01 17:00,exit\\", \\"123,2021-09-02 08:30,entry\\", \\"123,2021-09-02 11:30,exit\\" ] ``` The function should return: ```python { 123: 420, # 240 minutes on 2021-09-01 plus 180 minutes on 2021-09-02 124: 480 # 480 minutes on 2021-09-01 } ``` **Constraints:** - Assumptions can be made that input data is generally correct in terms of format but may have logical discrepancies in pairing. - The timestamps are in the 24-hour clock format and always valid. - Entries and exits must be strictly paired within the same day, meaning an entry today with an exit on another day should be ignored. You can assume entry and exit times won\'t span multiple days.","solution":"from typing import List, Dict from datetime import datetime def compute_office_hours(data: List[str]) -> Dict[int, int]: employee_times = {} employee_enter_exit = {} for record in data: employee_id, timestamp, entry_type = record.split(\',\') employee_id = int(employee_id) timestamp = datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M\\") if employee_id not in employee_enter_exit: employee_enter_exit[employee_id] = [] if entry_type == \\"entry\\": employee_enter_exit[employee_id].append((timestamp, \\"entry\\")) elif entry_type == \\"exit\\": employee_enter_exit[employee_id].append((timestamp, \\"exit\\")) for employee_id, logs in employee_enter_exit.items(): total_time = 0 stack = [] for log in logs: if log[1] == \\"entry\\": stack.append(log[0]) elif log[1] == \\"exit\\" and stack: entry_time = stack.pop() exit_time = log[0] if entry_time.date() == exit_time.date(): total_time += int((exit_time - entry_time).total_seconds() // 60) if total_time > 0: employee_times[employee_id] = total_time return employee_times"},{"question":"Given a positive integer array, find and return the maximum product of any three distinct elements. The product should be the highest possible product that can be formed from any three elements in the array. Example 1: Input: [1,2,3] Output: 6 Explanation: The product of 1, 2, and 3 is 6. Example 2: Input: [1,2,3,4] Output: 24 Explanation: The product of 2, 3, and 4 is 24. Example 3: Input: [-10,-10,5,2] Output: 500 Explanation: The product of -10, -10, and 5 is 500. Note: The length of the given array is in the range [3, 10^4] and the elements are in the range of [-10^4, 10^4].","solution":"def maximum_product_of_three(arr): Returns the maximum product of any three distinct elements. if len(arr) < 3: raise ValueError(\\"Array must have at least three elements\\") arr.sort() # The highest product of three numbers can either be: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (both can be negative, thus their product is positive) and the largest number max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"# Description: Write a function that takes a string containing only lowercase alphabets and returns the first non-repeating character. If there is no non-repeating character, return an underscore (\\"_\\"). # Examples ``` first_non_repeating(\\"aabcc\\") === \\"b\\" first_non_repeating(\\"xxyz\\") === \\"y\\" first_non_repeating(\\"aabbcc\\") === \\"_\\" first_non_repeating(\\"lover\\") === \\"l\\" first_non_repeating(\\"abcdef\\") === \\"a\\" ```","solution":"def first_non_repeating(s): Returns the first non-repeating character in the given string. If there is no non-repeating character, returns an underscore (\\"_\\"). char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"_\\""},{"question":"You are given a number sequence problem to decode. Write a function to generate a sequence based on a given integer `N`. The sequence starts with 1 and continues to the sum of numbers up to `N`, interspersed with the string \\"xyz\\". -----Input:----- - First-line will contain T, the number of test cases. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the sequence described. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 50 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1xyz 1xyz2xyz 1xyz2xyz3xyz -----EXPLANATION:----- No need, else sequence structure can be decoded easily.","solution":"def generate_sequence(N): Generates a sequence up to the given number N, interspersed with \\"xyz\\". result = \\"\\" for i in range(1, N+1): result += f\\"{i}xyz\\" return result def process_test_cases(T, cases): results = [] for N in cases: results.append(generate_sequence(N)) return results"},{"question":"You are given a grid of size n times n with some cells blocked. The goal is to determine whether there is a path from the top-left cell (1, 1) to the bottom-right cell (n, n) that does not traverse any blocked cells. A cell is represented by its coordinates (i,j), where i is the row number and j is the column number. Wabbit can only move to adjacent cells in the four cardinal directions: up, down, left, and right. The blocked cells are marked, and Wabbit cannot step into them. Wabbit can only step into cells that are not blocked. -----Input----- The first line contains two integers n and m (2 leq n leq 1000, 0 leq m leq n^2), where n is the size of the grid and m is the number of blocked cells. Each of the next m lines contains two integers x_i and y_i (1 leq x_i, y_i leq n), representing the coordinates of a blocked cell. -----Output----- Print \\"YES\\" if there is a path from (1, 1) to (n, n) that avoids blocked cells. Otherwise, print \\"NO\\". -----Example----- Input 5 4 2 2 3 2 4 2 4 3 Output YES In this example, Wabbit can go around the blocked cells to reach the bottom-right corner of the grid. -----Note----- In the given example grid: ``` 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 ``` Where `1` represents walkable cells and `0` represents blocked cells, Wabbit can find a path that goes around the blocked cells to reach (5, 5).","solution":"def find_path(n, m, blocked): from collections import deque grid = [[0] * n for _ in range(n)] for x, y in blocked: grid[x-1][y-1] = 1 if grid[0][0] == 1 or grid[n-1][n-1] == 1: return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, n-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"In a small village, there is a festival going on where they organize a game involving flowers. Each participant is given a string representing a sequence of different types of flowers. The task is to create the smallest number of bouquets possible, such that each bouquet contains exactly two types of flowers and no two bouquets contain the exact same pair of types. -----Input----- A single string S consisting of lowercase letters where each letter represents a different type of flower. -----Output----- In the first line, output the integer \'k\' which is the minimum number of bouquets that can be formed. In the next k lines, output the pairs of flower types that form each bouquet, separated by a space, in lexicographic order. Each pair should be listed without repetition and the flowers within each pair should also be in lexicographic order. -----Constraints----- The length of string S is between 2 and 26. The string S contains unique characters. -----Example----- Input: abc Output: 3 a b a c b c -----Explanation----- The smallest number of bouquets that can be formed with flower types \'a\', \'b\', and \'c\' is 3. Each bouquet can have two types of flowers: one containing \'a\' and \'b\', one with \'a\' and \'c\', and one with \'b\' and \'c\'. All these pairs are unique and cover all flowers in the given sequence.","solution":"def create_bouquets(s): Given a string \'s\' with unique characters representing flower types, this function returns the smallest number of bouquets and the pairs of flower types that form each bouquet. flower_list = sorted(s) bouquets = [] for i in range(len(flower_list)): for j in range(i + 1, len(flower_list)): bouquets.append((flower_list[i], flower_list[j])) return len(bouquets), bouquets"},{"question":"You are given a list of integers representing the heights of buildings in a city. The city has a rule that you can demolish buildings to the left or right, but once you choose a direction, you must continue in that direction for the rest of the demolitions. Your goal is to demolish buildings such that the total height of the demolished buildings is maximized. Write a function that determines the maximum height of demolished buildings if you start demolishing from any building. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of buildings. The second line contains N space separated integers H1, H2, ..., HN denoting the height of each building. -----Output----- For each test case, output a single line containing the maximum height that can be demolished by starting from any building. -----Constraints----- - 1 ≤ Hi ≤ 109 - Subtask 1 (35 points): T = 10, 1 ≤ N ≤ 1000 - Subtask 2 (65 points): T = 10, 1 ≤ N ≤ 105 -----Example----- Input: 2 5 1 2 3 4 5 3 3 2 1 Output: 15 6","solution":"def max_demolition_heights(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] max_height = 0 # Compute max height demolishing to the right for j in range(N): current_height = 0 for k in range(j, N): current_height += heights[k] max_height = max(max_height, current_height) # Compute max height demolishing to the left for j in range(N): current_height = 0 for k in range(j, -1, -1): current_height += heights[k] max_height = max(max_height, current_height) results.append(max_height) return results"},{"question":"Mike is a passionate book reader. He likes to categorize the books he reads based on the presence of certain keywords in the title. Specifically, if a book\'s title contains the word \\"magic\\" in it, he labels it as \\"Magical Book\\"; otherwise, he labels it as \\"Ordinary Book\\". You are given some book titles. For each title, you need to tell Mike if it is a Magical Book or an Ordinary Book. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single string S denoting a book title. -----Output----- For each test case, print a single line containing the string \\"Magical Book\\" or \\"Ordinary Book\\" (without quotes). -----Constraints----- - 1 le T le 50 - 1 le |S| le 150 - each character of S is either a lowercase English letter or a space -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 the magic of thinking big a brief history of time magic in the air -----Example Output----- Magical Book Ordinary Book Magical Book -----Explanation----- Example case 1: \\"the magic of thinking big\\" Example case 2: The word \\"magic\\" does not appear in the given title. Example case 3: \\"magic in the air\\"","solution":"def categorize_books(titles): Categorize books based on the presence of the word \'magic\' in the title. results = [] for title in titles: if \'magic\' in title: results.append(\\"Magical Book\\") else: results.append(\\"Ordinary Book\\") return results"},{"question":"You are given a string representing a mathematical expression, which can include integers, \'+\', \'-\', \'*\', and \'/\' operators, and parentheses \'(\' and \')\'. The operators follow the standard precedence rules, where \'*\' and \'/\' have higher precedence than \'+\' and \'-\', and parentheses override precedence. Write a function `evaluate_expression` that evaluates the expression and returns the result as an integer. You can assume that the expression is always valid and does not contain any spaces. Example ```python print(evaluate_expression(\\"3+2*2\\")) # Output: 7 print(evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\")) # Output: 23 ``` Constraints - The length of the input string will be in the range: [1, 10^5] - The input string consists of non-negative integers, operators `+`, `-`, `*`, `/` and parentheses `(`, `)`. Implement the function `evaluate_expression(expression: str) -> int` to solve the problem.","solution":"def evaluate_expression(expression: str) -> int: def operate(op, second, first): if op == \'+\': return first + second elif op == \'-\': return first - second elif op == \'*\': return first * second elif op == \'/\': return int(first / second) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_ops(ops, vals): while ops and ops[-1] != \'(\': vals.append(operate(ops.pop(), vals.pop(), vals.pop())) n = len(expression) vals = [] ops = [] i = 0 while i < n: if expression[i].isdigit(): value = 0 while i < n and expression[i].isdigit(): value = value * 10 + int(expression[i]) i += 1 vals.append(value) i -= 1 elif expression[i] == \'(\': ops.append(expression[i]) elif expression[i] == \')\': apply_ops(ops, vals) ops.pop() else: while ops and precedence(ops[-1]) >= precedence(expression[i]): vals.append(operate(ops.pop(), vals.pop(), vals.pop())) ops.append(expression[i]) i += 1 apply_ops(ops, vals) return vals[0]"},{"question":"You are given a matrix of dimensions n x m filled with non-negative integers. Your goal is to find the maximum sum of the elements in one contiguous submatrix. A submatrix is defined as a rectangular array of numbers obtained by selecting a contiguous block from the original matrix. Write a program that, given the dimensions of the matrix and the matrix itself, computes the maximum sum of any contiguous submatrix. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix. - The next n lines contain m integers each, representing the rows of the matrix. Each integer is between -100 and 100 inclusive. Output - A single integer — the maximum sum of the elements in any contiguous submatrix. Example Input: ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` Output: ``` 29 ``` Note Explanation of the example: The contiguous submatrix with the maximum sum is: ``` 3 8 10 -4 -1 1 ``` This submatrix has a sum of 29. # Explanation You need to find the submatrix with the highest sum. You might want to think about how the maximum subarray sum problem for one-dimensional arrays (Kadane\'s algorithm) can be extended to two-dimensional arrays for this problem.","solution":"def max_submatrix_sum(matrix): Given a 2D matrix, finds the maximum sum of any contiguous submatrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): tmp = [0] * n for right in range(left, m): for i in range(n): tmp[i] += matrix[i][right] current_sum = kadane(tmp) max_sum = max(max_sum, current_sum) return max_sum def kadane(array): Helper function to apply Kadane\'s algorithm on 1D array to find the maximum sum of a contiguous subarray. max_end_here = max_so_far = array[0] for x in array[1:]: max_end_here = max(x, max_end_here + x) max_so_far = max(max_so_far, max_end_here) return max_so_far"},{"question":"Task Write a function `find_words` that, given a sentence, returns a dictionary with the word lengths as keys and a list of words of that length as values. Input The input to the function is a string, `sentence`, which represents a sentence containing words separated by spaces. The sentence contains only alphabetic characters and spaces. Each word is at least one character long. Output The function should return a dictionary where: - The keys are integers representing the lengths of words. - The values are lists of words of that length found in the sentence. The words in the value lists should appear in the order they are found in the sentence. Example ```python def find_words(sentence: str): pass sentence = \\"The quick brown fox jumps over the lazy dog\\" result = find_words(sentence) print(result) ``` # Expected output: ```python { 3: [\\"The\\", \\"the\\", \\"dog\\"], 5: [\\"quick\\"], 5: [\\"brown\\"], 3: [\\"fox\\"], 5: [\\"jumps\\"], 4: [\\"over\\"], 4: [\\"lazy\\"] } ``` Specifications 1. The input string `sentence` will have a length of at most `10^4`. 2. Each word in the sentence will have a length of at most `100`. 3. The function should be case sensitive, meaning `The` and `the` should be treated as different words. 4. The function should handle empty strings and return an empty dictionary in such cases.","solution":"def find_words(sentence: str): Given a sentence, returns a dictionary with word lengths as keys and lists of words of that length as values. if not sentence: return {} words = sentence.split() word_dict = {} for word in words: length = len(word) if length in word_dict: word_dict[length].append(word) else: word_dict[length] = [word] return word_dict"},{"question":"You are given a list of integers representing a zigzag sequence. A zigzag sequence is defined as a sequence where the differences between consecutive elements strictly alternate between positive and negative. Your task is to determine the length of the longest contiguous subsequence that forms a zigzag pattern. Example: Input: [1, 7, 4, 9, 2, 5] Output: 6 Explanation: The longest zigzag sequence here is the entire list itself. Input: [1, 17, 5, 10, 13, 15, 10, 5, 16, 8] Output: 7 Explanation: The longest zigzag sequence is [1, 17, 5, 10, 5, 16, 8]. Input: [44] Output: 1 Explanation: The longest zigzag sequence is the single element itself. Note: - The length of the input list will be between 1 and 1000. - The values of the integers in the input list will be between -10000 and 10000.","solution":"def longest_zigzag_sequence(nums): if not nums: return 0 n = len(nums) if n == 1: return 1 up = [1] * n down = [1] * n for i in range(1, n): if nums[i] > nums[i-1]: up[i] = down[i-1] + 1 down[i] = down[i-1] elif nums[i] < nums[i-1]: down[i] = up[i-1] + 1 up[i] = up[i-1] else: up[i] = up[i-1] down[i] = down[i-1] return max(up[-1], down[-1])"},{"question":"What’s Next =========== Create an efficient algorithm that takes a string of words separated by a single space and reverses the letters in every word while maintaining the order of the words. Exclude any punctuation or special characters from the reversal process, but retain them in their original positions relative to their word. # Example For an input string `s = \\"Hello, World!\\"`, your function should return `\\"olleH, dlroW!\\"`. # Explanation The words \\"Hello\\" and \\"World\\" have their letters reversed to \\"olleH\\" and \\"dlroW\\" respectively, but the punctuation marks (comma and exclamation mark) remain in their original positions. The space between words is preserved. # Testing You have a function `test.expect` to validate the correctness of your implementation. ```python test.expect(reverse_words_with_punctuation(\\"Hello, World!\\") == \\"olleH, dlroW!\\") test.expect(reverse_words_with_punctuation(\\"The quick brown. fox jumps, over!\\") == \\"ehT kciuq nworb. xof spmuj, revo!\\") test.expect(reverse_words_with_punctuation(\\"Keep, track! of punctuation.\\") == \\"peeK, kcart! fo noitautcnup.\\") ``` # Additional Challenge As an additional challenge, optimize your algorithm to ensure it can handle strings with a large number of words and punctuation marks efficiently.","solution":"import re def reverse_words_with_punctuation(s): Takes a string of words separated by a single space and reverses the letters in every word while maintaining the order of the words and retaining punctuation in their original positions. def reverse_word(word): # Extract letters and reverse them letters = \'\'.join(re.findall(r\'[a-zA-Z]\', word)) reversed_letters = letters[::-1] # Replace letters back into their positions in the word result = [] letter_index = 0 for char in word: if char.isalpha(): result.append(reversed_letters[letter_index]) letter_index += 1 else: result.append(char) return \'\'.join(result) words = s.split(\' \') reversed_words = [reverse_word(word) for word in words] return \' \'.join(reversed_words)"},{"question":"An agency records the salaries of its employees over several years. They seek a way to extract the employees\' salary growth information by comparing their current salary with their previous salary. They decide to calculate the percentage increase in salary for each employee who received any increase. You are tasked with creating a program that identifies and calculates the percentage salary increase for each employee in the given list. If an employee\'s salary did not increase, they should not appear in the output. -----Input----- - The first line of the input contains a single integer N denoting the number of employees. - Each of the next N lines contains two space-separated integers P and C, where P is the previous salary of the employee and C is the current salary of the same employee. -----Output----- For each employee who got a salary increase, print their percentage increase to two decimal places. If an employee\'s salary did not increase, omit their details from the output. -----Constraints----- - 1 le N le 100 - 1000 le P le 100000 - 1000 le C le 100000 - C ge P -----Example Input----- 5 50000 55000 40000 40000 60000 72000 30000 31000 15000 17000 -----Example Output----- 10.00 20.00 3.33 13.33 -----Explanation----- For example case 1: - The first employee\'s previous salary was 50000 and the current salary is 55000. The increase is (55000-50000)/50000 * 100 = 10.00%. - The second employee\'s salary did not change, so they are omitted. - And so on for the rest of the employees in the list.","solution":"def calculate_salary_increases(employee_data): This function takes in a list of tuples containing previous and current salaries of employees. It returns a list with the percentage increases for those employees whose salary has increased. :param employee_data: list of tuples (P, C) where P is previous salary and C is current salary. :return: list of percentage increases for employees with an increased salary. result = [] for prev_salary, curr_salary in employee_data: if curr_salary > prev_salary: increase = ((curr_salary - prev_salary) / prev_salary) * 100 result.append(round(increase, 2)) return result"},{"question":"Given a string containing alphanumeric characters and spaces, write a function to find the most frequently occurring word and its frequency in the string. Ignore case and punctuation, and if there are ties, return any one of the most frequent words. find_most_frequent_word(\\"Hello World! Hello.\\") => (\'hello\', 2) find_most_frequent_word(\\"A quick brown fox jumps over the lazy dog.\\") => (\'a\', 1) because each word appears exactly once. find_most_frequent_word(\\"To be, or not to be, that is the question.\\") => (\'to\', 2) \'to\' appears twice and is the most frequent word. Consider only letters and digits for the words and ignore the spaces or punctuations. Returned words should also be in lowercase.","solution":"import re from collections import Counter def find_most_frequent_word(s): Returns the most frequently occurring word and its frequency in the string s. # Remove punctuation and convert to lowercase processed_string = re.sub(r\'[^a-zA-Z0-9s]\', \'\', s).lower() # Split into words words = processed_string.split() # Use Counter to find the frequency of each word word_counts = Counter(words) # Get the most common word and its frequency most_common_word, frequency = word_counts.most_common(1)[0] return most_common_word, frequency"},{"question":"Alice is learning about matrices and their properties. She is particularly interested in symmetric matrices. A matrix is said to be symmetric if it equals its transpose, that is, for any element at position (i, j) in the matrix, it is equal to the element at position (j, i). Alice wants to create an n x n symmetric matrix whose elements are integers. To help her, you have to write a function that generates such a matrix based on specific rules. Task Write a function `generateSymmetricMatrix(n)` that takes an integer `n` as input and returns an n x n symmetric matrix. The elements of the matrix should satisfy the following conditions: 1. Each element on the main diagonal (i.e., where row index equals column index) should be a unique integer starting from 1 up to n. 2. For elements not on the main diagonal (i.e., where row index does not equal column index), the value should be the sum of the row and column indices. Function Signature ```python def generateSymmetricMatrix(n: int) -> List[List[int]]: ``` Input - An integer `n` (1 ≤ n ≤ 100) representing the size of the matrix. Output - A 2D list representing the n x n symmetric matrix. Example ```python print(generateSymmetricMatrix(3)) # Output: # [ # [1, 3, 4], # [3, 2, 5], # [4, 5, 3] # ] print(generateSymmetricMatrix(4)) # Output: # [ # [1, 3, 4, 5], # [3, 2, 5, 6], # [4, 5, 3, 7], # [5, 6, 7, 4] # ] ``` # Explanation of Example For an n x n matrix: 1. Diagonal elements are integers 1 through n. 2. Off-diagonal elements, such as element at position (i, j) and (j, i), are the sum of indices i and j. For example, in the generated matrix for `n = 4`, the element at position (1, 2) and (2, 1) are both equal to 3 (sum of 1 and 2).","solution":"from typing import List def generateSymmetricMatrix(n: int) -> List[List[int]]: Generates an n x n symmetric matrix with specific properties. :param n: Size of the matrix :return: An n x n symmetric matrix matrix = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): for j in range(n): if i == j: matrix[i][j] = i + 1 else: matrix[i][j] = i + 1 + j + 1 return matrix"},{"question":"You are given a collection of words. Your task is to categorize these words into one of the following categories: `short`, `medium`, or `long`. A word is categorized as: - `short` if its length is 1 to 3 characters - `medium` if its length is 4 to 6 characters - `long` if its length is 7 or more characters Write a function `categorize_words(words)` that takes a list of words and returns a dictionary with the keys `short`, `medium`, and `long`, where each key maps to a list of words that fall into that category. # Example: ```python def categorize_words(words): # Your code here words_list = [\\"cat\\", \\"house\\", \\"elephant\\", \\"to\\", \\"run\\", \\"development\\"] print(categorize_words(words_list)) ``` Output: ```python { \\"short\\": [\\"cat\\", \\"to\\", \\"run\\"], \\"medium\\": [\\"house\\"], \\"long\\": [\\"elephant\\", \\"development\\"] } ``` # Notes: - The input list `words` will contain only alphabetical words. - Words in each category should maintain their original order from the input list. - Handle the case where certain categories might be empty.","solution":"def categorize_words(words): Categorizes words into \'short\', \'medium\', and \'long\' based on their lengths. Args: words (list of str): List of words to be categorized. Returns: dict: Dictionary with keys \'short\', \'medium\', and \'long\' mapping to lists of categorized words. categorized = { \'short\': [], \'medium\': [], \'long\': [] } for word in words: length = len(word) if 1 <= length <= 3: categorized[\'short\'].append(word) elif 4 <= length <= 6: categorized[\'medium\'].append(word) elif length >= 7: categorized[\'long\'].append(word) return categorized"},{"question":"Complete the function that finds the longest word in a given string `s`. The string `s` will contain only alphabetic characters and spaces. If there are multiple words with the same maximum length, return the first one encountered. Examples ``` \\"Which is the longest word\\" --> \\"longest\\" \\"Find the maximum length word\\" --> \\"maximum\\" ```","solution":"def longest_word(s): Finds the longest word in the given string s. If there are multiple words with the same maximum length, returns the first one encountered. Parameters: s (str): A string containing alphabetic characters and spaces. Returns: str: The longest word in the input string. words = s.split() max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Given a list of integers `nums` and an integer `k`, write a Python function that rotates the list to the right by `k` steps. For example, if `nums` is `[1, 2, 3, 4, 5]` and `k` is `2`, the list should become `[4, 5, 1, 2, 3]`. Function Signature ```python def rotate_array(nums: list[int], k: int) -> list[int]: pass ``` # Input * `nums`: A list of integers with at least one element and at most 10^5 elements. * `k`: A non-negative integer where `0 <= k <= 10^5`. # Output * Return the modified list after rotating it to the right by `k` steps. # Example ```python nums = [1, 2, 3, 4, 5] k = 2 assert rotate_array(nums, k) == [4, 5, 1, 2, 3] ``` # Notes * Consider the case where `k` is greater than the length of the list. In such cases, rotating the list `k` times is equivalent to rotating it `k % len(nums)` times. * You may use additional space but aim for a solution with minimal time and space complexity.","solution":"def rotate_array(nums: list[int], k: int) -> list[int]: Rotates the array to the right by k steps. if not nums or k <= 0: return nums n = len(nums) k = k % n # In case k is greater than the length of the list return nums[-k:] + nums[:-k]"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a new list containing the indices of the two numbers in the input list that add up to the target integer. If no such pair exists, return an empty list. The solution must ensure that the indices are returned in ascending order. Input list will have at least two integers, and all integers are non-negative. For example, for the input list [2, 7, 11, 15] and target 9, the function should return [0, 1] because nums[0] + nums[1] == 9. For the input list [3, 2, 4] and target 6, the function should return [1, 2] because nums[1] + nums[2] == 6. If no such indices exist, return an empty list.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the target. If no such pair exists, return an empty list. Parameters: nums (list of int): List of integers. target (int): Target integer. Returns: list of int: List containing the indices of the two numbers that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return sorted([num_to_index[complement], i]) num_to_index[num] = i return []"},{"question":"Don Drumphet has successfully built the wall, but now he wants to paint it. He wants each section of the wall to be painted a different color. Unfortunately, he can only remember a maximum of three different colors. Given a list of wall sections, determine if it\'s possible to paint the entire wall such that no two adjacent sections are painted the same color, using up to three different colors. If it\'s possible, return a possible painting scheme as a list of colors corresponding to each wall section. Otherwise, return an empty list. For example, given the list of wall sections `[\\"A\\", \\"B\\", \\"C\\", \\"D\\"]`, a possible output could be `[\\"Red\\", \\"Green\\", \\"Red\\", \\"Green\\"]`. If the wall cannot be painted with the given constraints, return `[]`. Implement the function `paint_wall(sections: List[str]) -> List[str]`.","solution":"from typing import List def paint_wall(sections: List[str]) -> List[str]: Determines if it\'s possible to paint the wall sections such that no two adjacent sections are painted the same color using up to three different colors. Args: sections (List[str]): List of wall sections. Returns: List[str]: A possible painting scheme as a list of colors corresponding to each wall section or an empty list if it\'s not possible. if not sections: return [] n = len(sections) colors = [\\"Red\\", \\"Green\\", \\"Blue\\"] scheme = [] for i in range(n): for color in colors: if i > 0 and scheme[-1] == color: continue scheme.append(color) break if i > 0 and scheme[i] == scheme[i - 1]: return [] return scheme"},{"question":"A new roller coaster is being built in the amusement park. The challenge is to design the height pattern of the rails such that they make the ride thrilling. The height pattern should mimic a \'mountain range\'. Let\'s break it down: - The rail height should start at 1, increase to a peak, and should again decrease back to 1. - The height should either increase or stay the same when moving to the next part until it reaches the peak. - Similarly, the height should either decrease or stay the same when moving from the peak to the end. You need to determine if the given height patterns for various rails are valid according to the above rules. -----Input----- - The first line contains a single integer, R, which is the number of rail height patterns you need to verify. The description of each of the R height patterns follows: - The first line of the i-th rail\'s description contains a single integer: Ni, which is the length of the height pattern. - The next line contains Ni integers: Hi1, Hi2, .. HiNi. These represent the heights of the various parts in the i-th rail. -----Output----- - For each rail height pattern, in a new line, output \\"valid\\" if it follows the mountain range rules, and \\"invalid\\" if it does not. -----Constraints----- - 1 ≤ R ≤ 100 - 3 ≤ Ni ≤ 100 - 1 ≤ Hij ≤ 100 -----Example----- Input: 4 5 1 2 3 2 1 6 1 1 1 2 1 1 5 1 2 4 2 1 4 1 2 1 2 Output: valid invalid valid invalid -----Explanation----- In the first rail height pattern, the heights properly follow the mountain range rule, hence it is valid. In the second rail height pattern, the heights do not strictly increase to a peak, hence it is invalid. In the third rail height pattern, the heights increase to a peak and then decrease back to 1, hence it is valid. In the fourth rail height pattern, the heights do not decrease smoothly back to 1 after the peak and rises again, hence it is invalid.","solution":"def is_valid_mountain(heights): n = len(heights) if n < 3 or heights[0] != 1 or heights[-1] != 1: return \\"invalid\\" peak_found = False for i in range(1, n): if peak_found: if heights[i] > heights[i-1]: return \\"invalid\\" else: if heights[i] < heights[i-1]: peak_found = True elif heights[i] == heights[i-1]: return \\"invalid\\" if not peak_found: return \\"invalid\\" return \\"valid\\" def validate_rails(R, rails): results = [] for i in range(R): n = rails[i][0] heights = rails[i][1] results.append(is_valid_mountain(heights)) return results"},{"question":"# Task **_Given_** a list of strings, **_Return_** the longest common prefix string amongst the list of strings. If there is no common prefix, return an empty string \\"\\". ___ # Notes * **_Only lower-case English letters are used_** *in the strings provided inside the list.* * **_All strings are assumed to be non-empty_**. ____ # Input >> Output Examples: ``` longestCommonPrefix([\\"flower\\", \\"flow\\", \\"flight\\"]) ==> return \\"fl\\" ``` **_Explanation_**: As `fl` is **_the longest common prefix string_** *amongst the list of strings [\\"flower\\", \\"flow\\", \\"flight\\"]*. ``` longestCommonPrefix([\\"dog\\", \\"racecar\\", \\"car\\"]) ==> return \\"\\" ``` **_Explanation_**: As there is no common prefix amongst the strings [\\"dog\\", \\"racecar\\", \\"car\\"], an empty string `\\"\\"` is returned. ``` longestCommonPrefix([\\"interspecies\\", \\"interstellar\\", \\"interstate\\"]) ==> return \\"inters\\" ``` **_Explanation_**: As `inters` is **_the longest common prefix string_** *amongst the list of strings [\\"interspecies\\", \\"interstellar\\", \\"interstate\\"]*. ``` longestCommonPrefix([\\"throne\\", \\"throne\\"]) ==> return \\"throne\\" ``` **_Explanation_**: As `throne` is **_the longest common prefix string_** *amongst the list of strings [\\"throne\\", \\"throne\\"]*. ``` longestCommonPrefix([\\"throne\\", \\"dungeon\\"]) ==> return \\"\\" ``` **_Explanation_**: As there is no common prefix amongst the strings [\\"throne\\", \\"dungeon\\"], an empty string `\\"\\"` is returned.","solution":"def longestCommonPrefix(strs): Returns the longest common prefix string amongst the list of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # Start by assuming the whole first string is the common prefix prefix = strs[0] # Compare the prefix with each string for string in strs[1:]: while string[:len(prefix)] != prefix: prefix = prefix[:len(prefix)-1] if not prefix: return \\"\\" return prefix"},{"question":"A popular string manipulation challenge is reversing the words in a sentence while retaining the punctuation at the ends of words intact. Write a function that takes a sentence as input, reverses the characters in each word, but keeps the sentence structure and punctuation in place. For example: - Input: \\"Hello, world!\\" - Output: \\"olleH, dlrow!\\" - Input: \\"Python is fun.\\" - Output: \\"nohtyP si nuf.\\" Assume the input sentence is a non-empty string containing only alphabetic characters, spaces, and punctuation marks like commas, periods, exclamation points, and question marks.","solution":"def reverse_words_with_punctuation(sentence): Reverses the characters in each word of the input sentence, retaining punctuation in place. def reverse_word(word): # Detect if there\'s punctuation at the end of the word if word[-1] in \'.,!?\': return word[:-1][::-1] + word[-1] else: return word[::-1] words = sentence.split() reversed_words = [reverse_word(word) for word in words] return \' \'.join(reversed_words)"},{"question":"Masha is playing with a sequence of N integers. She can choose any single contiguous subarray of this sequence and increment each element of the subarray by 1. She can perform this operation as many times as she wants, and each operation is counted separately. The goal is to make all elements of the sequence equal. Help Masha determine the minimum number of operations required to make all integers in the sequence equal. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 10^5) — the length of the sequence. The second line of the input contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^9) — the elements of the sequence. -----Output----- Output the minimum number of operations required to make all elements of the sequence equal. -----Examples----- Input 5 1 2 3 4 5 Output 4 Input 3 7 7 7 Output 0 Input 4 1 3 2 4 Output 3 Input 6 10 9 8 7 6 5 Output 9 -----Note----- In the first sample test, you can increment the entire subarray [1, 2, 3, 4, 5] four times, which makes all elements equal to 5 in 4 operations. In the second sample test, the elements are already equal, so no operation is needed. In the third sample test, you can first increment the subarray [1], then subarray [3], and finally, the subarray [2, 4] to equalize the elements, which takes 3 operations in total. In the fourth sample test, you can increment the entire subarray [10, 9, 8, 7, 6, 5] five times, then increment the subarray [9, 8, 7, 6, 5] four more times, which takes 9 operations in total to make all elements equal to 10.","solution":"def min_operations_to_equalize(sequence): Determines the minimum number of operations required to make all integers in the input sequence equal by incrementing each element of any single contiguous subarray by 1. Parameters: sequence (list of int): The sequence of integers. Returns: int: The minimum number of operations required. max_value = max(sequence) operations = [max_value - num for num in sequence] return sum(operations)"},{"question":"You are given a grid of size N times M consisting of \'0\'s (water) and \'1\'s (land). An island is a group of contiguous \'1\'s connected horizontally or vertically (not diagonally). Write a function to find the maximum area of an island in the grid. If there is no island, the maximum area is 0. -----Input:----- - First line contains two integers N and M, denoting the number of rows and columns respectively. - Next N lines contain M characters each (\'0\' or \'1\'), denoting the grid. -----Output:----- Output a single integer, the maximum area of an island in the grid. -----Constraints----- - 1 leq N, M leq 50 -----Sample Input 1:----- 4 5 11000 11000 00100 00011 -----Sample Output 1:----- 4 -----Sample Input 2:----- 4 5 11000 11000 00100 00000 -----Sample Output 2:----- 4","solution":"def max_area_of_island(grid): if not grid: return 0 def dfs(r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == \'0\': return 0 grid[r][c] = \'0\' # mark as visited area = 1 area += dfs(r + 1, c) area += dfs(r - 1, c) area += dfs(r, c + 1) area += dfs(r, c - 1) return area max_area = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'1\': max_area = max(max_area, dfs(r, c)) return max_area"},{"question":"You are given an array A of N integers and Q queries. Each query can be of two types: 1. 1;i;v: Update the value at index i to v. 2. 2;l;r: Find and print the sum of all elements in the subarray from index l to r, inclusive (1-based indexing). -----Input----- - The first line of the input contains two integers N and Q denoting the size of the array and the number of queries, respectively. - The second line contains N space-separated integers, the initial elements of A. - Each of the next Q lines contains a query of the following forms: - 1;i;v: It means update the element at index i to v. - 2;l;r: It means report the sum of the elements from index l to r. -----Output----- For each query of the second type, print a single integer containing the sum of the elements from index l to r. -----Constraints----- - 1 leq N leq 100,000 - 1 leq Q leq 100,000 - 1 leq A[i] leq 10^9 - 1 leq i leq N - 1 leq l leq r leq N - 1 leq v leq 10^9 -----Example Input----- 5 4 1 2 3 4 5 2 1 3 1 2 10 2 2 5 2 1 5 -----Example Output----- 6 22 28 -----Explanation----- Example case: - Initial array: A = [1, 2, 3, 4, 5] - The first query asks for the sum of elements from index 1 to 3, which is 1 + 2 + 3 = 6. - The second query updates the value at index 2 to 10, so now A = [1, 10, 3, 4, 5]. - The third query asks for the sum of elements from index 2 to 5, which is 10 + 3 + 4 + 5 = 22. - The fourth query asks for the sum of elements from index 1 to 5, which is 1 + 10 + 3 + 4 + 5 = 23.","solution":"class ArrayProcessor: def __init__(self, N, A): self.N = N self.A = A def update(self, i, v): self.A[i-1] = v def sum_range(self, l, r): return sum(self.A[l-1:r]) def process_queries(N, Q, A, queries): processor = ArrayProcessor(N, A) results = [] for query in queries: if query[0] == 1: # Update query _, i, v = query processor.update(i, v) elif query[0] == 2: # Sum query _, l, r = query results.append(processor.sum_range(l, r)) return results"},{"question":"The function `count_substrings` takes two strings, `text` and `pattern`. Your task is to complete this function such that it returns the number of occurrences of the `pattern` string within the `text` string. The search should be case-sensitive and the pattern should be found even if it overlaps with itself. Examples: ```python count_substrings(\\"abababa\\", \\"aba\\") # returns 3 (\'aba\' at positions 0, 2, and 4) count_substrings(\\"hello\\", \\"ll\\") # returns 1 (\'ll\' at position 2) count_substrings(\\"aaaaa\\", \\"aa\\") # returns 4 (\'aa\' at positions 0, 1, 2, and 3) count_substrings(\\"abc\\", \\"d\\") # returns 0 (no occurrence) ```","solution":"def count_substrings(text, pattern): Returns the number of occurrences of the pattern string within the text string. The search is case-sensitive and counts overlapping patterns. count = 0 i = 0 while i <= len(text) - len(pattern): if text[i:i + len(pattern)] == pattern: count += 1 i += 1 # Move just one step forward to enable overlapping match else: i += 1 return count"},{"question":"The excellent wizard Gandalf is experimenting with different magical spells. He has created a special potion that enhances the power of spells when cast sequentially. Gandalf wishes to test various sequences of his created spells to determine the cumulative magical power. Given Gandalf\'s spells and the power each spell contributes, you are to compute the cumulative power for a specific sequence of spells. The cumulative power of a sequence is simply the sum of the power of each spell in the sequence. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follow: - The first line of each test case contains a single integer N denoting the number of different spells Gandalf has. - The second line contains a sequence of N space-separated integers where each integer denotes the power of a spell. The power is a positive integer. - The third line contains an integer M denoting the number of spells in the sequence to be tested. - The fourth line contains a sequence of M space-separated integers each representing the index (1-based) of the spell in Gandalf\'s list. -----Output----- - For each test case, output a single line containing an integer denoting the cumulative power of the sequence of spells. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - 1 ≤ Spell Power ≤ 10000 -----Example----- Input: 2 5 10 20 30 40 50 3 1 3 5 4 15 25 35 45 2 2 4 Output: 90 70","solution":"def cumulative_power(T, test_cases): results = [] for case in test_cases: N, spell_powers, M, spell_indices = case total_power = sum(spell_powers[idx-1] for idx in spell_indices) results.append(total_power) return results def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] i = 1 for _ in range(T): N = int(lines[i]) spell_powers = list(map(int, lines[i+1].split())) M = int(lines[i+2]) spell_indices = list(map(int, lines[i+3].split())) test_cases.append((N, spell_powers, M, spell_indices)) i += 4 return T, test_cases def main(input_str): T, test_cases = process_input(input_str) return cumulative_power(T, test_cases)"},{"question":"Write a function `max_subarray_sum` that takes a list of integers and returns the maximum sum of any contiguous subarray within the list. For example, given the list `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the result should be `6` because the subarray `[4, -1, 2, 1]` has the largest sum. More examples: - `max_subarray_sum([1])` should return `1` - `max_subarray_sum([5, 4, -1, 7, 8])` should return `23` Implement the function with an optimal time complexity approach. Good luck!","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray within the given list of integers. Parameters: nums (list): A list of integers. Returns: int: The maximum sum of any contiguous subarray. if not nums: return 0 max_sum = cur_sum = nums[0] for num in nums[1:]: cur_sum = max(num, cur_sum + num) max_sum = max(max_sum, cur_sum) return max_sum"},{"question":"Alice loves playing with strings. She has a string `S` consisting of lowercase Latin letters. She wants to transform it into another string `T` also consisting of lowercase Latin letters. However, transforming the string can be costly as she can only perform the following operations: 1. Select any character in `S` and replace it with any character. This operation has a cost of 1. 2. Remove any character from `S`. This operation has a cost of 1. 3. Insert any character at any position in `S`. This operation has a cost of 1. Alice wants to transform `S` into `T` with the minimum cost. -----Input----- - The first line of the input contains a single integer `N` denoting the number of test cases. - The description of `N` test cases follows. - Each test case consists of two lines. The first line contains the string `S` and the second line contains the string `T`. -----Output----- For each test case, print a single line containing one integer ― the minimum cost to transform `S` into `T`. -----Constraints----- - 1 ≤ N ≤ 10 - 1 ≤ |S|, |T| ≤ 1000 -----Example Input----- 3 abc yabd horse ros intention execution -----Example Output----- 2 3 5 -----Explanation----- Example case 1: Transform \\"abc\\" to \\"yabd\\" with the following operations: 1. Replace \'a\' with \'y\': cost 1 2. Insert \'d\' at the end: cost 1 Total cost 2. Example case 2: Transform \\"horse\\" to \\"ros\\" with the following operations: 1. Remove \'h\': cost 1 2. Remove \'e\': cost 1 3. Replace \'r\': cost 1 Total cost 3. Example case 3: Transform \\"intention\\" to \\"execution\\" with the following operations: 1. Replace \'i\' with \'e\': cost 1 2. Replace \'n\' with \'x\': cost 1 3. Remove \'t\': cost 1 4. Replace \'t\' with \'c\': cost 1 5. Insert \'o\': cost 1 Total cost 5.","solution":"def min_cost_to_transform(S, T): Calculates the minimum cost to transform string S into string T using the given operations. # Get the lengths of both strings m, n = len(S), len(T) # Initialize a 2D array to store the minimum cost up to each position dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the first row and first column of the array for i in range(m + 1): dp[i][0] = i # Deleting all characters from S to get an empty T for j in range(n + 1): dp[0][j] = j # Inserting all characters to get T from an empty S # Fill the rest of the dp array for i in range(1, m + 1): for j in range(1, n + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If characters are equal, no cost else: dp[i][j] = min(dp[i - 1][j] + 1, # Deleting a character from S dp[i][j - 1] + 1, # Inserting a character into S dp[i - 1][j - 1] + 1) # Replacing a character in S # The answer is the cost to transform S[0..m] to T[0..n] return dp[m][n]"},{"question":"# Zigzag Convert Given a string s and an integer numRows, write a function to convert s into a zigzag pattern on a given number of rows like this: **P** **A** **H** **N** **A** **P** **L** **S** **I** **I** **G** **Y** **I** **R** Then, read the zigzag pattern row by row and return the output string. **E.g. Input: \\"PAYPALISHIRING\\", numRows = 3 => Output: \\"PAHNAPLSIIGYIR\\"** *Note: numRows is guaranteed to be a positive integer and less than or equal to the length of s.*","solution":"def convert(s, numRows): if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * min(numRows, len(s)) cur_row, going_down = 0, False for char in s: rows[cur_row] += char if cur_row == 0 or cur_row == numRows - 1: going_down = not going_down cur_row += 1 if going_down else -1 return \'\'.join(rows)"},{"question":"Alex loves playing with arrays and numbers. He has an array of integers and wants to partition this array into two subarrays such that the absolute difference between the sums of the two subarrays is minimized. Your task is to help Alex find this minimum possible absolute difference. -----Input:----- - The input consists of a single integer N that represents the number of elements in the array. - The next line contains N space-separated integers representing the elements of the array. -----Output:----- - Output the minimum possible absolute difference between the sums of the two subarrays. -----Constraints----- - 1 leq N leq 100 - 1 leq text{array elements} leq 50 -----Sample Input:----- 4 1 6 11 5 -----Sample Output:----- 1","solution":"def min_subset_sum_difference(arr): Partition the array into two subsets such that the absolute difference between their sums is minimized. total_sum = sum(arr) n = len(arr) # DP table where dp[i][j] will be True if there is a subset of # the first i elements with sum equal to j dp = [[False] * (total_sum + 1) for _ in range(n + 1)] # Initializing first column as True because 0 sum is possible with all elements. for i in range(n + 1): dp[i][0] = True # Filling the subset sum table for i in range(1, n + 1): for j in range(1, total_sum + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] # Finding the minimum possible absolute difference min_diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: min_diff = total_sum - 2 * j break return min_diff"},{"question":"Consider Alice wanting to find prime numbers in a certain range to help her in a cryptography project. She needs your help to count the number of prime numbers in a given range. Within a given range, prime numbers are those that have no divisors other than 1 and themselves, and they must be greater than 1. A prime number is defined as a natural number greater than 1 that has no positive divisors other than 1 and itself. Help Alice by writing a program that takes in multiple test cases and, for each test case, returns the count of prime numbers in the specified range. -----Input:----- - The first line contains T, the number of test cases. - The next T lines each contain two integers, L and R (1 ≤ L ≤ R ≤ 10^6), representing the range [L, R]. -----Output:----- For each test case, output the count of primes in the range [L, R]. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ L ≤ R ≤ 10^6 -----Sample Input:----- 3 1 10 11 20 21 30 -----Sample Output:----- 4 4 2 Note: In the first test case, the prime numbers between 1 and 10 are 2, 3, 5, and 7. Hence, the output is 4. In the second test case, the prime numbers between 11 and 20 are 11, 13, 17, and 19. So the output is 4. In the third test case, the prime numbers between 21 and 30 are 23 and 29. So the output is 2.","solution":"def sieve_of_eratosthenes(max_range): sieve = [True] * (max_range + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime p = 2 while (p * p <= max_range): if (sieve[p] == True): for i in range(p * p, max_range + 1, p): sieve[i] = False p += 1 return sieve def prime_count_in_range(L, R, sieve): return sum(sieve[L:R+1]) def count_primes_in_range(T, ranges): max_r = max(R for L, R in ranges) sieve = sieve_of_eratosthenes(max_r) result = [] for L, R in ranges: result.append(prime_count_in_range(L, R, sieve)) return result"},{"question":"You are given two non-empty arrays of integers `students` and `sandwiches` where `students[i]` is the `i-th` student\'s preference (0 for a square sandwich and 1 for a circular sandwich) and `sandwiches[j]` is the `j-th` type of sandwich in the stack (0 for square, 1 for circular). The students are standing in a queue and each student looks at the front sandwich of the stack. If they prefer it, they will take it and move to the end of the queue. If not, they will move to the end of the queue without taking the sandwich. This continues until none of the students wants the sandwich at the top of the stack. Return the number of students that are unable to eat. Example 1: Input: students = [1,1,0,0], sandwiches = [0,1,0,1] Output: 0 Explanation: - The first student in line prefers square sandwiches, but the top sandwich is circular. They move to the end. - The second student prefers square sandwiches, and the top sandwich is square, so they take it. The queue is now [1,0,0,1] and the stack is [1,0,1]. - The first student in line now prefers circular sandwiches, and the top sandwich is circular, so they take it. The queue is now [0,0,1] and the stack is [0,1]. - The first student in line prefers circular sandwiches, but the top sandwich is square. They move to the end. - Similarly, the students keep moving to the end until they each get their preferred sandwich. Example 2: Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1] Output: 3 Constraints: - 1 <= students.length, sandwiches.length <= 100 - students.length == sandwiches.length - sandwiches[i] is either 0 or 1 - students[i] is either 0 or 1","solution":"def count_students_unable_to_eat(students, sandwiches): Calculates the number of students that are unable to eat based on their sandwich preference. :param students: List of integers representing the students\' sandwich preferences (0 or 1). :param sandwiches: List of integers representing the stack of sandwiches (0 or 1). :return: Integer representing the number of students that are unable to eat. from collections import deque student_queue = deque(students) sandwich_stack = deque(sandwiches) unable_to_eat_count = 0 while student_queue and sandwich_stack: if unable_to_eat_count == len(student_queue): break if student_queue[0] == sandwich_stack[0]: student_queue.popleft() sandwich_stack.popleft() unable_to_eat_count = 0 else: student_queue.append(student_queue.popleft()) unable_to_eat_count += 1 return len(student_queue)"},{"question":"Design a class MedianFinder that supports the following operations: 1. addNum(int num) Adds a number num to the data structure. 2. findMedian() Returns the median of all elements so far. The median is the middle element in an ordered integer list. If the size of the list is even, the median is the average of the two middle elements. Example: Input [\\"MedianFinder\\",\\"addNum\\",\\"addNum\\",\\"findMedian\\",\\"addNum\\",\\"findMedian\\"] [[],[1],[2],[],[3],[]] Output [null,null,null,1.5,null,2.0] Explanation MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // [1] medianFinder.addNum(2); // [1,2] medianFinder.findMedian(); // returns 1.5, since (1 + 2) / 2 = 1.5 medianFinder.addNum(3); // [1,2,3] medianFinder.findMedian(); // returns 2.0 Constraints: - There will be at most 50000 operations considering both addNum and findMedian. - -10^5 <= num <= 10^5","solution":"import heapq class MedianFinder: def __init__(self): self.small = [] # Max-heap for the lower half self.large = [] # Min-heap for the upper half def addNum(self, num: int) -> None: # Add to max-heap (inverted min-heap) heapq.heappush(self.small, -num) # Balance the heaps: The max number of small should be less than or equal to the min number of large if self.small and self.large and (-self.small[0] > self.large[0]): heapq.heappush(self.large, -heapq.heappop(self.small)) # Ensure size property: the heaps\' sizes should be len(small) >= len(large) if len(self.small) > len(self.large) + 1: heapq.heappush(self.large, -heapq.heappop(self.small)) elif len(self.large) > len(self.small): heapq.heappush(self.small, -heapq.heappop(self.large)) def findMedian(self) -> float: if len(self.small) > len(self.large): return -self.small[0] return (-self.small[0] + self.large[0]) / 2"},{"question":"Palindrome Number Checker *** Introduction Palindromes are numbers that remain the same when their digits are reversed. Examples of palindrome numbers include 121, 1331, and 12321. They have the same values when read from both left to right and right to left. Your task is to write a function that checks whether a given integer is a palindrome. Task Write a function `is_palindrome(number: int) -> bool` that takes an integer `number` and returns `True` if the number is a palindrome, and `False` if it is not. Constraints - The input number can be negative, but the palindrome check should consider only the absolute value. Examples * **Input:** `121` **Output:** `True` * **Input:** `-121` **Output:** `True` (since the absolute value is 121) * **Input:** `123` **Output:** `False` * **Input:** `1331` **Output:** `True` * **Input:** `-1331` **Output:** `True` * **Input:** `10` **Output:** `False` * **Input:** `-10` **Output:** `False` Notes - Your function should handle integers of any size within the range of 32-bit signed integers. - Ensure your solution does not convert the integer into a string to check for palindromes. Try to achieve it using purely mathematical operations.","solution":"def is_palindrome(number: int) -> bool: Check if a given number is a palindrome considering its absolute value. Args: number (int): The input number to check. Returns: bool: True if the number is a palindrome, False otherwise. if number < 0: number = -number original_number = number reversed_number = 0 while number > 0: digit = number % 10 reversed_number = reversed_number * 10 + digit number = number // 10 return original_number == reversed_number"},{"question":"Write a function that can determine whether a given string is a valid hexadecimal number. A valid hexadecimal number can be prefixed with \\"0x\\" or \\"0X\\" (case insensitive), and must consist of digits [0-9] and letters [a-f] or [A-F]. Example: \\"0x1A3F\\" --> True \\"1A3G\\" --> False \\"0Xabc123\\" --> True","solution":"import re def is_valid_hexadecimal(s): Checks if the given string is a valid hexadecimal number. A valid hexadecimal number can be prefixed with \\"0x\\" or \\"0X\\" (case insensitive), and must consist of digits [0-9] and letters [a-f] or [A-F]. Parameters: s (str): The string to check. Returns: bool: True if the string is a valid hexadecimal number, False otherwise. pattern = re.compile(r\'^(0x|0X)?[0-9a-fA-F]+\') return bool(pattern.match(s))"},{"question":"Given a string of characters, implement a function that finds the length of the longest substring without repeating characters. The function should return an integer representing this length. The input string will contain only printable ASCII characters. For example: ``` longestSubstring(\\"abcabcbb\\") == 3 // The answer is \\"abc\\", length 3 longestSubstring(\\"bbbbb\\") == 1 // The answer is \\"b\\", length 1 longestSubstring(\\"pwwkew\\") == 3 // The answer is \\"wke\\", length 3 ``` More specifically, the substring needs to consist of contiguous characters and must be the longest one without any repeating characters.","solution":"def longestSubstring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index_map = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_index_map: # Move the start pointer to the right of the last occurrence start = max(start, char_index_map[s[end]] + 1) # Update the last occurrence of the character char_index_map[s[end]] = end # Update the maximum length max_len = max(max_len, end - start + 1) return max_len"},{"question":"Write a function that takes as its parameter a *string representing a mathematical expression*, which contains just *integers and the operators +, -, *, and /*. The function should return the *result of evaluating the expression*. You can assume the input will always be a valid expression and will not include any whitespace. So: ```python evaluate_expression(\\"3+5*2-6\\") == 7 evaluate_expression(\\"10+20/5*3-1\\") == 21 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string and returns the result. The expression contains integers and the operators +, -, *, and / with no whitespace. return eval(expression)"},{"question":"Given an array of integers where each element can appear twice or once, and all duplicates appear exactly twice except for one unique element that appears only once. Write a function to find the single unique element. You must implement a solution with a linear runtime complexity and use only constant extra space. Example 1: Input: [2,2,1,4,4] Output: 1 Example 2: Input: [1,3,3,5,5,9,9] Output: 1 Example 3: Input: [8,7,7,8,9,9,10] Output: 10","solution":"def find_unique(nums): Returns the single unique element in the array where all other elements appear exactly twice. unique_element = 0 for num in nums: unique_element ^= num # XOR all elements together. Duplicates will cancel out. return unique_element"},{"question":"You need to implement a function that takes a string representing a mathematical expression and evaluates it. The string may contain the following elements: integer numbers, the operators \\"+\\", \\"-\\", \\"*\\", \\"/\\", and parentheses \\"(\\", \\")\\". The function needs to correctly handle the order of operations (PEMDAS/BODMAS rules). Notes: 1. Assume all numbers are integers. 2. Operators will be binary operators. 3. There won\'t be any whitespaces in the input string. Some examples: \\"3+2*2\\" -> 7 \\" 3+5 / 2 \\" -> 5 \\"(1+(4+5+2)-3)+(6+8)\\" -> 23 You should implement a function that returns an integer representing the evaluated result of the given string expression.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing integers, \'+\', \'-\', \'*\', \'/\', and parentheses. def evaluate(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == \'(\': num = evaluate(tokens) if not token.isdigit() or not tokens: # end of token or end of expression if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': stack[-1] = int(stack[-1] / num) # use int() for floor division sign = token num = 0 if token == \')\': break return sum(stack) # preprocess expression into tokens tokens = [] num = \'\' for char in expression: if char.isdigit(): num += char else: if num: tokens.append(num) num = \'\' tokens.append(char) if num: tokens.append(num) return evaluate(tokens)"},{"question":"A robotics competition features a task where robots must navigate a grid and pick up various objects placed at given coordinates. Each robot starts from the origin (0, 0) and can move in four directions: up, down, left, and right. Each move takes exactly one second, and a robot can only carry one object at a time. Therefore, it has to come back to the origin to drop each object before picking up the next one. Write a function `robot_journey(objects)` that takes in a list of tuples `objects` where each tuple contains two integers representing the coordinates of an object. The function should return the total time (in seconds) it will take for a robot to pick up all objects and return to the origin after each pickup. For example: ```python robot_journey([(1, 3), (2, 2), (3, 1)]) = 24 # Breakdown: # (1, 3): 8 seconds (1,3 to (0,0) and back = 4*2 seconds) # (2, 2): 8 seconds (4*2 seconds) # (3, 1): 8 seconds (4*2 seconds) # Total time: 8 + 8 + 8 = 24 seconds. ``` Note: Coordinates will always be positive integers. The origin (0,0) is not included in the list of objects.","solution":"def robot_journey(objects): Returns the total time (in seconds) it will take for a robot to pick up all objects and return to the origin after each pickup. Parameters: objects (list of tuples): A list of tuples where each tuple contains two integers representing the coordinates of an object. Returns: int: Total time in seconds. total_time = 0 for x, y in objects: # Calculate the time to go to the object and come back to the origin time_to_object_and_back = (abs(x) + abs(y)) * 2 total_time += time_to_object_and_back return total_time"},{"question":"The village of Smartville is known for its network of interconnected bridges. Each bridge connects two islands, and there is exactly one path between any two islands. Recently, a storm caused damage to some bridges, and the villagers want to ensure that the network remains connected by rebuilding the minimum number of bridges required. Given a description of the bridges and the islands, your task is to determine the minimum number of bridges needed to rebuild so that every island can be reached from any other island. -----Input:----- - First-line will contain two integers, N and M, the number of islands and bridges respectively. - The next M lines each contain two integers, u and v, representing that there is a bridge connecting island u and island v. -----Output:----- Output a single integer, the minimum number of bridges that need to be rebuilt to ensure all islands are connected. -----Constraints----- - 1 leq N leq 10^5 - 0 leq M leq 10^5 - 1 leq u, v leq N -----Sample Input:----- 6 5 1 2 1 3 2 4 3 5 4 6 -----Sample Output:----- 0 -----Explanation:----- The bridge network described in the input already ensures that there is exactly one path between any two islands, hence no additional bridges need to be rebuilt.","solution":"def min_bridges_to_rebuild(n, m, bridges): from collections import defaultdict, deque if n == 1: return 0 # Only one island, no bridge needed adj_list = defaultdict(list) for u, v in bridges: adj_list[u].append(v) adj_list[v].append(u) def bfs(start, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) component_count = 0 for island in range(1, n + 1): if not visited[island]: visited[island] = True bfs(island, visited) component_count += 1 return component_count - 1"},{"question":"You are tasked to create a function that takes an array of numbers and returns the sum of every second number in the array, starting from the first element. If the array is empty or contains only one element, the function should return `0`. For example, the following code will return `9`: ``` sumEverySecond([1, 2, 3, 4, 5]) // => 9 (1 + 3 + 5) ``` And this code will return `4`: ``` sumEverySecond([4]) // => 4 (since there\'s only one element, it will be considered as every second element) ``` If the input array is empty, the function will return `0`: ``` sumEverySecond([]) // => 0 ```","solution":"def sumEverySecond(numbers): Sums every second number in the array starting from the first element. If the array is empty or contains only one element, returns 0. Args: numbers (list): List of numbers. Returns: int: The sum of every second number starting from the first. if not numbers: return 0 # Take every second element starting from the first (index 0) return sum(numbers[::2])"},{"question":"Write a function `rearrange_numbers(arr: List[int]) -> List[int]` that takes as input a list of integers and reorders the numbers in such a way that even-indexed positions are filled with the even numbers in ascending order and odd-indexed positions are filled with the odd numbers in descending order. # Details - If the list has more even-indexed positions than even numbers, the remaining positions should be filled with zeros. - Similarly, if the list has more odd-indexed positions than odd numbers, the remaining positions should be filled with zeros. # Constraints - The input list will contain at least one integer. - The integers can include negative numbers. # Example ```python input: [3, 8, 5, 13, 12, 10] output: [8, 13, 10, 5, 12, 3] Explanation: - Evens: [8, 10, 12] -> Put in ascending order and placed at even positions: [8, _, 10, _, 12, _] - Odds: [3, 5, 13] -> Put in descending order and placed at odd positions: [_, 13, _, 5, _, 3] So the final output is [8, 13, 10, 5, 12, 3] ``` ```python input: [5, 2, 9, 4, 3] output: [2, 9, 4, 5, 0] Explanation: - Evens: [2, 4] -> Put in ascending order and placed at even positions: [2, _, 4, _, 0] - Odds: [5, 9, 3] -> Put in descending order and placed at odd positions: [_, 9, _, 5, _] So the final output is [2, 9, 4, 5, 0]. ``` Write the function `rearrange_numbers(arr: List[int]) -> List[int]` that implements this functionality.","solution":"from typing import List def rearrange_numbers(arr: List[int]) -> List[int]: evens = sorted([x for x in arr if x % 2 == 0]) odds = sorted([x for x in arr if x % 2 != 0], reverse=True) result = [] even_index, odd_index = 0, 0 for i in range(len(arr)): if i % 2 == 0: if even_index < len(evens): result.append(evens[even_index]) even_index += 1 else: result.append(0) else: if odd_index < len(odds): result.append(odds[odd_index]) odd_index += 1 else: result.append(0) return result"},{"question":"Implement a function that takes in a list of strings and returns a list of integers representing the length of each corresponding string. If the input list is empty, the function should return an empty list. e.g. [\\"apple\\", \\"banana\\", \\"cherry\\"] --> [5, 6, 6], [] --> [] ```if:csharp Documentation: Kata.StringLengths Method (List<String>) Calculates the length of each string in the provided list. Returns a list of integers representing the lengths of the strings. Syntax public static List<int> StringLengths(List<string> words) Parameters words Type: System.Collections.Generic.List<string> The list of strings whose lengths are to be calculated. Return Value Type: System.Collections.Generic.List<int> A list of integers representing the lengths of each string. Exceptions Exception Condition ArgumentNullException words is null. ```","solution":"def string_lengths(words): Takes a list of strings and returns a list of integers representing the length of each string. Parameters: words (list of str): The list of strings whose lengths are to be calculated. Returns: list of int: A list of integers representing the lengths of each string. if words is None: raise ValueError(\\"Input list cannot be None\\") return [len(word) for word in words]"},{"question":"You are given a matrix with positive integer elements. Each row and each column of the matrix is sorted in non-decreasing order. Your task is to find a given target value in this matrix and return a boolean value indicating whether or not it is present. The matrix is provided in a flattened list form alongside its dimensions. -----Input----- First line contains two integers M and N, size of the matrix. (1 ≤ M, N ≤ 300) Second line contains M*N positive integers (each having a value of 1,000,000 at most), which represent the elements of the matrix, given in row-major order. Third line contains an integer T, the target value to search for. -----Output----- For each test case, output on a line a boolean value: \\"True\\" if the matrix contains the target value T, otherwise \\"False\\". ----Example---- Input: 3 3 1 4 7 2 5 8 3 6 9 5 Output: True Explanation: The matrix constructed from the input is as follows: 1 4 7 2 5 8 3 6 9 Since the target value 5 is present in the matrix, the output is True.","solution":"def search_matrix(m, n, flattened_matrix, target): Searches for the target value in the matrix represented by the flattened_matrix of size m x n. Returns True if the target is found, otherwise False. # Convert the flattened list into a matrix form matrix = [] index = 0 for i in range(m): row = flattened_matrix[index:index+n] matrix.append(row) index += n # Start search from top right corner row = 0 col = n - 1 while row < m and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"You are given an array of integers representing temperatures recorded each day for a month. You need to calculate the number of days the temperature was above its monthly average. For example, if the temperatures for the month are: ```[30, 32, 35, 31, 33, 34, 29, 28, 35, 36, 30, 29, 31, 33, 34, 30, 31, 32, 33, 35, 36, 31, 30, 29, 28, 30, 32, 34, 35, 31, 33]``` Write a function that takes an array of integers and returns the number of days the temperature was above the monthly average. Notes: - The array length will be between 28 and 31 (inclusive) representing typical month length. - Each temperature is an integer between -50 and 50 (inclusive).","solution":"def count_days_above_average(temperatures): Returns the number of days the temperature was above the monthly average. temperatures: List[int] List of daily temperatures recorded for a month. return: int Number of days the temperature was above the monthly average. if not temperatures: return 0 average_temp = sum(temperatures) / len(temperatures) count = sum(1 for temp in temperatures if temp > average_temp) return count"},{"question":"Suppose you have a list of timestamps represented as strings in the format \'YYYY-MM-DD HH:MM:SS\'. Write a function that takes in this list and returns the earliest and latest timestamps as a tuple. The function should sort the timestamps in ascending order and return the first and last elements. Example ```python timestamps = [\\"2023-10-01 18:30:00\\", \\"2021-04-15 12:00:00\\", \\"2022-08-23 07:45:30\\"] find_extremes(timestamps) == (\\"2021-04-15 12:00:00\\", \\"2023-10-01 18:30:00\\") ``` Constraints - The list will contain at least two timestamp strings. - You may assume all timestamps are valid and unique.","solution":"def find_extremes(timestamps): Returns the earliest and latest timestamps from a list of timestamps. Parameters: timestamps (list): A list of timestamps represented as strings in the format \'YYYY-MM-DD HH:MM:SS\'. Returns: tuple: A tuple containing the earliest and latest timestamps. sorted_timestamps = sorted(timestamps) return (sorted_timestamps[0], sorted_timestamps[-1])"},{"question":"# Path Finder Series: Water Maze In this challenge, you need to navigate an imaginary water maze. The maze consists of a grid of cells, where each cell can either be walkable land (\'.\') or water (\'W\'). The start point is always the top-left corner (0, 0), and the end point is the bottom-right corner (n-1, n-1). You can move horizontally or vertically between adjacent land cells, but you cannot move into water cells. Write a function that determines if it is possible to reach the end point from the start. Your task is to implement the function `can_reach_end(maze)`. The input, `maze`, will be an `n x n` list of characters, where each character is either a \'.\' (land) or \'W\' (water). The function should return `True` if it is possible to reach the end point from the start, and `False` otherwise. Input: - A list of lists of characters, `maze`, where each sub-list represents a row in the grid. Output: - A boolean value, `True` if a path exists from the start (0, 0) to the end (n-1, n-1), and `False` otherwise. Example: ```python maze = [ [\'.\', \'W\', \'.\'], [\'.\', \'.\', \'W\'], [\'W\', \'.\', \'.\'] ] print(can_reach_end(maze)) # should return True maze = [ [\'.\', \'W\', \'W\'], [\'W\', \'.\', \'W\'], [\'W\', \'W\', \'.\'] ] print(can_reach_end(maze)) # should return False ``` Constraints: - You can assume the maze will have at least one cell (1x1). - All cells in the input grid will either be \'.\' or \'W\'. - The input maze will always be square (n x n) where 1 ≤ n ≤ 100. Implement the function `can_reach_end(maze)` to solve the problem.","solution":"def can_reach_end(maze): Determines if it is possible to reach the bottom-right corner of the maze starting from the top-left corner, only passing through walkable land (\'.\') and not water (\'W\'). Arguments: maze -- list of lists of characters representing the maze. Returns: True if there is a path from the start (0, 0) to the end (n-1, n-1), otherwise False. n = len(maze) if maze[0][0] == \'W\' or maze[n-1][n-1] == \'W\': return False def dfs(x, y, visited): if x == n-1 and y == n-1: return True visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and maze[nx][ny] == \'.\': if dfs(nx, ny, visited): return True return False visited = set() return dfs(0, 0, visited)"},{"question":"Given an undirected graph, determine the number of connected components. A connected component of an undirected graph is a maximal set of nodes such that there is a path between any two nodes in this set. Therefore, the number of connected components in a graph is the number of such sets in the graph. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and the number of edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 le u, v le n) denoting an edge between node u and node v. -----Output----- Output a single integer — the number of connected components in the graph. -----Examples----- Input 6 5 1 2 2 3 4 5 5 6 6 4 Output 2 Input 4 0 Output 4 Input 5 2 1 2 4 5 Output 3 -----Note----- In the first example, the graph has 6 nodes and 5 edges. Nodes 1, 2, and 3 are connected, forming one connected component. Nodes 4, 5, and 6 are connected, forming another connected component. Thus, the output is 2. In the second example, the graph has 4 nodes and no edges, meaning each node is its own connected component. Therefore, the output is 4. In the third example, nodes 1 and 2 are connected, forming one connected component. Nodes 4 and 5 are connected, forming another connected component. Node 3 is not connected to any other node, forming its own connected component. Thus, the output is 3.","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: u = queue.popleft() for v in graph[u]: if v not in visited: visited.add(v) queue.append(v) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() num_components = 0 for node in range(1, n+1): if node not in visited: bfs(node) num_components += 1 return num_components # To use the function, `count_connected_components` # Example usage: # n = 6 # m = 5 # edges = [(1, 2), (2, 3), (4, 5), (5, 6), (6, 4)] # print(count_connected_components(n, m, edges)) # Output: 2"},{"question":"Ravi loves playing with numbers. He came across a game where he has to find the smallest positive integer that is a multiple of a given number \'X\' and also forms a palindrome when written in decimal notation. Ravi needs your help to solve this problem efficiently. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single integer X. -----Output:----- For each test case, print a single line containing the smallest positive palindrome number that is a multiple of X. -----Constraints----- - 1 leq T leq 1000 - 1 leq X leq 10^6 -----Sample Input:----- 2 1 5 -----Sample Output:----- 1 5 Note: - For the first case, the number 1 is a palindrome and a multiple of 1. - For the second case, the number 5 is a palindrome and a multiple of 5.","solution":"def is_palindrome(n): Check if a given number n is a palindrome. return str(n) == str(n)[::-1] def smallest_palindrome_multiple(x): Find the smallest positive integer that is a multiple of x and a palindrome. i = 1 while True: if is_palindrome(i) and i % x == 0: return i i += 1 def solve(T, test_cases): results = [] for x in test_cases: results.append(smallest_palindrome_multiple(x)) return results"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the integers that have an even number of digits. + The function should accept a single parameter that is a list of integers (ex. `[12, 345, 2, 6, 7896]`). + The function should return a list with integers from the input list that have an even number of digits. **Note:** Zero is considered to have 1 digit. Example ``` [12, 345, 2, 6, 7896] --> [12, 7896] ```","solution":"def even_digit_numbers(nums): Returns a new list with integers from the input list that have an even number of digits. Args: nums (list of int): List of integers Returns: list of int: List of integers with an even number of digits return [num for num in nums if len(str(abs(num))) % 2 == 0]"},{"question":"A company is implementing a digital scheduling system where meetings are scheduled based on a 12-hour clock format. However, to avoid scheduling conflicts, the system needs to convert all times into minutes past midnight. Please complete the function `convert_to_minutes(time)` that takes a string `time` representing a time in the format of `hh:mmAM` or `hh:mmPM`, and returns an integer that represents the number of minutes past midnight. For example: - `convert_to_minutes(\\"12:00AM\\")` should return `0` - `convert_to_minutes(\\"01:00AM\\")` should return `60` - `convert_to_minutes(\\"12:00PM\\")` should return `720` - `convert_to_minutes(\\"01:00PM\\")` should return `780` - `convert_to_minutes(\\"11:59PM\\")` should return `1439` Note: 1. You can assume the input string is always in the correct format. 2. The hours will always be between 1 and 12, inclusive.","solution":"def convert_to_minutes(time): Convert a time in the format of hh:mmAM or hh:mmPM into minutes past midnight. period = time[-2:] # \\"AM\\" or \\"PM\\" hours = int(time[:2]) minutes = int(time[3:5]) if period == \\"AM\\": if hours == 12: hours = 0 else: if hours != 12: hours += 12 return hours * 60 + minutes"},{"question":"Create a function that receives a string representing a mathematical operation in Reverse Polish Notation (RPN) and returns the result of the operation. The function should support the following operations: addition `+`, subtraction `-`, multiplication `*`, and division `/`. Example: ``` evaluateRPN(\\"3 4 +\\") --> 7 # 3 + 4 = 7 evaluateRPN(\\"2 3 + 4 *\\") --> 20 # (2 + 3) * 4 = 20 evaluateRPN(\\"5 1 2 + 4 * + 3 -\\") --> 14 # 5 + ((1 + 2) * 4) - 3 = 14 ``` Notes * Division should be treated as floating point division, i.e., 4/3 should return approximately 1.3333. * The input string is always a valid RPN expression.","solution":"def evaluateRPN(expression): Evaluates a mathematical expression in Reverse Polish Notation (RPN). Parameters: expression (str): A string representing the RPN expression. Returns: float: The result of the RPN evaluation. stack = [] tokens = expression.split() for token in tokens: if token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a / b stack.append(result) else: stack.append(float(token)) return stack[0]"},{"question":"Create a function that takes a string as input and returns the longest substring that contains at most two different characters. For example, for the input string `\\"eceba\\"`, the output would be `\\"ece\\"`. Another example, for the input string `\\"ccaabbb\\"`, the output would be `\\"aabbb\\"`. The function signature should be: ```python def longest_substr_two_distinct(s: str) -> str: pass ``` Write a solution that runs in linear time.","solution":"def longest_substr_two_distinct(s: str) -> str: Returns the longest substring with at most two distinct characters. n = len(s) if n < 3: return s # Use two pointers technique left = 0 right = 0 max_length = 2 start = 0 # HashMap to keep track of the last occurrence of each character hash_map = {} while right < n: # Add the character at the right pointer to the hash map hash_map[s[right]] = right right += 1 # Check if there are more than 2 distinct characters in the current window if len(hash_map) > 2: # Remove the leftmost character del_idx = min(hash_map.values()) del hash_map[s[del_idx]] left = del_idx + 1 # Update max_length and starting index of the longest substring if right - left > max_length: max_length = right - left start = left return s[start:start + max_length]"},{"question":"The company is launching a new loyalty program where customers earn points for each purchase, and the points can be redeemed for discounts on future purchases. The loyalty program works as follows: - For every 10 dollars spent in a single transaction, 1 loyalty point is earned. - For example, if a customer spends 35 dollars, they earn 3 loyalty points. - If the transaction amount includes cents, the cents are ignored. - For example, if a customer spends 47.99 dollars, it is considered as 47 dollars, and they earn 4 loyalty points. - The points can be redeemed for a discount on future transactions, with each point worth a 5% discount up to a maximum of 50%. Implement a function `calculate_discount` that takes an integer `spend` representing the amount of dollars spent in a transaction, and an integer `redeem_points` representing the number of loyalty points the customer wants to redeem to get a discount for the current transaction. The function should return the final amount (after applying the discount) that the customer needs to pay. - If the number of points to redeem exceeds the maximum points necessary to get a 50% discount, then only redeem the points necessary to get the maximum discount. - The amount after applying the discount should be rounded to the nearest integer. *Constraints:* - `1 <= spend <= 10000` - `0 <= redeem_points <= 100` *Examples:* ``` calculate_discount(47, 4) -> 38 calculate_discount(120, 10) -> 60 calculate_discount(75, 5) -> 56 calculate_discount(100, 20) -> 50 ```","solution":"def calculate_discount(spend, redeem_points): Calculate the final amount to pay after applying the discount based on redeem points. - For every 10 dollars spent in a single transaction, 1 loyalty point is earned. - If the transaction amount includes cents, the cents are ignored. - The points can be redeemed for a discount on future transactions, with each point worth a 5% discount up to a maximum of 50%. - If the number of points to redeem exceeds the maximum points necessary to get a 50% discount, then only redeem the points necessary to get the maximum discount. - The amount after applying the discount should be rounded to the nearest integer. :param spend: int, the amount of dollars spent in a transaction :param redeem_points: int, the number of loyalty points to redeem to get a discount for the current transaction :return: int, the final amount to pay after applying the discount max_discount_percentage = 50 discount_per_point = 5 max_redeemable_points = max_discount_percentage // discount_per_point actual_redeemable_points = min(redeem_points, max_redeemable_points) discount_percentage = actual_redeemable_points * discount_per_point discounted_amount = spend * (1 - discount_percentage / 100) return round(discounted_amount)"},{"question":"Complete the function to determine whether the given string (`s`) can be transformed into a string in which no two adjacent characters are the same. If you can rearrange the characters in such a manner, return the rearranged string. If it\'s impossible, return `\\"Not posible\\"`. Return `\\"Not valid\\"` if the input is not a string. Examples ``` \\"aabb\\" => \\"abab\\" (or \\"baba\\") \\"aaaabc\\" => \\"Not posible\\" \\"aaab\\" => \\"Not posible\\" \\"abcd\\" => \\"abcd\\" (or \\"abdc\\", \\"acbd\\", etc.) \\"112233\\" => \\"121323\\" (or any similar variation) 1234 => \\"Not valid\\" ``` # Notes 1. You may assume that the string contains only letters and digits. 2. Upper and lower case letters are considered different characters.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. Returns \\"Not posible\\" if not possible, or \\"Not valid\\" if the input is not a string. if not isinstance(s, str): return \\"Not valid\\" # Frequency counter for the characters freq = Counter(s) maxHeap = [(-count, char) for char, count in freq.items()] heapq.heapify(maxHeap) prev_count, prev_char = 0, \'\' result = [] while maxHeap: count, char = heapq.heappop(maxHeap) # Append current character to result result.append(char) # Since we\'re using max-heap as equivalent to a priority queue, we use negative count if prev_count < 0: heapq.heappush(maxHeap, (prev_count, prev_char)) count += 1 # Use one occurrence prev_count, prev_char = count, char rearranged_string = \\"\\".join(result) if len(rearranged_string) != len(s): return \\"Not posible\\" return rearranged_string"},{"question":"Henry the Wi-Fi hacker has another challenge for you. Given a list of Wi-Fi networks represented by their signal strengths, he wants to determine the longest consecutive sequence of networks with strictly increasing signal strengths. However, this time he wants you to find the longest sequence that has a prime length. You need to write a function that takes as input the list of signal strengths and outputs the length of the longest consecutive sequence with strictly increasing signal strengths that also has a prime length. If no such sequence exists, return 0. -----Input----- The input contains a single line with space-separated integers representing the signal strengths of the Wi-Fi networks. -----Output----- Output a single integer that is the length of the longest strictly increasing subsequence that has a prime length. If no such sequence exists, output 0. -----Constraints----- 1 <= len(signal_strengths) <= 10^5 0 <= signal_strengths[i] <= 10^9 -----Example----- Input: 3 2 1 2 3 5 6 4 1 2 3 Output: 5 Explanation: The sequences [1, 2, 3, 5, 6] and [1, 2, 3] are strictly increasing. Their lengths are 5 and 3, respectively. Since both 5 and 3 are prime numbers, the longest such sequence has a length of 5.","solution":"def is_prime(n): Check if an integer n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_length_increasing_subsequence(signal_strengths): Returns the length of the longest strictly increasing subsequence with a prime length. if not signal_strengths: return 0 n = len(signal_strengths) dp = [1] * n max_len = 1 for i in range(1, n): for j in range(i): if signal_strengths[i] > signal_strengths[j]: dp[i] = max(dp[i], dp[j] + 1) max_len = max(max_len, dp[i]) max_prime_len = 0 for length in range(2, max_len + 1): if is_prime(length) and length in dp: max_prime_len = max(max_prime_len, length) return max_prime_len"},{"question":"In the Kingdom of Chessland, a knight is a very powerful piece on the chessboard. The knight moves in an \\"L\\" shape: two squares in a horizontal or vertical direction and then one square perpendicular to that direction. Given the current position of the knight on a standard 8x8 chessboard, you need to determine the number of valid moves the knight can make. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each of the following T lines contains the current position of the knight in chess notation (e.g., \\"a1\\", \\"h8\\"). -----Output----- For each test case, output a single integer representing the number of valid moves the knight can make from its given position. -----Constraints----- - 1 <= T <= 100 - The initial position will always be a valid position on the chessboard -----Example-----Input: 3 a1 d4 h8 Output: 2 8 2 -----Explanation----- For the first test case, the knight at position \\"a1\\" can move to \\"b3\\" and \\"c2\\". For the second test case, the knight at position \\"d4\\" has 8 possible moves: \\"b3\\", \\"b5\\", \\"c2\\", \\"c6\\", \\"e2\\", \\"e6\\", \\"f3\\", and \\"f5\\". For the third test case, the knight at position \\"h8\\" can move to \\"f7\\" and \\"g6\\".","solution":"def valid_knight_moves(position): Returns the number of valid moves a knight can make from the given position on a chessboard. moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] col = ord(position[0]) - ord(\'a\') + 1 row = int(position[1]) valid_moves = 0 for move in moves: new_col = col + move[0] new_row = row + move[1] if 1 <= new_col <= 8 and 1 <= new_row <= 8: valid_moves += 1 return valid_moves def get_valid_knight_moves(test_cases): Processes multiple test cases and returns a list of valid knight moves for each test case. results = [] for position in test_cases: results.append(valid_knight_moves(position)) return results"},{"question":"In a software project, there is a need to log all users\' actions in a sequential and time-stamped manner. Your task is to implement a logger that stores log entries and then retrieves them based on certain criteria. Each log entry contains two pieces of information: 1. `timestamp`: the time at which the log entry was created, represented as a string in the \\"YYYY-MM-DD HH:MM:SS\\" format. 2. `message`: a string representing the log message. You need to implement a `Logger` class with the following methods: - `log(timestamp: str, message: str) -> None`: Adds a new log entry with the given timestamp and message. - `retrieve(start_time: str, end_time: str) -> List[str]`: Retrieves a list of messages that were logged between `start_time` and `end_time`, inclusive. The timestamps are strings in the \\"YYYY-MM-DD HH:MM:SS\\" format. The messages should be returned in the order they were logged. -----Input----- - The first line contains a single integer `N`, the number of operations to be performed. - The next `N` lines each contain an operation in one of the following formats: - `log timestamp message` - `retrieve start_time end_time` -----Output----- For each `retrieve` operation, output the list of log messages that fall within the specified time range, each message on a new line. Separate results for different `retrieve` operations with a blank line. -----Constraints----- - `1 ≤ N ≤ 10^5` - The length of each `timestamp` and `message` string will not exceed 100 characters. - The timestamps are guaranteed to be unique and in correct format. -----Example Input----- 7 log 2023-01-01 12:00:00 User1 logged in log 2023-01-01 12:15:00 User2 logged in log 2023-01-01 12:30:00 User1 performed action log 2023-01-01 12:45:00 User3 logged in log 2023-01-01 12:50:00 User2 logged out retrieve 2023-01-01 12:00:00 2023-01-01 12:30:00 retrieve 2023-01-01 12:15:00 2023-01-01 12:50:00 -----Example Output----- User1 logged in User2 logged in User1 performed action User2 logged in User1 performed action User3 logged in User2 logged out","solution":"from typing import List class Logger: def __init__(self): self.logs = [] def log(self, timestamp: str, message: str) -> None: self.logs.append((timestamp, message)) def retrieve(self, start_time: str, end_time: str) -> List[str]: result = [] for timestamp, message in self.logs: if start_time <= timestamp <= end_time: result.append(message) return result"},{"question":"Write a function to determine the size of the largest contiguous subarray that has a sum equal to a given integer, `k`. # Input - **arr**: an array of integers (positive, negative, or zero). - **k**: an integer. # Output The function should return the size of the largest contiguous subarray that sums to `k`. # Examples ```python largest_subarray_with_sum_k([1, -1, 5, -2, 3], 3) # should return 4 # because the subarray [1, -1, 5, -2] sums to 3 largest_subarray_with_sum_k([-2, -1, 2, 1], 1) # should return 2 # because the subarray [-1, 2] sums to 1 largest_subarray_with_sum_k([1, 2, 3], 6) # should return 3 # because the whole array sums to 6 ``` # Clarifications * The solution should handle arrays containing both positive and negative integers. * If no subarray sums to `k`, the function should return 0.","solution":"def largest_subarray_with_sum_k(arr, k): Determines the size of the largest contiguous subarray with sum equal to k. :param arr: List of integers :param k: Integer target sum :return: Integer size of the largest subarray with sum equal to k sum_to_index = {} current_sum = 0 max_length = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == k: max_length = i + 1 if current_sum - k in sum_to_index: max_length = max(max_length, i - sum_to_index[current_sum - k]) if current_sum not in sum_to_index: sum_to_index[current_sum] = i return max_length"},{"question":"Task Write a method `getSortedSubstrings` which takes a single string as input, generates all unique substrings of the input string, and returns a list of these substrings sorted in lexicographical order. # Input - A string `s` (1 ≤ length of `s` ≤ 100) # Output - A list of substrings of `s`, sorted in lexicographical order. # Constraints: - Substrings should be unique and no duplicates should be present in the output list. # Example ```python getSortedSubstrings(\'abc\') ``` Output: ```python [\'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\'] ``` ```python getSortedSubstrings(\'banana\') ``` Output: ```python [\'a\', \'an\', \'ana\', \'anan\', \'anana\', \'b\', \'ba\', \'ban\', \'bana\', \'banan\', \'banana\', \'n\', \'na\', \'nan\', \'nana\'] ``` # Notes - You may find using a set collection useful to ensure substrings are unique before sorting the list of substrings. - Pay attention to performance, especially with the upper limit of the string length.","solution":"def getSortedSubstrings(s): Generate all unique substrings of the input string s and return them sorted in lexicographical order. Parameters: s (str): The input string Returns: List[str]: A list of unique substrings sorted in lexicographical order substrings = set() length = len(s) for i in range(length): for j in range(i + 1, length + 1): substrings.add(s[i:j]) return sorted(substrings)"},{"question":"You are given an array of non-negative integers representing the heights of columns where the width of each column is 1. Combine rainwater trapped between the columns will form water pockets. Write an algorithm to compute how much water these pockets can trap after raining. Input The input is a single line containing multiple integers separated by spaces, representing the heights of the columns. The number of integers will be between 1 and 1000 inclusive, and each integer will be between 0 and 1000 inclusive. Output Print a single integer, which is the total amount of trapped rainwater. Examples input 0 1 0 2 1 0 1 3 2 1 2 1 output 6 input 4 2 0 3 2 5 output 9","solution":"def trap_water(heights): Calculates the total amount of trapped rainwater given the heights of columns. :param heights: List of integers representing the heights of columns. :return: Integer representing the total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water = 0 # Fill left max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the trapped water for i in range(n): water += min(left_max[i], right_max[i]) - heights[i] return water"},{"question":"Given an array of integers and a target sum, find whether an arithmetic sequence of length greater than or equal to 3 exists in the array such that the sum of the sequence is equal to the target sum. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and S ― the length of the array and the target sum, respectively. - The second line of each test case contains N space-separated integers representing the array. -----Output----- For each test case, print a single line containing the string \\"Yes\\" if such a sequence exists or \\"No\\" otherwise (without quotes). -----Constraints----- - 1 le T le 10 - 3 le N le 10^5 - 1 le text{Array elements}, S le 10^9 -----Example Input----- 2 6 15 1 2 4 5 6 8 5 12 3 6 9 12 15 -----Example Output----- Yes No -----Explanation----- Example case 1: The array contains the arithmetic sequence (1, 4, 6, 4) whose sum is equal to 15. Example case 2: The array does not contain any arithmetic sequence of length greater than or equal to 3 that sums up to 12.","solution":"def find_arithmetic_sequence(arr, target_sum): n = len(arr) for i in range(n-2): for j in range(i+1, n-1): diff = arr[j] - arr[i] seq_sum = arr[i] + arr[j] k = j + 1 count = 2 while k < n and seq_sum < target_sum: if arr[k] - arr[k-1] == diff: seq_sum += arr[k] count += 1 k += 1 if seq_sum == target_sum and count >= 3: return \\"Yes\\" return \\"No\\" def is_arithmetic_sequence_possible(test_cases): results = [] for case in test_cases: n, s = case[0] arr = case[1] results.append(find_arithmetic_sequence(arr, s)) return results"},{"question":"Task Given two strings, `str1` and `str2`, your task is to find out the minimum number of operations required to convert `str1` to `str2`. The allowed operations are: 1. Insert a character 2. Delete a character 3. Replace a character You need to implement an algorithm to find the minimum edit distance between the two strings. # Example For `str1 = \\"kitten\\"` and `str2 = \\"sitting\\"`, the output should be `3`. Here\'s how the answer is obtained: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end For `str1 = \\"flaw\\"` and `str2 = \\"lawn\\"`, the output should be `2`. Here\'s how the answer is obtained: 1. Insert \'n\' at the end 2. Replace \'f\' with \'l\' # Input/Output `[input]` string `str1` A non-empty string of lowercase English letters, `1 ≤ str1.length ≤ 100`. `[input]` string `str2` A non-empty string of lowercase English letters, `1 ≤ str2.length ≤ 100`. `[output]` integer The minimum edit distance between `str1` and `str2`.","solution":"def min_edit_distance(str1, str2): Returns the minimum edit distance between str1 and str2. m, n = len(str1), len(str2) # Create a dp array of size (m+1) x (n+1) dp = [[0] * (n+1) for _ in range(m+1)] # Initialize the dp array for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[m][n]"},{"question":"You are working on a project that involves managing a list of tasks. Each task is represented as a dictionary with the following keys: `\'name\'`, `\'priority\'`, and `\'due_date\'`. The `\'priority\'` is an integer where a lower number represents higher priority, and the `\'due_date\'` is a string in the format `\'YYYY-MM-DD\'`. Your goal is to implement a method that sorts the tasks first by priority (from highest to lowest), and then by due date (earliest first) if two tasks have the same priority. Your Task Implement a function `sort_tasks(tasks)` that takes a list of tasks and returns a new list of tasks sorted by the criteria mentioned. # Example Given the following list of tasks: ```python tasks = [ {\\"name\\": \\"Task1\\", \\"priority\\": 3, \\"due_date\\": \\"2023-11-01\\"}, {\\"name\\": \\"Task2\\", \\"priority\\": 1, \\"due_date\\": \\"2023-10-15\\"}, {\\"name\\": \\"Task3\\", \\"priority\\": 2, \\"due_date\\": \\"2023-10-10\\"}, {\\"name\\": \\"Task4\\", \\"priority\\": 1, \\"due_date\\": \\"2023-10-12\\"}, ] ``` Calling `sort_tasks(tasks)` should return: ```python [ {\\"name\\": \\"Task4\\", \\"priority\\": 1, \\"due_date\\": \\"2023-10-12\\"}, {\\"name\\": \\"Task2\\", \\"priority\\": 1, \\"due_date\\": \\"2023-10-15\\"}, {\\"name\\": \\"Task3\\", \\"priority\\": 2, \\"due_date\\": \\"2023-10-10\\"}, {\\"name\\": \\"Task1\\", \\"priority\\": 3, \\"due_date\\": \\"2023-11-01\\"}, ] ``` # Note - You can assume that the format of the task dictionaries is always valid and consistent. - Make sure your function returns a new sorted list without modifying the original list.","solution":"def sort_tasks(tasks): Sorts the list of tasks first by priority (from highest to lowest), and then by due date (earliest first) if two tasks have the same priority. Args: tasks (list of dict): List of tasks where each task is a dictionary with keys \'name\', \'priority\', and \'due_date\'. Returns: list of dict: Sorted list of tasks. return sorted(tasks, key=lambda task: (task[\'priority\'], task[\'due_date\']))"},{"question":"Write a function that takes an array of positive integers and returns an array where each element is replaced by the sum of its digits raised to the power of its position in the array (0-indexed). For example, given the input array `[3, 25, 18]`, the output should be `[3^0, (2+5)^1, (1+8)^2]` which evaluates to `[1, 7, 81]`.","solution":"def sum_of_digits(num): Returns the sum of the digits of the given number. return sum(int(digit) for digit in str(num)) def transform_array(arr): Transforms the given array according to the described rule: Each element at index i is replaced by the sum of its digits raised to the power of i. return [(sum_of_digits(num)) ** i for i, num in enumerate(arr)]"},{"question":"A vast library stores a collection of rare medieval manuscripts. Each manuscript is categorized by its unique identifier and its value. The librarian wants to reassign new identifiers to the manuscripts such that the sum of all the digit values of the new identifiers is minimized. However, there is a restriction; the new identifiers must be unique and of the same length as the original identifiers. Your task is to help the librarian determine the new corresponding identifiers for a given set of manuscripts, ensuring that the sum of all digit values of these new identifiers is minimized. -----Input:----- - The first line contains N, the number of manuscripts. - The next N lines each contain a string of digits representing the current identifier of a manuscript. -----Output:----- N lines, each containing a string of digits, which are the new identifiers minimizing the sum of their digit values. These new identifiers must be unique and of the same length as the original identifiers. -----Constraints----- - 1 leq N leq 100 - All identifiers have the same length L where 1 leq L leq 9 - Identifiers consist of only digits 0-9 -----Sample Input:----- 3 935 246 807 -----Sample Output:----- 000 112 223 -----Explanation:----- The inputs \\"935\\", \\"246\\", and \\"807\\" can be transformed into \\"000\\", \\"112\\", and \\"223\\" respectively. The sum of the digits in these identifiers is minimized, and the identifiers remain unique. Note that this example is illustrative, and the precise values of the new identifiers may vary based on greedily assigning the lowest possible digit values while maintaining uniqueness among the identifiers.","solution":"def minimize_sum_identifiers(num, identifiers): Function to generate new identifiers such that the sum of all digit values of the new identifiers is minimized while ensuring uniqueness and maintaining the length of the original identifiers. # Sort the identifiers identifiers.sort() new_identifiers = [] digit_set = [str(i) for i in range(10)] # Function to generate the next smallest identifier of given length def get_next_identifier(current_idx, length): identifier = [] while current_idx > 0: identifier.append(digit_set[current_idx % 10]) current_idx //= 10 while len(identifier) < length: identifier.append(\'0\') return \'\'.join(reversed(identifier)) # Assign the lowest possible unique identifiers in lexical order for i in range(num): new_identifiers.append(get_next_identifier(i, len(identifiers[0]))) return new_identifiers"},{"question":"You are given an array of integers representing the heights of skyscrapers positioned sequentially. The width of each skyscraper is 1 unit. Calculate the maximum area of a rectangle that can be formed using the heights of the skyscrapers. The rectangle\'s sides must align with the vertical grid lines between the skyscrapers. -----Input----- The first line of input contains one integer n (1 leq n leq 100,000): the number of skyscrapers. The second line of input contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9): the heights of the skyscrapers. -----Output----- Output one integer: the maximum area of a rectangle that can be formed using the skyline of the skyscrapers. -----Example----- Input 6 2 1 5 6 2 3 Output 10 -----Explanation----- For the given example, the maximal rectangle is formed by the skyscrapers with heights [5, 6], resulting in a rectangle with an area of 5 times 2 = 10.","solution":"def largestRectangleArea(heights): Given an array of integers representing the heights of skyscrapers, returns the maximum area of a rectangle that can be formed using the heights of the skyscrapers. stack = [] max_area = 0 index = 0 while index < len(heights): # If the current building height is greater than the building height at index of stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] stack as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # update max_area, if needed max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with every popped bar as the smallest bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Implement a library management system that allows various operations to be performed on a collection of books. Each book is represented by a structure containing its title, author, and publication year. The system should support operations to add books, remove books by title, search for a book by title, and list all books sorted by title. -----Input----- The input will begin with an integer T, the number of operations to be performed. Each of the following T lines will contain one operation. An operation can be one of the following: - \\"ADD title, author, year\\": Adds a new book to the collection. Title, author, and year are comma-separated values. - \\"REMOVE title\\": Removes the book with the specified title. - \\"SEARCH title\\": Searches for a book with the specified title and outputs its details. - \\"LIST\\": Lists all books in the collection sorted by title. -----Output----- For each \\"SEARCH\\" and \\"LIST\\" operation, output the required details. For a \\"SEARCH\\" operation, if the book is found, output it in the format \\"Title: [title], Author: [author], Year: [year]\\". If the book is not found, output \\"Book not found\\". For a \\"LIST\\" operation, list all books in the same format as the \\"SEARCH\\" output. If there are no books, output \\"No books in the collection\\". Print a blank line after each test case. -----Constraints----- - 1 ≤ T ≤ 100 - Titles and authors will be strings with at most 50 characters and will not contain commas. - Years will be integers between 1900 and 2023. - No two books will have the same title. - All input strings and integers are properly formatted and valid. -----Sample Input----- 10 ADD The Alchemist,Paulo Coelho,1988 ADD To Kill a Mockingbird,Harper Lee,1960 SEARCH The Alchemist REMOVE To Kill a Mockingbird SEARCH To Kill a Mockingbird SEARCH The Alchemist LIST REMOVE The Alchemist SEARCH The Alchemist LIST -----Sample Output----- Title: The Alchemist, Author: Paulo Coelho, Year: 1988 Book not found Title: The Alchemist, Author: Paulo Coelho, Year: 1988 Title: The Alchemist, Author: Paulo Coelho, Year: 1988 Book not found No books in the collection","solution":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def __repr__(self): return f\\"Title: {self.title}, Author: {self.author}, Year: {self.year}\\" class Library: def __init__(self): self.books = {} def add_book(self, title, author, year): book = Book(title, author, year) self.books[title] = book def remove_book(self, title): if title in self.books: del self.books[title] def search_book(self, title): if title in self.books: return str(self.books[title]) return \\"Book not found\\" def list_books(self): if not self.books: return \\"No books in the collection\\" sorted_books = sorted(self.books.values(), key=lambda book: book.title) return \\"n\\".join(str(book) for book in sorted_books)"},{"question":"In this task, you are required to implement a function that receives a list of integers and returns a list of strings representing the binary representation of each integer. The input list will only contain non-negative integers. For example, the number `5` in binary is `101`, the number `2` is `10`. # Examples ```python >>> to_binary([5, 2, 7]) [\'101\', \'10\', \'111\'] >>> to_binary([0, 1, 3]) [\'0\', \'1\', \'11\'] >>> to_binary([10, 4]) [\'1010\', \'100\'] >>> to_binary([100])(enforced) [\'1100100\'] ``` Notes: - Make sure the binary representations do not contain leading zeroes. - The function should handle an empty list by returning an empty list.","solution":"def to_binary(numbers): Given a list of non-negative integers, returns a list of strings representing the binary representation of each integer. Args: numbers (list): A list of non-negative integers Returns: list: A list of binary string representations of the input integers return [bin(number)[2:] for number in numbers]"},{"question":"Check if the given string can be rearranged to form a palindrome. Example: Input: \\"civic\\" Output: true Explanation: The string \\"civic\\" is already a palindrome. Input: \\"ivicc\\" Output: true Explanation: The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". Input: \\"hello\\" Output: false Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = 0 for freq in count.values(): if freq % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"Given a string consisting of lowercase alphabets, you need to find the length of the longest substring that contains at most two distinct characters. Example 1: Input: \\"eceba\\" Output: 3 Explanation: The longest substring with at most two distinct characters is \\"ece\\" which has length 3. Example 2: Input: \\"ccaabbb\\" Output: 5 Explanation: The longest substring with at most two distinct characters is \\"aabbb\\" which has length 5. Note: The length of the input string will not exceed 50,000.","solution":"def length_of_longest_substring_two_distinct(s): Finds the length of the longest substring that contains at most two distinct characters. :param s: str, input string consisting of lowercase alphabets :return: int, length of the longest substring if len(s) < 3: return len(s) # Sliding window approach left = 0 max_length = 2 char_map = {} for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of non-negative integers representing the amount of fuel in different fuel tanks. You start at the first tank and want to reach the last tank. Each tank can be used to jump to another tank that is at most a certain number of positions away, based on the amount of fuel in the current tank. Write an algorithm to determine if you can reach the last tank or not. For example: - If you are at tank[i] and your fuel level is tanks[i], you can jump to any tank in the range from tank[i+1] to tank[i+tanks[i]] (inclusive). Example 1: ``` Input: tanks = [2, 3, 1, 1, 4] Output: true Explanation: Jump 1 step from tank[0] to tank[1], then 3 steps to the last tank. ``` Example 2: ``` Input: tanks = [3, 2, 1, 0, 4] Output: false Explanation: You will always reach tank[3] at best, and its fuel level is 0. So, you cannot move further from there. ``` Write a function to solve the problem: ``` def can_reach_last_tank(tanks: List[int]) -> bool: # Your code here ```","solution":"from typing import List def can_reach_last_tank(tanks: List[int]) -> bool: max_reach = 0 n = len(tanks) for i in range(n): if i > max_reach: return False max_reach = max(max_reach, i + tanks[i]) if max_reach >= n - 1: return True return False"},{"question":"Given a list of integers, the task is to write a function that finds the longest subsequence in the list which appears in sorted order, but not necessarily consecutively. The function should return the length of this longest subsequence. For example: 1. For the list [3, 10, 2, 1, 20], the longest sorted subsequence is [3, 10, 20], so the function should return 3. 2. For the list [3, 2], the longest sorted subsequence is either [3] or [2], so the function should return 1. 3. For the list [50, 3, 10, 7, 40, 80], the longest sorted subsequence is [3, 7, 40, 80], so the function should return 4. Function Signature: ```python def longest_sorted_subsequence(arr: List[int]) -> int: pass ```","solution":"def longest_sorted_subsequence(arr): Returns the length of the longest subsequence in the list which appears in sorted order. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given an array of integers, determine the minimal possible cost to make all array elements equal using a given set of operations. There are two types of operations available: 1. Add 1 to any element. 2. Subtract 1 from any element. You need to find and print the minimal number of operations required to make all the elements in the array equal. -----Input----- - The first line contains an integer T denoting the number of test cases. Each of the following test cases starts with an integer n representing the number of elements in the array. The next line contains n space-separated integers denoting the elements of the array a. -----Output----- For each test case, print a single line containing the minimal number of operations required. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 100,000 - -10^9 leq a_i leq 10^9 -----Example Input----- 3 3 1 2 3 5 5 5 5 5 5 4 -1 2 -2 4 -----Example Output----- 2 0 9 -----Explanation----- Example case 1: The optimal method is to add 1 to 1 (cost 1) and subtract 1 from 3 (cost 1) to make the array [2, 2, 2]. The total cost is 2 operations. Example case 2: All elements are already equal, so the cost is 0. Example case 3: One optimal method is to add 1 to -2 (cost 4) and subtract 1 from 4 (cost 3) and 2 (cost 2) to make the array [0, 0, 0, 0]. The total cost is 9 operations.","solution":"def minimal_cost(T, test_cases): Returns the minimal number of operations required to make all elements of the array equal for each test case. Parameters: T (int): Number of test cases test_cases (list of tuples): A list where each tuple contains an integer n and a list of n integers Returns: list of int: A list containing the minimal number of operations for each test case results = [] for case in test_cases: n, array = case array.sort() median = array[n // 2] # optimal target sum is the median to minimize total operations cost = 0 for num in array: cost += abs(num - median) results.append(cost) return results"},{"question":"-----Problem----- You are given an array of integers where each element represents the height of a vertical bar of width 1. Imagine it being a histogram where the width of each bar is 1. Find the area of the largest rectangle that can be formed within the bounds of this histogram. -----Input----- - The first line contains an integer N, representing the number of bars in the histogram. - The second line contains N integers separated by space, representing the heights of the bars. -----Output----- An integer which represents the area of the largest rectangle that can be formed within the bounds of the histogram. -----Constraints----- - 1 ≤ N ≤ 105 - 0 ≤ height of the bar ≤ 104 -----Sample Input----- 6 2 1 5 6 2 3 -----Sample Output----- 10 -----Explanation----- The largest rectangle has an area of 10. It is formed by the bars with heights 5 and 6.","solution":"def largest_rectangle_area(heights): Finds the largest rectangle area in a histogram represented by heights. Parameters: heights (list of int): A list of integers representing the histogram bar heights. Returns: int: The area of the largest rectangle that can be formed within the bounds of the histogram. stack = [] max_area = 0 heights.append(0) # Add a zero height to flush out remaining bars in stack at the end for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: h_idx = stack.pop() height = heights[h_idx] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area"},{"question":"**Description:** Jonathan is organizing a fancy dress party where guests need to come dressed as either superheroes or movie characters. He has a list of items for each guest, and each guest has exactly 2 items - 1 superhero costume and 1 movie character costume. Jonathan needs to make sure that no two guests have the same costume. He needs your help to write a function that takes a list of guest items and checks if all items are unique. **Function Signature:** `def are_items_unique(guest_items: List[str]) -> bool` **Input:** - `guest_items`: A list of strings where each string represents an item (Each item is unique to either \\"superhero\\" or \\"movie character\\"). **Output:** - Return `True` if no two items are the same, otherwise return `False`. **Examples:** ``` are_items_unique([\\"spiderman\\", \\"ironman\\", \\"batman\\", \\"frodo\\", \\"harry\\", \\"frodo\\"]) should return `False` because the item \'frodo\' is repeated. are_items_unique([\\"spiderman\\", \\"ironman\\", \\"batman\\", \\"frodo\\", \\"harry\\", \\"hermione\\"]) should return `True` because all items are unique. ``` **Note:** - The length of the list will always be even as each guest has 2 items. - The items can be of any length and can contain spaces, numbers, and special characters.","solution":"def are_items_unique(guest_items): Checks if all items in the guest_items list are unique. Parameters: guest_items (List[str]): A list of strings where each string represents an item. Returns: bool: True if all items are unique, False otherwise. return len(guest_items) == len(set(guest_items))"},{"question":"Write a function that takes a list of integers and an integer k, and returns the maximum sum of any contiguous subarray of size k. A subarray is a contiguous part of an array. The goal is to find the contiguous subarray of length k that has the maximum sum and return the sum. If the list has fewer than k elements, return -1. Example 1: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: 9 Explanation: The subarrays of size 2 are [1, 2], [2, 3], [3, 4], [4, 5], and the largest sum is 9. Example 2: Input: arr = [1, -1, 5, 2, 3], k = 3 Output: 10 Explanation: The subarrays of size 3 are [1, -1, 5], [-1, 5, 2], [5, 2, 3], and the largest sum is 10. Example 3: Input: arr = [4, 3, 2, 1], k = 5 Output: -1 Explanation: Since the size of the array is less than k, it is not possible to form any subarray of size 5, hence return -1. Note: The length of the array will be in the range [1, 10^5]. The elements of the array will be in the range [-10^4, 10^4].","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of size k. Parameters: arr (list of int): The list of integers. k (int): The size of the subarray. Returns: int: The maximum sum of any contiguous subarray of size k. Returns -1 if the list has fewer than k elements. n = len(arr) if n < k: return -1 # Compute the sum of the first subarray of size k window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window over the rest of the array for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given a string `S` consisting of lowercase letters. Your task is to determine the length of the longest substring without repeating characters. -----Input:----- - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a string `S`. -----Output:----- For each test case, print the length of the longest substring without repeating characters. -----Constraints----- - `1 ≤ T ≤ 100` - `1 ≤ |S| ≤ 10^5` - `S` contains only lowercase English letters -----Sample Input:----- 2 abcabcbb bbbbb -----Sample Output:----- 3 1 -----EXPLANATION:----- - Example 1: The answer is \\"abc\\", with the length of 3. - Example 2: The answer is \\"b\\", with the length of 1.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index longest = max(longest, index - start + 1) return longest def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. results = [] for s in test_cases: results.append(longest_unique_substring_length(s)) return results"},{"question":"Task: Design a function `fizzBuzz` that returns a list of strings representing the numbers from 1 to `n`. However, for multiples of three, it should return `\\"Fizz\\"` instead of the number and for the multiples of five, it should return `\\"Buzz\\"`. For numbers which are multiples of both three and five, it should return `\\"FizzBuzz\\"`. Rules: * The function should return an empty list if `n < 1`. # Examples: + fizzBuzz(5): [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\"] + fizzBuzz(15): [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"]","solution":"def fizzBuzz(n): Returns a list of strings representing the numbers from 1 to n with: - \\"Fizz\\" for multiples of 3, - \\"Buzz\\" for multiples of 5, - \\"FizzBuzz\\" for multiples of both 3 and 5. Returns an empty list if n < 1. if n < 1: return [] result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Given a 2D grid of integers where each cell represents the height of that particular point on a terrain, your task is to compute the total water volume that would be trapped if the terrain is exposed to heavy rain. The rainwater can only be trapped where there are depressions between the heights, and the water cannot flow out of the grid. You should assume that the water cannot flow diagonally and can only move vertically or horizontally. Water is only trapped in areas surrounded by higher elevations and the boundary of the grid is considered to be a barrier that absolutely retains water. -----Input----- The input consists of several test cases. Each test case starts with two integers, M and N (1 ≤ M, N ≤ 100), representing the dimensions of the grid. The next M lines each contain N integers, representing the height at that point in the terrain (each integer is between 0 and 10000). The input is terminated by a single line containing \\"0 0\\". -----Output----- For each test case, print the total amount of water that will be trapped, prefixed by \\"Case #\\", followed by the case number (starting from 1). See the format in the example for clarity. -----Example----- Input: 3 3 1 4 3 3 2 3 2 3 4 2 2 1 1 0 0 2 2 200 200 200 200 0 0 Output: Case #1: 1 Case #2: 0 Case #3: 0","solution":"import heapq def calculate_trapped_water(height_map, m, n): if not height_map or m < 3 or n < 3: return 0 heap = [] visited = [[False] * n for _ in range(m)] for i in range(m): heapq.heappush(heap, (height_map[i][0], i, 0)) heapq.heappush(heap, (height_map[i][n-1], i, n-1)) visited[i][0] = True visited[i][n-1] = True for j in range(n): heapq.heappush(heap, (height_map[0][j], 0, j)) heapq.heappush(heap, (height_map[m-1][j], m-1, j)) visited[0][j] = True visited[m-1][j] = True total_water = 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: water_trapped = max(0, height - height_map[nx][ny]) total_water += water_trapped heapq.heappush(heap, (max(height, height_map[nx][ny]), nx, ny)) visited[nx][ny] = True return total_water def process_input(input_data): lines = input_data.strip().split(\'n\') index = 0 case_number = 1 results = [] while index < len(lines): m, n = map(int, lines[index].split()) if m == 0 and n == 0: break index += 1 height_map = [] for _ in range(m): height_map.append(list(map(int, lines[index].split()))) index += 1 water_trapped = calculate_trapped_water(height_map, m, n) results.append(f\\"Case #{case_number}: {water_trapped}\\") case_number += 1 return results"},{"question":"# Task You are given a string containing letters and digits. Your task is to sort the letters in alphabetical order and the digits in numerical order, and then concatenate them together with the letters coming first. # Example For `s = \\"dcba4321\\"`, the result should be `\\"abcd1234\\"`. For `s = \\"fgeh5764\\"`, the result should be `\\"efgh4567\\"`. - Input/Output - `[input]` string `s` The input string containing both letters and digits. - `[output]` a string The sorted string with letters first followed by digits.","solution":"def sort_letters_and_digits(s): Sorts the letters in alphabetical order and the digits in numerical order, and concatenates them together with letters first. :param s: The input string containing both letters and digits. :return: A string with sorted letters followed by sorted digits. letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits) # Examples # sort_letters_and_digits(\\"dcba4321\\") => \\"abcd1234\\" # sort_letters_and_digits(\\"fgeh5764\\") => \\"efgh4567\\""},{"question":"Given an array of integers, find the pair of numbers that have the smallest absolute difference between them. If there are multiple pairs, return any one of them. Example: - Input array: `[2, 4, 7, 5, 10, 11]` - One possible correct output: `(4, 5)` # Function Signature `def find_smallest_difference_pair(arr: List[int]) -> Tuple[int, int]:` # Input - `arr` is a list of integers with a length between 2 and 10^5. - The integers can be positive or negative and will be within the range of -10^9 to 10^9. # Output - Return a tuple containing the two integers from the array with the smallest absolute difference. # Example - If the input array is `[6, 2, 4, 10]`, your function should return `(2, 4)` since they have the smallest absolute difference of `2`. - If the input array is `[-1, -5, -3, -2]`, your function should return `(-3, -2)` since they have the smallest absolute difference of `1`. # Constraints - You may assume that the input array has at least two elements.","solution":"from typing import List, Tuple def find_smallest_difference_pair(arr: List[int]) -> Tuple[int, int]: Returns a pair of numbers with the smallest absolute difference. # Sort the array to make it easier to find the smallest difference pair arr.sort() # Initialize variables to store the minimum difference and the resulting pair min_diff = float(\'inf\') result_pair = (arr[0], arr[1]) # Traverse the sorted array and find the pair with the smallest difference for i in range(len(arr) - 1): diff = abs(arr[i+1] - arr[i]) if diff < min_diff: min_diff = diff result_pair = (arr[i], arr[i+1]) return result_pair"},{"question":"You are a wizard attending the prestigious Spellcraft Academy. One of your assignments is to create a magical grid that can trap dark spirits. The grid is an N x N matrix where each cell can either be active (1) or inactive (0). Your task is to ensure that every row and every column of the grid contains at least one active cell. Given an integer N, write a function to generate an N x N grid that meets the above condition. If there are multiple valid grids, any one of them is acceptable. The function should return the grid as a list of lists. Example: ``` generate_grid(3) -> [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] generate_grid(4) -> [ [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1] ] generate_grid(1) -> [ [1] ] ``` Note: - The output grid must have exactly one 1 in each row and each column. - The value of N is a positive integer (1 ≤ N ≤ 100).","solution":"def generate_grid(N): Generates an N x N grid where each row and each column have at least one active cell (1). The simplest way to achieve this is by placing the 1s on the diagonal. :param N: The size of the grid :return: A list of lists representing the N x N grid grid = [[0 for _ in range(N)] for _ in range(N)] for i in range(N): grid[i][i] = 1 return grid"},{"question":"Given an unsorted array of integers, your task is to rearrange the array elements such that the greatest element appears at the first position, followed by the smallest element, the second greatest element, the second smallest element, and so on. For example, for the array `[1, 2, 3, 4, 5]`, the expected output would be `[5, 1, 4, 2, 3]`. Write a function `alternate_sort(arr)` that takes a list of integers `arr`, and returns a new list that is rearranged as described above. # Input - The input is a single list of integers, `arr`. # Output - The function should return a new list, which is the rearranged array. # Examples ```python assert alternate_sort([1, 2, 3, 4, 5]) == [5, 1, 4, 2, 3] assert alternate_sort([9, 7, 2, 3, 6]) == [9, 2, 7, 3, 6] assert alternate_sort([1, 2, 3]) == [3, 1, 2] ``` # Constraints - All integers in the list are distinct. - The length of the array is between 1 and 10^5. - The array can contain positive or negative integers.","solution":"def alternate_sort(arr): Returns a new list that is rearranged such that the greatest element appears first, followed by the smallest element, the second greatest element, the second smallest element, and so on. arr.sort() result = [] left, right = 0, len(arr) - 1 while left <= right: if left != right: result.append(arr[right]) result.append(arr[left]) else: result.append(arr[left]) left += 1 right -= 1 return result"},{"question":"Write a function to determine if a string has all unique characters. Example 1: Input: \\"leetcode\\" Output: false Example 2: Input: \\"abc\\" Output: true Example 3: Input: \\"aA\\" Output: true Example 4: Input: \\"\\" Output: true Note: - The input string consists of ASCII characters. - Implement the solution without using extra data structures.","solution":"def has_unique_characters(s): Determines if a string has all unique characters. :param s: the input string :return: True if the string has all unique characters, False otherwise # If the length of the string exceeds the number of possible unique ascii characters (128), return False if len(s) > 128: return False for i in range(len(s)): if s[i] in s[i+1:]: return False return True"},{"question":"# Task You are given a rectangular grid with `n` rows and `m` columns. Each cell of the grid contains either a \'1\' (representing a tree) or a \'0\' (an empty space). Your task is to determine the size of the largest connected group of trees. Trees are connected if they are adjacent horizontally or vertically. Write a function that finds the size of the largest connected group of trees in the grid. # Input/Output `[input]` integer `n` The number of rows in the grid. `1 ≤ n ≤ 1000` `[input]` integer `m` The number of columns in the grid. `1 ≤ m ≤ 1000` `[input]` 2D array of integers `grid` A binary matrix representing the grid. Each element is either a \'1\' (tree) or \'0\' (empty space). `[output]` integer Return the size of the largest connected group of trees. # Example For `n = 4`, `m = 5`, `grid = [[1, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 1, 0]]`, the output should be `4`. Explanation: The largest connected group of trees has 4 cells, which are the trees in coordinates (0,2), (0,3), (2,2), and (2,3) as well as (2,4). Hence the largest connected group has 4 cells. For `n = 3`, `m = 3`, `grid = [[1, 1, 0], [1, 0, 0], [0, 0, 1]]`, the output should be `3`. Explanation: The largest connected group of trees has 3 cells, which are the trees in coordinates (0,0), (0,1), and (1,0). Hence the largest connected group has 3 cells.","solution":"def largest_connected_group(n, m, grid): This function returns the size of the largest connected group of trees in the grid. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list representing the grid :return: Size of the largest connected group of trees def dfs(row, col): Depth First Search function to explore the connected trees :param row: current row index :param col: current column index :return: size of the connected group found starting from (row, col) if row < 0 or row >= n or col < 0 or col >= m or grid[row][col] == 0: return 0 grid[row][col] = 0 # Mark this cell as visited by setting it to 0 size = 1 # Explore all 4 possible directions (up, down, left, right) size += dfs(row + 1, col) size += dfs(row - 1, col) size += dfs(row, col + 1) size += dfs(row, col - 1) return size max_size = 0 for row in range(n): for col in range(m): if grid[row][col] == 1: max_size = max(max_size, dfs(row, col)) return max_size"},{"question":"Given a string S and a string T, find the minimum window in S which will contain all the characters in T. Example 1: Input: S: \\"ADOBECODEBANC\\" T: \\"ABC\\" Output: \\"BANC\\" Explanation: The minimum window that contains all characters from \\"ABC\\" is \\"BANC\\". Note: 1. If there is no such window, return the empty string \\"\\". 2. There may be multiple such minimum-length windows; in this case, return the one that starts from the smallest (leftmost) index. 3. The input strings consist only of uppercase and lowercase English letters.","solution":"from collections import Counter, defaultdict def min_window(s, t): Finds the minimum window in `s` that contains all the characters from `t`. if not s or not t: return \\"\\" t_count = Counter(t) current_count = defaultdict(int) start = 0 min_len = float(\'inf\') min_window_start = 0 required = len(t_count) formed = 0 l = 0 for r in range(len(s)): char = s[r] current_count[char] += 1 if char in t_count and current_count[char] == t_count[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < min_len: min_len = r - l + 1 min_window_start = l current_count[char] -= 1 if char in t_count and current_count[char] < t_count[char]: formed -= 1 l += 1 if min_len == float(\'inf\'): return \\"\\" return s[min_window_start:min_window_start + min_len]"},{"question":"Write a function that determines the minimum number of swaps required to sort an array of distinct integers in ascending order. *Note:* A swap involves selecting any two indices i and j, and swapping the elements at these indices. Examples ```python [4, 3, 1, 2] => 3 # (swap 4 and 1, swap 3 and 1, swap 2 and 4) [2, 3, 4, 1, 5] => 3 # (swap 2 and 1, swap 3 and 1, swap 4 and 1) [1, 5, 4, 3, 2] => 2 # (swap 5 and 2, swap 5 and 3) ```","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in ascending order. n = len(arr) sorted_arr = sorted(arr) index_map = {value: i for i, value in enumerate(arr)} swaps = 0 for i in range(n): if arr[i] != sorted_arr[i]: swaps += 1 swap_with_index = index_map[sorted_arr[i]] # update the index_map with the swapped elements index_map[arr[i]] = swap_with_index index_map[sorted_arr[i]] = i # Swap elements in arr arr[i], arr[swap_with_index] = arr[swap_with_index], arr[i] return swaps"},{"question":"Villager Jenny has a garden with a collection of enchanted mushrooms arranged in a grid. The grid has `N` rows and `M` columns, and each cell of the grid contains a certain number of magical spores. Jenny wants to find out the total number of spores in specific subgrids from her garden. To help her, write a program to process multiple queries, each asking for the total number of spores in a rectangular subgrid of the garden. A query is defined by the coordinates of the top-left and bottom-right cells of the subgrid. -----Input----- The first line contains two integers `N` and `M` representing the number of rows and columns in the grid. Each of the next `N` lines contains `M` integers, where the j-th integer in the i-th line represents the number of spores in the cell (i, j). The next line contains an integer `Q` representing the number of queries. Each of the next `Q` lines contains four integers `r1`, `c1`, `r2`, `c2`, where (r1, c1) is the top-left cell and (r2, c2) is the bottom-right cell of the subgrid. -----Output----- For each query, output a single integer, the total number of spores in the specified subgrid. -----Constraints----- - 1 ≤ N, M ≤ 1000 - 1 ≤ spores in each cell ≤ 10^6 - 1 ≤ Q ≤ 10^5 - 1 ≤ r1 ≤ r2 ≤ N - 1 ≤ c1 ≤ c2 ≤ M -----Example----- Input: 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output: 12 28 -----Explanation----- For the first query, the subgrid is from (1, 1) to (2, 2): 1 2 4 5 Total = 1 + 2 + 4 + 5 = 12 For the second query, the subgrid is from (2, 2) to (3, 3): 5 6 8 9 Total = 5 + 6 + 8 + 9 = 28","solution":"def preprocess_grid(grid): N = len(grid) M = len(grid[0]) prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def query_sum(prefix_sum, r1, c1, r2, c2): return (prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1]) def solve(N, M, grid, Q, queries): prefix_sum = preprocess_grid(grid) results = [] for r1, c1, r2, c2 in queries: results.append(query_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"Write a function that accepts a string containing a mathematical expression and returns the result of evaluating the expression. The expression will contain only non-negative integers, plus, minus, multiplication, and division operators. The expression will not contain parentheses. The function should account for the correct order of operations, which is: 1. Multiplication and division (left to right) 2. Addition and subtraction (left to right) The function should handle division by zero gracefully by returning a specific message \\"Division by zero error\\". For example: ```python calculate_expression(\\"3+5*2/1-4\\") ``` Should return: ```python 9 ``` Another example: ```python calculate_expression(\\"10+2/0-3\\") ``` Should return: ```python \\"Division by zero error\\" ```","solution":"def calculate_expression(expression): Evaluates a mathematical expression string containing non-negative integers and +, -, *, / operators. Follows the correct order of operations and handles division by zero gracefully. import re # Before splitting the expression, replace division by zero with a special case if \\"/0\\" in expression: return \\"Division by zero error\\" # Split the expression by operators, this will get the numbers numbers = list(map(int, re.split(r\'[+-*/]\', expression))) # Split the expression by numbers, this will get the operators operators = re.findall(r\'[+-*/]\', expression) # Function for applying an operator between two numbers def apply_operator(a, operator, b): if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': if b == 0: return \\"Division by zero error\\" return a // b # Process multiplication and division first i = 0 while i < len(operators): if operators[i] in \'*/\': numbers[i] = apply_operator(numbers[i], operators[i], numbers[i + 1]) del numbers[i + 1] del operators[i] else: i += 1 # Process addition and subtraction next i = 0 while i < len(operators): numbers[i] = apply_operator(numbers[i], operators[i], numbers[i + 1]) del numbers[i + 1] del operators[i] return numbers[0]"},{"question":"# Task You are given an array of \'n\' integers where each integer represents the rating of an individual. Your task is to distribute candies to these individuals such that: - Each individual gets at least one candy. - Individuals with a higher rating get more candies than their neighbors. Determine the minimum number of candies you must distribute to meet the above conditions. # Example For ratings = [1, 0, 2], the output should be 5. Explanation: The minimum distribution is [2, 1, 2], thus 2 + 1 + 2 = 5 candies. For ratings = [1, 2, 2], the output should be 4. Explanation: The minimum distribution is [1, 2, 1], but candies for individuals with equal ratings are distributed as [1, 2, 1], thus 1 + 2 + 1 = 4 candies. # Input/Output - `[input]` array of integers `ratings` Constraints: 0 < ratings.length ≤ 1000, 0 ≤ ratings[i] ≤ 10^4. - `[output]` an integer","solution":"def min_candies(ratings): Calculate the minimum number of candies required for the given ratings list such that each individual gets at least one candy and individuals with higher ratings get more candies than their neighbors. n = len(ratings) candies = [1] * n # First pass: Scan from left to right for i in range(1, n): if ratings[i] > ratings[i - 1]: candies[i] = candies[i - 1] + 1 # Second pass: Scan from right to left for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1) return sum(candies)"},{"question":"Write a function `distribute_candies` that takes two arguments: `candies`, and `friends`. The function should return a list where each index represents the number of candies received by each friend. - Candies should be distributed equally among all friends, with any remaining candies being distributed one per friend starting from the first friend. - If there are no friends, the function should return an empty list. - If there are negative candies or friends, the function should throw a ValueError. Examples: ```python distribute_candies(10, 3) # must return [4, 3, 3] distribute_candies(7, 4) # must return [2, 2, 2, 1] distribute_candies(0, 5) # must return [0, 0, 0, 0, 0] distribute_candies(10, 0) # must return [] distribute_candies(-5, 2) # must throw ValueError ```","solution":"def distribute_candies(candies, friends): Distribute candies among friends. Parameters: candies (int): The total number of candies to distribute. friends (int): The number of friends to distribute the candies to. Returns: List[int]: A list where each element represents the number of candies received by each friend. Throws: ValueError: If `candies` or `friends` is negative. if candies < 0 or friends < 0: raise ValueError(\\"The number of candies and friends cannot be negative.\\") if friends == 0: return [] base_candies = candies // friends remaining_candies = candies % friends distribution = [base_candies] * friends for i in range(remaining_candies): distribution[i] += 1 return distribution"},{"question":"Given an n x n matrix where each of the rows and columns is sorted in ascending order, write a function to find the kth smallest element in the matrix. Elements in the matrix can be repeated. Example 1: Input: mat = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 Output: 13 Explanation: The elements in the matrix in sorted order are [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 8th smallest element is 13. Example 2: Input: mat = [ [1, 2], [1, 3] ] k = 2 Output: 1 Explanation: The elements in the matrix in sorted order are [1, 1, 2, 3]. The 2nd smallest element is 1. Constraints: 1 <= n <= 300 -10^9 <= mat[i][j] <= 10^9 1 <= k <= n * n","solution":"import heapq def kth_smallest(mat, k): Finds the kth smallest element in an n x n matrix where each row and column is sorted. n = len(mat) min_heap = [] # Initialize the heap with the smallest element of each row for r in range(min(k, n)): heapq.heappush(min_heap, (mat[r][0], r, 0)) # Iterate k-1 times to pop the smallest element from the heap # and add the next element from the same row to the heap for i in range(k - 1): val, r, c = heapq.heappop(min_heap) if c + 1 < n: heapq.heappush(min_heap, (mat[r][c + 1], r, c + 1)) return heapq.heappop(min_heap)[0]"},{"question":"Given a string containing lowercase words and integer numbers, return the sum of all numbers in the string. The string may contain both positive and negative integers. The numbers in the string may not be space-separated and can be mixed in with the letters. Example 1: Input: s = \\"abc123xyz\\" Output: 123 Explanation: There is only one number in the string, which is 123. Example 2: Input: s = \\"a1b2c3\\" Output: 6 Explanation: There are three numbers in the string: 1, 2, and 3. The sum of these numbers is 6. Example 3: Input: s = \\"aa11bb22cc-33\\" Output: 0 Explanation: There are three numbers in the string: 11, 22, and -33. The sum of these numbers is 0. Note: The length of the string will be in the range [1, 1000]. The string will contain only lowercase letters, digits, and optional leading minus signs for negative numbers.","solution":"import re def sum_of_numbers(s): Returns the sum of all numbers in the given string. The string contains both lowercase words and integer numbers, which can be positive or negative. # Find all numbers in the string, including negative ones numbers = re.findall(r\'-?d+\', s) # Convert the numbers to integers and return their sum return sum(int(num) for num in numbers)"},{"question":"Alice loves playing with numbers and she came up with a puzzle game. She gives her friends a list of integers and challenges them to find the maximum sum of a subsequence with the constraint that no two elements in the subsequence should be adjacent in the original list. Your task is to implement a function that takes this list and returns the maximum sum as described. -----Input:----- - The first line contains an integer N, denoting the number of integers in the list. - The second line contains N integers separated by spaces, representing the list. -----Output:----- Print the maximum sum of the subsequence where no two elements are adjacent in the original list. -----Constraints----- - 1 leq N leq 10^5 - Each integer in the list will be between -10^4 and 10^4. -----Sample Input:----- 6 3 2 5 10 7 -----Sample Output:----- 15 -----EXPLANATION:----- For the list [3, 2, 5, 10, 7], the maximum sum is obtained by choosing the elements 3, 10, 2 or 5, 7. Therefore, one possible subsequence with no adjacent elements is [3, 10, 2] and the sum is 3 + 10 + 2 = 15, which is the maximum possible sum with the given constraint.","solution":"def max_non_adjacent_sum(nums): Returns the maximum sum of a subsequence such that no two elements are adjacent. if not nums: return 0 incl = 0 # Max sum including the previous element excl = 0 # Max sum excluding the previous element for num in nums: # Current max excluding the current element new_excl = max(incl, excl) # Current max including the current element incl = excl + num excl = new_excl return max(incl, excl) def solve_problem(N, nums): return max_non_adjacent_sum(nums)"},{"question":"Array of Primes Your mission, should you choose to accept it, is to create a function that generates an array of all prime numbers up to (and including) a given number `n`. Remember, a prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. The first few prime numbers are: 2, 3, 5, 7, 11, 13... Your task is to generate these primes efficiently for any arbitrary value of `n`. Assembling an array of primes can be resource-intensive for very large `n`, so your solution should be optimized accordingly. Task Write a function `generate_primes(n)` that returns an array of all prime numbers less than or equal to `n`. # Examples ```python generate_primes(10) # => [2, 3, 5, 7] generate_primes(20) # => [2, 3, 5, 7, 11, 13, 17, 19] generate_primes(1) # => [] ```","solution":"def generate_primes(n): Generates all prime numbers up to and including n. Parameters: n (int): The upper limit to generate prime numbers. Returns: List[int]: A list of prime numbers up to and including n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"# **Chess Board** Chess is a strategy board game played between two players. It is played on an 8×8 grid with rows labeled 1 to 8 and columns labeled \'a\' to \'h\'. Each player operates with an army of 16 pieces: one king, one queen, two rooks, two knights, two bishops, and eight pawns. The objective is to checkmate the opponent\'s king. For this problem, we will focus on the knight\'s (K) movement. A knight moves in an \\"L\\" shape, meaning it moves two squares in one direction and then one square perpendicular to that direction. ![Knight](https://upload.wikimedia.org/wikipedia/commons/7/76/Chess_klt45.svg) We are given a coordinate of a knight on the chessboard and are asked to find all possible positions the knight can move to in its next move. # **Task** Complete the function `knight_moves` that calculates all possible positions a knight can move from a given position on the chessboard. - **Input** - A string representing the knight\'s position on the chessboard. The string will be in the format \'a1\', \'e4\', etc. - **Output** - A list of strings representing all possible positions the knight can move to, sorted in lexicographical order. # **Examples** ``` knight_moves(\\"g2\\") => [\\"e1\\", \\"e3\\", \\"f4\\", \\"h4\\"] knight_moves(\\"d5\\") => [\\"b4\\", \\"b6\\", \\"c3\\", \\"c7\\", \\"e3\\", \\"e7\\", \\"f4\\", \\"f6\\"] ``` # **Implementation** ```python def knight_moves(position): col, row = position col = ord(col) - ord(\'a\') + 1 row = int(row) moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)] next_positions = [] for dc, dr in moves: new_col = col + dc new_row = row + dr if 1 <= new_col <= 8 and 1 <= new_row <= 8: next_positions.append(f\\"{chr(ord(\'a\') + new_col - 1)}{new_row}\\") return sorted(next_positions) ``` - The function `knight_moves` takes a string `position` as input which represents the current position of the knight. - It converts the column (letter) into a numerical representation. - It calculates all possible next positions based on the knight\'s movement rules. - It filters out any positions that are outside the bounds of the chessboard. - Finally, it returns the sorted list of valid next positions.","solution":"def knight_moves(position): Given a position of the knight on a chessboard, this function returns all possible positions the knight can move to in its next move. The positions are sorted lexicographically. :param position: A string representing the knight\'s position on the chessboard (e.g., \'a1\', \'e4\'). :return: A list of strings representing all possible positions the knight can move to. col, row = position col = ord(col) - ord(\'a\') + 1 row = int(row) moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)] next_positions = [] for dc, dr in moves: new_col = col + dc new_row = row + dr if 1 <= new_col <= 8 and 1 <= new_row <= 8: next_positions.append(f\\"{chr(ord(\'a\') + new_col - 1)}{new_row}\\") return sorted(next_positions)"},{"question":"=====Problem Statement===== You are given a list of integers which may contain some duplicate elements. Your task is to find and print all unique subsets of the given list. A subset is a collection of elements that can be derived from the list by deleting some or none of the elements without changing the order of the remaining elements. The unique subsets must maintain the order as they appear in the original list and should not contain any duplicates. Print the unique subsets in lexicographical order. =====Input Format===== The first line contains an integer N, the number of elements in the list. The next line contains N integers separated by space, representing the elements of the list. =====Constraints===== 0 ≤ N ≤ 15 -10 ≤ Element in list ≤ 10 =====Output Format===== Print all unique subsets in lexicographical order where each subset is printed on a new line. Each subset should be in the form of a space-separated string of integers. Example input: 3 4 4 4 Example output: [] [4] [4 4] [4 4 4] Note: 1. The empty set should be represented as []. 2. Each subset should be printed in lexicographical order as described.","solution":"def find_unique_subsets(arr): Returns all unique subsets of the given list in lexicographical order. def backtrack(start, path): result.append(path[:]) for i in range(start, len(arr)): if i > start and arr[i] == arr[i - 1]: continue path.append(arr[i]) backtrack(i + 1, path) path.pop() arr.sort() result = [] backtrack(0, []) return result def format_subsets_for_output(subsets): Converts each subset into a string in the form of space-separated integers. formatted_subsets = [] for subset in subsets: if subset: formatted_subsets.append(\\"[{}]\\".format(\\" \\".join(map(str, subset)))) else: formatted_subsets.append(\\"[]\\") return \\"n\\".join(formatted_subsets) # Example solution function to be used with input def unique_subsets(N, elements): if N == 0: return \\"[]\\" subsets = find_unique_subsets(elements) return format_subsets_for_output(subsets)"},{"question":"You are given an array of integers and an integer k. Write a function that determines whether there is a pair of distinct indices i and j in the array such that the absolute difference between the elements at these indices is exactly k. Input: - An integer array \'nums\' of length n (0 ≤ n ≤ 10^5). - An integer k (0 ≤ k ≤ 10^4). Output: - Return true if there are distinct pairs (i, j) in the list where |nums[i] - nums[j]| = k. Example 1: Input: nums = [1, 5, 2, 9, 7], k = 2 Output: true Explanation: The pairs (5, 7) and (7, 9) both have an absolute difference of 2. Example 2: Input: nums = [3, 1, 4, 1, 5], k = 2 Output: true Explanation: The pairs (3, 1) and (5, 3) both have an absolute difference of 2. Example 3: Input: nums = [1, 1, 1, 1], k = 0 Output: true Explanation: Any pair of (1, 1) has an absolute difference of 0. Example 4: Input: nums = [1, 5, 3, 9], k = 4 Output: true Explanation: The pair (5, 9) has an absolute difference of 4. Example 5: Input: nums = [1, 2, 3, 4], k = 5 Output: false Explanation: No pairs have an absolute difference of 5. Note: - The array length n can be zero, in which case the function should return false. - The function should consider the absolute difference between elements, not the indices.","solution":"def is_k_diff_pair(nums, k): Returns true if there are distinct pairs (i, j) in the list where |nums[i] - nums[j]| = k. if not nums: # Early return for empty array return False num_set = set(nums) if k == 0: # If k is 0, we need at least one duplicate element return len(nums) != len(num_set) for num in nums: if (num + k) in num_set or (num - k) in num_set: return True return False"},{"question":"Given an integer array, return the difference between the largest and smallest values in the array. Examples: ``` Input: [3, 1, 4, 1, 5, 9] Output: 8 Input: [10, -2, 33, 45, 23, 7] Output: 47 ``` ~~~if:sql You will be given a table: `nums`, with a column: `value`. Return a table with a column: `difference`, where `difference` is the result of subtracting the smallest value from the largest value in the `value` column. ~~~","solution":"def find_max_min_diff(arr): Returns the difference between the largest and smallest values in the array. Parameters: arr (list): A list of integers. Returns: int: The difference between the largest and smallest values. if not arr: return 0 return max(arr) - min(arr)"},{"question":"Create a function that takes an integer array and returns a new array with each element incremented by the value of its index. The input array will contain at least one element and all elements will be non-negative integers. For an input array: [2, 4, 6, 8] the function should return: [2, 5, 8, 11]","solution":"def increment_by_index(arr): Returns a new array where each element is incremented by its index value. :param arr: List of non-negative integers :return: List of integers, each incremented by its index return [num + idx for idx, num in enumerate(arr)]"},{"question":"Given a list of integers, find the sum of all the contiguous subarrays within the list which have a length exactly equal to a given integer k. Example 1: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: 14 Explanation: The subarrays of length 2 are [1, 2], [2, 3], [3, 4], and [4, 5]. Their sums are 3, 5, 7, and 9, respectively. The total sum is 3 + 5 + 7 + 9 = 24. Example 2: Input: arr = [-1, 2, 3, -4, 2], k = 3 Output: 3 Explanation: The subarrays of length 3 are [-1, 2, 3], [2, 3, -4], and [3, -4, 2]. Their sums are 4, 1, and 1, respectively. The total sum is 4 + 1 + 1 = 6. Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4 1 <= k <= arr.length","solution":"def sum_of_subarrays(arr, k): Returns the total sum of all the contiguous subarrays within the list which have length exactly equal to k. if k > len(arr) or k <= 0: return 0 total_sum = 0 # sum of the first window of size k current_sum = sum(arr[:k]) total_sum += current_sum # use sliding window technique to find sum of other windows for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] total_sum += current_sum return total_sum"},{"question":"A group of students are competing in a coding competition. Each student can solve a problem and their efficiency is measured by the amount of time (in minutes) it takes for them to solve the problem. You are provided with the efficiency of students who participated in the past competitions. Your task is to answer queries about the maximum efficiency measurement within specified ranges of participants. The query types are: Input: The first line consists of number of students N. The next line contains N space-separated integers, where the ith integer is the efficiency (in minutes) of the ith student. The next line contains an integer Q, the number of queries. Each of the next Q lines contains two space-separated integers L and R, representing a query that asks for the maximum efficiency in the range from L to R (inclusive). Output: For each query, output the maximum efficiency within the given range of students. Constraints: 1 <= N <= 10^5 1 <= efficiency of each student <= 10^6 1 <= Q <= 10^5 1 <= L <= R <= N Subtask 1: (30 points) 1 <= N <= 10^3 1 <= Q <= 10^3 Subtask 2: (70 points) Original Constraints Sample Input: 6 3 1 4 1 5 9 3 1 4 2 5 3 6 Sample Output: 4 5 9 Explanation: In the first query, the maximum efficiency between student 1 and student 4 is 4. In the second query, the maximum efficiency between student 2 and student 5 is 5. In the third query, the maximum efficiency between student 3 and student 6 is 9.","solution":"def max_efficiency_in_range(efficiencies, queries): For given ranges, return the maximum efficiency within each range. efficiencies: List[int] - list of efficiencies of students queries: List[tuple] - list of queries represented as tuples (L, R) Returns: List[int] - list of maximum efficiencies for each range query results = [] for L, R in queries: max_efficiency = max(efficiencies[L-1:R]) # L and R are 1-based index results.append(max_efficiency) return results"},{"question":"You are given an array of n integers and a list of m queries. Each query is defined by two integers l and r, and you are required to find the sum of the elements from index l to index r in the array (inclusive). Your task is to process these queries efficiently. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_{n} (-1,000,000 ≤ a_{i} ≤ 1,000,000), representing the array elements. The third line contains a single integer m (1 ≤ m ≤ 100,000) — the number of queries. The following m lines each contain two integers l and r (1 ≤ l ≤ r ≤ n) — the range for each query. -----Output----- Print m integers — the sum of the elements from index l to index r (inclusive) for each query. -----Examples----- Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 6 9 15 Input 4 10 20 30 40 2 2 3 1 4 Output 50 100","solution":"def process_queries(n, arr, m, queries): Returns the sum of the elements from index l to index r (inclusive) for each query. Args: - n (int): number of elements in the array - arr (list of int): the list of elements - m (int): number of queries - queries (list of tuples): each tuple contains two integers l and r Returns: - list of int: sums for each query # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] # Process the queries result = [] for l, r in queries: result.append(prefix_sums[r] - prefix_sums[l - 1]) return result"},{"question":"Create a function `find_most_anagrams` that receives a list of words and returns the word that has the most anagrams in the given list. An anagram is defined as a word that can be formed by rearranging the letters of another word, using all the original letters exactly once. For example, given the list `[\'listen\', \'silent\', \'enlist\', \'google\', \'gogole\', \'cinema\', \'iceman\', \'aibohphobia\', \'bob\']`, the function should return `\'listen\'` as it has the anagrams \'silent\' and \'enlist\', resulting in the highest count of anagrams (2). If there are multiple words with the same highest count of anagrams, return the one that appears first in the list. The input list will always have at least one word. # Examples ```python find_most_anagrams([\'listen\', \'silent\', \'enlist\', \'google\', \'cinema\', \'iceman\']) # returns: \'listen\' find_most_anagrams([\'abc\', \'bca\', \'cab\', \'xyz\', \'zyx\']) # returns: \'abc\' find_most_anagrams([\'aabb\', \'abab\', \'baba\', \'baab\', \'bbcc\']) # returns: \'aabb\' ``` # Notes - The returned word should be in lowercase, and the input list will contain only lowercase alphabetic characters. - Use efficient algorithms to ensure your solution runs within a reasonable time for lists containing up to 1000 words.","solution":"def find_most_anagrams(words): from collections import defaultdict # Using a dictionary to group words by their sorted tuple of characters anagrams_dict = defaultdict(list) for word in words: key = tuple(sorted(word)) anagrams_dict[key].append(word) # Find the word with the most anagrams max_count = 0 result_word = None for word in words: key = tuple(sorted(word)) count = len(anagrams_dict[key]) if count > max_count: max_count = count result_word = word return result_word"},{"question":"Write a function named isLeapYear which receives a single parameter year. The function should return true if the given year is a leap year and false otherwise. A leap year is defined as any year that is divisible by 4, except if it is divisible by 100, then it must also be divisible by 400. Examples: ```if-not:julia,racket isLeapYear(2020) -> true isLeapYear(1900) -> false isLeapYear(2000) -> true isLeapYear(2021) -> false ```","solution":"def isLeapYear(year): Returns True if the given year is a leap year, otherwise False. A year is a leap year if it is divisible by 4, except if it is divisible by 100, then it must also be divisible by 400. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Write a function that takes a list of strings and returns a new list containing all strings that are palindromes. A palindrome is a word that reads the same forward and backward, case-insensitively. For example, having the input `[\\"Racecar\\", \\"Hello\\", \\"Level\\", \\"World\\", \\"Deified\\"]` should return `[\\"Racecar\\", \\"Level\\", \\"Deified\\"]` as these strings read the same in reverse. ```python def find_palindromes(words): # your implementation here palindromes = find_palindromes([\\"Racecar\\", \\"Hello\\", \\"Level\\", \\"World\\", \\"Deified\\"]) print(palindromes) # --> [\'Racecar\', \'Level\', \'Deified\'] ```","solution":"def find_palindromes(words): Returns a list of strings that are palindromes from the given list. A palindrome is a word that reads the same forward and backward, case-insensitively. :param words: List of strings to be checked. :return: List of palindromic strings. return [word for word in words if word.lower() == word.lower()[::-1]]"},{"question":"=====Problem Statement===== You are given a list of student records, where each record contains two fields, a string representing the student\'s name and an integer representing their grade. Write a program that processes multiple queries on this list of records and returns results based on the query type. You can perform the following queries: 1. add name grade: Add a student record with the given name and grade to the list. 2. remove name: Remove the student record with the given name from the list. If there is more than one record with the same name, remove only the first occurrence. 3. update name new_grade: Update the grade for the record with the given name to the new_grade. If there are multiple records with the same name, update only the first occurrence. 4. print: Print the list of all student records currently in the list in the format [(name1, grade1), (name2, grade2), ...]. 5. average: Print the average of all student grades in the list. If the list is empty, print \\"N/A\\". Initialize your list and read in the value of n followed by n lines of commands where each command relates to one of the types listed above. Iterate through each command in order and perform the corresponding operation on your list. =====Example===== N = 5 add Alice 85 add Bob 90 update Alice 95 print average add Alice 85: Add a student record with name \\"Alice\\" and grade 85 to the list, records = [(\\"Alice\\", 85)]. add Bob 90: Add a student record with name \\"Bob\\" and grade 90 to the list, records = [(\\"Alice\\", 85), (\\"Bob\\", 90)]. update Alice 95: Update the grade for the first student record with the name \\"Alice\\" to 95, records = [(\\"Alice\\", 95), (\\"Bob\\", 90)]. print: Print the list of all student records, output: [(\\"Alice\\", 95), (\\"Bob\\", 90)]. average: Calculate the average of all grades, (95 + 90) / 2 = 92.5, output: 92.5. =====Input Format===== The first line contains an integer, n, denoting the number of commands. Each line i of the subsequent n lines contains one of the commands described above. =====Constraints===== - The name of the student is a string without spaces. - The grade of the student is an integer between 0 and 100 (inclusive). - The list of student records can initially be empty. - If a remove or update command is issued for a name not in the list, ignore that command. =====Output Format===== For each command of type print, print the list of student records on a new line. For the command average, print the average grade, or \\"N/A\\" if the list is empty.","solution":"def process_commands(commands): records = [] for command in commands: parts = command.split() action = parts[0] if action == \'add\': name = parts[1] grade = int(parts[2]) records.append((name, grade)) elif action == \'remove\': name = parts[1] for i in range(len(records)): if records[i][0] == name: records.pop(i) break elif action == \'update\': name = parts[1] new_grade = int(parts[2]) for i in range(len(records)): if records[i][0] == name: records[i] = (name, new_grade) break elif action == \'print\': print(records) elif action == \'average\': if records: avg = sum(grade for name, grade in records) / len(records) print(avg) else: print(\\"N/A\\")"},{"question":"You are given a sequence of integer numbers. Your task is to determine how many unique elements are contained within the subarray formed by every pair of given indices inclusive and output the maximum value among these counts. -----Input----- The first line contains an integer n (1 le n le 1000) which represents the size of the array. The second line contains n integers a_i (1 le a_i le 1000) which represent the elements of the array. The third line contains an integer q (1 le q le 100) — the number of subarray pairs. The next q lines each contain two integers l and r (1 le l le r le n) which represent the starting and ending indices of a subarray (1-based index). -----Output----- Print a single integer representing the maximum number of unique elements in the subarrays specified by the pairs of indices. -----Example----- Input 5 1 2 1 3 2 3 1 5 2 4 3 5 Output 3 Explanation: - For the first subarray (1, 5), the elements are [1, 2, 1, 3, 2] which have 3 unique elements: 1, 2, 3. - For the second subarray (2, 4), the elements are [2, 1, 3] which have 3 unique elements: 1, 2, 3. - For the third subarray (3, 5), the elements are [1, 3, 2] which have 3 unique elements: 1, 2, 3. The maximum value among these counts is 3.","solution":"def max_unique_elements(n, array, q, queries): This function takes in the size of the array, the array itself, the number of subarray queries, and the list of queries, and determines the maximum number of unique elements in any of the subarrays specified. :param n: int - Size of the array :param array: list of int - The array elements :param q: int - Number of subarray queries :param queries: list of tuples - Each tuple contains two integers representing the subarray range (1-based index) :return: int - The maximum number of unique elements in any of the subarrays specified max_unique = 0 for l, r in queries: # Slicing the array to get the subarray and finding unique elements using set unique_elements = len(set(array[l-1:r])) max_unique = max(max_unique, unique_elements) return max_unique"},{"question":"Given a list of integers representing grades of students in a class, you are asked to implement a grading system that rounds each student\'s grade according to these rules: 1. If the difference between the grade and the next multiple of 5 is less than 3, round the grade up to the next multiple of 5. 2. If the grade is less than 38, don\'t round it up since the result will still be a failing grade. Write a function `roundGrades(grades)` that takes in a list of integers representing grades and returns a new list with the grades rounded according to the above rules. Example 1: Input: grades = [73, 67, 38, 33] Output: [75, 67, 40, 33] Explanation: - 73 rounded to the next multiple of 5 is 75 because 75 - 73 < 3. - 67 remains 67 because 70 - 67 >= 3. - 38 rounded to the next multiple of 5 is 40 because 40 - 38 < 3. - 33 is rounded to nothing because it\'s below 38. Example 2: Input: grades = [84, 29, 57] Output: [85, 29, 57] Explanation: - 84 rounded to the next multiple of 5 is 85 because 85 - 84 < 3. - 29 is below 38, so it remains 29. - 57 remains 57 because 60 - 57 >= 3. Constraints: 1. 1 <= len(grades) <= 10^4 2. 0 <= grades[i] <= 100","solution":"def roundGrades(grades): Given a list of grades, return the list with the grades rounded according to the specified rules. rounded_grades = [] for grade in grades: if grade >= 38: next_multiple_of_5 = ((grade // 5) + 1) * 5 if next_multiple_of_5 - grade < 3: grade = next_multiple_of_5 rounded_grades.append(grade) return rounded_grades"},{"question":"Create a function that takes a list of integers as an argument and returns the longest subsequence of consecutive integers that appear in the list, in any order. If two sequences have the same length, return the one that starts with the smallest integer. Examples ``` [100, 4, 200, 1, 3, 2] ==> [1, 2, 3, 4] [10, 5, 12, 3, 55, 6, 11] ==> [10, 11, 12] [1, 9, 3, 10, 2, 20] ==> [1, 2, 3] ```","solution":"def longest_consecutive_subsequence(nums): Given a list of integers, returns the longest subsequence of consecutive integers in any order. If multiple sequences have the same length, returns the one that starts with the smallest integer. if not nums: return [] nums_set = set(nums) longest_sequence = [] for num in nums: # Check if this is the start of a sequence if num - 1 not in nums_set: current_sequence = [] current_num = num # Build the current sequence while current_num in nums_set: current_sequence.append(current_num) current_num += 1 # Update the longest sequence if necessary if (len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0])): longest_sequence = current_sequence return longest_sequence"},{"question":"Write a function that takes in a list of integers and returns the sum of all integers at odd indices (1-based index). If the list is empty or contains more than 50 elements, the function should return \\"invalid list\\". For example: ``` [10, 20, 30, 40, 50, 60] --> 90 (sum of 20, 40, 60) [1] --> 0 [] --> \\"invalid list\\" [1, 2, ... , 51] --> \\"invalid list\\" ```","solution":"def sum_odd_indices(lst): Returns the sum of all integers at odd indices (1-based index) in the list. If the list is empty or contains more than 50 elements, returns \\"invalid list\\". if len(lst) == 0 or len(lst) > 50: return \\"invalid list\\" return sum(lst[i] for i in range(1, len(lst), 2))"},{"question":"=====Problem Statement===== You have been given a string containing a set of words separated by spaces. Each word is a sequence of alphanumeric characters, and words are separated by one or more spaces. You are to write a function that takes this string as an input and returns a string with each word reversed but the order of words should be preserved. For example, if the input string is \\"Hello World\\", the output string should be \\"olleH dlroW\\". =====Function Signature===== ```python def reverse_words(input_string: str) -> str: ``` =====Input===== - The input will be a single line string containing words separated by spaces. It is guaranteed that this string has a length between 1 and 1000 characters. =====Output===== - The output should be a single line string with all the words reversed but in the preserved order, separated by a single space. =====Examples===== ```python >>> reverse_words(\\"Hello World\\") \'olleH dlroW\' >>> reverse_words(\\"Python is fun\\") \'nohtyP si nuf\' >>> reverse_words(\\"a b c\\") \'a b c\' >>> reverse_words(\\"Practice makes perfect\\") \'ecitcarP sekam tcefrep\' ``` =====Constraints===== - The input string will have a length between 1 and 1000. - The input string will consist of only alphanumeric characters and spaces. - There will be no leading or trailing spaces in the input string.","solution":"def reverse_words(input_string: str) -> str: Reverses each word in the input string but preserves the order of words. Args: input_string (str): The input string containing words separated by spaces. Returns: str: A single line string with all the words reversed but in the preserved order. words = input_string.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"A company has a rectangular office floor that is represented as a 2D grid and wants to divide it into smaller rectangular areas to allocate to different teams. Each cell in the grid represents a 1x1 unit area. However, there are some restrictions – certain areas with obstacles cannot be allocated to any team. These obstacles are represented as \'O\' in the grid, while free areas are represented as \'.\'. Create a function that determines the maximum area of a single rectangular section that can be allocated to a team without including any obstacles. If the entire grid is filled with obstacles, return 0. Function signature: ```python def max_allocated_area(grid: List[List[str]]) -> int: ``` # Input - `grid`: A list of lists where each sublist represents a row on the office floor. Each element is either \'O\' (an obstacle) or \'.\' (a free area). # Output - An integer representing the maximum area of a single rectangle that can be allocated without including any obstacles. # Examples Ex1 ```python grid = [ [\'.\', \'.\', \'.\', \'.\', \'O\'], [\'.\', \'O\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'O\', \'.\', \'O\'] ] ``` *Answer: 6* Ex2 ```python grid = [ [\'O\', \'O\', \'O\'], [\'O\', \'O\', \'O\'] ] ``` *Answer: 0* # Notes - The grid may be empty. - Assume the grid does not contain invalid characters and is of consistent rectangular shape. - The function must handle large grids efficiently.","solution":"from typing import List def max_allocated_area(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Initialize dp arrays height = [0] * (cols + 1) max_area = 0 for row in grid: for col in range(cols): height[col] = height[col] + 1 if row[col] == \'.\' else 0 stack = [-1] for col in range(cols + 1): while height[col] < height[stack[-1]]: h = height[stack.pop()] w = col - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(col) return max_area"},{"question":"___ You are given a list of integers which denotes the heights of buildings in a row. From the leftmost building, your task is to determine how many buildings in total (starting from the leftmost and including it) would be visible based on their heights. A building is visible if there are no taller buildings in front of it (to its left). ___ # Task Write a function `visible_buildings(buildings)` that takes a list of integers representing the heights of buildings and returns the count of buildings that would be visible from the left side. Notes: - A building with a greater height blocks the view of all buildings to its right of smaller heights. - The first building is always visible. ___ Examples ``` visible_buildings([3, 5, 4, 2, 6, 1]) == 3 visible_buildings([1, 2, 3, 4, 5]) == 5 visible_buildings([5, 4, 3, 2, 1]) == 1 visible_buildings([10, 12, 15, 20, 10, 30]) == 5 visible_buildings([5, 5, 5, 5]) == 1 ``` ___","solution":"def visible_buildings(buildings): Returns the count of buildings that would be visible from the left side. Parameters: buildings (list of int): List of building heights. Returns: int: Count of visible buildings. if not buildings: return 0 visible_count = 1 # The first building is always visible max_height = buildings[0] for height in buildings[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Find the second smallest number in the given list. Examples ```python second_smallest([4, 2, 7, 1, 8, 3, 6]) ==> 2 second_smallest([10, 20, 30, 40]) ==> 20 second_smallest([5, 5, 5, 5, 5]) ==> None second_smallest([3, -1, 2, 0, 8]) ==> 0 ``` Given a list of integers, return the second smallest unique integer. If there is no second smallest number, return `None`.","solution":"def second_smallest(numbers): Finds the second smallest unique number in the given list. :param numbers: List of integers :return: Second smallest unique integer or None if there isn\'t one unique_numbers = sorted(set(numbers)) if len(unique_numbers) < 2: return None return unique_numbers[1]"},{"question":"# Introduction A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples include \\"radar\\", \\"level\\", and \\"A man, a plan, a canal, Panama\\". # Task Write a function that accepts a string input and returns `True` if the string is a palindrome, and `False` otherwise. The function should ignore spaces, punctuation, and case when determining if the string is a palindrome. # Input - A string `s` which may contain letters, digits, spaces, and punctuation. (1 ≤ |s| ≤ 10^5) # Output - A boolean value `True` if `s` is a palindrome, `False` otherwise. # Example ```python def is_palindrome(s: str) -> bool: # Implement your solution here print(is_palindrome(\\"A man, a plan, a canal, Panama\\")) # True print(is_palindrome(\\"No lemon, no melon\\")) # True print(is_palindrome(\\"Hello, World!\\")) # False ``` # Constraints - Consider only alphanumeric characters and ignore cases. - Try to achieve a time complexity of O(n).","solution":"import re def is_palindrome(s: str) -> bool: Returns True if the string s is a palindrome, False otherwise. This function ignores spaces, punctuation, and case. # Remove non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"You are given a string comprising lowercase letters and you are required to find the length of the longest substring that contains only unique characters. Write a function `longestUniqueSubstring()` that takes a string `s` as input and returns an integer representing the length of the longest substring with all unique characters. For example, given the string **\\"abcabcbb\\"**: - The longest substring with unique characters is **\\"abc\\"** which has a length of 3. For the string **\\"bbbbb\\"**: - The longest substring with unique characters is **\\"b\\"** with a length of 1. And for the string **\\"pwwkew\\"**: - The longest substring with unique characters is **\\"wke\\"** with a length of 3. Write the function `longestUniqueSubstring(s: str) -> int` to solve the stated problem. ```python def longestUniqueSubstring(s: str) -> int: # Add your logic here pass ```","solution":"def longestUniqueSubstring(s: str) -> int: Returns the length of the longest substring with all unique characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Alice is organizing a party and wants to create unique gift bags for each guest. She has a specific set of items that she can use to assemble these gift bags. However, since she has multiple guests, she wants to ensure that each bag is unique by using a specific pattern. She decides that each bag should consist of three different items from the set. The order of items in the gift bag does not matter (i.e., \\"Apple, Banana, Chocolate\\" is same as \\"Chocolate, Apple, Banana\\"). Alice needs your help to determine the number of unique gift bags she can create from the given set of items. -----Input----- The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of distinct items available. The second line contains a space-separated list of N items. -----Output----- For each test case, output a single line containing the number of unique gift bags Alice can create from the given set of items. -----Example----- Input: 2 5 Apple Banana Chocolate Donut Eclair 3 Apple Banana Chocolate Output: 10 1 -----Explanation----- In the first test case, Alice can create the following unique gift bags: - (Apple, Banana, Chocolate) - (Apple, Banana, Donut) - (Apple, Banana, Eclair) - (Apple, Chocolate, Donut) - (Apple, Chocolate, Eclair) - (Apple, Donut, Eclair) - (Banana, Chocolate, Donut) - (Banana, Chocolate, Eclair) - (Banana, Donut, Eclair) - (Chocolate, Donut, Eclair) In the second test case, there is only one way to create a gift bag: - (Apple, Banana, Chocolate) -----Constraints----- - 1 ≤ T ≤ 100 - 3 ≤ N ≤ 1000 - Each item name will not exceed 20 characters. - All item names are unique within the same test case.","solution":"from itertools import combinations def unique_gift_bags(T, test_cases): Determines the number of unique gift bags for each test case. Each test case consists of: - A list of distinct items. Returns a list of integers representing the number of unique gift bags for each test case. results = [] for i in range(T): N = test_cases[i][0] items = test_cases[i][1] if N < 3: results.append(0) # Not enough items to form a gift bag else: results.append(len(list(combinations(items, 3)))) return results"},{"question":"Given a string `s` consisting of lowercase alphabets and a character `c`, you need to construct a new string where each character in the new string is the shortest distance from that character in the input string to the character `c`. The distance between two indices `i` and `j` is `|i - j|`. Example: Input: s = \\"loveleetcode\\", c = \'e\' Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] Explanation: The shortest distance from character in position 0 (\'l\') to \'e\' is 3, from position 1 (\'o\') to \'e\' is 2, from position 2 (\'v\') to \'e\' is 1, and so on. Note: You can assume that the character `c` will always exist in the string `s`.","solution":"def shortest_to_char(s, c): Returns a list of shortest distances from each character in string s to the character c. Parameters: s (str): the input string consisting of lowercase alphabets. c (str): the character whose distance is to be measured from each character in s. Returns: List[int]: a list where each index contains the shortest distance from that index to the character c. n = len(s) result = [0] * n prev_position = float(\'-inf\') # First pass: check distance from left to right for i in range(n): if s[i] == c: prev_position = i result[i] = abs(i - prev_position) # Second pass: check distance from right to left prev_position = float(\'inf\') for i in range(n-1, -1, -1): if s[i] == c: prev_position = i result[i] = min(result[i], abs(i - prev_position)) return result"},{"question":"Write a function maxDistinctChars that accepts a string and an integer k and returns the maximum number of distinct characters in any substring of length k of the given string. If there are multiple substrings with the same maximum number of distinct characters, return the number of such substrings. E.g 1: For s = \\"araaci\\" and k = 2, result should be [2, 4], because the substrings \\"ar\\", \\"ra\\", \\"aa\\", and \\"ci\\" all have 2 distinct characters. E.g 2: For s = \\"cbbebi\\" and k = 3, result should be [3, 1], because the substring \\"cbe\\" has the maximum 3 distinct characters, and there is only 1 such substring.","solution":"def maxDistinctChars(s, k): Returns the maximum number of distinct characters in any substring of length k of the given string, as well as the number of such substrings. from collections import defaultdict if not s or k <= 0 or k > len(s): return [0, 0] max_distinct = 0 substr_freq = defaultdict(int) for i in range(len(s) - k + 1): substring = s[i:i + k] distinct_chars = len(set(substring)) if distinct_chars > max_distinct: max_distinct = distinct_chars substr_freq[max_distinct] = 1 elif distinct_chars == max_distinct: substr_freq[max_distinct] += 1 return [max_distinct, substr_freq[max_distinct]]"},{"question":"You are given a string s and an array of strings wordDict. Write a function to determine if s can be segmented into a space-separated sequence of one or more dictionary words. Note that the same word in the dictionary may be reused multiple times in the segmentation. Example: Input: s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] Output: true Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Implement your function with a time complexity of O(n * m), where n is the length of the string s and m is the average length of the words in wordDict.","solution":"from collections import deque def wordBreak(s, wordDict): Determines if the string s can be segmented into a sequence of one or more dictionary words. Parameters: s (str): the string to be segmented. wordDict (list): the list of dictionary words. Returns: bool: True if s can be segmented, False otherwise. wordSet = set(wordDict) visited = [False] * len(s) queue = deque([0]) while queue: start = queue.popleft() if start == len(s): return True if visited[start]: continue visited[start] = True for end in range(start + 1, len(s) + 1): if s[start:end] in wordSet: queue.append(end) return False"},{"question":"You are given a series of R rectangles, each defined by its coordinates (x1, y1, x2, y2) on a 2D plane. Each rectangle represents a billboard. A point is illuminated if it falls within any of the rectangles. Define the minimal number of spotlights required to illuminate all given billboards. Each spotlight illuminates only a single given billboard entirely. -----Input----- - First Line contains R (number of rectangles) The next R lines contain the four integers x1, y1, x2, y2, separated by spaces, which represent the coordinates of each rectangle\'s two opposite corners. -----Output----- A single value corresponding to the minimum number of spotlights required. -----Constraints----- - 1 <= R <= 104 - 0 <= x1, y1, x2, y2 <= 109 -----Example----- Input: 3 1 1 2 2 2 2 3 3 3 3 4 4 Output: 3","solution":"def minimal_spotlights_required(rectangles): Given a list of rectangles, each represented by their coordinates (x1, y1, x2, y2), returns the minimal number of spotlights required to illuminate all given billboards. Parameters: rectangles (list of tuples): A list of tuples where each tuple contains: (x1, y1, x2, y2) coordinates of a rectangle. Returns: int: The minimum number of spotlights required. # Each rectangle requires its own spotlight since no further overlapping logic is needed. return len(rectangles)"},{"question":"Implement the Playlist class: The Playlist class should allow the following functionalities: 1. Playlist(int maxSize) - Initializes the object with maxSize which is the maximum number of songs that can be added to the playlist. 2. void addSong(String song) - Adds the song to the end of the playlist if it hasn\'t reached the maxSize. 3. String removeSong() - Removes and returns the song from the start of the playlist. If the playlist is empty, return \\"No songs in playlist\\". 4. String playNext() - Returns the song at the start of the playlist without removing it. If the playlist is empty, return \\"No songs in playlist\\". 5. void removeDuplicateSongs() - Removes all duplicate songs in the playlist except for the first occurrence of each song. Example: Input [\\"Playlist\\", \\"addSong\\", \\"addSong\\", \\"addSong\\", \\"removeSong\\", \\"playNext\\", \\"addSong\\", \\"addSong\\", \\"removeDuplicateSongs\\", \\"removeSong\\", \\"removeSong\\", \\"removeSong\\"] [[5], [\\"Song1\\"], [\\"Song2\\"], [\\"Song1\\"], [], [], [\\"Song3\\"], [\\"Song4\\"], [], [], [], []] Output [null, null, null, null, \\"Song1\\", \\"Song2\\", null, null, null, \\"Song2\\", \\"Song3\\", \\"Song4\\"] Explanation Playlist playlist = new Playlist(5); // Playlist is Empty [] playlist.addSong(\\"Song1\\"); // Playlist becomes [\\"Song1\\"] playlist.addSong(\\"Song2\\"); // Playlist becomes [\\"Song1\\", \\"Song2\\"] playlist.addSong(\\"Song1\\"); // Playlist becomes [\\"Song1\\", \\"Song2\\", \\"Song1\\"] playlist.removeSong(); // Return \\"Song1\\", Playlist becomes [\\"Song2\\", \\"Song1\\"] playlist.playNext(); // Return \\"Song2\\" playlist.addSong(\\"Song3\\"); // Playlist becomes [\\"Song2\\", \\"Song1\\", \\"Song3\\"] playlist.addSong(\\"Song4\\"); // Playlist becomes [\\"Song2\\", \\"Song1\\", \\"Song3\\", \\"Song4\\"] playlist.removeDuplicateSongs(); // Return null, Playlist becomes [\\"Song2\\", \\"Song1\\", \\"Song3\\", \\"Song4\\"] playlist.removeSong(); // Return \\"Song2\\", Playlist becomes [\\"Song1\\", \\"Song3\\", \\"Song4\\"] playlist.removeSong(); // Return \\"Song1\\", Playlist becomes [\\"Song3\\", \\"Song4\\"] playlist.removeSong(); // Return \\"Song3\\", Playlist becomes [\\"Song4\\"] Constraints: - 1 <= maxSize <= 1000 - Songs are non-empty strings with a maximum length of 100. - At most 1000 calls will be made to each method of addSong, removeSong, playNext, and removeDuplicateSongs.","solution":"class Playlist: def __init__(self, maxSize: int): self.maxSize = maxSize self.songs = [] def addSong(self, song: str): if len(self.songs) < self.maxSize: self.songs.append(song) def removeSong(self) -> str: if self.songs: return self.songs.pop(0) else: return \\"No songs in playlist\\" def playNext(self) -> str: if self.songs: return self.songs[0] else: return \\"No songs in playlist\\" def removeDuplicateSongs(self): seen = set() new_songs = [] for song in self.songs: if song not in seen: new_songs.append(song) seen.add(song) self.songs = new_songs"},{"question":"=====Function Descriptions===== collections.deque A deque is a double-ended queue that supports adding and removing elements from either end with a consistent time complexity of O(1) for append and pop operations. It can be used for efficiently implementing queues and stacks. Example Code >>> from collections import deque >>> >>> d = deque() >>> d.append(1) >>> d.append(2) >>> d.append(3) >>> d.appendleft(4) >>> d.appendleft(5) >>> print(d) deque([5, 4, 1, 2, 3]) >>> >>> d.pop() 3 >>> d.popleft() 5 >>> print(d) deque([4, 1, 2]) =====Problem Statement===== You are tasked with managing a line at a theme park attraction where visitors can enter or leave from both the front and the back. You are given a series of commands that manipulate the line. Your task is to process these commands and output the updated line after all commands are executed. Each command can be one of the following: - \\"append x\\": Add visitor x to the end of the line. - \\"appendleft x\\": Add visitor x to the front of the line. - \\"pop\\": Remove the visitor from the end of the line. - \\"popleft\\": Remove the visitor from the front of the line. =====Input Format===== The first line contains the number of commands, N. The next N lines each contain a command in one of the formats specified above. =====Constraints===== 0 < N ≤ 100 =====Output Format===== Print the updated line as a space-separated list after all commands have been processed. If the line is empty, print an empty line. =====Sample Input===== 6 append 1 append 2 appendleft 3 pop popleft append 4 =====Sample Output===== 1 4","solution":"from collections import deque def process_commands(commands): d = deque() for command in commands: if command.startswith(\\"append \\"): x = command.split()[1] d.append(x) elif command.startswith(\\"appendleft \\"): x = command.split()[1] d.appendleft(x) elif command == \\"pop\\": if d: d.pop() elif command == \\"popleft\\": if d: d.popleft() return d def print_line(d): if d: print(\\" \\".join(d)) else: print(\\"\\")"},{"question":"Create a function that takes an integer input n and returns a list of all unique prime factors of n. Prime factors are prime numbers that divide n exactly, without leaving a remainder. # For example: For the input 28, the function should return [2, 7] because the prime factors of 28 are 2 and 7. For the input 45, the function should return [3, 5] because the prime factors of 45 are 3 and 5. For the input 100, the function should return [2, 5] because the prime factors of 100 are 2 and 5. ```python def prime_factors(n): # Your code here # Example usage: print(prime_factors(28)) # Output: [2, 7] print(prime_factors(45)) # Output: [3, 5] print(prime_factors(100)) # Output: [2, 5] ```","solution":"def prime_factors(n): Returns a list of all unique prime factors of n. factors = [] # Check for number of 2s that divide n while n % 2 == 0: if 2 not in factors: factors.append(2) n //= 2 # n must be odd at this point, so we can skip one element (i.e., we can check i = i + 2) for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: if i not in factors: factors.append(i) n //= i # This condition is to check if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Write a function `xor_lists` that takes two lists of integers and an optional default value (defaulting to `0`). This function should return a new list where each element is the result of the bitwise `XOR` operation between the corresponding elements of the input lists. If the lists are of different lengths, the unmatched elements from the longer list should be `XOR`ed with the default value. For example: ```python xor_lists([1,2,3], [4,5,6]) == [5, 7, 5] xor_lists([1,2], [3,4,5]) == [2, 6, 5] xor_lists([7,8,9], [10,11]) == [13, 3, 9] xor_lists([2,4], [1,1,1], 2) == [3, 5, 3] xor_lists([3,5,7], [1,1,1]) == [2, 4, 6] ```","solution":"def xor_lists(list1, list2, default=0): Returns a new list where each element is the result of the bitwise XOR operation between the corresponding elements of the input lists. If the lists are of different lengths, the unmatched elements from the longer list should be XORed with the default value. max_len = max(len(list1), len(list2)) result = [] for i in range(max_len): val1 = list1[i] if i < len(list1) else default val2 = list2[i] if i < len(list2) else default result.append(val1 ^ val2) return result"},{"question":"Write a function that takes a list of integers and returns a new list containing only elements that have even indices. An \\"even index\\" is an index that is divisible by 2. For example, given the list `[17, 42, 33, 80, 75, 19]`, the function should return `[17, 33, 75]`, as 17, 33, and 75 are at indices 0, 2, and 4, which are divisible by 2. It should handle an empty list by returning an empty list. The input will always be a list of integers. Examples ```python [17, 42, 33, 80, 75, 19] ==> [17, 33, 75] [1, 3, 5, 7, 9] ==> [1, 5, 9] [] ==> [] [4, 4, 4, 4, 4, 4, 4, 4] ==> [4, 4, 4, 4] [10] ==> [10] ```","solution":"def elements_with_even_indices(lst): Given a list of integers, return a new list containing only elements that have even indices. return [lst[i] for i in range(len(lst)) if i % 2 == 0]"},{"question":"**Story** Imagine you are a software developer at a factory where identical widgets are manufactured. The widgets are produced at a constant rate per hour and need to be packed in crates for shipping. Each crate has a fixed capacity, and once a crate is full, a new one is started. Due to some constraints, once you start packing a crate, you must finish filling it before you can start another one. The factory operates 24 hours a day, but at the end of each day, any widgets that haven\'t completely filled a crate are discarded. Your task is to find out the number of full crates packed after a given number of hours of operation. **Formal problem** *Input:* Your function will receive three integers: 1. `widgets_per_hour` (the rate at which widgets are produced per hour, 1 ≤ widgets_per_hour ≤ 10^6) 2. `crate_capacity` (the capacity of each crate, 1 ≤ crate_capacity ≤ 10^6) 3. `total_hours` (total hours the factory has been operating, 1 ≤ total_hours ≤ 10^6) *Output:* Return the total number of full crates packed after the given number of hours. **Examples** ```python full_crates_packed(5, 10, 24) # Output: 12 full_crates_packed(7, 3, 48) # Output: 112 full_crates_packed(100, 1000, 25) # Output: 2 ``` **Notes and hints** - Think about how many widgets are produced in total and how many complete crates can be packed from that total production. - Consider efficiency, as the total number of hours can be very large.","solution":"def full_crates_packed(widgets_per_hour, crate_capacity, total_hours): Calculate the number of full crates packed after a given number of hours. Parameters: widgets_per_hour (int): The rate at which widgets are produced per hour. crate_capacity (int): The capacity of each crate. total_hours (int): Total hours the factory has been operating. Returns: int: The number of full crates packed. total_widgets = widgets_per_hour * total_hours return total_widgets // crate_capacity"},{"question":"Task Design a program that simulates the working of a vending machine. The vending machine offers a variety of products, each of which has a fixed price. The task is to implement functions that allow users to insert money, select products, and get change. # Requirements 1. **Initialization** - A method to initialize the vending machine with a set of products and their prices. - Example: `{\\"Soda\\": 150, \\"Chips\\": 75, \\"Candy\\": 60}` 2. **Insert Money** - A method to insert money into the vending machine. - Acceptable denominations are integers representing cents (e.g., 1, 5, 10, 25, etc.). 3. **Select Product** - A method to select a product. This method should check if enough money has been inserted to cover the price of the selected product. - If enough money has been inserted, it should dispense the product and adjust the balance accordingly. - If not enough money has been inserted, it should notify the user of the shortfall. 4. **Get Change** - A method to return the remaining balance in coins (denominations: 1, 5, 10, 25, etc.). - Ensure that the change is returned in the fewest number of coins possible. 5. **Display Products** - A method to display the available products and their prices. # Example ```python vendingMachine = VendingMachine({\\"Soda\\": 150, \\"Chips\\": 75, \\"Candy\\": 60}) vendingMachine.display_products() # Output: # 1: Soda - 150 cents # 2: Chips - 75 cents # 3: Candy - 60 cents vendingMachine.insert_money(100) vendingMachine.insert_money(50) vendingMachine.select_product(\\"Soda\\") # Output: Dispensing Soda. Change: 0 cents. vendingMachine.insert_money(70) vendingMachine.select_product(\\"Candy\\") # Output: Not enough money inserted. Please insert 60 more cents. vendingMachine.insert_money(20) vendingMachine.select_product(\\"Candy\\") # Output: Dispensing Candy. Change: 30 cents. ``` # Notes - Assume that the vending machine has an unlimited supply of products and coins for giving change. - Users can choose to insert all money at once or in multiple steps. - Design the solution to handle several concurrent users if implemented as a real-world application.","solution":"class VendingMachine: def __init__(self, products): Initialize the Vending Machine with a set of products and their prices. Products should be a dictionary with product names as keys and prices in cents as values. self.products = products self.balance = 0 def insert_money(self, amount): Insert money into the vending machine. Acceptable denominations are integers representing cents (e.g., 1, 5, 10, 25, etc.). self.balance += amount def select_product(self, product_name): Select a product from the vending machine. Dispense the product if enough money has been inserted. Return the product and any change due. if product_name not in self.products: return \\"Product not available.\\" product_price = self.products[product_name] if self.balance >= product_price: self.balance -= product_price change = self.balance self.balance = 0 return f\\"Dispensing {product_name}. Change: {change} cents.\\" else: shortfall = product_price - self.balance return f\\"Not enough money inserted. Please insert {shortfall} more cents.\\" def get_change(self): Return the remaining balance in coins. Ensure that the change is returned in the fewest number of coins possible. change = self.balance self.balance = 0 return change def display_products(self): Display the available products and their prices. for idx, (product, price) in enumerate(self.products.items(), start=1): print(f\\"{idx}: {product} - {price} cents\\")"},{"question":"The Task ------------- You need to implement a function that evaluates mathematical expressions provided as strings. The function should support the basic arithmetic operators (`+`, `-`, `*`, `/`) and parentheses for changing order of operations. The implementation should follow the standard mathematical precedence rules: parentheses first, then multiplication and division (from left to right), and then addition and subtraction (from left to right). Function Signature ----------------- * `eval_expression(expression: str) -> float` Input ---- The input string `expression` consists of: - Numbers, which are non-negative integers or floating point numbers. - Arithmetic operators (`+`, `-`, `*`, `/`). - Parentheses to denote precedence: `(` and `)`. - The string can have any number of spaces around numbers and operators. Output ------ The function should return the result of the evaluation as a float. Constraints ------ - The length of `expression` will be at most `1000` characters. - The input expression is guaranteed to be a valid mathematical expression. Examples -------- ```python eval_expression(\\"3 + 5\\") # Expected output: 8.0 eval_expression(\\"10 + 2 * 6\\") # Expected output: 22.0 eval_expression(\\"100 * ( 2 + 12 ) / 14\\") # Expected output: 100.0 eval_expression(\\"(2.5 * 4) - (2 + 3.5)\\") # Expected output: 4.5 ```","solution":"def eval_expression(expression: str) -> float: Evaluates a mathematical expression and returns the result as a float. Parameters: expression (str): The mathematical expression to evaluate. Returns: float: The result of the evaluated expression. import re def parse_expression(expression): # Remove spaces for easier processing expression = expression.replace(\\" \\", \\"\\") # Tokenize the expression tokens = re.findall(r\'d*.d+|d+|[+-*/()]\', expression) # Process tokens with operator precedence def shunting_yard(tokens): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output_queue = [] operator_stack = [] for token in tokens: if re.match(r\'d*.d+|d+\', token): output_queue.append(float(token)) elif token in \\"+-*/\\": while (operator_stack and operator_stack[-1] in precedence and precedence[operator_stack[-1]] >= precedence[token]): output_queue.append(operator_stack.pop()) operator_stack.append(token) elif token == \\"(\\": operator_stack.append(token) elif token == \\")\\": while operator_stack and operator_stack[-1] != \\"(\\": output_queue.append(operator_stack.pop()) operator_stack.pop() # pop the \'(\' from the stack while operator_stack: output_queue.append(operator_stack.pop()) return output_queue def evaluate_rpn(rpn): stack = [] for token in rpn: if isinstance(token, float): stack.append(token) elif token in \\"+-*/\\": b = stack.pop() a = stack.pop() if token == \\"+\\": stack.append(a + b) elif token == \\"-\\": stack.append(a - b) elif token == \\"*\\": stack.append(a * b) elif token == \\"/\\": stack.append(a / b) return stack[0] rpn = shunting_yard(tokens) return evaluate_rpn(rpn) return parse_expression(expression)"},{"question":"You are given a binary grid with n rows and m columns, where each cell contains either a 0 or a 1. Your task is to find the maximum number of consecutive 1s (in any direction - horizontally, vertically, or diagonally), and output this number. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns of the grid, respectively. Each of the next n lines contains m characters: \'0\' or \'1\', representing the grid. -----Output----- Print a single integer — the length of the longest consecutive sequence of 1s in any direction. -----Examples----- Input 3 5 10001 11111 00001 Output 5 Input 4 4 0110 1111 1101 0110 Output 4 -----Note----- In the first example, the longest consecutive sequence of 1s is along the middle row. In the second example, the longest consecutive sequence of 1s is along a diagonal.","solution":"def max_consecutive_ones(n, m, grid): def count_consecutive_ones(x, y, dx, dy): length = 0 max_length = 0 while 0 <= x < n and 0 <= y < m: if grid[x][y] == \'1\': length += 1 max_length = max(max_length, length) else: length = 0 x += dx y += dy return max_length max_length = 0 # check rows for i in range(n): max_length = max(max_length, count_consecutive_ones(i, 0, 0, 1)) # check columns for j in range(m): max_length = max(max_length, count_consecutive_ones(0, j, 1, 0)) # check diagonals (from top-left to bottom-right) for i in range(n): max_length = max(max_length, count_consecutive_ones(i, 0, 1, 1)) for j in range(1, m): max_length = max(max_length, count_consecutive_ones(0, j, 1, 1)) # check diagonals (from top-right to bottom-left) for i in range(n): max_length = max(max_length, count_consecutive_ones(i, m-1, 1, -1)) for j in range(m-1): max_length = max(max_length, count_consecutive_ones(0, j, 1, -1)) return max_length"},{"question":"Write a function that takes in an integer `n` and returns a list of all the unique pairs `(a, b)` such that `a` and `b` are positive integers, `a < b`, and the product `a * b = n`. The pairs should be returned as a list of tuples, and the list should be sorted in increasing order of `a`. For example: ``` find_pairs(12) should return [(1, 12), (2, 6), (3, 4)] find_pairs(28) should return [(1, 28), (2, 14), (4, 7)] find_pairs(16) should return [(1, 16), (2, 8), (4, 4)] ``` Notes: - If `n` is less than or equal to 1, the function should return an empty list. - Consider the pair `(4, 4)` as valid pairs where `a` equals `b`. - Only positive integers should be considered for `a` and `b`.","solution":"def find_pairs(n): Returns a list of tuples representing pairs (a, b) such that: - a and b are positive integers - a < b - a * b = n - The list is sorted by increasing order of `a`. if n <= 1: return [] pairs = [] for a in range(1, int(n**0.5) + 1): if n % a == 0: b = n // a if a < b: pairs.append((a, b)) elif a == b: pairs.append((a, a)) return pairs"},{"question":"Create a function **count_vowels(s: str) -> int** that takes a string `s` as input and returns the number of vowels (a, e, i, o, u) in the string. # Examples: ```python count_vowels(\\"hello world\\") returns 3 count_vowels(\\"python\\") returns 1 count_vowels(\\"aeiou\\") returns 5 count_vowels(\\"xyz\\") returns 0 ``` # Notes: - The input string `s` will consist of lowercase English letters only. - Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\'.","solution":"def count_vowels(s: str) -> int: Returns the number of vowels in the provided string `s`. vowels = \'aeiou\' count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Write a function that determines whether or not the given year is a leap year - `isLeapYear()` (`is_leap_year()` for Python). A few examples: ``` isLeapYear(2020) == True isLeapYear(2019) == False isLeapYear(2000) == True isLeapYear(1900) == False ``` A leap year is exactly divisible by 4 except for end-of-century years which must be divisible by 400. For example, 2000 is a leap year but 1900 is not.","solution":"def is_leap_year(year): Returns True if the given year is a leap year, False otherwise. A leap year is exactly divisible by 4 except for end-of-century years which must be divisible by 400. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"Create a function that calculates the factorial of a given positive integer. The factorial of a number n is the product of all positive integers less than or equal to n. The function should return 1 if the input is 0 or 1. If the input is not a positive integer, return None. Example: ```python factorial(5) --> 120 # 5*4*3*2*1 = 120 factorial(0) --> 1 # As per the definition of factorial factorial(1) --> 1 # 1! = 1 factorial(-3) --> None # Return None for non-positive integers factorial(\\"NA\\") --> None # Return None for non-integer input ```","solution":"def factorial(n): Calculate the factorial of a given positive integer n. Returns 1 if n is 0 or 1. If n is not a positive integer, return None. if not isinstance(n, int) or n < 0: return None if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"You are given an array A of size N consisting of integers. You need to process Q queries on this array. There are two types of queries: - P X Y: Set the value of A at index X to Y (1-indexed). - S L R: Compute the sum of squares of the elements in the subarray from index L to R (1-indexed). **Input:** The first line of the input contains two space-separated integers N and Q, the size of the array A and the number of queries. The second line contains N space-separated integers denoting the elements of the array A. Each of the next Q lines contains a query, which can be of type P or S. **Output:** For each query of type S, output the sum of squares of the elements in the specified range. **Constraints:** - 1 ≤ N, Q ≤ 100,000 - 1 ≤ Ai, Y ≤ 1,000,000 - 1 ≤ L, R, X ≤ N **Example:** **Input:** ``` 5 4 1 2 3 4 5 S 1 3 P 2 10 S 1 3 S 3 5 ``` **Output:** ``` 14 110 50 ``` **Explanation:** 1. For the first query `S 1 3`, sum of squares of elements in range [1, 2, 3] is 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14. 2. For the second query `P 2 10`, the array becomes [1, 10, 3, 4, 5]. 3. For the third query `S 1 3`, sum of squares of elements in range [1, 2, 3] is 1^2 + 10^2 + 3^2 = 1 + 100 + 9 = 110. 4. For the fourth query `S 3 5`, sum of squares of elements in range [3, 4, 5] is 3^2 + 4^2 + 5^2 = 9 + 16 + 25 = 50.","solution":"def process_queries(N, Q, array, queries): Process the array queries. N - size of the array Q - number of queries array - the initial array of integers queries - the list of queries to be processed Returns a list of results for \\"S\\" type queries. results = [] for query in queries: command = query[0] if command == \'P\': _, X, Y = query array[X-1] = Y elif command == \'S\': _, L, R = query sum_of_squares = sum(array[i]**2 for i in range(L-1, R)) results.append(sum_of_squares) return results"},{"question":"# The Story: Alice is managing a flower shop and needs help calculating the total price for customers. She sells bouquets which have a flat base price but includes extra costs based on additional features like vase, ribbon, and delivery. # Task Overview: You have to write a function that accepts four parameters: * `base_price` is the fixed price for a bouquet. * `vase` is a boolean value that indicates if the customer wants a vase (+4.50). * `ribbon` is a boolean value that indicates if the customer wants a ribbon (+1.25). * `delivery` is a boolean value that indicates if the customer wants delivery (+5.00). The function should calculate and return the total price of the bouquet including all additional features. # Usage Examples: ```python total_price(10.00, True, True, True) 20.75 # The base price is 10.00, vase +4.50, ribbon +1.25, delivery +5.00 total_price(15.00, False, True, False) 16.25 # The base price is 15.00, ribbon +1.25 ``` ```if:csharp Documentation: Kata.TotalPrice Method (Double, Boolean, Boolean, Boolean) Calculates the total price of a bouquet including optional features. Syntax public static double TotalPrice( double base_price, bool vase, bool ribbon, bool delivery ) Parameters base_price Type: System.Double The fixed base price of the bouquet. vase Type: System.Boolean Boolean indicating if the customer opts for a vase. ribbon Type: System.Boolean Boolean indicating if the customer opts for a ribbon. delivery Type: System.Boolean Boolean indicating if the customer opts for delivery. Return Value Type: System.Double A double representing the total price of the bouquet including all optional features. ```","solution":"def total_price(base_price, vase, ribbon, delivery): Calculates the total price of a bouquet including optional features such as vase, ribbon, and delivery. Args: base_price (float): Fixed base price of the bouquet. vase (bool): Whether the customer wants a vase. ribbon (bool): Whether the customer wants a ribbon. delivery (bool): Whether the customer wants delivery. Returns: float: Total price of the bouquet including all additional features. total = base_price if vase: total += 4.50 if ribbon: total += 1.25 if delivery: total += 5.00 return total"},{"question":"Zach is fascinated by number theory and is currently exploring the world of prime numbers. He has stumbled upon an interesting problem and could use your help. You are given an integer array a of length n. Zach wants to determine whether it is possible to remove exactly one element from the array such that the remaining elements form an array where the product of all the elements is a prime number. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Can you help Zach by finding such an element if it exists? -----Input----- The first line of input contains an integer T (1 leq T leq 1000), the number of test cases. T pairs of lines with test case descriptions follow. The first line of a test case description contains a single integer n (2 leq n leq 1000), the length of the array a. The second line of a test case description contains n integers a_i (1 leq a_i leq 1000) which form the array a. -----Output----- For each test case, output \\"Yes\\" if it is possible to remove exactly one element from the array to form an array where the product of all remaining elements is a prime number. If it is possible, also output the index (1-based) of the element to be removed. If it is not possible, output \\"No\\". If there are multiple possible elements to remove, output the index of any such element. You may print \\"Yes\\" or \\"No\\" in any case (for example, \\"YES\\" and \\"yes\\" are both acceptable). -----Example----- Input 3 4 2 3 4 6 3 6 10 15 5 7 9 11 13 17 Output Yes 3 No No -----Note----- In the first example, removing the third element (4) results in the product 2 * 3 * 6 = 36, which is not a prime number, so we need to remove another element. Removing the second element (3), the remaining product is 2 * 4 * 6 = 48, which is not a prime number. However, removing the first element (2), the remaining product is 3 * 4 * 6 = 72, still not a prime number. Finally, removing the fourth element (6), the remaining product is 2 * 3 * 4 = 24, which is not prime either. So removing any element does not give a product that is a prime number. In the second example, no matter which element is removed, the product of the remaining elements will not be a prime. In the third example, removing the first element (7) results in the product 9 * 11 * 13 * 17 = 24309, which is not a prime number. Removing the second element (9), remaining product is 7 * 11 * 13 * 17 = 17017, which is not prime. So removing any element from the array does not permit a product prime number either.","solution":"def is_prime(number): Returns whether a number is a prime number. if number <= 1: return False if number <= 3: return True if number % 2 == 0 or number % 3 == 0: return False i = 5 while i * i <= number: if number % i == 0 or number % (i + 2) == 0: return False i += 6 return True def find_element_to_remove_for_prime_product(arr): Tries to find an element whose removal makes the product of remaining elements a prime number. total_product = 1 for num in arr: total_product *= num for i, num in enumerate(arr): if total_product % num == 0 and is_prime(total_product // num): return i + 1 # Return 1-based index return -1 def solve_prime_product_problem(test_cases): results = [] for n, arr in test_cases: index = find_element_to_remove_for_prime_product(arr) if index != -1: results.append((\\"Yes\\", index)) else: results.append((\\"No\\",)) return results"},{"question":"Write a function that takes an array of integers and returns a new array consisting of all the positive integers in the original array, each replaced by the largest prime factor of that integer. If the integer is negative or zero, the output array should have the integer unchanged at its corresponding index. Examples ``` Input: [10, -7, 15, 0, 33] Output: [5, -7, 5, 0, 11] Input: [20, 25, 77, 8, 100] Output: [5, 5, 11, 2, 5] ```","solution":"import math def largest_prime_factor(n): if n <= 1: return None while n % 2 == 0: max_prime = 2 n //= 2 for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: max_prime = i n //= i if n > 2: max_prime = n return int(max_prime) def replace_with_largest_prime_factor(arr): result = [] for num in arr: if num > 0: result.append(largest_prime_factor(num)) else: result.append(num) return result"},{"question":"Graph Cycle Detection Given a directed graph represented as an adjacency list, determine if the graph contains a cycle. Implement a function that performs the following: * Takes an integer n (the number of nodes) and an adjacency list as input. * Returns a boolean indicating whether the graph contains at least one cycle. As an example: Imagine you have the following directed graph: ``` 0 -> 1 1 -> 2 2 -> 0 3 -> 4 4 -> 5 ``` Which can be represented with the adjacency list: ```python n = 6 adj_list = { 0: [1], 1: [2], 2: [0], 3: [4], 4: [5] } ``` You would need to verify if this graph contains a cycle. In this case, it does because there is a cycle 0 -> 1 -> 2 -> 0. You can use Depth-First Search (DFS) to detect cycles in the graph. Specifically, you can maintain a recursion stack to keep track of the nodes currently in the recursion path. If you find a back edge (an edge that points to a node that is already in the recursion stack), you have detected a cycle. The function prototype would look like this: ```python def contains_cycle(n, adj_list): ``` For example test cases: - contains_cycle(6, {0: [1], 1: [2], 2: [0], 3: [4], 4: [5]}) should return True. - contains_cycle(6, {0: [1], 1: [2], 2: [], 3: [4], 4: [5], 5: []}) should return False. Hint: - Use Depth-First Search (DFS) for cycle detection. - Track the nodes in the current path using a recursion stack. - If you encounter a node that is already in the stack, there is a cycle.","solution":"def contains_cycle(n, adj_list): Returns True if the graph contains at least one cycle, False otherwise. :param n: int, number of nodes :param adj_list: dict, adjacency list of the graph :return: bool, True if cycle exists, False otherwise def dfs(node, visited, rec_stack): # Mark the current node as visited and in recursion stack visited[node] = True rec_stack[node] = True # Recur for all neighbours for neighbour in adj_list.get(node, []): if not visited[neighbour]: # If not yet visited, recurse if dfs(neighbour, visited, rec_stack): return True elif rec_stack[neighbour]: # If visited and in rec_stack -> cycle return True # Remove the node from recursion stack rec_stack[node] = False return False # Mark all nodes as not visited visited = [False] * n rec_stack = [False] * n # Perform DFS from each node to detect cycle for node in range(n): if not visited[node]: # Only start a new DFS if the node has not been visited if dfs(node, visited, rec_stack): return True return False"},{"question":"In a faraway land, the kingdom of Atlantis is famous for its annual water festival. Every year, the royal family organizes a grand series of water fights to determine the strongest warrior in the kingdom. Warriors are assigned into pairs and fight each other, with the winner proceeding to the next round. Each warrior has a strength level, and it\'s the primary factor in determining the winner of a fight. Warriors fight in pairs in the order they\'re currently queued. If there\'s an odd number of warriors, the last warrior gets a bye and proceeds to the next round unchallenged. The winner of each fight is the warrior with the higher strength. The tournament continues until there is only one warrior standing, who is declared the strongest in the kingdom. Given the strength levels of the warriors participating in the tournament, determine the strength of the final winner. -----Input----- First line contains \'T\' which is the number of test cases. For each test case: - The first line contains \'N\', the number of warriors. - The second line contains \'N\' space-separated integers representing the strength levels of the warriors. -----Output----- For each test case, print a single integer: the strength level of the final winner. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100000 - 1 ≤ Strength of each warrior ≤ 100000 -----Example----- Input: 2 5 10 30 20 50 40 4 1 2 3 4 Output: 50 4 -----Explanation----- Example case 1. First round: pairs are (10, 30), (20, 50), warrior 40 gets a bye. Winners are 30 and 50. Remaining warriors are 30, 50, and 40. Second round: pairs are (30, 50), warrior 40 gets a bye. Winner is 50. Remaining warriors are 50 and 40. Final round: pair is (50, 40). Winner is 50. So, the final winner\'s strength is 50. Example case 2. First round: pairs are (1, 2) and (3, 4). Winners are 2 and 4. Final round: pair is (2, 4). Winner is 4. So, the final winner\'s strength is 4.","solution":"def get_strongest_warrior(T, test_cases): Determines the strongest warrior for each test case. Parameters: T (int): The number of test cases. test_cases (list): List of tuples, each containing the number of warriors and their respective strength levels. Returns: list: List of integers representing the strength level of the final winner for each test case. def fight(warriors): while len(warriors) > 1: next_round = [] for i in range(0, len(warriors), 2): if i + 1 < len(warriors): next_round.append(max(warriors[i], warriors[i + 1])) else: next_round.append(warriors[i]) warriors = next_round return warriors[0] results = [] for test_case in test_cases: N, warriors = test_case results.append(fight(warriors)) return results"},{"question":"`Description:` Write a function that accepts a 2D list (matrix) of integers and returns the diagonals of the matrix in a zigzag order. More specifically, starting from the top-left using diagonals from top-down and from left-right. Your function should return a list consisting of numbers as they appear diagonally. A valid matrix will always be provided. For example, if the input is: ```python 1, 2, 3 4, 5, 6 7, 8, 9 ``` The function should return: ```python [1, 2, 4, 7, 5, 3, 6, 8, 9] ``` `Explanation:` ```python 1 # Diagonal 1 2, 4 # Diagonal 2 7, 5, 3 # Diagonal 3 6, 8 # Diagonal 4 9 # Diagonal 5 ``` By following the diagonal order, starting from 1. Diagonal 1 gives [1]. Diagonal 2 gives [2, 4]. Diagonal 3 gives [7, 5, 3]. Diagonal 4 gives [6, 8], and finally, Diagonal 5 gives [9]. `Examples:` ```python diagonalOrder([[1,2,3], [4,5,6], [7,8,9]]) ====> [1, 2, 4, 7, 5, 3, 6, 8, 9] diagonalOrder([[1,2], [3,4], [5,6]]) =======> [1, 2, 3, 5, 4, 6] diagonalOrder([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) ==> [1, 2, 5, 9, 6, 3, 4, 7, 10, 11, 8, 12] diagonalOrder([[5,6], [7,8]]) ===============> [5, 6, 7, 8] diagonalOrder([[1]]) ========================> [1] ```","solution":"from typing import List def diagonalOrder(matrix: List[List[int]]) -> List[int]: if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) result = [] for d in range(rows + cols - 1): if d % 2 == 0: # Collect upward diagonal (bottom to top) r = min(d, rows - 1) c = d - r while r >= 0 and c < cols: result.append(matrix[r][c]) r -= 1 c += 1 else: # Collect downward diagonal (top to bottom) c = min(d, cols - 1) r = d - c while c >= 0 and r < rows: result.append(matrix[r][c]) r += 1 c -= 1 return result"},{"question":"You are managing a project schedule using a Gantt chart where each task has a start time, an end time, and a certain duration it will take to complete. You need to determine the maximum number of tasks that can be completed without any overlap between them. Each task is represented by a tuple (start, end), where `start` is the starting time, and `end` is the ending time. A task can commence at the end time of another task. Write an algorithm to find this maximum number of non-overlapping tasks. # Examples ``` Input: [(1, 3), (2, 4), (3, 5)] Output: 2 Explanation: We can complete the task (1, 3) and the task (3, 5), so the maximum number of tasks is 2. Input: [(5, 9), (1, 2), (3, 7), (4, 6)] Output: 2 Explanation: We can complete the task (1, 2) and the task (5, 9), so the maximum number of tasks is 2. ``` # Function Signature ```python def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int: pass ```","solution":"from typing import List, Tuple def max_non_overlapping_tasks(tasks: List[Tuple[int, int]]) -> int: Returns the maximum number of non-overlapping tasks. # Sort tasks by their end times tasks.sort(key=lambda x: x[1]) # Initialize variables max_tasks = 0 current_end_time = 0 # Iterate over sorted tasks for start, end in tasks: if start >= current_end_time: max_tasks += 1 current_end_time = end return max_tasks"},{"question":"Given an array of integers nums and an integer k, return the maximum possible sum of two distinct elements from the array that adds up to less than k. If no such elements exist, return -1. Example 1: Input: nums = [34, 23, 1, 24, 75, 33, 54, 8], k = 60 Output: 58 Explanation: The sum of the elements 34 and 24 equals 58, which is less than 60. Example 2: Input: nums = [10, 20, 30], k = 15 Output: -1 Explanation: No two elements can be found that add up to less than 15. Constraints: - 1 <= nums.length <= 10^4 - 1 <= nums[i] <= 10^4 - 1 <= k <= 10^4","solution":"def max_sum_less_than_k(nums, k): Returns the maximum possible sum of two distinct elements from the array nums that adds up to less than k. If no such elements exist, return -1. nums.sort() left, right = 0, len(nums) - 1 max_sum = -1 while left < right: current_sum = nums[left] + nums[right] if current_sum < k: max_sum = max(max_sum, current_sum) left += 1 else: right -= 1 return max_sum"},{"question":"Write a function that determines whether a given integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. Negative numbers are not considered palindromes. # Function Signature ```python def is_palindrome(x: int) -> bool: pass ``` # Input - An integer `x`, where -2³¹ ≤ x ≤ 2³¹ - 1 # Output - Return `True` if `x` is a palindrome, and `False` otherwise. # Examples ```python is_palindrome(121) # True is_palindrome(-121) # False is_palindrome(10) # False is_palindrome(0) # True is_palindrome(12321) # True ``` # Note - Input can be negative, but negative numbers should be considered non-palindromic. - You are not allowed to convert the integer into a string to check if it\'s a palindrome. Use mathematical operations instead.","solution":"def is_palindrome(x: int) -> bool: Returns True if the integer x is a palindrome, False otherwise. A palindrome reads the same backward as forward. Negative numbers are not considered palindromes. if x < 0: return False original = x reversed_num = 0 while x != 0: digit = x % 10 reversed_num = reversed_num * 10 + digit x //= 10 return original == reversed_num"},{"question":"#Missing Numbers A local number sequence enthusiast is organizing a competition to find the missing numbers in a sequence. Each participant will be given an array of N integers from 1 to N+K, where K numbers are missing from the array. The challenge is to determine and return the missing numbers in ascending order. #Argument `arr` is an array of integers that represents a sequence from 1 to N+K with K missing numbers. #Return Your function must return an array of integers representing the missing numbers in ascending order. #Examples `findMissingNumbers([1, 3, 4, 6])` returns `[2, 5]` because the numbers 2 and 5 are missing from the sequence 1 to 6. `findMissingNumbers([2, 3, 5, 6, 7, 9, 10])` returns `[1, 4, 8]` because the numbers 1, 4, and 8 are missing from the sequence 1 to 10.","solution":"def findMissingNumbers(arr): Returns the missing numbers in ascending order from the given array. The given array contains numbers from 1 to N+K with K numbers missing. Args: arr: List of integers. Returns: List of missing integers in ascending order. if not arr: return [] N = max(arr) full_set = set(range(1, N + 1)) given_set = set(arr) missing_numbers = sorted(list(full_set - given_set)) return missing_numbers"},{"question":"=====Function Descriptions===== groupby(iterable, key=None) This tool creates an iterator that produces consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified or is None, the key defaults to an identity function and returns the element unchanged. Generally, the iterable needs to be sorted on the same key function, failing which the groups may not give the expected results. Sample Code >>> from itertools import groupby >>> >>> print [(k, list(g)) for k, g in groupby(\'AAAABBBCCDAABBB\')] [(\'A\', [\'A\', \'A\', \'A\', \'A\']), (\'B\', [\'B\', \'B\', \'B\']), (\'C\', [\'C\', \'C\']), (\'D\', [\'D\']), (\'A\', [\'A\', \'A\']), (\'B\', [\'B\', \'B\', \'B\'])] >>> >>> groups = groupby(sorted([1, 2, 2, 3, 1, 3, 2])) >>> for key, group in groups: >>> print key, list(group) 1 [1, 1] 2 [2, 2, 2] 3 [3, 3] =====Problem Statement===== You are given a list of integers. Your task is to group the integers by their value and print a summary of each group, showing the value and the count of integers in that group. =====Input Format===== A single line containing a space-separated list of integers. =====Constraints===== The list will contain at least one integer, and the integers will be non-negative. =====Output Format===== Print each group summary as a line showing the integer value and the count of its occurrences. Sample Input 2 3 3 2 2 1 Sample Output 2 3 3 2 1 1","solution":"from itertools import groupby def group_and_count(integers): Groups the integers by their value and prints a summary of each group, showing the value and the count of integers in that group. Parameters: integers (list of int): A list of integers to be grouped. sorted_integers = sorted(integers) groups = groupby(sorted_integers) for key, group in groups: print(key, len(list(group)))"},{"question":"You are given an n x n chessboard. Each cell on the chessboard can either be empty or contain a unique identifier of a knight represented by integers from 1 to k, where k ≤ n^2. A knight can move in an \\"L\\" shape. Specifically, it can move: - Two cells vertically and one cell horizontally - One cell vertically and two cells horizontally You need to verify if all the knights placed on this chessboard can remain without attacking each other. A knight attacks another knight if it can move to the other knight\'s position using the \\"L\\" shaped movement. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case consists of: - An integer n representing the size of the chessboard. - An integer k representing the number of knights placed on the board. - Next k lines each contain three values: xi, yi, ki which indicates a knight ki is placed on the cell (xi, yi). -----Output----- For each test case, output \\"YES\\" if the knights do not attack each other, otherwise \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - 0 ≤ k ≤ n^2 - 1 ≤ xi, yi ≤ n - 1 ≤ ki ≤ k -----Example----- Input 2 4 2 1 1 1 3 2 2 5 3 1 1 1 1 3 2 4 4 3 Output YES NO -----Explanation----- Example 1: The knights are placed at positions (1,1) and (3,2). Knight at (1,1) can move to (3,2), therefore the answer is \\"NO\\". Example 2: The knights are placed at (1,1), (1,3) and (4,4). None of these knights can attack each other through an \\"L\\" shaped move, hence the answer is \\"YES\\".","solution":"def is_knights_safe(n, k, positions): Determines if all knights are safe from each other according to the rules of chess knight movements. Args: n : int : Size of the chessboard (n x n) k : int : Number of knights on the board positions : List[Tuple[int, int]] : List of tuples representing the positions of knights Returns: str : \\"YES\\" if all knights are safe, otherwise \\"NO\\" knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] knight_positions = set((x, y) for x, y, _ in positions) for x, y, _ in positions: for dx, dy in knight_moves: nx, ny = x + dx, y + dy if (nx, ny) in knight_positions: return \\"NO\\" return \\"YES\\" def knights_test_cases(test_cases): Processes multiple test cases to determine if knights are safe on given chessboards. Args: test_cases : list : List of dictionaries with test case data Returns: list : List of results for each test case results = [] for test_case in test_cases: n = test_case[\'n\'] k = test_case[\'k\'] positions = test_case[\'positions\'] result = is_knights_safe(n, k, positions) results.append(result) return results"},{"question":"Write a function **rotateMatrix** that takes a two-dimensional square matrix (list of lists) and rotates it 90 degrees clockwise in-place. The input matrix will have N rows and N columns, where N is an integer greater than 1. The rotation must be done without using any extra space for another matrix. # Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotateMatrix(matrix) print(matrix) ``` # Expected Output: ```python [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: - Do not return anything, modify the matrix in-place. - Do not use any additional 2D array or list, all rotations should be done in the given matrix itself. - The function should handle matrices of different sizes. ```python def rotateMatrix(matrix): # Your code here ```","solution":"def rotateMatrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in-place. n = len(matrix) # First, transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Then, reverse each row to get the 90 degree rotation for i in range(n): matrix[i].reverse()"},{"question":"Martin is working on a data analysis task and needs help with obtaining some insights from a records log. The log is a list of actions performed by users identified by a unique username and action type. Each user can perform multiple types of actions. The task is to create a summary of the actions for each user, but with a twist: actions should be listed in the order of the total frequency across all users. Given a list of log entries, your objective is to determine the frequency of each action for every user and then sort the actions in descending order based on the overall frequency. If two actions have the same frequency, they should be ordered alphabetically. -----Input:----- - The first line contains an integer N, the number of log entries. - The next N lines each contain a username and an action in the format: \\"username action\\". -----Output:----- - For each user, display their username followed by a list of actions they performed along with the count of each action, sorted by the criteria mentioned above. - The output for each user should start with their username followed by a colon, and then each action and count separated by a space. -----Constraints:----- - 1 leq N leq 10^6 - Each username and action is a string of lowercase English letters and digits, with a maximum length of 20. -----Sample Input:----- 6 alice login bob view alice view alice view bob login charlie view -----Sample Output:----- alice: view 2 login 1 bob: view 1 login 1 charlie: view 1","solution":"def action_summary(log_entries): from collections import defaultdict, Counter user_actions = defaultdict(Counter) overall_action_counts = Counter() for entry in log_entries: if isinstance(entry, str): username, action = entry.split() user_actions[username][action] += 1 overall_action_counts[action] += 1 sorted_actions = sorted(overall_action_counts.items(), key=lambda x: (-x[1], x[0])) output = [] for user, actions in sorted(user_actions.items()): actions_repr = \\" \\".join(f\\"{action} {actions[action]}\\" for action, _ in sorted_actions if action in actions) output.append(f\\"{user}: {actions_repr}\\") return \\"n\\".join(output) log_entries = [\\"alice login\\", \\"bob view\\", \\"alice view\\", \\"alice view\\", \\"bob login\\", \\"charlie view\\"] print(action_summary(log_entries))"},{"question":"Unique Restaurant Orders Imagine you are responsible for tracking orders in a busy restaurant. Each order placed is recorded as a string of items separated by comma `,`. For instance, an order can be `[\\"burger\\", \\"fries\\", \\"soda\\"]`. Sometimes, repeated items in an order might be mistakenly entered multiple times. Your task is to write a function `unique_order` that takes a list of strings, where each string is an order placed by a customer. This function should process each order and return a new list of orders with duplicate items removed and the items sorted lexically. # Input - A list of strings where each string is an order of comma-separated food items. # Output - A list of strings where each string is an order with unique, lexically sorted items. # Example ```python def unique_order(orders): pass # Example Input orders = [\\"burger,fries,soda\\", \\"pizza,pizza,burger\\", \\"soda,burger,fries,fries\\"] # Example Output expected_output = [\\"burger,fries,soda\\", \\"burger,pizza\\", \\"burger,fries,soda\\"] assert unique_order(orders) == expected_output ``` # Explanation For the given list of orders: 1. The first order `[\\"burger,fries,soda\\"]` already has unique items and is in lexical order. 2. The second order `[\\"pizza,pizza,burger\\"]` has a duplicate `\\"pizza\\"` which will be removed, and the remaining items will be sorted lexically to produce `\\"burger,pizza\\"`. 3. The third order `[\\"soda,burger,fries,fries\\"]` has a duplicate `\\"fries\\"` and will be sorted to produce `\\"burger,fries,soda\\"`. Write the code for `unique_order` to complete the challenge.","solution":"def unique_order(orders): Processes each order to remove duplicate items and sort the items lexically. :param orders: A list of strings where each string is an order of comma-separated food items. :return: A list of strings with unique items sorted lexically for each order. result = [] for order in orders: items = order.split(\',\') unique_sorted_items = sorted(set(items)) result.append(\',\'.join(unique_sorted_items)) return result"},{"question":"You are given an array a of length n consisting of distinct integers. Write a program to determine whether it is possible to reorder the array in such a way that the sum of every pair of adjacent elements is a prime number. If it is possible, output the new array. If it is not possible, output -1. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^5). Description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 50) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000). It is guaranteed that the integers in the array are distinct. -----Output----- For each test case, output the reordered array if possible. If there are multiple solutions, you may output any. If it is not possible to reorder the array in such a way, output -1. -----Example----- Input 3 3 2 3 5 4 4 6 8 10 5 1 6 7 10 11 Output 3 2 5 -1 7 10 1 6 11 -----Note----- In the first test case, one possible reordering is [3, 2, 5], since 3 + 2 = 5 (prime), and 2 + 5 = 7 (prime). In the second test case, it is not possible to reorder the array to satisfy the given condition, so the output is -1. In the third test case, one possible reordering is [7, 10, 1, 6, 11], since 7 + 10 = 17 (prime), 10 + 1 = 11 (prime), 1 + 6 = 7 (prime), and 6 + 11 = 17 (prime).","solution":"from itertools import permutations def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_reorder_to_prime_pairs(arr): Check if the array can be reordered such that the sum of every pair of adjacent elements is a prime number. for perm in permutations(arr): if all(is_prime(perm[i] + perm[i + 1]) for i in range(len(perm) - 1)): return list(perm) return -1 def process_test_cases(test_cases): Process multiple test cases and return the results. results = [] for arr in test_cases: results.append(can_reorder_to_prime_pairs(arr)) return results"},{"question":"Tom and Jerry are playing a fun game with numbers. They both form strings by randomly picking digits from a given number, and then compare these strings lexicographically to determine the winner. If Tom\'s string is lexicographically larger, he wins; otherwise, Jerry wins. In case of a tie, they both win. You are given a string of digits `s` and two integer arrays `tom` and `jerry`. The `tom` array contains indices of the digits selected by Tom, and the `jerry` array contains indices of the digits selected by Jerry. The order in which the indices are given in the arrays is the order in which the digits should be picked and compared. Your task is to determine the result of the game and output one of the following: - `Tom wins` if Tom\'s string is lexicographically larger, - `Jerry wins` if Jerry\'s string is lexicographically larger, - `It\'s a tie` if both strings are equal. For example: Given the string `s = \\"58213\\"`, `tom = [1, 3, 0]` and `jerry = [4, 2, 1]`: - Tom picks digits at indices 1, 3, and 0, forming the string \\"821\\" - Jerry picks digits at indices 4, 2, and 1, forming the string \\"312\\" Comparing \\"821\\" and \\"312\\", since \\"821\\" is lexicographically larger, Tom wins. The resulting output should be: `\'Tom wins\'`. Implement the function `game_result(s, tom, jerry)` that returns the appropriate result based on the described rules. ```python def game_result(s, tom, jerry): tom_string = \'\'.join(s[i] for i in tom) jerry_string = \'\'.join(s[i] for i in jerry) if tom_string > jerry_string: return \'Tom wins\' elif tom_string < jerry_string: return \'Jerry wins\' else: return \'It\'s a tie\' ```","solution":"def game_result(s, tom, jerry): tom_string = \'\'.join(s[i] for i in tom) jerry_string = \'\'.join(s[i] for i in jerry) if tom_string > jerry_string: return \'Tom wins\' elif tom_string < jerry_string: return \'Jerry wins\' else: return \'It\'s a tie\'"},{"question":"Jungle Safari Adventure In the heart of the dense jungle, there is a popular safari trail that attracts many adventure enthusiasts. The trail is known for its unique animal sightings and challenging terrains. The safari organizers have decided to create a tally of the number of different animals sighted on various segments of the trail for better data analysis and to enhance the safari experience. Your task is to build a program that processes the animal sighting data and provides useful insights. # Task You are given a list of animal sightings in order of their occurrence on the trail. Each sighting is represented by a string denoting the animal\'s name. Your task is to: 1. Return the count of unique animals sighted in a given list. 2. Return the top `n` most frequently sighted animals along with their respective counts. Write a function `animal_sightings(sightings, n)` that takes in a list of strings `sightings` and an integer `n` as input and returns a tuple of two elements: - The number of unique animals sighted. - A list of the top `n` most frequently sighted animals along with their counts, sorted first by frequency (high to low) and then by lexicographical order in case of ties. # Examples ```python animal_sightings([\\"elephant\\", \\"tiger\\", \\"elephant\\", \\"deer\\", \\"monkey\\", \\"tiger\\", \\"tiger\\", \\"elephant\\"], 2) # => (4, [(\\"elephant\\", 3), (\\"tiger\\", 3)]) animal_sightings([\\"lion\\", \\"cheetah\\", \\"leopard\\", \\"lion\\", \\"leopard\\", \\"leopard\\"], 3) # => (3, [(\\"leopard\\", 3), (\\"lion\\", 2), (\\"cheetah\\", 1)]) ``` # Constraints - `sightings` will have at most 100,000 entries. - Each entry in `sightings` will be a valid string of alphabetic characters, case-sensitive. - The value of `n` will be a positive integer within a realistic range relative to the number of unique animals. Write the function `animal_sightings` to address the above requirements.","solution":"from collections import Counter def animal_sightings(sightings, n): Returns the number of unique animals sighted and the top n most frequently sighted animals with their counts. count_dict = Counter(sightings) unique_animal_count = len(count_dict) # Get the most common n animals, sorted lexicographically in case of ties most_common_sorted = sorted(count_dict.items(), key=lambda x: (-x[1], x[0])) return unique_animal_count, most_common_sorted[:n]"},{"question":"You are given two integer arrays `arr1` and `arr2`, both of which are of different lengths. Write a function that finds the length of the longest common subarray between the two arrays. The subarray elements must be contiguous in both arrays. Function signature: `def find_length_of_LCS(arr1: List[int], arr2: List[int]) -> int:` Example 1: Input: arr1 = [1, 2, 3, 2, 1], arr2 = [3, 2, 1, 4, 7] Output: 3 Explanation: The longest common subarray is [3, 2, 1]. Example 2: Input: arr1 = [0, 1, 1, 1, 1], arr2 = [1, 1, 1, 1, 0] Output: 4 Explanation: The longest common subarray is [1, 1, 1, 1]. Constraints: - The length of arr1 and arr2 will be between 1 and 10^4. - The values of elements in both arrays will be integers within the range [-100, 100].","solution":"from typing import List def find_length_of_LCS(arr1: List[int], arr2: List[int]) -> int: m, b_len = len(arr1), len(arr2) # Initialize a DP table with (m+1) x (b_len+1) dp = [[0] * (b_len + 1) for _ in range(m + 1)] max_len = 0 # Fill the dp table for i in range(1, m + 1): for j in range(1, b_len + 1): if arr1[i - 1] == arr2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) return max_len"},{"question":"Create a function that takes a positive integer n and returns an array of all prime numbers up to n (inclusive). A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 5 is prime because the only ways of writing it as a product, 1 × 5 or 5 × 1, involve 5 itself. Your task is to return a list of primes up to the input number n in ascending order. Examples: ``` Input: 10 Output: [2, 3, 5, 7] Input: 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] ```","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive) using the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) p = 2 while (p * p <= n): if primes[p] == True: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers"},{"question":"Problem Description You are a software engineer working at a logistics company. Your job is to optimize the delivery routes for a fleet of delivery trucks. One of the challenges you face is to calculate the shortest path between various delivery points (represented as nodes) while avoiding certain nodes due to traffic congestion, construction, or other delays. You are given a map of the delivery routes represented as a weighted graph, where nodes represent delivery points, edges represent the roads between them, and weights on the edges represent the travel time between the nodes. # Constraints: - The graph is given as an adjacency list where each node has a list of tuples (neighbor_node, travel_time). - The nodes and edges are directed. - Travel time is a positive integer. - There can be at most 1000 nodes and 10000 edges. # Input: - A dictionary `graph` representing the adjacency list of the graph. - An integer `start` representing the starting node. - An integer `end` representing the destination node. - A list of integers `blocked_nodes` representing the nodes that are to be avoided during the route calculation. # Output: - An integer representing the shortest travel time from the `start` node to the `end` node while avoiding the `blocked_nodes`. If there is no valid path, return `-1`. # Example: ```python graph = { 1: [(2, 5), (3, 10)], 2: [(4, 2)], 3: [(4, 1)], 4: [(5, 7)], 5: [] } start = 1 end = 5 blocked_nodes = [3] shortest_path(graph, start, end, blocked_nodes) # Output: 14 ``` In this example, the shortest path avoids node 3 and goes through 1 -> 2 -> 4 -> 5. # Function Signature: ```python def shortest_path(graph: Dict[int, List[Tuple[int, int]]], start: int, end: int, blocked_nodes: List[int]) -> int: pass ``` # Requirements: 1. **Algorithms:** Use Dijkstra\'s algorithm or A* search to find the shortest path. 2. **Data Structures:** Priority queue (heap), set for blocked nodes. 3. **Edge Cases:** Ensure correct handling when no path exists or the `start` or `end` node is blocked. # Notes: - Carefully consider the algorithm complexity to ensure it runs efficiently within the upper constraints. - You can use Python libraries (such as heapq for priority queues) to assist in the implementation. - Return meaningful output based on the given constraints and blocked nodes.","solution":"import heapq from typing import Dict, List, Tuple def shortest_path(graph: Dict[int, List[Tuple[int, int]]], start: int, end: int, blocked_nodes: List[int]) -> int: if start in blocked_nodes or end in blocked_nodes: return -1 blocked_set = set(blocked_nodes) # Priority queue to store (travel_time, current_node) pq = [(0, start)] visited = set() distances = {start: 0} while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) # If we reach the end node, return the travel time if current_node == end: return current_distance for neighbor, travel_time in graph.get(current_node, []): if neighbor in blocked_set or neighbor in visited: continue new_distance = current_distance + travel_time if new_distance < distances.get(neighbor, float(\'inf\')): distances[neighbor] = new_distance heapq.heappush(pq, (new_distance, neighbor)) # If the end node is not reachable return -1"},{"question":"Write a function `capitalizeSentences` that accepts a string `text` as input, which contains multiple sentences. Each sentence is separated by a period followed by a space. The function should return a new string where the first letter of each sentence is capitalized. For example, `capitalizeSentences(\\"hello world. this is a test. how are you?\\")` should return ``` \\"Hello world. This is a test. How are you?\\" ```","solution":"def capitalizeSentences(text): Returns a new string where the first letter of each sentence is capitalized. Args: text (str): The input string containing multiple sentences. Returns: str: The string with each sentence\'s first letter capitalized. sentences = text.split(\'. \') capitalized_sentences = [sentence.capitalize() for sentence in sentences] return \'. \'.join(capitalized_sentences)"},{"question":"Write a function called `generate_ticket`, which generates a lottery ticket number as a string of 6 digits. The first digit should always be between 1 and 9 (inclusive), and the following 5 digits should be between 0 and 9 (inclusive). Your task is to write a function that accepts a list of existing lottery tickets and generates a new unique ticket number that isn\'t already in the list. To accomplish this, follow these steps: 1. Generate a valid lottery ticket number. 2. Check if the generated number is unique (i.e., not present in the list of existing tickets). 3. If the number is not unique, generate another number and keep checking until you get a unique one. Example: ```python def generate_ticket(existing_tickets): # Your code here existing_tickets = [\\"123456\\", \\"654321\\", \\"111111\\"] new_ticket = generate_ticket(existing_tickets) print(new_ticket) # This should print a unique lottery ticket number. ``` Note: - The list `existing_tickets` will not be empty and will contain only valid 6-digit strings. - You can assume that the list will not contain more than 900,000 tickets, ensuring that there will always be a unique lottery ticket number to generate.","solution":"import random def generate_ticket(existing_tickets): Generates a unique lottery ticket number not present in the list of existing_tickets. The ticket number is a string of 6 digits where the first digit is between 1 and 9 (inclusive), and the following 5 digits are between 0 and 9 (inclusive). existing_set = set(existing_tickets) while True: ticket = str(random.randint(1, 9)) + \'\'.join(str(random.randint(0, 9)) for _ in range(5)) if ticket not in existing_set: return ticket"},{"question":"In a small town called ProbTown, there are two types of magical creatures: Alices and Boblins. Each Alice and Boblin has a distinct level of magical power. When an Alice and a Boblin meet, a magic ritual ensues. The result of this ritual depends on their magical powers: - If the magical power of the Alice is greater than that of the Boblin, then the Alice completely absorbs the Boblin\'s power and increases her own power by the amount of the Boblin\'s power. - If the magical power of the Boblin is greater than that of the Alice, then the Boblin completely absorbs the Alice\'s power and increases his own power by the amount of the Alice\'s power. - If their magical powers are equal, both creatures retain their power and part as friends. Each Alice and Boblin also belongs to a magical school denoted by a level, which is a positive integer. An encounter between an Alice and a Boblin can only occur if they belong to the same magical school. You are given `N` Alices and `M` Boblins, along with their magical power and school levels. Each school level has at least one Alice and one Boblin. Determine the number of Alices who will be left after all possible rituals are performed. # Input - The first line of input contains a single integer `T`, the number of test cases. - Each test case starts with two integers `N` and `M`, the number of Alices and Boblins, respectively. - The next `N` lines describe the Alices. Each line contains two integers `P_i` and `L_i`, the magical power and school level of the ith Alice. - The next `M` lines describe the Boblins in the same format, with two integers `P_j` and `L_j`, the magical power and school level of the jth Boblin. # Output - For each test case, output a single integer: the number of Alices left after all possible rituals are performed. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 1 ≤ P_i, P_j ≤ 100 - 1 ≤ L_i, L_j ≤ 100 It is guaranteed that for every Alice of a given level, there exists at least one Boblin of the same level and vice-versa. # Example Input ``` 2 3 3 10 1 15 2 20 1 5 1 25 2 5 1 2 2 30 3 40 4 10 3 20 4 ``` Output ``` 2 2 ``` Explanation **Case 1:** - Alice 1 (power 10, level 1) vs Boblin 1 (power 5, level 1): Alice 1\'s new power = 15. - Alice 2 (power 15, level 2) vs Boblin 2 (power 25, level 2): Boblin 2\'s new power = 40. - Alice 3 (power 20, level 1) vs Boblin 3 (power 5, level 1): Alice 3\'s new power = 25. Final count of Alices: 2. **Case 2:** - Alice 1 (power 30, level 3) vs Boblin 1 (power 10, level 3): Alice 1\'s new power = 40. - Alice 2 (power 40, level 4) vs Boblin 2 (power 20, level 4): Alice 2\'s new power = 60. Final count of Alices: 2.","solution":"def count_remaining_alices(T, test_cases): results = [] for case in test_cases: N, M, alices, boblins = case alices_dict = {} boblins_dict = {} for power, level in alices: if level not in alices_dict: alices_dict[level] = [] alices_dict[level].append(power) for power, level in boblins: if level not in boblins_dict: boblins_dict[level] = [] boblins_dict[level].append(power) for level in alices_dict.keys(): alice_powers = sorted(alices_dict[level]) boblin_powers = sorted(boblins_dict[level]) alice_index = 0 boblin_index = 0 while alice_index < len(alice_powers) and boblin_index < len(boblin_powers): if alice_powers[alice_index] > boblin_powers[boblin_index]: alice_powers[alice_index] += boblin_powers[boblin_index] del boblin_powers[boblin_index] elif alice_powers[alice_index] < boblin_powers[boblin_index]: boblin_powers[boblin_index] += alice_powers[alice_index] del alice_powers[alice_index] else: alice_index += 1 boblin_index += 1 alices_dict[level] = alice_powers remaining_alices = sum(len(alices) for alices in alices_dict.values()) results.append(remaining_alices) return results # Function to gather and format the input data for the function. def parse_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) current_line = 1 test_cases = [] for _ in range(T): N, M = map(int, input_lines[current_line].split()) current_line += 1 alices = [] for _ in range(N): P_i, L_i = map(int, input_lines[current_line].split()) alices.append((P_i, L_i)) current_line += 1 boblins = [] for _ in range(M): P_j, L_j = map(int, input_lines[current_line].split()) boblins.append((P_j, L_j)) current_line += 1 test_cases.append((N, M, alices, boblins)) return T, test_cases # Example usage and test input_data = 2 3 3 10 1 15 2 20 1 5 1 25 2 5 1 2 2 30 3 40 4 10 3 20 4 T, test_cases = parse_input(input_data) results = count_remaining_alices(T, test_cases) for result in results: print(result)"},{"question":"Write a function that takes an integer `N` and a list of `N` integers and returns a new list with the integers sorted in non-decreasing order. The function should not use any built-in sorting libraries or functions, but instead implement a sorting algorithm such as bubble sort, insertion sort, or selection sort. Examples: 1. Input: `N = 5`, `list = [3, 1, 4, 1, 5]` Output: `[1, 1, 3, 4, 5]` 2. Input: `N = 4`, `list = [10, 3, 2, 7]` Output: `[2, 3, 7, 10]` Note: The sorting algorithm must be implemented manually and should handle input lists of varying lengths and integer values within the constraints of typical integer ranges.","solution":"def bubble_sort(n, arr): Sorts a list of n integers in non-decreasing order using bubble sort algorithm. for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given a binary tree, we want to implement a method to flatten it into a linked list in place. The linked list should use the same TreeNode class, where the right child pointer points to the next node in the list and the left child pointer is always null. The linked list should be in the same order as a pre-order traversal of the binary tree. Specifically, we need to implement the following method: ``` def flatten(root: TreeNode) -> None: # implementation goes here ``` Example 1: Input: root = [1,2,5,3,4,null,6] Output: [1,null,2,null,3,null,4,null,5,null,6] Explanation: The binary tree [1,2,5,3,4,null,6] is flattened to [1,null,2,null,3,null,4,null,5,null,6]. Example 2: Input: root = [] Output: [] Explanation: Given input tree is an empty tree, so output is also an empty list. Example 3: Input: root = [0] Output: [0] Explanation: Given input tree contains only one node, so output is also a single-node list [0]. Constraints: - The number of nodes in the tree is in the range [0, 2000]. - -100 <= Node.val <= 100","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root: TreeNode) -> None: Flatten the tree into a linked list in place. if not root: return # Helper function to flatten the tree def flatten_tree(node): if not node: return None # Flatten the left and right subtrees left_last = flatten_tree(node.left) right_last = flatten_tree(node.right) # If there\'s a left subtree, we shuffle the connections if left_last: left_last.right = node.right node.right = node.left node.left = None # We need to return the \'last\' node after we\'ve flattened return right_last or left_last or node flatten_tree(root)"},{"question":"Design a function `analyze_war_instructions(commands)` that processes a list of commands issued by a general in a strategic war game. Each command instructs a player to move a troop from one point to another or to attack a specific point with a specified force. Your function should evaluate these commands and return a summary of the total number of moves, total number of attacks, points involved in more than one command, and points where attacks occurred. Each command is a string with one of the following formats: - \\"MOVE <source> <destination>\\" - \\"ATTACK <target> <force>\\" Here `<source>`, `<destination>`, and `<target>` are point identifiers (alphanumeric strings) and `<force>` is an integer representing the attacking force. Your function should return a dictionary with the following structure: ```python { \\"total_moves\\": <total number of \\"MOVE\\" commands>, \\"total_attacks\\": <total number of \\"ATTACK\\" commands>, \\"multiple_use_points\\": <list of points (strings) that appear in more than one command>, \\"attack_points\\": <list of points (strings) where attacks occurred> } ``` # Constraints: - Each point identifier consists of lowercase letters and/or digits and has a maximum length of 10. - The force in attack commands is a positive integer less than or equal to 100. - The length of the commands list is between 1 and 100 inclusive. - Each command string length will be less than or equal to 50 characters. # Example: ```python commands = [ \\"MOVE A B\\", \\"ATTACK C 30\\", \\"MOVE C D\\", \\"ATTACK A 20\\", \\"MOVE B C\\" ] analyze_war_instructions(commands) # Expected Output: # { # \'total_moves\': 3, # \'total_attacks\': 2, # \'multiple_use_points\': [\'A\', \'B\', \'C\'], # \'attack_points\': [\'C\', \'A\'] # } ``` # Additional Example: ```python commands = [\\"MOVE X Y\\", \\"ATTACK Z 50\\"] analyze_war_instructions(commands) # Expected Output: # { # \'total_moves\': 1, # \'total_attacks\': 1, # \'multiple_use_points\': [], # \'attack_points\': [\'Z\'] # } ```","solution":"def analyze_war_instructions(commands): Processes a list of commands and returns a summary of moves, attacks, points involved in multiple commands, and points where attacks occurred. total_moves = 0 total_attacks = 0 point_usage = {} attack_points = set() for command in commands: parts = command.split() if parts[0] == \\"MOVE\\": _, source, destination = parts total_moves += 1 point_usage[source] = point_usage.get(source, 0) + 1 point_usage[destination] = point_usage.get(destination, 0) + 1 elif parts[0] == \\"ATTACK\\": _, target, _ = parts total_attacks += 1 point_usage[target] = point_usage.get(target, 0) + 1 attack_points.add(target) multiple_use_points = [point for point, count in point_usage.items() if count > 1] return { \\"total_moves\\": total_moves, \\"total_attacks\\": total_attacks, \\"multiple_use_points\\": multiple_use_points, \\"attack_points\\": list(attack_points) }"},{"question":"# Task Implement a function that takes an array of positive integers and returns the largest possible sum that can be obtained by summing a strictly increasing subsequence of the array. A subsequence is derived from another array by deleting some or none of the elements without changing the order of the remaining elements. # Example For `arr = [4, 6, 1, 3, 8, 4, 6]`, the output should be `18`. One possible strictly increasing subsequence is `[4, 6, 8]` and its sum is `4 + 6 + 8 = 18`. # Input/Output - `[input]` integer array `arr` An array of positive integers, with at least one integer and length up to 1000. - `[output]` an integer The largest possible sum of a strictly increasing subsequence of `arr`.","solution":"def max_increasing_subsequence_sum(arr): Returns the largest possible sum that can be obtained by summing a strictly increasing subsequence of the array. Parameters: arr (list): A list of positive integers. Returns: int: The largest possible sum of a strictly increasing subsequence. n = len(arr) # Initialize dp array where each element is the sum of the subsequence ending at that index dp = arr[:] # Start with each element itself being the max sum at that point for i in range(1, n): for j in range(i): if arr[j] < arr[i]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp) # The maximum value in dp array is the answer"},{"question":"A palindrome is a string that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. For this problem, you will implement a function to determine if a given string is a palindrome. The string will contain only letters (both lowercase and uppercase) and spaces. Your function should ignore spaces and be case-insensitive, but should not modify the original content of the string. Here are some example palindromes and how your function should handle them: ``` \\"A man a plan a canal Panama\\" -> True (ignoring spaces and punctuation, it reads the same forwards and backwards) \\"Racecar\\" -> True (ignoring capitalization, it reads the same forwards and backwards) \\"This is not a palindrome\\" -> False \\"Was it a car or a cat I saw\\" -> True (ignoring spaces and case, it reads the same forwards and backwards) ``` If the string is empty or contains only spaces, it should also be considered a palindrome and return `True`. Implement the function `is_palindrome(s: str) -> bool` that returns `True` if the provided string `s` is a palindrome, and `False` otherwise.","solution":"def is_palindrome(s: str) -> bool: Determine if the given string is a palindrome, ignoring spaces and capitalization. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove spaces and convert to lower case cleaned = \'\'.join(c.lower() for c in s if c.isalnum()) # Compare the cleaned string to its reverse return cleaned == cleaned[::-1]"},{"question":"Write a function that accepts a list of integers and a target number. The function should determine whether any two different numbers in the list add up to the target number. If such a pair exists, return the indices of the two numbers as a tuple. If no such pair exists, return `None`. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: (0, 1) Explanation: Because nums[0] + nums[1] == 9, return (0, 1). Example 2: Input: nums = [1, 2, 3, 4, 5] target = 10 Output: None Explanation: There are no two numbers in the list that add up to 10, so the function returns None. Example 3: Input: nums = [3, 2, 4] target = 6 Output: (1, 2) Explanation: Because nums[1] + nums[2] == 6, return (1, 2).","solution":"def find_two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Parameters: nums (list): List of integers. target (int): Target sum. Returns: tuple: Tuple of indices if such a pair exists, otherwise None. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return None"},{"question":"Given a string representing a sequence of events with timestamps in the format \\"event:time\\" (where \'event\' is a string and \'time\' is represented in seconds), write a function to determine the sequence in which the events occurred. Return a list of events sorted by their timestamps in ascending order. Note: The input string contains multiple events separated by commas. \'event\' contains only lowercase English letters. \'time\' is a positive integer and guaranteed to be unique for each event. There will be at least one event and no more than 10,000 events in the input. Example 1: Input: \\"start:5,cook:10,eat:15,cleanup:20\\" Output: [\\"start\\", \\"cook\\", \\"eat\\", \\"cleanup\\"] Example 2: Input: \\"wake:1,shower:2,breakfast:3,work:4\\" Output: [\\"wake\\", \\"shower\\", \\"breakfast\\", \\"work\\"]","solution":"def sort_events(events): Given a string representing a sequence of events with timestamps in the format \\"event:time\\", this function returns a list of events sorted by their timestamps in ascending order. # Split the input string into pairs of event:time event_pairs = events.split(\',\') # Create a list of tuples where each tuple is (event, time) event_list = [(event.split(\':\')[0], int(event.split(\':\')[1])) for event in event_pairs] # Sort the list of tuples by the time (second element of tuple) sorted_event_list = sorted(event_list, key=lambda x: x[1]) # Extract and return the sorted events return [event for event, _ in sorted_event_list]"},{"question":"Create a function that takes a list of integers, `arr`, and returns a list of integers which contains only the first occurrence of each element from the original array, but orders the elements in descending order based on their frequency in `arr`. If multiple elements have the same frequency, they should appear in ascending order in the result list. # Example ```python frequency_descending([3, 3, 2, 1, 4, 4, 4, 2]) # Returns [4, 2, 3, 1] # 4 appears 3 times, 2 appears 2 times, 3 appears 2 times, 1 appears 1 time frequency_descending([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) # Returns [4, 3, 2, 1] # 4 appears 4 times, 3 appears 3 times, 2 appears 2 times, 1 appears 1 time frequency_descending([5, 5, 4, 6, 6, 6, 7]) # Returns [6, 5, 4, 7] # 6 appears 3 times, 5 appears 2 times, 4 appears 1 time, 7 appears 1 time ``` # Constraints - The input list will have at least one element. - All elements in the input list will be integers.","solution":"def frequency_descending(arr): from collections import Counter # Count the frequency of each number in the array frequency = Counter(arr) # Create a list of (element, frequency) pairs frequency_pairs = list(frequency.items()) # Sort the pairs first by frequency (descending) and then by the element itself (ascending) sorted_frequency_pairs = sorted(frequency_pairs, key=lambda x: (-x[1], x[0])) # Extract only the elements from the sorted pairs result = [element for element, freq in sorted_frequency_pairs] return result"},{"question":"**Array Manipulations** Write a function that performs specific manipulations on a given array. The function should support the following operations: 1. **Rotate Right** Rotate the array to the right by `k` steps. 2. **Rotate Left** Rotate the array to the left by `k` steps. 3. **Reverse** Reverse the order of the array. 4. **Sum Pairs** Create a new array where each element is the sum of consecutive pairs in the original array. If the array has an odd length, the last element should be paired with zero. **Function Signature** ```python def manipulate_array(arr: List[int], operation: str, k: int = 0) -> List[int]: pass ``` **Examples** ```python manipulate_array([1, 2, 3, 4, 5], \\"rotate_right\\", 2) -> [4, 5, 1, 2, 3] manipulate_array([1, 2, 3, 4, 5], \\"rotate_left\\", 2) -> [3, 4, 5, 1, 2] manipulate_array([1, 2, 3, 4, 5], \\"reverse\\") -> [5, 4, 3, 2, 1] manipulate_array([1, 2, 3, 4, 5], \\"sum_pairs\\") -> [3, 7, 5] ``` **Constraints** - The array `arr` will contain integers in the range `[-10^4, 10^4]`. - The length of the array will be in the range `[1, 10^4]`. - The `operation` parameter will be one of `\\"rotate_right\\"`, `\\"rotate_left\\"`, `\\"reverse\\"`, or `\\"sum_pairs\\"`. - The integer `k` will be provided as a non-negative integer when the `operation` is `\\"rotate_right\\"` or `\\"rotate_left\\"`. For other operations, `k` can be ignored.","solution":"from typing import List def manipulate_array(arr: List[int], operation: str, k: int = 0) -> List[int]: n = len(arr) if operation == \\"rotate_right\\": k = k % n return arr[-k:] + arr[:-k] elif operation == \\"rotate_left\\": k = k % n return arr[k:] + arr[:k] elif operation == \\"reverse\\": return arr[::-1] elif operation == \\"sum_pairs\\": result = [] for i in range(0, n, 2): if i + 1 < n: result.append(arr[i] + arr[i + 1]) else: # when length is odd, pair the last element with zero result.append(arr[i]) return result else: raise ValueError(\\"Unsupported operation.\\")"},{"question":"Write a function that takes in a list of student dictionaries and returns the name of the student with the highest average grade. Each dictionary contains the keys \'name\', a string representing the student\'s name, and \'grades\', a list of integers representing the student\'s grades. ```python students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [88, 90, 92]}, {\\"name\\": \\"Bob\\", \\"grades\\": [75, 85, 89]}, {\\"name\\": \\"Charlie\\", \\"grades\\": [95, 97, 99]} ] # The function should return \\"Charlie\\" in this case because Charlie has the highest average grade. def get_top_student(students): # Your code here pass ```","solution":"def get_top_student(students): Returns the name of the student with the highest average grade. Parameters: students (list): A list of dictionaries, where each dictionary contains the keys \'name\' (string) and \'grades\' (list of integers). Returns: str: The name of the student with the highest average grade. if not students: return None def average(grades): return sum(grades) / len(grades) if grades else 0 top_student = max(students, key=lambda student: average(student[\'grades\'])) return top_student[\'name\']"},{"question":"Given an array of integers nums, you are tasked to find the length of the longest contiguous subsequence of unique integers. In other words, you need to identify the longest subarray within which all elements are distinct. Return the length of this longest subarray. Example 1: Input: nums = [4, 2, 1, 6, 5] Output: 5 Explanation: The entire array is unique. Example 2: Input: nums = [4, 2, 1, 2, 5, 6] Output: 4 Explanation: The subarray [2, 1, 2, 5, 6] has a duplicate \'2\', but [1, 2, 5, 6] is the longest subarray with all unique elements. Example 3: Input: nums = [1, 2, 1, 3, 4, 2, 3] Output: 4 Explanation: The subarray [1, 2, 1, 3] has duplicates, but [1, 3, 4, 2] is the longest window with all unique elements. Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000","solution":"def length_of_longest_subarray(nums): Returns the length of the longest contiguous subarray with unique elements. if not nums: return 0 num_set = set() left = 0 max_length = 0 for right in range(len(nums)): while nums[right] in num_set: num_set.remove(nums[left]) left += 1 num_set.add(nums[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an n x n matrix filled with integers where each row is sorted in ascending order from left to right, write a function to return all elements of the matrix in ascending order as a single sorted list. -----Input----- - The first line of the input contains an integer n referring to the number of rows and columns of the square matrix. - The next n lines contain n space-separated integers each, representing the matrix. -----Output----- Print a single line containing n * n space-separated integers in ascending order. -----Constraints----- - 1 le n le 500 - -10^9 le matrix[i][j] le 10^9 -----Example Input----- 3 1 5 9 10 11 13 12 13 15 -----Example Output----- 1 5 9 10 11 12 13 13 15 -----Explanation----- The matrix given is: ``` 1 5 9 10 11 13 12 13 15 ``` The sorted list of all elements is: 1, 5, 9, 10, 11, 12, 13, 13, 15","solution":"def sorted_matrix_elements(matrix): Returns all elements of the matrix in ascending order as a single sorted list. elements = [] for row in matrix: elements.extend(row) elements.sort() return elements # Utility functions to read input in the specified format def read_matrix(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) matrix = [] for i in range(1, n + 1): row = list(map(int, lines[i].split())) matrix.append(row) return matrix def matrix_to_sorted_list_string(matrix): sorted_elements = sorted_matrix_elements(matrix) return \' \'.join(map(str, sorted_elements))"},{"question":"Your task is to implement the function `get_longest_path` which takes a string representing nested folders and files in a Unix-like file system and returns the length of the longest absolute path to a file. The string will be formatted such that: - Folders and files are separated by newline characters (`n`). - Nested folders or files are indicated by leading tab characters (`t`). A file is considered a sequence with a `.` character in it, and folders do not contain a `.` character. If there are no files in the provided string, return 0. Example: ```python input_string = \\"dirntsubdir1ntsubdir2nttfile.ext\\" # The longest path is \\"dir/subdir2/file.ext\\", and its length is 20 input_string2 = \\"dirntsubdir1nttfile1.extntsubdir2nttsubsubdir1ntttfile2.ext\\" # The longest path is \\"dir/subdir2/subsubdir1/file2.ext\\", and its length is 32 print(get_longest_path(input_string)) => 20 print(get_longest_path(input_string2)) => 32 ``` ___Notes:___ * The provided string will always represent a valid Unix-like file system. * You may assume that folder and file names will only contain alphanumeric characters and dot characters. * There will always be at least one folder in the string.","solution":"def get_longest_path(input_string): Returns the length of the longest absolute path to a file in a Unix-like file system represented by the input string. max_length = 0 path_lengths = {0: 0} # Dict to store the current length at each directory level for line in input_string.split(\'n\'): name = line.lstrip(\'t\') # Get the folder/file name by stripping leading tabs level = len(line) - len(name) # The level of the current name is the count of leading tabs if \'.\' in name: # It\'s a file max_length = max(max_length, path_lengths[level] + len(name)) else: # It\'s a directory path_lengths[level + 1] = path_lengths[level] + len(name) + 1 # Include \'/\' in length return max_length"},{"question":"Task: Write a function `maximum_product` that receives a list of integers and returns the maximum product of two distinct elements in the list. # Rules/Notes: * If the list has fewer than 2 elements, it should return `None`. * The function should handle both positive and negative integers. * The list should contain at least two distinct elements. # Examples: * `maximum_product([1, 2, 3, 4])` should return `12` (4 * 3) * `maximum_product([-10, -20, 5, 3, -1])` should return `200` (-10 * -20) * `maximum_product([0, 4, 3, 2])` should return `12` (4 * 3) * `maximum_product([1])` should return `None` # Hint: * You can sort the list to find the largest and second largest numbers. * Consider edge cases involving negative numbers.","solution":"def maximum_product(nums): Returns the maximum product of two distinct elements from the list nums. If the list has fewer than two elements, it returns None. if len(nums) < 2: return None nums.sort() # The maximum product can be either from the two largest numbers # or from the two smallest numbers (which might be negative) return max(nums[0] * nums[1], nums[-1] * nums[-2])"},{"question":"Write a function, `merge_sorted_arrays`, that takes two sorted arrays of integers and merges them into one sorted array. The input arrays might have different lengths, and you should not use any built-in sort functions. The resulting array should maintain the sorted order. Examples: ``` merge_sorted_arrays([1, 3, 5], [2, 4, 6]) should return [1, 2, 3, 4, 5, 6] merge_sorted_arrays([1, 2, 3], [4, 5, 6]) should return [1, 2, 3, 4, 5, 6] merge_sorted_arrays([10, 20], [5, 15, 25]) should return [5, 10, 15, 20, 25] merge_sorted_arrays([], [1, 2, 3]) should return [1, 2, 3] ``` Constraints: - Each integer in the input arrays is between `-10^9` and `10^9`. - The arrays can have up to 100,000 elements each. - The function should handle edge cases of empty arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Args: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: The merged sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 or arr2 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Given an integer array A of length N, return a new array B where B[i] is the sum of all the elements of A except A[i]. You must solve it without using division and in O(N) time complexity. -----Input----- The first line contains an integer T denoting the number of test cases. Each of the following T lines contains the value of N and then N integers denoting the elements of the array A. -----Output----- For each test case, output a single line containing the elements of the array B separated by spaces. -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 10^5 - -10^4 ≤ A[i] ≤ 10^4 -----Example----- Input: 2 4 1 2 3 4 3 5 6 7 Output: 9 8 7 6 13 12 11 -----Explanation----- First Example: The array A is [1, 2, 3, 4]. B[0] = 2 + 3 + 4 = 9 B[1] = 1 + 3 + 4 = 8 B[2] = 1 + 2 + 4 = 7 B[3] = 1 + 2 + 3 = 6 So the array B is [9, 8, 7, 6]. Second Example: The array A is [5, 6, 7]. B[0] = 6 + 7 = 13 B[1] = 5 + 7 = 12 B[2] = 5 + 6 = 11 So the array B is [13, 12, 11].","solution":"def array_transform(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] total_sum = sum(A) B = [total_sum - x for x in A] result.append(B) return result"},{"question":"We have a list of words and an integer k. A word is considered \\"beautiful\\" if it can form a substring of itself that is a palindrome of at least length k. Write a function that returns the list of \\"beautiful\\" words from the given list. A palindrome is a string that reads the same backward as forward. Function Signature: `def find_beautiful_words(words: List[str], k: int) -> List[str]:` # Example ``` Input: words = [\\"racecar\\", \\"radar\\", \\"helix\\", \\"refer\\"], k = 3 Output: [\\"racecar\\", \\"radar\\", \\"refer\\"] Explanation: - \\"racecar\\" contains \\"cec\\" and \\"aceca\\" which are palindromes of length >= 3. - \\"radar\\" contains \\"ada\\" which is a palindrome of length >= 3. - \\"helix\\" does not contain any palindrome substring of length >= 3. - \\"refer\\" contains \\"efe\\" which is a palindrome of length >= 3. ``` # Constraints - 1 <= words.length <= 10^5 - 1 <= words[i].length <= 100 - 1 <= k <= 100","solution":"from typing import List def is_palindrome(s: str) -> bool: return s == s[::-1] def find_beautiful_words(words: List[str], k: int) -> List[str]: beautiful_words = [] for word in words: found = False for i in range(len(word) - k + 1): for j in range(i + k, len(word) + 1): if is_palindrome(word[i:j]): beautiful_words.append(word) found = True break if found: break return beautiful_words"},{"question":"Write a function that takes a string representing a binary number and returns its equivalent decimal number. The function should handle both positive and negative binary numbers. The input string will either start with a \'0\' or \'1\' for positive numbers, or a \'-\' for negative numbers. Examples: ```python binary_to_decimal(\\"1101\\") = 13 binary_to_decimal(\\"0\\") = 0 binary_to_decimal(\\"-1101\\") = -13 ``` More examples in test cases. Good luck! Please also try: [Text align justify](https://www.codewars.com/kata/537e18b6147aa838f600001b)","solution":"def binary_to_decimal(binary_str): Converts a binary string to its equivalent decimal number. Handles both positive and negative binary numbers. Args: binary_str (str): A string representing a binary number, starting with \'0\' or \'1\' for positive numbers, or \'-\' for negative numbers. Returns: int: The decimal equivalent of the binary number. if binary_str[0] == \'-\': return -int(binary_str[1:], 2) return int(binary_str, 2)"},{"question":"Given a string that represents a chemical formula (like \\"H2O\\", \\"Mg(OH)2\\", or \\"K4[ON(SO3)2]2\\"), write a function `parse_formula` that takes this string as input and returns a dictionary with the count of each atom in the molecule. The characters within the formula are only uppercase and lowercase English letters, digits, parentheses, and square brackets. The chemical elements are represented by uppercase and lowercase English letters. The nested parts of the formula enclosed in parentheses or square brackets can have coefficients indicating the number of times the entire enclosed group repeats. The coefficients can be positioned right after an element or after a closing bracket/parenthesis. For example: - `\\"H2O\\"` should output `{\\"H\\": 2, \\"O\\": 1}` - `\\"Mg(OH)2\\"` should output `{\\"Mg\\": 1, \\"O\\": 2, \\"H\\": 2}` - `\\"K4[ON(SO3)2]2\\"` should output `{\\"K\\": 4, \\"O\\": 14, \\"N\\": 2, \\"S\\": 4}` Make sure your function properly handles nested groups of atoms. --- __N.B.__: It is guaranteed that the input string is valid and well-formed according to the rules of chemical formulas (i.e., matching parentheses and brackets, meaningful coefficients, etc.).","solution":"import re from collections import defaultdict def parse_formula(formula): Parse the chemical formula and return a dictionary with the count of each atom. def multiply_counts(molecule_counts, multiplier): for atom in molecule_counts: molecule_counts[atom] *= multiplier return molecule_counts def merge_counts(count1, count2): result = defaultdict(int, count1) for atom, count in count2.items(): result[atom] += count return result def parse_segment(segment): atom_counts = defaultdict(int) stack = [] i = 0 while i < len(segment): if segment[i] == \'(\' or segment[i] == \'[\': stack.append((atom_counts, i)) atom_counts = defaultdict(int) i += 1 elif segment[i] == \')\' or segment[i] == \']\': i += 1 start_atom_counts, start_index = stack.pop() multiplier = 1 if i < len(segment) and segment[i].isdigit(): match = re.match(r\'d+\', segment[i:]) multiplier = int(match.group()) i += len(match.group()) atom_counts = multiply_counts(atom_counts, multiplier) atom_counts = merge_counts(start_atom_counts, atom_counts) else: match = re.match(r\'[A-Z][a-z]*\', segment[i:]) element = match.group() i += len(element) count = 1 if i < len(segment) and segment[i].isdigit(): match = re.match(r\'d+\', segment[i:]) count = int(match.group()) i += len(match.group()) atom_counts[element] += count return atom_counts return parse_segment(formula)"},{"question":"Write a function that receives an integer array as input and returns a new array containing only the unique elements, i.e., removes any duplicates. The order of elements in the returned array should be the same as their first occurrence in the input array. Assume: The input array contains integers within the range `-100000 <= array[i] <= 100000`. Examples: ``` Input: [1, 2, 3, 1, 2, 4] Output: [1, 2, 3, 4] Input: [10, 20, 10, 30, 20, 40, 30] Output: [10, 20, 30, 40] Input: [5, 5, 5, 5, 5] Output: [5] Input: [] Output: [] ```","solution":"def remove_duplicates(arr): This function receives an integer array as input and returns a new array containing only the unique elements, maintaining the order of their first occurrence. seen = set() unique_arr = [] for num in arr: if num not in seen: seen.add(num) unique_arr.append(num) return unique_arr"},{"question":"You\'re given an array `arr` which contains integers and another integer `threshold`. Your task is to write a function `filter_array(arr, threshold)` that returns a new array containing only those elements from `arr` that are greater than the given `threshold`. Your implementation should maintain the original order of elements from `arr`. # Example: ```python def filter_array(arr, threshold): # Your code here # Example test cases print(filter_array([1, 5, 8, 3, 10, 2], 5)) # Output: [8, 10] print(filter_array([7, 3, 9, 4], 4)) # Output: [7, 9] print(filter_array([10, 20, 30], 25)) # Output: [30] ``` In the example test cases: - For the input `[1, 5, 8, 3, 10, 2]` and `threshold` value `5`, elements greater than `5` are `[8, 10]`. - For the input `[7, 3, 9, 4]` and `threshold` value `4`, elements greater than `4` are `[7, 9]`. - For the input `[10, 20, 30]` and `threshold` value `25`, elements greater than `25` are `[30]`.","solution":"def filter_array(arr, threshold): Filters the array to include only elements greater than the specified threshold. Parameters: arr (list of int): The input list of integers. threshold (int): The threshold value. Returns: list of int: A new list with elements from the input list that are greater than the threshold. return [x for x in arr if x > threshold]"},{"question":"# Idea Certain patterns can be extracted from arrays where each sub-array contains tuples of number pairs. For example, given an array `[(1, 3), (2, 4), (3, 5), (1, 6)]`, it\'s possible to find a possible range of each pair of numbers. ___ # Task You will receive an array of sub-arrays (or tuples) with each containing exactly two integer numbers in a format of tuples: ``` input_array = [(1, 3), (2, 4), (3, 5), (1, 6)] ``` You are required to find the minimum and maximum values of the tuples and return as another tuple. ```python Example: input_array = [(1, 3), (2, 4), (3, 5), (1, 6)] output: (1, 6) ``` ___ # Notes * The function should handle positive integers only and at least one tuple in the input array will contain values. * You do not need to handle file input/output, just return the result as a tuple.","solution":"def find_min_max(input_array): Returns the minimum and maximum values found in the list of tuples. if not input_array: return (None, None) # Flatten the list of tuples and convert it into a single list of numbers all_numbers = [num for pair in input_array for num in pair] # Find the minimum and the maximum value in the list min_value = min(all_numbers) max_value = max(all_numbers) return (min_value, max_value)"},{"question":"To help viewers organize their movie collection, you need to write a program to categorize movies based on their genre and release year. Each movie has a title, genre, and release year. Your task is to sort the movies first by their genre in alphabetical order, and then by their release year in ascending order within each genre. Display the sorted movie collection grouped by genre. -----Input:----- - First-line will contain N, the number of movies. - The next N lines will each contain three items separated by a space: the movie title (a string without spaces), the genre (a string without spaces), and the release year (an integer). -----Output:----- For each genre group, output the genre followed by a list of movies in that genre sorted by their release year. Each movie should be displayed on a new line with the format \\"Title (Year)\\". -----Constraints----- - 1 leq N leq 100 - Title strings and genre strings will not contain spaces and will have a maximum length of 50 characters. - Release year will be an integer between 1900 and 2022. -----Sample Input:----- 4 Inception SciFi 2010 Avatar SciFi 2009 Titanic Romance 1997 Interstellar SciFi 2014 -----Sample Output:----- Romance Titanic (1997) SciFi Avatar (2009) Inception (2010) Interstellar (2014) -----EXPLANATION:----- The movies are first categorized by their genres. Within each genre, movies are sorted by their release year in ascending order.","solution":"def categorize_movies(N, movies): from collections import defaultdict # Create a dictionary where the key is the genre and the value is a list of tuples (title, year) movie_dict = defaultdict(list) for movie in movies: title, genre, year = movie.split() year = int(year) movie_dict[genre].append((title, year)) # Sort the genres alphabetically sorted_genres = sorted(movie_dict.keys()) result = [] for genre in sorted_genres: result.append(genre) # Sort the movies within the genre by year sorted_movies = sorted(movie_dict[genre], key=lambda x: x[1]) for title, year in sorted_movies: result.append(f\\"{title} ({year})\\") return result # Example of the function in action N = 4 movies = [ \\"Inception SciFi 2010\\", \\"Avatar SciFi 2009\\", \\"Titanic Romance 1997\\", \\"Interstellar SciFi 2014\\" ] print(\\"n\\".join(categorize_movies(N, movies)))"},{"question":"You are given a list of strings consisting of lower case English letters, and you are tasked with finding the longest common substring among all the strings in the given list. A substring is a contiguous sequence of characters within a string. The common substring is a sequence that appears in all the provided strings. If there are multiple longest common substrings of the same length, return the one which appears first in the first string. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the number of strings. Each of the next n lines contains a single string of lower case English letters. The lengths of the strings are not greater than 1000. -----Output----- Output the longest common substring among all the strings. If there is no common substring, output an empty string. -----Examples----- Input 3 ababc babca abcba Output abc Input 2 abcd efgh Output","solution":"def longest_common_substring(strings): Returns the longest common substring among the provided list of strings. # If no strings were provided, return an empty string if not strings: return \\"\\" # Initialize the longest common substring as an empty string lcs = \\"\\" # Take the first string as the reference string reference = strings[0] ref_len = len(reference) # Iterate through every possible substring of the reference string for i in range(ref_len): for j in range(i + 1, ref_len + 1): # Extract the substring candidate = reference[i:j] # Check if this candidate substring is present in all other strings if all(candidate in string for string in strings): # If this candidate is longer than the current longest, update it if len(candidate) > len(lcs): lcs = candidate return lcs"},{"question":"Write a function `split_string` that takes a string and splits it into pairs of two characters. If the string contains an odd number of characters, then it should replace the missing second character of the final pair with an underscore (\'_\'). For example: ```python split_string(\'abc\') # returns [\'ab\', \'c_\'] split_string(\'abcdef\') # returns [\'ab\', \'cd\', \'ef\'] split_string(\'\') # returns [] ``` - Input will be a non-null string. - Output should be a list of strings, each 2 characters long except possibly the last one.","solution":"def split_string(s): Splits the string into pairs of two characters. If the string has an odd number of characters, the final pair should end with an underscore (\'_\'). result = [] for i in range(0, len(s), 2): pair = s[i:i+2] if len(pair) == 1: pair += \'_\' result.append(pair) return result"},{"question":"Polycarp recently became interested in number theory. He decided to investigate the notion of prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Polycarp is curious, given an integer sequence, how many elements in the sequence are prime numbers. To help Polycarp, write a program that determines the number of prime numbers in a given sequence of integers. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 1000) — the number of elements in the sequence. The second line contains n integers, each representing an element in the sequence. Each integer in the sequence is guaranteed to be between 1 and 10^6 (inclusive). -----Output----- For each test case, print a single integer — the number of prime numbers in the given sequence. -----Example----- Input 4 5 2 3 4 5 6 3 1 2 3 6 8 9 10 11 12 13 4 14 15 16 17 Output 3 2 2 1 -----Note----- In the first test case, the prime numbers in the sequence are 2, 3, and 5. In the second test case, the prime numbers are 2 and 3. In the third test case, the prime numbers are 11 and 13. In the fourth test case, the prime number is 17.","solution":"def is_prime(number): if number <= 1: return False if number == 2: return True if number % 2 == 0: return False i = 3 while i * i <= number: if number % i == 0: return False i += 2 return True def count_prime_numbers(test_cases): results = [] for test in test_cases: n, sequence = test prime_count = sum(is_prime(num) for num in sequence) results.append(prime_count) return results"},{"question":"You are given a string consisting of only lowercase letters. Your task is to find the length of the longest substring without repeating characters. Implement a function that takes in a string and returns the length of the longest substring with all unique characters. **Function Signature:** ```python def longest_unique_substring(s: str) -> int: pass ``` **Examples:** 1. Input: `\\"abcabcbb\\"` | Output: `3` | Explanation: The answer is `\\"abc\\"`, with the length of `3`. 2. Input: `\\"bbbbb\\"` | Output: `1` | Explanation: The answer is `\\"b\\"`, with the length of `1`. 3. Input: `\\"pwwkew\\"` | Output: `3` | Explanation: The answer is `\\"wke\\"`, with the length of `3`. **Constraints:** - The input string `s` will contain only lowercase letters (`a`-`z`). - The length of the input string `s` will be between `1` and `1000`.","solution":"def longest_unique_substring(s: str) -> int: Finds the length of the longest substring without repeating characters. char_map = {} start = 0 max_length = 0 for end in range(len(s)): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Alice and Bob are playing a game with an array of integers. The game works as follows: Alice picks one sub-array any length L from the array and Bob picks another sub-array of the same length L that doesn\'t overlap with Alice\'s sub-array. Both players sum the elements in their respective sub-arrays and the player with the maximum sum wins. If both their sums are equal, it\'s a tie. Your task is to help Alice determine if she can always find a sub-array such that her sum is greater than Bob\'s sum, irrespective of the sub-array Bob picks. -----Input----- The first line of input contains a single integer T, the number of test cases. Each of the following T lines contains two space-separated integers N and L, followed by N space-separated integers representing the array. -----Output----- For each test case, output \\"YES\\" if Alice can always find a sub-array such that she wins, otherwise output \\"NO\\". -----Constraints----- 1 ≤ T ≤ 10 2 ≤ N ≤ 100000 1 ≤ L ≤ N/2 -10^4 ≤ Array elements ≤ 10^4 -----Example----- Input: 2 5 2 1 2 3 4 5 4 2 1 1 1 1 Output: YES NO -----Explanation----- For the first test case: Alice can choose the sub-array [4, 5], which sums to 9. Bob can choose any sub-array of length 2, but their sum cannot exceed 7 (the next highest possible sum). Therefore, Alice will always win. For the second test case: No matter which sub-array Alice chooses, Bob can always choose a non-overlapping sub-array with the same sum, so Alice cannot guarantee a win, resulting in a \\"NO\\" outcome.","solution":"def can_alice_always_win(T, test_cases): results = [] for case in test_cases: N, L, array = case prefix_sums = [0] * (N + 1) for i in range(N): prefix_sums[i+1] = prefix_sums[i] + array[i] max_subarray_sum = float(\'-inf\') min_subarray_sum = float(\'inf\') for i in range(N - L + 1): subarray_sum = prefix_sums[i + L] - prefix_sums[i] if i + L <= N / 2: min_subarray_sum = min(min_subarray_sum, subarray_sum) else: max_subarray_sum = max(max_subarray_sum, subarray_sum) if max_subarray_sum > min_subarray_sum: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function ```compressString(s)``` that compresses a given string by using the counts of repeated characters. The function should return the compressed version if it is shorter than the original string; otherwise, it should return the original string. For example: ```compressString(\\"aabcccccaaa\\")``` --> \\"a2b1c5a3\\" ```compressString(\\"abcdef\\")``` --> \\"abcdef\\"","solution":"def compressString(s): Compresses a string using the counts of repeated characters. If the compressed version is not shorter, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1]) compressed.append(str(count)) count = 1 # Append the last set of characters compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"A company wants to filter employees based on their working hours. Each employee works for a certain number of hours per week, and the company has established a threshold of required hours that employees must meet or exceed. Develop a function to decide for each employee whether they meet this threshold. -----Input:----- - The first line contains an integer n, the number of employees. - The second line contains n integers, where each integer represents the number of hours worked by an employee in a week. - The third line contains an integer h, the minimum number of required working hours per week. -----Output:----- For each employee, output \\"Yes\\" if the employee works at least h hours per week, otherwise output \\"No\\". -----Constraints----- - 1 leq n leq 10^5 - 1 leq text{hours worked by any employee} leq 10^5 - 1 leq h leq 10^5 -----Sample Input:----- 5 40 50 35 45 60 40 -----Sample Output:----- Yes Yes No Yes Yes -----EXPLANATION:----- For the sample input provided: - The first employee works 40 hours, which is equal to the threshold, so the output is \\"Yes\\". - The second employee works 50 hours, which is greater than the threshold, so the output is \\"Yes\\". - The third employee works 35 hours, which is less than the threshold, so the output is \\"No\\". - The fourth employee works 45 hours, which is greater than the threshold, so the output is \\"Yes\\". - The fifth employee works 60 hours, which is greater than the threshold, so the output is \\"Yes\\".","solution":"def filter_employees(hours, threshold): Determines whether each employee works at least the threshold number of hours. Parameters: hours (list): A list of integers representing hours worked by each employee. threshold (int): The minimum required working hours per week. Returns: list: A list of \\"Yes\\" or \\"No\\" for each employee. return [\\"Yes\\" if hour >= threshold else \\"No\\" for hour in hours]"},{"question":"# Task Given a string representing the order of books in a shelf, check if the shelf is alphabetically sorted or not. # Example For `s = \\"aBcdEfGh\\"`, the output should be `true`. For `s = \\"bAcDeFgH\\"`, the output should be `false`. # Input/Output - `[input]` string `s` A string with lower case and upper case letters representing books in the shelf. - `[output]` a boolean value `true` if the string is alphabetically sorted, `false` otherwise.","solution":"def is_alphabetically_sorted(s): Check if the given string `s` is alphabetically sorted (case insensitive). :param s: str - The string representing the order of books in a shelf. :return: bool - True if the string is alphabetically sorted, False otherwise. # Convert string to lower case to perform case insensitive comparison s_lower = s.lower() # Compare each character with the next one for i in range(len(s_lower) - 1): if s_lower[i] > s_lower[i + 1]: return False return True"},{"question":"Task You are given a grid `m x n` representing an image. Each cell in the grid contains an integer representing the pixel value. A pixel is a 4-directionally connected group of cells with the same value. Write a function to flip the image vertically. This means that if you draw a horizontal line in the middle of the grid, all pixels above the line should get swapped with the pixels in the corresponding position below the line. Return the modified grid after vertically flipping the image. **Function signature:** ```python def flip_vertical_axis(grid: List[List[int]]) -> List[List[int]]: pass ``` **Input:** - A list of lists of integers `grid`, representing the image. **Output:** - A list of lists of integers, representing the image after it has been vertically flipped. **Example:** ```python grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] flip_vertical_axis(grid) => [ [7, 8, 9], [4, 5, 6], [1, 2, 3] ] ``` Another example: ```python grid = [ [1, 1, 1], [0, 0, 0] ] flip_vertical_axis(grid) => [ [0, 0, 0], [1, 1, 1] ] ``` **Constraints:** - `m` and `n` are less than or equal to `1000`. - Each value in `grid` is an integer where `-10^4 <= value <= 10^4`. Be sure you test the example inputs to verify your implementation.","solution":"from typing import List def flip_vertical_axis(grid: List[List[int]]) -> List[List[int]]: This function flips the image (grid) vertically. m = len(grid) for i in range(m // 2): grid[i], grid[m - i - 1] = grid[m - i - 1], grid[i] return grid"},{"question":"Farmer John has a rectangular grid of dimensions n times m where each cell may contain a cow. The cows in the grid can be quite rowdy, and they sometimes form alliances to stand together in clusters. Cows are considered to share a cluster if they are adjacent to each other. Two cows are adjacent if they share a side. That is, cows in neighboring cells to the north, south, east, or west are adjacent. Each cell in the grid contains either a cow (\'C\') or is empty (\'.\'). Your goal is to determine the number of distinct clusters of cows in the grid. -----Input----- The first line contains two integers n and m (1 le n, m le 1000), the dimensions of the grid. Each of the following n lines contains exactly m characters, each one representing a cell in the grid (\'C\' for a cow and \'.\' for an empty cell). -----Output----- Output a single integer, the number of distinct clusters of cows. -----Examples----- Input 4 5 C.C.C .CC.. ..C.C C...C Output 5 Input 3 3 CCC C.C CCC Output 1 -----Note----- In the first example, there are 5 cow clusters spread across the grid: 1. The cows in cells (1,1) and (1,3) are isolated. 2. The cows in cells (1,5). 3. The cows in cells (2,2) and (2,3) form a cluster. 4. The cows in cell (3,3). 5. The cows in cells (3,5) and (4,1) are isolated clusters. In the second example, all cows form a single large cluster since each cow is connected through adjacent cells. The primary concept tested is a common graph traversal problem — identifying connected components in a grid.","solution":"def number_of_clusters(n, m, grid): def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] != \'C\': return grid[i][j] = \'.\' # Mark the cell as visited by converting \'C\' to \'.\' for direction in directions: ni, nj = i + direction[0], j + direction[1] dfs(ni, nj) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right clusters = 0 for i in range(n): for j in range(m): if grid[i][j] == \'C\': dfs(i, j) clusters += 1 return clusters"},{"question":"# Catering to Coffee Lovers You are a developer for a new coffee shop management system. The coffee shop sells various types of coffee drinks, each having a different price. You need to write a function that helps the cashier quickly calculate the total cost for an order. # Task Given a list of coffee drink orders and their respective prices, calculate and return the total cost of the order rounded to two decimal places. # Function Signature ```python def calculate_total_order(drink_prices: dict, order: list) -> float: pass ``` # Input - `drink_prices` is a dictionary where the keys are the names of the coffee drinks (strings) and the values are their prices (floats). - `order` is a list of strings where each string is the name of a coffee drink. # Output - Return a float representing the total cost of the order rounded to two decimal places. # Example Input ```python drink_prices = { \\"Espresso\\": 2.50, \\"Latte\\": 3.50, \\"Cappuccino\\": 3.00, \\"Mocha\\": 4.00 } order = [\\"Espresso\\", \\"Latte\\", \\"Mocha\\"] ``` Output ```python 10.00 ``` Explanation The total cost will be `2.50 (Espresso) + 3.50 (Latte) + 4.00 (Mocha) = 10.00`","solution":"def calculate_total_order(drink_prices: dict, order: list) -> float: Calculate the total cost of the coffee order. :param drink_prices: Dictionary mapping drink names to prices. :param order: List of strings representing the coffee drinks ordered. :return: Total cost of the order rounded to two decimal places. total_cost = sum(drink_prices[drink] for drink in order) return round(total_cost, 2)"},{"question":"=====Function Descriptions===== datetime.datetime.strptime The method strptime() creates a datetime object from a given string format. It\'s used to parse a string representing a time according to a format. Example Code >>> from datetime import datetime >>> >>> date_str = \'20/11/1990\' >>> format_str = \'%d/%m/%Y\' >>> >>> datetime_obj = datetime.strptime(date_str, format_str) >>> >>> print(datetime_obj) 1990-11-20 00:00:00 =====Problem Statement===== You are given a list of N strings representing dates in the format DD/MM/YYYY. Your task is to sort this list of dates in ascending order and print them in the format YYYY-MM-DD. =====Input Format===== The first line contains the number of dates, N. The next N lines contain the dates in the format DD/MM/YYYY. =====Constraints===== 0 < N ≤ 100 =====Output Format===== Print the sorted list of dates, each in a new line in the format YYYY-MM-DD. Example Input 5 12/05/2021 23/12/1999 10/08/2010 04/04/2004 01/01/2020 Output 1999-12-23 2004-04-04 2010-08-10 2020-01-01 2021-05-12","solution":"from datetime import datetime def sort_dates(date_list): Sorts a list of date strings in ascending order and returns them in the format YYYY-MM-DD. Args: date_list: List of date strings in the format DD/MM/YYYY. Returns: List of sorted date strings in the format YYYY-MM-DD. # Convert the list of string dates to datetime objects date_objects = [datetime.strptime(date, \'%d/%m/%Y\') for date in date_list] # Sort the datetime objects sorted_date_objects = sorted(date_objects) # Convert sorted datetime objects back to strings in the format YYYY-MM-DD sorted_date_strings = [date_obj.strftime(\'%Y-%m-%d\') for date_obj in sorted_date_objects] return sorted_date_strings"},{"question":"Given a string S of length N, find the length of the longest substring without repeating characters. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains an integer N. - The second line of each test case contains a string S of length N. -----Output----- For each test case, print a single line containing an integer denoting the length of the longest substring without repeating characters. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - Each character in the string S is a printable ASCII character. - Sum of N over all test cases doesn\'t exceed 10^6 -----Example Input----- 2 8 abcabcbb 5 bbbbb -----Example Output----- 3 1 -----Explanation----- Example case 1: The longest substrings without repeating characters are \\"abc\\" with a length of 3. Example case 2: The longest substring without repeating characters is \\"b\\" with a length of 1.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest def solve(test_cases): For each test case, computes and prints the length of the longest substring without repeating characters. results = [] for n, s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"A group of Special Forces has to perform a set of operations to breach a secure facility. There are N operations indexed from 1 to N inclusive. Each operation has a specific difficulty level associated with it, given as an array of integers, where the i-th integer denotes the difficulty of the i-th operation. The team can perform operations only if the cumulative difficulty of any two consecutive operations does not exceed a given integer X. You need to determine the maximum number of operations the team can perform consecutively starting from the first operation. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and X. - The second line of each test case contains N space-separated integers indicating the array of difficulties for each operation. -----Output----- For each test case, print a single integer representing the maximum number of consecutive operations the team can perform from the start. -----Constraints----- - 1 le T le 10 - 1 le N le 10^6 - 1 le X le 10^9 - 1 le text{difficulty of any operation} le 10^4 -----Example Input----- 1 5 9 4 3 2 6 5 -----Example Output----- 4 -----Explanation----- Example case 1: The consecutive segments of operations with their cumulative difficulties are: - Operation 1 & 2: 4 + 3 = 7 (<= 9) - Operation 2 & 3: 3 + 2 = 5 (<= 9) - Operation 3 & 4: 2 + 6 = 8 (<= 9) - Operation 4 & 5: 6 + 5 = 11 (> 9) The maximum number of consecutive operations that can be performed starting from the first operation is 4 (operations 1 through 4).","solution":"def max_operations(T, test_cases): results = [] for t in range(T): N, X = test_cases[t][:2] difficulties = test_cases[t][2] max_ops = 1 current_ops = 1 for i in range(1, N): if difficulties[i] + difficulties[i-1] <= X: current_ops += 1 max_ops = max(max_ops, current_ops) else: break results.append(max_ops) return results"},{"question":"Background ---------- In a dystopian future, food distribution is highly controlled and automated by central entities known as the Food Allocation Services (FAS). Residents must request food deliveries to be scheduled and routed appropriately by these automated systems. Each resident\'s request for food involves specifying quantities of three types of food: grains, vegetables, and protein. To optimize the delivery process, the FAS aims to minimize the weight of food packages while ensuring each resident\'s request is fully satisfied. The weight of each type of food is given as follows: - Grains: 1 weight unit per unit of quantity - Vegetables: 2 weight units per unit of quantity - Protein: 4 weight units per unit of quantity Mission Details --------------- Given a list of requests, where each request is represented as an array `[grains, vegetables, protein]`, write a function that calculates the total weight of food to be delivered for all requests. Example: ```python requests = [[2, 3, 1], [1, 0, 2], [4, 2, 1]] ``` For the `requests` above: ``` requests[0] -> [2, 3, 1] 2 units of grains = 2 weight units 3 units of vegetables = 6 weight units 1 unit of protein = 4 weight units Total weight for this request = 2 + 6 + 4 = 12 weight units requests[1] -> [1, 0, 2] 1 unit of grains = 1 weight unit 0 units of vegetables = 0 weight units 2 units of protein = 8 weight units Total weight for this request = 1 + 0 + 8 = 9 weight units requests[2] -> [4, 2, 1] 4 units of grains = 4 weight units 2 units of vegetables = 4 weight units 1 unit of protein = 4 weight units Total weight for this request = 4 + 4 + 4 = 12 weight units Overall total weight for all requests = 12 + 9 + 12 = 33 weight units ``` Write a function `calculate_total_weight(requests)` that takes in the list of requests and returns the total weight of food to be delivered. Your function should return the overall total weight as an integer. Additional Technical Details ---------------------------- - Inputs are always valid. - Each food quantity is a non-negative integer. - The list of requests is non-empty. - Do not mutate the input. **Note from the author:** This problem is inspired by real-world optimizations in supply chains and logistics. Any resemblance to actual persons, living or dead, or actual events is purely coincidental. If you liked this problem, check out my other challenging scenarios for enhanced problem-solving skills.","solution":"def calculate_total_weight(requests): Calculates the total weight of food to be delivered for all requests. Each request is a list where: - requests[i][0] represents quantity of grains - requests[i][1] represents quantity of vegetables - requests[i][2] represents quantity of protein The weight is calculated as follows: - Grains: 1 weight unit per unit of quantity - Vegetables: 2 weight units per unit of quantity - Protein: 4 weight units per unit of quantity Arguments: requests -- list of requests where each request is a list [grains, vegetables, protein] Returns: integer -- total weight of food to be delivered total_weight = 0 for request in requests: grains, vegetables, protein = request total_weight += grains * 1 + vegetables * 2 + protein * 4 return total_weight"},{"question":"A balanced string is defined as a string that has an equal number of characters from two different character sets. Task **_Given_** a string `s` consisting of only characters \'L\' and \'R\', **_Return_** the maximum number of balanced substrings from the given string. A balanced substring is a substring that contains the same number of \'L\' characters and \'R\' characters. ___ # Input - A single string `s` (1 ≤ length(s) ≤ 100000) consisting only of characters \'L\' and \'R\'. ___ # Output - An integer representing the maximum number of balanced substrings in the given string. ___ # Input >> Output Examples Example 1: Input: \\"RLRRLLRLRL\\" Output: 4 Explanation: The string can be split into \\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\", each substring contains the same number of \'L\' and \'R\'. Example 2: Input: \\"RLLLLRRRLR\\" Output: 3 Explanation: The string can be split into \\"RL\\", \\"LLLRRR\\", \\"LR\\", each substring contains the same number of \'L\' and \'R\'. Example 3: Input: \\"LLLLRRRR\\" Output: 1 Explanation: The string can be split into \\"LLLLRRRR\\", which is the only balanced substring having the equal \'L\' and \'R\'.","solution":"def balancedStringSplit(s): Returns the maximum number of balanced substrings from the given string s. A balanced substring contains the same number of \'L\' and \'R\' characters. balance = 0 count = 0 for char in s: if char == \'L\': balance += 1 else: balance -= 1 if balance == 0: count += 1 return count"},{"question":"A factory produces items in a linear production line. Each item is produced via a series of machines arranged sequentially. Each machine takes a fixed amount of time to process an item, regardless of the item\'s position on the production line. After an item is processed by all machines, it enters a quality checking station. At this station, it may be sent back to the start of the production line for reprocessing if it fails the quality check, which occurs based on a fixed probability p. The production line operates continuously, and the goal is to determine the average production time for producing an item that successfully passes the quality check. -----Input----- - A single test case where: - The first line contains an integer k (1 leq k leq 100), indicating the number of different machines. - The second line contains k space-separated positive integers, each representing the processing time t_i (1 leq t_i leq 100) for the i^{th} machine. - The third line contains a float p (0 leq p < 1), indicating the probability of an item failing the quality check and restarting the production line. -----Output----- - Output a single float value rounded to two decimal places representing the average production time for producing an item that successfully passes the quality check. -----Sample Input----- 3 2 3 4 0.2 -----Sample Output----- 11.25 -----Explanation:----- - The total time to process an item through all machines is 2 + 3 + 4 = 9 units. - With a failure probability of 0.2, an item has a 0.8 chance of passing. - The expected number of retries per item is frac{1}{0.8} = 1.25. - Hence, the average production time is 9 times 1.25 = 11.25 units.","solution":"def average_production_time(k, times, p): Calculate the average production time for an item to successfully pass the quality check. Parameters: k (int): number of different machines. times (list of int): processing times for each machine. p (float): probability of an item failing the quality check. Returns: float: average production time rounded to two decimal places. total_processing_time = sum(times) success_rate = 1 - p expected_retries = 1 / success_rate average_time = total_processing_time * expected_retries return round(average_time, 2)"},{"question":"Write a function `find_missing_numbers` that takes a list of integers as its argument and returns a list of the missing integers from the sequence. The input list always contains numbers between 1 and 100 (inclusive) and may have duplicates. The resulting list should be sorted in ascending order. The function signature should be as follows: ```python def find_missing_numbers(nums: List[int]) -> List[int]: ``` **Example:** ```python find_missing_numbers([1, 2, 3, 5, 7, 8, 9, 5, 3]) # Expected output: [4, 6, 10, 11, 12, ..., 100] ``` **Note:** - The input list may contain duplicate numbers, but they do not affect the output. - The function should efficiently handle edge cases such as an empty list or a list that contains all numbers between 1 and 100.","solution":"from typing import List def find_missing_numbers(nums: List[int]) -> List[int]: Returns a sorted list of missing integers from the sequence 1 to 100. complete_set = set(range(1, 101)) num_set = set(nums) missing_numbers = complete_set - num_set return sorted(list(missing_numbers))"},{"question":"Implement a function called `longest_unique_substring` that takes a string `s` as input and returns the length of the longest substring without repeating characters. You need to create an efficient solution that handles large input strings within a reasonable time frame. Aim for a solution with a time complexity of O(n), where n is the length of the string. # Examples ```python s = \\"abcabcbb\\" ==> 3 // The answer is \\"abc\\", with the length of 3 s = \\"bbbbb\\" ==> 1 // The answer is \\"b\\", with the length of 1 s = \\"pwwkew\\" ==> 3 // The answer is \\"wke\\", with the length of 3 ``` # Constraints - The input string `s` will have a length up to 10^5 characters. - The string will consist of printable ASCII characters.","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a set of N words, determine which words from this set can be typed using only one row of a standard QWERTY keyboard. The QWERTY keyboard has the following rows: 1. Top row: \\"qwertyuiop\\" 2. Middle row: \\"asdfghjkl\\" 3. Bottom row: \\"zxcvbnm\\" -----Constraints:----- For all test cases, - 1 le N le 1000 - Each word contains only lowercase English letters and has length between 1 and 30. -----Input Format:----- The first line contains an integer N, which is the number of words. The next N lines each contain a single word. -----Output Format:----- Print all the words from the input set that can be typed using just one row of the QWERTY keyboard. Each word should be printed on a new line in the order they were given. -----Sample Input 1:----- 4 hello alaska dad peace -----Sample Output 1:----- alaska dad -----Explanation 1:----- The word \\"hello\\" cannot be typed using one row only since it requires letters from both the top and middle rows. The word \\"alaska\\" can be typed using only the middle row. The word \\"dad\\" can be typed using only the middle row. The word \\"peace\\" cannot be typed using one row only since it requires letters from both the top and middle rows. -----Sample Input 2:----- 3 typewriter sushi bad -----Sample Output 2:----- typewriter","solution":"def words_using_one_row(n, words): Given a set of words, determine which words from this set can be typed using only one row of a standard QWERTY keyboard. @param n: Integer representing the number of words @param words: List of words of size n @return: List of words that can be typed using only one row rows = [ set(\\"qwertyuiop\\"), set(\\"asdfghjkl\\"), set(\\"zxcvbnm\\") ] result = [] for word in words: for row in rows: if set(word).issubset(row): result.append(word) break # No need to check other rows if word is found in a row return result # Testing the function with an example input if __name__ == \\"__main__\\": n = 4 words = [\\"hello\\", \\"alaska\\", \\"dad\\", \\"peace\\"] print(\\"n\\".join(words_using_one_row(n, words)))"},{"question":"Consider the following operation on a string consisting of English alphabets: for any character \'a\', \'b\', ..., \'z\', replace it with the character that is `k` positions ahead in the alphabet, wrapping around if necessary (i.e., replace \'z\' by \'a\'). Write a function that performs this operation. Your task is to write a function that takes a string `s` and an integer `k`, and returns the modified string. # Function Signature ```python def shift_string(s: str, k: int) -> str: ``` # Input - `s`: a string `s` of length `1 <= len(s) <= 1000` consisting of English alphabetical letters (upper- or lower-case). - `k`: an integer `0 <= k <= 25`. # Output - A string representing the modified version of `s` after shifting each character `k` positions ahead in the alphabet. # Example ```python assert shift_string(\\"abz\\", 1) == \\"bca\\" assert shift_string(\\"Zebra\\", 2) == \\"Bgdtc\\" assert shift_string(\\"Hello\\", 5) == \\"Mjqqt\\" assert shift_string(\\"world\\", 0) == \\"world\\" ``` # Note - Characters wrap around the alphabet. For instance, shifting \'z\' by 1 results in \'a\'. - Maintain the case of each character (i.e., uppercase letters should map to uppercase and lowercase letters should map to lowercase).","solution":"def shift_string(s: str, k: int) -> str: def shift_char(c, k): if \'a\' <= c <= \'z\': # Lowercase letters return chr((ord(c) - ord(\'a\') + k) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': # Uppercase letters return chr((ord(c) - ord(\'A\') + k) % 26 + ord(\'A\')) else: return c # Non-alphabetic characters stay the same return \'\'.join(shift_char(c, k) for c in s)"},{"question":"Given an array of integers, where each element represents the height of a building at that position, calculate the maximum amount of water that can be trapped between the buildings after raining. Each building\'s width is considered to be 1 unit. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (labeled) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of water (blue sections) are trapped. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: In this case, 9 units of water (blue sections) are trapped.","solution":"def trap(height): Calculate the maximum amount of water that can be trapped between the buildings after raining. Args: height (List[int]): List of integers representing the height of each building. Returns: int: Maximum amount of trapped water. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a function ```square_with_cross(n)``` that takes in an integer ```n``` (where ```n``` is odd and greater than 1) and returns an ```nxn``` array with a centered cross. The cross should intersect at the middle row and middle column. The cross will be represented by ```1\'s``` and the rest will be ```0\'s```. E.g. ```python square_with_cross(5) == [[0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 1, 1], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0]]; square_with_cross(7) == [[0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0]]; ```","solution":"def square_with_cross(n): Generates an nxn array with a centered cross. Parameters: n (int): The size of the array (n should be odd and greater than 1). Returns: list: An nxn array with a centered cross. if n % 2 == 0 or n <= 1: raise ValueError(\\"n must be an odd integer greater than 1\\") matrix = [[0 for _ in range(n)] for _ in range(n)] middle = n // 2 for i in range(n): matrix[i][middle] = 1 matrix[middle][i] = 1 return matrix"},{"question":"Sorting Strings by Length Given an array of strings, write a method that sorts the strings first by their lengths in ascending order. If two strings have the same length, they should be sorted in lexicographical order (dictionary order). You are required to complete the method that takes an array of strings as an argument and returns a new array where the strings are sorted by the criteria mentioned above. Examples ```python sort_strings([\\"apple\\", \\"pie\\", \\"short\\", \\"bob\\"]) #--> [\\"bob\\", \\"pie\\", \\"apple\\", \\"short\\"] sort_strings([\\"banana\\", \\"kiwi\\", \\"grape\\", \\"papaya\\"]) #--> [\\"kiwi\\", \\"grape\\", \\"banana\\", \\"papaya\\"] sort_strings([\\"z\\", \\"abc\\", \\"def\\", \\"a\\", \\"b\\", \\"ab\\"]) #--> [\\"a\\", \\"b\\", \\"z\\", \\"ab\\", \\"abc\\", \\"def\\"] sort_strings([]) #--> [] ``` Constraints - The input will only contain an array of strings. - The strings will only contain lowercase English letters. - The number of strings in the array will be between 0 and 100 (inclusive). - The length of each string will be between 1 and 100 (inclusive). ```python def sort_strings(strings): # Your code here ```","solution":"def sort_strings(strings): Sort strings first by their lengths in ascending order. If two strings have the same length, they should be sorted in lexicographical order. # return the sorted list using sorted and lambda function for key return sorted(strings, key=lambda x: (len(x), x))"},{"question":"Given a 2D grid of integers representing a forest, where each cell\'s value indicates the height of a tree, your task is to determine the minimum number of steps required to cut off all the trees in a non-descending order of their heights. You can walk in four directions (up, down, left, right) from one cell to another, and you can only step on cells with a tree or ground (value 0). If it is impossible to cut off all the trees, return -1. Note that you start at the top-left corner of the grid (0, 0) and must walk to each tree in order. Example 1: Input: forest = [ [1,2,3], [0,0,4], [7,6,5] ] Output: 6 Explanation: To cut off all the trees in non-descending order, you follow the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (2,0). Example 2: Input: forest = [ [1,2,3], [0,0,0], [7,6,5] ] Output: -1 Explanation: It is impossible to cut off all the trees because there is no way to walk to the tree with height 5 from the tree with height 3. Example 3: Input: forest = [ [2,3,4], [0,0,5], [8,7,6] ] Output: 6 Explanation: You start from (0,0) and follow the path to cut off the trees in this order: (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1) -> (2,0). Constraints: - m == forest.length - n == forest[i].length - 1 <= m, n <= 50 - 0 <= forest[i][j] <= 10^9","solution":"from collections import deque from typing import List, Tuple def min_steps_to_cut_trees(forest: List[List[int]]) -> int: def bfs(start: Tuple[int, int], goal: Tuple[int, int]) -> int: m, n = len(forest), len(forest[0]) visited = set() queue = deque([(start[0], start[1], 0)]) # store (x, y, steps) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, steps = queue.popleft() if (x, y) == goal: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited: if forest[nx][ny] > 0: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 trees = sorted((height, r, c) for r, row in enumerate(forest) for c, height in enumerate(row) if height > 1) start = (0, 0) total_steps = 0 for height, r, c in trees: steps = bfs(start, (r, c)) if steps == -1: return -1 total_steps += steps start = (r, c) return total_steps"},{"question":"You are given an array of integers representing the heights of buildings in a city skyline. Imagine a line of sight from the start of the skyline to the end that represents how much of the skyline is visible when viewed from the front. Your task is to write a function that returns an array that denotes the visible height of the skyline from left to right, as viewed from the front. The visible height at each index represents the maximum building height seen so far from the starting point to that index. In other words, for each position in the array, you need to find the maximum height encountered from the beginning up to that position. For example, if you are given the heights as: [3, 2, 4, 1, 5], the visible height array should be [3, 3, 4, 4, 5]. Function signature: ```python def skyline_visible_heights(heights: List[int]) -> List[int]: pass ``` # Constraints: - The input array will have at least one building and no more than 10,000 buildings. - Building heights will be non-negative integers and less than or equal to 10,000. # Example: Input: [1, 4, 2, 5, 3] Output: [1, 4, 4, 5, 5] Input: [10, 1, 2, 3, 4] Output: [10, 10, 10, 10, 10] Input: [1, 1, 1, 1, 1] Output: [1, 1, 1, 1, 1]","solution":"from typing import List def skyline_visible_heights(heights: List[int]) -> List[int]: if not heights: # If the input list is empty, return an empty list. return [] max_height_so_far = heights[0] visible_heights = [max_height_so_far] for height in heights[1:]: max_height_so_far = max(max_height_so_far, height) visible_heights.append(max_height_so_far) return visible_heights"},{"question":"A university records the grades of its students in a series of subjects. Each student has a unique ID and receives a grade between 0 and 100 in each subject. Write a program that will process multiple queries to find the average grade for a particular student across all subjects they are enrolled in. -----Input:----- - First-line will contain Q, the number of queries. Then the queries follow. - Each query contains the following: - An integer T representing the type of query (1 for entering a grade, 2 for querying the average grade). - If T is 1: - A string ID, representing the student\'s ID. - A string subject, representing the subject. - An integer grade, representing the student\'s grade in the subject (0 ≤ grade ≤ 100). - If T is 2: - A string ID, representing the student\'s ID. -----Output:----- For each query of type 2, output the average grade for the student ID provided, rounded to two decimal places. If the student has no recorded grades, output \\"No grades recorded\\". -----Constraints----- - 1 leq Q leq 10^5 - 1 leq |ID|, |subject| leq 10 - 0 leq grade leq 100 -----Sample Input:----- 6 1 Alice Physics 85 1 Alice Math 90 1 Bob Physics 80 2 Alice 2 Bob 2 Charlie -----Sample Output:----- 87.50 80.00 No grades recorded","solution":"def process_queries(queries): students_grades = {} def add_grade(ID, subject, grade): if ID not in students_grades: students_grades[ID] = {} students_grades[ID][subject] = grade def get_average(ID): if ID not in students_grades or not students_grades[ID]: return \\"No grades recorded\\" grades = students_grades[ID].values() average = sum(grades) / len(grades) return f\\"{average:.2f}\\" results = [] for query in queries: if query[0] == 1: add_grade(query[1], query[2], query[3]) elif query[0] == 2: results.append(get_average(query[1])) return results"},{"question":"You are given a matrix of size m x n, where each cell contains a non-negative integer number. Starting from the cell (0, 0), you can only move either right or down to the cell (m-1, n-1). Write a function to find the path from the top-left cell to the bottom-right cell, such that the sum of the numbers along the path is minimized. The function should return this minimum sum. Function Signature: ```python def min_path_sum(grid: List[List[int]]) -> int: ``` Example 1: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] assert min_path_sum(grid) == 7 # Explanation: 1 → 3 → 1 → 1 → 1 = 7 ``` Example 2: ```python grid = [ [1, 2, 5], [3, 2, 1] ] assert min_path_sum(grid) == 6 # Explanation: 1 → 2 → 2 → 1 = 6 ```","solution":"from typing import List def min_path_sum(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row and column with their respective sums for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] # Calculate the minimum path sum for each cell for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"Given a grid of characters and a word, determine if the word can be formed by consecutively adjacent cells in the grid. *Parameters*: `grid` and `word` *Example input*: ``` grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" ``` *Output*: ```true``` if the word can be formed, ```false``` if it cannot. You can move to adjacent cells (horizontally or vertically) but cannot use the same cell twice. # Constraints: * Grid dimensions: `m x n` where `1 <= m, n <= 6` * Characters in the grid are uppercase English letters. * Word length is between `1` and `12`. # Notes: * The function should return `true` if the word can be formed, otherwise `false`. * Adjacent cells are horizontally or vertically neighboring but not diagonally. * The same cell cannot be used more than once in the formation of the word. # Examples: ``` grid: [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word: \\"SEE\\" // return true - path: grid[2][1] -> grid[2][2] -> grid[1][3] grid: [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word: \\"ABCB\\" // return false - B at grid[0][1] and then C at grid[0][2] but grid[0][1] is used already, so word cannot be formed ```","solution":"def can_form_word(grid, word): if not grid or not word: return False rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r][c] = \'#\' found = (dfs(r+1, c, index+1) or dfs(r, c+1, index+1) or dfs(r-1, c, index+1) or dfs(r, c-1, index+1)) grid[r][c] = temp return found for row in range(rows): for col in range(cols): if dfs(row, col, 0): return True return False # Example use case grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" word2 = \\"SEE\\" word3 = \\"ABCB\\" print(can_form_word(grid, word1)) # Output: True print(can_form_word(grid, word2)) # Output: True print(can_form_word(grid, word3)) # Output: False"},{"question":"Alex has a rectangular grid of size N times M consisting of lowercase letters. He wants to perform some operations on this grid. In each operation, he is given four integers x_1, y_1, x_2, y_2, which define a rectangle with (x_1, y_1) as the top-left cell and (x_2, y_2) as the bottom-right cell, and a character c. The operation replaces all occurrences of the character c within the defined rectangle with a new character d. Your task is to print the grid after performing all the operations. # Detailed Input: - The first line contains two integers, N and M — the number of rows and columns of the grid. - Each of the next N lines contains a string of length M, representing the grid. - The following line contains an integer Q — the number of operations. - Each of the next Q lines contains four integers, x_1, y_1, x_2, y_2, followed by two characters c and d — the coordinates of the top-left and bottom-right corners of the rectangle, followed by the character to be replaced and the new character. # Detailed Output: Print the grid after performing all the operations. # Constraints: - 1 leq N, M leq 1000 - 1 leq Q leq 10^5 - 1 leq x_1 leq x_2 leq N - 1 leq y_1 leq y_2 leq M - c and d are lowercase English letters. # Example Input: ``` 3 3 abc def ghi 2 1 1 2 2 a z 2 2 3 3 f k ``` # Example Output: ``` zbc dek gki ``` # Explanation: 1. After the first operation (1 1 2 2 a z), the grid becomes: ``` zbc def ghi ``` 2. After the second operation (2 2 3 3 f k), the grid becomes: ``` zbc dek gki ```","solution":"def perform_operations(grid, N, M, operations): Perform a series of operations on a grid of characters, replacing specified characters in given sub-rectangles. Args: grid (list of list of str): The rectangular grid of characters. N (int): Number of rows in the grid. M (int): Number of columns in the grid. operations (list of tuples): A list of operations, each defined by (x1, y1, x2, y2, c, d). Returns: list of list of str: The modified grid after all operations. for (x1, y1, x2, y2, c, d) in operations: for i in range(x1-1, x2): for j in range(y1-1, y2): if grid[i][j] == c: grid[i][j] = d return grid def read_input(): N, M = map(int, input().strip().split()) grid = [list(input().strip()) for _ in range(N)] Q = int(input().strip()) operations = [] for _ in range(Q): x1, y1, x2, y2, c, d = input().strip().split() operations.append((int(x1), int(y1), int(x2), int(y2), c, d)) return grid, N, M, operations def main(): grid, N, M, operations = read_input() result_grid = perform_operations(grid, N, M, operations) for row in result_grid: print(\\"\\".join(row)) if __name__ == \\"__main__\\": main()"},{"question":"# Kata Task You are given a grid where each cell contains a certain number of coins. You have to find the path from the top-left corner to the bottom-right corner such that the number of collected coins is maximized. You can only move down or to the right at any point in time. # Example Grid ``` [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` # Bird-brain calculations Let\'s start from the top-left corner and determine the maximum number of coins we can collect if we move to the right or downward at each step. Calculated Path for Maximum Coins ``` [ [0, 3, 4, 5], [2, 3, 3, 9], [3, 8, 11, 12] ] ``` In this case, the maximum number of coins collected by the path is `12`. # Task Implement a function `maxCoins(grid)` that takes a 2D list `grid` as input and returns the maximum number of coins that can be collected following the above path constraints. ```python def maxCoins(grid): # Your code here # Example Usage grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] print(maxCoins(grid)) # Output: 12 ```","solution":"def maxCoins(grid): Returns the maximum number of coins collected from top-left to bottom-right of the grid. You can only move down or to the right at any point in time. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a 2D array to store the maximum number of coins collected upto each cell dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum number of coins collected return dp[rows-1][cols-1]"},{"question":"Given an array of integers nums, a zero-filled subarray is a contiguous subarray consisting of only 0\'s. Return the number of distinct zero-filled subarrays in nums. Example 1: Input: nums = [1,3,0,0,2,0,0,4] Output: 6 Explanation: There are 6 zero-filled subarrays: [0], [0], [0, 0], [0], [0], [0, 0]. Example 2: Input: nums = [0,0,0,2,0,0] Output: 9 Explanation: There are 9 zero-filled subarrays: [0], [0], [0], [0, 0], [0, 0], [0, 0, 0], [0], [0], [0, 0]. Example 3: Input: nums = [2,10,2019] Output: 0 Explanation: There are no zero-filled subarrays. Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9","solution":"def count_zero_filled_subarrays(nums): Returns the number of distinct zero-filled subarrays in the given list of integers. count = 0 zero_streak = 0 for num in nums: if num == 0: zero_streak += 1 count += zero_streak else: zero_streak = 0 return count"},{"question":"# Rotate Array to the Right Task **_Given_** an *array/list [] of integers* and an integer **_k_**, **_rotate_** the array to the right by **_k_** positions. Notes * The integer **_k_** is non-negative. * **_Array/list_** size is *at least 1*. Input >> Output Examples ``` rotateRight({1, 2, 3, 4, 5}, 2) ==> return {4, 5, 1, 2, 3} ``` # **_Explanation_**: Since **_k_** is **_2_**, the array is rotated 2 positions to the right. The last 2 elements are moved to the front of the array. Thus, the output is {4, 5, 1, 2, 3}. ___ ``` rotateRight({10, 20, 30, 40, 50}, 3) ==> return {30, 40, 50, 10, 20} ``` # **_Explanation_**: Since **_k_** is **_3_**, the array is rotated 3 positions to the right. The last 3 elements are moved to the front of the array. Thus, the output is {30, 40, 50, 10, 20}. ___ ``` rotateRight({-1, -10, -100, -1000}, 1) ==> return {-1000, -1, -10, -100} ``` # **_Explanation_**: Since **_k_** is **_1_**, the array is rotated 1 position to the right. The last element is moved to the front of the array. Thus, the output is {-1000, -1, -10, -100}. ___ Enjoy coding!","solution":"def rotateRight(arr, k): Rotates an array to the right by k positions. :param arr: List of integers :param k: Integer, number of positions to rotate :return: Rotated list if not arr or k <= 0: return arr n = len(arr) k = k % n # In case k is larger than array size return arr[-k:] + arr[:-k]"},{"question":"Given a linked list, such that each node contains a single digit, determine if the number formed by the linked list is a palindrome. The digits are stored in order and each of their nodes contains a single digit. Write a function that receives the head node of the linked list and returns true if the number is a palindrome, and false otherwise. Example 1: Input: 1 -> 2 -> 2 -> 1 Output: true Explanation: The digits form the number 1221, which is a palindrome. Example 2: Input: 1 -> 2 Output: false Explanation: The digits form the number 12, which is not a palindrome. Example 3: Input: 1 -> 0 -> 0 -> 1 Output: true Explanation: The digits form the number 1001, which is a palindrome. Notes: The linked list will contain at least one node and each node\'s value will be a digit (0-9).","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head): Determine if the number formed by the linked list is a palindrome. :param ListNode head: The head of the linked list. :return: True if the number is a palindrome, False otherwise. # Convert linked list to string num_str = \\"\\" current = head while current is not None: num_str += str(current.val) current = current.next # Check if the string is a palindrome return num_str == num_str[::-1]"},{"question":"Implement a function that simulates a simple version of the \\"FizzBuzz\\" game, but with custom values for \\"Fizz\\" and \\"Buzz\\". The function should take three parameters: 1. `n` - the number up to which the game should be played. 2. `fizz_num` - a number which, if a number in the range is divisible by, should return \\"Fizz\\". 3. `buzz_num` - a number which, if a number in the range is divisible by, should return \\"Buzz\\". The function should return a list of strings representing the results. For each number from 1 to `n`, the result should be: - \\"Fizz\\" if the number is divisible by `fizz_num`. - \\"Buzz\\" if the number is divisible by `buzz_num`. - \\"FizzBuzz\\" if the number is divisible by both `fizz_num` and `buzz_num`. - The number itself if it is not divisible by either `fizz_num` or `buzz_num`. Example 1: Input: n = 15, fizz_num = 3, buzz_num = 5 Output: [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"] Example 2: Input: n = 10, fizz_num = 2, buzz_num = 3 Output: [\\"1\\", \\"Fizz\\", \\"Buzz\\", \\"Fizz\\", \\"5\\", \\"FizzBuzz\\", \\"7\\", \\"Fizz\\", \\"Buzz\\", \\"Fizz\\"] Note: Make sure that the inputs n, fizz_num, and buzz_num are always positive integers.","solution":"def custom_fizzbuzz(n, fizz_num, buzz_num): Simulates the FizzBuzz game with custom fizz and buzz values. Args: n (int): The number up to which the game should be played. fizz_num (int): The number which, if a number in range is divisible by, returns \'Fizz\'. buzz_num (int): The number which, if a number in range is divisible by, returns \'Buzz\'. Returns: List[str]: List of strings representing the results of the game. result = [] for i in range(1, n + 1): if i % fizz_num == 0 and i % buzz_num == 0: result.append(\\"FizzBuzz\\") elif i % fizz_num == 0: result.append(\\"Fizz\\") elif i % buzz_num == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"# Problem Statement You are given a matrix of integers where each element represents the cost associated with visiting that cell. You are allowed to move either right or down from any cell in the matrix. Your goal is to find the minimum cost path from the top-left cell to the bottom-right cell. Write a function `min_cost_path(matrix)` that takes in a 2D list `matrix` and returns an integer representing the minimum cost to reach the bottom-right cell from the top-left cell. Constraints - The matrix will have at least 1 row and 1 column. - All elements in the matrix are non-negative integers. Example Input: ``` matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` Output: ``` 7 ``` Explanation: The path with the minimum cost is 1→3→1→1→1, with a total cost of 7. Function Signature The function signature is as follows: ```python def min_cost_path(matrix: List[List[int]]) -> int: pass ```","solution":"from typing import List def min_cost_path(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) # Initialize a 2D list to store the minimum costs dp = [[0 for _ in range(cols)] for _ in range(rows)] # Set the cost of the starting point dp[0][0] = matrix[0][0] # Fill in the minimum costs for the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill in the minimum costs for the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill in the remaining cells for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] return dp[rows - 1][cols - 1]"},{"question":"Given an array of distinct integers, determine if the array can be rearranged to form a sequence of consecutive integers. Return `True` if it can be rearranged to form a consecutive sequence, otherwise return `False`. Example 1: Input: [1, 3, 2] Output: True Explanation: The array can be rearranged to [1, 2, 3], which is a consecutive sequence. Example 2: Input: [1, 2, 4] Output: False Explanation: There is no way to rearrange [1, 2, 4] to form a consecutive sequence. Note: 1 <= array.length <= 100 -10^5 <= array[i] <= 10^5","solution":"def can_form_consecutive_sequence(arr): Returns True if the array can be rearranged to form a consecutive sequence, otherwise returns False. if not arr: return False min_val = min(arr) max_val = max(arr) return len(arr) == (max_val - min_val + 1)"},{"question":"Write a function named `pairSum` that, given an array of integers and a target sum, returns `true` if there are two distinct numbers in the array that add up to the target sum, else `false`. If the input array has fewer than two elements, return `false`. Example: ``` pairSum([1, 2, 3, 9], 8) --> false pairSum([1, 2, 4, 4], 8) --> true pairSum([], 8) --> false pairSum([5], 8) --> false ``` In the first example, no pair of numbers adds up to 8. In the second example, the numbers 4 and 4 add up to 8. In the third example, the array is empty. In the fourth example, the array has only one element.","solution":"def pairSum(arr, target): Returns True if there are two distinct numbers in the array that add up to the target sum, else False. if len(arr) < 2: return False seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"=====Problem Statement===== You are given a list of integers representing stock prices for consecutive days. Your task is to determine the maximum profit you could have made by buying a stock on one day and selling it on another day in the future. If no profit is possible, return 0. For example: Given the following stock prices, prices = [7, 1, 5, 3, 6, 4] The maximum profit you can achieve is 5, which is the difference between the buying price (1 on day 2) and the selling price (6 on day 5). =====Constraints===== 1 ≤ len(prices) ≤ 10^5 0 ≤ prices[i] ≤ 10^4 =====Input Format===== The input consists of a single line containing space-separated integers representing the stock prices of each day. =====Output Format===== Print a single integer, the maximum profit you can achieve. If no profit is possible, print 0. Example: Input: 7 1 5 3 6 4 Output: 5","solution":"def max_profit(prices): Returns the maximum profit that can be made by buying and selling the stock on different days. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"# Scenario You have been hired to develop a new feature for a web application that involves calculating custom hash codes for strings. A hash code is a number generated from a string in a deterministic way, meaning the same string will always produce the same hash code. The specific hash function you need to implement follows this rule: for each character in the string, calculate its ASCII value, then multiply each value by its 1-based index in the string and sum the results. Finally, return the sum. # Task Given a non-empty string, implement a function that calculates the custom hash code as described above. # Notes - The string will contain only printable ASCII characters. - The length of the string will be between 1 and 1000. - The function should be case-sensitive. # Example ```python customHash(\\"abc\\") # should return 294 ``` **Explanation:** The ASCII values for \'a\', \'b\', and \'c\' are 97, 98, and 99, respectively. The calculation will be: ``` 97 * 1 + 98 * 2 + 99 * 3 = 97 + 196 + 297 = 590 ``` ___ ```python customHash(\\"Hello\\") # should return 1650 ``` **Explanation:** The ASCII values for \'H\', \'e\', \'l\', \'l\', \'o\' are 72, 101, 108, 108, 111, respectively. The calculation will be: ``` 72 * 1 + 101 * 2 + 108 * 3 + 108 * 4 + 111 * 5 = 72 + 202 + 324 + 432 + 555 = 1585 ``` ___","solution":"def customHash(s): Calculates the custom hash code as described in the task. Each character in the string contributes to the hash value by its ASCII value multiplied by its 1-based index. hash_value = 0 for idx, char in enumerate(s): hash_value += ord(char) * (idx + 1) return hash_value"},{"question":"John works as an inventory manager in a large warehouse. His main task is to ensure that all inventory items are properly accounted for. The warehouse stores many different types of items, each with a unique identifier and a quantity. John needs a program to help him update the inventory based on recent shipments received and items sold. **Description:** You need to implement a function that updates the inventory given the current stock, recent shipments, and sales data. **Input:** - The first line consists of a single integer `T` denoting the number of test cases. - Each test case consists of three parts: - The current inventory: a line containing an integer `N` and followed by `N` lines, each containing an item identifier (string) and its quantity (integer). - The recent shipments: a line containing an integer `S` and followed by `S` lines, each containing an item identifier (string) and its quantity (integer). - Items sold: a line containing an integer `P` and followed by `P` lines, each containing an item identifier (string) and its quantity (integer). **Output:** For each test case, output the updated inventory. If an item is sold more than the available quantity, treat the remaining quantity as zero. **Constraints:** - `1 <= T <= 100` - `0 <= N, S, P <= 10^4` - `1 <= quantity <= 10^9` - The length of item identifiers will be between 1 and 30 characters. - All item identifiers are unique in initial inventory, shipments, and sales within a test case. **Sample Input:** ``` 2 3 apple 50 banana 30 orange 20 2 apple 10 grape 25 2 banana 10 orange 25 2 notebook 40 pen 60 2 notebook 10 pen 5 1 pen 10 ``` **Sample Output:** ``` apple 60 banana 20 orange 0 grape 25 notebook 50 pen 55 ``` **Explanation:** - For the first test case: - Initial inventory: apple 50, banana 30, orange 20 - Shipments: apple 10, grape 25 - Sales: banana 10, orange 25 After updating: - apple: 50 + 10 = 60 - banana: 30 - 10 = 20 - orange: 20 - 25 = 0 (since sales exceed inventory, it should treat as zero) - grape: 0 + 25 = 25 - For the second test case: - Initial inventory: notebook 40, pen 60 - Shipments: notebook 10, pen 5 - Sales: pen 10 After updating: - notebook: 40 + 10 = 50 - pen: 60 + 5 - 10 = 55","solution":"def update_inventory(T, test_cases): Update the inventory based on current stock, shipments received, and items sold. results = [] for i in range(T): current_inventory, shipments, sales = test_cases[i] # Create inventory dictionary inventory = {} for item_id, quantity in current_inventory: inventory[item_id] = quantity # Process shipments for item_id, quantity in shipments: if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity # Process sales for item_id, quantity in sales: if item_id in inventory: inventory[item_id] = max(0, inventory[item_id] - quantity) results.append(inventory) return results"},{"question":"A robot is located in a grid of size N x N. The grid has certain cells that are blocked and the robot cannot move through them. The robot is initially located at the top-left cell (1, 1) and it needs to reach the bottom-right cell (N, N). The robot can only move right or down from any given cell. Find the number of unique paths the robot can take to reach (N, N) from (1, 1) without passing through any blocked cells. -----Constraints----- - 1 ≤ N ≤ 1000 - The grid contains only 0s and 1s where 0 represents an open cell and 1 represents a blocked cell. - The input is guaranteed to have (1, 1) and (N, N) as open cells. -----Input----- Input is given from Standard Input in the following format: N grid[1][1] grid[1][2] ... grid[1][N] grid[2][1] grid[2][2] ... grid[2][N] : grid[N][1] grid[N][2] ... grid[N][N] -----Output----- Print the number of unique paths the robot can take to reach (N, N) from (1, 1) without passing through any blocked cells. -----Sample Input----- 3 0 0 0 0 1 0 0 0 0 -----Sample Output----- 2 The unique paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_in_grid(N, grid): if grid[0][0] == 1 or grid[N-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(N)] dp[0][0] = 1 # Starting point for i in range(N): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 continue if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1]"},{"question":"You are given a list of stock prices recorded at different time points during a single day. You need to determine the maximum possible profit you can achieve by buying and selling the stock exactly once. You can assume that you need to buy the stock before you sell it (i.e., the buy time must be earlier than the sell time). Write a function that takes a list of stock prices as input and returns the maximum profit you can achieve from a single transaction. If no profit can be achieved, return 0. -----Input----- - An integer t representing the number of test cases. - For each test case, the first line contains an integer n (the number of time points). - The next line contains n integers representing the stock prices at different time points. -----Output----- For each test case, print a single integer which is the maximum profit that can be achieved. -----Constraints----- - 1 leq t leq 10 - 2 leq n leq 10^5 - 0 leq text{{stock prices}}[i] leq 10^4 -----Sample Input:----- 2 6 7 1 5 3 6 4 5 7 6 4 3 1 -----Sample Output:----- 5 0 -----Explanation:----- In the first test case: - Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5 - It is not possible to achieve a higher profit by any other pair of transactions. In the second test case: - No transaction is done, i.e., maximum profit = 0","solution":"def max_profit(prices): This function takes a list of stock prices and returns the maximum profit that can be achieved from one buy-sell transaction. If no profit can be achieved, it returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit def solve(test_cases): results = [] for prices in test_cases: results.append(max_profit(prices)) return results"},{"question":"Implement a function that takes a list of integers and returns the sum of the squares of all the even numbers in the list. If the list is empty or contains no even numbers, the function should return 0. Examples: ``` sum_of_squares([1, 2, 3, 4, 5]) -> 20 // 2^2 + 4^2 = 4 + 16 = 20 sum_of_squares([1, 3, 5, 7]) -> 0 // No even numbers in the list sum_of_squares([]) -> 0 // Empty list sum_of_squares([10, -3, -2, 4]) -> 120 // 10^2 + (-2)^2 + 4^2 = 100 + 4 + 16 = 120 ```","solution":"def sum_of_squares(lst): Returns the sum of the squares of all the even numbers in the list. If the list is empty or contains no even numbers, returns 0. return sum(x ** 2 for x in lst if x % 2 == 0)"},{"question":"You are given a string that represents a sequence of words separated by spaces. Write a method `compress_string` that compresses the string such that each word is represented by its first letter followed by the number of characters in the word, and the words are separated by commas. For example, the string `\\"hello world this is a test\\"` would be compressed to `\\"h5,w5,t4,i2,a1,t4\\"` Note: - The input string will always contain only lowercase alphabetic characters and spaces. - There will be only one space between the words. Your task is to implement the function `compress_string(string input) -> string`. Examples: - `compress_string(\\"hello world this is a test\\")` -> `\\"h5,w5,t4,i2,a1,t4\\"` - `compress_string(\\"singleword\\")` -> `\\"s10\\"` - `compress_string(\\"a sequence of words\\")` -> `\\"a1,s8,o2,w5\\"`","solution":"def compress_string(input_str): Compress the input string such that each word is represented by its first letter followed by the number of characters in the word, and the words are separated by commas. Parameters: input_str (str): A string of words separated by spaces. Returns: str: A compressed string representation. words = input_str.split() compressed_words = [f\\"{word[0]}{len(word)}\\" for word in words] return \\",\\".join(compressed_words)"},{"question":"Implement a function that finds and returns the longest common prefix among a list of strings. The longest common prefix is the initial portion of each string that is the same across all the strings in the list. If there is no common prefix, the function should return an empty string. Example: Input: [\\"flight\\", \\"flow\\", \\"flower\\"] Output: \\"fl\\" Notes: - All given strings are in lowercase letters from \'a\' to \'z\'. - An empty array should return an empty string.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string among a list of strings. Parameters: strs (List[str]): A list of strings Returns: str: The longest common prefix if not strs: return \\"\\" # Sort the array, the common prefix of the array will be between the first and last string (after sorting) strs.sort() # Initializing first and last string first_str = strs[0] last_str = strs[-1] i = 0 # Compare the characters of the first and the last string while i < len(first_str) and first_str[i] == last_str[i]: i += 1 return first_str[:i]"},{"question":"=====Function Descriptions===== Python supports multiple ways to reverse a sequence. Using built-in functions, slicing, or even by leveraging data structures like stacks. For this problem, let\'s focus on reversing a string using two different methods: 1. Built-in function: The reversed() function returns an iterator that accesses the given sequence in the reverse order. 2. Slicing: Strings in Python can be sliced in multiple ways, one of which includes specifying a step. =====Problem Statement===== You are given a string s. Print two lines. The first line should print the reverse of the string using the reversed() function. The second line should print the reverse of the string using slicing. =====Input Format===== A single line containing the string s. =====Constraints===== 1≤len(s)≤100 =====Sample Input===== hello =====Sample Output===== olleh olleh","solution":"def reverse_string_using_reversed(s): Returns the reversed string using the reversed() function. return \'\'.join(reversed(s)) def reverse_string_using_slicing(s): Returns the reversed string using slicing. return s[::-1]"},{"question":"A palindrome is a word, phrase, or sequence that reads the same backward as forward. Write a function that receives an array of strings and returns the total number of unique palindromic substrings found within all the strings. A substring is a contiguous sequence of characters within a string. Example cases: - The array `[\\"abba\\", \\"racecar\\"]` contains 5 unique palindromic substrings: \\"a\\", \\"b\\", \\"bb\\", \\"abba\\", \\"racecar\\". - The array `[\\"abc\\", \\"def\\"]` contains 6 unique palindromic substrings: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\".","solution":"def count_unique_palindromic_substrings(arr): Returns the total number of unique palindromic substrings found within all the strings in the array. :param arr: List of strings :return: Integer count of unique palindromic substrings unique_palindromes = set() def is_palindrome(s): return s == s[::-1] for string in arr: n = len(string) for length in range(1, n + 1): for start in range(n - length + 1): substring = string[start:start + length] if is_palindrome(substring): unique_palindromes.add(substring) return len(unique_palindromes)"},{"question":"Write a function `next_palindrome(n)` that takes a positive integer `n` as input and returns the smallest palindrome number larger than `n`. A palindrome is a number that reads the same backwards as forwards. For example: ``` next_palindrome(123) -> 131 next_palindrome(489) -> 494 next_palindrome(99) -> 101 ``` Your task is to implement the function `next_palindrome(n)`. Ensure your solution handles large integers efficiently.","solution":"def is_palindrome(x): Helper function that checks if a given number x is a palindrome. return str(x) == str(x)[::-1] def next_palindrome(n): Takes a positive integer n and returns the smallest palindrome number larger than n. n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"You are given a list of integers representing the amount of gold in each cave in a line of caves. A thief can rob a series of consecutive caves to maximize the total gold stolen, but he cannot rob two consecutive caves on the same night. Design an efficient algorithm to determine the maximum amount of gold the thief can steal without robbing two consecutive caves. Range: 1 ≤ number of caves ≤ 10^5, 1 ≤ amount of gold in each cave ≤ 10^3 Example: Input: [2, 7, 9, 3, 1] Output: 12 Explanation: The thief can steal gold from caves 1, 3, and 5 (2 + 9 + 1) or from caves 2 and 4 (7 + 3), with a maximum total of 12.","solution":"def max_gold(caves): Returns the maximum amount of gold that can be stolen without robbing two consecutive caves. if not caves: return 0 n = len(caves) if n == 1: return caves[0] # dp array to store the maximum gold that can be stolen up to each cave dp = [0] * n # initialize the first two values dp[0] = caves[0] dp[1] = max(caves[0], caves[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + caves[i]) return dp[-1]"},{"question":"Given an array nums of size n, where n is an even number. The array is in strictly increasing order until the middle, after which it continues in strictly decreasing order. Your task is to find the element that is the greatest in this array. Example 1: Input: nums = [1, 3, 7, 8, 6, 4, 2] Output: 8 Explanation: The maximum element in the array is 8. Example 2: Input: nums = [2, 4, 6, 9, 7, 5, 1] Output: 9 Explanation: The maximum element in the array is 9. Constraints: - 2 <= nums.length <= 1000 - 1 <= nums[i] <= 10000 - nums[i] < nums[i+1] for 0 <= i < n/2 - nums[i] > nums[i+1] for n/2 <= i < n-1","solution":"def find_max(nums): Finds the greatest element in an array that first increases and then decreases. Args: nums: List[int] - A list of integers. Returns: int - The greatest element in the array. return max(nums)"},{"question":"Implement a function `reverse_words(sentence: str) -> str` that takes a sentence as input and returns the sentence with the words in reversed order. Each word in the sentence is separated by a single space, and there should be no leading or trailing spaces in the output. Preserve the capitalization and punctuation of the original words. Example: ```python reverse_words(\\"Hello World\\") # \\"World Hello\\" reverse_words(\\"The quick brown fox\\") # \\"fox brown quick The\\" reverse_words(\\"Python is great!\\") # \\"great! is Python\\" ```","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in a given sentence. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"=====Problem Statement===== Python supports list comprehensions, which provide a concise way to create lists. A common use of this feature is to create a list of certain elements that meet a specific condition. Task Given a list of integers, create a new list that contains the square of each number from the original list that is a multiple of 3. =====Input Format===== - The first line contains a single integer n, which is the number of elements in the list. - The second line contains n space-separated integers. =====Constraints===== 1 ≤ n ≤ 1000 -1000 ≤ each integer ≤ 1000 =====Output Format===== Print the new list as a single line of space-separated integers. If no integers in the list are multiples of 3, print an empty list. =====Sample Input===== 6 1 3 4 9 10 12 =====Sample Output===== 9 81 144","solution":"def square_multiples_of_3(n, numbers): Returns a list containing the squares of numbers that are multiples of 3. Parameters: n (int): The number of elements in the list (not directly used in function). numbers (list): List of integers. Returns: list: List containing the squares of numbers that are multiples of 3. return [x**2 for x in numbers if x % 3 == 0]"},{"question":"Develop a function that receives an integer `x` and returns the factorial of the first `x` positive integers as an array. For example, if the input is `x = 5`, the function should return `[1, 1, 2, 6, 24, 120]`, representing the factorials of 0!, 1!, 2!, 3!, 4!, and 5!. If `x` is 0, return an array containing just the factorial of 0, which is `[1]`. Ensure the function handles the integer values efficiently. Assume `x` will be a non-negative integer in all test cases.","solution":"def factorial_array(x): Returns an array containing the factorial of the first x positive integers (including 0). if x == 0: return [1] factorials = [1] for i in range(1, x + 1): factorials.append(factorials[-1] * i) return factorials"},{"question":"You are given an array `a` of n integers. Your task is to perform a series of operations to transform the array such that all elements in the array are equal. In one operation, you can choose any subarray of length k (where 1 leq k leq n) and increment each element of the subarray by 1. Determine the minimum number of operations needed to make all elements of the array equal. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains a single integer n (2 le n le 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. It\'s guaranteed that the total sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum number of operations needed to make all elements of the array equal. -----Example----- Input 2 3 1 2 3 4 4 4 4 4 Output 2 0 -----Note----- In the first test case, we can perform the following operations: 1. Choose subarray [1, 2] and increment each element: [1, 2, 3] → [2, 3, 3] 2. Choose subarray [2, 3] and increment each element: [2, 3, 3] → [2, 4, 4] 3. Choose subarray [1, 2, 3] and increment each element: [2, 4, 4] → [3, 5, 5] 4. Choose subarray [2, 3] and increment each element: [3, 5, 5] → [3, 6, 6] 5. Choose subarray [1, 2, 3] and increment each element: [3, 6, 6] → [4, 7, 7] 6. Choose subarray [2, 3] and increment each element: [4, 7, 7] → [4, 8, 8] 7. Choose subarray [1, 2, 3] and increment each element: [4, 8, 8] → [5, 9, 9] 8. Choose subarray [2, 3] and increment each element: [5, 9, 9] → [5, 10, 10] 9. Choose subarray [1, 2, 3] and increment each element: [5, 10, 10] → [6, 11, 11] 10. Choose subarray [2, 3] and increment each element: [6, 11, 11] → [6, 12, 12] 11. Choose subarray [1, 2, 3] and increment each element: [6, 12, 12] → [7, 13, 13] 12. Choose subarray [2, 3] and increment each element: [7, 13, 13] → [7, 14, 14] 13. Choose subarray [1, 2, 3] and increment each element: [7, 14, 14] → [8, 15, 15] 14. Choose subarray [2, 3] and increment each element: [8, 15, 15] → [8, 16, 16] 15. Choose subarray [1, 2, 3] and increment each element: [8, 16, 16] → [9, 17, 17] 16. Choose subarray [2, 3] and increment each element: [9, 17, 17] → [9, 18, 18] 17. Choose subarray [1, 2, 3] and increment each element: [9, 18, 18] → [10, 19, 19] 18. Choose subarray [2, 3] and increment each element: [10, 19, 19] → [10, 20, 20] 19. Choose subarray [1, 2, 3] and increment each element: [10, 20, 20] → [11, 21, 21] 20. Choose subarray [2, 3] and increment each element: [11, 21, 21] → [11, 22, 22] Now all elements are equal. In the second test case, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] max_elem = max(a) min_elem = min(a) operations = max_elem - min_elem results.append(operations) return results"},{"question":"You are given an array of integers and a target integer k. Your task is to determine if there are two distinct indices i and j in the array such that the sum of array[i] and array[j] is equal to k. -----Constraints----- - 2 leq |array| leq 10^5 - -10^9 leq array[i] leq 10^9 - -10^9 leq k leq 10^9 -----Input----- The input is given from Standard Input in the following format: n k array -----Output----- Print \\"YES\\" if such indices exist, otherwise print \\"NO\\". -----Sample Input----- 5 9 2 7 11 15 1 -----Sample Output----- YES In the example, the sum of the elements array[0] (2) and array[1] (7) equals the target 9. Hence, the output is \\"YES\\".","solution":"def two_sum_exists(n, k, array): Determines if there are two distinct indices i and j in the array such that the sum of array[i] and array[j] is equal to k. Parameters: n (int): The number of elements in the array. k (int): The target sum to find. array (list of int): The list of integers. Returns: str: \\"YES\\" if such indices exist, \\"NO\\" otherwise. seen = set() for num in array: if (k - num) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Description You are given an unsorted array of integers where each element appears exactly twice, except for one element which appears exactly once. Your task is to find that single element in linear time complexity and without using extra memory. **Examples** ``` single_number([4, 1, 2, 1, 2]) returns 4 single_number([2, 2, 3, 3, 7]) returns 7 single_number([17, 17, 5, 7, 7, 11, 11, 9, 9]) returns 5 ``` **Constraints** - The length of the array will be at least 1 and at most 10^6. - The array will contain integer values ranging from -10^9 to 10^9. **Hint** - Consider using bitwise XOR operation to achieve the solution efficiently.","solution":"def single_number(nums): Returns the element that appears exactly once in the list where all other elements appear exactly twice. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Complete the program to determine the winner of a tennis game based on the rules set below. You are provided with a history of scored points as a list of strings either \'P1\' or \'P2\', indicating which player won each point sequentially. * Tennis is played in sets and games. A player needs to win at least four points to win a game. * A player must win the game by at least two points. * The individual points are: - \\"0\\" (no points) - \\"15\\" (one point) - \\"30\\" (two points) - \\"40\\" (three points) * If both players reach \\"40\\", the game continues until one player leads by two points (Advantage). Write a function `winner_of_game` which takes a list of scored points and returns the winner of the game (\\"Player 1\\" or \\"Player 2\\"). Function signature: ```python def winner_of_game(scoring_history: List[str]) -> str: ``` # Examples: Input: `[\'P1\', \'P1\', \'P2\', \'P2\', \'P1\', \'P1\', \'P2\', \'P1\']` Output: `\\"Player 1\\"` Input: `[\'P1\', \'P2\', \'P2\', \'P1\', \'P1\', \'P2\', \'P2\', \'P2\']` Output: `\\"Player 2\\"` Hints: - Use counters to keep track of points for each player. - Translate the points counter to the actual scoring used in tennis.","solution":"def winner_of_game(scoring_history): Determines the winner of a tennis game based on the history of scored points. :param scoring_history: List of strings representing the points scored by players \\"P1\\" and \\"P2\\" :return: String indicating the winner of the game, either \\"Player 1\\" or \\"Player 2\\" scores = {\\"P1\\": 0, \\"P2\\": 0} for point in scoring_history: scores[point] += 1 if scores[\\"P1\\"] >= 4 or scores[\\"P2\\"] >= 4: if scores[\\"P1\\"] >= scores[\\"P2\\"] + 2: return \\"Player 1\\" elif scores[\\"P2\\"] >= scores[\\"P1\\"] + 2: return \\"Player 2\\""},{"question":"Given an array of integers and an integer k, your task is to determine whether there are two distinct indices i and j in the array such that nums[i] and nums[j] are equal and the absolute difference between i and j is at most k. Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false Note: You should solve the problem in at most O(n) time complexity, and try to optimize space usage.","solution":"def containsNearbyDuplicate(nums, k): Determines if there are two distinct indices i and j in the array nums such that nums[i] == nums[j] and the absolute difference between i and j is at most k. Args: nums (list): List of integers. k (int): Integer denoting the maximum allowed index distance between nums[i] and nums[j]. Returns: bool: True if such elements exist, False otherwise. num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"Task Given a string `s` consisting of lowercase alphabets only, the goal is to compress the string using a format where consecutive duplicates of characters are replaced with the character followed by the number of repetitions. If the \\"compressed\\" string is not shorter than the original string, return the original string. Write a function `compress_string(s)` that takes a string `s` and returns the compressed version or the original string if it is not shorter. Example: ``` Input: \\"aaabbcc\\" Output: \\"a3b2c2\\" Input: \\"abcdef\\" Output: \\"abcdef\\" ``` Notes: * The input string will have at least one character and at most 1000 characters. * The function should run in linear time. Constraints: * 1 <= len(s) <= 1000","solution":"def compress_string(s): Compresses the input string by replacing consecutive duplicates characters with the character followed by the number of repetitions. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count) if count > 1 else s[i - 1]) count = 1 compressed.append(s[-1] + str(count) if count > 1 else s[-1]) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Given a string, write a function that **returns a new string** where the **order of the words** is reversed, but the **order of characters within each word is preserved**. Words are defined as sequences of non-whitespace characters separated by whitespace characters. If the input is not a valid string, return **\'Invalid input!\'**. Example: - Input: `\\"hello world\\"` Output: `\\"world hello\\"` - Input: `\\" a quick brown fox \\"` Output: `\\"fox brown quick a\\"` - Input: `12345` Output: **\'Invalid input!\'** - Input: `\\"\\"` Output: `\\"\\"` Hint ==== You should consider extra spaces between words and leading or trailing spaces.","solution":"def reverse_words_order(sentence): Returns a new string with the order of the words reversed, while preserving the order of characters within each word. If input is not a valid string, returns \'Invalid input!\'. if not isinstance(sentence, str): return \'Invalid input!\' words = sentence.split() reversed_words = \' \'.join(reversed(words)) return reversed_words"},{"question":"In a computer simulation, you\'re tasked with managing a sequence of events involving multiple people interacting in a room. Initially, all individuals are outside the room, and the room is empty. The sequence of events is given as a list of strings, where each string represents a single event. Events can be of two types: - \\"enter X\\" denotes that person X enters the room. - \\"leave X\\" denotes that person X leaves the room. Your task is to determine the total number of different people that were in the room at some point throughout the sequence of events. Additionally, you must ensure the given sequence of events is valid, meaning: 1. A person cannot leave the room if they were not there. 2. A person cannot enter the room if they are already inside. If the sequence contains any invalid events, return -1. Example ```python room_events([\\"enter Alice\\", \\"enter Bob\\", \\"leave Alice\\", \\"enter Charlie\\", \\"leave Bob\\", \\"leave Charlie\\"]) ==> 3 ``` Explanation: - Alice enters the room. - Bob enters the room. (2 unique people so far) - Alice leaves the room. - Charlie enters the room. (3 unique people so far) - Bob leaves the room. - Charlie leaves the room. Since there are no invalid events in the given sequence, and 3 different people were in the room at some point, the function should return 3. ```python room_events([\\"enter Alice\\", \\"enter Bob\\", \\"leave Alice\\", \\"leave Bob\\", \\"leave Charlie\\"]) ==> -1 ``` Explanation: - Alice enters the room. - Bob enters the room. - Alice leaves the room. - Bob leaves the room. - Charlie leaves the room. (invalid event: Charlie was not in the room) Because there is an invalid event, the function should return -1. ```python room_events([\\"enter Alice\\", \\"enter Alice\\", \\"leave Alice\\"]) ==> -1 ``` Explanation: - Alice enters the room. - Alice enters the room again (invalid event: Alice is already in the room). - Alice leaves the room. Because there is an invalid event, the function should return -1.","solution":"def room_events(events): Determines the total number of different people that were in the room at some point while validating the given sequence of events. Args: events (list): List of event strings. Returns: int: Total number of different people that were in the room or -1 if the sequence is invalid. people_in_room = set() all_people = set() for event in events: action, person = event.split() if action == \\"enter\\": if person in people_in_room: return -1 people_in_room.add(person) all_people.add(person) elif action == \\"leave\\": if person not in people_in_room: return -1 people_in_room.remove(person) return len(all_people)"},{"question":"Introduction An image processing software uses a simple algorithm to detect and count the number of unique colors in an image. The colors in an image are represented in the RGB color model where each color is a combination of three values: red, green, and blue, each value ranging from 0 to 255. Your task is to implement a function that detects the number of unique colors in a given image. Input/Output The function should accept a single parameter. The `image_pixels` input is a list of lists where each inner list represents a pixel and contains three integers representing the red, green, and blue values of that pixel. The function should return an integer representing the number of unique colors in the image. Example ```python # Example input: an image with 5 pixels image_pixels = [ [255, 0, 0], [0, 255, 0], [0, 0, 255], [0, 255, 0], [255, 255, 0] ] # In the above example, there are 4 unique colors: # [255, 0, 0], [0, 255, 0], [0, 0, 255], and [255, 255, 0]. # Expected output: # 4 def count_unique_colors(image_pixels): # Your code here print(count_unique_colors(image_pixels)) # Output should be 4 ```","solution":"def count_unique_colors(image_pixels): Returns the number of unique colors in the image. Parameters: image_pixels (list of lists): A list of pixels where each pixel is represented by a list containing three integers (R, G, B). Returns: int: The number of unique colors in the image. unique_colors = {tuple(pixel) for pixel in image_pixels} return len(unique_colors)"},{"question":"In a forest, there are several paths connecting different clearings. Paths are represented as edges in a graph where nodes represent clearings. However, due to the dense foliage, only certain paths are safe to travel. You are given an array `paths` where each element is a tuple representing a path between two clearings and its safety score. The higher the safety score, the safer the path. Write a function `safest_path(n, paths)` that takes: - an integer `n`, the number of clearings numbered from `0` to `n-1` - a list of tuples `paths`, where each tuple `(u, v, s)` represents a path between clearings `u` and `v` with a safety score `s`. The function should return the maximum possible safety score for a path from clearing `0` to clearing `n-1`. If no such path exists, return `-1`. For example: ```python n = 5 paths = [ (0, 1, 2), (0, 2, 5), (1, 2, 1), (2, 3, 8), (3, 4, 3), (1, 4, 4) ] safest_path(5, paths) # should return 12 (0 -> 2 -> 3 -> 4) ``` Points to consider: - The function should handle up to 100 clearings. - Each path connects exactly two unique clearings. - Ensure to handle cases where multiple paths intersect the same pair of clearings but with different safety scores.","solution":"from heapq import heappop, heappush from collections import defaultdict from math import inf def safest_path(n, paths): # Create a graph representation graph = defaultdict(list) for u, v, s in paths: graph[u].append((v, s)) graph[v].append((u, s)) # Priority queue for Dijkstra\'s variant algorithm pq = [(-inf, 0)] safety_scores = [0] * n safety_scores[0] = inf # Dijkstra\'s variant to maximize safety scores while pq: current_safety, u = heappop(pq) current_safety = -current_safety for v, s in graph[u]: new_safety = min(current_safety, s) if new_safety > safety_scores[v]: safety_scores[v] = new_safety heappush(pq, (-new_safety, v)) # if safety_scores of destination is still 0, it means there\'s no path return safety_scores[n-1] if safety_scores[n-1] > 0 else -1"},{"question":"The faculty at a prestigious university have decided to create an innovative grading system that better reflects students\' performance. Instead of grading based on the absolute scores obtained, the system will grade students based on their relative performance within the class using a percentile system. The score each student receives will be replaced by the percentile of scores that are less than or equal to their score. For example, if the scores of students in a class are [30, 40, 70, 80, 100], the percentile score for a student with a score of 70 would be 60, because 60% of the students scored less than or equal to 70. The task is to write a program that converts a list of student scores to their corresponding percentile scores. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) - the number of students in the class. The second line contains n integers separated by spaces, each representing the score of a student (0 ≤ score ≤ 100). -----Output----- Output a single line containing n integers where the i-th integer is the percentile score of the i-th student, rounded to the nearest integer. -----Example----- Input: 5 30 40 70 80 100 Output: 20 40 60 80 100 Explanation: - For score 30: 1 out of 5 scores are less or equal to it, so percentile = (1/5) * 100 = 20 - For score 40: 2 out of 5 scores are less or equal to it, so percentile = (2/5) * 100 = 40 - For score 70: 3 out of 5 scores are less or equal to it, so percentile = (3/5) * 100 = 60 - For score 80: 4 out of 5 scores are less or equal to it, so percentile = (4/5) * 100 = 80 - For score 100: 5 out of 5 scores are less or equal to it, so percentile = (5/5) * 100 = 100","solution":"def calculate_percentiles(scores): This function takes a list of integer scores and returns a list of percentile scores. n = len(scores) sorted_scores = sorted(scores) percentile_map = {} for rank, score in enumerate(sorted_scores): percentile_map[score] = round(((rank + 1) / n) * 100) percentiles = [percentile_map[score] for score in scores] return percentiles"},{"question":"You work for a small e-commerce company and your job is to develop a new feature for processing user orders. You are required to write two functions and corresponding doc tests for each. The first function is `process_order_total`, which calculates the total price of an order. The function takes a list of tuples, where each tuple contains the price of an item and its quantity. The function should return the total price of the order as a float. If the input list is empty, the function should return 0.0. The second function is `apply_discount`, which applies a given discount rate to the total price of the order. The function takes two arguments: the total price as a float, and the discount rate as a float (where 0 <= discount rate < 1). The function should return the discounted total price. If the discount rate is 0 or input total price is 0, the function should return the original total price. Write **EXACTLY TWO** doc tests for each of the two functions. Here\'s a template to get you started: ``` def process_order_total(order_items): Calculate the total price of an order. >>> process_order_total([(10.0, 2), (5.0, 3)]) 35.0 >>> process_order_total([]) 0.0 return sum(price * quantity for price, quantity in order_items) def apply_discount(total_price, discount_rate): Apply discount to the total price. >>> apply_discount(100.0, 0.1) 90.0 >>> apply_discount(50.0, 0.0) 50.0 return total_price - (total_price * discount_rate) if total_price > 0 and discount_rate > 0 else total_price ``` Refer to the doctest documentation at https://docs.python.org/3/library/doctest.html for more information. Make sure your doc tests are perfectly formatted, otherwise they may not pass the actual tests. Good luck!","solution":"def process_order_total(order_items): Calculate the total price of an order. Args: order_items (list of tuples): A list where each tuple contains the price of an item and its quantity Returns: float: The total price of the order Examples: >>> process_order_total([(10.0, 2), (5.0, 3)]) 35.0 >>> process_order_total([]) 0.0 return sum(price * quantity for price, quantity in order_items) def apply_discount(total_price, discount_rate): Apply discount to the total price. Args: total_price (float): The total price of the order discount_rate (float): The discount rate to apply (0 <= discount rate < 1) Returns: float: The discounted total price Examples: >>> apply_discount(100.0, 0.1) 90.0 >>> apply_discount(50.0, 0.0) 50.0 return total_price - (total_price * discount_rate) if total_price > 0 and discount_rate > 0 else total_price"},{"question":"Given a list of integers, write a function that first finds the maximum difference between two elements in the list such that the larger element comes after the smaller element. Then remove all duplicates from the list and return the list reversing its order. For example: ``` Input: [2, 3, 10, 6, 4, 8, 1] Step 1: Find the maximum difference with smaller element appearing before larger element: 10 - 2 = 8 Step 2: Remove duplicates and reverse the list: [1, 8, 4, 6, 10, 3, 2] Output: [1, 8, 4, 6, 10, 3, 2] ``` If the list has less than two elements, the maximum difference should be defined as `0` and the output list should simply be the reversed list. For example: ``` Input: [5] Step 1: Maximum difference defined as 0 because the list has less than two elements. Step 2: Reverse the list: [5] Output: [5] ```","solution":"def process_list(lst): if len(lst) < 2: max_diff = 0 else: max_diff, min_element = float(\'-inf\'), float(\'inf\') for num in lst: if num < min_element: min_element = num else: diff = num - min_element if diff > max_diff: max_diff = diff # Remove duplicates lst_unique = list(dict.fromkeys(lst)) # Reverse the list lst_unique.reverse() return lst_unique"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to write a function that determines whether a given integer is prime. More similar exercises can be found here http://rosalind.info/problems/list-view/ (source) Write a function `is_prime` that takes an integer `n` and returns `True` if `n` is a prime number, and `False` otherwise. ```python is_prime(5) # return True (since 5 is a prime number) is_prime(4) # return False (since 4 is not a prime number) ``` Additional test cases: - `is_prime(2)` should return `True`. - `is_prime(11)` should return `True`. - `is_prime(15)` should return `False`.","solution":"def is_prime(n): Determines if a given integer n is a prime number. Args: n (int): The integer to be checked for primality. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Create a function that takes a list of integers and returns a dictionary with two keys: \\"even\\" and \\"odd\\". The value for each key should be a list of the corresponding even and odd integers from the input list. If there are no even or odd integers, the value should be an empty list. The function should have one argument which is the list of integers. For example: ```python list_partition([1, 2, 3, 4, 5, 6, 7]) ``` should return: ```python {\'even\': [2, 4, 6], \'odd\': [1, 3, 5, 7]} ``` If the list is empty: ```python list_partition([]) ``` should return: ```python {\'even\': [], \'odd\': []} ``` Write a function `list_partition(lst)` that accomplishes this task.","solution":"def list_partition(lst): Partitions a list of integers into even and odd numbers. :param lst: List of integers :return: Dictionary with two keys: \'even\' and \'odd\' result = {\'even\': [], \'odd\': []} for num in lst: if num % 2 == 0: result[\'even\'].append(num) else: result[\'odd\'].append(num) return result"},{"question":"Write a function that determines if a list of strings is sorted in lexicographical order. The function should take a list of strings as input and return `True` if the list is sorted in ascending lexicographical order, otherwise, it should return `False`. Examples: ```python [\'apple\', \'banana\', \'cherry\'] => True [\'apple\', \'banana\', \'Banana\'] => False [\'abc\', \'bcd\', \'cde\'] => True [\'zebra\', \'monkey\', \'ape\'] => False ```","solution":"def is_lexicographically_sorted(lst): Determine if the list of strings is sorted in lexicographical order. :param lst: List of strings. :return: True if the list is sorted in ascending lexicographical order, else False. return lst == sorted(lst)"},{"question":"Given a list of integers, determine whether the list forms an arithmetic progression or not. An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. Write a function `isArithmeticProgression(nums)` that takes a list of integers `nums` as input, and returns `True` if the list forms an arithmetic progression, and `False` otherwise. Example 1: Input: [1, 3, 5, 7, 9] Output: True Explanation: The difference between each successive pair of elements is 2, which is constant. Example 2: Input: [2, 4, 6, 8, 11] Output: False Explanation: The difference between the last two elements is 3, which is not constant. Example 3: Input: [7, 7, 7, 7] Output: True Explanation: The difference between each successive pair of elements is 0, which is constant. Note: - A list of fewer than 2 elements is considered to trivially form an arithmetic progression. - Each number in the input list is an integer within the range [-10^9, 10^9]. - The length of the input list is within the range [0, 10^4].","solution":"def isArithmeticProgression(nums): Determines if a given list of integers forms an arithmetic progression. if len(nums) < 2: return True # Trivially forms an arithmetic progression common_diff = nums[1] - nums[0] for i in range(2, len(nums)): if nums[i] - nums[i - 1] != common_diff: return False return True"},{"question":"# Task Write a function that takes an alphanumeric string and returns the frequency count of each letter (ignoring case) and each digit, sorted by frequency and then by lexicographical order if frequencies are the same. # Example: For the input `\\"aA11bB2Ccc\\"`, the result should be `[ (\'c\', 3), (\'1\', 2), (\'a\', 2), (\'b\', 2), (\'2\', 1) ]`. # Input/Output: Input: - `[input]` string `s` A string containing letters and digits - Note: The input string will have at least one character and contains only letters and digits. Output: - `[output]` list of tuples The list of tuples where each tuple contains a character (in lowercase for letters) and its frequency count, sorted by frequency and lexicographical order. Function signature: `def frequency_count(s: str) -> [(str, int)]:`","solution":"from collections import Counter def frequency_count(s: str) -> [(str, int)]: Returns the frequency count of each letter (ignoring case) and digit, sorted by frequency and then by lexicographical order if frequencies are the same. s = s.lower() counter = Counter(s) # Sorting first by frequency (in descending order), then by lexicographical order result = sorted(counter.items(), key=lambda x: (-x[1], x[0])) return result"},{"question":"You are given an integer array nums that represents the number of students in each class. The teacher is trying to form groups of students in such a way that each group has an equal number of students. Your task is to determine if it is possible to split the students into groups that all have the same number of students. Return True if it is possible and False otherwise. Example 1: Input: nums = [3, 3, 3, 3, 3, 3] Output: True Explanation: The students can be split into groups of 3 (each group containing 6 students). Example 2: Input: nums = [2, 3, 4] Output: False Explanation: It is not possible to split the students into groups with the same number of students. Example 3: Input: nums = [1, 1, 1, 1, 2, 2, 2, 2] Output: True Explanation: The students can be split into groups of 4 (each group containing 2 students). Note: - The length of nums will be between 1 and 100. - Each number in nums will be between 1 and 100.","solution":"from collections import Counter from math import gcd from functools import reduce def can_split_students(nums): Returns True if it is possible to split the students into groups that all have the same number of students, otherwise returns False. count = Counter(nums).values() return reduce(gcd, count) > 1"},{"question":"In data analysis, it is often necessary to find the moving average of a sequence of numbers. A moving average calculates the average of elements within a sliding window of a specified size. Task Write a function `movingAverage` that takes a list of integers `nums` and an integer `k` representing the size of the sliding window, and returns a list of the moving averages of the elements in the list. The moving average should include only whole windows where the window size matches `k`. The input list `nums` will always contain at least `k` elements. Input - `nums`: a list of integers - `k`: an integer, the size of the sliding window (1 <= k <= len(nums)) Output A list of floats representing the moving averages of the elements in the list, rounded to two decimal places. Example ```python movingAverage([1, 3, 2, 6, -1, 4, 1, 8, 2], 3) # Output: [2.0, 3.67, 2.33, 3.0, 1.33, 4.33, 3.67] ```","solution":"def movingAverage(nums, k): result = [] for i in range(len(nums) - k + 1): window = nums[i:i + k] average = sum(window) / k result.append(round(average, 2)) return result"},{"question":"Given a string `S` consisting of uppercase letters and the wildcard character `\'*\'`, return all possible letter combinations that the string could represent. The wildcard character `\'*\'` can represent any uppercase letter from \'A\' to \'Z\'. Example 1: Input: \\"A*C\\" Output: [\\"AAC\\", \\"ABC\\", \\"ACC\\", \\"ADC\\", \\"AEC\\", \\"AFC\\", \\"AGC\\", \\"AHC\\", \\"AIC\\", \\"AJC\\", \\"AKC\\", \\"ALC\\", \\"AMC\\", \\"ANC\\", \\"AOC\\", \\"APC\\", \\"AQC\\", \\"ARC\\", \\"ASC\\", \\"ATC\\", \\"AUC\\", \\"AVC\\", \\"AWC\\", \\"AXC\\", \\"AYC\\", \\"AZC\\"] Example 2: Input: \\"Z*Z*\\" Output: [\\"ZAZA\\", \\"ZZZZ\\", \\"ZXZX\\", \\"ZAZX\\", ...] (and all other combinations) Example 3: Input: \\"***\\" Output: [\\"AAA\\", \\"AAB\\", \\"AAC\\", \\"AAD\\", ..., \\"ZZX\\", \\"ZZY\\", \\"ZZZ\\"] Example 4: Input: \\"HELLO\\" Output: [\\"HELLO\\"] Note: - 1 <= S.length <= 10 - The input string S contains only uppercase letters and the character \'*\'.","solution":"def generate_combinations(S): Given a string S consisting of uppercase letters and the wildcard character \'*\', return all possible letter combinations that the string could represent. from itertools import product chars_options = [list(\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\') if c == \'*\' else [c] for c in S] return [\\"\\".join(p) for p in product(*chars_options)]"},{"question":"Design a module that can perform both compression and decompression of a given string using Run-Length Encoding (RLE). Run-Length Encoding is a simple form of data compression where consecutive repeated characters are replaced by a single character and the number of repetitions. For example, the string \\"AAAABBBCCDAA\\" would be compressed to \\"4A3B2C1D2A\\". **Function Signatures:** - `rle_compress(input_str: str) -> str` - `rle_decompress(compressed_str: str) -> str` Implement the two functions: - `rle_compress`: Takes a string as input and returns the Run-Length Encoded string. - `rle_decompress`: Takes a Run-Length Encoded string and returns the original string. **Examples:** ```python rle_compress(\\"AAAABBBCCDAA\\") # Returns \\"4A3B2C1D2A\\" rle_compress(\\"WWWWXYZ\\") # Returns \\"4W1X1Y1Z\\" rle_decompress(\\"4A3B2C1D2A\\") # Returns \\"AAAABBBCCDAA\\" rle_decompress(\\"4W1X1Y1Z\\") # Returns \\"WWWWXYZ\\" ``` **Constraints:** - The input string for `rle_compress` will only contain uppercase letters (A-Z). - The Run-Length Encoded string for `rle_decompress` will be valid. - The length of the input string will not exceed 1000 characters.","solution":"def rle_compress(input_str: str) -> str: Compresses the input string using Run-Length Encoding (RLE). Args: input_str (str): The string to be compressed. Returns: str: The compressed Run-Length Encoded string. if not input_str: return \\"\\" compressed_str = [] current_char = input_str[0] count = 1 for char in input_str[1:]: if char == current_char: count += 1 else: compressed_str.append(f\\"{count}{current_char}\\") current_char = char count = 1 compressed_str.append(f\\"{count}{current_char}\\") return \'\'.join(compressed_str) def rle_decompress(compressed_str: str) -> str: Decompresses the Run-Length Encoded string back to the original string. Args: compressed_str (str): The compressed Run-Length Encoded string. Returns: str: The decompressed original string. if not compressed_str: return \\"\\" decompressed_str = [] count = \\"\\" for char in compressed_str: if char.isdigit(): count += char else: decompressed_str.append(char * int(count)) count = \\"\\" return \'\'.join(decompressed_str)"},{"question":"Your task is to implement a simplified spell checker. The spell checker should find and correct all misspelled words in a given text based on a provided dictionary of correctly spelled words. You need to build a function `spell_checker` that takes two arguments: 1. `text`: a string of words separated by spaces. 2. `dictionary`: a list of correctly spelled words. The function should return a new string where all words that are not in the dictionary are replaced with the closest match from the dictionary. The closest match is defined as the word with the smallest Levenshtein distance^[1]^ to the misspelled word. If there are multiple words with the same small distance, choose the one that comes first lexicographically. Blocked libraries: difflib, numpy, pandas, scipy. Expected function signature: ```python def spell_checker(text: str, dictionary: list) -> str: pass ``` # Example ```python dictionary = [\\"hello\\", \\"world\\", \\"python\\", \\"programming\\"] text = \\"helo wrld pytthon prgramming\\" print(spell_checker(text, dictionary)) # Output: \\"hello world python programming\\" ``` Explanation: - \\"helo\\" is replaced by \\"hello\\". - \\"wrld\\" is replaced by \\"world\\". - \\"pytthon\\" is replaced by \\"python\\". - \\"prgramming\\" is replaced by \\"programming\\". # Note 1. You will need to implement a function to calculate the Levenshtein distance between two words to determine the closest match. 2. Consider edge cases such as empty strings and words that do not need correction. ^1^Levenshtein distance: a string metric for measuring the difference between two sequences. It is calculated as the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other.","solution":"def levenshtein_distance(a, b): Calculate the Levenshtein distance between two strings. if len(a) < len(b): return levenshtein_distance(b, a) if len(b) == 0: return len(a) previous_row = range(len(b) + 1) for i, c1 in enumerate(a): current_row = [i + 1] for j, c2 in enumerate(b): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def spell_checker(text: str, dictionary: list) -> str: Corrects all misspelled words in a given text based on a provided dictionary. def find_closest_match(word): closest_distance = float(\'inf\') closest_word = word for correct_word in dictionary: distance = levenshtein_distance(word, correct_word) if distance < closest_distance or (distance == closest_distance and correct_word < closest_word): closest_distance = distance closest_word = correct_word return closest_word words = text.split() corrected_words = [find_closest_match(word) for word in words] return \' \'.join(corrected_words)"},{"question":"Write a function that determines if a given string is a valid hexadecimal number. A valid hexadecimal number starts with \'0x\' or \'0X\' followed by one or more characters from \'0\'-\'9\', \'a\'-\'f\', and \'A\'-\'F\'. The function should return `True` if the string is valid, otherwise `False`. Example: ```python is_hex(\\"0x1A3F\\") # True is_hex(\\"0X4a5b\\") # True is_hex(\\"0h1234\\") # False is_hex(\\"123456\\") # False ```","solution":"def is_hex(s): Determines if the given string is a valid hexadecimal number. Args: s (str): The string to check. Returns: bool: True if valid hexadecimal, False otherwise. if len(s) < 3: return False if s[:2] not in (\'0x\', \'0X\'): return False hex_digits = set(\'0123456789abcdefABCDEF\') for char in s[2:]: if char not in hex_digits: return False return True"},{"question":"A string S is considered balanced if the number of occurrences of the characters \'X\' and \'Y\' are the same. Given two initially empty strings S1 and S2, you are allowed to perform the following operations any number of times: 1. Append \'X\' to either S1 or S2. 2. Append \'Y\' to either S1 or S2. Return the minimum number of operations required to make both S1 and S2 balanced. Example 1: Input: S = \\"XXYY\\" Output: 0 Example 2: Input: S = \\"XXXY\\" Output: 2 Example 3: Input: S = \\"XYXYXY\\" Output: 0 Note: - S only consists of the characters \'X\' and \'Y\'. - 1 <= len(S) <= 10^5","solution":"def min_operations_to_balance(S): count_X = S.count(\'X\') count_Y = S.count(\'Y\') if count_X == count_Y: return 0 else: return abs(count_X - count_Y) # The function above calculates the minimum number of operations needed to make both strings balanced. # Since appending \'X\' or \'Y\' can be done any number of times on either S1 or S2, # we need to find out the difference between count of \'X\' and \'Y\', as they need to be equal for both strings to be balanced."},{"question":"You are given a grid/board of size N times M (N rows and M columns) and a bag with N cdot M tiles. Each tile has a color denoted by an integer. You must place exactly one tile on each cell of the grid. Let\'s define the unattractiveness of the grid as the maximum absolute difference of integers written on the tiles in any two adjacent cells (cells that share a side). Find the minimum possible unattractiveness of the resulting grid. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and M. - The second line contains N cdot M space-separated integers denoting the colors on tiles in the bag. -----Output----- For each test case, print a single line containing one integer — the minimum unattractiveness. -----Constraints----- - 1 le T le 20 - 2 le N, M le 50 - Colors on the tiles are integers between 0 and 1000 inclusive. -----Example Input----- 2 2 2 1 2 3 4 3 3 7 9 8 6 1 3 4 2 5 -----Example Output----- 1 1 -----Explanation----- Example case 1: For the 2x2 grid, arranging the tiles as follows achieves the minimum unattractiveness: ``` 1 2 3 4 ``` Here, the maximum difference between any two adjacent cells is 1.","solution":"def min_unattractiveness(T, test_cases): Returns the minimum unattractiveness for each test case. :param T: Integer, the number of test cases. :param test_cases: List of tuples, where each tuple contains: - N, M: Integers, dimensions of the grid. - colors: List of integers, the colors on tiles in the bag. :return: List of integers, the minimum unattractiveness for each test case. results = [] for test in test_cases: N, M, colors = test colors.sort() # In sorted order, the minimum difference between any two adjacent tiles is minimized. min_diff = float(\'inf\') for i in range(1, len(colors)): min_diff = min(min_diff, abs(colors[i] - colors[i-1])) results.append(min_diff) return results"},{"question":"Write a function `decode_morse(encoded_message, morse_code_dict)` that decodes a Morse code message which has been encoded into a string format, and returns the decoded message as a string. Your function will be given two parameters: 1. `encoded_message` - a string containing the Morse code message, with each Morse code character separated by a single space, and each word separated by three spaces. 2. `morse_code_dict` - a dictionary where keys are characters in Morse code (e.g., \'.-\', \'--\', etc.) and values are the corresponding alphabets (e.g., \'A\', \'M\', etc.). The function should correctly translate the Morse code into its corresponding alphanumeric message. # Example Input: ```python encoded_message = \\"... --- ...\\" morse_code_dict = { \\".-\\": \\"A\\", \\"-...\\": \\"B\\", \\"-.-.\\": \\"C\\", \\"-..\\": \\"D\\", \\".\\": \\"E\\", \\"..-.\\": \\"F\\", \\"--.\\": \\"G\\", \\"....\\": \\"H\\", \\"..\\": \\"I\\", \\".---\\": \\"J\\", \\"-.-\\": \\"K\\", \\".-..\\": \\"L\\", \\"--\\": \\"M\\", \\"-.\\": \\"N\\", \\"---\\": \\"O\\", \\".--.\\": \\"P\\", \\"--.-\\": \\"Q\\", \\".-.\\": \\"R\\", \\"...\\": \\"S\\", \\"-\\": \\"T\\", \\"..-\\": \\"U\\", \\"...-\\": \\"V\\", \\".--\\": \\"W\\", \\"-..-\\": \\"X\\", \\"-.--\\": \\"Y\\", \\"--..\\": \\"Z\\", \\"-----\\": \\"0\\", \\".----\\": \\"1\\", \\"..---\\": \\"2\\", \\"...--\\": \\"3\\", \\"....-\\": \\"4\\", \\".....\\": \\"5\\", \\"-....\\": \\"6\\", \\"--...\\": \\"7\\", \\"---..\\": \\"8\\", \\"----.\\": \\"9\\" } ``` # Example Output: ```python \\"SOS\\" ``` # Additional Constraints: 1. The input will always contain valid Morse code, i.e., it will not have any illegal sequences. 2. The dictionary will always provide a complete set of Morse code translations for all letters and numeral digits.","solution":"def decode_morse(encoded_message, morse_code_dict): Decodes a Morse code encoded message if using the provided Morse code dictionary. Parameters: - encoded_message: str, Morse code message with each character separated by a single space and each word separated by three spaces. - morse_code_dict: dict, dictionary mapping Morse codes to their corresponding characters. Returns: - str, the decoded alphanumeric message. words = encoded_message.split(\\" \\") decoded_message = [] for word in words: decoded_word = \'\'.join([morse_code_dict[char] for char in word.split()]) decoded_message.append(decoded_word) return \' \'.join(decoded_message)"},{"question":"Task You are given a non-negative integer array representing the heights of walls on a 2D plane. Each element\'s value denotes the height of a wall. You need to calculate the maximum volume of water that can be trapped between the walls after it rains. Example For `walls = [0,1,0,2,1,0,1,3,2,1,2,1]`, the output should be `6`. Input/Output - `[input]` integer array `walls` Constraints: `1 ≤ walls.length ≤ 1000` `0 ≤ walls[i] ≤ 1000` - `[output]` an integer The maximum volume of water that can be trapped between the walls after it rains.","solution":"def trap(walls): Calculate the maximum volume of water trapped between the walls. :param walls: List of non-negative integers representing wall heights. :return: Integer representing maximum volume of water trapped. if not walls: return 0 left, right = 0, len(walls) - 1 left_max, right_max = walls[left], walls[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, walls[left]) water_trapped += max(0, left_max - walls[left]) else: right -= 1 right_max = max(right_max, walls[right]) water_trapped += max(0, right_max - walls[right]) return water_trapped"},{"question":"=====Function Descriptions===== Given a sequence of numbers, you can determine the minimum and maximum values, as well as calculate the sum of all the numbers in the sequence. min(sequence) This method returns the smallest item in a sequence. >>> print(min([1, 2, 3, 4, 5])) 1 >>> print(min([-10, 5, 3, 99, -3])) -10 max(sequence) This method returns the largest item in a sequence. >>> print(max([1, 2, 3, 4, 5])) 5 >>> print(max([-10, 5, 3, 99, -3])) 99 sum(sequence) This method returns the sum of all items in a sequence. >>> print(sum([1, 2, 3, 4, 5])) 15 >>> print(sum([-10, 5, 3, 99, -3])) 94 =====Problem Statement===== You are given a sequence of integers. Your task is to compute the minimum, maximum, and the sum of the sequence. =====Input Format===== A single line containing a sequence of space-separated integers. =====Constraints===== 1 <= length of sequence <= 1000 -10^6 <= each integer <= 10^6 =====Output Format===== In the first line, print the minimum integer in the sequence. In the second line, print the maximum integer in the sequence. In the third line, print the sum of the sequence.","solution":"def sequence_statistics(sequence): Takes a sequence of integers and returns the minimum, maximum, and sum. :param sequence: List[int] - A list of space-separated integers :return: Tuple[int, int, int] - (min_value, max_value, total_sum) min_value = min(sequence) max_value = max(sequence) total_sum = sum(sequence) return min_value, max_value, total_sum"},{"question":"A new programming language, \\"Scripty\\", has introduced a unique implementation of conditional statements. However, unlike other programming languages that use `if-else` or `switch` cases, Scripty uses a list of boolean expressions and a corresponding list of commands. If none of the boolean expressions evaluate to `True`, the final command in the list is executed. Given a list of boolean expressions and a corresponding list of commands, you need to determine which command will be executed based on the evaluation of the boolean expressions. Each boolean expression is evaluated in the order they are provided, and as soon as a `True` expression is found, the corresponding command is executed. If no boolean expressions are `True`, the last command in the list will be executed. **Input** - The first line contains an integer n (1 leq n leq 100), the number of expressions and commands. - The next n lines each contain a boolean expression (represented as a string). - The final n + 1 lines each contain a command (represented as a string). **Output** - Print the command that will be executed. **Example** **Input** ``` 3 x > 10 y == 5 z != 0 print(\\"Expression 1 is True\\") print(\\"Expression 2 is True\\") print(\\"Expression 3 is True\\") print(\\"No expressions are True\\") ``` Given x = 7, y = 5, and z = 0 **Output** ``` print(\\"Expression 2 is True\\") ``` **Note**: You can assume the expressions will be simple and will not involve complex logical operations or multiple variables. The commands are simple print statements that will output exactly what is given within them. You need to evaluate the expressions based on supplied variables within your implementation and print the corresponding command.","solution":"def execute_command(n, expressions, commands, variables): Evaluates a list of boolean expressions against provided variables, and returns the corresponding command to be executed. :param n: Number of expressions and commands :param expressions: List of boolean expression strings :param commands: List of command strings :param variables: Dictionary of variable values :return: The command string to be executed for i in range(n): if eval(expressions[i], {}, variables): return commands[i] return commands[-1]"},{"question":"You are given the root of a binary tree, and a target sum. Write a function that determines if there exists a path from the root node to any leaf node such that the sum of the node values in the path equals the target sum. A leaf node is a node with no children. Return True if such a path exists, or False otherwise. Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1] targetSum = 22 Output: True Explanation: The path with sum 22 is [5,4,11,2]. Example 2: Input: root = [1,2,3] targetSum = 5 Output: False Explanation: No path with sum 5 exists. Example 3: Input: root = [1,2] targetSum = 1 Output: False Explanation: No path with sum 1 exists. Note: The number of nodes in the tree is in the range [0, 5000]. -1000 <= Node value <= 1000 -1000 <= targetSum <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root, targetSum): if not root: return False if not root.left and not root.right and root.val == targetSum: return True targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum)"},{"question":"Given a string `circularString` that represents a circular string and an integer `subLength`, find the longest substring of length `subLength` starting from the first character of `circularString` when you consider `circularString` to be circular. A string is considered circular if we imagine that the string wraps around itself, such that the last character connects back to the first character. Write a function to compute the result. # Function Signature ```python def longestCircularSubstring(circularString: str, subLength: int) -> str: ``` # Parameters - `circularString` (str): The input string which is circular in nature. - `subLength` (int): The length of the substring to be returned. # Returns - `str`: The longest substring of given length starting from the first character in the circular manner. # Example ```python circularString = \\"abcde\\" subLength = 3 ``` **Output:** ```python \\"abc\\" ``` ```python circularString = \\"xyzabc\\" subLength = 4 ``` **Output:** ```python \\"xyza\\" ``` # Constraints - `1 <= len(circularString) <= 1000` - `1 <= subLength <= len(circularString)`","solution":"def longestCircularSubstring(circularString: str, subLength: int) -> str: Returns the longest substring of length subLength starting from the first character of the circularString in a circular manner. # Append the string to itself to handle the circular nature. circularStringExtended = circularString * 2 # Extract the substring starting from the first character with the given length. return circularStringExtended[:subLength]"},{"question":"Write a function that determines whether an input list of integers can be partitioned into two subsets such that the sum of the elements in both subsets is equal. Include considerations for time and space complexity in your solution. # Example `[1, 5, 11, 5]` -> True `[1, 2, 3, 5]` -> False Hint First, consider if the total sum of the elements is even. If it\'s not, it\'s impossible to divide it into two equal subsets. Then, you might implement a dynamic programming approach similar to the subset sum problem.","solution":"def can_partition(nums): Determines if a list can be partitioned into two subsets with equal sums. Parameters: nums (list): List of integers Returns: bool: True if the list can be partitioned into two subsets with equal sums, False otherwise. total_sum = sum(nums) # If the total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"# Problem Context In software development, it\'s common to encounter the need to convert a hierarchical data structure into a sorted list or array. One frequent scenario involves transforming an organization chart or a nested list of comments into a flat, sorted list. Consider a tree structure where each node has a `value` and a list of `children`, which are also nodes. The goal is to flatten this tree into a list while maintaining the order in which nodes appear in a depth-first traversal. Write a function `flatten_tree` that takes a root node of a tree and returns a list of the values in depth-first order. A node can be represented as a dictionary in Python, having the following structure: ```python { \\"value\\": int, \\"children\\": [list of child nodes] } ``` # Example Given the following tree: ```python { \\"value\\": 1, \\"children\\": [ { \\"value\\": 2, \\"children\\": [] }, { \\"value\\": 3, \\"children\\": [ { \\"value\\": 4, \\"children\\": [] }, { \\"value\\": 5, \\"children\\": [] } ] } ] } ``` The depth-first traversal produces: `[1, 2, 3, 4, 5]` # Constraints - Each node\'s value is a positive integer. - You may assume that each node has a unique value. - The input tree can be empty. - The `children` for any node is always a list (which may be empty). # Function Signature ```python def flatten_tree(root: dict) -> list: pass ```","solution":"def flatten_tree(root: dict) -> list: Flattens a tree into a list of values in depth-first order. if not root: return [] result = [] def dfs(node): result.append(node[\\"value\\"]) for child in node[\\"children\\"]: dfs(child) dfs(root) return result"},{"question":"A social media platform needs to optimize its user feed display. Consider an algorithm that processes the order of posts based on user interactions. Each post has an associated interaction score tied to user likes, comments, and shares. You are given a list of posts, where each post is represented by its unique ID, user interaction score, and timestamp of the post. You need to reorder the posts in the feed based on their interaction score in descending order. If two posts have the same interaction score, order them by their timestamp in ascending order. The objective is to return a list of post IDs sorted according to the described criteria. Example 1: Input: posts = [ {\'id\': 1, \'score\': 50, \'timestamp\': 1609459200}, {\'id\': 2, \'score\': 30, \'timestamp\': 1609459100}, {\'id\': 3, \'score\': 50, \'timestamp\': 1609459300} ] Output: [1, 3, 2] Example 2: Input: posts = [ {\'id\': 1, \'score\': 70, \'timestamp\': 1609459200}, {\'id\': 2, \'score\': 80, \'timestamp\': 1609459100}, {\'id\': 3, \'score\': 60, \'timestamp\': 1609459300}, {\'id\': 4, \'score\': 80, \'timestamp\': 1609459500} ] Output: [2, 4, 1, 3] Note: - Each post object has three fields: \'id\' (integer), \'score\' (integer), and \'timestamp\' (integer). - The \'id\' of each post is unique. - The length of the posts list is at most 100. - The \'score\' and \'timestamp\' values are positive integers.","solution":"def reorder_posts(posts): Return a list of post IDs sorted by interaction score in descending order. If two posts have the same interaction score, sort them by timestamp in ascending order. :param posts: List of dictionaries containing \'id\', \'score\', \'timestamp\' :return: List of post IDs sorted according to the described criteria sorted_posts = sorted(posts, key=lambda x: (-x[\'score\'], x[\'timestamp\'])) return [post[\'id\'] for post in sorted_posts]"},{"question":"Given a grid of characters and a list of words, return all words that can be found in the grid. Each word must be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once per word. # Example 1: Input: board = [[\'o\',\'a\',\'a\',\'n\'],[\'e\',\'t\',\'a\',\'e\'],[\'i\',\'h\',\'k\',\'r\'],[\'i\',\'f\',\'l\',\'v\']], words = [\'oath\',\'pea\',\'eat\',\'rain\'] Output: [\'oath\',\'eat\'] Explanation: The words \\"oath\\" and \\"eat\\" can be found in the grid. # Example 2: Input: board = [[\'a\',\'b\'],[\'c\',\'d\']], words = [\'abcb\'] Output: [] Explanation: The word \\"abcb\\" cannot be found in the grid. # Constraints: * 1 <= board.length <= 12 * 1 <= board[i].length <= 12 * 1 <= words.length <= 10^3 * 1 <= words[i].length <= 10 * board[i][j] and words[i] consist of lowercase English letters","solution":"def find_words(board, words): Given a 2D board and a list of words, return all words that can be found in the board. def dfs(board, word, i, j, k): if k == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]: return False temp, board[i][j] = board[i][j], \\"#\\" found = (dfs(board, word, i + 1, j, k + 1) or dfs(board, word, i - 1, j, k + 1) or dfs(board, word, i, j + 1, k + 1) or dfs(board, word, i, j - 1, k + 1)) board[i][j] = temp return found found_words = [] for word in words: if any(dfs(board, word, i, j, 0) for i in range(len(board)) for j in range(len(board[0]))): found_words.append(word) return found_words"},{"question":"Task You are working for a company that handles numeric data analytics and need to develop a function that centers numbers within a specific range, effectively normalizing them to fit within a new given range. The centering should adjust the numbers such that they are spread evenly between the lower and upper bounds of the new range. Specifically, you need to implement a function that takes a list of numbers, the desired lower bound, and the desired upper bound, and scales the numbers from their original range to the new specified range. Requirements: - The function should take three inputs: 1. A list of integers or floating point numbers (each number in the list may be positive or negative). 2. The desired lower bound (integer or floating point). 3. The desired upper bound (integer or floating point). - The function should output a list of integers or floating point numbers that have been rescaled to fit within the new specified range (rounding should match the input data type, meaning that if the input list consists of integers, the output should also consist of integers, otherwise floating point numbers). Example The list `[10, 20, 30, 40, 50]` with a desired range of `[0, 1]` would be rescaled to: `[0.0, 0.25, 0.5, 0.75, 1.0]` The list `[-1, 0, 1]` with a desired range of `[0, 10]` would be rescaled to: `[0, 5, 10]` Input/Output - `[input]` list of numbers `numbers` (list) A list containing the numbers that need to be centered in the new range. - `[input]` number `new_min` (float or int) The lower bound of the new range. - `[input]` number `new_max` (float or int) The upper bound of the new range. - `[output]` a list of numbers (float or int) A list containing the rescaled numbers. Note: If the input list contains identical numbers, the output list should also contain identical numbers set to the midpoint of the new range.","solution":"def rescale_numbers(numbers, new_min, new_max): Rescale the list of numbers to a new range [new_min, new_max]. Parameters: - numbers (list of int or float): List of numbers to rescale. - new_min (int or float): New minimum value in the range. - new_max (int or float): New maximum value in the range. Returns: - list of int or float: Rescaled list of numbers. if not numbers: return numbers old_min = min(numbers) old_max = max(numbers) if old_min == old_max: midpoint = (new_min + new_max) / 2 return [midpoint] * len(numbers) def rescale(x): return new_min + (new_max - new_min) * (x - old_min) / (old_max - old_min) return [rescale(x) for x in numbers]"},{"question":"Aayush is a self-employed carpenter who specializes in building custom furniture. One of his recent projects involves creating wooden tables with specialized legs. Each table must have 4 legs, but the length of the legs may vary. Write a function that, given the lengths of the 4 legs, determines whether the table can be stable. A table is considered stable if at least two pairs of legs have the same length. ```Python is_stable(l1, l2, l3, l4) l1, l2, l3, l4 are the lengths of the 4 legs ``` Example ```Python is_stable(2, 2, 3, 3) should return True is_stable(2, 3, 3, 3) should return True is_stable(2, 2, 2, 3) should return True is_stable(1, 2, 3, 4) should return False is_stable(4, 4, 4, 4) should return True ```","solution":"def is_stable(l1, l2, l3, l4): Determines if a table can be stable based on the lengths of its 4 legs. A table is considered stable if at least two pairs of legs have the same length. from collections import Counter leg_lengths = [l1, l2, l3, l4] count = Counter(leg_lengths) # At least one length appears twice or more. return any(v >= 2 for v in count.values())"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). A palindromic substring is any contiguous portion of a string that is a palindrome. For instance, given the string \\"banana\\", the palindromic substrings include \\"a\\", \\"ana\\", \\"anana\\", etc. Write a program to find the longest palindromic substring in a given string. If there are multiple longest palindromic substrings of the same length, return the one which appears first in the string. -----Input----- The input consists of a single line containing the string S. The string S contains only lowercase English letters. -----Output----- The output should be a single line containing the longest palindromic substring of S. -----Constraints----- 1 ≤ |S| ≤ 1000 -----Example----- Input: babad Output: bab -----Example----- Input: cbbd Output: bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. If there are multiple longest palindromic substrings of the same length, returns the one which appears first in the string. if not s or len(s) == 1: return s def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): p1 = expand_around_center(s, i, i) p2 = expand_around_center(s, i, i + 1) if len(p1) > len(longest): longest = p1 if len(p2) > len(longest): longest = p2 return longest"},{"question":"# Task You are given a list of integers representing temperatures recorded over n days. Your task is to find out the maximum temperature difference between any two days such that the later day has a higher temperature than the earlier day. # Example Given the list of temperatures ```temps``` for `n` days: ``` temps = [30, 25, 27, 40, 50, 10, 35] ``` The maximum temperature difference is 25, occurring between day 2 (temperature 25) and day 5 (temperature 50). ```python max_temp_diff(temps) = 25 ``` # Input - A list `temps` of integers containing `n` (1 ≤ n ≤ 10^5) elements representing the temperatures recorded over `n` days. # Output - An integer representing the maximum temperature difference between any two days such that the later day has a higher temperature than the earlier day. # Function Signature ```python def max_temp_diff(temps: List[int]) -> int: pass ``` # Sample Test Cases ```python assert max_temp_diff([30, 25, 27, 40, 50, 10, 35]) == 25 assert max_temp_diff([10, 8, 6, 4]) == 0 assert max_temp_diff([1, 2, 3, 4, 5]) == 4 assert max_temp_diff([5, 10, 4, 6, 12, 3, 9]) == 8 ``` Use these examples to ensure the implementation of your function is correct.","solution":"from typing import List def max_temp_diff(temps: List[int]) -> int: Returns the maximum temperature difference between any two days such that the later day has a higher temperature than the earlier day. if not temps: return 0 min_temp_so_far = temps[0] max_diff = 0 for temp in temps[1:]: if temp > min_temp_so_far: max_diff = max(max_diff, temp - min_temp_so_far) else: min_temp_so_far = temp return max_diff"},{"question":"Write a function that takes an array of integers and returns the sum of the integers with odd indices, multiplied by the last element of the array. If the input array is empty, return 0. For example, `solve([1, 2, 3, 4, 5]) = 30`, because (2+4)*5 = 30, and `solve([7, 1, 8, 2, 3]) = 15` because (1+2)*3 = 9. Implement the function that performs this task while handling edge cases effectively.","solution":"def solve(arr): Takes an array of integers and returns the sum of integers with odd indices, multiplied by the last element of the array. If the input array is empty, return 0. if not arr: return 0 sum_odd_indices = sum(arr[i] for i in range(1, len(arr), 2)) return sum_odd_indices * arr[-1]"},{"question":"=====Function Descriptions===== The itertools module in Python provides functions that create iterators for efficient looping. To use the itertools module, we need to import it using: import itertools =====Problem Statement===== You are given a list of integers and a positive integer k. Your task is to find all possible combinations of the given list of integers of length k and print these combinations in lexicographical order. =====Input Format===== The first line contains an integer N, the number of elements in the list. The second line contains N space separated integers. The third line contains a single integer k. =====Output Format===== Print each combination in a new line. Each combination should be output as a space-separated list of integers and combinations should be printed in lexicographical order. =====Sample Input===== 5 1 2 3 4 5 3 =====Sample Output===== 1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5 2 3 4 2 3 5 2 4 5 3 4 5","solution":"import itertools def find_combinations(numbers, k): Finds all possible combinations of the given list of integers of length k in lexicographical order. Args: numbers : list : list of integers k : int : length of each combination Returns: list of tuples : each tuple is a combination of k integers in lexicographical order numbers.sort() combinations = itertools.combinations(numbers, k) return list(combinations)"},{"question":"Given an array of integers nums containing n distinct numbers in the range [0, n], write an algorithm to find the one number that is missing from the array. Example 1: Input: nums = [3, 0, 1] Output: 2 Example 2: Input: nums = [0, 1] Output: 2 Example 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Note: Your algorithm should run in linear time complexity. Could you implement it using only constant extra space complexity?","solution":"def missing_number(nums): This function takes an array of integers containing n distinct numbers in the range [0, n] and returns the one number that is missing from the array. n = len(nums) total_sum = n * (n + 1) / 2 # Sum of first n natural numbers array_sum = sum(nums) # Sum of elements in array return int(total_sum - array_sum)"},{"question":"A common way to create a frequency analysis for solving monoalphabetic substitution ciphers is to analyze the frequency distribution of letters in a given ciphertext. By comparing the frequency distribution of each letter in the ciphertext to known frequency distributions in the English language, we can sometimes deduce the original plaintext. Given a ciphertext, implement a function that returns a dictionary representing the frequency of each letter in the provided ciphertext. The function signature should be: ```python def letter_frequency_analysis(ciphertext: str) -> dict: pass ``` # Input: - `ciphertext`, a string containing the ciphertext composed only of alphabetic characters. # Output: - A dictionary where each key is a letter from \'a\' to \'z\' (in lowercase) and the value is the frequency of that letter in the given ciphertext. # Example: ```python ciphertext = \\"helloHElloHELlohello\\" letter_frequency_analysis(ciphertext) ``` **Output:** ```python { \'a\': 0, \'b\': 0, \'c\': 0, \'d\': 0, \'e\': 5, \'f\': 0, \'g\': 0, \'h\': 5, \'i\': 0, \'j\': 0, \'k\': 0, \'l\': 5, \'m\': 0, \'n\': 0, \'o\': 5, \'p\': 0, \'q\': 0, \'r\': 0, \'s\': 0, \'t\': 0, \'u\': 0, \'v\': 0, \'w\': 0, \'x\': 0, \'y\': 0, \'z\': 0 } ``` Note: The letter frequencies should be case insensitive (i.e., \'H\' and \'h\' should both be counted as \'h\').","solution":"def letter_frequency_analysis(ciphertext: str) -> dict: Analyzes the frequency distribution of letters in the provided ciphertext. Args: ciphertext (str): The input ciphertext containing only alphabetic characters. Returns: dict: A dictionary with the frequency of each letter from \'a\' to \'z\'. # Initialize a dictionary with each letter from \'a\' to \'z\' set to 0 frequency_dict = {chr(i): 0 for i in range(ord(\'a\'), ord(\'z\') + 1)} # Convert the ciphertext to lowercase to ensure case insensitivity ciphertext = ciphertext.lower() # Count the frequency of each letter in the ciphertext for char in ciphertext: if char in frequency_dict: frequency_dict[char] += 1 return frequency_dict"},{"question":"# Task Samuel likes to spend his free time in his backyard garden planting flowers. This year, he has decided to create a beautiful flowerbed using only tulips. However, the flowerbed has certain planting rules. Tulips cannot be planted in adjacent plots, as they will compete for nutrients and have stunted growth. Given an array representing Samuel\'s flowerbed, where `0` means the plot is empty and `1` means the plot contains a tulip, determine if Samuel can plant the given number of tulips without violating the no-adjacent-plot rule. # Example For `flowerbed = [1, 0, 0, 0, 1], n = 1`, the output should be `true`. Samuel can plant `1` tulip in the middle plot (index 2). For `flowerbed = [1, 0, 0, 0, 1], n = 2`, the output should be `false`. Planting `2` tulips would require violating the no-adjacent-plot rule. # Input/Output - `[input]` array `flowerbed` An array representing the flowerbed. - `[input]` integer `n` The number of tulips Samuel wants to plant. - `[output]` a boolean Returns `true` if Samuel can plant `n` tulips without violating the no-adjacent-plot rule, otherwise returns `false`.","solution":"def can_place_tulips(flowerbed, n): Determines if n tulips can be planted in the flowerbed without violating the no-adjacent-plot rule. :param flowerbed: List[int] - a list representing the flowerbed :param n: int - the number of tulips to be planted :return: bool - True if the tulips can be planted, otherwise False count = 0 length = len(flowerbed) for i in range(length): if (flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == length - 1 or flowerbed[i + 1] == 0)): flowerbed[i] = 1 count += 1 if count >= n: return True return count >= n"},{"question":"Design a class `Scheduler` that simulates a task scheduler managing a set of tasks with their respective execution times. Your scheduler should be able to add tasks, execute tasks, and get the current state of tasks. The tasks can either be running, completed, or waiting to be run. # Task Scheduler Contract add_task(name, duration) `add_task` creates a new task with a given `name` and `duration` (in seconds). It should initialize the task\'s state to \\"waiting\\". It returns the unique identifier (id) of the created task. run_task(id, time) `run_task` executes a task identified by its unique `id`. It takes the `time` (in seconds) you wish to run the task for. This method should update the task state to \\"running\\" if it was previously \\"waiting\\". If the task is still not completed after the provided `time`, it remains in the \\"running\\" state with reduced remaining duration. If the task completes during this run, its state should change to \\"completed\\". If an invalid `id` is provided, an exception should be thrown. get_state(id) This method accepts a task `id` and returns the current state of the task (either \\"waiting\\", \\"running\\", or \\"completed\\"). If an invalid `id` is provided, an exception should be thrown. get_remaining_duration(id) `get_remaining_duration` returns the remaining duration for the task identified by the given `id`. # Example ```python scheduler = Scheduler() task_id = scheduler.add_task(\\"Task1\\", 100) scheduler.run_task(task_id, 50) state = scheduler.get_state(task_id) # returns \\"running\\" remaining = scheduler.get_remaining_duration(task_id) # returns 50 scheduler.run_task(task_id, 50) state = scheduler.get_state(task_id) # returns \\"completed\\" remaining = scheduler.get_remaining_duration(task_id) # returns 0 ```","solution":"class Task: def __init__(self, name, duration): self.name = name self.duration = duration self.remaining_duration = duration self.state = \\"waiting\\" def run(self, time): if self.state == \\"waiting\\": self.state = \\"running\\" self.remaining_duration -= time if self.remaining_duration <= 0: self.remaining_duration = 0 self.state = \\"completed\\" class Scheduler: def __init__(self): self.tasks = {} self.next_id = 1 def add_task(self, name, duration): task_id = self.next_id self.next_id += 1 self.tasks[task_id] = Task(name, duration) return task_id def run_task(self, id, time): if id not in self.tasks: raise Exception(\\"Invalid task ID\\") task = self.tasks[id] task.run(time) def get_state(self, id): if id not in self.tasks: raise Exception(\\"Invalid task ID\\") return self.tasks[id].state def get_remaining_duration(self, id): if id not in self.tasks: raise Exception(\\"Invalid task ID\\") return self.tasks[id].remaining_duration"},{"question":"Complete the function that takes a list of integers and returns a new list with duplicates removed while preserving the order of the first occurrence of each element. Example Given `lst = [4, 5, 4, 1, 2, 3, 5, 2, 3]` the function should return `[4, 5, 1, 2, 3]`, as these are the first occurrences of the integers in the list, and subsequent duplicates are removed. - **Note**: The input list can contain up to 10^6 elements. You should aim for a solution with linear time complexity.","solution":"def remove_duplicates(lst): Removes duplicates from the input list while preserving the order of the first occurrence. seen = set() result = [] for number in lst: if number not in seen: seen.add(number) result.append(number) return result"},{"question":"You are given a list of words. Your task is to group these words into anagram groups. An anagram is a word formed by rearranging the letters of another, such as `listen` is an anagram of `silent`. Wind up similar anagram words together in a group. Each word should belong to exactly one group. Function Signature ```python def group_anagrams(words: List[str]) -> List[List[str]]: # your code here ``` Input - A list of words, `words` (1 <= len(words) <= 10^4). Each word is a non-empty string of lowercase letters from English alphabet (1 <= len(word) <= 100). Output - A list of groups, where each group is a list of words that are anagrams of each other. Example ```python group_anagrams([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"rat\\", \\"tar\\", \\"art\\"]) # Output: [[\'listen\', \'silent\', \'enlist\'], [\'google\', \'gooegl\'], [\'rat\', \'tar\', \'art\']] ``` # Notes - Words in each group should be in the order of their first appearance in the input list. - The order of groups in the output list does not matter.","solution":"from typing import List from collections import defaultdict def group_anagrams(words: List[str]) -> List[List[str]]: Groups words into anagram groups. Args: words (List[str]): A list of words to be grouped. Returns: List[List[str]]: A list of lists where each inner list contains anagram words. anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Bob loves palindromes. A palindrome is a string that reads the same forwards and backwards. Bob has a string s and he wants to know if it\'s possible to make it a palindrome by rearranging its characters. If it\'s possible, he wants to know the smallest possible lexicographical palindrome that can be formed. If it is not possible to make it a palindrome, output \\"IMPOSSIBLE\\". -----Input----- The input consists of a single line containing the string s. -----Output----- Output the smallest lexicographical palindrome that can be formed using all the characters of s, or \\"IMPOSSIBLE\\" if no palindrome can be formed. -----Constraints----- - 1 ≤ |s| ≤ 1000 - The string s consists of lowercase English letters only. -----Example----- Input: aabb Output: abba Input: abc Output: IMPOSSIBLE Input: aaabbbb Output: abbabba","solution":"def smallest_lexicographical_palindrome(s): from collections import Counter # Count the frequency of each character char_count = Counter(s) # Check the number of characters with odd frequency odd_char_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character have odd frequency, it is impossible to form a palindrome if odd_char_count > 1: return \\"IMPOSSIBLE\\" # Separate characters into two parts: the first half and the center character (if any) first_half = [] center = \'\' for char in sorted(char_count): count = char_count[char] if count % 2 != 0: center = char first_half.append(char * (count // 2)) # Join and form the smallest lexicographical palindrome first_half_str = \'\'.join(first_half) palindrome = first_half_str + center + first_half_str[::-1] return palindrome"},{"question":"You are given an integer array `nums` where each element represents the cost of a stair. Once you pay the cost, you can either climb one or two steps. You need to find the minimum cost to reach the top of the floor (beyond the last step). You can either start from step 0 or step 1. Return the minimum cost to reach the top of the floor. Example 1: Input: nums = [10, 15, 20] Output: 15 Explanation: You will start at step 1 and pay 15. Then you can reach the top directly. Example 2: Input: nums = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1] Output: 6 Explanation: You will start at step 0 and pay 1. You\'ll skip step 1 and pay 1, then step 3 and pay 1, then step 5 and pay 1, and finally step 8 and pay 1. The total cost will be 1+1+1+1+1 = 5. Constraints: - `1 <= nums.length <= 10^5` - `0 <= nums[i] <= 1000`","solution":"def minCostClimbingStairs(nums): Returns the minimum cost to reach the top of the floor. n = len(nums) if n == 1: return nums[0] dp = [0] * n dp[0] = nums[0] dp[1] = nums[1] for i in range(2, n): dp[i] = nums[i] + min(dp[i-1], dp[i-2]) return min(dp[-1], dp[-2]) # because you can either end on the last or second last step"},{"question":"You are given an array of integers representing the heights of buildings, where the width of each building is 1. Assume it will always rain enough water to fill all possible empty spaces between the buildings completely. Calculate and return the total volume of water that would be trapped between the buildings after the rain. Example 1: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Example 2: Input: heights = [4,2,0,3,2,5] Output: 9 Example 3: Input: heights = [1,0,1] Output: 1 Constraints: 1 <= heights.length <= 10^4 0 <= heights[i] <= 10^5","solution":"def trap_rain_water(heights): Calculate the total volume of water that would be trapped between the buildings. :param heights: List of integers representing the heights of buildings. :return: Total volume of trapped water. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Write a function that rearranges books on a shelf in a library. Each book is identified by a unique positive integer and some of the books are misplaced. Your task is to reorder the books such that all books appear in ascending order, with misplaced books either correctly placed or removed from the shelf. Books are represented with numbers, `1 to n` A misplaced book can be either too early or too late in the order and is represented with: A misplaced book is a book that does not follow the sequential order from 1 to n, e.g., if the sequence is `[1, 2, 4, 3]` then book `4` and `3` are misplaced and need to be rearranged. A shelf can look like this: ``` [ 1, 2, 4, 3, 6, 5, 9, 7, 10 ] ``` Write a program to reorder the books on the shelf such that all books are in ascending order and all misplaced books are either correctly placed or removed. The INPUT will be an array representing the shelf of books: `[1, 2, 4, 3, 6, 5, 9, 7, 10]` The OUTPUT should be the shelf of books in ascending order with misplacements either solved or removed: `[1, 2, 3, 4, 5, 6, 7, 10]` Conditions to be met: 1. The books should be presented in strictly ascending order from 1 to n by removing any misplaced books or replacing them if they fit into the correct position. 2. The order of books in the original shelf should be preserved as much as possible while placing correctly ordered books. 3. If a misplaced book can be correctly ordered in the sequence it should be repositioned, otherwise, it should be removed.","solution":"def rearrange_books(shelf): Rearranges books on a shelf such that all books are in ascending order. Misplaced books are either correctly placed or removed. Args: shelf (list of int): List of integers representing the books on the shelf. Returns: list of int: The rearranged shelf in ascending order. # Remove duplicates shelf = list(set(shelf)) # Sort and return the shelf shelf.sort() return shelf"},{"question":"You are given an integer array `nums` and an integer `k`. Move the `k` greatest elements in the `nums` array to the beginning of the array without changing their relative order and print the updated array. The remaining elements should follow in their original order. Example 1: Input: nums = [4, 5, 1, 3, 2], k = 2 Output: [5, 4, 1, 3, 2] Example 2: Input: nums = [10, 9, 8, 7, 6], k = 3 Output: [10, 9, 8, 7, 6] Note: 1. The length of the array will be in the range [1, 1000]. 2. The value of each element will be in the range [1, 10000]. 3. The value of k will be in the range [1, length of the array].","solution":"def move_k_greatest(nums, k): Moves the k greatest elements to the beginning of the array without changing their relative order. # Step 1: Find the k greatest elements k_greatest = sorted(nums, reverse=True)[:k] # Step 2: Iterate through original list and create a new list with the k greatest elements first k_greatest_set = set(k_greatest) remaining_elements = [num for num in nums if num not in k_greatest_set] result = k_greatest + remaining_elements return result # Example usage: # nums = [4, 5, 1, 3, 2] # k = 2 # print(move_k_greatest(nums, k)) # Output: [5, 4, 1, 3, 2]"},{"question":"Write a function `crossword_helper` that takes in a string of words separated by a single space. The function should return a string where every even-indexed word in the input string appears reversed and every odd-indexed word appears unchanged. Example: ```python def crossword_helper(sentence: str) -> str: # Your code here # Test cases print(crossword_helper(\\"practice makes perfect\\")) # Expected output: \\"ecitcarp makes tcefrep\\" print(crossword_helper(\\"hello world\\")) # Expected output: \\"olleh world\\" print(crossword_helper(\\"keep it simple\\")) # Expected output: \\"peek it elpmis\\" print(crossword_helper(\\"level up your skills\\")) # Expected output: \\"level pu your slliks\\" ```","solution":"def crossword_helper(sentence: str) -> str: words = sentence.split() for i in range(len(words)): if i % 2 == 0: words[i] = words[i][::-1] return \' \'.join(words)"},{"question":"Story Alice loves solving puzzles, especially those involving numbers. One day, she stumbled upon an interesting sequence game that involves rearranging strings. She found that given a string representing a number, she had to find the next permutation of that number in lexicographical order. If such permutation is not possible, she should return the smallest permutation of that number. Lexicographically next permutation for a given number rearranges the digits in such a way that the number formed is just larger than the current number. If no such rearrangement is possible, the function should rearrange it to the smallest possible number formed by those digits. ___ Task Write a function that takes a string `num`, representing a non-negative integer, and returns the next lexicographical permutation of the number. If it is not possible to find such a permutation, return the smallest permutation of `num`. ___ Examples ``` next_permutation(\\"123\\") == \\"132\\" next_permutation(\\"321\\") == \\"123\\" next_permutation(\\"115\\") == \\"151\\" next_permutation(\\"54321\\")== \\"12345\\" next_permutation(\\"0\\") == \\"0\\" next_permutation(\\"120\\") == \\"201\\" ``` Function Signature ```python def next_permutation(num: str) -> str: pass ``` ___","solution":"def next_permutation(num: str) -> str: Returns the next lexicographical permutation of the given number represented as a string. If no such permutation is possible, return the smallest permutation of the number. # Convert the string to a list of characters for easier manipulation num_list = list(num) n = len(num_list) # Step 1: Find the largest index i such that num_list[i] < num_list[i + 1]. for i in range(n - 2, -1, -1): if num_list[i] < num_list[i + 1]: break else: # If no such index exists, reverse the list to get the smallest permutation. num_list.reverse() return \'\'.join(num_list) # Step 2: Find the largest index j > i such that num_list[i] < num_list[j]. for j in range(n - 1, i, -1): if num_list[i] < num_list[j]: break # Step 3: Swap the value of num_list[i] with that of num_list[j]. num_list[i], num_list[j] = num_list[j], num_list[i] # Step 4: Reverse the subsequence from index i+1 to the end of the list. num_list[i + 1:] = reversed(num_list[i + 1:]) return \'\'.join(num_list)"},{"question":"Write a function that takes a list of integers and returns the list with all its elements shifted to the right by `k` positions. When elements are shifted out of the list\'s end, they should wrap around and come back at the beginning. For example, given the list `[1, 2, 3, 4, 5]` and `k = 2`, the function should return `[4, 5, 1, 2, 3]`. # Input Details You will be given a list of integers (`arr`) and an integer (`k`) representing the number of positions to shift. - `arr`: List of integers, where `1 <= len(arr) <= 100000` - `k`: Integer, where `0 <= k <= 100000` # Output Details Return the list of integers after shifting to the right by `k` positions. If the input array is empty, return an empty list. # Examples ``` shift_right([1, 2, 3, 4, 5], 2) => [4, 5, 1, 2, 3] shift_right([3, 8, 9, 7, 6], 3) => [9, 7, 6, 3, 8] shift_right([], 5) => [] shift_right([1, 2, 3], 0) => [1, 2, 3] shift_right([1, 2, 3], 1) => [3, 1, 2] ```","solution":"def shift_right(arr, k): Shifts the elements of the list `arr` to the right by `k` positions. Parameters: arr (list of int): The list of integers to be shifted. k (int): The number of positions to shift the elements. Returns: list of int: The shifted list of integers. if not arr: return [] n = len(arr) # Ensure k is within the range of 0 to n-1 k = k % n return arr[-k:] + arr[:-k]"},{"question":"**Calculate the Prize** You are participating in a programming competition where you accumulate points based on your performance in each round. The competition has multiple rounds, and the total prize money is distributed according to the points earned. Write a function that takes an array of integers as an argument, where each integer represents the points you earned in each round. Your function should return the total prize money you won based on the following rule: for every point earned, you win 10. For example, if the input array is `[5, 10, 15]`, your function should return `300` since `(5 + 10 + 15) * 10 = 300`. Make sure your function handles edge cases, such as an empty array (which means no points were earned and hence no prize money). The input array will always contain non-negative integers. Here is a function signature to guide you: ```python def calculate_prize(points): # Your code here ```","solution":"def calculate_prize(points): Returns the total prize money based on the points earned in each round. Parameters: points (list of int): A list where each integer represents the points earned in each round. Returns: int: The total prize money earned. return sum(points) * 10"},{"question":"A famous detective is investigating a series of mysterious events in a large building. The floor plan of the building is represented as a 2D grid of dimensions `N x M`, where each cell can either be a wall (denoted by `#`) or a free space (denoted by `.`). The detective can move up, down, left, or right to an adjacent free space but cannot move through walls. The detective starts at the top-left corner of the grid (cell `(1, 1)`) and needs to reach the bottom-right corner of the grid (cell `(N, M)`). Find the number of different paths the detective can take to reach the bottom-right corner from the top-left corner while avoiding the walls. If there are no possible paths, return `0`. -----Input:----- - The first line contains one integer `T`, the number of test cases. - For each test case: - The first line contains two integers `N` and `M`, the dimensions of the grid. - The next `N` lines each contain `M` characters (either `.` or `#`), representing the grid. -----Output:----- For each test case, output a single line containing the number of different paths from the top-left corner to the bottom-right corner. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 100 - The grid will always have at least one free space at `(1, 1)` and `(N, M)` -----Sample Input:----- 1 3 3 .#. . ... -----Sample Output:----- 1 -----EXPLANATION:----- The grid for the given input: ``` .#. . ... ``` The only way to reach the bottom-right corner is: `(1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3)`. Thus, there is one valid path.","solution":"from collections import deque def num_paths(grid, N, M): # Check if the start or end point is blocked if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 # Initialize the number of paths grid paths = [[0] * M for _ in range(N)] paths[0][0] = 1 # Starting position # Breadth-First Search to calculate the number of paths queue = deque([(0, 0)]) directions = [(1, 0), (0, 1)] # Only right and down movements while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\': if paths[nx][ny] == 0: paths[nx][ny] = paths[x][y] queue.append((nx, ny)) else: paths[nx][ny] += paths[x][y] return paths[N-1][M-1] def count_paths(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] results.append(num_paths(grid, N, M)) return results"},{"question":"Given an integer array **nums**, return the length of the longest subsequence such that all elements of the subsequence are distinct and the difference between any two consecutive elements is exactly 1. If there are multiple such subsequences, return the length of the longest one. If no such subsequence exists, return 0. Expect large Inputs! Example: Input: nums = [1, 2, 2, 3, 1, 4, 5, 6] Output: 6 Explanation: One of the longest subsequences is [1, 2, 3, 4, 5, 6]","solution":"def longest_consecutive_subsequence(nums): Given an integer array nums, returns the length of the longest subsequence such that all elements of the subsequence are distinct and the difference between any two consecutive elements is exactly 1. If no such subsequence exists, return 0. if not nums: return 0 nums = list(set(nums)) nums.sort() longest_streak = 0 current_streak = 1 for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes a string of lowercase characters and an integer k. The function should return the number of distinct substrings of length k found in the given string. If k is greater than the length of the string, return 0. Examples ``` (\\"abcabc\\", 3) ==> 3 # Distinct substrings: \\"abc\\", \\"bca\\", \\"cab\\" (\\"aaaa\\", 2) ==> 1 # Distinct substrings: \\"aa\\" ```","solution":"def distinct_substrings(s, k): Returns the number of distinct substrings of length k found in the given string. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substr = s[i:i + k] substrings.add(substr) return len(substrings)"},{"question":"Given a matrix of integers, your task is to find the hourglass with the maximum sum. An hourglass in a matrix is defined as a subset of values with indices falling in the following pattern: a b c d e f g Specifically, given a 2D array, `arr`, of integers with dimensions 6x6, analyze the array to find the maximum sum of any hourglass in the array. # Example Consider the following 6x6 array: ``` 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 2 4 4 0 0 0 0 2 0 0 0 0 1 2 4 0 ``` In this array, the hourglasses have the following sums: ``` Sum of hourglass starting at (0, 0) = 1 + 1 + 1 + 1 + 1 + 1 = 7 Sum of hourglass starting at (0, 1) = 1 + 0 + 0 + 1 + 0 + 0 + 4 = 4 Sum of hourglass starting at (0, 2) = 1 + 1 + 4 + 4 = 5 Sum of hourglass starting at (0, 3) = 0 + 4 + 2 = 6 Sum of hourglass starting at (1, 0) = 6 + 0 + 0 = 7 Sum of hourglass starting at (1, 3) = 0 + 2 + 3 + 1 + 2 + 4 = 19 ``` The maximum hourglass sum in the above example is 19. # Function Signature ```python def max_hourglass_sum(arr): # implement this function ``` # Input - A 2D array `arr` of integers with dimensions 6x6. # Output - An integer representing the maximum hourglass sum. # Constraints - `arr` will always be a 6x6 matrix. - The integers in the 2D array will range from -9 to 9. # Example ```python arr = [ [1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 2, 4, 4, 0], [0, 0, 0, 2, 0, 0], [0, 0, 1, 2, 4, 0] ] output = max_hourglass_sum(arr) # output should be 19 ```","solution":"def max_hourglass_sum(arr): Returns the maximum hourglass sum in the given 6x6 2D array. An hourglass sum is defined as the sum of array values that form an hourglass shape in the array. max_sum = float(\'-inf\') # Initialize to very small number # Loop through each possible hourglass in the 6x6 array for i in range(4): for j in range(4): # Calculate sum of the current hourglass current_sum = ( arr[i][j] + arr[i][j+1] + arr[i][j+2] + arr[i+1][j+1] + arr[i+2][j] + arr[i+2][j+1] + arr[i+2][j+2] ) # Update max_sum if current_sum is greater if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of trains arriving at a railway station and each train has an arrival time and departure time. Your task is to find the minimum number of platforms required at the railway station so that no train has to wait. Each train will arrive and depart on the same day, and no train will stay beyond one day. Arrival and departure times are given in 24-hour format (HH:MM). Write a function to determine the minimum number of platforms needed. Example 1: Input: arr = [\\"09:00\\", \\"09:40\\", \\"09:50\\", \\"11:00\\", \\"15:00\\", \\"18:00\\"], dep = [\\"09:10\\", \\"12:00\\", \\"11:20\\", \\"11:30\\", \\"19:00\\", \\"20:00\\"] Output: 3 Explanation: At 09:40, there will be three trains at the station (for arr[1], arr[2], and dep[0]), so three platforms are needed. Example 2: Input: arr = [\\"12:00\\", \\"12:10\\", \\"12:25\\"], dep = [\\"12:30\\", \\"12:15\\", \\"12:40\\"] Output: 2 Explanation: At 12:10, there will be two trains at the station (for arr[0] and arr[1]), so two platforms are needed. Constraints: 1. 1 <= arr.length == dep.length <= 500 2. \\"HH:MM\\" format for arrival and departure times 3. Arrival times are not necessarily sorted. 4. Departure always occurs after arrival for any given train.","solution":"def min_platforms_needed(arr, dep): Returns the minimum number of platforms required at the railway station so that no train has to wait. arr_times = sorted([int(a[:2])*60 + int(a[3:]) for a in arr]) dep_times = sorted([int(d[:2])*60 + int(d[3:]) for d in dep]) platform_needed = 1 result = 1 i = 1 j = 0 n = len(arr) while (i < n and j < n): if arr_times[i] <= dep_times[j]: platform_needed += 1 i += 1 elif arr_times[i] > dep_times[j]: platform_needed -= 1 j += 1 if platform_needed > result: result = platform_needed return result"},{"question":"# Library Book Returns In a local library, books are borrowed and then returned. Upon return, books are kept in a sorting area before they are placed back on their designated shelves. Each book has a designated shelf identified by a unique alphanumeric shelf code. The library staff needs help in organizing and counting the books for a given shelf code. # How it works Each book in the sorting area can be identified by a unique combination of its title and the shelf code. `books` is a list/array of tuples where each tuple contains a book title (string) and a shelf code (string). Implement the `count_books` function to help the library staff organize and count all books that belong to the specified shelf code. # Kata Task Write a function `count_books(books, shelf_code)` to count and list all book titles belonging to the specified shelf code. Example Given * `books = [(\\"Pride and Prejudice\\", \\"A12\\"), (\\"Moby Dick\\", \\"A12\\"), (\\"Dracula\\", \\"B34\\"), (\\"The Great Gatsby\\", \\"A12\\"), (\\"1984\\", \\"C56\\")]` * `shelf_code = \\"A12\\"` You should return a count of 3 and a sorted list of the titles of those books. **Answer:** `(3, [\\"Moby Dick\\", \\"Pride and Prejudice\\", \\"The Great Gatsby\\"])` **Notes**: * The count should be an integer. * The titles should be sorted in alphabetical order. *Good Luck.*","solution":"def count_books(books, shelf_code): Counts and lists all book titles belonging to the specified shelf code. Args: books (list): A list of tuples where each tuple contains a book title (string) and a shelf code (string). shelf_code (string): The shelf code to count and list books for. Returns: tuple: A tuple containing the count of books and a sorted list of book titles. filtered_books = [title for title, code in books if code == shelf_code] return len(filtered_books), sorted(filtered_books) # Example usage: # books = [(\\"Pride and Prejudice\\", \\"A12\\"), (\\"Moby Dick\\", \\"A12\\"), (\\"Dracula\\", \\"B34\\"), # (\\"The Great Gatsby\\", \\"A12\\"), (\\"1984\\", \\"C56\\")] # print(count_books(books, \\"A12\\")) # Output should be: (3, [\\"Moby Dick\\", \\"Pride and Prejudice\\", \\"The Great Gatsby\\"])"},{"question":"# Story Cinderella needs to be home by midnight, but she has lost her way in the forest. You need to help Cinderella find the shortest path back to the castle. # Task Given a grid that represents the forest, where `1` represents a path and `0` represents an obstacle. Cinderella can move up, down, left, or right but cannot move through obstacles. Find the shortest path from the top-left corner of the grid (starting point) to the bottom-right corner (castle). # Input - A 2D list of integers representing the grid. - Each cell in the grid is either `1` (path) or `0` (obstacle). - The grid has at least 2 rows and 2 columns and is no larger than 100x100. # Output - An integer representing the length of the shortest path from the top-left to the bottom-right corner. - If no such path exists, return `-1`. # Example **Input** ``` [ [1, 0, 1, 1], [1, 1, 1, 0], [0, 1, 0, 1], [1, 1, 1, 1] ] ``` **Output** ``` 5 ``` **Explanation** The shortest path is marked as follows (with `*` indicating the path): ``` [ [*1, 0, 1, 1], [*1, *1, *1, 0], [ 0, 1, 0, 1], [ 1, *1, *1, *1] ] ``` # Note - The top-left cell (0,0) and bottom-right cell (n-1, m-1) are always 1 (path).","solution":"from collections import deque def shortest_path_forest(grid): Returns the length of the shortest path from the top-left to the bottom-right corner of the grid. If no path exists, returns -1. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # To track visited cells visited = [[False] * cols for _ in range(rows)] visited[0][0] = True # Queue for BFS (stores (row, col, distance)) queue = deque([(0, 0, 1)]) while queue: r, c, dist = queue.popleft() # If we\'ve reached the bottom-right corner if r == rows - 1 and c == cols - 1: return dist # Explore all four possible directions for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < rows and 0 <= new_c < cols and grid[new_r][new_c] == 1 and not visited[new_r][new_c]: visited[new_r][new_c] = True queue.append((new_r, new_c, dist + 1)) # If no valid path is found return -1"},{"question":"You are given a string s of length n consisting of uppercase and lowercase English letters. Your task is to process q queries. Each query is described by three integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 26). For each query, you need to determine the k-th most frequent character in the substring s[l, r] (both inclusive). If there are ties, choose the lexicographically smaller character. -----Input----- The first line contains the string s. The second line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains three integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 26) — the description of the i-th query. -----Output----- For each query, print the k-th most frequent character in the substring s[l, r]. If there are ties, choose the lexicographically smaller character. If there are fewer than k distinct characters in the selected substring, print \\"No character\\". -----Example----- Input aabbccdd 3 1 4 2 1 8 4 5 7 1 Output b d c -----Explanation----- For the first query, the substring from 1 to 4 is \\"aabb\\". The frequencies are: {\'a\': 2, \'b\': 2}. The 2nd most frequent character is \'b\'. For the second query, the substring from 1 to 8 is \\"aabbccdd\\". The frequencies are: {\'a\': 2, \'b\': 2, \'c\': 2, \'d\': 2}. The 4th most frequent character is \'d\'. For the third query, the substring from 5 to 7 is \\"bcc\\". The frequencies are: {\'b\': 1, \'c\': 2}. The 1st most frequent character is \'c\'.","solution":"def kth_most_frequent_character(s, queries): def get_kth_frequent_character(substring, k): from collections import Counter freq_counter = Counter(substring) freq_list = sorted(sorted(freq_counter.items()), key=lambda x: (-x[1], x[0])) if len(freq_list) < k: return \\"No character\\" return freq_list[k-1][0] results = [] for (l, r, k) in queries: substring = s[l-1:r] result = get_kth_frequent_character(substring, k) results.append(result) return results"},{"question":"Create a function that flattens an array of nested arrays into a single-level array. Nothing more, Nothing less. ```python [1, [2, 3], [4, [5, 6, [7]]]] ``` should be converted into ```python [1, 2, 3, 4, 5, 6, 7] ``` ```if:python **Note**: The order of elements should be maintained as they appear in the original nested array. ``` Good Luck!","solution":"def flatten_array(arr): Flattens a nested array into a single-level array. Args: - arr: list of nested lists Returns: - list: a single-level list with all elements flattened_list = [] def _flatten(sub_arr): for el in sub_arr: if isinstance(el, list): _flatten(el) else: flattened_list.append(el) _flatten(arr) return flattened_list"},{"question":"You have a list of numbers `nums` and an integer `k`. You are tasked with finding the minimum length subarray in `nums` such that the sum of the elements in this subarray is greater than or equal to `k`. If there is no such subarray, return `0`. Implement the function `minSubArrayLen(nums, k)` which takes two parameters: 1. `nums` - List of non-negative integers. 2. `k` - A non-negative integer. The function should return an integer representing the length of the minimum subarray whose sum is at least `k`. **Example:** ``` minSubArrayLen([2, 3, 1, 2, 4, 3], 7) -> 2 ``` Explanation: The subarray [4, 3] has the minimal length under the problem constraint. **Constraints:** - 1 <= `len(nums)` <= 10^5 - 0 <= `nums[i]` <= 10^4 - 0 <= `k` <= 10^9 ```python def minSubArrayLen(nums, k): # Your code here ``` Implement this function by leveraging an efficient algorithm to ensure it can handle large inputs within a reasonable time frame.","solution":"def minSubArrayLen(nums, k): Returns the minimum length of a contiguous subarray of which the sum ≥ k. If there isn\'t one, returns 0 instead. n = len(nums) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= k: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Write a function that takes an array of integers and determines the longest continuous subsequence where all numbers are in increasing order. The function should return the length of that subsequence. For example: ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 longest_increasing_subsequence([7, 7, 7, 7, 7]) => 1 ``` Note: - The array will always have at least one element. - The function should have a time complexity of O(n^2) or better.","solution":"def longest_increasing_subsequence(nums): Finds the length of the longest strictly increasing subsequence in the array. if not nums: return 0 # Initialize an array to store the length of the longest increasing subsequence ending at each index dp = [1] * len(nums) # Iterate through the array to fill the dp array for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # The result is the maximum value in the dp array return max(dp)"},{"question":"Write a function named `maximumSubstring` that takes two strings as input and returns the length of the longest substring that appears in both strings. You need to ensure that the function handles all edge cases, such as one or both strings being empty. You are not allowed to use any library functions that directly solve the problem. Provide a solution with time complexity O(n*m), where n and m are the lengths of the two strings. Example: Input: ``` maximumSubstring(\\"abcdef\\", \\"zcdemf\\") ``` Output: ``` 3 ``` Explanation: The longest common substring between \\"abcdef\\" and \\"zcdemf\\" is \\"cde\\", which has a length of 3.","solution":"def maximumSubstring(s1, s2): Returns the length of the longest substring that appears in both s1 and s2. n = len(s1) m = len(s2) # Create a 2D list to store lengths of longest common suffixes of substrings. dp = [[0] * (m + 1) for _ in range(n + 1)] max_length = 0 # Initialize maximum length of common substring # Build the dp array from bottom to top and right to left for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_length = max(max_length, dp[i][j]) else: dp[i][j] = 0 return max_length"},{"question":"Amara is an avid Anime collector and has a habit of categorizing her collection by various genres. She stores her collection data in a list of dictionaries, where each dictionary represents a single anime in her collection with keys \'title\', \'genre\', and \'rating\'. The \'title\' is a string representing the anime\'s name, the \'genre\' is a string representing the genre of the anime, and the \'rating\' is a float representing Amara\'s rating for that anime out of 10. Amara wants to create a recommendation system to suggest the highest rated animes from her collection based on the genre preferences of her friends. You need to write a program that, given a list of genres, returns the highest-rated anime for each genre from the collection. If there is no anime for a particular genre, the output should be \\"No Recommendation\\". -----Input:----- - The first line contains an integer N representing the number of animes in Amara\'s collection. - The next N lines each describes an anime with the title, genre, and rating separated by a comma. - The line following the animes data contains an integer Q representing the number of genres for which recommendations are needed. - The next Q lines each contains a single genre string. -----Output:----- - Q lines, each containing the title of the highest-rated anime in the corresponding genre from the input list. If there is no anime of that genre, print \\"No Recommendation\\". -----Constraints:----- - 1 leq N leq 1000 - 1 leq Q leq 100 - The title consists of alphanumeric characters and spaces, the genre is a single word consisting of alphabetic characters, and rating is a floating number between 0 and 10. -----Sample Input----- 5 \\"Naruto,Action,8.5\\" \\"One Piece,Adventure,9.0\\" \\"Attack on Titan,Action,9.5\\" \\"Your Lie in April,Drama,9.2\\" \\"Death Note,Thriller,9.0\\" 3 Action Drama Comedy -----Sample Output----- Attack on Titan Your Lie in April No Recommendation","solution":"def get_recommendations(collection_data, genres): Returns the highest rated anime for each genre from the collection. Parameters: collection_data (list): A list of dictionaries each containing keys \'title\', \'genre\', and \'rating\'. genres (list): A list of genres for which recommendations are needed. Returns: list: A list of highest rated anime titles for each genre in the same order as the genres list. genre_ratings = {} for anime in collection_data: genre = anime[\'genre\'] rating = anime[\'rating\'] if genre not in genre_ratings or rating > genre_ratings[genre][\'rating\']: genre_ratings[genre] = anime recommendations = [] for genre in genres: if genre in genre_ratings: recommendations.append(genre_ratings[genre][\'title\']) else: recommendations.append(\\"No Recommendation\\") return recommendations def parse_input(raw_input): Parse the raw input data into structured data for processing. Parameters: raw_input (list): The raw input data as a list of strings. Returns: tuple: A tuple containing the collection data (list of anime dictionaries) and genres (list of categories). N = int(raw_input[0]) collection_data = [] for i in range(1, N + 1): title, genre, rating = raw_input[i].strip(\'\\"\').split(\',\') collection_data.append({ \'title\': title.strip(), \'genre\': genre.strip(), \'rating\': float(rating.strip()) }) Q = int(raw_input[N + 1]) genres = [] for i in range(N + 2, N + 2 + Q): genres.append(raw_input[i].strip()) return collection_data, genres def main(raw_input): Main function to extract input and call the recommendation function. Parameters: raw_input (list): The raw input data as a list of strings. Returns: list: A list of highest rated anime titles for each genre in the same order as the genres list. collection_data, genres = parse_input(raw_input) return get_recommendations(collection_data, genres)"},{"question":"You are given an `n x n` grid. Your task is to write a function that reads an `n x n` matrix and returns the matrix rotated by 90 degrees clockwise. Assume `n` can be any positive integer. For example: Input: ``` 1 2 3 4 5 6 7 8 9 ``` Output: ``` 7 4 1 8 5 2 9 6 3 ``` Another example: Input: ``` 1 2 3 4 ``` Output: ``` 3 1 4 2 ``` Function signature: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` Here is how the function should work: ```python assert rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] assert rotate_matrix([ [1, 2], [3, 4] ]) == [ [3, 1], [4, 2] ] assert rotate_matrix([ [1] ]) == [ [1] ] ``` Your function will only be tested with valid `n x n` matrices where `n` is a positive integer.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given n x n matrix by 90 degrees clockwise. n = len(matrix) # Creating a new matrix to hold the rotated version rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix"},{"question":"Write a program that takes an integer N and outputs the factorial of each integer from 1 to N. -----Input----- The first line contains an integer T, the total number of test cases. Then T lines follow, each containing an integer N. -----Output----- For each test case, display the factorial of every integer from 1 to N, each on a new line. Each test case\'s results should be separated by a blank line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 12 -----Example----- Input 2 3 5 Output 1! = 1 2! = 2 3! = 6 1! = 1 2! = 2 3! = 6 4! = 24 5! = 120","solution":"import math def factorials_from_1_to_n(N): result = [] for i in range(1, N + 1): result.append(f\\"{i}! = {math.factorial(i)}\\") return result def process_test_cases(T, cases): results = [] for n in cases: results.append(\\"n\\".join(factorials_from_1_to_n(n))) return \\"nn\\".join(results)"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced with the sum of all the integers in the original list except itself. Do not use division, and ensure the function has a linear time complexity. Examples ``` [1, 2, 3, 4] => [9, 8, 7, 6] [0, 1, 2, 3] => [6, 5, 4, 3] ``` In the first example, for the input list [1, 2, 3, 4], the output list is [2 + 3 + 4, 1 + 3 + 4, 1 + 2 + 4, 1 + 2 + 3] which results in [9, 8, 7, 6]. In the second example, for the input list [0, 1, 2, 3], the output list is [1 + 2 + 3, 0 + 2 + 3, 0 + 1 + 3, 0 + 1 + 2] which results in [6, 5, 4, 3].","solution":"def replace_with_sum_excluding_self(lst): Given a list of integers, returns a new list where each integer is replaced with the sum of all the integers in the original list except itself. total_sum = sum(lst) return [total_sum - num for num in lst]"},{"question":"At a local robotics competition, each participant is required to navigate a series of checkpoint arrays. Each checkpoint array contains either a `0` or `1`, where `0` represents a passable route and `1` represents an obstacle. Your task is to help a participant determine the minimum number of changes required to make all arrays passable by converting all `1`s to `0`s. Each checkpoint array cannot be empty. The participant is given `t` test cases to solve. -----Input----- The first line contains one integer `t` (1 le t le 1000) — the number of test cases. The first line of each test case contains a single integer `n` (1 le n le 10^5) — the length of the checkpoint array. The second line of each test case contains `n` integers a_1, a_2, dots, a_n (a_i in {0, 1}) — the checkpoint array elements. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. -----Output----- For each test case print the answer to it — the minimum number of changes required to make all checkpoint arrays passable. -----Example----- Input 3 5 0 1 0 1 0 3 1 1 1 6 0 0 0 1 0 1 Output 2 3 2 ----Note---- In the first test case, you need to change the two `1`s at positions 2 and 4 to `0`s, which requires 2 changes. In the second test case, all elements are `1`s and need to be converted into `0`s, requiring 3 changes. In the third test case, you need to make 2 changes at positions 4 and 6 from `1` to `0`.","solution":"def min_changes_to_passable(t, test_cases): Given t test cases, return the minimum number of changes required to make each checkpoint array passable. Parameters: t (int): The number of test cases. test_cases (list of tuples): Each tuple contains an integer n (length of the checkpoint array) and a list a of n integers (checkpoint array elements). Returns: list of int: The minimum number of changes required for each test case. results = [] for n, a in test_cases: # Count the number of 1\'s in the array min_changes = sum(a) results.append(min_changes) return results # Example usage: # t = 3 # test_cases = [ # (5, [0, 1, 0, 1, 0]), # (3, [1, 1, 1]), # (6, [0, 0, 0, 1, 0, 1]) # ] # print(min_changes_to_passable(t, test_cases)) # Output: [2, 3, 2]"},{"question":"Given an array of integers, find the first non-repeating element in the array. If all elements are repeating, return -1. Write a function, first_non_repeating_elem, that takes an array of integers as its input, and returns the first non-repeating element or -1 if all elements repeat. Example: ``` first_non_repeating_elem([4, 5, 1, 2, 0, 4]) => 5 first_non_repeating_elem([7, 8, 7, 8, 9, 10, 9]) => 10 first_non_repeating_elem([2, 2, 3, 3, 4, 4]) => -1 ```","solution":"def first_non_repeating_elem(arr): Returns the first non-repeating element in an array of integers. If all elements are repeating, returns -1. element_count = {} # Count occurrences of each element for elem in arr: if elem in element_count: element_count[elem] += 1 else: element_count[elem] = 1 # Find the first non-repeating element for elem in arr: if element_count[elem] == 1: return elem return -1"},{"question":"Write a function `inverted_pyramid(n)` that generates an inverted pyramid of stars (\'*\') with `n` levels. Each level of the pyramid should be represented as a string, turned into a list, and returned as a list of strings. The result for each row should be centered within a width of `2*n - 1` using spaces (\' \') on either side. ``` inverted_pyramid(5) should return: [\'*********\', \' ******* \', \' ***** \', \' *** \', \' * \'] inverted_pyramid(3) should return: [\'*****\', \' *** \', \' * \'] ``` Each row of stars should be centered, padded with spaces if necessary: ``` inverted_pyramid(5) will result in: ********* 1 ******* 2 ***** 3 *** 4 * 5 inverted_pyramid(3) will result in: ***** 1 *** 2 * 3 ``` The width of the entire structure is `2*n - 1`. Good luck and enjoy coding!","solution":"def inverted_pyramid(n): Generates an inverted pyramid of stars with n levels. Parameters: n (int): The number of levels in the pyramid. Returns: list: A list of strings, where each string is a level in the inverted pyramid. pyramid = [] max_width = 2 * n - 1 for i in range(n): stars = \'*\' * (max_width - 2 * i) line = stars.center(max_width, \' \') pyramid.append(line) return pyramid"},{"question":"Polycarp is writing a new update script for his project, Fakebook. The script involves a sequence of n operations, each identified by a unique integer, such that the operations must follow a specific pattern for the update to be successful. Specifically, the operations need first to have a strictly increasing sequence followed immediately by a strictly decreasing sequence. The operations list cannot have two equal neighbouring values. Your task is to determine the length of the longest subsequence of operations that fits the described pattern. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of operations. The second line contains n integers o_1, o_2, ..., o_{n} (1 ≤ o_{i} ≤ 10^9), where o_{i} is the identifier of the i-th operation. -----Output----- Print the length of the longest subsequence of operations that has a strictly increasing sequence followed immediately by a strictly decreasing sequence. -----Examples----- Input 7 1 3 5 4 2 6 8 Output 5 Input 6 6 5 4 3 2 1 Output 6 Input 5 2 2 2 1 2 Output 2 -----Note----- In the first example, the longest subsequence that fits the required pattern is [1, 3, 5, 4, 2], which has a length of 5. In the second example, the longest subsequence that fits is the entire array since it is strictly decreasing, resulting in a length of 6. In the third example, the longest subsequence that fits is either [2, 1] or [1, 2], resulting in a length of 2.","solution":"def longest_increasing_decreasing_subsequence(n, operations): if n == 1: return 1 # dp_increasing[i] will store the length of the longest increasing subsequence ending at i dp_increasing = [1] * n for i in range(1, n): if operations[i] > operations[i - 1]: dp_increasing[i] = dp_increasing[i - 1] + 1 max_length = max(dp_increasing) # dp_decreasing[i] will store the length of the longest decreasing subsequence starting at i dp_decreasing = [1] * n for i in range(n - 2, -1, -1): if operations[i] > operations[i + 1]: dp_decreasing[i] = dp_decreasing[i + 1] + 1 max_length = max(max_length, max(dp_decreasing)) # Compute the longest sequence that first increases, then decreases result = 0 for i in range(1, n - 1): if operations[i - 1] < operations[i] > operations[i + 1]: result = max(result, dp_increasing[i - 1] + dp_decreasing[i + 1] + 1) return max(result, max_length)"},{"question":"No Problem Statement Needed Nothing to Explain Only through Thought and Experimentation Look at the testcase results, and deduce the program! --- Series Q1: 01. [Smooth or Rough?](http://www.codewars.com/kata/56d904db9963e9cf5000037d) 02. [Halfway point](http://www.codewars.com/kata/56d9292cc11bcc3629000533) 03. [Pass or Fail](http://www.codewars.com/kata/56d931ecc443d475d5000003) 04. [Left or Right](http://www.codewars.com/kata/56d93f249c844788bc000002) 05. [Singular or Plural](http://www.codewars.com/kata/56d949281b5fdc7666000004) 06. [Even or Odd](http://www.codewars.com/kata/56d98b555492513acf00077d) 07. [Peaceful Patterns](http://www.codewars.com/kata/56d9b46113f38864b8000c5a) 08. [Summation Sequences](http://www.codewars.com/kata/56d9c274c550b4a5c2000d92) 09. [Shape maker](http://www.codewars.com/kata/56d9cfd3f3928b4edd000021) 10. [Pre-approval required](http://www.codewars.com/kata/56dae2913cb6f5d428000f77) --- Extra Challenge: Another series, equally exciting and stimulating, moderate difficulty level. Challenge enthusiasts should take a look at these katas: * [Create the Maze: Pathfinding](http://www.codewars.com/kata/56c85eebfd8fc02551000281) * [Advance the Spacecraft: Mission Control](http://www.codewars.com/kata/56cd5d09aa4ac772e3000323)","solution":"def odd_or_even(number): Returns \'Even\' if the number is even, otherwise returns \'Odd\'. return \'Even\' if number % 2 == 0 else \'Odd\'"},{"question":"Write a function that determines the longest consecutive sequence of ones in a binary representation of a given positive integer n. For example: ```python max_consecutive_ones(15) == 4 ``` Because the binary representation of 15 is 1111, which contains a single sequence of four consecutive ones. For reference, the binary representation of a number n is obtained using bin(n)[2:]. The function signature should be: ```python def max_consecutive_ones(n: int) -> int: # Your code here ```","solution":"def max_consecutive_ones(n: int) -> int: Returns the length of the longest consecutive sequence of ones in the binary representation of a given positive integer n. binary_representation = bin(n)[2:] max_ones = 0 current_ones = 0 for digit in binary_representation: if digit == \'1\': current_ones += 1 max_ones = max(max_ones, current_ones) else: current_ones = 0 return max_ones"},{"question":"# Task Given a string `text` containing a mix of alphabetical characters, digits, and spaces, return a new string with the words reversed, while maintaining the order of non-alphabetic characters. # Example For `text = \\"hello 123 world\\"`, the output should be `\\"world 123 hello\\"`. For `text = \\"a1 b2 c3\\"`, the output should be `\\"c1 b2 a3\\"`. # Input/Output - `[input]` string `text` A string consisting of alphabetic characters, digits, and spaces. - `[output]` a string","solution":"def reverse_words(text): Reverses the words in the given text while maintaining the order of non-alphabetic characters. words = [] non_alpha_parts = [] current_word = \\"\\" current_non_alpha = \\"\\" for char in text: if char.isalpha(): if current_non_alpha: non_alpha_parts.append(current_non_alpha) current_non_alpha = \\"\\" current_word += char else: if current_word: words.append(current_word) current_word = \\"\\" current_non_alpha += char if current_word: words.append(current_word) if current_non_alpha: non_alpha_parts.append(current_non_alpha) reversed_words = list(reversed(words)) result = \\"\\" # Merging back words with the non alphabet parts word_idx = 0 non_alpha_idx = 0 for char in text: if char.isalpha(): result += reversed_words[word_idx][0] reversed_words[word_idx] = reversed_words[word_idx][1:] if not reversed_words[word_idx]: word_idx += 1 else: result += non_alpha_parts[non_alpha_idx][0] non_alpha_parts[non_alpha_idx] = non_alpha_parts[non_alpha_idx][1:] if not non_alpha_parts[non_alpha_idx]: non_alpha_idx += 1 return result"},{"question":"Implement a function that calculates the total number of days between two given dates. This function should consider leap years and the varying lengths of months. Your function should take two strings as input, each representing a date in the format \'YYYY-MM-DD\'. The output should be an integer representing the total number of days between these two dates, inclusive of both starting and ending dates. For example, given the input \'2022-09-01\' for the start date and \'2022-09-05\' for the end date, the function should return 5, as there are 5 days from September 1st to September 5th, inclusive. Make sure to handle leap years correctly, where February has 29 days instead of 28. Function Signature: ```python def days_between_dates(start_date: str, end_date: str) -> int: # Your code here ``` **Constraints:** - The dates will be valid Gregorian calendar dates between January 1, 1900 and December 31, 2100. - The start date will not be after the end date.","solution":"from datetime import datetime def days_between_dates(start_date: str, end_date: str) -> int: Calculate the total number of days between two given dates. Args: start_date (str): The start date in the format \'YYYY-MM-DD\'. end_date (str): The end date in the format \'YYYY-MM-DD\'. Returns: int: The total number of days between the start and end date, inclusive. # Convert the string dates to datetime objects start_date_obj = datetime.strptime(start_date, \'%Y-%m-%d\') end_date_obj = datetime.strptime(end_date, \'%Y-%m-%d\') # Calculate the difference in days between the two dates delta = end_date_obj - start_date_obj # Return the number of days between the dates, inclusive return delta.days + 1"},{"question":"You are given a warehouse containing several types of products. Each product has a unique ID number and a certain quantity available. Employees frequently query the warehouse to check the stock for any given product. Your task is to handle multiple product queries efficiently. -----Input:----- - First line will contain two integers N and Q, the number of different products and the number of queries. - The next N lines will each contain two integers, id_i and q_i, the ID number of the product and its quantity. - The following Q lines will each contain one integer id_j, representing a query for the quantity of the product with that ID. -----Output:----- For each query, output the quantity of the product with the given id_j. If the product does not exist in the warehouse, output -1. -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq id_i leq 10^9 - 1 leq q_i leq 10^4 -----Sample Input:----- 5 3 1 50 2 20 5 10 6 15 8 30 1 3 8 -----Sample Output:----- 50 -1 30","solution":"def warehouse_queries(N, Q, products, queries): Returns the list of quantities for each query. If product ID does not exist, returns -1 for that query. :param N: int - Number of different products :param Q: int - Number of queries :param products: list of tuples - Each tuple contains product ID and quantity (id_i, q_i) :param queries: list of int - Each int is a product ID to query (id_j) :return: list of int - Quantities for each query or -1 if the product does not exist product_dict = {product_id: quantity for product_id, quantity in products} result = [] for query in queries: if query in product_dict: result.append(product_dict[query]) else: result.append(-1) return result"},{"question":"Fred is playing a game on a 2D grid of size N x M. Each cell in the grid can be either land (represented by \'L\') or water (represented by \'W\'). Fred\'s goal is to identify the largest island of connected land cells. Two land cells are considered connected if they share an edge horizontally or vertically. Write a program to find the size of the largest island on the grid. -----Constraints----- - 1 leq N leq 1000 - 1 leq M leq 1000 - Each cell in the grid is either \'L\' or \'W\' -----Input----- Input is given from Standard Input in the following format: N M G_1 G_2 : G_N -----Output----- Print the size of the largest island of connected land cells. -----Sample Input----- 4 5 LLWLL LWLLL WWWLL LLWLW -----Sample Output----- 8 Explanation: The largest island is formed by these cells: LL LL LL","solution":"def largest_island(grid): Finds the size of the largest island of connected land cells in the given grid. Args: grid (List of List of str): The 2D grid of \'L\' and \'W\' representing land and water. Returns: int: The size of the largest island. if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'W\': return 0 grid[x][y] = \'W\' # Mark the cell as visited by setting it as water size = 1 size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_island_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': max_island_size = max(max_island_size, dfs(i, j)) return max_island_size"},{"question":"Task: Write a function that finds the longest palindrome substring in a given string. The palindrome is a string that reads the same backward as forward. # Input - You are given a string s of length n where 1 ≤ n ≤ 1000. # Output - Return the longest palindromic substring found in `s`. If there are multiple longest palindromic substrings with the same length, return the one that appears first. # Example: ```python Input: \\"babad\\" Output: \\"bab\\" Input: \\"cbbd\\" Output: \\"bb\\" Input: \\"a\\" Output: \\"a\\" Input: \\"ac\\" Output: \\"a\\" ``` # Note: For a better understanding, note that: - \\"babad\\" -> \\"bab\\" or \\"aba\\" (both correct answers) - \\"cbbd\\" -> \\"bb\\" - \\"a\\" -> \\"a\\" - \\"ac\\" -> \\"a\\" # Tips: 1. **Dynamic Programming**: Use a 2D table to store the palindrome status. 2. Expand Around Center: Use pointers to expand around each center and check for even and odd length palindromes.","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in the given string. Args: s (str): The input string. Returns: str: The longest palindromic substring. if len(s) < 2: return s start, max_length = 0, 1 for i in range(1, len(s)): # Check for even length palindromes low, high = i - 1, i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes low, high = i - 1, i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Problem: Histogram Equalization of a Grayscale Image --------- Histogram equalization is a method in image processing of contrast adjustment using the image\'s histogram. This technique increases the global contrast of many images, especially when the usable data of the image is represented by close contrast values. Through this adjustment, the intensities can be better distributed on the histogram. This makes areas of lower local contrast gain a higher contrast without affecting the global perception. For a grayscale image, the pixel values range from 0 to 255, where 0 represents black, 255 represents white, and the values in between represent varying shades of gray. Task ---- Write a function `histogram_equalization` that performs histogram equalization on a given grayscale image represented as a 2D list of integers. The function should return a new 2D list of integers representing the equalized image. The function should follow these steps: 1. Compute the histogram of the pixel values. 2. Calculate the cumulative distribution function (CDF) of the histogram. 3. Normalize the CDF so that the minimum value in the CDF is mapped to 0 and the maximum value is mapped to 255. 4. Apply the normalized CDF to the original image to get the equalized image. Constraints: - The input image is guaranteed to be a non-empty 2D list of integers. - Each pixel value in the image ranges from 0 to 255. Example: ```python def histogram_equalization(image): # your code here # Sample input image = [ [52, 55, 61, 59, 79, 61, 76, 61], [62, 59, 55, 104, 94, 85, 59, 71], [63, 65, 66, 113, 144, 104, 63, 72], [64, 70, 70, 126, 154, 109, 71, 69], [67, 73, 68, 106, 122, 88, 68, 68], [68, 79, 60, 70, 77, 66, 58, 75], [69, 85, 64, 58, 55, 61, 65, 83], [70, 87, 69, 68, 65, 73, 78, 90] ] # Expected output (example, exact values may vary) equalized_image = histogram_equalization(image) # equalized_image might look something like: # [ # [0, 10, 51, 41, 162, 51, 127, 51], # [61, 41, 10, 214, 193, 172, 41, 112], # [71, 82, 92, 234, 295, 214, 71, 132], # [82, 112, 112, 274, 315, 224, 112, 102], # [102, 142, 92, 224, 254, 183, 92, 92], # [92, 162, 51, 112, 142, 92, 41, 132], # [112, 183, 82, 41, 10, 51, 82, 173], # [122, 193, 112, 92, 82, 193, 162, 214] # ] ``` Note ---- The values in the expected output may vary as the intermediate calculations depend on the exact details of the histogram equalization process. The important point is that the equalized image has improved contrast compared to the original image.","solution":"def histogram_equalization(image): from itertools import accumulate # Flatten the 2D image into a 1D list flattened = [pixel for row in image for pixel in row] # Compute the histogram histogram = [0] * 256 for pixel in flattened: histogram[pixel] += 1 # Compute the cumulative distribution function (CDF) cdf = list(accumulate(histogram)) # Normalize the CDF cdf_min = min(cdf) cdf_max = max(cdf) cdf_normalized = [(c - cdf_min) / (len(flattened) - cdf_min) * 255 for c in cdf] cdf_normalized = [round(c) for c in cdf_normalized] # Apply the normalized CDF to the original image equalized_image = [ [cdf_normalized[pixel] for pixel in row] for row in image ] return equalized_image"},{"question":"# Task Given a list of integers, return the list sorted in non-decreasing order without using the built-in sort function. Implement a custom sorting algorithm to achieve this task, and ensure the algorithm\'s complexity is appropriate for the input size. # Example For `lst = [4, 2, 7, 1, 9]`, the result should be `[1, 2, 4, 7, 9]`. For `lst = [10, 5, 8, 3, 3, 2]`, the result should be `[2, 3, 3, 5, 8, 10]`. # Inputs & Output - `[input]` integer array `lst` A non-empty array. Constraints: `1 <= lst.length <= 1000` `-10^5 <= lst[i] <= 10^5` - `[output]` an integer array The sorted list in non-decreasing order.","solution":"def custom_sort(lst): Sorts a list of integers in non-decreasing order without using the built-in sort function. Uses the merge sort algorithm for sorting. if len(lst) <= 1: return lst mid = len(lst) // 2 left = custom_sort(lst[:mid]) right = custom_sort(lst[mid:]) return merge(left, right) def merge(left, right): Merges two sorted lists into one sorted list. sorted_list = [] i = j = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: sorted_list.append(left[i]) i += 1 else: sorted_list.append(right[j]) j += 1 sorted_list.extend(left[i:]) sorted_list.extend(right[j:]) return sorted_list"},{"question":"Write a function that takes a list of integers and groups them in intervals of five. The function should return a list of strings, where each string represents an interval and the number of integers that fall into that interval. For example, if the interval is 5, the intervals would be 0-4, 5-9, 10-14, etc. Each string in the output list should follow the format \\"start-end: count\\". Examples: ```python group_in_intervals([0, 1, 2, 5, 6, 10, 12, 14, 15, 20, 25]) # returns [\\"0-4: 3\\", \\"5-9: 2\\", \\"10-14: 3\\", \\"15-19: 1\\", \\"20-24: 1\\", \\"25-29: 1\\"] group_in_intervals([0, 2, 4, 6, 8, 9, 11, 15]) # returns [\\"0-4: 3\\", \\"5-9: 3\\", \\"10-14: 1\\", \\"15-19: 1\\"] group_in_intervals([0, 5, 10, 15]) # returns [\\"0-4: 1\\", \\"5-9: 1\\", \\"10-14: 1\\", \\"15-19: 1\\"] group_in_intervals([]) # returns [] ``` Make sure that your function returns the intervals correctly even if some intervals have no integers in them. For instance: ```python group_in_intervals([10, 20, 30]) # returns [\\"0-4: 0\\", \\"5-9: 0\\", \\"10-14: 1\\", \\"15-19: 0\\", \\"20-24: 1\\", \\"25-29: 0\\", \\"30-34: 1\\"] ```","solution":"def group_in_intervals(lst): Groups integers in intervals of five and returns interval counts in the format \\"start-end: count\\". if not lst: return [] max_val = max(lst) result = [] for start in range(0, max_val + 1, 5): end = start + 4 count = sum(1 for num in lst if start <= num <= end) result.append(f\\"{start}-{end}: {count}\\") return result"},{"question":"Given a string of words separated by spaces, your task is to find the length of the longest word. If the string is empty, return 0. For example, `longestWordLength(\\"The quick brown fox jumps over the lazy dog\\") = 5` because the longest word is \\"quick\\", \\"brown\\", \\"jumps\\", each having a length of 5. More examples in the test cases. ```if:csharp Documentation: Kata.LongestWordLength Method (String) Takes a string of words and returns the length of the longest word. Syntax public static int LongestWordLength( string sentence ) Parameters sentence Type: System.String The string to process. Return Value Type: System.Int32 The length of the longest word in the string. If the string is empty, return 0. ``` Good luck! If you like this Kata, please try: [Words to sentence](https://www.codewars.com/kata/57a0e5c372292dd76d000d7e) [Count words](https://www.codewars.com/kata/56b8b6f53126a3c5d200a672)","solution":"def longestWordLength(sentence): Given a string of words separated by spaces, return the length of the longest word. If the string is empty, return 0. if not sentence: return 0 words = sentence.split() max_length = max((len(word) for word in words), default=0) return max_length"},{"question":"```python def string_combiner(list_of_strings, n): Write a function string_combiner(list_of_strings, n) that takes in a list of strings list_of_strings, and an integer n, and returns a new list where every n strings are combined into a single string. Parameters: list_of_strings (list): A list of strings. n (int): The number of strings to combine. Returns: list: A list with combined strings. Example: string_combiner([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"], 2) -> [\\"ab\\", \\"cd\\", \\"ef\\"] string_combiner([\\"a\\", \\"b\\", \\"c\\", \\"d\\"], 3) -> [\\"abc\\", \\"d\\"] string_combiner([\\"a\\", \\"b\\", \\"c\\"], 5) -> [\\"abc\\"] string_combiner([\\"a\\"], 1) -> [\\"a\\"] combined_strings = [] temp_string = \\"\\" for i, s in enumerate(list_of_strings): temp_string += s if (i + 1) % n == 0: combined_strings.append(temp_string) temp_string = \\"\\" if temp_string: combined_strings.append(temp_string) return combined_strings ```","solution":"def string_combiner(list_of_strings, n): Write a function string_combiner(list_of_strings, n) that takes in a list of strings list_of_strings, and an integer n, and returns a new list where every n strings are combined into a single string. Parameters: list_of_strings (list): A list of strings. n (int): The number of strings to combine. Returns: list: A list with combined strings. Example: string_combiner([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"], 2) -> [\\"ab\\", \\"cd\\", \\"ef\\"] string_combiner([\\"a\\", \\"b\\", \\"c\\", \\"d\\"], 3) -> [\\"abc\\", \\"d\\"] string_combiner([\\"a\\", \\"b\\", \\"c\\"], 5) -> [\\"abc\\"] string_combiner([\\"a\\"], 1) -> [\\"a\\"] combined_strings = [] temp_string = \\"\\" for i, s in enumerate(list_of_strings): temp_string += s if (i + 1) % n == 0: combined_strings.append(temp_string) temp_string = \\"\\" if temp_string: combined_strings.append(temp_string) return combined_strings"},{"question":"A group of tourists is visiting a series of cities in a foreign country. The cities form a straight line and are numbered from 1 to N from left to right. Each city is connected to its neighboring cities by a direct road, and the travel cost between any two adjacent cities is given. The tourists want to calculate the minimum travel cost from the first city to the last city. You need to write a program to help the tourists find this minimum travel cost. -----Input:----- - The first line contains an integer N (2 leq N leq 1000), the number of cities. - The second line contains N-1 integers C_1, C_2, ..., C_{N-1} (1 leq C_i leq 10^5) where C_i represents the travel cost between city i and city i+1. -----Output:----- - Output a single integer that is the minimum travel cost from the first city to the last city. -----Example Input:----- 5 4 1 3 2 -----Example Output:----- 10","solution":"def min_travel_cost(N, costs): Calculates the minimum travel cost from the first city to the last city. Parameters: N (int): Number of cities. costs (List[int]): List of travel costs between adjacent cities. Returns: int: Minimum travel cost from the first city to the last city. return sum(costs)"},{"question":"You are given an integer array nums and a positive integer k. The array nums represents the score of different competitors in a game, where the score at index i represents the score of the i-th competitor. Your task is to return an array of the top k competitors based on their scores. If there is a tie in scores, sort the competitors by their index in ascending order. Example 1: Input: nums = [50, 60, 70, 60, 80], k = 3 Output: [4, 2, 1] Explanation: The top 3 competitors have scores 80, 70, and the tie score of 60. Among the tied scores, competitor with index 1 comes before competitor with index 3. Example 2: Input: nums = [10, 20, 20, 30, 40], k = 2 Output: [4, 3] Explanation: The top 2 competitors have scores 40 and 30. Example 3: Input: nums = [5, 5, 5, 5, 5], k = 1 Output: [0] Explanation: All competitors have the same score. The top 1 competitor is the one with the smallest index which is 0. Note: 1. 1 <= nums.length <= 10000 2. 1 <= nums[i] <= 10^6 3. 1 <= k <= nums.length","solution":"def top_k_competitors(nums, k): Returns the indices of the top k competitors based on their scores. If there is a tie in scores, competitors are sorted by their index in ascending order. # Combine scores with their indices indexed_scores = list(enumerate(nums)) # Sort the list based on the scores in descending order, # and by index in ascending order in case of a tie indexed_scores.sort(key=lambda x: (-x[1], x[0])) # Extract the indices of the top `k` competitors top_k_indices = [indexed_scores[i][0] for i in range(k)] return top_k_indices"},{"question":"=====Problem Statement===== Alice and Bob want to play the \'Digit Game\'. Game Rules Both players are given the same sequence of digits, D. Both players have to form the highest possible sub-sequences using the digits of the sequence D. Alice forms the highest possible subsequence with even digits. Bob forms the highest possible subsequence with odd digits. The game ends when both players have formed their highest possible subsequences. Scoring A player\'s score is the numeric value of the subsequence they form. =====Example===== Sequence D = \\"31245\\" Alice\'s even-digit subsequence = 42 Bob\'s odd-digit subsequence = 351 Hence, Alice\'s score is 42, and Bob\'s score is 351. Your task is to determine the winner of the game and their score. =====Input Format===== A single line of input containing the sequence D. Note: The sequence D will contain only digits: [0-9]. =====Constraints===== 0 < len(D) < 10^6 =====Output Format===== Print one line: the name of the winner and their score separated by a space. If the game is a draw, print Draw.","solution":"def digit_game_winner(sequence): even_digits = [] odd_digits = [] for digit in sequence: if int(digit) % 2 == 0: even_digits.append(digit) else: odd_digits.append(digit) even_digits.sort(reverse=True) odd_digits.sort(reverse=True) alice_score = int(\'\'.join(even_digits)) if even_digits else 0 bob_score = int(\'\'.join(odd_digits)) if odd_digits else 0 if alice_score > bob_score: return f\\"Alice {alice_score}\\" elif bob_score > alice_score: return f\\"Bob {bob_score}\\" else: return \\"Draw\\" # Example usage sequence = \\"31245\\" print(digit_game_winner(sequence)) # Output: Bob 531"},{"question":"Implement a function that evaluates RPN (Reverse Polish Notation) expressions. Reverse Polish Notation is a mathematical notation in which every operator follows all of its operands. This notation eliminates the need for parentheses to define operation order. For example, the RPN expression \\"3 4 +\\" evaluates to 7, and \\"5 1 2 + 4 * + 3 -\\" evaluates to 14. Your task is to write a function `evaluate_rpn(expression)` that takes a string `expression` which contains a valid RPN expression and returns its evaluation as a float. Rules: 1. The input `expression` will be a string containing integers and operators separated by spaces. 2. The operators will be one of \\"+\\", \\"-\\", \\"*\\", or \\"/\\". 3. Each RPN expression is valid and guaranteed to be correct. 4. Division should use floating point division. For example: ```python evaluate_rpn(\\"3 4 +\\") == 7.0 evaluate_rpn(\\"5 1 2 + 4 * + 3 -\\") == 14.0 evaluate_rpn(\\"2 3 * 5 +\\") == 11.0 evaluate_rpn(\\"15 7 1 1 + - / 3 * 2 1 1 + + -\\") == 5.0 ```","solution":"def evaluate_rpn(expression): Evaluates a Reverse Polish Notation (RPN) expression. Parameters: expression (str): A string containing the RPN expression. Returns: float: The result of the evaluation. stack = [] tokens = expression.split() for token in tokens: if token in {\\"+\\", \\"-\\", \\"*\\", \\"/\\"}: b = stack.pop() a = stack.pop() if token == \\"+\\": result = a + b elif token == \\"-\\": result = a - b elif token == \\"*\\": result = a * b elif token == \\"/\\": result = a / b stack.append(result) else: stack.append(float(token)) return stack[0]"},{"question":"=====Function Descriptions===== collections.Counter(iterable) This tool returns a dictionary with the count of occurrences of each element in the iterable. The elements are stored as dictionary keys and their counts as dictionary values. Sample Code >>> from collections import Counter >>> >>> print Counter(\'abracadabra\') Counter({\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1}) >>> A = [\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'apple\'] >>> print Counter(A) Counter({\'apple\': 3, \'banana\': 2, \'orange\': 1}) =====Problem Statement===== You are given a string S. Your task is to print each unique character in S, along with its corresponding count of occurrences, in the order of occurrence. =====Input Format===== A single line containing the string S. =====Constraints===== 1<=len(S)<=1000 The string contains only lowercase characters. =====Output Format===== Print each unique character and its count on separate lines in the order they appear in the string. =====Sample Input===== abracadabra =====Sample Output===== a 5 b 2 r 2 c 1 d 1","solution":"from collections import Counter def count_characters(S): Prints each unique character in the string S along with its count of occurrences, in the order of appearance. counter = Counter(S) output = [] seen = set() for char in S: if char not in seen: seen.add(char) output.append(f\\"{char} {counter[char]}\\") return \'n\'.join(output)"},{"question":"Write a function that, given a list of integers, returns the maximum sum of a non-empty subarray. A subarray is a contiguous portion of an array. For example, the array `[34, -50, 42, 14, -5, 86]` has the maximum subarray with sum `137`, because `[42, 14, -5, 86]` yields 137. Similarly, the array `[-5, -1, -8, -9]` has the maximum subarray with sum `-1`, because `[-1]` yields -1, the least negative of the options. **Input:** - An integer `n`, the number of elements in the array (1 <= n <= 1000) - The `n` integers that make up the array. **Output:** - An integer, the maximum sum of a non-empty subarray. **Example:** Input: ``` 6 34 -50 42 14 -5 86 ``` Output: ``` 137 ``` Input: ``` 4 -5 -1 -8 -9 ``` Output: ``` -1 ``` # Note: This problem can be solved using Kadane\'s Algorithm which runs in linear `O(n)` time complexity.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a non-empty subarray. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given an array of integers heights representing the height of buildings in a line. Each building has a width of 1. Imagine that the buildings form a skyline viewed from a distance, and you are asked to determine the maximum rectangular area of the skyline. Return the maximum rectangular area of the skyline formed by these buildings. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has area 10 and is formed by the buildings with heights 5 and 6. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle has area 4 and is formed by the building with height 4 and width 1. Example 3: Input: heights = [1] Output: 1 Constraints: 1 <= heights.length <= 10^5 0 <= heights[i] <= 10^9","solution":"def largest_rectangle_area(heights): Returns the maximum rectangular area that can be formed in the skyline. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Binary Trees - Level Order Traversal Write a LevelOrderTraversal() function that takes the root of a binary tree and returns a list of its nodes\' values in level order. Level order traversal visits all the nodes of a tree level by level, starting from the root. You can assume that the nodes have integer values. The Node class will be defined as follows: ```python class Node: def __init__(self, key): self.left = None self.right = None self.val = key ``` Your LevelOrderTraversal() function should implement this traversal algorithm, and return the result as a list. Example input: ``` 3 / 9 20 / 15 7 ``` Example output: [3, 9, 20, 15, 7]","solution":"from collections import deque class Node: def __init__(self, key): self.left = None self.right = None self.val = key def LevelOrderTraversal(root): Perform a level order traversal of a binary tree. Args: root (Node): The root node of the binary tree. Returns: List[int]: A list of node values in level order. if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() result.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) return result"},{"question":"Task You are given two arrays `arr1` and `arr2` of equal length, consisting of non-negative integers. Merge these arrays into a single array by alternating elements from each array, starting with a given array. If one array is exhausted before the other, append the remaining elements of the other array. Write a function to merge the arrays as described. # Example For `arr1 = [1, 3, 5]`, `arr2 = [2, 4, 6]`, and `startArr = \\"arr1\\"`, the output should be `[1, 2, 3, 4, 5, 6]`. For `arr1 = [7, 8]`, `arr2 = [9, 10, 11, 12]`, and `startArr = \\"arr2\\"`, the output should be `[9, 7, 10, 8, 11, 12]`. # Input/Output - `[input]` integer array `arr1` Constraints: 0 ≤ arr1.length ≤ 100, 0 ≤ arr1[i] ≤ 1000 - `[input]` integer array `arr2` Constraints: 0 ≤ arr2.length ≤ 100, 0 ≤ arr2[i] ≤ 1000 - `[input]` string `startArr` Constraints: `\\"arr1\\"` or `\\"arr2\\"` - `[output]` an integer array","solution":"def merge_arrays(arr1, arr2, startArr): Merges two arrays by alternating their elements, starting with the given array. result = [] i, j = 0, 0 # Determine the starting array and alternate appending elements from arr1 and arr2 while i < len(arr1) and j < len(arr2): if startArr == \\"arr1\\": result.append(arr1[i]) i += 1 startArr = \\"arr2\\" else: result.append(arr2[j]) j += 1 startArr = \\"arr1\\" # Append remaining elements from arr1, if any while i < len(arr1): result.append(arr1[i]) i += 1 # Append remaining elements from arr2, if any while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"Your task is to implement a function that simulates a basic library system. The library can handle borrowing, returning, and checking the availability of books. You will receive a list of books available in the library. Each book will be represented as a dictionary with keys \\"title\\" (string) and \\"copies\\" (integer indicating how many copies are available). The library should be able to process a series of operations as follows: 1. \\"borrow\\": Decrease the number of available copies of the specified book by 1. If no copies are available, the operation should return a message stating the book is not available. 2. \\"return\\": Increase the number of available copies of the specified book by 1. 3. \\"check\\": Return the number of available copies of the specified book. Complete the class `Library` to meet the requirements. Implement the `__init__`, `borrow`, `return_book`, and `check_availability` methods. ```python class Library: def __init__(self, books): self.books = {book[\'title\']: book[\'copies\'] for book in books} def borrow(self, title): if self.books.get(title, 0) > 0: self.books[title] -= 1 return f\'Borrowed: {title}\' else: return f\'{title} is not available\' def return_book(self, title): if title in self.books: self.books[title] += 1 else: self.books[title] = 1 def check_availability(self, title): return self.books.get(title, 0) ``` Example Usage: ```python library = Library([{\'title\': \'Book A\', \'copies\': 3}, {\'title\': \'Book B\', \'copies\': 2}]) print(library.borrow(\'Book A\')) # Expected: \'Borrowed: Book A\' print(library.check_availability(\'Book A\')) # Expected: 2 print(library.return_book(\'Book A\')) print(library.check_availability(\'Book A\')) # Expected: 3 print(library.borrow(\'Book C\')) # Expected: \'Book C is not available\' ```","solution":"class Library: def __init__(self, books): self.books = {book[\'title\']: book[\'copies\'] for book in books} def borrow(self, title): if self.books.get(title, 0) > 0: self.books[title] -= 1 return f\'Borrowed: {title}\' else: return f\'{title} is not available\' def return_book(self, title): if title in self.books: self.books[title] += 1 else: self.books[title] = 1 def check_availability(self, title): return self.books.get(title, 0)"},{"question":"Steve is working with strings and he needs your help to accomplish a specific task. He has a string s consisting of lowercase English letters, and he wants to find the length of the longest substring in which the letters occur in lexicographical order. A substring is a contiguous sequence of characters within a string. A substring is said to be in lexicographical order if each character in the substring is not lesser than the previous character. Your task is to write a function that takes the string s and returns the length of the longest lexicographical substring. -----Input----- - A single input line containing the string s (1 ≤ |s| ≤ 10^5) consisting only of lowercase English alphabet letters. -----Output----- - Output a single integer, the length of the longest lexicographical substring. -----Examples----- Input abcabcdef Output 6 Input acbd Output 2 Input zyxw Output 1 -----Note----- In the first example, the longest lexicographical substring is \\"abcde\\" or \\"bcdef\\", both of which have a length of 6. In the second example, the longest lexicographical substring is \\"ac\\" or \\"bd\\", both of which have a length of 2. In the third example, each character in the string is strictly decreasing, so the length of the longest lexicographical substring is 1.","solution":"def longest_lexicographical_substring(s): Returns the length of the longest lexicographical substring in the given string. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] >= s[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Emily is creating a diversified portfolio and she wants to track the worth of her investments over time. She starts by investing in n different assets, each having an initial value denoted by a positive integer. She observes the change in value over m days. On each day, the value of each asset may either increase, stay the same, or decrease. Emily wants to write a program to compute the value of her portfolio at the end of m days. The value of the portfolio is the sum total of the values of all her assets. However, the value can grow very large, so she is particularly interested in the non-negative remainder when the total portfolio value is divided by 10^9 + 7. Your task is to help Emily determine the final value of her portfolio after m days, modulo 10^9 + 7. -----Input----- The first line contains two integers n (1 ≤ n ≤ 200000) and m (1 ≤ m ≤ 200000), the number of assets and the number of days. The second line contains n integers, where the i-th integer a_{i} (1 ≤ a_{i} ≤ 10^9) represents the initial value of the i-th asset. Each of the next m lines contains n integers, where the j-th integer in the k-th line v_{k,j} (-10^9 ≤ v_{k,j} ≤ 10^9) indicates the change in value of the j-th asset on the k-th day. -----Output----- Output a single integer, the total value of Emily\'s portfolio modulo 10^9 + 7 at the end of m days. -----Examples----- Input 4 2 10 20 30 40 5 -10 0 10 -10 20 5 -5 Output 115 Input 3 3 100 200 300 -50 50 0 25 -100 75 10 10 10 Output 640 -----Note----- In the first test case, the portfolio starts with values 10, 20, 30, and 40. On the first day, the changes are +5, -10, +0, and +10, leading to new values 15, 10, 30, and 50. On the second day, the changes are -10, +20, +5, and -5, resulting in final values 5, 30, 35, and 45. The total portfolio value is 5 + 30 + 35 + 45 = 115, which is less than 10^9 + 7, so the result is 115. In the second test case, the portfolio starts with values 100, 200, and 300. The changes on the first day are -50, +50, and +0, updating the values to 50, 250, and 300. On the second day, the changes are +25, -100, and +75, updating the values to 75, 150, and 375. On the final day, the changes are +10, +10, and +10, resulting in final values 85, 160, and 385. The total portfolio value is 85 + 160 + 385 = 630, which is less than 10^9 + 7, so the result is 640.","solution":"def portfolio_value(n, m, initial_values, changes): MODULO = 10**9 + 7 for day_changes in changes: initial_values = [(initial_values[i] + day_changes[i]) % MODULO for i in range(n)] total_value = sum(initial_values) % MODULO return total_value"},{"question":"=====Problem Statement===== A strong password satisfies the following criteria: 1. It has at least 6 characters and at most 12 characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the following set: !@#%^&*()-+ Given a list of passwords, write a function that checks each password and returns \\"Strong\\" if the password meets all criteria and \\"Weak\\" otherwise. =====Input Format===== The first line contains a single integer, n, denoting the number of passwords. Each of the next n lines contains a single password. =====Constraints===== 1 <= n <= 100 Each password string will have at least 1 character and no more than 100 characters. =====Output Format===== For each password, print \\"Strong\\" if the password is strong according to the criteria described, and \\"Weak\\" otherwise. =====Sample Input===== 4 Passw0rd! 123456 Ab1@ SuperSecure1 =====Sample Output===== Strong Weak Weak Strong =====Explanation===== 1. \\"Passw0rd!\\" meets all criteria: it\'s between 6-12 characters, has uppercase, lowercase, digit, and special character. 2. \\"123456\\" doesn\'t have any uppercase or lowercase letters or special characters. 3. \\"Ab1@\\" is only 4 characters long, which is less than the required minimum. 4. \\"SuperSecure1\\" meets all criteria: it\'s between 6-12 characters, has uppercase, lowercase, digit, and special character.","solution":"import re def check_password_strength(password): Check if the given password meets the criteria for being strong. Criteria: 1. Length between 6 and 12 characters (inclusive) 2. Contains at least one uppercase letter 3. Contains at least one lowercase letter 4. Contains at least one digit 5. Contains at least one special character from the set !@#%^&*()-+ :param password: String, the password to check :return: \\"Strong\\" if the password meets all criteria, otherwise \\"Weak\\" if not (6 <= len(password) <= 12): return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'[0-9]\', password): return \\"Weak\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"Weak\\" return \\"Strong\\" def password_strength_checker(passwords): Check the strength of a list of passwords. :param passwords: List of strings, the passwords to check :return: List of strings, where each element is \\"Strong\\" or \\"Weak\\" indicating the strength of the corresponding password return [check_password_strength(password) for password in passwords]"},{"question":"Write ```python longest_subarray_with_sum(arr, target) ``` that given an array `arr` of integers and an integer `target`, returns the length of the longest contiguous subarray that sums up to the specified target. If no such subarray exists, return 0. For example: ```python longest_subarray_with_sum([1, -1, 5, -2, 3], 3) == 4 longest_subarray_with_sum([-2, -1, 2, 1], 1) == 2 longest_subarray_with_sum([1, 2, 3], 5) == 2 longest_subarray_with_sum([1, 2, -1, 2], 3) == 3 longest_subarray_with_sum([1, 2, -1, 2], 6) == 0 ``` ```haskell longestSubarrayWithSum [1, -1, 5, -2, 3] 3 `shouldBe` 4 longestSubarrayWithSum [-2, -1, 2, 1] 1 `shouldBe` 2 longestSubarrayWithSum [1, 2, 3] 5 `shouldBe` 2 longestSubarrayWithSum [1, 2, -1, 2] 3 `shouldBe` 3 longestSubarrayWithSum [1, 2, -1, 2] 6 `shouldBe` 0 ``` Make sure your solution is efficient enough to handle large input sizes typically up to `10^5` elements.","solution":"def longest_subarray_with_sum(arr, target): Returns the length of the longest subarray with the given sum \'target\'. If no such subarray exists, returns 0. sum_index_map = {} current_sum = 0 max_length = 0 for i, num in enumerate(arr): current_sum += num if current_sum == target: max_length = i + 1 if (current_sum - target) in sum_index_map: max_length = max(max_length, i - sum_index_map[current_sum - target]) if current_sum not in sum_index_map: sum_index_map[current_sum] = i return max_length"},{"question":"You are given a list of integers. Your task is to find out the minimum positive integer that is missing from the list. A positive integer is defined as any integer greater than 0. -----Input----- The first line of input contains an integer n (1 leq n leq 10^5), the length of the list. The second line contains n integers a_1, a_2, ..., a_n (-10^6 leq a_i leq 10^6) separated by spaces. -----Output----- Print a single integer, the minimum positive integer that is missing from the list. -----Examples----- Input 5 1 2 0 -1 3 Output 4 Input 3 -1 -2 -3 Output 1 Input 4 3 4 -1 1 Output 2 Input 5 2 3 7 6 8 Output 1 -----Note----- In the first example, 1, 2, 3 are present in the list, but 4 is missing, so the answer is 4. In the second example, there are no positive integers in the list, so the answer is 1. In the third example, the list is missing 2, hence the output is 2. In the fourth example, the first missing positive integer is 1.","solution":"def find_missing_positive_integer(arr): This function takes a list of integers and returns the minimum positive integer that is missing from the list. n = len(arr) present = [False] * (n + 1) for num in arr: if 1 <= num <= n: present[num] = True for i in range(1, n + 1): if not present[i]: return i return n + 1"},{"question":"You are provided a list of integers that may contain duplicates. Write a function that returns a new list of integers where each element from the original list is replaced by the number of times it appears in the original list. **Examples:** ```python count_occurrences([4, 5, 4, 6, 4, 7, 5]) # Output: [3, 2, 3, 1, 3, 1, 2] count_occurrences([1, 2, 2, 3, 4, 4, 4]) # Output: [1, 2, 2, 1, 3, 3, 3] count_occurrences([10, 20, 10, 20, 30]) # Output: [2, 2, 2, 2, 1] ``` **Function Signature:** ```python def count_occurrences(lst: List[int]) -> List[int]: pass ```","solution":"from typing import List def count_occurrences(lst: List[int]) -> List[int]: This function takes a list of integers and returns a new list of integers where each element from the original list is replaced by the number of times it appears in the original list. counts = {x: lst.count(x) for x in lst} return [counts[x] for x in lst]"},{"question":"A highly competitive online gaming company has recently introduced a new feature in one of their strategy games: Resource Trading. Each player can trade resources with another player to maximize their own stockpile. The game server keeps track of the stockpile of each player at the start of each day and the trades made during that day. Players can only trade specific amounts of their resources, and each trade recorded on the server specifies the amounts exchanged by two players. Given the initial resources of each player and the trades made during a day, calculate the maximum resource stockpile for any player at the end of the day. ---Input--- The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5), the number of players and the number of trades respectively. The second line contains n integers, where the i-th integer r_i (0 le r_i le 10^9) represents the initial resources of the i-th player. The following m lines each contain three integers x_j, y_j, and z_j (1 le x_j, y_j le n, x_j ne y_j, 1 le z_j le 10^9) representing that player x_j gave z_j resources to player y_j during the j-th trade. ---Output--- Output a single integer, the maximum resource stockpile for any player at the end of the day. ---Examples--- Input 6 3 10 20 30 40 50 60 1 2 5 2 3 10 4 5 15 Output 65 Input 4 2 5 8 7 10 3 1 4 4 2 3 Output 11 ---Note--- In the first example, Player 1 starts with 10 resources, and after the first trade, Player 1 has 10 - 5 = 5 resources, and Player 2 has 20 + 5 = 25 resources. After the second trade, Player 2 has 25 - 10 = 15 resources, and Player 3 has 30 + 10 = 40 resources. After the third trade, Player 4 has 40 - 15 = 25 resources, and Player 5 has 50 + 15 = 65 resources. The maximum resource stockpile among all players at the end of the day is 65.","solution":"def max_resource_stockpile(n, m, resources, trades): Calculate the maximum resource stockpile for any player after all trades. Args: n : int - Number of players m : int - Number of trades resources : list of int - Initial resources of each player trades : list of tuple(int, int, int) - Each tuple represents a trade (x, y, z) where x gives z resources to y Returns: int - Maximum resource stockpile at the end of the day # Adjust resources based on the trades for x, y, z in trades: resources[x - 1] -= z resources[y - 1] += z # Return the maximum resource stockpile return max(resources)"},{"question":"# Kata Task You are given a list of integers representing the heights of trees in a row. Each element in the list represents the height of a tree in meters, e.g., `[4, 5, 7, 3, 6]` means: * The 1st tree is 4 meters tall * The 2nd tree is 5 meters tall * The 3rd tree is 7 meters tall * The 4th tree is 3 meters tall * The 5th tree is 6 meters tall Determine the maximum difference in height between any two trees such that the shorter tree is to the left of the taller tree. Return the maximum height difference as a single integer. **Notes** - Assume the list contains at least two trees. - Return 0 if no valid height difference exists (i.e., if the list is sorted in non-increasing order). --- Series: * Height Differences * Height Differences 2","solution":"def max_height_difference(heights): Returns the maximum height difference between any two trees such that the shorter tree is to the left of the taller tree. :param heights: A list of integers representing the heights of trees. :return: Maximum height difference. max_diff = 0 min_height = heights[0] for height in heights[1:]: if height > min_height: max_diff = max(max_diff, height - min_height) min_height = min(min_height, height) return max_diff"},{"question":"# Task You are given a grid of letters and a word. Your task is to determine if the word can be constructed from letters of adjacent cells in the grid. You can move in four directions: up, down, left, and right, but not diagonally. A cell can only be used once in each constructed word. Write a function that checks if the word can be found in the grid. # Input/Output `[input]` string `word` A string representing the word to find in the grid. `1 ≤ word.length ≤ 100` `[input]` 2D character array `board` A 2D array (list of lists) of characters representing the grid. `1 ≤ board.length ≤ 200` `1 ≤ board[i].length ≤ 200` `[output]` boolean Return `true` if the word can be constructed from letters of adjacent cells in the grid, and `false` otherwise. # Example For `word = \\"ABCCED\\"` and `board = [[\\"A\\", \\"B\\", \\"C\\", \\"E\\"], [\\"S\\", \\"F\\", \\"C\\", \\"S\\"], [\\"A\\", \\"D\\", \\"E\\", \\"E\\"]]`, the output should be `true`. The word \\"ABCCED\\" can be constructed as follows: - board[0][0] -> board[0][1] -> board[0][2] -> board[1][2] -> board[2][2] -> board[2][1] For `word = \\"SEE\\"` and `board = [[\\"A\\", \\"B\\", \\"C\\", \\"E\\"], [\\"S\\", \\"F\\", \\"C\\", \\"S\\"], [\\"A\\", \\"D\\", \\"E\\", \\"E\\"]]`, the output should be `true`. The word \\"SEE\\" can be constructed as follows: - board[2][1] -> board[2][2] -> board[2][3] For `word = \\"ABCB\\"` and `board = [[\\"A\\", \\"B\\", \\"C\\", \\"E\\"], [\\"S\\", \\"F\\", \\"C\\", \\"S\\"], [\\"A\\", \\"D\\", \\"E\\", \\"E\\"]]`, the output should be `false`. The word \\"ABCB\\" cannot be constructed from letters of adjacent cells as cell board[0][1] cannot be used twice.","solution":"def exists(board, word): def backtrack(row, col, suffix): if len(suffix) == 0: return True if row < 0 or row == len(board) or col < 0 or col == len(board[0]) or board[row][col] != suffix[0]: return False ret = False board[row][col], temp = \'#\', board[row][col] # mark the cell as visited for rowOffset, colOffset in [(0, 1), (1, 0), (0, -1), (-1, 0)]: ret = backtrack(row + rowOffset, col + colOffset, suffix[1:]) if ret: break board[row][col] = temp # unmark the cell return ret for row in range(len(board)): for col in range(len(board[0])): if backtrack(row, col, word): return True return False"},{"question":"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. However, you might encounter a scenario where the starting numbers are different. For instance, the Fibonacci sequence starting with 2 and 3 begins like this: 2, 3, 5, 8, 13, ... Write a function that accepts three parameters: two starting integers `a` and `b` for the sequence, and an integer `n`, which represents the length of the sequence to generate. Your function must return an array containing the first `n` numbers of the modified Fibonacci sequence that begins with `a` and `b`. # Examples: ``` custom_fibonacci(2, 3, 5) --> [2, 3, 5, 8, 13] custom_fibonacci(5, 5, 7) --> [5, 5, 10, 15, 25, 40, 65] custom_fibonacci(0, 1, 10) --> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` # Notes: - The parameters `a` and `b` will be integers within the range of -10^9 to 10^9. - The parameter `n` will be a positive integer, and the length of the output array will always match `n`.","solution":"def custom_fibonacci(a, b, n): Generates a modified Fibonacci sequence starting with `a` and `b` of length `n`. Parameters: a (int): The first number in the sequence. b (int): The second number in the sequence. n (int): The length of the sequence to generate. Returns: list: A list containing the first `n` numbers of the modified Fibonacci sequence. if n == 1: return [a] elif n == 2: return [a, b] sequence = [a, b] for _ in range(2, n): next_val = sequence[-1] + sequence[-2] sequence.append(next_val) return sequence"},{"question":"=====Function Descriptions===== The NumPy module offers various functions for performing operations on arrays and matrices, including those for statistical calculations. numpy.mean The numpy.mean function computes the arithmetic mean along the specified axis. print numpy.mean([1, 2, 3, 4]) #Output: 2.5 numpy.median The numpy.median function calculates the median of the input array. print numpy.median([1, 2, 3, 4]) #Output: 2.5 numpy.std The numpy.std function computes the standard deviation along the specified axis. print numpy.std([1, 2, 3, 4]) #Output: 1.11803398875 =====Problem Statement===== You\'re given a list of integers. Your task is to find the mean, median, and standard deviation of the list. The results should be rounded to 2 decimal places. =====Input Format===== The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the list. =====Output Format===== Print the mean, median, and standard deviation of the list in separate lines, each rounded to 2 decimal places.","solution":"import numpy as np def compute_statistics(nums): Computes the mean, median, and standard deviation of a list of numbers. Parameters: nums (list): A list of integers. Returns: tuple: A tuple containing the mean, median, and standard deviation, each rounded to 2 decimal places. mean_value = round(np.mean(nums), 2) median_value = round(np.median(nums), 2) std_deviation = round(np.std(nums), 2) return mean_value, median_value, std_deviation"},{"question":"# Task You are given an array of integers. Your task is to find out the largest positive number `x` such that it divides exactly all the elements of the array. If such a number doesn\'t exist, return `-1`. # Example For the array `[8, 24, 16, 32]`, the result should be `8`. Explanation: The largest positive number that divides exactly all the elements in the array is `8`. As `8` divides `8`, `24`, `16`, and `32` without any remainder. # Input/Output - `[input]` integer array `arr` A non-empty array of integers. 1 ≤ arr.length ≤ 1000 `1 ≤ arr[i] ≤ 10^6` - `[output]` integer The largest positive number that divides exactly all the elements of the array, or `-1` if no such number exists.","solution":"import math from functools import reduce def largest_divisor(arr): Returns the largest positive number that divides exactly all elements of the array. If such a number doesn\'t exist, return -1. Parameters: arr (list): List of integers Returns: int: The largest positive divisor or -1 def gcd(a, b): Computes the Greatest Common Divisor (GCD) of a and b. while b: a, b = b, a % b return a if not arr or any(n <= 0 for n in arr): return -1 # Find the GCD of the entire array. overall_gcd = reduce(gcd, arr) # Check if the overall_gcd divides all elements in the array return overall_gcd if all(x % overall_gcd == 0 for x in arr) else -1"},{"question":"The Fibonacci sequence is a well-known mathematical series in which each number is the sum of the two preceding ones, usually starting with 0 and 1. In this challenge, you are tasked with implementing a function that generates a list of Fibonacci numbers up to a given number `n`. Your task Your task is to create a function `fibonacci_up_to` that takes a single argument `n` and returns a list of all Fibonacci numbers less than or equal to `n`. Consider the edge cases where `n` is less than 1. Examples A call to `fibonacci_up_to(10)` returns `[0, 1, 1, 2, 3, 5, 8]`. A call to `fibonacci_up_to(1)` returns `[0, 1, 1]`. A call to `fibonacci_up_to(0)` returns `[0]`. A call to `fibonacci_up_to(-5)` returns `[]`. Function signature ```python def fibonacci_up_to(n: int) -> list: pass ```","solution":"def fibonacci_up_to(n: int) -> list: Returns a list of all Fibonacci numbers less than or equal to `n`. if n < 0: return [] fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib > n: break fib_sequence.append(next_fib) if n == 0: return [0] return fib_sequence"},{"question":"You are given n strings of equal length. Each string represents a sequence of colors where each color is represented by a single lowercase letter. Two strings are considered similar if and only if they can be transformed into one another by swapping two adjacent characters any number of times. Your task is to determine the number of groups of similar strings. -----Input----- The input consists of several lines: The first line contains the integer n (1 ≤ n ≤ 100,000). The following n lines each contain a string of equal length m (1 ≤ m ≤ 50). Each string consists of lowercase English letters. -----Output----- Output a single integer — the number of groups of similar strings. -----Examples----- Input 5 abc bca cab dac cad Output 2 Input 3 aabb bbaa abab Output 1 Input 4 xyz yxz zxy yyz Output 2 -----Note----- In the first example, the first three strings can be transformed into one another by swapping adjacent characters, so they form one group. The last two strings can also be transformed into each other but not into any of the first three, forming a second group. In the second example, all three strings can be transformed into each other by swapping adjacent characters, so they form one group. In the third example, \\"xyz\\", \\"yxz\\", and \\"zxy\\" can be transformed into each other, forming the first group. \\"yyz\\" cannot transform into any of the others, forming the second group.","solution":"def count_groups_of_similar_strings(n, strings): Returns the number of groups of similar strings. def get_signature(s): Get a sorted tuple of characters that represents the \'signature\' of the string. return tuple(sorted(s)) similar_groups = {} for s in strings: signature = get_signature(s) if signature in similar_groups: similar_groups[signature].append(s) else: similar_groups[signature] = [s] return len(similar_groups)"},{"question":"Design a function that takes a list of integers representing the scores of students in an exam and returns the normalized scores. Normalized scores are calculated by subtracting the minimum score in the list from each score and dividing the result by the range (maximum score - minimum score) of the list. Detailed Requirements: # Input - A single integer T representing the number of test cases. - Followed by T test cases. Each test case consists of: - An integer N representing the number of students. - A list of N integers representing the scores of the students. # Output - For each test case, print a list of normalized scores rounded to two decimal places. # Constraints - 1 <= T <= 20 - 1 <= N <= 100 - 0 <= score <= 1000 # Example **Input:** ``` 2 5 55 60 65 70 75 3 100 200 300 ``` **Output:** ``` [0.00, 0.25, 0.50, 0.75, 1.00] [0.00, 0.50, 1.00] ``` # Explanation: In the first test case, the scores range from 55 to 75. The normalized scores are: ``` [(55-55)/(75-55), (60-55)/(75-55), (65-55)/(75-55), (70-55)/(75-55), (75-55)/(75-55)] = [0.00, 0.25, 0.50, 0.75, 1.00] ``` In the second test case, the scores range from 100 to 300. The normalized scores are: ``` [(100-100)/(300-100), (200-100)/(300-100), (300-100)/(300-100)] = [0.00, 0.50, 1.00] ```","solution":"def normalize_scores(test_cases): This function takes a list of test cases, where each test case is a tuple including the number of students and their respective scores, and returns a list of normalized scores for each test case. Normalized scores are calculated by subtracting the minimum score in the list from each score and dividing the result by the range (maximum score - minimum score) of the list. normalized_results = [] for i in range(test_cases[0]): scores = test_cases[i + 1][1] min_score = min(scores) max_score = max(scores) range_score = max_score - min_score if range_score == 0: normalized_scores = [0.00 for _ in scores] else: normalized_scores = [round((score - min_score) / range_score, 2) for score in scores] normalized_results.append(normalized_scores) return normalized_results"},{"question":"Thomas is working with strings that represent binary numbers, and he needs a way to compute the sum of two binary numbers without converting them to decimal form first. He decides to write a function that takes two strings, adds them as binary numbers, and returns the sum as a binary string. -----Input----- The first line contains an integer T, the number of test cases. The following T lines each contain two binary strings S1 and S2. -----Output----- Output T lines, each containing the sum of binary numbers S1 and S2. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ length of S1, S2 ≤ 10^3 - Both S1 and S2 are non-empty and contain only characters \'0\' and \'1\' -----Example----- Input: 3 1101 101 11 1 1010 1011 Output: 10010 100 10101","solution":"def add_binary_strings(s1, s2): Returns the sum of two binary strings s1 and s2 without converting them to decimal form. max_len = max(len(s1), len(s2)) # Ensure both strings are of the same length by padding with leading zeros s1 = s1.zfill(max_len) s2 = s2.zfill(max_len) # Initialize the result result = \'\' # Initialize the carry carry = 0 # Traverse the two strings for i in range(max_len - 1, -1, -1): # Sum the bits from s1 and s2 plus the carry current_sum = carry + int(s1[i]) + int(s2[i]) # If current_sum is 2 or 3, set carry to 1, otherwise to 0 carry = current_sum >> 1 # Append computed bit to the result result = str(current_sum & 1) + result # If there\'s still a carry left, append it to the result if carry: result = \'1\' + result return result def sum_binary_test_cases(test_cases): Given a list of test cases (each a tuple of two binary strings), return a list of the sums of each pair. results = [] for s1, s2 in test_cases: results.append(add_binary_strings(s1, s2)) return results"},{"question":"Write a function that takes a string as input and returns another string with each word reversed but in its original position. Punctuation should be treated as part of the word. For instance, the word \\"don\'t\\" should become \\"t\'nod\\". Spaces should not be altered. To make things clear, look at these examples: - The input string \\"Hello world!\\" should return \\"olleH !dlrow\\". - The input string \\"This is fun\\" should return \\"sihT si nuf\\". **Constraints:** - The input string will only contain spaces, alphabetical characters, and the following punctuation marks: `!`, `.`, `,`. **Example:** Input: \\"Coding is great!\\" Output: \\"gnidoC si !taerg\\"","solution":"def reverse_words_in_string(input_str): Reverses each word in the input string but keeps the words in their original positions. Punctuation is treated as part of the word. words = input_str.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"A company is organizing a team-building event and wants to form teams that adhere to specific compatibility rules. There are eight employees numbered 1, 2, ..., 8 respectively. Here are the team formation rules: ``` Employees 1 and 2 cannot be in the same team. Employees 3 and 4 cannot be in the same team. Employees 5 and 6 must always be in the same team. Either employee 7 or employee 8 (or both) must be in the team. ``` # Task You are given an integer array `team`. The array contains only digits 1-8 that represent employees 1-8. Your task is to determine if the team formation is valid. Return `true` if the team is valid, `false` otherwise. # Example For `team = [1, 3, 7]`, the output should be `true`. For `team = [7, 1, 2, 3]`, the output should be `false`. For `team = [1, 3, 5, 7]`, the output should be `false`. For `team = [1, 5, 6, 7, 3]`, the output should be `true`. For `team = [5, 6, 7]`, the output should be `true`. For `team = [5, 6, 7, 8]`, the output should be `true`. For `team = [6, 7, 8]`, the output should be `false`. For `team = [7, 8]`, the output should be `true`. # Note - All inputs are valid. The array contains at least 1 digit. Each digit appears at most once. - Good luck and happy coding!","solution":"def is_team_valid(team): Determine if the team formation in the given list is valid based on specified rules. Parameters: team (list): An integer list containing elements 1-8. Returns: bool: True if the team is valid, False otherwise. if 1 in team and 2 in team: return False if 3 in team and 4 in team: return False if (5 in team) != (6 in team): return False if 7 not in team and 8 not in team: return False return True"},{"question":"Monica loves watching birds and likes to keep track of the different species she observes. She has a list of bird observations where each observation is a bird ID corresponding to the species. She wants to find out which bird species she has seen the most frequently. If multiple species have the same highest frequency, Monica prefers the species with the smallest ID number. Write a function that takes an array of integers representing bird observations and returns the bird ID that Monica observed the most frequently. If multiple species have the same highest frequency, return the smallest bird ID among them. -----Input:----- - The first line contains an integer n, the number of observations. - The second line contains n space-separated integers representing bird IDs. -----Output:----- Output a single integer representing the bird ID that Monica observed most frequently. If there are multiple species with the same highest frequency, return the smallest bird ID. -----Constraints----- - 1 leq n leq 10^5 - 1 leq text{bird ID} leq 10^6 -----Sample Input:----- 6 1 4 4 4 5 3 8 2 2 3 3 4 4 5 5 -----Sample Output:----- 4 2 -----EXPLANATION:----- In the first sample case, Monica observed bird species with IDs 1, 4, 4, 4, 5, 3. Species with ID 4 has the highest frequency (3 occurrences). Thus, the output is 4. In the second sample case, species with IDs 2, 3, and 4 all have the same frequency (2 occurrences each). However, since bird ID 2 is the smallest among them, the output is 2.","solution":"def most_frequent_bird(n, bird_observations): from collections import Counter bird_count = Counter(bird_observations) most_frequent = max(bird_count.values()) most_frequent_birds = [bird for bird in bird_count if bird_count[bird] == most_frequent] return min(most_frequent_birds)"},{"question":"In the realm of cryptography, simple substitution ciphers are one of the oldest and most basic techniques. One such example is the Caesar cipher, attributed to Julius Caesar. In this cipher, each letter in the plaintext is shifted a fixed number of places down the alphabet. For example, with a shift of 3: - A would be replaced by D - B would become E - C would become F - And so on, wrapping around to the beginning of the alphabet, such that X becomes A, Y becomes B, and Z becomes C. Task Write a function `caesar_cipher` that takes two arguments: a string `s` and an integer `shift`. The function should return a new string where each letter in `s` has been shifted by `shift` positions in the alphabet according to the rules of the Caesar cipher. Non-letter characters should not be changed. # Example ```python def caesar_cipher(s, shift): pass # Your code here # Example usage: print(caesar_cipher(\\"Hello, World!\\", 3)) # \\"Khoor, Zruog!\\" ```","solution":"def caesar_cipher(s, shift): Encrypts the input string `s` using a Caesar cipher with a given `shift`. Only letters are shifted; non-letters remain unchanged. Args: s (str): The input string to be encrypted. shift (int): The number of positions to shift each letter. Returns: str: The encrypted string. def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: return c return \'\'.join(shift_char(c, shift) for c in s)"},{"question":"A company organizes a series of competitive programming contests. Each contest has a specific prize for the top performers. Participants can join multiple contests, but they can only win one prize for each contest they participate in. The company wants to know the total prize money won by a specific participant by the end of all contests. Given the details of contests and the participants\' winnings, determine the total prize money won by a target participant. -----Input:----- - First line will contain an integer T, the number of test cases. - For each test case, the first line contains two integers P and C — the number of participants and the number of contests, respectively. - Next line contains P integers, representing the participant IDs. - Following lines for each contest contain P integers, where the i-th integer represents the prize money won by the i-th participant in that contest (a value of 0 indicates the participant didn\'t win any prize in that contest). - Finally, the last line of each test case contains the ID of the target participant. -----Output:----- For each test case, output a single integer — the total prize money won by the target participant. -----Constraints----- - 1 leq T leq 100 - 1 leq P leq 10^3 - 1 leq C leq 100 - 1 leq text{Prize money} leq 10^4 - Participant IDs are unique positive integers -----Sample Input:----- 2 3 2 1 2 3 10 0 0 0 15 20 3 4 3 5 6 7 8 100 200 0 0 0 300 400 0 0 0 0 500 6 -----Sample Output:----- 20 500 -----EXPLANATION:----- For the first test case: - Participants are [1, 2, 3] - Contest 1 prizes: [10, 0, 0] - Contest 2 prizes: [0, 15, 20] - Total prize for participant 3 is 20 (only won prize in Contest 2) For the second test case: - Participants are [5, 6, 7, 8] - Contest 1 prizes: [100, 200, 0, 0] - Contest 2 prizes: [0, 300, 400, 0] - Contest 3 prizes: [0, 0, 0, 500] - Total prize for participant 6 is 500 (won prizes in Contest 1 and 2, and Contest 2 has the highest value)","solution":"def total_prize_money(T, test_cases): results = [] for case in test_cases: P, C, participant_ids, contests, target_id = case target_index = participant_ids.index(target_id) total_prize = 0 for contest in contests: total_prize += contest[target_index] results.append(total_prize) return results def parse_input(input_lines): input_iter = iter(input_lines) T = int(next(input_iter)) test_cases = [] for _ in range(T): P, C = map(int, next(input_iter).split()) participant_ids = list(map(int, next(input_iter).split())) contests = [list(map(int, next(input_iter).split())) for _ in range(C)] target_id = int(next(input_iter)) test_cases.append((P, C, participant_ids, contests, target_id)) return T, test_cases # Example usage: input_lines = [ \\"2\\", \\"3 2\\", \\"1 2 3\\", \\"10 0 0\\", \\"0 15 20\\", \\"3\\", \\"4 3\\", \\"5 6 7 8\\", \\"100 200 0 0\\", \\"0 300 400 0\\", \\"0 0 0 500\\", \\"6\\" ] T, test_cases = parse_input(input_lines) results = total_prize_money(T, test_cases) for result in results: print(result)"},{"question":"David enjoys collecting rare coins. He has collected N different types of coins (numbered from 1 through N) and plans to place a subset of these coins into his special display box. Each type of coin i has a value v_i and a probability q_i of being placed into the display box. Each coin is placed or excluded from the display box independently at random. David wants to determine the expected total value of coins displayed in the box. Help him compute the expected total value. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers v_1, v_2, ldots, v_N. - The third line contains N space-separated real numbers q_1, q_2, ldots, q_N. Each of these numbers is given with at most five digits after the decimal point. -----Output----- For each test case, print a single line containing one real number — the expected total value of the coins in the display box. Your answer will be considered correct if its absolute or relative error does not exceed 10^{-6}. -----Constraints----- - 1 le N le 10^5 - 0 le v_i le 10^9 for each valid i - 0 le q_i le 1 for each valid i - the sum of N over all test cases does not exceed 4 cdot 10^5 -----Example Input----- 2 3 10 20 30 0.5 0.5 0.5 2 5 15 1.0 0.2 -----Example Output----- 30.000000000000000 8.000000000000000 -----Explanation----- Example case 1: Each coin has a probability of 0.5 of being placed in the box. The expected value of the first coin is 10 cdot 0.5 = 5, the second coin is 20 cdot 0.5 = 10, and the third coin is 30 cdot 0.5 = 15. So the total expected value is 5 + 10 + 15 = 30. Example case 2: The first coin is definitely placed in the box, so its expected value is 5. The second coin has a probability of 0.2 of being placed in the box, so its expected value is 15 cdot 0.2 = 3. Thus, the total expected value is 5 + 3 = 8.","solution":"def expected_total_value(num_cases, cases): results = [] for i in range(num_cases): N = cases[i][0] values = cases[i][1] probabilities = cases[i][2] total_expected_value = 0 for v, q in zip(values, probabilities): total_expected_value += v * q results.append(total_expected_value) return results # Example usage: # num_cases = 2 # test_cases = [ # (3, [10, 20, 30], [0.5, 0.5, 0.5]), # (2, [5, 15], [1.0, 0.2]) # ] # print(expected_total_value(num_cases, test_cases))"},{"question":"Given an integer array nums, return an array containing the length of the longest increasing subsequence that ends with each element of nums. Example 1: Input: nums = [1, 3, 5, 4, 7] Output: [1, 2, 3, 3, 4] Explanation: The subsequence ending with element nums[4] = 7 is [1, 3, 4, 7], and the length is 4. Example 2: Input: nums = [2, 2, 2, 2, 2] Output: [1, 1, 1, 1, 1] Explanation: Each element forms a subsequence of length 1. Example 3: Input: nums = [0, 1, 0, 3, 2, 3] Output: [1, 2, 1, 3, 3, 4] Explanation: The subsequence ending with element nums[5] = 3 is [0, 1, 2, 3], and the length is 4. Note: 1. The length of the array nums will be in the range [1, 2000]. 2. Elements of nums will be in the range [-10^6, 10^6].","solution":"def longest_increasing_subsequence_lengths(nums): Given an integer array nums, return an array containing the length of the longest increasing subsequence that ends with each element of nums. if not nums: return [] n = len(nums) dp = [1] * n # dp[i] will store the length of the LIS ending at index i for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return dp"},{"question":"Given a binary tree, write a function to calculate the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Example 1: Input: 1 / 2 3 Output: 6 Explanation: The path 2 -> 1 -> 3 yields the maximum sum of 6. Example 2: Input: -10 / 9 20 / 15 7 Output: 42 Explanation: The path 15 -> 20 -> 7 yields the maximum sum of 42. Note: - The number of nodes in the binary tree is in the range [1, 3 * 10^4]. - -1000 <= Node.val <= 1000","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root: TreeNode) -> int: def dfs(node): nonlocal max_sum if not node: return 0 # Recursively calculate the maximum path sum of the left and right subtrees left_max = max(dfs(node.left), 0) right_max = max(dfs(node.right), 0) # Calculate the maximum path sum with the current node as the root current_max = node.val + left_max + right_max # Update the global maximum path sum if the current maximum is greater max_sum = max(max_sum, current_max) # Return the maximum sum of a path extending to the parent node return node.val + max(left_max, right_max) max_sum = float(\'-inf\') dfs(root) return max_sum"},{"question":"Convert a Roman numeral to an integer. Example 1: Input: \\"III\\" Output: 3 Example 2: Input: \\"IV\\" Output: 4 Example 3: Input: \\"IX\\" Output: 9 Example 4: Input: \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Example 5: Input: \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90, IV = 4. Note: The input will be a valid Roman numeral in the range from 1 to 3999.","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. :param s: str - Roman numeral string. :return: int - Corresponding integer. roman_to_integer = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_integer[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k. Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Explanation: There are two 1\'s in the array, at indices 0 and 3. Their absolute difference is 3, which is equal to k. Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Explanation: There are two 1\'s in the array, at indices 2 and 3. Their absolute difference is 1, which is equal to k. Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false Explanation: No two duplicates are at most 2 indices apart. Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 0 <= k <= 10^5","solution":"def contains_nearby_duplicate(nums, k): Given an integer array nums and an integer k, returns true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k. num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"Given a string, it is considered a `balanced` string if the number of occurrences of each character is the same. Write a function named `isBalanced`/`is_balanced`/`IsBalanced` that accepts a string and returns `true` if it is a balanced string, else `false`. # Examples: - isBalanced(\\"aabb\\") → true - isBalanced(\\"aabbcc\\") → true - isBalanced(\\"abcabc\\") → true - isBalanced(\\"aabbccc\\") → false # Constraints: - The input string will only contain lowercase alphabetic characters (\'a\'-\'z\'). - The string length will be between 1 and 1000 characters inclusive.","solution":"def is_balanced(s): Returns True if the input string is balanced, False otherwise. A string is considered balanced if each character appears the same number of times. from collections import Counter if not s: return False char_count = Counter(s) counts = set(char_count.values()) return len(counts) == 1"},{"question":"# Task Given a string containing a sequence of words separated by spaces, write a function that returns true if the sequence forms a valid sentence according to the following rules: 1. The sentence must start with an uppercase letter. 2. Each word must contain only alphabetical characters. 3. The sentence must end with a single period (.) with no spaces before it. # Example For `inputString = \\"Hello world.\\"`, the output should be `true`; For `inputString = \\"hello world.\\"`, the output should be `false` (does not start with an uppercase letter); For `inputString = \\"Hello world\\"`, the output should be `false` (does not end with a period); For `inputString = \\"Hello world. \\"`, the output should be `false` (period followed by a space); For `inputString = \\"Hello Wo123rld.\\"`, the output should be `false` (contains non-alphabetical characters). # Input/Output - `[input]` string `inputString` - `[output]` a boolean value `true` if inputString forms a valid sentence according to the rules, `false` otherwise.","solution":"def is_valid_sentence(inputString): Check if the input string is a valid sentence. Parameters: inputString (str): The sentence to check. Returns: bool: True if the input string is a valid sentence, False otherwise. # Rule 1: Sentence must start with an uppercase letter if not inputString[0].isupper(): return False # Rule 2: Sentence must end with a single period with no space before it if not inputString.endswith(\\".\\") or (len(inputString) > 1 and inputString[-2] == \\" \\"): return False # Remove the ending period for further checks sentence_body = inputString[:-1] # Split the sentence into words words = sentence_body.split() # Rule 3: Each word must contain only alphabetical characters for word in words: if not word.isalpha(): return False return True"},{"question":"Write a function that takes an integer array `arr` and an integer `x` as input. The function should return the minimum length of a contiguous subarray of which the sum is greater than or equal to `x`. If there isn\'t such a subarray, return 0 instead. Ensure your solution is efficient. # Constraints - The input array `arr` will have a length between `1` and `100,000`. - Each element of the array is a non-negative integer less than or equal to `10,000`. - The integer `x` will be a non-negative integer. # Example ``` arr = [2, 3, 1, 2, 4, 3] x = 7 ``` Output: `2` Explanation: The subarray `[4, 3]` has the minimal length under the problem constraint. ``` arr = [1, 4, 4] x = 4 ``` Output: `1` Explanation: The subarray `[4]` has the minimal length under the problem constraint. ``` arr = [1, 1, 1, 1, 1, 1, 1, 1] x = 11 ``` Output: `0` Explanation: There isn\'t a subarray with sum greater than or equal to `11`.","solution":"def min_subarray_len(arr, x): Returns the minimum length of a contiguous subarray of which the sum is greater than or equal to `x`. If there isn\'t such a subarray, returns 0. n = len(arr) start = 0 current_sum = 0 min_length = float(\'inf\') for end in range(n): current_sum += arr[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Evaluate a Permutation Given two strings `s1` and `s2`, write a function that checks if `s1` is a permutation of `s2`. A permutation is a rearrangement of the letters of one string to match another string. The lengths of both strings should be the same in order for them to be permutations of each other. Function Signature: ```python def is_permutation(s1: str, s2: str) -> bool: ``` Parameters: - `s1`: A string containing only lowercase alphabetical characters. - `s2`: A string containing only lowercase alphabetical characters. Returns: - `True` if `s1` is a permutation of `s2`, otherwise `False`. Examples: ```python assert is_permutation(\\"abc\\", \\"bca\\") == True assert is_permutation(\\"abcde\\", \\"edcba\\") == True assert is_permutation(\\"abc\\", \\"abd\\") == False ``` Note: - Consider edge cases such as empty strings or strings of different lengths.","solution":"def is_permutation(s1: str, s2: str) -> bool: Checks if s1 is a permutation of s2. if len(s1) != len(s2): return False return sorted(s1) == sorted(s2)"},{"question":"You are given a grid consisting of \'X\' and \'O\' characters. The task is to determine the number of distinct islands of \'X\' in the grid. An island is defined as a group of contiguous \'X\' characters that are connected horizontally or vertically (not diagonally). Write a function that takes as input the grid and outputs the number of islands. -----INPUT----- - The first line contains two integers, M and N, the number of rows and columns of the grid, respectively. - The next M lines each contain a string of length N consisting of \'X\' and \'O\' characters. -----OUTPUT----- An integer representing the number of distinct islands of \'X\' in the grid. -----CONSTRAINTS----- 1 <= M, N <= 1000 -----EXAMPLE INPUT----- 5 5 XOOXX XOOOX OOXXO OXXXX XXOOO -----EXAMPLE OUTPUT----- 3","solution":"def count_islands(grid): Returns the number of distinct islands of \'X\' in the grid. if not grid: return 0 def dfs(grid, x, y, visited): stack = [(x, y)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == \'X\' and (nx, ny) not in visited: visited.add((nx, ny)) stack.append((nx, ny)) visited = set() island_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'X\' and (i, j) not in visited: visited.add((i, j)) dfs(grid, i, j, visited) island_count += 1 return island_count"},{"question":"Check if a Binary Tree is Balanced A Binary Tree is considered balanced if the height of the left subtree and right subtree of every node differs by at most 1. Write a function `isBalanced` that takes the root node of a binary tree and returns `True` if the tree is balanced, otherwise returns `False`. Prerequisites This task assumes you are familiar with binary trees. If you are not familiar with them, you may read [this article on Wikipedia](https://en.wikipedia.org/wiki/Binary_tree) for more information. The binary trees in this Kata are **binary search trees (BSTs)**, where each node contains a value, and a reference to its left and right children. Node Class A `Node` class definition has been preloaded for you: ```python class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` Task Create a function `isBalanced` which accepts a `Node` argument `root` and returns `True` if the binary tree rooted at `root` is balanced, otherwise returns `False`. Here is an example of a balanced tree: ```python 3 / 9 20 / 15 7 ``` And here is an example of an unbalanced tree: ```python 1 / 2 2 / 3 3 / 4 4 ``` To test your function, consider the following trees and their expected results: 1. Tree: ```python Node(3, Node(9), Node(20, Node(15), Node(7))) ``` Expected result: `True` 2. Tree: ```python Node(1, Node(2, Node(3, Node(4), Node(4)), Node(3)), Node(2)) ``` Expected result: `False` 3. Tree: ```python Node(1, Node(2), Node(2, Node(3), Node(3))) ``` Expected result: `True` Write your function to ensure it correctly determines if a tree is balanced according to these examples.","solution":"class Node: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def isBalanced(root): Determines if a binary tree is balanced. A binary tree is considered balanced if the height of the left and right subtree of every node differ by at most 1. :param root: Root node of the binary tree :return: True if the tree is balanced, else False def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_height = 1 + max(left_height, right_height) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balanced _, balanced = height_and_balance(root) return balanced"},{"question":"Given an integer N, you are required to construct a team with N members. Each member has a unique skill level, which is a positive integer. To ensure a balanced team, the difference between the highest skill level and the lowest skill level in the team should be as minimized as possible. Your task is to determine the maximum possible minimum skill difference for the team. -----Input----- - The first line of the input contains a single integer T, the number of test cases. Each test case consists of two lines. - The first line of each test case contains an integer N denoting the number of team members you need to select. - The second line of each test case consists of N positive integers separated by space, representing the skill levels of the team members. -----Output----- For each test case, output a single integer, which is the maximum possible minimum skill difference for the team. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 2000 - 1 ≤ skill level ≤ 10^9 -----Example----- Input: 2 3 10 1 14 5 3 8 5 6 2 Output: 4 1 -----Explanation:----- Test Case 1: To form a balanced team of 3 members from skill levels [10, 1, 14], the most optimal team can be [10, 14]. The difference between the highest and lowest skill levels is 14 - 10 = 4. Test Case 2: To form a balanced team of 5 members from skill levels [3, 8, 5, 6, 2], the most optimal team can be [2, 3, 5, 6, 8]. The maximum possible minimum skill difference between the highest and lowest skill levels is 8 - 2 = 6. Note: In the second test case, the objective is to minimize the difficulty difference, so the minimum difference for optimal team selection is 1 (the difference between adjacent skill levels). Hence the output for this case is 1.","solution":"def maximum_minimum_skill_difference(test_cases): results = [] for case in test_cases: N, skills = case skills.sort() min_diff = float(\'inf\') for i in range(1, N): diff = skills[i] - skills[i-1] if diff < min_diff: min_diff = diff results.append(min_diff) return results # Example usage # T = 2 # test_cases = [(3, [10, 1, 14]), (5, [3, 8, 5, 6, 2])] # print(maximum_minimum_skill_difference(test_cases))"},{"question":"A palindrome is a string that reads the same forward and backward. For example, \\"madam\\" is a palindrome while \\"hello\\" is not. Given a string s, you are allowed to delete at most k characters from it. Your task is to check if you can make the string a palindrome by deleting no more than k characters. Write a function to determine if it is possible to make the given string a palindrome by deleting at most k characters. Example 1: Input: s = \\"abca\\", k = 1 Output: True Explanation: By deleting the character \'c\', the string becomes \\"aba\\", which is a palindrome. Example 2: Input: s = \\"abcdef\\", k = 2 Output: False Explanation: We can delete at most 2 characters, but it\'s not possible to make \\"abcdef\\" a palindrome by deleting just two characters. Example 3: Input: s = \\"deeee\\", k = 1 Output: True Explanation: By deleting one \'e\', the string becomes \\"deee\\" which is not yet a palindrome. But we can delete another \'e\', resulting in \\"dee\\" which again we can manipulate by another deletion to make \\"de\\" which is also not a palindrome. Indeed we cannot make a valid palindrome with given constraints. Constraints: - 1 <= s.length <= 100 - 0 <= k <= s.length - s contains only lowercase English letters.","solution":"def can_make_palindrome(s, k): Determines if the string s can be made a palindrome by deleting at most k characters. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) return dp[0][n-1] longest_palindrome_subseq_length = longest_palindromic_subsequence(s) return len(s) - longest_palindrome_subseq_length <= k"},{"question":"**Sudoku Validator** You are given a partially filled Sudoku grid that is 9x9 in size. The task is to write a function that determines if the given Sudoku grid is valid. The grid is represented as a list of lists, where each sublist represents a row of the Sudoku grid. The grid may contain digits from 1 to 9 and empty cells, which are denoted by the value 0. A Sudoku grid is considered valid if it satisfies the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the 9 sub-grids, which are 3x3 in size, must contain the digits 1-9 without repetition. Note: - The provided Sudoku grid does not necessarily have to be solvable, it just needs to be valid in terms of its layout and the filled numbers. - An empty cell is denoted by 0 and should be ignored in validation. Your function should return `True` if the Sudoku grid is valid, and `False` otherwise. # Function Signature ```python def is_valid_sudoku(grid: List[List[int]]) -> bool: ``` # Example ```python grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] assert is_valid_sudoku(grid) == True grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 7] ] assert is_valid_sudoku(grid) == False # The digit 7 appears twice in the last row ``` # Constraints - `grid` is a list of list of integers. - Each sublist has a length of 9. - Each element in the sublists is an integer between 0 and 9, inclusive.","solution":"from typing import List def is_valid_sudoku(grid: List[List[int]]) -> bool: # Helper function to check if a block (row, column, or sub-grid) is valid def is_valid_block(block: List[int]) -> bool: block = [num for num in block if num != 0] # Ignore the 0s return len(block) == len(set(block)) # Check rows for row in grid: if not is_valid_block(row): return False # Check columns for col in range(9): if not is_valid_block([grid[row][col] for row in range(9)]): return False # Check sub-grids for row in range(0, 9, 3): for col in range(0, 9, 3): block = [grid[r][c] for r in range(row, row + 3) for c in range(col, col + 3)] if not is_valid_block(block): return False return True"},{"question":"# Task Given an array of distinct integers, find all triplets `(a, b, c)` such that `a + b + c = 0`. Each triplet should be in ascending order, and the set of triplets should be sorted in lexicographic order. # Example For the array `[-1, 0, 1, 2, -1, -4]`, the output should be: ``` [[-1, -1, 2], [-1, 0, 1]] ``` Here, the triplets that add up to zero are: - `-1 + -1 + 2 = 0` - `-1 + 0 + 1 = 0` # Input/Output - `[input]` array of integers `arr` Constraints: `3 ≤ arr.length ≤ 1000` - `[output]` an array of arrays An array of all unique triplets `[a, b, c]` which each sums to zero. Readers should ensure that each triplet is in ascending order with `a ≤ b ≤ c` and that the set of triplets is lexicographically sorted.","solution":"def three_sum(arr): Given an array of distinct integers, find all triplets (a, b, c) such that a + b + c = 0. Each triplet is in ascending order, and the set of triplets is sorted in lexicographic order. arr.sort() triplets = [] for i in range(len(arr) - 2): # Skip duplicate elements to avoid duplicate triplets if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, len(arr) - 1 while left < right: s = arr[i] + arr[left] + arr[right] if s == 0: triplets.append([arr[i], arr[left], arr[right]]) left += 1 right -= 1 # Skip duplicates for left and right pointers while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif s < 0: left += 1 else: right -= 1 return triplets"},{"question":"Write a function that takes a list of integers and a target sum as input, and returns a list of unique pairs of integers from the input list that add up to the target sum. Each pair should be sorted in ascending order and the resulting list of pairs should be sorted lexicographically. Example: ```python input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] target_sum = 10 Output: [(1, 9), (2, 8), (3, 7), (4, 6)] ```","solution":"def find_pairs_with_sum(input_list, target_sum): Returns a list of unique pairs from input_list that add up to target_sum. Each pair is sorted in ascending order and the resulting list is sorted lexicographically. seen = set() pairs = set() for number in input_list: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return sorted(pairs)"},{"question":"**Find the isolated teams in a corporate network** In a corporate network, employees collaborate with each other on various projects. The company wants to identify isolated teams that have no collaborations outside their group. We will provide you with a list of all employees and a list of collaborations. Your task is to find and return a sorted list of isolated groups of employees. An isolated group of employees is defined as a set of employees who only collaborate with each other and have no collaborations with employees outside their group. Example ```python employees = [0, 1, 2, 3, 4, 5] collaborations = [(0, 1), (1, 2), (3, 4)] isolated_teams = [[0, 1, 2], [3, 4], [5]] ``` Explanation We have `collaborations = [(0, 1), (1, 2), (3, 4)]`. - Employee `0` collaborates with `1`, and `1` with `2`, thus forming an isolated group `[0, 1, 2]`. - Employee `3` collaborates with `4`, forming another isolated group `[3, 4]`. - Employee `5` has no collaborations, and thus forms a single isolated group `[5]`. Therefore, we output `[[0, 1, 2], [3, 4], [5]]` in sorted order.","solution":"from collections import defaultdict, deque def find_isolated_teams(employees, collaborations): # Create an adjacency list for the employees graph adjacency_list = defaultdict(list) for a, b in collaborations: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = set() isolated_teams = [] def bfs(start): queue = deque([start]) team = [] while queue: emp = queue.popleft() if emp not in visited: visited.add(emp) team.append(emp) for neighbor in adjacency_list[emp]: if neighbor not in visited: queue.append(neighbor) return team for emp in employees: if emp not in visited: isolated_group = bfs(emp) isolated_teams.append(sorted(isolated_group)) return sorted(isolated_teams)"},{"question":"Write a function that takes a string `s` as input and returns the longest substring without repeating characters. Example: Input: `\\"abcabcbb\\"` Output: `3` Explanation: The longest substring without repeating characters is `\\"abc\\"`, which has a length of 3. Input: `\\"bbbbb\\"` Output: `1` Explanation: The longest substring without repeating characters is `\\"b\\"`, which has a length of 1. Input: `\\"pwwkew\\"` Output: `3` Explanation: The longest substring without repeating characters is `\\"wke\\"`, which has a length of 3. Input: `\\"\\"` Output: `0` Explanation: The input string is empty, so the maximum length of a substring without repeating characters is 0.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. if not s: return 0 max_length = 0 start = 0 char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"# Task You are given a string `time` representing a 24-hour clock (e.g., \\"23:59\\"). Write a function that takes this string as an input, and returns the next closest time that can be formed using the same digits currently present in the input time. # Input/Output `[input]` string `time` A string consisting of exactly 5 characters in the format \\"HH:MM\\", where \\"HH\\" is a two-digit hour (00-23) and \\"MM\\" is a two-digit minute (00-59). `[output]` string A string representing the next closest time that can be formed using the same digits currently present in the input time. # Example For `time = \\"19:34\\"`, the output should be `\\"19:39\\"`. For `time = \\"23:59\\"`, the output should be `\\"22:22\\"`. For `time = \\"01:32\\"`, the output should be `\\"01:33\\"`. For `time = \\"12:21\\"`, the output should be `\\"12:22\\"`.","solution":"def next_closest_time(time): def get_all_possible_times(digits): # Generate all possible times sorted possible_times = set() for h1 in digits: for h2 in digits: if int(h1 + h2) < 24: for m1 in digits: for m2 in digits: if int(m1 + m2) < 60: possible_times.add(f\\"{h1}{h2}:{m1}{m2}\\") return sorted(possible_times) # Extract digits from the given time original_digits = sorted(time.replace(\\":\\", \\"\\")) # Get all valid times valid_times = get_all_possible_times(original_digits) # Find the next closest time in the list current_index = valid_times.index(time) next_index = (current_index + 1) % len(valid_times) return valid_times[next_index] # Example usage print(next_closest_time(\\"19:34\\")) # Output: \\"19:39\\" print(next_closest_time(\\"23:59\\")) # Output: \\"22:22\\""},{"question":"You are given an array of integers and an integer K. Your task is to determine whether there exist two distinct indices i and j in the array such that the absolute difference between arr[i] and arr[j] is at most K. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N (the number of elements in the array) and K. - The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, print \\"YES\\" if there are two such indices, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 105 - 0 ≤ K ≤ 109 - The sum of N over all test cases does not exceed 2⋅105 - -109 ≤ arr[i] ≤ 109 -----Example Input----- 2 5 2 1 5 3 2 8 3 0 1 2 3 -----Example Output----- YES NO -----Explanation----- Example case 1: (i=1, j=2) with values arr[i]=1 and arr[j]=3 has an absolute difference of 2, which is less than or equal to K=2. Example case 2: There are no two different elements that have an absolute difference of 0.","solution":"def has_pair_with_diff(arr, K): Check if there exist two distinct indices i and j such that the absolute difference between arr[i] and arr[j] is at most K. arr = sorted(arr) n = len(arr) for i in range(n): for j in range(i + 1, n): if abs(arr[i] - arr[j]) <= K: return \\"YES\\" if abs(arr[i] - arr[j]) > K: break return \\"NO\\" def run_test_cases(test_cases): result = [] for N, K, arr in test_cases: result.append(has_pair_with_diff(arr, K)) return result"},{"question":"# Task: Write a function that takes a list of integers and returns a new list containing only the unique elements from the original list. The elements in the resulting list should be in the same order as their first occurrence in the original list. Example: ``` remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5] remove_duplicates([4, 5, 4, 4, 5, 3]) == [4, 5, 3] remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] ``` Good luck!","solution":"def remove_duplicates(nums): Returns a new list containing only the unique elements from the original list, in the order of their first occurrence. seen = set() unique_nums = [] for num in nums: if num not in seen: seen.add(num) unique_nums.append(num) return unique_nums"},{"question":"Given a list of strings `words`, write a function to find all anagram pairs in the list. An anagram pair is defined as two words that have the same characters in a different order. Let\'s consider the following list: ``` words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"elogog\\"] ``` In this case: - \\"listen\\", \\"silent\\", and \\"enlist\\" are anagram pairs. - \\"google\\", \\"gogole\\", and \\"elogog\\" are also anagram pairs. The function signature is: ```python def find_anagram_pairs(words: List[str]) -> List[Tuple[str, str]]: ``` Example: ``` Input: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"elogog\\"] Output: [(\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), (\\"silent\\", \\"enlist\\"), (\\"google\\", \\"gogole\\"), (\\"google\\", \\"elogog\\"), (\\"gogole\\", \\"elogog\\")] ``` Constraints: - The list `words` will have at least two words. - Each word will consist of lowercase alphabets and will have a length between 1 and 100. The function should return a list of tuples, where each tuple contains two words that are anagrams of each other. Ensure that each pair is only listed once and is returned in lexicographical order. Write clean and efficient code to identify anagram pairs in the given list.","solution":"from typing import List, Tuple from collections import defaultdict def find_anagram_pairs(words: List[str]) -> List[Tuple[str, str]]: Returns a list of tuples containing all anagram pairs from the input list of words. # Using a dictionary to group words by sorted tuple of characters anagram_dict = defaultdict(list) for word in words: sorted_word = tuple(sorted(word)) anagram_dict[sorted_word].append(word) anagram_pairs = [] # For each group of anagrams, we need to generate pair combinations for group in anagram_dict.values(): if len(group) > 1: sorted_group = sorted(group) for i in range(len(sorted_group)): for j in range(i + 1, len(sorted_group)): anagram_pairs.append((sorted_group[i], sorted_group[j])) return anagram_pairs"},{"question":"Task Write a function that simulates a queue using two stacks. Your function should support the following operations: `enqueue(x)` - Add an item `x` to the end of the queue; `dequeue()` - Remove the item from the front of the queue and return it. If the queue is empty, return `None`. You are required to implement this using two stacks (`stack1` and `stack2`). Do not use any other data structures to directly achieve the queue behavior. Example enqueue(1) enqueue(2) dequeue() -> 1 dequeue() -> 2 enqueue(3) enqueue(4) dequeue() -> 3 Constraints - The operations should be efficient, but you only need to consider the average case over a large number of operations. - You do not need to handle threading or process concurrency issues. Implementation ```python class QueueWithTwoStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): self.stack1.append(x) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: return None return self.stack2.pop() ``` Usage ```python queue = QueueWithTwoStacks() queue.enqueue(1) queue.enqueue(2) print(queue.dequeue()) # 1 print(queue.dequeue()) # 2 queue.enqueue(3) queue.enqueue(4) print(queue.dequeue()) # 3 ```","solution":"class QueueWithTwoStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): self.stack1.append(x) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: return None return self.stack2.pop()"},{"question":"Given a string, determine the longest substring that contains no more than two distinct characters. -----Input----- A single string S. -----Output----- Print the length of the longest substring of S that contains no more than two distinct characters. -----Constraints----- 1<=|S|<=1000, where |S| is the length of the input string. -----Example----- Input: eceba Output: 3 -----Explanation----- The longest substring with no more than two distinct characters is \\"ece\\" with a length of 3. Input: ccaabbb Output: 5 -----Explanation----- The longest substring with no more than two distinct characters is \\"aabbb\\" with a length of 5.","solution":"def longest_substring_with_two_distinct_chars(s): Returns the length of the longest substring that contains no more than two distinct characters. if len(s) == 0: return 0 left = 0 max_len = 0 char_count = {} for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"# Task A company has an internal system that keeps track of project dependencies. Projects are represented by nodes and dependencies by directed edges in a Directed Acyclic Graph (DAG). Your task is to determine the order in which projects should be completed given their dependencies. Write a function to find a topological ordering of the DAG where each directed edge `u -> v` means that project `u` must be completed before project `v`. # Example ``` For `projects = [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\"]` and `dependencies = [(\\"a\\", \\"d\\"), (\\"f\\", \\"b\\"), (\\"b\\", \\"d\\"), (\\"f\\", \\"a\\"), (\\"d\\", \\"c\\")]`, the output should be `[\\"f\\", \\"e\\", \\"a\\", \\"b\\", \\"d\\", \\"c\\"]`. For `projects = [\\"w\\", \\"x\\", \\"y\\", \\"z\\"]` and `dependencies = [(\\"w\\", \\"z\\"), (\\"x\\", \\"z\\"), (\\"z\\", \\"y\\")]`, the output should be `[\\"w\\", \\"x\\", \\"z\\", \\"y\\"]`. Note that there can be multiple valid orderings, so any valid topological sort order is acceptable. - Input/Output - `[input]` array of strings `projects` A list of project names, each project represented as a string. - `[input]` list of tuple pairs `dependencies` A list of dependencies where each dependency is represented as a tuple `(u, v)` meaning that project `u` must be completed before project `v`. - `[output]` array of strings A list of project names in a valid topological order.","solution":"from collections import defaultdict, deque def find_project_order(projects, dependencies): # Step 1: Create an adjacency list for the projects adj_list = defaultdict(list) indegree = defaultdict(int) for u, v in dependencies: adj_list[u].append(v) indegree[v] += 1 # Step 2: Find all projects with no incoming edges (indegree 0) zero_indegree_queue = deque([project for project in projects if indegree[project] == 0]) topological_order = [] while zero_indegree_queue: project = zero_indegree_queue.popleft() topological_order.append(project) # Reduce the indegree of the neighboring nodes by 1 for neighbor in adj_list[project]: indegree[neighbor] -= 1 # If indegree becomes 0, add it to the queue if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) # If topological_order does not contain all projects, there was a cycle if len(topological_order) != len(projects): return [] return topological_order"},{"question":"Background - Anagrams: An anagram is a rearrangement of the letters of a word or phrase to form another word or phrase, using all the original letters exactly once. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other because they both contain the same letters. Now! Your task: **Given a list of words, group the anagrams together and return the result in any order.** Example: ```python group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) ``` Expected output: ```python [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` Explanation: \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other, so they are grouped together. \\"tan\\" and \\"nat\\" are anagrams of each other, so they are grouped together. \\"bat\\" has no anagram in the list, so it stands alone. Note: - All inputs will be in lowercase. - The order of groups inside the list and the order of words inside groups does not matter. - Your function should be able to handle empty inputs gracefully and return an empty list in such cases.","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Your task is to create a function that takes a string representing the times (in 24-hour format) at which students check in to an online class, and returns a summary of the total hours and minutes spent in the class by each student. Each student\'s check-in is represented by a time interval separated by \\"to\\". For example, here is a string showing the check-in intervals of several students: `\\"08:00-10:00,12:00-14:00; 09:30-11:30,13:00-15:00\\"` - The string consists of multiple students\' check-ins separated by a semicolon (;). Each student\'s check-in intervals are separated by a comma (,). - Each interval is in the format \\"HH:MM-HH:MM\\". You need to calculate the total time each student spent in class and return a string summarizing this information. The result should be in the format: `\\"Student 1: hh hours mm minutes, Student 2: hh hours mm minutes\\"` For the provided example, where the string is `\\"08:00-10:00,12:00-14:00; 09:30-11:30,13:00-15:00\\"`, the result will be: `\\"Student 1: 4 hours 0 minutes, Student 2: 4 hours 0 minutes\\"` **Constraints**: - If the input string is empty, return an empty string. - Assume the given times are valid and well-formatted. - The times are provided in 24-hour format. - Each check-in interval is within a single day (no intervals cross over midnight). Write a function `calculate_class_time(intervals: str) -> str` that implements the above requirements.","solution":"def calculate_class_time(intervals: str) -> str: if not intervals: return \\"\\" def time_to_minutes(t): hours, minutes = map(int, t.split(\':\')) return hours * 60 + minutes student_intervals = intervals.split(\';\') results = [] for i, student in enumerate(student_intervals): total_minutes = 0 for interval in student.split(\',\'): start, end = interval.split(\'-\') total_minutes += time_to_minutes(end) - time_to_minutes(start) hours = total_minutes // 60 minutes = total_minutes % 60 results.append(f\\"Student {i+1}: {hours} hours {minutes} minutes\\") return \', \'.join(results)"},{"question":"=====Problem Statement===== You are given a string consisting of lowercase English alphabets and integer digits. Your task is to compute the frequency of each character and digit and print them in ascending order of their ASCII values. =====Input Format===== A single string S with length between 1 and 1000, consisting of lowercase English letters and integer digits. =====Constraints===== 1 <= len(S) <= 1000 =====Output Format===== Print the characters and digits in ascending order of their ASCII values, each followed by its frequency, separated by a space. Each character or digit and its frequency should be printed on a new line. =====Sample Input===== ``` a3b2c3a1d9e0 ``` =====Sample Output===== ``` 0 1 1 1 2 1 3 2 9 1 a 2 b 1 c 1 d 1 e 1 ``` =====Explanation===== The frequency of each element in the string \\"a3b2c3a1d9e0\\" is counted, and the resulting character-frequency pairs are printed in the order of their ASCII values. \\"0\\" appears once, \\"1\\" appears once, \\"2\\" appears once, \\"3\\" appears twice, and so on. The characters and digits are listed in the ascending order of their ASCII values.","solution":"def char_frequency(s): Computes the frequency of each character and digit in the string s and returns a list of tuples sorted by the ASCII values. # Using a dictionary to store frequencies of characters and digits freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Sort the dictionary keys based on their ASCII values and return sorted_freq = sorted(freq.items()) return sorted_freq"},{"question":"Samantha is designing a smart temperature control system for a greenhouse. She needs a function that will analyze temperature readings and determine when to water the plants. The plants should be watered if the average temperature over a given period falls below a specific threshold. **Input** You will be provided with an integer `n` denoting the number of temperature readings, followed by `n` integer temperature readings. Additionally, you will receive an integer representing the threshold temperature. **Output** The output should be \\"Water plants\\" if the average temperature across the provided readings is less than the threshold temperature, and \\"Do not water plants\\" otherwise. Output the average temperature rounded to 2 decimal places along with the decision in the format: `Average temperature: X.XX - Water plants` or `Average temperature: X.XX - Do not water plants` `Show some love ;) Rank and Upvote!`","solution":"def water_plants(n, readings, threshold): Determines if the plants should be watered based on the average temperature. Parameters: n (int): Number of temperature readings. readings (list of int): List of temperature readings. threshold (int): Threshold temperature. Returns: str: Decision on whether to water the plants or not with the average temperature rounded to 2 decimal places. if n == 0: raise ValueError(\\"Number of readings should be greater than zero\\") average_temperature = sum(readings) / n average_temp_rounded = round(average_temperature, 2) if average_temp_rounded < threshold: return f\\"Average temperature: {average_temp_rounded} - Water plants\\" else: return f\\"Average temperature: {average_temp_rounded} - Do not water plants\\""},{"question":"# Task You are given a list of integers representing the heights of buildings in a city, where each element represents the height of a building in a straight line. Your task is to compute the amount of water that can be trapped after a rainstorm. The water that can be trapped is quantified by how much water could be trapped between the buildings if it rains, with the assumption that no water can escape the edges, and the water forms horizontal lines between buildings. # Example For `heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, the output should be `6`. The amount of trapped water in each section can be visualized as: ``` # #~~~# #~#~ #~~#~~#~# #~~~# ``` Where `~` represents water trapped between the buildings. # Input/Output - `[input]` integer array `heights` A list of non-negative integers representing the building heights. - `[output]` an integer The total amount of water that can be trapped.","solution":"def trap_rain_water(heights): Computes the amount of water that can be trapped after a rainstorm given the heights of buildings. :param heights: List[int] - List of non-negative integers representing the building heights. :return: Int - Total amount of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"A company wants to ensure that employees adhere to a work schedule that matches their required working hours. Employees should log their work start and end times. Given an employee\'s login and logout times in 24-hour format (e.g., \\"09:00\\", \\"17:00\\"), validate whether the employee has worked at least the required number of hours. The required working hours are 8 hours per day. Write a function `validate_work_schedule(login_time, logout_time)` that takes in two parameters: - `login_time` (string) - the time the employee logged in. - `logout_time` (string) - the time the employee logged out. The function should return `True` if the employee has worked at least 8 hours, otherwise return `False`. Consider scenarios where the logout time could be on the following day. You can assume that the inputs will always be valid 24-hour format times. Note: You do not need to consider minute precision for this problem; whole hours are sufficient for working hours calculation.","solution":"from datetime import datetime, timedelta def validate_work_schedule(login_time, logout_time): Validates that an employee has worked at least 8 hours. :param login_time: str, the login time in \\"HH:MM\\" 24-hour format :param logout_time: str, the logout time in \\"HH:MM\\" 24-hour format :return: bool, whether the employee has worked at least 8 hours fmt = \'%H:%M\' login_dt = datetime.strptime(login_time, fmt) logout_dt = datetime.strptime(logout_time, fmt) # Handle case where logout time is on the next day if logout_dt <= login_dt: logout_dt += timedelta(days=1) worked_hours = (logout_dt - login_dt).seconds / 3600 return worked_hours >= 8"},{"question":"Weather Log Summary ☀️🌧️🍃 You need to implement a function called `weatherSummary` that will process an array of daily weather observations and output a summary of the weather conditions for a specified range of days. The function has two parameters, the first parameter `data` is an array of objects where each object represents the weather conditions of a particular day with the following properties: - `date` -> a string representing the date in the format \\"YYYY-MM-DD\\" - `temperature` -> a number representing the temperature of that day - `condition` -> a string representing the weather condition, which can be one of the following: `Sunny`, `Cloudy`, `Rainy`, `Windy` Example of the array: ``` [ { date: \'2023-10-01\', temperature: 22, condition: \'Sunny\' }, { date: \'2023-10-02\', temperature: 19, condition: \'Cloudy\' }, { date: \'2023-10-03\', temperature: 21, condition: \'Sunny\' }, ] ``` The second parameter `range` is an object with two properties: - `start` -> a string representing the start date in the format \\"YYYY-MM-DD\\" - `end` -> a string representing the end date in the format \\"YYYY-MM-DD\\" The function should return an object with the following properties: - `averageTemperature` -> a number representing the average temperature for the specified date range - `mostCommonCondition` -> a string representing the most common weather condition for the specified date range Example: ``` data = [ { date: \'2023-10-01\', temperature: 22, condition: \'Sunny\' }, { date: \'2023-10-02\', temperature: 19, condition: \'Cloudy\' }, { date: \'2023-10-03\', temperature: 21, condition: \'Sunny\' }, { date: \'2023-10-04\', temperature: 18, condition: \'Rainy\' }, { date: \'2023-10-05\', temperature: 20, condition: \'Sunny\' } ] range = { start: \'2023-10-01\', end: \'2023-10-03\' } weatherSummary(data, range) // { averageTemperature: 20.67, mostCommonCondition: \'Sunny\' } range = { start: \'2023-10-02\', end: \'2023-10-04\' } weatherSummary(data, range) // { averageTemperature: 19.33, mostCommonCondition: \'Cloudy\' } range = { start: \'2023-10-01\', end: \'2023-10-05\' } weatherSummary(data, range) // { averageTemperature: 20, mostCommonCondition: \'Sunny\' } ``` **More in test cases!** Notes: - You can assume that the `data` array is always non-empty and the dates in the `range` parameter are always valid and within the date range present in the `data`. - The `averageTemperature` should be rounded to two decimal places. - If there are multiple conditions with the same frequency, return the alphabetical first one. Now, get the weather data summarized! 🌤️📈","solution":"def weatherSummary(data, date_range): from collections import Counter from datetime import datetime start_date = datetime.strptime(date_range[\'start\'], \'%Y-%m-%d\') end_date = datetime.strptime(date_range[\'end\'], \'%Y-%m-%d\') filtered_data = [ entry for entry in data if start_date <= datetime.strptime(entry[\'date\'], \'%Y-%m-%d\') <= end_date ] total_temp = sum(entry[\'temperature\'] for entry in filtered_data) count = len(filtered_data) average_temp = round(total_temp / count, 2) condition_counter = Counter(entry[\'condition\'] for entry in filtered_data) most_common_condition = min( condition_counter.items(), key=lambda x: (-x[1], x[0]) )[0] return { \'averageTemperature\': average_temp, \'mostCommonCondition\': most_common_condition }"},{"question":"Given an array of integers, you need to find the smallest positive integer that cannot be represented as the sum of any subset of the given array. For example: Example 1: ``` arr = [1, 2, 3, 10] output = 7 # Explanation: # Subsets and their sums: [], [1], [1, 2], [1, 3], [1, 2, 3], [2], [2, 3], [3], [10], ... # The smallest positive integer that can\'t be represented as sum of any subset is 7. ``` Example 2: ``` arr = [1, 1, 1, 1] output = 5 # Explanation: # Subsets and their sums: [], [1], [1,1], [1,1,1], [1,1,1,1], ... # The smallest positive integer that can\'t be represented as sum of any subset is 5. ``` You need to implement a function that receives the array of integers and outputs the smallest positive integer that cannot be represented as the sum of any subset of the array. ```python def find_smallest_unrepresentable_sum(arr): pass # Examples: print(find_smallest_unrepresentable_sum([1, 2, 3, 10])) # output = 7 print(find_smallest_unrepresentable_sum([1, 1, 1, 1])) # output = 5 ``` Constraints: ``` 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^9 ```","solution":"def find_smallest_unrepresentable_sum(arr): Finds the smallest positive integer that cannot be represented as the sum of any subset of the given array. arr.sort() smallest_unrepresentable = 1 for num in arr: if num > smallest_unrepresentable: break smallest_unrepresentable += num return smallest_unrepresentable"},{"question":"Imagine you are working for a company that handles lottery ticket entries. Each ticket is represented by a string displaying a series of numbers separated by commas. Your task is to write a function that takes a list of customer entries and a winning ticket number, and determines if any of the customer entries contain the winning number. Each string entry represents a series of numbers (e.g., \\"23,54,67,89,12\\"), and you need to check if the winning number is any of these numbers. Write a function that accepts a list of strings and a single integer (the winning number): ```python def check_winning_entry(entries: list, winning_number: int) -> str: # Your code here ``` If any of the entries contain the winning number, return \\"Winner found!\\". Otherwise, return \\"No winner found...\\". # Examples ```python entries = [\\"12,45,78,34,89\\", \\"11,23,45,67,78\\", \\"90,34,12,56,78\\"] winning_number = 23 print(check_winning_entry(entries, winning_number)) # Output: \\"Winner found!\\" entries = [\\"12,45,78,34,89\\", \\"13,23,46,67,79\\", \\"91,34,12,56,79\\"] winning_number = 77 print(check_winning_entry(entries, winning_number)) # Output: \\"No winner found...\\" ```","solution":"def check_winning_entry(entries: list, winning_number: int) -> str: Checks if the winning number is in any of the entries. Args: entries (list): A list of strings, each representing a series of numbers. winning_number (int): The winning number to check for. Returns: str: \\"Winner found!\\" if the winning number is found in any entry, otherwise \\"No winner found...\\". for entry in entries: numbers = entry.split(\',\') if str(winning_number) in numbers: return \\"Winner found!\\" return \\"No winner found...\\""},{"question":"Write a function that takes a list of dictionaries and a key name, then returns a new list of dictionaries sorted by the values associated with the given key in ascending order. If the key is not present in a dictionary, that dictionary should be placed at the end of the list. # Examples ```python sort_dict_list([{\\"id\\": 3, \\"name\\": \\"Alice\\"}, {\\"id\\": 1, \\"name\\": \\"Bob\\"}, {\\"id\\": 2}], \\"id\\") # Output: [{\\"id\\": 1, \\"name\\": \\"Bob\\"}, {\\"id\\": 2}, {\\"id\\": 3, \\"name\\": \\"Alice\\"}] sort_dict_list([{\\"id\\": 3, \\"age\\": 25}, {\\"age\\": 22}, {\\"id\\": 2, \\"age\\": 23}, {\\"id\\": 1}], \\"id\\") # Output: [{\\"id\\": 1}, {\\"id\\": 2, \\"age\\": 23}, {\\"id\\": 3, \\"age\\": 25}, {\\"age\\": 22}] sort_dict_list([{\\"name\\": \\"Charlie\\"}, {\\"name\\": \\"Alice\\"}, {\\"name\\": \\"Bob\\"}], \\"name\\") # Output: [{\\"name\\": \\"Alice\\"}, {\\"name\\": \\"Bob\\"}, {\\"name\\": \\"Charlie\\"}] sort_dict_list([{\\"x\\": 5}, {\\"y\\": 7}, {\\"x\\": 3}], \\"x\\") # Output: [{\\"x\\": 3}, {\\"x\\": 5}, {\\"y\\": 7}] ```","solution":"def sort_dict_list(dict_list, key_name): Returns a new list of dictionaries sorted by the values associated with the given key in ascending order. If the key is not present in a dictionary, that dictionary is placed at the end of the list. :param dict_list: List of dictionaries to be sorted. :param key_name: Key name to sort the dictionaries by. :return: Sorted list of dictionaries. # Separate dictionaries with and without the specified key with_key = [d for d in dict_list if key_name in d] without_key = [d for d in dict_list if key_name not in d] # Sort dictionaries containing the specified key by the value associated with the key with_key_sorted = sorted(with_key, key=lambda x: x[key_name]) # Combine sorted dictionaries with key and those without key return with_key_sorted + without_key"},{"question":"Given a string, determine if it can be rearranged into a palindrome. Your task is to write a function that checks if any permutation of the input string is a palindrome. A palindrome is a word or phrase that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. **Input:** - A string consisting of lowercase English alphabets, which may include spaces. **Output:** - Return `True` if any permutation of the input string can form a palindrome, and `False` otherwise. **Constraints:** - Your function should be case-insensitive and ignore spaces. - The length of the string will not exceed `10^4`. Examples ``` \\"tact coa\\" => True (permutations: \\"taco cat\\", \\"atco cta\\") \\"hello\\" => False \\"aba\\" => True ```","solution":"def can_form_palindrome(s): Determine if any permutation of the input string can form a palindrome. Args: s (str): input string consisting of lowercase English alphabets and spaces Returns: bool: True if any permutation of the input string can form a palindrome, False otherwise # Remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Use a set to track characters that appear an odd number of times odd_chars = set() for char in s: if char in odd_chars: odd_chars.remove(char) else: odd_chars.add(char) # For a string to be able to form a palindrome, at most one character can appear an odd number of times return len(odd_chars) <= 1"},{"question":"Given an integer `n`, determine the minimum number of replacements needed for `n` to become `1`. You can perform the following operations on `n`: 1. If `n` is even, replace `n` with `n / 2`. 2. If `n` is odd, you can either replace `n` with `n + 1` or `n - 1`. Write a function `minReplacements(n)` that computes the minimum number of replacements needed for `n` to become `1`. For example: minReplacements(8) returns 3, because 8 -> 4 -> 2 -> 1. minReplacements(7) returns 4, because 7 -> 8 -> 4 -> 2 -> 1. Hint: Use recursion with memoization to optimize performance.","solution":"def minReplacements(n, memo=None): Returns the minimum number of replacements needed for n to become 1. if memo is None: memo = {} if n == 1: return 0 if n in memo: return memo[n] if n % 2 == 0: memo[n] = 1 + minReplacements(n // 2, memo) else: memo[n] = 1 + min(minReplacements(n + 1, memo), minReplacements(n - 1, memo)) return memo[n]"},{"question":"You are given an integer array a of length n and a target integer k. You need to determine the number of subarrays of a such that the sum of the elements in each subarray is equal to k. Recall that a subarray is a contiguous part of an array. For example, if the array is a = [1, 2, 3, 4] and k = 5, then the subarrays that sum to 5 are [2, 3] and [1, 4], so the answer is 2. Write a function to find the number of such subarrays for the given array and target sum. -----Input----- The first line of input contains two integers n and k (1 le n le 2 cdot 10^4, 1 le k le 10^9). The second line of input contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9). -----Output----- Print a single integer — the number of subarrays of a whose sum is exactly k. -----Example----- Input 5 5 1 2 3 4 5 Output 2 -----Note----- In the example above, the subarrays are: - [2, 3] (sum = 5) - [5] (sum = 5) Thus, the number of subarrays whose sum is exactly k = 5 is 2.","solution":"def count_subarrays_with_sum_k(arr, k): from collections import defaultdict # This dictionary keeps track of the cumulative sum frequencies cum_sum_freq = defaultdict(int) cum_sum_freq[0] = 1 # Initialize with 0 sum cum_sum = 0 count = 0 for num in arr: cum_sum += num # If cum_sum - k exists in cum_sum_freq, it means there is a subarray that adds up to k if (cum_sum - k) in cum_sum_freq: count += cum_sum_freq[cum_sum - k] # Update the cumulative sum frequency cum_sum_freq[cum_sum] += 1 return count # Example usage: # n, k = 5, 5 # a = [1, 2, 3, 4, 5] # print(count_subarrays_with_sum_k(a, k)) # Output: 2"},{"question":"Create a function that takes a single string word as input and returns the length of its longest substring without repeating characters. **Rules:** - The input string consists of ASCII characters. - The function should be case-sensitive. **Examples:** ```python longest_substring_without_repeating(\\"abcabcbb\\") == 3 # \\"abc\\" longest_substring_without_repeating(\\"bbbbb\\") == 1 # \\"b\\" longest_substring_without_repeating(\\"pwwkew\\") == 3 # \\"wke\\" longest_substring_without_repeating(\\"c\\") == 1 # \\"c\\" longest_substring_without_repeating(\\"aab\\") == 2 # \\"ab\\" ```","solution":"def longest_substring_without_repeating(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function that takes a list of integers as input and returns a list containing only the first integer from each group of consecutive identical integers. For example: ``` Input: [1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 1, 1] Output: [1, 2, 3, 4, 5, 1] ```","solution":"def remove_consecutive_duplicates(arr): Returns a list containing only the first integer from each group of consecutive identical integers. if not arr: return [] result = [arr[0]] for i in range(1, len(arr)): if arr[i] != arr[i-1]: result.append(arr[i]) return result"},{"question":"Create a function `grid_unique_paths(rows, cols)` that calculates the number of unique paths one can take to move from the top-left corner of a grid to the bottom-right corner. You can only move either down or right at any point in time. The grid dimensions are provided by `rows` and `cols`. To illustrate: ``` grid_unique_paths(2, 3) should return 3 ``` Here\'s a breakdown of the possible paths for a 2x3 grid: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Thus, for a grid of dimensions 2 (rows) by 3 (cols), there are 3 unique paths. Another example: ``` grid_unique_paths(3, 3) should return 6 ``` Here are the possible paths for a 3x3 grid: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Thus, for a grid of dimensions 3 (rows) by 3 (cols), there are 6 unique paths. **Function Signature:** ```python def grid_unique_paths(rows: int, cols: int) -> int: pass ```","solution":"def grid_unique_paths(rows, cols): Calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid. Args: rows (int): The number of rows in the grid. cols (int): The number of columns in the grid. Returns: (int): The number of unique paths. # Initialize a 2D array with all elements as 1 dp = [[1] * cols for _ in range(rows)] # Populate the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the result return dp[rows-1][cols-1]"},{"question":"You are given a dictionary that contains items as keys and their respective prices as values. Write a function to determine the three most expensive items in the dictionary and return them in a list of tuples, where each tuple contains the item and its price. Implement error handling to manage cases where the dictionary is empty or has less than three items. Your function should have the following signature: ```python def top_three_expensive_items(items: dict) -> list: ``` Ensure robustness and efficiency in the implementation.","solution":"def top_three_expensive_items(items): Returns a list of tuples with the three most expensive items. Each tuple contains the item and its price. Parameters: items (dict): Dictionary containing items as keys and their respective prices as values. Returns: list: List of tuples with the top 3 most expensive items and their prices. if not isinstance(items, dict): raise ValueError(\\"Input must be a dictionary\\") if len(items) == 0: return [] if len(items) < 3: return sorted(items.items(), key=lambda x: x[1], reverse=True) sorted_items = sorted(items.items(), key=lambda x: x[1], reverse=True) return sorted_items[:3]"},{"question":"A museum is laying out a new gallery space with a floor plan that is represented as a 2D grid of characters. Each character represents a cell in the grid which is either empty (\'.\') or a wall (\'#\'). The installation team needs your help to determine the maximum size of any empty rectangular area in the grid that can be dedicated to a single art piece. An empty rectangular area is defined as a subgrid of contiguous cells in the grid that contains only \'.\' characters. Your task is to write a program that takes the floor plan as input and outputs the area of the largest empty rectangular region in the grid. -----Input----- The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of: - The first line contains two integers, R and C (1 ≤ R, C ≤ 1000), the number of rows and columns in the grid. - Each of the next R lines contains a string of C characters, representing the floor plan of the gallery. Each character is either \'.\' or \'#\'. -----Output----- For each test case, print an integer representing the area of the largest empty rectangular region. -----Example----- Input: 2 4 5 # #...# #.#.# # 3 4 .#.. #..# .... Output: 3 4 -----Output details----- For the first test case, the largest empty rectangular region is 1x3, giving an area of 3. For the second test case, the largest empty rectangular region is 2x2, giving an area of 4.","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 rows, cols = len(matrix), len(matrix[0]) heights = [0] * (cols + 1) for row in matrix: for i in range(cols): if row[i] == \'.\': heights[i] += 1 else: heights[i] = 0 stack = [-1] for i in range(cols + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def largest_area_in_gallery(test_cases): results = [] for t in test_cases: R, C, grid = t[\'R\'], t[\'C\'], t[\'grid\'] max_area = maximalRectangle(grid) results.append(max_area) return results"},{"question":"In this challenge, you are given an array of integers representing the heights of N buildings. The buildings are arranged in a straight line and each building has a different height. You can see the buildings from the left side, and you want to know which buildings are visible when viewed from this side. A building is visible if all the buildings before it (to the left in the array) are shorter. Write a function that takes an array of building heights and returns an array of the heights of the visible buildings when viewed from the left side. For example: ``` heights = [3, 5, 4, 9, 6, 7, 8] ``` ``` visible_buildings([3, 5, 4, 9, 6, 7, 8]) == [3, 5, 9] ``` **Parameters** - An integer array `heights` containing the heights of N buildings where 1 ≤ N ≤ 100,000 and 1 ≤ heights[i] ≤ 1,000,000 for each 0 ≤ i < N. **Output** - The function should return an array containing the heights of the visible buildings. The code should be efficient enough to process long arrays (maximum length approximately 100,000).","solution":"def visible_buildings(heights): Returns the heights of the visible buildings from the left side. Parameters: heights (list of int): Heights of the buildings. Returns: list of int: Heights of the visible buildings. if not heights: return [] visible = [] max_height = -1 for height in heights: if height > max_height: visible.append(height) max_height = height return visible"},{"question":"# Word Ladder Transformation You are given two words `beginWord` and `endWord`, and a dictionary `wordList`. Write a function that returns the length of the shortest transformation sequence from `beginWord` to `endWord`, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the word list. **Note:** - Return 0 if there is no such transformation sequence. - All words have the same length. - All words contain only lowercase alphabetical characters. - You may assume no duplicates in the word list. - You may assume `beginWord` and `endWord` are non-empty and are not the same. # Input - `beginWord` (string), the word you begin with. - `endWord` (string), the word you need to transform into. - `wordList` (List of strings), available words for transformation. # Output The minimum number of steps required to transform the `beginWord` to `endWord`. If it\'s not possible, return 0. # Example ```python >>> beginWord = \\"hit\\" >>> endWord = \\"cog\\" >>> wordList = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] >>> word_ladder(beginWord, endWord, wordList) 5 ``` Explanation: ``` hit -> hot -> dot -> dog -> cog ``` # Example 2 ```python >>> beginWord = \\"hit\\" >>> endWord = \\"cog\\" >>> wordList = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] >>> word_ladder(beginWord, endWord, wordList) 0 ``` Explanation: ``` EndWord \\"cog\\" is not in word list. ``` # Constraints - All strings in `wordList` are unique. - The length of `beginWord` and `endWord` is the same. - 1 ≤ Word list length ≤ 5000 - 1 ≤ Word length ≤ 10 # Function Signature ```python def word_ladder(beginWord: str, endWord: str, wordList: List[str]) -> int: ```","solution":"from collections import deque from typing import List def word_ladder(beginWord: str, endWord: str, wordList: List[str]) -> int: def add_next_words(word, word_set, queue, visited): for i in range(len(word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = word[:i] + c + word[i + 1:] if next_word in word_set and next_word not in visited: visited.add(next_word) queue.append((next_word, steps + 1)) if endWord not in wordList: return 0 word_set = set(wordList) queue = deque([(beginWord, 1)]) visited = set([beginWord]) while queue: current_word, steps = queue.popleft() if current_word == endWord: return steps add_next_words(current_word, word_set, queue, visited) return 0"},{"question":"Given an integer ```n```, write a function ```sum_even_sequence()``` that returns the sum of all even numbers in the Fibonacci sequence up to but not exceeding ```n```. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Examples: ```python sum_even_sequence(10) == 10 # 2 + 8 = 10 sum_even_sequence(34) == 44 # 2 + 8 + 34 = 44 sum_even_sequence(100) == 44 # 2 + 8 + 34 = 44 ``` If ```n``` is negative, return 0 since the Fibonacci sequence only considers non-negative values. ```python sum_even_sequence(-10) == 0 ``` Additionally, if ```n``` is not an integer, return a string saying \\"Invalid input\\". ```python sum_even_sequence(3.14) == \\"Invalid input\\" sum_even_sequence(\\"eight\\") == \\"Invalid input\\" ``` Write your implementation in such a way that it efficiently computes the result and handles edge cases appropriately.","solution":"def sum_even_sequence(n): Returns the sum of all even numbers in the Fibonacci sequence up to but not exceeding n. If n is not an integer, returns \\"Invalid input\\". If n is negative, returns 0. if not isinstance(n, int): return \\"Invalid input\\" if n < 0: return 0 sum_even = 0 a, b = 0, 1 # Initializing the first two numbers of the Fibonacci sequence while b <= n: if b % 2 == 0: sum_even += b a, b = b, a + b return sum_even"},{"question":"Ananya is an amateur photographer and loves taking pictures of wildlife. She has an old digital camera that saves pictures in a series of files with specific filenames. While transferring these photos to her computer, she noticed that sometimes a photo gets saved with the wrong extension. She decided to write a program to rename the photos with correct extensions. The rules are as follows: 1. If the file starts with \'IMG_\' and it has incorrectly been saved with a \'.mp3\' extension, it should be changed to \'.jpg\'. 2. If the file starts with \'VID_\' and it has incorrectly been saved with a \'.jpg\' extension, it should be changed to \'.mp4\'. 3. Any other files should remain unchanged. Help Ananya by writing a function that takes a list of filenames and returns a list of filenames with corrected extensions. -----Input:----- The first line contains an integer n (1 <= n <= 1000) representing the number of filenames. The next n lines each contain a string representing a filename. -----Output:----- Output contains n lines, each representing the corrected filenames in the same order. -----Constraints:----- 1 <= length of filename <= 100 -----Example:----- Input: 5 IMG_1234.mp3 VID_5678.jpg IMG_sunset.jpg VID_trip.mp4 README.txt Output: IMG_1234.jpg VID_5678.mp4 IMG_sunset.jpg VID_trip.mp4 README.txt","solution":"def correct_filenames(filenames): corrected_filenames = [] for name in filenames: if name.startswith(\'IMG_\') and name.endswith(\'.mp3\'): corrected_filenames.append(name[:-4] + \'.jpg\') elif name.startswith(\'VID_\') and name.endswith(\'.jpg\'): corrected_filenames.append(name[:-4] + \'.mp4\') else: corrected_filenames.append(name) return corrected_filenames"},{"question":"Design a function `create_schedule` that receives a list of tuples containing the schedule of different tasks. Each tuple consists of two elements: a string representing the day of the week, and the duration of the task in hours (an integer). The function should return a dictionary summarizing the total tasks time for each day of the week. The function `create_schedule` should adhere to the following rules: 1. If no tasks are scheduled for a specific day, the total hours for that day should be zero. 2. The days of the week are: \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\'. 3. The tasks might not appear in the order of the days of the week. For example: ```python tasks = [(\'Monday\', 2), (\'Tuesday\', 3), (\'Monday\', 1), (\'Wednesday\', 4), (\'Friday\', 5)] create_schedule(tasks) ``` The output should be: ```python { \'Monday\': 3, \'Tuesday\': 3, \'Wednesday\': 4, \'Thursday\': 0, \'Friday\': 5, \'Saturday\': 0, \'Sunday\': 0 } ```","solution":"def create_schedule(tasks): This function receives a list of tuples containing the schedule of different tasks. Each tuple consists of two elements: a string representing the day of the week, and the duration of the task in hours (an integer). The function returns a dictionary summarizing the total tasks time for each day of the week. # Initialize the schedule with all days of the week set to 0 hours schedule = { \'Monday\': 0, \'Tuesday\': 0, \'Wednesday\': 0, \'Thursday\': 0, \'Friday\': 0, \'Saturday\': 0, \'Sunday\': 0 } # Iterate through the tasks and accumulate the hours for each day for day, duration in tasks: if day in schedule: schedule[day] += duration return schedule"},{"question":"# Task: Write a function `reverse_sentence` that reverses the words in a given string. The function should return a string with each word in reverse order, but the words themselves should remain in their original order. * Ignore leading and trailing spaces. * Reduce multiple spaces between words to a single space in the output. # Examples: reverse_sentence(\\"Hello world!\\"): \\"olleH !dlrow\\" reverse_sentence(\\" This is an example \\"): \\"sihT si na elpmaxe\\" reverse_sentence(\\"Python coding assessment\\"): \\"nohtyP gnidoc tnemssessa\\" ```Hint: You may find the split method and list comprehensions useful.```","solution":"def reverse_sentence(sentence): Reverses each word in the given sentence while preserving the order of words and reducing multiple spaces to a single space. words = sentence.split() reversed_words = [word[::-1] for word in words] return \\" \\".join(reversed_words)"},{"question":"=====Function Descriptions===== collections.Counter A Counter is a dictionary subclass that helps count hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. Example Code >>> from collections import Counter >>> >>> fruits = [\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'apple\'] >>> fruit_counter = Counter(fruits) >>> print(fruit_counter) Counter({\'apple\': 3, \'banana\': 2, \'orange\': 1}) =====Problem Statement===== You are given a list of student names and their corresponding scores. Each student may appear multiple times in the list with different scores. Your task is to calculate the highest score for each student and print the student names and their highest scores in the order of their first appearance. =====Input Format===== The first line contains the number of entries, N. The next N lines each contain the student name and score separated by a space. =====Constraints===== - 0 < N ≤ 100 - 0 ≤ score ≤ 100 =====Output Format===== Print the student name and their highest score in the order of their first appearance. Example ----- Input 7 alice 70 bob 50 alice 80 bob 60 claire 75 alice 85 bob 100 Output alice 85 bob 100 claire 75","solution":"def get_highest_scores(entries): Returns a list of tuples representing the student names and their highest scores in the order of their first appearance. highest_scores = {} first_appearance = {} for i, entry in enumerate(entries): name, score = entry.split() score = int(score) if name not in highest_scores: highest_scores[name] = score first_appearance[name] = i else: if score > highest_scores[name]: highest_scores[name] = score sorted_names = sorted(first_appearance, key=first_appearance.get) result = [(name, highest_scores[name]) for name in sorted_names] return result"},{"question":"Create a function `duplicate_count` that will count the number of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string will contain only alphanumeric characters and will be either lowercase or mixed case. For example: ```Python duplicate_count(\\"abcde\\") == 0 duplicate_count(\\"aA11\\") == 2 duplicate_count(\\"aabbcde\\") == 2 duplicate_count(\\"abcdefghaB\\") == 2 duplicate_count(\\"112233\\") == 3 ``` More examples in test cases. Good luck!","solution":"def duplicate_count(s): Counts the number of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. Args: - s: A string containing only alphanumeric characters. Returns: - An integer representing the count of distinct case-insensitive characters and digits that occur more than once. s = s.lower() char_count = {} # Count each character\'s frequency for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count characters that appear more than once return sum(1 for count in char_count.values() if count > 1)"},{"question":"You are tasked with developing a function that identifies the second highest unique integer in a list of integers. It\'s possible that the list may not have a second highest unique integer, in which case you should return `None`. # Exercise Create a function `second_highest_unique` that takes a list of integers as an argument and returns an integer representing the second highest unique number, or `None` if there is no second highest unique number. # Rules - If the list is empty or contains only one unique number, return `None`. - The input list will only contain integers. - The function should handle both positive and negative integers. # Examples ```python second_highest_unique([2, 3, 3, 5, 5, 4, 4]) # should return 4 second_highest_unique([10, 20, 30, 30, 40, 50, 50]) # should return 40 second_highest_unique([1, 1, 1, 1, 1]) # should return None second_highest_unique([1]) # should return None ```","solution":"def second_highest_unique(arr): Returns the second highest unique integer in a list of integers. If there is no second highest unique integer, returns None. unique_numbers = list(set(arr)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"In a binary tree, the depth of each node is the number of edges from the root to the node. A tree is considered balanced if the depth of the two subtrees of every node never differs by more than 1. Write a function that determines if a given binary tree is height-balanced. The function definition should be: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isBalanced(root: TreeNode) -> bool: ``` # Input - The root node of the binary tree, `root`. # Output - Return `True` if the tree is height-balanced, `False` otherwise. # Examples Example 1: ``` Input: root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) Output: True ``` Example 2: ``` Input: root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(2) root.left.left = TreeNode(3) root.left.right = TreeNode(3) root.left.left.left = TreeNode(4) root.left.left.right = TreeNode(4) Output: False ``` Example 3: ``` Input: root = None Output: True ``` # Note: - The number of nodes in the tree is in the range `[0, 5000]`. - The values of the nodes are in the range `[-10^4, 10^4]`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isBalanced(root: TreeNode) -> bool: def check_depth(node): if not node: return 0, True left_depth, left_balanced = check_depth(node.left) right_depth, right_balanced = check_depth(node.right) current_balanced = left_balanced and right_balanced and abs(left_depth - right_depth) <= 1 current_depth = 1 + max(left_depth, right_depth) return current_depth, current_balanced _, balanced = check_depth(root) return balanced"},{"question":"A robot is programmed to clean a rectangular grid room. The robot starts at the top-left corner of the grid and moves according to a series of commands. Each command directs the robot to move one step in one of four directions: up, down, left, or right. Write a function to determine if the robot stays within the grid after executing all the given commands. -----Input:----- - First line will contain T, the number of test cases. - Each test case contains two lines of input: - The first line contains two integers M and N, the number of rows and columns in the grid. - The second line contains a string S, the series of commands. -----Output:----- For each test case, output \\"YES\\" if the robot stays within the grid after executing all the commands, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq M, N leq 100 - 1 leq |S| leq 1000 - S will contain only characters \'U\', \'D\', \'L\', \'R\' -----Sample Input:----- 3 3 3 RRDD 4 4 UUURRRDDD 2 2 RUULD -----Sample Output:----- YES NO NO -----EXPLANATION:----- - In the first test case, the robot follows the commands and stays within the grid. It moves from (0,0) to (0,1), (0,2), (1,2), and finally (2,2) which is within the grid. - In the second test case, the robot starts at (0,0) and the \'U\' command will immediately move it out of the grid bounds, resulting in a \\"NO\\". - In the third test case, the sequence surpasses grid dimensions both horizontally and vertically, resulting in \\"NO\\".","solution":"def robot_within_grid(T, test_cases): results = [] for case in test_cases: M, N, S = case row, col = 0, 0 within_grid = True for command in S: if command == \'U\': row -= 1 elif command == \'D\': row += 1 elif command == \'L\': col -= 1 elif command == \'R\': col += 1 if row < 0 or row >= M or col < 0 or col >= N: within_grid = False break if within_grid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence P_1, P_2, ..., P_N of length N representing the popularity score of N different products. You need to decide if it is possible to select a non-empty subset of the products such that the sum of their popularity scores is exactly equal to S. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". ----- Constraints ----- - 1 leq N leq 100 - 1 leq P_i leq 1000 - 1 leq S leq 100000 ----- Input ----- Input is given from Standard Input in the following format: N S P_1 P_2 ... P_N ----- Output ----- If it is possible to select a non-empty subset of the products such that their popularity scores sum exactly to S, print \\"YES\\". Otherwise, print \\"NO\\". ----- Sample Input ----- 5 9 3 34 4 12 5 ----- Sample Output ----- YES Explanation: One of the possible subsets is {4, 5} which sums to 9. Another Sample Input: 4 30 3 34 4 12 Sample Output: NO","solution":"def can_sum_to_S(N, S, P): Determines if there exists a non-empty subset of P that sums exactly to S. Parameters: N (int): Number of products. S (int): Target sum. P (List[int]): List of popularity scores of products. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". # Use dynamic programming to solve the subset sum problem dp = [False] * (S + 1) dp[0] = True for num in P: for t in range(S, num - 1, -1): if dp[t - num]: dp[t] = True return \\"YES\\" if dp[S] else \\"NO\\""},{"question":"You are given an incomplete lowercase alphabetical pattern, and your task is to find out the missing letter. The pattern is created by repeatedly appending the next unused letter of the alphabet. However, some letters are removed from the pattern. Your task is to write a function `findMissingLetter(pattern: str) -> str` that takes a single string argument `pattern` and returns the missing letter. # Example ```python assert findMissingLetter(\\"abdefg\\") == \\"c\\" # missing c assert findMissingLetter(\\"acdfghi\\") == \\"b\\" # missing b ``` # Constraints - The input string will contain only lowercase alphabetical letters and will be non-empty. - There will always be one and only one missing letter. # Input - `pattern` (str): a non-empty string containing lowercase alphabetical letters, missing exactly one letter. # Output - `findMissingLetter(pattern: str) -> str`: a single lowercase letter which is missing from the pattern.","solution":"def findMissingLetter(pattern: str) -> str: Returns the missing letter in the given pattern. alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" for letter in alphabet: if letter not in pattern: return letter"},{"question":"You are given a string of lowercase English letters. You need to find the minimum number of operations required to make all the characters of the string the same. An operation is defined as choosing any two adjacent characters in the string and merging them into a new character according to the following rules: - The merged character is the one that is lexicographically larger than both characters (e.g., merging \'a\' and \'b\' results in \'b\', merging \'b\' and \'c\' results in \'c\', etc.). - If the characters are the same, the result remains unchanged. You must calculate the minimum number of operations to transform the entire string into a single character, such that all characters in the final string are identical. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains a string of N lowercase English letters. -----Output----- For each test case, print a single line containing one integer - the minimum number of operations required to make all characters of the string the same. -----Constraints----- - 1 le T le 1,000 - 1 le N le 100 -----Example Input----- 2 5 aabcc 6 zzzzzz -----Example Output----- 2 0","solution":"def min_operations_to_unify_string(string): # Initialize the maximum character found in the string to the smallest possible char. max_char = \'a\' # Find the lexicographically largest character in the string for char in string: if char > max_char: max_char = char # The number of operations is the number of unique characters from # the largest character found down to \'a\'. unique_chars = set(string) return len(unique_chars) - 1 def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] string = test_cases[i][1] results.append(min_operations_to_unify_string(string)) return results"},{"question":"Write a function called `minimumJumps` to determine the minimum number of jumps a frog needs to reach the other side of a river. The frog can jump between different stones in the river, but not all stones are accessible. You are given a list of integers where each element represents a stone, and the value of that element represents the maximum length of the jump the frog can make from that stone. The stone with the value 0 means that the frog can\'t jump from that stone. The task is to find the minimum number of jumps required to reach the other side of the river, defined as the stone positioned after the last element in the list. If it is not possible to reach the other side of the river, return -1. Example: ``` minimumJumps([6, 2, 4, 0, 5, 1, 1, 4, 2, 9]) should return 3, because: 1. The first jump is from position 0 to position 4 (index 0 -> 0 + 4 = 4) 2. The second jump is from position 4 to position 8 (index 4 -> 4 + 4 = 8) 3. The third jump is from position 8 to the other side of the river (index 8 -> 8 + 2 = 10, beyond the last stone) ``` Another Example: ``` minimumJumps([1, 1, 0, 1]) should return -1, because the frog can\'t jump from stone at position 2 and will get stuck. ``` Constraints: - The list will have at least one element and at most 100,000 elements. - Each element in the list will be an integer between 0 and 1,000.","solution":"def minimumJumps(stones): Determines the minimum number of jumps needed for the frog to cross the river. n = len(stones) if n == 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(n): farthest = max(farthest, i + stones[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= n: return jumps return -1"},{"question":"# Task: Write a function `cumulative_sum` that takes a list of integers as its input and returns a new list where each element is the cumulative sum of the elements up to that position in the original list. The cumulative sum is a sequence where each term is the sum of all previous terms, including the current one. # Examples: `cumulative_sum([1, 2, 3, 4])` should return `[1, 3, 6, 10]` `cumulative_sum([4, 3, 2, 1])` should return `[4, 7, 9, 10]` `cumulative_sum([])` should return `[]`","solution":"def cumulative_sum(nums): Returns the cumulative sum list of the given list of integers. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"You are given two large numbers represented as strings. Your task is to implement a function `sumStrings` that takes these two strings as input and returns their sum, also as a string. The input numbers may be very large, so standard integer manipulations may not be suitable. Example ```python sumStrings(\'12345678901234567890\', \'98765432109876543210\') # should return \'111111111011111111100\' sumStrings(\'500\', \'500\') # should return \'1000\' ``` Constraints - The input strings will contain only digits. - The input strings will not contain leading zeros unless the number is zero.","solution":"def sumStrings(num1, num2): Returns the sum of two large numbers represented as strings. # Reverse both strings to make it easier to process from the least significant digit num1 = num1[::-1] num2 = num2[::-1] max_length = max(len(num1), len(num2)) carry = 0 result = [] for i in range(max_length): digit1 = int(num1[i]) if i < len(num1) else 0 digit2 = int(num2[i]) if i < len(num2) else 0 # Calculate the sum of the current digits plus any carry from the previous digit digit_sum = digit1 + digit2 + carry carry = digit_sum // 10 # Append the current digit to the result list result.append(str(digit_sum % 10)) # If there\'s any carry left, append it if carry: result.append(str(carry)) # Reverse the result list back to a string and join return \'\'.join(result[::-1])"},{"question":"Design a function that takes a list of words and identifies all pairs of words whose concatenation forms a palindrome. -----Input----- The input consists of a single integer N followed by a list of N strings. Each string consists of lowercase English letters only. -----Output----- The output should list all pairs of indices (i, j) such that the concatenation of words[i] and words[j] forms a palindrome. The indices should be listed as tuples (i, j) and the list of tuples should be sorted in lexicographical order. If no such pair exists, return an empty list. -----Constraints----- 1 ≤ N ≤ 5000 1 ≤ len(word) ≤ 300 -----Examples----- Input: 4 abcd dcba ll sssll Output: [(0, 1), (1, 0), (2, 3)] Input: 3 bat tab cat Output: [(0, 1), (1, 0)] Input: 2 abc def Output: [] Notes: - A string is considered a palindrome if it reads the same forwards and backwards. - The concatenation of words[i] and words[j] is formed by joining the two strings together as words[i] + words[j].","solution":"def is_palindrome(s): Check if a given string is a palindrome. return s == s[::-1] def palindrome_pairs(words): Identify all pairs of indices (i, j) such that the concatenation of words[i] and words[j] forms a palindrome. result = [] for i in range(len(words)): for j in range(len(words)): if i != j and is_palindrome(words[i] + words[j]): result.append((i, j)) return sorted(result)"},{"question":"Write a function `validate_brackets` that takes a string as input and checks whether the sequence of brackets in the string is valid. You need to consider three types of brackets: `()`, `{}`, and `[]`. The function should return `True` if the input string is valid, and `False` otherwise. A string containing brackets is considered valid if: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Brackets must close in the correct order, i.e., an opened bracket should be closed before another pair of brackets is closed. Examples: ```python validate_brackets(\\"()\\") # True validate_brackets(\\"()[]{}\\") # True validate_brackets(\\"(]\\") # False validate_brackets(\\"([)]\\") # False validate_brackets(\\"{[]}\\") # True validate_brackets(\\"{[()()]}\\") # True validate_brackets(\\"({[([{}])]})\\") # True validate_brackets(\\"(\\") # False ``` Implement the function `validate_brackets` using the signature provided below: ```python def validate_brackets(s: str) -> bool: # Your code here ```","solution":"def validate_brackets(s: str) -> bool: Validates if the sequence of brackets in the string is valid. Args: s (str): Input string containing brackets. Returns: bool: True if the brackets string is valid, False otherwise. stack = [] brackets_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in s: if char in brackets_map: # If it\'s an opening bracket stack.append(char) elif stack and char == brackets_map[stack[-1]]: # If it\'s a closing bracket and matches the last opening one stack.pop() else: # It\'s a closing bracket but doesn\'t match or there\'s no opening bracket to match return False return not stack # If stack is empty, all brackets matched correctly"},{"question":"Given a list of integers, you need to find out whether the list is an arithmetic progression or not. An arithmetic progression is a sequence of numbers such that the difference of any two successive members of the sequence is a constant. Write a function `is_arithmetic_progression(lst)` that returns `True` if the given list represents an arithmetic progression, otherwise `False`. The input list will have at least 2 elements. Example: ```python is_arithmetic_progression([1, 3, 5, 7, 9]) # => True is_arithmetic_progression([5, 10, 15, 20, 25]) # => True is_arithmetic_progression([1, 2, 4, 8]) # => False is_arithmetic_progression([7, 7, 7, 7]) # => True ```","solution":"def is_arithmetic_progression(lst): Determines if the given list is an arithmetic progression. :param lst: List of integers :return: True if the list is an arithmetic progression, otherwise False if len(lst) < 2: return False common_diff = lst[1] - lst[0] for i in range(2, len(lst)): if lst[i] - lst[i - 1] != common_diff: return False return True"},{"question":"Merge Intervals Your task is to write a method that merges overlapping intervals and returns a new list of non-overlapping intervals. You are given a list of closed intervals, where each interval is represented by a pair of integers [start, end]. A closed interval [a, b] includes all the integers x where a ≤ x ≤ b. Two intervals [c, d] and [e, f] overlap if c ≤ f and e ≤ d. The intervals can be in any order, and your algorithm should efficiently merge all overlapping intervals, returning a new list of sorted non-overlapping intervals. # Examples ``` [[1, 3], [2, 6], [8, 10], [15, 18]] -> [[1, 6], [8, 10], [15, 18]] [[1, 4], [4, 5]] -> [[1, 5]] [[1, 10], [2, 3], [4, 8]] -> [[1, 10]] [[1, 2], [3, 4], [5, 6]] -> [[1, 2], [3, 4], [5, 6]] ``` # Constraints - The input list will never be null and will always contain at least one interval. - Each interval will be represented as a list with exactly two integers [start, end] where start ≤ end. - All interval values will be non-negative integers less than or equal to 10^4. - Ensure that your result does not modify the input list.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a new list of non-overlapping intervals. Args: intervals: List of intervals represented as [start, end] Returns: List of merged intervals # First, sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or intervals do not overlap, add interval to merged if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # If intervals overlap, merge them merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Write a program that helps a gardener design a watering schedule for their garden. For each section of the garden, the gardener wants to water the plants in a specific pattern based on the section number. Your task is to generate the watering sequence. -----Input:----- - First-line will contain N, the number of sections in the garden. Then the sections follow. - Each line contains a single integer S, which represents the section number. -----Output:----- For each section, output the watering sequence in the form of \\"*\\". -----Constraints----- - 1 leq N leq 50 - 1 leq S leq 30 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- * ** *** ***","solution":"def generate_watering_sequence(n, sections): Generates the watering sequence based on the section numbers. Parameters: n (int): Number of sections in the garden. sections (list): List containing section numbers. Returns: list: List of strings representing the watering sequences. watering_sequences = [] for s in sections: watering_sequence = \'*\' * s watering_sequences.append(watering_sequence) return watering_sequences"},{"question":"You are given a string of parentheses containing only the characters \'(\' and \')\'. Your task is to determine if the string is valid. A valid parentheses string is defined as follows: 1. It must be an empty string or contain a matched pair of parentheses. 2. For every opening parenthesis \'(\', there must be a corresponding closing parenthesis \')\'. 3. The parentheses must close in the correct order. -----Input:----- - First line will contain T, number of testcases. Then the subsequent lines will contain the test strings. - Each testcase consists of a single line of input: a string made up of characters \'(\' and \')\'. -----Output:----- For each testcase, print \\"YES\\" if the parentheses string is valid, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 10^5 - 1 leq |S| leq 10^5 for each string S made up of the characters \'(\' and \')\' -----Sample Input:----- 3 () (() ()() -----Sample Output:----- YES NO YES -----EXPLANATION:----- For 1) The string \\"()\\" is a valid string. For 2) The string \\"((\\" is missing the corresponding closing parentheses, so it is invalid. For 3) The string \\"()()\\" is comprised of two valid pairs of parentheses.","solution":"def is_valid_parentheses(s): Determines if the given string of parentheses is valid. Args: s (str): A string containing only the characters \'(\' and \')\'. Returns: str: \\"YES\\" if the string is valid, otherwise \\"NO\\". stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases of parentheses strings for validity. Args: test_cases (list of str): A list of strings containing only the characters \'(\' and \')\'. Returns: list of str: A list containing the results (\\"YES\\" or \\"NO\\") for each test case. results = [] for s in test_cases: results.append(is_valid_parentheses(s)) return results"},{"question":"In this coding challenge, you will be given two positive integers `m` and `n`. Your task is to determine if the integer `n` can be formed by concatenating the digits of the integer `m` in any order. For example: `canForm(1234, 3412) = True` because the digits of `3412` can be rearranged to form `1234`, while `canForm(1234, 1235) = False` because `1235` contains a digit `5` that is not in `1234`. Return `True` if `n` can be formed by rearranging the digits of `m`, otherwise return `False`. Examples: ```python canForm(1234, 3412) # returns True canForm(1234, 4321) # returns True canForm(1234, 432) # returns False canForm(1234, 12345) # returns False ``` Good luck! If you enjoy this challenge, you might also like: [Anagram checker](https://www.codewars.com/kata/57a2013acf1fa5bfc4000921) [Digit rearrangement](https://www.codewars.com/kata/55c4eb777e07c13528000021)","solution":"def canForm(m, n): Determines if the integer `n` can be formed by concatenating the digits of the integer `m` in any order. from collections import Counter # Convert both numbers to strings str_m = str(m) str_n = str(n) # Utilize Counter to count the frequency of digits and compare return Counter(str_m) == Counter(str_n)"},{"question":"# Background John is an avid jogger and likes to track his progress over time. He jogs multiple laps around a circular track each day and records the time taken for each lap. He uses this data to analyze his performance. # Problem You need to help John by writing a function that calculates various metrics from his lap times. Given a list of non-negative integers representing the time (in seconds) for each lap, implement a function `lap_metrics(times)` that returns a dictionary containing the following metrics: 1. `total_time`: Sum of all lap times. 2. `average_time`: Average lap time. 3. `best_time`: Best (minimum) lap time. 4. `worst_time`: Worst (maximum) lap time. 5. `median_time`: Median lap time. If the list is empty, the function should return the dictionary with all values set to `None`. # Example ``` times = [120, 150, 98, 110, 135] lap_metrics(times) should return: { \\"total_time\\": 613, \\"average_time\\": 122.6, \\"best_time\\": 98, \\"worst_time\\": 150, \\"median_time\\": 120 } ``` # Notes 1. The `average_time` should be a float rounded to one decimal place. 2. The list may contain multiple laps with the same time. 3. If the list is odd in length, the `median_time` is the middle element in the sorted list. If it is even in length, the `median_time` is the average of the two middle elements. 4. You can assume the list contains only non-negative integers. 5. Do not use any external libraries such as `numpy` or `statistics` for this task. **Good Luck!**","solution":"def lap_metrics(times): Calculate various metrics from the list of lap times. if not times: return { \\"total_time\\": None, \\"average_time\\": None, \\"best_time\\": None, \\"worst_time\\": None, \\"median_time\\": None } total_time = sum(times) average_time = round(total_time / len(times), 1) best_time = min(times) worst_time = max(times) sorted_times = sorted(times) mid = len(sorted_times) // 2 if len(sorted_times) % 2 == 0: median_time = (sorted_times[mid - 1] + sorted_times[mid]) / 2.0 else: median_time = sorted_times[mid] return { \\"total_time\\": total_time, \\"average_time\\": average_time, \\"best_time\\": best_time, \\"worst_time\\": worst_time, \\"median_time\\": median_time }"},{"question":"You are given an array representing a list of houses, where each house comes with an associated amount of wealth. Thieves are planning to rob these houses, but they cannot rob two adjacent houses, or the police will get alerted. Given an integer array `nums` representing the wealth of each house, return the maximum amount of wealth the thieves can rob without alerting the police. Example 1: Input: nums = [2, 3, 2] Output: 3 Explanation: There are three houses, they can choose to rob either the first house with wealth 2, or the second house with wealth 3, but they cannot rob both the first and the second house since they are adjacent. The maximum wealth they can rob is 3. Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Explanation: Robbing houses 1 and 3 yields the maximum wealth (1 + 3 = 4). Example 3: Input: nums = [0] Output: 0 Explanation: There is only one house with wealth 0, so the maximum wealth the thieves can rob is 0. Constraints: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 400","solution":"def rob(nums): Returns the maximum amount of wealth that can be robbed without alerting the police. if not nums: return 0 if len(nums) == 1: return nums[0] # Helper function to rob houses in a linear arrangement def rob_linear(houses): prev_max = 0 curr_max = 0 for house in houses: temp = curr_max curr_max = max(prev_max + house, curr_max) prev_max = temp return curr_max # Since houses are arranged in a circular manner, we need to consider two cases: return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"The Challenge ------------- You have to implement a file comparison program that determines whether two text files are identical. The comparison should be line-by-line ignoring all whitespace characters (spaces, tabs, newlines). Your task is to write a function `compare_files(file1, file2)` that takes in two file paths as input and returns a boolean indicating whether the files are identical or not based on the specified conditions. To help you in this task, follow these steps: 1. Load the content of both files. 2. Remove all whitespace characters from the content. 3. Compare the modified contents of both files. 4. Return `True` if they are identical, else return `False`. **Note**: - Consider large files fitting within the memory limit. Ensure your program performs efficiently with a reasonable approach to reading files. - Pay attention to edge cases like empty files or files containing only whitespace characters. These should be considered identical. Example Usage ------------- ```python # Assume file1.txt content is \\"Hello Worldn\\" # and file2.txt content is \\"HelloWorld\\" result = compare_files(\\"file1.txt\\", \\"file2.txt\\") print(result) # Output: True # Assume file3.txt content is \\"HellonWorld\\" # and file4.txt content is \\"HelloWorld\\" result = compare_files(\\"file3.txt\\", \\"file4.txt\\") print(result) # Output: False ``` Constraints ----------- - O(n) time complexity is preferable where n is the combined length of both files. - Imported libraries such as `io`, `re` (regular expressions), or any other necessary standard library modules are allowed for whitespace removal and file handling.","solution":"def compare_files(file1, file2): Compares two text files to determine if they are identical, ignoring all whitespace characters. Args: file1 (str): Path to the first file. file2 (str): Path to the second file. Returns: bool: True if files are identical ignoring whitespace, False otherwise. def load_and_process_file(file_path): content = \\"\\" with open(file_path, \'r\') as f: for line in f: content += \'\'.join(line.split()) return content content1 = load_and_process_file(file1) content2 = load_and_process_file(file2) return content1 == content2"},{"question":"Write a function that compresses a given string by reducing sequences of the same character to the character followed by the number of occurrences. If a compressed sequence is not shorter than the original sequence, leave it as it is. The function should be case-sensitive. Example: ```python compress_string(\'aaabbcc\') == \'a3b2c2\' compress_string(\'abcd\') == \'abcd\' ``` Some more examples: ```python compress_string(\'a\') == \'a\' compress_string(\'zzzZZzz\') == \'z3Z2z2\' compress_string(\'bbbbbbbaaa\') == \'b7a3\' ```","solution":"def compress_string(s): Compress the given string by reducing sequences of the same character to the character followed by the number of occurrences. If the compressed sequence is not shorter than the original sequence, leave it as it is. The function is case-sensitive. Parameters: s (str): The input string to be compressed. Returns: str: The compressed string or the original string if compression does not reduce the length. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 # To account for the last sequence compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Tom loves solving puzzles, and he recently came across a variation of the classic \\"Tower of Hanoi\\" problem. In this variation, there are not just three pegs but P pegs to use for the transfers. Given N disks, Tom wants to know the minimum number of moves required to transfer all disks from the first peg to the last peg, following the traditional rules of the \\"Tower of Hanoi\\" - only one disk can be moved at a time, a disk can only be placed on top of a larger disk, and each move involves moving the top disk from one peg to another. However, with the extra pegs, Tom is curious if the puzzle can be solved in fewer moves than the classic 3-peg version. ---Input:--- The first line contains an integer T, the number of test cases. Each of the next T lines contains two integers N and P, representing the number of disks and the number of pegs respectively. ---Output:--- For each test case, print the minimum number of moves required to transfer all N disks from the first peg to the last peg using the given number of pegs. ---Constraints:--- 1 ≤ T ≤ 100 1 ≤ N ≤ 12 3 ≤ P ≤ 10 ---Example:--- Input: 3 2 3 3 4 4 5 Output: 3 5 7 ---Explanation:--- Case #1: With 2 disks and 3 pegs, the minimum number of moves is 3. Case #2: With 3 disks and 4 pegs, the minimum number of moves is 5. Case #3: With 4 disks and 5 pegs, the minimum number of moves is 7. For each test case, consider using an optimized method for solving the \\"Tower of Hanoi\\" puzzle with more than 3 pegs, such as the Frame-Stewart algorithm or any other efficient approach.","solution":"def hanoi_variation_moves(N, P): Calculate minimum number of moves to solve Tower of Hanoi problem with N disks and P pegs. if P == 3: return (1 << N) - 1 if N == 1: return 1 moves = float(\'inf\') for k in range(1, N): moves = min(moves, 2 * hanoi_variation_moves(k, P) + hanoi_variation_moves(N - k, P - 1)) return moves def solve_hanoi_puzzles(cases): results = [] for N, P in cases: results.append(hanoi_variation_moves(N, P)) return results"},{"question":"=====Problem Statement===== Write a program that takes an integer `n` as input and calculates the factorial of `n`. The program must print the calculated factorial value. The factorial of a number `n` is defined as the product of all positive integers less than or equal to `n`. =====Example===== n = 5 The factorial of 5 is 5*4*3*2*1 = 120. Print: 120 =====Input Format===== A single integer `n` which represents the number for which the factorial needs to be calculated. =====Output Format===== Print the calculated factorial value of `n`. =====Constraints===== 1 <= n <= 12","solution":"def factorial(n): Returns the factorial of the given integer n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result # Reading input if __name__ == \\"__main__\\": n = int(input(\\"Enter an integer: \\")) print(factorial(n))"},{"question":"Write a function `merge_dicts()` that accepts a list of dictionaries and merges them into a single dictionary. If there are any overlapping keys, the values should be added together if they are numeric. For non-numeric values, the value from the dictionary that appears last in the list should be used. Example: ```python merge_dicts([{ \'a\': 1, \'b\': 2, \'c\': \'x\' }, { \'a\': 2, \'b\': 3, \'d\': 4 }, { \'a\': 1, \'c\': \'y\', \'e\': 5 }]) # Output: { \'a\': 4, \'b\': 5, \'c\': \'y\', \'d\': 4, \'e\': 5 } ```","solution":"def merge_dicts(dicts): Merges a list of dictionaries into a single dictionary. If there are overlapping keys: - Numeric values are added together. - Non-numeric values: the value from the last dictionary is used. merged_dict = {} for d in dicts: for key, value in d.items(): if key in merged_dict: if isinstance(merged_dict[key], (int, float)) and isinstance(value, (int, float)): merged_dict[key] += value else: merged_dict[key] = value else: merged_dict[key] = value return merged_dict"},{"question":"You are given a list of integers nums representing a sequence of operations to be performed on a number starting from 0. Each integer represents a specific operation according to the following rules: - If the integer is positive, increment the current number by that integer. - If the integer is negative, decrement the current number by the absolute value of that integer. - If the integer is zero, reset the current number to 0. Your task is to perform all operations in the order they appear in the list and return the final value of the number. Write a function that takes the list of integers and returns the final value. # Example Example 1: Input: nums = [5, -3, 4, 0, 2] Output: 2 Explanation: Starting from 0, - increment by 5 to get 5, - decrement by 3 to get 2, - increment by 4 to get 6, - reset to 0, - increment by 2 to get 2. Example 2: Input: nums = [10, -10, 10, -10, 10] Output: 10 Explanation: Starting from 0, - increment by 10 to get 10, - decrement by 10 to get 0, - increment by 10 to get 10, - decrement by 10 to get 0, - increment by 10 to get 10. Note: - The nums will have length between [1, 1000]. - The integers in nums will be within the range [-1000, 1000].","solution":"def final_value_after_operations(nums): Perform operations described in nums on a number starting from 0 and return the final value. Args: nums (List[int]): List of integers representing operations. Returns: int: The final value after performing all operations. current = 0 for num in nums: if num > 0: current += num elif num < 0: current -= abs(num) else: current = 0 return current"},{"question":"You are working on a text editor that handles undo and redo operations. These operations are stored as a sequence of actions, where each action can either insert a character or delete a character at a specific position in the editor. Implement a function that allows the user to perform an action, undo the last action performed, and redo an action that was undone. The function signature is: `textEditor(operations, action)` The `operations` parameter is a list of tuples representing the sequence of actions performed. Each tuple can be: - `(\'insert\', position, character)` - Inserts `character` at `position`. - `(\'delete\', position)` - Deletes the character at `position`. The `action` parameter is a string representing the action to be performed and can be one of: - `\'action: insert\'` - This indicates that the next call to the function will include an insert operation with the necessary details. - `\'action: delete\'` - This indicates that the next call to the function will include a delete operation with the necessary details. - `\'UNDO\'` - This undoes the last action performed. - `\'REDO\'` - This redoes the last undone action. The function should return the current state of the text after performing the specified action. Examples: - Initial state: `\\"\\"` - `textEditor([], (\'insert\', 0, \'A\'))` returns `\\"A\\"` - `textEditor([(\'insert\', 0, \'A\')], (\'insert\', 1, \'B\'))` returns `\\"AB\\"` - `textEditor([(\'insert\', 0, \'A\'), (\'insert\', 1, \'B\')], \'UNDO\')` returns `\\"A\\"` - `textEditor([(\'insert\', 0, \'A\')], (\'delete\', 0))` returns `\\"\\"` - `textEditor([(\'insert\', 0, \'A\'), (\'delete\', 0)], \'UNDO\')` returns `\\"A\\"` - `textEditor([(\'insert\', 0, \'A\'), (\'delete\', 0), \'UNDO\'], \'REDO\')` returns `\\"\\"` Remember to handle edge cases such as: - Undoing when there is no action to undo. - Redoing when there is no action to redo. - Inserting at positions out of the current text bounds.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.operations = [] self.undo_stack = [] def insert_char(self, pos, char): self.text = self.text[:pos] + char + self.text[pos:] self.operations.append((\'insert\', pos, char)) self.undo_stack.clear() def delete_char(self, pos): if 0 <= pos < len(self.text): removed_char = self.text[pos] self.text = self.text[:pos] + self.text[pos+1:] self.operations.append((\'delete\', pos, removed_char)) self.undo_stack.clear() def undo(self): if not self.operations: return last_op = self.operations.pop() if last_op[0] == \'insert\': pos = last_op[1] self.text = self.text[:pos] + self.text[pos+1:] self.undo_stack.append(last_op) elif last_op[0] == \'delete\': pos, char = last_op[1], last_op[2] self.text = self.text[:pos] + char + self.text[pos:] self.undo_stack.append(last_op) def redo(self): if not self.undo_stack: return last_undo = self.undo_stack.pop() if last_undo[0] == \'insert\': self.insert_char(last_undo[1], last_undo[2]) elif last_undo[0] == \'delete\': self.delete_char(last_undo[1]) def process_action(self, action): if isinstance(action, tuple): op_type = action[0] if op_type == \'insert\': self.insert_char(action[1], action[2]) elif op_type == \'delete\': self.delete_char(action[1]) elif action == \'UNDO\': self.undo() elif action == \'REDO\': self.redo() return self.text def textEditor(operations, action): editor = TextEditor() for op in operations: editor.process_action(op) return editor.process_action(action)"},{"question":"Create a function that takes a list of integers and returns the second smallest number. If the list is empty or contains less than two unique elements, return None. Example: ```python second_smallest([3, 1, 4, 1, 5, 9]) --> 3 second_smallest([10, 20, 30, 20, 40, 10]) --> 20 second_smallest([5]) --> None # Only one element in list second_smallest([]) --> None # Empty list second_smallest([7, 7, 7, 7]) --> None # Less than two unique elements ```","solution":"def second_smallest(numbers): Returns the second smallest number in the list. If the list is empty or contains less than two unique elements, returns None. if not numbers or len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort() return unique_numbers[1]"},{"question":"Write a function that takes a single integer as input and returns the 2-dimensional list representation of its \\"spiral matrix\\". A spiral matrix is a square matrix where numbers are sequentially arranged in a spiral order going from outermost elements towards the center. For example, if the input is 3, the output should be: ```python [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` Note: - The matrix should be n x n (n by n) where n is the input integer. - The numbers should start from 1 and increment sequentially. Happy coding! :)","solution":"def generate_spiral_matrix(n): Generates a n x n spiral matrix. :param n: size of the matrix (integer) :return: 2-dimensional list representing the spiral matrix # Initialize an n x n matrix filled with zeros matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n-1, 0, n-1 while left <= right and top <= bottom: # Traverse from left to right for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Traverse from right to left if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Traverse from bottom to top if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Given a positive integer num, write a function that returns the sum of the factorial of each digit in num. If the sum of the factorials is divisible by the original number, return True; otherwise, return False. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n, symbolized as n!. # Examples ```python is_factorial_sum_divisible(145) should return True since 1! + 4! + 5! = 1 + 24 + 120 = 145, and 145 is divisible by 145 is_factorial_sum_divisible(123) should return False since 1! + 2! + 3! = 1 + 2 + 6 = 9, and 9 is not divisible by 123 is_factorial_sum_divisible(40585) should return True since 4! + 0! + 5! + 8! + 5! = 24 + 1 + 120 + 40320 + 120 = 40585, and 40585 is divisible by 40585 ``` # Note For all test cases, num will be a positive integer greater than zero.","solution":"import math def is_factorial_sum_divisible(num): Returns True if the sum of the factorial of each digit in num is divisible by the original number, else False. digit_factorial_sum = sum(math.factorial(int(digit)) for digit in str(num)) return digit_factorial_sum % num == 0"},{"question":"-----Problem Statement----- In the world of competitive racing, a unique coding challenge is presented to programmers where they need to determine the effectiveness of speed boosts. Each boost has a specific duration and speed increment, and your task is to calculate the maximum speed achievable by the end of the race. You are given a race duration in seconds and a list of speed boosts, each defined by their start time, end time, and speed increment. The initial speed of the racer is zero. Your goal is to calculate the highest speed reached at any point during the race. -----Input----- The first line contains two integers T and R, denoting the number of test cases and the duration of the race in seconds, respectively. Then T test cases follow. Each test case consists of three integers S_i, E_i, and V_i, where: - S_i is the start time of the speed boost - E_i is the end time of the speed boost - V_i is the speed increment for the given boost -----Constraints----- - 1 ≤ T ≤ 100000 - 1 ≤ R ≤ 100000 - 0 ≤ S_i < E_i ≤ R - 1 ≤ V_i ≤ 100 -----Output----- For each test case, output the maximum speed achieved at any second during the race. -----Example----- Input: 4 20 0 5 10 4 10 15 11 15 20 10 20 5 Output: 15 -----Explanation----- - The first boost adds 10 units of speed from seconds 0 to 5 (inclusive). - The second boost adds 15 units of speed from seconds 4 to 10 (inclusive). - During the overlapping time from seconds 4 to 5, the speed is incremented by 15 units only (not additive with previous 10 units). Overall, the highest speed achieved is 15 units of speed during the second boost from seconds 4 to 10.","solution":"def max_speed(T, R, speed_boosts): Determines the maximum speed achieved during the race. Args: T (int): Number of test cases. R (int): Duration of the race in seconds. speed_boosts (list of tuples): Each tuple contains (S_i, E_i, V_i) where S_i (int): Start time of the speed boost E_i (int): End time of the speed boost V_i (int): Speed increment for the given boost Returns: int: Maximum speed achieved during the race. max_speeds = [0] * (R + 1) for S_i, E_i, V_i in speed_boosts: for time in range(S_i, E_i + 1): max_speeds[time] = max(max_speeds[time], V_i) return max(max_speeds)"},{"question":"Complete the function `reverseWords` that takes a non-empty string `sentence` as input and returns the string with the words reversed, but the order of the words preserved. A word is defined as a sequence of non-space characters. There should be no leading or trailing spaces in the output and the words should be separated by a single space. Example: ```python reverseWords(\\"The sky is blue\\") # returns \\"ehT yks si eulb\\" reverseWords(\\"Hello World\\") # returns \\"olleH dlroW\\" reverseWords(\\"Python is fun\\") # returns \\"nohtyP si nuf\\" reverseWords(\\"OpenAI\\") # returns \\"IAnepO\\" ```","solution":"def reverseWords(sentence): Reverses the characters of each word in the sentence while preserving the order of the words. Args: sentence (str): The input sentence containing words. Returns: str: The sentence with each word reversed. # Split the sentence into words words = sentence.split() # Reverse each word and join them back with a single space reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are given a binary tree in which each node contains an integer value. Your task is to write a function that determines if the binary tree is a binary search tree (BST). A binary search tree is a binary tree with the following properties: - The left subtree of a node contains only nodes with values less than the node\'s value. - The right subtree of a node contains only nodes with values greater than the node\'s value. - Both the left and right subtrees must also be binary search trees. Write a function `isBST(root)` that takes the root node of the binary tree as an argument and returns `True` if the tree satisfies the properties of a binary search tree, and `False` otherwise. # Function Signature ```python def isBST(root) -> bool: # your code here ``` # Constraints - The number of nodes in the tree will be between 1 and 1000. - The value of each node will be a unique integer between `-10^9` and `10^9`. # Example ```python # Example 1: # Input: # 2 # / # 1 3 # Output: True # Explanation: The given tree satisfies the properties of a BST. # Example 2: # Input: # 5 # / # 1 4 # / # 3 6 # Output: False # Explanation: The given tree does not satisfy the properties of a BST. # Example 3: # Input: # 10 # / # 5 15 # / # 6 20 # Output: False # Explanation: The given tree does not satisfy the properties of a BST because 6 is in the right subtree of 10 but is less than 10. ``` # Notes - You may assume that each node has a unique value. The structure of the tree is defined by left and right child nodes. - Your implementation should efficiently handle the constraints and produce a result in a reasonable time.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBST(root) -> bool: def validate(node, low=-float(\'inf\'), high=float(\'inf\')): if not node: return True if not (low < node.val < high): return False return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"In a town, there is a circular road with a series of gas stations positioned along the road. Each gas station has a certain amount of fuel, and there is a certain amount of fuel required to travel from one gas station to the next. You have a car that starts with an empty tank and can travel unlimited distances with enough fuel. Write a function to determine if there is a starting gas station at which you can begin your journey and travel around the town once, returning to the starting station with at least an empty tank. If such a starting point exists, return the index of the starting gas station, otherwise return -1. Example: Input: gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2] Output: 3 Explanation: Start at station 3 and fill up with 4 units of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. Your tank = 5 - 5 + 4 = 4 Your car returns to station 3 with 4 units of gas in the tank.","solution":"def can_complete_circuit(gas, cost): Determine if there is a starting gas station where you can complete a circuit. Parameters: gas (list of int): The amount of gas available at each gas station. cost (list of int): The amount of gas required to travel to the next gas station. Returns: int: The starting gas station index if a circuit is possible, otherwise -1. if sum(gas) < sum(cost): return -1 total_tank, current_tank = 0, 0 starting_station = 0 for i in range(len(gas)): total_tank += gas[i] - cost[i] current_tank += gas[i] - cost[i] # If at any point current tank is negative, reset the start position if current_tank < 0: starting_station = i + 1 current_tank = 0 return starting_station if total_tank >= 0 else -1"},{"question":"=====Problem Statement===== You are given a string S. The task is to determine if the string contains all the characters from \'a\' to \'z\' (case insensitive). If it does, print \\"YES\\". Otherwise, print \\"NO\\". =====Input Format===== A single line containing the string S. =====Constraints===== 1≤|S|≤1000 =====Output Format===== Print a single line with \\"YES\\" or \\"NO\\". =====Sample Input===== The quick brown fox jumps over the lazy dog =====Sample Output===== YES =====Sample Input===== Hello World =====Sample Output===== NO","solution":"def contains_all_alphabets(s): Returns \'YES\' if the string contains all characters from \'a\' to \'z\' (case insensitive). Otherwise, returns \'NO\'. s = s.lower() alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') return \'YES\' if alphabet_set <= set(s) else \'NO\'"},{"question":"Write a function that takes a string of words and a target word length, and returns a list of all the unique words in the string that have the target length. Words in the string are case-insensitive, but the output list should be case-sensitive, preserving the original case of each word. If no words match the target length, return an empty list. Function signature: `def find_words_by_length(s: str, length: int) -> List[str]:` # Example: ``` s = \\"apple banana Apple banana grape\\" length = 5 The function should return [\'apple\', \'grape\', \'Apple\'] ```","solution":"from typing import List def find_words_by_length(s: str, length: int) -> List[str]: Returns a list of unique words from the given string `s` that have the target length. The words are treated case-insensitively but the returned list preserves the original casing. words = s.split() unique_words = set() for word in words: if len(word) == length: unique_words.add(word.lower()) matched_words = [word for word in words if word.lower() in unique_words and len(word) == length] return matched_words"},{"question":"Alexis is working on a security feature for a software application which requires detecting specific patterns in user-input strings. She decides to implement an algorithm that finds the longest substring of consecutive distinct characters. Once found, she needs to determine the length of that substring. Write a function to help Alexis by finding the length of the longest substring with all distinct characters from a given string S. Function Signature: def longest_distinct_substring(S: str) -> int -----Input:----- The input is a single string S with length l. -----Output:----- Output should be a single integer which is the length of the longest substring with all distinct characters. -----Constraints:----- 1 <= l <= 1000 -----Example----- Input: abcabcbb Output: 3 Explanation: The answer is \\"abc\\", with the length being 3. Input: bbbbb Output: 1 Explanation: The answer is \\"b\\", with the length being 1. Input: pwwkew Output: 3 Explanation: The answer is \\"wke\\", with the length being 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_distinct_substring(S: str) -> int: Finds the length of the longest substring with all distinct characters in a given string S. n = len(S) char_index = {} longest_length = 0 start_idx = 0 for current_idx in range(n): if S[current_idx] in char_index: start_idx = max(start_idx, char_index[S[current_idx]] + 1) char_index[S[current_idx]] = current_idx longest_length = max(longest_length, current_idx - start_idx + 1) return longest_length"},{"question":"A team of robotic engineers have developed a new maze-solving robot. The robot is placed at the top-left corner of an X by Y grid and needs to find its way to the bottom-right corner. The robot can only move either down or right at any point in time. However, some cells in the grid contain obstacles which the robot cannot pass through. You are given the layout of the grid, and you need to determine the number of unique paths that the robot can take to reach the bottom-right corner of the maze, avoiding all obstacles. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Each test case consists of multiple lines: - The first line of each test case contains two integers, X and Y, representing the dimensions of the grid. - The next X lines each contain Y characters, either \'0\' (to denote an empty cell) or \'1\' (to denote an obstacle). -----Output----- For each test case, output a single line containing the number of unique paths from the top-left corner to the bottom-right corner of the grid. If there is no valid path, output 0. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ X, Y ≤ 100 -----Example----- Input: 2 3 3 000 010 000 3 3 000 111 000 Output: 2 0 -----Explanation----- Example case 1: There are two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example case 2: There is no valid path due to the row of obstacles in the middle.","solution":"def unique_paths_with_obstacles(grid): X = len(grid) Y = len(grid[0]) if grid[0][0] == \'1\' or grid[X-1][Y-1] == \'1\': return 0 # Init DP table dp = [[0] * Y for _ in range(X)] dp[0][0] = 1 for i in range(X): for j in range(Y): if grid[i][j] == \'0\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[X-1][Y-1] def solve_maze_solving_robot(test_cases): results = [] for grid in test_cases: results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"You are given two strings, S and T. You need to repeatedly remove the smallest lexicographic subsequence from S until S is empty. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Once S is empty, count the number of times you removed a subsequence that matches T. -----Input----- - The first line contains one integer N, the number of test cases. - Each test case consists of two lines. - The first line of each test case contains a string S. - The second line of each test case contains a string T. -----Output----- For each test case, output a single integer, the number of times T was removed from S as the smallest lexicographic subsequence. -----Constraints----- - 1 le N le 100 - 1 le |S|, |T| le 100 -----Example Input----- 2 abcbac abc abcabc ab -----Example Output----- 1 2 -----Explanation----- Example case 1: - Initially, S = \\"abcbac\\". The smallest lexicographic subsequence is \\"abc\\". - Remove \\"abc\\", resulting in the new string S = \\"bac. - The next smallest lexicographic subsequence is \\"abc\\", which matches T. This process is repeated until S is empty. - T \\"abc\\" is removed once. Example case 2: - Initially, S = \\"abcabc\\". The smallest lexicographic subsequence is \\"ab\\". - Remove \\"ab\\", resulting in the new string S = \\"cabc\\". - The next smallest lexicographic subsequence is \\"ab\\", the process repeats. - T \\"ab\\" is removed twice.","solution":"def count_subsequence_removals(test_cases): def remove_smallest_subsequence(S, T): count = 0 while True: subseq, i = [], 0 for ch in S: if i < len(T) and ch == T[i]: subseq.append(ch) i += 1 if i == len(T): break if len(subseq) == len(T): count += 1 S = S.replace(\'\'.join(subseq), \'\', 1) else: break return count results = [] for S, T in test_cases: results.append(remove_smallest_subsequence(S, T)) return results def process_input(input_data): lines = input_data.split(\\"n\\") t = int(lines[0]) test_cases = [] for i in range(1, 2 * t, 2): S = lines[i] T = lines[i + 1] test_cases.append((S, T)) return count_subsequence_removals(test_cases)"},{"question":"Given an integer array nums and an integer k, return the number of unique elements that appear at least k times in nums. Example 1: Input: nums = [1,2,3,1,2,3,1,2,3], k = 2 Output: 3 Example 2: Input: nums = [1,2,2,3,3,3,4], k = 2 Output: 2 Example 3: Input: nums = [1,2,3,4], k = 2 Output: 0 Note: - 1 <= nums.length <= 1000 - 1 <= nums[i] <= 1000 - 1 <= k <= nums.length","solution":"def count_unique_elements(nums, k): Returns the number of unique elements that appear at least k times in nums. from collections import Counter freq = Counter(nums) return sum(1 for count in freq.values() if count >= k)"},{"question":"# Scenario String manipulation is a common task in programming. One interesting challenge involves finding patterns within strings that adhere to specific rules. ___ # Task **_Given_** a *string of characters* and an *integer k*, **_find the length_** of the **_longest substring_** that contains at most *k distinct characters*. ___ # Notes * **_The string_** will contain only lowercase English letters. * **_The integer k_** is at least 1 and at most the length of the string. * **_Return_** an **_integer_** representing the length of the longest substring that contains at most *k distinct characters*. * A substring is a contiguous sequence of characters within a string. ____ # Input >> Output Examples: ``` longestSubstringKDistinct(\\"eceba\\", 2) ==> return (3) ``` **_Explanation_**: * The longest substring with at most 2 distinct characters is \\"ece\\" which has length 3. ____ ``` longestSubstringKDistinct(\\"aa\\", 1) ==> return (2) ``` **_Explanation_**: * The longest substring with at most 1 distinct character is \\"aa\\" which has length 2. ____ ``` longestSubstringKDistinct(\\"aaabbccc\\", 2) ==> return (5) ``` **_Explanation_**: * The longest substring with at most 2 distinct characters is \\"aaabb\\" which has length 5. ____ # Efficient Function Required * Only an efficient approach with O(n) time complexity will pass for large inputs.","solution":"def longestSubstringKDistinct(s, k): Finds the length of the longest substring that contains at most k distinct characters. :param s: The input string containing lowercase alphabet characters. :param k: The maximum number of distinct characters allowed in the substring. :return: The length of the longest substring that contains at most k distinct characters. from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0 left = 0 right = 0 max_len = 0 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Given a string `s` consisting only of the characters \'a\' and \'b\', write a function `longest_balanced_substring` (or `LongestBalancedSubstring` in C#) that returns the length of the longest balanced substring. A balanced substring is defined as a substring where the number of occurrences of \'a\' and \'b\' are equal. # Examples ``` longest_balanced_substring(\\"aababb\\") -> 6 longest_balanced_substring(\\"abab\\") -> 4 longest_balanced_substring(\\"aaaa\\") -> 0 ``` # Constraints - The length of the string `s` will be between 1 and 10^5. - The string will contain only \'a\' and \'b\' characters. # Note - You can assume that the function will only be called with valid input according to the constraints. - The solution should be optimized to handle the upper limits efficiently.","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring in a string consisting only of \'a\' and \'b\'. A balanced substring is defined as a substring where the number of occurrences of \'a\' and \'b\' are equal. max_length = 0 balance = 0 balance_map = {0: -1} # To handle the case when the whole string from the beginning is balanced for i, char in enumerate(s): if char == \'a\': balance += 1 else: # char == \'b\' balance -= 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length"},{"question":"Write a function that takes a 2D grid of characters (represented as a list of lists) and a target word, and checks if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. The function should return a boolean indicating whether the word can be found in the grid. Example: ```python grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word1 = \\"ABCCED\\" # returns True word2 = \\"SEE\\" # returns True word3 = \\"ABCB\\" # returns False ``` The grid and the word will only contain uppercase English letters. The dimensions of the grid will be at least 1x1. The length of the word will be at least 1 and will not exceed the total number of cells in the grid.","solution":"def exist(grid, word): Checks if the word exists in the 2D grid. rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp = grid[r][c] grid[r][c] = \'#\' found = (dfs(r+1, c, index+1) or # down dfs(r-1, c, index+1) or # up dfs(r, c+1, index+1) or # right dfs(r, c-1, index+1)) # left grid[r][c] = temp return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0] and dfs(i, j, 0): return True return False"},{"question":"You have been tasked to write a function `wave` that generates a wave pattern based on a given string. Each step in the wave should transform a single character to uppercase, and output these transformations as a list of strings. # Rules: - The input string can include spaces and lowercase letters only. - The output should contain each step of the wave transformation as a separate element in the list. - Spaces in the input string should be ignored during the wave transformations, but should be preserved in their locations in the output strings. # Example: ```python wave(\\"hello\\") ``` Output: ```python [\\"Hello\\", \\"hEllo\\", \\"heLlo\\", \\"helLo\\", \\"hellO\\"] ``` ```python wave(\\"two words\\") ``` Output: ```python [\\"Two words\\", \\"tWo words\\", \\"twO words\\", \\"two Words\\", \\"two wOrds\\", \\"two woRds\\", \\"two worDs\\", \\"two wordS\\"] ``` # Constraints: - The input string length is between 1 and 100 characters.","solution":"def wave(s): Generates a wave pattern for the given string. Args: s (str): The input string, consisting of lowercase letters and spaces. Returns: list of str: A list of strings, each representing a step in the wave pattern. result = [] for i, char in enumerate(s): if char.isalpha(): wave_str = s[:i] + char.upper() + s[i+1:] result.append(wave_str) return result"},{"question":"Complete the function that takes a string as input and returns `True` if the string is a palindrome (reads the same forwards and backwards), and `False` otherwise. The function should ignore spaces, punctuation, and differences in capitalization. For example: ``` input = \\"A man, a plan, a canal, Panama\\" --> True ``` ``` input = \\"hello\\" --> False ```","solution":"import re def is_palindrome(s): Returns True if the input string is a palindrome, False otherwise. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lower case cleaned_string = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Check if the cleaned string reads the same forwards and backwards return cleaned_string == cleaned_string[::-1]"},{"question":"A company organizes a special event where the employees play a game involving strings. Each employee is given a unique identifier and a string, and the goal is to find the longest common prefix shared among the strings of all the employees. If no such common prefix exists, the result should be an empty string. -----Input----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of every test case consists of a single integer N - the number of employees participating. Then, N lines will follow. Each of these N lines will consist of the employee\'s identifier and the corresponding string, separated by a single space. -----Output----- For each test case, output a single line containing the longest common prefix shared by all the strings for that test case. If there is no common prefix, output an empty string. -----Example----- Input: 2 3 Emp1 flower Emp2 flow Emp3 flight 2 Emp1 dog Emp2 racecar Output: fl (Empty Line) -----Scoring----- Subtask 1 (20 points): T = 1000, 1 <= N <= 10, 1 <= length of string <= 100 Subtask 2 (20 points): T = 100, 1 <= N <= 1000, 1 <= length of string <= 100 Subtask 3 (30 points): T = 10, 1 <= N <= 10000, 1 <= length of string <= 100 Subtask 4 (30 points): T = 10, 1 <= N <= 1000, 1 <= length of string <= 1000","solution":"def longest_common_prefix(strings): if not strings: return \\"\\" # The minimum length string will define the maximum possible length of the common prefix min_length = min(len(s) for s in strings) # Find the longest common prefix for i in range(min_length): # Check if the current character is the same in all strings current_char = strings[0][i] if all(s[i] == current_char for s in strings): continue else: return strings[0][:i] # Return the common prefix up to current index return strings[0][:min_length] # All characters were the same up to the minimum string length def process_test_cases(test_cases): results = [] for case in test_cases: N, employees = case strings = [emp_string for emp_id, emp_string in employees] results.append(longest_common_prefix(strings)) return results"},{"question":"The librarian is organizing a book fair and wants to arrange books in a specific format on a shelf. While moving the books, the librarian noticed a pattern and needs your help to generate it. Given a number N, generate the following book arrangement pattern. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the arrangement pattern of books as described below. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 2 3 4 5 6 1 2 3 4 5 6 7 8 9 10 -----Explanation:----- For each N, print N lines. The first line has 1 number, the second line has 2 numbers, the third line has 3 numbers, and so on. Each number is consecutive starting from 1.","solution":"def book_arrangement_pattern(T, test_cases): Generate the book arrangement pattern for each test case. results = [] for N in test_cases: current_number = 1 arrangement = [] for i in range(1, N+1): line = \' \'.join(str(current_number + j) for j in range(i)) arrangement.append(line) current_number += i results.append(arrangement) return results"},{"question":"Write a function to determine if a given string is a palindrome, ignoring spaces, punctuation, and case. Specifically, your program will receive a string as input and should return a boolean indicating whether the string is a palindrome. For the purposes of this problem, a palindrome is defined as a string that reads the same forwards and backwards when spaces, punctuation, and case are ignored.","solution":"import string def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces, punctuation, and case. Otherwise, returns False. # Convert the string to lowercase and remove any spaces or punctuation cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forwards and backwards return cleaned == cleaned[::-1]"},{"question":"Given an array of integers where each element appears twice except for one, find the element that appears only once. Implement a function that takes in the list and returns the single element. Example: ```python single_number([2,2,1]) == 1 single_number([4,1,2,1,2]) == 4 single_number([1]) == 1 ``` **Constraint:** - Your algorithm should have a linear runtime complexity.","solution":"def single_number(nums): Finds the element that appears only once in the list where every other element appears twice. Args: nums (list): List of integers Returns: int: The single element that appears once unique = 0 for num in nums: unique ^= num return unique"},{"question":"# Story&Task You are required to write a function to calculate the \\"maximum profit\\" that can be earned from a given list of stock prices. Each index of the list represents the price of the stock at that time (with days starting from 0). You are allowed to perform as many transactions as you like, but there is a constraint: you must sell the stock before you can buy again. Your task is to write a function that calculates the maximum profit possible from the list of stock prices while adhering to the buy-sell rules. # Input/Output - `[input]` array of integers `prices` A list of stock prices where `prices[i]` is the price of a given stock on day `i`. - `[output]` integer The maximum profit that can be achieved. # Example For `prices = [7, 1, 5, 3, 6, 4]`, the output should be `7`. Buy on day 1 (price = 1) and sell on day 2 (price = 5), profit = 5-1 = 4. Then buy on day 3 (price = 3) and sell on day 4 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. For `prices = [1, 2, 3, 4, 5]`, the output should be `4`. Buy on day 0 (price = 1) and sell on day 4 (price = 5), profit = 5-1 = 4. Total profit is 4. For `prices = [7, 6, 4, 3, 1]`, the output should be `0`. There is no way to make a profit because the prices are decreasing.","solution":"def max_profit(prices): Calculates the maximum profit from a list of stock prices. Parameters: prices (list[int]): List of stock prices. Returns: int: Maximum profit. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"#Transform a String to Frequency Dictionary (Medium) Given a string, write a function to transform it into a dictionary where the keys are the characters and the values are the number of times each character appears in the string. You should ignore non-alphabet characters and treat uppercase and lowercase letters as the same (i.e., \'A\' and \'a\' should be counted together). Function Signature ```python def transform_to_frequency_dict(s: str) -> dict: ``` # Input - **s** (str): A string of arbitrary length, potentially containing letters, digits, punctuation, and whitespace. The length of the string can be from 0 to 1000 characters. # Output - **dict**: A dictionary with characters as keys and their frequency as values, considering only alphabet characters in a case-insensitive manner. # Examples ```python assert transform_to_frequency_dict(\\"Hello, World!\\") == {\\"h\\": 1, \\"e\\": 1, \\"l\\": 3, \\"o\\": 2, \\"w\\": 1, \\"r\\": 1, \\"d\\": 1} assert transform_to_frequency_dict(\\"123 ABC abc!!!\\") == {\\"a\\": 2, \\"b\\": 2, \\"c\\": 2} assert transform_to_frequency_dict(\\"\\") == {} assert transform_to_frequency_dict(\\"AaAa\\") == {\\"a\\": 4} ``` # Algorithm 1. Initialize an empty dictionary to store the frequencies. 2. Loop through each character in the string: - Convert the character to lowercase. - Check if the character is an alphabet character. - If so, increment the count for that character in the dictionary. 3. Return the final dictionary. # Notes - The solution should be case-insensitive. - Do not include non-alphabet characters in the dictionary. - An empty string should return an empty dictionary. Have fun coding and ensure to test your function thoroughly!","solution":"def transform_to_frequency_dict(s: str) -> dict: Returns a dictionary with characters as keys and their frequency as values. Only alphabet characters are considered, and it is case-insensitive. freq_dict = {} for char in s.lower(): if char.isalpha(): if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"question":"Write a function that takes a list of integers and returns a list of integers where each element at index i is the product of all the numbers in the original list except the one at i. Example ```python nums = [1, 2, 3, 4] ``` The products would be calculated as follows: - For index 0: 2 * 3 * 4 = 24 - For index 1: 1 * 3 * 4 = 12 - For index 2: 1 * 2 * 4 = 8 - For index 3: 1 * 2 * 3 = 6 Therefore, `solve(nums) = [24, 12, 8, 6]` Good luck! If you like this problem, please try: [Maximum Subarray Sum](https://www.codewars.com/kata/54521e9ec8e60bc4de000d6c) [Two Sum](https://www.codewars.com/kata/52c31f8e6605bcc646000082)","solution":"def product_except_self(nums): Given a list of integers, return a list such that each element at index `i` is the product of all the numbers in the original list except the one at `i`. :param nums: List of integers :return: List of integers with product except self length = len(nums) if length == 0: return [] # Initialize the result array result = [1] * length # left_products[i] will contain the product of all elements to the left of i left_products = [1] * length # right_products[i] will contain the product of all elements to the right of i right_products = [1] * length # Calculate left_products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right_products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate result by multiplying left_products and right_products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Your task is to write a function that checks if all characters in the input string are unique. The input is a single string consisting of alphabetic characters. The function should return `True` if all characters are unique and `False` otherwise. *Examples* ~~~if-not:nasm ~~~ This question assesses your understanding of data structures and their operations, particularly sets or arrays.","solution":"def are_all_characters_unique(s): Check if all characters in the input string are unique. :param s: str - A string consisting of alphabetic characters :return: bool - True if all characters are unique, False otherwise return len(set(s)) == len(s)"},{"question":"Write a function `reverse_and_square` that takes a list of integers and returns a new list containing the square values of the integers but in reverse order of how they appeared in the input list. Examples ``` [1, 2, 3, 4, 5] ==> [25, 16, 9, 4, 1] [10, -3, 7, 6] ==> [36, 49, 9, 100] [0] ==> [0] ```","solution":"def reverse_and_square(nums): Returns a list containing the square values of nums in reverse order. :param nums: List of integers :return: List of integers squared and reversed return [x ** 2 for x in reversed(nums)]"},{"question":"Design a function that converts a given column number in an Excel sheet to its corresponding column title as it appears in the Excel file. For example: * Column number `1` corresponds to column title `A` * Column number `2` to `B` * Column number `27` to `AA` * Column number `28` to `AB` # Requirements: Write a function called `convert_to_title` that takes an integer `n` (1 <= n <= 2^31 - 1) and returns a string representing the corresponding column title. For example: ```python def convert_to_title(n): # Your code here print(convert_to_title(1)) # Output: \\"A\\" print(convert_to_title(28)) # Output: \\"AB\\" print(convert_to_title(701)) # Output: \\"ZY\\" ``` # Constraints: - The function should handle large inputs efficiently. - The function should be written in such a way that it can be easily tested with various test cases. - Avoid using built-in functions that directly solve the problem. Instead, focus on implementing the logic manually.","solution":"def convert_to_title(n): Converts a given column number in an Excel sheet to its corresponding column title. result = [] while n > 0: n -= 1 result.append(chr(n % 26 + ord(\'A\'))) n //= 26 return \'\'.join(result[::-1])"},{"question":"Write a function that accepts an array of integers and returns a new array where each element is the sum of every other element except the one at the respective index. If the input is not an array or if the array contains non-integer elements, return `null`. In C#, return an empty array. For Example: `sumsExceptSelf([1, 2, 3, 4])` should return `[9, 8, 7, 6]`","solution":"def sums_except_self(arr): Returns a new array where each element is the sum of every other element except the one at the respective index. Parameters: arr (list): A list of integers. Returns: list: A new list with the described property or null if the input is invalid. if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr): return None total_sum = sum(arr) return [total_sum - x for x in arr]"},{"question":"Ofelia is practicing her problem-solving skills using an array of integers. She has an interesting way of defining the \\"beauty\\" of an array segment. She selects an array segment and calculates the absolute difference between the maximum and minimum values within that segment. The \\"beauty\\" of that segment is defined as this absolute difference. You are given an array of integers and multiple queries. Each query specifies a segment of the array by its starting and ending indices. Your task is to determine the \\"beauty\\" of the segment specified in each query. -----Input----- The first line contains two integers n and q (1 leq n, q leq 2000) — the number of elements in the array and the number of queries respectively. The second line contains n space-separated integers a_i (1 leq a_i leq 10^9) — the elements of the array. The next q lines each contain two integers l and r (1 leq l leq r leq n) — the starting and ending indices (1-based) of the segment for which you need to compute the beauty. -----Output------ For each query, output a single line containing the \\"beauty\\" of the specified segment. -----Example----- Input 5 3 1 3 2 5 4 1 3 2 5 1 5 Output 2 3 4 -----Note----- For the first query, the segment is [1, 3, 2]: The maximum value is 3 and the minimum value is 1, so the beauty is 3 - 1 = 2. For the second query, the segment is [3, 2, 5, 4]: The maximum value is 5 and the minimum value is 2, so the beauty is 5 - 2 = 3. For the third query, the segment is the whole array [1, 3, 2, 5, 4]: The maximum value is 5 and the minimum value is 1, so the beauty is 5 - 1 = 4.","solution":"def beauty_of_segments(n, q, array, queries): Determines the beauty of each segment specified in the queries. Parameters: n (int): Number of elements in the array. q (int): Number of queries. array (list of int): The elements of the array. queries (list of tuples): Each tuple contains the starting and ending indices of a segment. Returns: list of int: The beauty of each segment. beauties = [] for l, r in queries: segment = array[l-1:r] beauty = max(segment) - min(segment) beauties.append(beauty) return beauties # Example usage: # beauty_of_segments(5, 3, [1, 3, 2, 5, 4], [(1, 3), (2, 5), (1, 5)]) # This will yield [2, 3, 4]"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the maximum sum of any contiguous subarray of length `k`. If `k` is larger than the length of the list, raise an error. Examples For example, with the list `[1, 2, 3, 4, 5]` and `k = 2`: ``` The maximum sum of any contiguous subarray of length 2 is 9 (from subarray [4, 5]) ``` With the list `[1, -2, 3, -1, 2]` and `k = 3`: ``` The maximum sum of any contiguous subarray of length 3 is 4 (from subarray [3, -1, 2]) ```","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any contiguous subarray of length k. If k is larger than the length of the list, raise an error. if k > len(arr): raise ValueError(\\"k cannot be larger than the length of the list\\") max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task You need to write a function to encode and decode strings using a simplified version of the Run-Length Encoding (RLE) algorithm. The RLE algorithm encodes a string by converting consecutive repeated characters into the character followed by the number of repeats. Your function should be able to encode a given string and also decode an encoded string back into the original string. # Rules Encoding Rules * Consecutive sequences of the same character are replaced by the character followed by the count of repetitions. * Single characters (without repetition) should appear as they are without a count. For example: - \\"aaaabbbcc\\" becomes \\"a4b3c2\\" - \\"abc\\" becomes \\"abc\\" Decoding Rules * The encoded string can contain characters followed by digits representing the count of repetitions. * Decode the string back to its original form considering the counts. For example: - \\"a4b3c2\\" becomes \\"aaaabbbcc\\" - \\"abc\\" becomes \\"abc\\" # Additional Rules * The encoded string will not contain any digits as characters (besides the counts) and you can assume the given string will contain only lowercase English letters. * The count for any character will be less than 10. # Input - Encoding function: a single string composed of lowercase English letters. - Decoding function: a single encoded string as per the rules above. # Output - Encoding function: a single encoded string. - Decoding function: a single decoded string.","solution":"def encode(string): Encodes the given string using a simplified version of the Run-Length Encoding (RLE) algorithm. if not string: return \\"\\" encoded = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: if count > 1: encoded.append(f\\"{string[i - 1]}{count}\\") else: encoded.append(string[i - 1]) count = 1 # Add the last character/count if count > 1: encoded.append(f\\"{string[-1]}{count}\\") else: encoded.append(string[-1]) return \\"\\".join(encoded) def decode(string): Decodes the given encoded string back to its original form using the rules of the simplified RLE algorithm. decoded = [] i = 0 while i < len(string): char = string[i] if i + 1 < len(string) and string[i + 1].isdigit(): count = int(string[i + 1]) decoded.append(char * count) i += 2 else: decoded.append(char) i += 1 return \\"\\".join(decoded)"},{"question":"You are given a list of strings `usernames` and a list of integers `scores`, where `usernames[i]` corresponds to the name of the user and `scores[i]` corresponds to their score in a game. The users can have multiple scores, and your task is to determine the top 3 highest average scores of all users. If a user has fewer than 3 scores, they should not be considered in the calculation. Return a list of the usernames with the top 3 highest average scores in descending order. Note: - If two users have the same average score, prioritize the user whose name comes first alphabetically. - You can assume no user has more than 10 scores, and there are no ties in the top 3 averages. Example 1: Input: usernames = [\\"alice\\", \\"bob\\", \\"alice\\", \\"alice\\", \\"bob\\", \\"alice\\", \\"charlie\\", \\"charlie\\", \\"charlie\\"], scores = [100, 90, 95, 80, 85, 90, 95, 100, 110] Output: [\\"charlie\\", \\"alice\\"] Explanation: - Alice\'s scores: [100, 95, 80, 90] -> Average: 91.25 - Bob\'s scores: [90, 85] -> Not considered, fewer than 3 scores - Charlie\'s scores: [95, 100, 110] -> Average: 101.67 Example 2: Input: usernames = [\\"dan\\", \\"dan\\", \\"dan\\", \\"sam\\", \\"sam\\", \\"sam\\", \\"emma\\", \\"emma\\", \\"emma\\"], scores = [67, 89, 78, 92, 91, 88, 85, 90, 93] Output: [\\"emma\\", \\"sam\\"] Explanation: - Dan\'s scores: [67, 89, 78] -> Average: 78 - Sam\'s scores: [92, 91, 88] -> Average: 90.33 - Emma\'s scores: [85, 90, 93] -> Average: 89.33 Constraints: - 1 <= usernames.length, scores.length <= 1000 - usernames.length == scores.length - 1 <= scores[i] <= 100 - usernames[i] contains only lowercase English letters and has length between 1 to 10","solution":"def top_3_high_avg_scores(usernames, scores): from collections import defaultdict user_scores = defaultdict(list) for username, score in zip(usernames, scores): user_scores[username].append(score) valid_avg_scores = {} for user, score_list in user_scores.items(): if len(score_list) >= 3: avg_score = sum(score_list) / len(score_list) valid_avg_scores[user] = avg_score top_users = sorted( valid_avg_scores.keys(), key=lambda user: (-valid_avg_scores[user], user) )[:3] return top_users"},{"question":"# Is Palindrome Permutation? A permutation of a string is any rearrangement of its characters. A string is a palindrome if it reads the same forwards and backwards. Given a string, determine if any of its permutations can form a palindrome. # Task Write a function that takes a single string as input and returns `True` if any permutation of the string is a palindrome, and `False` otherwise. Examples ```python is_palindrome_permutation(\\"civic\\") == True # \\"civic\\" itself is a palindrome is_palindrome_permutation(\\"ivicc\\") == True # \\"civic\\" is a permutation which is a palindrome is_palindrome_permutation(\\"hello\\") == False # No palindrome permutations is_palindrome_permutation(\\"aabb\\") == True # \\"abba\\" or \\"baab\\" are palindromes ``` # Constraints - Assume the input string consists of lowercase alphabetic characters only. - The input string length will be at most 100,000 characters.","solution":"from collections import Counter def is_palindrome_permutation(s: str) -> bool: Returns True if any permutation of the string can form a palindrome, otherwise False. # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # In order to form a palindrome, at most one character can have an odd count return odd_count <= 1"},{"question":"The problem involves determining the validity and impact of software updates on App completion times. For each update in a series, you must validate whether it introduces a drastic slowdown to App activity and handle the data accordingly. You are a developer working on an App that tracks the completion times for various tasks. The App periodically receives software updates, and after each update, you need to analyze the impact on task completion times. Specifically, given a series of task completion times before and after an update, you must determine if the update led to any \\"drastic slowdown\\" in the task completion. A \\"drastic slowdown\\" is defined as an increase in task completion time by more than 150% compared to the previous task time. # Input: 1. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100) — the number of updates. 2. Each update description consists of 2 lines: - The first line contains an integer `m` (1 ≤ m ≤ 100) — the number of tasks. - The second line contains `m` integers `t1, t2, ..., tm` where each integer (1 ≤ ti ≤ 1000) represents the completion time of a task according to the App for that update. # Output: For each update, output \\"Drastic Slowdown\\" if any task completion time after the update is more than 150% of the previous task completion time. Otherwise, output \\"No Drastic Slowdown\\". # Example: Input: 2 3 100 120 300 4 200 220 500 150 Output: Drastic Slowdown Drastic Slowdown Explanation: In the first update, the task completion times are 100, 120, and 300. From 120 to 300, there is more than a 150% increase (120 * 1.5 = 180). Hence, \\"Drastic Slowdown\\". In the second update, starting time is 200, then 220, followed by 500 and then 150. From 220 to 500, there is an increase greater than 150% (220 * 1.5 = 330). Therefore, \\"Drastic Slowdown\\".","solution":"def check_updates(n, updates): results = [] for i in range(n): m, times = updates[i] drastic_slowdown = False for j in range(1, m): if times[j] > times[j-1] * 1.5: drastic_slowdown = True break if drastic_slowdown: results.append(\\"Drastic Slowdown\\") else: results.append(\\"No Drastic Slowdown\\") return results"},{"question":"-----Problem Statement----- An Armstrong number (also known as a narcissistic number, pluperfect number, or plus perfect number) of a given number of digits is a number that is equal to the sum of its own digits each raised to the power of the number of digits. For example, 153 is an Armstrong number because 153 = 1^3 + 5^3 + 3^3. In this problem, given a positive integer N, your task is to find all Armstrong numbers between 1 and N inclusive and return them as a list. -----Input----- The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case consists of exactly one line containing an integer N. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10000 -----Output----- For each test case, output the list of Armstrong numbers between 1 and N inclusive. Each list of Armstrong numbers should be output on a new line. -----Example----- Input: 3 10 100 1000 Output: [1] [1, 2, 3, 4, 5, 6, 7, 8, 9] [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407] -----Explanation----- Case #1: The Armstrong numbers between 1 and 10 are [1], as each single-digit number is an Armstrong number. Case #2: The Armstrong numbers between 1 and 100 are [1, 2, 3, 4, 5, 6, 7, 8, 9]. Case #3: The Armstrong numbers between 1 and 1000 are [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407].","solution":"def is_armstrong_number(num): digits = list(map(int, str(num))) num_digits = len(digits) return num == sum(d ** num_digits for d in digits) def find_armstrong_numbers(N): return [i for i in range(1, N + 1) if is_armstrong_number(i)] def armstrong_numbers(test_cases): results = [] for N in test_cases: results.append(find_armstrong_numbers(N)) return results"},{"question":"# Palindrome Index Finder A palindrome is a string that reads the same backwards as forwards. Given a string `s`, you need to find the minimum index `i` such that when you remove the character at the index `i` in the string, the resulting string is a palindrome. If the string is already a palindrome, return `-1`. If no such index exists, return `-1`. **Examples:** - Given `s = \\"abca\\"`, removing the character at index `1` results in `aca`, which is a palindrome. Hence, the function should return `1`. - Given `s = \\"racecar\\"`, the string is already a palindrome, so the function should return `-1`. - Given `s = \\"hello\\"`, no single removal can make it a palindrome, hence the function should return `-1`. **Constraints:** - The input string will contain only lowercase English letters. - The length of the input string will be between `1` and `10^5`. **Function signature:** ```python def palindrome_index_finder(s: str) -> int: ``` **Note:** You need to consider both efficiency and readability of your solution, given the potentially large size of the input string.","solution":"def is_palindrome(s: str) -> bool: Helper function to check if the given string s is a palindrome. return s == s[::-1] def palindrome_index_finder(s: str) -> int: Given a string s, this function returns the minimum index i such that when you remove the character at the index i in the string, the resulting string is a palindrome. If the string is already a palindrome, return -1. If no such index exists, return -1. if is_palindrome(s): return -1 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: # Check if removing s[i] makes the remaining string a palindrome if is_palindrome(s[:i] + s[i + 1:]): return i # Check if removing s[n - i - 1] makes the remaining string a palindrome if is_palindrome(s[:n - i - 1] + s[n - i:]): return n - i - 1 return -1 return -1"},{"question":"You are given an encrypted message that consists of a series of words separated by spaces. Each word is a base-64 encoded string. Your task is to decode the message and return the original string. Base-64 encoding uses the following characters: A-Z, a-z, 0-9, +, and /. The padding character is \'=\'. You may assume that the input is a valid base-64 encoded string and that the input does not contain any line breaks or extraneous spaces. -----Input----- The input consists of a single string s of length 1 le |s| le 10^5, which is a base-64 encoded series of words separated by spaces. -----Output----- Output the original decoded string. -----Example----- Input VGVzdCBtZXNzYWdl Output Test message Input SGVsbG8gd29ybGQh U2FtcGxlIHRleHQgd2l0aCBjb21wbGV4IGVuY29kaW5nIQ== Output Hello world! Sample text with complex encoding! Note: In the first example, the base-64 encoded string \\"VGVzdCBtZXNzYWdl\\" decodes to \\"Test message\\". In the second example, \\"SGVsbG8gd29ybGQh\\" decodes to \\"Hello world!\\", and \\"U2FtcGxlIHRleHQgd2l0aCBjb21wbGV4IGVuY29kaW5nIQ==\\" decodes to \\"Sample text with complex encoding!\\". The output is the concatenation of these two decoded segments.","solution":"import base64 def decode_base64_message(s): Decodes a series of base-64 encoded words separated by spaces. Parameters: s (str): A string containing base-64 encoded words separated by spaces. Returns: str: The original decoded string. words = s.split() decoded_words = [base64.b64decode(word).decode(\'utf-8\') for word in words] return \\" \\".join(decoded_words)"},{"question":"You are given a string containing digits, lowercase letters, and uppercase letters. Your task is to write a function to reformat the string in such a way that no two adjacent characters are the same. If a valid reordering is not possible, return an empty string. Your function should follow these steps: 1. Count the frequency of each character in the string. 2. Try to arrange the characters so that no two identical characters are adjacent. 3. If it is not possible, return an empty string. **Input:** - A string `s` containing digits, lowercase letters, and uppercase letters (1 ≤ |s| ≤ 500). **Output:** - A new string where no two adjacent characters are the same, or an empty string if no valid rearrangement is possible. **Example:** Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" Would you try to implement this function?","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize the string so that no two adjacent characters are the same. Return an empty string if no valid reordering is possible. n = len(s) # Count frequency of each character frequency = Counter(s) # Use max heap to get the most frequent characters first max_heap = [(-freq, char) for char, freq in frequency.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) freq += 1 # decrement freq as we have used one occurrence of char prev_freq, prev_char = freq, char result_str = \'\'.join(result) # Check if the reorganized string length matches the input string if len(result_str) != n: return \\"\\" return result_str"},{"question":"You are given an array of integers where each integer represents the stock price of a company on a particular day. You need to determine the maximum profit that can be made by buying and selling the stock only once. Write a function that takes an array of integers as input and returns the maximum profit that can be achieved. **Note:** If no profit can be achieved, the function should return 0. **Constraints:** * The input array will contain at least 2 elements. * Each element in the array represents the stock price for a day and will be a non-negative integer. **Examples:** #1: ```python [7, 1, 5, 3, 6, 4] --> 5 ``` Explanation: * Buy on day 2 (price = 1) * Sell on day 5 (price = 6) * Profit = 6 - 1 = 5 #2: ```python [7, 6, 4, 3, 1] --> 0 ``` Explanation: * In this case, no profit can be made since the stock prices are decreasing. #3: ```python [1, 2, 3, 4, 5, 6] --> 5 ``` Explanation: * Buy on day 1 (price = 1) * Sell on day 6 (price = 6) * Profit = 6 - 1 = 5","solution":"def max_profit(prices): Given a list of stock prices, determines the maximum profit that can be made by buying and selling the stock only once. Args: prices (List[int]): List of stock prices. Returns: int: The maximum profit possible. Returns 0 if no profit can be made. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Update the minimum price seen so far if price < min_price: min_price = price # Calculate the profit if we sold at the current price profit = price - min_price # Update the maximum profit seen so far if profit > max_profit: max_profit = profit return max_profit"},{"question":"Write a function ```python common_elements(matrix) ``` that takes a 2D list (matrix) where each row is a sorted list of integers. The function should return a list of all integers that appear in each row. E.g. ```python common_elements([[1, 2, 3, 4, 5], [2, 4, 5, 8, 10], [2, 4, 8, 9, 12], [4, 8, 12, 16, 20]]) == [4] common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [] common_elements([[1, 3, 4, 7, 9], [1, 2, 4, 5, 9], [1, 3, 4, 9, 10]]) == [1, 4, 9] common_elements([[2, 3], [2, 3, 4], [2, 3, 6], [2, 3, 8]]) == [2, 3] ```","solution":"def common_elements(matrix): Returns a list of integers that appear in each row of the matrix. Parameters: matrix (list of list of int): 2D list where each row is a sorted list of integers. Returns: list of int: List of integers that appear in each row. if not matrix or not matrix[0]: return [] common_elements = set(matrix[0]) for row in matrix[1:]: common_elements.intersection_update(row) return sorted(common_elements)"},{"question":"# Task Given an integer array `nums`, rotate the array to the right by `k` steps, where `k` is a non-negative integer. Write a function: ```python def rotate_array(nums: List[int], k: int) -> List[int]: # your code here ``` # Input/Output - `[input]` integer array `nums` - An array of integers. (1 ≤ nums.length ≤ 2 * 10^4, -2^31 ≤ nums[i] ≤ 2^31 - 1) - `[input]` integer `k` - A non-negative integer representing the number of steps to rotate. (0 ≤ k ≤ 10^5) - `[output]` a list of integers - The array after being rotated to the right by `k` steps. # Example For `nums = [1,2,3,4,5,6,7]` and `k = 3`, the output should be `[5,6,7,1,2,3,4]`. For `nums = [-1,-100,3,99]` and `k = 2`, the output should be `[3,99,-1,-100]`. For `nums = [1,2,3]` and `k = 4`, the output should be `[3,1,2]`. Note: - You need to rotate the array `k` times. This means that each element of the array will be shifted `k` positions to the right. - For example, if we rotate the array `[1,2,3,4,5,6,7]` 3 times, new positions and values of the array elements would be as follows: - The element that was at index 0 will move to index (0+3)%7 which is 3, hence new value at index 3 = 1. - The element that was at index 1 will move to index (1+3)%7 which is 4, hence new value at index 4 = 2. - Following this pattern, the final rotated array becomes `[5,6,7,1,2,3,4]`.","solution":"from typing import List def rotate_array(nums: List[int], k: int) -> List[int]: Rotates the array to the right by k steps. n = len(nums) k = k % n # to handle cases where k > n # Rotate the array using slicing rotated_array = nums[-k:] + nums[:-k] return rotated_array"},{"question":"A decorator wants to create a unique pattern for a wall design using stars (*) and dots (.). The pattern follows a specific rule where each row alternates between stars and dots, starting with a star in the first row, and each subsequent row has one more character than the previous row. You are tasked with writing the code to generate such a pattern given the number of rows. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case contains a single integer N, the number of rows in the pattern. -----Output:----- For each test case, output the pattern with N rows. Each pattern should be separated by an empty line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 20 -----Sample Input:----- 2 3 5 -----Sample Output:----- * *. *.. * *. *.. *... *.... -----EXPLANATION:----- For the first test case with 3 rows: 1st row has 1 star: * 2nd row has 2 characters starting with star: *. 3rd row has 3 characters starting with star: *.. For the second test case with 5 rows: 1st row has 1 star: * 2nd row has 2 characters starting with star: *. 3rd row has 3 characters starting with star: *.. 4th row has 4 characters starting with star: *... 5th row has 5 characters starting with star: *.... Each pattern is separated by an empty line.","solution":"def generate_pattern(n): Generates a pattern with the given number of rows n. result = [] for i in range(1, n+1): row = \'*\' + \'.\' * (i - 1) result.append(row) return result def pattern_for_test_cases(test_cases): Generates patterns for each test case. Parameters: test_cases (list): A list of integers representing the number of rows for each test case. Returns: list: A list of strings where each string is the pattern for one test case. patterns = [] for n in test_cases: patterns.append(\'n\'.join(generate_pattern(n))) return patterns"},{"question":"=====Problem Statement===== You are given an array of integers that represents the heights of candles. When the candles are lit, they will burn down to a height of 0 unit by unit. Some candles initially have the same height. Your task is to determine how many candles have the tallest height and will be blown out on the last moment. =====Input Format===== The first line of input contains an integer, n, the number of candles. The second line contains n space-separated integers, the heights of the candles. =====Constraints===== 1 ≤ n ≤ 10^5 1 ≤ height of candle ≤ 10^7 =====Output Format===== Output the number of candles that are the tallest in height. =====Example===== Input: 4 3 2 1 3 Output: 2 =====Explanation===== There are 4 candles with heights 3, 2, 1, and 3. The tallest candles are of height 3, and there are 2 such candles. Thus, the output is 2.","solution":"def count_tallest_candles(n, heights): Returns the number of candles that have the tallest height. :param n: int, the number of candles :param heights: list of int, the heights of the candles :return: int, the number of tallest candles tallest_height = max(heights) return heights.count(tallest_height)"},{"question":"# River Crossing Puzzle You are leading a group of travelers on a dangerous journey and encounter a wide river. Fortunately, there\'s a boat that can get the travelers across, but the boat has a weight limit. You need to help them figure out how many trips the boat will need to make to get everyone across the river safely. Each traveler has a specific weight, and the boat can carry a maximum weight of `W`. You need to determine the minimum number of trips required to get all travelers to the other side. -----Input:----- The first line of input will consist of an integer `n`, the number of travelers. The second line will contain `n` space-separated integers, the weights of the travelers. The third line will contain an integer `W`, the weight limit of the boat. -----Output:----- Print the minimum number of trips required to get all travelers across the river. -----Constraints:----- - `1 ≤ n ≤ 1000` - `1 ≤ weight of each traveler ≤ 1000` - `1 ≤ W ≤ 1000` -----Sample Input:----- 5 100 200 150 80 120 200 -----Sample Output:----- 4","solution":"def min_trips(n, weights, W): weights.sort(reverse=True) trips = 0 i, j = 0, n - 1 while i <= j: if weights[i] + weights[j] <= W: j -= 1 i += 1 trips += 1 return trips # Example usage: # n = 5 # weights = [100, 200, 150, 80, 120] # W = 200 # print(min_trips(n, weights, W)) # Output: 4"},{"question":"Implement a function that encodes a given string into Morse code. Use a dictionary to map each letter and digit to its Morse code equivalent. Spaces within the input string should be retained as spaces in the output. Ensure that both uppercase and lowercase letters are handled by the function. Additionally, the function should ignore any characters not present in the Morse code mapping. Example: ``` encode_morse(\\"Hello World\\") ``` Output: ``` \\".... . .-.. .-.. --- / .-- --- .-. .-.. -..\\" ```","solution":"def encode_morse(input_string): Encodes a given string into Morse code. Spaces within the input string are retained as spaces in the output. The function ignores any characters not present in the Morse code mapping. morse_code_dict = { \'a\': \'.-\', \'b\': \'-...\', \'c\': \'-.-.\', \'d\': \'-..\', \'e\': \'.\', \'f\': \'..-.\', \'g\': \'--.\', \'h\': \'....\', \'i\': \'..\', \'j\': \'.---\', \'k\': \'-.-\', \'l\': \'.-..\', \'m\': \'--\', \'n\': \'-.\', \'o\': \'---\', \'p\': \'.--.\', \'q\': \'--.-\', \'r\': \'.-.\', \'s\': \'...\', \'t\': \'-\', \'u\': \'..-\', \'v\': \'...-\', \'w\': \'.--\', \'x\': \'-..-\', \'y\': \'-.--\', \'z\': \'--..\', \'1\': \'.----\', \'2\': \'..---\', \'3\': \'...--\', \'4\': \'....-\', \'5\': \'.....\', \'6\': \'-....\', \'7\': \'--...\', \'8\': \'---..\', \'9\': \'----.\', \'0\': \'-----\', \' \': \'/\' } input_string = input_string.lower() encoded_string = \\" \\".join(morse_code_dict[char] for char in input_string if char in morse_code_dict) return encoded_string"},{"question":"# Task Determine the longest substring composed of unique characters from the given string `s`. # Example For `s = \\"abcabcbb\\"`, the output should be `3` because the longest substring with unique characters is `\\"abc\\"`. For `s = \\"bbbbb\\"`, the output should be `1` because the longest substring with unique characters is `\\"b\\"`. For `s = \\"pwwkew\\"`, the output should be `3` because the longest substring with unique characters is `\\"wke\\"`. # Input/Output - `[input]` string `s` A string which contains only English letters (both lowercase and uppercase). - `[output]` an integer The length of the longest substring with no repeating characters.","solution":"def longest_unique_substring_length(s): Finds the length of the longest substring with unique characters in the given string s. :param s: String input consisting of English letters. :return: The length of the longest unique character substring. max_len = 0 start = 0 seen_chars = {} for end in range(len(s)): if s[end] in seen_chars: start = max(start, seen_chars[s[end]] + 1) seen_chars[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given a list of strings containing alphanumeric characters and spaces. Your task is to sort the list primarily by the sum of the ASCII values of the characters in each string in ascending order. If two strings have the same sum of ASCII values, they should be sorted by their natural lexicographical order. Implement a function: ```python def sort_strings_by_ascii_sum(strings: List[str]) -> List[str]: ``` # Input - A list of strings, where each string contains alphanumeric characters and spaces. The list contains at least one string and at most 100 strings. - Each string is non-empty and has a length between 1 and 100 characters. # Output - A list of strings, sorted based on the criteria mentioned above. # Example 1: Input ```python strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] ``` Output ```python [\\"apple\\", \\"banana\\", \\"cherry\\"] ``` *Explanation:* - The ASCII sum of \\"apple\\" is 97+112+112+108+101 = 530 - The ASCII sum of \\"banana\\" is 98+97+110+97+110+97 = 609 - The ASCII sum of \\"cherry\\" is 99+104+101+114+114+121 = 653 - The strings are already sorted based on the ASCII sum in ascending order. # Example 2: Input ```python strings = [\\"abc\\", \\"acd\\", \\"cab\\"] ``` Output ```python [\\"abc\\", \\"cab\\", \\"acd\\"] ``` *Explanation:* - The ASCII sum of \\"abc\\" is 97+98+99 = 294 - The ASCII sum of \\"cab\\" is 99+97+98 = 294 - The ASCII sum of \\"acd\\" is 97+99+100 = 296 - \\"abc\\" and \\"cab\\" have the same ASCII sum but \\"abc\\" comes before \\"cab\\" lexicographically. # Example 3: Input ```python strings = [\\"hello world\\", \\"hi!\\", \\"test\\"] ``` Output ```python [\\"hi!\\", \\"test\\", \\"hello world\\"] ``` *Explanation:* - The ASCII sum of \\"hello world\\" is 1085 - The ASCII sum of \\"hi!\\" is 315 - The ASCII sum of \\"test\\" is 448 - Sorted order based on ASCII sum would be [\\"hi!\\", \\"test\\", \\"hello world\\"]. # Constraints - 1 <= len(strings) <= 100 - 1 <= len(string) <= 100 - Each string contains alphanumeric characters and spaces only.","solution":"from typing import List def sort_strings_by_ascii_sum(strings: List[str]) -> List[str]: def ascii_sum(s: str) -> int: return sum(ord(ch) for ch in s) return sorted(strings, key=lambda s: (ascii_sum(s), s)) # Example usage: # strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] # print(sort_strings_by_ascii_sum(strings)) # Output: [\\"apple\\", \\"banana\\", \\"cherry\\"]"},{"question":"Chef wants to explore new ways to arrange his dessert recipes to maximize flavor combinations. He believes that the tastiest arrangement of desserts follows a zigzag sequence: an increasing followed by a decreasing pattern, or vice versa. Help Chef by rearranging the given array of distinct integers such that the elements follow a zigzag sequence. Specifically, the sequence should satisfy either of these properties: - arr[0] < arr[1] > arr[2] < arr[3] > ... - arr[0] > arr[1] < arr[2] > arr[3] < ... Determine if it is possible to rearrange the array accordingly, and if so, provide one valid zigzag arrangement. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case contains two lines of input: The first line contains a single integer N, the size of the array. - The second line contains N space-separated distinct integers representing the array. -----Output:----- For each test case, if it is possible to rearrange the array into a zigzag sequence, output one possible arrangement in a single line. If it\'s not possible, output \\"Not Possible\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq arr[i] leq 10^5 -----Sample Input:----- 2 4 1 3 5 2 3 9 7 10 -----Sample Output:----- 1 5 2 3 10 7 9","solution":"def zigzag(arr): Rearranges the input array into a zigzag sequence. arr.sort() n = len(arr) result = [] left = 0 right = n-1 while left <= right: if left == right: result.append(arr[left]) break result.append(arr[right]) result.append(arr[left]) left += 1 right -= 1 return result def solve(test_cases): results = [] for case in test_cases: N, arr = case if N <= 1: results.append(\\" \\".join(map(str, arr))) continue results.append(\\" \\".join(map(str, zigzag(arr)))) return results # Sample Input Handling def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, arr)) index += 1 + N results = solve(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Task Write a function that takes a list of integers and returns a list of tuples. Each tuple should contain two elements: the first element is an integer from the input list, and the second element is the number of times that integer appears consecutively in the list. Examples Input | Output --- | --- [1, 1, 2, 2, 2, 3] | [(1, 2), (2, 3), (3, 1)] [4, 4, 4, 4] | [(4, 4)] [1, 2, 3, 3, 3, 4, 4] | [(1, 1), (2, 1), (3, 3), (4, 2)] [] | [] Notes - The input list can be empty, in which case the function should return an empty list. - The input list can contain negative integers.","solution":"def count_consecutive_occurrences(lst): if not lst: return [] result = [] count = 1 for i in range(1, len(lst)): if lst[i] == lst[i - 1]: count += 1 else: result.append((lst[i - 1], count)) count = 1 result.append((lst[-1], count)) return result"},{"question":"Task Given a list of meeting time intervals `intervals`, where each interval is represented as a tuple `(start, end)` denoting the start time and end time of the meeting, determine if a person could attend all meetings without any overlap. Write a function `can_attend_all_meetings(intervals)` that returns `True` if a person can attend all given meetings without overlapping, otherwise return `False`. # Example For `intervals = [(0, 30), (5, 10), (15, 20)]`, the output should be `False`. Some meetings overlap as the second meeting ends at 10 while the first meeting start time is at 0. For `intervals = [(7, 10), (2, 4), (12, 15)]`, the output should be `True`. All meetings can be attended as they don\'t overlap with each other. # Function Signature ```python def can_attend_all_meetings(intervals: List[Tuple[int, int]]) -> bool: pass ```","solution":"from typing import List, Tuple def can_attend_all_meetings(intervals: List[Tuple[int, int]]) -> bool: Determine if a person can attend all given meetings without overlapping. Args: intervals (List[Tuple[int, int]]): List of tuples with start and end times of meetings. Returns: bool: True if no meetings overlap, False otherwise. # Sort the intervals by start time intervals.sort(key=lambda x: x[0]) for i in range(1, len(intervals)): # If the current meeting starts before the previous one ends, there is an overlap if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"You\'ve been given two sorted arrays of integers, `arr1` and `arr2`. Write a function `merge_sorted_arrays(arr1, arr2)` that merges these two arrays into a single, sorted array without using any built-in sort functions. Example 1: ``` merge_sorted_arrays([1, 3, 5], [2, 4, 6]) -> [1, 2, 3, 4, 5, 6] ``` Example 2: ``` merge_sorted_arrays([0, 10, 20], [5, 15, 25]) -> [0, 5, 10, 15, 20, 25] ``` Example 3: ``` merge_sorted_arrays([-1, 0, 1], [-2, 2, 3]) -> [-2, -1, 0, 1, 2, 3] ``` The arrays may contain duplicate values, so ensure your solution handles such cases appropriately. Example 4: ``` merge_sorted_arrays([1, 2, 2, 3], [2, 3, 4]) -> [1, 2, 2, 2, 3, 3, 4] ``` Constraints: - Each array can contain up to 10^4 elements. - Elements within each array are already sorted in non-decreasing order.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): The first sorted array. arr2 (list of int): The second sorted array. Returns: list of int: A single sorted array containing all elements from arr1 and arr2. merged = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are elements left in arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are elements left in arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Create a function that calculates the total number of pages a person needs to read, given the number of chapters and the pages in each chapter. The person reads one chapter per day. However, on every 3rd day, the person gets a bonus and reads an additional chapter from the next unread ones. If it’s the last chapter, they don’t get the bonus chapter for that day. # Examples ```python total_pages([10, 20, 30, 40, 50]) ==> 150 # 5 chapters: 1 + bonus(2), 3, 4 + bonus(5) = 10 + 20 + 30 + 40 + 50 = 150 total_pages([15, 25, 35, 45]) ==> 120 # 4 chapters: 1 + bonus(2), 3, 4 = 15 + 25 + 35 + 45 = 120 ``` # Remarks - `total_pages` should take a list of integers, representing the number of pages in each chapter, as input. - The function should return the total number of pages the person reads.","solution":"def total_pages(chapters): Calculates the total number of pages a person reads given the number of chapters and the pages in each chapter, considering the bonus chapters read every 3rd day. :param chapters: List of integers representing pages in each chapter :return: Total number of pages read total_pages_read = 0 chapter_count = len(chapters) day = 1 i = 0 while i < chapter_count: # Read the current chapter total_pages_read += chapters[i] i += 1 # Check for the bonus chapter if it\'s every 3rd day and there\'s at least one more chapter if day % 3 == 0 and i < chapter_count: total_pages_read += chapters[i] i += 1 day += 1 return total_pages_read"},{"question":"You are given a string S consisting of lowercase Latin letters and you need to determine if it is possible to rearrange the characters of this string to form a palindrome. A string is considered a palindrome if it reads the same backward as forward (e.g., \\"madam\\"). -----Input----- The first line contains a single integer T, denoting the number of test cases. The descriptions of T test cases follow. Each test case description contains one non-empty string S consisting of lowercase Latin letters only. -----Output----- For each test case, output a single line containing \\"YES\\" (without quotes) if it is possible to rearrange the characters of S to form a palindrome, or \\"NO\\" (without quotes) otherwise. -----Constraints----- - Subtask 1 (20 points) : 1 ≤ T ≤ 50, 1 ≤ |S| ≤ 10 - Subtask 2 (80 points) : 1 ≤ T ≤ 100, 1 ≤ |S| ≤ 1000 -----Example----- Input: 3 civic ivicc hello Output: YES YES NO -----Explanation----- Test case 1: The string \\"civic\\" is already a palindrome. Test case 2: By rearranging the letters of \\"ivicc\\", we can get \\"civic\\" which is a palindrome. Test case 3: It is not possible to rearrange the letters of \\"hello\\" to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string \'s\' can be rearranged to form a palindrome. from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(T, test_cases): Processes multiple test cases to determine if palindromes can be formed. results = [] for s in test_cases: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers representing the heights of students standing in a line, your task is to find the minimum number of students that need to be removed such that the remaining students are standing in strictly increasing order of their heights. You need to find out the minimum number of removals required to achieve this configuration. -----Input----- - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer n, which indicates the number of students. - The second line contains n space-separated integers representing the heights of the students. -----Output----- For each test case, print the minimum number of students that need to be removed to make the heights strictly increasing. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ height of student ≤ 10^6 -----Example----- Input: 2 6 5 2 3 6 4 8 5 1 2 3 4 5 Output: 2 0 -----Explanation----- Example 1: In this example, removing heights 5 and 4 (index positions 0 and 4) makes the remaining heights [2, 3, 6, 8] strictly increasing. Thus, the minimum number of students that need to be removed is 2. Example 2: In this example, the heights are already in strictly increasing order. So, no student needs to be removed, resulting in 0 removals.","solution":"def min_removals_to_increasing(heights): Returns the minimum number of students that need to be removed to make the remaining heights strictly increasing. n = len(heights) if n == 0: return 0 # Longest Increasing Subsequence (LIS) length calculation lis = [1] * n for i in range(1, n): for j in range(0, i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) # The minimum number of removals is n - length of LIS return n - max(lis) def process_test_cases(T, test_cases): results = [] for i in range(T): n, heights = test_cases[i] results.append(min_removals_to_increasing(heights)) return results"},{"question":"Write a function `find_longest_subsequence` that takes a list of integers and returns the longest subsequence of consecutive integers. If there are multiple subsequences of the same length, return the one that appears first in the list. ```python # Example: # find_longest_subsequence([1, 9, 3, 10, 4, 20, 2]) should return [1, 2, 3, 4] # find_longest_subsequence([36, 41, 56, 35, 44, 33, 34, 92, 43, 32]) should return [32, 33, 34, 35, 36] # find_longest_subsequence([1, 2, 9, 4, 5, 3]) should return [1, 2, 3, 4, 5] You can assume that the input list contains no duplicate elements and all numbers are positive integers. ``` Provide a function definition for `find_longest_subsequence` in Python. Ensure your solution correctly handles edge cases, such as an empty list.","solution":"def find_longest_subsequence(nums): if not nums: return [] nums = sorted(set(nums)) longest_subseq = [] current_subseq = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i-1] + 1: current_subseq.append(nums[i]) else: if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq current_subseq = [nums[i]] if len(current_subseq) > len(longest_subseq): longest_subseq = current_subseq return longest_subseq"},{"question":"Dance Choreographer Background Story You are renowned for creating complex and captivating dance routines. One day, while working on a new choreography for a popular dance competition, you realize you need a way to optimize the sequence of dance moves to ensure that the routine flows seamlessly and looks impressive. To achieve this, you decide to write a program that automatically adjusts the dance move sequence based on certain rules. Task Write a function called `optimizeDanceRoutine` which takes a list of dance moves (strings) as an argument and returns a new list of dance moves where: 1. Replace *all* instances of `\\"twist\\"` with `\\"spin\\"`. 2. Replace *all* instances of `\\"step forward\\"` with `\\"advance\\"`. 3. Replace *all* instances of `\\"step back\\"` with `\\"retreat\\"`. 4. Replace *all* instances of `\\"wave\\"` with `\\"sway\\"`. 5. Replace *all* instances of `\\"jump\\"` with `\\"leap\\"`. 6. Replace *all* instances of `\\"slide\\"` with `\\"glide\\"`. Your replacement rules should be case-sensitive so that only exact matches are replaced. Additionally, make sure to capitalize any dance move that ends a sentence (is followed by a period). Here\'s an example of how the sequence should be optimized: ```python def optimizeDanceRoutine(moves): # Write your code here # Example usage: moves = [\\"twist\\", \\"step forward\\", \\"step back\\", \\"wave\\", \\"jump\\", \\"slide.\\"] print(optimizeDanceRoutine(moves)) ``` Output: ```python [\\"spin\\", \\"advance\\", \\"retreat\\", \\"sway\\", \\"leap\\", \\"glide.\\"] ```","solution":"def optimizeDanceRoutine(moves): replacements = { \\"twist\\": \\"spin\\", \\"step forward\\": \\"advance\\", \\"step back\\": \\"retreat\\", \\"wave\\": \\"sway\\", \\"jump\\": \\"leap\\", \\"slide\\": \\"glide\\" } def replace_move(move): for old, new in replacements.items(): if move == old: return new elif move == old + \\".\\": return new + \\".\\" return move return [replace_move(move) for move in moves]"},{"question":"You are given a string representing a time in the 12-hour clock format (hh:mm AM/PM). Your task is to write a function that will convert this time to the 24-hour clock format (HH:MM). For example: - \\"02:30 PM\\" would return \\"14:30\\" - \\"12:00 AM\\" would return \\"00:00\\" - \\"07:45 AM\\" would return \\"07:45\\" If the input string does not follow the correct format, return \\"Invalid time format\\". Note: - The input string will always have two-digit hours and minutes. - The AM/PM marker will be separated by a space from the time. - You can make use of any built-in date or time manipulation libraries in your language of choice.","solution":"def convert_to_24_hour_format(time_str): Converts a 12-hour AM/PM time format string to 24-hour time format string. Parameters: time_str (str): A string representing time in \\"hh:mm AM/PM\\" format. Returns: str: A string representing time in \\"HH:MM\\" format, or \\"Invalid time format\\" if the input is invalid. try: import datetime # Parse the input time string. time_obj = datetime.datetime.strptime(time_str, \\"%I:%M %p\\") # Format the time object to 24-hour format. return time_obj.strftime(\\"%H:%M\\") except ValueError: return \\"Invalid time format\\""},{"question":"A group of archeologists have unearthed an old computer system. They\'ve managed to retrieve a file containing a list of operations and need to simulate the final state of a certain number after performing all the operations. The operations can either add a number to the current value or multiply the current value by a fixed number. You are required to write a program to determine the final value after performing all operations in the specified order. Each operation is in one of the following two forms: - `ADD x` - This operation increases the current value by `x`. - `MUL y` - This operation multiplies the current value by `y`. The initial value is always 0. -----Input----- The first line contains an integer `m` (1 ≤ m ≤ 100,000) - the number of operations. Each of the next `m` lines contains an operation in one of the two possible forms described above, followed by an integer. -----Output----- Print the final value after performing all the operations. -----Examples----- Input 3 ADD 5 MUL 2 ADD 3 Output 13 Input 4 MUL 5 ADD 3 ADD 2 MUL 4 Output 20","solution":"def final_value_after_operations(operations): Returns the final value after performing all operations. Parameters: operations (List[str]): A list of operations in the form \\"ADD x\\" or \\"MUL y\\". Returns: int: The final value after performing all operations. current_value = 0 for operation in operations: op, num = operation.split() num = int(num) if op == \'ADD\': current_value += num elif op == \'MUL\': current_value *= num return current_value"},{"question":"You are given an array of integers representing heights of different buildings. A building of height h[i] is only capable of viewing the horizon if there are no taller buildings in front of it. Given this, return the number of buildings that can view the horizon. Example 1: Input: heights = [4, 2, 3, 1] Output: 3 Explanation: The buildings at index 0, 2, and 3 can view the horizon because there are no taller buildings in front of them. Example 2: Input: heights = [1, 2, 3, 4] Output: 1 Explanation: Only the building at index 3 can view the horizon as all other buildings have taller buildings in front of them. Constraints: 1 <= heights.length <= 10^4 1 <= heights[i] <= 10^5 Note: For this problem, a building can view the horizon if there are no taller buildings strictly to the right of it in the array.","solution":"def count_buildings_with_view(heights): Returns the number of buildings that can view the horizon. count = 0 max_height = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"Implement a function that determines if a given number is \\"almost prime\\". A number is considered \\"almost prime\\" if it has exactly three distinct divisors: 1, itself, and another prime number. For example: - 4 is almost prime because its divisors are {1, 2, 4}. - 9 is almost prime because its divisors are {1, 3, 9}. - 25 is almost prime because its divisors are {1, 5, 25}. - 6 is not almost prime because it has four divisors: {1, 2, 3, 6}. Your function should have the following signature: ```python def is_almost_prime(n: int) -> bool: pass ``` # Examples ```python is_almost_prime(4) # True is_almost_prime(9) # True is_almost_prime(25) # True is_almost_prime(6) # False is_almost_prime(10) # False ``` # Constraints - The function should handle input values up to 10^6 efficiently. - The input number will always be a positive integer greater than 1.","solution":"def is_almost_prime(n: int) -> bool: Determines if a given number is \\"almost prime\\". A number is considered \\"almost prime\\" if it has exactly three distinct divisors: 1, itself, and another prime number. import math # Function to check if a number is prime def is_prime(num): if num < 2: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True # Number must be a square of some prime number to have exactly three divisors root = int(math.isqrt(n)) if root * root == n and is_prime(root): return True return False"},{"question":"Task: You need to write a function `alternatingSums` that takes an array of integers as input and returns an array containing the sums of the integers at the odd indices and even indices, respectively. Indices should start from 0. # Rules/Note: - If the input array is empty, the function should return an array `[0, 0]`. - The input array will only contain integers. - The length of the input array can vary between 0 and 10000. # Examples: ```python alternatingSums([50, 60, 70, 80]) # returns [120, 140] # Explanation: # sum of elements at even indices (50+70) = 120, # sum of elements at odd indices (60+80) = 140 alternatingSums([1]) # returns [1, 0] # Explanation: # sum of elements at even indices (1) = 1, # sum of elements at odd indices = 0 alternatingSums([5, 5, 5, 5]) # returns [10, 10] # Explanation: # sum of elements at even indices (5+5) = 10, # sum of elements at odd indices (5+5) = 10 ```","solution":"def alternatingSums(arr): Returns an array containing the sums of the integers at the even indices and odd indices, respectively. sum_even = sum(arr[i] for i in range(0, len(arr), 2)) sum_odd = sum(arr[i] for i in range(1, len(arr), 2)) return [sum_even, sum_odd]"},{"question":"A social media application tracks the number of new users signing up each day. You are given the number of users who signed up on each of the past n days. Occasionally, the app experiences an anomaly that causes no users to sign up for some days. The app developers want to analyze the trend in the active growth periods by identifying every longest contiguous interval of days where at least one user signed up each day. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer n, the number of days. - The second line of each test case contains n space-separated integers where the i-th integer represents the number of users who signed up on the i-th day. -----Output----- For each test case, print a single line containing the length of the longest contiguous interval where there was at least one signup each day. -----Constraints----- - 1 le T le 100 - 1 le n le 10^5 - 0 le number of signups le 10^5 -----Example Input----- 3 5 1 2 0 4 5 6 0 0 0 0 0 0 8 1 1 1 0 1 1 0 1 -----Example Output----- 2 0 3 -----Explanation----- Example case 1: The longest contiguous interval where at least one user signed up is from day 4 to day 5, so the length is 2. Example case 2: There were no days with signups, so the length is 0. Example case 3: The longest contiguous interval where at least one user signed up is from day 1 to day 3, so the length is 3.","solution":"def longest_active_period(test_cases): results = [] for case in test_cases: n, days = case max_length, current_length = 0, 0 for signup in days: if signup > 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 results.append(max_length) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) days = list(map(int, input_lines[index + 1].split())) test_cases.append((n, days)) index += 2 return test_cases def solution(input_str): test_cases = parse_input(input_str) results = longest_active_period(test_cases) return \'n\'.join(map(str, results))"},{"question":"In a game, there are n players standing in a circle. Each player has a unique identifier from 1 to n. The game proceeds as follows: starting from player 1, players report their current score sequentially in a clockwise direction until every player has reported their score exactly once. Initially, each player has a score equal to their identifier. A player can pass their current score to the next player in the sequence. Formally, if a player i passes their score to the next player, then the score of player i becomes 0, and the score of player i+1 becomes the sum of their previous score and the passed score. The score wraps around the circle, meaning after the last player n, the next player is player 1. Your task is to determine the maximum possible score any single player can achieve if each player can pass their score at most once. -----Input----- The first line contains one integer T (1 le T le 100) — the number of test cases. Each test case contains a single integer n (2 le n le 1000) — the number of players. -----Output----- For each test case, print one integer — the maximum possible score any single player can achieve if each player passes their score at most once. -----Example----- Input 3 2 3 4 Output 3 6 7 -----Explanations----- In the first test case, we have 2 players with initial scores [1, 2]. Player 1 can pass their score to player 2, making the score [0, 3]. The maximum score any single player has is 3. In the second test case, we have 3 players with initial scores [1, 2, 3]. Optimal moves could involve: - Player 1 passing to Player 2: [0, 3, 3] - Player 2 passing to Player 3: [1, 0, 5] In the third test case, with 4 players, possible optimal moves are: - Player 1 passing to Player 2: [0, 3, 3, 4] - Player 3 passing to Player 4: [1, 2, 0, 7]","solution":"def max_score(n): Returns the maximum possible score any single player can achieve if each player can pass their score at most once. Parameters: n (int): number of players Returns: int: maximum score # The maximum possible score for a single player is achieved by # the player who receives the score from the previous player. # The total score sum is the triangular number n*(n+1)/2, which # is maximized when one player doesn\'t pass their score. return n + (n-1) # this is equivalent to n + n - 1 = 2n - 1 def solve(t, cases): Processes multiple test cases and returns the results for each case. Parameters: t (int): number of test cases cases (list of int): list of players count for each test case Returns: list of int: maximum scores for each test case results = [] for n in cases: results.append(max_score(n)) return results"},{"question":"**Task**: Write a function that calculates the total number of transformations needed to turn one word into another using only insertions, deletions, or substitutions of characters. This is called the \\"Levenshtein Distance\\" or \\"Edit Distance.\\" **Function Signature**: ```python def levenshtein_distance(word1: str, word2: str) -> int: pass ``` **Input**: - `word1` - a string representing the first word (1 ≤ |word1| ≤ 1000) - `word2` - a string representing the second word (1 ≤ |word2| ≤ 1000) **Output**: - An integer representing the minimum number of transformations needed to convert `word1` to `word2`. **Examples**: ```python levenshtein_distance(\\"kitten\\", \\"sitting\\") → 3 # Explanation: \\"kitten\\" -> \\"sitten\\" (substitution of \'k\' to \'s\'), \\"sitten\\" -> \\"sittin\\" (substitution of \'e\' to \'i\'), \\"sittin\\" -> \\"sitting\\" (insertion of \'g\') levenshtein_distance(\\"flaw\\", \\"lawn\\") → 2 # Explanation: \\"flaw\\" -> \\"flawn\\" (insertion of \'n\'), \\"flawn\\" -> \\"lawn\\" (deletion of \'f\') levenshtein_distance(\\"intention\\", \\"execution\\") → 5 # Explanation: \\"intention\\" -> \\"enention\\" (substitution of \'i\' to \'e\'), \\"enention\\" -> \\"exention\\" (substitution of \'n\' to \'x\'), \\"exention\\" -> \\"execntion\\" (substitution of \'e\' to \'c\'), \\"execntion\\" -> \\"executon\\" (substitution of \'n\' to \'u\'), \\"executon\\" -> \\"execution\\" (substitution of \'o\' to \'i\') ``` **Constraints**: - Ensure your solution is efficient and works within a reasonable time for the input limits specified. **Hints**: 1. Use dynamic programming to solve this problem. 2. Create a 2D array `dp` where `dp[i][j]` represents the Levenshtein Distance between `word1[0..i-1]` and `word2[0..j-1]`. 3. Initialize `dp[0][0]` to 0, `dp[i][0]` to `i` and `dp[0][j]` to `j` for the base cases. 4. Iterate through the words and fill up the `dp` array based on the recurrence relation: - If `word1[i-1] == word2[j-1]`, no extra cost is needed: `dp[i][j] = dp[i-1][j-1]` - Otherwise, choose the minimum cost among inserting, deleting, or substituting characters: `dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])`","solution":"def levenshtein_distance(word1: str, word2: str) -> int: n = len(word1) m = len(word2) if n == 0: return m if m == 0: return n dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): dp[i][0] = i for j in range(1, m + 1): dp[0][j] = j for i in range(1, n + 1): for j in range(1, m + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) return dp[n][m]"},{"question":"Given an array of integers `arr`, find the length of the longest contiguous subarray that contains at most two distinct elements. Example 1: Input: arr = [1, 2, 1, 2, 3] Output: 4 Explanation: The longest subarray with at most two distinct elements is [1, 2, 1, 2]. Example 2: Input: arr = [4, 4, 4, 4, 4] Output: 5 Explanation: The entire array contains only one distinct element, so the length is 5. Example 3: Input: arr = [1, 2, 3, 4, 5] Output: 2 Explanation: Each subarray with two distinct elements has a maximum length of 2. Note: 1. 1 <= arr.length <= 100000 2. 0 <= arr[i] <= 100000","solution":"def length_of_longest_subarray(arr): from collections import defaultdict n = len(arr) if n == 0: return 0 if n == 1: return 1 left = 0 max_length = 0 freq = defaultdict(int) for right in range(n): freq[arr[right]] += 1 while len(freq) > 2: freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"# Task: Create a function that determines whether an integer (positive, negative, or zero) is a palindrome. A number is considered a palindrome if it remains the same when its digits are reversed. Given an integer `n`, return `True` if `n` is a palindrome, and `False` otherwise. Examples: ``` is_palindrome(121) == True is_palindrome(-121) == False is_palindrome(10) == False is_palindrome(0) == True ``` Good luck!","solution":"def is_palindrome(n): Determines whether an integer is a palindrome. A number is considered a palindrome if it remains the same when its digits are reversed. Args: n (int): The integer to check. Returns: bool: True if n is a palindrome, False otherwise. # Convert the integer to string str_n = str(n) # Check if the string is the same as its reverse return str_n == str_n[::-1]"},{"question":"You are given a string `S` of length `N` consisting of lowercase English alphabets. You can change at most one character in the string to any other lowercase English alphabet. Your task is to determine the lexicographically smallest string that can be obtained by making at most one such change. Input: The input consists of two lines. The first line contains an integer `N` denoting the length of the string. The second line contains the string `S`. Output: Print a single line containing the lexicographically smallest string that can be obtained. Constraints: - 1 ≤ N ≤ 100 Example Input: 6 abcdef Example Output: aacdef Explanation: In this example, you can change the second character \'b\' to \'a\', resulting in the string \\"aacdef\\", which is the lexicographically smallest string that can be obtained by changing at most one character.","solution":"def lexicographically_smallest_string(N, S): Returns the lexicographically smallest string by changing at most one character. # Convert string to a list to modify it S_list = list(S) # iterate through the string to find the first non \'a\' character for i in range(N): if S_list[i] != \'a\': S_list[i] = \'a\' # change first non \'a\' character to \'a\' break # Join list back to string result = \'\'.join(S_list) return result"},{"question":"You are given a list of integers and an integer `k`. Your task is to find and return all the unique pairs of integers from the list that sum up to `k`. The pairs should be sorted in non-decreasing order. # Input: * List of integers `(1 <= len(list) <= 1000, -1000 <= integer <= 1000)` * Integer value `k` `(-2000 <= k <= 2000)` # Output: * List of tuples, where each tuple contains a pair of integers that sum up to `k`. The tuples should be sorted in non-decreasing order. # Examples: ``` find_pairs([1, 5, 3, 7, 9], 10) -> [(1, 9), (3, 7)] ``` ``` find_pairs([2, -1, 1, -3, 4], 1) -> [(-3, 4), (-1, 2)] ``` ``` find_pairs([0, 0, 0], 0) -> [(0, 0)] ``` Each integer in the list can only be used once per pair.","solution":"def find_pairs(lst, k): Finds all unique pairs in the list that sum up to k. Parameters: lst (list): A list of integers. k (int): The target sum for pairs. Returns: list: A list of sorted tuples, each containing a pair of integers that sum up to k. seen = set() pairs = set() for number in lst: complement = k - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) # Convert set to list and sort in non-decreasing order return sorted(pairs)"},{"question":"Tom loves arrays and subarrays. He has an array of integers and likes to answer queries on it. Each query can be one of the following types: 1. Given an index i, report the value at that index in the array. 2. Given an index i and a value v, update the value at index i to v. 3. Given two indices l and r, inclusive, report the sum of the subarray starting from l to r. Tom wants your help to answer these queries on his array. -----Input:----- - The first line contains a single integer n, the number of elements in the array. - The second line contains n space-separated integers, the elements of the array. - The third line contains a single integer Q, the number of queries. - The following Q lines describe the queries. Each query is described by three integers: - For the first and second query types, the second integer is i. For the second query type, the third integer is v. - For the third query type, the second and third integers are l and r, respectively. -----Output:----- For the queries of the first and third types, print the required result. -----Constraints:----- 1 leq n leq 10^5 1 leq Q leq 10^5 1 leq array element, i, l, r leq 10^9 1 leq value v leq 10^9 -----Sample Input----- 5 1 2 3 4 5 3 1 2 3 1 3 2 4 10 -----Sample Output----- 3 6 -----Explanation:----- Initial array: [1, 2, 3, 4, 5] For the first query, the value at index 2 is 3. For the third query, the sum of the subarray from index 1 to index 3 is 1 + 2 + 3 which is 6. For the second query, updating the value at index 4 to 10, the array becomes [1, 2, 3, 10, 5].","solution":"def process_queries(n, arr, queries): results = [] for query in queries: if query[0] == 1: # Report the value at index i idx = query[1] results.append(arr[idx]) elif query[0] == 2: # Update the value at index i to v idx = query[1] value = query[2] arr[idx] = value elif query[0] == 3: # Report the sum of the subarray from l to r inclusive l = query[1] r = query[2] results.append(sum(arr[l:r+1])) return results"},{"question":"Given a string S, determine if its characters can be rearranged to form a palindromic string. A string is palindromic if it reads the same backward as forward. -----Input:----- - The input begins with a single integer T — the number of test cases. - Each of the next T lines contains a single string S. -----Output:----- For each test case, output \\"YES\\" if the characters of S can be rearranged to form a palindromic string. Otherwise, output \\"NO\\". -----Constraints----- - 1 le T le 1000 - 1 le |S| le 10^5 - S consists of lowercase English letters. -----Sample Input:----- 3 aabb abc aab -----Sample Output:----- YES NO YES -----Explanation:----- In the first test case, the characters of \\"aabb\\" can be rearranged as \\"abba\\" which is a palindrome, so the output is \\"YES\\". In the second test case, the characters of \\"abc\\" cannot form a palindrome, so the output is \\"NO\\". In the third test case, the characters of \\"aab\\" can be rearranged as \\"aba\\" which is a palindrome, so the output is \\"YES\\".","solution":"def can_form_palindrome(s): Checks if a string\'s characters can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def check_palindromes(T, test_cases): For each string in test_cases, determine if its characters can be rearranged to form a palindromic string. results = [] for case in test_cases: if can_form_palindrome(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Create a function `summarize_timeseries` that accepts a list of tuples, where each tuple contains a string representing a timestamp in the format `YYYY-MM-DD HH:MM:SS` and a numerical value. The function should return a dictionary where each key is a string representing the date in `YYYY-MM-DD` format, and the value is the sum of all numerical values for that date. Example: ```python input_data = [ (\\"2023-08-01 12:00:00\\", 10), (\\"2023-08-01 13:00:00\\", 20), (\\"2023-08-02 14:00:00\\", 30) ] output = { \\"2023-08-01\\": 30, \\"2023-08-02\\": 30 } ``` Note: - You can assume that all timestamps are given in chronological order. - The timestamp values are unique.","solution":"def summarize_timeseries(data): Summarizes the time series data by date. Parameters: data (list of tuples): List of tuples where each tuple contains a timestamp (in format \'YYYY-MM-DD HH:MM:SS\') and a numerical value. Returns: dict: Dictionary where keys are dates (\'YYYY-MM-DD\') and values are the sum of numerical values for that date. summary = {} for timestamp, value in data: date = timestamp.split()[0] if date in summary: summary[date] += value else: summary[date] = value return summary"},{"question":"Given an array of meeting time intervals consisting of start and end times, determine if a person could attend all meetings. Each interval is represented as a pair of integers [start, end] where `start` is the start time of the meeting and `end` is the end time of the meeting. Note: It is not possible to attend two meetings that overlap. Example 1: Input: [[0,30],[5,10],[15,20]] Output: False Example 2: Input: [[7,10],[2,4]] Output: True Constraints: - 0 <= number of meeting time intervals <= 10^4 - The input array can be unsorted. - The start and end times are non-negative integers less than 10^6.","solution":"def can_attend_all_meetings(intervals): Determine if a person could attend all meetings given a list of meeting time intervals. Arguments: intervals -- A list of lists, each inner list contains two integers [start, end]. Returns: boolean -- True if a person can attend all meetings, False otherwise. if not intervals: return True # Sort the intervals by starting time intervals.sort(key=lambda x: x[0]) # Check for overlapping meetings for i in range(1, len(intervals)): if intervals[i][0] < intervals[i - 1][1]: return False return True"},{"question":"Task Create a function ```findAndReplace``` that accepts three parameters: `text`, `target`, and `replacement`. The function should return a new string where all instances of the `target` word in `text` are replaced with the `replacement` word. The function should be case-insensitive but should maintain the case of the original word being replaced. # Example ``` findAndReplace(\\"Hello World! Hello people!\\", \\"hello\\", \\"hi\\") should return \\"Hi World! Hi people!\\" findAndReplace(\\"The quick brown fox\\", \\"quick\\", \\"slow\\") should return \\"The slow brown fox\\" findAndReplace(\\"To be or not to be\\", \\"be\\", \\"exist\\") should return \\"To exist or not to exist\\" ``` # Constraints - Your solution should be case-insensitive. - The function should preserve the case of the word being replaced. - Use regular expressions to perform the replacement. # Hints - Consider using the string.replace() method with a regular expression. - Look up how to create case-insensitive regular expressions. - Use a function as the replacement argument for `replace` to handle case preservation.","solution":"import re def findAndReplace(text, target, replacement): Replaces all instances of the target word in the text with the replacement word. The function is case-insensitive but maintains the case of the original word being replaced. # Define a function for replacement to preserve case def replace_with_case(match): # Get the matched text matched_text = match.group(0) # Determine and return the correct case if matched_text.isupper(): return replacement.upper() elif matched_text.istitle(): return replacement.title() elif matched_text.islower(): return replacement.lower() else: return replacement # Compile regex with case-insensitive flag target_re = re.compile(re.escape(target), re.IGNORECASE) # Use sub method to replace all instances with replacement function result = target_re.sub(replace_with_case, text) return result"},{"question":"In this task, you are asked to determine if a given number is a **Harshad number** (or **Niven number**). A Harshad number in a given number base is an integer that is divisible by the sum of its digits in that base. For a given positive integer `n`, write a function `is_harshad(n)` that returns `True` if `n` is a Harshad number; otherwise, return `False`. # Examples: ```python is_harshad(18) # return True, because 1 + 8 = 9 and 18 is divisible by 9 is_harshad(19) # return False, because 1 + 9 = 10 and 19 is not divisible by 10 is_harshad(21) # return True, because 2 + 1 = 3 and 21 is divisible by 3 is_harshad(22) # return False, because 2 + 2 = 4 and 22 is not divisible by 4 ``` # Constraints: 1. The input integer `n` will always be a positive integer. 2. The input integer `n` can be extremely large, up to 10^100000. Note: Make sure your solution is efficient and can handle very large numbers within the given constraint.","solution":"def is_harshad(n): Determines if a given positive integer n is a Harshad number. A number is a Harshad number if it is divisible by the sum of its digits. digit_sum = sum(int(digit) for digit in str(n)) return n % digit_sum == 0"},{"question":"You are given a string `s` comprised of digits and lowercase alphabets. Your task is to write a function to rearrange the characters in the string such that all the digits appear before all the alphabet characters while maintaining their original relative order. For example, consider the input string `s` is `\\"a1b2c3\\"`. After rearranging, the result should be `\\"123abc\\"`. Another example is if the input string `s` is `\\"p4q3r2\\"`, the result should be `\\"432pqr\\"`. **Constraints:** * The length of string `s` is between 1 and 1000 inclusive. * The string contains only lowercase alphabet characters and digits. Write a function that rearranges the characters as described. Your function should have the following signature: ```python def rearrange_string(s: str) -> str: pass ``` # Example ```python assert(rearrange_string(\\"a1b2c3\\") == \\"123abc\\") assert(rearrange_string(\\"7x6y5z\\") == \\"765xyz\\") assert(rearrange_string(\\"abc123\\") == \\"123abc\\") assert(rearrange_string(\\"1a1b1c1\\") == \\"1111abc\\") ```","solution":"def rearrange_string(s: str) -> str: Rearranges the input string such that all the digits appear before all the alphabet characters while maintaining their original relative order. :param s: Input string comprised of digits and lowercase alphabets. :return: Rearranged string with digits first and alphabets after. digits = [] alphabets = [] for char in s: if char.isdigit(): digits.append(char) else: alphabets.append(char) return \'\'.join(digits) + \'\'.join(alphabets)"},{"question":"You are developing a simulation of traffic lights at an intersection. The lights follow a cyclic pattern: Green for a specified number of seconds, Yellow for another specified number of seconds, and Red for a different specified number of seconds. Write a function `traffic_light_cycle` that takes three arguments: the duration of the Green light in seconds, the duration of the Yellow light in seconds, and the duration of the Red light in seconds. The function should return a list representing the entire cycle of the traffic light from Green to Yellow to Red in sequence. Each state should be represented as a tuple `(Color, SecondsRemaining)`, where `Color` can be \\"Green\\", \\"Yellow\\", or \\"Red\\" and `SecondsRemaining` is the number of seconds left in that state. For example: `traffic_light_cycle(10, 3, 7)` should return `[(\'Green\', 10), (\'Yellow\', 3), (\'Red\', 7)]`.","solution":"def traffic_light_cycle(green_duration, yellow_duration, red_duration): Returns the traffic light cycle as a list of tuples representing the color and the duration for which the light stays in that color. Arguments: green_duration -- duration of the Green light in seconds yellow_duration -- duration of the Yellow light in seconds red_duration -- duration of the Red light in seconds Returns: A list of tuples representing the traffic light cycle. return [(\'Green\', green_duration), (\'Yellow\', yellow_duration), (\'Red\', red_duration)]"},{"question":"You are given the root node of a binary search tree (BST) and a target value. Write a function to find the value in the BST that is closest to the target. Note: - All node values in the BST are unique. - The target value is a floating-point number. - You are guaranteed to have at least one node in the BST. Your function should take the following inputs: - root: the root node of the BST. - target: a floating-point number representing the target value. Your function should return: - The value in the BST that is closest to the target. Example 1: Input: root = [4, 2, 5, 1, 3], target = 3.714286 Output: 4 Explanation: The closest value to the target 3.714286 in the BST is 4. Example 2: Input: root = [1], target = 4.428571 Output: 1 Explanation: The closest value to the target 4.428571 in the BST is 1. The function signature is: ```python def closestValue(root: TreeNode, target: float) -> int: # your code here ``` Note: - The definition for a binary tree node is given as: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ```","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def closestValue(root: TreeNode, target: float) -> int: def findClosest(node, target, closest): if node is None: return closest if abs(node.val - target) < abs(closest - target): closest = node.val if target < node.val: closest = findClosest(node.left, target, closest) elif target > node.val: closest = findClosest(node.right, target, closest) return closest return findClosest(root, target, root.val)"},{"question":"In a sports tournament, each team earns points based on the result of their match. The points are awarded as follows: - A win gives 3 points - A draw gives 1 point - A loss gives 0 points Each team plays exactly N matches. You are given the results of these matches for a team in array R, where Ri denotes the result of the i-th match: - 1 means the team won the match - 0 means the match was drawn - -1 means the team lost the match Your task is to calculate the total points the team earned from all N matches. -----Input----- The input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, the number of matches. The following line contains N space-separated integers (-1, 0, or 1) denoting the results of the matches. -----Output----- For each test case, output a single integer denoting the total points earned by the team. -----Constraints----- - 1 ≤ T ≤ 30 - 1 ≤ N ≤ 1000 - -1 ≤ Ri ≤ 1 -----Example----- Input 3 3 1 0 -1 4 1 1 0 -1 2 -1 -1 Output 4 7 0 -----Explanation----- Example case 1: The team won 1 match, drew 1 match, and lost 1 match. So the total points are 3 (for win) + 1 (for draw) + 0 (for loss) = 4. Example case 2: The team won 2 matches, drew 1 match, and lost 1 match. So the total points are 3+3 (for wins) + 1 (for draw) + 0 (for loss) = 7. Example case 3: The team lost both matches. So the total points are 0 (for losses) = 0.","solution":"def calculate_points(results): Calculate the total points based on the match results. :param results: List of integers representing the match results (-1 for loss, 0 for draw, 1 for win) :return: Total points earned points_map = {1: 3, 0: 1, -1: 0} total_points = sum(points_map[result] for result in results) return total_points def process_input(input_str): Process the input string and calculate points for each test case. :param input_str: A multiline string input as described in the problem statement :return: List of integers where each integer represents the total points for the respective test case lines = input_str.splitlines() T = int(lines[0]) results_per_case = [] line_idx = 1 for _ in range(T): N = int(lines[line_idx]) results = list(map(int, lines[line_idx + 1].split())) points = calculate_points(results) results_per_case.append(points) line_idx += 2 return results_per_case"},{"question":"String Permutation Checker Write a function that checks if one string is a permutation of another string. Two strings are permutations of each other if they contain the same characters with the same frequency, but possibly in a different order. Your function should have the following signature: ```python def is_permutation(s: str, t: str) -> bool: ``` **Arguments:** * `s`: a string containing only lowercase alphabets (1 ≤ |s| ≤ 10^5) * `t`: a string containing only lowercase alphabets (1 ≤ |t| ≤ 10^5) **Return Value:** * True if `t` is a permutation of `s`, false otherwise. **Examples:** ```python is_permutation(\\"abc\\", \\"bca\\") == True is_permutation(\\"abc\\", \\"abcd\\") == False is_permutation(\\"hello\\", \\"ollhe\\") == True is_permutation(\\"test\\", \\"ttew\\") == False ``` **Hint:** Consider using a data structure to count character frequencies in both strings and then compare these counts. Full tests before submission will include edge cases such as completely different string lengths and cases where one string has different frequencies of the same characters.","solution":"def is_permutation(s: str, t: str) -> bool: Checks if string t is a permutation of string s. if len(s) != len(t): return False from collections import Counter return Counter(s) == Counter(t)"},{"question":"> Given an array of integers, the majority element is the one that appears more than ⌊ n/2 ⌋ times. You may assume that the array is non-empty and the majority element always exists in the array. Write a function that takes an array of integers as input and returns the majority element. **Example:** Input: [3, 2, 3] Output: 3","solution":"def majority_element(nums): Returns the majority element in the array \'nums\', which is the element that appears more than n/2 times. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"Write a function `count_vowels` that takes a `phrase` and returns the count of vowels (a, e, i, o, u) in the input string. The function should be case-insensitive. For example: - `count_vowels(\\"Hello World\\")` should return `3` (e, o, o). - `count_vowels(\\"Programming is fun!\\")` should return `5` (o, a, i, i, u). - `count_vowels(\\"Why?\\")` should return `0`.","solution":"def count_vowels(phrase): Returns the count of vowels (a, e, i, o, u) in the input string. The check is case-insensitive. vowels = \'aeiou\' phrase = phrase.lower() return sum(1 for char in phrase if char in vowels)"},{"question":"Given a string, create a program that will reverse the string and check if the reversed string matches the original string, i.e., check if the string is a palindrome. The program should ignore all non-alphabetical characters and case differences when making the comparison. -----Input----- The input will contain multiple lines, each line having a single string. The input will terminate with a single line containing \\"STOP\\". The input strings can be of varying lengths. -----Output----- For each input string, the output should be \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. -----Example----- Input A man, a plan, a canal, Panama Hello, World Was it a car or a cat I saw STOP Output YES NO YES -----Constraints----- - The strings are case-insensitive. - Non-alphabetical characters should be ignored in checking whether a string is a palindrome.","solution":"def is_palindrome(s): Checks if a given string is a palindrome, ignoring non-alphabetical characters and case differences. :param s: input string :return: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise # Filter out non-alphabetical characters and convert to lower case filtered_chars = [ch.lower() for ch in s if ch.isalpha()] # Check if the filtered list is equal to its reverse return \\"YES\\" if filtered_chars == filtered_chars[::-1] else \\"NO\\" def process_input(input_lines): Processes the input lines to check each line whether it is a palindrome. :param input_lines: list of input strings :return: list of results for each input string results = [] for line in input_lines: if line.strip() == \\"STOP\\": break results.append(is_palindrome(line)) return results"},{"question":"Implement a function `find_max_product` that takes an array of integers and returns the maximum product of any two distinct elements in the array. If the array has fewer than two elements, return `nil`. The function should handle both positive and negative integers.","solution":"def find_max_product(arr): Returns the maximum product of any two distinct elements in the array. If the array has fewer than two elements, return None. if len(arr) < 2: return None arr.sort() # Compare product of two largest with product of two smallest return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"In a given matrix, your task is to find the maximum sum of the subarray that can be formed by taking a full section of any column in any number of consecutive rows. You need to return this maximum sum. For example, given the following matrix: ``` [ [1, 2, -1, 4], [-3, 4, 5, -2], [3, -2, 2, 1], [2, -3, -2, 3] ] ``` The subarray with the maximum sum is from column 1, taking the middle two rows `[-3, 4, 5, -2]` + `[3, -2, 2, 1]` which sums up to `7`. # Input: A 2D list `matrix` with integers. The number of columns will be between 1 and 200 and the number of rows will be between 1 and 200. Each element in the matrix will be between -1000 and 1000. # Output: An integer representing the maximum sum of the subarray. # Example: Example 1: - Input: `matrix = [[1, 2, -1, 4], [-3, 4, 5, -2], [3, -2, 2, 1], [2, -3, -2, 3]]` - Output: `7` Example 2: - Input: `matrix = [[-1, -1], [-3, -2], [-1, -4], [-1, -5]]` - Output: `-1` # Function Signature: ```python def max_subarray_column(matrix: [[int]]) -> int: pass ```","solution":"def max_subarray_column(matrix: [[int]]) -> int: Returns the maximum sum of the subarray that can be formed by taking a full section of any column in any number of consecutive rows. if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) max_sum = float(\'-inf\') for col in range(cols): for start_row in range(rows): current_sum = 0 for end_row in range(start_row, rows): current_sum += matrix[end_row][col] max_sum = max(max_sum, current_sum) return max_sum # Example: # matrix = [ # [1, 2, -1, 4], # [-3, 4, 5, -2], # [3, -2, 2, 1], # [2, -3, -2, 3] # ] # max_subarray_column(matrix) should return 7"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid contains either an empty space (\' . \') or an obstacle (\'#\'). Your task is to find the shortest path from the top-left corner of the grid to the bottom-right corner. You may move up, down, left, or right, but you cannot move through obstacles. If there is no valid path, return -1. -----Input----- - The first line of the input contains two space-separated integers N and M -- the number of rows and columns in the grid. - Each of the next N lines contains M characters, either \' . \' or \'#\', representing the grid. -----Output----- Print a single integer -- the length of the shortest path from the top-left to the bottom-right corner, or -1 if no such path exists. -----Constraints----- - 1 leq N, M leq 100 - The top-left and bottom-right corners are always empty spaces. -----Example Input----- 5 5 . . . . . . # # # . . . . # . . # . . . . . . # . -----Example Output----- 9 -----Example Input----- 3 3 . # . # . # . # . -----Example Output----- -1","solution":"from collections import deque def shortest_path_in_grid(N, M, grid): if not grid or grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a list of non-negative integers representing the heights of poles. Each pole can carry only a certain amount of weight, which is proportionate to its height. You need to determine the maximum amount of weight that can be supported between two poles selected from the list. The weight supported between two poles is calculated as follows: - Weight supported = minimum height of the two poles * distance between them Write a function to find the maximum weight that can be supported between any two poles. Example 1: Input: heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The poles at indices 1 and 8 provide the max weight support of 49 (min height 7 * distance 7). Example 2: Input: heights = [1, 1] Output: 1 Explanation: The poles at indices 0 and 1 provide the max weight support of 1 (min height 1 * distance 1). Constraints: - The length of the array will be in the range [2, 100]. - The height of each pole in the array will be in the range [0, 10000].","solution":"def max_weight_support(heights): Returns the maximum amount of weight that can be supported between any two poles. max_weight = 0 left, right = 0, len(heights) - 1 while left < right: min_height = min(heights[left], heights[right]) distance = right - left weight = min_height * distance max_weight = max(max_weight, weight) # Move the pointer pointing to the shorter pole if heights[left] < heights[right]: left += 1 else: right -= 1 return max_weight"},{"question":"**Design a function `closest_pair` that takes a list of integers and returns a tuple containing the pair of distinct integers in the list that are closest to each other in value.** Properties: - The input must be a list of integers. - The list must contain at least two distinct integers. - The output should be a tuple of the two integers that are closest to each other. - If there are multiple pairs with the same smallest difference, return any one of them. - The function should handle both positive and negative integers. - The function should not consider equal values as closest pairs. Examples: ```python closest_pair([4, 1, 17, 8, 6, 2]) # should return (1, 2) or (4, 6) closest_pair([-3, -1, -8, 5, 7]) # should return (-3, -1) or (5, 7) closest_pair([1, 100]) # should return (1, 100) ```","solution":"def closest_pair(nums): Returns a tuple of the pair of distinct integers in the list that are closest to each other in value. if len(nums) < 2: raise ValueError(\\"The input list must contain at least two distinct integers.\\") nums = sorted(set(nums)) # Remove duplicates and sort the list if len(nums) < 2: raise ValueError(\\"The list must contain at least two distinct integers after removing duplicates.\\") min_diff = float(\'inf\') closest_pair = (None, None) for i in range(len(nums) - 1): diff = nums[i + 1] - nums[i] if diff < min_diff: min_diff = diff closest_pair = (nums[i], nums[i + 1]) return closest_pair"},{"question":"Task Implement a function to simulate a vending machine. The function should take as input the item selected by the user and the amount of money inserted, then output the change returned to the user and update the item stock in the vending machine. The vending machine should have a limited stock for each item, and each item has different prices. Your function should handle the following requirements: 1. If the requested item is out of stock, the function should return a message indicating so and return all the inserted money. 2. If the user inserts insufficient money, the function should return a message about the insufficient amount and return all the inserted money. 3. If the user inserts more than the required amount, the function should return the exact change. 4. The function should update the stock quantities after a successful transaction. Here are the initial settings for the vending machine in the form of dictionaries: - stock = {\'A1\': 5, \'A2\': 3, \'B1\': 2, \'B2\': 0} - prices = {\'A1\': 1.25, \'A2\': 0.75, \'B1\': 1.50, \'B2\': 2.00} Examples: Input: item = \'A1\', money = 2.00 Output: \\"Change: 0.75\\", Update stock to {\'A1\': 4, \'A2\': 3, \'B1\': 2, \'B2\': 0} Input: item = \'B2\', money = 2.00 Output: \\"Item B2 is out of stock. Returned money: 2.00\\", Stock remains {\'A1\': 5, \'A2\': 3, \'B1\': 2, \'B2\': 0} Input: item = \'B1\', money = 1.00 Output: \\"Insufficient money. Returned money: 1.00\\", Stock remains {\'A1\': 5, \'A2\': 3, \'B1\': 2, \'B2\': 0} Your function should be named `vending_machine`. Here is the signature: ```python def vending_machine(item, money): # Your code here ```","solution":"def vending_machine(item, money): stock = {\'A1\': 5, \'A2\': 3, \'B1\': 2, \'B2\': 0} prices = {\'A1\': 1.25, \'A2\': 0.75, \'B1\': 1.50, \'B2\': 2.00} if item not in stock: return f\\"Item {item} does not exist. Returned money: {money:.2f}\\", stock if stock[item] == 0: return f\\"Item {item} is out of stock. Returned money: {money:.2f}\\", stock price = prices[item] if money < price: return f\\"Insufficient money. Returned money: {money:.2f}\\", stock change = money - price stock[item] -= 1 return f\\"Change: {change:.2f}\\", stock"},{"question":"Build a function `deepestStringLength`/`deepest_string_length` that returns the length of the longest string in a series of nested lists. Traversal should explore every depth level to find the string with the maximum length. For example, ``` deepestStringLength([\\"hello\\", [\\"world\\"], [[\\"this\\"], [\\"is\\", [\\"a\\", [\\"test\\"]]]]]) ``` should return `4` since the longest string is \\"test\\" at the deepest level.","solution":"def deepest_string_length(nested_lists): Recursively finds the length of the longest string in a series of nested lists. Args: nested_lists (list): A list which may contain nested lists and strings. Returns: int: The length of the longest string found within the nested lists. max_length = 0 def helper(nested): nonlocal max_length for item in nested: if isinstance(item, list): helper(item) elif isinstance(item, str): max_length = max(max_length, len(item)) helper(nested_lists) return max_length"},{"question":"You are given an array of integers, where each number represents the height of a tower of blocks. The blocks can be of different colors, represented as integers. You need to find if it is possible to rearrange the blocks in such a way that no two adjacent blocks have the same color. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of blocks. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le n) — the colors of the blocks. -----Output----- If it is possible to rearrange the blocks such that no two adjacent blocks have the same color, print «YES» in the first line and output the rearranged sequence of blocks in the second line. If it is not possible, print «NO» in one line. -----Examples----- Input 5 1 1 1 2 2 Output YES 1 2 1 2 1 Input 3 3 3 3 Output NO -----Note----- In the first example, you can rearrange the blocks to make sure no two adjacent blocks have the same color. In the second example, it is impossible to rearrange the blocks such that no two adjacent blocks have the same color.","solution":"from collections import Counter import heapq def rearrange_blocks(n, blocks): Rearrange blocks so that no two adjacent blocks have the same color. Parameters: n (int): Number of blocks blocks (list of int): List of colors of blocks Returns: tuple: (\\"YES\\", rearranged_blocks) or (\\"NO\\", ) counter = Counter(blocks) max_occurrences = max(counter.values()) # Check if it\'s possible to rearrange blocks if max_occurrences > (n + 1) // 2: return (\\"NO\\", ) # Max heap to store blocks by their count max_heap = [(-cnt, color) for color, cnt in counter.items()] heapq.heapify(max_heap) prev_count, prev_color = 0, None rearranged = [] while max_heap: count, color = heapq.heappop(max_heap) rearranged.append(color) # If there\'s a previously used color to add back to heap if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_color)) # Prepare the current color to be used in the next round prev_count, prev_color = count + 1, color return (\\"YES\\", rearranged)"},{"question":"In a faraway land, there is a magical garden that houses N types of flowers. Each flower type has a unique ID from 1 to N. The garden keeper has the power to increase the number of flowers of a specific type or count the total number of flowers of a specific type in a given range of flower types. You need to implement two types of operations on the garden: Input: The first line consists of Q queries. Each following line represents a query and consists of four space-separated values: Type 1: It is of the form 1 t k 1 is the type number, \\"t\\" is the type of flower, and \\"k\\" is the number of flowers to add to this type. Type 2: It is of the form 2 t1 t2 2 is the type number, \\"t1\\" is the starting type of flower, and \\"t2\\" is the ending type of flower (inclusive). Output: For each query of type 2, report the sum of flowers for the given type range. Constraints: 1 <= Q <= 10^5 1 <= N <= 10^6 1 <= t, t1, t2 <= N 1 <= k <= 10^6 Subtask 1: (30 points) 1 <= Q <= 10^3 1 <= t, t1, t2 <= 10^3 1 <= k <= 10^3 Subtask 2: (70 points) Original Constraints Sample Input: 6 1 2 5 1 1 10 1 3 7 2 1 2 2 2 3 2 1 3 Sample Output: 15 5 22 In the first query of type 2, the sum of flowers of type 1 to 2 is (10 + 5) = 15. In the second query of type 2, the sum of flowers of type 2 to 3 is (5 + 7) = 12. In the third query of type 2, the sum of flowers of type 1 to 3 is (10 + 5 + 7) = 22.","solution":"class MagicalGarden: def __init__(self, N): self.flowers = [0] * (N + 1) def add_flowers(self, t, k): self.flowers[t] += k def count_flowers(self, t1, t2): return sum(self.flowers[t1:t2+1]) def process_queries(N, queries): garden = MagicalGarden(N) result = [] for query in queries: parts = list(map(int, query.split())) if parts[0] == 1: _, t, k = parts garden.add_flowers(t, k) elif parts[0] == 2: _, t1, t2 = parts result.append(garden.count_flowers(t1, t2)) return result"},{"question":"You are given a string s and an integer k. You can choose any substring of the string and reverse it. Find the maximum number of such operations needed to make the string a palindrome. Example 1: Input: s = \\"ababa\\", k = 1 Output: 0 Explanation: The string is already a palindrome, so no operations are needed. Example 2: Input: s = \\"abcd\\", k = 2 Output: 2 Explanation: One way to transform the string into a palindrome is: - Reverse the substring \\"bc\\" to get \\"acbd\\" - Reverse the substring \\"bd\\" to get \\"adcb\\" After 2 operations, the string becomes \\"abcdedcba\\", which is a palindrome. Constraints: - The length of the given string will not exceed 1000. - The value of k will not exceed the length of the string and will always be greater than 0. - All characters in the string are lower case English letters. Note: You are guaranteed that a solution exists and it is always possible to transform the given string into a palindrome with at most k operations.","solution":"def max_operations_to_palindrome(s: str, k: int) -> int: Given a string s and an integer k, returns the minimum number of operations needed to make the string a palindrome by reversing any substring. Parameters: s (str): The input string k (int): The maximum length of the substring that can be reversed at once Returns: int: The minimum number of operations to make the string a palindrome n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return (dp[0][n - 1] + k - 1) // k"},{"question":"Your task is to implement a function **removeDuplicates** that takes a string as input and returns a new string with all the duplicate characters removed, keeping only the first occurrence of each character. The order of characters in the returned string should be the same as their first appearance in the input string. For example: - **Input:** \\"programming\\" - **Output:** \\"progamin\\" - **Input:** \\"hello\\" - **Output:** \\"helo\\" - **Input:** \\"aabbcc\\" - **Output:** \\"abc\\" You can assume the input string will contain only lowercase alphabetic characters (a-z).","solution":"def removeDuplicates(s): Returns a new string with all duplicate characters removed, keeping only the first occurrence of each character. Parameters: s (str): Input string containing lowercase alphabetic characters. Returns: str: A new string with duplicates removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Write a function `rearrange_positive_negative` that takes a list of integers and rearranges it such that all negative numbers appear before all positive numbers while preserving the original relative order of the negative numbers and the positive numbers. The function should return the rearranged list. *Example:* `[1, -2, -3, 4, 5, -6]` results in `[-2, -3, -6, 1, 4, 5]` If the input list is empty, return an empty list.","solution":"def rearrange_positive_negative(lst): Rearranges the list such that all negative numbers appear before all positive numbers, preserving their relative order. Args: lst (list): List of integers. Returns: list: A list with all negative numbers before positive numbers. if not lst: return [] negative_numbers = [num for num in lst if num < 0] positive_numbers = [num for num in lst if num >= 0] return negative_numbers + positive_numbers"},{"question":"A software developer is tasked with creating a program to generate an array of numbers based on a specific pattern. The developer has one number N and needs your help to write the code for generating this pattern. Each test case contains a single integer N and requires outputting the array generated by following the given pattern. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, the integer N. -----Output:----- For each test case, output the array as a space-separated string. -----Pattern:----- 1. Start with the number 1. 2. Generate the first number, which is 1. 3. For each subsequent number in the array, add the previous number plus 1, then subtract the index of the new number from the result. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 20 -----Sample Input:----- 3 1 2 4 -----Sample Output:----- 1 1 3 1 3 4 7","solution":"def generate_pattern(N): Generates an array based on the given pattern. Parameters: - N: int, the number of elements in the array Returns: - list: generated array based on the pattern array = [1] for i in range(1, N): next_value = array[i-1] + 1 + i array.append(next_value) return array def pattern_test_cases(T, cases): Outputs the array for the given number of test cases. Parameters: - T: int, number of test cases - cases: list of int, the test cases Returns: - list of list: the output arrays for each test case results = [] for N in cases: results.append(generate_pattern(N)) return results"}]'),O={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},j=["disabled"],Y={key:0},z={key:1};function L(r,e,l,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(w,null,y(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",R,' No results found for "'+h(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",Y,"See more"))],8,j)):u("",!0)])}const P=d(O,[["render",L],["__scopeId","data-v-b85d31b3"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/21.md","filePath":"quotes/21.md"}'),D={name:"quotes/21.md"},B=Object.assign(D,{setup(r){return(e,l)=>(n(),i("div",null,[x(P)]))}});export{W as __pageData,B as default};
