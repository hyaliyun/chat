import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,m,a,r){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-2b84458c"]]),S=JSON.parse('[{"question":"You have a collection of N books, each with a unique width Wi. You need to arrange these books on a bookshelf of width W so that the total width of the books on the shelf does not exceed W. However, there\'s a special condition: You must place as many books as possible on the shelf without exceeding the width limit W. If there are multiple ways to place the maximum number of books, choose the arrangement where the total unused width is minimized. Write a function that, given the widths of the books and the width of the bookshelf, determines the maximum number of books that can be placed on the shelf and the minimum unused width. Input Format: - The first line of input contains two integers N and W, the number of books and the width of the bookshelf respectively. - The second line contains N space-separated integers representing the widths of the books. Output Format: - Print two integers: the maximum number of books that can be placed on the shelf and the minimum unused width on the shelf. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ W ≤ 10000 - 1 ≤ Wi ≤ 1000 Example Input: ``` 5 10 2 3 5 6 1 ``` Example Output: ``` 3 0 ``` Explanation: - The optimal arrangement is to place books with widths 2, 3, and 5, which sum exactly to 10. Thus, 3 books can be placed with no unused width.","solution":"def max_books_on_shelf(n, W, widths): Given the number of books, the width of the bookshelf, and the widths of each book, determines the maximum number of books that can fit on the shelf and the minimum unused width. Parameters: n (int): The number of books. W (int): The width of the bookshelf. widths (list of int): The widths of the books. Returns: tuple: A tuple containing two integers: - The maximum number of books that can be placed on the shelf. - The minimum unused width with the given configuration. from itertools import combinations max_books = 0 min_unused_width = W for r in range(1, n+1): for combo in combinations(widths, r): total_width = sum(combo) if total_width <= W: unused_width = W - total_width if r > max_books or (r == max_books and unused_width < min_unused_width): max_books = r min_unused_width = unused_width return max_books, min_unused_width # Input prompt for example implementation if __name__ == \\"__main__\\": n, W = map(int, input().split()) widths = list(map(int, input().split())) result = max_books_on_shelf(n, W, widths) print(result[0], result[1])"},{"question":"A tree is a connected graph without cycles. A subtree is any connected subgraph of a tree. Given a tree with N nodes, each node has a certain value assigned to it. Define the score of a subtree as the product of values of all its nodes. You are required to find the maximum score among all possible subtrees of the given tree. Input The first line contains an integer N (1 ≤ N ≤ 50), the number of nodes in the tree. The second line contains N integers v1, v2, ..., vN (1 ≤ vi ≤ 1000), where vi is the value assigned to the i-th node. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N), indicating that there is an edge between node u and node v. Output Print the maximum score among all possible subtrees of the given tree. Since the numbers can be large, output the result modulo 1000000007. Examples Input 3 2 3 4 1 2 1 3 Output 12 Input 4 3 5 2 6 1 2 1 3 3 4 Output 30 Note In the first example, the subtree consisting of nodes [1, 2, 3] has the maximum score, which is 2 * 3 * 4 = 24. Since 24 modulo 1000000007 is still 24, the output is 24. In the second example, the subtree consisting of nodes [1, 2, 3, 4] has the maximum score, which is 3 * 5 * 2 * 6 = 180. Since 180 modulo 1000000007 is still 180, the output is 180.","solution":"MOD = 1000000007 def max_tree_score(N, values, edges): from collections import defaultdict import sys sys.setrecursionlimit(10000) # Convert the edges list into an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): product = values[node - 1] for child in tree[node]: if child != parent: product = product * dfs(child, node) % MOD return product # We need to find the maximum product subtree starting from any node max_score = max(dfs(i, -1) for i in range(1, N + 1)) % MOD return max_score"},{"question":"# Task You are given a string that represents a sequence of parentheses. Your task is to determine if the sequence is valid. A sequence of parentheses is considered valid if and only if it is balanced: every opening parenthesis has a corresponding closing parenthesis, and the pairs of parentheses are properly nested. # Input/Output - `[input]` string `s` A string representing the sequence of parentheses. `1 <= s.length <= 100` The string consists only of the characters `(` and `)`. - `[output]` a boolean value `true` if the sequence of parentheses is valid, `false` otherwise.","solution":"def is_valid_parentheses(s): Checks if the parentheses in the sequence are valid (i.e., balanced and properly nested). Args: s (str): A string representing the sequence of parentheses. Returns: bool: True if the sequence is valid, otherwise False. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"The owner of a small shopping mall wants to keep track of customer spending. Each customer has a record of the prices of items they purchased. The owner needs to find out how many customers have spent more than a given amount in total during their shopping visits. -----Input----- - The first line of input contains an integer T, the number of test cases. - The first line of each test case contains two integers, N and K, where N is the number of customers, and K is the threshold amount. - The next N lines contain a list of integers separated by spaces, representing the prices of items each customer purchased. -----Output----- - For each test case, output the number of customers whose total spending exceeds the threshold amount K. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ K ≤ 10^6 - 1 ≤ number of prices per customer ≤ 100 - 1 ≤ each price ≤ 10^4 -----Example----- Input: 2 3 500 100 200 250 400 150 100 100 100 200 2 1000 1000 900 200 100 Output: 2 1 -----Explanation----- Example case 1: The total spending of the three customers are 550 (100 + 200 + 250), 550 (400 + 150), and 500 (100 + 100 + 100 + 200). Two customers have spent more than 500 in total. Example case 2: The total spending of the two customers are 1000 and 1200 (900 + 200 + 100). One customer has spent more than 1000 in total.","solution":"def count_customers_exceeding_threshold(T, test_cases): results = [] for case in test_cases: N, K, customers = case count = 0 for customer in customers: if sum(customer) > K: count += 1 results.append(count) return results # Helper function to process input data def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, K = map(int, lines[index].split()) customers = [] for i in range(1, N+1): customer = list(map(int, lines[index + i].split())) customers.append(customer) test_cases.append((N, K, customers)) index += N + 1 return T, test_cases"},{"question":"Given two strings, `str1` and `str2`, determine the minimum number of deletions needed from each string so that the two strings become anagrams of each other. An anagram of a string is another string that contains the same characters, only the order of characters can be different. If it is not possible for the two strings to become anagrams, return the sum of the lengths of the two strings. Function Description Complete the `makeAnagram` function in the editor below. `makeAnagram` has the following parameter(s): - string `str1`: the first string - string `str2`: the second string Returns - int: the minimum number of deletions needed Input Format The first line contains a single string, `str1`. The second line contains a single string, `str2`. Constraints - `1 ≤ len(str1), len(str2) ≤ 10^5` - Both strings are composed of lowercase English letters, ascii[a-z]. Output Format Return the integer result of the minimum number of deletions to make the two strings anagrams. Sample Input 1 ``` cde abc ``` Sample Output 1 ``` 4 ``` Explanation 1 For the two strings to become anagrams, we can delete the following characters: - From `str1` we remove: `c` and `e` (2 deletions) - From `str2` we remove: `a` and `b` (2 deletions) Total deletions = `2 + 2 = 4` Sample Input 2 ``` abc cba ``` Sample Output 2 ``` 0 ``` Explanation 2 The two strings `abc` and `cba` are already anagrams of each other, so no deletions are needed. The minimum number of deletions is `0`.","solution":"from collections import Counter def makeAnagram(str1, str2): Determines the minimum number of deletions needed from two strings to make them anagrams of each other. Args: str1 (string): the first string. str2 (string): the second string. Returns: int: the number of deletions needed. # Count the frequency of each character in both strings counter1 = Counter(str1) counter2 = Counter(str2) # Calculate the deletions needed for str1 deletions = 0 for char in counter1: if char in counter2: deletions += abs(counter1[char] - counter2[char]) else: deletions += counter1[char] # Calculate the deletions needed for str2 for char in counter2: if char not in counter1: deletions += counter2[char] return deletions"},{"question":"Given an array of positive integers, write a program to determine if a subset of these numbers exists such that the sum of the subset is equal to half of the total sum of the array. If such a subset exists, return the subset; otherwise, return an empty array. Example 1: Input: [1, 5, 11, 5] Output: [5, 5, 1] Explanation: The subset [5, 5, 1] has a sum of 11, which is half of the total sum (22). Example 2: Input: [1, 2, 3, 5] Output: [] Explanation: There is no subset that sums up to 5. The sum of the array is 11, so half of the sum is 5.5, which cannot be achieved with integer values. Function Signature: ```python def findSubsetWithHalfSum(nums: List[int]) -> List[int]: ``` Constraints: - 1 ≤ len(nums) ≤ 100 - 1 ≤ nums[i] ≤ 100","solution":"from typing import List def findSubsetWithHalfSum(nums: List[int]) -> List[int]: Given an array of positive integers, determine if a subset of these numbers exists such that the sum of the subset is equal to half of the total sum of the array. If such a subset exists, return the subset; otherwise, return an empty array. total_sum = sum(nums) # If the total_sum is odd, it\'s impossible to split it into two equal parts if total_sum % 2 != 0: return [] target_sum = total_sum // 2 n = len(nums) # Initialize the dp table dp = [False] * (target_sum + 1) dp[0] = True # Track the possible subsets parent = [-1] * (target_sum + 1) for i in range(n): for j in range(target_sum, nums[i] - 1, -1): if dp[j - nums[i]]: dp[j] = True parent[j] = i if not dp[target_sum]: return [] # Backtrack to find the subset subset = [] current_sum = target_sum while current_sum > 0: index = parent[current_sum] subset.append(nums[index]) current_sum -= nums[index] return subset"},{"question":"You are given a rectangular grid of cells, where each cell can either be a wall (\'#\') or a floor (\'.\'). You are also given the starting position of a robot and the position of a target cell. The robot can move to an adjacent cell (up, down, left, or right) if the cell is a floor. Determine the minimum number of moves required for the robot to reach the target cell from the starting position. If it is not possible to reach the target, return -1. -----Constraints----- - The grid size is given as H x W, where 1 ≤ H, W ≤ 50. - The starting and target positions are within the range of the grid. - The grid is guaranteed to have at least one floor cell (\'.\'). -----Input----- Input is given from Standard Input in the following format: H W grid sy sx ty tx - H and W are integers representing the height and width of the grid. - grid is an array of strings representing the grid. - sy, sx are integers representing the starting position of the robot (0-indexed). - ty, tx are integers representing the target position (0-indexed). -----Output----- Print an integer representing the minimum number of moves required to reach the target cell from the starting position. If it is not possible to reach the target, print -1. -----Sample Input----- 4 4 #..# #..# 1 1 2 2 -----Sample Output----- 2 Explanation: The grid: #..# #..# The robot starts at position (1, 1) and the target is at position (2, 2). The minimum number of moves required to reach the target cell is 2 (Right -> Down).","solution":"from collections import deque def min_moves(grid, start, target): H, W = len(grid), len(grid[0]) sy, sx = start ty, tx = target # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue initialization queue = deque([(sy, sx, 0)]) visited = set((sy, sx)) while queue: y, x, moves = queue.popleft() # If target position is reached if (y, x) == (ty, tx): return moves for dy, dx in directions: ny, nx = y + dy, x + dx if 0 <= ny < H and 0 <= nx < W and (ny, nx) not in visited and grid[ny][nx] == \'.\': visited.add((ny, nx)) queue.append((ny, nx, moves + 1)) # If the target is not reachable return -1 if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() H = int(data[0]) W = int(data[1]) grid = [data[i+2] for i in range(H)] sy = int(data[H+2]) sx = int(data[H+3]) ty = int(data[H+4]) tx = int(data[H+5]) print(min_moves(grid, (sy, sx), (ty, tx)))"},{"question":"You are given a string that contains multiple lines, each consisting of space-separated integers. Your task is to determine the product of the two largest integers on each line and return the results as a string, formatted as follows: ``` 3 5 1 2 10 15 20 30 4 3 8 7 ``` For the above input, the output should be: ``` 15 600 56 ``` # Constraints - Each line will contain at least two integers. - The integers on a line may not be sorted. # Requirements - Implement a function that can parse the input string. - For each line, determine the product of the two largest integers. - Return the result as a string with each product on a new line.","solution":"def product_of_two_largest(input_string): Returns a string with the product of the two largest integers on each line of the input string. Each product is on a new line. :param input_string: str :return: str lines = input_string.strip().split(\'n\') results = [] for line in lines: numbers = list(map(int, line.split())) numbers.sort(reverse=True) product = numbers[0] * numbers[1] results.append(str(product)) return \'n\'.join(results)"},{"question":"A company has a data security system which requires a periodic change in passwords for all their employees. The IT team is considering a new scheme where the new password must be generated based on the employee\'s current password using the following rules: 1. The new password should have the same length as the current password. 2. Each character of the new password is generated by shifting the corresponding character of the current password by a fixed number of positions forward in the ASCII table. 3. If the shifting moves past the alphabet \'z\', it wraps around to the start of the alphabet \'a\'. For example, if the shift is 1 and the current password is \\"xyz\\", the new password would be \\"yza\\". Write a function that generates the new password based on the given current password and the fixed number of positions to shift. -----Input----- The input consists of two lines: 1. A string representing the current password. The string is guaranteed to only contain lowercase alphabetic characters and have length in the range [1, 100]. 2. An integer representing the number of positions to shift (0 ≤ shift ≤ 26). -----Output----- Print a single string representing the new password. -----Examples----- Input password 1 Output qbttxpse Input abc 2 Output cde Input xyz 3 Output abc","solution":"def generate_new_password(current_password, shift): Generate a new password by shifting each character of the current password by a fixed number of positions forward in the ASCII table. Args: current_password (str): The current password string containing only lowercase alphabetic characters. shift (int): The number of positions to shift each character. Returns: str: The new password. new_password = [] for char in current_password: new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) new_password.append(new_char) return \'\'.join(new_password)"},{"question":"```python def filter_odd_even(numbers, option): \'\'\' This function takes in a list of integers `numbers` and a string `option`. If `option` is \'odd\', return a list of all odd integers from the `numbers` list. If `option` is \'even\', return a list of all even integers from the `numbers` list. If `option` is neither \'odd\' nor \'even\', return an empty list. Args: numbers: List of integers option: A string, either \'odd\' or \'even\' Returns: List of integers filtered based on the `option` parameter. \'\'\' # Your code here # Example usage: print(filter_odd_even([1, 2, 3, 4, 5, 6], \'odd\')) # should return [1, 3, 5] print(filter_odd_even([1, 2, 3, 4, 5, 6], \'even\')) # should return [2, 4, 6] print(filter_odd_even([7, 8, 9, 10, 11, 12], \'odd\')) # should return [7, 9, 11] print(filter_odd_even([7, 8, 9, 10, 11, 12], \'even\')) # should return [8, 10, 12] print(filter_odd_even([7, 8, 9, 10, 11, 12], \'prime\')) # should return [] ```","solution":"def filter_odd_even(numbers, option): This function takes in a list of integers `numbers` and a string `option`. If `option` is \'odd\', return a list of all odd integers from the `numbers` list. If `option` is \'even\', return a list of all even integers from the `numbers` list. If `option` is neither \'odd\' nor \'even\', return an empty list. Args: numbers: List of integers option: A string, either \'odd\' or \'even\' Returns: List of integers filtered based on the `option` parameter. if option == \'odd\': return [num for num in numbers if num % 2 != 0] elif option == \'even\': return [num for num in numbers if num % 2 == 0] else: return []"},{"question":"You are given a string S consisting of lowercase alphabets. Your task is to answer Q queries. Each query gives you a range [L, R] and you are required to determine the most frequent character in the substring S[L:R] (both inclusive). If there are multiple characters with the same frequency, return the lexicographically smallest one. Input: The first line contains two space-separated integers N and Q denoting the length of the string and the number of queries respectively. 1 ≤ N, Q ≤ 100000. The second line contains the string S of length N. Each of the next Q lines contains two space-separated integers L and R (0 ≤ L ≤ R < N). Output: For each query, print the most frequent character in the substring S[L:R]. If there is a tie, print the lexicographically smallest character. SAMPLE INPUT 7 3 abacaba 1 3 0 6 2 5 SAMPLE OUTPUT a a a","solution":"def most_frequent_character(S, queries): Returns a list of most frequent characters for each query range [L, R]. If there is a tie, returns the lexicographically smallest character. S: str, the given string queries: list of tuples, each tuple containing two integers L and R results = [] for L, R in queries: substring = S[L:R+1] freq_map = {} for char in substring: if char in freq_map: freq_map[char] += 1 else: freq_map[char] = 1 max_freq = max(freq_map.values()) most_freq_chars = [char for char, freq in freq_map.items() if freq == max_freq] results.append(min(most_freq_chars)) return results"},{"question":"Given an array of N integers, your task is to check if it is possible to rearrange the elements such that the cumulative sum of the array never exceeds a given integer X at any point during the summation process. Example 1: Input: N = 5 X = 10 A[] = {3, 1, 4, 2, 5} Output: YES Explanation: We can rearrange the array as {3, 1, 2, 4, 5} such that the cumulative sums are: 3, 4, 6, 10, 15. It exceeds X for the first time at the last element, so it is possible to rearrange. Example 2: Input: N = 4 X = 5 A[] = {3, 6, 2, 1} Output: NO Explanation: Regardless of how we arrange the array, the sum will exceed X after the second element. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange() which takes the number of elements N, integer X, and array A[] as input parameters and returns true if it is possible to rearrange the elements such that the cumulative sum never exceeds X at any point, else returns false. Expected Time Complexity: O(N * Log(N)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ X ≤ 10^9 1 ≤ A[i] ≤ 10^9","solution":"def canRearrange(N, X, A): Determines if it\'s possible to rearrange the elements of array A such that the cumulative sum never exceeds X at any point during the summation process. Args: N : int : Number of elements in the array X : int : Threshold value for cumulative sum A : list of int : List of N integers Returns: bool : True if possible to rearrange as required, False otherwise A.sort() cum_sum = 0 for num in A: cum_sum += num if cum_sum > X: return False return True"},{"question":"You are given a list of unique integers and a target integer. Write a function that determines whether there is a pair of integers in the list whose sum equals the target. Return True if such a pair exists, otherwise return False. Example 1: Input: [1, 2, 3, 9], 8 Output: False Explanation: There are no two numbers in the list that add up to 8. Example 2: Input: [1, 2, 4, 4], 8 Output: True Explanation: The numbers 4 and 4 add up to 8. Note: - The list of integers is non-empty and can contain up to 10^4 elements. - Each integer in the list is between -10^5 and 10^5. - The target integer is between -10^5 and 10^5.","solution":"def has_pair_with_sum(integers, target): Determines whether there is a pair of integers in the list whose sum equals the target. Parameters: integers (list): List of unique integers. target (int): Target integer. Returns: bool: True if such a pair exists, otherwise False. seen = set() for num in integers: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes in a list of integers and returns the product of all the numbers in the list, except for the current index. The result should be a list of the same length, where each element is the product of all the elements of the input list except for the one at the current index. The function should handle an edge case where the list contains only one element by returning an empty list.","solution":"def product_of_all_except_current(nums): Returns a list where each element is the product of all integers in the input list except for the one at the current index. if len(nums) <= 1: return [] length = len(nums) left_products = [1] * length right_products = [1] * length # Create left products excluding current index for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Create right products excluding current index for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Create result by multiplying left and right products result = [left_products[i] * right_products[i] for i in range(length)] return result"},{"question":"Given a list of integers representing the heights of buildings in a city skyline, determine the maximum area of a rectangle in the skyline that can be formed using these buildings. The width of each building is 1 unit. Example: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The largest rectangle has an area of 10 units (formed by buildings with heights 5 and 6 with a width of 2). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxRectangleArea()` which takes a list of integers `heights` and returns an integer representing the maximum area of a rectangle that can be formed in the skyline. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= len(heights) <= 10^5 0 <= heights[i] <= 10^4","solution":"def maxRectangleArea(heights): Returns the maximum area of a rectangle formed by the buildings in the skyline. :param heights: List[int] - List of integers representing the heights of buildings :return: int - Maximum rectangular area stack = [] max_area = 0 heights.append(0) # Append a zero to handle the end of the list index = 0 while index < len(heights): # Push the current building index into the stack if stack is empty or # current building is taller than the building represented by the index on the top of stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top height from the stack and calculate the area height = heights[stack.pop()] width = index if not stack else index - stack[-1] - 1 max_area = max(max_area, height * width) heights.pop() # Restore the original list return max_area"},{"question":"Given an array of integers, you are required to perform a series of operations to transform it into a non-decreasing array. In each operation, you can pick any subarray of the array and multiply each element in that subarray by -1. The goal is to determine the minimum number of such operations required to make the array non-decreasing. A non-decreasing array is an array where each element is not less than the previous one. -----Input----- The first line contains an integer n (1 le n le 10^5), the size of the array. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9), the elements of the array. -----Output----- Output a single integer — the minimum number of operations required to make the array non-decreasing. -----Examples----- Input 5 3 -1 4 2 -5 Output 2 Input 4 1 2 3 4 Output 0 -----Note----- In the first example, you can perform the following operations: 1. Choose the subarray from the 2nd to the 3rd element: [3, -1, 4, 2, -5] -> [3, 1, -4, 2, -5] 2. Choose the subarray from the 4th to the 4th element: [3, 1, -4, 2, -5] -> [3, 1, -4, -2, -5] Now the array becomes [3, 1, -4, -2, -5], which is non-decreasing with 2 operations change. In the second example, the array is already non-decreasing, so no operations are required.","solution":"def min_operations_to_non_decreasing(arr): Given an array of integers, this function determines the minimum number of operations required to make the array non-decreasing. In each operation, you can pick any subarray of the array and multiply each element in that subarray by -1. # Length of the array n = len(arr) # Edge case, if array length is 1, it\'s already non-decreasing if n == 1: return 0 operations = 0 i = 0 while i < n - 1: # If the current element is greater than the next one if arr[i] > arr[i + 1]: operations += 1 # Move the index to the point where the next sequence is becoming non-decreasing while i < n - 1 and arr[i] > arr[i + 1]: i += 1 i += 1 return operations"},{"question":"In a distant galaxy, there exists a planet where all computations are done using a unique prime-based numeral system. The inhabitants of this planet are interested in finding sequences of numbers that have a specific property related to their prime numeral system. Given a positive integer n and two integers p and q (where p and q are prime numbers and 1 ≤ n ≤ 105, 1 ≤ p, q ≤ 106), your task is to find the length of the longest contiguous subarray of integers between 1 and n (inclusive) such that every element of the subarray can be expressed as a sum of multiples of p and q. A number can be expressed as a sum of multiples of p and q if there exist non-negative integers x and y such that the number is equal to px + qy. Input The first line contains a single integer n (1 ≤ n ≤ 105). The second line contains two integers p and q (1 ≤ p, q ≤ 106, and both are prime numbers). Output Output a single integer — the length of the longest contiguous subarray where every element can be expressed as a sum of multiples of p and q. Examples Input 10 2 3 Output 10 Input 15 3 5 Output 10 Note In the first example, since p = 2 and q = 3, all integers from 1 to 10 can be expressed as sums of multiples of 2 and 3: 2(0) + 3(1)=3, 2(1) + 3(0)=2, ..., 2(3) + 3(2)=12 (which is out of bound considering n=10). In the second example, since p = 3 and q = 5, the numbers 1 to 10 can be expressed as sums of multiples of 3 and 5. For instance, 3*(1) + 5*(1) = 8, 3*(2) + 5*(0) = 6, etc. However, extending beyond 10 might not always be possible within the constraints. Thus, the longest contiguous subarray in this case is also from 1 to 10.","solution":"from math import gcd def find_multiples_length(n, p, q): Returns the length of the longest contiguous subarray of integers between 1 and n (inclusive) such that every element of the subarray can be expressed as a sum of multiples of p and q. def can_be_expressed(k, p, q): # Using gcd to determine expressibility via the theorem of linear combinations return gcd(p, q) == 1 # Checking if p and q are coprime if can_be_expressed(1, p, q): return n else: return 0 # Technically, this branch will never run since p and q are prime and hence coprime"},{"question":"# Task You are given an array of integers and a target integer `k`. Your task is to find all unique quadruplets (four distinct elements) in the array that sum up to `k`. Write a function `find_quadruplets(arr, k)` that takes in an array of integers `arr` and an integer `k`, and returns a list of lists containing all the unique quadruplets that sum up to `k`. Each quadruplet should be sorted in non-decreasing order. The list of quadruplets returned should also be sorted in non-decreasing order based on the first, second, third, and fourth elements, respectively. # Input / Output - `[input]` integer array `arr` The input array of integers. Constraints: * 0 ≤ len(arr) ≤ 100 * -10^9 ≤ arr[i] ≤ 10^9 - `[input]` integer `k` The target sum for the quadruplets. Constraints: * -4 * 10^9 ≤ k ≤ 4 * 10^9 - `[output]` list of lists A list containing all the sorted quadruplets that sum up to `k`. # Example ```python find_quadruplets([1, 0, -1, 0, -2, 2], 0) # returns [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] find_quadruplets([2, 2, 2, 2, 2], 8) # returns [[2, 2, 2, 2]] ```","solution":"def find_quadruplets(arr, k): Returns all unique quadruplets in the array that sum up to k. arr.sort() quadruplets = [] n = len(arr) for i in range(n - 3): if i > 0 and arr[i] == arr[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and arr[j] == arr[j - 1]: continue left, right = j + 1, n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == k: quadruplets.append([arr[i], arr[j], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < k: left += 1 else: right -= 1 return quadruplets"},{"question":"Snuke loves special strings. A string consists of lowercase English letters and is called \\"special\\" if and only if for any two consecutive characters in the string, their ASCII values differ by 1. For example, the string \\"abc\\" is special, but the string \\"abd\\" is not. For Snuke\'s birthday, you decided to create a function to check if a given string is special. If it is, the function should output \\"YES\\", otherwise \\"NO\\". Constraints * The length of the string will be between 1 and 100 inclusive. Input The input consists of a single line, containing a string s (1 ≤ |s| ≤ 100) where |s| is the length of the string. Output Print \\"YES\\" if the string is special, otherwise print \\"NO\\". Examples Input abc Output YES Input abd Output NO Input z Output YES","solution":"def is_special_string(s): Returns \\"YES\\" if the string is special, otherwise \\"NO\\". for i in range(1, len(s)): if abs(ord(s[i]) - ord(s[i - 1])) != 1: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, write a function that reorders the list so that all negative integers appear before all positive integers while keeping the relative order of negative and positive integers the same. # Task Overview Write a function that takes a list of integers and reorders it such that all negative integers are at the beginning and all positive integers are at the end, preserving the relative order of the integers within each group (negative and positive). # Usage Examples ```python def reorder_list(nums): # Implementation here # Example 1 nums = [3, -1, 2, -4, -6, 5, -3, 2] # After calling reorder_list(nums), it should become [-1, -4, -6, -3, 3, 2, 5, 2] # Example 2 nums = [-5, -2, 0, 2, 1, -3] # After calling reorder_list(nums), it should become [-5, -2, -3, 0, 2, 1] ``` # Constraints - The input list will contain at least one integer. - Elements in the list can be both positive, negative, or zero. - The reorder should preserve the relative order of the negative and positive integers.","solution":"def reorder_list(nums): Reorders the list so that all negative integers appear before all positive integers while keeping the relative order of negative and positive integers the same. Parameters: nums (list): List of integers Returns: list: Reordered list with all negative integers followed by all positive integers negative = [x for x in nums if x < 0] non_negative = [x for x in nums if x >= 0] return negative + non_negative"},{"question":"Ikta is on a narrow bridge fighting off a swarm of enemies coming from both directions. The bridge is represented by a line of n points, from 0 to n-1. Ikta can be standing at any integer point along the bridge, ready to fend off enemies approaching from both sides. Given an initial position p, Ikta is able to move left or right to any adjacent point in one unit of time. However, enemies are approaching from both directions at a speed of 1 point per unit time; enemies will arrive on the points 0 and n-1 respectively at the start time 0 and advance inward. Ikta needs to defeat all enemies as they approach. Each time an enemy reaches Ikta’s position, she defeats it instantly, and it does not affect her ability to continue moving. Your task is to write a program to determine if Ikta can successfully defeat all the enemies, given her initial position and the length of the bridge. Input The input is given in the following format: > n p * n: An integer representing the number of points on the bridge. * p: An integer representing Ikta\'s initial position on the bridge. Constraints * 1 ≤ n ≤ 10^9 * 0 ≤ p < n Output Output \\"YES\\" if Ikta can defeat all enemies, otherwise output \\"NO\\". Examples Input 5 2 Output YES Input 10 0 Output NO Input 7 3 Output YES","solution":"def can_defeat_all_enemies(n, p): if n == 1: return \\"YES\\" return \\"YES\\" if 0 < p < n - 1 else \\"NO\\""},{"question":"Create a program that takes a string `s` and an integer `k` as input, and finds the number of distinct substrings of length `k` in the string `s`. Input: The first line contains the string `s`, and the second line contains the integer `k`. Output: A single line containing the number of distinct substrings of length `k` in the string `s`. If `k` is greater than the length of the string `s`, print `0`. Constraints: 1 ≤ |s| ≤ 10^5 1 ≤ k ≤ 10^5 SAMPLE INPUT abcabc 3 SAMPLE OUTPUT 3 Explanation The substrings of length 3 are \\"abc\\", \\"bca\\", \\"cab\\", and \\"abc\\". \\"abc\\" appears twice but is considered as one distinct substring, so there are 3 distinct substrings in total: \\"abc\\", \\"bca\\", \\"cab\\".","solution":"def count_distinct_substrings(s, k): Returns the number of distinct substrings of length k in the string s. if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substr = s[i:i+k] substrings.add(substr) return len(substrings)"},{"question":"Alice and Bob are playing a game with numbers. The rules are as follows: Alice picks a number N, and Bob has to determine if N can be expressed as the sum of consecutive natural numbers. For example, the number 15 can be expressed as 1 + 2 + 3 + 4 + 5 = 15 as well as 4 + 5 + 6 = 15, but the number 16 cannot be expressed as the sum of consecutive natural numbers. Bob wants you to write a program that will help him determine if a given N picked by Alice can be expressed as the sum of consecutive natural numbers. -----Input----- The first line of the input contains a single integer N (1 le N le 10^9). -----Output----- Print \\"YES\\" if the number can be expressed as the sum of consecutive natural numbers, otherwise print \\"NO\\". -----Examples----- Input 15 Output YES Input 16 Output NO Explanation A number can be expressed as the sum of consecutive natural numbers if and only if it can be written in the form k(k+1)/2 for some integer k ge 1. For N = 15, it can be represented as 4 + 5 + 6 = 15 or 1 + 2 + 3 + 4 + 5 = 15, hence the output is \\"YES\\". For N = 16, it cannot be expressed using any sequence of consecutive natural numbers, hence the output is \\"NO\\".","solution":"def can_be_expressed_as_sum_of_consecutive_numbers(N): Function to determine if a given number N can be expressed as the sum of consecutive natural numbers. if N < 3: return \\"NO\\" count = 1 while (N > 0): N -= count count += 1 if N % count == 0 and N > 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given two strings, `s` and `t`, each consisting of lowercase letters (\'a\' to \'z\') and having the same length. You can perform the following operations any number of times: 1. Swap any two characters in string `s`. 2. Swap any two characters in string `t`. Your objective is to make the two strings, `s` and `t`, equal by performing the minimum number of swap operations. Constraints * 1 ≤ |s| = |t| ≤ 10^6 * s and t consist of lowercase letters only. Input Input is given from Standard Input in the following format: ``` s t ``` Output Output the minimum number of swap operations required to make the two strings equal. Examples Input ``` abcd cdab ``` Output ``` 2 ``` Input ``` aabb bbaa ``` Output ``` 2 ```","solution":"from collections import Counter def minimum_swaps(s, t): Returns the minimum number of swaps required to make the strings s and t equal. # Check if the character counts are the same for both strings if Counter(s) != Counter(t): return -1 # If they don\'t have the same characters, it\'s impossible to make them equal # Count the mismatched characters mismatch_count = sum(1 for i in range(len(s)) if s[i] != t[i]) # Each swap can correct two mismatched positions return mismatch_count // 2"},{"question":"Tia\'s Cafe is expanding and she\'s redesigning the menu. To provide a better experience for customers, she wants a flexible menu system which allows her to dynamically update the list of dishes and their prices. Tia has hired you as a software developer to create this system. The menu can be represented as a dictionary where the keys are the names of the dishes and the values are the prices of the corresponding dishes. You need to implement a system that can process a series of operations to manage this menu. Initially, the menu is empty. You need to perform Q operations which can be one of the following types: 1. Add or update a dish to the menu with a given price. 2. Remove a dish from the menu. 3. Find the price of a specified dish. 4. Calculate the average price of all dishes currently on the menu. Input format The first line contains an integer Q, the number of operations to be performed. The next Q lines describe the operations. Each operation is described in one line. For an operation of the first type, the line contains an integer 1 followed by a string and an integer, denoting the dish name and its price. For an operation of the second type, the line contains an integer 2 followed by a string, denoting the dish name to be removed. For an operation of the third type, the line contains an integer 3 followed by a string, denoting the dish name to find the price of. For an operation of the fourth type, the line contains a single integer 4. Output format For each operation of the third type, output a single line containing the price of the specified dish, or \\"Not Found\\" if the dish does not exist. For each operation of the fourth type, output a single line containing the average price of all dishes currently on the menu to two decimal places. If the menu is empty, output \\"No Dishes\\". Constraints 1 ≤ Q ≤ 10^5 1 ≤ length of dish name ≤ 50 1 ≤ price of dish ≤ 10^6 SAMPLE INPUT 7 1 pizza 500 1 burger 250 1 pasta 300 3 pizza 4 2 burger 3 burger 4 SAMPLE OUTPUT 500 350.00 Not Found 400.00","solution":"def process_operations(operations): menu = {} results = [] for operation in operations: parts = operation.split() op_type = int(parts[0]) if op_type == 1: dish_name = parts[1] price = int(parts[2]) menu[dish_name] = price elif op_type == 2: dish_name = parts[1] if dish_name in menu: del menu[dish_name] elif op_type == 3: dish_name = parts[1] if dish_name in menu: results.append(str(menu[dish_name])) else: results.append(\\"Not Found\\") elif op_type == 4: if menu: average_price = sum(menu.values()) / len(menu) results.append(f\\"{average_price:.2f}\\") else: results.append(\\"No Dishes\\") return results"},{"question":"Problem Statement: A group of archaeologists discovered an ancient series of tablets, each made up of several stones arranged in a specific pattern. Each stone displays a non-negative integer. The archaeologists believe that a hidden message can be deciphered by finding the unique \\"energy values\\" for these tablets. The idea is to reduce each tablet to a single number, known as its energy value. The process of simplification is as follows: each time, select any two adjacent stones (horizontally or vertically) and combine them according to a special operation provided. The special operation specifies the next stone\'s value that resulting from combining these two. You are given a square matrix (n × n) representing the tablet and the rules for combining two adjacent stones. For simplicity, assume the matrix is small enough to handle in computations. The task is to find the energy value of the tablet after combining all stones down to a single stone. Constraints: * 2 <= n <= 10 * 0 <= stones[i][j] <= 100 Input: Each data set is input in the following format: n row1 row2 ... rown operation n is an integer representing the size of the matrix (n × n). Each of the next n lines contains n non-negative integers representing the values of the stones. The last line contains a string representing the special operation used to combine two stones, which could be as follows: - \\"+\\" for summation of the two values. - \\"*\\" for multiplication of the two values. - \\"max\\" for taking the maximum value of the two values. - \\"min\\" for taking the minimum value of the two values. Output: Output a single integer representing the energy value of the tablet after all combinations. Example Input: 3 4 2 9 1 6 3 5 0 7 + Example Output: 46 Explanation: By applying the \\"+\\" operation, the matrix simplifies through the following steps (one possible combination order): - Combine (4 + 2) to get [6, 9; 1, 6; 5, 0, 7] - Combine (6 + 9) to get [15; 1, 6; 5, 0, 7] - And so on until a single value is left. The final energy value here is 46.","solution":"def tablet_energy_value(n, matrix, operation): from functools import reduce def apply_operation(x, y, op): if op == \\"+\\": return x + y elif op == \\"*\\": return x * y elif op == \\"max\\": return max(x, y) elif op == \\"min\\": return min(x, y) # Flatten the matrix into a list of values values = [matrix[i][j] for i in range(n) for j in range(n)] # Reduce all values into a single value by applying the operation energy_value = reduce(lambda x, y: apply_operation(x, y, operation), values) return energy_value"},{"question":"You are given a grid with `R` rows and `C` columns. You start at the top-left corner of the grid (1,1) and want to reach the bottom-right corner (R,C). You can only move right or down from each cell. However, there are some cells in the grid that are blocked and cannot be traversed. Find the number of distinct paths to reach the bottom-right corner of the grid from the top-left corner. Example 1: Input: R = 3, C = 3, blockedCells = [(2, 2)] Output: 2 Explanation: Two ways to reach the bottom-right corner while avoiding the blocked cell at (2, 2) are: 1. Right, Down, Right, Down 2. Down, Right, Down, Right Example 2: Input: R = 3, C = 3, blockedCells = [(1, 2), (2, 1)] Output: 0 Explanation: There is no way to reach the bottom-right corner as both (1,2) and (2,1) are blocked. Your Task: You don\'t need to read or print anything. Your task is to complete the function `uniquePaths` which takes integers `R`, `C` and a list of tuples `blockedCells` as input parameter and returns the total number of distinct paths modulo `10^9 + 7` from the top-left corner to the bottom-right corner of the grid. Expected Time Complexity: O(R * C) Expected Space Complexity: O(R * C) Constraints: 1 ≤ R, C ≤ 100 0 ≤ len(blockedCells) ≤ R * C","solution":"def uniquePaths(R, C, blockedCells): MOD = 10**9 + 7 # Create a dp table dp = [[0] * C for _ in range(R)] # Mark blocked cells in the dp table blocked = set(blockedCells) for r, c in blockedCells: dp[r - 1][c - 1] = 0 # Initialize the starting position if not blocked if (1, 1) not in blocked: dp[0][0] = 1 # Fill the dp table for i in range(R): for j in range(C): if (i + 1, j + 1) in blocked: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[R - 1][C - 1]"},{"question":"Your task is to evaluate a series of arithmetic operations applied to integers within an array. Each operation should be executed in sequence, starting from the first element and considering the next one, based on the specified arithmetic operator: addition, subtraction, multiplication, or division. Operations should handle integer division, which drops the decimal part of the result. First Example: Input: [10, 3, 2], operator: \'ADD\' Steps: 10 ADD 3 -> 13, 13 ADD 2 -> 15 Output: 15 Second Example: Input: [10, 3, 2], operator: \'SUBTRACT\' Steps: 10 SUBTRACT 3 -> 7, 7 SUBTRACT 2 -> 5 Output: 5 Third Example: Input: [10, 3, 2], operator: \'MULTIPLY\' Steps: 10 MULTIPLY 3 -> 30, 30 MULTIPLY 2 -> 60 Output: 60 Fourth Example: Input: [10, 3, 2], operator: \'DIVIDE\' Steps: 10 DIVIDE 3 -> 3, 3 DIVIDE 2 -> 1 (integer division) Output: 1 ___ Input: integer array, string with operator\'s name: \'ADD\', \'SUBTRACT\', \'MULTIPLY\', \'DIVIDE\'. Output: calculated integer","solution":"def evaluate_operations(numbers, operator): Evaluate a series of arithmetic operations applied to integers within an array. Args: numbers : list of int : the list of integers operator : str : the operator, one of \'ADD\', \'SUBTRACT\', \'MULTIPLY\', \'DIVIDE\' Returns: int : the result of applying the operator in sequence if not numbers: raise ValueError(\\"The numbers list should not be empty\\") result = numbers[0] for num in numbers[1:]: if operator == \'ADD\': result += num elif operator == \'SUBTRACT\': result -= num elif operator == \'MULTIPLY\': result *= num elif operator == \'DIVIDE\': if num == 0: raise ValueError(\\"Division by zero is not allowed\\") result //= num else: raise ValueError(\\"Invalid operator\\") return result"},{"question":"In a coding competition, participants are required to solve problems within a fixed timeframe. Each problem has a different score and time required to solve it. You are given a list of problems, where each problem has a score and a time required to solve it. Your task is to determine the maximum score that can be achieved by solving problems within a given total time limit. The participant can solve each problem at most once, and some problems may take the entire time to solve, while others may leave room for solving additional problems. Example 1: Input: problems = [(10, 2), (20, 2), (30, 3), (40, 4)] limit = 5 Output: 50 Explanation: The maximum score can be achieved by solving problems (20, 2) and (30, 3), resulting in a total score of 50. Example 2: Input: problems = [(15, 5), (10, 1), (20, 2)] limit = 3 Output: 30 Explanation: The maximum score can be achieved by solving problems (10, 1) and (20, 2), resulting in a total score of 30. Your Task: You don\'t need to read input or print anything. Complete the function maxScore() which takes the list of problems and the time limit as input parameters and returns the maximum score. Expected Time Complexity: O(T * P) Expected Auxiliary Space: O(T) Constraints: 1 ≤ P ≤ 100 1 ≤ T ≤ 100 1 ≤ score, time required ≤ 100","solution":"def maxScore(problems, limit): Determine the maximum score that can be achieved by solving problems within a given time limit. :param problems: List of tuples where each tuple contains (score, time required). :param limit: Maximum total time available. :return: Maximum score achievable within the given time limit. n = len(problems) dp = [0] * (limit + 1) for score, time in problems: for t in range(limit, time - 1, -1): dp[t] = max(dp[t], dp[t - time] + score) return dp[limit]"},{"question":"Alice likes playing with cards that have positive integers on them. She has a deck of `n` cards. Alice wants to arrange the cards in non-decreasing order, but she can only perform the following operation repeatedly: Choose any subsequence of cards and reverse it. Alice needs your help to determine the minimum number of operations required to sort the cards in non-decreasing order. Input The input consists of multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 100). The description of the test cases follows. Each test case starts with an integer `n` (1 ≤ n ≤ 100) — the number of cards. The next line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 1000), the values on the cards. Output For each test case, print a single integer — the minimum number of operations required to make the sequence sorted in non-decreasing order. Example Input 3 4 4 3 2 1 5 3 1 4 2 5 3 1 2 3 Output 1 2 0","solution":"def min_operations_to_sort_cards(test_cases): results = [] for cards in test_cases: if cards == sorted(cards): results.append(0) elif cards == sorted(cards, reverse=True): results.append(1) else: results.append(2) return results def parse_input_and_solve(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) cards = list(map(int, lines[index + 1].split())) test_cases.append(cards) index += 2 results = min_operations_to_sort_cards(test_cases) return \'n\'.join(map(str, results))"},{"question":"We have a list of intervals where each interval represents an event with a start time and an end time, both given as integers. These intervals are not sorted and can overlap with one another. Write a function to merge all overlapping intervals and return a list of non-overlapping intervals that cover all the intervals in the input. Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping since they touch at the endpoint. Example 3: Input: intervals = [[1,4],[2,3]] Output: [[1,4]] Explanation: Intervals [1,4] and [2,3] overlap, merge them into [1,4]. Constraints: - intervals[i][0] <= intervals[i][1] - intervals is a list with length in the range [0, 10^4]. - intervals[i] is a list with length 2.","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns a list of non-overlapping intervals. if not intervals: return [] # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged is empty or there is no overlap with the last interval in merged if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # Merge the current interval with the last one in merged merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Given a string composed of lowercase alphabets, you need to remove duplicate letters so that every letter appears once and only once. You must make sure the resultant string is the smallest in lexicographical order among all possible results. Example 1: Input: \\"bcabc\\" Output: \\"abc\\" Example 2: Input: \\"cbacdcbc\\" Output: \\"acdb\\" Constraints: The length of the input string is no more than 10,000.","solution":"def remove_duplicate_letters(s: str) -> str: Remove duplicate letters so that every letter appears once and only once. Ensure the resultant string is the smallest in lexicographical order. stack = [] seen = set() last_occurrence = {c: i for i, c in enumerate(s)} for i, c in enumerate(s): if c not in seen: while stack and c < stack[-1] and i < last_occurrence[stack[-1]]: seen.remove(stack.pop()) seen.add(c) stack.append(c) return \'\'.join(stack)"},{"question":"Problem You are given an N times M grid of cells, each of which is either walkable or has an obstacle. There is an initial position on the grid and a target position to reach. You may move one cell at a time, and you can move up, down, left, or right. However, you can only move to a walkable cell and cannot move onto or through obstacles. Write a program to find the minimum number of moves required to reach the target position from the initial position. If it is impossible to reach the target position, the program should return -1. # Constraints The input satisfies the following conditions: * 1 leq N, M leq 100 * Each cell is either walkable \'.\' or an obstacle \'#\' * The initial and target positions are given as (x, y) pairs where 0 leq x < N and 0 leq y < M * The initial and target positions are always walkable cells # Input The input is given in the following format: N M grid_1 grid_2 ... grid_N start_x start_y end_x end_y Each line grid_i represents the i-th row of the grid. # Output The output should be the minimum number of moves required to reach the target position from the initial position, or -1 if it is impossible to reach the target. # Examples **Example 1:** Input: ``` 5 5 ..... ..#.. ..... .#... ..... 0 0 4 4 ``` Output: ``` 8 ``` **Example 2:** Input: ``` 3 3 .#. .#. .#. 0 0 2 2 ``` Output: ``` -1 ``` # Explanation: In Example 1, the shortest path involves 8 moves: ``` (0,0) -> (1,0) -> (2,0) -> (3,0) -> (4,0) -> (4,1) -> (4,2) -> (4,3) -> (4,4) ``` In Example 2, it is impossible to reach (2,2) from (0,0) because there\'s an obstacle preventing any path. The output is -1.","solution":"from collections import deque def min_moves_to_reach_target(N, M, grid, start_x, start_y, end_x, end_y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' queue = deque([(start_x, start_y, 0)]) visited = set() visited.add((start_x, start_y)) while queue: x, y, dist = queue.popleft() if (x, y) == (end_x, end_y): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a string `s` representing a sequence of moves in a 2D grid. The moves can be \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). A move \'U\' increases the y-coordinate by 1, \'D\' decreases the y-coordinate by 1, \'L\' decreases the x-coordinate by 1, and \'R\' increases the x-coordinate by 1. A sequence of moves is considered to be circular if it returns to the starting point after all moves are applied. Write a function `is_circular(s)` that returns `True` if the sequence of moves is circular, or `False` otherwise. The function should handle an empty string and characters outside the set {\'U\', \'D\', \'L\', \'R\'} by returning `False`. Examples: ``` >>> is_circular(\\"UDLR\\") True # (0, 0) -> (0, 1) -> (0, 0) -> (-1, 0) -> (0, 0) >>> is_circular(\\"UUDDLLRR\\") True # (0, 0) -> (0, 1) -> (0, 2) -> (0, 1) -> (0, 0) -> (-1, 0) -> (-1, 1) -> (0, 0) >>> is_circular(\\"UDL\\") False # (0, 0) -> (0, 1) -> (0, 0) -> (-1, 0) ```","solution":"def is_circular(s): Returns True if the sequence of moves is circular, otherwise returns False. if not s: return False if any(c not in \'UDLR\' for c in s): return False x, y = 0, 0 for move in s: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Your task is to write a program that determines whether a set of computer-controlled lights can be synchronized to create a perfect \\"light show\\". Each light has its own sequence of on and off intervals, and it can only switch states instantaneously—an instantaneous switch does not count as a failure in synchronization. The light can start in either the on or off state. Given the number of lights and their respective on/off schedules, determine if it is possible to synchronize the lights perfectly according to the given schedules. By perfectly, we mean that each light should be exactly on or off as specified during the given time intervals. -----Input----- The first line contains an integer l, 1 leq l leq 10, denoting the number of lights used. Then follow l blocks, each with the format: - A single line with one integer m, 1leq m leq 100, the number of on/off intervals for the light. - m lines, where the j-th line has three integers t_{j,1}, t_{j,2}, s_j, where 0 leq t_{j,1} < t_{j,2} leq 1,000,000 and s_j is either 1 or 0, indicating that the light should be on (s_j=1) or off (s_j=0) from time t_{j,1} to t_{j,2}. These time intervals are given in strictly ascending order, i.e. t_{j,1} < t_{j,2} for all 1 leq j < m. -----Output----- If it is possible to synchronize all the l lights exactly as intended, output “possible”. Otherwise, output “impossible”. -----Examples----- Sample Input: 2 3 0 5 1 5 10 0 12 20 1 2 0 3 0 4 6 1 Sample Output: possible Sample Input: 1 2 0 3 1 2 5 0 Sample Output: impossible","solution":"def can_synchronize(l, schedules): Determine whether the set of lights can be synchronized to follow given on/off schedules. :param l: Number of lights :param schedules: List of schedules for each light, where each schedule is a list of (start_time, end_time, state) tuples :return: \\"possible\\" if all lights can be synchronized, otherwise \\"impossible\\" events = [] for light_id, schedule in enumerate(schedules): for start, end, state in schedule: events.append((start, light_id, state)) events.append((end, light_id, -1)) # -1 denotes end of the interval events.sort() active_intervals = [-1] * l # currently active interval ends for each light for time, light_id, state in events: if state == -1: # end of an interval active_intervals[light_id] = -1 else: if active_intervals[light_id] != -1: # there is already an active interval return \\"impossible\\" active_intervals[light_id] = state return \\"possible\\""},{"question":"Create a function that takes an integer `n` and returns the nth number in the Fibonacci sequence. However, if the number in the Fibonacci sequence is prime, replace it with -1. The Fibonacci sequence is defined as follows: - The 0th number is 0 - The 1st number is 1 - The nth number is the (n-1)th number plus the (n-2)th number for n > 1 A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. For example: - Input: 7 - Output: -1 (Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, ... where 13 is a prime number) Function signature: ```python def fibonacci_prime_replace(n: int) -> int: # Your code here ```","solution":"def fibonacci_prime_replace(n: int) -> int: Returns the nth number in the Fibonacci sequence, but with prime numbers replaced by -1. def is_prime(num: int) -> bool: if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True if n < 0: return None # Fibonacci sequence is not defined for negative index if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return -1 if is_prime(b) else b"},{"question":"You are given an array of n integers. In one operation, you can choose any two adjacent elements of the array and replace them with their minimum. Your task is to find the minimum possible value of the array after performing this operation n-1 times (until only one element remains). -----Input----- The first line contains an integer n (2 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^6) — elements of the array. -----Output----- Print a single integer — the minimum possible value of the array after performing exactly n-1 operations. -----Examples----- Input 5 10 20 30 40 50 Output 10 Input 4 9 8 7 6 Output 6 -----Note----- In the first example, the array transformations go as follows: [10, 20, 30, 40, 50] -> [10, 20, 30, 40] -> [10, 20, 30] -> [10, 20] -> [10]. Since the smallest element in the original array is 10, all steps will retain it. In the second example, we take the adjacent minimums until only one element is left: [9, 8, 7, 6] -> [8, 7, 6] -> [7, 6] -> [6]. Thus, the minimum possible value in the end is the smallest element in the original array.","solution":"def minimum_possible_value(arr): Returns the minimum possible value of the array after performing the operation n-1 times, where n is the length of the array. return min(arr)"},{"question":"You are participating in a robotics competition and your task is to program a robot to navigate a grid. The grid is represented as an n x m matrix, where some cells are blocked and cannot be accessed by the robot. The robot starts at the top-left corner of the grid (1,1) and needs to reach the bottom-right corner of the grid (n,m). The robot can move either to the right or down, but cannot move diagonally or through blocked cells. Represent the grid as a matrix of integers where a 1 represents a blocked cell and a 0 represents an open cell. Determine if there exists a path for the robot to reach the bottom-right corner from the top-left corner. If a path exists, output the minimum number of moves required to reach the destination. If no path exists, output -1. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The next n lines contain m integers each, representing the grid. Output: If a path exists, print the minimum number of moves required to reach the bottom-right corner from the top-left corner. If no path exists, print -1. Examples: Input: 3 3 0 0 1 1 0 1 1 0 0 Output: 4 Input: 3 3 0 1 1 1 1 0 1 0 0 Output: -1","solution":"from collections import deque def min_moves_to_reach_end(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Initialize directions for right and down movement directions = [(0, 1), (1, 0)] # Initialize the queue for BFS queue = deque([(0, 0, 0)]) # (row, col, moves) visited = set((0, 0)) while queue: x, y, moves = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == n-1 and y == m-1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"Write a program that reads a list of integers and determines if each number is a prime number or not. For each integer, print \\"Prime\\" if the number is a prime number and \\"Not Prime\\" if it is not. -----Input----- The first line contains an integer T, the total number of test cases. The next T lines each contain one integer. -----Output----- For each integer, print \\"Prime\\" if the number is a prime number and \\"Not Prime\\" if it is not, each on a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 10000 -----Example----- Input 4 7 10 17 20 Output Prime Not Prime Prime Not Prime","solution":"def is_prime(n): Determines if the given number n is a prime number. Parameters: n (int): The number to check for primality. Returns: str: \\"Prime\\" if n is a prime number, otherwise \\"Not Prime\\". if n <= 1: return \\"Not Prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not Prime\\" p = 3 while (p * p) <= n: if n % p == 0: return \\"Not Prime\\" p += 2 return \\"Prime\\" def process_numbers(numbers): Processes a list of numbers and determines if each number is prime. Parameters: numbers (list): A list of integers. Returns: list: A list of strings \\"Prime\\" or \\"Not Prime\\" for each integer. return [is_prime(num) for num in numbers]"},{"question":"Anna is planning to create a unique cultural experience by setting up rows of painted tiles in a large exhibition hall. Each row will contain a series of tiles painted with different colors. The exhibition hall is designed such that the rows are lined up horizontally. However, due to a constraint, Anna wants to ensure that no two adjacent rows have any tiles of the same color directly above or below each other. To save time and effort, she has asked your help to determine if her desired setup is possible. Input The input consists of several test cases. Each test case starts with a single integer n (2 ≤ n ≤ 50), representing the number of rows. The next n lines each contain a string of lowercase letters, with each letter representing a color of a tile. Each string is the same length len (1 ≤ len ≤ 50) and represents the tiles in that row from left to right. An input of a single zero indicates the end of the input. Output For each test case, output a single line: \\"YES\\" if it is possible to arrange the tiles such that no two adjacent rows have any tiles of the same color directly above or below each other, otherwise output \\"NO\\". Example Input 3 abc def ghi 2 abcd abcf 0 Output YES NO","solution":"def can_arrange_tiles(tile_rows): Checks if it\'s possible to arrange the tiles such that no two adjacent rows have any tiles of the same color directly above or below each other. Args: tile_rows (List[str]): The rows of tiles, where each row is represented by a string of lowercase letters. Returns: bool: True if it\'s possible to arrange the rows as described, otherwise False. n = len(tile_rows) length = len(tile_rows[0]) for i in range(n - 1): for j in range(length): if tile_rows[i][j] == tile_rows[i + 1][j]: return False return True def process_input(input_data): Processes the input data and prints the output for each test case. Args: input_data (str): The input data as a single string. lines = input_data.strip().split(\\"n\\") index = 0 while index < len(lines): n = int(lines[index]) if n == 0: break tile_rows = [] for i in range(n): tile_rows.append(lines[index + 1 + i]) if can_arrange_tiles(tile_rows): print(\\"YES\\") else: print(\\"NO\\") index += n + 1 # Example usage: input_data = 3 abc def ghi 2 abcd abcf 0 process_input(input_data)"},{"question":"You are given an array a_1, a_2, dots a_n of integers. Determine the length of the longest subarray (contiguous segment) such that all elements of the subarray are distinct. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (0 leq a_i leq 10^9) — the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the length of the longest subarray with distinct elements. -----Examples----- Input 4 5 1 2 3 1 2 6 1 2 3 4 5 6 4 7 3 7 3 3 1 1 1 Output 3 6 2 1 -----Note----- For the first test case, the longest subarray with distinct elements is [1, 2, 3] or [3, 1, 2] which has length 3. For the second test case, the entire array [1, 2, 3, 4, 5, 6] is already distinct, resulting in a subarray length of 6. For the third test case, the longest subarray with distinct elements is [7, 3] or [3, 7] which has length 2. For the fourth test case, each element is the same, so the longest subarray with distinct elements is any single element, resulting in a subarray length of 1.","solution":"def longest_distinct_subarray_length(n, arr): Given the length of the array `n` and the array `arr`, this function returns the length of the longest subarray with distinct elements. max_len = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen: start = max(start, seen[arr[end]] + 1) seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(longest_distinct_subarray_length(n, arr)) return results"},{"question":"Little Ami loves reading books. She recently received a book that has N pages. However, she has a peculiar reading habit - she only reads a certain number of pages per day. She starts by reading one page on the first day, two pages on the second day, three pages on the third day, and so on. She continues reading in this pattern until she finishes the book. Your task is to write a program to determine the number of days it will take for Ami to finish the book given the number of pages, N. Input: First line of input contains an integer t, the number of test cases. Then, t lines follow, each containing a single integer N, the number of pages in the book. Output: For each test case, print the number of days it will take Ami to finish reading the book. Constraints: 0 ≤ t ≤ 10000 1 ≤ N ≤ 10^9 SAMPLE INPUT 3 10 15 21 SAMPLE OUTPUT 4 5 6","solution":"def days_to_finish_book(n): This function returns the number of days required for Ami to finish a book with n pages. day = 0 total_pages_read = 0 while total_pages_read < n: day += 1 total_pages_read += day return day def process_test_cases(test_cases): results = [] for n in test_cases: results.append(days_to_finish_book(n)) return results"},{"question":"Maya is learning about prime numbers and wants to write a program to find all prime numbers within a given range. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Can you help Maya by writing a function that generates all prime numbers between two given integers, inclusive? -----Input----- The input consists of two integers, `A` and `B` (1 ≤ A ≤ B ≤ 10^6), indicating the range within which the prime numbers should be found. -----Output----- Print all the prime numbers between `A` and `B`, inclusive, each on a new line. If there are no prime numbers in the given range, print \\"No primes\\". -----Example----- Input: 10 30 Output: 11 13 17 19 23 29","solution":"def sieve_of_eratosthenes(max_num): primes = [True] * (max_num + 1) primes[0] = primes[1] = False p = 2 while p * p <= max_num: if primes[p]: for i in range(p * p, max_num + 1, p): primes[i] = False p += 1 return primes def find_primes_in_range(A, B): if A > B or A < 1 or B > 10**6: raise ValueError(\\"Invalid range\\") primes = sieve_of_eratosthenes(B) prime_nums = [num for num in range(A, B + 1) if primes[num]] if prime_nums: return prime_nums else: return [\\"No primes\\"] # Example usage: # primes_in_range = find_primes_in_range(10, 30) # for prime in primes_in_range: # print(prime)"},{"question":"You are given a string consisting of lowercase English letters. We call a string \\"good\\" if it doesn\'t contain the substring \\"abc\\". In one operation, you can choose any index of the string and replace the character at that index with any lowercase English letter. Your task is to determine the minimum number of operations needed to make the given string \\"good\\". For example, if the input string is \\"ababc\\", the minimum number of operations needed is 1 because we can change the second \'a\' to any other character, resulting in \\"abbc\\". -----Input----- The first line contains an integer t (1 le t le 100) -- the number of test cases. Each of the following t lines contains a string consisting of lowercase English letters. The total length of all strings combined does not exceed 10^5. -----Output----- For each test case, output the minimum number of operations needed to make the string \\"good\\". -----Examples----- Input: 4 ababc abcabc aabbcc zzzabczzz Output: 1 2 0 1 -----Explanation----- In the first test case, the second \'a\' in \\"ababc\\" can be changed to make it \\"abbc\\". In the second test case, changing any two \'a\' characters to any other character can help in making the string \\"good\\", for example \\"xbybcy\\". In the third test case, the string \\"aabbcc\\" does not contain \\"abc\\" as a substring, so no operations are needed. In the fourth test case, change \'c\' in the substring \\"abcz\\" to any other character to avoid having \\"abc\\".","solution":"def min_operations_to_make_good(s): Returns the minimum number of operations needed to make the string good. count = 0 n = len(s) i = 0 while i < n - 2: if s[i:i+3] == \\"abc\\": count += 1 i += 3 else: i += 1 return count def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_operations_to_make_good(s)) return results # Sample implementation for processing input and displaying output def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = data[1:] results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"A magical creature named Aiko lives in an enchanted forest, where golden leaves hold the forest\'s enchantment. The forest is structured as a grid with N rows and M columns. Aiko travels from the top-left corner to the bottom-right corner to collect the maximum number of golden leaves. However, Aiko can only move either to the right or downward at each step to maintain the enchantment. Bewilderingly, certain cells in the grid are enchanted and contain a specific number of golden leaves, while others are not enchanted and contain no leaves. Your task is to help Aiko determine the maximum number of golden leaves she can collect during her journey from the top-left corner to the bottom-right corner of the forest grid. -----Input----- - The first line contains two integers N and M (1 leq N, M leq 1000) representing the number of rows and columns in the grid. - The next N lines contain M integers each, where each integer a_{ij} (0 leq a_{ij} leq 100) represents the number of golden leaves in cell (i, j). -----Output----- Print a single integer denoting the maximum number of golden leaves Aiko can collect following the rules. -----Examples----- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 12 Explanation: The path Aiko should take to collect the maximum number of leaves is: (0,0) rightarrow (0,1) rightarrow (1,1) rightarrow (2,1) rightarrow (2,2) collecting leaves: 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_golden_leaves(n, m, grid): # Initialize a dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Set the value of the top-left cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the maximum leaves collected reaching the bottom-right corner return dp[-1][-1]"},{"question":"Given a binary tree, write a function to calculate the sum of the nodes with even-valued grandparents. A node’s grandparent is the parent of its parent if it exists. -----Input----- The input will be in the format of an array representation of a binary tree, where `None` represents a missing node. For example: [6, 7, 8, 2, 7, 1, 3, 9, None, 1, 4, None, None, None, 5] This represents the following binary tree: ``` 6 / 7 8 / / 2 7 1 3 / / 9 1 4 5 ``` -----Output----- Print one number, the sum of the nodes with even-valued grandparents. -----Example----- Input [6, 7, 8, 2, 7, 1, 3, 9, None, 1, 4, None, None, None, 5] Output 18 Input [1, 2, 3, 4, 5, 6, 7] Output 0 Input [2, None, 3] Output 0 -----Note----- In the first example, the nodes with even-valued grandparents are 9, 1, 4, 5, and their values sum up to 18. In the second example, there are no nodes with even-valued grandparents. In the third example, there are no nodes with even-valued grandparents.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_level_order(arr, root, i, n): if i < n: temp = TreeNode(arr[i]) if arr[i] is not None else None root = temp if temp is not None: root.left = insert_level_order(arr, root.left, 2 * i + 1, n) root.right = insert_level_order(arr, root.right, 2 * i + 2, n) return root def sumEvenGrandparent(arr): if not arr: return 0 n = len(arr) root = insert_level_order(arr, None, 0, n) return sumEvenGrandparentUtil(root) def sumEvenGrandparentUtil(node, parent=None, grandparent=None): if node is None: return 0 sum_val = 0 if grandparent and grandparent.val % 2 == 0: sum_val += node.val sum_val += sumEvenGrandparentUtil(node.left, node, parent) sum_val += sumEvenGrandparentUtil(node.right, node, parent) return sum_val"},{"question":"With the annual marathon approaching, Alex is training rigorously. To take a break, he decides to solve a coding puzzle and will reward himself with a new pair of running shoes if he succeeds. The task requires finding a special number based on a given list of numbers. Help Alex get his reward by solving the problem described below. Given a matrix M of dimensions NxN, where M = [m_{i,j}], with 1 ≤ i, j ≤ N and m_{i,j} being a positive integer. You need to find the value of K, which is calculated by summing up the products of the sums of each row and each column in the matrix. Input Format The first line contains an integer N, representing the dimensions of the matrix. The next N lines each contain N space-separated integers, each representing an element m_{i,j} of the matrix. Output Format Print the value of K _modulo (10^{9} + 7)_. Constraints 1 ≤ N ≤ 5000 1 ≤ m_{i,j} ≤ 10^9 Sample Input 00 3 1 2 3 4 5 6 7 8 9 Sample Output 00 750 Explanation The sums of the rows of the given matrix are: Row 1: 1+2+3 = 6 Row 2: 4+5+6 = 15 Row 3: 7+8+9 = 24 The sums of the columns of the given matrix are: Column 1: 1+4+7 = 12 Column 2: 2+5+8 = 15 Column 3: 3+6+9 = 18 The value K is obtained as: K = (6+15+24) * (12+15+18) = 45 * 45 = 2025 Since 2025 < (10^9 + 7), the output is 2025. Note: In the given task, K modulo (10^{9} + 7) might be possible for larger inputs.","solution":"def calculate_k(matrix, N): MOD = 10**9 + 7 row_sums = [sum(row) for row in matrix] col_sums = [sum(col) for col in zip(*matrix)] sum_rows = sum(row_sums) % MOD sum_cols = sum(col_sums) % MOD K = (sum_rows * sum_cols) % MOD return K"},{"question":"Pablo is an artist who loves to draw geometric shapes using his computer. Recently, he has been working with triangles, and he encountered a challenge while working with right-angled triangles. Pablo wants to create a function that can generate a right-angled triangle pattern of given height using the \'#\' character. The triangle should align its right angle to the bottom-left corner. For example, if the height is 5, the pattern should look like this: ``` # # # ``` Your task is to help Pablo by writing a function that takes an integer input representing the height of the triangle and outputs the corresponding right-angled triangle pattern. -----Input----- Input consists of a single integer n (1 leq n leq 100) representing the height of the triangle. -----Output----- Output the right-angled triangle pattern with height n. Each line of the output should have a number of \'#\' characters equal to the line number. -----Examples----- Sample Input: 3 Sample Output: ``` # # ``` Sample Input: 5 Sample Output: ``` # # # ```","solution":"def right_angled_triangle(height): Generates a right-angled triangle pattern of given height using \'#\' character. Parameters: height (int): The height of the triangle Returns: str: A string representing the right-angled triangle pattern triangle = \'\' for i in range(1, height + 1): triangle += \'#\' * i + \'n\' return triangle.strip()"},{"question":"Erika is participating in a competition involving a maze of interconnected rooms. The maze consists of N rooms, and some rooms are connected by M direct paths. Each path has a certain passage time, and Erika aims to reach certain key rooms as quickly as possible. The rooms are labeled 1, 2, dots, N, and each path is described by three integers: A_ i (the starting room), B_ i (the ending room), and T_ i (the time it takes to pass through the path). Erika needs to determine the shortest time it takes to reach a list of specific key rooms starting from a given room. To help Erika efficiently navigate the maze, you need to write a program that finds the shortest time from the starting room to each of the key rooms specified. -----Input----- The first line of input contains three integers N (2 leq N leq 100000), M (1 leq M leq 200000), and S (1 leq S leq N) where N is the number of rooms, M is the number of paths, and S is the starting room. The next M lines contain the descriptions of the paths. In particular, the i^text {th} of these lines contains three integers A_ i, B_ i (1 leq A_ i, B_ i leq N; A_ i neq B_ i), and T_ i (1 leq T_ i leq 10^6), denoting that the i^text {th} path goes from room A_ i to room B_ i and has a time of T_ i minutes. The last line of input contains a single integer K (1 leq K leq N), followed by K integers, which represent the key rooms P_1, P_2, dots, P_K that Erika needs to reach from the starting room S. -----Output----- Output K integers on a single line, separated by spaces. The i^text {th} of these integers should contain the shortest time to reach the key room P_ i from the starting room S. If a key room cannot be reached, output -1 for that room. -----Examples----- Sample Input: 6 7 1 1 2 4 1 3 2 2 4 7 2 5 1 3 5 3 4 6 2 5 6 5 3 4 5 6 Sample Output: -1 5 7","solution":"import heapq def shortest_path_times(N, M, S, paths, K, key_rooms): # Create a graph from the given paths graph = {i: [] for i in range(1, N+1)} for A, B, T in paths: graph[A].append((B, T)) graph[B].append((A, T)) # Assuming this is an undirected graph # Initialize the distances dictionary with infinity distances = {i: float(\'inf\') for i in range(1, N+1)} distances[S] = 0 # Min-heap to store (distance, node) heap = [(0, S)] while heap: current_distance, current_node = heapq.heappop(heap) # If the popped distance is still the best known distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) # Extract the shortest times for the key rooms result = [] for room in key_rooms: if distances[room] == float(\'inf\'): result.append(-1) else: result.append(distances[room]) return result"},{"question":"You recently joined an international programming contest as a problem setter. You have been tasked with creating a unique problem that makes contestants think outside the box. One of your tasks includes designing a problem involving manipulation of strings. The problem at hand is to create a utility that can convert any given string into its \\"alternate capitalization\\" format. In alternate capitalization, the first character should be in uppercase, the second in lowercase, the third in uppercase, the fourth in lowercase, and so on. -----Input----- The first line contains the single integer T (1 ≤ T ≤ 100) — the number of test cases. Next T lines contain a single string S each, consisting of alphabets (both uppercase and lowercase) and having length 1 ≤ len(S) ≤ 1000. -----Output----- For each test case, output the new string in \\"alternate capitalization\\" format on a new line. -----Sample Input----- 3 hello world PROGRAMMING -----Sample Output----- HeLlO WoRlD PrOgRaMmInG","solution":"def alternate_capitalization(s): Returns the string in alternate capitalization format. result = [] for i, char in enumerate(s): if i % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return \'\'.join(result) def process_test_cases(T, test_cases): Process multiple test cases for alternate capitalization. results = [] for s in test_cases: results.append(alternate_capitalization(s)) return results"},{"question":"# Task In the Land of Chess, knights are particularly jumpy. A knight can move from its current position either two squares in one direction and one square in a perpendicular direction, or one square in one direction and two squares in a perpendicular direction. Given the initial position of a knight in chess notation, find all the possible destinations the knight can move to in exactly one move. Ensure to only include valid positions inside the chessboard. # Example For `knight = \\"e4\\"`, the output could be `[\\"c3\\", \\"c5\\", \\"d2\\", \\"d6\\", \\"f2\\", \\"f6\\", \\"g3\\", \\"g5\\"]`. Visual representation on a chessboard: ![](https://codefightsuserpics.s3.amazonaws.com/tasks/knightMoves/img/ex_1.jpg?_tm=1473766087137) For `knight = \\"h8\\"`, the output could be `[\\"f7\\", \\"g6\\"]`. Visual representation on a chessboard: ![](https://codefightsuserpics.s3.amazonaws.com/tasks/knightMoves/img/ex_2.jpg?_tm=1473766087425) The knight is on the upper right corner, having limited possible moves. # Input/Output - `[input]` string `knight` The coordinates of the knight in chess notation. - `[output]` a string array Coordinates of all possible destinations in lexicographical order.","solution":"def knight_moves(knight): Returns all possible destinations the knight can move to in exactly one move from the given position in chess notation. def is_valid_position(x, y): return 0 <= x < 8 and 0 <= y < 8 knight_position = (ord(knight[0]) - ord(\'a\'), int(knight[1]) - 1) potential_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] valid_positions = [] for move in potential_moves: new_x = knight_position[0] + move[0] new_y = knight_position[1] + move[1] if is_valid_position(new_x, new_y): valid_positions.append(chr(new_x + ord(\'a\')) + str(new_y + 1)) return sorted(valid_positions)"},{"question":"Sandra loves collecting rare stones. Each stone has a unique identifier and a beauty value (which can be positive or negative). She wants to maximize the total beauty of her collection under the following condition: she cannot pick two stones that have consecutive identifiers. Given `n`, the number of stones, and two arrays `ids` and `beauties` where `ids[i]` is the unique identifier of the `i-th` stone and `beauties[i]` is the beauty value of the `i-th` stone, write a function to determine the maximum total beauty value Sandra can obtain. # The Challenge Write a function `max_beauty(n, ids, beauties)` that takes: - an integer `n` (1 ≤ n ≤ 1000), the number of stones, - an array of integers `ids` of length `n`, the unique identifiers of the stones, - an array of integers `beauties` of length `n`, the beauty values of the stones. Return the maximum total beauty Sandra can obtain without picking two stones with consecutive identifiers. **Example:** ```python print(max_beauty(5, [1, 2, 5, 8, 9], [4, 3, 6, 10, -1])) # Output: 14 print(max_beauty(3, [2, 3, 4], [-1, 2, 3])) # Output: 3 ``` In the first example, Sandra can pick stones with identifiers 1, 5, and 8 for a total beauty of 4 + 6 + 10 = 20. In the second example, Sandra can pick stones with identifiers 2 and 4 for a total beauty of -1 + 3 = 2.","solution":"def max_beauty(n, ids, beauties): if n == 0: return 0 # Sort stones by their ids stones = sorted(zip(ids, beauties)) # dp[i] will be the maximum beauty value we can collect from first i stones dp = [0] * n dp[0] = max(0, stones[0][1]) # We can either take the first stone or not for i in range(1, n): # beauty if we don\'t take this stone dont_take = dp[i-1] # beauty if we take this stone, ensure we skip the previous stone with a consecutive id take = stones[i][1] for j in range(i-1, -1, -1): if stones[i][0] - stones[j][0] > 1: take += dp[j] break dp[i] = max(dont_take, take) return dp[n-1]"},{"question":"A software company wants to develop a task scheduling system where tasks are processed based on their priorities. Each task is represented by a pair of integers ((p, t)), where (p ) is the priority and ( t) is the time required to complete the task. Higher numerical priority means higher urgency. The company wants to ensure that tasks with the highest priority are always executed first. Where priorities are the same, tasks with shorter time requirements should be executed earlier. You have been tasked to simulate the execution order of the tasks based on the given rules. Write a function `schedule_tasks(tasks)` that takes a list of tasks, where each task is represented by a tuple ((p, t)), and returns a list of tasks sorted by their execution order. # Constraints * 1 ≤ number of tasks ≤ 10^5 * Each task\'s priority (p) is an integer in the range ([1, 10^6]) * Each task\'s time (t) is an integer in the range ([1, 10^6]) # Input * `tasks`: a list of tuples, where each tuple ((p, t)) represents a task’s priority and time. # Output * A list of tasks sorted by their execution order. # Example Input tasks = [(3, 5), (1, 2), (1, 3), (2, 1), (3, 2)] Output [(3, 2), (3, 5), (2, 1), (1, 2), (1, 3)] In the given example, the output list of tasks is sorted such that tasks with highest priority are first. Among tasks with the same priority, they are sorted by their time requirement in ascending order. # Explanation * The tasks (3, 5) and (3, 2) have the highest priority (3), so they are executed first. Task (3, 2) comes before (3, 5) because it has a shorter time requirement. * Next, task (2, 1) with priority 2 is executed. * Finally, tasks (1, 2) and (1, 3) with priority 1 are executed, with (1, 2) coming before (1, 3) due to the shorter time requirement.","solution":"def schedule_tasks(tasks): Sorts tasks based on their priority and execution time. Parameters: tasks (list): A list of tuples, where each tuple (p, t) represents a task\'s priority and time. Returns: list: A list of tasks sorted by their execution order. # Sort tasks based on the custom sorting criteria: first by priority descending and then by time ascending sorted_tasks = sorted(tasks, key=lambda x: (-x[0], x[1])) return sorted_tasks"},{"question":"In a magical forest, each tree has a certain amount of magical energy stored in it. You, as a wizard, can absorb and transfer this energy between trees, aiming to equalize the energy level of as many trees as possible. You can perform the following actions: 1. Absorb the entire energy from a tree and transfer it to another tree. This action requires 1 spell cast. 2. Incrementally transfer a portion of energy from one tree to another, in which case the spell casting is measured by the difference in their energy levels before and after the transfer. Your task is to determine the minimum number of spell casts needed to equalize the energy levels of all trees as much as possible. # Input: - The first line contains an integer `n`, the number of trees. - The second line contains `n` space-separated integers, `energy[i]`, representing the energy level of each tree. # Output: - Print the minimum number of spell casts required. # Constraints: - `1 <= n <= 1000` - `0 <= energy[i] <= 10^6` # Example Input: ``` 4 2 3 5 5 ``` # Example Output: ``` 2 ``` # Explanation: One optimal solution is to transfer energy as follows: 1. Transfer 1 unit of energy from the third tree (5) to the first tree (2), making the first tree\'s energy 3. This costs 1 spell cast. 2. Transfer 2 units of energy from the fourth tree (5) to the second tree (3), making both have 5 energy each. This costs another 1 spell cast. Thus, the total number of spell casts required is 2.","solution":"def min_spell_casts(n, energies): energies.sort() median = energies[n // 2] # using median as the target energy spell_casts = 0 for energy in energies: spell_casts += abs(energy - median) return spell_casts"},{"question":"You have a group of friends who enjoy playing a game they created called \\"Number Chains.\\" The game works as follows: start with a non-negative integer n, and repeatedly sum the squares of its digits to form a new number until the process eventually results in the number 1, or it enters a cycle that does not include 1. A number for which this process results in 1 is called a \\"happy number.\\" Write a program to determine if each number in a list of given numbers is a happy number or not. -----Input----- The first line contains t, the number of test cases (1 ≤ t ≤ 1000). Each of the following t lines contains a single integer n (0 ≤ n ≤ 109). -----Output----- For each test case, print \\"YES\\" if the number is a happy number, and \\"NO\\" otherwise. -----Example----- Input 3 19 2 7 Output YES NO YES","solution":"def sum_of_squares_of_digits(n): Returns the sum of the squares of the digits of a given number n. return sum(int(digit) ** 2 for digit in str(n)) def is_happy_number(n): Determines if a number n is a happy number. seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares_of_digits(n) return n == 1 def number_chains(test_cases): Given a list of numbers, determines if each number is a happy number or not. For each number, returns \\"YES\\" if the number is a happy number, otherwise \\"NO\\". results = [] for number in test_cases: if is_happy_number(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"An array is said to be a \\"wiggle sequence\\" if the differences between successive numbers strictly alternate between positive and negative. Develop a function that checks whether a given array is a wiggle sequence. The input will consist of a single integer T, representing the number of test cases, followed by T arrays of integers. Your function should output \\"True\\" if the array is a wiggle sequence, and \\"False\\" otherwise. Input Description: The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains an integer n, denoting the length of the array, followed by n space-separated integers representing the elements of the array. Output Description: For each test case, output \\"True\\" if the array is a wiggle sequence, and \\"False\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 1000 -10^4 ≤ array elements ≤ 10^4 Example: Input: 2 6 1 7 4 9 2 5 5 1 4 7 2 5 Output: True False Explanation: TestCase 1: The differences between successive numbers in the array are [6, -3, 5, -7, 3], which alternate strictly between positive and negative. Hence the output is True. TestCase 2: The differences between successive numbers in the array are [3, 3, -5, 3], which do not strictly alternate between positive and negative. Hence the output is False.","solution":"def is_wiggle_sequence(arr): if len(arr) < 2: return True prev_diff = arr[1] - arr[0] for i in range(2, len(arr)): diff = arr[i] - arr[i-1] if prev_diff == 0 or diff == 0 or (prev_diff > 0 and diff > 0) or (prev_diff < 0 and diff < 0): return False prev_diff = diff return True def wiggle_test_cases(T, arrays): results = [] for arr in arrays: results.append(is_wiggle_sequence(arr)) return results"},{"question":"You are given a number of travelers who need to visit various landmarks in a city. The city map is represented as a grid of size R x C, where each cell can be either empty (.) or contain an obstacle (#). Each traveler starts at a specific cell and has a destination landmark they wish to reach. The travelers plan their journeys as follows: - They can move one cell at a time in any of the four cardinal directions (up, down, left, right), provided the cell is within bounds and not an obstacle. - They want to know the shortest time it will take for all travelers to reach their respective destinations or determine if it\'s impossible for any of them to reach their destination. Write a program to determine the minimum time required for all travelers to reach their destinations, or print -1 if any traveler cannot reach their destination. Input The input consists of several lines: 1. The first line contains two integers R and C (1 ≤ R, C ≤ 100), representing the number of rows and columns in the grid, respectively. 2. The next R lines each contain a string of length C, representing the grid. \'.\' indicates an empty cell, and \'#\' indicates an obstacle. 3. The next line contains an integer T (1 ≤ T ≤ 100), the number of travelers. 4. The next T lines each contain four integers si, sj, di, dj (0 ≤ si, sj, di, dj < max(R, C)), representing the starting cell (si, sj) and the destination cell (di, dj) for each traveler. Output Output a single integer representing the minimum time required for all travelers to reach their destinations, or output -1 if it is impossible for any traveler to reach their destination. Example Input 5 5 .#... ..... ..... ..... ...#. 3 0 0 4 4 1 1 2 2 3 0 0 4 Output 8 Note In the given example, there are 3 travelers: 1. The first traveler starts at (0, 0) and wants to reach (4, 4). The shortest path takes 8 moves. 2. The second traveler starts at (1, 1) and wants to reach (2, 2). The shortest path takes 2 moves. 3. The third traveler starts at (3, 0) and wants to reach (0, 4). The shortest path takes 7 moves. The maximum of these times is 8, so the output is 8.","solution":"from collections import deque def min_time_to_reach_all(R, C, grid, T, travelers): def bfs(start, end): si, sj = start di, dj = end if grid[si][sj] == \'#\' or grid[di][dj] == \'#\': return float(\'inf\') directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(si, sj, 0)]) # (row, col, distance) visited = [[False] * C for _ in range(R)] visited[si][sj] = True while queue: x, y, dist = queue.popleft() if (x, y) == (di, dj): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return float(\'inf\') max_time = 0 for si, sj, di, dj in travelers: travel_time = bfs((si, sj), (di, dj)) if travel_time == float(\'inf\'): return -1 max_time = max(max_time, travel_time) return max_time"},{"question":"A robotic arm is tasked with sorting a series of colored blocks on a conveyor belt. Each block is represented by a lowercase letter indicating its color. The robotic arm can perform two types of operations: moving one step left or right along the conveyor belt and swapping two adjacent blocks. Due to the importance of maintaining balance on the conveyor belt, the robotic arm must ensure that no two adjacent blocks are of the same color after sorting. Your task is to determine whether it is possible or not to sort the blocks in such a way. Input The input consists of a single string S of length n (2 ≤ n ≤ 100), where each character is a lowercase letter representing the color of a block. Output Output \\"YES\\" if it is possible to sort the blocks such that no two adjacent blocks are of the same color, otherwise output \\"NO\\". SAMPLE TEST CASE INPUT abac OUTPUT YES SAMPLE INPUT aaaa SAMPLE OUTPUT NO","solution":"def can_sort_blocks(S): Determines if it is possible to sort the blocks such that no two adjacent blocks are of the same color. :param S: A string of lowercase letters representing block colors. :return: \'YES\' if it is possible to sort the blocks as required, \'NO\' otherwise. from collections import Counter # Count the frequency of each block counter = Counter(S) # Get the most common block and its frequency most_common_block, most_common_count = counter.most_common(1)[0] # The condition to be able to sort such that no two adjacent blocks are the same if most_common_count <= (len(S) + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Task Write a function that takes a list of integers and a target sum as input and returns the unique pairs of numbers from the list that add up to the target sum. Your implementation should ensure: - Each pair of numbers in the output should be ordered such that the smaller number comes first. - The output should not contain duplicate pairs. - If there are no pairs that add up to the target sum, return an empty list. Examples ```python nums = [2, 4, 3, 5, 7, 8, 9] target = 7 output => [ [2, 5], [3, 4] ] nums = [1, 2, 3, 4, 5, 6] target = 10 output => [ [4, 6] ] nums = [1, 2, 3] target = 6 output => [] ```","solution":"def find_pairs_with_sum(nums, target): Returns unique pairs of numbers from the list that add up to the target sum. Each pair is ordered such that the smaller number comes first, and the output does not contain duplicate pairs. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return [list(pair) for pair in pairs]"},{"question":"The city of Techville is planning to set a new world record in constructing a \\"Digital Wall of Fame\\". A list of achievements by several programmers are to be engraved on this wall, but there is a catch. Each programmer\'s name will be engraved along with their achievements in lexicographical order. Given names and corresponding achievements, write a program to list each programmer\'s name along with their achievements, sorted alphabetically by name. If a programmer has multiple achievements, display them in lexicographical order. -----Input----- The first line of input contains a single integer P (1 le P le 100), the number of programmers. Each of the following P lines contains: - The programmer\'s name (a string of at most 100 lowercase letters). - An integer A (1 le A le 50), the number of achievements. - A list of A achievements, each being a string of at most 100 lowercase letters. -----Output----- For each programmer, output the programmer\'s name followed by their sorted achievements, each on a new line. The programmer\'s names should be printed in lexicographical order. -----Examples----- Sample Input: 3 alice 3 hackathon_leader top_coder open_source_contributor bob 2 ai_researcher robotics_spirit charlie 1 bug_finder Sample Output: alice hackathon_leader open_source_contributor top_coder bob ai_researcher robotics_spirit charlie bug_finder","solution":"def sort_programmers_achievements(programmers_info): Given a list of programmers and their achievements, sorts the programmers by name and their achievements lexicographically. Args: programmers_info: list of tuples, each containing (str, int, list of str) - str: programmer\'s name - int: number of achievements - list of str: the achievements Returns: list: sorted list of tuples, each containing (str, list of str) sorted_programmers = sorted(programmers_info, key=lambda x: x[0]) result = [] for name, count, achievements in sorted_programmers: sorted_achievements = sorted(achievements) result.append((name, sorted_achievements)) return result def display_sorted_achievements(sorted_achievements): Prints the sorted achievements in the format required Args: sorted_achievements: list of tuples, each containing (str, list of str) for name, achievements in sorted_achievements: print(name) for achievement in achievements: print(achievement) def process_input(input_lines): Processes the input lines and returns the sorted achievements Args: input_lines: list of str, the input lines Returns: list: sorted list of tuples, each containing (str, list of str) P = int(input_lines[0]) programmers_info = [] for i in range(1, P + 1): parts = input_lines[i].split() name = parts[0] A = int(parts[1]) achievements = parts[2:] programmers_info.append((name, A, achievements)) sorted_achievements = sort_programmers_achievements(programmers_info) return sorted_achievements"},{"question":"Given a string S = s_0s_1s_2...s_{n-1}, determine whether it is possible to rearrange the string so that no two adjacent characters are the same. If possible, output any valid rearrangement, otherwise output \\"NO\\". Constraints * 1 leq n leq 100,000 * S consists of lowercase English letters only. Input The input is given in the following format. S The string S is provided as a single line of input. Output If it is possible to rearrange S such that no two adjacent characters are the same, print any valid rearranged string. If it is not possible, print \\"NO\\". Example Input aabb Output abab Input aaab Output NO","solution":"from collections import Counter import heapq def rearrange_string(S): Rearranges the string S such that no two adjacent characters are the same. If not possible, returns \\"NO\\". # Count frequency of each character freq_count = Counter(S) max_heap = [(-count, char) for char, count in freq_count.items()] # Convert to a max heap based on character frequency heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) # Append the current character to the result result.append(char) # Since we are using a max heap, we actually decrement the count count += 1 # If there was a previously used character, push it back into the heap if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update prev_char and prev_count prev_char = char prev_count = count rearranged_string = \'\'.join(result) if len(rearranged_string) == len(S): return rearranged_string else: return \\"NO\\""},{"question":"Given a list of integers, you are to find a subarray (containing at least one number) which has the largest sum and return its sum. Input: The first line should contain a single integer n, the number of elements in the list. The second line should contain n space-separated integers representing the elements of the list. Output: Print the sum of the subarray with the largest sum. Constraints: 1 ≤ n ≤ 100,000 -10,000 ≤ element ≤ 10,000 Sample Input: 5 -2 1 -3 4 -1 2 1 -5 4 Sample Output: 6","solution":"def max_subarray_sum(arr): This function takes a list of integers and returns the sum of the subarray with the largest sum. if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Function to read input and print output def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = max_subarray_sum(arr) print(result)"},{"question":"Given an integer array `nums` of length `n`, return an array of all the permutations of `nums`. You can return the answer in any order. Write a function `generatePermutations(nums)` that takes an array of integers as an argument and returns a list of lists, where each list represents a permutation of `nums`. # Example ```python Input: nums = [1,2,3] Output: [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] Input: nums = [0,1] Output: [[0,1], [1,0]] Input: nums = [1] Output: [[1]] ``` # Constraints - `n` should be greater than or equal to 1 and less than or equal to 6. - Each element in `nums` has a unique value from -10 to 10, inclusive.","solution":"from itertools import permutations def generatePermutations(nums): Returns all possible permutations of the input list nums. return [list(p) for p in permutations(nums)]"},{"question":"Write a function that finds the longest contiguous subarray within an array of integers which has the maximum sum. The function should return this maximum sum. An array can contain both positive and negative integers. For example, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the contiguous subarray with the largest sum is `[4, -1, 2, 1]`, with a sum of `6`. Here is the specification: - Your function should take in a single list of integers. - It should return an integer representing the maximum sum of the longest contiguous subarray. Examples: ``` max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) -> 6 max_subarray_sum([1, 2, 3, 4, 5]) -> 15 max_subarray_sum([-1, -2, -3, -4]) -> -1 ``` Constraints: - The input array will have at least one element and at most `10^5` elements. - The elements of the array will be integers in the range `[-10^4, 10^4]`.","solution":"def max_subarray_sum(arr): Finds the maximum sum of a contiguous subarray within the given array. :param arr: List of integers :return: Integer representing the maximum sum of the longest contiguous subarray if not arr: return 0 current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"John loves to travel and share his experiences on a blogging website. One of his favorite things to do is to write about all the places he has visited in his blogging website. However, he always takes care to highlight the city with the longest name in each post. Given a list containing the names of cities that John has visited, can you help him find the city with the longest name? If there are multiple cities with the same length, return the first one that appears in the list. -----Input----- The first line contains an integer T denoting the number of test cases. Each test case consists of two parts. The first line contains an integer N denoting the number of cities in the list. The next N lines each contain the name of one city. -----Output----- For each test case, print the name of the city with the longest name on a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ length of city names ≤ 100 -----Example----- Input: 2 3 Paris London Tokyo 4 Rome Amsterdam Berlin Madrid Output: London Amsterdam","solution":"def longest_city_name(test_cases): Given a list of test cases with cities, return the city with the longest name for each test case. :param test_cases: List of tuples, where each tuple contains: - an integer N (number of cities) - a list of N city names :return: List of city names with the longest name for each test case result = [] for case in test_cases: N, cities = case longest_name = \'\' for city in cities: if len(city) > len(longest_name): longest_name = city result.append(longest_name) return result"},{"question":"Given an array of integers Arr[] of size N, the array is initially sorted in increasing order, and then rotated by some unknown number of positions. Find the index of the smallest element in the array. Example 1: Input: N = 5 Arr[] = {4, 5, 1, 2, 3} Output: 2 Explanation: The smallest element is 1 and its index is 2. Example 2: Input: N = 7 Arr[] = {7, 9, 11, 12, 15, 1, 3} Output: 5 Explanation: The smallest element is 1 and its index is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPivot() which takes an array of integers arr[] and its size n as input parameters and returns the index of the smallest element in the array. Expected Time Complexity: O(logN) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^6 <= Arr[i] <= 10^6","solution":"def findPivot(arr, n): Finds the index of the smallest element (pivot) in a rotated sorted array. Parameters: arr (list of int): The rotated sorted array. n (int): The size of the array. Returns: int: The index of the smallest element in the array. low, high = 0, n - 1 while low < high: mid = (low + high) // 2 if arr[mid] > arr[high]: low = mid + 1 else: high = mid return low"},{"question":"You are given an n times m grid containing digits between 1 and 9 inclusive. You need to determine the length of the longest contiguous subarray in any row or column such that all its elements are the same. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 1000) — the number of rows and the number of columns in the grid. Each of the following n lines contains m integers between 1 and 9 inclusive, representing the grid. -----Output----- Output a single integer — the length of the longest contiguous subarray with identical elements in any row or column. -----Examples----- Input 3 3 1 2 2 2 2 2 3 3 3 Output 3 Input 4 4 1 2 3 4 5 5 5 5 6 7 8 6 9 6 6 6 Output 4 -----Note----- In the first example: - The longest contiguous subarray in the first row is \\"22\\" of length 2. - The longest contiguous subarray in the second row is \\"222\\" of length 3. - The longest contiguous subarray in the third row is \\"333\\" of length 3. - The longest contiguous subarray in the first column is \\"1\\" of length 1. - The longest contiguous subarray in the second column is \\"22\\" of length 2. - The longest contiguous subarray in the third column is \\"23\\" of length 2. The longest contiguous subarray has length 3. In the second example: - The longest contiguous subarray in the first row is \\"1\\" of length 1. - The longest contiguous subarray in the second row is \\"5555\\" of length 4. - The longest contiguous subarray in the third row is \\"6\\" of length 1. - The longest contiguous subarray in the fourth row is \\"666\\" of length 3. - The longest contiguous subarray in the first column is \\"1\\" of length 1. - The longest contiguous subarray in the second column is \\"27\\" of length 2. - The longest contiguous subarray in the third column is \\"38\\" of length 2. - The longest contiguous subarray in the fourth column is \\"4666\\" of length 4. The longest contiguous subarray has length 4.","solution":"def longest_contiguous_subarray(n, m, grid): Finds the longest contiguous subarray with identical elements in any row or column of a grid. Parameters: n (int): number of rows. m (int): number of columns. grid (list of list of int): n x m grid with digits between 1 and 9. Returns: int: Length of the longest contiguous subarray with identical elements. max_len = 1 # Check rows for longest contiguous subarray for row in grid: current_len = 1 for i in range(1, m): if row[i] == row[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 # Check columns for longest contiguous subarray for col in range(m): current_len = 1 for i in range(1, n): if grid[i][col] == grid[i - 1][col]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given a list of students and their scores on an exam. Write a program to sort and display the students\' names in non-increasing order of their scores. In case multiple students have the same score, they should be listed in alphabetical order of their names. Input The first line contains the positive integer n (1 ≤ n ≤ 5000) — the number of students. The next n lines contain the students\' description. In the i-th line, there is student\'s name namei (a non-empty string which consists of uppercase and lowercase Latin letters, the length does not exceed ten) and student\'s score si (0 ≤ si ≤ 100). Note that uppercase and lowercase letters should be considered different. Output Print n lines — students\' names in the non-increasing order of their scores. Each line must contain exactly one name. In case of ties by score, names should be in alphabetical order. Examples Input 4 Alice 90 Bob 95 Charlie 85 David 95 Output Bob David Alice Charlie Input 3 Zara 88 Anna 88 Liam 92 Output Liam Anna Zara","solution":"def sort_students(n, students): Sort students by their scores in non-increasing order. If scores are tied, sort by name alphabetically. Parameters: n (int): Number of students. students (list of tuple): List of tuples, each containing student name and their score. Returns: list: Sorted list of student names. # Sort the list based on the score (descending) and name (ascending) sorted_students = sorted(students, key=lambda x: (-x[1], x[0])) # Extract only the names in the sorted order sorted_names = [student[0] for student in sorted_students] return sorted_names"},{"question":"Given an array representing heights of fence panels, you need to find the maximum number of consecutive fence panels that can be painted such that the sum of their heights does not exceed a given limit. The fence panels can be painted starting from any position in the array, but once you start painting, you must continue to the next consecutive panel. Input The first line of the input contains two space-separated integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of fence panels and the maximum allowable sum of heights to be painted. The second line contains n space-separated integers hi (1 ≤ hi ≤ 100) — the heights of the fence panels. Output Print a single integer — the maximum number of consecutive fence panels that can be painted without exceeding the maximum allowable sum m. Examples Input 6 5 2 1 1 2 1 1 Output 4 Input 5 3 1 2 3 4 5 Output 2 Input 4 7 4 3 2 1 Output 3 Note In the first sample, the consecutive panels that can be painted are {2, 1, 1, 1} and their heights sum up to 5 which is the allowable limit. Hence the output is 4. In the second sample, the best set of consecutive panels that can be painted would be {1, 2} or {2, 1}, both resulting in a total of 3, so the output is 2. In the third sample, the best set of consecutive panels that can be painted would be {3, 2, 1} summing to 6 which is within the limit of 7, so the output is 3.","solution":"def max_consecutive_panels(n, m, heights): max_panels = 0 current_sum = 0 start = 0 for end in range(n): current_sum += heights[end] while current_sum > m: current_sum -= heights[start] start += 1 max_panels = max(max_panels, end - start + 1) return max_panels # Example of a function call n = 6 m = 5 heights = [2, 1, 1, 2, 1, 1] print(max_consecutive_panels(n, m, heights)) # Output should be 4"},{"question":"You are given a network of n computers labeled from 1 to n. Each computer is connected to other computers by bidirectional communication channels. You are provided with a list of connections where each connection is a tuple (a_i, b_i, t_i) representing a channel between computer a_i and computer b_i with a communication delay of t_i units. Your objective is to determine the minimum total communication delay to connect all computers in the network. If it is impossible to connect all computers, return -1. Example 1: Input: n: 4 connections: [[1, 2, 1], [2, 3, 2], [3, 4, 1], [1, 4, 4]] Output: 4 Explanation: The minimum communication delay to connect all computers is achieved by using connections (1-2), (2-3), and (3-4) with a total delay of 1 + 2 + 1 = 4. Example 2: Input: n: 4 connections: [[1, 2, 3], [3, 4, 4]] Output: -1 Explanation: It is impossible to connect all computers as computers 1, 2 and computers 3, 4 are in separate disconnected components. Your Task: You don\'t need to print or input anything. Complete the function minimumCommunicationDelay() which takes an integer n and an array of connections as the input parameters and returns an integer, denoting the minimum total communication delay to connect all computers. Expected Time Complexity: O(E log E), where E is the number of connections. Expected Auxiliary Space: O(V), where V is the number of computers. Constraints: 2 <= n <= 1000 1 <= connections.length <= 100000 connections[i].length == 3 1 <= a_i, b_i <= n 1 <= t_i <= 1000","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimumCommunicationDelay(n, connections): parent = [] rank = [] for node in range(n+1): parent.append(node) rank.append(0) connections.sort(key=lambda item: item[2]) e = 0 result = [] i = 0 while e < n - 1: if i >= len(connections): return -1 u, v, w = connections[i] i = i + 1 x = find(parent, u) y = find(parent, v) if x != y: e = e + 1 result.append(w) union(parent, rank, x, y) return sum(result)"},{"question":"Jay loves mathematics, particularly the study of number sequences. Recently, he came across the Fibonacci sequence and became fascinated with it. He decided to extend it in his own way and call it the \\"Modified Fibonacci Sequence.\\" In this sequence, every third term is the sum of the previous three terms instead of the previous two. Given an integer `n`, help Jay generate the first `n` terms of the Modified Fibonacci Sequence. The sequence starts as follows: 0, 1, 1, 2, 4, 7, 13, ... Here are the first few terms explained: - first term (0) - second term (1) - third term (1) - fourth term is the sum of the first three terms (0 + 1 + 1 = 2) - fifth term is the sum of the second, third, and fourth terms (1 + 1 + 2 = 4) - sixth term is the sum of the third, fourth, and fifth terms (1 + 2 + 4 = 7), and so on. Write a function `generateModifiedFibonacci(n)` that takes an integer `n` and returns a list containing the first `n` terms of the Modified Fibonacci Sequence. Example 1: Input: 6 Output: [0, 1, 1, 2, 4, 7] Example 2: Input: 10 Output: [0, 1, 1, 2, 4, 7, 13, 24, 44, 81] Your Task: You don\'t need to input anything. Complete the function `generateModifiedFibonacci(n)` which takes an integer `n` as the input parameter and returns a list of the first `n` terms of the Modified Fibonacci Sequence. Constraints: 1 <= n <= 20","solution":"def generateModifiedFibonacci(n): This function generates the first n terms of the Modified Fibonacci Sequence. if n == 1: return [0] if n == 2: return [0, 1] if n == 3: return [0, 1, 1] seq = [0, 1, 1] for i in range(3, n): next_value = seq[i-1] + seq[i-2] + seq[i-3] seq.append(next_value) return seq"},{"question":"Write a function that takes a string consisting of alphabetic characters and whitespace characters. The string contains multiple words separated by spaces. You need to transform the string such that the words appear in the same order, but each word is capitalized (i.e., the first character of each word should be uppercase, the rest lowercase). You should not use any built-in string manipulation functions that directly solve this task (e.g., `str.title()` or `str.capitalize()`). The function should return the transformed string. Here are some examples to clarify: ```python capitalize_words(\\"hello world\\") == \\"Hello World\\" capitalize_words(\\"PyTHOn proGRAmming is fuN\\") == \\"Python Programming Is Fun\\" capitalize_words(\\" leading and trailing spaces \\") == \\" Leading And Trailing Spaces \\" ``` Quick Note: The input string will always contain only alphabetic characters and whitespace, and it may include multiple spaces between words. There is no need to validate or sanitize the input.","solution":"def capitalize_words(s): Takes a string and capitalizes the first letter of each word while making the rest of the letters lowercase. result = [] in_word = False for char in s: if char.isalpha(): if not in_word: # Start of a new word result.append(char.upper()) in_word = True else: result.append(char.lower()) else: # Characters that are not alphabets (spaces) result.append(char) in_word = False return \'\'.join(result)"},{"question":"In a certain country, there is a unique game called \\"Array Shuffling\\". Given an integer array a of length n, the goal of the game is to shuffle the array in such a way that no element remains in its original position, i.e., for each i (1 le i le n), a_i ne b_i after shuffling. This type of shuffling is known as a derangement. Your task is to write a program that, for each given array, finds any valid derangement of the array. ----- Input ----- The input consists of multiple test cases: - The first line contains a single integer t (1 le t le 10^3) — the number of test cases. - Each test case consists of two lines: - The first line contains an integer n (2 le n le 2 cdot 10^5) — the length of the array. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. The sum of n over all test cases does not exceed 2 cdot 10^5. ----- Output ----- For each test case, print a single line containing n integers — a valid derangement of the array a. If there are multiple valid derangements, you can print any of them. It is guaranteed that a valid derangement always exists for the given constraints. ----- Example ----- Input 2 3 1 2 3 4 4 5 6 7 Output 2 3 1 5 6 7 4 ----- Note ----- In the first test case, an array [1, 2, 3] is given. A valid derangement [2, 3, 1] is one possible solution since no element remains in its original position. In the second test case, the array [4, 5, 6, 7] is provided. One possible derangement is [5, 6, 7, 4], ensuring that no elements are in their initial positions.","solution":"import random def derange_array(n, a): Generates a deranged array such that no element remains in its original position. # Create an auxiliary array with same elements and shuffle it b = a[:] while True: random.shuffle(b) if all(a[i] != b[i] for i in range(n)): return b def derange_test_cases(t, test_cases): Generates deranged arrays for multiple test cases. results = [] for case in test_cases: n, a = case deranged = derange_array(n, a) results.append(deranged) return results"},{"question":"Robin loves solving complex problems involving strings and arrays. One day, while working with strings, he encountered a challenge that involves transforming a given string into a palindrome. A palindrome is a word that reads the same backward as forward. Here’s a problem inspired by Robin\'s challenge. Given a string `s` of length `n`, you are allowed to perform two types of operations: 1. Insert any character at any position in the string. 2. Remove any single character from the string. You need to determine the minimum number of operations required to transform the string into a palindrome. Input: The first line contains a single integer `n` (1 ≤ n ≤ 1000) – the length of the string. The second line contains the string `s` consisting of lowercase English letters only. Output: Print a single integer – the minimum number of operations required to transform the string into a palindrome. Examples: Input 5 abcba Output 0 Input 3 abc Output 2 Input 4 aabb Output 1 Explanation: In the first example, the string is already a palindrome, so no operations are needed. In the second example, two operations are needed. One way is to insert \'b\' at the beginning and \'c\' at the end to make the string \\"cbabc\\". In the third example, one operation is needed. One way is to remove one \'b\' to make the string \\"aab\\" which can then be rearranged to a palindrome \\"aba\\" or \\"baa\\".","solution":"def min_operations_to_palindrome(n, s): Returns the minimum number of operations required to transform the given string into a palindrome. def lcs(x, y): Helper function to find the longest common subsequence m = len(x) n = len(y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] reverse_s = s[::-1] lcs_length = lcs(s, reverse_s) # Minimum operations to make the string palindrome return n - lcs_length"},{"question":"Write a function that takes an integer `n` as input and returns the smallest integer which is both greater than `n` and a prime number. Constraints: - ( 1 leq n leq 10^5 ) Input Input is given from standard input in the following format: ``` n ``` Output Print the smallest prime number that is greater than `n`. Examples Input ``` 10 ``` Output ``` 11 ``` Input ``` 14 ``` Output ``` 17 ```","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): Find the smallest prime number greater than n. num = n + 1 while not is_prime(num): num += 1 return num"},{"question":"You are provided with an array of integers. Your task is to create a balanced binary tree from this array and then perform in-order traversal on the tree. A balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differ by more than one. The in-order traversal of a binary tree is a traversal where for each node, the left subtree is fully processed before the node itself, and the node is processed before the right subtree. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array. # Output - Print an in-order traversal of the resulting balanced binary tree. # Example Input ``` 7 3 1 4 1 5 9 2 ``` Output ``` 1 1 2 3 4 5 9 ``` # Note To create a balanced binary tree from the array, first sort the array and then recursively choose the middle element as the root for each subtree. Perform in-order traversal on the resulting tree to get the elements in sorted order.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(nums): Convert sorted array to balanced binary search tree. if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sorted_array_to_bst(nums[:mid]) root.right = sorted_array_to_bst(nums[mid+1:]) return root def inorder_traversal(root): Perform inorder traversal on binary tree and return list of values. if root is None: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) def create_balanced_bst_and_inorder_traversal(arr): Create a balanced BST from the array and return its inorder traversal. sorted_arr = sorted(arr) bst_root = sorted_array_to_bst(sorted_arr) return inorder_traversal(bst_root)"},{"question":"You are given a sequence of n lowercase English letters. Your task is to determine whether you can form a palindrome by rearranging the letters in the sequence. A palindrome is a string that reads the same backward as forward. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a sequence of n lowercase English letters. -----Output----- Print \\"yes\\" (without quotes) if you can rearrange the letters to form a palindrome, otherwise print \\"no\\" (without quotes). -----Examples----- Input 3 aab Output yes Input 4 abca Output no Input 5 level Output yes -----Note----- In the first example, you can rearrange the sequence \\"aab\\" to form the palindrome \\"aba\\". In the second example, it is not possible to rearrange the sequence \\"abca\\" to form a palindrome. In the third example, the sequence \\"level\\" is already a palindrome, so no rearrangement is needed.","solution":"def can_form_palindrome(n, s): Determines if the given string s of length n can be rearranged to form a palindrome. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # At most one character can have an odd count for the string to be rearrangable into a palindrome return \\"yes\\" if odd_count <= 1 else \\"no\\""},{"question":"You are given a sequence of integers of length n. You need to find a subsequence of this sequence with length k that has the maximum possible sum of its elements. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You have to answer t independent test cases. -----Input----- The first line of input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k (1 le k le n le 2000). The second line of each test case contains n space-separated integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6). It is guaranteed that the sum of n over all test cases does not exceed 2000 (sum n le 2000). -----Output----- For each test case, print the sum of the maximum subsequence of length k. -----Example----- Input 3 5 3 1 2 3 4 5 6 2 -1 3 -2 4 -5 6 4 4 -1 -2 -3 -4 Output 12 10 -10 -----Note----- In the first test case of the example, the subsequence with the maximum sum of length 3 is [3, 4, 5] and its sum is 12. In the second test case of the example, the subsequence with the maximum sum of length 2 is [4, 6] and its sum is 10. In the third test case of the example, the only subsequence of length 4 is [-1, -2, -3, -4] and its sum is -10.","solution":"def max_subsequence_sum(t, test_cases): Given multiple test cases, each containing an array and a length k, find the sum of the subsequence with length k that has the maximum possible sum. results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] # Sort array in descending order sorted_arr = sorted(arr, reverse=True) # Take first k elements from sorted array and sum them max_sum = sum(sorted_arr[:k]) results.append(max_sum) return results"},{"question":"You are given an integer array A of size N. You can perform the following operation on the array A as many times as you like (possibly, zero times): 1. Select any two indices i and j (1 ≤ i < j ≤ N) such that A[i] is greater than A[j]. 2. Swap the elements at indices i and j. Is it possible to sort the array A in non-decreasing order using the above operation? ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each test case consists of two lines. - The first line of each test case contains a single integer N — the size of the array A. - The second line contains N space-separated integers — the elements of the array A. ------ Output Format ------ For each test case, print YES if it is possible to sort the array, else print NO. Each character of the output may be printed in either uppercase or lowercase. For example, the strings YES, yes, yeS, YeS will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} - The sum of N over all test cases won\'t exceed 10^{5}. ------ Sample Input 1 ------ 2 5 4 3 2 5 1 4 2 2 1 1 ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ Test case 1: The array can be sorted to [1, 2, 3, 4, 5] using the operation multiple times. Test case 2: It is impossible to sort the array into non-decreasing order since there are repeated values which restrict necessary swaps to achieve sorting.","solution":"def can_sort_array(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] if len(A) != len(set(A)): # The array has at least one duplicate results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"You are given a list of integers A of length N, and an integer X. Determine if there exist two distinct elements in A whose sum is exactly X. If such a pair exists, print \\"Yes\\". Otherwise, print \\"No\\". Constraints * 2 leq N leq 100 * 1 leq A[i] leq 1000 (1 ≤ i ≤ N) * 1 leq X leq 2000 Input Input is given from Standard Input in the following format: N A (a list of N integers) X Output Print \\"Yes\\" if there exist two distinct elements in A whose sum is exactly X. Otherwise, print \\"No\\". Examples Input 4 10 15 3 7 17 Output Yes Input 5 1 2 3 4 5 10 Output No Input 3 5 7 1 8 Output Yes","solution":"def has_pair_with_sum(A, X): Determines if there exist two distinct elements in list A whose sum is exactly X. seen = set() for number in A: if X - number in seen: return \\"Yes\\" seen.add(number) return \\"No\\""},{"question":"Jenna is a botanist working on a project involving plant growth. She has a set of potted plants lined up in a row, each requiring a specific amount of sunlight daily to thrive. The sunlight is measured in units and each plant has a different requirement which is represented in an array. Jenna can choose a continuous segment of plants to place in a special greenhouse where they receive enhanced sunlight. She wants to maximize the total sunlight requirement of the plants in the chosen segment so that the plants thrive the best. Given the array of sunlight requirements for the plants, determine the maximum possible total sunlight requirement for any continuous segment of the plants. Input The first input line contains an integer n (1 ≤ n ≤ 100), the number of potted plants. The second line contains n integers, indicating the sunlight required for each plant (−1000 ≤ each requirement ≤ 1000). The numbers on the line are space-separated. Output Print the single number which is the maximum possible total sunlight requirement of any continuous segment of plants. Examples Input 5 3 -2 5 -1 6 Output 11 Input 3 -3 -1 -2 Output -1","solution":"def max_sunlight_requirment(n, sunlight_requirements): Function to find the maximum possible total sunlight requirement for a continuous segment of plants. Args: n : int : number of potted plants. sunlight_requirements : List[int] : list of sunlight requirements for each plant. Returns: int : Maximum possible total sunlight requirement. # Initialize the variables to store the maximum sum and the current sum max_sum = float(\'-inf\') current_sum = 0 for requirement in sunlight_requirements: current_sum = max(requirement, current_sum + requirement) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Alyssa is studying prime numbers in her discrete mathematics class and has come across an interesting problem. She wants to create a program that finds all unique pairs of prime numbers (p, q) such that p < q and p + q = given even number n. Your task is to help Alyssa by writing a program that outputs all such pairs of prime numbers or indicates that no such pairs exist. **Input:** The input contains a single integer n (4 ≤ n ≤ 10^6), which is an even number. **Output:** In the first line, print the total number of unique pairs. In the next lines, print each pair (p, q) in any order, each pair on a new line. If there are no such pairs, print \\"No pairs found\\". Each pair should be formatted as \\"(p, q)\\". **Example:** - Input: ``` 10 ``` - Output: ``` 2 (3, 7) (5, 5) ``` - Input: ``` 18 ``` - Output: ``` 2 (5, 13) (7, 11) ``` - Input: ``` 8 ``` - Output: ``` 1 (3, 5) ```","solution":"def sieve(n): Return a list of primes up to n using Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def find_prime_pairs(n): Find all unique pairs of prime numbers (p, q) such that p < q and p + q = n. primes = sieve(n) prime_set = set(primes) pairs = [] for p in primes: q = n - p if q in prime_set and p <= q: pairs.append((p, q)) if pairs: print(len(pairs)) for pair in pairs: print(pair) else: print(\\"No pairs found\\")"},{"question":"Given an array of n integers, your task is to create a data structure that can efficiently support two types of operations: 1. Update the value of an element at a particular index. 2. Compute the sum of elements in a given range. The data structure should minimize the time complexity for both operations. You need to process q queries of these two types on this data structure. Input: - The first line contains two integers n (1 ≤ n ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial elements of the array. - The next q lines contain either one of the following queries: * \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) — update the element at index x to y. * \\"2 l r\\" (1 ≤ l ≤ r ≤ n) — compute the sum of the elements from index l to index r (inclusive). Output: - For each query of type \\"2 l r\\", output the sum of the elements in the range [l, r]. Example: Input: ``` 5 6 1 2 3 4 5 2 1 5 1 3 10 2 1 5 2 3 3 1 5 8 2 4 5 ``` Output: ``` 15 22 10 12 ``` Explanation: 1. The sum of elements from index 1 to 5 is 15. 2. After updating the element at index 3 to 10, the array becomes [1, 2, 10, 4, 5]. 3. The sum of elements from index 1 to 5 is now 22. 4. The sum of elements from index 3 to 3 is 10. 5. After updating the element at index 5 to 8, the array becomes [1, 2, 10, 4, 8]. 6. The sum of elements from index 4 to 5 is 12. Constraints: - Use data structures such as Fenwick Tree (Binary Indexed Tree) or Segment Tree to ensure that updates and queries are performed efficiently. - Aim for O(log n) time complexity for both types of operations.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def range_query(self, left, right): return self.query(right) - self.query(left - 1) class RangeSum: def __init__(self, arr): self.n = len(arr) self.arr = [0] * (self.n + 1) self.fenwick_tree = FenwickTree(self.n) # Initialize Fenwick Tree with the array values for i in range(1, self.n + 1): self.arr[i] = arr[i - 1] self.fenwick_tree.update(i, self.arr[i]) def update(self, index, value): index += 1 # Convert to 1-based index delta = value - self.arr[index] self.arr[index] = value self.fenwick_tree.update(index, delta) def range_sum(self, left, right): return self.fenwick_tree.range_query(left, right) # Function to process queries def process_queries(n, q, array, queries): result = [] range_sum_obj = RangeSum(array) for query in queries: query_type = query[0] if query_type == 1: # Update query _, index, value = query range_sum_obj.update(index - 1, value) elif query_type == 2: # Range sum query _, left, right = query sum_ = range_sum_obj.range_sum(left, right) result.append(sum_) return result"},{"question":"A movie streaming service needs help organizing its vast library for users to easily find movies by genre. To enhance the user experience, they want to implement a feature that lists all available genres and the movies corresponding to each genre in a given catalog. Your task is to write a program that processes a list of movies and their genres, and then outputs the available genres along with the movies corresponding to each genre sorted alphabetically by genre and then by movie title. Input The input consists of multiple lines, each representing a movie and its genre in the following format: > movie_name : genre Each \'movie_name\' and \'genre\' is a string of alphabetical characters (A-Z, a-z) and spaces, with no leading or trailing spaces. The length of each movie name and genre will be less than or equal to 50 characters. There are no duplicate movies in the input. The end of the input is indicated by a line containing \\"END\\". Output For each genre, your program should output the genre followed by the list of corresponding movies. The genres and movies should be sorted alphabetically. Each genre should begin on a new line, and each movie title should be indented by two spaces. Example Input The Godfather : Crime The Dark Knight : Action Pulp Fiction : Crime Fight Club : Drama Forrest Gump : Drama Inception : Action END Output Action Inception The Dark Knight Crime Pulp Fiction The Godfather Drama Fight Club Forrest Gump","solution":"def organize_movies_by_genre(movies): from collections import defaultdict genre_dict = defaultdict(list) for movie in movies: if movie == \\"END\\": continue movie_name, genre = movie.rsplit(\\" : \\", 1) genre_dict[genre].append(movie_name) sorted_genres = sorted(genre_dict.keys()) result = [] for genre in sorted_genres: result.append(genre) for mv in sorted(genre_dict[genre]): result.append(f\\" {mv}\\") return result"},{"question":"A large software company has decided to launch a new version of its operating system. To improve its file management capability, the company has introduced a new feature: the Overlapping Interval Merger (OIM). In this feature, a software needs to identify overlapping intervals in a file\'s metadata and merge them. An interval is defined as a pair of integers [start, end], representing the start and end points of an interval in the file. The task is to write a function that takes a list of intervals and returns a new list of intervals where all overlapping intervals have been merged. Two intervals [a, b] and [c, d] are considered overlapping if either of the conditions are satisfied: - (a leq d) and (b geq c) - (c leq b) and (d geq a) During the merging process, if two intervals overlap, they should be replaced with a new interval spanning the minimum start point and the maximum end point of the overlapping intervals. Input - An integer ( n ) (1 ≤ n ≤ 10^5) – the number of intervals. - A list of ( n ) intervals, each defined by two integers [ai, bi] (0 ≤ ai ≤ bi ≤ 10^9) representing the start and end points of the interval. Output - A list of intervals where all overlapping intervals have been merged. Each interval should be listed in non-decreasing order of the start points. It is guaranteed that the intervals are initially listed in non-decreasing order of their start points. Function Signature ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` Examples 1. Input ``` n = 3 intervals = [(1, 3), (2, 6), (8, 10)] ``` Output ``` [(1, 6), (8, 10)] ``` 2. Input ``` n = 4 intervals = [(1, 4), (4, 5), (3, 6), (7, 8)] ``` Output ``` [(1, 6), (7, 8)] ``` 3. Input ``` n = 2 intervals = [(1, 2), (3, 5)] ``` Output ``` [(1, 2), (3, 5)] ``` In the first sample, the intervals [1, 3] and [2, 6] overlap and are merged into [1, 6]. The interval [8, 10] remains unchanged as it does not overlap with any other interval. In the second sample, the intervals [1, 4], [4, 5], and [3, 6] all overlap and are merged into [1, 6]. The interval [7, 8] remains unchanged as it does not overlap with any other interval.","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: if not intervals: return [] merged_intervals = [intervals[0]] for current in intervals[1:]: prev_start, prev_end = merged_intervals[-1] current_start, current_end = current if current_start <= prev_end: merged_intervals[-1] = (prev_start, max(prev_end, current_end)) else: merged_intervals.append(current) return merged_intervals"},{"question":"You are given an array `a` of `n` integers and an integer `x`. Your task is to determine if there are any two distinct indices `i` and `j` such that `a[i] + a[j] = x`. Input The first line of the input contains two integers `n` and `x` (2 ≤ n ≤ 100, 1 ≤ x ≤ 10^6) — the number of elements in the array and the target sum. The second line contains `n` integers `a[1], a[2], ..., a[n]` (0 ≤ a[i] ≤ 10^6) — the elements of the array. Output Print \\"YES\\" (without quotes) if there are two distinct indices `i` and `j` such that `a[i] + a[j] = x`. Otherwise, print \\"NO\\". Examples Input 5 9 1 2 3 4 5 Output YES Input 4 8 3 8 1 2 Output NO Input 6 10 5 1 5 3 3 4 Output YES Note In the first example, you can choose the pair (4, 5), which add up to 9. In the second example, there is no pair of indices that add up to 8. In the third example, you can choose the pair (5, 5), which add up to 10.","solution":"def has_pair_with_sum(n, x, a): Checks if there are any two distinct indices i and j such that a[i] + a[j] = x. :param n: Number of elements in the array :param x: The target sum :param a: List of integers :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen = set() for number in a: if x - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"In a seemingly endless forest, there is a grid-like city populated by diligent ants. Each cell in the grid represents a possible location for the ants. Each ant can move to its adjacent cells vertically or horizontally within the grid. However, obstacles represented by some cells prevent the ants from moving to or through them. Your task is to find the number of unique paths the ants can take from the top-left corner of the grid (1,1) to the bottom-right corner (n,n), avoiding the obstacles. Input The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid (n x n). The next n lines each contain n characters: \'.\' indicating a free cell and \'#\' indicating an obstacle. Output One line indicating the number of unique paths from cell (1,1) to cell (n,n) avoiding obstacles. If there is no path, output 0. Examples Input 3 ... .#. ... Output 2 Input 3 ..# .#. ... Output 1 Input 3 ..# # ... Output 0 Notes For the first sample, the two possible paths are: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right For the second sample, the one possible path is: - Down -> Down -> Right -> Right For the third sample, there is no possible path as the obstacle blocks the way.","solution":"def unique_paths(grid): n = len(grid) if grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 dp = [[0]*n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1] def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) grid = [list(line) for line in lines[1:]] return grid"},{"question":"You are given a connected undirected graph G with n nodes and m edges. Each edge has a weight associated with it. Two players, Alice and Bob, are playing a game on this graph. They take turns choosing an edge and removing it from the graph. Alice always goes first. The player who makes the graph disconnected loses the game. Both players play optimally. Your task is to determine the maximum weight of an edge that could be the last edge picked before the graph becomes disconnected. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 4950) — the number of nodes and edges in the graph, respectively. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) — describing an edge between nodes u and v with weight w. -----Output----- Print a single integer — the maximum weight of an edge that could be the last edge picked before the graph becomes disconnected if both players play optimally. -----Examples----- Input 4 5 1 2 3 1 3 2 2 3 1 2 4 4 3 4 5 Output 4 Input 3 3 1 2 5 2 3 6 1 3 2 Output 5 -----Note----- In the first sample, the edge with weight 4 (between nodes 2 and 4) can be the last edge picked before the graph becomes disconnected. In the second sample, the edge with weight 5 (between nodes 1 and 2) can be the last edge picked before the graph becomes disconnected.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst_max_edge(n, edges): # Sorting edges based on weights edges.sort(key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_edges = [] for edge in edges: u, v, w = edge root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: mst_edges.append(edge) union(parent, rank, root_u, root_v) # The last (heaviest) edge added to the MST return mst_edges[-1][2] def get_max_last_edge_weight_before_disconnect(n, m, edge_list): edges = [(u-1, v-1, w) for u, v, w in edge_list] return kruskal_mst_max_edge(n, edges)"},{"question":"Given an array of integers, write a function to find the maximum sum of a non-empty subarray with the constraint that no two elements of the subarray are adjacent in the original array. Your function should return this maximum sum. Input format The input is given in the following format: N a_1 a_2 a_3 ... a_N Constraints * 1 ≤ N ≤ 10^5 * -10^4 ≤ a_i ≤ 10^4 Output format Output the maximum sum as a single integer. Example Input example 1 6 3 2 5 10 7 Output example 1 15 Input example 2 5 -2 1 3 -4 5 Output example 2 8 Explanation In the first example, the subarray [3, 10] or [2, 10] gives the maximum sum of 15. In the second example, the subarray [1, 3, 5] gives the maximum sum of 8.","solution":"def max_non_adjacent_sum(arr): Function to find the maximum sum of a non-empty subarray with the constraint that no two elements of the subarray are adjacent in the original array. if not arr: return 0 if len(arr) == 1: return arr[0] incl = 0 # Sum including the current element excl = 0 # Sum excluding the current element for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl) # Reading input function def read_input(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) arr = list(map(int, data[1:])) return arr # Main function if __name__ == \'__main__\': arr = read_input() print(max_non_adjacent_sum(arr))"},{"question":"You are given an array of integers and a target number. Your task is to determine if there are any two distinct elements in the array such that their product equals the given target number. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers representing the elements of the array (1 ≤ element ≤ 10^9). The third line contains a single integer, the target number (1 ≤ target ≤ 10^18). -----Output----- Print \\"YES\\" if there are two distinct elements in the array whose product equals the target number. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 8 Output YES Input 4 7 10 14 3 100 Output NO Input 6 5 15 3 10 20 2 30 Output YES -----Note----- In the first example, the product of 2 and 4 equals 8. In the second example, no two distinct elements can be multiplied to result in 100. In the third example, the product of 3 and 10 equals 30.","solution":"def has_pair_with_product(arr, target): Function to check if there\'s any pair of distinct elements in the array whose product equals the target number. # Convert list to set for better performance in lookups elements = set(arr) for num in arr: if target % num == 0: # Check if num could be part of a product pair complement = target // num if complement in elements and complement != num: return \\"YES\\" return \\"NO\\""},{"question":"A company stores user data and wants to keep track of active users within a specific time frame. Task: Write a function that accepts a list of timestamps representing user logins and a target time frame in minutes. The function should return the maximum number of active users within any time frame equal to the target time frame. Example: ``` timestamps - [1, 2, 3, 5, 8, 13, 21]; time_frame - 5; return - 4; // because the time frame from 1 to 5 minutes contains 4 logins: [1, 2, 3, 5] ``` Arguments: List of integers, timestamps (in minutes); Integer, time_frame (in minutes); When: the argument ```timestamps``` is empty, then return the message: \\"No user logins\\"; the argument ```time_frame <= 0```, then return the message: \\"Invalid time frame\\"; Good luck!","solution":"def max_active_users_in_timeframe(timestamps, time_frame): Returns the maximum number of active users within any time frame equal to the target time frame. :param timestamps: List of integers representing user login times in minutes :param time_frame: Integer representing the target time frame in minutes :return: The maximum number of active users or an appropriate error message if not timestamps: return \\"No user logins\\" if time_frame <= 0: return \\"Invalid time frame\\" timestamps.sort() max_active = 0 for i in range(len(timestamps)): count = 0 for j in range(i, len(timestamps)): if timestamps[j] <= timestamps[i] + time_frame: count += 1 else: break max_active = max(max_active, count) return max_active"},{"question":"Mandy loves solving array problems. She came across an interesting problem where she needs to perform a series of operations on a sequence of integers. Each operation is a command that specifies what she needs to do with the array. Help Mandy to solve these operations efficiently. COMMANDS: sumfirstk k -> Calculate the sum of the first k elements in the array. For example, if the array is [1, 2, 3, 4, 5] and the command is sumfirstk 3, the output should be 6 as 1+2+3=6. rotateleft n -> Rotate the array to the left by n positions. For example, if the array is [1, 2, 3, 4, 5] and the command is rotateleft 2, the output should be [3, 4, 5, 1, 2]. sortfirstm m -> Sort the first m elements of the array in non-decreasing order. For example, if the array is [3, 1, 2, 5, 4] and the command is sortfirstm 3, the output should be [1, 2, 3, 5, 4]. Mandy decides to write a program to make these transformations easier. Input FORMAT: The first line contains the array of integers separated by space. The next line contains an integer T which denotes the number of test cases. Next, T lines contain T commands to be performed one by one. Output Format: The output array after application of each command one by one. SAMPLE INPUT: 1 2 3 4 5 3 sumfirstk 3 rotateleft 2 sortfirstm 4 SAMPLE OUTPUT: 6 [3, 4, 5, 1, 2] [1, 3, 4, 5, 2]","solution":"def execute_commands(arr, commands): result = [] for command in commands: cmd, value = command.split() value = int(value) if cmd == \'sumfirstk\': result.append(sum(arr[:value])) elif cmd == \'rotateleft\': value %= len(arr) arr = arr[value:] + arr[:value] result.append(list(arr)) elif cmd == \'sortfirstm\': arr[:value] = sorted(arr[:value]) result.append(list(arr)) return result"},{"question":"Betty is working on organizing her music playlist for an upcoming event. She has a list of songs each with a certain duration and each song can either be a fast-paced song or a slow-paced song. Betty wants to create a playlist such that no more than k fast-paced songs and no more than k slow-paced songs play consecutively to prevent the audience from getting tired or bored. Betty cannot change the duration of the songs and must use all the songs in the sequence provided. Betty wants to know if she can create the playlist in such a way that it meets the above requirements of not having more than k consecutive fast-paced or slow-paced songs. # Input - The first line contains two integers n and k (1 leq n leq 3 cdot 10^5, 1 leq k leq 10^6) – where n is the number of songs and k is the maximum number of consecutive fast-paced or slow-paced songs allowed. - The second line contains n integers d_1, d_2, dots, d_n (1 leq d_i leq 10^6) – where d_i is the duration of the i-th song. - The third line contains n characters type_1, type_2, dots, type_n (\'F\' for fast-paced and \'S\' for slow-paced) – where type_i is the type of the i-th song. # Output Print \\"POSSIBLE\\" if Betty can arrange the songs in such a way that there are no more than k consecutive fast-paced or slow-paced songs. Otherwise, print \\"IMPOSSIBLE\\". # Examples Input 3 2 4 5 3 F S F Output POSSIBLE Input 4 1 2 3 5 6 F F S S Output IMPOSSIBLE # Note In the first example, one possible arrangement that meets the condition is: fast-paced, slow-paced, fast-paced. In the second example, it is impossible to arrange the songs to avoid having more than one consecutive fast-paced or slow-paced song.","solution":"def is_playlist_possible(n, k, durations, types): Check if a playlist can be created such that no more than k consecutive fast-paced or slow-paced songs play. :param n: The number of songs :param k: The maximum number of consecutive fast-paced or slow-paced songs allowed :param durations: The list of song durations :param types: The list of song types (\'F\' for fast-paced and \'S\' for slow-paced) :return: \\"POSSIBLE\\" if such a playlist can be arranged, otherwise \\"IMPOSSIBLE\\". count = 1 # to keep the count of the same type\'s consecutive songs for i in range(1, n): if types[i] == types[i - 1]: count += 1 if count > k: return \\"IMPOSSIBLE\\" else: count = 1 return \\"POSSIBLE\\""},{"question":"Amy is preparing for a party and wants to send custom invites to her friends. Help her by creating a function that generates a personalized invitation message based on some input criteria. The personalized message should follow these rules: 1. Amy will provide a template for the message. The template will have placeholders enclosed in curly braces `{}`. - Placeholders include `{name}`, `{date}`, `{time}`, and `{venue}`. 2. The input will be a dictionary containing the placeholders as keys and the corresponding replacement values. 3. If the template contains placeholders not present in the input dictionary, they should be left as they are. 4. Additionally, if the input dictionary contains a `RSVP` key set to `true`, the message should end with \\"Please RSVP.\\" 5. The placeholders can appear in any order and may appear more than once in the template. Write a function `generate_invite(template, details)` that takes in a template string and a details dictionary, and returns the personalized invitation message. # Function Signature ```python def generate_invite(template: str, details: dict) -> str: pass ``` # Input - `template` (str): A string containing the invitation template with placeholders. - `details` (dict): A dictionary with keys as placeholders (without curly braces) and values as their replacements. # Output - `str`: The personalized invitation message. # Example ```python template = \\"Hi {name}, you are invited to a party on {date} at {venue}. It starts at {time}.\\" details = { \\"name\\": \\"Alice\\", \\"date\\": \\"12th October\\", \\"time\\": \\"7 PM\\", \\"venue\\": \\"Wonderland\\", \\"RSVP\\": True } print(generate_invite(template, details)) ``` Output: ``` Hi Alice, you are invited to a party on 12th October at Wonderland. It starts at 7 PM. Please RSVP. ``` # Notes - Only include \\"Please RSVP\\" if the input dictionary contains an `RSVP` key set to True. - Ensure the function handles cases where some placeholders might not have corresponding values in the dictionary.","solution":"def generate_invite(template: str, details: dict) -> str: Generates a personalized invitation message based on the template and details provided. Parameters: template (str): A string containing the invitation template with placeholders. details (dict): A dictionary with keys as placeholders (without curly braces) and values as their replacements. Returns: str: The personalized invitation message. # Replace the placeholders in the template with actual details for key, value in details.items(): placeholder = \\"{\\" + key + \\"}\\" template = template.replace(placeholder, str(value)) # If details contains RSVP and it is set to True, add \\"Please RSVP\\" at the end if details.get(\\"RSVP\\", False): template += \\" Please RSVP.\\" return template"},{"question":"Constructing valid parenthetical expressions, or balanced parentheses, is a common problem in computer science. In this task, you will explore counting valid parenthetical expressions with a certain number of pairs. A well-formed parenthetical expression (or valid parentheses string) is defined as a string containing only characters `(` and `)`, where each opening parenthesis has a corresponding closing parenthesis and the pairs are properly nested. For example, the strings `()`, `(())`, `()()`, and `((()))` are all valid, while `)(`, `(()`, and `())(` are not valid. Given an integer n, your task is to determine the number of distinct well-formed parenthetical expressions that can be constructed using exactly n pairs of parentheses. # Input - The input consists of a single integer n (1 leq n leq 15). # Output - Output a single integer representing the number of distinct well-formed parenthetical expressions that can be constructed using exactly n pairs of parentheses. # Examples Sample Input 1 ``` 3 ``` Sample Output 1 ``` 5 ``` Sample Input 2 ``` 1 ``` Sample Output 2 ``` 1 ``` Sample Input 3 ``` 4 ``` Sample Output 3 ``` 14 ``` # Explanation In the first example, the 5 valid well-formed expressions using 3 pairs of parentheses are: ``` ((())), (()()), (())(), ()(()), ()()() ```","solution":"def num_valid_parentheses(n): from math import comb return comb(2 * n, n) // (n + 1)"},{"question":"Given an integer array of size N and a number K, your task is to determine whether there exist two elements in the array whose difference is exactly equal to K. Example 1: Input: N = 5, K = 3 arr[] = {1, 5, 3, 4, 2} Output: Yes Explanation: Pair (5, 2) has a difference of 3. Example 2: Input: N = 6, K = 10 arr[] = {1, 20, 14, 3, 6, 7} Output: No Explanation: No pair has a difference of 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPair() which takes the array arr[], its size n, and the integer k as inputs and returns true if there exists a pair with the given difference, else returns false. Expected Time Complexity: O(n log n) due to sorting, or better using hashing. Expected Auxiliary Space: O(n) if using additional data structures like set. Constraints: 1 <= N <= 10^5 1 <= K <= 10^6","solution":"def find_pair(arr, n, k): Returns True if there exists two elements in arr whose difference is exactly equal to k. Otherwise, returns False. # Using a set to store elements elements_set = set() for num in arr: if (num + k) in elements_set or (num - k) in elements_set: return True elements_set.add(num) return False"},{"question":"``` ------------------------------------------------------------------ [2047: a vision of code] It is the year 2047. The world runs on code and algorithms. You are tasked with improving the efficiency of the world\'s communication protocols by analyzing blocks of text and identifying patterns. Your task is... You will receive an array of strings such as: ``` messages = [\\"Message transmission initiated. [LOC:HN37]\\", \\"Transmission successful. [LOC:HQ29]\\", \\"Awaiting response from central server. [LOC:HN37]\\", \\"Data packet lost in transit. [LOC:FR56]\\"] ``` Each message contains a tag at the end in the format [LOC:XXNN], where X is a letter A-Z and N is a number 0-9 indicating the location of the event mentioned in the message. Your task is to count the number of messages from each unique location and group them together. Return a dictionary where the keys are the location tags and the values are the count of messages from those locations. For example, given the input above, the output should be: ``` { \\"LOC:HN37\\": 2, \\"LOC:HQ29\\": 1, \\"LOC:FR56\\": 1 } ``` Parse the array of messages, identify the location tags, and generate the count. Do ensure case insensitivity as location tags may appear in various cases. ```","solution":"import re from collections import defaultdict def count_messages_by_location(messages): Parse the array of messages, identify the location tags, and generate the count of messages from each location tag. location_counts = defaultdict(int) location_pattern = re.compile(r\\"[LOC:([A-Z0-9]+)]\\", re.IGNORECASE) for message in messages: match = location_pattern.search(message) if match: location_tag = match.group(1).upper() location_counts[location_tag] += 1 return dict(location_counts)"},{"question":"You are given a grid with H rows and W columns. Each cell of the grid contains a number representing the height of the cell. You can only move up, down, left, or right from a cell to an adjacent cell. You are currently standing on the cell at the top left corner of the grid, and your goal is to reach the bottom right corner of the grid. However, there is a constraint: you can only move to an adjacent cell if the height of the cell you are moving to is greater than or equal to the height of the cell you are currently standing on. Write a program that determines whether it\'s possible to reach the bottom right corner of the grid from the top left corner under the given constraint. -----Input----- The first line of the input contains two integers, H and W (1 ≤ H, W ≤ 1000), the number of rows and the number of columns in the grid. Each of the next H lines contains W integers, where the j-th integer in the i-th line represents the height of the cell in row i and column j (1 ≤ height ≤ 10^9). -----Output----- Output \\"YES\\" if it is possible to reach the bottom right corner from the top left corner following the given movement constraint. Otherwise, output \\"NO\\". -----Examples----- Input 3 3 1 2 3 2 3 3 1 3 4 Output YES Input 2 2 4 3 2 1 Output NO ------Note------ In the first example, you can follow the path from (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) where each move goes to a cell of equal or greater height. In the second example, there is no valid path from the top left to the bottom right under the given movement constraint.","solution":"def can_reach_bottom_right(H, W, grid): def is_valid_move(x, y, prev_height): return 0 <= x < H and 0 <= y < W and grid[x][y] >= prev_height def dfs(x, y): if x == H-1 and y == W-1: return True visited.add((x, y)) for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, grid[x][y]) and (nx, ny) not in visited: if dfs(nx, ny): return True return False visited = set() return \\"YES\\" if dfs(0, 0) else \\"NO\\" # Example usage: # H, W = 3, 3 # grid = [ # [1, 2, 3], # [2, 3, 3], # [1, 3, 4] # ] # print(can_reach_bottom_right(H, W, grid)) # Output: YES"},{"question":"A pharmaceutical company is developing a new type of pill that must be taken in a specific order to maximize its effectiveness. Each pill has a certain time window within which it must be taken after consuming the previous one. You are asked to write a program to determine the longest possible time duration within which all the pills can be consumed in the correct order. The sequence of pills and their respective time windows are given as an array. Each element in the array represents the time window (in minutes) within which the next pill should be taken after consuming the current one. Your task is to calculate the longest possible duration to take all the pills in sequence starting from the first pill. Input The input consists of multiple datasets. Each dataset has the following format: N t1 t2 ... tN The first line of each dataset contains an integer N (1 ≤ N ≤ 1000), which indicates the number of pills. The second line contains N integers ti (1 ≤ ti ≤ 100), which represent the time windows for the pills. The end of input is indicated by a line with a single zero. Output For each dataset, print the longest possible time duration to take all the pills in the correct order. Example Input 3 5 10 20 4 3 5 8 13 1 7 0 Output 35 29 7","solution":"def longest_duration(pill_windows): Calculate the longest possible duration to take all the pills in sequence. Parameters: pill_windows (list): A list of integers representing the time windows for the pills. Returns: int: The longest possible duration to take all the pills. if not pill_windows: return 0 return sum(pill_windows) def process_datasets(datasets): Processes multiple datasets and returns the longest possible durations for each dataset. Parameters: datasets (list): A list of datasets. Each dataset is represented as a list with the first element being the number of pills and the following elements being the time windows for the pills. Returns: list: A list of integers representing the longest possible durations for each dataset. results = [] for data in datasets: n = data[0] pill_windows = data[1:] results.append(longest_duration(pill_windows)) return results def main(input_data): Main function to process the input data and output the results. Parameters: input_data (str): A string representing the input data. Returns: list: A list of integers representing the longest possible durations for each dataset. lines = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break pill_windows = list(map(int, lines[i + 1].split())) datasets.append([n] + pill_windows) i += 2 return process_datasets(datasets)"},{"question":"Write a function that calculates the maximum profit from buying and selling a stock at most twice. You are given an array of prices where each element represents the stock price on a given day. You need to determine the maximum profit you can obtain by making at most two transactions. A transaction consists of buying and then subsequently selling the stock. You cannot engage in multiple transactions simultaneously, which means you must sell the stock before you buy again. ------ Input ------ - The first line contains an integer T representing the number of test cases. - For each test case, the first line contains an integer n representing the number of days. - The second line contains n space-separated integers where each integer represents the stock price on that day. ------ Output ------ For each test case, print a single integer — the maximum profit that can be achieved by making at most two transactions. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ n ≤ 10^5 0 ≤ text{prices}[i] ≤ 10^5 ----- Example ------ ----- Input ------ 2 7 3 3 5 0 0 3 1 4 5 1 2 3 4 5 ----- Output ------ 6 4 ----- Explanation ------ In the first test case, the maximum profit can be achieved by buying on day 3 and selling on day 5 and then buying on day 6 and selling on day 7. In the second test case, only one transaction is needed to achieve the maximum profit by buying on day 1 and selling on day 5.","solution":"def maxProfit(prices): n = len(prices) if n <= 1: return 0 # Initialize the variables to store the maximum profits profit1 = 0 profit2 = 0 lowest1 = prices[0] lowest2 = prices[0] for price in prices: lowest1 = min(lowest1, price) profit1 = max(profit1, price - lowest1) lowest2 = min(lowest2, price - profit1) profit2 = max(profit2, price - lowest2) return profit2 def solve_max_profit_multiple_cases(T, cases): results = [] for case in cases: n, prices = case results.append(maxProfit(prices)) return results"},{"question":"You are given N non-negative integers, and you are required to choose exactly two indices i and j (0 ≤ i, j < N), such that their product is maximal. Write a program to find the maximum product of two distinct numbers from the given list of integers. Input Format The first line contains an integer N, representing the number of integers. The second line contains N non-negative integers separated by spaces. Constraints 2 ≤ N ≤ 10^5 0 ≤ Integers ≤ 10^9 Output Format Output the maximum product of two distinct numbers. Sample Input 4 1 20 30 40 Sample Output 1200 Explanation The two maximum numbers are 30 and 40. Their product 30*40 = 1200, which is the highest possible product of any two distinct numbers in the list.","solution":"def max_product_of_two(numbers): Given a list of non-negative integers, returns the maximum product of two distinct numbers from the list. if len(numbers) < 2: raise ValueError(\\"There must be at least two numbers to calculate a product.\\") # Sorting in reverse order to get the two largest numbers efficiently numbers.sort(reverse=True) # Maximum product will be the product of the two largest numbers after sorting return numbers[0] * numbers[1]"},{"question":"In a music streaming application, a user can add songs to their playlist and the application shows a summary of the playlist duration in hours, minutes, and seconds. Implement a method to calculate the duration summary for a playlist represented by a list of songs. Each song is represented as a tuple with the duration in seconds. For example: ```python playlist = [(4, 35), (3, 50), (2, 45), (5, 20)] ``` In the above example, the playlist contains 4 songs with durations of 4 minutes 35 seconds, 3 minutes 50 seconds, 2 minutes 45 seconds, and 5 minutes 20 seconds respectively. Your task is to write a method that calculates the total duration of the playlist in the format: ```python (h hours, m minutes, s seconds) ``` If the total duration is exactly 1 hour or less than 1 minute, it should handle special cases such as \\"1 hour\\" or \\"59 seconds\\". For example: ```python playlist_summary([(4, 35), (3, 50), (2, 45), (5, 20)]) # returns \'0 hours, 16 minutes, 30 seconds\' playlist_summary([(2, 0)]) # returns \'2 minutes, 0 seconds\' playlist_summary([(60, 0)]) # returns \'1 hour\' playlist_summary([(120, 0)]) # returns \'2 hours\' playlist_summary([(0, 59)]) # returns \'59 seconds\' ``` To achieve this, you need to: 1. Implement the method `playlist_summary` that takes a list of song durations. 2. Calculate the total duration of all songs. 3. Convert the total duration in seconds to hours, minutes, and seconds format. 4. Properly format the output for special cases (e.g., exactly 1 hour, less than 1 minute).","solution":"def playlist_summary(playlist): Calculates the total duration of a playlist and returns it in hours, minutes, and seconds. total_seconds = 0 for minutes, seconds in playlist: total_seconds += (minutes * 60) + seconds hours = total_seconds // 3600 total_seconds %= 3600 minutes = total_seconds // 60 seconds = total_seconds % 60 if hours > 0: if hours == 1 and minutes == 0 and seconds == 0: return \'1 hour\' elif minutes == 0 and seconds == 0: return f\'{hours} hours\' if hours == 0 and minutes == 0: return f\'{seconds} seconds\' return f\'{hours} hours, {minutes} minutes, {seconds} seconds\'"},{"question":"Given an m x n matrix, where each element of the matrix represents the cost to step on that cell, find the minimum cost to go from the top-left cell to the bottom-right cell. You can only move right or down from a given cell. Create a program that finds this minimum path cost. **Input:** The first line of input contains two integers, m and n (1 ≤ m, n ≤ 1000), separated by a space. The next m lines each contain n integers representing the matrix where each integer is between 0 and 1000. **Output:** Output a single integer, the minimum cost to go from the top-left cell to the bottom-right cell of the matrix. **Example:** Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 7 ``` Explanation: The path with the minimum cost is 1 → 3 → 1 → 1 → 1, and the cost is 1 + 3 + 1 + 1 + 1 = 7.","solution":"def min_path_cost(matrix): Computes the minimum cost to move from the top-left to the bottom-right corner of the matrix only moving right or down. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = matrix[0][0] # Initialize top row for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Initialize left column for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1] def read_input_and_compute_min_cost(): import sys input = sys.stdin.read data = input().strip().split() m = int(data[0]) n = int(data[1]) matrix = [] index = 2 for i in range(m): row = [int(data[index + j]) for j in range(n)] matrix.append(row) index += n return min_path_cost(matrix)"},{"question":"Given a string containing only the characters \'{\', \'}\', \'(\', \')\', \'[\', and \']\', determine if the string is a valid bracket sequence. A string is considered valid if: 1. Each open bracket has a corresponding closing bracket of the same type. 2. Open brackets are closed in the correct order. Example 1: Input: s = \\"(){}[]\\" Output: true Explanation: The brackets are closed in the correct order for every type. Example 2: Input: s = \\"({[)]}\\" Output: false Explanation: The string has a mismatch with the order of the brackets. Example 3: Input: s = \\"{([])}\\" Output: true Explanation: The brackets are closed correctly for every type and order. Your Task: You don\'t need to read or print anything. Your task is to complete the function isValid() which takes a string s as input and returns a boolean value true if the given string is valid, otherwise false. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= s.length <= 10000","solution":"def isValid(s: str) -> bool: Returns True if the input string s is a valid bracket sequence, False otherwise. stack = [] mapping = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in mapping: top_element = stack.pop() if stack else \'#\' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Sarah is organizing a flower arrangement competition and she has a collection of different types of flowers. She wants to create bouquets such that each bouquet consists of exactly one type of flower. She would like to know how many distinct bouquets can be prepared. Each flower type in her collection can be used exactly once in a bouquet. Your task is to determine the number of distinct bouquets Sarah can prepare if each bouquet must use flowers of the same type. Input The input consists of a single integer F which indicates the number of different flower types. Output Output a single line containing the number of distinct bouquets that can be prepared. -----Examples----- Sample Input 1: 5 Sample Output 1: 5 Sample Input 2: 1 Sample Output 2: 1","solution":"def number_of_bouquets(F): Given the number of different types of flowers, returns the number of distinct bouquets that can be prepared if each bouquet must use flowers of the same type. return F"},{"question":"A gardener named Alice loves arranging her garden with different types of flowers. She likes to plant her flowers in a unique way such that they form visually appealing patterns. One day, she decided to create a circular pattern with her flowers. This pattern is designed by placing flowers in several geomantic positions. Each flower is represented by a vertex, and an edge between two vertices indicates that those flowers have a direct visual connection in the garden. Alice wants to know if it is possible to arrange her flowers such that the visual connections (edges) do not intersect when the flowers are placed on the circumference of a circle. If the visual connections intersect, the pattern wouldn\'t be visually appealing. Your task is to write a program to determine if her desired arrangement is possible. Input: - The first line contains the number of flowers `n` and the number of visual connections `m` (integers delimited by a space). - The next `m` lines each contain two integers, `u` and `v`, which represent a visual connection between flower `u` and flower `v`. - The values of `n` and `m` are such that `1 <= n <= 500` and `0 <= m <= 1000`. Output: - For each test case, output \\"yes\\" if it is possible to arrange the flowers on the circle without intersecting connections, and \\"no\\" otherwise. Example: Input: 4 4 1 2 2 3 3 4 4 1 5 6 1 2 1 3 2 5 2 4 4 5 5 1 3 0 0 0 Output: yes no yes","solution":"def is_non_intersecting(n, m, connections): This function checks if it\'s possible to arrange flowers in a circular pattern such that the visual connections do not intersect. n: int - number of flowers m: int - number of visual connections connections: List of tuples - each tuple contains two integers representing a connection returns: str - \'yes\' if the arrangement is possible, otherwise \'no\' if m == 0: return \\"yes\\" connections.sort() def intersect(uv1, uv2): u1, v1 = uv1 u2, v2 = uv2 return (u1 < u2 < v1 < v2) or (u2 < u1 < v2 < v1) for i in range(m): for j in range(i+1, m): if intersect(connections[i], connections[j]): return \\"no\\" return \\"yes\\""},{"question":"Let\'s optimize photo encoding You are working on an image processing application that takes photos and compresses them. As a part of your task, you need to write a function that finds the minimum size of a rectangular grid that can convey all the unique pixels in the photo. A photo is represented by an `m x n` grid of positive integers. Each integer represents a unique pixel. Your task is to determine the minimum size of a rectangular grid (r x c) that can contain all the unique pixel values in the photo. Constraints * 1 ≤ m, n ≤ 1000 * Each cell in the grid contains a unique integer in the range [1, 10^6] Input Format Input is given from standard input in the following format: m n a_1_1 a_1_2 ... a_1_n a_2_1 a_2_2 ... a_2_n . . . a_m_1 a_m_2 ... a_m_n Output Format Print the minimum size of the rectangular grid in the form of `r c` where r represents the number of rows and c represents the number of columns. Sample Input 1 3 3 1 2 3 4 5 6 7 8 9 Sample Output 1 3 3 Since all values from 1 to 9 are unique, the smallest grid can be 3x3. Sample Input 2 2 3 1 1 1 1 1 1 Sample Output 2 1 1 Here, all values are the same, so the smallest grid has a size of 1x1. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 3 3","solution":"def find_minimum_rectangular_grid(photo): Given an m x n grid containing unique integers representing pixels, this function finds the minimum size of a rectangular grid that can contain all the unique pixel values. unique_pixel_set = set() for row in photo: for pixel in row: unique_pixel_set.add(pixel) unique_pixel_count = len(unique_pixel_set) # Minimum grid size should be large enough to hold all unique pixels min_r = min_c = 1 while min_r * min_c < unique_pixel_count: if min_r <= min_c: min_r += 1 else: min_c += 1 return min_r, min_c if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) photo = [] idx = 2 for _ in range(m): row = list(map(int, data[idx:idx+n])) photo.append(row) idx += n min_r, min_c = find_minimum_rectangular_grid(photo) print(f\\"{min_r} {min_c}\\")"},{"question":"In a small town, there\'s a peculiar library with a strict organization system. The library consists of multiple shelves, each containing books with unique serial numbers. The books on each shelf are arranged in increasing order of their serial numbers from left to right. The librarian has the task of finding if a particular book with a given serial number exists in the library, and if it does, he needs to identify which shelf it\'s on. You are to write a program that helps the librarian by determining which shelf contains the book or if the book is not present in any shelf. The program should efficiently search through the shelves for the book. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 50), where `n` is the number of shelves in the library, and `m` is the maximum number of books each shelf can have. The next `n` lines describe the shelves, each line containing a sequence of up to `m` integers representing the serial numbers of the books on that shelf in increasing order. Each integer is between 1 and 1000. The last line contains an integer `q` (1 ≤ q ≤ 1000), which is the serial number of the book the librarian is looking for. Output Print the number of the shelf (1-based index) that contains the book with serial number `q`. If the book is not found, print `-1`. Example Input 3 4 100 200 300 400 5 15 25 50 60 70 80 60 Output 3 Input 4 5 1 2 3 4 10 20 30 100 200 300 400 500 5 15 25 35 45 35 Output 4 Input 2 3 15 20 25 100 200 300 30 Output -1","solution":"def find_book_on_shelf(n, m, shelves, q): Determines which shelf contains the book with the given serial number. Parameters: n (int): Number of shelves m (int): Maximum number of books per shelf (not used in the function) shelves (list): A list of lists, where each sublist contains serial numbers of books on a shelf q (int): The serial number of the book to find Returns: int: The 1-based index of the shelf containing the book, or -1 if not found for i, shelf in enumerate(shelves): if q in shelf: return i + 1 return -1"},{"question":"Check the Tutorial tab to know how to solve. You are given a list of integers and an integer textit{k}. Your task is to rotate the list to the right by textit{k} steps. Function Description Complete the rotate_list function in the editor below. rotate_list has the following parameters: list integers: a list of integers int k: the number of steps to rotate the list Returns list: a rotated list of integers Input Format The first line contains space-separated integers, the elements of the list. The second line contains the integer, textit{k}. Constraints 1 leq len(textit{integers}) leq 1000 1 leq textit{k} leq 1000 Sample Input 0 1 2 3 4 5 2 Sample Output 0 4 5 1 2 3","solution":"def rotate_list(integers, k): Rotates the list to the right by k steps. Parameters: integers (list): a list of integers k (int): the number of steps to rotate the list Returns: list: a rotated list of integers n = len(integers) k = k % n # to manage cases where k is greater than the length of the list return integers[-k:] + integers[:-k]"},{"question":"**Problem Statement** In the world of competitive programming, it is essential to analyze and optimize time-space complexity. This problem will test your ability to devise an efficient algorithm with a proper understanding of both time and space complexity. You\'re given a large number of events. Each event is represented by its start time and end time. You need to find the maximum number of non-overlapping events among them. An event represented by (s, e) where `s` is the start time and `e` is the end time. Two events (s1, e1) and (s2, e2) are considered non-overlapping if `e1 <= s2` or `e2 <= s1`. Write a function that takes a list of events, where each event is a tuple of two integers (start time, end time), and returns the maximum number of non-overlapping events that can be attended. # Input: - A list of tuples, where each tuple contains two integers representing the start and end time of an event. # Output: - An integer representing the maximum number of non-overlapping events. # Constraints: - The number of events `N` is such that 1 ≤ N ≤ 10^5. - Time for each event (start and end) is represented in a 24-hour format 0 ≤ s, e < 24, where `s` is less than `e`. # Example: Input: ```python [(1, 4), (2, 3), (3, 4), (5, 6)] ``` Output: ```python 3 ``` Explanation: You can attend the events (2, 3), (3, 4), and (5, 6) without any overlap. # Note: To solve this problem, it is advisable to leverage the greedy algorithm by sorting the events first based on their end times and then continually selecting events that do not overlap with the previously selected ones. This ensures maximum attendance without conflicts. Write your code and demonstrate its correctness by ensuring the output strictly adheres to the expected results. This problem not only evaluates your logic but also your efficiency in handling large datasets.","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events. Parameters: events (list of tuples): List of events where each event is represented as (start time, end time). Returns: int: The maximum number of non-overlapping events. # Sort events based on their end time events.sort(key=lambda x: x[1]) # Initialize variables to track the end time of the last event attended and count of events max_events = 0 last_end_time = 0 # Iterate over the events to find the maximum number of non-overlapping events for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"A farmer has a rectangular field divided into a grid of M rows and N columns. Each cell in the grid can either contain a crop or be empty. A crop can only grow to its full potential if it is surrounded by exactly three other crops in the North, South, East, or West directions (diagonals are not counted). The farmer wants to maximize the total number of fully grown crops in the field. Given the initial configuration of the field, determine the maximum number of fully grown crops that can be obtained by changing the status (crop or empty) of any number of cells in the field. Constraints - 1 ≤ M, N ≤ 50 Input The input is given from Standard Input in the following format: M N initial_grid Where `initial_grid` is an M by N grid represented by M lines, each containing N characters. A character is `\\"C\\"` for a crop and `\\".\\"` for an empty cell. Output Print the maximum number of fully grown crops that can be obtained. Example Input 3 3 C.C .C. C.C Output 4 Explanation Here\'s one possible configuration to maximize fully grown crops: C C C C . C C C C In this configuration, 4 crops (the middle one of each row and column) are fully grown.","solution":"def max_fully_grown_crops(M, N, initial_grid): Returns the maximum number of fully grown crops that can be obtained in a given MxN field by altering the field configuration. def count_adjacent(field, i, j): count = 0 if i > 0 and field[i-1][j] == \'C\': # North count += 1 if i < M-1 and field[i+1][j] == \'C\': # South count += 1 if j > 0 and field[i][j-1] == \'C\': # West count += 1 if j < N-1 and field[i][j+1] == \'C\': # East count += 1 return count # Fill the entire grid with crops grid = [[\'C\' for _ in range(N)] for _ in range(M)] # Count fully grown crops fully_grown_count = 0 for i in range(M): for j in range(N): if count_adjacent(grid, i, j) == 3: fully_grown_count += 1 return fully_grown_count # Example Usage if __name__ == \\"__main__\\": M, N = 3, 3 initial_grid = [\\"C.C\\", \\".C.\\", \\"C.C\\"] print(max_fully_grown_crops(M, N, initial_grid)) # Output should be 4"},{"question":"Create a function that takes a string as input and returns the length of the longest substring that contains at most two distinct characters. For example, given the string \\"eceba\\", the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. Similarly, for the string \\"ccaabbb\\", the longest substring is \\"aabbb\\", with a length of 5. Implement the function as follows: ```python def length_of_longest_substring_two_distinct(s: str) -> int: # Your code here pass ``` # Constraints - The input string will only contain English letters (both uppercase and lowercase). - The length of the input string will not exceed 10,000 characters. # Examples ```python print(length_of_longest_substring_two_distinct(\\"eceba\\")) # Output: 3 print(length_of_longest_substring_two_distinct(\\"ccaabbb\\")) # Output: 5 ``` Ensure that your function is efficient and handles edge cases well.","solution":"def length_of_longest_substring_two_distinct(s: str) -> int: from collections import defaultdict if not s: return 0 left = 0 max_len = 0 char_map = defaultdict(int) for right in range(len(s)): char_map[s[right]] += 1 # If the window contains more than 2 distinct characters while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a sequence of integers, which represent the daily temperatures in a given week. Your task is to find the number of strictly increasing subsequences of length 3 from this sequence. An increasing subsequence of length 3 is defined as three integers from the sequence satisfying the condition a[i] < a[j] < a[k] where 1 leq i < j < k leq n. For example, for the sequence [2, 5, 3, 4, 1, 6], the strictly increasing subsequences of length 3 are [2, 5, 6], [2, 3, 4], [2, 3, 6], [2, 4, 6], [3, 4, 6]. Your task is to implement a function that counts and returns the number of strictly increasing subsequences of length 3. -----Input----- The first line contains an integer n (3 le n le 1000), the length of sequence. The second line contains n integers, representing the temperatures in degrees Celsius. Each integer in the sequence is between -50 and 50. -----Output----- Print an integer, the number of strictly increasing subsequences of length 3. -----Examples----- Input 6 2 5 3 4 1 6 Output 5 Input 4 3 1 4 2 Output 0 Input 7 1 2 3 4 5 6 7 Output 35","solution":"def count_increasing_subsequences_of_length_3(n, temperatures): count = 0 for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if temperatures[i] < temperatures[j] < temperatures[k]: count += 1 return count"},{"question":"You are given a tree consisting of n nodes. A tree is a connected undirected graph with n-1 edges. Each node is labeled with a unique integer from 1 to n. The depth of a node in the tree is the number of edges from the node to the root (node 1). Your task is to find the maximum possible depth of the tree after performing exactly one operation. The operation is to select two nodes u and v and add a new edge between them, provided they are not already directly connected, and maintain the tree\'s properties by removing one of the existing edges such that you still have a valid tree structure afterward. Input The first line of the input contains an integer n (2 ≤ n ≤ 1000) — the number of nodes. Each of the next n-1 lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) – an edge between nodes ui and vi. Output Print a single integer — the maximum possible depth of the tree after performing the operation. Example Input 4 1 2 2 3 2 4 Output 2 Input 6 1 2 1 3 3 4 3 5 5 6 Output 4","solution":"from collections import defaultdict, deque def find_max_depth_after_operation(n, edges): def bfs(start_node): queue = deque([start_node]) depths = {start_node: 0} visited = {start_node} while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) depths[neighbor] = depths[node] + 1 return max(depths.values()), depths # Create adjacency list adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Perform BFS to find the farthest node from node 1 _, first_bfs_depths = bfs(1) farthest_node = max(first_bfs_depths, key=first_bfs_depths.get) # Perform BFS from the farthest node found max_depth, _ = bfs(farthest_node) return max_depth def max_possible_depth(n, edges): return find_max_depth_after_operation(n, edges)"},{"question":"**DESCRIPTION:** You are working on a project to generate different patterns using stars (`*`). Your current task is to produce a specific diamond pattern. The diamond must have a central width of `n` stars (where `n` is an odd integer), and it should be symmetric both horizontally and vertically. The diamond pattern should be formed such that the widest part of the diamond is `n` stars wide, and each row above and below the middle row should decrease symmetrically in width by 2 stars until reaching a single star at the top and bottom of the pattern. Finally, each line of the diamond should be centered within a string length of `n` characters using spaces as padding. For example, if `n` is 5, the widest part of the diamond will be 5 stars, and the topmost and bottommost part will be 1 star, centered within a 5-character wide string. **FUNCTION SIGNATURE:** ```python def generate_diamond(n: int) -> List[str]: ``` **EXAMPLES:** ``` generate_diamond(1) --> [\\"*\\"] generate_diamond(3) --> [\\" * \\", \\"***\\", \\" * \\"] generate_diamond(5) --> [\\" * \\", \\" *** \\", \\"*****\\", \\" *** \\", \\" * \\"] generate_diamond(7) --> [\\" * \\", \\" *** \\", \\" ***** \\", \\"*******\\", \\" ***** \\", \\" *** \\", \\" * \\"] ``` **RETURN:** Return your answer as a list of strings, where each string represents a single row of the diamond pattern. **NOTE:** - `n` is guaranteed to be an odd positive integer. - The total number of rows in the output list will be `n`.","solution":"def generate_diamond(n: int) -> list: Generates a symmetric diamond pattern centered horizontally with a width of n. lines = [] # Ensure n is odd as per problem statement middle = n // 2 # Construct the upper half of the diamond (including the middle) for i in range(middle + 1): spaces = \' \' * (middle - i) stars = \'*\' * (2 * i + 1) lines.append(spaces + stars + spaces) # Construct the lower half of the diamond for i in range(middle - 1, -1, -1): spaces = \' \' * (middle - i) stars = \'*\' * (2 * i + 1) lines.append(spaces + stars + spaces) return lines"},{"question":"Write a function `second_largest` that takes a list of integers as input and returns the second largest integer in the list. The list will have at least two unique integers. ```python # Example usage: second_largest([3, 1, 4, 1, 5, 9, 2, 6, 5]) # should return 6 ```","solution":"def second_largest(numbers): Returns the second largest integer in the list of numbers. Assumes the list has at least two unique integers. first, second = float(\'-inf\'), float(\'-inf\') for num in numbers: if num > first: first, second = num, first elif first > num > second: second = num return second"},{"question":"In Peacemont town, there\'s a popular festival game where players are given the task of arranging colored marbles into sequences. The objective is to find the longest contiguous subsequence within a given sequence of marbles where all marbles have the same color. Each marble is represented by an uppercase letter of the alphabet, where each letter corresponds to a different color. Write a function to help determine the length of the longest contiguous subsequence of marbles with the same color for each given sequence of marbles. Input The first line contains the number of test cases, T. The following T lines each contain a sequence of uppercase letters, representing the marbles. Output For each test case, output the length of the longest contiguous subsequence of marbles with the same color. Constraints: 1 ≤ T ≤ 100 1 ≤ length of the marble sequence ≤ 1000 SAMPLE INPUT 3 AABBBCC ABBACCC AABBBA SAMPLE OUTPUT 3 3 3 Explanation Input: AABBBCC Output: 3 The longest contiguous subsequence of marbles with the same color is \'BBB\', which has a length of 3. Input: ABBACCC Output: 3 The longest contiguous subsequence of marbles with the same color is \'CCC\', which has a length of 3. Input: AABBBA Output: 3 The longest contiguous subsequence of marbles with the same color is \'BBB\', which has a length of 3.","solution":"def longest_contiguous_subsequence_length(sequences): Given a list of sequences, returns the length of the longest contiguous subsequence of marbles with the same color for each sequence. max_lengths = [] for seq in sequences: max_length = 1 current_length = 1 for i in range(1, len(seq)): if seq[i] == seq[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) max_lengths.append(max_length) return max_lengths"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to determine the lengths of the longest contiguous subsequence for each character in the string. Return a dictionary where the keys are the letters in the string, and the values are the corresponding lengths of their longest contiguous subsequence. ```python # Examples s = \\"abcdddeee\\" # \'a\': 1, \'b\': 1, \'c\': 1, \'d\': 3, \'e\': 3 # return {\'a\': 1, \'b\': 1, \'c\': 1, \'d\': 3, \'e\': 3} s = \\"abbbccccc\\" # \'a\': 1, \'b\': 3, \'c\': 5 # return {\'a\': 1, \'b\': 3, \'c\': 5} s = \\"zzzyyyxxyz\\" # \'z\': 3, \'y\': 3, \'x\': 2 # return {\'z\': 3, \'y\': 3, \'x\': 2} ```","solution":"def longest_contiguous_subsequence_lengths(s): Returns a dictionary with the lengths of the longest contiguous subsequence for each character in the string s. max_lengths = {} current_char = \'\' current_length = 0 for char in s: if char == current_char: current_length += 1 else: if current_char: max_lengths[current_char] = max(max_lengths.get(current_char, 0), current_length) current_char = char current_length = 1 if current_char: max_lengths[current_char] = max(max_lengths.get(current_char, 0), current_length) return max_lengths"},{"question":"You are given a collection of unique numbers in an array. Determine if there is a subset of the array whose sum is equal to a given target number. For example, consider the array [3, 34, 4, 12, 5, 2] and target sum 9. There is a subset [4, 5] whose sum is 9. Write a program to find out whether such a subset exists for given array and target sum. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each test case contains two lines. The first line contains two integers N and S, where N is the size of the array and S is the target sum. The second line contains N integers separated by spaces representing the elements of the array. ------ Output ------ For each test case, print \\"YES\\" if there exists a subset with the given target sum, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10² 1 ≤ N ≤ 20 1 ≤ S ≤ 10³ 1 ≤ Array elements ≤ 100 ----- Sample Input 1 ------ 2 6 9 3 34 4 12 5 2 5 30 1 3 9 2 5 ----- Sample Output 1 ------ YES NO","solution":"def subset_sum_exists(arr, target): Determines if there exists a subset of `arr` that sums up to `target`. n = len(arr) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] return dp[n][target] def process_cases(T, cases): results = [] for case in cases: N, S, arr = case[\'N\'], case[\'S\'], case[\'arr\'] if subset_sum_exists(arr, S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a program to calculate the total expense for a group of friends going on a trip, where each friend contributes a certain amount of money. The program should be able to handle multiple test cases, with each test case representing a different group of friends. ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the number of friends in the group. - The next line contains N space-separated integers, where each integer represents the amount of money contributed by a friend. ------ Output Format ------ For each test case, output a single line containing the total amount of money contributed by all the friends in the group. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ text{contribution} ≤ 1000 ----- Sample Input 1 ------ 2 3 100 200 300 4 50 50 50 50 ----- Sample Output 1 ------ 600 200 ----- Explanation 1 ------ Test case 1: There are 3 friends contributing 100, 200, and 300 respectively. The total contribution is 600. Test case 2: There are 4 friends contributing 50 each. The total contribution is 200.","solution":"def total_expense(test_cases): Calculate the total expenses for multiple groups of friends each with different contributions. Parameters: test_cases (list): A list of tuples, each containing an integer (number of friends) and a list of integers (contributions for each friend). Returns: list: A list of integers where each integer is the total contribution for each test case. results = [] for (n, contributions) in test_cases: results.append(sum(contributions)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) contributions = list(map(int, input_lines[index + 1].strip().split())) test_cases.append((N, contributions)) index += 2 return test_cases"},{"question":"You are given a list of employees, where each employee has a unique ID, a name, and a salary. Your task is to generate a report that includes only the employees whose salary is greater than or equal to a given threshold. The report should list the employees in descending order of their salaries. If multiple employees have the same salary, they should be listed in ascending order of their IDs. INPUT First line contains an integer N, the number of employees. Next N lines contain three pieces of information: an integer ID, a string Name, and an integer Salary for each employee. The last line contains an integer S, the salary threshold. OUTPUT Print the employees whose salary is greater than or equal to the threshold sorted by the conditions mentioned. Each employee should be printed on a new line with format: \\"ID Name Salary\\". Constraints 1 ≤ N ≤ 10000 1 ≤ ID ≤ 10000 1 ≤ Salary ≤ 1000000 1 ≤ S ≤ 1000000 SAMPLE INPUT 5 1 Alice 5000 2 Bob 3000 3 Charlie 7000 4 David 7000 5 Eve 4000 6000 SAMPLE OUTPUT 3 Charlie 7000 4 David 7000","solution":"def filter_and_sort_employees(employees, salary_threshold): Filters and sorts the employees based on the salary threshold. Employees with salary >= salary_threshold are listed in descending order of salary. If multiple employees have the same salary, they are listed in ascending order of their ID. :param employees: a list of employee tuples where each tuple is (ID, Name, Salary) :param salary_threshold: the minimum salary threshold :return: a list of employees that meet the salary threshold condition filtered_employees = [employee for employee in employees if employee[2] >= salary_threshold] sorted_employees = sorted(filtered_employees, key=lambda x: (-x[2], x[0])) return sorted_employees # Example usage employees = [ (1, \'Alice\', 5000), (2, \'Bob\', 3000), (3, \'Charlie\', 7000), (4, \'David\', 7000), (5, \'Eve\', 4000) ] salary_threshold = 6000 result = filter_and_sort_employees(employees, salary_threshold) for emp in result: print(f\\"{emp[0]} {emp[1]} {emp[2]}\\")"},{"question":"You are tasked with developing an application for a transportation company that handles bookings for rideshares. To ensure that each ride is efficiently filled, without exceeding the vehicle capacity, the company wants to create an algorithm that matches passengers to a vehicle such that the total weight of passengers does not exceed the vehicle capacity. Write a program to help the company determine optimal grouping of passengers based on their weights. -----Input----- The input consists of two parts: 1. An integer C indicating the capacity of the vehicle (1 leq C leq 1000). 2. A list of integers W representing the weights of individual passengers (1 leq |W| leq 1000, 1 leq W_i leq 100 for each weight W_i). -----Output----- Output a list of lists, where each inner list represents a group of passengers that will ride in the same vehicle. The total weight of each group must not exceed the vehicle capacity C. If there are multiple valid solutions, any one of them will be accepted. If it is not possible to group the passengers without exceeding the vehicle\'s capacity, output an empty list. -----Example----- Sample Input: 100 [20, 30, 50, 70, 90, 10] Sample Output: [ [90, 10], [70, 30], [50, 20] ]","solution":"def group_passengers(C, W): Groups passengers such that the total weight of each group does not exceed the vehicle capacity C. Parameters: C (int): The capacity of the vehicle. W (list of int): The weights of the individual passengers. Returns: list of list of int: A list of groups, where each group contains weights of passengers that sum up to at most C. W.sort(reverse=True) # Sort weights in descending order for easier grouping. groups = [] while W: current_group = [] current_weight = 0 i = 0 while i < len(W): if current_weight + W[i] <= C: current_weight += W[i] current_group.append(W.pop(i)) else: i += 1 if not current_group: return [] # If no passengers can be grouped without exceeding capacity. groups.append(current_group) return groups"},{"question":"Given an integer array and an integer k, determine whether the array contains two distinct elements that sum up to k. Example: Input: ``` arr = [10, 15, 3, 7] k = 17 ``` Output: ``` YES ``` Explanation: In the sample input, the integers 10 and 7 sum up to 17. Function Description Complete the function `hasPairWithSum` in the editor below. `hasPairWithSum` has the following parameter(s): - `int[] arr`: an array of integers - `int k`: the target sum Returns: - `string`: either \\"YES\\" or \\"NO\\" Input Format: The first line contains an integer n, the number of test cases. The following 2 cdot n lines are as follows: - The first line of each test case contains an integer m, the size of the array. - The second line of each test case contains m space-separated integers representing the elements of the array. - The third line of each test case contains an integer k, the target sum. Constraints: - 1 leq n leq 10 - 1 leq m leq 10^5 - -10^9 leq arr[i] leq 10^9 - -10^9 leq k leq 10^9 Output Format: For each test case, return \\"YES\\" if the array contains two distinct elements that sum up to k, otherwise return \\"NO\\". Sample Input: ``` 2 4 10 15 3 7 17 5 1 2 3 9 11 8 ``` Sample Output: ``` YES NO ``` Explanation: In the first test case, the integers 10 and 7 sum up to 17. In the second test case, no two distinct elements sum up to 8.","solution":"def hasPairWithSum(arr, k): Determines whether the array contains two distinct elements that sum up to k. Parameters: arr (list of int): An array of integers. k (int): The target sum. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". complements = set() for number in arr: if k - number in complements: return \\"YES\\" complements.add(number) return \\"NO\\" def solve(test_cases): results = [] for i in range(0, len(test_cases), 2): arr = test_cases[i] k = test_cases[i + 1] results.append(hasPairWithSum(arr, k)) return results"},{"question":"A Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, typically starting with `0` and `1`. That is, `F(0) = 0`, `F(1) = 1`, and `F(n) = F(n-1) + F(n-2)` for `n > 1`. Your task is to write a function that finds and returns the nth Fibonacci number. The function should take one integer input `n` and return the nth Fibonacci number. Assume that `n` is a non-negative integer. # Examples * `n = 0` will return `0` * `n = 1` will return `1` * `n = 10` will return `55` # Additional Note Efficiency matters. Try to optimize your solution for larger values of `n`. ---","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a program that determines the number of ways to distribute m identical candies into k distinct jars such that each jar can have zero or more candies. For example, there are five ways to distribute four candies into two jars: * 4, 0 * 3, 1 * 2, 2 * 1, 3 * 0, 4 Note: The distribution doesn\'t need to be ordered. For example, 1, 3 is considered the same as 3, 1. Constraints: * 1 ≤ k ≤ 50 * 0 ≤ m ≤ 100 Input: The input consists of multiple datasets. For each dataset, two integers k and m are given in a line. The input ends with two zeros for k and m respectively. Your program should not process these terminal symbols. Output: For each dataset, print the number of ways of distributing the candies in a line. Example: Input: 2 4 0 0 Output: 5","solution":"def distribute_candies(k, m): Returns the number of ways to distribute m candies into k jars. from math import comb # Using combination with repetition: (m + k - 1) choose (k - 1) return comb(m + k - 1, k - 1) def process_inputs(inputs): Processes multiple datasets of k and m and returns the results for each dataset in a list. results = [] for k, m in inputs: if k == 0 and m == 0: break results.append(distribute_candies(k, m)) return results"},{"question":"Given a list of integers, determine if the list contains any duplicates or not. If the list contains one or more duplicates, return \\"YES\\". Otherwise, return \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n space-separated integers, which can be positive or negative and do not exceed absolute value 100. Output Output \\"YES\\" if there are duplicates in the list, otherwise output \\"NO\\". Examples Input 6 12 34 -5 12 6 7 Output YES Input 4 -1 -2 -3 -4 Output NO","solution":"def has_duplicates(n, lst): Determines if the list contains any duplicates. Args: n : int : number of elements in the list lst : list of int : list of integers Returns: str : \\"YES\\" if there are duplicates, otherwise \\"NO\\" if len(set(lst)) < n: return \\"YES\\" else: return \\"NO\\""},{"question":"Maria is writing a novel and wants to analyze the words she has used in her manuscript. A \\"word\\" is defined as a sequence of consecutive lowercase Latin letters. Maria wants to find out the longest word(s) in terms of length that she has used in her manuscript. If there are multiple words of the same maximum length, she needs to find all of them and present them in the order they first appear in the manuscript. Additionally, Maria wants to know what the maximum length of the words is. Write a function that will help Maria with this task by taking as input a string representing her manuscript and outputting the length of the longest word(s) and the list of such words in the order they appear in the manuscript. Input The input is a single string consisting of n characters (1 ≤ n ≤ 10^6). The string contains lowercase Latin letters and other characters (such as punctuation and spaces). Output The first line should contain an integer l, the length of the longest word(s). The second line should contain all the longest words separated by a single space, in the order they first appear. SAMPLE INPUT the_quick_brown_fox_jumps_over_the_lazy_dog SAMPLE OUTPUT 5 quick brown jumps In the sample input, \\"quick\\", \\"brown\\", and \\"jumps\\" are the longest words with a length of 5. They appear in the order \\"quick\\", \\"brown\\", \\"jumps\\" in the manuscript.","solution":"import re def find_longest_words(manuscript): Given a manuscript, this function returns the length of the longest word(s) and a list of such words in the order they first appear in the manuscript. # Extract words using regex words = re.findall(r\'[a-z]+\', manuscript) # Find the longest length max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) # Collect all words with the maximum length longest_words = [word for word in words if len(word) == max_length] return (max_length, longest_words)"},{"question":"You are given n unique strings representing objects lined up in a single row. Your task is to determine how many ways there are to rearrange these objects so that no two objects starting with the same letter are next to each other. Input The first line contains one integer n (1 ≤ n ≤ 10^2) — the number of objects. The next n lines each contain one string, where each string is no longer than 100 characters and consists only of lowercase English letters. It is guaranteed that all strings are unique. Output Print one integer — the number of ways to rearrange the objects so that no two objects starting with the same letter are adjacent. If it\'s impossible to do so, print 0. Examples Input 4 apple banana cherry date Output 24 Input 3 pear peach plum Output 0 Note In the first example, there are no objects starting with the same letter, so all 4! = 24 permutations are valid. In the second example, any arrangement will have at least two objects starting with \'p\' next to each other, making it impossible to form a valid arrangement.","solution":"from itertools import permutations def count_valid_permutations(strings): n = len(strings) if n == 1: return 1 first_chars = [s[0] for s in strings] if len(set(first_chars)) < n: return 0 valid_permutations = 0 for perm in permutations(strings): valid = True for i in range(1, n): if perm[i][0] == perm[i-1][0]: valid = False break if valid: valid_permutations += 1 return valid_permutations"},{"question":"A software company has developed a new text editor that tracks every single change made to a document. Each change is represented by a command that either adds a new character to the end of the current text or removes the last character from it. To facilitate the history of user actions, they\'ve stored these commands sequentially in a log. The company now wants a new feature that can determine the final text from the sequence of these commands. Write a program that processes a series of commands and outputs the final text. Input - The first line contains an integer n (1 ≤ n ≤ 100), the number of commands. - The next n lines each contain a command. There are two types of commands: - \\"ADD x\\" (where x is a single character) which adds the character x to the end of the text. - \\"REMOVE\\" which removes the last character of the text. The text will always have at least one character when this command is issued. Output Print the final text after all commands have been processed. Example Input 7 ADD a ADD b ADD c REMOVE ADD d REMOVE REMOVE Output a Note The input commands add the characters \'a\', \'b\', and \'c\' to the text. The \'REMOVE\' command then removes the last character (which is \'c\'). Adding \'d\' after that and then removing twice leaves only the character \'a\' in the text.","solution":"def process_commands(n, commands): text = [] for command in commands: if command.startswith(\\"ADD\\"): _, char = command.split() text.append(char) elif command == \\"REMOVE\\": text.pop() return \\"\\".join(text)"},{"question":"Given an integer N, generate a list of palindromic numbers between 1 and N (inclusive). A palindromic number is a number that remains the same when its digits are reversed. Example 1: Input: N = 15 Output: 1 2 3 4 5 6 7 8 9 11 Explanation: The palindromic numbers between 1 and 15 are 1, 2, 3, 4, 5, 6, 7, 8, 9, and 11. Example 2: Input: N = 100 Output: 1 2 3 4 5 6 7 8 9 11 22 33 44 55 66 77 88 99 Explanation: The palindromic numbers between 1 and 100 are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, and 99. Your Task: You don\'t need to read input. Your task is to complete the function palindromicNumbers() which takes an integer N as input and returns a list of integers. Expected Time Complexity: O(d), where d is the number of digits in the given integer N. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5","solution":"def palindromicNumbers(N): Returns a list of palindromic numbers between 1 and N inclusive. def is_palindrome(num): return str(num) == str(num)[::-1] palindromic_list = [i for i in range(1, N + 1) if is_palindrome(i)] return palindromic_list"},{"question":"You are working on a warehouse management system where orders need to be fulfilled by picking items from shelves. The warehouse consists of multiple shelves, each containing multiple items. Each item has a specific weight and value. Given the weight capacity of a cart used for picking items, your goal is to maximize the total value of items picked without exceeding the weight capacity. Each order is characterized by an integer k - the number of items to be picked, and the weight capacity w of the cart. The available items are described by their weights and values. Your task is to determine the maximum value of items that can be picked for each order without exceeding the weight capacity of the cart. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of items in the warehouse and the number of orders, respectively. Each of the following n lines contains two integers wi and vi (1 ≤ wi, vi ≤ 1000) — the weight and value of the i-th item. Each of the following m lines contains two integers ki and wi (1 ≤ ki ≤ n; 1 ≤ wi ≤ 10000) — the number of items to be picked and the weight capacity of the cart for the i-th order. Output For each order, print an integer - the maximum value of items that can be picked without exceeding the weight capacity of the cart. Example Input 5 2 2 3 3 4 4 5 5 6 6 7 3 10 2 5 Output 12 7 Note In the first test sample, the optimal items to pick for the first order are items with weight-value pairs (2, 3), (3, 4), and (4, 5), yielding a total value of 12 without exceeding the weight capacity of 10. In the second test sample, the optimal items to pick for the second order are items with weight-value pairs (3, 4) and (2, 3), yielding a total value of 7 without exceeding the weight capacity of 5.","solution":"def knapsack(values, weights, n, W): dp = [0] * (W + 1) for i in range(n): for w in range(W, weights[i] - 1, -1): dp[w] = max(dp[w], dp[w - weights[i]] + values[i]) return dp[W] def max_values_for_orders(n, m, items, orders): results = [] for k, w in orders: values = [item[1] for item in items[:k]] weights = [item[0] for item in items[:k]] max_value = knapsack(values, weights, k, w) results.append(max_value) return results def main(n, m, items, orders): return max_values_for_orders(n, m, items, orders)"},{"question":"A company is planning to develop a new software system that handles large amounts of data. One of the crucial features is to efficiently search for patterns within this data. You have been assigned to implement a function that performs pattern matching. The task is to write a function that implements the Knuth-Morris-Pratt (KMP) string matching algorithm. The function should take two input strings, `text` and `pattern`, and return a list of starting indices where `pattern` occurs in `text`. If the pattern is not found in the text, the function should return an empty list. # Function Signature ```python def kmp_search(text: str, pattern: str) -> List[int]: pass ``` # Input - `text` (string): The text in which to search for the pattern. It is guaranteed to be non-empty and of length up to 100000 characters. - `pattern` (string): The pattern to search for. It is guaranteed to be non-empty and of length up to 1000 characters. # Output - A list of integers representing the starting indices of all occurrences of `pattern` in `text`. # Example ```python text = \\"ababcabcabababd\\" pattern = \\"ababd\\" print(kmp_search(text, pattern)) # Output: [10] text = \\"aaaaa\\" pattern = \\"aa\\" print(kmp_search(text, pattern)) # Output: [0, 1, 2, 3] ``` # Notes - The function should be optimized for high performance and leverage the KMP algorithm\'s linear-time complexity. - Consider edge cases such as empty text or pattern strings, even though they will not be part of the test data. - Your implementation should handle cases where the `pattern` has repeated subsequences efficiently.","solution":"from typing import List def kmp_search(text: str, pattern: str) -> List[int]: if not text or not pattern: return [] def compute_lps(pattern: str) -> List[int]: Compute the longest prefix suffix (LPS) array used by KMP algorithm. lps = [0] * len(pattern) length = 0 # length of the previous longest prefix suffix i = 1 while i < len(pattern): if pattern[i] == pattern[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps lps = compute_lps(pattern) result = [] i = 0 # index for text j = 0 # index for pattern while i < len(text): if pattern[j] == text[i]: i += 1 j += 1 if j == len(pattern): result.append(i - j) j = lps[j - 1] elif i < len(text) and pattern[j] != text[i]: if j != 0: j = lps[j - 1] else: i += 1 return result"},{"question":"A group of friends has decided to play a game where they stand in a circle and count off in a specific pattern. The pattern follows these steps: 1. Starting with a designated player, they count off from 1 up to a given number k. 2. Every time they reach k, the person designated by this count leaves the circle. 3. The counting then resumes from the next person in the circle. Your task is to determine who the last person remaining in the circle is, given the number of friends and the count-off number. Input The input string contains two space-separated integers n and k (1 ≤ n, k ≤ 1000) — the number of friends standing in the circle and the count-off number. Output Print the 1-based position of the last person remaining in the circle. Examples Input 5 2 Output 3 Input 7 3 Output 4 Note In the first example, the friends are standing in positions 1 through 5. They start counting off from position 1: - Person at position 2 leaves. - Remaining sequence: 1, 3, 4, 5 - Person at position 4 leaves. - Remaining sequence: 1, 3, 5 - Person at position 1 leaves. - Remaining sequence: 3, 5 - Person at position 5 leaves. - Remaining sequence: 3 So, the last person remaining is at position 3. In the second example, the sequence progresses as follows: - Person at position 3 leaves. - Remaining sequence: 1, 2, 4, 5, 6, 7 - Person at position 6 leaves. - Remaining sequence: 1, 2, 4, 5, 7 - Person at position 2 leaves. - Remaining sequence: 1, 4, 5, 7 - Person at position 5 leaves. - Remaining sequence: 1, 4, 7 - Person at position 1 leaves. - Remaining sequence: 4, 7 - Person at position 7 leaves. - Remaining sequence: 4 So, the last person remaining is at position 4.","solution":"def last_remaining(n, k): Determines the last person remaining in the circle given n friends and count-off number k. Parameters: n (int): The number of friends standing in the circle. k (int): The count-off number. Returns: int: The 1-based position of the last person remaining in the circle. circle = list(range(1, n + 1)) index = 0 while len(circle) > 1: index = (index + k - 1) % len(circle) circle.pop(index) return circle[0]"},{"question":"You are engaged by a telecommunications company to help optimize their mobile network. The network consists of n cell towers (numbered from 1 to n) and m communication links (numbered 1 to m) connecting pairs of cell towers. Each communication link has a bandwidth capacity and a distance associated with it. The company wants to ensure that there exists a direct communication link between every pair of cell towers. You need to determine if it is possible to optimize the network such that the sum of the bandwidth capacities of all selected links is maximized, while ensuring that the total distance does not exceed a given limit. Input The first line of input contains three integers n, m, and D (2 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^5, 1 ≤ D ≤ 10^9), representing the number of cell towers, the number of communication links, and the maximum total distance allowed, respectively. Each of the next m lines contains four integers u, v, c, and d (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c, d ≤ 10^6), where u and v are the cell towers connected by the link, c is the bandwidth capacity, and d is the distance of the link. Output Print \\"Possible\\" (without quotes) if it\'s feasible to optimize the network with the given constraints and \\"Impossible\\" (without quotes) otherwise. If possible, print a single integer representing the maximum sum of bandwidth capacities. If there are multiple solutions, print any. Examples Input 5 6 20 1 2 15 5 1 3 10 3 1 4 5 7 2 3 7 8 2 5 17 6 4 5 20 4 Output Possible 64 Input 4 4 10 1 2 10 3 1 3 8 4 2 4 7 5 3 4 5 3 Output Impossible Note In the first example, the company can select links with indices 1, 2, 5, and 6 with total bandwidth 15+10+17+20 = 62 and a total distance 5+3+6+4 = 18, which is within the maximum distance limit of 20. In the second example, there is no way to connect all towers directly while keeping the total distance within the limit.","solution":"import heapq def optimize_network(n, m, D, links): def kruskal(): parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False # sorting links by bandwidth capacity in descending order links.sort(key=lambda x: (-x[2], x[3])) total_bandwidth = 0 total_distance = 0 selected_edges = 0 for u, v, c, d in links: if union(u - 1, v - 1): total_bandwidth += c total_distance += d selected_edges += 1 if selected_edges == n - 1: break if selected_edges == n - 1 and total_distance <= D: return total_bandwidth else: return \\"Impossible\\" return kruskal()"},{"question":"You have a sequence of integers from 1 to n listed in increasing order. Your task is to find out whether the product of all these integers, when divided by 2 raised to the power of the number of these integers, is an integer or not. That is, given a number n, check if Product(1, 2, ldots, n) / 2^n is an integer. Write a function that determines if the result is an integer or not. Input format The input is a single integer n. Output format Print \\"Yes\\" if the result is an integer, otherwise print \\"No\\". Constraints 1 ≤ n ≤ 10^9 SAMPLE INPUT 5 SAMPLE OUTPUT No Explanation Product(1, 2, 3, 4, 5) = 120 2^5 = 32 120 / 32 is not an integer, therefore the output is \\"No\\".","solution":"def is_integer_when_divided_by_power_of_two(n): Determines if the product of all integers from 1 to n, divided by 2^n, is an integer. # Simply, if n > 1, the product will have fewer factors of 2 than 2^n, # except for when n = 1. return \\"Yes\\" if n == 1 else \\"No\\""},{"question":"Design an algorithm that takes an array of integers and returns the length of the longest subsequence such that all elements of the subsequence are consecutive integers. The consecutive numbers can be in any order within the original array. # Input - The first line contains an integer n — the number of elements in the array (1 leq n leq 10^5). - The second line contains n integers, the elements of the array (-10^6 leq text{element} leq 10^6). # Output - Output a single integer, the length of the longest subsequence of consecutive integers. # Examples Input 10 1 9 3 10 4 20 2 2 2 1 Output 4 Input 6 8 20 7 30 9 6 Output 4 Input 5 1 3 5 7 9 Output 1 # Explanation In the first example, the longest subsequence of consecutive integers is [1, 2, 3, 4]. In the second example, the longest subsequence of consecutive integers is [6, 7, 8, 9]. In the third example, the longest subsequence of consecutive integers has length 1, as no two elements form a consecutive sequence.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence of consecutive integers. if not arr: return 0 unique_elements = set(arr) longest_streak = 0 for num in unique_elements: if num - 1 not in unique_elements: current_num = num current_streak = 1 while current_num + 1 in unique_elements: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function to generate a \\"diagonal pattern\\" matrix. The function should accept two arguments, an integer n (size of the matrix), and a character ch (the character to fill the diagonal). The matrix should be an n x n grid with the given character filling the main diagonal from the top-left to bottom-right corner, and underscores (\'_\') filling all other positions. Example: ```python diagonal_matrix(4, \'X\') Output: [ [\'X\', \'_\', \'_\', \'_\'], [\'_\', \'X\', \'_\', \'_\'], [\'_\', \'_\', \'X\', \'_\'], [\'_\', \'_\', \'_\', \'X\'] ] ``` If n is 1: ```python diagonal_matrix(1, \'A\') Output: [ [\'A\'] ] ``` The function should return a 2D list representing the matrix. The main diagonal is filled with the given character, and all other positions are filled with underscores. Some more examples: ```python diagonal_matrix(3, \'*\') Output: [ [\'*\', \'_\', \'_\'], [\'_\', \'*\', \'_\'], [\'_\', \'_\', \'*\'] ] diagonal_matrix(5, \'#\') Output: [ [\'#\', \'_\', \'_\', \'_\', \'_\'], [\'_\', \'#\', \'_\', \'_\', \'_\'], [\'_\', \'_\', \'#\', \'_\', \'_\'], [\'_\', \'_\', \'_\', \'#\', \'_\'], [\'_\', \'_\', \'_\', \'_\', \'#\'] ] ```","solution":"def diagonal_matrix(n, ch): Generates a n x n matrix with the given character filling the main diagonal positions. Args: - n: int, size of the matrix - ch: char, character to fill the diagonal Returns: - 2D list with the given character filling the main diagonal and underscores in other positions. matrix = [[\'_\' for _ in range(n)] for _ in range(n)] for i in range(n): matrix[i][i] = ch return matrix"},{"question":"A company wants to create a simple authentication system. You are tasked with building a function that verifies a user\'s password based on given criteria. Each criterion is represented as a string command and must be performed in the order given. Implement the function `verify_password(password, criteria)` which takes two arguments: 1. `password` (a string): the password to be verified. 2. `criteria` (a list of strings): a list of commands specifying verification criteria. The function should return `True` if the password meets all the criteria, otherwise it should return `False`. The criteria commands can include: - `\\"min_length <number>\\"`: The password must be at least `<number>` characters long. - `\\"max_length <number>\\"`: The password must be no more than `<number>` characters long. - `\\"has_digit\\"`: The password must contain at least one digit. - `\\"has_upper\\"`: The password must contain at least one uppercase letter. - `\\"has_lower\\"`: The password must contain at least one lowercase letter. - `\\"no_special\\"`: The password must not contain any special characters (non-alphanumeric). Assume that the criteria are well-formed and provided in a valid format. Example 1: ```python password = \\"Pass123\\" criteria = [\\"min_length 6\\", \\"has_digit\\", \\"has_upper\\", \\"has_lower\\"] output = verify_password(password, criteria) # Expected Output: True ``` Example 2: ```python password = \\"password\\" criteria = [\\"min_length 8\\", \\"has_digit\\", \\"has_upper\\", \\"no_special\\"] output = verify_password(password, criteria) # Expected Output: False # Explanation: The password lacks an uppercase letter and contains no digits. ``` Your task is to implement the function `verify_password()` that processes the given password against the list of criteria and returns a boolean result indicating whether the password is valid. Function Signature: ```python def verify_password(password: str, criteria: List[str]) -> bool: pass ``` For constraints: - 1 <= len(password) <= 100 - 1 <= len(criteria) <= 10","solution":"def verify_password(password, criteria): Verifies if the password meets all the given criteria. Args: password (str): The password to be verified. criteria (list of str): List of commands specifying verification criteria. Returns: bool: True if the password meets all criteria, False otherwise. import string for criterion in criteria: if \'min_length\' in criterion: min_length = int(criterion.split()[1]) if len(password) < min_length: return False elif \'max_length\' in criterion: max_length = int(criterion.split()[1]) if len(password) > max_length: return False elif criterion == \'has_digit\': if not any(char.isdigit() for char in password): return False elif criterion == \'has_upper\': if not any(char.isupper() for char in password): return False elif criterion == \'has_lower\': if not any(char.islower() for char in password): return False elif criterion == \'no_special\': if any(char in string.punctuation for char in password): return False return True"},{"question":"You are given a string consisting of lowercase English letters. A string is considered \\"good\\" if no two adjacent characters are the same. Your task is to determine the minimum number of characters that need to be removed from the string to make it \\"good\\". ------ Input ------ The first line of the input contains a single integer T — the number of test cases. The description of T test cases follows. For each test case, there is one line containing a single string s. ------ Output ------ For each test case, print a single integer — the minimum number of characters that need to be removed to make the string \\"good\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |s| ≤ 100 ----- Sample Input 1 ------ 3 abb aaab ababa ----- Sample Output 1 ------ 1 2 0 ----- Explanation 1 ------ Example case 1: - We have \\"abb\\". We can remove one \'b\' to get \\"ab\\", which is \\"good\\". Example case 2: - We have \\"aaab\\". We can remove two \'a\'s to get \\"ab\\", which is \\"good\\". Example case 3: - We have \\"ababa\\". It is already \\"good\\", so no removal is required.","solution":"def min_removals_to_make_good(s): Calculates the minimum number of characters that need to be removed to make the string \'good\'. A string is considered \'good\' if no two adjacent characters are the same. Params: s : str : input string Returns: int : minimum removals needed removals = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: removals += 1 return removals def solve(test_cases): Processes multiple test cases to determine the minimum number of removals for each case. Params: test_cases : List[str] : list of input strings for each test case Returns: List[int] : list of minimum removals for each test case results = [] for s in test_cases: results.append(min_removals_to_make_good(s)) return results"},{"question":"A company has a warehouse with limited space and needs to decide how to maximize the value of items it stores. Each item has a value and a weight, and the total weight of items stored in the warehouse cannot exceed a given limit. Write an algorithm to determine the maximum total value of items that can be stored without exceeding the weight limit. The warehouse manager should be able to input the weight limit of the warehouse, the number of different items, and the list of items along with their respective weights and values. Input The first line contains an integer W (1 ≤ W ≤ 1000) — the weight limit of the warehouse. The second line contains an integer N (1 ≤ N ≤ 100) — the number of different items. Each of the next N lines contains two integers v and w (1 ≤ v, w ≤ 100) — the value and weight of the item respectively. Output Output one integer — the maximum total value of the items that can be stored in the warehouse without exceeding the weight limit. Examples Input 50 3 60 10 100 20 120 30 Output 220 Input 10 2 100 10 90 10 Output 100","solution":"def knapsack(weight_limit, items): Computes the maximum total value of items that can be stored without exceeding the weight limit. :param weight_limit: Integer, the weight limit of the warehouse. :param items: List of tuples, where each tuple contains (value, weight) of an item. :return: Integer, the maximum total value of items. N = len(items) dp = [[0] * (weight_limit + 1) for _ in range(N + 1)] for i in range(1, N + 1): v, w = items[i - 1] for j in range(weight_limit + 1): if w <= j: dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w] + v) else: dp[i][j] = dp[i - 1][j] return dp[N][weight_limit] # Example to manually test before running unit tests weight_limit = 50 number_of_items = 3 items = [(60, 10), (100, 20), (120, 30)] print(knapsack(weight_limit, items)) # Output: 220"},{"question":"You are given a grid with N rows and M columns filled with non-negative integers. The grid represents a landscape where each cell has a height value. Your task is to find the maximum area of a rectangular region in the grid, such that all the cells in the region have the same height. ------ Input Format ------ - The first line of input contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M — the number of rows and columns in the grid. - The next N lines contain M space-separated integers each, representing the height values of the cells in the grid. ------ Output Format ------ For each test case, output a single integer: the maximum area of a rectangular region in the grid where all cells have the same height. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 50 0 ≤ text{Grid}[i][j] ≤ 100 ------ Sample Input 1 ------ 2 3 3 1 2 1 2 2 2 1 2 1 4 5 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ------ Sample Output 1 ------ 3 20 ------ Explanation 1 ------ Test case 1: - The maximum area with the same height is 3 (a 1x3 rectangle or a 3x1 rectangle). Test case 2: - The entire grid has the same height of 3, so the maximum area is 4x5 = 20.","solution":"def max_rect_area(grid, N, M): Function to find the maximum area of a rectangular region in the grid where all cells have the same height. max_area = 0 for height in range(101): # Since heights are between 0 and 100 # Transform the grid into a binary matrix where 1 represents cells with the current height binary_matrix = [[1 if grid[i][j] == height else 0 for j in range(M)] for i in range(N)] max_area = max(max_area, max_histogram_area(binary_matrix, N, M)) return max_area def max_histogram_area(matrix, N, M): Given a binary matrix, find the maximum rectangular area formed by 1s. max_area = 0 height = [0] * M for i in range(N): for j in range(M): if matrix[i][j] == 1: height[j] += 1 else: height[j] = 0 max_area = max(max_area, largest_rectangle_area(height)) return max_area def largest_rectangle_area(heights): Function to find the largest rectangle area in a histogram. stack, max_area = [], 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area def process_input_and_find_max_areas(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N, M = map(int, input_lines[index].split()) index += 1 grid = [list(map(int, input_lines[index + i].split())) for i in range(N)] index += N result = max_rect_area(grid, N, M) results.append(result) return results"},{"question":"You are given a list of integers A of length n. You need to find all unique triplets a, b, c in A such that a + b + c = 0. Constraints * 1 leq n leq 1000 * -10^5 leq A[i] leq 10^5 Input The input is given in the following format. n A_0 ; A_1 ; ... ; A_{n-1} n is the length of the list A, and A_i represents the i^{th} element of the list. Output Print all unique triplets in the following format. a ; b ; c Each triplet should be printed in ascending order, with the smallest element appearing first. The printed triplets should be ordered first by the minimum value, then by the second minimum value, and finally by the third minimum value. Each triplet should be printed on a new line. Example Input 5 -1 0 1 2 -1 Output -1 -1 2 -1 0 1","solution":"def find_triplets_with_sum_zero(n, A): A.sort() triplets = set() for i in range(n): left = i + 1 right = n - 1 while left < right: current_sum = A[i] + A[left] + A[right] if current_sum == 0: triplets.add((A[i], A[left], A[right])) left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 sorted_triplets = sorted(list(triplets)) result = \\"n\\".join(\\" \\".join(map(str, triplet)) for triplet in sorted_triplets) return result # To read and process input data if __name__ == \\"__main__\\": n = int(input().strip()) A = list(map(int, input().strip().split())) print(find_triplets_with_sum_zero(n, A))"},{"question":"You are given an array `A` containing `N` integers, where some elements might repeat. You need to write a program to find all the *unique* triplets `(a, b, c)` such that `a + b + c = 0` and `a, b, c` belong to the array `A`. Output each triplet in ascending order and the triplets themselves should appear in ascending order based on their first element, then second element, and lastly, third element. If no such triplet exists, output an empty list `[]`. ------ Input ------ The first line contains an integer `T`, number of test cases. For each test case: - The first line contains an integer `N`. - The second line contains `N` space-separated integers denoting the elements of the array `A`. ------ Output ------ For each test case, output all unique triplets that sum to zero in the specified order. ------ Constraints ------ 1 ≤ T ≤ 10 3 ≤ N ≤ 10^3 -10^5 ≤ A[i] ≤ 10^5 ------ Sample Input ------ 2 6 -1 0 1 2 -1 -4 5 -1 -1 -1 2 -1 ------ Sample Output ------ [[-1, -1, 2], [-1, 0, 1]] [[-1, -1, 2]] ------ Explanation ------ For the first test case, there are two unique triplets which sum to zero and are output in sorted order. For the second test case, only one unique triplet sum to zero.","solution":"def three_sum_zero(A): Returns all unique triplets (a, b, c) such that a + b + c = 0 in the array A. Each triplet is sorted in ascending order, and triplets themselves are sorted. A.sort() triplets = [] n = len(A) for i in range(n): if i > 0 and A[i] == A[i - 1]: continue # skip duplicates left, right = i + 1, n - 1 while left < right: total = A[i] + A[left] + A[right] if total == 0: triplets.append([A[i], A[left], A[right]]) while left < right and A[left] == A[left + 1]: left += 1 while left < right and A[right] == A[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return triplets def solve(test_cases): results = [] for case in test_cases: N, A = case results.append(three_sum_zero(A)) return results"},{"question":"Write a program that checks if two given rectangles overlap. The rectangles are aligned with the coordinate axes. Each rectangle is defined by its bottom-left and top-right corners. Constraints * All coordinates are integers between -10^3 and 10^3 Input Eight integers x1_1, y1_1, x2_1, y2_1, x1_2, y1_2, x2_2, y2_2 separated by a single space are provided in a line. Here, (x1_1, y1_1) and (x2_1, y2_1) are the bottom-left and top-right coordinates of the first rectangle, and (x1_2, y1_2) and (x2_2, y2_2) are the bottom-left and top-right coordinates of the second rectangle. Output Print \\"Yes\\" if the rectangles overlap, otherwise print \\"No\\". Examples Input 0 0 2 2 1 1 3 3 Output Yes Input 0 0 1 1 2 2 3 3 Output No","solution":"def does_overlap(x1_1, y1_1, x2_1, y2_1, x1_2, y1_2, x2_2, y2_2): Determines if two rectangles overlap. Each rectangle is defined by its bottom-left and top-right corners. Returns \\"Yes\\" if the rectangles overlap, otherwise \\"No\\". if (x1_1 >= x2_2 or x2_1 <= x1_2 or y1_1 >= y2_2 or y2_1 <= y1_2): return \\"No\\" return \\"Yes\\""},{"question":"A company wants to send an email reminder to customers who have not logged into their accounts for \'N\' days or more. They also want to know how many customers fall into this category. Write a function called `send_reminders` that takes two arguments: a list of tuples, where each tuple represents a customer\'s username and the number of days since their last login, and an integer \'N\' which represents the threshold number of days. The function should return a list of usernames of customers who have not logged in for \'N\' days or more and the count of these users. Example 1: Input: customers = [(\\"alice\\", 10), (\\"bob\\", 5), (\\"carol\\", 20)], N = 7 Output: ([\\"alice\\", \\"carol\\"], 2) Example 2: Input: customers = [(\\"dave\\", 1), (\\"eve\\", 15), (\\"frank\\", 9)], N = 10 Output: ([\\"eve\\"], 1) Example 3: Input: customers = [(\\"george\\", 0), (\\"hannah\\", 3)], N = 5 Output: ([], 0) Constraints: 1. The length of customers will be between 1 and 1000. 2. The number of days since the last login for each customer will be a non-negative integer between 0 and 1000. 3. The value of N will be a non-negative integer.","solution":"def send_reminders(customers, N): Returns a tuple containing a list of usernames who have not logged in for \'N\' days or more and the count of these users. :param customers: a list of tuples, where each tuple represents a customer\'s username and the number of days since their last login :param N: an integer representing the threshold number of days :return: a tuple (list of usernames, count of these users) usernames = [username for username, days in customers if days >= N] return usernames, len(usernames)"},{"question":"Develop a program to solve the following problem: You are provided with a list of operations describing stock market transactions for a fictional stock. Each transaction indicates either a \\"buy\\" or a \\"sell\\" action along with an integer value representing the number of shares bought or sold. Calculate the net number of shares the investor holds after all transactions are processed. The transactions are provided as a sequence of strings, where each string starts with \\"buy\\" or \\"sell\\", followed by a space, and then an integer value. The value represents the number of shares bought or sold in that transaction. Write a program that reads the list of transactions and calculates the investor\'s net share count. Input The input consists of multiple lines. Each line contains a string describing a transaction in the format \\"action value\\". Output Print a single integer representing the net number of shares held by the investor after all transactions are processed. Examples Input buy 100 sell 30 buy 50 sell 20 Output 100 Input buy 200 buy 300 sell 100 Output 400 Input sell 150 buy 200 sell 50 Output 0","solution":"def calculate_net_shares(transactions): This function calculates the net number of shares held by the investor after all transactions are processed. Each transaction is a string in the format \\"action value\\", where action can be \\"buy\\" or \\"sell\\" and value is an integer representing the number of shares bought or sold. Parameters: transactions (list of str): List of transaction strings. Returns: int: Net number of shares held by the investor. net_shares = 0 for transaction in transactions: action, value = transaction.split() value = int(value) if action == \\"buy\\": net_shares += value elif action == \\"sell\\": net_shares -= value return net_shares"},{"question":"Given an array containing n distinct integers, find the element that appears only once in the array, while every other element appears exactly twice. Implement a function to identify this unique element. Example 1: Input: Array: [2, 3, 5, 4, 5, 3, 4] Output: 2 Example 2: Input: Array: [14, 12, 13, 12, 13, 14, 15, 16, 15] Output: 16 Your Task: Complete the function findUnique(), which takes an array as an argument and returns the unique element that appears only once. You need to ensure that the function operates in linear time O(n) and uses constant auxiliary space O(1). Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^5 1 <= value of elements <= 10^5","solution":"def findUnique(arr): Returns the unique element that appears only once in the array, while every other element appears exactly twice. The solution works in linear time O(n) and constant auxiliary space O(1). unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"```if-not:racket Write a function named `find_odd_occurrence` that takes a list of integers as input and returns the element that occurs an odd number of times in the list. Assume there is always exactly one element that occurs an odd number of times. ``` ```if:racket Write a function named `find-odd-occurrence` that takes a list of integers as input and returns the element that occurs an odd number of times in the list. Assume there is always exactly one element that occurs an odd number of times. ```","solution":"def find_odd_occurrence(arr): Given a list of integers, return the element that occurs an odd number of times. Assume there\'s always exactly one such element. result = 0 for number in arr: result ^= number return result"},{"question":"Given an array of integers representing a list of gifts and their prices, determine how many distinct dollar amounts can be made by summing the prices of some subset of the gifts. Each gift can only be used once. Example n = 4 prices = [3, 4, 2, 1] We can make dollar amounts 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, and 10 distinct amounts. Function Description Complete the `distinctDollarAmounts` function in the editor below. `distinctDollarAmounts` has the following parameter: - `int n`: the number of gifts. - `int prices[n]`: the prices of the gifts. Returns - `int`: the number of distinct dollar amounts that can be made. Input Format The first line contains an integer n, the number of gifts represented in `prices`. The second line contains n space-separated integers, prices[i], the prices of each gift. Constraints 1 leq n leq 20 1 leq prices[i] leq 50 where 0 leq i < n Sample Input STDIN Function ----- -------- 4 n = 4 3 4 2 1 prices = [3, 4, 2, 1] Sample Output 11 Explanation With the given set of prices, the distinct dollar amounts that can be made are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, and 10, which totals to 11 distinct amounts.","solution":"def distinctDollarAmounts(n, prices): Determine the number of distinct dollar amounts that can be made by summing the prices of some subset of the gifts. Args: n (int): the number of gifts. prices (list of int): the prices of the gifts. Returns: int: the number of distinct dollar amounts that can be made. # Use a set to store the distinct dollar amounts possible_sums = {0} for price in prices: new_sums = set() for psum in possible_sums: new_sums.add(psum + price) possible_sums.update(new_sums) return len(possible_sums)"},{"question":"Given a sorted array of distinct integers, write a function that creates a Binary Search Tree (BST) with minimal height from the array. You need to return the root node of the generated BST. Example 1: Input: Array: [1, 2, 3, 4, 5, 6, 7] Output: A BST which has minimal height and follows the rules of Binary Search Tree: 4 / 2 6 / / 1 3 5 7 Example 2: Input: Array: [10, 20, 30, 40, 50] Output: A BST which has minimal height and follows the rules of Binary Search Tree: 30 / 20 40 / 10 50 Your Task: Your task is to complete the function sortedArrayToBST() which takes the sorted array as the input parameter and returns the root node of the created Binary Search Tree. Constraints: 1 <= Number of elements in the array <= 1000 Expected Time Complexity: O(N). Expected Auxiliary Space: O(N).","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sortedArrayToBST(nums): Creates a binary search tree with minimal height from a sorted array of distinct integers. :param nums: List[int], the sorted input array :return: TreeNode, the root of the generated BST if not nums: return None mid = len(nums) // 2 root = TreeNode(nums[mid]) root.left = sortedArrayToBST(nums[:mid]) root.right = sortedArrayToBST(nums[mid+1:]) return root"},{"question":"# Unique Character String Generator Write a method that generates the first `n` character-long string that contains all unique characters from the English alphabet. The English alphabet contains 26 characters: ``` abcdefghijklmnopqrstuvwxyz ``` The method should generate a sequence where no characters repeat until all characters of the alphabet have been used. After all characters are used, subsequent sequences should start again from the first character in the order of appearance. For example: - For `n = 1`: The output would be \\"a\\". - For `n = 5`: The output would be \\"abcde\\". - For `n = 27`: The output would be \\"abcdefghijklmnopqrstuvwxyzA\\". - For `n = 30`: The output would be \\"abcdefghijklmnopqrstuvwxyzABCD\\". Write a method `unique_string_generator(n)` that will take an integer `n` and output a string of length `n` as described. Example: ``` unique_string_generator(5) # => \\"abcde\\" unique_string_generator(27) # => \\"abcdefghijklmnopqrstuvwxyzA\\" unique_string_generator(30) # => \\"abcdefghijklmnopqrstuvwxyzABCD\\" ```","solution":"def unique_string_generator(n): Generates the first n character-long string that contains all unique characters from the English alphabet. alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" result = [] full_repeats = n // 26 remainder = n % 26 result.extend(alphabet * full_repeats) result.extend(alphabet[:remainder]) return \\"\\".join(result)"},{"question":"You are given an array of integers. You can perform the following operation any number of times: - Choose any two elements of the array and replace both with their sum. Your task is to determine whether it is possible to make all elements of the array equal. Input Format - The first line contains an integer, mathbf{T}, representing the number of test cases. - For each test case, the first line contains an integer, mathbf{N}, the number of elements in the array. - The second line contains mathbf{N} space-separated integers representing the elements of the array. Constraints 1 leq T leq 100 2 leq N leq 10^5 1 leq A[i] leq 10^9 Output Format For each test case, print YES if it is possible to make all elements in the array equal, otherwise print NO. Sample Input 2 3 1 1 2 4 2 2 4 4 Sample Output NO YES Explanation In the first test case, it is not possible to make all elements equal because any operation will involve 1 and 2, resulting in an odd sum, and none of the operations can make all elements identical eventually. In the second test case, we can perform the following operations: (2, 2) becomes (4, 4); (4, 4) becomes (8, 8); and thus all elements can eventually be made equal.","solution":"def can_make_all_elements_equal(arr): Determine if it is possible to make all elements of the array equal by repeatedly replacing any two elements with their sum. # If the count of distinct elements in array is 1, they are already equal. if len(set(arr)) == 1: return \\"YES\\" # If there\'s more than one distinct element and at least one element is odd, # we can never make all elements even or all elements odd simultaneously. has_odd = any(x % 2 == 1 for x in arr) has_even = any(x % 2 == 0 for x in arr) if has_odd and has_even: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(can_make_all_elements_equal(arr)) return results"},{"question":"You are given an array of n integers. Your task is to determine if there exists a subset of this array such that the sum of the subset is exactly equal to a given integer S. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Each of the next t test cases consists of two lines: - The first line contains two integers n and S (1 le n le 100, 1 le S le 10^9) — the number of elements in the array and the required sum. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10000) — the elements of the array. -----Output----- For each test case, print \\"YES\\" if there exists a subset with sum equal to S and \\"NO\\" otherwise. -----Example----- Input 3 5 9 3 34 4 12 5 3 30 1 5 10 4 11 1 2 5 6 Output YES NO YES -----Note----- In the first test case, the subset {4, 5} has the sum 9. In the second test case, no subset of {1, 5, 10} can sum up to 30. In the third test case, the subset {5, 6} has the sum 11.","solution":"def subset_sum_exists(n, S, array): Determines if there exists a subset of the array such that the sum of the subset is exactly equal to S. Uses dynamic programming approach to solve the subset sum problem. dp = [False] * (S + 1) dp[0] = True for num in array: for j in range(S, num - 1, -1): if dp[j - num]: dp[j] = True return dp[S] def process_test_cases(test_cases): results = [] for n, S, array in test_cases: if subset_sum_exists(n, S, array): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Implement a text compression algorithm that minimizes the size of a given string. You need to design a function `compress` which takes a single argument `s`, the input string, and returns the compressed version of the string. The compression technique involves replacing substrings of repeated characters with the character followed by the count of repetitions. For example, the string \\"aaabbbcccc\\" would be compressed to \\"a3b3c4\\". Ensure that your algorithm is efficient and works within the constraints provided below. Constraints: - The input string will consist of only lowercase English letters (a-z). - The length of the input string will not exceed 10,000 characters. Do not use any pre-built libraries for string compression or manipulation. The solution should be implemented using basic string operations and loops. Function Signature: ```python def compress(s: str) -> str: pass ``` **Examples:** 1. `compress(\\"aaabbbcccc\\")` should return `\\"a3b3c4\\"`. 2. `compress(\\"abcd\\")` should return `\\"a1b1c1d1\\"`. 3. `compress(\\"aa\\")` should return `\\"a2\\"`. 4. `compress(\\"aabbcc\\")` should return `\\"a2b2c2\\"`. 5. `compress(\\"a\\")` should return `\\"a1\\"`. Ensure the function is thoroughly tested with various edge cases and input sizes within the specified constraints.","solution":"def compress(s: str) -> str: Compresses the given string by replacing repeated characters with the character followed by its count. if not s: return \\"\\" compressed = [] count = 1 current_char = s[0] for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 # Append the last character and its count compressed.append(f\\"{current_char}{count}\\") return \'\'.join(compressed)"},{"question":"Bart is very fond of chocolate bars, and every week he buys a bunch of them from the local store. However, Bart is also very particular about the weight of the chocolate bars he buys. He has a habit of only buying chocolate bars whose weights are Perfect Numbers. A Perfect Number is a number that is equal to the sum of its proper divisors (excluding itself). Input: The first line will contain an integer n, the number of test cases. Each of the next n lines will contain an integer w, representing the weight of a chocolate bar. Output: For each testcase, print \\"BUY\\" in a newline if Bart should buy the chocolate bar. Print \\"PASS\\" otherwise. Quotes are just for clarification. Constraints: 1 ≤ n ≤ 20 1 ≤ w ≤ 10^6 Example: Input: 4 6 28 12 496 Output: BUY BUY PASS BUY","solution":"def is_perfect_number(num): if num <= 1: return False sum_of_divisors = 1 for i in range(2, int(num**0.5) + 1): if num % i == 0: sum_of_divisors += i if i != num // i: sum_of_divisors += num // i return sum_of_divisors == num def bart_chocolate_bars(test_cases): results = [] for w in test_cases: if is_perfect_number(w): results.append(\\"BUY\\") else: results.append(\\"PASS\\") return results"},{"question":"Emily loves playing with numbers, and she recently found a new amusement in calculating the beauty of numbers. She defines the beauty of a number sequence as follows: Consider a sequence of non-negative integers. The beauty of the sequence is the maximum number of distinct integers in any of its contiguous subarrays. Given a list of non-negative integers, can you determine the beauty of the sequence? -----Input----- The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n non-negative integers a[i] (0 ≤ a[i] ≤ 1000) — the elements of the sequence. -----Output----- Output a single integer — the beauty of the sequence. -----Examples----- Input 5 1 2 1 3 2 Output 3 Input 4 4 4 4 4 Output 1 Input 6 4 2 0 2 4 2 Output 3 -----Note----- In the first example, the longest subarray with distinct integers is [1, 2, 1, 3] or [2, 1, 3] which has a length of 3. In the second example, there is only one unique integer in the entire array, thus the beauty is 1. In the third example, the longest subarray with distinct integers is [4, 2, 0] with a length of 3.","solution":"def beauty_of_sequence(n, a): Returns the maximum number of distinct integers in any contiguous subarray. max_beauty = 0 for i in range(n): seen = set() current_beauty = 0 for j in range(i, n): if a[j] not in seen: seen.add(a[j]) current_beauty += 1 max_beauty = max(max_beauty, current_beauty) return max_beauty"},{"question":"Given an integer array nums, you need to find all the triplets in the array such that their sum is zero. Each triplet should be a set of three numbers (nums[i], nums[j], nums[k]) where i, j, and k are distinct indices. The solution set should not contain duplicate triplets. Write a program that finds all such triplets in the array and returns them in a list of lists. Input The first line contains an integer n (0 ≤ n ≤ 3000), representing the length of the array nums. The second line contains n integers, each representing an element of the array nums. Each integer in the array will be in the range from -10^5 to 10^5. Output Print all unique triplets in the array that sum up to zero. The output should be a list of lists, where each list represents a triplet. Each triplet should appear only once, and the lists should be printed in lexicographical order. Examples Input 6 -1 0 1 2 -1 -4 Output [[-1, -1, 2], [-1, 0, 1]] Input 5 0 0 0 0 0 Output [[0, 0, 0]] Implementation Note: To maintain the lexicographical order and avoid duplicate triplets, consider sorting both the input array and the resultant triplets.","solution":"def three_sum(nums): Finds all unique triplets in the array which give the sum of zero. nums.sort() n = len(nums) triplets = [] for i in range(n): # Avoid duplicates for the first element if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.append([nums[i], nums[left], nums[right]]) left += 1 right -= 1 # Avoid duplicates for the second and third elements while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"Alex is playing a game with binary strings. He is given a binary string s consisting of characters \'0\' and \'1\'. Alex can perform the following operation: - Choose any pair of adjacent characters and replace them with a single character according to the following rules: - If the pair is \\"01\\", replace it with \\"0\\". - If the pair is \\"10\\", replace it with \\"1\\". - If the pair is \\"00\\" or \\"11\\", remove both characters. Alex wants to know whether he can transform the binary string s into a single character. Help him by determining the answer. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 10^4). Description of the test cases follows. The first line of each test case contains a binary string s (1 leq |s| leq 10^5) consisting of characters \'0\' and \'1\'. It is guaranteed that the total length of all binary strings in a single test does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" (without quotes) if Alex can transform the binary string s into a single character, and \\"NO\\" (without quotes) otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 5 01 10 1100 1010 111000 Output YES YES NO YES NO -----Note----- In the 1-st test case Alex can replace \\"01\\" with \\"0\\" to get the string \\"0\\". In the 2-nd test case Alex can replace \\"10\\" with \\"1\\" to get the string \\"1\\". In the 3-rd test case Alex cannot transform the string into a single character. In the 4-th test case Alex can perform the operations as follows: - Replace \\"10\\" with \\"1\\", resulting in the string \\"11\\". - Remove both \'1\'s, resulting in an empty string. - The final result is an empty string, which cannot be considered as a single character. Hence, the answer is \\"YES\\". In the 5-th test case Alex cannot transform the string into a single character.","solution":"def can_transform_to_single_char(t, test_cases): results = [] for s in test_cases: balance = 0 valid = True for char in s: if char == \'1\': balance += 1 else: balance -= 1 if balance < -1 or balance > 1: valid = False break if valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Task You are given a collection of books housed in a library. Each book is identified by a unique alphanumeric code of the format `BCXXX`, where `BC` is a prefix that stands for \\"Book Code\\" and `XXX` is a three-digit code ranging from `000` to `999`. The librarian wants to ensure that there are no duplicate books in the collection and would also like to know how many books are needed to complete the collection such that every possible three-digit code from `000` to `999` is used exactly once. Your task is to write a program that processes a string of book codes and determines whether there are any duplicates. Additionally, compute how many more books are required to complete the collection if there are no duplicates. If there are duplicates, return an array with `[-1]`. If there are no duplicates, return an array with one element indicating the number of books needed to complete the collection. # Input/Output - `[input]` string `s` A string of book codes. Each book code is exactly 5 characters long, comprising \\"BC\\" followed by a three-digit code. The string\'s length is a multiple of 5 with 0 ≤ |s| ≤ 5000. - `[output]` an integer array If there are duplicates, return `[-1]`. If there are no duplicates, return an array with one integer representing the number of books needed to complete the collection. # Example For `s = \\"BC001BC002BC003BC004\\"`, the output should be `[996]`. There are no duplicate book codes and the collection is missing `996` book codes from `BC000` to `BC999`. For `s = \\"BC001BC002BC002BC004\\"`, the output should be `[-1]`. There are duplicate book codes `\\"BC002\\"` in the string `s`.","solution":"def process_book_codes(s): Returns how many books are needed to complete the collection or indicates duplicates. book_codes = set() length = len(s) for i in range(0, length, 5): code = s[i:i+5] if code in book_codes: return [-1] book_codes.add(code) complete_count = 1000 missing_books = complete_count - len(book_codes) return [missing_books]"},{"question":"A group of scientists is analyzing a sequence of temperature measurements. They have some important queries to analyze the data better. You need to help them analyze the temperature trends over a certain range of days. Given a sequence of n integers representing the temperatures measured over n consecutive days, and k queries where each query specifies a range [l, r] (both inclusive), determine if the temperatures over the specified range show an increasing trend (i.e., each day is either warmer or has the same temperature as the previous day). -----Input----- The first line of the input contains two positive integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ 100,000) — the number of days and the number of queries, respectively. The next line contains n integers t_1, t_2, ..., t_n (−10^9 ≤ t_i ≤ 10^9) — the temperatures recorded over the n days. Each of the next k lines contains two integers l and r (1 ≤ l ≤ r ≤ n) representing a query for the range from day l to day r. -----Output----- Print \\"YES\\" if the temperatures over the specified range show an increasing trend for the i-th query. Otherwise, print \\"NO\\". -----Example----- Input 7 3 2 3 3 5 10 7 11 1 3 4 5 3 7 Output YES YES NO -----Explanation----- For the given example: - Query 1 checks the range [1, 3]: Temperatures are 2, 3, and 3. They show an increasing trend (2 ≤ 3 ≤ 3). - Query 2 checks the range [4, 5]: Temperatures are 5, and 10. They show an increasing trend (5 ≤ 10). - Query 3 checks the range [3, 7]: Temperatures are 3, 5, 10, 7, and 11. This does not show an increasing trend since 10 > 7.","solution":"def check_increasing_trend(n, k, temperatures, queries): Determines if the temperatures over the specified range show an increasing trend. Parameters ---------- n : int The number of days. k : int The number of queries. temperatures : list of ints The temperatures recorded over the n days. queries : list of tuples Each tuple (l, r) specifies a range [l, r]. Returns ------- list of str \\"YES\\" if the temperatures over the specified range show an increasing trend, otherwise \\"NO\\". result = [] for l, r in queries: increasing = True for i in range(l, r): if temperatures[i - 1] > temperatures[i]: increasing = False break result.append(\\"YES\\" if increasing else \\"NO\\") return result"},{"question":"Ava recently started learning about strings and permutations. She is very excited about the possibilities of rearranging the characters in a string to form different words. To practice her new skills, Ava decided to write a program that can generate all distinct permutations of a given string. However, she soon realized that some strings might have repeated characters, which could lead to duplicate permutations. To address this, she has decided to only consider distinct permutations. Write a program that takes a string as input and outputs all distinct permutations of the string in lexicographical order. Input: The first line contains T denoting the number of test cases. Each of the next T lines contains a single string S. Output: For each string, print all distinct permutations of the string in lexicographical order, each permutation on a new line. After printing all permutations for a string, print a blank line. Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 8 SAMPLE INPUT 2 abc aab SAMPLE OUTPUT abc acb bac bca cab cba aab aba baa","solution":"from itertools import permutations def generate_permutations(s): Generates all distinct permutations of the string s in lexicographical order. # Generate all permutations using itertools.permutations perm_set = set(permutations(s)) # Convert tuples to strings and sort the result result = sorted(\'\'.join(p) for p in perm_set) return result def permute_strings(test_cases): For each string in test_cases, print all distinct permutations in lexicographical order. results = [] for s in test_cases: perms = generate_permutations(s) results.append(perms) return results"},{"question":"A company\'s conference room has two doors. Each door can either be open or closed. Employees prefer the doors to be in a specific state: either both open or both closed. Initially, the doors may be in any state and the goal is to achieve the preferred state by making the minimum number of operations. Each operation consists of either opening a closed door or closing an open door, but both doors cannot be changed simultaneously in one operation. Given the initial states of the doors and the preferred state, you need to determine the minimum number of operations required to achieve the preferred state. The states are represented as follows: - \\"O\\" denotes an open door. - \\"C\\" denotes a closed door. You will be given the initial states of both doors, followed by the preferred state of both doors. -----Input----- The input consists of a single line containing four characters. The first two characters represent the initial states of the doors, and the last two characters represent the preferred state of the doors. 1. The first character represents the initial state of the first door, either \\"O\\" or \\"C\\". 2. The second character represents the initial state of the second door, either \\"O\\" or \\"C\\". 3. The third character represents the preferred state of the first door, either \\"O\\" or \\"C\\". 4. The fourth character represents the preferred state of the second door, either \\"O\\" or \\"C\\". It is guaranteed that the input is valid and contains exactly four characters. -----Output----- Output a single integer: the minimum number of operations required to make both doors reach the preferred state. -----Examples----- Input OCOC Output 1 Input OOC Output 2 Input CCCC Output 0 Input COOO Output 1 -----Note----- In the first sample test, changing the second door from \\"C\\" to \\"O\\" will achieve the preferred state \\"OO\\", which takes 1 operation. In the second sample test, changing both doors from \\"O\\" to \\"C\\" will achieve the preferred state \\"CC\\", which takes 2 operations. In the third sample test, the doors are already in the preferred state, so no operations are needed. In the fourth sample test, changing the first door from \\"C\\" to \\"O\\" will achieve the preferred state \\"OO\\", which takes 1 operation.","solution":"def min_operations_to_preferred_state(initial1, initial2, preferred1, preferred2): Calculates the minimum number of operations required to make both doors reach the preferred state. Parameters: - initial1 (str): initial state of the first door, either \\"O\\" or \\"C\\". - initial2 (str): initial state of the second door, either \\"O\\" or \\"C\\". - preferred1 (str): preferred state of the first door, either \\"O\\" or \\"C\\". - preferred2 (str): preferred state of the second door, either \\"O\\" or \\"C\\". Returns: - int: minimum number of operations required. # Check each door and add to the count if it needs to be changed to match the preferred state count = 0 if initial1 != preferred1: count += 1 if initial2 != preferred2: count += 1 return count"},{"question":"You are given a list of integers. Your task is to determine if the list, when interpreted as a sequence from a musical keyboard, would produce a melody that goes strictly upwards or strictly downwards. The list of integers represents the sequence of notes in the melody. -----Constraints----- - The list can contain between 2 and 100 integers. - Each integer in the list is between 1 and 88, inclusive (representing the keys on a standard piano keyboard). -----Input----- Input is given from Standard Input in the following format: n a1 a2 ... an - n is the number of integers in the list. - a1, a2, ..., an are the integers representing the sequence of notes. -----Output----- Print \\"UP\\" if the sequence is strictly increasing, \\"DOWN\\" if the sequence is strictly decreasing, and \\"NEITHER\\" if it is neither. -----Sample Input----- 5 3 6 9 12 15 -----Sample Output----- UP In the provided sequence, each note is higher than the previous one, making the melody strictly increasing. Therefore, the output is \\"UP\\".","solution":"def check_melody(n, notes): if all(notes[i] < notes[i+1] for i in range(n-1)): return \\"UP\\" elif all(notes[i] > notes[i+1] for i in range(n-1)): return \\"DOWN\\" else: return \\"NEITHER\\""},{"question":"Alex loves working with binary trees. He\'s particularly fascinated by the concept of tree diameter, which is defined as the number of nodes on the longest path between any two nodes in the tree. Note that the path may or may not pass through the root of the tree. Alex has a binary tree with n nodes and wants to determine its diameter. Your task is to help Alex implement an algorithm to find the tree\'s diameter. # Input The first line of input contains an integer n (1 ≤ n ≤ 105), the number of nodes in the binary tree. The following n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is an edge between nodes u and v. # Output Output a single integer, the diameter of the tree. # Example Input ``` 5 1 2 1 3 2 4 2 5 ``` Output ``` 4 ``` # Explanation For the given input, the tree looks like this: ``` 1 / 2 3 / 4 5 ``` The longest path in this tree goes from node 4 to node 5 through nodes 2 and 1, which includes 4 nodes altogether. Hence, the diameter is 4.","solution":"from collections import defaultdict, deque def tree_diameter(n, edges): if n == 1: return 1 def bfs(start): visited = [-1] * (n + 1) queue = deque([start]) visited[start] = 0 farthest_node = start max_distance = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) node, _ = bfs(1) # Get farthest node from an arbitrary node (1 in this case) _, diameter = bfs(node) # Get the diameter by finding the farthest from the farthest node return diameter + 1 def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) edges = [] for i in range(1, len(data), 2): edges.append((int(data[i]), int(data[i+1]))) return n, edges if __name__ == \\"__main__\\": n, edges = read_input() print(tree_diameter(n, edges))"},{"question":"John is participating in a coding competition where he needs to solve tricky problems quickly. He has been given a problem where he needs to work with matrices. John is given a n x n matrix of integers, and he needs to perform a specific operation: John can select any submatrix of the given matrix and replace each of its elements with the maximum element of that submatrix. The task is to determine the minimum possible sum of elements John can achieve by using the above operation any number of times. Input The first line contains an integer n (1 ≤ n ≤ 300) — the size of the matrix. Each of the next n lines contains n integers a_ij (1 ≤ a_ij ≤ 1000) — representing the elements of the matrix. Output Print exactly one integer — the minimum possible sum of elements in the matrix after performing the given operation any number of times. Example Input 3 1 2 3 4 5 6 7 8 9 Output 81 Note In the example, the optimal strategy is to select the entire matrix as the submatrix and replace each of its elements with the maximum element 9. After this operation, all elements of the matrix will be 9, and the sum will be 9 * 3 * 3 = 81.","solution":"def minimum_sum_matrix(matrix): Given an n x n matrix, returns the minimum possible sum of elements in the matrix after replacing each element in a submatrix with the maximum element of that submatrix any number of times. n = len(matrix) max_element = max(max(row) for row in matrix) return max_element * n * n"},{"question":"Create a program that evaluates the ratings for different movies based on user input. Each user provides a rating for a movie, ranked on a scale from 1 to 5, with 1 being the lowest and 5 being the highest. You need to calculate the average rating for each movie and determine whether the rating is \\"Excellent\\", \\"Good\\", \\"Fair\\", \\"Poor\\". The category thresholds are as follows: - Excellent: Average rating >= 4.5 - Good: 3.5 <= Average rating < 4.5 - Fair: 2.5 <= Average rating < 3.5 - Poor: Average rating < 2.5 Your task is to read the ratings for each movie from the input, compute the average rating for each movie, and output the category for each movie based on the average rating. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line containing the number 0. Each dataset contains several lines. The first line of each dataset contains an integer n (1 ≤ n ≤ 100), the number of ratings for the movie. The following n lines each contains an integer r (1 ≤ r ≤ 5), representing a rating from a user. Output For each dataset, output a line containing the average rating rounded to one decimal place, followed by the category (\\"Excellent\\", \\"Good\\", \\"Fair\\", or \\"Poor\\") for that average rating. Example Input 3 5 4 5 4 1 5 5 2 1 2 0 Output 4.7 Excellent 4.0 Good 1.5 Poor","solution":"def get_movie_category(average_rating): if average_rating >= 4.5: return \\"Excellent\\" elif 3.5 <= average_rating < 4.5: return \\"Good\\" elif 2.5 <= average_rating < 3.5: return \\"Fair\\" else: return \\"Poor\\" def evaluate_movies(input_data): results = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break index += 1 ratings = [] for _ in range(n): ratings.append(int(input_data[index])) index += 1 average_rating = sum(ratings) / n category = get_movie_category(average_rating) results.append(f\\"{average_rating:.1f} {category}\\") return results"},{"question":"You are building a space colony and need to construct several vertical support beams. Each support beam has a certain height, and you need to efficiently cut longer beams into several smaller sections to meet the required heights. Given a list of required heights and a list of available beam heights, determine if you can cut the available beams to satisfy the required heights exactly. You should return a list indicating whether it\'s possible for each required height. Input: The first line contains a single integer M - the number of required heights. M lines follow - each line contains a single integer h_i, representing a required height. Next line contains a single integer N - the number of available beams. N lines follow - each line contains a single integer l_j, representing an available beam height. Output: Print M lines, each containing \\"YES\\" if the required height can be obtained exactly by cutting the available beams or \\"NO\\" if it cannot. Constraints: 1 ≤ M ≤ 10^3 1 ≤ h_i, l_j ≤ 10^6 1 ≤ N ≤ 10^3 SAMPLE INPUT 3 5 10 15 3 10 5 20 SAMPLE OUTPUT YES YES YES Explanation: - For a required height of 5, you can use the 5-meter beam. - For a required height of 10, you can use the 10-meter beam directly. - For a required height of 15, you can use the 20-meter beam and cut it to obtain a 15-meter section.","solution":"def can_cut_beams(required_heights, available_beams): Given a list of required heights and a list of available beam heights, determine if it is possible to cut the beams to exactly match each required height. Parameters: required_heights (list of int): List of required heights. available_beams (list of int): List of available beam heights. Returns: list: List of strings \\"YES\\" or \\"NO\\" indicating whether each required height can be met. results = [] for h in required_heights: possible = any(b >= h for b in available_beams) results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Given a string S consisting of only lowercase alphabet characters and an integer K, the task is to return the Kth non-repeating character in the string. If K is greater than the number of non-repeating characters, return an empty string. Example 1: Input: str = \\"geeksforgeeks\\", K = 3 Output: \\"r\\" Explanation: The non-repeating characters in the string in order are: [\'f\', \'o\', \'r\']. Therefore, the 3rd non-repeating character is \'r\'. Example 2: Input: str = \\"aabbc\\", K = 1 Output: \\"c\\" Explanation: The non-repeating characters in the string in order are: [\'c\']. Therefore, the 1st non-repeating character is \'c\'. Example 3: Input: str = \\"aabbcc\\", K = 1 Output: \\"\\" Explanation: There are no non-repeating characters in the string. So the result is an empty string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findKthNonRepeatingCharacter() which takes the string S and the integer K as input and returns the Kth non-repeating character, or an empty string if it does not exist. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |S| ≤ 10^6 1 ≤ K ≤ 10^6","solution":"def findKthNonRepeatingCharacter(S, K): Returns the Kth non-repeating character in the given string S. If K is greater than the number of non-repeating characters, returns an empty string. from collections import Counter, OrderedDict # Count frequency of each character in the string frequency = Counter(S) # Collect non-repeating characters in order non_repeating_characters = [char for char in S if frequency[char] == 1] # Check if Kth non-repeating character exists if K <= len(non_repeating_characters): return non_repeating_characters[K-1] else: return \\"\\" # Example usage: # print(findKthNonRepeatingCharacter(\\"geeksforgeeks\\", 3)) # Output: \\"r\\" # print(findKthNonRepeatingCharacter(\\"aabbc\\", 1)) # Output: \\"c\\" # print(findKthNonRepeatingCharacter(\\"aabbcc\\", 1)) # Output: \\"\\""},{"question":"Implement a function `balance_parentheses :: String -> Bool` which takes a string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', and determines if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Examples: ```python balance_parentheses(\\"()\\") # should return True balance_parentheses(\\"()[]{}\\") # should return True balance_parentheses(\\"(]\\") # should return False balance_parentheses(\\"([)]\\") # should return False balance_parentheses(\\"{[]}\\") # should return True ``` Note that an empty string is considered to be valid.","solution":"def balance_parentheses(s: str) -> bool: Determines if the input string of parentheses, brackets, and braces is valid. Args: s (str): The input string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: bool: True if the input string is valid, False otherwise. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return False else: return False return stack == []"},{"question":"You have been given a task to simulate the activity of an evolving social network where people can form friendships or break them. Each user in the network has a unique ID and there are various operations that can be performed to add or remove friendships. Initially, no user has any friends. The goal is to simulate these operations and determine the largest group of friends at the end of all operations. A group of friends is a set of users who are directly or indirectly connected through friendships. There are three types of operations: 1. `add x y` - Form a friendship between user `x` and user `y`. 2. `remove x y` - Remove the friendship between user `x` and user `y`. 3. `largest_group` - Output the size of the largest group of friends in the network. Input The first line contains two integers `n` and `q` (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5), representing the number of users and the number of operations, respectively. The next `q` lines contain the operations in the format defined above. Output For each `largest_group` operation, print the size of the largest group of friends. Example Input: ``` 6 7 add 1 2 add 2 3 largest_group add 4 5 largest_group remove 2 3 largest_group ``` Output: ``` 3 3 2 ``` Note: - The users are numbered from `1` to `n`. - When a friendship is removed, make sure that the remaining users\' relationships are correctly updated.","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [1] * size self.group_size = [1] * size self.max_group_size = 1 def find(self, x): if self.parent[x] != x: self.parent[x] = self.find(self.parent[x]) return self.parent[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.parent[rootY] = rootX self.group_size[rootX] += self.group_size[rootY] self.group_size[rootY] = 0 self.max_group_size = max(self.max_group_size, self.group_size[rootX]) elif self.rank[rootX] < self.rank[rootY]: self.parent[rootX] = rootY self.group_size[rootY] += self.group_size[rootX] self.group_size[rootX] = 0 self.max_group_size = max(self.max_group_size, self.group_size[rootY]) else: self.parent[rootY] = rootX self.rank[rootX] += 1 self.group_size[rootX] += self.group_size[rootY] self.group_size[rootY] = 0 self.max_group_size = max(self.max_group_size, self.group_size[rootX]) def size_of_largest_group(self): return self.max_group_size def social_network_simulation(n, queries): uf = UnionFind(n + 1) results = [] friendships = set() for query in queries: op = query[0] if op == \'add\': x, y = query[1], query[2] if (x, y) not in friendships and (y, x) not in friendships: friendships.add((x, y)) uf.union(x, y) elif op == \'remove\': x, y = query[1], query[2] if (x, y) in friendships: friendships.remove((x, y)) # Assumes we rebuild the UnionFind object for simplicity new_uf = UnionFind(n + 1) for (a, b) in friendships: new_uf.union(a, b) uf = new_uf elif op == \'largest_group\': results.append(uf.size_of_largest_group()) return results"},{"question":"You are a software developer participating in a hackathon where one of the challenges is to manage a dynamic ranking system for online players in a game. You are given a list of initial player scores and a series of operations to perform on this list. The operations involve modifying player scores, querying for certain statistics, and sorting the players by their scores. The operations are as follows: UPD p s (Update operation) Update the score of player p to s (0 ≤ s ≤ 1,000,000) QRY k (Query operation) Output the k-th smallest score in the list QMAX (Query Maximum operation) Output the highest score in the list QMIN (Query Minimum operation) Output the lowest score in the list SRT (Sort operation) Sort the list of player scores in ascending order Input The first line of input contains two integers, N and M, indicating the number of players and the number of operations respectively (1 ≤ N, M ≤ 100,000). The second line contains N integers, representing the initial scores of the players. Each of the next M lines contains one operation in the format as described above. Output For each query operation (QRY, QMAX, QMIN), output the result on a new line. Example Input 5 7 50 30 20 40 10 SRT UPD 3 35 QRY 3 QMIN QMAX SRT QRY 4 Output 35 10 50 40","solution":"def dynamic_ranking_system(initial_scores, operations): Function to manage a dynamic ranking system. Parameters: initial_scores (list): List of initial player scores. operations (list): List of operations to be performed on scores. Returns: list: Results from query operations (QRY, QMIN, QMAX). results = [] for op in operations: parts = op.split() command = parts[0] if command == \'UPD\': player_index = int(parts[1]) new_score = int(parts[2]) initial_scores[player_index - 1] = new_score elif command == \'QRY\': k = int(parts[1]) # Ensure the list is sorted for this operation sorted_scores = sorted(initial_scores) results.append(sorted_scores[k - 1]) elif command == \'QMAX\': results.append(max(initial_scores)) elif command == \'QMIN\': results.append(min(initial_scores)) elif command == \'SRT\': initial_scores.sort() return results"},{"question":"In a galaxy far, far away, there is a highly advanced civilization that has developed a new form of transportation: teleportation portals. These portals are located on a 2D plane, and each portal can instantly teleport anyone standing at its coordinates to another specific portal\'s coordinates. To facilitate smooth transportation, the Galactic Council has assigned you the task of developing an algorithm that determines the minimal number of teleportation hops required to travel from one portal to another. Note that teleportation is only one-way, and you can only use the portals provided. Given the coordinates of n portals and their corresponding destinations, determine the minimum number of teleportation hops required to travel from a given starting portal to a target portal, or determine if it is impossible to reach the target. Input: The first line contains an integer n (2 ≤ n ≤ 105), the number of portals. The next n lines each contain four integers xi, yi, xj, yj (|xi|, |yi|, |xj|, |yj| ≤ 109), where (xi, yi) are the coordinates of the i-th portal and (xj, yj) are the coordinates to which it teleports. The last line contains four integers xs, ys, xt, yt (|xs|, |ys|, |xt|, |yt| ≤ 109), representing the starting and target coordinates respectively. Output: Print an integer representing the minimum number of teleportation hops required to travel from the starting coordinates to the target coordinates. If it is impossible to reach the target, print -1. Examples: Input: 3 1 1 2 2 2 2 3 3 3 3 4 4 1 1 3 3 Output: 2 Input: 3 1 1 2 2 2 2 3 3 3 3 1 1 1 1 4 4 Output: -1 Note: In the first example, you can move from (1, 1) to (2, 2) in one hop, and then from (2, 2) to (3, 3) in another hop, making it 2 hops in total. In the second example, there is no portal that leads directly or indirectly to (4, 4) from (1, 1), hence the output is -1.","solution":"from collections import deque, defaultdict def min_teleportation_hops(n, portals, start, target): graph = defaultdict(list) for xi, yi, xj, yj in portals: graph[(xi, yi)].append((xj, yj)) xs, ys = start xt, yt = target if (xs, ys) == (xt, yt): return 0 queue = deque([(xs, ys)]) visited = set([(xs, ys)]) hops = 0 while queue: hops += 1 for _ in range(len(queue)): curr = queue.popleft() for next_portal in graph[curr]: if next_portal == (xt, yt): return hops if next_portal not in visited: visited.add(next_portal) queue.append(next_portal) return -1"},{"question":"A farmer needs to build a water tank to store rainwater for his crops. The tank is built by joining pipes of different sizes end-to-end, with each pipe having a specific diameter. The farmer can increase the water capacity by adding more pipes, but this also increases the risk of leaks, especially at joints between pipes of different diameters. To minimize leaks, the farmer wants the two pipes being joined to have the smallest possible difference in diameters. Your task is to determine the smallest possible absolute difference in diameters between any pair of pipes. Given a list of pipe diameters, you need to find this smallest difference. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of pipes. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^9) — the diameters of the pipes. -----Output----- Print a single integer — the minimum absolute difference in diameters between any pair of pipes. -----Examples----- Input 5 8 1 5 3 6 Output 1 Input 3 10 15 20 Output 5 Input 4 4 2 7 4 Output 0 -----Note----- In the first example, the smallest difference is between the pipes with diameters 5 and 6, which is 1. In the second example, the smallest difference is between the pipes with diameters 15 and 20, which is 5. In the third example, the smallest difference is between the pipes with diameters 4 and 4, which is 0.","solution":"def smallest_difference(n, diameters): Returns the smallest absolute difference in diameters between any pair of pipes. if n < 2: return -1 # Not a valid case since we need at least 2 pipes diameters.sort() min_diff = float(\'inf\') for i in range(1, n): diff = abs(diameters[i] - diameters[i - 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Lisa is fascinated by symmetrical patterns and has recently discovered palindromes. A palindrome is a sequence that reads the same backward as forward. She decided to take up a challenge to find out how many palindromic substrings are there in a given string S. A substring is any contiguous sequence of characters in a string. Using her programming knowledge, Lisa wants to write a program to count all possible palindromic substrings in the given string S. Create a program to find the number of palindromic substrings for a given input string S. Input The input is given in the following format: S The input line provides the string S (1 leq |S| leq 1000), where |S| is the length of the string. The string S will only contain lowercase English letters. Output Output the number of palindromic substrings in the given string S. Examples Input ababa Output 9 Input abc Output 3","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 # Helper function to count palindromes around center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 # Each character and between each pair of characters for i in range(n): # Odd length palindromes (single character center) expand_around_center(i, i) # Even length palindromes (consecutive character centers) expand_around_center(i, i + 1) return count"},{"question":"A new company has developed a revolutionary smartphone application, and as part of its functionality, it needs to schedule notifications for its users in a way that maximizes the number of interactions. Each notification has a specific time range during which it can be sent to the user. However, sending too many notifications too frequently may cause user fatigue, leading to fewer interactions. The goal is to select a subset of compatible notifications that maximizes the potential user interactions, while ensuring that no two notifications overlap in their time ranges. Formally, you are given n notifications where each notification is defined by three integers: st, et, and it, where st is the start time, et is the end time, and it is the interaction value of the notification. Two notifications are compatible if the end time of one is less than or equal to the start time of the other. Your task is to find the maximum sum of interaction values that can be achieved by selecting a compatible set of notifications. Input The first line contains an integer n (1 ≤ n ≤ 1000) describing the number of notifications. The next n lines each contain three integers: st, et, and it (1 ≤ st < et ≤ 10^9; 1 ≤ it ≤ 10^6), describing the start time, end time, and interaction value of the i-th notification. Output Output one integer: the maximum sum of the interaction values for a compatible set of notifications. SAMPLE INPUT 5 1 3 10 2 5 15 4 6 10 5 8 5 7 9 10 SAMPLE OUTPUT 30","solution":"def max_interaction_value(n, notifications): # Sort notifications by the end time notifications.sort(key=lambda x: x[1]) # Initialize a dp array to store the maximum sum of interaction values up to the i-th notification dp = [0] * n # The value of the first notification dp[0] = notifications[0][2] def find_last_non_conflict(j): # Binary search to find the last non-conflicting notification low, high = 0, j - 1 while low <= high: mid = (low + high) // 2 if notifications[mid][1] <= notifications[j][0]: if notifications[mid + 1][1] <= notifications[j][0]: low = mid + 1 else: return mid else: high = mid - 1 return -1 # Fill dp array for i in range(1, n): # Include current notification incl_profit = notifications[i][2] l = find_last_non_conflict(i) if l != -1: incl_profit += dp[l] # Store the maximum of including and excluding the current notification dp[i] = max(incl_profit, dp[i - 1]) # Maximum value will be the last entry in dp return dp[-1] # Reading input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) notifications = [] index = 1 for _ in range(n): st = int(data[index]) et = int(data[index+1]) it = int(data[index+2]) notifications.append((st, et, it)) index += 3 print(max_interaction_value(n, notifications))"},{"question":"Given a tuple of integers, your task is to return the sum of all elements that are prime numbers. Example 1: Input: numbers = (3, 4, 2, 7, 8) Output: 12 Explanation: The prime numbers in the given tuple are 3, 2, and 7. Their sum is 3 + 2 + 7 = 12. Example 2: Input: numbers = (10, 15, 18, 30) Output: 0 Explanation: There are no prime numbers in the given tuple. Hence, the sum is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sum_of_primes() which takes a tuple numbers as input and returns the sum of all prime numbers in it. Expected Time Complexity: O(n * sqrt(m)), where n is the number of elements in the tuple and m is the maximum element in the tuple. Expected Auxiliary Space: O(1) Constraints: 1 <= len(numbers) <= 20 1 <= numbers[i] <= 100","solution":"def is_prime(n): Determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def sum_of_primes(numbers): Returns the sum of all prime numbers in the given tuple of numbers. return sum(n for n in numbers if is_prime(n))"},{"question":"Given a string, return the length of the longest substring that contains at most two distinct characters. For example: ``` longest_substring(\\"eceba\\") = 3, because the longest substring with two distinct characters is \\"ece\\". longest_substring(\\"ccaabbb\\") = 5, because the longest substring with two distinct characters is \\"aabbb\\". longest_substring(\\"a\\") = 1, because \\"a\\" is the only character and hence the longest substring itself. longest_substring(\\"abaccc\\") = 4, because the longest substring with two distinct characters is \\"abac\\". ``` Your function should be able to handle large inputs and find the result efficiently. Best of luck! For a similar challenge, try [Sliding Window Maximum](https://leetcode.com/problems/sliding-window-maximum/).","solution":"def longest_substring(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 2: return n left = 0 right = 0 max_len = 0 char_map = {} while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"A tech company needs help organizing their employee database for a new security system. Each employee is given a unique badge ID and their information is stored in a dictionary, where the key is the badge ID and the value is the employee\'s full name. The new security system requires the employees to be reordered alphabetically by their full names while keeping their badge IDs intact. Write a function `reorder_employees` that takes in a dictionary of employees (badge ID as key and full name as value) and returns a new dictionary where the employees are listed in alphabetical order by their full names, but each employee retains their original badge ID. For example, given the following dictionary: ``` { 101: \'John Doe\', 102: \'Jane Smith\', 103: \'Alice Johnson\', 104: \'Bob Brown\' } ``` The resulting dictionary should be: ``` { 104: \'Bob Brown\', 103: \'Alice Johnson\', 101: \'John Doe\', 102: \'Jane Smith\' } ``` If two employees have the same full name, they should be ordered based on their original badge IDs in ascending order. Write a function `reorder_employees(employees)` to achieve this task.","solution":"def reorder_employees(employees): Reorders the employees alphabetically by their full names while keeping their badge IDs intact. If two employees have the same full name, they should be ordered based on their original badge IDs in ascending order. :param employees: Dictionary where key is badge ID and value is full name of the employee. :return: A new dictionary with employees reordered by full name. # Sort the dictionary items by full name and then by badge ID sorted_employees = sorted(employees.items(), key=lambda x: (x[1], x[0])) # Convert the sorted list of tuples back into a dictionary return dict(sorted_employees)"},{"question":"A string S containing parentheses and letters is given, the task is to check if the given string is valid. A string is considered valid if it contains the matching number of open \'(\' and close \')\' parentheses, and every close parenthesis \')\' has a corresponding open parenthesis \'(\' before it. Ignore all the other characters in the string. Example 1: Input: S = \\"a(b)c)de(\\" Output: \\"No\\" Explanation: There are unmatched parentheses in the string. Example 2: Input: S = \\"((a+b)/c)\\" Output: \\"Yes\\" Explanation: All open parentheses are matched with close parentheses. Your Task: Complete the function isValidParentheses() which takes a string S as input and returns \\"Yes\\" if the string has valid parentheses, otherwise returns \\"No\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 100000 S contains lowercase letters, uppercase letters, digits, and parentheses only.","solution":"def isValidParentheses(S): Returns \'Yes\' if the string has valid parentheses, otherwise returns \'No\'. balance = 0 for char in S: if char == \'(\': balance += 1 elif char == \')\': if balance == 0: return \\"No\\" balance -= 1 return \\"Yes\\" if balance == 0 else \\"No\\""},{"question":"Task You are given a string `s` consisting of lowercase English letters and a character `c` which is guaranteed to be present in the string. Your task is to find the shortest distance from each character in the string to the character `c`. The distance between two indices `i` and `j` is `|i - j|`, where `|x|` denotes the absolute value of `x`. # Example For `s = \\"loveleetcode\\"` and `c = \\"e\\"`, the result should be `[3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]`. For each character in the string, the shortest distance to a character `c` is calculated: ``` l -> 3 (distance to the e at position 3) o -> 2 (distance to the e at position 3) v -> 1 (distance to the e at position 3) e -> 0 (distance to the e at position 3) l -> 1 (distance to the e at position 5) e -> 0 (distance to the e at position 5) e -> 0 (distance to the e at position 5) t -> 1 (distance to the e at position 6) c -> 2 (distance to the e at position 8) o -> 2 (distance to the e at position 9) d -> 1 (distance to the e at position 10) e -> 0 (distance to the e at position 11) ``` # Input/Output - `[input]` string `s` A string consisting of lowercase English letters. `1 <= s.length <= 10^4`. - `[input]` character `c` A character present in the string `s`. - `[output]` an integer array An array where the `i-th` element is the shortest distance from `s[i]` to the character `c`.","solution":"def shortest_to_char(s, c): Given a string s and a character c, return an array where the i-th element is the shortest distance from s[i] to the character c. n = len(s) answer = [n] * n # First pass: Find shortest distances from the left pos = -n for i in range(n): if s[i] == c: pos = i answer[i] = min(answer[i], abs(i - pos)) # Second pass: Find shortest distances from the right pos = 2 * n for i in range(n - 1, -1, -1): if s[i] == c: pos = i answer[i] = min(answer[i], abs(i - pos)) return answer"},{"question":"Lana is organizing a sequence of events in a calendar. Each event has a specific duration and a specific start time. Since Lana has a busy schedule, she can attend only the events that do not overlap with any other events. An event `i` is defined by two integers, `start_i` and `end_i`, representing the start and end time of the event, respectively (where `start_i < end_i`). Lana needs your help to determine the maximum number of non-overlapping events she can attend. -----Input----- The first line contains a single integer `n` (1 leq n leq 10^5) — the number of events. The next `n` lines each contain two integers `start_i` and `end_i` (1 leq start_i < end_i leq 10^9) — the start and end time of the i-th event. -----Output----- Print a single integer — the maximum number of non-overlapping events Lana can attend. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Input 2 1 10 2 3 Output 1 Input 5 1 3 3 5 0 6 8 9 5 7 Output 4 -----Note----- In the first example, Lana can attend a maximum of `2` events. She can attend the event (1, 3) and then attend the event (4, 6). In the second example, Lana can attend all `4` events as none of them overlap. In the third example, despite there being multiple events, Lana can only attend one due to overlapping times. In the fourth example, Lana can attend up to `4` events - for example, (1, 3), (3, 5), (5, 7), and (8, 9).","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events Lana can attend. Args: - events: List of tuples [(start_i, end_i), ...] Returns: - An integer representing the maximum number of non-overlapping events. # Sort events by their end time events.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"A magical forest contains n trees arranged in a straight line, each having a specific height denoted by an array h of n integers. A special ritual can reduce the height of every tree by exactly 1 unit in a single operation. However, trees whose height is already zero cannot be reduced further. You aim to determine the minimum number of operations required to make all the heights in the array the same. -----Constraints----- - 1 ≦ n ≦ 10^5 - 0 ≦ h_i ≦ 10^9 (for all i) -----Input----- The input is given from Standard Input in the following format: n h_1 h_2 ... h_n -----Output----- Print the minimum number of operations needed. -----Sample Input----- 5 4 5 2 2 5 -----Sample Output----- 3","solution":"def min_operations_to_equal_heights(n, h): Determines the minimum number of operations needed to make all tree heights equal. Parameters: n (int): Number of trees. h (list of int): Heights of the trees. Returns: int: Minimum number of operations needed. # Find the minimum height among all trees min_height = min(h) return min_height"},{"question":"You are given a list of integers representing the prices of some items in a store and a budget. You need to determine the maximum number of items you can buy without exceeding the budget, and the total sum spent on these items. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of items available in the store. The second line contains n space-separated integers p_1, p_2, ldots, p_n (1 le p_i le 10^4) — the prices of the items. The third line contains a single integer b (1 le b le 10^9) — the budget. -----Output----- Output two integers: the maximum number of items you can buy and the total sum spent on these items. -----Examples----- Input 5 1 12 5 111 200 10 Output 2 6 Input 7 1 2 3 4 5 6 7 20 Output 5 15 -----Note----- In the first example, you can buy the items priced at 1 and 5, spending a total of 6 units, which is the maximum number of items you can buy within the budget of 10 units. In the second example, you can buy the first five items, priced at 1, 2, 3, 4, and 5, spending a total of 15 units, which is the maximum number of items you can buy within the budget of 20 units.","solution":"def max_items(prices, budget): Returns the maximum number of items that can be bought without exceeding the budget and the total sum spent on these items. prices.sort() total_spent = 0 count = 0 for price in prices: if total_spent + price <= budget: total_spent += price count += 1 else: break return count, total_spent"},{"question":"You are developing a text-based role-playing game in which each character can collect various items. Your objective is to implement a system that categorizes these items into relevant collections that the character can carry. The input is a list of items with their respective type as a prefix in the form `type_item`. The types are `weapon`, `potion`, and `armor`. Your task is to write a function that processes the input list and outputs a string where each type is followed by a line containing all the items in that type\'s collection, sorted alphabetically and separated by commas. For example, given: ``` [\\"weapon_sword\\", \\"potion_health\\", \\"armor_shield\\", \\"weapon_axe\\", \\"potion_mana\\", \\"armor_helmet\\"] ``` output: ``` \\"weapon:axe,swordnpotion:health,mananarmor:helmet,shield\\" ``` Assume the following: 1. The input will always be a list of strings in the format `type_item`. 2. Strings will be in lower case. 3. The input list will not be empty. 4. Type and/or item will not be empty. 5. There are no duplicate items. 6. All types may not be represented in the input.","solution":"def categorize_items(item_list): Categorizes the items into their respective types and returns a formatted string of the collections. Parameters: item_list (list): List of items with \'type_item\' format. Returns: str: Formatted string with each type followed by sorted items. from collections import defaultdict categories = defaultdict(list) for item in item_list: type_, item_name = item.split(\'_\', 1) categories[type_].append(item_name) result = [] for type_ in sorted(categories.keys()): items = sorted(categories[type_]) result.append(f\\"{type_}:{\',\'.join(items)}\\") return \'n\'.join(result)"},{"question":"Given a list of integers, return a list of all possible products of any two distinct numbers from the list. For example, given the list `[1, 2, 3, 4]`: all possible products of any two distinct numbers from that list are: [ 1 * 2, 1 * 3, 1 * 4, 2 * 3, 2 * 4, 3 * 4 ] Therefore the result must be: [ 2, 3, 4, 6, 8, 12 ]","solution":"from itertools import combinations def all_possible_products(numbers): Given a list of integers, return a list of all possible products of any two distinct numbers from the list. :param numbers: List of integers :return: List of products of any two distinct numbers products = [] for combination in combinations(numbers, 2): products.append(combination[0] * combination[1]) return products"},{"question":"Roman has a strange way of writing expressions. He writes each number from 1 to n in a sequence and separates each number with an operator \'+\', \'-\', \'*\' or \'/\'. Roman can choose any operator for each pair of numbers, but he has to use exactly n-1 operators. For example, for n=3, one possible expression could be \\"1+2*3\\". Roman\'s goal is to maximize the result of the expression. Assume that addition (+) and subtraction (-) have the lowest precedence, arithmetic multiplication (*) has medium precedence, and division (/) has the highest precedence. Operators of the same precedence are evaluated from left to right. Write a program that calculates the maximum possible value of the expression for given n. Note that division should be treated as integer division. Input format The input consists of a single integer n, representing the number of numbers to be used. Output format Print the maximum result of an expression formed by using the numbers 1 through n and applying the operators as described. Constraints 1 ≤ n ≤ 10^6 SAMPLE INPUT 3 SAMPLE OUTPUT 8 Explanation For n = 3, the optimal expression is \\"1 * (2 + 3)\\" which evaluates to 1 * 5 = 5, but given the operators precedence the correct optimal expression becomes \\"1+2*3=8\\". For n = 4, the optimal expression is \\"1 * (2 + 3 * 4)\\" which evaluates to 1 * (2 + 12) = 14, but given the operators precedence the correct optimal expression becomes \\"1+2+3*4= 15\\". Note that the optimal expression can differ based on the rules of precedence of operators, and the integer division behavior. Maximizing the result requires taking advantage of higher precedence operations and structuring the expression accordingly.","solution":"def max_expression_value(n): Returns the maximum possible value of the expression for given n. if n == 1: return 1 # Starting with 1, and then appending all numbers from 2 to n numbers = list(range(1, n+1)) # Implementing the optimal strategy which is: # 1 + (2 * 3 * 4 * ... n) to take advantage of multiplication result = 1 for i in range(2, n+1): result *= i return result + 1"},{"question":"You are given a list of N activities and their respective start and end times. Each activity has a unique identifier denoted by an integer ID. Your task is to find the maximum number of activities that can be scheduled without overlapping, and provide the IDs of these activities in a sequence respecting their schedule order. Each activity requires one time slot. Two activities [i1, i2] and [j1, j2] overlap if their time intervals intersect, i.e., i1 < j2 and j1 < i2. Implement an efficient algorithm to solve this problem. -----Input----- - The first line of the input contains a single integer, N, denoting the number of activities. - The next N lines contain three integers each: Ai (Activity ID), Si (Start time), and Ei (End time). -----Output----- Output a single line containing the maximum number of non-overlapping activities followed by their IDs in a space-separated list. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ Ai ≤ 1,000,000 - 1 ≤ Si < Ei ≤ 1,000,000,000 -----Example----- Input: 5 1 1 4 2 3 5 3 0 6 4 5 7 5 8 9 Output: 3 1 4 5 -----Explanation----- The activities with IDs 1, 4, and 5 can be scheduled without any overlapping, and provide the maximum number of non-overlapping activities among the given set. Activity 1 is from 1 to 4, Activity 4 is from 5 to 7, and Activity 5 is from 8 to 9.","solution":"def find_max_non_overlapping_activities(N, activities): Finds the maximum number of non-overlapping activities and their IDs. Parameters: N (int): The number of activities. activities (list of tuples): List of tuples, where each tuple contains (Activity ID, Start time, End time). Returns: tuple: A tuple containing the maximum number of non-overlapping activities and the list of their IDs. # Sort activities by their end times activities.sort(key=lambda x: x[2]) max_activities = [] last_end_time = -1 for activity in activities: if activity[1] >= last_end_time: max_activities.append(activity[0]) last_end_time = activity[2] return len(max_activities), max_activities"},{"question":"Write a function that takes a string as input and returns the same string with each word reversed, while maintaining the order of the words and the spaces between them. For example, given the input string \\"The quick brown fox\\", the function should return \\"ehT kciuq nworb xof\\". The function should handle multiple spaces between words, preserving the spaces in their original locations. Test examples: ``` reverse_words(\\"Hello World\\") == \\"olleH dlroW\\"; reverse_words(\\"Python is fun\\") == \\"nohtyP si nuf\\"; reverse_words(\\" Code Review \\") == \\" edoC weiveR \\" ```","solution":"def reverse_words(s): Returns the string with each word reversed, maintaining the order of words and spaces. def reverse_word(word): return word[::-1] result = [] word = [] for char in s: if char == \' \': if word: result.append(reverse_word(\'\'.join(word))) word = [] result.append(\' \') else: word.append(char) if word: result.append(reverse_word(\'\'.join(word))) return \'\'.join(result)"},{"question":"Alice is organizing a treasure hunt on a rectangular grid with dimensions P x Q. The grid is divided into unit cells, and each cell has coordinates (i, j), where 1 ≤ i ≤ P and 1 ≤ j ≤ Q. Alice places treasures in K distinct cells. Bob, the treasure hunter, can start at any cell and move to any of the 8 neighboring cells (up, down, left, right, and four diagonals) in one step. Bob\'s goal is to collect all K treasures in the minimum number of moves, starting from any initial cell of his choice. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case consists of three integers P, Q, and K on the first line: the dimensions of the grid and the number of treasures. - The next K lines for each test case contain two integers x and y, denoting the coordinates of a treasure cell. -----Output----- - For each test case, output a single integer representing the minimum number of moves Bob requires to collect all treasures starting from an optimal initial cell. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ P, Q ≤ 1000 - 1 ≤ K ≤ min(P * Q, 100) -----Example----- Input: 2 3 3 1 2 2 3 3 2 1 1 3 3 Output: 0 2 -----Explanation----- Example case 1: The grid is 3x3 and there is only one treasure at (2,2). If Bob starts at (2,2), he doesn\'t need to move at all. Thus, the minimum number of moves required is 0. Example case 2: The grid is 3x3 and there are two treasures at (1,1) and (3,3). If Bob starts at cell (2,2), he can collect both treasures in 2 moves. Thus, the minimum number of moves required is 2.","solution":"def min_moves_to_collect_treasures(P, Q, treasures): if len(treasures) == 1: # If there is only one treasure, the optimal start is on the treasure itself, so 0 moves required. return 0 # Find the minimum and maximum x and y coordinates of the treasures min_x = min(t[0] for t in treasures) max_x = max(t[0] for t in treasures) min_y = min(t[1] for t in treasures) max_y = max(t[1] for t in treasures) # The optimal initial cell can be any one from where Bob can reach the farthest treasures. max_distance = max(max_x - min_x, max_y - min_y) return max_distance def process_input(input_data): input_lines = input_data.strip().split(\'n\') index = 0 T = int(input_lines[index]) index += 1 results = [] for _ in range(T): P, Q, K = map(int, input_lines[index].split()) index += 1 treasures = [] for _ in range(K): x, y = map(int, input_lines[index].split()) treasures.append((x, y)) index += 1 result = min_moves_to_collect_treasures(P, Q, treasures) results.append(result) return results"},{"question":"Given two strings s1 and s2, your task is to compute the minimum number of operations required to convert s1 into s2. The possible operations are: 1. Insert a character 2. Remove a character 3. Replace a character Your program should implement a dynamic programming approach to solve the problem. Constraints: * 1 ≤ length(s1), length(s2) ≤ 1000 Input: The input consists of two strings s1 and s2, each on a separate line. Output: Print the minimum number of operations required to convert s1 to s2. Example: Input: ```plaintext abcdef azced ``` Output: ```plaintext 3 ``` Explanation: Convert \\"abcdef\\" to \\"azced\\" with the following 3 operations: 1. Replace \'b\' with \'z\' 2. Replace \'f\' with \'d\' 3. Remove \'e\'","solution":"def min_operations_to_convert(s1, s2): Compute the minimum number of operations required to convert s1 into s2. The possible operations are: 1. Insert a character 2. Remove a character 3. Replace a character m = len(s1) n = len(s2) # Create a DP table with (m+1) rows and (n+1) columns dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Need j insertions if s1 is empty elif j == 0: dp[i][j] = i # Need i deletions if s2 is empty elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # No operations needed if characters match else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"Alice and Bob are playing a game with strings. They have a string S and their goal is to determine the smallest lexicographical string that can be obtained by removing exactly one character from S. The smallest lexicographical string is the one that is the alphabetically smallest when compared character by character. Input: - The first line contains the integer T, the number of test cases. - Each of the next T lines contains a single string S. Output: - For each test case, print the smallest lexicographical string that can be obtained by removing exactly one character from S. Constraints: - 1 <= T <= 10^5 - 2 <= |S| <= 10^5 - The sum of lengths of all strings in one input set will not exceed 10^6. Sample input: 3 abc abz bca Sample output: ab ab ba","solution":"def smallest_lexicographical_string_after_removal(T, strings): Given the number of test cases T and a list of strings `strings`, returns a list of the smallest lexicographical strings that can be obtained by removing exactly one character from each string. results = [] for S in strings: min_string = S[1:] # Initialize with the string without the first character for i in range(len(S)): new_string = S[:i] + S[i+1:] if new_string < min_string: min_string = new_string results.append(min_string) return results"},{"question":"A company has a series of projects to tackle, each project depends on the completion of some other project(s). The company wants to schedule projects such that all the dependencies are resolved correctly before starting a new project and they also want to ensure that they maximize the number of projects completed by the deadline. You are given a list of n projects. Each project i has a deadline d_i and p_i which is the number of days required to complete the project. Additionally, for each project you are also given a list of projects that need to be completed before this project can start (these prerequisites are given in the form of a list within the input). Your task is to find the order of projects that fulfills all the prerequisites and maximizes the number of projects that can be completed before their respective deadlines. -----Input----- The first line contains an integer n (1 <= n <= 1000) — the number of projects. The next n lines describe the projects. The i-th line contains two integers d_i and p_i (1 <= d_i, p_i <= 1000) indicating the deadline and the duration to complete the project. The next line consists of an integer m (0 <= m <= n(n-1)/2) — the number of prerequisite pairs. The following m lines contain pairs of integers u and v (1 <= u, v <= n), each representing a prerequisite relation, indicating project v cannot start until project u is completed. -----Output----- If it is not possible to complete any projects, print 0. Otherwise, print the maximum number of projects that can be completed before their deadlines. -----Examples----- Input 4 5 2 6 3 4 1 3 2 2 1 2 3 4 Output 3 Input 3 5 2 6 3 3 1 1 2 3 Output 2 -----Note----- In the first example, we can complete the projects in the order: 1, 4, 3, 2. The projects 1, 3, 4 can be completed before their deadlines while project 2 cannot therefore the maximum number of projects completed before deadlines is 3. In the second example, we can complete the projects 1 and 3 before their respective deadlines.","solution":"from collections import defaultdict, deque def project_schedule(n, projects, m, prerequisites): deadlines = [0] * n durations = [0] * n for i in range(n): deadlines[i], durations[i] = projects[i][0], projects[i][1] prereq_graph = defaultdict(list) indegree = [0] * n for pre in prerequisites: u, v = pre[0] - 1, pre[1] - 1 prereq_graph[u].append(v) indegree[v] += 1 order = [] queue = deque([i for i in range(n) if indegree[i] == 0]) while queue: node = queue.popleft() order.append(node) for neighbor in prereq_graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) != n: return 0 current_time = 0 completed_projects = 0 for project in order: if current_time + durations[project] <= deadlines[project]: current_time += durations[project] completed_projects += 1 else: current_time += durations[project] return completed_projects"},{"question":"Given a binary search tree (BST), transform it into a greater tree where every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. This transformation should be done in-place and should use a recursive approach. Example 1: Input: root = [5,2,13] Output: [18,20,13] Explanation: The given BST [5,2,13] is transformed to [18,20,13]. Example 2: Input: root = [2,0,3,-4,1] Output: [5,6,3,2,6] Explanation: The given BST [2,0,3,-4,1] is transformed to [5,6,3,2,6]. Example 3: Input: root = [0,null,1] Output: [1,null,1] Explanation: The given BST [0,null,1] is transformed to [1,null,1]. Constraints: The number of nodes in the tree is in the range [1, 10^4]. The values of the nodes of the tree are unique. The BST is valid.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def convertBST(root: TreeNode) -> TreeNode: Transform the given BST into a greater tree where every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. sum_greater = 0 def reverse_inorder_traversal(node): nonlocal sum_greater if node is not None: reverse_inorder_traversal(node.right) sum_greater += node.val node.val = sum_greater reverse_inorder_traversal(node.left) reverse_inorder_traversal(root) return root"},{"question":"Karim is learning about the binary search algorithm and its applications. He wants to implement a binary search function to find the position of a target value within a sorted array of integers. If the target value is not found, the function should return -1. Given a sorted array `arr[]` of `n` elements and an integer `target`, implement the binary search algorithm to find the index of `target` in `arr`. Use both iterative and recursive approaches. Write two functions `binarySearchIterative()` and `binarySearchRecursive()` that take the same parameters and return the index of the target element. If the target is not present in the array, return -1. Example 1: Input: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] target = 5 Output: 4 Explanation: The target value 5 is found at index 4. Example 2: Input: arr = [10, 20, 30, 40, 50, 60] target = 35 Output: -1 Explanation: The target value 35 is not found in the array. Constraints: 1 <= n <= 10^4 -10^5 <= arr[i], target <= 10^5 Your Task: You don\'t need to read input or print anything. Your task is to complete two functions `binarySearchIterative()` and `binarySearchRecursive()` which take `arr[]`, `n` (length of the array), and `target` as input parameters and return the index of the target element. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) for the iterative approach and O(log n) for the recursive approach.","solution":"def binarySearchIterative(arr, n, target): Perform a binary search to find the index of \'target\' in the sorted array \'arr\'. This function uses an iterative approach. left, right = 0, n - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 def binarySearchRecursive(arr, n, target): Perform a binary search to find the index of \'target\' in the sorted array \'arr\'. This function uses a recursive approach. def search(left, right): if left > right: return -1 mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: return search(mid + 1, right) else: return search(left, mid - 1) return search(0, n - 1)"},{"question":"Write a function that takes a list of integers as input and returns a list containing only the prime numbers from the input list. A number is prime if it is greater than 1 and has no divisors other than 1 and itself. Your function should iterate through the input list, check each element for primality, and collect the prime numbers in the result list. # Example: **Input:** [2, 4, 6, 7, 13, 15, 16, 19, 23] **Output:** [2, 7, 13, 19, 23] # Note: - The input list can contain both positive and negative numbers, as well as zero. - Only positive numbers greater than 1 will be considered for primality checks.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Implement a function that takes a string representing a sequence of steps and determines whether a robot, starting from an origin point (0, 0), returns to the origin after executing all the steps. Each step in the sequence is represented by a character: - \'U\' for moving up by 1 unit - \'D\' for moving down by 1 unit - \'L\' for moving left by 1 unit - \'R\' for moving right by 1 unit Notes: 1. The input string can contain any number of steps. 2. The function should return True if the robot returns to the origin, and False otherwise. Some examples: \'UDLR\' -> True // The robot moves up, down, left, right and returns to (0, 0) \'UUDDLLRR\' -> True // The robot moves up twice, down twice, left twice, right twice and returns to (0, 0) \'UU\' -> False // The robot moves up twice and does not return to the origin \'UDRLU\' -> False // The robot moves up, down, right, left, up and does not return to the origin (ends at (0, 1)) The output should be a boolean indicating whether the robot returns to the origin.","solution":"def is_robot_back_to_origin(steps): Determines if the robot returns to the origin after executing the steps. Parameters: steps (str): A string where \'U\' means up, \'D\' means down, \'L\' means left, and \'R\' means right. Returns: bool: True if the robot is back to the origin, False otherwise. x, y = 0, 0 for step in steps: if step == \'U\': y += 1 elif step == \'D\': y -= 1 elif step == \'L\': x -= 1 elif step == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Given a string s, determine the minimum number of characters to be removed to make s a palindrome. A string is a palindrome if it reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes, but \\"hello\\" is not. Function Description Complete the `minDeletionsForPalindrome` function in the editor below. It should return an integer that represents the minimum number of deletions needed to make s a palindrome. `minDeletionsForPalindrome` has the following parameter(s): - `s`: a string Input Format A single line of input, a string s. Constraints - 1 leq |s| leq 1000 - s consists of lowercase English letters. Output Format Print a single integer representing the minimum number of deletions needed to make s a palindrome. Sample Input 0 abcdba Sample Output 0 1 Explanation 0 By removing the character \'c\' from the string, we get the string \\"abdda\\", which is a palindrome. Sample Input 1 abcdefgh Sample Output 1 7 Explanation 1 The string \\"abcdefgh\\" has no palindromic subsequence longer than one character, so the best strategy is to remove all but one character, thereby leaving a single character, which is trivially a palindrome. Thus, 7 deletions are required. Sample Input 2 banana Sample Output 2 1 Explanation 2 By removing the character \'b\' from the string, we get the string \\"anana\\", which is a palindrome.","solution":"def minDeletionsForPalindrome(s): Determines the minimum number of deletions needed to make string s a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if s[start] == s[end]: dp[start][end] = dp[start + 1][end - 1] else: dp[start][end] = 1 + min(dp[start + 1][end], dp[start][end - 1]) return dp[0][n - 1]"},{"question":"Given an array of n integers, your task is to determine the parity (either \\"even\\" or \\"odd\\") of the sum of the integers present between two given indices, inclusive. You are also allowed to change up to q elements of the array to any integer of your choice. Input The first line contains two integers, n and q (1 ≤ n, q ≤ 105) which represent the number of elements in the array and the number of changes you are allowed to make, respectively. The second line contains n integers a1, a2, ..., an (|ai| ≤ 109) — the elements of the array. The numbers are separated by single spaces. The third line contains an integer m (1 ≤ m ≤ 105) which represents the number of queries. Each of the following m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subarray (1-based index) for which you need to determine the parity of the sum of its elements. Output For each query, output \\"even\\" if the sum of the subarray from index l to r is even, otherwise output \\"odd\\". Examples Input 5 2 4 3 1 6 5 3 1 3 2 4 1 5 Output even even odd Input 4 1 2 7 9 8 2 1 2 3 4 Output odd odd Note In the first example, the subarray sums are: - Elements from index 1 to 3: 4 + 3 + 1 = 8, which is even. - Elements from index 2 to 4: 3 + 1 + 6 = 10, which is even. - Elements from index 1 to 5: 4 + 3 + 1 + 6 + 5 = 19, which is odd. In the second example, the subarray sums are: - Elements from index 1 to 2: 2 + 7 = 9, which is odd. - Elements from index 3 to 4: 9 + 8 = 17, which is odd. You are given q changes but are not required to use them unless it is necessary to achieve the desired output based on the queries.","solution":"def determine_parity_of_subarray_sums(n, q, array, m, queries): This function determines the parity of the sums of subarrays as specified by the given queries. Parameters: n (int): The number of elements in the array. q (int): The number of changes allowed to make in the array. array (list of int): The list of integers representing the array. m (int): The number of queries. queries (list of tuples of int): The list of queries with each query represented as a tuple (l, r). Returns: list of str: A list of strings where each string is \\"even\\" or \\"odd\\" corresponding to the queries. results = [] for l, r in queries: subarray_sum = sum(array[l-1:r]) if subarray_sum % 2 == 0: results.append(\\"even\\") else: results.append(\\"odd\\") return results"},{"question":"# Task You are given an array of integers representing the heights of horizontal bars. Each bar can trap rainwater above it after it rains. Given an integer array heights, where each element represents the height of a bar, compute how much water it is able to trap after raining. # Example For `heights = [0,1,0,2,1,0,1,3,2,1,2,1]`, the output should be `6`. Explanation: The bars at indices 1, 3, 6, 7, and 10 are capable of trapping 1, 4, 1, 1, and 1 units of water respectively. For `heights = [4,2,0,3,2,5]`, the output should be `9`. # Input/Output - `[input]` integer array `heights` Array of non-negative integers representing the heights of the bars. Constraints: `1 ≤ heights.length ≤ 10000`, `0 ≤ heights[i] ≤ 1000` - `[output]` an integer Total amount of trapped rainwater.","solution":"def trap_water(heights): Calculate how much water can be trapped after raining. :param heights: List[int] representing the height of each bar. :return: Integer representing the total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In a digital drawing application, you can create shapes on a canvas using various commands. Your task is to help the application handle a specific set of commands that manipulate rectangles on a canvas. The canvas is a grid of pixels with h rows and w columns, indexed from (1,1) to (h,w). There are n commands, where each command represents one of the following operations: 1. **Draw** a rectangle: This command is given by `draw x1 y1 x2 y2`, which will set the pixels of all grid cells from the top-left corner (x1, y1) to the bottom-right corner (x2, y2) to `1`. 2. **Erase** a rectangle: This command is given by `erase x1 y1 x2 y2`, which will set the pixels of all grid cells from the top-left corner (x1, y1) to the bottom-right corner (x2, y2)` to `0`. 3. **Count** the number of pixels that are set to `1`: This command is given by `count`, which will return the number of pixels in the canvas that are currently set to `1`. Given the dimensions of the canvas and a list of commands, your task is to determine the result of each `count` command. **Input:** - The first line contains three integers h, w, and n (1 leq h, w leq 1000, 1 leq n leq 10^5) — the height and width of the canvas, and the number of commands. - The next n lines each contain one of the commands described above. **Output:** - For each `count` command, output a single integer — the number of pixels set to `1` after the command is executed. **Example:** Input: ``` 5 5 6 draw 1 1 2 2 count draw 3 3 4 4 count erase 1 1 2 2 count ``` Output: ``` 4 8 4 ``` **Note:** In the given example, here is a step-by-step explanation: 1. The `draw 1 1 2 2` command sets the pixels in a 2x2 block at the top-left corner. 2. The `count` command outputs `4`, as there are 4 pixels set to `1`. 3. The `draw 3 3 4 4` command sets another 2x2 block, this time somewhere in the middle. 4. The `count` command now outputs `8` because there are 8 pixels set to `1` in total. 5. The `erase 1 1 2 2` command erases the original 2x2 block. 6. The final `count` command outputs `4` as only the second block remains set to `1`.","solution":"def digital_drawing_application(h, w, n, commands): canvas = [[0] * w for _ in range(h)] def apply_draw(x1, y1, x2, y2): for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): canvas[i][j] = 1 def apply_erase(x1, y1, x2, y2): for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): canvas[i][j] = 0 def apply_count(): return sum(sum(row) for row in canvas) result = [] for command in commands: parts = command.split() if parts[0] == \'draw\': _, x1, y1, x2, y2 = parts apply_draw(int(x1), int(y1), int(x2), int(y2)) elif parts[0] == \'erase\': _, x1, y1, x2, y2 = parts apply_erase(int(x1), int(y1), int(x2), int(y2)) elif parts[0] == \'count\': result.append(apply_count()) return result"},{"question":"To celebrate his birthday, Chef has invited all his friends to a party. Chef decides to distribute candies to his friends in a special way. Chef gives candies in a circular manner, i.e., if a friend receives a candy, the next candy is distributed to the next friend in the circle, and after the last friend, it goes back to the first friend. Chef has already decided the number of candies each friend should get, but he needs your help to determine if he has enough candies to fulfill everyone\'s requirement. Can you create a function that verifies if Chef has enough candies to give each friend the required amount? -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test contains two integers N and C, where N is the number of friends and C is the total number of candies Chef has. The next line contains N integers which represent the number of candies each friend wants. -----OUTPUT----- For each test case, output a single line printing \\"YES\\" if Chef has enough candies, otherwise print \\"NO\\". -----CONSTRAINTS----- 1 < T < 50 1 < N < 100 1 < C < 105 0 < number of candies each friend wants < 105 -----EXAMPLE----- Input: 2 4 10 2 3 1 2 3 10 5 5 5 Output: YES NO","solution":"def has_enough_candies(T, test_cases): Determines if Chef has enough candies to distribute as per the friends\' requirements. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - N (int): Number of friends, - C (int): Total number of candies, - requirements (list of int): Candies each friend wants. Returns: list of str: List of \\"YES\\" or \\"NO\\" for each test case based on whether the number of candies is sufficient. results = [] for case in test_cases: N, C, requirements = case if sum(requirements) <= C: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): Parses the input string to extract test cases. Parameters: input_string (str): Complete input as a single string. Returns: tuple: - int: Number of test cases - list of tuples: Each tuple contains: - N (int): Number of friends, - C (int): Total number of candies, - list of int: Candies each friend wants. lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, C = map(int, lines[index].split()) requirements = list(map(int, lines[index + 1].split())) test_cases.append((N, C, requirements)) index += 2 return T, test_cases"},{"question":"Given an integer array nums where each element appears exactly twice except for one element which appears exactly once. Implement a function singleNumber that finds and returns the single element that appears only once. Your function should have a linear runtime complexity and use only constant extra space. Example 1: Input: nums = [2, 2, 1] Output: 1 Example 2: Input: nums = [4, 1, 2, 1, 2] Output: 4 Example 3: Input: nums = [1] Output: 1 Your Task: You don\'t need to read input or print anything. Simply complete the function singleNumber() which takes nums as input and returns the single unique element. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ nums.length ≤ 3 * 10^4 -3 * 10^4 ≤ nums[i] ≤ 3 * 10^4","solution":"def singleNumber(nums): Given an array of integers where every element appears twice except for one, finds that single element that appears only once. Args: nums (list of int): A list of integers where each element appears twice except for one. Returns: int: The single element that appears only once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Given a list of integers, write a function to determine if a subset of the list can be split into two sublists such that the sums of the elements in both sublists are equal. The function should return a boolean value: `True` if such a split is possible, and `False` otherwise. **Examples:** ``` split_subset([1, 5, 11, 5]) -> True # [1, 5, 5] and [11] split_subset([1, 2, 3, 5]) -> False # No such sublists exist split_subset([3, 3, 3, 4, 5]) -> True # [3, 3, 3] and [4, 5] split_subset([2, 2, 3, 5]) -> False # No such sublists exist ``` **Note:** You can assume the single list contains only positive integers and its length will be at least 2.","solution":"def split_subset(nums): Determines if a subset of the list can be split into two sublists such that the sums of the elements in both sublists are equal. Args: nums (list of int): The list of integers. Returns: bool: True if such a split is possible, False otherwise. total_sum = sum(nums) # If the total sum is not even, it cannot be split into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # DP array to keep track of sums that can be formed with subsets dp = [False] * (target + 1) dp[0] = True # Zero sum is always possible for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are given a string s consisting of lowercase English letters. You want to perform a special type of rearrangement of the string characters: 1. In a single operation, you can choose any k distinct characters from the string (k ≥ 2) and reverse the order of those chosen characters in the string, without changing the positions of other characters. For example, if you have the string \\"abcd\\" and you choose the characters \\"a\\", \\"c\\", and \\"d\\", you can reverse their order to produce \\"dcba\\" (since \\"a\\" at the 1st position, \\"c\\" at the 3rd position, and \\"d\\" at the 4th position are selected and reversed to \\"d\\", \\"c\\", and \\"b\\", respectively). Given this operation, determine the lexicographically smallest string that can be achieved by applying this operation any number of times. Input The first line of input contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. The description of the t test cases follows. For each test case, there is a single line containing the string s (1 ≤ |s| ≤ 10^5). Output For each test case, print a single line containing the lexicographically smallest string that can be achieved. Example Input 3 bacd dcba badc Output abcd abcd abcd","solution":"def lexicographically_smallest_possible_string(t, test_cases): Determines the lexicographically smallest string achievable by rearranging the string characters as described in the problem statement using the specified operation. Parameters: t : int Number of test cases. test_cases : list of str List of strings representing each test case. Returns: list of str Lexicographically smallest strings for each test case. def get_smallest_string(s): return \'\'.join(sorted(s)) results = [] for s in test_cases: results.append(get_smallest_string(s)) return results # Test cases input t = 3 test_cases = [\\"bacd\\", \\"dcba\\", \\"badc\\"] # Call the function and print outputs results = lexicographically_smallest_possible_string(t, test_cases) for result in results: print(result)"},{"question":"Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed. Example 1: Input: nums = [3, 2, 2, 3] val = 3 Output: nums = [2, 2] Explanation: After removing 3, the array becomes [2, 2]. The order of the other elements can be in any order. Example 2: Input: nums = [0, 1, 2, 2, 3, 0, 4, 2] val = 2 Output: nums = [0, 1, 3, 0, 4] Explanation: After removing 2, the array can be [0, 1, 3, 0, 4] or any other order of these elements as their relative order might change. Your Task: You don\'t need to read input or print anything. Your task is to implement the function removeElement() which takes an array nums and an integer val and modifies the array in-place, returning the new length of the array after removal. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 100 0 <= nums[i] <= 100 0 <= val <= 100","solution":"def removeElement(nums, val): Removes all occurrences of val in nums in-place and returns the new length of the array. k = 0 # Pointer for the next position to place a non-val element for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"You are managing a warehouse and have a list of products with their weights and values. You need to ship these products in multiple boxes such that the total value of the products in each box does not exceed a given limit, and you want to maximize the total value shipped. Each product can only be shipped in one box, and each box can only contain one product. Write a program to determine the maximum total value that can be obtained given the constraints. Example: Given N=5, weights=[2, 3, 1, 5, 4], values=[3, 4, 2, 8, 5], and maxValue=10. The products can be shipped as follows: - Product 1 with value 3 - Product 2 with value 4 - Product 3 with value 2 - Product 4 with value 8 - Product 5 with value 5 The total value of the products shipped is 3 + 4 + 2 + 8 + 5 = 22 which exceeds the maximum value, so you need to pick products such that the total value does not exceed 10. In this case, one way to do it is to choose products with value 8, and then products with value 2 to keep the total value within the limit. Thus the maximum total value that can be shipped will be 10. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - For each test case, the first line contains a single integer N. - The second line contains N integers representing the weights of the products. - The third line contains N integers representing the values of the products. - The fourth line contains a single integer maxValue. -----Output:----- For each test case, print a single line containing the maximum total value that can be shipped without exceeding the given limit. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 1 le weights[i], values[i] le 1000 - 1 le maxValue le 1000 -----Sample Input:----- 2 5 2 3 1 5 4 3 4 2 8 5 10 4 5 8 3 1 12 10 6 7 13 -----Sample Output:----- 10 13 -----Explanation:----- Test case 1: Choose products with values 8 and 2 (total value 10). Test case 2: Choose product with value 12 (total value 12).","solution":"def max_total_value_in_boxes(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] weights = test_cases[i][\'weights\'] values = test_cases[i][\'values\'] max_value = test_cases[i][\'maxValue\'] # Dynamic programming array to store the maximum value we can get at each possible value up to max_value dp = [0] * (max_value + 1) for j in range(N): for v in range(max_value, values[j] - 1, -1): dp[v] = max(dp[v], dp[v - values[j]] + values[j]) results.append(dp[max_value]) return results"},{"question":"In a land of mystical creatures, there is a special currency called \\"Sparkles\\". Each creature has a unique set of rules for how they earn and spend Sparkles. You have been given data on the income and expenses of several creatures. Your task is to determine which creature has the maximum net savings by subtracting their total expenses from their total income. If multiple creatures have the same net savings, you should select the creature whose name comes last alphabetically. If income is equal to expenses for all creatures, the result is that no creature has any net savings. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of every test case consists of a single integer N - the number of creatures. Then, N lines will follow. Each of these N lines will consist of a creature\'s name, total income, and total expenses, separated by a single space. -----Output----- For each test case, output a single line containing the name of the creature with the highest net savings, or a string \\"No savings\\", if no creature has any net savings. -----Example----- Input: 2 3 Dragon 5000 2000 Unicorn 3000 2500 Phoenix 2000 2500 2 Gryphon 4000 4000 Mermaid 5000 5000 Output: Dragon No savings -----Scoring----- Subtask 1 (20 points): T = 10000, 1 <= N <= 10, 1 <= Income, Expenses <= 100000 Subtask 2 (20 points): T = 1000, 1 <= N <= 100, 1 <= Income, Expenses <= 1000000 Subtask 3 (30 points): T = 100, 1 <= N <= 1000, 1<= Income, Expenses <= 1000000000 Subtask 4 (30 points): T = 10, 1 <= N <= 10000, 1 <= Income, Expenses <= 1000000000 You can safely assume that in all the test cases the length of any creature name will not exceed eight letters. All creatures\' names are unique.","solution":"def max_net_savings(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] creatures = test_cases[i][1] max_savings = float(\'-inf\') creature_with_max_savings = None for creature in creatures: name, income, expenses = creature net_savings = income - expenses if net_savings > max_savings: max_savings = net_savings creature_with_max_savings = name elif net_savings == max_savings: if name > creature_with_max_savings: creature_with_max_savings = name if max_savings <= 0: results.append(\\"No savings\\") else: results.append(creature_with_max_savings) return results"},{"question":"A robot is placed on a grid of size m times n. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (i.e., cell (m-1, n-1)) starting from the top-left corner (i.e., cell (0, 0)). Calculate the total number of unique paths that the robot can take to reach the bottom-right corner from the top-left corner. -----Input:----- - The input consists of two integers m and n which represent the dimensions of the grid. -----Output:----- - Output a single integer representing the number of unique paths the robot can take. -----Constraints----- - 1 leq m,n leq 100 -----Sample Input:----- 3 7 -----Sample Output:----- 28 -----EXPLANATION:----- For a grid of size 3x7, the number of unique paths that the robot can take to reach the bottom-right corner from the top-left corner is 28. The robot has to make a total of m+n-2 moves, out of which m-1 moves are downwards and n-1 moves are towards the right.","solution":"def unique_paths(m, n): Calculate the number of unique paths from top-left to bottom-right in an m x n grid. Parameters: m (int): number of rows n (int): number of columns Returns: int: number of unique paths # Create a 2D array to store the number of ways to reach each cell dp = [[1]*n for _ in range(m)] # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Number of ways to reach the bottom-right corner return dp[m-1][n-1]"},{"question":"You are a botanist studying the growth patterns of various types of plants. For your research, you need to evaluate the growth of plants over a period of time and identify the longest continuous period during which a plant\'s growth is non-decreasing. You are given the height measurements of a plant taken at regular intervals and need to determine this longest continuous non-decreasing growth period for various plants. Input: The first line of input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of height measurements, followed by a line containing N integers representing the height measurements in chronological order. Output: For each test case, print the length of the longest continuous non-decreasing growth period. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Height measurement ≤ 1000 SAMPLE INPUT 3 7 1 2 2 1 3 4 1 5 5 5 5 5 5 6 1 3 2 2 2 3 SAMPLE OUTPUT 3 5 4","solution":"def longest_non_decreasing_growth(heights): Returns the length of the longest continuous non-decreasing growth period in the given list of heights. max_len = 1 curr_len = 1 for i in range(1, len(heights)): if heights[i] >= heights[i-1]: curr_len += 1 else: max_len = max(max_len, curr_len) curr_len = 1 return max(max_len, curr_len) def process_test_cases(T, cases): results = [] for t in range(T): N = cases[t][0] heights = cases[t][1] results.append(longest_non_decreasing_growth(heights)) return results"},{"question":"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Create a function that returns the largest palindromic number that can be made from the product of two 3-digit numbers. The parameter of the function largestPalindrome `(largest_palindrome, largestPalindrome)` will be no parameter and it will return an integer which is the largest palindromic number made from the product of two 3-digit numbers. Example: ``` largestPalindrome() --> 906609 ```","solution":"def largestPalindrome(): Returns the largest palindromic number made from the product of two 3-digit numbers. max_palindrome = 0 for i in range(999, 99, -1): for j in range(i, 99, -1): product = i * j if str(product) == str(product)[0:][::-1] and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"# Task Given a grid with obstacles and an initial position, determine the minimum number of moves required to reach the target position. You can only move up, down, left, or right, and you cannot move through obstacles. Write a function `min_moves(grid, start, target)` that receives an n x m grid representing the map, the starting position, and the target position. The function should return the minimum number of moves required to reach the target position or -1 if it is impossible to reach. - A grid is represented by a list of strings, where \'.\' indicates a free space and \'#\' indicates an obstacle. - The `start` and `target` positions are tuples `(x, y)` representing the row and column on the grid. # Example For `grid = [\\"....\\", \\"..#.\\", \\"....\\"]`, `start = (0, 0)`, and `target = (2, 3)`, the output should be `5`. The shortest path is: - Start at (0,0) - Move to (0,1) - Move to (0,2) - Move to (1,2) - Move to (2,2) - Finally, move to (2,3) # Input/Output - `[input]` list of strings `grid` A grid where each string represents a row. \'.\' represents an open space, and \'#\' represents an obstacle. Constraints: 1 ≤ len(grid) ≤ 20, 1 ≤ len(grid[0]) ≤ 20. - `[input]` tuple `(int, int)` `start` The starting position in the grid as a tuple `(x, y)`. Constraints: 0 ≤ start[0] < len(grid), 0 ≤ start[1] < len(grid[0]). - `[input]` tuple `(int, int)` `target` The target position in the grid as a tuple `(x, y)`. Constraints: 0 ≤ target[0] < len(grid), 0 ≤ target[1] < len(grid[0]). - `[output]` an integer The minimum number of moves required to reach the target position or -1 if it is impossible.","solution":"from collections import deque def min_moves(grid, start, target): Calculate the minimum number of moves required to reach the target position from the start position in the grid. rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] == \'.\' queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == target: return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1"},{"question":"You are given an array A consisting of N integers, where each integer represents the height of a tree in a forest. A tree is considered beautiful if the height of that tree is greater than the height of the tree to its left and less than the height of the tree to its right. Similarly, a tree is also considered beautiful if its height is less than the height of the tree to its left and greater than the height of the tree to its right. Your task is to determine the number of beautiful trees in the forest. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_{1}, A_{2}, ldots, A_{N}. ------ Output: ------ For each test case, print a single line containing one integer ― the number of beautiful trees in the forest. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} ------ Sample Input: ------ 3 5 1 3 2 4 5 6 6 5 4 3 2 1 4 1 2 3 2 ------ Sample Output: ------ 2 0 1","solution":"def count_beautiful_trees(T, test_cases): results = [] for case in test_cases: N, A = case beautiful_count = 0 for i in range(1, N-1): if (A[i-1] < A[i] > A[i+1]) or (A[i-1] > A[i] < A[i+1]): beautiful_count += 1 results.append(beautiful_count) return results"},{"question":"Task You need to implement a matrix multiplication function. Given two matrices A and B, your task is to determine if they can be multiplied, and if they can be, return the result of their multiplication. If they cannot be multiplied, your function should return an empty list. Matrix multiplication is defined only when the number of columns in the first matrix is equal to the number of rows in the second matrix. If A is of size m x n and B is of size n x p, their matrix product C will be of size m x p, where C[i][j] = sum(A[i][k] * B[k][j] for k in range(n)). Input The first line contains two integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns of matrix A. The next m lines each contain n integers (0 ≤ A[i][j] ≤ 100) representing the elements of matrix A. The next line contains two integers n and p (1 ≤ n, p ≤ 100), the number of rows and columns of matrix B (note that the number of rows of matrix B must equal the number of columns of matrix A). The next n lines each contain p integers (0 ≤ B[i][j] ≤ 100) representing the elements of matrix B. Output If the matrices can be multiplied, print the resulting matrix. Otherwise, print an empty list. Examples Input 2 3 1 2 3 4 5 6 3 2 7 8 9 10 11 12 Output 58 64 139 154 Input 2 2 1 2 3 4 3 3 1 2 3 4 5 6 7 8 9 Output [] Explanation In the first example, matrix A is of size 2x3 and matrix B is of size 3x2. They can be multiplied to produce a 2x2 matrix. In the second example, the matrices cannot be multiplied because the number of columns in matrix A (2) does not match the number of rows in matrix B (3). Hence, the output is an empty list.","solution":"def matrix_multiply(A, B): # Check if A and B can be multiplied if len(A[0]) != len(B): return [] # Initialize dimensions m = len(A) n = len(B) p = len(B[0]) # Initialize the resulting matrix with zeros result = [[0 for _ in range(p)] for _ in range(m)] # Perform matrix multiplication for i in range(m): for j in range(p): for k in range(n): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"We have a list of ship positions on a 10x10 grid, given as a list of tuples where each tuple represents the row and column coordinates of the grid. A ship can either be vertical or horizontal and occupies 4 consecutive cells. You need to check whether the provided ship positions are valid, meaning no ships overlap and all ships fit within the grid. Write a function `is_valid_ship_positions(ship_positions)` that returns True if the ship positions are valid and False otherwise. The function signature is as follows: ```python def is_valid_ship_positions(ship_positions: List[Tuple[str, str]]) -> bool: ``` Example 1: Input: ship_positions = [(0,0), (0,1), (0,2), (0,3), (2,2), (3,2), (4,2), (5,2)] Output: True Explanation: The first ship occupies the first row from positions (0,0) to (0,3) and the second ship occupies the column positions (2,2) to (5,2). Both ships are valid and do not overlap. Example 2: Input: ship_positions = [(0,0), (0,1), (0,2), (0,3), (0,2), (1,2), (2,2), (3,2)] Output: False Explanation: The first ship occupies the first row from positions (0,0) to (0,3) and the second ship claims the overlapping cell at position (0,2). Hence, the positions are not valid. Note: - Each ship is either horizontal or vertical, spanning 4 contiguous grid cells. - The grid is of fixed size 10x10 with indices from (0,0) to (9,9). - The input list will always contain an even number of tuples.","solution":"from typing import List, Tuple def is_valid_ship_positions(ship_positions: List[Tuple[int, int]]) -> bool: if not ship_positions: return True ship_positions_set = set(ship_positions) if len(ship_positions_set) != len(ship_positions): return False grid = [[0]*10 for _ in range(10)] for pos in ship_positions: row, col = pos grid[row][col] += 1 if any(grid[row][col] > 1 for row in range(10) for col in range(10)): return False def is_valid_ship(ship): if len(ship) != 4: return False ship.sort() rows, cols = zip(*ship) if len(set(rows)) == 1 and all(cols[i] + 1 == cols[i+1] for i in range(3)): return True if len(set(cols)) == 1 and all(rows[i] + 1 == rows[i+1] for i in range(3)): return True return False visited = set() for pos in ship_positions: if pos in visited: continue stack = [pos] ship = [] while stack: current = stack.pop() if current in visited: continue visited.add(current) ship.append(current) row, col = current for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = row + dr, col + dc if 0 <= nr < 10 and 0 <= nc < 10 and (nr, nc) in ship_positions_set and (nr, nc) not in visited: stack.append((nr, nc)) if not is_valid_ship(ship): return False return True"},{"question":"Design a function that calculates the smallest possible number that is divisibly by all integers from 1 to n (also known as the least common multiple of the set {1, 2, ..., n}). Example 1: Input: n = 5 Output: 60 Explanation: The smallest number that is divisibly by all numbers from 1 to 5 is 60. Example 2: Input: n = 10 Output: 2520 Explanation: The smallest number that is divisibly by all numbers from 1 to 10 is 2520. Constraints: 1 <= n <= 20 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallestMultiple(n)` which takes an integer `n` as parameter and returns the smallest number that is divisible by all integers from 1 to n. Expected Time Complexity: O(n log(log n)) Expected Auxiliary Space: O(1)","solution":"from math import gcd def lcm(a, b): Function to compute the Least Common Multiple (LCM) of two numbers. return a * b // gcd(a, b) def smallestMultiple(n): Returns the smallest number that is divisible by all integers from 1 to n. multiple = 1 for i in range(1, n + 1): multiple = lcm(multiple, i) return multiple"},{"question":"A company has a certain number of employees, each with a unique ID represented by an integer. They use an internal network where each employee can send messages to their contacts. This network can be represented as a directed graph where each node is an employee, and a directed edge from node A to node B means that employee A can directly send a message to employee B. Your task is to write a program that finds the minimum number of employees that need to receive a message directly or indirectly from the CEO to ensure that everyone gets the message. The CEO has an ID of 1. If an employee cannot receive the message in this way, then the message must be delivered to them manually. Input: - The first line contains the number of employees `N` (2 ≤ N ≤ 1000) and the number of direct connections `M` (1 ≤ M ≤ 10000). - The next `M` lines each contain two integers `u` and `v`, meaning that employee `u` can send a message to employee `v`. Output: Print the minimum number of employees that need to be reached directly or indirectly by the CEO to ensure that every employee receives the message. If it is not possible to reach all employees, print -1. Example: Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` 1 ``` In this example, the CEO can indirectly reach all the employees by sending the message to employee 2, who will forward it to 3, then to 4, and finally to 5. If the input was: ``` 5 2 1 2 3 4 ``` The output would be: ``` -1 ``` In this case, employees 3, 4, and 5 cannot be reached by the CEO through any sequence of message forwarding, so it is impossible to ensure all employees receive the message indirectly.","solution":"from collections import deque, defaultdict def min_employees_to_reach_all(N, M, connections): # Build the graph from the connections graph = defaultdict(list) for u, v in connections: graph[u].append(v) # BFS to find all reachable nodes from the CEO (node 1) visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Check if we could reach all nodes if len(visited) == N: # All employees are reachable return 1 else: return -1"},{"question":"To help Wakanda prepare for incoming alien threats, you need to create a special matrix that can be used in their defense systems. The matrix has unique properties defined by King T\'Challa. The matrix must be an `N x N` grid where each cell contains a value that is the sum of its row index and column index (both 0-based), multiplied by a given factor `K`. Your task is to generate such a matrix for given values of `N` and `K`. INPUT: The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains two integers, `N` and `K` describing the matrix size and the factor, respectively. OUTPUT: For each test case, output the `N x N` matrix, with each row on a new line and elements separated by a space. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ K ≤ 1000 SAMPLE INPUT 2 3 2 2 5 SAMPLE OUTPUT 0 2 4 2 4 6 4 6 8 0 5 5 10 Explanation: For the first test case (N=3, K=2), the matrix is constructed as follows: 0*2, 1*2, 2*2 (1+0)*2, (1+1)*2, (1+2)*2 (2+0)*2, (2+1)*2, (2+2)*2 This yields the matrix: 0 2 4 2 4 6 4 6 8 For the second test case (N=2, K=5), the matrix is: 0 5 5 10","solution":"def generate_matrix(N, K): matrix = [] for i in range(N): row = [] for j in range(N): row.append((i + j) * K) matrix.append(row) return matrix def solve(test_cases): results = [] for N, K in test_cases: matrix = generate_matrix(N, K) results.append(matrix) return results"},{"question":"Given a string of lowercase alphabets, find the first non-repeating character in it and return its index. If it does not exist, return -1. ``` first_non_repeating_char(\\"leetcode\\") => 0 (character \'l\') ``` ``` first_non_repeating_char(\\"aabb\\") => -1 ``` The input string will only contain lowercase English letters, and its length will be at least 1.","solution":"def first_non_repeating_char(s): Returns the index of the first non-repeating character in the string s. If no such character exists, returns -1. # Create a dictionary to count the occurrences of each character char_count = {} # Count occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1 for index, char in enumerate(s): if char_count[char] == 1: return index # If no non-repeating character found, return -1 return -1"},{"question":"Alice is preparing for her upcoming programming competition. To enhance her skills, she decided to create a series of problems for herself. One of the problems she designed involves sorting and identifying the median value. Given an array of N distinct integers, Alice wants to sort the array and determine the median value. The median value is defined as the middle element when the number of elements is odd, or the average of the two middle elements when the number of elements is even. Your task is to help Alice by writing a program that will take multiple test cases, sort the arrays, and compute the median values. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of integers in Alice\'s array. The second line contains N space-separated integers A1, A2, ..., AN denoting the integers in the array. -----Output----- For each test case, output a single line containing the median value of the sorted array. If the median is not an integer (in the case of an even number of elements), output it exactly up to one decimal place. -----Constraints----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^9 ≤ Ai ≤ 10^9 -----Example----- Input: 2 5 10 5 1 3 9 6 11 2 4 8 1 6 Output: 5 5.0 -----Explanation----- In the example test there are T=2 test cases. Test case 1: In the first test case N equals to 5, A equals to {10, 5, 1, 3, 9}. After sorting, it becomes {1, 3, 5, 9, 10}. The median value is 5. Test case 2: In the second test case N equals to 6, A equals to {11, 2, 4, 8, 1, 6}. After sorting, it becomes {1, 2, 4, 6, 8, 11}. The median value is (4 + 6) / 2 = 5.0.","solution":"def find_median(arr): Given an array of distinct integers, sorts the array and finds the median value. arr.sort() n = len(arr) if n % 2 == 1: return arr[n // 2] else: median = (arr[n // 2 - 1] + arr[n // 2]) / 2 return round(median, 1) def process_test_cases(test_cases): Processes multiple test cases to find the median for each. Parameters: test_cases (list): List of tuples, each containing an integer N and a list of N integers. Returns: list: List of medians for each test case. results = [] for N, array in test_cases: median = find_median(array) results.append(median) return results"},{"question":"John loves palindromes for their symmetry. A palindrome is a word, number, phrase, or other sequences of characters which reads the same backward as forward. John has a list of N strings, and for each string, he wants to find out if it is a palindrome or not. Since John is busy reading about various types of palindromes, he needs your help to determine the palindromic nature of the strings in his list. -----Input----- The first line of input consists of a single integer N, denoting the number of strings in John\'s list. Then, there are N lines, each of them contains a single string from the list. -----Output----- Output N lines. Each of these lines should contain \\"YES\\" if the corresponding string is a palindrome, otherwise \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 105 - 1 ≤ Length of each string ≤ 100 - The strings consist of printable ASCII characters. -----Example----- Input: 4 radar hello level world Output: YES NO YES NO","solution":"def is_palindrome(s): Returns \'YES\' if the string s is a palindrome, otherwise returns \'NO\'. return \'YES\' if s == s[::-1] else \'NO\' def check_palindromes(strings): Takes a list of strings and returns a list of results (\'YES\' or \'NO\') for each string. results = [] for s in strings: results.append(is_palindrome(s)) return results"},{"question":"Andy is a software engineer and he loves to deal with arrays. One day, he came across a problem where he needs to perform some operations on an array and answer a series of queries. He is given an array of N integers. He needs to perform M operations on the array. In each operation, he will select two indices [L, R] and increment each element between these indices (inclusive) by 1. After performing all M operations, Andy has Q queries. For each query, he needs to report the maximum value in the subarray specified by the query. Input: - First line contains two integers N (the size of the array) and M (the number of operations). - Second line contains N space-separated integers representing the initial array. - Each of the next M lines contains two integers L and R denoting the indices for each operation. - Next line contains a single integer Q (number of queries). - Each of the next Q lines contains two integers L and R denoting the indices for each query. Output: - For each query, output the maximum value in the specified subarray. Constraints: 1 ≤ N ≤ 100000 1 ≤ M ≤ 100000 1 ≤ L ≤ R ≤ N 1 ≤ Q ≤ 100000 1 ≤ initial array elements ≤ 1000000 SAMPLE INPUT 5 3 1 2 3 4 5 1 3 2 5 1 4 2 1 3 2 5 SAMPLE OUTPUT 5 6 Explanation: Initial array: array = [1, 2, 3, 4, 5] After 1st operation (1, 3): array = [2, 3, 4, 4, 5] After 2nd operation (2, 5): array = [2, 4, 5, 5, 6] After 3rd operation (1, 4): array = [3, 5, 6, 6, 6] For the first query (1, 3): The subarray is [3, 5, 6] and the maximum value is 6. For the second query (2, 5): The subarray is [5, 6, 6, 6] and the maximum value is 6.","solution":"def process_operations(N, M, array, operations, Q, queries): Processes the operations on the array and answers the queries. :param N: The size of the array :param M: The number of operations :param array: List of N integers representing the initial array :param operations: List of tuples, each containing two integers L and R representing an operation :param Q: The number of queries :param queries: List of tuples, each containing two integers L and R representing a query :return: List of results for each query # Create a difference array diff = [0] * (N + 1) for L, R in operations: diff[L - 1] += 1 if R < N: diff[R] -= 1 # Apply the difference array to the initial array increment = 0 modified_array = [] for i in range(N): increment += diff[i] modified_array.append(array[i] + increment) # Process each query to find the maximum in the specified subarray results = [] for L, R in queries: subarray_max = max(modified_array[L - 1:R]) results.append(subarray_max) return results # Example usage: # N = 5, M = 3 # array = [1, 2, 3, 4, 5] # operations = [(1, 3), (2, 5), (1, 4)] # Q = 2 # queries = [(1, 3), (2, 5)] # The expected result is [6, 6] # print(process_operations(N, M, array, operations, Q, queries))"},{"question":"Write a function that takes in a list of integers and returns a string indicating whether the list is a valid \\"mountain array\\". A mountain array is defined as an array that: 1. Has at least 3 elements. 2. There exists some index i (0 < i < len(array) - 1) such that: - `array[0] < array[1] < ... < array[i]` and - `array[i] > array[i + 1] > ... > array[len(array) - 1]` Return \\"YES\\" if the array is a mountain array, \\"NO\\" otherwise. Function Description Complete the `isMountainArray` function in the editor below. `isMountainArray` has the following parameter(s): - `int[] array`: a list of integers Returns - `string`: either \\"YES\\" or \\"NO\\" Input Format A single list of integers. Constraints - The list contains integers -10^4 <= array[i] <= 10^4 - 1 <= len(array) <= 10^5 Sample Input 0 [2, 1] Sample Output 0 NO Explanation 0 The array does not have at least 3 elements. Sample Input 1 [3, 5, 5] Sample Output 1 NO Explanation 1 The array does not have a strictly increasing sequence followed by a strictly decreasing sequence. Sample Input 2 [0, 3, 2, 1] Sample Output 2 YES Explanation 2 The array meets the definition of a mountain array.","solution":"def isMountainArray(array): Determines if the array is a mountain array. Parameters: array (list of int): The array of integers. Returns: str: \\"YES\\" if the array is a mountain array, otherwise \\"NO\\". n = len(array) if n < 3: return \\"NO\\" i = 1 # climb up while i < n and array[i] > array[i - 1]: i += 1 # peak can\'t be the first or last if i == 1 or i == n: return \\"NO\\" # climb down while i < n and array[i] < array[i - 1]: i += 1 return \\"YES\\" if i == n else \\"NO\\""},{"question":"John is organizing a treasure hunt in his new game. He has hidden some treasures along a one-dimensional path. Each position on the path can either contain a treasure or be empty. John wants to place clues along the path to indicate where the treasures are. A clue gives the distance to the nearest treasure (in either direction). If a position contains a treasure, the clue at that position is 0. John wants to generate all clues for the given path. Write a program to help John generate the clues for the entire path. Input The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N which denotes the length of the path. The second line contains N space-separated integers Ai, where each integer is either 0 (indicating a treasure) or 1 (indicating an empty position). Output For each test case, print a single line containing N space-separated integers Ci, where each Ci is the clue (the distance to the nearest treasure) for the i-th position. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - Ai is either 0 or 1 Example Input 2 5 1 0 0 1 1 6 1 1 0 1 1 0 Example Output 1 0 0 1 2 2 1 0 1 1 0 Explanation Example case 1: - Position 1 is empty, and the nearest treasure is at position 2 (distance 1). - Position 2 contains a treasure, so the distance is 0. - Position 3 contains a treasure, so the distance is 0. - Position 4 is empty, and the nearest treasure is at position 2 or 3 (distance 1). - Position 5 is empty, and the nearest treasure is at position 3 (distance 2). Example case 2: - Position 1 is empty, and the nearest treasure is at position 3 (distance 2). - Position 2 is empty, and the nearest treasure is at position 3 (distance 1). - Position 3 contains a treasure, so the distance is 0. - Position 4 is empty, and the nearest treasure is at position 3 or 6 (distance 1). - Position 5 is empty, and the nearest treasure is at position 3 or 6 (distance 1). - Position 6 contains a treasure, so the distance is 0.","solution":"def generate_clues(T, test_cases): Generates clues for the nearest treasure distance for each test case. :param T: Number of test cases :param test_cases: List of tuples, [(N, path), ...] where N is the path\'s length, path is a list of integers 0 or 1 :return: List of results for each test case with clues in them results = [] for N, path in test_cases: clues = [float(\'inf\')] * N # First pass (left to right) last_treasure_index = -1 for i in range(N): if path[i] == 0: clues[i] = 0 last_treasure_index = i elif last_treasure_index != -1: clues[i] = i - last_treasure_index # Second pass (right to left) last_treasure_index = -1 for i in range(N - 1, -1, -1): if path[i] == 0: last_treasure_index = i elif last_treasure_index != -1: clues[i] = min(clues[i], last_treasure_index - i) results.append(clues) return results def format_output(results): Formats the output for each test case result. :param results: List of results for each test case :return: Formatted string output for each test case result output_lines = [] for clues in results: output_lines.append(\\" \\".join(map(str, clues))) return \\"n\\".join(output_lines)"},{"question":"Write a function `shortestSubarraySum(nums, k)` that takes an array `nums` of integers and an integer `k`, and returns the length of the shortest subarray that has a sum of at least `k`. If there is no such subarray, return -1. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 11 Output: 3 Explanation: The subarray [3, 4, 5] has the minimum length for a sum of at least 11. Example 2: Input: nums = [2, -1, 2], k = 3 Output: 3 Explanation: The subarray [2, -1, 2] is the only subarray that can achieve a sum of at least 3. Example 3: Input: nums = [1, 2, 3], k = 7 Output: -1 Explanation: No subarray has a sum of at least 7. Example 4: Input: nums = [-2, 1, -1, 1, 2, 4], k = 4 Output: 1 Explanation: The subarray [4] has the minimum length for a sum of at least 4. Constraints: - 1 <= len(nums) <= 10^5 - -10^5 <= nums[i] <= 10^5 - 1 <= k <= 10^9","solution":"from collections import deque def shortestSubarraySum(nums, k): Returns the length of the shortest subarray that has a sum of at least k. If there is no such subarray, return -1. n = len(nums) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + nums[i] result = float(\'inf\') dq = deque() for i in range(n + 1): while dq and prefix_sum[i] - prefix_sum[dq[0]] >= k: result = min(result, i - dq.popleft()) while dq and prefix_sum[i] <= prefix_sum[dq[-1]]: dq.pop() dq.append(i) return result if result != float(\'inf\') else -1"},{"question":"During a grand treasure hunt adventure, n teams are competing to solve puzzles and collect clues. Each team has three members: Alex, Blake, and Casey. For each puzzle, at least two members need to agree on a particular solution for the team to submit it. If fewer than two members agree on a solution, the team will skip that puzzle. You are given the number of puzzles in the treasure hunt and each member\'s decision on whether they agree with the solution for each puzzle. Your task is to determine how many puzzles each team will attempt to solve. Input The first input line contains a single integer n (1 ≤ n ≤ 1000) — the number of puzzles in the treasure hunt. Each of the next n lines contains three integers, each being either 0 or 1. If the first number is 1, Alex agrees on the solution, otherwise, he doesn\'t. The second number indicates Blake\'s decision, and the third number indicates Casey\'s decision. The integers are space-separated. Output Print a single integer — the number of puzzles the team will attempt to solve. Examples Input 4 1 1 0 0 1 0 1 1 1 0 0 0 Output 2 Input 3 1 0 1 0 1 1 1 0 0 Output 2 Note In the first sample, Alex and Blake are in agreement on the solution for the first puzzle, and all three members agree on the third puzzle\'s solution. Thus, the team will attempt these two puzzles. For the second and fourth puzzles, fewer than two members agree on the solution, so the team won\'t attempt them. In the second sample, Alex and Casey agree on the solution for the first puzzle, and Blake and Casey agree on the solution for the second puzzle. Alex is the only one agreeing on the third puzzle, which is not enough, so the team will not attempt it.","solution":"def count_puzzles_to_attempt(n, decisions): Parameters: n (int): Number of puzzles decisions (list of list of int): Each list contains three integers where each integer is either 0 or 1. Returns: int: The number of puzzles the team will attempt to solve attempt_count = 0 for decision in decisions: if sum(decision) >= 2: attempt_count += 1 return attempt_count"},{"question":"Alice has a to-do list for today with n tasks, some of which may depend on the completion of other tasks. Alice wants to complete all possible tasks as soon as she can, following the dependency rules. If task A depends on task B, then task B must be completed before task A. Write a program to determine the order in which Alice can complete her tasks, such that dependencies are satisfied, or determine if it is impossible to complete all tasks due to a cyclic dependency. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000), the number of tasks. The second line contains an integer m (0 ≤ m ≤ 200,000), the number of dependencies. Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n), meaning that task u depends on task v. -----Output----- If it is possible to complete all tasks, print a single line with the tasks in the order they can be completed. If there are multiple valid orders, any one is acceptable. If it is impossible to complete all tasks, print a single line with the word \\"Impossible\\". -----Examples----- Input 5 4 1 2 2 3 4 3 4 5 Output 5 3 2 1 4 Input 3 3 1 2 2 3 3 1 Output Impossible -----Explanation----- In the first example, the dependencies are: - Task 1 depends on Task 2. - Task 2 depends on Task 3. - Task 4 depends on Task 3. - Task 4 depends on Task 5. A valid order would be 5 3 2 1 4, among other possibilities. In the second example, the dependencies form a cycle (1 -> 2 -> 3 -> 1), making it impossible to complete all tasks.","solution":"from collections import deque, defaultdict def task_order(n, dependencies): indegree = [0] * (n + 1) adj_list = defaultdict(list) for u, v in dependencies: adj_list[v].append(u) indegree[u] += 1 queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == n: return order else: return \\"Impossible\\""},{"question":"Jim and Bob are playing a game on a grid that is initially filled with water. The grid is represented as a 2D array where each element is either water (\'.\') or a solid block (\'#\'). Both Jim and Bob start on opposite corners of the grid: Jim starts at the top-left corner, and Bob starts at the bottom-right corner. Their goal is to meet each other by moving towards each other on the grid. Jim and Bob can move vertically or horizontally, but not diagonally. They cannot move through or onto a solid block, and they cannot occupy the same cell at the same time. If Jim or Bob fails to find a path to meet each other, the result is \\"IMPOSSIBLE\\". Otherwise, if they manage to meet, the result is \\"POSSIBLE\\". Consider that Jim and Bob always make the optimal choices to meet each other. Input You are given an integer `n` (the size of the `n x n` grid), followed by `n` strings representing the grid. Each string contains `n` characters, where each character can be either \'.\' or \'#\'. Output Print \\"POSSIBLE\\" if Jim and Bob can meet each other, otherwise print \\"IMPOSSIBLE\\". Examples Input 5 ..... .#... ... ..... ...#. Output POSSIBLE Input 5 ..... . . ..# ..# Output IMPOSSIBLE Input 3 .#. #.# .#. Output IMPOSSIBLE","solution":"from collections import deque def is_possible_to_meet(n, grid): Determines if Jim and Bob can meet on the grid. Parameters: n (int): Size of the grid (n x n) grid (list of str): The grid represented as a list of strings Returns: str: \\"POSSIBLE\\" if Jim and Bob can meet, otherwise \\"IMPOSSIBLE\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start, end): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return False start_jim = (0, 0) end_jim = (n - 1, n - 1) start_bob = (n - 1, n - 1) end_bob = (0, 0) if bfs(start_jim, end_jim) and bfs(start_bob, end_bob): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"Smith is writing a program to analyze DNA sequences. A DNA sequence is represented by a string consisting of the characters \'A\', \'T\', \'C\', and \'G\'. Smith\'s program needs to determine the shortest substring of a given DNA sequence that contains all four nucleotides (\'A\', \'T\', \'C\', \'G\') at least once. Write a program that takes a DNA sequence as input and outputs the length of the shortest substring that contains \'A\', \'T\', \'C\', and \'G\' at least once. If no such substring exists, output 0. -----Input----- The input consists of one line containing a string s — the DNA sequence (1 ≤ |s| ≤ 1000). The string s consists only of characters \'A\', \'T\', \'C\', and \'G\'. -----Output----- Output the length of the shortest substring of s that contains at least one \'A\', \'T\', \'C\', and \'G\'. If there is no such substring, output 0. -----Examples----- Input ATCGTTCA Output 4 Input AAGTTC Output 5 Input AAA Output 0","solution":"def shortest_substring_with_all_nucleotides(s): Returns the length of the shortest substring that contains at least one \'A\', \'T\', \'C\', and \'G\'. If no such substring exists, return 0. required = {\'A\', \'T\', \'C\', \'G\'} n = len(s) min_length = n + 1 left = 0 seen = {} for right in range(n): if s[right] in required: if s[right] in seen: seen[s[right]] += 1 else: seen[s[right]] = 1 while len(seen) == 4: min_length = min(min_length, right - left + 1) if s[left] in seen: seen[s[left]] -= 1 if seen[s[left]] == 0: del seen[s[left]] left += 1 return min_length if min_length <= n else 0"},{"question":"You are given a grid with N rows and M columns, filled with integers. Your task is to determine the maximum sum of any subgrid of size `P x Q` within the given grid. A subgrid of size `P x Q` is a contiguous block of elements that can be formed by selecting P consecutive rows and Q consecutive columns from the original grid. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - The first line of each test case contains three space-separated integers N, M, and P, describing the number of rows and columns of the grid, and the number of rows for the subgrid. - The second line of each test case contains a single integer Q, describing the number of columns for the subgrid. - The next N lines each contain M space-separated integers, representing the rows of the grid. ------ Output Format ------ For each test case, output a single integer that is the maximum sum of any subgrid of size `P x Q` within the given grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 1000 1 ≤ P ≤ N 1 ≤ Q ≤ M -10^6 ≤ text{Grid}[i][j] ≤ 10^6 ----- Sample Input 1 ------ 2 4 5 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 3 3 2 2 -1 -2 -3 -4 -5 -6 -7 -8 -9 ----- Sample Output 1 ------ 72 -6 ----- explanation 1 ------ Test case 1: The subgrid of size 2 times 3 with the maximum sum is: ``` 8 9 10 13 14 15 ``` The sum of this subgrid is `8 + 9 + 10 + 13 + 14 + 15 = 69`. Test case 2: The subgrid of size 2 times 2 with the maximum sum is: ``` -4 -5 -7 -8 ``` The sum of this subgrid is `-4 + -5 + -7 + -8 = -24`. This demonstrates the required functionality: finding the maximum sum of a `P x Q` subgrid within the given grid for each test case.","solution":"def max_subgrid_sum(N, M, P, Q, grid): max_sum = -float(\'inf\') # Create prefix sum array prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1] # Calculate the max sum of any subgrid of size P x Q for i in range(P, N + 1): for j in range(Q, M + 1): subgrid_sum = prefix_sum[i][j] - prefix_sum[i - P][j] - prefix_sum[i][j - Q] + prefix_sum[i - P][j - Q] max_sum = max(max_sum, subgrid_sum) return max_sum def process_test_cases(T, test_cases): results = [] for t in range(T): N, M, P, Q = test_cases[t][0] grid = test_cases[t][1] result = max_subgrid_sum(N, M, P, Q, grid) results.append(result) return results"},{"question":"Given an array of integers, your task is to complete the given function which finds the subarray with the maximum sum and returns that sum. If there are multiple subarrays with the same maximum sum, return the length of the longest subarray. Example: Input: arr = [1, -2, 3, 5, -1, 2] Output: 9 Explanation: The subarray [3, 5, -1, 2] has the maximum sum which is 9. Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the given function maxSubarraySum that returns the maximum sum of a subarray. If there are multiple subarrays with the same maximum sum, the function should return the length of the longest subarray with that sum. Constraints: 1 ≤ length of array ≤ 10^5 -10^4 ≤ elements of array ≤ 10^4","solution":"def maxSubarraySum(arr): Function to find the maximum sum of a subarray and if multiple subarrays have the same maximum sum, returns the length of the longest subarray with that sum. :param arr: List[int] - Input list of integers :return: int - The maximum sum of the subarray max_sum = float(\'-inf\') current_sum = 0 max_length = 0 current_length = 0 for num in arr: if current_sum < 0: current_sum = num current_length = 1 else: current_sum += num current_length += 1 if current_sum > max_sum: max_sum = current_sum max_length = current_length elif current_sum == max_sum: max_length = max(max_length, current_length) return max_sum"},{"question":"Design an algorithm to find the longest palindromic substring within a given string `s`. A palindrome is a sequence of characters that reads the same forward and backward. # Input: - A single string `s` containing only lowercase English letters (1 ≤ |s| ≤ 1000). # Output: - Return the longest palindromic substring within the input string. # Example: ```python Input: \\"babad\\" Output: \\"bab\\" (Note: \\"aba\\" is also a valid answer.) Input: \\"cbbd\\" Output: \\"bb\\" ``` # Instructions: 1. Implement a function that takes a single string as input and returns the longest palindromic substring. 2. Consider both even-length and odd-length palindromes. 3. Optimize for both time and space complexity. You can use the expand around center technique to solve this problem effectively within the given constraints.","solution":"def longest_palindrome(s): Finds the longest palindromic substring within a given string s. :param s: A string composed of lowercase English letters :return: The longest palindromic substring if not s or len(s) == 0: return \\"\\" def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindrome odd_palindrome = expand_around_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindrome even_palindrome = expand_around_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"You are given a matrix of size n times m filled with integer numbers, and an integer k. Your task is to determine if there is a path from the top-left corner to the bottom-right corner of the matrix such that the sum of the values along this path is divisible by k. You can move only right or down at each step. -----Input----- The first line contains three integers n, m, k (1 leq n, m leq 100, 1 leq k leq 10^9): the dimensions of the matrix and the value of k. The next n lines each contain m integers a_{i,j} (0 leq a_{i,j} < 10^4): the elements of the matrix. -----Output----- Print \\"YES\\" if there exists such a path; otherwise, print \\"NO\\". -----Examples----- Input 3 3 4 1 3 1 1 5 1 4 2 2 Output YES Input 2 2 5 1 1 1 1 Output NO","solution":"def is_path_divisible(mat, k): n, m = len(mat), len(mat[0]) dp = [[set() for _ in range(m)] for _ in range(n)] dp[0][0].add(mat[0][0] % k) # Use dynamic programming to check for each cell\'s reachable mod values for i in range(n): for j in range(m): if i > 0: for mod in dp[i-1][j]: dp[i][j].add((mod + mat[i][j]) % k) if j > 0: for mod in dp[i][j-1]: dp[i][j].add((mod + mat[i][j]) % k) # Check the bottom-right cell return \\"YES\\" if 0 in dp[n-1][m-1] else \\"NO\\""},{"question":"Evelyn loves working with graphs and frequently experiments with various graph algorithms. Today, she is focusing on finding cycles in a directed graph. Specifically, she wants to perform a depth-first search (DFS) to detect whether any cycle exists in her directed graph. Your task is to help Evelyn by writing a function that checks if a directed graph contains any cycle using DFS. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 105) — the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n) indicating a directed edge from vertex ui to vertex vi. Output Output \\"YES\\" if there is at least one cycle in the graph. Otherwise, output \\"NO\\". Example Input 4 4 1 2 2 3 3 4 4 2 Output YES Explanation The input graph contains a cycle: 2 -> 3 -> 4 -> 2. Input 4 3 1 2 2 3 3 4 Output NO Explanation The input graph does not contain any cycle. Note In the graph theory terms, a cycle exists if you can start from a vertex v and follow a directed path that eventually loops back to v. You can use depth-first search (DFS) to efficiently detect cycles in a directed graph.","solution":"def has_cycle(n, edges): Detect if a directed graph has a cycle. :param n: Number of vertices :param edges: List of directed edges in the graph :return: \\"YES\\" if there is a cycle, otherwise \\"NO\\" from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (n + 1) # Array to track visited nodes: 0 unvisited, 1 visiting, 2 visited def dfs(v): Perform DFS and detect cycles. :param v: Current node :return: True if a cycle is detected, otherwise False visited[v] = 1 # Mark the current node as visiting for neighbor in graph[v]: if visited[neighbor] == 0: # If neighbor hasn\'t been visited if dfs(neighbor): # DFS on neighbor return True elif visited[neighbor] == 1: # If neighbor is being visited, a cycle is detected return True visited[v] = 2 # Mark current node as fully visited return False for vertex in range(1, n + 1): if visited[vertex] == 0: if dfs(vertex): return \\"YES\\" return \\"NO\\""},{"question":"A large company wants to implement a new feature in their internal software for tracking their employees\' daily work hours. The company has thousands of employees, and each employee records their start and end time for multiple working periods each day. The company wants to calculate the total number of hours worked by each employee for any given day. To help with this task, write a program that reads the start and end times for each working period of every employee and calculates the total number of hours worked by each employee for that day. Assume the times are recorded in a 24-hour format without seconds (HH:MM). Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. The next n groups of lines contain the work periods for each employee: - The first line of each group contains an integer m (1 ≤ m ≤ 100), the number of work periods for that employee. - The following m lines each contain two time records: start and end (in the format HH:MM), representing the start and end time for each work period. Output For each employee, print the total number of hours worked during the day in the format \\"HH:MM\\". Examples Input 2 3 08:00 12:00 13:00 17:00 18:00 20:00 2 09:00 11:00 12:00 15:00 Output 09:00 05:00 Explanation In the first example: - Employee 1 has 3 work periods: 08:00-12:00, 13:00-17:00, and 18:00-20:00. - Total working time = (12:00 - 08:00) + (17:00 - 13:00) + (20:00 - 18:00) - (4 hours) + (4 hours) + (2 hours) = 10 hours = 10:00 In the second example: - Employee 2 has 2 work periods: 09:00-11:00 and 12:00-15:00. - Total working time = (11:00 - 09:00) + (15:00 - 12:00) - (2 hours) + (3 hours) = 5 hours = 05:00","solution":"def calculate_work_hours(n, work_periods): def time_difference(start, end): start_h, start_m = map(int, start.split(\':\')) end_h, end_m = map(int, end.split(\':\')) start_minutes = start_h * 60 + start_m end_minutes = end_h * 60 + end_m return end_minutes - start_minutes def format_time(total_minutes): hours = total_minutes // 60 minutes = total_minutes % 60 return f\\"{hours:02}:{minutes:02}\\" results = [] index = 0 for _ in range(n): m = work_periods[index] total_minutes = 0 for j in range(1, m + 1): start, end = work_periods[index + j] total_minutes += time_difference(start, end) results.append(format_time(total_minutes)) index += m + 1 return results # Example usage if __name__ == \\"__main__\\": n = 2 work_periods = [ 3, (\\"08:00\\", \\"12:00\\"), (\\"13:00\\", \\"17:00\\"), (\\"18:00\\", \\"20:00\\"), 2, (\\"09:00\\", \\"11:00\\"), (\\"12:00\\", \\"15:00\\") ] print(calculate_work_hours(n, work_periods)) # Output: [\\"10:00\\", \\"05:00\\"]"},{"question":"You are given an array of integers. Determine if there is a subarray with a sum equal to a given number. Input The first line of the input will contain a single integer T, the number of test cases. Each test case consists of two lines: - The first line contains two integers, N (the number of elements in the array) and S (the target sum). - The second line contains N integers separated by spaces, representing the elements of the array. Output For each test case, display YES if there is a subarray with a sum equal to S. Otherwise, display NO. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ array elements, S ≤ 10^9 SAMPLE INPUT 3 5 12 1 2 3 7 5 5 15 1 2 3 4 5 3 9 7 1 2 SAMPLE OUTPUT YES YES NO Explanation For the 1st test case, the subarray [2, 3, 7] has a sum of 12, hence the answer is YES. For the 2nd test case, the subarray [1, 2, 3, 4, 5] has a sum of 15, hence the answer is YES. For the 3rd test case, there is no subarray that adds up to 9, hence the answer is NO.","solution":"def has_subarray_with_sum(arr, target_sum): Determines if there is a subarray with a sum equal to target_sum in the array arr. current_sum = 0 prefix_sums = {} for i, num in enumerate(arr): current_sum += num if current_sum == target_sum: return \\"YES\\" if (current_sum - target_sum) in prefix_sums: return \\"YES\\" prefix_sums[current_sum] = i return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases. results = [] for case in test_cases: N, S, arr = case[\'N\'], case[\'S\'], case[\'arr\'] result = has_subarray_with_sum(arr, S) results.append(result) return results"},{"question":"In a sequence of integers, every element appears twice except for one element, which appears only once. Write a function to find that single element. You must implement a solution with a linear runtime complexity and use only constant extra space. Constraints * 1 ≤ n ≤ 3 * 10^4 * Each element in the array is an integer where 0 ≤ element ≤ 10^5 Input A list of integers Output An integer representing the single element that appears only once Examples Input [4, 1, 2, 1, 2] Output 4 Input [2, 2, 1] Output 1","solution":"def find_single_element(nums): Returns the single element that appears only once in the list. Every other element appears twice. single_element = 0 for num in nums: single_element ^= num return single_element"},{"question":"You are required to write a program to help Alice with her image processing task. Alice has an image represented as an M x N matrix of pixel values, where each pixel value is a positive integer. She needs to adjust the brightness of the image by increasing or decreasing the pixel values according to specific rules. Each adjustment is given in a list where each entry is a tuple (a, b, k). The value a refers to the starting row (inclusive), b refers to the ending row (inclusive), and k is the value by which each pixel in rows from a to b (inclusive) should be changed. These adjustments are applied in sequence. Your task is to compute the final image after all adjustments have been applied and output the resulting matrix. ------ Input ------ The first line contains two integers M and N, denoting the number of rows and columns in the image. The next M lines each contain N space-separated integers representing the pixel values of the image. The following line contains an integer Q, the number of adjustments. The next Q lines each contain three integers a, b, and k, representing each adjustment. ------ Output ------ Output the final image after applying all adjustments. Print the resulting matrix with the same number of rows and columns as the input. ------ Constraints ------ 1 ≤ M, N ≤ 100 1 ≤ Pixel Value ≤ 1000 1 ≤ Q ≤ 100 1 ≤ k ≤ 100 1 ≤ a ≤ b ≤ M ------ Sample Input 1 ------ 3 3 10 20 30 40 50 60 70 80 90 2 1 2 10 2 3 -15 ------ Sample Output 1 ------ 10 20 30 50 60 70 55 65 75 ------ Explanation 1 ------ In the first adjustment: Increase the pixel values in rows 1 and 2 by 10. In the second adjustment: Decrease the pixel values in rows 2 and 3 by 15. The final image matrix after applying the adjustments is: 10 20 30 50 60 70 55 65 75","solution":"def adjust_brightness(image, adjustments): Adjust the brightness of the image according to the given adjustments. Parameters: image (list of list of int): M x N matrix representing the image\'s pixel values. adjustments (list of tuple): List of adjustments (a, b, k). Returns: list of list of int: The adjusted image. for a, b, k in adjustments: for i in range(a - 1, b): image[i] = [pixel + k for pixel in image[i]] return image def process_image_data(M, N, image_values, Q, adjustments_values): Process the image data based on the inputs and adjustments. Parameters: M (int): Number of rows in the image. N (int): Number of columns in the image. image_values (list of list of int): Initial pixel values of the image. Q (int): Number of adjustments. adjustments_values (list of tuple): List of adjustments. Returns: list of list of int: The adjusted image. image = [[image_values[r][c] for c in range(N)] for r in range(M)] adjustments = [(adjustments_values[i][0], adjustments_values[i][1], adjustments_values[i][2]) for i in range(Q)] return adjust_brightness(image, adjustments)"},{"question":"Given an array A of n integers, your task is to find the largest sum of any contiguous subarray of A. A subarray is a sequence of consecutive elements from the array, and the sum of a subarray is the sum of its elements. Implement the function **max_subarray_sum(n: int, A: List[int]) -> int** to achieve this. **Function Signature:** ----Python:---- ```python def max_subarray_sum(n: int, A: List[int]) -> int: ``` **Input:** - The first line of the input contains an integer n (1 leq n leq 10^5), representing the length of the array. - The second line contains n integers, A_1, A_2, ldots, A_n (-10^4 leq A_i leq 10^4): the elements of the array. **Output:** - Output a single integer, the largest sum of any contiguous subarray of A. **Examples:** _Input:_ ``` 5 1 2 -3 4 5 ``` _Output:_ ``` 9 ``` _Input:_ ``` 6 -2 -3 4 -1 -2 1 5 -3 ``` _Output:_ ``` 7 ``` _Input:_ ``` 4 -2 -3 -4 -1 ``` _Output:_ ``` -1 ``` **Note:** In the first example, the subarray with the largest sum is [4, 5] with sum 9. In the second example, the subarray with the largest sum is [4, -1, -2, 1, 5] with sum 7. In the third example, the subarray with the largest sum is [-1] with sum -1.","solution":"from typing import List def max_subarray_sum(n: int, A: List[int]) -> int: if n == 0: return 0 # If the array is empty, the sum is 0 max_current = max_global = A[0] for i in range(1, n): max_current = max(A[i], max_current + A[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a tree with `n` nodes, where each node is assigned a value. A node is considered \\"balanced\\" if the sum of values in its left subtree is equal to the sum of values in its right subtree. You need to write a program that processes `q` queries, each of which will require you to determine whether a given node is \\"balanced\\" or not. # Input - The first line contains an integer `n` (the number of nodes). - The second line contains `n` space-separated integers representing the node values. - The next `n-1` lines each contain two integers `u` and `v`, signifying an edge between nodes `u` and `v`. - The next line contains an integer `q` (the number of queries). - The following `q` lines each contain an integer `x` (the node to query). # Output For each query, print \\"YES\\" if the node is balanced, and \\"NO\\" otherwise. # Constraints - 1 ≤ n ≤ 10^5 - -10^3 ≤ node value ≤ 10^3 - 1 ≤ q ≤ 10^5 - 1 ≤ u, v ≤ n - 1 ≤ x ≤ n # Sample Input ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 2 3 2 ``` # Sample Output ``` NO YES ``` # Explanation For node 3, the left and right subtree sums are 4 and 5, respectively, which are not equal, hence \\"NO\\". For node 2, it is a leaf node, so it is trivially balanced, hence \\"YES\\".","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None self.subtree_sum = value def calculate_subtree_sums(node): if node is None: return 0 left_sum = calculate_subtree_sums(node.left) right_sum = calculate_subtree_sums(node.right) node.subtree_sum += left_sum + right_sum return node.subtree_sum def is_balanced(node): if node is None: return True left_sum = node.left.subtree_sum if node.left else 0 right_sum = node.right.subtree_sum if node.right else 0 return left_sum == right_sum def construct_tree(values, edges): nodes = [None] + [TreeNode(v) for v in values] adjacency_list = [[] for _ in range(len(values) + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) def build_subtree(node_index, parent_index): for neighbor in adjacency_list[node_index]: if neighbor != parent_index: if nodes[node_index].left is None: nodes[node_index].left = nodes[neighbor] else: nodes[node_index].right = nodes[neighbor] build_subtree(neighbor, node_index) build_subtree(1, -1) # Assuming the root node is node 1 calculate_subtree_sums(nodes[1]) return nodes def process_queries(tree_nodes, queries): results = [] for query in queries: node = tree_nodes[query] if is_balanced(node): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to handle input and output processing def handle_queries(n, values, edges, q, queries): # Step 1: Construct the tree tree_nodes = construct_tree(values, edges) # Step 2: Process all queries results = process_queries(tree_nodes, queries) return results"},{"question":"A software company needs to generate and distribute secure passwords for their new users. They have a set of rules to ensure the generated passwords are strong enough. The password must meet the following criteria: 1. The password must be exactly N characters long. 2. The password must contain at least one uppercase letter. 3. The password must contain at least one lowercase letter. 4. The password must contain at least one digit. 5. The password must contain at least one special character from the set: @, #, , %, &, *. 6. The password must not contain any spaces. Write a function to check if a given password meets these criteria. -----Constraints----- - 1 leq N leq 100 - The password string will only contain printable ASCII characters. -----Input----- Input is given from Standard Input in the following format: N password -----Output----- Output \\"YES\\" if the password meets all criteria, otherwise output \\"NO\\". -----Sample Input----- 10 Passw0rd! -----Sample Output----- NO - Although the password is 10 characters long and contains uppercase, lowercase letters, and a digit, it does not contain any special characters from the specified set, hence the output is \\"NO\\".","solution":"def validate_password(N, password): Validates a password based on given criteria. Args: N (int): The required length of the password. password (str): The password to be validated. Returns: str: \\"YES\\" if the password is valid, otherwise \\"NO\\". if len(password) != N: return \\"NO\\" has_upper = False has_lower = False has_digit = False has_special = False special_characters = \\"@#%&*\\" for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True if has_upper and has_lower and has_digit and has_special and \' \' not in password: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string containing only characters \'a\', \'b\', and \'c\', you need to find the minimum number of steps required to make the string empty. You can remove either a single character \'a\', \'b\', or \'c\' or remove consecutive identical characters having length multiple of 3 (i.e., \\"aaa\\", \\"bbb\\", \\"ccc\\"). Define a function `minStepsToEmpty(s: str) -> int` that calculates this. Example 1: Input: s = \\"abccba\\" Output: 6 Explanation: Remove each character one by one in 6 steps: \\"a\\", \\"b\\", \\"c\\", \\"c\\", \\"b\\", \\"a\\". Example 2: Input: s = \\"aaabbbccc\\" Output: 3 Explanation: Remove \'aaa\' in 1 step, \'bbb\' in another step, and \'ccc\' in the last step. Example 3: Input: s = \\"abcabc\\" Output: 6 Explanation: Remove each character one by one in 6 steps. Your Task: You do not need to read input or print anything. Your task is to implement the function `minStepsToEmpty(s: str) -> int` which takes `s` as input and returns the minimum number of steps required to make the string empty. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def minStepsToEmpty(s: str) -> int: Returns the minimum number of steps required to make the string empty. steps = 0 i = 0 while i < len(s): if i + 2 < len(s) and s[i] == s[i+1] == s[i+2]: steps += 1 i += 3 else: steps += 1 i += 1 return steps"},{"question":"Given a string s, find whether it follows the CamelCase format or not. Note: In CamelCase format, the first character of each word except the first word is in uppercase. All other characters are in lowercase. Example 1: Input: s = \\"helloWorld\\" Output: 1 Explanation: The string \\"helloWorld\\" follows the CamelCase format. Example 2: Input: s = \\"HelloWorld\\" Output: 0 Explanation: The string \\"HelloWorld\\" does not follow the CamelCase format because the first word starts with an uppercase letter. Your Task: You don\'t need to read input or print anything. Your Task is to complete the function checkCamelCase() which takes a string s as input parameter and returns 1 if it follows the CamelCase format. Otherwise, it returns 0. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def checkCamelCase(s): Checks whether the given string follows the CamelCase format. Parameters: s (str): Input string Returns: int: 1 if the string follows the CamelCase format, 0 otherwise if not s: return 0 # The first character of the first word should be lowercase if not s[0].islower(): return 0 # The rest of the string should follow camel case rules for i in range(1, len(s)): if s[i].isupper() and not s[i-1].islower(): return 0 return 1"},{"question":"You are given a binary string which consists of only \'0\'s and \'1\'s. Determine the minimum number of operations required to make all the characters in the string the same. In one operation, you can choose any character of the string and flip it (change \'0\' to \'1\' or \'1\' to \'0\'). ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - Each test case contains a single string of \'0\'s and \'1\'s. ------ Output Format ------ For every test case, output a single line containing the minimum number of operations required. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ |s| ≤ 10^6 - The sum of the lengths of the strings over all test cases does not exceed 10^7. ----- Sample Input 1 ------ 3 1100 1001 11111 ----- Sample Output 1 ------ 2 2 0 ------ Explanation 1 ------ For the first test case, the optimal solution is to flip the last two characters from \'0\' to \'1\'. Therefore, the minimum number of operations required is 2. For the second test case, you can flip the first two \'1\'s to \'0\'s or the last two \'0\'s to \'1\'s. Both operations require 2 flips. For the third test case, no operation is needed as all characters are already the same.","solution":"def min_operations_to_make_uniform(binary_strings): Given a list of binary strings, returns the minimum number of operations required to make all the characters in each string the same. def min_operations(s): count_0 = s.count(\'0\') count_1 = len(s) - count_0 return min(count_0, count_1) results = [] for s in binary_strings: results.append(min_operations(s)) return results"},{"question":"You are given an integer n, the sum of two positive integers a and b. Find two positive integers a and b such that their sum is n and their greatest common divisor^dagger is equal to a given integer k. ^dagger The greatest common divisor of two integers, also known as the greatest common factor, is the largest positive integer that divides both numbers without leaving a remainder. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The following lines contain the description of each test case. The only line of each test case contains two integers n and k (2 leq k leq n leq 10^5). -----Output----- For each test case, output a line containing two positive integers a and b such that a + b = n and gcd(a, b) = k. If there are multiple solutions, you can output any of them. -----Examples----- Input 3 10 2 14 7 100 20 Output 6 4 7 7 40 60 -----Note----- In the first test case, a = 6 and b = 4, they sum up to 10 and gcd(6, 4) = 2. In the second test case, a = 7 and b = 7, they sum up to 14 and gcd(7, 7) = 7. In the third test case, a = 40 and b = 60, they sum up to 100 and gcd(40, 60) = 20.","solution":"import math def find_two_integers_with_gcd(n, k): Returns two integers a and b such that a + b = n and gcd(a, b) = k. a = k b = n - k return a, b def solve(test_cases): results = [] for n, k in test_cases: results.append(find_two_integers_with_gcd(n, k)) return results"},{"question":"You are given an array A of N integers. Your task is to find if there exists an element in the array such that the count of elements strictly less than it is equal to the count of elements strictly greater than it. If such an element exists, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains T, the number of test cases. Each test case consists of two lines: The first line contains N, the number of elements in the array. The second line contains N space-separated integers denoting the array A. Output For each test case, output \\"YES\\" if such an element exists, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 Note: Large input files. Use scanf instead of cin. SAMPLE INPUT 2 5 1 2 3 4 5 4 2 2 2 2 SAMPLE OUTPUT YES NO Explanation Test case 1: For the array [1, 2, 3, 4, 5], the element 3 has two elements less than it (1, 2) and two elements greater than it (4, 5). Test case 2: For the array [2, 2, 2, 2], no element can have equal counts of elements less than and greater than it.","solution":"def is_element_with_equal_counts(arr): Checks if there exists an element in the array such that the count of elements strictly less than it is equal to the count of elements strictly greater than it. n = len(arr) if n < 3: return \\"NO\\" arr.sort() for i in range(1, n-1): if arr[i-1] < arr[i] and arr[i] < arr[i+1] and i == n-1-i: return \\"YES\\" return \\"NO\\" def check_test_cases(test_cases): Processes multiple test cases and applies the is_element_with_equal_counts function to determine if each case contains the element meeting the criteria. results = [] for arr in test_cases: results.append(is_element_with_equal_counts(arr)) return results"},{"question":"In a faraway land named Graphonia, there is a kingdom with several cities connected by bidirectional roads. Each road has a specific travel time associated with it. The king of Graphonia, King Algorithmar, has a special interest in the shortest paths between cities. He frequently sends his messengers to deliver letters from one city to another in the shortest possible time. Your task is to write a program that calculates the shortest paths between pairs of cities based on the given road network and queries. Input The input consists of multiple datasets. The end of the input is indicated by a line containing three zeros separated by spaces. It is not a dataset. Each dataset begins with two integers: n (the number of cities, where 1 <= n <= 100) and m (the number of roads, where 0 <= m <= n*(n-1)/2). The next m lines describe the roads. Each line contains three positive integers: u, v, and t, where 1 <= u, v <= n, u != v, and t (the travel time between city u and city v, where 1 <= t <= 100). Cities are numbered from 1 to n. Note that there can be multiple roads between two cities with different travel times. Next, there is an integer q (the number of queries, where 1 <= q <= 100). Each of the next q lines contains two integers: a and b (the pair of cities for which the shortest travel time needs to be calculated). Output For each query in each dataset, output the shortest travel time between the queried cities in a separate line. If there is no path between the cities, print \\"IMPOSSIBLE\\". Example Input 4 4 1 2 4 1 3 2 2 3 1 3 4 1 2 1 4 2 4 3 3 1 2 2 2 3 3 2 1 3 2 1 0 0 0 Output 3 2 2 IMPOSSIBLE","solution":"def floyd_warshall(n, roads): Function to compute shortest paths using Floyd-Warshall algorithm. # Initialize distance matrix inf = float(\'inf\') dist = [[inf] * (n + 1) for _ in range(n + 1)] # Distance from a city to itself is 0 for i in range(1, n + 1): dist[i][i] = 0 # Fill in the initial distances based on the roads for u, v, t in roads: dist[u][v] = min(dist[u][v], t) dist[v][u] = min(dist[v][u], t) # Floyd-Warshall Algorithm for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_paths(cities, roads, queries): Function to find shortest paths for multiple queries. n, m = cities if n == 0: return [] # Calculate shortest paths using Floyd-Warshall algorithm dist = floyd_warshall(n, roads) results = [] for a, b in queries: if dist[a][b] == float(\'inf\'): results.append(\\"IMPOSSIBLE\\") else: results.append(dist[a][b]) return results"},{"question":"Tom has a string s consisting of only lowercase letters. In one operation, Tom can choose any substring of s and make all its characters the same. Tom wants to make the entire string consist of a single character, either by performing operations or without performing any operations if the string already consists of a single character type. For given string s, determine the minimum number of operations required to make the string consisting of a single character. -----Input----- The first line of the input contains the integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5). It is guaranteed that the sum of the lengths of s over all test cases does not exceed 10^6. -----Output----- For each test case, output the minimum number of operations required to make the string s consist of one type of character. -----Examples----- Input 3 abac aaaa abcde Output 3 0 4 -----Note----- In the first set of example inputs, the three operations could be: 1. Change substring \\"b\\" to \\"a\\" resulting in \\"aaac\\". 2. Change substring \\"c\\" to \\"a\\" resulting in \\"aaaa\\". In the second set of example inputs, the string already consists of one type of character, so no operations are needed. In the third set of example inputs, four operations are needed to convert \\"b\\", \\"c\\", \\"d\\", and \\"e\\" each to match one character type.","solution":"def min_operations_to_single_char(t, test_cases): For each given string in test_cases, return the minimum number of operations required to make the string consist of a single character. results = [] for s in test_cases: # The minimal number of operations required is the length of the # longest contiguous substring of the same character subtracted from # the total length of the string. max_contiguous = 1 curr_contiguous = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: curr_contiguous += 1 else: max_contiguous = max(max_contiguous, curr_contiguous) curr_contiguous = 1 max_contiguous = max(max_contiguous, curr_contiguous) min_operations = len(s) - max_contiguous results.append(min_operations) return results"},{"question":"Given an array of integers, you need to find the length of the longest subarray with an equal number of even and odd numbers. -----Input----- - The first line contains a single integer N denoting the length of the array. - The second line contains N space-separated integers denoting the elements of the array. -----Output----- Output a single integer representing the length of the longest subarray with equal numbers of even and odd numbers. -----Constraints----- - 1 leq N leq 10^5 - 1 leq A_{i} leq 10^9 -----Subtasks----- Subtask #1 (20 points): - 1 leq N leq 100 Subtask #2 (30 points): - 1 leq N leq 1000 Subtask #3 (50 points): - 1 leq N leq 10^5 -----Example Input----- 6 1 2 3 4 5 6 -----Example Output----- 6 -----Explanation----- The entire array has 3 even numbers (2, 4, 6) and 3 odd numbers (1, 3, 5), so the longest subarray with an equal number of even and odd numbers has length 6.","solution":"def longest_even_odd_subarray_length(arr): This function finds the length of the longest subarray with an equal number of even and odd numbers. N = len(arr) prefix_diff = {0: -1} # To handle the case when subarray starts from the beginning even_count = 0 odd_count = 0 max_length = 0 for i, num in enumerate(arr): if num % 2 == 0: even_count += 1 else: odd_count += 1 diff = even_count - odd_count # If the diff has been seen before, a subarray with equal numbers of evens and odds is found if diff in prefix_diff: max_length = max(max_length, i - prefix_diff[diff]) else: prefix_diff[diff] = i return max_length"},{"question":"Write a function that takes a string containing only alphabetical characters and returns the length of the longest substring without repeating characters. The substring can only include unique characters and must be contiguous. -----Input----- The first and only line of input contains a string S consisting of only alphabetic characters. The length of S will not exceed 1000 characters. -----Output----- The output is an integer representing the length of the longest substring of S that contains only distinct characters. -----Examples----- Sample Input: abcabcbb Sample Output: 3 Sample Input: bbbbb Sample Output: 1 Sample Input: pwwkew Sample Output: 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters in the given string. start = 0 max_length = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and used_chars[char] >= start: start = used_chars[char] + 1 used_chars[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are given an array of integers. Your task is to make the array non-decreasing by modifying the array in such a way that the sum of the absolute differences between adjacent elements is minimized, and you are allowed to replace any element of the array with any integer not greater than K. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and K. The second line contains N space-separated integers A1, A2, ..., AN representing the array. ------ Output ------ For each test case, print a single line containing one integer — the minimum possible sum of absolute differences between adjacent elements. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ 10^{9} -10^{9} ≤ A_{i} ≤ 10^{9} ------ Sample Input 1 ------ 1 4 10 11 5 3 8 ------ Sample Output 1 ------ 8","solution":"def min_abs_diff_sum(T, cases): results = [] for (N, K, A) in cases: A.sort() # Sort the array to minimize the differences min_diff_sum = 0 for i in range(1, N): min_diff_sum += min(abs(A[i] - A[i-1]), abs(K + 1 - A[i-1])) # Replace any element with K results.append(min_diff_sum) return results # Reading input and calling function would normally happen here, but for a module, you\'d call min_abs_diff_sum with appropriate arguments."},{"question":"Write a function that finds the first non-repeating character in a given string. If all characters are repeating, return \\"_\\". Input Format The first line contains an integer T representing the number of test cases. Each test case is a line containing a string S. Output Format For each test case, output the first non-repeating character in the string. If all characters repeat, output \\"_\\". Constraints 1 ⩽ T ⩽ 10 1 ⩽ |S| ⩽ 10^5 The input string will contain lowercase English letters only. SAMPLE INPUT 2 geeksforgeeks aabbcc SAMPLE OUTPUT f _ Function Signature ```python def first_non_repeating_character(T: int, strings: List[str]) -> List[str]: # Write your code here ```","solution":"from typing import List from collections import Counter def first_non_repeating_character(T: int, strings: List[str]) -> List[str]: result = [] for string in strings: char_count = Counter(string) found_non_repeating = False for char in string: if char_count[char] == 1: result.append(char) found_non_repeating = True break if not found_non_repeating: result.append(\\"_\\") return result"},{"question":"You are given an array b[0 ldots m-1] of length m which contains integers (both positive and negative). Determine if there exists a non-empty contiguous subarray within the array whose sum is zero. A contiguous subarray is defined by a pair of indices (i, j) with 0 le i le j < m, and the sum of this subarray is equal to b[i] + b[i+1] + cdots + b[j]. For example, within the array [4, -3, 2, 1, 6], there exists a contiguous subarray [-3, 2, 1] whose sum is 0, similarly for the array [1, -1, 2, -2], the entire array sums to 0. Determine whether such a subarray exists. -----Input----- The first line contains a single integer u (1 le u le 100) — the number of test cases in the test. For each test case, the first line contains an integer m (1 le m le 1000) — the length of the array b. The next line contains m integers b_0, b_1, ldots, b_{m-1} (-1000 le b_i le 1000) — the elements of the array. -----Output----- For each test case, print \\"YES\\" if there exists a non-empty contiguous subarray with a sum of 0, otherwise print \\"NO\\". -----Example----- Input 3 5 4 -3 2 1 6 4 1 2 -2 5 3 3 4 5 Output YES YES NO -----Note----- In the first test case, the subarray [-3, 2, 1] sums up to 0. In the second test case, the subarray [2, -2] sums up to 0. In the third test case, none of the contiguous subarrays sum up to 0.","solution":"def has_zero_sum_subarray(b): Determine if there exists a non-empty contiguous subarray with a sum of zero. Parameters: b (list of int): The input array Returns: str: \\"YES\\" if such subarray exists, otherwise \\"NO\\" # Using a set to store the prefix sums encountered prefix_sum_set = set() prefix_sum = 0 for num in b: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sum_set: return \\"YES\\" prefix_sum_set.add(prefix_sum) return \\"NO\\" def process_test_cases(test_cases): results = [] for m, b in test_cases: results.append(has_zero_sum_subarray(b)) return results"},{"question":"Write a program that determines if a given number n is a prime number. Hint You can use the following observations: - A prime number is only divisible by 1 and itself. - You only need to check for divisibility from 2 up to the square root of n. Constraints 1 ≤ n ≤ 107 Input The integer n is given in a single line. Output Output \\"Prime\\" if n is a prime number or \\"Not prime\\" if n is not a prime number. Examples Input 29 Output Prime Input 100 Output Not prime","solution":"import math def is_prime(n): Determines if the given number n is a prime number. Returns \\"Prime\\" if n is a prime number and \\"Not prime\\" if n is not a prime number. if n <= 1: return \\"Not prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not prime\\" sqrtn = int(math.sqrt(n)) for i in range(3, sqrtn + 1, 2): if n % i == 0: return \\"Not prime\\" return \\"Prime\\""},{"question":"John has a bag containing an integer number of identical marbles. He can perform the following operation zero or more times: select any integer x > 1 such that x divides the number of marbles currently in the bag, remove x marbles from the bag, and replace them with x smaller bags, where each smaller bag contains one marble. Given two integers n and m, determine if John can obtain exactly m bags by performing the operation described above starting from a single bag containing n marbles. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 10^9). It is guaranteed that the sum of n and the sum of m for all test cases does not exceed 2 cdot 10^9. -----Output----- For each test case, print a single line: print POSSIBLE if John can obtain exactly m bags starting with a single bag containing n marbles, otherwise print IMPOSSIBLE. You may print each letter in any case (for example, possible, Possible, POSSIBLE will all be recognized as positive answers). -----Examples----- Input 5 10 5 5 5 12 6 15 3 1000000000 1 Output POSSIBLE IMPOSSIBLE POSSIBLE POSSIBLE IMPOSSIBLE -----Note----- In the first test case, it\'s possible to get the desired result by performing the operation as follows: - Select x=2, remove 2 marbles and replace them with 2 bags containing one marble each. Now, we have 8 marbles and 2 bags. - Select x=2 again, remove 2 marbles and replace them with 2 bags containing one marble each. Now, we have 6 marbles and 4 bags. - Select x=6, remove 6 marbles and replace them with 6 bags containing one marble each. Now, we have 0 marbles and 10 bags. Other paths to achieve the result may exist. In the second test case, it\'s not possible to get exactly 5 bags, because the operation always replaces marbles with exactly x smaller bags, and x must divide the current number of marbles. In the fourth test case, we can simply remove 15 marbles to obtain 15 bags directly because it fits the criteria described.","solution":"def can_obtain_exactly_m_bags(n, m): Determines if it is possible to obtain exactly m bags starting from n marbles. if m == 1: return n == 1 return m <= n def process_test_cases(t, test_cases): results = [] for n, m in test_cases: if can_obtain_exactly_m_bags(n, m): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"Implement a basic file system which supports the following operations: 1. Create a new file with a given name 2. Read data from an existing file 3. Write data to an existing file 4. Delete an existing file The file system should be able to handle the following constraints: - File names are unique and consist of lowercase English letters only. - Each file can store an arbitrary string as its content. - Maximum file name length is 100 characters and maximum content length for any file is 1000 characters. - Each operation (create, read, write, delete) must be completed in O(1) time. Input The first line contains an integer `n` (1 ≤ n ≤ 100000), which is the number of operations. Next, n lines describe the operations in one of the following formats: - \\"1 filename\\" — Create a new file with the given name. - \\"2 filename\\" — Read and output the content of the file with the given name. - \\"3 filename content\\" — Write the content string to the file with the given name. - \\"4 filename\\" — Delete the file with the given name. Output For each read operation, output the content on a new line. If a read or write operation is attempted on a non-existing file, output \\"ERROR\\" on a new line. If a create operation is attempted on a file that already exists, output \\"ERROR\\" on a new line. Example Input: 9 1 file1 3 file1 Hello 2 file1 1 file2 3 file2 World 2 file2 4 file1 2 file1 1 file1 Output: Hello World ERROR Notes The file system should be implemented efficiently to handle up to 100000 operations, ensuring that each operation runs in constant time. Use appropriate data structures to maintain file names and contents to meet the specified constraints.","solution":"class FileSystem: def __init__(self): self.files = {} def create(self, filename): if filename in self.files: return \\"ERROR\\" self.files[filename] = \\"\\" return None def read(self, filename): if filename not in self.files: return \\"ERROR\\" return self.files[filename] def write(self, filename, content): if filename not in self.files: return \\"ERROR\\" self.files[filename] = content return None def delete(self, filename): if filename not in self.files: return \\"ERROR\\" del self.files[filename] return None"},{"question":"You are given an array of integers. Your task is to determine if there are three distinct indices, i, j, k (i < j < k), such that Ai < Aj < Ak. Input: The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers Ai (1 ≤ Ai ≤ 10^9), the elements of the array. Output: Output \\"YES\\" if there are such indices i, j, k, otherwise output \\"NO\\". Sample Input: 5 1 2 3 4 5 Output: YES Sample Input: 5 5 4 3 2 1 Output: NO Sample Input: 5 1 3 2 4 5 Output: YES","solution":"def increasing_triplet_subsequence(n, arr): Returns \\"YES\\" if there exists three distinct indices i, j, k (i < j < k) such that arr[i] < arr[j] < arr[k]. Otherwise, returns \\"NO\\". if n < 3: return \\"NO\\" first = second = float(\'inf\') for num in arr: if num <= first: first = num # smallest so far elif num <= second: second = num # second smallest so far else: return \\"YES\\" # found a third element that makes i < j < k return \\"NO\\""},{"question":"A palindrome is a string that reads the same forwards and backwards. For example, \\"madam\\" and \\"racecar\\" are palindromes, whereas \\"hello\\" and \\"world\\" are not. An interesting variation of a palindrome is a mirrored string, where each character can be \'mirrored\' to form a palindrome-like string using a given mapping of characters. For example, given a specific mapping where \'a\' maps to \'e\', \'b\' to \'p\', and vice versa, the string \\"abpe\\" is a mirrored string because \'a\' maps to \'e\' and \'e\' maps to \'a\', and \'b\' maps to \'p\' and \'p\' maps to \'b\'. Given a specific character mapping, determine if a string is a mirrored string or not. ------ Input: ------ First line of input contains a single integer T, the number of test cases. For each test case: - First line contains an integer N, denoting the number of character mappings. - The next N lines each contain two space-separated lowercase English characters x_i and y_i, indicating that character x_i can be mirrored to character y_i and character y_i can be mirrored to character x_i. - The last line contains a string S composed of lowercase English alphabet. ------ Output: ------ For each test case, output on a separate line: \\"MIRRORED\\" if the string is a mirrored string and \\"NOT MIRRORED\\" if it is not. ------ Constraints: ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 26 2 ≤ |S| ≤ 1000, where |S| denotes the length of S ------ Sample Input 1 ------ 2 2 a e b p abpe 3 h j o p k m hop ------ Sample Output 1 ------ MIRRORED NOT MIRRORED ------ Explanation ------ In the first test case, the string \\"abpe\\" forms a mirrored string since \'a\' maps to \'e\', \'e\' maps to \'a\', \'b\' maps to \'p\', and \'p\' maps to \'b\'. In the second test case, no such mirrored mapping exists that would make the string \\"hop\\" a mirrored string from start to end or vice versa.","solution":"def is_mirrored_string(mappings, s): Determines if the given string is a mirrored string based on the provided mappings. :param mappings: Dictionary with character mappings indicating which characters can be mirrored. :param s: String that we need to check if it is a mirrored string. :return: \\"MIRRORED\\" if the string is a mirrored string else \\"NOT MIRRORED\\". n = len(s) for i in range(n // 2): # Compare i-th character with its corresponding mirrored character if s[i] not in mappings or s[-(i + 1)] not in mappings: return \\"NOT MIRRORED\\" if mappings[s[i]] != s[-(i + 1)]: return \\"NOT MIRRORED\\" return \\"MIRRORED\\" def process_input(T, test_cases): Processes multiple test cases to determine mirrored strings. :param T: Number of test cases. :param test_cases: List of test cases where each test case is a tuple: (N, list_of_mappings, string_to_evaluate) :return: List of results for each test case results = [] for N, mappings_list, string in test_cases: mappings = {} for x, y in mappings_list: mappings[x] = y mappings[y] = x result = is_mirrored_string(mappings, string) results.append(result) return results"},{"question":"There is a list of integers that represents votes for candidates in an election. Write a program to determine the winner of the election. The program should read a list of integers, where each integer represents a vote for a particular candidate (the candidate\'s ID). The ID with the most votes wins the election. If there is a tie (i.e., two or more candidates have the same number of votes and it is the highest count), the program should print \\"Tie\\". You can assume that the list of votes is not empty and contains fewer than 50,000 items. Input The input starts with an integer n (the number of votes), followed by n integers representing the votes. Output Print the ID of the winning candidate or \\"Tie\\" if there is a tie. Example Input 7 1 2 3 2 2 3 3 Output Tie Input 6 1 2 2 1 1 2 Output Tie Input 5 5 2 6 2 2 Output 2","solution":"def find_winner(votes): from collections import Counter # Count the number of votes for each candidate vote_count = Counter(votes) # Find the maximum number of votes max_votes = max(vote_count.values()) # Find all candidates that have the maximum number of votes top_candidates = [candidate for candidate, count in vote_count.items() if count == max_votes] # Return the result based on the number of top candidates if len(top_candidates) == 1: return top_candidates[0] else: return \\"Tie\\""},{"question":"Write a function to evaluate whether a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. For example: ```python is_palindrome(\\"A man, a plan, a canal: Panama\\") # => True is_palindrome(\\"race a car\\") # => False is_palindrome(\\"No lemon, no melon\\") # => True is_palindrome(\\" \\") # => True is_palindrome(\\".,\\") # => True is_palindrome(\\"131231\\") # => False is_palindrome(\\"Able was I ere I saw Elba\\") # => True ``` Notes: - Input string can include spaces, punctuation marks, and mixed cases. - The function should ignore non-alphanumeric characters and be case-insensitive. - An empty string or a string with only non-alphanumeric characters is considered a valid palindrome. - Return a boolean value indicating whether the input string is a valid palindrome.","solution":"def is_palindrome(s): Evaluates whether a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. :param s: input string :return: True if the input string is palindrome, False otherwise # Use filter + str.isalnum to keep only alphanumeric characters, convert to lowercase clean_s = \'\'.join(filter(str.isalnum, s)).lower() # Check if the cleaned string is equal to its reverse return clean_s == clean_s[::-1]"},{"question":"Given two integers, n and k, the task is to compute the binomial coefficient C(n, k) modulo 1,000,000,007. The binomial coefficient C(n, k) can be defined as the number of ways to choose k elements from a set of n elements, which is given by: [ C(n, k) = frac{n!}{k! * (n - k)!} ] Since the result can be very large, compute the answer modulo 1,000,000,007. OUTPUT A single integer which is the value of C(n, k) % 1,000,000,007. Input 7 3 NOTE: You do not need to create a program for this problem; you have to write your answers for the given input in the given code snippet To see how to submit a solution, please check this link. SAMPLE INPUT 10 2 SAMPLE OUTPUT 45","solution":"MOD = 1000000007 def binomial_coefficient(n, k): if k > n or k < 0: return 0 if k == 0 or k == n: return 1 # Use symmetry property k = min(k, n - k) # Compute nCk % MOD numerator = 1 denominator = 1 for i in range(k): numerator = (numerator * (n - i)) % MOD denominator = (denominator * (i + 1)) % MOD # Fermat\'s Little Theorem for modular inverse denominator_inverse = pow(denominator, MOD - 2, MOD) return (numerator * denominator_inverse) % MOD"},{"question":"Gui is developing a new program where he needs to detect specific patterns in a given set of numbers. However, the patterns are buried within random noise, and he needs your help to extract them effectively. # Task You need to determine the longest subsequence within a given list of integers such that all of its elements are in strictly increasing order. # Input The first line of input contains an integer N, the number of elements in the list (1 ≤ N ≤ 1000). The second line contains N space-separated integers, representing the elements of the list. Each integer is between -10^9 and 10^9. # Output Output a single integer, which is the length of the longest strictly increasing subsequence in the given list of numbers. # Example Input 7 10 22 9 33 21 50 41 Output 4 Explanation The longest strictly increasing subsequence is [10, 22, 33, 50], which has a length of 4. # Note A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For the given example, other increasing subsequences such as [10, 21, 50] also exist, but the longest one has length 4.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest strictly increasing subsequence. if not nums: return 0 n = len(nums) # dp array to store the length of the longest increasing subsequence until each index dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A shipping company needs to keep track of shipments being delivered through numerous nodes. They have a record of shipments between nodes with transit times and want to ensure that the total transit time remains minimized across their routes. They face the issue of possible redundant shipments (shipments that have the same start and end nodes but different transit times). They need a system to calculate the optimized minimum transit time to deliver shipments between any two specified nodes, excluding any redundant shipments with higher transit times. -----Input----- The input comprises multiple lines. The first line contains two integers, n and m (2 leq n leq 100, 1 leq m leq 1000), where n is the number of nodes, and m is the number of shipments. The next m lines each contain three integers u, v, and t (1 leq u, v leq n, 1 leq t leq 1000), representing a shipment from node u to node v with a transit time of t. It is possible to have multiple shipments between the same pair of nodes. The last line contains two integers x and y (1 leq x, y leq n), representing the start and end nodes, between which the minimum transit time needs to be calculated. -----Output----- Display a single integer, the minimum transit time to deliver shipments from node x to node y, considering only the shipments with the least transit time for each pair of nodes. If delivery from node x to node y is not possible, display -1. -----Examples----- Sample Input: 5 7 1 2 10 1 3 5 2 4 1 3 2 2 4 5 4 3 4 9 2 5 6 1 5 Sample Output: 12 Sample Input: 4 3 1 2 3 2 3 4 3 4 5 1 4 Sample Output: 12","solution":"import heapq def find_minimum_transit_time(n, m, shipments, x, y): # Create a graph with the minimum transit times for each pair of nodes graph = {i: {} for i in range(1, n + 1)} for u, v, t in shipments: if v not in graph[u] or t < graph[u][v]: graph[u][v] = t # Dijkstra\'s algorithm to find the shortest path priority_queue = [(0, x)] shortest_times = {i: float(\'inf\') for i in range(1, n + 1)} shortest_times[x] = 0 while priority_queue: current_time, current_node = heapq.heappop(priority_queue) if current_node == y: return current_time if current_time > shortest_times[current_node]: continue for neighbor, travel_time in graph[current_node].items(): time = current_time + travel_time if time < shortest_times[neighbor]: shortest_times[neighbor] = time heapq.heappush(priority_queue, (time, neighbor)) return -1 if shortest_times[y] == float(\'inf\') else shortest_times[y]"},{"question":"You are designing an online game where players can accumulate points by collecting coins. The game area is represented by a grid of size N x M. Each cell in the grid can either contain a coin (represented by 1) or be empty (represented by 0). A player starts at a given position (x1, y1) in the grid and can move to an adjacent cell in one of four directions (up, down, left, right), but can\'t move diagonally. The player aims to collect the maximum number of coins possible within a certain number of steps, K. Write a function to calculate the maximum number of coins the player can collect starting from the initial position (x1, y1) and moving exactly K steps. -----Input----- The input consists of: 1. Two integers N and M (1 ≤ N, M ≤ 1000) representing the size of the grid. 2. An N x M matrix containing integers 0 or 1 representing the game area. 3. Two integers x1 and y1 (0 ≤ x1 < N, 0 ≤ y1 < M) representing the starting coordinates. 4. An integer K (1 ≤ K ≤ 1000) representing the number of steps the player can take. -----Output----- Print an integer representing the maximum number of coins the player can collect within K steps starting from (x1, y1). -----Examples----- Sample Input 1: 4 4 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 0 1 1 2 Sample Output 1: 2 Sample Input 2: 3 3 1 1 1 1 0 1 1 1 1 0 0 3 Sample Output 2: 4","solution":"def max_coins(N, M, grid, x1, y1, K): from collections import deque # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS: (current_x, current_y, steps_left, current_coins) queue = deque([(x1, y1, K, grid[x1][y1])]) max_coins_collected = 0 # Seen states: (x, y, steps_left) seen = set() seen.add((x1, y1, K)) while queue: x, y, steps, coins_collected = queue.popleft() max_coins_collected = max(max_coins_collected, coins_collected) if steps > 0: for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny, steps - 1) not in seen: queue.append((nx, ny, steps - 1, coins_collected + grid[nx][ny])) seen.add((nx, ny, steps - 1)) return max_coins_collected"},{"question":"Input The first line of the input contains a single integer T (1 ≤ T ≤ 100), which represents the number of test cases. The next T lines each contain a set of integers, where the first integer N indicates the number of elements in the set (1 ≤ N ≤ 10^5), followed by N space-separated integers (each between -10^9 and 10^9). Output For each test case, output the maximum sum of a contiguous subarray. Examples Input 3 5 -2 1 -3 4 -1 2 1 -5 4 1 -1 8 3 -1 -1 4 5 -2 3 -5 4 Output 6 -1 11","solution":"def max_subarray_sum(test_cases): results = [] for test in test_cases: N, *array = test max_current = max_global = array[0] for number in array[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"A new startup is working on developing a temperature monitoring system for various cities. The system collects temperature data every day at a fixed time. You are tasked with developing an algorithm that processes this data to detect sudden temperature spikes, which are defined as a day where the temperature is at least 5 degrees higher than the previous day. Write a program to identify those days for the given temperature data. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - For each test case, the first line contains a single integer N, the number of days for which temperature data is available. - The second line contains N space-separated integers, each representing the temperature on a particular day. ------ Output Format ------ For each test case, print the indices of the days (1-based index) that have a sudden temperature spike. If no such day exists, print \\"None\\". ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{2} Temperature values are integers and can be positive, negative, or zero. ----- Sample Input 1 ------ 3 5 10 15 20 13 18 3 10 15 10 4 5 5 5 5 ----- Sample Output 1 ------ 2 3 5 2 None ------ Explanation 1 ------ Test case 1: The temperature on day 2 (15) is 5 degrees higher than day 1 (10). Day 3 (20) is another 5-degree increase from day 2 (15). Finally, day 5 (18) is a 5-degree increase from day 4 (13). Therefore, indices 2, 3, and 5 are printed. Test case 2: Only day 2 (15) has a sudden spike compared to day 1 (10). Test case 3: There are no sudden increases in temperature from one day to the next, so \\"None\\" is printed.","solution":"def identify_spikes(test_cases): Args: test_cases: List of tuples where each tuple consists of an integer N and a list of N integers representing temperatures. Returns: List of strings: Each string contains the 1-based indices of days with sudden temperature spikes or \\"None\\". result = [] for N, temperatures in test_cases: spikes = [] for i in range(1, N): if temperatures[i] >= temperatures[i - 1] + 5: spikes.append(i + 1) # Convert to 1-based index if spikes: result.append(\' \'.join(map(str, spikes))) else: result.append(\\"None\\") return result"},{"question":"Robin is participating in a coding marathon, and he has to solve a certain number of problems within a given timeframe. However, the problems have dependencies, which means he can only solve a problem if he has solved all problems it depends on. Robin needs your help to determine the minimum number of problems he must solve before he can address a specific target problem. The dependencies can be represented as a directed acyclic graph, where each node represents a problem, and a directed edge from node u to node v indicates that problem u must be solved before problem v. Help Robin by writing a program that, given the total number of problems, the dependencies between them, and a target problem, finds out the minimum number of problems he needs to solve before he can commence solving the target problem. -----Input----- The first line contains two integers n and m (1 le n le 10^3, 0 le m le 10^4), the number of problems Robin needs to solve and the number of dependencies, respectively. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v), indicating a dependency that problem u must be solved before problem v. The last line contains an integer t (1 le t le n), which is the target problem Robin needs to solve. -----Output----- Output the minimum number of problems Robin needs to solve before he can start solving problem t. If problem t has no dependencies, output 0. -----Examples----- Input 5 4 1 2 2 3 2 4 4 5 5 Output 3 Input 6 5 1 2 2 3 3 4 1 5 5 6 6 Output 2 Input 4 2 1 2 3 4 3 Output 0 -----Note----- Explanation for the first test case: Robin needs to solve the following problem in sequence: 1 (before he can solve 2), 2 (before he can solve 4), and 4 (before he can solve 5). Thus, he needs to solve 3 problems before starting on problem 5. Explanation for the second test case: Robin needs to solve problem 5 first, and to solve problem 5, he needs to solve problem 1. Thus, he needs to solve 2 problems before starting on problem 6. Explanation for the third test case: Robin can solve problem 3 directly as it has no dependencies. Thus, he needs to solve 0 problems before starting on problem 3.","solution":"from collections import deque, defaultdict def min_problems_to_solve(n, m, dependencies, t): graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 queue = deque() level = [-1] * (n + 1) for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) level[i] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) level[neighbor] = level[node] + 1 return level[t]"},{"question":"You are given two strings `s` and `t` of length `n` consisting of lowercase letters only. You are allowed to perform at most one operation on string `s`, where you can choose any two indices `i` and `j` (1-based) and swap the characters at these indices in the string `s`. Your task is to determine whether it is possible to make string `s` equal to string `t` by performing at most one swap operation on string `s`. -----Input----- The first line contains a single integer `n` (1 ≤ `n` ≤ 10^5) — the length of the strings. The second line contains a string `s` of length `n`. The third line contains a string `t` of length `n`. -----Output----- If it is possible to make string `s` equal to string `t` by performing at most one swap operation, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 5 abced abcde Output YES Input 3 abc bca Output NO Input 4 abcd abdc Output YES -----Note----- In the first example, you can swap the characters at indices 3 and 5 in string `s` to get the string `abcde`, which is equal to string `t`. In the second example, no single swap operation can make string `s` equal to string `t`. In the third example, you can swap the characters at indices 3 and 4 in string `s` to get the string `abdc`, which is equal to string `t`.","solution":"def can_make_equal_with_one_swap(n, s, t): Determine if it is possible to make string s equal to string t by performing at most one swap operation on string s. :param n: Length of the strings :param s: The original string :param t: The target string :return: \\"YES\\" if possible, otherwise \\"NO\\" if s == t: return \\"YES\\" mismatch_indices = [i for i in range(n) if s[i] != t[i]] if len(mismatch_indices) == 2: i, j = mismatch_indices if s[i] == t[j] and s[j] == t[i]: return \\"YES\\" return \\"NO\\""},{"question":"**Intersection of K Sorted Arrays** You are given K sorted arrays. Your task is to find the intersection of these K arrays (i.e., the common elements in all arrays). If there are no common elements, output an empty list. The arrays are sorted in non-decreasing order and may contain duplicate elements. ------ Input ------ The first line of input contains an integer K denoting the number of arrays. The following K lines contain the arrays. Each array begins with an integer N denoting the number of elements in that array, followed by N space-separated integers. ------ Output ------ Output a single line containing the common elements in all K arrays, sorted in non-decreasing order. If there are no common elements, print an empty list. ------ Constraints ------ 1 ≤ K ≤ 100 1 ≤ N_{i} ≤ 10^5 1 ≤ A_{i,j} ≤ 10^6 ------ Example ------ Input: 3 5 1 2 3 4 5 4 2 3 5 7 6 2 3 4 5 9 10 Output: 2 3 5 Explanation: Arrays are: [1, 2, 3, 4, 5] [2, 3, 5, 7] [2, 3, 4, 5, 9, 10] The common elements are [2, 3, 5].","solution":"def intersection_of_k_sorted_arrays(k, arrays): Finds the intersection of k sorted arrays. Parameters: k (int): Number of arrays. arrays (List[List[int]]): List of k sorted arrays. Returns: List[int]: Sorted list of common elements in all arrays. if k == 0: return [] from collections import Counter # Combine all arrays into a single list and count the occurrence of each element combined_counter = Counter() for array in arrays: combined_counter.update(set(array)) # Common elements must appear exactly k times common_elements = [num for num in combined_counter if combined_counter[num] == k] # Sort the result common_elements.sort() return common_elements # Helper function to process the input format def process_input(input_str): Processes the input format to extract k and the arrays. Parameters: input_str (str): Input string in the given format. Returns: Tuple[int, List[List[int]]]: Number of arrays and the arrays themselves. lines = input_str.strip().split(\'n\') k = int(lines[0]) arrays = [] for line in lines[1:]: array = list(map(int, line.split()))[1:] # Skip the first number which is N arrays.append(array) return k, arrays"},{"question":"Given a dictionary where the keys are words and the values are their corresponding frequencies, write a function that outputs the k most frequent words in the dictionary. If two words have the same frequency, the one that is lexicographically smaller should come first. Example 1: Input: words_frequency = {\'apple\': 5, \'banana\': 3, \'orange\': 5, \'grape\': 3, \'fig\': 2} k = 3 Output: [\'apple\', \'orange\', \'banana\'] Explanation: \'apple\' and \'orange\' have the highest frequency (5). Since \'apple\' is lexicographically smaller, it comes first, followed by \'orange\'. \'banana\' and \'grape\' both have a frequency of 3, and \'banana\' comes before \'grape\' lexicographically. Example 2: Input: words_frequency = {\'dog\': 4, \'cat\': 2, \'elephant\': 6, \'bird\': 4} k = 2 Output: [\'elephant\', \'bird\'] Explanation: \'elephant\' has the highest frequency (6). \'dog\' and \'bird\' have the next highest frequency (4), and \'bird\' comes before \'dog\' lexicographically. Your Task: You need to implement the function top_k_frequent_words() which takes two input parameters: the dictionary words_frequency and the integer k. The function should return a list of the top k frequent words sorted by their frequency in descending order, and by lexicographic order if frequencies are the same. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(words_frequency) ≤ 10^5 1 ≤ frequency of any word ≤ 10^5 1 ≤ k ≤ len(words_frequency) Words consist of lowercase English letters only.","solution":"def top_k_frequent_words(words_frequency, k): Returns the k most frequent words from the dictionary \'words_frequency\'. If two words have the same frequency, the one that is lexicographically smaller should come first. # Sort the words first lexicographically, then by frequency in descending order sorted_words = sorted(words_frequency.items(), key=lambda item: (-item[1], item[0])) return [word for word, freq in sorted_words[:k]]"},{"question":"Given a sorted array of integers and a target integer, determine whether two elements within the array sum up to the target. Return the indices of the two elements as a tuple, or an empty tuple if no such pair exists. Note that each input would have exactly one solution. Example 1: Input: Arr = [1, 2, 3, 4, 6] Target = 9 Output: (2, 4) Explanation: Arr[2] + Arr[4] = 3 + 6 = 9 Example 2: Input: Arr = [2, 3, 4, 8] Target = 6 Output: (0, 2) Explanation: Arr[0] + Arr[2] = 2 + 4 = 6 Your Task: You don\'t need to read input or print anything. Complete the function `find_pair_with_sum()` which takes `Arr` and `Target` as input parameters and returns a tuple with indices of the two numbers that add up to the target. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(Arr) <= 10^4 -10^3 <= Arr[i] <= 10^3 -10^3 <= Target <= 10^3","solution":"def find_pair_with_sum(Arr, Target): Determine whether two elements within the sorted array sum up to the target. Return the indices of the two elements as a tuple, or an empty tuple if no such pair exists. left, right = 0, len(Arr) - 1 while left < right: current_sum = Arr[left] + Arr[right] if current_sum == Target: return (left, right) elif current_sum < Target: left += 1 else: right -= 1 return ()"},{"question":"In a galaxy far far away, there is a game in which players collect energy crystals scattered in a straight line. Each crystal has an energy value, which can be positive (energy gain) or negative (energy loss). Players can start collecting from any crystal and must continue until they decide to stop, collecting all crystals in the range they choose. The objective is to maximize the total energy collected. Write a program that determines the maximum possible total energy a player can collect. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of energy crystals. The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4) — the energy values of the crystals. -----Output----- Print a single integer — the maximum possible total energy the player can collect. -----Examples----- Input 5 -1 2 3 -2 4 Output 7 Input 3 -5 -1 -8 Output -1 -----Note----- In the first sample, the player should collect the crystals from indices 2 to 5 (2 + 3 - 2 + 4 = 7). In the second sample, the least negative crystal is at index 2, and thus the player should collect just that single crystal to obtain the largest possible sum of -1.","solution":"def max_energy(n, energies): Returns the maximum possible total energy the player can collect. max_current = max_global = energies[0] for i in range(1, n): max_current = max(energies[i], max_current + energies[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"«Consolidation» is a method used to combine multiple lists into a single sorted list without duplicates. You are given several lists of integers and are to implement a program that consolidates these lists following the given rules. Your program should merge the lists into a unique set of integers, then sort this set in ascending order. Input The first line contains an integer k (1 ≤ k ≤ 100) — the number of lists. Each of the next k lines starts with an integer ni (1 ≤ ni ≤ 100), which denotes the length of the corresponding list, followed by ni distinct integers (1 ≤ integer ≤ 1000) representing the elements of that list. Output Output a single line with the consolidated, sorted list of unique integers. Examples Input 3 4 1 3 5 7 5 2 4 6 8 10 3 1 4 9 Output 1 2 3 4 5 6 7 8 9 10","solution":"def consolidate_lists(k, list_of_lists): Consolidate multiple lists into a single sorted list without duplicates. Args: k (int): Number of lists list_of_lists (list of list of int): List of k lists where each list contains integers Returns: list of int: Consolidated, sorted list of unique integers unique_elements = set() for lst in list_of_lists: unique_elements.update(lst) return sorted(unique_elements) # Example usage: # k = 3 # list_of_lists = [ # [1, 3, 5, 7], # [2, 4, 6, 8, 10], # [1, 4, 9] # ] # print(consolidate_lists(k, list_of_lists))"},{"question":"John, a spacecraft engineer, is tasked with designing a docking system for a space station. The docking system consists of \'n\' docking ports, each requiring a unique identifier to ensure proper management and docking of spacecraft. Each identifier is a numerical code, and John wants these codes to be assigned in a specific sequence to make the docking process efficient and error-free. To assign these identifiers, John follows this rule: - The first docking port is assigned the identifier 1. - The second docking port is assigned the identifier 2. - The third docking port is assigned the identifier 3. - And so on... However, for security reasons, John wants to change these identifiers to a new sequence generated by a simple transformation: For any port \'i\', the new identifier will be i^2 (i squared). Given the number of docking ports \'n\', John needs a program that generates the list of identifiers for all the docking ports. Input: The first line contains \'t\', the number of test cases. Each of the next \'t\' lines contains a single integer \'n\', representing the number of docking ports. Output: For each test case, print a list of \'n\' integers, which are the identifiers for the docking ports, each on a new line. Constraints: 1 ≤ t ≤ 10^4 1 ≤ n ≤ 10^3 Author: Your Name SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 1 4 9 1 4 9 16 25","solution":"def generate_identifiers(t, test_cases): Generates the list of identifiers for each docking port. Parameters: t (int): Number of test cases test_cases (list): List of integers representing the number of docking ports for each test case. Returns: list: A list of lists, where each inner list contains identifiers for the corresponding test case. result = [] for n in test_cases: identifiers = [i**2 for i in range(1, n + 1)] result.append(identifiers) return result"},{"question":"One day, Amy asked Sheldon to help her sort a list of numbers for her research project. Sheldon, always up for a challenge, accepted the task. The list contains integers, and Sheldon must sort the list using a specific sorting algorithm called \\"Sheldon\'s Selection Sort\\". In this version of the Selection Sort, Sheldon repeatedly selects the maximum element from the unsorted part of the list and swaps it with the last element of the unsorted part, thus growing the sorted part from right to left. Your task is to implement Sheldon\'s Selection Sort and output the sorted list. Input: The first line of the input contains an integer T, the number of test cases. Each test case consists of a single line with space-separated integers representing the elements of the list to be sorted. Output: For each test case, output a single line with the space-separated integers in ascending order. Constraints: 1 ≤ T ≤ 100 1 ≤ number of elements in each test case ≤ 50 Each element in the list is an integer and fits in the 32-bit signed integer range. SAMPLE INPUT 2 3 1 2 4 7 1 3 2 SAMPLE OUTPUT 1 2 3 1 2 3 4 7","solution":"def sheldon_selection_sort(arr): Sorts a list of integers using Sheldon\'s Selection Sort algorithm. n = len(arr) for i in range(n-1, 0, -1): max_idx = 0 for j in range(1, i+1): if arr[j] > arr[max_idx]: max_idx = j # Swap the found maximum element with the last unsorted element arr[i], arr[max_idx] = arr[max_idx], arr[i] return arr def sort_all_cases(test_cases): results = [] for case in test_cases: sorted_case = sheldon_selection_sort(case) results.append(\' \'.join(map(str, sorted_case))) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [list(map(int, line.split())) for line in input_lines[1:T+1]] results = sort_all_cases(test_cases) for result in results: print(result) # Example usage input_data = \\"2n3 1 2n4 7 1 3 2\\" main(input_data)"},{"question":"Write a function to process student records for a coding workshop. Each student record contains a name and a list of scores in different tests. The function should calculate the average score of each student and determine how many students have an average score above a given threshold. Input: - An integer `n`, the number of students. - A list of `n` records, where each record is a tuple: the first element is a string representing the student\'s name, and the second element is a list of integers representing the student\'s scores. - An integer `threshold`, the average score threshold. Output: - An integer representing the number of students whose average score is above the threshold. SAMPLE INPUT 3 [ (\\"Alice\\", [85, 90, 78]), (\\"Bob\\", [70, 65, 80]), (\\"Charlie\\", [90, 95, 100]) ] 80 SAMPLE OUTPUT 2 Explanation There are 3 students: Alice, Bob, and Charlie. - Alice\'s average score is (85 + 90 + 78) / 3 = 84.33, which is above the threshold of 80. - Bob\'s average score is (70 + 65 + 80) / 3 = 71.67, which is below the threshold of 80. - Charlie\'s average score is (90 + 95 + 100) / 3 = 95, which is above the threshold of 80. Therefore, the function should return 2, as Alice and Charlie meet the criteria.","solution":"def count_students_above_threshold(n, student_records, threshold): Counts how many students have an average score above the given threshold. Parameters: n (int) : Number of students. student_records (list) : List of tuples, where each tuple contains a string (student name) and a list of integers (student\'s scores). threshold (int) : The average score threshold. Returns: int : Number of students with an average score above the threshold. count = 0 for name, scores in student_records: average_score = sum(scores) / len(scores) if average_score > threshold: count += 1 return count"},{"question":"Alex is participating in a coding competition where he encounters the following problem: A binary string is a string containing only the characters \'0\' and \'1\'. Alex is given a binary string S of length n. He wants to make this binary string a palindrome by performing a series of operations. In one operation, he can take any two adjacent characters of the string and swap them. Alex can perform this operation as many times as he wants. A palindrome is a string that reads the same backward as forward. For example, \\"101101\\" and \\"11111\\" are palindromes, but \\"10011\\" and \\"1110\\" are not. Help Alex by determining whether it is possible to transform the given binary string into a palindrome by performing any number of adjacent swaps. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary string S. The second line contains the binary string S of length n. Output Print \\"YES\\" (without quotes) if it is possible to transform S into a palindrome using any number of adjacent swaps. Otherwise, print \\"NO\\" (without quotes). Examples Input 5 11011 Output YES Input 4 1001 Output YES Input 6 100011 Output NO Note In the first example, the string \\"11011\\" is already a palindrome, so the answer is \\"YES\\". In the second example, we can transform the string \\"1001\\" to \\"0101\\" by swapping the first and second characters and then to \\"1001\\" by swapping the second and third characters. Since \\"1001\\" is a palindrome, the answer is \\"YES\\". In the third example, it is not possible to rearrange \\"100011\\" into a palindrome using adjacent swaps, hence the answer is \\"NO\\".","solution":"def can_form_palindrome(n, S): Determines if it\'s possible to transform a binary string into a palindrome by performing adjacent swaps. Parameters: n (int): Length of the binary string. S (str): Binary string. Returns: str: \\"YES\\" if it\'s possible to transform the binary string into a palindrome, \\"NO\\" otherwise. # Count the number of 1s and 0s count_0 = S.count(\'0\') count_1 = S.count(\'1\') # For a palindrome, at most one character can have an odd count if count_0 % 2 == 0 or count_1 % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Mia has a hobby of collecting rare stamps and now she wants to organize her collection in a specific way. She wants to arrange her stamps in a rectangular grid such that each stamp occupies exactly one cell of the grid, and the grid has the smallest possible perimeter given the total number of stamps. Given the number of stamps Mia has, can you determine the dimensions of the grid (i.e., the number of rows and columns) that will give the smallest perimeter, and also output the smallest perimeter itself? -----Input----- The input consists of a single integer n (1 le n le 10^{12}), representing the total number of stamps Mia has. -----Output----- Output two integers: the number of rows and columns of the optimal grid, and a single integer representing the smallest possible perimeter of the grid. -----Examples----- Sample Input: 12 Sample Output: 3 4 14 Sample Input: 36 Sample Output: 6 6 24","solution":"import math def smallest_perimeter_grid(n): Returns the dimensions (rows, columns) of the grid that gives the smallest perimeter from n stamps, as well as the smallest perimeter itself. min_perimeter = float(\'inf\') best_r, best_c = 0, 0 for i in range(1, int(math.sqrt(n)) + 1): if n % i == 0: r = i c = n // i perimeter = 2 * (r + c) if perimeter < min_perimeter: min_perimeter = perimeter best_r = r best_c = c return best_r, best_c, min_perimeter"},{"question":"A palindrome is a sequence of characters that reads the same forward and backward. Write a function to find the length of the longest palindromic subsequence in a given string. A subsequence is a sequence that you can derive from another sequence by deleting some or no elements without changing the order of the remaining elements. You will be implementing: ```python def longest_palindromic_subsequence(s): ``` It takes in: 1. \\"s\\" a non-empty string containing lowercase letters. The function should return: 1. An integer representing the length of the longest palindromic subsequence in the string. For example: ``` longest_palindromic_subsequence(\\"bbbab\\") ``` The longest palindromic subsequence is \\"bbbb\\", so the function should return: ``` 4 ``` Another example: ``` longest_palindromic_subsequence(\\"cbbd\\") ``` The longest palindromic subsequence is either \\"bb\\" or \\"cc\\", so the function should return: ``` 2 ```","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindromic subsequence of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of the longest palindromic subsequence return dp[0][n - 1]"},{"question":"You are given an array of n integers where each element represents the height of a vertical line drawn on a Cartesian plane. The two-dimensional space along x-axis forms a container such that the lines, except the endpoints, form the container\'s walls. The container can store water. You need to write a program to calculate the maximum amount of water the container can store. The lines in the array represent the heights of the lines that form the sides of the container. # Input - The first line contains an integer n (2 ≤ n ≤ 100000) – the number of lines. - The second line contains n integers, each of which is the height of the lines (1 ≤ height ≤ 100000). # Output - Print one integer – the maximum amount of water that can be stored in the container. # Example Input ``` 9 1 8 6 2 5 4 8 3 7 ``` Output ``` 49 ``` # Explanation To form the container, we pair the first and last element of the array (1 and 7), which can store `min(1, 7) * (8 - 0) = 7` units of water. By moving the pointers inward and considering the second and second to last elements (8 and 3), we can find that they can store `min(8, 3) * (7 - 1) = 18` units of water. We continue this process, moving the pointers and calculating the amounts, until we\'ve evaluated all possible pairs. The maximum amount of water stored is the maximum of all pairs evaluated, which in this example is 49 units.","solution":"def max_area(heights): left, right = 0, len(heights) - 1 max_water = 0 while left < right: # Calculate the amount of water that can be stored between the two lines height = min(heights[left], heights[right]) width = right - left current_water = height * width # Update max_water if current_water is greater max_water = max(max_water, current_water) # Move the pointer that points to the shorter line if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"Write a function that receives a list of integers and returns a new list composed of only the unique elements of the original list, in the same order they first appeared. You must not use the Python built-in `set` data structure to solve this problem. For example, given the list `[1, 2, 2, 3, 4, 4, 5]`, your program should return `[1, 2, 3, 4, 5]`. If the input list is empty, return an empty list. If the input list contains only one element, return the same list.","solution":"def unique_elements(lst): Returns a new list composed of only the unique elements of the original list, in the same order they first appeared. seen = {} unique_lst = [] for elem in lst: if elem not in seen: seen[elem] = True unique_lst.append(elem) return unique_lst"},{"question":"There is a game where you need to jump across platforms to reach the end. Each platform has a certain height, and you can only jump to a platform if its height is not greater than your current platform\'s height plus a certain threshold. Your task is to determine whether it\'s possible to reach the last platform starting from the first one. -----Input----- One line with the integer N (2 leq N leq 1000) – the number of platforms. One line with N integers h_1, h_2, ..., h_N (1 leq h_i leq 10000) – the heights of the platforms. One line with the integer T (1 leq T leq 10000) – the maximum threshold you can jump. -----Output----- Output \\"YES\\" if it\'s possible to reach the last platform from the first one, and \\"NO\\" otherwise. -----Examples----- Sample Input 1: 5 3 4 5 6 8 2 Sample Output 1: YES Sample Input 2: 5 3 8 5 3 7 1 Sample Output 2: NO","solution":"def can_reach_end(platforms, threshold): Determines if it is possible to reach the last platform from the first one. Parameters: platforms (list): List of integers representing the heights of the platforms. threshold (int): Maximum height difference that can be jumped. Returns: str: \\"YES\\" if it\'s possible to reach the last platform, otherwise \\"NO\\" current_pos = 0 n = len(platforms) while current_pos < n - 1: next_pos = current_pos + 1 while next_pos < n and platforms[next_pos] <= platforms[current_pos] + threshold: next_pos += 1 if next_pos == current_pos + 1: return \\"NO\\" current_pos = next_pos - 1 return \\"YES\\" # function to process the input and call the solution function def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:N+1])) T = int(data[N+1]) result = can_reach_end(heights, T) print(result)"},{"question":"Farmer John has a large farm with a number of fields in a straight line numbered from 0 to N-1, where N is the total number of fields. Each field grows a different type of crop, but due to recent weather conditions, some fields have either become barren or highly productive. Farmer John wants to gather information on the longest segment of contiguous fields such that every field in this segment is productive. The productivity information of each field is given as a binary string of length N, where \'0\' represents a barren field and \'1\' represents a productive field. Your task is to help Farmer John find the length of the longest contiguous segment of productive fields. Input format: The first line contains an integer T, the number of test cases. Each test case consists of a single binary string of length N. Output format: For each test case, output the length of the longest contiguous segment of productive fields. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 1100111110110 1000001 1111111 SAMPLE OUTPUT 5 1 7","solution":"def longest_productive_segment(binary_strings): Returns a list of lengths of the longest contiguous segment of productive fields for each input binary string. :param binary_strings: A list of binary strings. :return: A list of integers representing the lengths of the longest productive segments. results = [] for s in binary_strings: max_len = 0 cur_len = 0 for char in s: if char == \'1\': cur_len += 1 max_len = max(max_len, cur_len) else: cur_len = 0 results.append(max_len) return results def process_input_output(input_data): Processes the input data and produces the corresponding output. :param input_data: List of input strings, first string is the count of test cases, following strings are the test case binary strings. :return: List of results for each test case. T = int(input_data[0]) binary_strings = input_data[1:T+1] return longest_productive_segment(binary_strings)"},{"question":"Jessie is practicing data structures and has recently come across the concept of trees. She wants to understand the concept of the depth (or height) of a binary tree. To do so, she has posed a problem to herself. The problem states: Given a binary tree, calculate the depth of the tree. The depth of a binary tree is the number of edges from the tree\'s root node to its furthest leaf node. Input : The first line of input contains T, the number of test cases. For each test case, the first line contains a single integer N, the number of nodes in the binary tree. Each of the next N lines contains three space-separated integers X, L, and R, each representing: - X: A node value in the binary tree. - L: The left child of X (or -1 if there is no left child). - R: The right child of X (or -1 if there is no right child). Constraints : 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ X ≤ 10^3 -1 ≤ L, R ≤ 10^3 Output: For each test case, print a single integer representing the depth of the binary tree. SAMPLE INPUT 2 3 1 2 3 2 -1 -1 3 -1 -1 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 SAMPLE OUTPUT 1 2","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_descriptions): nodes = {} for value, left, right in node_descriptions: if value not in nodes: nodes[value] = TreeNode(value) if left != -1: if left not in nodes: nodes[left] = TreeNode(left) nodes[value].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) nodes[value].right = nodes[right] return nodes[node_descriptions[0][0]] # Return the root of the tree def tree_depth(root): if not root: return 0 left_depth = tree_depth(root.left) right_depth = tree_depth(root.right) return max(left_depth, right_depth) + 1 def calculate_depth(test_cases): depths = [] for node_descriptions in test_cases: root = build_tree(node_descriptions) depth = tree_depth(root) - 1 # depth is number of edges, not nodes depths.append(depth) return depths def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) node_descriptions = [] for j in range(1, N + 1): x, l, r = map(int, lines[idx + j].split()) node_descriptions.append((x, l, r)) test_cases.append(node_descriptions) idx += N + 1 return test_cases"},{"question":"You are a software engineer at a startup and one of the company\'s products requires analyzing daily user activity logs. Each log contains the time at which a user performed an action and the type of action performed. An example log might look like: ``` [ {\\"timestamp\\": \\"2023-10-10T14:48:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T14:49:00Z\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-10-10T14:50:00Z\\", \\"action\\": \\"click\\"}, {\\"timestamp\\": \\"2023-10-10T14:51:00Z\\", \\"action\\": \\"logout\\"}, {\\"timestamp\\": \\"2023-10-10T15:00:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T15:02:00Z\\", \\"action\\": \\"click\\"}, {\\"timestamp\\": \\"2023-10-10T15:05:00Z\\", \\"action\\": \\"logout\\"} ] ``` The company wants to determine the active duration of each user session. A session begins with a \\"login\\" action and ends with a \\"logout\\" action. The duration of a session is the difference in time between the \\"logout\\" action and the corresponding \\"login\\" action. There can be multiple sessions in a single day for a user. Write a Python function that calculates the total active duration of user sessions in seconds given the user activity logs. -----Input----- A JSON array of objects where each object contains: - \\"timestamp\\": A string representing the time at which the action was performed in ISO 8601 format. - \\"action\\": A string representing the type of action performed (\\"login\\", \\"logout\\", \\"view\\", or \\"click\\"). -----Output----- Return an integer representing the total duration in seconds of the user sessions. -----Examples----- Input [{\\"timestamp\\": \\"2023-10-10T14:48:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T14:49:00Z\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-10-10T14:50:00Z\\", \\"action\\": \\"click\\"}, {\\"timestamp\\": \\"2023-10-10T14:51:00Z\\", \\"action\\": \\"logout\\"}, {\\"timestamp\\": \\"2023-10-10T15:00:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T15:02:00Z\\", \\"action\\": \\"click\\"}, {\\"timestamp\\": \\"2023-10-10T15:05:00Z\\", \\"action\\": \\"logout\\"}] Output 900 Input [{\\"timestamp\\": \\"2023-10-10T08:00:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T08:30:00Z\\", \\"action\\": \\"view\\"}, {\\"timestamp\\": \\"2023-10-10T09:00:00Z\\", \\"action\\": \\"click\\"}, {\\"timestamp\\": \\"2023-10-10T09:15:00Z\\", \\"action\\": \\"logout\\"}, {\\"timestamp\\": \\"2023-10-10T10:00:00Z\\", \\"action\\": \\"login\\"}, {\\"timestamp\\": \\"2023-10-10T10:05:00Z\\", \\"action\\": \\"logout\\"}] Output 5400 You may assume that \\"logout\\" actions always match with a \\"login\\" action before it.","solution":"from datetime import datetime def calculate_active_duration(logs): total_duration = 0 login_time = None for log in logs: if log[\'action\'] == \'login\': login_time = log[\'timestamp\'] elif log[\'action\'] == \'logout\' and login_time: logout_time = log[\'timestamp\'] login_dt = datetime.fromisoformat(login_time.replace(\\"Z\\", \\"+00:00\\")) logout_dt = datetime.fromisoformat(logout_time.replace(\\"Z\\", \\"+00:00\\")) session_duration = (logout_dt - login_dt).total_seconds() total_duration += session_duration login_time = None # reset login_time for the next session return int(total_duration)"},{"question":"You are given an array of n distinct integers, and a separate integer k. Your task is to compute how many different pairs (i, j) of indices there are such that the sum of array[i] and array[j] is divisible by k, with i < j. Input The first line of the input contains two space-separated integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ 1000), where n is the number of elements in the array and k is the divisor. The second line contains n space-separated integers representing the elements of the array. The elements are distinct and each element is between 1 and 10000 (inclusive). Output Output a single integer, the number of valid pairs (i, j) where the sum of array[i] and array[j] is divisible by k. Examples Input 5 3 1 2 3 4 5 Output 4 Input 4 5 10 20 30 40 Output 6 Input 6 4 4 8 12 16 20 24 Output 15 Note In the first test case, there are four pairs: (1, 2), (1, 5), (2, 4), and (3, 5) that are divisible by 3. In the second test case, every possible pair (there are 6 of them) is divisible by 5.","solution":"def count_divisible_pairs(n, k, array): Counts the pairs (i, j) such that the sum of array[i] and array[j] is divisible by k and i < j. count = 0 for i in range(n): for j in range(i + 1, n): if (array[i] + array[j]) % k == 0: count += 1 return count"},{"question":"Alyssa is fond of palindromes and loves to play with strings. This time, she comes up with a new problem. She defines a string S as \\"almost palindrome\\" if we can convert the string to a palindrome by changing at most one character. Alyssa wants to write a program to check whether a given string is an \\"almost palindrome\\". Given a string S of length N (1 ≤ N ≤ 10^5), your task is to determine if the string is an \\"almost palindrome\\". Write a program that for each test case, determines if the string is an \\"almost palindrome\\" and outputs \\"YES\\" or \\"NO\\". Input: The first line contains T - the number of test cases. Each test case consists of a single string S. Output: For each test case, print \\"YES\\" if the string is an \\"almost palindrome\\", otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 3 abca racecar abcdef SAMPLE OUTPUT YES YES NO","solution":"def is_almost_palindrome(s): Returns \\"YES\\" if the string s can be converted to a palindrome by changing at most one character, otherwise returns \\"NO\\". def is_palindrome_range(start, end): while start < end: if s[start] != s[end]: return False start += 1 end -= 1 return True start, end = 0, len(s) - 1 while start < end: if s[start] != s[end]: # Check if skipping either start or end character results in a palindrome if is_palindrome_range(start + 1, end) or is_palindrome_range(start, end - 1): return \\"YES\\" else: return \\"NO\\" start += 1 end -= 1 return \\"YES\\" def check_almost_palindromes(test_cases): results = [] for s in test_cases: results.append(is_almost_palindrome(s)) return results"},{"question":"Write a function `find_largest_palindrome` that takes a list of strings and returns the largest palindromic string. # Notes: - Return an empty string if no palindromic string is found. - A string is considered a palindrome if it reads the same forward and backward, case-insensitively. - Return `None` for non-list inputs. # Examples: ```python find_largest_palindrome([\\"racecar\\", \\"level\\", \\"world\\", \\"abba\\"]) => \\"racecar\\" find_largest_palindrome([\\"hello\\", \\"world\\"]) => \\"\\" find_largest_palindrome(\\"not a list\\") => None ```","solution":"def find_largest_palindrome(arr): Returns the largest palindromic string from the list of strings. If no palindromic string is found, returns an empty string. If the input is not a list, returns None. if not isinstance(arr, list): return None largest_palindrome = \\"\\" for string in arr: if isinstance(string, str): normalized_str = string.lower() if normalized_str == normalized_str[::-1]: if len(string) > len(largest_palindrome): largest_palindrome = string return largest_palindrome"},{"question":"You are given an array of N integers, where N is even. The array represents the heights of N trees. Your task is to chop down half (N/2) of the trees such that the difference in heights between the tallest remaining tree and the shortest remaining tree is minimized. For example, if there are 6 trees with heights [2, 3, 9, 4, 7, 6], some trees can be chopped down to get the remaining that minimize the height difference: - Option 1: [2, 3, 4] - Difference is 2 (4-2) - Option 2: [3, 4, 6] - Difference is 3 (6-3) - Option 3: [4, 6, 7] - Difference is 3 (7-4) - Option 4: [4, 7, 9] - Difference is 5 (9-4) - Option 5: [3, 4, 7] - Difference is 4 (7-3) - etc. From the above options, the minimal possible difference is 2. Implement the function `min_height_difference(n: int, heights: List[int]) -> int` that returns the minimal possible difference between the tallest and shortest tree left after chopping down N/2 trees. # Input - An integer `n` (2 ≤ n ≤ 200,000) is the number of trees, which is guaranteed to be even. - A list of integers `heights` of length `n` (1 ≤ heights[i] ≤ 10^9) representing the heights of the trees. # Output Print the minimal possible difference in height between the tallest remaining tree and the shortest remaining tree after chopping down N/2 trees. # Examples Input ``` 6 2 9 3 4 7 6 ``` Output ``` 2 ``` Input ``` 4 10 1 9 2 ``` Output ``` 1 ```","solution":"from typing import List def min_height_difference(n: int, heights: List[int]) -> int: Returns the minimal possible difference between the tallest and shortest tree left after chopping down N/2 trees. heights.sort() k = n // 2 min_diff = float(\'inf\') for i in range(n - k + 1): diff = heights[i + k - 1] - heights[i] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a string consisting of integers separated by commas. Your task is to find the difference between the highest and lowest integer in the given string. -----Input----- The input consists of a single line containing a string, where the length of the string is between 1 and 500 characters. The string contains a series of integers separated by commas, and each integer can be between -1000 and 1000. -----Output----- Print one integer — the difference between the highest and lowest integer in the string. -----Examples----- Input \\"3,-1,9,17,-33\\" Output 50 Input \\"5,5,5,5,5\\" Output 0 Input \\"-7,-3,-10,-15\\" Output 12 -----Note----- In the first example, the highest integer is 17 and the lowest is -33, so the difference is 50. In the second example, all integers are the same, so the difference is 0. In the third example, the highest integer is -3 and the lowest is -15, making the difference 12.","solution":"def find_difference(string): Returns the difference between the highest and lowest integer in a comma-separated string of integers. # Split the string into integer elements numbers = list(map(int, string.split(\',\'))) # Find the highest and lowest integer highest = max(numbers) lowest = min(numbers) # Return the difference return highest - lowest"},{"question":"Given an array of integers, you need to find the length of the longest contiguous subarray that has a maximum sum. If there are multiple such subarrays, return the length of the one that starts earliest in the array. Example 1: Input: arr[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4} Output: 4 Explanation: The subarray [4, -1, 2, 1] has the maximum sum 6 and its length is 4. Example 2: Input: arr[] = {1, 2, 3, -2, 5} Output: 5 Explanation: The subarray [1, 2, 3, -2, 5] has the maximum sum 9 and its length is 5. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxLenSubarray() that takes an array (arr), sizeOfArray (n) and returns the length of the longest contiguous subarray with the maximum sum. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9","solution":"def maxLenSubarray(arr, n): Finds the length of the longest contiguous subarray with the maximum sum. If there are multiple such subarrays, returns the length of the one that starts earliest in the array. # Initialize variables max_sum = -float(\'inf\') current_sum = 0 max_length = 0 temp_length = 0 for i in range(n): current_sum += arr[i] temp_length += 1 if current_sum > max_sum: max_sum = current_sum max_length = temp_length elif current_sum == max_sum: max_length = max(max_length, temp_length) if current_sum < 0: current_sum = 0 temp_length = 0 return max_length"},{"question":"Given an array of integers, your task is to find the sum of the elements of the largest contiguous subarray that contains at most `K` distinct integers. If there are multiple subarrays with the same sum, return the length of the smallest such subarray. # Input - The first line contains an integer `T` denoting the number of test cases. - Each test case starts with an integer `N` denoting the size of the array. - The next line contains `N` space-separated integers representing elements of the array. - The next line contains the integer `K`. # Output For each test case, output a single integer: the sum of the elements of the largest contiguous subarray that contains at most `K` distinct integers. If there are multiple subarrays with the same sum, return the length of the smallest such subarray. # Example Input: ``` 3 5 1 2 1 2 3 2 6 1 2 1 3 4 3 3 4 1 2 3 4 2 ``` Output: ``` 6 10 3 ``` # Explanation Case 1: The subarrays with at most 2 distinct integers are: - [1, 2] (sum: 3) - [1, 2, 1] (sum: 4) - [2, 1, 2] (sum: 5) - [1, 2, 1, 2] (sum: 6) - [2, 3] (sum: 5) - [1, 2] (sum: 3) The largest sum is 6 and the smallest subarray with this sum is [1, 2, 1, 2] of length 4. Case 2: The subarrays with at most 3 distinct integers are: - [1, 2] (sum: 3) - [1, 2, 1] (sum: 4) - [2, 1, 3] (sum: 6) - [1, 2, 1, 3] (sum: 7) - [2, 1, 3, 4] (sum: 10) The largest sum is 10 and the smallest subarray with this sum is [2, 1, 3, 4] of length 4. Case 3: The subarrays with at most 2 distinct integers are: - [1, 2] (sum: 3) - [2, 3] (sum: 5) - [3, 4] (sum: 7) The largest sum is 7 and the smallest subarray with this sum is [3, 4] of length 2. However, the subarray [1, 2, 3] has sum 6, which is also the largest, and its length is 3 (the smallest possible length in this scenario). Therefore, the output should be 3.","solution":"def largest_sum_subarray_with_k_distinct(T, test_cases): from collections import defaultdict def find_subarray_with_k_distinct(arr, K): n = len(arr) left = 0 max_sum = float(\'-inf\') min_len = float(\'inf\') current_sum = 0 freq = defaultdict(int) for right in range(n): freq[arr[right]] += 1 current_sum += arr[right] while len(freq) > K: current_sum -= arr[left] freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 if current_sum > max_sum: max_sum = current_sum min_len = right - left + 1 elif current_sum == max_sum: min_len = min(min_len, right - left + 1) return max_sum, min_len results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] K = test_cases[i][2] max_sum, min_len = find_subarray_with_k_distinct(arr, K) results.append(min_len) # As we are expected to output the length of smallest subarray with max sum return results # Example usage: T = 3 test_cases = [ (5, [1, 2, 1, 2, 3], 2), (6, [1, 2, 1, 3, 4, 3], 3), (4, [1, 2, 3, 4], 2) ] print(largest_sum_subarray_with_k_distinct(T, test_cases))"},{"question":"The Largest Unique Substring You are given a string and your task is to find the length of the longest substring that contains only unique characters. Your program should efficiently determine this length to ensure fast processing, even for larger inputs. Input The input consists of a single line which contains a string `s` (0 ≤ |s| ≤ 1000). The string can contain any visible ASCII characters. Output Print the length of the longest substring with all unique characters. Sample Input abcabcbb bbbbb pwwkew Output for the Sample Input 3 1 3 Example Input abcabcbb Output 3","solution":"def length_of_longest_unique_substring(s): n = len(s) max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers. You need to determine the minimum number of changes (increment or decrement) needed to make all elements of the array equal. An increment adds 1 to an element, and a decrement subtracts 1 from an element. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 50) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1≤ ai ≤ 100) — representing the elements of the array. -----Output----- Print a single integer — the minimum number of changes required to make all elements of the array equal. -----Examples----- Input 3 1 2 3 Output 2 Input 5 5 5 5 5 5 Output 0 Input 4 1 3 2 2 Output 2","solution":"def minimum_changes_to_equalize(nums): Determines the minimum number of changes (increment or decrement) needed to make all elements of the array equal. Args: nums: List[int] - The list of integers. Returns: int - The minimum number of changes required. if not nums: return 0 median = sorted(nums)[len(nums) // 2] return sum(abs(num - median) for num in nums)"},{"question":"Mario wants to collect coins in a 2D grid of size m x n. Each cell in the grid contains a certain number of coins. Mario can start at any cell in the first row and can move to any cell in the last row by only moving downwards to adjacent cells (including diagonally). Write a function `max_coins(grid: List[List[int]]) -> int` that returns the maximum number of coins Mario can collect. **Input:** - grid (List[List[int]]): A List of List of integers representing the 2D grid of coins. **Output:** - int: The maximum number of coins Mario can collect. **Example Input:** ``` [ [0, 1, 4, 2], [4, 8, 3, 7], [6, 5, 9, 1], [1, 2, 2, 4] ] ``` **Example Output:** ``` 24 ``` **Explanation:** Mario can start at cell (0, 2) with 4 coins, move to cell (1, 1) with 8 coins, move to cell (2, 2) with 9 coins, and finally move to cell (3, 3) with 4 coins, collecting a total of 4 + 8 + 9 + 4 = 25 coins. Therefore, the maximum number of coins Mario can collect is 25.","solution":"from typing import List def max_coins(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m = len(grid) n = len(grid[0]) # Initialize dp table dp = [[0] * n for _ in range(m)] # Fill the first row of dp table with the values of grid\'s first row for j in range(n): dp[0][j] = grid[0][j] # Build the dp table row by row for i in range(1, m): for j in range(n): # For each cell, we consider the maximum coins we can get from the cell directly above, # and the two diagonally adjacent cells from the previous row max_coins_from_above = dp[i-1][j] if j > 0: max_coins_from_above = max(max_coins_from_above, dp[i-1][j-1]) if j < n - 1: max_coins_from_above = max(max_coins_from_above, dp[i-1][j+1]) dp[i][j] = grid[i][j] + max_coins_from_above # The answer will be the maximum value in the last row of dp table return max(dp[m-1])"},{"question":"Given a list of N integers, determine if you can partition the list into two subsets such that the sum of the elements in both subsets is equal. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". -----Constraints----- - 1 leq N leq 100 - 1 leq Each integer in the list leq 1000 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 dots a_N -----Output----- Print \\"YES\\" if the array can be partitioned into two subsets such that the sum of the elements in both subsets is equal, otherwise print \\"NO\\". -----Sample Input 1----- 4 1 5 11 5 -----Sample Output 1----- YES -----Sample Input 2----- 3 1 3 5 -----Sample Output 2----- NO Explanation: In the first example, the list can be partitioned into {1, 5, 5} and {11}, both adding up to 11. In the second example, no such partition can be made.","solution":"def can_partition(nums): total_sum = sum(nums) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num-1, -1): dp[i] = dp[i] or dp[i-num] if dp[target]: return \\"YES\\" else: return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) nums = list(map(int, data[1:])) result = can_partition(nums) print(result)"},{"question":"# Introduction A warehouse has a complex network of conveyors that move packages from one zone to another. Each conveyor has a specified capacity, which indicates the maximum number of packages it can handle simultaneously. To manage and optimize the flow of packages, we need to develop a function that calculates the maximum number of packages that can be in transit between zones at any given time without exceeding the conveyor capacities. # Task Implement a function `max_packages` that takes a list of conveyors\' capacities as input and returns the maximum number of packages that can be in transit simultaneously without exceeding the capacity of any conveyor. # Rules 1. The input list will contain integers representing the capacities of the conveyors. 2. Each conveyor can handle a maximum number of packages specified by its capacity. 3. The function should return an integer representing the maximum number of packages in transit. # Example 1 ```python max_packages([3, 5, 2, 4, 6]) => 20 ``` Explanation: The maximum number of packages in transit across all conveyors is 3 + 5 + 2 + 4 + 6 = 20. # Example 2 ```python max_packages([1, 2, 3, 4, 5]) => 15 ``` Explanation: The maximum number of packages in transit across all conveyors is 1 + 2 + 3 + 4 + 5 = 15. # Returns Return an integer representing the maximum number of packages that can be in transit at any given time. # Additional Scenarios - If a conveyor has a capacity of 0, it cannot handle any packages. - All conveyors have non-negative integer capacities; there are no negative values. ```python def max_packages(capacities): # Implement the function here pass ```","solution":"def max_packages(capacities): Given a list of conveyor capacities, return the maximum number of packages that can be in transit simultaneously without exceeding the capacity of any conveyor. :param capacities: List of integers representing the capacities of the conveyors :return: Integer representing the maximum number of packages in transit return sum(capacities)"},{"question":"Given two strings s1 and s2, your task is to find the longest common substring between the two strings. The longest common substring is defined as the longest sequence of characters that appear consecutively in both s1 and s2. Example 1: Input: s1 = \\"abcdef\\", s2 = \\"zcdemf\\" Output: \\"cde\\" Explanation: The longest common substring is \\"cde\\" appearing consecutively in both the strings. Example 2: Input: s1 = \\"ABC\\", s2 = \\"DEF\\" Output: \\"\\" Explanation: There is no common substring between the strings. Your Task: You don\'t need to read input or print anything. Complete the function `longestCommonSubstring()` which takes s1 and s2 as input parameters and returns the longest common substring. If there are multiple such substrings, return any one of them. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) for dynamic programming table, where N and M are lengths of s1 and s2 respectively. Constraints: 1 ≤ length of s1, length of s2 ≤ 1000","solution":"def longestCommonSubstring(s1, s2): Function to find the longest common substring between two given strings. # Base case: If either string is empty, return an empty string if not s1 or not s2: return \\"\\" n, m = len(s1), len(s2) # Create a DP table to store lengths of longest common suffixes of substrings dp = [[0] * (m + 1) for _ in range(n + 1)] max_length = 0 end_index_s1 = 0 for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] end_index_s1 = i # Extract the longest common substring if max_length == 0: return \\"\\" longest_substring = s1[end_index_s1 - max_length : end_index_s1] return longest_substring"},{"question":"David is navigating through a hazardous field filled with mines. The field is represented by a grid of size M x N. Some cells in the grid contain mines, and David must navigate from a starting cell to a target cell without stepping on a mine. The grid is represented as an M x N matrix, where a value of 1 indicates the presence of a mine, and a value of 0 indicates a safe cell. David can only move up, down, left, or right. He starts at a given cell and needs to reach the target cell. Your task is to determine the minimum number of moves required for David to reach the target cell without stepping on any mines. If it is impossible for David to reach the target cell, return -1. Input - The first line contains two integers M and N (1 ≤ M, N ≤ 100), representing the number of rows and columns in the grid, respectively. - The next M lines each contain N integers (either 0 or 1), representing the grid. - The next line contains two integers r_s and c_s (0 ≤ r_s < M, 0 ≤ c_s < N), representing the starting cell\'s row and column. - The next line contains two integers r_t and c_t (0 ≤ r_t < M, 0 ≤ c_t < N), representing the target cell\'s row and column. Output - Output a single integer representing the minimum number of moves required for David to reach the target cell. If it is impossible, output -1. Examples Input 5 5 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 4 4 Output 8 Input 3 3 0 1 0 1 0 1 0 1 0 0 0 2 2 Output -1 Explanation For the first example, the minimum path with 8 moves would be: (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) → (3, 2) → (4, 2) → (4, 3) → (4, 4) For the second example, there is no path from (0, 0) to (2, 2) without stepping on a mine, hence the output is -1.","solution":"from collections import deque def min_moves_to_target(M, N, grid, r_s, c_s, r_t, c_t): Given a grid of M x N dimensions with mines and a start and target cell, find the minimum number of moves from start to target without stepping on mines. # If starting or target cell is a mine, return -1 immediately if grid[r_s][c_s] == 1 or grid[r_t][c_t] == 1: return -1 # Initialize queue for BFS queue = deque([(r_s, c_s, 0)]) # (row, column, distance) visited = set((r_s, c_s)) # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: row, col, dist = queue.popleft() # If we have reached the target cell, return the distance if row == r_t and col == c_t: return dist # Explore neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < M and 0 <= new_col < N and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) # If no path found, return -1 return -1"},{"question":"-----Input----- The input consists of a positive integer n (n ≤ 100) followed by a list of n integers, each between 0 and 100, representing the ages of people in a room. -----Output----- Output the median age of the people. If there is an even number of people, output the smaller of the two middle ages. -----Example----- Input 5 34 28 43 57 41 Output 41","solution":"def median_age(ages): Returns the median age from a list of ages. If there is an even number of ages, the function returns the smaller of the two middle ages. n = len(ages) sorted_ages = sorted(ages) mid = n // 2 if n % 2 == 0: return sorted_ages[mid - 1] else: return sorted_ages[mid]"},{"question":"A company organizes monthly coding challenges and wants to ensure that each participant\'s preferences for specific topics are considered when forming teams. Each participant has a preference for one or more topics. A team can only work effectively if all members have at least one topic in common. Your task is to form the largest group of participants such that they all share at least one common topic. -----Input----- The first line of input is an integer 1 leq N leq 1000 representing the number of participants. The next N lines each contain a participant\'s data, with the first element being a string (the participant\'s name) and the following elements being space-separated strings representing the topics the participant prefers. Each participant data line will have at least one topic, and the topics are strings of length at least 1 and at most 20 characters, containing only upper and lower case letters, digits, and dashes. Each line will not exceed 100 characters. -----Output----- For each test case, output a single integer representing the maximum number of participants that can form a group sharing at least one common topic. -----Examples----- Sample Input: 6 Alice AI Data-Science Bob AI Machine-Learning Charlie Cybersecurity David Data-Science Machine-Learning Eve AI Data-Science Frank Cybersecurity Sample Output: 3","solution":"from collections import defaultdict def form_largest_group(N, participants_data): # Create a dictionary to map each topic to the participants interested in it topic_to_participants = defaultdict(set) # Process each participant\'s data for participant_data in participants_data: parts = participant_data.split() name = parts[0] topics = parts[1:] for topic in topics: topic_to_participants[topic].add(name) # Find the largest group by comparing the size of participant lists for each topic largest_group = 0 for participants in topic_to_participants.values(): largest_group = max(largest_group, len(participants)) return largest_group"},{"question":"You are tasked with designing a robot navigation system that navigates through a 2D grid. The grid is represented by `n x m` dimensions where each cell is either an open space (\'.\') or a wall (\'#\'). The robot can move up, down, left, or right, but it cannot move through the walls. Given the starting position of the robot and its destination, write a function to determine the minimum number of moves required for the robot to reach the destination. If the destination is not reachable, return `-1`. ------ Input Format ------ - The first line contains two integers `n` and `m`, the dimensions of the grid. - The next `n` lines contain `m` characters each (\'.\' or \'#\'), representing the grid. - The following line contains two space-separated integers `sx` and `sy`, the starting coordinates of the robot. - The last line contains two space-separated integers `dx` and `dy`, the destination coordinates. ------ Output Format ------ - Output a single integer, the minimum number of moves to reach the destination, or `-1` if it is not reachable. ------ Constraints ------ 1 ≤ n, m ≤ 1000 0 ≤ sx, sy, dx, dy < n, m All coordinates are given as zero-based indices. ------ Sample Input 1 ------ 5 5 ..... .#.#. ..#.. .#.#. ..... 0 0 4 4 ------ Sample Output 1 ------ 8 ------ Explanation 1 ------ - The robot can follow this path: (0, 0) -> (1, 0) -> (2, 0) -> (3, 0) -> (4, 0) -> (4, 1) -> (4, 2) -> (4, 3) -> (4, 4), for a total of 8 moves.","solution":"from collections import deque def min_moves(grid, sx, sy, dx, dy): Function to determine the minimum number of moves required for the robot to reach the destination. n = len(grid) m = len(grid[0]) # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS ((current_x, current_y), current_distance) queue = deque([((sx, sy), 0)]) # Set to keep track of visited cells visited = set() visited.add((sx, sy)) # BFS traversal while queue: (x, y), dist = queue.popleft() # If destination is reached if (x, y) == (dx, dy): return dist # Explore all four directions for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] == \'.\' and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append(((new_x, new_y), dist + 1)) # If destination is not reachable return -1"},{"question":"You are given a list of integers representing the number of votes each candidate received in an election. A candidate is considered a winner if they have strictly more votes than any other candidate. If two or more candidates have the same highest number of votes, there is no winner. Determine and return the index of the winning candidate, or -1 if there is no winner. Example 1: Input: votes = [10, 20, 30, 40, 50] Output: 4 Example 2: Input: votes = [10, 20, 30, 40, 40] Output: -1 Example 3: Input: votes = [5, 5, 5, 5, 5] Output: -1 Example 4: Input: votes = [1, 99, 2, 99] Output: -1 Constraints: - The length of the votes list is between 1 and 100. - Each element of votes is a non-negative integer not exceeding 10^6.","solution":"def find_winner(votes): if not votes: return -1 max_votes = max(votes) if votes.count(max_votes) > 1: return -1 return votes.index(max_votes)"},{"question":"Write a function that determines if two strings are anagrams of each other. Two strings are anagrams if they are made of the same characters with the same frequencies, only the order of characters may differ. The function should return \\"YES\\" if they are anagrams and \\"NO\\" if they are not. Function Description Complete the `areAnagrams` function in the editor below. `areAnagrams` has the following parameter(s): - `string str1`: the first string - `string str2`: the second string Returns - `string`: \\"YES\\" if the strings are anagrams, \\"NO\\" otherwise Input Format The first line contains an integer, `t`, the number of test cases. Each of the next `t` pairs of lines contains two strings, `str1` and `str2`. Constraints - 1 leq t leq 100 - 1 leq text{length of str1 and str2} leq 100 - Both strings consist of lowercase letters in the range ascii[a-z] Output Format For each test case, on a separate line, print \\"YES\\" if the two strings are anagrams, \\"NO\\" otherwise. Sample Input ``` 3 listen silent triangle integral apple papel ``` Sample Output ``` YES YES YES ``` Explanation For the first test case, `listen` and `silent` are anagrams as they have the same characters with the same frequencies. Similarly, `triangle` and `integral` are anagrams as well as `apple` and `papel`. Hence, the output for each test case is \\"YES\\".","solution":"def areAnagrams(str1, str2): This function checks if two strings are anagrams of each other. :param str1: First string :param str2: Second string :return: \\"YES\\" if the strings are anagrams, \\"NO\\" otherwise # Anagrams should have the same length and the same sorted characters if sorted(str1) == sorted(str2): return \\"YES\\" else: return \\"NO\\""},{"question":"Anu is participating in a coding marathon consisting of N problems. Each problem has a certain difficulty level represented by an integer. Anu is given only K minutes to solve the problems, where each problem takes exactly 1 minute to solve regardless of its difficulty level. Anu wants to maximize the sum of difficulty levels of the problems she solves within the given time limit. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two space-separated integers N and K — the number of problems and the number of minutes Anu has. - The second line of each test case contains N space-separated integers — the difficulties of the problems. ------ Output Format ------ For each test case, output a single integer — the maximum sum of difficulties of the problems Anu can solve in the given time limit \'K\'. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ N 1 ≤ difficulty ≤ 10^4 ----- Sample Input 1 ------ 2 5 3 10 20 30 40 50 4 2 15 5 10 25 ----- Sample Output 1 ------ 120 40 ------ Explanation 1 ------ Test Case 1: Anu has 3 minutes and the maximum difficulties she can sum up by choosing the problems are 30, 40, 50. Therefore, 30 + 40 + 50 = 120. Test Case 2: Anu has 2 minutes and the maximum difficulties she can sum up are 15, 25. Therefore, 15 + 25 = 40.","solution":"def max_difficulty_sum(T, test_cases): Args: T : int : number of test cases test_cases : list of tuples : each tuple contains (N, K, difficulties) N : int : number of problems K : int : number of minutes difficulties : list of ints : difficulties of problems Returns: list of ints : maximum sum of problem difficulties Anu can solve for each test case. results = [] for i in range(T): N, K, difficulties = test_cases[i] # Sort difficulties in descending order and sum up the top K difficulties max_sum = sum(sorted(difficulties, reverse=True)[:K]) results.append(max_sum) return results"},{"question":"Given an array of integers, write a function to determine the maximum sum of any contiguous subarray of size k. The function should take two arguments: the array of integers and the integer k, which represents the size of the subarray. Your solution should be efficient, with a time complexity better than O(n^2). # Input Format: - The first line contains an integer n, the length of the array. - The second line contains n space-separated integers, representing the array. - The third line contains the integer k, the size of the contiguous subarray. # Output Format: - Print a single integer, the maximum sum of any contiguous subarray of size k. # Constraints: - 1 ≤ n ≤ 10^5 - -10^4 ≤ array[i] ≤ 10^4 - 1 ≤ k ≤ n # SAMPLE INPUT 8 1 2 3 4 5 6 7 8 3 # SAMPLE OUTPUT 21 # Explanation: The subarray of size 3 with the maximum sum is [6, 7, 8], which gives a sum of 21. To solve this problem efficiently, you should use the sliding window technique. This results in a solution that runs in O(n) time complexity, ensuring that even for the largest inputs, the solution remains efficient.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of any contiguous subarray of size k. :param arr: List[int] - The list of integers. :param k: int - Size of the contiguous subarray. :return: int - The maximum sum of any contiguous subarray of size k. n = len(arr) if n < k or k == 0: return 0 # Compute the sum of the first window max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a distant kingdom, there exists a magical forest where n unique types of magical fruits grow. Each type of fruit has a distinct sweetness value, which is determined by the number of magical units (MU) it contains. The king of the kingdom loves sweet fruits and wants to maximize the sweetness by choosing exactly k different types of fruits. The king has assigned you, the royal programmer, the task of developing a program to determine the maximum total sweetness he can achieve by selecting exactly k different types of fruits from the forest. -----Input----- The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of different types of fruits and the number of types of fruits the king wants to select, respectively. The second line contains n integers ai (1 ≤ ai ≤ 10^9) representing the sweetness of each type of fruit. -----Output----- Output a single integer — the maximum total sweetness the king can achieve by selecting exactly k different types of fruits. -----Example----- Input 5 3 2 5 3 8 6 Output 19 Input 4 2 1 3 2 4 Output 7 Input 6 4 1 10 3 7 2 5 Output 25 -----Note----- In the first example, the maximum total sweetness is achieved by selecting the types of fruits with sweetness values 5, 8, and 6, which sum up to 19.","solution":"def max_total_sweetness(n, k, sweetness_values): Returns the maximum total sweetness achievable by selecting exactly k different types of fruits. # Sort sweetness values in descending order sweetness_values.sort(reverse=True) # Sum the top k sweetness values return sum(sweetness_values[:k])"},{"question":"In a digital warehouse, there are m types of items indexed from 1 to m. Each item i (1 ≤ i ≤ m) has an initial stock of s_i units. The warehouse receives a series of n orders. Each order requests a particular type of item and a specific quantity of that item. As orders are processed sequentially, if an order requests more units than are available in stock for that item, the order should be rejected for insufficient stock and the stock levels do not change for that item. Your task is to determine how many orders are successfully fulfilled. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of orders and the number of different types of items respectively. The second line contains m integers s_1, s_2, ..., s_m (0 ≤ s_i ≤ 10^9) — the initial stock levels for each item type. The next n lines each contain two integers t_j and q_j (1 ≤ t_j ≤ m, 1 ≤ q_j ≤ 10^9) — the type of item requested and the quantity requested for the j-th order. Output Output a single integer — the number of orders that are successfully fulfilled. Examples Input 5 3 10 5 20 1 5 2 3 3 10 1 11 2 2 Output 4 Input 4 2 7 14 2 15 1 3 2 7 1 5 Output 2 Note In the first example, there are three types of items with initial stock levels 10, 5, and 20 respectively. The orders are as follows: 1. An order requests 5 units of item type 1, which is fulfilled. Remaining stock: [5, 5, 20] 2. An order requests 3 units of item type 2, which is fulfilled. Remaining stock: [5, 2, 20] 3. An order requests 10 units of item type 3, which is fulfilled. Remaining stock: [5, 2, 10] 4. An order requests 11 units of item type 1, which is rejected. Remaining stock: [5, 2, 10] 5. An order requests 2 units of item type 2, which is fulfilled. Remaining stock: [5, 0, 10] Thus, 4 out of 5 orders are successfully fulfilled. In the second example: 1. The order for 15 units of item type 2 is rejected due to insufficient stock (stock is 14). 2. The orders for 3 units of item type 1 and 7 units of item type 2 are successfully fulfilled. Remaining stock: [4, 7] 3. The final order for 5 units of item type 1 is successfully fulfilled. Remaining stock: [0, 7] Therefore, 2 out of 4 orders are successfully fulfilled.","solution":"def fulfilled_orders(n, m, stock, orders): Determines the number of orders that are successfully fulfilled. Parameters: n (int): Number of orders. m (int): Number of different types of items. stock (list of int): Initial stock levels for each item type. orders (list of tuple of int): List of orders where each order is a tuple (t, q). Returns: int: Number of orders successfully fulfilled. successful_orders_count = 0 for t, q in orders: if stock[t-1] >= q: stock[t-1] -= q successful_orders_count += 1 return successful_orders_count"},{"question":"Write a function to determine if a string is a valid arithmetic expression. A valid arithmetic expression can only contain digits (0-9), plus (+) and minus (-) operators, and must not contain any invalid characters or expressions like multiple consecutive operators or an operator at the end. Constraints * 1 ≤ length of the string ≤ 100 Input The input consists of a single line containing the string expression. Output The output should be \\"valid\\" if the string is a valid arithmetic expression, and \\"invalid\\" otherwise. Example Input 3+5-2 Output valid Input 7-+3 Output invalid Input +4-2+3 Output invalid Input 6+8-13 Output valid","solution":"import re def is_valid_expression(expression): Determines if a string is a valid arithmetic expression. A valid arithmetic expression can only contain digits (0-9), plus (+) and minus (-) operators, and must not contain any invalid characters or expressions like multiple consecutive operators or an operator at the end. # Regular expression to check if the expression is valid pattern = re.compile(r\'^[0-9]+([+-][0-9]+)*\') if pattern.match(expression): return \\"valid\\" else: return \\"invalid\\""},{"question":"# Unique Paths on a Grid Riley loves exploring different paths on a grid. She particularly enjoys counting how many unique paths she can take from the top-left corner to the bottom-right corner of a grid with obstacles. Problem Description Given a grid of size `m x n`, Riley starts at the top-left corner (`0,0`) and wants to reach the bottom-right corner (`m-1,n-1`). She can only move down or to the right at any point in time, but some cells may be blocked by obstacles. An obstacle and empty space are represented by `1` and `0` respectively in the grid. Riley cannot move to a cell with an obstacle. Your Task Count the number of unique paths that Riley can take to move from the top-left corner to the bottom-right corner, avoiding obstacles. # Input - `m` (1 <= m <= 100): The number of rows in the grid. - `n` (1 <= n <= 100): The number of columns in the grid. - `grid`: A 2D list of integers representing the grid, where `grid[i][j]` is `0` if the cell is empty and `1` if it contains an obstacle. # Output - Return an integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. # Examples 1. Input: `m = 3, n = 3, grid = [[0,0,0],[0,1,0],[0,0,0]]` - Output: `2` Explanation: Riley can take the following paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right 2. Input: `m = 3, n = 3, grid = [[0,1,0],[0,1,0],[0,0,0]]` - Output: `1` Explanation: Riley can only take the following path: Down -> Down -> Right -> Right 3. Input: `m = 2, n = 2, grid = [[0,1],[0,0]]` - Output: `1` # Note - If there is no path to reach the bottom-right corner, return `0`.","solution":"def unique_paths_with_obstacles(m, n, grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid, avoiding obstacles. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are given two integers n and m representing the number of rows and columns of an n x m matrix respectively. Fill the matrix with distinct integers from 1 to n*m in a snake pattern. Specifically, fill the matrix with the integers in increasing order, but alternate the direction of rows between left-to-right and right-to-left. Input The only line of input contains integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100). Output Output the matrix in n lines, each containing m integers separated by spaces, filled in a snake pattern as described. Examples Input 3 4 Output 1 2 3 4 8 7 6 5 9 10 11 12 Input 2 3 Output 1 2 3 6 5 4","solution":"def snake_pattern(n, m): Creates an n x m matrix filled with distinct integers from 1 to n*m in a snake pattern. matrix = [[0] * m for _ in range(n)] num = 1 for i in range(n): if i % 2 == 0: for j in range(m): matrix[i][j] = num num += 1 else: for j in range(m-1, -1, -1): matrix[i][j] = num num += 1 return matrix def format_matrix(matrix): Formats the matrix into a string for easy comparison and printing. return \\"n\\".join(\\" \\".join(str(cell) for cell in row) for row in matrix)"},{"question":"Write a function that simulates a simplified version of a file management system. The system is to interpret and execute a series of commands that modify a directory structure. The key commands that need to be supported are: - \\"CREATE /path/to/directory\\": Create a new directory at the specified path. If intermediate directories do not exist, they are also created. - \\"DELETE /path/to/directory\\": Delete the directory at the specified path as well as any directories that it contains. If the directory does not exist, ignore the command. - \\"MOVE /path/from /path/to\\": Move the directory from the first specified path to the second. If the first directory does not exist, ignore the command. If the second path does not exist, create the necessary directories. Input The input consists of a sequence of commands separated by newline characters. Each command will be one of the three types mentioned above. Output The output consists of the final directory structure, represented as nested lists. The root directory is represented as the empty string \\"\\". Each subdirectory is represented as a nested list with its name as the first element followed by its subdirectories, also as lists. Examples Input CREATE /a/b/c CREATE /d/e/f MOVE /a /d/g/h DELETE /d/e Output [\'\', [\'d\', [\'g\', [\'h\', [\'a\', [\'b\', [\'c\']]]]]]]","solution":"class FileManager: def __init__(self): self.root = [\\"\\"] def _navigate(self, path): parts = path.strip(\\"/\\").split(\\"/\\") node = self.root for part in parts: for subnode in node[1:]: if subnode[0] == part: node = subnode break else: new_node = [part] node.append(new_node) node = new_node return node def create(self, path): self._navigate(path) def _find_and_remove(self, path): parts = path.strip(\\"/\\").split(\\"/\\") node = self.root stack = [] for part in parts: found = False for subnode in node[1:]: if subnode[0] == part: stack.append((node, subnode)) node = subnode found = True break if not found: return parent, node = stack.pop() parent.remove(node) def delete(self, path): self._find_and_remove(path) def move(self, src_path, dest_path): parts = src_path.strip(\\"/\\").split(\\"/\\") node = self.root stack = [] for part in parts: found = False for subnode in node[1:]: if subnode[0] == part: stack.append((node, subnode)) node = subnode found = True break if not found: return parent, node = stack.pop() parent.remove(node) dest_node = self._navigate(dest_path) dest_node.append(node) def execute(self, commands): for command in commands.splitlines(): parts = command.split() action = parts[0] if action == \\"CREATE\\": self.create(parts[1]) elif action == \\"DELETE\\": self.delete(parts[1]) elif action == \\"MOVE\\": self.move(parts[1], parts[2]) return self.root def manage_filesystem(commands): fm = FileManager() return fm.execute(commands)"},{"question":"You are tasked with managing an array of n integers. A series of q operations will be performed on this array. Each operation falls into one of two types: 1. Update the value at a specific index. 2. Calculate the sum of values within a specific range. Your objective is to efficiently handle these operations and provide the correct outputs for the range sum queries. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers, representing the initial values of the array. The next q lines describe the operations. Each operation is either of the form: - \\"1 x v\\" which means set the value at index x to v (1 ≤ x ≤ n, -10^9 ≤ v ≤ 10^9), - \\"2 l r\\" which means calculate the sum of values from index l to r (1 ≤ l ≤ r ≤ n). Output For each range sum query (\\"2 l r\\"), output the sum of values in the range [l, r]. Example Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 2 4 1 3 6 2 1 5 Output 6 20 22 Note In the first query, the sum of values from index 1 to 3 is 1 + 2 + 3 = 6. After the first update, the value at index 2 is updated to 10, so the array becomes [1, 10, 3, 4, 5]. In the second query, the sum of values from index 2 to 4 is 10 + 3 + 4 = 17. After the second update, the value at index 3 is updated to 6, so the array becomes [1, 10, 6, 4, 5]. In the third query, the sum of values from index 1 to 5 is 1 + 10 + 6 + 4 + 5 = 26.","solution":"class ArrayManager: def __init__(self, n, initial_values): self.n = n self.array = initial_values def update(self, x, v): self.array[x - 1] = v def range_sum(self, l, r): return sum(self.array[l-1:r]) def process_operations(n, q, initial_values, operations): array_manager = ArrayManager(n, initial_values) results = [] for operation in operations: if operation[0] == 1: array_manager.update(operation[1], operation[2]) elif operation[0] == 2: result = array_manager.range_sum(operation[1], operation[2]) results.append(result) return results"},{"question":"It\'s Halloween, and pumpkins are lined up in a row on the street, each pumpkin glowing with a certain intensity. Halloween enthusiasts are excited to capture the spooky effect, but they need to know the maximum spooky effect they can achieve with any contiguous subarray of pumpkins. Given an array of integers representing the glowing intensities of the pumpkins, your task is to find the maximum possible sum of intensities of any contiguous subarray of the pumpkins. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of pumpkins. The second line contains n integers ai (|ai| ≤ 10^9) — the glowing intensities of the pumpkins. Output Print a single integer: the maximum possible sum of intensities of any contiguous subarray. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 3 Output 3 Note In the first sample, the optimal subarray is [4, -1, 2, 1] with a sum of 6. In the second sample, since there is only one pumpkin, the maximum sum is 3 (the intensity of the single pumpkin).","solution":"def max_subarray_sum(n, intensities): Finds the maximum sum of a contiguous subarray using Kadane\'s Algorithm. Parameters: n (int): The number of pumpkins. intensities (list): A list of integers representing the glowing intensities of the pumpkins. Returns: int: The maximum possible sum of intensities of any contiguous subarray. max_ending_here = max_so_far = intensities[0] for intensity in intensities[1:]: max_ending_here = max(intensity, max_ending_here + intensity) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"There is a tree with N nodes and (N-1) edges rooted at node 1. Each node has a value assigned to it. You need to find the maximum sum of node values in any simple path in the tree. A simple path is a path that does not revisit any node. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers v_1, v_2, ldots, v_N representing the values of the nodes. - Each of the next (N-1) lines contains two space-separated integers u and v denoting an edge between nodes u and v. -----Output----- For each test case, print a single line containing the maximum sum of node values in any simple path in the tree. -----Constraints----- - 1 le T le 10 - 2 le N le 1000 - -10^4 le v_i le 10^4 for each valid i - 1 le u, v le N -----Example Input----- 2 3 1 2 3 1 2 2 3 4 -1 2 3 -4 1 2 2 3 2 4 -----Example Output----- 6 5 -----Explanation----- Example case 1: The simple path with the maximum sum is 1 -> 2 -> 3, which has values 1 + 2 + 3 = 6. Example case 2: The simple path with the maximum sum is 3 -> 2 -> 1, which has values 3 + 2 - 1 = 4, but there is another path 3 -> 2 -> 4 with values 3 + 2 - 4 = 1. Thus, the maximum sum is 5.","solution":"def dfs_max_sum(node, parent, adj, values): max1, max2 = 0, 0 # top two longest paths from this node for child in adj[node]: if child == parent: continue max_child_sum = dfs_max_sum(child, node, adj, values) if max_child_sum > max1: max1, max2 = max_child_sum, max1 elif max_child_sum > max2: max2 = max_child_sum dfs_max_sum.max_path = max(dfs_max_sum.max_path, max1 + max2 + values[node]) return max1 + values[node] def max_sum_path_in_tree(N, values, edges): adj = {i: [] for i in range(N)} for u, v in edges: adj[u-1].append(v-1) adj[v-1].append(u-1) dfs_max_sum.max_path = float(\'-inf\') dfs_max_sum(0, -1, adj, values) return dfs_max_sum.max_path def max_sum_path_in_forest(T, test_cases): results = [] for N, values, edges in test_cases: results.append(max_sum_path_in_tree(N, values, edges)) return results"},{"question":"Given an integer array and a target sum, your task is to determine the minimum number of elements that need to be removed from the array so that the remaining elements have a sum less than or equal to the target sum. Example 1: Input: arr = [1, 2, 3, 4, 5], target_sum = 10 Output: 1 Explanation: We can remove the element 5 to get [1, 2, 3, 4] which sums to 10. Example 2: Input: arr = [3, 1, 4, 2, 2], target_sum = 7 Output: 2 Explanation: We can remove the elements 4 and 1 to get [3, 2, 2] which sums to 7. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minRemovalsToMeetSum` which takes the array `arr` and the integer `target_sum` as input parameters and returns the minimum number of elements that need to be removed to make the sum of the remaining elements less than or equal to `target_sum`. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 <= arr.length <= 10^4 1 <= arr[i] <= 10^4 1 <= target_sum <= 10^9","solution":"def minRemovalsToMeetSum(arr, target_sum): Determines the minimum number of elements that should be removed so that the remaining elements have a sum less than or equal to target_sum. arr.sort(reverse=True) current_sum = sum(arr) if current_sum <= target_sum: return 0 removals = 0 for i in arr: current_sum -= i removals += 1 if current_sum <= target_sum: break return removals"},{"question":"# Task You\'re given an array of integer stock prices where the `i-th` index represents the stock price on day `i`. You need to find out the maximum profit you can achieve by making as many transactions as you want (i.e., buy one and sell one share of the stock multiple times). However, you must sell the stock before you buy it again. Write an algorithm that returns the maximum profit possible. # Example For `prices = [7, 1, 5, 3, 6, 4]`, the output should be `7`. Explanation: - Buy on day 2 (`price = 1`) and sell on day 3 (`price = 5`), profit = `5 - 1 = 4`. - Then buy on day 4 (`price = 3`) and sell on day 5 (`price = 6`), profit = `6 - 3 = 3`. Total profit is `4 + 3 = 7`. For `prices = [1, 2, 3, 4, 5]`, the output should be `4`. Explanation: - Buy on day 0 (`price = 1`) and sell on day 1 (`price = 2`), profit = `2 - 1 = 1`. - Then buy on day 1 (`price = 2`) and sell on day 2 (`price = 3`), profit = `3 - 2 = 1`. - Then buy on day 2 (`price = 3`) and sell on day 3 (`price = 4`), profit = `4 - 3 = 1`. - Then buy on day 3 (`price = 4`) and sell on day 4 (`price = 5`), profit = `5 - 4 = 1`. Total profit is `1 + 1 + 1 + 1 = 4`. # Input/Output - `[input]` integer array `prices` An array of integers representing the stock prices. - `[output]` an integer The maximum profit achievable.","solution":"def max_profit(prices): Function to compute the maximum profit by buying and selling stocks as many times as needed. :param prices: List of stock prices :return: The maximum profit achievable if not prices: return 0 total_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: total_profit += prices[i] - prices[i - 1] return total_profit"},{"question":"-----Input----- The input consists of two integers A and B where 1 ≤ A, B ≤ 10^9. -----Output----- Output the largest integer Y such that Y*Y ≤ A*B. -----Examples----- Input 10 5 Output 7 Input 100 20 Output 44 Input 15 15 Output 15 Input 50 50 Output 50 Input 1 1 Output 1","solution":"def find_largest_y(A, B): Finds the largest integer Y such that Y * Y <= A * B. low, high = 1, A * B result = 0 product = A * B while low <= high: mid = (low + high) // 2 if mid * mid <= product: result = mid low = mid + 1 else: high = mid - 1 return result"},{"question":"In a magical forest, there exists a special kind of tree known as the \'Tree of Fibonacci\'. These trees are arranged in a single line, and each tree\'s fruit counts are based on the Fibonacci sequence. You, as an explorer, have been tasked to determine the minimum fruit you can collect by choosing subsets of contiguous trees that follow the constraints. You are required to find the minimum number of trees needed to be picked in a contiguous manner such that the sum of their fruits is at least a given number S. -----Input----- - A line containing a single positive integer T (1 le T le 100), the number of test cases. - For each test case: - A line containing one positive integer, N (1 le N le 10^4), the number of trees. - A line with N space-separated integers {a_i} (0 le {a_i} le 10^5), where each {a_i} is the number of fruits on the i-th tree. - A line with a single positive integer S (1 le S le 10^9), the required sum of fruits. -----Output----- For each test case, write one integer: the minimum number of trees that need to be picked to have a sum of fruits geq S. If it is not possible to obtain such a sum, print -1 instead. -----Examples----- Sample Input: 2 5 1 2 3 4 5 11 5 1 2 3 4 5 15 Sample Output: 3 5 Explanation: In the first test case, the minimum contiguous subset of trees that sums to at least 11 is [3, 4, 5], which requires 3 trees. In the second test case, the only subset that sums to at least 15 is the entire list [1, 2, 3, 4, 5], requiring all 5 trees.","solution":"def min_trees_for_fruit(t: int, test_cases: list): results = [] for i in range(t): N = test_cases[i][0] a = test_cases[i][1] S = test_cases[i][2] min_length = N + 1 current_sum = 0 start = 0 for end in range(N): current_sum += a[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= a[start] start += 1 if min_length == N + 1: results.append(-1) else: results.append(min_length) return results"},{"question":"In a far future, the kingdom of Linwood is ruled by King Eldric, who oversees a richly diverse territory. The kingdom is composed of multiple provinces, each connected by a series of complex roadways. Recently, the kingdom has been suffering from unprecedented weather conditions, severely damaging the roadway network. Many of the roads have been left in disrepair, making the travel between provinces more challenging. To ensure that the kingdom remains connected despite the damaged roadways, King Eldric has ordered a revamp of the kingdom\'s road infrastructure by building the minimal number of new roads necessary. The primary goal is to establish a way for any province to reach any other province either directly or indirectly by traveling through a series of connected provinces. Your task is to write a program to help the kingdom determine the minimum number of new roads that need to be constructed to keep the provinces connected. Input The input contains multiple test cases. Each test case is described in the following format: N M A1 B1 A2 B2 ... AM BM The first line of each test case contains two integers, N (1 ≤ N ≤ 1000), indicating the number of provinces, and M (0 ≤ M ≤ N*(N-1)/2), indicating the number of existing roads. Each of the following M lines contains two integers Ai and Bi (1 ≤ Ai, Bi ≤ N, Ai ≠ Bi), indicating a bidirectional road between province Ai and province Bi. The last test case is followed by a line containing two zeros. This line is not part of any test case and should not be processed. Output For each test case, output a single integer representing the minimum number of new roads required to connect all the provinces in the kingdom. Example Input 5 3 1 2 2 3 4 5 4 1 1 2 2 3 3 4 4 0 Output 1 0 3","solution":"def find_connected_components(N, roads): from collections import defaultdict, deque def bfs(start, visited, graph): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for A, B in roads: graph[A].append(B) graph[B].append(A) visited = [False] * (N + 1) connected_components = 0 for province in range(1, N+1): if not visited[province]: bfs(province, visited, graph) connected_components += 1 return connected_components def minimum_new_roads_to_connect_provinces(test_cases): results = [] for N, M, roads in test_cases: num_cc = find_connected_components(N, roads) results.append(num_cc - 1) return results # Example input parsing and function call def main(): import sys input = sys.stdin.read data = input().splitlines() test_cases = [] index = 0 while index < len(data): N, M = map(int, data[index].split()) if N == 0 and M == 0: break roads = [] for _ in range(M): index += 1 A, B = map(int, data[index].split()) roads.append((A, B)) test_cases.append((N, M, roads)) index += 1 results = minimum_new_roads_to_connect_provinces(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an integer array nums and an integer x. Your goal is to determine the smallest subarray length such that the sum of its elements is greater than or equal to x. If no such subarray exists, return -1. -----Input----- The first line contains a single integer q (1 le q le 10^5) — the number of test cases. The first line of each test case contains two integers n (1 le n le 10^5) — the length of the array nums and x (1 le x le 10^9) — the target sum. The second line of each test case contains n integers representing the array nums where each integer is between 1 and 1000 inclusive. It is guaranteed that the total number of integers in the arrays over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the length of the smallest subarray with a sum greater than or equal to x. If no such subarray exists, print -1. -----Examples----- Input 3 6 7 2 1 5 2 3 2 5 11 1 2 3 4 5 3 100 1 1 1 Output 2 3 -1 -----Note----- In the first test case, the subarray [5, 2] meets the requirement with length 2. In the second test case, the subarray [3, 4, 5] meets the requirement with length 3. In the third test case, no subarray meets the requirement.","solution":"def min_subarray_length(nums, x): Returns the length of the smallest subarray with a sum greater than or equal to x. If no such subarray exists, return -1. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= x: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else -1 def solve(q, queries): results = [] for query in queries: n, x, nums = query result = min_subarray_length(nums, x) results.append(result) return results"},{"question":"In a given string, find the first non-repeating character and return it. If it does not exist, return an empty character. Your function should take a single argument, a string \'s\'. You need to return the first character that does not repeat in \'s\'. Write an efficient function that processes the string with minimal time complexity. **Examples:** ```python Input: \\"swiss\\" Output: \\"w\\" Input: \\"relevel\\" Output: \\"r\\" Input: \\"aabbcc\\" Output: \\"\\" ``` **Constraints:** - You may assume the string contains only lowercase English letters. - The length of the string will not exceed 10,000 characters.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string s. If it does not exist, return an empty character. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'\'"},{"question":"Karen loves long hikes in the mountains, but she notices that the terrain forms a pattern in heights. She wonders how many \\"mountain valleys\\" she can find. A \\"mountain valley\\" is defined as a sequence where the height first strictly decreases and then strictly increases. More formally, for an array a of length n, a subarray a[l, ldots, r] (where 1 le l < r le n) is a mountain valley if there exists an index m such that, a[l] > a[l+1] > ldots > a[m] < a[m+1] < ldots < a[r]. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 1000) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the heights of the terrain. -----Output----- For each test case, print one integer — the number of mountain valleys in the given array. -----Examples----- Input 3 5 10 8 7 12 15 4 1 2 3 4 6 9 6 3 6 7 8 Output 1 0 1 -----Note----- In the first test case, the only mountain valley is [10, 8, 7, 12, 15]. In the second test case, there are no mountain valleys because the height is always increasing. In the third test case, the mountain valley is [9, 6, 3, 6].","solution":"def count_mountain_valleys(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] valleys = 0 for j in range(1, n-1): if a[j-1] > a[j] < a[j+1]: left = j-1 right = j+1 while left > 0 and a[left-1] > a[left]: left -= 1 while right < n-1 and a[right+1] > a[right]: right += 1 if left < j and right > j: valleys += 1 results.append(valleys) return results # Reading input and preparing the test cases if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) a = list(map(int, data[index+1:index+1+n])) test_cases.append((n, a)) index += (n + 1) results = count_mountain_valleys(t, test_cases) for result in results: print(result)"},{"question":"You are given an array of N integers. Your task is to determine the maximum sum of a subarray such that the sum of the subarray\'s indices is even. A subarray is defined as a contiguous section of an array. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line of each test case contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer — the maximum sum of a subarray such that the sum of the subarray\'s indices is even. If no such subarray exists, print -1. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^9 le A_i le 10^9 for each valid i -----Example Input----- 2 5 3 -2 5 -1 2 4 -1 4 -3 5 -----Example Output----- 7 6 -----Explanation----- Example case 1: The maximum sum subarray starting from index 0 and ending at index 4 has the sum 3 + (-2) + 5 + (-1) + 2 = 7 and the sum of indices 0 + 1 + 2 + 3 + 4 = 10 is even. Example case 2: The maximum sum subarray starting from index 1 to 3 has the sum 4 + (-3) + 5 = 6 and the sum of indices 1 + 2 + 3 = 6 is even.","solution":"def max_sum_subarray_even_index_sum(arr): n = len(arr) max_sum = float(\'-inf\') current_sum = float(\'-inf\') for i in range(n): for j in range(i, n): subarray_sum = sum(arr[i:j+1]) if (i + j) % 2 == 0 and subarray_sum > current_sum: current_sum = subarray_sum return current_sum if current_sum > float(\'-inf\') else -1 def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_sum_subarray_even_index_sum(arr)) return results"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to find a pair of distinct indices `i` and `j` in the array such that `nums[i] + nums[j] = target`. If such a pair exists, return the indices as a list [i, j]. If no such pair exists, return an empty list. -----Constraints----- - 2 <= nums.length <= 100,000 - -1,000,000 <= nums[i] <= 1,000,000 - -2,000,000 <= target <= 2,000,000 -----Input----- The input is given from Standard Input in the following format: ``` n nums target ``` Where `n` is the number of elements in the list `nums`, and `target` is the target sum. -----Output----- Print the indices of the two numbers such that they add up to `target`. Output the indices in a list as [i, j]. You may return the indices in any order. If no such pair exists, print an empty list. -----Sample Input----- ``` 4 2 7 11 15 9 ``` -----Sample Output----- ``` [0, 1] ``` Explanation: The sum of nums[0] (which is 2) and nums[1] (which is 7) is 9. So, the output is [0, 1].","solution":"def two_sum(nums, target): Finds two distinct indices in the array nums such that the numbers sum up to the target. Args: nums: List of integers. target: Integer target sum. Returns: A list of two integers representing the indices if such a pair exists, otherwise an empty list. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return [seen[complement], i] seen[num] = i return []"},{"question":"You are given a series of n rectangles, defined by their widths and heights. Your task is to determine the total area of the largest possible rectangle that can be formed by combining some (or all) of the given n rectangles. Each rectangle can only be used once. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of rectangles. The next n lines each contain two integers w_i and h_i (1 ≤ w_i, h_i ≤ 1,000) — the width and height of the i-th rectangle. Output Print a single integer — the total area of the largest possible rectangle that can be formed. Examples Input 4 1 2 2 3 3 4 4 5 Output 20 Input 3 5 5 10 10 15 15 Output 225 Note In the first example, one possible largest rectangle can be formed by combining the first four rectangles, each rotated if necessary: * 1 x 2 * 2 x 3 => This can be rotated to 3 x 2 * 3 x 4 * 4 x 5 When combined, their total width becomes 1 + 2 (rotated to be vertical) + 3 + 4 = 10 and height = 5. Thus, 10*2 = 20. In the second example, each rectangle is best combined alone since combining them further wouldn\'t maximize the area in this particular case.","solution":"def largest_possible_rectangle_area(n, rectangles): max_area = 0 for width, height in rectangles: max_area = max(max_area, width * height) return max_area # Example usage: # n = 4 # rectangles = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(largest_possible_rectangle_area(n, rectangles)) # Output: 20"},{"question":"Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle. A triplet (nums[i], nums[j], nums[k]) can form a triangle if and only if: 0 <= i < j < k < nums.length and nums[i] + nums[j] > nums[k], nums[i] + nums[k] > nums[j], and nums[j] + nums[k] > nums[i]. Example 1: Input: nums = [2,2,3,4] Output: 3 Explanation: Valid combinations are: (2, 2, 3) (2, 3, 4) (2, 2, 4) Example 2: Input: nums = [4,2,3,4] Output: 4 Explanation: Valid combinations are: (2, 3, 4) (4, 3, 4) (4, 4, 3) (2, 4, 3) Notes: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000","solution":"def triangleNumber(nums): Returns the number of triplets chosen from the array that can make triangles if taken as side lengths of a triangle. nums.sort() count = 0 for i in range(len(nums)-2): k = i + 2 for j in range(i + 1, len(nums)): while k < len(nums) and nums[i] + nums[j] > nums[k]: k += 1 count += k - j - 1 return count"},{"question":"The city council is planning to build a new transportation system that will connect various districts in the city. The city consists of n districts connected by bidirectional roads. The council wants to ensure that the transportation system is efficient in terms of travel time, so they plan to build a new fast-track system that can directly connect any two districts. Your task is to calculate the minimum number of fast-track connections required to ensure that every district can be reached from any other district using either the existing roads or the new fast-tracks. For example, given a city with 5 districts and the existing roads as follows: 1 - 2 2 - 3 3 - 4 4 - 5 All districts are connected in a linear fashion, so adding one fast-track connection between districts 1 and 5 will make the system fully connected with minimal additions. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of districts. The second line contains an integer m (0 ≤ m ≤ 100,000), the number of existing roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a road connecting districts u and v. Output Output a single integer: the minimum number of fast-track connections required. Example Input 5 4 1 2 2 3 3 4 4 5 Output 1","solution":"def min_fast_track_connections(n, m, roads): from collections import defaultdict, deque # Create an adjacency list to represent the graph graph = defaultdict(list) for road in roads: u, v = road graph[u].append(v) graph[v].append(u) # A function to perform BFS and mark all reachable nodes from a starting node def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) connected_components = 0 # Perform BFS for each node, count the number of connected components for i in range(1, n + 1): if not visited[i]: bfs(i, visited) connected_components += 1 # Minimum fast tracks required is (connected components - 1) return connected_components - 1"},{"question":"Given an input string representing an arithmetic expression containing non-negative integers, addition, and multiplication operations, evaluate the result of the expression. The integer values and the arithmetic operations are separated by spaces. The input string will be a valid expression without any spaces at the start or end and without any parentheses. Example 1: Input: \\"3 + 5 * 2\\" Output: 13 Explanation: The expression is evaluated as 3 + (5 * 2). Example 2: Input: \\"10 + 2 * 3 + 5\\" Output: 21 Explanation: The expression is evaluated as 10 + (2 * 3) + 5. Note: The input string will be of length between 1 and 100. The integer values will be in the range [0, 999]. There will be no division or subtraction operations in the input. The output should be an integer.","solution":"def evaluate_expression(expression: str) -> int: Evaluates the arithmetic expression consisting of non-negative integers, addition, and multiplication operations. tokens = expression.split() stack = [] i = 0 while i < len(tokens): if tokens[i] == \'*\': last = stack.pop() next_val = int(tokens[i + 1]) stack.append(last * next_val) i += 2 else: stack.append(int(tokens[i]) if tokens[i].isdigit() else tokens[i]) i += 1 result = stack[0] for i in range(1, len(stack)): if stack[i] == \'+\': result += stack[i + 1] return result"},{"question":"In the land of Cryptonia, the cryptographers have invented a special sequence of numbers known as \\"Crypto Numbers.\\" Each Crypto Number is defined recursively using the following rules: - The first Crypto Number is 1. - The second Crypto Number is 1. - For n > 2, the nth Crypto Number is the sum of all previous Crypto Numbers that are less than or equal to n. Given an integer n, determine the nth Crypto Number. ------ Input Format ------ The input will be a single integer n which represents the position in the Crypto Number sequence. ------ Output Format ------ Output a single integer which is the nth Crypto Number. ------ Constraints ------ 1 ≤ n ≤ 10^6 ----- Sample Input 1 ------ 4 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The sequence of Crypto Numbers starts as follows: 1, 1, 2, 4... The 4th Crypto Number is the sum of the first three: 1 + 1 + 2 = 4.","solution":"def crypto_number(n): Returns the nth Crypto Number. Parameters: n (int): The position in the Crypto Number sequence. Returns: int: The nth Crypto Number. if n == 1 or n == 2: return 1 # Base case - first two numbers are both 1 crypto_numbers = [1, 1] # Calculate recursively for n > 2 for i in range(2, n): next_crypto_num = sum(crypto_numbers) crypto_numbers.append(next_crypto_num) return crypto_numbers[-1]"},{"question":"Statement: A well-known public library has decided to digitize its catalog of books. They have hired you to write a program that can help users search for books based on specific criteria. You will be provided with a list of books, where each book has a title, an author, and a publication year. Users can search for books by specifying an author and a range of publication years. Your task is to write a program that takes an author name and a range of publication years, and returns a list of books by that author published within the specified year range, sorted by publication year in ascending order. If no books match the criteria, your program should return the message \\"No books found\\". Input: The first line of input contains two integers: N (the number of books) and Q (the number of queries). Each of the next N lines contains a string (the title), another string (the author), and an integer (the publication year) of a book. Each of the following Q lines contains a string (the author) and two integers (start year and end year), representing a search query. Output: For each query, print the books that match the author and the specified year range, one per line, in the format \\"{title}, {year}\\". Books should be sorted by publication year in ascending order. If no books match the criteria, print \\"No books found\\". Constraints: 1 ≤ N, Q ≤ 100 1 ≤ publication year ≤ 2023 1 ≤ length of title, author ≤ 100 SAMPLE INPUT: 4 2 The Great Gatsby F. Scott Fitzgerald 1925 Tender Is the Night F. Scott Fitzgerald 1934 1984 George Orwell 1949 Animal Farm George Orwell 1945 George Orwell 1940 1950 F. Scott Fitzgerald 1920 1930 SAMPLE OUTPUT: Animal Farm, 1945 1984, 1949 The Great Gatsby, 1925 Explanation: For the first query, the books \\"Animal Farm\\" and \\"1984\\" match the author \\"George Orwell\\" and the year range 1940 to 1950. For the second query, the book \\"The Great Gatsby\\" matches the author \\"F. Scott Fitzgerald\\" and the year range 1920 to 1930.","solution":"def search_books(books, queries): This function searches for books by specified author and year range. Args: books: list of tuples, where each tuple contains (title, author, year) queries: list of tuples, where each tuple contains (author, start_year, end_year) Returns: list of list of strings, where each list contains the books for each query. results = [] for author, start_year, end_year in queries: filtered_books = [ (title, year) for title, book_author, year in books if book_author == author and start_year <= year <= end_year ] filtered_books.sort(key=lambda x: x[1]) if filtered_books: results.append([f\\"{title}, {year}\\" for title, year in filtered_books]) else: results.append([\\"No books found\\"]) return results"},{"question":"Alice is a software developer working on a project that involves parsing and analyzing log files. Each log file consists of a chronological list of events, and Alice needs to determine the peak period of activity. To help with the analysis, you decide to write a program that finds the period with the highest number of events. You are given a series of events, each with a start and end timestamp. Each event spans a continuous period of time. Your task is to calculate the maximum number of overlapping events at any point in time. -----Input----- The input contains a single test case. The first line contains an integer N (1 le N le 1000) representing the number of events. Each of the following N lines represents a single event and contains two integers S and E (0 le S < E le 1000000) which are the start and end timestamps of the event. -----Output----- Print the maximum number of overlapping events. -----Examples----- Sample Input: 3 1 4 2 5 3 6 Sample Output: 3","solution":"def max_overlapping_events(events): Returns the maximum number of overlapping events. Args: events (list): A list of tuples containing start and end times of events. Returns: int: Maximum number of overlapping events at any point in time. # Create a sorted list of all start and end times with their type timeline = [] for start, end in events: timeline.append((start, \'start\')) timeline.append((end, \'end\')) # Sort the timeline; if times are the same, prioritize \'end\' over \'start\' timeline.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 # Sweep through the timeline for time, event_type in timeline: if event_type == \'start\': current_overlap += 1 if current_overlap > max_overlap: max_overlap = current_overlap else: current_overlap -= 1 return max_overlap def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) events = [(int(data[2 * i + 1]), int(data[2 * i + 2])) for i in range(N)] print(max_overlapping_events(events))"},{"question":"Sarah loves reading books. She\'s a member of a book club that has a unique way of organizing their reading list. Each member of the club contributes by recommending one book, and then the reading list is created by concatenating all recommended titles together. However, over time, Sarah noticed that the reading list often contained duplicated titles. Sarah decided that she wants to create a new reading list that contains each book title exactly once, but in the same order they first appeared in the original reading list. More specifically, given a list of book titles, she needs to remove the duplicates while keeping the order of the first occurrence of each title. Your task is to write a program that takes the original reading list and outputs the new reading list with duplicates removed but maintaining the original order. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of book titles in the original reading list. The following n lines each contain a book title — a non-empty string consisting of printable ASCII characters. -----Output----- Output the new reading list where each book title appears exactly once and in the order of their first occurrence. -----Examples----- Input 7 HarryPotter LordOfTheRings HarryPotter TheHobbit LordOfTheRings ToKillAMockingbird 1984 Output HarryPotter LordOfTheRings TheHobbit ToKillAMockingbird 1984 Input 5 WarAndPeace AnnaKarenina WarAndPeace CrimeAndPunishment TheBrothersKaramazov Output WarAndPeace AnnaKarenina CrimeAndPunishment TheBrothersKaramazov","solution":"def create_unique_reading_list(titles): Returns a list of titles with duplicates removed but maintaining their first occurrence order. seen = set() unique_titles = [] for title in titles: if title not in seen: seen.add(title) unique_titles.append(title) return unique_titles"},{"question":"You are managing an art exhibition that spans across multiple galleries. There are 3 galleries, each with 5 rooms, and each room can hold a maximum of 20 artworks. Write a program to manage the exhibition, tracking the number of artworks in each room based on addition and removal notices given. For each notice, you are given three integers g, r, and v which represent that v artworks were added to room r of gallery g. If v is negative, it means that −v artworks were removed from the room. Assume that initially, no artworks are present in the galleries. Constraints * No incorrect gallery or room numbers are given. * 0 ≤ the number of artworks in any room during the management ≤ 20 Input In the first line, the number of notices n is given. In the following n lines, a set of three integers g, r, and v which represents the ith notice is given in a line. Output Print the information for each gallery, showing the count of artworks in each room from room 1 to room 5. Print a single space character before the number of artworks. Print \\"--------------------\\" (20 \'-\') between galleries. Example Input 4 1 2 5 2 1 10 3 3 -2 2 1 8 Output 0 5 0 0 0 10 0 0 0 0 0 0 0 0 0 -------------------- 0 0 6 0 0 Note: The example demonstrates how the artworks are adjusted in respective rooms within the galleries, based on the notices received.","solution":"def manage_exhibition(n, notices): Manages artworks in multiple galleries based on addition and removal notices. :param n: int - number of notices :param notices: list of tuples - each tuple contains three integers g, r, and v :return: list - the state of the galleries after processing all notices # Initialize the galleries - 3 galleries, each with 5 rooms galleries = [[0 for _ in range(5)] for _ in range(3)] # Process each notice for notice in notices: g, r, v = notice galleries[g-1][r-1] = max(0, min(20, galleries[g-1][r-1] + v)) return galleries def print_galleries(galleries): Prints the state of galleries. :param galleries: list - the state of the galleries for idx, gallery in enumerate(galleries): for room in gallery: print(f\\"{room} \\", end=\'\') print() if idx < len(galleries) - 1: print(\\"--------------------\\") # Example usage if __name__ == \\"__main__\\": n = 4 notices = [(1, 2, 5), (2, 1, 10), (3, 3, -2), (2, 1, 8)] galleries = manage_exhibition(n, notices) print_galleries(galleries)"},{"question":"In a mysterious game world, there are dungeons interconnected by tunnels. Each dungeon has a certain level of difficulty. A hero is going on an adventure and wants to travel from the easiest dungeon to the hardest one in a way that he can gain as much experience as possible by visiting each dungeon exactly once. The map of the dungeons and tunnels is represented as an undirected connected graph. The hero can only move from one dungeon to another if there is a tunnel connecting them, regardless of the difficulty levels. Given the number of dungeons and a list of tunnels (each connecting two dungeons), can you determine if it\'s possible for the hero to visit all dungeons exactly once, starting from the one with the lowest difficulty and ending at the one with the highest difficulty? If possible, find such a path. Input The first line of the input contains two integers n and m (2 ≤ n ≤ 1000, n - 1 ≤ m ≤ n * (n - 1) / 2) — the number of dungeons and the number of tunnels, respectively. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) — the difficulty levels of the dungeons. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — denoting that there is a tunnel between dungeon u and dungeon v. Output Print \\"Impossible\\" if the hero cannot visit each dungeon exactly once starting from the dungeon with the lowest difficulty to the dungeon with the highest difficulty. Otherwise, print one line with n distinct integers — the order of the dungeons that forms such a path. Examples Input 4 4 1 2 3 4 1 2 2 3 3 4 4 1 Output 1 2 3 4 Input 3 2 5 1 3 1 2 2 3 Output Impossible Note In the first example, the hero can travel through the dungeons in increasing order of difficulty levels, starting from difficulty 1 and ending at difficulty 4. In the second example, there is no way to travel through all dungeons exactly once starting from the one with the lowest difficulty and ending at the one with the highest difficulty.","solution":"def find_path(n, m, difficulties, tunnels): from collections import defaultdict, deque graph = defaultdict(list) for u, v in tunnels: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) # Sort dungeons by difficulty sorted_dungeons = sorted(range(n), key=lambda x: difficulties[x]) # Helper function to check if Hamiltonian path exists def backtrack(path): if len(path) == n: return True last_node = path[-1] for neighbor in graph[last_node]: if neighbor in path: continue if backtrack(path + [neighbor]): return True return False start = sorted_dungeons[0] end = sorted_dungeons[-1] visited_paths = set() def is_hamiltonian_path(node, path): if len(path) == n: return path[-1] == end for neighbor in graph[node]: if neighbor not in path: path.append(neighbor) if tuple(path) not in visited_paths: visited_paths.add(tuple(path)) if is_hamiltonian_path(neighbor, path): return path path.pop() return False path = is_hamiltonian_path(start, [start]) if path: return [x + 1 for x in path] return \\"Impossible\\" # Example Usage n = 4 m = 4 difficulties = [1, 2, 3, 4] tunnels = [(1, 2), (2, 3), (3, 4), (4, 1)] print(find_path(n, m, difficulties, tunnels)) # Output: [1, 2, 3, 4] n = 3 m = 2 difficulties = [5, 1, 3] tunnels = [(1, 2), (2, 3)] print(find_path(n, m, difficulties, tunnels)) # Output: \\"Impossible\\""},{"question":"You are given an array of integers and a target integer value `X`. Your task is to find two distinct integers in the array that add up to `X`. If no such pair exists, return `-1 -1`. You should return the indices (0-based) of the two integers in non-decreasing order. Constraints: - The array contains at least 2 and at most 1000 integers. - Each integer in the array is between 1 and 10^6. - The target integer `X` is between 1 and 2 * 10^6. Input: Input is given from standard input in the following format: ``` N X a_1 a_2 a_3 ... a_N ``` Where `N` is the number of integers in the array, `X` is the target integer, and `a_i` are the integers in the array. Output: Print the indices of the two integers that sum up to `X` in non-decreasing order. If no such integers exist, print `-1 -1`. Examples: Input: ``` 4 7 1 2 3 4 ``` Output: ``` 2 3 ``` Input: ``` 5 10 4 3 5 7 1 ``` Output: ``` 1 3 ``` Input: ``` 3 15 5 5 5 ``` Output: ``` -1 -1 ```","solution":"def find_pair_with_sum(N, X, arr): Returns the indices of two integers in the array that sum up to X in non-decreasing order. If no such pair exists, returns [-1, -1]. value_to_index = {} for i, number in enumerate(arr): complement = X - number if complement in value_to_index: return sorted([value_to_index[complement], i]) value_to_index[number] = i return [-1, -1] def process_input(input_str): Processes input from a string format and returns the result by invoking find_pair_with_sum. input_lines = input_str.strip().split(\\"n\\") N, X = map(int, input_lines[0].split()) arr = list(map(int, input_lines[1].split())) return find_pair_with_sum(N, X, arr)"},{"question":"A robot is placed on an MxN grid. The robot can only move right or down. The robot needs to move from the top-left corner to the bottom-right corner of the grid. However, there are obstacles on some cells of the grid which the robot cannot pass through. The task is to determine the number of unique paths that the robot can take to move from the starting cell to the target cell. -----Input:----- - First line contains T, the number of test cases. For each test case: - The first line contains two space-separated integers M and N, representing the number of rows and columns of the grid. - The next M lines contain N characters each, where a \'.\' represents an empty cell and a \'#\' represents an obstacle. -----Output:----- For each test case, output the number of unique paths that the robot can take modulo 10^9 + 7. If it is not possible to reach the target, output 0. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M, N ≤ 1000 - The top-left corner (0,0) and the bottom-right corner (M-1,N-1) are always empty cells (i.e., they will never contain \'#\'). -----Sample Input:----- 2 3 3 . . . . # . . . . 2 2 . # . . -----Sample Output:----- 2 1 -----Explanation:----- For 1) The grid is: . . . . # . . . . There are 2 unique paths from the top-left to the bottom-right: 1) Right -> Right -> Down -> Down 2) Down -> Down -> Right -> Right For 2) The grid is: . # . . There is only 1 unique path: 1) Down -> Right","solution":"def unique_paths_with_obstacles(test_cases): MOD = 10**9 + 7 results = [] for M, N, grid in test_cases: # Create DP table dp = [[0] * N for _ in range(M)] # If the starting cell has an obstacle, return 0 paths if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': results.append(0) continue # Initial value to start the path dp[0][0] = 1 # Fill the DP table for r in range(M): for c in range(N): if grid[r][c] == \'#\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] dp[r][c] %= MOD results.append(dp[M-1][N-1]) return results"},{"question":"You are given an array of integers and a series of update and sum queries. Your task is to implement a data structure that efficiently supports both types of queries. There are two types of queries: 1. Sum Query: Given two indices `l` and `r`, calculate the sum of elements in the subarray from index `l` to index `r` (inclusive). 2. Update Query: Given an index `i` and a value `x`, update the element at index `i` to `x`. Input: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) — the number of elements in the array and the number of queries, respectively. - The second line contains `n` space-separated integers a1, a2, ..., an (|ai| ≤ 1000) — the initial elements of the array. - The next `q` lines each contain a query of one of the following formats: - `1 l r` (1 ≤ l ≤ r ≤ n) for a sum query. - `2 i x` (1 ≤ i ≤ n, |x| ≤ 1000) for an update query. Output: For each sum query, output the sum of the elements in the specified subarray. There is no output for update queries. Example: Input: ``` 5 5 1 2 3 4 5 1 2 4 2 3 10 1 1 5 2 5 6 1 4 5 ``` Output: ``` 9 22 10 ``` Explanation: 1. Sum query from index 2 to 4: 2 + 3 + 4 = 9 2. Update index 3 to 10: array becomes [1, 2, 10, 4, 5] 3. Sum query from index 1 to 5: 1 + 2 + 10 + 4 + 5 = 22 4. Update index 5 to 6: array becomes [1, 2, 10, 4, 6] 5. Sum query from index 4 to 5: 4 + 6 = 10","solution":"class ArrayQuery: def __init__(self, array): self.array = array def sum_query(self, l, r): Calculates the sum of elements in the subarray from index l to index r (inclusive). Indices l and r are 1-based. return sum(self.array[l-1:r]) def update_query(self, i, x): Updates the element at index i to x. Index i is 1-based. self.array[i-1] = x"},{"question":"In a city, there are N buildings standing in a row, numbered from 1 to N, with different heights. Every day, the city\'s skylines are photographed from the left side (starting from the first building). A building is said to be \\"visible\\" in the photograph if every building before it (to the left) is shorter. Given the heights of the buildings, your task is to find the number of buildings that will be visible in the photograph on a given day. Input The first line contains a single integer N (1 ≤ N ≤ 10^6) — the number of buildings. The second line contains N space-separated integers h1, h2, ..., hN (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output Print a single integer — the number of buildings visible in the photograph. Examples Input 5 3 7 8 3 6 Output 3 Input 4 1 2 3 4 Output 4 Note In the first sample, the visible buildings are the ones with heights 3, 7, and 8. The height 7 is visible because it is taller than 3, the height 8 is visible because it\'s taller than 7, and the last two buildings (3 and 6) are not visible because they are shorter than 8. In the second sample, each building is taller than the previous one, so all buildings are visible.","solution":"def count_visible_buildings(N, heights): Returns the number of buildings visible in the photograph. Args: N (int): Number of buildings. heights (list of int): Heights of the buildings. Returns: int: Number of visible buildings. if N == 0: return 0 visible_count = 0 max_height = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count # To use the function # Input # N = 5 # heights = [3, 7, 8, 3, 6] # Output # print(count_visible_buildings(N, heights)) # Output should be 3"},{"question":"David and Emma are playing a game with numbers. Given a list of positive integers, they take turns removing any number from the list. The player who cannot make a move (because the list is empty) loses the game. Both players play optimally. David always goes first, and the players agree to play the game multiple times. After each game, the winner of the current game will go first in the next game. They want to play the game exactly `m` times and determine the overall winner based on the winner of the `m`-th game. Help David and Emma figure out who will win the final `m`-th game if both play optimally. # Input The first line contains two integers, `m` and `n` (1 ≤ m ≤ 10^9; 1 ≤ n ≤ 10^5), representing the number of games to be played and the number of integers in the list, respectively. The second line contains `n` positive integers (each ≤ 10^9) representing the list of integers. # Output If David wins the `m`-th game, print \\"David\\". Otherwise, print \\"Emma\\". # Examples Input ``` 5 3 1 2 3 ``` Output ``` David ``` Input ``` 2 4 4 5 6 7 ``` Output ``` Emma ``` Input ``` 1 1 8 ``` Output ``` David ```","solution":"def determine_winner(m, n, lst): Determines the winner of the m-th game. :param m: int - the number of games to be played :param n: int - the number of integers in the list :param lst: list of int - the list of integers :return: str - the winner of the m-th game (\\"David\\" or \\"Emma\\") if m % 2 == 1: return \\"David\\" else: return \\"Emma\\""},{"question":"Given an array of integers `arr`, where each element represents the height of a vertical line on the x-axis. Each vertical line creates a rectangle with the x-axis. Find the maximum area of water that can be trapped between two lines in the array. The area trapped between two lines `i` and `j` (i < j) is identical to the minimum of the heights of these two lines multiplied by the distance between them (j - i). Write a function that takes an array of integers `arr` and returns the maximum trapped water area. Function Signature: `def max_trapped_water(arr: List[int]) -> int:` -----Input----- - An array of integers `arr` that represents the heights of the lines on the x-axis. (1 ≤ len(arr) ≤ 100000, 0 ≤ arr[i] ≤ 1000000) -----Output----- - An integer representing the maximum trapped water area. -----Examples----- Input [1, 8, 6, 2, 5, 4, 8, 3, 7] Output 49 Input [4, 3, 2, 1, 4] Output 16 -----Note----- In the first example, the maximum water trapped is between the lines at indices [1] and [8] with heights 8 and 7, respectively. The distance between them is 8 - 1 = 7, so area = 7 * min(8, 7) = 49. In the second example, the maximum water trapped is between the lines at indices [0] and [4] with heights 4 and 4, respectively. The distance between them is 4 - 0 = 4, so area = 4 * min(4, 4) = 16.","solution":"from typing import List def max_trapped_water(arr: List[int]) -> int: Returns the maximum area of water that can be trapped between two lines. left = 0 right = len(arr) - 1 max_area = 0 while left < right: height = min(arr[left], arr[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) if arr[left] <= arr[right]: left += 1 else: right -= 1 return max_area"},{"question":"Paul is building a flexible word searching tool to help him solve complex puzzles. Specifically, he wants to determine if a specific word pattern appears in a given text, but the twist is that the pattern can include wildcard characters that represent any letter. Write a program to help Paul with this. Given a text and a pattern where the pattern may contain wildcard characters represented by \'?\', determine if the pattern is a subsequence of the text. A \'?\' can be replaced by any single character in the text. A subsequence is a sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. -----Input----- The first line contains a string text (1 ≤ length of text ≤ 1000), consisting of lowercase English letters. The second line contains a string pattern (1 ≤ length of pattern ≤ 100), consisting of lowercase English letters and the wildcard character \'?\'. -----Output----- In a single line print \\"Yes\\" (without the quotes), if the pattern is a subsequence of the text, and \\"No\\" (without the quotes) otherwise. -----Examples----- Input programming p?o?? Output Yes Input hello h?llo? Output No Input contest c?n?e?t Output Yes -----Note----- In the first sample, the pattern \\"p?o??\\" can match \\"pro__\\", \\"progr\\", and so on, making it a subsequence of \\"programming\\". In the second sample, \\"h?llo?\\" cannot be matched as there\'s no additional character after the fifth position in the text \\"hello\\". In the third sample, the pattern \\"c?n?e?t\\" matches \\"co__est\\", making it a valid subsequence of \\"contest\\".","solution":"def is_subsequence_with_wildcards(text, pattern): This function returns \'Yes\' if the pattern (with possible wildcard characters \'?\') is a subsequence of the text, and \'No\' otherwise. text_len = len(text) pattern_len = len(pattern) if pattern_len > text_len: return \\"No\\" j = 0 for char in text: if j < pattern_len and (pattern[j] == \'?\' or pattern[j] == char): j += 1 if j == pattern_len: return \\"Yes\\" return \\"No\\""},{"question":"Taro and Jiro are playing a game with numbers. They have an initially empty set of numbers. The game consists of `q` queries. Each query can be one of two types: 1. Add a number `x` to the set. 2. Find the smallest number in the set that is greater than or equal to `x`. Help them to efficiently process these queries. -----Input----- The first line of the input contains a single integer `q` (1 ≤ q ≤ 100000), the number of queries. Each of the next `q` lines contains a query in one of the following formats: - \\"+ x\\" (1 ≤ x ≤ 10^9): Add the number `x` to the set. - \\"? x\\" (1 ≤ x ≤ 10^9): Find the smallest number in the set that is greater than or equal to `x`. -----Output----- For each query of the second type, print the result. If no such number exists, print -1. -----Example----- Input 5 + 3 + 10 ? 3 ? 7 ? 12 Output 3 10 -1 -----Note----- In the example, we first add 3 to the set, then 10. When asked for the smallest number in the set greater than or equal to 3, the answer is 3. When asked for the smallest number in the set greater than or equal to 7, the answer is 10. Finally, when asked for the smallest number in the set greater than or equal to 12, there is no such number, so the answer is -1.","solution":"import bisect class Game: def __init__(self): self.numbers = [] def add(self, x): bisect.insort(self.numbers, x) def find(self, x): idx = bisect.bisect_left(self.numbers, x) if idx < len(self.numbers): return self.numbers[idx] else: return -1 def process_queries(queries): game = Game() results = [] for query in queries: if query[0] == \'+\': game.add(int(query[1])) elif query[0] == \'?\': results.append(game.find(int(query[1]))) return results"},{"question":"You are responsible for organizing a coding marathon where participants have to solve a set of problems within a limited time. The organizers have decided to give each participant a unique code for unique identification, process their responses, and dynamically update the leaderboard. Initially, you need to determine if they can handle the responses efficiently. Each response contains the participant\'s code and the time taken to solve the problem in minutes. Given the number of participants and their responses, you need to aggregate the time taken for each participant and determine if any participant has solved a problem in less than a given threshold time. You are required to write a function to achieve this. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of responses. The next `n` lines each contain a string `id` and an integer `time`, representing a participant\'s code and the time taken in minutes (1 ≤ time ≤ 100). The last line contains an integer `threshold`, the time threshold to determine if any participant has solved a problem too quickly. The strings in the input are separated by single spaces. -----Output----- Print \\"YES\\" (without the quotes) if any participant\'s response time is less than the given threshold time. Otherwise, print \\"NO\\" (without the quotes). -----Examples----- Input 5 id1 50 id2 30 id1 20 id3 40 id2 35 25 Output YES Input 4 id1 30 id2 40 id3 50 id1 60 20 Output NO Input 3 id1 15 id2 25 id3 35 20 Output YES","solution":"def check_responses(n, responses, threshold): Determines if any participant\'s response time is less than the given threshold. :param n: int, number of responses :param responses: list of tuples, each containing (id, time) where id is the participant\'s code and time is the time taken in minutes :param threshold: int, the time threshold :return: str, \\"YES\\" if any participant\'s response time is less than the threshold, \\"NO\\" otherwise for _, time in responses: if time < threshold: return \\"YES\\" return \\"NO\\""},{"question":"**Problem** Alice is playing a game where she needs to create the longest possible palindrome by rearranging the characters of a given string. She can use each character of the string zero or more times. Your task is to help Alice determine the length of the longest palindrome that can be formed using the characters of the given string. **Input Format** 1. An integer N which represents the length of the string (1 ≤ N ≤ 100,000). 2. A string S of length N consisting of lowercase English letters. **Output Format** Output the length of the longest palindrome that can be constructed using the characters of the given string. **Input Example 1** ``` 7 abccccdd ``` **Output Example 1** ``` 7 ``` **Input Example 2** ``` 5 aabbc ``` **Output Example 2** ``` 5 ``` **Input Example 3** ``` 3 abc ``` **Output Example 3** ``` 1 ``` **Explanation** In the first example, the longest palindrome that you can form is \\"dccaccd\\", which has a length of 7. In the second example, the longest palindrome is \\"abcba\\", which has a length of 5. In the third example, the longest palindrome can only be one of the single characters like \\"a\\", \\"b\\", or \\"c\\", thus has a length of 1.","solution":"def longest_palindrome_length(n, s): Determines the length of the longest palindrome that can be constructed using the characters of the given string. Args: n (int): The length of the string. s (str): The input string consisting of lowercase English letters. Returns: int: The length of the longest palindrome that can be constructed. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # Add one to the length if an odd frequency character was found (to place it in the center of the palindrome) if odd_found: length += 1 return length"},{"question":"Given a string `str` and a pattern `pat`, return the length of the smallest substring in `str` that contains all the characters of `pat`. Example 1: Input: str = \\"ADOBECODEBANC\\", pat = \\"ABC\\" Output: 4 Explanation: The smallest substring is \\"BANC\\" which contains all the characters of \\"ABC\\". Example 2: Input: str = \\"this is a test string\\", pat = \\"tist\\" Output: 6 Explanation: The smallest substring is \\"t stri\\" which contains all the characters of \\"tist\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `findMinSubstrLength()` that takes a string (str) and a pattern (pat), and returns the length of the smallest substring of `str` containing all characters of `pat`. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 ≤ length of str ≤ 10^{5} - 1 ≤ length of pat ≤ 10^{3} - The string consists of only English letters. **Note:** - If no such substring exists, return -1. - The order of characters in the pattern does not need to be maintained in the substring.","solution":"def findMinSubstrLength(str, pat): from collections import Counter if not str or not pat: return -1 pat_counter = Counter(pat) str_counter = Counter() required = len(pat_counter) formed = 0 left = 0 min_length = float(\'inf\') for right, char in enumerate(str): str_counter[char] += 1 if char in pat_counter and str_counter[char] == pat_counter[char]: formed += 1 while left <= right and formed == required: current_window_length = right - left + 1 if current_window_length < min_length: min_length = current_window_length str_counter[str[left]] -= 1 if str[left] in pat_counter and str_counter[str[left]] < pat_counter[str[left]]: formed -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an array of integers, your task is to complete the function findUniqueElements() which takes the array as input and returns a list of unique elements in the order they appeared in the original array. Input: The input line contains T, denoting the number of test cases. Each test case contains two lines. The first line contains N (size of the array). The second line contains N elements of the array separated by space. Output: For each test case, print the unique elements in the order they appeared in the original array, each element separated by a space. Print a new line after each test case output. User Task: Since this is a functional problem you don\'t have to worry about input, you just have to complete the function findUniqueElements() which takes the array as input parameter and returns a list of unique elements. Constraints: 1 <= T <= 100 1 <= N <= 10^3 1 <= A[i] <= 10^3 Example: Input: 2 6 3 4 3 2 4 5 5 1 2 2 3 3 Output: 3 4 2 5 1 2 3 Explanation: Testcase 1: The unique elements present in the array in their original order are: 3, 4, 2, 5. Testcase 2: The unique elements present in the array in their original order are: 1, 2, 3.","solution":"def findUniqueElements(arr): This function takes an array as input and returns a list of unique elements in the order they appeared in the original array. seen = set() unique = [] for item in arr: if item not in seen: seen.add(item) unique.append(item) return unique"},{"question":"Write a function that takes an integer n and returns the nth Fibonacci number. The sequence of Fibonacci numbers is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two numbers. Use a bottom-up dynamic programming approach to solve this problem, ensuring that your solution runs in O(n) time and uses O(1) additional space. # Function Signature ```python def fibonacci(n: int) -> int: pass ``` # Input - An integer `n` (0 ≤ n ≤ 10^4) denoting the position in the Fibonacci sequence. # Output - An integer representing the nth Fibonacci number. # Example ```python print(fibonacci(0)) # Output: 0 print(fibonacci(1)) # Output: 1 print(fibonacci(10)) # Output: 55 print(fibonacci(20)) # Output: 6765 ``` # Notes - The function should handle the edge cases where `n` is 0 or 1. - Use a space-efficient approach by storing only the last two Fibonacci numbers at any point in time.","solution":"def fibonacci(n: int) -> int: Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Given a string s consisting of lowercase letters, you are required to find the most frequent character in the string. If there are multiple characters with the same frequency, return the lexicographically smallest one. Example: Input 1: s = \\"aabbbcc\\" Output: b Explanation: The character \'b\' appears the most frequently (3 times) compared to \'a\' and \'c\'. Input 2: s = \\"abacabad\\" Output: a Explanation: The characters \'a\' and \'b\' both appear 3 times. The lexicographically smallest character among them is \'a\'. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function mostFrequentChar() that takes a string (s) and return the most frequent character. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 10^6 All characters in the string are lowercase English letters (\'a\'-\'z\').","solution":"def mostFrequentChar(s): Returns the most frequent character in the string s. If there are multiple characters with the same frequency, the lexicographically smallest one is returned. from collections import Counter # Count the frequency of each character frequency = Counter(s) # Initialize variables to keep track of the most frequent character max_freq = -1 most_freq_char = \'\' # Iterate through the frequency dictionary to find the most frequent character for char in frequency: if frequency[char] > max_freq or (frequency[char] == max_freq and char < most_freq_char): max_freq = frequency[char] most_freq_char = char return most_freq_char"},{"question":"Jocelyn is an avid puzzle enthusiast and loves working with number puzzles. Recently, she came across a new type of puzzle that involves an integer array and a desired target sum. She wants to know if she can select a non-empty subarray from the integer array such that the sum of the subarray is exactly equal to the target sum. A subarray is a contiguous part of an array. Jocelyn could use some help to solve this problem. -----Input----- The first line contains an integer n (1 le n le 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-100 leq a_i leq 100) — the elements of the array. The third line contains an integer S (-10000 le S le 10000) — the target sum. -----Output----- Output \\"Yes\\" if there exists a non-empty subarray that sums to S. Otherwise, output \\"No\\". -----Examples----- Input 5 1 2 3 4 5 9 Output Yes Input 3 1 -1 2 1 Output Yes Input 4 1 2 3 4 15 Output No -----Note----- In the first example, one possible subarray that sums to 9 is [2, 3, 4]. In the second example, one possible subarray that sums to 1 is [1]. In the third example, no subarray sums to 15.","solution":"def subarray_sum_exists(n, array, target_sum): Checks if there\'s a non-empty subarray in \'array\' that sums to \'target_sum\'. :param n: int - Number of elements in the array :param array: list of int - The elements of the array :param target_sum: int - The desired target sum :return: str - \\"Yes\\" if such a subarray exists, otherwise \\"No\\" for start in range(n): current_sum = 0 for end in range(start, n): current_sum += array[end] if current_sum == target_sum: return \\"Yes\\" return \\"No\\" # Example usage; Uncomment to test manually # n = 5 # array = [1, 2, 3, 4, 5] # target_sum = 9 # print(subarray_sum_exists(n, array, target_sum)) # Output: Yes"},{"question":"Given an array of integers representing daily temperatures, return an array where each element represents the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, put 0 in that position. Example 1: Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: - For 73, the next warmer day is 74, which is 1 day away. - For 74, the next warmer day is 75, which is 1 day away. - For 75, the next warmer day is 76, which is 4 days away. - For 71, the next warmer day is 72, which is 2 days away. - For 69, the next warmer day is 72, which is 1 day away. - For 72, the next warmer day is 76, which is 1 day away. - For 76, there is no future day with a warmer temperature. - For 73, there is no future day with a warmer temperature. Example 2: Input: temperatures = [30, 40, 50, 60] Output: [1, 1, 1, 0] Explanation: - For 30, the next warmer day is 40, which is 1 day away. - For 40, the next warmer day is 50, which is 1 day away. - For 50, the next warmer day is 60, which is 1 day away. - For 60, there is no future day with a warmer temperature. Your Task: You don\'t need to read input or print anything. Your task is to complete the function dailyTemperatures() which takes the array temperatures and returns the array with the number of days to wait for a warmer temperature. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= temperatures.length <= 10^5 30 <= temperatures[i] <= 100","solution":"def dailyTemperatures(temperatures): Given a list of daily temperatures, returns a list of days until a warmer temperature. :param temperatures: List[int] :return: List[int] n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Write a function that takes an array of positive integers and an integer K, and determines the minimum size of a contiguous subarray of which the sum is at least K. If there is no such subarray, return 0 instead. -----Input:----- - The first line will contain the size of the array N and the integer K. - The second line will contain N positive integers separated by spaces. -----Output:----- The minimum size of a contiguous subarray whose sum is at least K. If no such subarray exists, return 0. -----Constraints----- - 1 leq N leq 10^5 - 1 leq text{array}[i] leq 10^4 - 1 leq K leq 10^9 -----Sample Input 1:----- 8 15 1 2 3 4 5 6 7 8 -----Sample Output 1:----- 2 -----Sample Input 2:----- 5 11 1 1 1 1 1 -----Sample Output 2:----- 0 -----EXPLANATION:----- In the first sample input, the minimum subarray with sum at least 15 is [7, 8], which has a length of 2. In the second sample input, it is not possible to find any contiguous subarray with a sum of at least 11. So the output is 0.","solution":"def min_subarray_len(arr, K): Determines the minimum size of a contiguous subarray of which the sum is at least K. N = len(arr) min_len = float(\'inf\') current_sum = 0 left = 0 for right in range(N): current_sum += arr[right] while current_sum >= K: min_len = min(min_len, right - left + 1) current_sum -= arr[left] left += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"Given an array of integers, write a function to find if there exists a triplet (a, b, c) in the array such that a + b + c = 0. The function should return a list of all unique triplets that give the sum of zero. Elements in each triplet should be in ascending order, and the list of triplets should be lexicographically sorted. If no such triplet exists, return an empty list. # Input - A single integer `n` (0 ≤ n ≤ 2000) — the number of elements in the array. - An array of `n` integers `arr` (-10^5 ≤ arr[i] ≤ 10^5). # Output - A list of all unique triplets in the array that give the sum of zero. Each triplet should be a list of three integers in ascending order. # Example Input 5 [-1, 0, 1, 2, -1, -4] Output [[-1, -1, 2], [-1, 0, 1]] Input 3 [0, 0, 0] Output [[0, 0, 0]] Input 4 [1, 2, 3, 4] Output [] # Note - The solution should have a time complexity better than O(n^3). - The same triplet should not appear more than once in the output. - You can assume that the output list will not exceed 1000 triplets.","solution":"def three_sum_zero(arr): Returns all unique triplets in the array that sum to zero. Each triplet is sorted in ascending order, and the list of triplets is lexicographically sorted. arr.sort() # Sort the array to handle duplicates and use two pointers technique triplets = [] n = len(arr) for i in range(n): # Avoid duplicates for the first element of the triplet if i > 0 and arr[i] == arr[i - 1]: continue target = -arr[i] left, right = i + 1, n - 1 while left < right: sum_lr = arr[left] + arr[right] if sum_lr == target: triplets.append([arr[i], arr[left], arr[right]]) left += 1 right -= 1 # Skip duplicates for the second and third elements while left < right and arr[left] == arr[left - 1]: left += 1 while left < right and arr[right] == arr[right + 1]: right -= 1 elif sum_lr < target: left += 1 else: right -= 1 return triplets"},{"question":"In ancient times, people were fascinated by geometric shapes and number patterns. One day, Euclid posed a unique problem to his students. He gave them two numbers, textbb{m} and textbb{n}, and asked them to determine if they could be arranged to form a right-angled triangle with integer sides. If possible, they were to find the smallest such triangle (in terms of side lengths) and output the sides in ascending order. If not, they should output -1. A right-angled triangle satisfies the Pythagorean theorem: a^2 + b^2 = c^2 Where a, b, and c are the integer sides of the triangle and a le b < c. For example, given textbb{m} = 5 and textbb{n} = 12: - One such solution is the sides 5, 12, and 13 since 5^2 + 12^2 = 13^2. - There are other triangles that can be formed with different values of m and n, but this is the smallest triangle in terms of side lengths. Input Format The input contains two integers separated by a space, textbb{m} and textbb{n}. Constraints 1 le textbb{m}, textbb{n} le 10^9 Output Format If there is a right-angled triangle that can be formed with side lengths involving textbb{m} and textbb{n}, print the sides in ascending order. Otherwise, print -1. Sample Input 0 5 12 Sample Output 0 5 12 13 Explanation 0 The sides 5, 12, and 13 form a right-angled triangle since 5^2 + 12^2 = 13^2 and the sides are in ascending order. Sample Input 1 2 4 Sample Output 1 -1 Explanation 1 It\'s not possible to form a right-angled triangle with the sides 2 and 4 such that they satisfy the Pythagorean theorem. Sample Input 2 7 24 Sample Output 2 7 24 25 Explanation 2 The sides 7, 24, and 25 form a right-angled triangle since 7^2 + 24^2 = 25^2 and the sides are in ascending order.","solution":"def smallest_right_triangle(m, n): Return the smallest right-angled triangle with integer sides involving m and n. Parameters: m (int): one side of the triangle n (int): another side of the triangle Returns: list: the sides of the right-angled triangle in ascending order if possible, else -1 # Ensure m <= n for easier comparison m, n = sorted([m, n]) # h is the hypotenuse h = (m**2 + n**2) ** 0.5 if h.is_integer(): return sorted([m, n, int(h)]) return -1"},{"question":"Given a list of car trip records, each containing a start and end timestamp (in any format you prefer), write a function `average_trip_duration` that calculates the average trip duration in minutes. Each trip duration should be rounded to the nearest whole number. The function should handle various validations, including: 1. If the start time is not before the end time, print a specific alert. 2. If the list is empty, return zero. The input list will be a 2D array, where each internal array contains a pair of timestamps. Timestamps will be represented as strings in the format \\"YYYY-MM-DD HH:MM:SS\\". For example, given the following list of trips: ```python trips = [ [\\"2023-10-01 08:00:00\\", \\"2023-10-01 08:30:00\\"], [\\"2023-10-01 09:10:00\\", \\"2023-10-01 09:50:00\\"], [\\"2023-10-02 12:00:00\\", \\"2023-10-02 12:25:00\\"] ] ``` The function `average_trip_duration(trips)` should return `32`, because the average duration is (30 + 40 + 25) / 3 = 31.67, which rounds to 32. If there is a trip where the start time is not before the end time, such as: ```python trips = [ [\\"2023-10-01 08:00:00\\", \\"2023-10-01 08:30:00\\"], [\\"2023-10-01 09:50:00\\", \\"2023-10-01 09:10:00\\"] ] ``` The function should output: ```python \\"Start time must be before end time\\" ``` If the input list is empty: ```python trips = [] ``` Then, the function should return `0`. Ensure the function `average_trip_duration` is implemented correctly to handle these cases.","solution":"from datetime import datetime import math def average_trip_duration(trips): if not trips: return 0 total_duration = 0 valid_trip_count = 0 for trip in trips: start_time_str, end_time_str = trip start_time = datetime.strptime(start_time_str, \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(end_time_str, \\"%Y-%m-%d %H:%M:%S\\") if start_time >= end_time: print(\\"Start time must be before end time\\") continue duration_seconds = (end_time - start_time).total_seconds() duration_minutes = math.ceil(duration_seconds / 60) total_duration += duration_minutes valid_trip_count += 1 if valid_trip_count == 0: return 0 average_duration = total_duration / valid_trip_count return round(average_duration)"},{"question":"Given a 2D grid of size N x M filled with lowercase alphabetic characters \'.\': empty cell, \'X\': obstacle, \'S\': start point, \'E\': end point, your task is to check if there exists a path from \'S\' to \'E\'. You can move up, down, left, or right through the empty cells (\'.\'). If a path exists, return \\"YES\\", otherwise return \\"NO\\". ----- Input Format ------ - The input starts with two integers N and M, denoting the number of rows and columns in the grid. - The next N lines contain M characters each representing the grid. ----- Output Format ------ Print \\"YES\\" if there exists a path from \'S\' to \'E\'. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ N, M ≤ 100 The grid will contain exactly one \'S\' and one \'E\'. ----- Sample Input 1 ------ 3 3 S.. .X. ..E ----- Sample Output 1 ------ YES ------ Sample Input 2 ------ 3 3 S.. XXX ..E ----- Sample Output 2 ------ NO ------ Explanation 1: In the first example, a path exists from \'S\' to \'E\' which is: (0,0) -> (1,0) -> (2,1) -> (2,2). Explanation 2: In the second example, there is no path from \'S\' to \'E\' because the \'X\'s block any possible route from \'S\' to \'E\'.","solution":"def exists_path(grid, N, M): from collections import deque def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] != \'X\': yield nx, ny # Find starting and ending positions start, end = None, None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"NO\\" queue = deque([start]) visited = set(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"A research institute is developing a system to track and decode the messages received from a newly discovered species of intelligent life forms. The messages are in the form of a sequence of integers, and the scientists have discovered that the messages can be decoded by finding and removing the longest subsequence that is strictly increasing. Your task is to help the scientists by finding the length of the longest strictly increasing subsequence in the given sequence of integers. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the integers in the sequence. Output Print a single integer — the length of the longest strictly increasing subsequence. Examples Input 8 5 2 8 6 3 6 9 7 Output 4 Input 5 1 2 2 2 3 Output 3 Explanation: In the first example, the longest strictly increasing subsequence is [2, 3, 6, 9] with length 4. In the second example, the longest strictly increasing subsequence is [1, 2, 3] with length 3.","solution":"def length_of_lis(sequence): Returns the length of the longest increasing subsequence in the given sequence. from bisect import bisect_left if not sequence: return 0 lis = [] for num in sequence: pos = bisect_left(lis, num) if pos < len(lis): lis[pos] = num else: lis.append(num) return len(lis)"},{"question":"John has a shrub with n flowers arranged in a straight line, each having a specific color. He wants to know the length of the longest segment of flowers such that no two adjacent flowers in this segment have the same color. You are to help John determine this length for multiple test cases. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 1000) — the number of flowers in the shrub. The second line of each test case contains n integers c_1, c_2, ldots, c_n (1 leq c_i leq 1000) — the color of each flower. -----Output----- For each test case, print the length of the longest segment of flowers such that no two adjacent flowers in this segment have the same color. -----Example----- Input 3 5 1 2 2 3 4 4 1 1 1 1 6 1 2 1 2 1 2 Output 3 1 6 -----Note----- In the first test case, the longest segment where no two adjacent flowers have the same color is either from the first flower to the second flower or from the third flower to the fifth flower, both having a length of 2. In the second test case, all flowers are of the same color, so the longest segment has a length of 1. In the third test case, the entire list of flowers alternates in color, making the longest segment the entire list with a length of 6.","solution":"def longest_segment(t, test_cases): Returns the length of the longest segment of flowers for each test case such that no two adjacent flowers in this segment have the same color. Parameters: t (int): The number of test cases. test_cases (list of tuples): A list where each element is a tuple containing: n (int): The number of flowers. colors (list of int): The colors of the flowers. Returns: list of int: The lengths of the longest segments for each test case. results = [] for n, colors in test_cases: max_length = 1 current_length = 1 for i in range(1, n): if colors[i] != colors[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 results.append(max_length) return results"},{"question":"For given points p1, p2, and p3, determine whether these three points form a right triangle. The points p1, p2, and p3 are given as coordinates in a 2D plane. Constraints: - All points are distinct. - -10,000 leq x1, y1, x2, y2, x3, y3 leq 10,000 - 1 leq q leq 1,000 Input: The input is given in the following format. q p1 p2 p3 … pq In the first line, the number of queries q is given. In the following q sets, three points p1, p2, p3 are given (1 leq i leq q) in the format: x1; y1; x2; y2; x3; y3 Each point is represented by its coordinates (x1, y1), (x2, y2), and (x3, y3). All input values are given in integers. Output: For each query, print \\"YES\\" if the given points form a right triangle, otherwise print \\"NO\\". Example: Input: 3 0 0 3 4 3 0 1 1 4 1 1 5 2 3 4 6 8 2 Output: YES YES NO","solution":"def is_right_triangle(x1, y1, x2, y2, x3, y3): Given three points, determine if they form a right triangle. # Calculate the squared distance between each pair of points d1 = (x2 - x1)**2 + (y2 - y1)**2 d2 = (x3 - x1)**2 + (y3 - y1)**2 d3 = (x3 - x2)**2 + (y3 - y2)**2 # Sort the distances distances = sorted([d1, d2, d3]) # Check if the sum of the squares of the two smaller distances is equal to the square of the largest distance return distances[0] + distances[1] == distances[2] def process_queries(queries): Process multiple queries to determine if each set of points forms a right triangle. results = [] for query in queries: x1, y1, x2, y2, x3, y3 = query if is_right_triangle(x1, y1, x2, y2, x3, y3): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers `arr[0..n-1]` where n > 1, rearrange the elements of array in such a way that every second element of the rearranged array is greater than its left and right elements. Note: If the array size is odd, the last element (which will have no right neighbor) should still follow the constraint with respect to its left neighbor. Example 1: Input: arr[] = {4, 3, 7, 8, 6, 2, 1} Output: arr[] = {3, 7, 4, 8, 2, 6, 1} Example 2: Input: arr[] = {1, 3, 4, 2, 5} Output: arr[] = {1, 4, 2, 5, 3} Your Task: You don\'t need to read input or print anything. Your task is to complete the function `rearrangeArray()` which takes the array `arr[]` and its size `N` as inputs and modifies the array in-place to fulfill the given constraint. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^3","solution":"def rearrangeArray(arr): Rearranges the elements of arr in such a way that every second element is greater than its left and right elements. n = len(arr) for i in range(1, n, 2): # If the current element is not greater than the previous element if arr[i] < arr[i - 1]: arr[i], arr[i - 1] = arr[i - 1], arr[i] # If the current element is not greater than the next element and i is not the last index if i + 1 < n and arr[i] < arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i]"},{"question":"You are working on a system to manage a library\'s book inventory and user checkouts. The library has n books numbered from 1 to n. Each book has a certain stock level which indicates how many copies of that book are available in the library. The library system needs to handle two types of operations: 1. \\"Q x\\": Query the available stock of book x. 2. \\"B x y\\": Borrow y copies of book x. If there are not enough copies available, the operation should not proceed, and the stock should remain unchanged. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 105), separated by a single space. The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 109), representing the initial stock levels of the books. The next m lines each describe an operation in the format \\"Q x\\" or \\"B x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 109). Output For each \\"Q x\\" operation, output the current stock level of book x. For each \\"B x y\\" operation, if the borrow is successful, output \\"Success\\"; otherwise, output \\"Fail\\". Example Input 5 6 10 5 3 0 7 Q 2 B 2 3 Q 2 B 3 4 Q 3 B 5 7 Output 5 Success 2 Fail 3 Success","solution":"def library_system(n, m, stock_levels, operations): results = [] for operation in operations: op = operation.split() if op[0] == \\"Q\\": x = int(op[1]) - 1 results.append(str(stock_levels[x])) elif op[0] == \\"B\\": x = int(op[1]) - 1 y = int(op[2]) if stock_levels[x] >= y: stock_levels[x] -= y results.append(\\"Success\\") else: results.append(\\"Fail\\") return results"},{"question":"You are given a simple directed graph G with N vertices and M edges, where each edge has a corresponding weight. Your task is to compute the maximum possible sum of weights of a simple path in G. Note that a simple path is a path that does not revisit any vertices. The graph is represented by the following parameters: - N: the number of vertices - M: the number of edges - edges: a list of tuples, where each tuple (u, v, w) indicates a directed edge from vertex u to vertex v with weight w Constraints: - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 100,000 - 1 ≤ u, v ≤ N - 1 ≤ w ≤ 10^6 Input: Input is given from Standard Input in the following format: ``` N M u1 v1 w1 u2 v2 w2 ... uM vM wM ``` Output: Print the maximum possible sum of weights of a simple path in G. If there is no possible path in G, print 0. Examples: Input: ``` 5 5 1 2 3 2 3 4 3 4 5 4 5 6 1 3 2 ``` Output: ``` 18 ``` Input: ``` 4 3 1 2 100 2 3 200 3 4 300 ``` Output: ``` 600 ``` Input: ``` 3 2 1 2 50 2 3 50 ``` Output: ``` 100 ```","solution":"from collections import defaultdict, deque def max_weight_simple_path(n, m, edges): graph = defaultdict(list) # Build the graph for u, v, w in edges: graph[u].append((v, w)) # Memoization for DFS results, key is (current node, visited mask) memo = {} def dfs(node, visited): # Base case: memoization check if (node, visited) in memo: return memo[(node, visited)] max_path_weight = 0 for neighbor, weight in graph[node]: if not visited & (1 << neighbor): # check if neighbor is not visited max_path_weight = max(max_path_weight, weight + dfs(neighbor, visited | (1 << neighbor))) # Memorize and return the result memo[(node, visited)] = max_path_weight return max_path_weight max_weight = 0 for i in range(1, n + 1): max_weight = max(max_weight, dfs(i, 1 << i)) return max_weight # Example usage: # This is directly converting the sample input to the function parameters. if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] for i in range(2, len(data), 3): u = int(data[i]) v = int(data[i+1]) w = int(data[i+2]) edges.append((u, v, w)) print(max_weight_simple_path(N, M, edges))"},{"question":"Create a function that takes an array of integers representing the grades of students in a class. Your task is to determine the median grade. If the number of grades is even, return the average of the two middle grades. If the number of grades is odd, return the middle grade. Implement this function in Python. The function should handle cases where there might be repeating grades and should return the median as a float value if necessary.","solution":"def find_median(grades): Returns the median grade from a list of integer grades. If the number of grades is even, the average of the two middle grades is returned. If the number of grades is odd, the middle grade is returned. grades.sort() n = len(grades) if n % 2 == 1: # odd number of grades return float(grades[n // 2]) else: # even number of grades mid1 = grades[n // 2 - 1] mid2 = grades[n // 2] return (mid1 + mid2) / 2.0"},{"question":"A university wants to manage the grades of their students. They want a program to organize student grades by calculating the highest, lowest, and average scores for each course, as well as the overall highest, lowest, and average scores across all courses. Input The input consists of multiple lines. Each line contains a course name followed by a student\'s name and their grade for that course in the following format: ``` <course_name> <student_name> <grade> ``` The course name and student name are strings without spaces, and the grade is a non-negative integer not exceeding 100. The input is terminated by a line containing the word \\"END\\". Output The output should first display the highest, lowest, and average scores for each course in alphabetical order of the course names. After that, output the overall highest, lowest, and average scores across all courses. Format the output exactly as shown in the example. Example Input ``` Math Alice 78 Math Bob 92 Science Alice 85 Science Bob 90 Math Charlie 88 Art Alice 95 END ``` Output ``` Art: Highest: 95, Lowest: 95, Average: 95.00 Math: Highest: 92, Lowest: 78, Average: 86.00 Science: Highest: 90, Lowest: 85, Average: 87.50 Overall: Highest: 95, Lowest: 78, Average: 88.00 ```","solution":"def process_grades(grades): from collections import defaultdict course_grades = defaultdict(list) for line in grades: if line == \\"END\\": break course, student, grade = line.split() grade = int(grade) course_grades[course].append(grade) results = [] all_grades = [] for course in sorted(course_grades.keys()): grades_list = course_grades[course] highest = max(grades_list) lowest = min(grades_list) average = sum(grades_list) / len(grades_list) all_grades.extend(grades_list) results.append(f\\"{course}: Highest: {highest}, Lowest: {lowest}, Average: {average:.2f}\\") if all_grades: overall_highest = max(all_grades) overall_lowest = min(all_grades) overall_average = sum(all_grades) / len(all_grades) results.append(f\\"Overall: Highest: {overall_highest}, Lowest: {overall_lowest}, Average: {overall_average:.2f}\\") return results"},{"question":"-----Question----- You are given a list of integers and a target integer. Determine the number of unique pairs of integers in the list that sum up to the target value. -----Input----- - The first line contains an integer N (2 ≤ N ≤ 10^5), the number of integers in the list. - The second line contains N space-separated integers a_1, a_2, ..., a_N (-10^9 leq a_i leq 10^9). - The third line contains a single integer T (-2 times 10^9 leq T leq 2 times 10^9), the target sum. -----Output----- Output the number of unique pairs of integers that sum up to the target value T. -----Explanation of Sample Inputs----- In the first example, the pairs (1, 4) and (2, 3) sum up to the target value. Note that (4, 1) is considered the same as (1, 4) and should not be counted twice. In the second example, there are no pairs that sum up to the target value. -----Examples----- Sample Input 1: 5 1 2 3 4 5 5 Sample Output 1: 2 Sample Input 2: 4 1 1 1 1 3 Sample Output 2: 0","solution":"def count_unique_pairs(nums, target): Returns the number of unique pairs in the list that sum up to the target value. seen = set() pairs = set() for num in nums: needed = target - num if needed in seen: pairs.add((min(num, needed), max(num, needed))) seen.add(num) return len(pairs)"},{"question":"You are given an array of n distinct integers. Your task is to reorder the array such that the sum of the absolute differences between adjacent elements is minimized. That is, you need to find a permutation of the array a which minimizes the value of |a_1 - a_2| + |a_2 - a_3| + ... + |a_{n-1} - a_n|. -----Input----- The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains one integer n (2 leq n leq 10^5) — the number of elements in the array. The second line of each test case contains n distinct integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9). The sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output n space-separated integers b_1, b_2, dots, b_n (a permutation of the array a) such that the sum of absolute differences between adjacent elements is minimized. If there are several possible answers, you can output any of them. -----Examples----- Input 3 4 4 1 2 3 3 10 50 20 5 5 1 3 4 2 Output 1 2 3 4 10 20 50 1 2 3 4 5 -----Note----- In the first test case, one optimal permutation is [1, 2, 3, 4] with a difference sum of 3 (i.e., |1 - 2| + |2 - 3| + |3 - 4| = 1 + 1 + 1 = 3). In the second test case, one optimal permutation is [10, 20, 50] with a difference sum of 40 (i.e., |10 - 20| + |20 - 50| = 10 + 30 = 40). In the third test case, one optimal permutation is [1, 2, 3, 4, 5] with a difference sum of 4 (i.e., |1 - 2| + |2 - 3| + |3 - 4| + |4 - 5| = 1 + 1 + 1 + 1 = 4). In each test case, the integers are distinct.","solution":"def minimize_absolute_differences(t, test_cases): results = [] for i in range(0, 2 * t, 2): n = test_cases[i] arr = sorted(test_cases[i + 1]) results.append(arr) return results"},{"question":"John has a list of strings, each representing a binary number. The list may contain duplicates, and he wants to find the maximum binary number from the list after applying the following operations any number of times: 1. Choose any binary number and flip any single bit (change a 0 to 1 or a 1 to 0). 2. Remove any binary number from the list. John wants to know the maximum possible binary number he can get from the given list after performing these operations any number of times. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of binary numbers. Each of the next n lines contains a binary number s_i (1 leq |s_i| leq 30). -----Output----- Output a string representing the maximum possible binary number that John can get. -----Examples----- Input 3 101 110 011 Output 111 Input 4 000 001 010 100 Output 111 Input 2 111 011 Output 111 -----Note----- In the first example, John can flip the second bit of `101` to get `111`. In the second example, John can flip the bits of each number to eventually form `111`. In the third example, `111` is already the largest binary number.","solution":"def max_binary_number(n, binary_list): This function will find the maximum possible binary number from a list of binary numbers by applying bit flip operations. # Finding the length of maximum binary string in the list max_len = max(len(bin_num) for bin_num in binary_list) # Maximum binary number will be full of \'1\'s with the length of max_len max_binary = \'1\' * max_len return max_binary"},{"question":"Your task is to implement a Least Recently Used (LRU) cache. You need to implement the following methods for the cache: - `get(key)`: Return the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. - `put(key, value)`: Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. The operations should be performed in O(1) time complexity. Example 1: Input: LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4); Output: 1 -1 -1 3 4 Explanation: LRUCache cache = new LRUCache(2); // cache capacity is 2 cache.put(1, 1); // cache is {1=1} cache.put(2, 2); // cache is {1=1, 2=2} cache.get(1); // return 1, cache is {2=2, 1=1} cache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3} cache.get(2); // returns -1 (not found) cache.put(4, 4); // LRU key was 1, evicts key 1, cache is {3=3, 4=4} cache.get(1); // returns -1 (not found) cache.get(3); // return 3, cache is {4=4, 3=3} cache.get(4); // return 4, cache is {3=3, 4=4} Your Task: You don\'t need to read input or print anything. You need to implement the class `LRUCache` which has two methods: - `__init__(size)`: The constructor which initializes the cache with a given size. - `get(key)`: To get the value of the key. - `put(key, value)`: To insert the value by the key. Expected Time Complexity: O(1) for both get and put. Expected Auxiliary Space: O(capacity) where capacity is the number of items stored. Constraints: 1 <= capacity <= 1000 0 <= key, value <= 10^4 At most 10^5 calls will be made to get and put methods.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key, last=True) # Marks the key as recently used return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key, last=True) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) # Removes the least recently used item"},{"question":"In this problem, you are given an undirected tree with n nodes. The nodes are numbered from 1 to n. A tree is a connected graph with no cycles. A subtree of a tree is a tree consisting of a node of the original tree and all its descendants. Your task is to find the size of the largest subtree for each node in the tree. The size of a subtree is the number of its nodes. Input: - The first line contains an integer n (2 ≤ n ≤ 1000), the number of nodes in the tree. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v. Output: - Print n lines. The i-th line should contain one integer, the size of the largest subtree rooted at node i. Examples: Input: 5 1 2 1 3 3 4 3 5 Output: 5 1 3 1 1 Note: In the given example, the largest subtree rooted at node 1 includes all nodes {1, 2, 3, 4, 5}, hence its size is 5. The largest subtree rooted at node 2 only includes {2}, hence its size is 1. The largest subtree rooted at node 3 includes nodes {3, 4, 5}, hence its size is 3. The largest subtrees rooted at nodes 4 and 5 only include themselves, hence their size is 1.","solution":"def largest_subtree_sizes(n, edges): from collections import defaultdict # Build the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): subtree_size = 1 for neighbor in tree[node]: if neighbor != parent: subtree_size += dfs(neighbor, node) max_subtree_sizes[node] = subtree_size return subtree_size max_subtree_sizes = [0] * (n + 1) # Pick any node as the root, let\'s choose node 1 dfs(1, -1) return max_subtree_sizes[1:] # Example usage: # n = 5 # edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # print(largest_subtree_sizes(n, edges)) # Output: [5, 1, 3, 1, 1]"},{"question":"Given a list of integers, find the number which appears an odd number of times. You are provided with a list of integers where all integers except one appear an even number of times. Your task is to find the integer that appears an odd number of times. You must write a function that takes a list of integers as input and returns the integer that appears an odd number of times. **Constraints:** - The input list will always contain at least one integer. - There will always be exactly one integer that appears an odd number of times. **Examples** ``` find_odd([20, 1, 1, 2, 2, 3, 3, 20, 20]) => 20 find_odd([4, 5, 4, 5, 4]) => 4 ```","solution":"def find_odd(lst): Finds the integer that appears an odd number of times in the provided list. Parameters: lst (list): A list of integers where exactly one integer appears an odd number of times. Returns: int: The integer that appears an odd number of times. result = 0 for num in lst: result ^= num return result"},{"question":"Minions are planning for a Christmas party and they want to exchange gifts among themselves. Each minion has a unique gift they want to give. They decided to play a Secret Santa game where each minion gets to randomly pick another minion to give their gift to. However, for the game to be fun, each minion must receive exactly one gift, and the gift distribution must be such that no minion gives a gift to themselves. -----Input----- The first line contains an integer T representing the number of test cases. Each test case consists of two lines. The first line contains a single integer N representing the number of minions. The second line contains N unique integers A1, A2, ..., AN representing the minions. -----Output----- For each test case, output YES if a valid gift distribution is possible where no minion gifts to themselves and each minion receives exactly one gift. Otherwise, output NO. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Ai ≤ 1000 -----Example----- Input: 3 3 1 2 3 4 4 3 2 1 3 3 1 2 Output: YES YES NO -----Explanation----- Example case 1. It is possible for minion 1 to give to minion 2, minion 2 to give to minion 3, and minion 3 to give to minion 1. Thus, making a valid distribution where no minion gifts to themselves and everyone receives exactly one gift. Example case 2. Minion 4 can give to minion 3, minion 3 can give to minion 2, minion 2 can give to minion 1, and minion 1 can give to minion 4. This forms a valid circle. Example case 3. It\'s not possible to form a valid distribution as given. No matter how we try to distribute, at least one minion will end up either not receiving a gift or giving a gift to themselves.","solution":"def secret_santa(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] # number of minions minions = test_cases[i][1] # list of minions if n == 1: results.append(\\"NO\\") else: # For N minions, we need to ensure that every minion maps to another unique minion # There are many valid permutations except for identity permutation where minion gives to itself results.append(\\"YES\\") return results"},{"question":"In a farming simulator game, there are several fields arranged in the form of a 2D grid. Each cell in the grid represents a field, and contains a certain number of crops. You start at the top-left corner of the grid and your goal is to collect the maximum number of crops possible. You can only move down or right at any point in time. Given the dimensions of the grid (n x m) and the number of crops in each field, determine the maximum number of crops you can collect by the time you reach the bottom-right corner of the grid. Example 1: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Explanation: The path that collects the maximum number of crops is (1->3->5->2->1), and the total is 12 crops. Example 2: Input: 2 2 1 2 5 6 Output: 12 Explanation: The path that collects the maximum number of crops is (1->2->6), and the total is 12 crops. Your Task: You don\'t need to read input or print anything. Complete the function maxCrops(g) which takes a 2D list g as input representing the grid, and returns the maximum number of crops that can be collected. Expected Time Complexity: O(n*m), where `n` and `m` are the dimensions of the grid. Expected Space Complexity: O(n*m) Constraints: 1 ≤ n, m ≤ 100 1 ≤ g[i][j] ≤ 100","solution":"def maxCrops(grid): if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) # Create a dp array to store the maximum crops collectible up to each cell dp = [[0] * m for _ in range(n)] # Initialize dp array with the first cell in grid dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill rest of dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"A farmer owns N plots of land and wants to grow a variety of crops on these plots. However, there are certain rules regarding the adjacency of the same type of crops due to pest control concerns. The farmer needs to ensure no two adjacent plots have the same type of crop. Find the minimum number of different types of crops required to plant on all plots given their adjacency constraints. Input Format: The first line contains an integer N - denoting the number of plots. The next N-1 lines each contain two integers, A and B, denoting that plot A is adjacent to plot B. Output Format: Print the minimum number of different types of crops required. Constraints: 1 ≤ N ≤ 10^5 1 ≤ A, B ≤ N SAMPLE INPUT 5 1 2 2 3 3 4 4 5 SAMPLE OUTPUT 2 Explanation The optimal solution is to use 2 different types of crops. For example, if we use Crop 1 on plots 1, 3, and 5, and Crop 2 on plots 2 and 4, this satisfies all adjacency constraints.","solution":"def min_crops(N, edges): from collections import defaultdict, deque if N == 1: return 1 adjacency_list = defaultdict(list) for a, b in edges: adjacency_list[a].append(b) adjacency_list[b].append(a) # To determine the minimum number of different crops required # this is simply finding the chromatic number of a tree, which is 2 def bfs(start_node): colors = [-1] * (N + 1) colors[start_node] = 0 queue = deque([start_node]) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) return colors bfs(1) return 2"},{"question":"Given a string consisting of lowercase letters, determine if we can palindrome permute the string (i.e., rearrange the string to form a palindrome). A palindrome can be read the same way forward and backward. Example 1: Input: str = \\"aabb\\" Output: 1 Explanation: The string \\"aabb\\" can be rearranged to \\"abba\\", which is a palindrome. Example 2: Input: str = \\"abc\\" Output: 0 Explanation: The string \\"abc\\" cannot be rearranged to form a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPermutePalindrome() which takes a string as input and returns 1 if the string can be rearranged to form a palindrome, otherwise it returns 0. Expected Time Complexity: O(n) Expected Space Complexity: O(1) considering the limited number of lowercase letters (26). Constraints: 1 <= length of str <= 10^5","solution":"def canPermutePalindrome(s: str) -> int: from collections import Counter # Count the frequency of each character count = Counter(s) # Calculate how many characters have an odd count odd_count = sum(1 for c in count if count[c] % 2 != 0) # For a string to be a palindrome, there can be at most one character with an odd count return 1 if odd_count <= 1 else 0"},{"question":"Alice has a tree with n nodes rooted at node 1. Each node has a unique value assigned to it. She wants to find out the maximum sum of the values from any root-to-leaf path in the tree. A path is defined as a sequence of nodes starting from the root node to any leaf node, and the sum is the total of the values of all the nodes in the path. Write a function that takes the number of nodes n, an array of integers representing the value assigned to each node (indexed from 1 to n), and an adjacency list representing the tree structure, and returns the maximum sum of values from any root-to-leaf path. -----Input----- - The first line contains an integer n (1 le n le 1000) — the number of nodes in the tree. - The second line contains n integers v_1, v_2, ..., v_n (1 le v_i le 1000) — the values assigned to each node. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n), representing an edge in the tree between nodes u and v. -----Output----- Output the maximum sum of values from any root-to-leaf path in the tree. -----Example----- Input 5 3 2 5 4 6 1 2 1 3 2 4 2 5 Output 11 -----Note----- In the example, the tree looks like this: ``` 1 (3) / 2 3 (2) / 4 5 (4) (6) ``` The maximum sum path is: 1 -> 2 -> 5, with values 3 + 2 + 6 = 11. Hence, the output is 11.","solution":"from collections import defaultdict def max_root_to_leaf_sum(n, values, edges): def dfs(node, parent): # Base case: if node is a leaf if not tree[node]: return values[node-1] max_sum = 0 for neighbor in tree[node]: if neighbor == parent: continue max_sum = max(max_sum, dfs(neighbor, node)) return values[node-1] + max_sum # Construct the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Start DFS from the root node (1) return dfs(1, -1)"},{"question":"You are given an undirected tree with N nodes and N-1 edges. Each node has a value associated with it, and node 1 is considered the root of the tree. You are required to answer Q queries on this tree. Each query is of the form: * Given a node v, find the maximum value of any node in the subtree rooted at v. Constraints * 1 leq N, Q leq 10^5 * 1 leq value of each node leq 10^9 Input Input is given from Standard Input in the following format: N value_1 value_2 ... value_N N-1 lines with two integers ai and bi, which means there is an edge between node ai and bi Q Q lines, each with a single integer v Output For each query, print the maximum value of any node in the subtree rooted at v. Examples Input 5 1 2 3 4 5 1 2 1 3 2 4 3 5 3 1 2 3 Output 5 4 5 Input 6 10 5 20 1 2 15 1 2 1 3 3 4 3 5 4 6 2 3 4 Output 20 15","solution":"import sys from collections import defaultdict, deque def find_subtree_max_values(root, values, adjacency_list): n = len(values) max_values = [0] * n visited = [False] * n def dfs(node): visited[node] = True max_value = values[node] for neighbor in adjacency_list[node]: if not visited[neighbor]: max_value = max(max_value, dfs(neighbor)) max_values[node] = max_value return max_value dfs(root) return max_values def solve(n, values, edges, queries): adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u-1].append(v-1) adjacency_list[v-1].append(u-1) max_values = find_subtree_max_values(0, values, adjacency_list) results = [max_values[v-1] for v in queries] return results # Function to read from standard input def main(): input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) idx += 1 values = list(map(int, data[idx:idx+N])) idx += N edges = [] for _ in range(N-1): u = int(data[idx]) v = int(data[idx+1]) edges.append((u, v)) idx += 2 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): v = int(data[idx]) queries.append(v) idx += 1 results = solve(N, values, edges, queries) for res in results: print(res) # To run the solution function directly if required # if __name__ == \\"__main__\\": # main()"},{"question":"A company organizes its employees\' tasks in the form of a queue. Each task has a specific priority level. When an employee completes a task, they can only choose one task from the front of the queue. However, they prefer to pick tasks with the highest priority available. The task list is represented by an array of integers where each integer denotes the priority of a task (higher number means higher priority). Write a function that simulates the completion of tasks until the queue is empty, always selecting the highest priority available from the front of the queue when there is a choice. Your function should output the sequence of priorities of the tasks as they are chosen. Input The first line contains an integer n — the number of tasks (1 ≤ n ≤ 105). The second line contains n integers pi — the priority of the i-th task (1 ≤ pi ≤ 109). Output Print a sequence of integers representing the priorities of the tasks in the order they are completed. Examples Input 6 1 4 2 5 3 2 Output 5 4 3 2 2 1 Input 4 7 7 7 7 Output 7 7 7 7 Note In the first test sample, the employee will pick tasks in the order of their priorities: 5, 4, 3, 2, 2, 1. In the second test sample, all tasks have the same priority, so they will be picked in the order they appear: 7, 7, 7, 7.","solution":"def simulate_task_completion(n, priorities): Simulates the completion of tasks based on their priorities. Args: n : int : number of tasks priorities : list : list of priority integers of n tasks Returns: list : list of priorities in the order they are completed. result = [] priorities.sort(reverse=True) while priorities: result.append(priorities.pop(0)) return result"},{"question":"A popular social media platform has decided to implement a new feature to help users organize their photo albums. Each album consists of several photos, and for each photo, we keep track of its upload timestamp and its popularity score. Now the team wants to support a feature where users can query the sum of the popularity scores of all photos uploaded within a specific timestamp range. You are given an initial list of photos, each with a timestamp and a popularity score. You also need to handle two types of operations: 1. Update the popularity score of a specific photo. 2. Query the sum of popularity scores for photos uploaded within a certain timestamp range. ------ Input ------ The first line contains two integers N and Q, where N is the number of photos and Q is the number of operations. The next N lines describe the photos. Each line contains two integers T_i and P_i, where T_i is the upload timestamp and P_i is the popularity score of the i-th photo. The next Q lines describe the operations. Each operation is either of the form: - \\"U X Y\\" (Update operation): Change the popularity score of the photo with timestamp X to Y. - \\"Q L R\\" (Query operation): Report the sum of the popularity scores of all photos with timestamps in the range [L, R] (inclusive). ------ Output ------ For each query operation, output a single integer, which is the sum of the popularity scores of the photos in the specified range. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ T_i ≤ 10^9 (timestamps are unique) 1 ≤ P_i ≤ 10^5 1 ≤ X, Y ≤ 10^9 1 ≤ L ≤ R ≤ 10^9 All updates and queries are processed in the order they appear in the input. ------ Sample Input ------ 5 3 1 10 2 20 3 30 4 40 5 50 Q 2 4 U 3 25 Q 2 4 ------ Sample Output ------ 90 85 ------ Explanation ------ Initially, the photos\' popularity scores are: - 1: 10 - 2: 20 - 3: 30 - 4: 40 - 5: 50 For the first query (Q 2 4), the sum of the popularity scores for timestamps 2, 3, and 4 is 20 + 30 + 40 = 90. After the update (U 3 25), the popularity score of the photo with timestamp 3 is changed to 25. For the second query (Q 2 4), the sum now is 20 + 25 + 40 = 85.","solution":"class PhotoAlbum: def __init__(self, photos): # Initialize with a sorted list of tuples (timestamp, popularity score) self.photos = dict(photos) self.timestamps = sorted(self.photos.keys()) def update(self, timestamp, new_score): if timestamp in self.photos: self.photos[timestamp] = new_score def query(self, start, end): total_score = 0 for t in self.timestamps: if start <= t <= end: total_score += self.photos[t] if t > end: break return total_score def process_operations(photos, operations): album = PhotoAlbum(photos) results = [] for op in operations: parts = op.split() if parts[0] == \'U\': album.update(int(parts[1]), int(parts[2])) elif parts[0] == \'Q\': result = album.query(int(parts[1]), int(parts[2])) results.append(result) return results"},{"question":"Alice is learning about sequences and their properties. She comes up with an idea to generate a sequence using a simple rule and asks you to write a program to help her verify her findings. Given a starting integer `n` and a sequence rule where the next number in the sequence is generated by adding 1 if the number is even and subtracting 1 if the number is odd, find the k-th term of this sequence. Example: - Starting integer: 7 - Sequence: 7 -> 6 -> 7 -> 6 -> 7 -> ... Notice the sequence alternates between two values after the start. Alice wants you to determine the k-th term for given starting integer and term position. Input: The first line contains an integer T, representing the number of test cases. Each test case contains two space-separated integers, the starting integer n and the position k of the desired term in the sequence. Output: For each test case, output the k-th term of the sequence. Constraints: 1 ≤ T ≤ 1000 0 ≤ n ≤ 10^18 1 ≤ k ≤ 10^18 SAMPLE INPUT 2 7 5 4 3 SAMPLE OUTPUT 7 5","solution":"def kth_term_in_sequence(n, k): Returns the k-th term in the sequence starting with the integer n. If n is even, the next term is n + 1, if n is odd, the next term is n - 1. if k == 1: return n if n % 2 == 0: return n + 1 if k % 2 == 0 else n else: return n - 1 if k % 2 == 0 else n def process_queries(T, queries): results = [] for query in queries: n, k = query results.append(kth_term_in_sequence(n, k)) return results"},{"question":"Bajtek loves problems related to arrays and logics. Recently, he discovered a particular kind of sequence inspired by the Fibonacci series, which he called the Bajtek series. The Bajtek series is defined as follows: - Start with two initial numbers, denoted as `b1` and `b2`. - Each subsequent number in the series `bi` for `i > 2` is defined as the sum of the previous number (`bi-1`) and the number before the previous (`bi-2`). Formally, the sequence can be written as: - `b1 = a` - `b2 = b` - For all `i ≥ 3`, `bi = bi-1 + bi-2` However, Bajtek being a tricky person has removed one of the middle elements from his sequence, and now he wants to restore the sequence to its original form. Given the remaining elements of the sequence except one, help Bajtek find and restore the missing element. -----Input----- The first line contains exactly one integer `n` (3 le n le 1000) — the length of the sequence after removing one element. The second line contains `n` integers representing the remaining elements of the sequence. -----Output----- Print a single integer, indicating the missing element that when inserted would restore the sequence to its original form. -----Examples----- Input 9 1 1 2 3 5 8 13 21 34 Output 55 Input 5 5 8 13 21 34 Output 55 Input 5 1 2 3 5 8 Output 13 -----Note----- In the first example, the sequence before removing an element is `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]`. Upon removing the last element `55`, the remaining sequence becomes `[1, 1, 2, 3, 5, 8, 13, 21, 34]` which matches the input. In the second example, the original sequence was `[5, 8, 13, 21, 34, 55]` and after removing the last element `55`, the sequence left is `[5, 8, 13, 21, 34]`. In the third example, the sequence `[1, 2, 3, 5, 8, 13]` had element `13` removed, leaving `[1, 2, 3, 5, 8]`.","solution":"def find_missing_bajtek_element(n, sequence): Finds the missing element in the Bajtek sequence. Parameters: n (int): The length of the sequence after removing one element. sequence (list): The remaining elements of the Bajtek sequence. Returns: int: The missing element. # Iterate over the sequence to find the missing number for i in range(2, n): if sequence[i] != sequence[i-1] + sequence[i-2]: # When we find a discrepancy, we return the correction needed. # A discrepancy is found at position i, the missing element is # \\"sequence[i-1] + sequence[i-2]\\" for position (i+1) which was removed. return sequence[i-1] + sequence[i-2] # If the sequence is valid, then the missing element is at the end return sequence[-1] + sequence[-2] # Sample Input: # 9 # 1 1 2 3 5 8 13 21 34 # Output: # 55"},{"question":"You are given a list of integers. Your task is to write a function that takes this list and returns a new list containing only the numbers that are palindromic. A palindromic number is one that remains the same when its digits are reversed. For example, given the input list `[121, 123, 454, 567]`, the output should be `[121, 454]`. **Function Signature:** ```python def find_palindromic_numbers(numbers: List[int]) -> List[int]: pass ``` **Examples:** ```python assert find_palindromic_numbers([1221, 123, 444, 565, 890]) == [1221, 444, 565] assert find_palindromic_numbers([1, 22, 303, 4004, 12321]) == [1, 22, 303, 4004, 12321] assert find_palindromic_numbers([234, 567, 890]) == [] ```","solution":"from typing import List def find_palindromic_numbers(numbers: List[int]) -> List[int]: Returns a list of palindromic numbers from the given list. Args: numbers: List[int] - A list of integers. Returns: List[int] - A list containing only the palindromic numbers. def is_palindromic(number: int) -> bool: str_num = str(number) return str_num == str_num[::-1] return [num for num in numbers if is_palindromic(num)]"},{"question":"Alice is participating in a programming contest where she needs to adjust the brightness of an array of light bulbs. Each light bulb has a brightness value represented by an integer in an array. Alice can perform the following operation any number of times: choose any contiguous subarray and decrease each element of the subarray by one. Given an array of integers representing the initial brightness of the light bulbs, determine the minimum number of operations required to make all the light bulbs have a brightness of zero. Input Format The first line contains a single integer, mathbf{T} (the number of test cases). Each test case is described by two lines: The first line of each test case contains a single integer N (the number of light bulbs). The second line of each test case contains N space-separated integers describing the brightness values of the light bulbs. Constraints 1 leq T leq 10^5 1 leq N leq 10^5 0 leq text{brightness value of each light bulb} leq 10^9 The sum of N over all test cases does not exceed 10^6. Output Format For each test case, print the minimum number of operations required to make all the light bulbs have a brightness of zero on a new line. Sample Input 2 3 3 3 4 5 1 2 3 4 5 Sample Output 4 5 Explanation Test Case 1: A possible sequence of operations is as follows: - Decrease all elements by 1: [2, 2, 3] - Decrease all elements by 1: [1, 1, 2] - Decrease the subarray [2]: [1, 1, 1] - Decrease all elements by 1: [0, 0, 0] Total number of operations = 4. Test Case 2: A possible sequence of operations is decreasing the entire array from left to right until each element reaches 0. Therefore, the required number of operations = 5.","solution":"def min_operations_to_zero(test_cases): results = [] for bulbs in test_cases: results.append(max(bulbs)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) bulbs = list(map(int, lines[idx + 1].split())) test_cases.append(bulbs) idx += 2 return test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"You are given a rectangular grid of size n x m consisting of characters \'X\' and \'.\' where \'X\' represents an obstacle and \'.\' represents an open cell. Your task is to identify all isolated open cells. An open cell is considered isolated if it is surrounded by obstacles on all four sides, that is, it is not connected horizontally or vertically to any other open cell. Open cells that are only diagonally adjacent are also considered isolated. Write a program that reads the input and outputs the count of isolated cells. Input The input consists of multiple grids. Each grid is given in the following format: The first line contains two integers n and m separated by a space which represent the number of rows and columns respectively (1 <= n, m <= 100). Each of the next n lines contains a string of length m consisting of characters \'X\' and \'.\'. When n and m are both zero, it indicates the end of input. The number of grids does not exceed 10. Output For each grid, print the count of isolated open cells on a new line. Examples Input 4 4 XXXX X..X X..X XXXX 3 3 XXX X.X XXX 5 6 XXXXXX X....X XXXXX. X..... XXXXXX 0 0 Output 0 1 0","solution":"def count_isolated_cells(grids): results = [] for n, m, grid in grids: if n == 0 and m == 0: break count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': up = (i == 0) or (grid[i-1][j] == \'X\') down = (i == n-1) or (grid[i+1][j] == \'X\') left = (j == 0) or (grid[i][j-1] == \'X\') right = (j == m-1) or (grid[i][j+1] == \'X\') if up and down and left and right: count += 1 results.append(count) return results"},{"question":"In an art exhibition, there are n paintings arranged in a straight line. Each painting has a unique style rating represented by an integer. The curator of the exhibition wants to rearrange the paintings to minimize the overall \\"irregularity\\" of the arrangement. The \\"irregularity\\" is defined as the sum of the absolute differences of the style ratings of adjacent paintings. Formally, if the style ratings of paintings in the final arrangement are a_1, a_2, ..., a_n, the irregularity is given by: sum_{i=1}^{n-1} |a_{i+1} - a_i| Given the initial arrangement of the paintings, find the minimum possible irregularity after rearranging the paintings. -----Input----- The first line contains an integer n (2 le n le 2 cdot 10^5) — the number of paintings. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the style ratings of the paintings. -----Output----- Output one integer — the minimum possible irregularity. -----Examples----- Input 4 1 3 2 5 Output 4 Input 5 10 20 30 40 50 Output 40 Input 3 8 2 6 Output 6 -----Note----- In the first example, the minimum possible irregularity can be achieved by arranging the paintings in the order 1, 2, 3, 5. The irregularity is |(2-1)| + |(3-2)| + |(5-3)| = 1 + 1 + 2 = 4.","solution":"def min_irregularity(n, a): Returns the minimum possible irregularity after rearranging the paintings. Parameters: n (int): The number of paintings a (list of int): The style ratings of the paintings Returns: int: The minimum possible irregularity a.sort() irregularity = 0 for i in range(1, n): irregularity += abs(a[i] - a[i-1]) return irregularity"},{"question":"Modern Urban Traffic Simulation You are tasked with developing a simulation for a modern urban traffic system where intersections are controlled by traffic signals. The city layout is represented as a grid of streets, with each intersection having a traffic signal that alternates between allowing horizontal (east-west) and vertical (north-south) traffic to pass. At each time unit, either only the horizontal or only the vertical streets at each intersection can allow vehicles to move through. Each vehicle in the simulation starts at a given location and has a specific destination. A vehicle can move one unit horizontally or vertically in each time unit, but only if traffic signals permit movement in that direction at that time. The traffic signal at each intersection alternates every T time units. Given the starting time and locations of multiple vehicles, their destinations, the duration of the traffic signal cycle (T), and the grid configuration, your task is to compute the minimum time required for each vehicle to reach its destination under the given traffic signal rules. Input: The input consists of multiple datasets. Each dataset represents a grid of intersections and is formatted as follows: - The first line contains integers N, M, and T, where N is the number of rows and M is the number of columns in the grid. T is the duration traffic signals remain in one state before switching to the other. - The second line contains an integer V, the number of vehicles. - Each of the following V lines contains four integers: sx, sy, dx, dy, representing the starting coordinates (sx, sy) and the destination coordinates (dx, dy) of a vehicle. The end of input is indicated by a line containing three zeros. Output: For each dataset, output V lines. Each line contains a single integer representing the minimum time required for the corresponding vehicle to reach its destination. If the destination cannot be reached, output -1. Assumptions: - The grid indices (sx, sy), (dx, dy) are 1-based. - The vehicles can only move to adjacent cells. Example Input: 3 3 2 2 1 1 3 3 2 1 2 3 4 4 3 1 1 1 4 4 0 0 0 Example Output: 4 2 6","solution":"from heapq import heappop, heappush def min_time_to_destination(N, M, T, vehicles): Computes the minimum time required for each vehicle to reach its destination under the given traffic signal rules. :param N: Number of rows in the grid :param M: Number of columns in the grid :param T: Duration traffic signals remain in one state before switching to the other :param vehicles: A list of tuples where each tuple contains four integers (sx, sy, dx, dy) for each vehicle\'s start and destination :return: A list of integers where each integer is the minimum time required for the corresponding vehicle to reach its destination results = [] def is_valid(x, y): return 1 <= x <= N and 1 <= y <= M def bfs(sx, sy, dx, dy): visited = set() pq = [(0, sx, sy)] # heap of (time, x, y) while pq: time, x, y = heappop(pq) if (x, y) == (dx, dy): return time if (x, y, time % (2 * T)) in visited: continue visited.add((x, y, time % (2 * T))) if (time // T) % 2 == 0: # Horizontal movement allowed for nx, ny in [(x, y-1), (x, y+1)]: if is_valid(nx, ny): heappush(pq, (time + 1, nx, ny)) # Vehicle can still wait heappush(pq, (time + 1, x, y)) else: # Vertical movement allowed for nx, ny in [(x-1, y), (x+1, y)]: if is_valid(nx, ny): heappush(pq, (time + 1, nx, ny)) # Vehicle can still wait heappush(pq, (time + 1, x, y)) return -1 for sx, sy, dx, dy in vehicles: results.append(bfs(sx, sy, dx, dy)) return results def traffic_simulation(datasets): Process multiple datasets and return the results for each one. :param datasets: A list of datasets, where each dataset is a tuple (N, M, T, vehicles) :return: A list of lists containing results for each dataset output = [] for N, M, T, vehicles in datasets: output.append(min_time_to_destination(N, M, T, vehicles)) return output # Sample function to parse the input and call appropriate functions def parse_input(input_data): index = 0 datasets = [] while index < len(input_data): N, M, T = map(int, input_data[index].split()) index += 1 if N == 0 and M == 0 and T == 0: break V = int(input_data[index]) index += 1 vehicles = [] for _ in range(V): sx, sy, dx, dy = map(int, input_data[index].split()) vehicles.append((sx, sy, dx, dy)) index += 1 datasets.append((N, M, T, vehicles)) return traffic_simulation(datasets)"},{"question":"You are given a mountainous terrain represented by an array of non-negative integers where each element represents the elevation at that point. You need to determine the number of distinct peaks in the given terrain. A peak is defined as an element that is strictly greater than its neighbors. The terrain can be considered circular, i.e., the last element is adjacent to the first element. Input: The first line of the input contains an integer T denoting the number of test cases. Each of the following T lines contains an integer n representing the number of elevation points, followed by n space-separated integers representing the elevations in the terrain. Output: For each test case, output the number of distinct peaks in the terrain. Constraints: 1 ≤ T ≤ 50 3 ≤ n ≤ 5000 0 ≤ Elevation ≤ 10000 SAMPLE INPUT: 2 5 1 2 3 1 2 6 4 4 4 4 4 4 SAMPLE OUTPUT: 2 0 Explanation: Test Case #1: In the array [1, 2, 3, 1, 2], the peaks are the elements at indices 2 and 4 (3 and 2), making a total of 2 distinct peaks. Test Case #2: In the array [4, 4, 4, 4, 4, 4], no element is strictly greater than its neighbors; hence there are 0 peaks.","solution":"def count_peaks(test_cases): This function takes a list of test cases. Each test case is a tuple where the first element is the number of elevation points and the second element is the list of elevations. It returns a list of integers where each integer represents the number of peaks in the corresponding test case. result = [] for case in test_cases: n, elevations = case peaks = 0 for i in range(n): left = elevations[i - 1] if i > 0 else elevations[-1] right = elevations[i + 1] if i < n - 1 else elevations[0] if elevations[i] > left and elevations[i] > right: peaks += 1 result.append(peaks) return result # Function to read and process the input def handle_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): line = list(map(int, lines[i].split())) n = line[0] elevations = line[1:] test_cases.append((n, elevations)) return test_cases"},{"question":"In computer systems, data is often represented in bytes, where each byte consists of 8 bits. A common task is to modify certain bits of a data byte to achieve desired outcomes. Write a function that modifies specific bits of a byte based on given instructions. Input --- The function should take two arguments: 1. `byte` - an integer representing the byte (0 to 255). 2. `instructions` - a list of tuples, where each tuple contains two integers: - `bit_position` (0-7): the position of the bit to modify. - `new_value` (0 or 1): the new value of the bit. Output --- The function should return the modified byte as an integer. Example --- ```python def modify_byte(byte, instructions): for bit_position, new_value in instructions: if new_value == 1: byte |= (1 << bit_position) else: byte &= ~(1 << bit_position) return byte # Example usage: byte = 0b10101010 # 170 in decimal instructions = [(1, 0), (6, 1)] modified_byte = modify_byte(byte, instructions) print(bin(modified_byte)) # Output should be \'0b11101000\' ``` In this example, the function modifies the byte `0b10101010` by changing the bit at position 1 to `0` and the bit at position 6 to `1`, resulting in the modified byte `0b11101000` (232 in decimal).","solution":"def modify_byte(byte, instructions): Modifies specific bits of a byte based on given instructions. Args: byte (int): An integer representing the byte (0 to 255). instructions (list): A list of tuples, where each tuple contains: - bit_position (0-7): The position of the bit to modify. - new_value (0 or 1): The new value of the bit. Returns: int: The modified byte as an integer. for bit_position, new_value in instructions: if new_value == 1: byte |= (1 << bit_position) else: byte &= ~(1 << bit_position) return byte"},{"question":"Tom is learning about palindrome numbers. A palindrome number is a number that remains the same when its digits are reversed. For instance, 121 is a palindrome, but 123 is not. Tom wants to write a program that can determine if a given integer is a palindrome. Write a program to help Tom determine if a given number is a palindrome. INPUT: First line contains the number of test cases T, followed by T lines, each line contains an integer number N. OUTPUT: Display T lines, each line containing \\"YES\\" if the number is a palindrome and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 100 -100000 ≤ N ≤ 100000 Note: You need to handle both positive and negative numbers. A negative number is not considered a palindrome. SAMPLE INPUT 3 121 -121 12321 SAMPLE OUTPUT YES NO YES","solution":"def is_palindrome_num(n): Determines if the given integer number is a palindrome. Negative numbers are not considered palindromes. Parameters: n (int): The input integer. Returns: str: \\"YES\\" if the number is a palindrome, \\"NO\\" otherwise. if n < 0: return \\"NO\\" original_str = str(n) reversed_str = original_str[::-1] if original_str == reversed_str: return \\"YES\\" else: return \\"NO\\" def check_palindromes(test_cases): For each number in the test cases, determines if the number is a palindrome and returns the results. Parameters: test_cases (list of int): List of integers to check. Returns: list of str: List of results, \\"YES\\" if the number is a palindrome and \\"NO\\" otherwise. results = [] for n in test_cases: results.append(is_palindrome_num(n)) return results"},{"question":"Create a function that takes in a list of integers and returns another list where each element is replaced by the product of all other elements in the input list except the one at that index. You should solve this problem without using division. For example, given the input list `[1, 2, 3, 4]`, the output should be `[24, 12, 8, 6]` because: - 24 is the product of 2, 3, and 4. - 12 is the product of 1, 3, and 4. - 8 is the product of 1, 2, and 4. - 6 is the product of 1, 2, and 3. You should account for some edge cases, such as when the input list contains zeros or only has one element.","solution":"def product_except_self(nums): Returns a list such that each element is the product of all other elements except itself. length = len(nums) if length == 0: return [] if length == 1: return [0] # Initialize the result array result = [1] * length # Calculate left products left = 1 for i in range(length): result[i] = left left *= nums[i] # Calculate right products and final result right = 1 for i in range(length - 1, -1, -1): result[i] *= right right *= nums[i] return result"},{"question":"To help the Secret Service identify potential security threats, you\'ve been given a task to analyze a list of phone call records. Each record contains the caller, the recipient, and the duration of the call in minutes. Your task is to find out the total call duration for each person (both as a caller and a recipient). Write a program that will read call records and output total call durations for each person involved. Input Format - The first line of input contains a single integer N, the number of call records. - The next N lines each contain a record consisting of two names and an integer, separated by spaces: the caller\'s name, the recipient\'s name, and the duration of the call in minutes. Output Format - For each person appearing in the records, print their name followed by the total duration of calls they were involved in. List each person\'s name in alphabetical order. Constraints - 1 ≤ N ≤ 105 - Each name is a string of up to 50 characters containing only uppercase and lowercase letters. - The call duration is an integer between 1 and 100. Sample Input 5 Alice Bob 10 Bob Alice 15 Alice Charlie 20 Charlie Alice 5 Bob Charlie 30 Sample Output Alice 50 Bob 55 Charlie 55","solution":"def calculate_total_call_durations(records): Calculates the total call duration for each person (both as a caller and recipient). Args: records (list of tuple): List of tuples where each tuple contains caller\'s name, recipient\'s name, and call duration. Returns: dict: Dictionary with names as keys and total call duration as values. call_durations = {} for caller, recipient, duration in records: if caller in call_durations: call_durations[caller] += duration else: call_durations[caller] = duration if recipient in call_durations: call_durations[recipient] += duration else: call_durations[recipient] = duration return dict(sorted(call_durations.items())) def process_call_records(input_data): Processes the call records from input and calculates total call durations for each person. Args: input_data (str): The input data string representing call records. Returns: dict: Dictionary with names as keys and total call duration as values, sorted by names alphabetically. lines = input_data.strip().split(\'n\') N = int(lines[0]) records = [] for i in range(1, N + 1): parts = lines[i].split() caller = parts[0] recipient = parts[1] duration = int(parts[2]) records.append((caller, recipient, duration)) return calculate_total_call_durations(records)"},{"question":"You are given a binary string s of length n. Your task is to determine the length of the longest subsequence such that all characters in the subsequence are the same and the subsequence contains at least one \'0\' and at least one \'1\'. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a binary string s of length n. -----Output----- Print the length of the longest subsequence that contains at least one \'0\' and at least one \'1\'. -----Examples----- Input 5 10011 Output 4 Input 4 1111 Output 0 Input 8 10101010 Output 8","solution":"def longest_subsequence_with_0_and_1(n, s): Returns the length of the longest subsequence that contains at least one \'0\' and at least one \'1\'. :param n: int - length of the binary string :param s: str - binary string :return: int - length of the longest valid subsequence if \'0\' not in s or \'1\' not in s: return 0 else: return n"},{"question":"Alice and Bob are playing a game involving a string, where they take turns to remove characters from the string until it is empty. Alice always goes first. The rules of the game are as follows: 1. On each turn, the current player must choose a contiguous substring where all characters are the same and remove it. 2. The player who cannot make a move loses the game. Given an initial string, determine who will win the game assuming both players play optimally. Write a function to determine the winner of the game. Function Description Complete the function `whoWinsGame` in the editor below. `whoWinsGame` has the following parameter: - `s`: a string representing the initial sequence of characters Returns - string: either \\"Alice\\" or \\"Bob\\" Input Format The input consists of a single string `s`. Constraints - 1 leq |s| leq 1000 (where |s| is the length of `s`) - `s` contains only lowercase English letters. Sample Input 0 aaabbbcc Sample Output 0 Alice Explanation 0 In the optimal play: - Alice removes \\"aaa\\" forming the string \\"bbbcc\\". - Bob removes \\"bbb\\" forming the string \\"cc\\". - Alice removes \\"cc\\", emptying the string and winning the game. Sample Input 1 aaabb Sample Output 1 Bob Explanation 1 In the optimal play: - Alice removes \\"aaa\\" forming the string \\"bb\\". - Bob removes \\"bb\\", emptying the string and winning the game. Implement the function `whoWinsGame` that will facilitate this game logic.","solution":"def whoWinsGame(s): Determines the winner of the game assuming both players play optimally. Args: s (str): A string representing the initial sequence of characters. Returns: str: Either \\"Alice\\" or \\"Bob\\" indicating the winner. # Count the number of groups of identical characters groups = 1 # There\'s at least one group n = len(s) for i in range(1, n): if s[i] != s[i-1]: groups += 1 # Alice goes first, so she will win if the number of groups is odd # Bob will win if the number of groups is even if groups % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Unique Numbers Sometimes, in large datasets, we need to identify records with distinct properties. One common scenario is finding the first unique number in a list of integers. A unique number is one that appears exactly once in the list. For example, in the list `[4, 5, 4, 5, 3, 2, 1, 1, 2]`, the number `3` is unique because it appears only once. To add an additional layer of complexity, you need to return the first unique number encountered when traversing the list from left to right. If no unique number exists, return `-1`. Your task Your task is to write a function that accepts a list of integers and returns the first unique number in the list. Return `-1` if there are no unique numbers. Examples # Example 1 ```python input: [2, 3, 5, 3, 2, 4, 5] output: 4 ``` # Example 2 ```python input: [7, 7, 8, 8, 9, 9] output: -1 ``` # Example 3 ```python input: [1, 3, 3, 4, 5, 6, 5, 4] output: 1 ``` Constraints 1. The input list contains at most `10^5` integers. 2. Each integer in the list is between `-10^6` and `10^6`. Write a function named `first_unique` that takes a list of integers and returns the first unique number as described. Use the function signature: ```python def first_unique(nums: list) -> int: pass ```","solution":"def first_unique(nums: list) -> int: Returns the first unique number in the list. If no unique number exists, return -1. :param nums: List of integers :return: The first unique number or -1 if none exists from collections import Counter # Count the occurrences of each number count = Counter(nums) # Traverse the list and find the first unique number for num in nums: if count[num] == 1: return num # If no unique number is found, return -1 return -1"},{"question":"Conveyor Belt Packing Problem Statement: Alice works in a factory where she is responsible for packing products into boxes from a conveyor belt. Each product has a specific weight, and she has a set of boxes, each with a maximum weight limit. Alice needs to ensure that each box does not exceed its weight limit when she packs the products. You are to write a program that will help Alice determine if it is possible to pack all the products into the given boxes without exceeding the weight limit of any box. If it is possible, print \\"Possible\\", otherwise print \\"Impossible\\". Input: The first line contains an integer T - the number of test cases (1 ≤ T ≤ 20). For each test case: 1. The first line contains an integer N - the number of products (1 ≤ N ≤ 50). 2. The second line contains N integers representing the weights of the products (1 ≤ weight ≤ 100). 3. The third line contains an integer M - the number of boxes (1 ≤ M ≤ 50). 4. The fourth line contains M integers representing the weight limits of the boxes (1 ≤ limit ≤ 100). Output: For each test case, output \\"Possible\\" if all the products can be packed according to the given constraints, otherwise output \\"Impossible\\". SAMPLE INPUT 3 5 10 20 10 30 40 3 50 50 30 4 15 35 25 10 3 20 30 40 3 5 10 20 2 15 25 SAMPLE OUTPUT Possible Impossible Possible","solution":"def can_pack_products(T, test_cases): results = [] for case in test_cases: N, weights, M, limits = case if sum(weights) > sum(limits): results.append(\\"Impossible\\") continue weights.sort(reverse=True) limits.sort(reverse=True) box_index = 0 for weight in weights: if box_index >= M: results.append(\\"Impossible\\") break if limits[box_index] >= weight: limits[box_index] -= weight else: while box_index < M and limits[box_index] < weight: box_index += 1 if box_index >= M: results.append(\\"Impossible\\") break limits[box_index] -= weight else: results.append(\\"Possible\\") return results"},{"question":"Alice is trying to build a new website and wants a component that dynamically adjusts to the user\'s screen size. This component must display a grid of elements, where each element can be either a circle, square, or triangle. Alice has a collection of n elements, each identified by a unique positive integer ID. She wants to distribute these elements into r rows and c columns by arranging them in increasing order of their IDs. However, Alice\'s preferred format is to fill as many full rows as possible, and any remaining elements should be placed in a final row, which might be incomplete. Write a function to generate the grid of elements based on the given number of rows and columns. Ensure that the last row is not filled with \\"empty\\" elements that don\'t exist. Return the grid as a list of lists, where each inner list represents a row. -----Input----- The first line contains three integers n (1 le n le 10^4) — the number of elements, r (1 le r le 100) — the number of rows, and c (1 le c le 100) — the number of columns. -----Output----- Output r lines, each containing c numbers (or fewer for the last row if not fully filled) representing the grid created by Alice. -----Examples----- Input 10 3 4 Output 1 2 3 4 5 6 7 8 9 10 Input 7 2 5 Output 1 2 3 4 5 6 7 Input 15 4 4 Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -----Note----- In the first testcase, Alice has 10 elements to distribute. She can create 2 full rows of 4 elements each and one final row with the remaining 2 elements. In the second testcase, Alice has 7 elements to distribute into 2 rows of 5 columns. She will fill the first row completely with 5 elements and the second row with the remaining 2 elements. In the third testcase, Alice evenly distributes the 15 elements into 3 full rows and one final incomplete row with 3 elements.","solution":"def generate_grid(n, r, c): Generates a grid of elements based on the given number of rows and columns. Parameters: n (int): The number of elements. r (int): The number of rows. c (int): The number of columns. Returns: list of lists: The grid as a list of lists. grid = [] elem = 1 # Start with the first element for row in range(r): current_row = [] for col in range(c): if elem <= n: current_row.append(elem) elem += 1 else: break # Break the loop if we exceed the number of elements n if current_row: grid.append(current_row) if elem > n: break # Stop creating rows if we exceed the number of elements n return grid"},{"question":"Alice enjoys planting flowers in her garden, which is laid out in a rectangular grid with `n` rows and `m` columns. She has `k` types of flowers, each of which can only be planted in a specific type of cell in the grid. Each type of cell is denoted by a number between 1 and `k`. Alice wants to make her garden as colorful as possible by maximizing the number of distinct flowers in each row. However, the position of each type of cell in the grid restricts which type of flower can be planted where. **Task:** Given the grid layout and the types of flowers, help Alice determine the maximum number of distinct types of flowers she can plant in each row. # Input The first line of the input contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100) — the dimensions of the grid and the number of flower types. Each of the next `n` lines contains `m` integers, where each integer between 1 and `k` represents the type of cell at that position of the grid. # Output Print `n` integers, each representing the maximum number of distinct flower types Alice can plant in each of the `n` rows. # Examples Example 1 **Input:** ``` 3 3 3 1 1 2 2 3 3 3 2 1 ``` **Output:** ``` 2 2 3 ``` Example 2 **Input:** ``` 2 4 2 1 1 1 1 2 2 2 2 ``` **Output:** ``` 1 1 ``` # Note In the first example, in the first row, there are two types of cells (1 and 2), so Alice can plant 2 distinct flower types. In the second row, there are types 2 and 3, so she can plant 2 distinct flower types. In the third row, all three types of cells (1, 2, and 3) are present, so she can plant all 3 distinct flower types. In the second example, every row contains only one type of cell, so Alice can plant only 1 distinct flower type in each row.","solution":"def max_distinct_flowers(grid): Returns a list where each element corresponds to the maximum number of distinct flower types that can be planted in each row. return [len(set(row)) for row in grid] def process_input(input_str): lines = input_str.strip().split(\\"n\\") n, m, k = map(int, lines[0].split()) grid = [list(map(int, lines[i + 1].split())) for i in range(n)] return max_distinct_flowers(grid)"},{"question":"Given an integer n, return the first n rows of Pascal\'s triangle. In Pascal\'s triangle, each number is the sum of the two numbers directly above it. ------ Input Format ------ - The first line contains an integer t, the number of test cases. - For each test case, there\'s a single integer n representing the number of rows. ------ Output Format ------ For each test case, print the first n rows of Pascal\'s triangle, each row on a new line. Rows should be separated by an empty line. ------ Constraints ------ 1 ≤ t ≤ 50 1 ≤ n ≤ 50 ----- Sample Input 1 ------ 2 5 3 ----- Sample Output 1 ------ 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 1 1 1 2 1","solution":"def generate_pascals_triangle(n): Generate the first n rows of Pascal\'s triangle. :param n: number of rows in Pascal\'s triangle :return: 2D list representing first n rows of Pascal\'s triangle triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) return triangle def handle_test_cases(t, cases): Handle the test cases and generate Pascal\'s triangle for each case. :param t: Number of test cases :param cases: List of integers representing the number of rows for each test case :return: None results = [] for n in cases: triangle = generate_pascals_triangle(n) formatted_output = \'n\'.join(\' \'.join(map(str, row)) for row in triangle) results.append(formatted_output) print(\'nn\'.join(results))"},{"question":"Tony is organizing a lightweight programming competition. To create a challenge about counting specific characters in strings, he needs your help to verify the correctness of the solutions provided by different participants. The goal is to determine the number of occurrences of a specific character in the given string. The character to be counted can appear multiple times and the input string may contain both lowercase and uppercase letters, digits, and special characters. The character comparison is case-sensitive. -----Input----- The input consists of two lines. The first line contains a string ( S ) of length not more than 1000, which may consist of various characters including lowercase, uppercase, digits, and special characters. The second line contains a single character ( C ) which you need to count in the string ( S ). -----Output----- Print a single integer — the number of occurrences of the character ( C ) in the string ( S ). -----Examples----- Input ProgrammingIsFun g Output 2 Input Count_ALL_the@Chars! @ Output 1 Input Hello_World! o Output 2","solution":"def count_char_occurrences(S, C): Returns the number of occurrences of character C in string S. The comparison is case-sensitive. return S.count(C)"},{"question":"Alice and Bob are playing a game called \\"Subsequence Sum.\\" The rules of the game are simple. They are given an array of N integers. Each player takes turns choosing a subsequence from the array such that the sum of the elements in the subsequence is even. The chosen subsequence can be of any length including a single element as long as its sum is even. The subsequence can be chosen from anywhere in the array, and the chosen elements do not have to be contiguous. However, once a subsequence is chosen, all its elements are removed from the array, and only the remaining elements can be used by the next player for their turn. Alice always goes first. The game continues until there are no more elements left in the array that could form a subsequence with an even sum. If a player cannot make a move, they lose the game. Both players play optimally, meaning they will always make the best possible move available. Your task is to determine the winner of the game for each test case. [INPUT]: The first line of input contains a single integer T denoting the number of test cases. For each test case: The first line contains a single integer N denoting the number of elements in the array. The second line contains N space-separated integers denoting the elements of the array. [OUTPUT]: For each test case, output a single line with the name of the winner (\\"Alice\\" or \\"Bob\\"). [CONSTRAINTS]: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 Note: The sum of N over all test cases will not exceed 10^6. [SAMPLE INPUT] 2 3 2 4 6 4 1 3 5 7 [SAMPLE OUTPUT] Alice Bob Explanation: For the first test case, Alice can choose the entire array [2, 4, 6], the sum is 12 which is even. Bob has no more moves left, hence Alice wins. For the second test case, there are no subsequences with an even sum. Alice cannot make any move, so Bob wins by default.","solution":"def determine_winner(test_cases): results = [] for case in test_cases: n, array = case even_count = sum(1 for x in array if x % 2 == 0) if even_count > 0: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results # Reading input and building test cases for execution def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) idx += 1 array = list(map(int, data[idx:idx+N])) idx += N test_cases.append((N, array)) results = determine_winner(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"In a distant land called algorithmia, there was a competition attended by the best coders of the realm. The challenge posed to the competitors was unique and tricky. The participants were tasked with solving a problem involving a peculiar operation on strings. The operation, named \\"flip-flop,\\" was defined as such: 1. Take a binary string s consisting of \'0\'s and \'1\'s. 2. In one operation, choose any substring of s and reverse it. The objective of the competition was to determine the minimum number of \\"flip-flop\\" operations required to transform a given binary string s into a string where all \'1\'s are on the left side and all \'0\'s are on the right side. Here’s how the competition team decided to formalize the problem in terms of input/output: INPUT FORMAT: Single integer on the first line, T (1 ≤ T ≤ 50), which indicates the number of test cases. Each of the next T lines contain a binary string s (1 ≤ |s| ≤ 10^5). OUTPUT FORMAT: For each binary string given as input, output a single integer indicating the minimum number of \\"flip-flop\\" operations needed. SAMPLE INPUT: 3 110 11001 10010 SAMPLE OUTPUT: 1 1 2 Explanation: - For the first binary string \\"110\\", reversing the substring \\"110\\" will transform it into \\"110\\", which is already sorted as per the required condition. - For the second binary string \\"11001\\", reversing the substring \\"1001\\" will transform it into \\"10011\\", and then reversing \\"011\\" will transform it into \\"11100\\", which is the required condition. - For the third binary string \\"10010\\", reversing the substring \\"001\\" will transform it into \\"1010\\", and then reversing \\"10\\" will transform it into \\"11000\\", which is the required condition. The best coders of algorithmia competed fiercely, but only those who could efficiently determine the minimum operations to achieve the goal emerged victorious. Can you create a solution to aid them in this competition?","solution":"def min_flip_flop_operations(binary_strings): results = [] for s in binary_strings: operations = 0 # Check for the first occurrence of \'10\' i = 0 while i < len(s) - 1: if s[i] == \'1\' and s[i + 1] == \'0\': operations += 1 # Continue finding the next such pair while i < len(s) - 1 and s[i] == \'1\' and s[i + 1] == \'0\': i += 1 i += 1 results.append(operations) return results"},{"question":"Given an array of integers A of length N, you can perform the following operation any number of times (including zero): Choose any subarray of A and replace each element of that subarray with the maximum element of that subarray. Your task is to determine the minimum number of such operations required to make the entire array non-decreasing. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ A[i] ≤ 1000 - A[i] is an integer. -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print the minimum number of operations required. -----Sample Input----- 5 3 1 4 1 5 -----Sample Output----- 2 To make the array [3, 1, 4, 1, 5] non-decreasing, you can perform the following operations: 1. Replace the subarray [3, 1] with [3, 3], resulting in [3, 3, 4, 1, 5] 2. Replace the subarray [1, 5] with [5, 5], resulting in [3, 3, 4, 5, 5] Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_non_decreasing(N, A): operations = 0 current_max = A[0] for i in range(1, N): if A[i] < current_max: operations += 1 else: current_max = A[i] return operations"},{"question":"Given an array of integers, find three distinct elements in the array such that their sum is closest to a target value given as input. Return the sum of these three integers. Input Array of integers and target value Output Sum of three integers closest to the target value Example Input: [-1, 2, 1, -4] 1 Output: 2 (Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2))","solution":"def three_sum_closest(nums, target): Returns the sum of three integers in nums such that the sum is closest to the target. nums: List[int] - List of integers. target: int - The target sum. nums.sort() closest_sum = float(\'inf\') n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if abs(current_sum - target) < abs(closest_sum - target): closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum"},{"question":"You are given an integer n. Write a Python function that returns a list of the first n Fibonacci numbers, where the first two Fibonacci numbers are 0 and 1. Input The input consists of a single integer n (1 ≤ n ≤ 50). Output Return a list containing the first n Fibonacci numbers. Examples Input 5 Output [0, 1, 1, 2, 3] Input 10 Output [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]","solution":"def fibonacci(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] fib_seq = [0, 1] while len(fib_seq) < n: next_fib = fib_seq[-1] + fib_seq[-2] fib_seq.append(next_fib) return fib_seq[:n]"},{"question":"You are tasked with managing the water distribution for a community over a period of n days. Each day, one of the following events will occur: 1) A rainwater tank of capacity C becomes available. You can choose to use it to fill water from rainfall. 2) A request is made to distribute D liters of water to the community. You can fulfill this request if the tank currently has at least D liters of water. You can only manage one tank at a time. Once you decide to use a new tank, the previous tank and its contents are discarded. However, if you choose to stick with the current tank, the water in it may increase due to rainfall on certain days. Given the sequence of events, write a program to determine the maximum amount of water you can distribute to the community. Input: The first line contains an integer n denoting the number of days. Each of the next n lines contains the description of the event on that particular day: - If a tank of capacity C becomes available, the line contains \\"tank\\" followed by a blank space and the integer C. - If there is a request for D liters of water, the line contains \\"request\\" followed by a blank space and the integer D. Output: Output the maximum amount of water, in liters, that you can distribute to the community. Constraints: 1 ≤ n ≤ 10000 1 ≤ C, D ≤ 100000 Example Input: 5 tank 100 request 50 tank 200 request 150 request 100 Output: 200 Explanation: 1. On day 1, a tank of capacity 100 is made available. You choose to use this tank. 2. On day 2, a request for 50 liters of water is fulfilled. 3. On day 3, a tank of capacity 200 is made available. You switch to this new tank. 4. On day 4, a request for 150 liters of water is fulfilled. 5. On day 5, a request for 100 liters of water is also fulfilled from the same tank, making a total of 200 liters distributed.","solution":"def max_water_distributed(n, events): Determines the maximum amount of water distributed based on a series of events. Parameters: n (int): The number of days. events (list of str): A list of event descriptions, where each event is either a tank or a request. Returns: int: Maximum amount of water distributed to the community. # Initialize variables current_tank_capacity = 0 current_tank_water = 0 total_distributed = 0 # Process each event for event in events: event_split = event.split() if event_split[0] == \\"tank\\": # New tank event new_tank_capacity = int(event_split[1]) current_tank_capacity = new_tank_capacity current_tank_water = new_tank_capacity elif event_split[0] == \\"request\\": # Water request event request_amount = int(event_split[1]) if current_tank_water >= request_amount: current_tank_water -= request_amount total_distributed += request_amount return total_distributed"},{"question":"Given an integer n, find any permutation of the first n natural numbers (1 through n) such that the permutation does not contain any decreasing subsequence of length exactly 3. -----Input----- The only line contains an integer n (1 le n le 10^5). -----Output----- If there exists such a permutation, print the permutation as a single line of n integers. If no such permutation exists, print \\"-1\\". -----Examples----- Input 1 Output 1 Input 3 Output 1 2 3 Input 4 Output 1 3 4 2 Input 8 Output 1 3 4 7 8 2 5 6 -----Note----- In the first sample, the only permutation of 1 element is trivially correct. In the second sample, the permutation (1, 2, 3) does not contain any decreasing subsequence of length 3. In the third sample, the permutation (1, 3, 4, 2) avoids any three elements in decreasing order. In the fourth sample, the permutation (1, 3, 4, 7, 8, 2, 5, 6) avoids any three elements in decreasing order.","solution":"def find_permutation(n): Finds a permutation of the first n natural numbers that does not contain any decreasing subsequence of length exactly 3. if n <= 2: return list(range(1, n + 1)) # Divide the first n numbers into two parts: odd and even index odds = [i for i in range(1, n + 1, 2)] evens = [i for i in range(2, n + 1, 2)] return odds + evens"},{"question":"You are organizing a competition where participants must form the longest possible sequence of unique moves on a chessboard starting from a given position. The chessboard is represented by an n times n grid, and the starting position of the player is (x, y). The player can move to any of the horizontally, vertically, or diagonally adjacent cells. However, the player cannot step on the same cell more than once. Determine the longest path the player can take from the starting position. -----Input----- The first line contains an integer n (1 le n le 1000) — the size of the chessboard. The second line contains two integers x and y (1 le x, y le n) — the starting position of the player. -----Output----- Output the length of the longest path the player can take on the chessboard from the starting position (x, y) without stepping on any cell more than once. -----Example----- Input 3 2 2 Output 9 Input 4 1 1 Output 16 -----Note----- In the first example, starting from the position (2, 2), the player can visit all 9 cells on the 3 times 3 board in any valid move sequence. In the second example, starting from the position (1, 1) on a 4 times 4 board, the player can visit all 16 cells. (Note: The player can traverse all the cells in an n times n grid, but the answer will still be the total number of cells as the longest path since it doesn\'t restrict direction beyond not revisiting a cell.)","solution":"def longest_path(n, x, y): Returns the length of the longest path the player can take on the chessboard. return n * n"},{"question":"Maria is planning a treasure hunt on a m x n grid where each cell may contain a certain amount of treasure or may be empty. Maria wants to extract the maximum treasure possible starting from the top-left corner of the grid (cell (0, 0)) and moving to the bottom-right corner of the grid (cell (m-1, n-1)). She can only move down, right, or diagonally to the bottom-right (i.e., from cell (i, j) to cell (i+1, j+1)). Write a program to help Maria determine the maximum amount of treasure she can collect. -----Input----- The first line contains two integers m and n (1 ≤ m, n ≤ 200), the number of rows and columns in the grid respectively. Each of the following m lines contains n integers representing the amount of treasure in each cell of the grid. The value in each cell is an integer between 0 and 100. -----Output----- Output a single integer, the maximum amount of treasure Maria can collect. -----Examples----- Sample Input: 3 4 0 2 0 4 1 0 3 1 2 3 4 0 Sample Output: 10","solution":"def max_treasure(m, n, grid): # Create a dp array same size as the grid, to keep track of max treasure to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the dp array row by row for i in range(m): for j in range(n): if i == 0 and j == 0: continue max_previous = 0 if i > 0: max_previous = max(max_previous, dp[i-1][j]) if j > 0: max_previous = max(max_previous, dp[i][j-1]) if i > 0 and j > 0: max_previous = max(max_previous, dp[i-1][j-1]) dp[i][j] = grid[i][j] + max_previous # The maximum treasure will be in the bottom-right corner return dp[m-1][n-1] # Example usage: # m, n = 3, 4 # grid = [ # [0, 2, 0, 4], # [1, 0, 3, 1], # [2, 3, 4, 0] # ] # print(max_treasure(m, n, grid)) # Output: 10"},{"question":"In the kingdom of Graphland, the roads between cities form a hierarchical structure, akin to a tree. The cities are numbered from 1 to n, with city 1 as the capital. Every other city has exactly one direct road connecting it to a unique parent city. This creates a network where each city can trace a direct path back to the capital. The roads are quite special in Graphland: each road\'s length is represented as a positive integer. The primary concern of the Graphland government is to determine the farthest distance a message would travel if it originates from the capital and spreads to all other cities via the roads. # Problem Given the tree structure of the cities and the length of each road, determine the maximum distance a message must travel from the capital to any city in the network. # Input: - The first line contains an integer n (2 ≤ n ≤ 1000) — the number of cities in Graphland. - The following n - 1 lines each describe a road: each line contains two integers `u` and `v` (1 ≤ u, v ≤ n), representing a road from city u to city v, followed by an integer `l` (1 ≤ l ≤ 10000), representing the length of this road. # Output: - Print a single integer, the maximum distance a message travels from the capital to any other city. # Example Input: ``` 5 1 2 4 1 3 2 3 4 8 3 5 3 ``` Output: ``` 10 ``` # Explanation: The distances from the capital (city 1) to each of the cities are as follows: - City 2: 4 (1 -> 2) - City 3: 2 (1 -> 3) - City 4: 10 (1 -> 3 -> 4) - City 5: 5 (1 -> 3 -> 5) The farthest distance is 10 (from city 1 to city 4). Hence, the output is 10.","solution":"def max_distance_from_capital(n, roads): from collections import defaultdict, deque # Create an adjacency list for the tree adjacency_list = defaultdict(list) for u, v, l in roads: adjacency_list[u].append((v, l)) adjacency_list[v].append((u, l)) # BFS to find the maximum distance from the capital (city 1) def bfs(start): visited = [False] * (n + 1) max_distance = [0] * (n + 1) queue = deque([(start, 0)]) # (current_city, current_distance) visited[start] = True while queue: current_city, current_distance = queue.popleft() for neighbor, distance in adjacency_list[current_city]: if not visited[neighbor]: visited[neighbor] = True max_distance[neighbor] = current_distance + distance queue.append((neighbor, max_distance[neighbor])) return max(max_distance) return bfs(1)"},{"question":"Monica is working on a project that involves streaming data from multiple sources. Each source provides data points in the form of integers at distinct timestamps. Monica needs to merge these data points into a single stream, sorted by timestamps. For simplicity, assume that no two data points have the same timestamp. Write a function that takes a list of lists, where each sublist represents a stream of data points from a source, formatted as [(timestamp, value)]. Merge these into a single list, sorted by timestamp. -----Input----- The input is given as a list of n lists. Each sublist contains tuples of integers of the form (timestamp, value), and the timestamps are given in increasing order within each sublist. Each sublist contains at most 100 elements, and their timestamps are guaranteed to be unique across all sublists. -----Output----- The output should be a single list of tuples (timestamp, value), sorted by timestamp. -----Examples----- Input [ [(1, 100), (2, 200), (5, 500)], [(3, 300), (4, 400)] ] Output [(1, 100), (2, 200), (3, 300), (4, 400), (5, 500)] Input [ [(1, 10), (4, 40)], [(2, 20), (5, 50)], [(3, 30), (6, 60)] ] Output [(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)] Input [ [(2, 15), (8, 80)], [(3, 25), (7, 70)], [(1, 5), (4, 45), (9, 90)] ] Output [(1, 5), (2, 15), (3, 25), (4, 45), (7, 70), (8, 80), (9, 90)] -----Note----- In the first example, the function merges the input lists maintaining the ascending order of the timestamps. In the second example, the timestamps are interleaved across the input lists, and the function merges them correctly in a sorted manner. In the third example, the function combines three sublists with overlapping timestamps and sorts them in ascending order.","solution":"import heapq def merge_streams(streams): Merges multiple streams of data points sorted by timestamp. Args: streams (list of list of tuples): Each sublist contains tuples (timestamp, value). Returns: list of tuples: A single merged list sorted by timestamp. merged_stream = [] min_heap = [] # Initialize the heap with the first element of each stream along with the stream index for i, stream in enumerate(streams): if stream: heapq.heappush(min_heap, (stream[0][0], stream[0][1], i, 0)) # Process the heap while min_heap: timestamp, value, stream_idx, element_idx = heapq.heappop(min_heap) merged_stream.append((timestamp, value)) # If there are more elements in the same stream, add the next one to the heap if element_idx + 1 < len(streams[stream_idx]): next_element = streams[stream_idx][element_idx + 1] heapq.heappush(min_heap, (next_element[0], next_element[1], stream_idx, element_idx + 1)) return merged_stream"},{"question":"Write a function `partition_linked_list` that takes the head of a singly linked list and an integer `x`, and partitions the linked list such that all nodes less than `x` come before nodes greater than or equal to `x`. The relative order of the nodes in each of the two partitions should be preserved. For example, given the linked list `1 -> 4 -> 3 -> 2 -> 5 -> 2` and `x = 3`, the solution should return `1 -> 2 -> 2 -> 4 -> 3 -> 5`. Here is the definition for a singly linked list node: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Implement the `partition_linked_list` function: ```python def partition_linked_list(head: ListNode, x: int) -> ListNode: # Your code here ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition_linked_list(head: ListNode, x: int) -> ListNode: # Create two dummy heads for less and greater/equal partitions less_head, greater_head = ListNode(0), ListNode(0) less, greater = less_head, greater_head # Pointers to build the lists while head: if head.val < x: less.next = head less = less.next else: greater.next = head greater = greater.next head = head.next greater.next = None # End the list of greater values less.next = greater_head.next # Connect the less list to the greater list return less_head.next # Return the start of the concatenated list"},{"question":"In a distant world, magical fruits are cultivated in two farms: the Sun Orchard and the Moon Grove. Each fruit has a unique magical essence that can only be harnessed if combined in pairs, one fruit from each farm. Every valid pair yields a certain amount of magical power. To maximize their magical energy harvest, the elders of the village need to select pairs of fruits such that the total magical power is maximized. Each fruit can only be used in one pair, and every pair consists of exactly one fruit from the Sun Orchard and one fruit from the Moon Grove. Write a program to determine the maximum total magical power that can be harvested from a given list of pairs of fruits and their associated powers. -----Input----- The first line of the input contains two integers n (1 leq n leq 1000), the number of fruits in the Sun Orchard, and m (1 leq m leq 1000), the number of fruits in the Moon Grove. The next k lines each contain three integers a_i (0 leq a_i < n), b_i (0 leq b_i < m), and p_i (1 leq p_i leq 10000), specifying that the fruit a_i from the Sun Orchard and the fruit b_i from the Moon Grove can be paired and yield p_i units of magical power. It is guaranteed that there are no duplicate pairs. -----Output----- Display a single integer: the maximum total magical power that can be harvested by optimally pairing the fruits. -----Examples----- Sample Input: 3 3 4 0 0 10 0 1 15 1 0 20 1 2 25 Sample Output: 40","solution":"def max_magical_power(n, m, fruit_pairs): from collections import defaultdict import heapq graph = defaultdict(list) for ai, bi, pi in fruit_pairs: graph[ai].append((bi, pi)) sun_heap = [] for i in range(n): if graph[i]: graph[i].sort(key=lambda x: -x[1]) sun_heap.append((graph[i][0][1], i, 0)) heapq.heapify(sun_heap) moon_used = [False] * m total_power = 0 while sun_heap: power, sun_fruit, index = heapq.heappop(sun_heap) moon_fruit, associated_power = graph[sun_fruit][index] if moon_used[moon_fruit]: if index + 1 < len(graph[sun_fruit]): heapq.heappush(sun_heap, (graph[sun_fruit][index+1][1], sun_fruit, index+1)) continue total_power += power moon_used[moon_fruit] = True return total_power # Parsing input (method would be necessary for actual usage but not required in this specific structure) def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) fruit_pairs = [] index = 3 while k > 0: a_i = int(data[index]) b_i = int(data[index + 1]) p_i = int(data[index + 2]) fruit_pairs.append((a_i, b_i, p_i)) index += 3 k -= 1 print(max_magical_power(n, m, fruit_pairs))"},{"question":"Given a string of lowercase English letters, write a program that determines the length of the longest substring without repeating characters. # Input The input consists of a single line containing the string s (1 ≤ |s| ≤ 100000). # Output Output a single integer representing the length of the longest substring without repeating characters. # Examples Example 1 **Input:** ``` abcabcbb ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"abc\\", with the length of 3. Example 2 **Input:** ``` bbbbb ``` **Output:** ``` 1 ``` **Explanation:** The answer is \\"b\\", with the length of 1. Example 3 **Input:** ``` pwwkew ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): n = len(s) if n == 0: return 0 char_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A teacher wants to distribute candies to her students. She has a total of c candies and n students. She wants to distribute the candies in such a way that each student gets at least one candy. Any remaining candies will be kept by the teacher. Write a program to calculate the minimum and maximum number of candies that the teacher can have after distributing candies to the students. -----Input----- The input consists of two integers c and n (1 ≤ n ≤ c ≤ 1000) — the total number of candies and the number of students. -----Output----- Print two space-separated integers — the minimum number of candies the teacher can have and the maximum number of candies the teacher can have after distributing the candies to the students. -----Examples----- Input 10 3 Output 1 1 Input 15 4 Output 3 3 Input 7 7 Output 0 0 -----Note----- In the first sample, the teacher can distribute candies as follows: - Give each student 3 candies, she will have 1 left. - She cannot have more than 1 candy left, as she needs to give at least one candy to each student.","solution":"def candies_distribution(c, n): Calculates the minimum and maximum number of candies the teacher can have after distributing candies to students. :param c: Total number of candies :param n: Number of students :return: A tuple (min_candies_left, max_candies_left) min_candies_left = c % n max_candies_left = c - n if max_candies_left < 0: max_candies_left = 0 return min_candies_left, min_candies_left"},{"question":"Given a list of applications running on a computer and their respective resource usage (CPU and Memory), the management wants to optimize the resource allocation. Each application may increase or decrease the amount of CPU and Memory it uses over time. Given a snapshot of the system\'s resource usage at different time intervals, determine the maximum CPU and Memory used by a specific application within the given time frame. INPUT: First line contains an integer T, the number of time intervals. Next T sections contain: - The number of applications running during that time interval, A. - Followed by A lines, each containing the application\'s name (a string), CPU usage (an integer), and Memory usage (an integer). Finally, contain the application\'s name for which we want to determine the max CPU and Memory usage over the given intervals. OUTPUT: Single line with two integers separated by a space: the maximum CPU and Memory usage of the given application across all intervals. If the application is not found in any interval, output \\"Application Not Found\\". SAMPLE INPUT 3 2 App1 50 100 App2 30 200 3 App1 60 150 App2 40 180 App3 25 80 1 App2 20 90 App1 SAMPLE OUTPUT 60 150","solution":"def max_usage(T, intervals, target_app): Determine the maximum CPU and Memory usage of the given application across all intervals. Parameters: T (int): Number of time intervals. intervals (list): List containing information about each time interval. Each item in the list is a tuple of (number of applications, list of application details). Application details are represented as (name, CPU usage, Memory usage). target_app (str): The application\'s name for which we want to determine the max CPU and Memory usage. Returns: str: Two integers separated by a space representing the max CPU and Memory usage or \\"Application Not Found\\". max_cpu = -1 max_memory = -1 for interval in intervals: A, apps = interval for app in apps: name, cpu, memory = app if name == target_app: if cpu > max_cpu: max_cpu = cpu if memory > max_memory: max_memory = memory if max_cpu == -1 and max_memory == -1: return \\"Application Not Found\\" else: return f\\"{max_cpu} {max_memory}\\""},{"question":"The architects of CodeCity are planning to build three skyscrapers with unique window patterns for each side. They need your help to determine the position of the windows on the facades based on a set of given constraints. The skyscrapers can have up to four sides each, and the windows are represented as integers indicating the number of windows on each side. You must determine the number of windows for each side such that the total number of windows for all sides of each skyscraper fall within a specified range. ---Input--- The first line contains an integer k (1 le k le 3), the number of skyscrapers. For each skyscraper, two subsequent lines are provided: The first line contains four integers a, b, c, d (0 le a, b, c, d le 100) representing possible window counts for sides, with at least one non-zero integer. The second line contains two integers low and high (0 le low le high le 400) representing the acceptable range of the total window count for that skyscraper. ---Output--- Output the number of windows for each side of the skyscrapers in the format shown below. Each skyscraper\'s window counts must be printed on a single line. If it is impossible to achieve the specified window count range for any of the skyscrapers, print \'impossible\' for that skyscraper. ---Examples--- Sample Input: 2 10 20 30 40 50 100 0 15 20 0 25 50 Sample Output: 10 20 30 40 0 15 20 0","solution":"def determine_windows_count(k, skyscrapers): results = [] for i in range(k): a, b, c, d = skyscrapers[i][0] low, high = skyscrapers[i][1] total_windows = a + b + c + d if low <= total_windows <= high: results.append(f\\"{a} {b} {c} {d}\\") else: results.append(\\"impossible\\") return results"},{"question":"Suzuki is organizing a charity event and needs to keep track of donations given by the participants. Each participant can donate any positive integer amount of money. Suzuki wants to create a list of top donors, but the list should be limited to donors who have donated amounts that are greater than or equal to a specified minimum threshold. You will be given a list of integers representing the donation amounts and a positive integer representing the minimum threshold. Your task is to filter out all donations less than the minimum threshold and return a list of donations that meet or exceed the threshold in descending order. Write a function `top_donors(donations, threshold)` that takes in two inputs: - `donations`: a list of positive integers representing donation amounts. - `threshold`: a positive integer representing the minimum threshold. The function should return a list of integers representing the donations that meet or exceed the threshold, sorted in descending order. # Examples ```python top_donors([50, 120, 75, 30, 200, 60], 70) # Output: [200, 120, 75] top_donors([10, 25, 50, 100, 5, 150, 200, 75], 50) # Output: [200, 150, 100, 75, 50] top_donors([10, 20, 30, 40, 50], 100) # Output: [] ``` # Constraints - The number of elements in the list will be between 1 and 1000. - Each donation amount will be a positive integer between 1 and 10^6.","solution":"def top_donors(donations, threshold): Returns a list of donations that meet or exceed the threshold, sorted in descending order. Parameters: donations (list of int): List of donation amounts. threshold (int): Minimum threshold for donations. Returns: list of int: Donations that meet or exceed the threshold, sorted in descending order. # Filter donations to keep only those that meet or exceed the threshold filtered_donations = [donation for donation in donations if donation >= threshold] # Sort the filtered donations in descending order filtered_donations.sort(reverse=True) return filtered_donations"},{"question":"Write a function `decodeString(s: str) -> str` that takes a string `s` as input and returns the decoded string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. It is also guaranteed that the input string is valid; no extra white spaces, square brackets are well-formed, etc. Examples: ``` decodeString(\\"3[a]2[bc]\\") -> \\"aaabcbc\\" decodeString(\\"3[a2[c]]\\") -> \\"accaccacc\\" decodeString(\\"2[abc]3[cd]ef\\") -> \\"abcabccdcdcdef\\" ``` Constraints: - 1 <= len(s) <= 30 - s consists of lowercase English letters, digits, and square brackets - The numerical value of `k` is in the range [1, 300] Function Signature: ```python def decodeString(s: str) -> str: pass ``` # Explanation: The function should decode the string by expanding the encoded parts as specified in the input format, reconstructing the resulting string. For instance, in `\\"3[a]2[bc]\\"`, `3[a]` means the substring `\\"a\\"` should be repeated 3 times, resulting in `\\"aaa\\"`. Similarly, `2[bc]` means the substring `\\"bc\\"` should be repeated 2 times, resulting in `\\"bcbc\\"`. Concatenate all results to get the final decoded string.","solution":"def decodeString(s: str) -> str: def helper(index): decoded = [] k = 0 while index < len(s): if s[index].isdigit(): k = k * 10 + int(s[index]) elif s[index] == \'[\': index, inner_decoded = helper(index + 1) decoded.append(inner_decoded * k) k = 0 elif s[index] == \']\': return index, \'\'.join(decoded) else: decoded.append(s[index]) index += 1 return \'\'.join(decoded) return helper(0)"},{"question":"You are organizing a marathon with various tracks. Each track is uniquely identified by an integer ID, and runners can choose which tracks they would like to run and their expected finish times for each track. You aim to find a track where the sum of all expected finish times is minimized. Consider the following definitions: Each runner will provide a list of preferred tracks they would like to run along with their expected finish times on those tracks. Determine the track that has the lowest sum of expected finish times of all runners who selected that track. If there is a tie, choose the track with the smallest numerical ID. -----Input----- - One line containing an integer T, the number of test cases in the input file. For each test case, there will be: - One line containing the integer N, the number of runners. - N lines, one for each runner, each containing a sequence of space-separated numbers. The first number in the sequence is an integer K (the number of preferred tracks the runner chooses). The following K pairs of integers represent a track ID and an expected finish time in minutes. You may assume that: - 1 leq T leq 5 - 1 leq N leq 300 - 1 leq K leq 5 - Track IDs are positive integers not exceeding 100 - Finish times are positive integers not exceeding 500 -----Output----- - T lines, one for each test case in the order they occur in the input file, each containing the string “Case #X: Y” where X is the number of the test case, starting from 1, and Y is the ID of the track with the lowest sum of expected finish times. -----Examples----- Sample Input: 2 3 2 1 20 3 50 1 2 30 2 1 15 2 25 2 1 1 50 1 2 40 Sample Output: Case #1: 1 Case #2: 2","solution":"def find_optimal_track(test_cases): results = [] for idx, case in enumerate(test_cases): n = case[0] runners = case[1] track_times = {} for runner in runners: k = runner[0] preferred_tracks = runner[1:] for i in range(0, len(preferred_tracks), 2): track_id = preferred_tracks[i] finish_time = preferred_tracks[i + 1] if track_id in track_times: track_times[track_id] += finish_time else: track_times[track_id] = finish_time optimal_track = min(track_times, key=lambda x: (track_times[x], x)) results.append(f\\"Case #{idx + 1}: {optimal_track}\\") return results def parse_input(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) runners = [] for i in range(n): runner_data = list(map(int, lines[index + i + 1].split())) runners.append(runner_data) test_cases.append((n, runners)) index += n + 1 return test_cases"},{"question":"Given a set of `N` students with their marks in a subject, you have to determine the maximum number of students who can pass the subject if the passing criteria changes dynamically based on a given percentage. You will be provided with the marks obtained by each student, and you have to return the maximum number of students that can be considered as having passed if the passing threshold is set to the top P% of the highest scores. Input The first line contains an integer `T` denoting the number of test cases. Each test case contains two lines: - The first line of a test case will have two integers `N` and `P`, where `N` is the number of students and `P` is the percentage. - The second line contains `N` integers separated by space, representing the marks obtained by each student. Output For each test case, print the maximum number of students who can be considered as having passed. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ P ≤ 100 0 ≤ marks ≤ 100 SAMPLE INPUT 2 5 40 50 80 30 90 100 4 50 40 50 60 70 SAMPLE OUTPUT 2 2 Explanation In Test Case 1: N = 5, P = 40 The marks obtained by students are [50, 80, 30, 90, 100]. The top 40% of students\' scores need to be considered as the passing threshold. The top 40% of 5 students is 2 students (as 40% of 5 is 2). The highest scores are [100, 90, 80, 50, 30]. Thus, the maximum number of students who can pass is 2. In Test Case 2: N = 4, P = 50 The marks obtained by students are [40, 50, 60, 70]. The top 50% of students\' scores need to be considered as the passing threshold. The top 50% of 4 students is 2 students (as 50% of 4 is 2). The highest scores are [70, 60, 50, 40]. Thus, the maximum number of students who can pass is 2.","solution":"def max_students_passing(T, test_cases): results = [] for i in range(T): N, P = test_cases[i][:2] marks = test_cases[i][2:] k = N * P // 100 results.append(k) return results # Example usage: # T = 2 # test_cases = [ # (5, 40, [50, 80, 30, 90, 100]), # (4, 50, [40, 50, 60, 70]) # ] # print(max_students_passing(T, test_cases)) # This would output [2, 2]"},{"question":"Jorah is studying topology and loves to test the connectivity of various node networks. He’s developed a system that can perform basic checks to determine whether a graph is fully connected. Given a list of edges that describe the connections between nodes, Jorah wants to write a program to check if the graph is fully connected. In this problem, you’ll be given multiple test cases, each one describing an undirected graph using a list of edges. Your task is to determine if each graph is fully connected, meaning there is a path between any pair of nodes in the graph. # Input: - The input consists of multiple test cases. - Each test case starts with two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) separated by a space, where n is the number of nodes and m is the number of edges. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between nodes u and v. - The input ends with a line containing two zeroes \\"0 0\\". # Output: - For each test case, output \\"YES\\" if the graph is fully connected, and \\"NO\\" otherwise. # Constraints: - Nodes are numbered from 1 to n. - The number of nodes n will be at most 1000. - The number of edges m will be at most 10000. # Example: Input: ``` 4 2 1 2 3 4 4 3 1 2 2 3 3 4 3 0 2 1 1 2 0 0 ``` Output: ``` NO YES NO YES ``` # Explanation: 1. The first graph has 4 nodes and 2 edges. There are two disconnected components: {1,2} and {3,4}. Therefore, it is not fully connected. 2. The second graph has 4 nodes and 3 edges, forming a single connected component. Therefore, it is fully connected. 3. The third graph has 3 nodes and 0 edges, meaning all nodes are isolated. Therefore, it is not fully connected. 4. The fourth graph has 2 nodes and 1 edge, forming a single connected component. Therefore, it is fully connected. Implement the function to read the input, process each test case, and output the result for each graph in the form of \\"YES\\" or \\"NO\\".","solution":"def is_graph_connected(n, m, edges): from collections import defaultdict, deque if n == 0: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([1]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"YES\\" if len(visited) == n else \\"NO\\" def process_input(input_data): input_lines = input_data.strip().split(\'n\') i = 0 results = [] while i < len(input_lines): n, m = map(int, input_lines[i].split()) i += 1 if n == 0 and m == 0: break edges = [] for _ in range(m): u, v = map(int, input_lines[i].split()) edges.append((u, v)) i += 1 results.append(is_graph_connected(n, m, edges)) return \\"n\\".join(results)"},{"question":"Write a function that simulates traffic light cycles for a pedestrian crossing. The traffic light operates with three distinct signals: red, yellow, and green. The duration for each signal is as follows: - Red: 60 seconds - Green: 75 seconds - Yellow: 5 seconds The pedestrian can press a button to request crossing. When the button is pressed, if the light is green or yellow, the pedestrian waits until the next red signal to start crossing. The button press does not reset the cycle but ensures the pedestrian will cross at the next red light. Your task is to determine how long a pedestrian needs to wait after pressing the button. The function should take the following parameters: - `current_time` (integer): The current time in seconds since the start of a traffic light cycle. - `button_pressed` (boolean): Indicates whether the pedestrian has requested to cross. For simplicity, assume that the traffic light always starts with the red signal at time = 0 seconds. Output Return the number of seconds the pedestrian needs to wait after pressing the button. If the button is not pressed, return 0. Input The first line contains an integer `current_time` (0 ≤ current_time < 140), indicating the current time in the traffic light cycle. The second line contains a boolean `button_pressed` (true or false), indicating whether the button has been pressed by the pedestrian. Output Print the number of seconds the pedestrian needs to wait. Examples Input 45 true Output 15 Input 80 false Output 0","solution":"def wait_time_for_pedestrian(current_time, button_pressed): Returns the waiting time for a pedestrian after pressing the button. :param current_time: int, the current time in the traffic light cycle. :param button_pressed: bool, indicates whether the button has been pressed by the pedestrian. :return: int, the number of seconds the pedestrian needs to wait. if not button_pressed: return 0 cycle_period = 140 # total cycle time in seconds (sum of red, green, yellow durations) green_duration = 75 yellow_duration = 5 red_duration = 60 # Calculate the time since the start of the last red signal cycle_time = current_time % cycle_period if cycle_time < red_duration: return 0 else: return cycle_period - cycle_time"},{"question":"Evaluating Expression Given a mathematical expression string input that consists of non-negative integers and the operators `+`, `-`, `*`, and `/` (no parenthesis), evaluate the expression and return the result as an integer. --- Input * A string `s` representing the mathematical expression * The input string does not contain spaces and is guaranteed to be a valid expression. Example * Input: \\"3+2*2\\" * Output: 7 * Input: \\" 3/2 \\" * Output: 1 * Input: \\" 3+5 / 2 \\" * Output: 5 Notes * You must handle both addition `+` and subtraction `-` and multiplication `*` and division `/`. * Integer division should truncate towards zero. ```if:c * For `C` code ensure to handle string parsing appropriately. ```","solution":"def evaluate_expression(s: str) -> int: Evaluates a mathematical expression containing non-negative integers and operators +, -, *, /. :param s: A string representing the mathematical expression :return: The result of the evaluation as an integer if not s: return 0 stack = [] num = 0 sign = \'+\' s = s.replace(\' \', \'\') for i, ch in enumerate(s): if ch.isdigit(): num = num * 10 + int(ch) if ch in \'+-*/\' or i == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': # Integer division that truncates towards zero stack[-1] = int(stack[-1] / num) sign = ch num = 0 return sum(stack)"},{"question":"Given an N x N matrix of integers, rotate the matrix 90 degrees clockwise. To illustrate a rotation, consider the following 4x4 matrix: ``` [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` After rotating the matrix 90 degrees clockwise, it becomes: ``` [ [13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4] ] ``` # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input * `matrix`: a list of lists of integers representing an N x N matrix (1 ≤ N ≤ 1000). # Output * Returns a new matrix which is the original matrix rotated by 90 degrees clockwise. # Examples ```python assert rotate_matrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] assert rotate_matrix([ [1, 2], [3, 4] ]) == [ [3, 1], [4, 2] ] ``` # Additional Notes * The input matrix will always be a square matrix.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates an NxN matrix 90 degrees clockwise. Parameters: matrix (List[List[int]]): an NxN matrix to rotate. Returns: List[List[int]]: the rotated matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Binu is studying computer science and needs to pass her upcoming coding exam. The exam pattern consists of multiple choice questions, each with one correct answer. Unfortunately, Binu finds it challenging to directly determine the correct answers and decides to rely on her ability to make intelligent guesses. Her friend Jinu offers to help by providing a list of questions she might face on the exam. For each question, Binu can make a certain number of attempts before deciding the final answer. She needs to maximize her chances of passing the exam by ensuring that she answers as many questions correctly as possible. Jinu gives her the following information: for each question, an integer n which denotes the maximum number of attempts Binu can make. Help Binu calculate the maximum number of correct answers she can secure if she makes optimal guesses. ----Input---- - The first line contains an integer q (1 ≤ q ≤ 100) denoting the number of questions. - The second line contains q integers a_1, a_2, ..., a_q (1 ≤ a_{i} ≤ 10) denoting the number of attempts she can make for each question. ----Output---- Print a single integer – the maximum number of questions Binu can answer correctly. ----Examples---- Input 3 1 2 3 Output 3 Input 5 1 1 1 1 1 Output 5 ----Explanation---- In the first example, for each question, Binu makes the maximum number of attempts she can afford: - For the first question, she has only 1 attempt, so she must guess correctly on the first try. - For the second question, she has 2 attempts; even if she guesses wrongly on the first attempt, she has another chance and will get it right. - For the third question, she can try up to 3 times, ensuring she gets it right within those tries. In the second example, Binu has exactly one attempt for each question. This means she has to get them all right in her first tries. Binu can always get the answer right within the given number of attempts, so the output is simply the total number of questions.","solution":"def max_correct_answers(q, attempts): Returns the maximum number of questions Binu can answer correctly. Parameters: q (int): The number of questions. attempts (list): List of integers where each integer denotes the maximum number of attempts Binu can make for each question. Returns: int: The maximum number of questions Binu can answer correctly. return q # Sample Input # q = 3 # attempts = [1, 2, 3] # Output: 3 # q = 5 # attempts = [1, 1, 1, 1, 1] # Output: 5"},{"question":"Cece\'s street is having a number decoration contest. Every house has a number, and residents decorate the number with clouds, which makes it hard to read. The numbers can contain additional leading zeros, but when you consider an original number, all the leading zeros should be ignored. For the purposes of the contest, we need to compare these numbers without leading zeros. Your job is to create a function that receives two strings with decorative numbers and determines which house number is numerically greater. -----Input----- The input consists of two lines. Each line contains a string representation of the decorated house number. Each string can have up to 100 characters and may contain leading zeros. -----Output----- Output a single line containing \\"FIRST\\" if the first number is greater, \\"SECOND\\" if the second number is greater, and \\"EQUAL\\" if the numbers are the same. -----Examples----- Input 00123 0123 Output EQUAL Input 055 44 Output FIRST Input 0003 0004 Output SECOND -----Note----- Leading zeros are ignored when comparing numerical values. For example, \\"00123\\" and \\"123\\" represent the same value for the purposes of the contest.","solution":"def compare_decorated_numbers(num1, num2): Compares two strings representing decorated house numbers, ignoring leading zeros. Parameters: - num1: str, first decorated number - num2: str, second decorated number Returns: - str, \\"FIRST\\" if num1 is greater, \\"SECOND\\" if num2 is greater, \\"EQUAL\\" if both are the same stripped_num1 = num1.lstrip(\'0\') stripped_num2 = num2.lstrip(\'0\') if stripped_num1 == \\"\\": stripped_num1 = \\"0\\" if stripped_num2 == \\"\\": stripped_num2 = \\"0\\" if int(stripped_num1) > int(stripped_num2): return \\"FIRST\\" elif int(stripped_num1) < int(stripped_num2): return \\"SECOND\\" else: return \\"EQUAL\\""},{"question":"You have a grid of size n times m where each cell contains a non-negative integer representing the value at that cell. You want to perform a series of range query operations on the grid. Each query asks you to find the maximum value in a sub-rectangle of the grid. Implement a data structure that supports range maximum queries efficiently. -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. The next n lines contain m integers each, representing the values in the grid. The next line contains a single integer q (1 leq q leq 10000), the number of queries. Each of the next q lines contains four integers x1, y1, x2, y2 (0 leq x1 leq x2 < n, 0 leq y1 leq y2 < m), representing the top-left and bottom-right corners of the sub-rectangle for each query. -----Output----- For each query, output a single integer, the maximum value within the specified sub-rectangle. -----Sample Explanation----- Consider the following grid: ``` 1 6 2 8 3 9 4 5 7 ``` Sample Input: ``` 3 3 1 6 2 8 3 9 4 5 7 3 0 0 1 1 1 1 2 2 0 0 2 2 ``` Sample Output: ``` 8 9 9 ``` Here, for the query (0,0) to (1,1), the sub-rectangle is: ``` 1 6 8 3 ``` The maximum value in this sub-rectangle is 8. For the query (1,1) to (2,2), the sub-rectangle is: ``` 3 9 5 7 ``` The maximum value in this sub-rectangle is 9. For the query (0,0) to (2,2), the sub-rectangle is: ``` 1 6 2 8 3 9 4 5 7 ``` The maximum value in this sub-rectangle is 9. Your task is to efficiently answer each query while keeping in mind the constraints of up to 1000x1000 grid and up to 10000 queries.","solution":"class SegmentTree2D: def __init__(self, grid): self.n = len(grid) self.m = len(grid[0]) self.tree = [[0] * (2 * self.m) for _ in range(2 * self.n)] self.build(grid) def build(self, grid): for i in range(self.n): for j in range(self.m): self.tree[i + self.n][j + self.m] = grid[i][j] for i in range(self.n): for j in range(self.m - 1, 0, -1): self.tree[i + self.n][j] = max(self.tree[i + self.n][j << 1], self.tree[i + self.n][j << 1 | 1]) for i in range(self.n - 1, 0, -1): for j in range(2 * self.m): self.tree[i][j] = max(self.tree[i << 1][j], self.tree[i << 1 | 1][j]) def query(self, row1, col1, row2, col2): row1 += self.n row2 += self.n col1 += self.m col2 += self.m res = 0 while row1 <= row2: if row1 & 1: res = max(res, self.query_col(col1, col2, row1)) row1 += 1 if not (row2 & 1): res = max(res, self.query_col(col1, col2, row2)) row2 -= 1 row1 >>= 1 row2 >>= 1 return res def query_col(self, col1, col2, row): res = 0 while col1 <= col2: if col1 & 1: res = max(res, self.tree[row][col1]) col1 += 1 if not (col2 & 1): res = max(res, self.tree[row][col2]) col2 -= 1 col1 >>= 1 col2 >>= 1 return res def solve(grid, queries): seg_tree = SegmentTree2D(grid) results = [] for x1, y1, x2, y2 in queries: results.append(seg_tree.query(x1, y1, x2, y2)) return results"},{"question":"You are given a list of n distinct positive integers. A subarray is any contiguous part of the array. We define the beauty of a subarray as the difference between the maximum and the minimum element in that subarray. Your task is to find the beauty of the most beautiful subarray, that is the subarray with the maximum beauty. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. The second line contains n distinct positive integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print a single integer — the beauty of the most beautiful subarray. -----Example----- Input 5 1 3 9 2 7 Output 8","solution":"def max_beauty_subarray(n, arr): Returns the beauty of the most beautiful subarray in the given list. Parameters: n (int): The number of elements in the array. arr (list of int): The list of distinct positive integers. Returns: int: The beauty of the most beautiful subarray. if n == 1: return 0 max_elem = max(arr) min_elem = min(arr) return max_elem - min_elem"},{"question":"Alex is an enthusiastic hiker and plans a series of hiking adventures in the mountains. For each adventure, Alex uses a different trail which is represented as a list of elevation points. During a hike, if the elevation strictly increases from the start till the end of the trail and then strictly decreases till the finish, that hike is considered as a successful hike. You are given a list of elevation points. Determine if Alex’s planned hike is a successful one. -----Input----- The first line contains a single integer n (1 le n le 10^5) – the number of elevation points in the trail. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) – the elevation points in the order Alex hikes. -----Output----- Print \\"YES\\" if the hike is successful, otherwise print \\"NO\\". -----Examples----- Input 5 1 3 5 4 2 Output YES Input 6 1 2 2 3 1 0 Output NO Input 3 3 2 1 Output NO -----Note----- In the first example, the elevation points progress by strictly increasing till 5 and then strictly decrease, making it a successful hike. In the second example, the hike has consecutive equal elevation points (2,2), so it is not strictly increasing. In the third example, the hike only strictly decreases without an initial increase making it an unsuccessful hike.","solution":"def is_successful_hike(n, elevations): if n < 3: return \\"NO\\" increasing = False decreasing = False for i in range(1, n): if elevations[i] > elevations[i - 1]: increasing = True if decreasing: # hike should never increase after starting to decrease return \\"NO\\" elif elevations[i] < elevations[i - 1]: if not increasing: # hike should not decrease before starting to increase return \\"NO\\" decreasing = True else: return \\"NO\\" return \\"YES\\" if increasing and decreasing else \\"NO\\""},{"question":"A group of scientists are working together on a research project. They need a central server to store and share their data. However, due to budget constraints, they want to set up the central server in a laboratory such that the total distance from the central server to all the other laboratories is minimized. The scientists want your help to determine the best location for the central server. You are given the coordinates of n laboratories on a 2D plane. The distance between two laboratories located at (x1, y1) and (x2, y2) is defined as the Euclidean distance, which can be calculated using the formula: sqrt((x2 - x1)^2 + (y2 - y1)^2). Write a program to find the coordinates of the optimal location for the central server such that the sum of the distances from this location to all the other laboratories is minimized. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of laboratories. Each of the next n lines contains two integers x and y (|x|, |y| ≤ 10^4) — the coordinates of the ith laboratory. Output Print two space-separated real numbers representing the coordinates of the optimal server location. The answer will be considered correct if it has an absolute or relative error of no more than 10^-6. Examples Input 3 0 0 2 0 1 1 Output 1.0 0.333333 Input 4 1 1 2 2 3 1 4 2 Output 2.5 1.5 Note In the first example, placing the server at (1.0, 0.333333) minimizes the distance to all laboratories. In the second example, placing the server at (2.5, 1.5) minimizes the distance to all laboratories.","solution":"def find_optimal_location(labs): Given a list of laboratories\' coordinates, find the optimal location for the central server. Parameters: labs (List[Tuple[int, int]]): List of tuples representing the coordinates of the laboratories Returns: Tuple[float, float]: Coordinates of the optimal location n = len(labs) # Calculate the centroid (arithmetic mean) sum_x = sum(lab[0] for lab in labs) sum_y = sum(lab[1] for lab in labs) centroid_x = sum_x / n centroid_y = sum_y / n return centroid_x, centroid_y"},{"question":"You are given an integer array `arr` of size `n`. In one move, you can choose any two adjacent elements of the array and replace one of them with the other. Your goal is to make all elements of the array equal, requiring the minimum number of moves. E.g. consider `arr = [1, 2, 2, 3]`. The answer is equal to `2`. First, you can replace `1` with `2` (resulting in `[2, 2, 2, 3]`), and then replace `3` with `2` (resulting in `[2, 2, 2, 2]`). E.g. consider `arr = [4, 4, 4, 4]`. The answer is equal to `0` because all elements are already equal. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. Each test case starts with one integer n (1 le n le 2 times 10^5) — the size of the array. The next line contains n integers arr_i (1 le arr_i le 10^9) — the elements of the array. The total sum of n over all test cases does not exceed 2 times 10^5. -----Output----- For each test case, output in a separate line one integer m — the minimum number of moves required to make all elements of the array equal. -----Examples----- Input 3 4 1 2 2 3 3 5 5 5 5 1 2 3 4 5 Output 2 0 4 -----Note----- The answer for the first test case was considered above. In the second test case, the array is already uniform, so no moves are needed. In the third test case, the optimal strategy involves replacing one of the adjacent elements step by step until all elements match any one of the initial values. The minimum number of moves is `4`.","solution":"def min_moves_to_equal_elements(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] max_count = max(arr.count(x) for x in set(arr)) results.append(n - max_count) return results"},{"question":"Write a program that takes in a list of names and outputs the first name(s) listed in alphabetical order. If multiple names share the alphabetical starting position, display all such names in the order they appeared in the input. -----Input----- The first line contains an integer n, the total number of names. Then n lines follow, each line contains a single name. -----Output----- For each test case, display the name(s) in alphabetical order on a new line, separated by spaces. -----Constraints----- - 1 ≤ n ≤ 100 -----Example----- Input 4 Tom Jerry Anna Tom Output Anna","solution":"def first_names_in_alphabetical_order(names): Takes a list of names and returns the first name(s) in alphabetical order. If multiple names share the alphabetical starting position, return all such names in the order they appeared in the input list. :param names: List of names :return: The first name(s) in alphabetical order if not names: return [] sorted_names = sorted(names) first_name = sorted_names[0] result = [name for name in names if name == first_name] return result"},{"question":"Little Jhool is now deep into the Sudoku game, trying to solve as many puzzles as he can. However, he often gets stuck when faced with partially filled grids. His favorite grid type is when the board is \\"Almost Solved\\". By definition, an \\"Almost Solved\\" Sudoku board is one where exactly one cell contains a zero, and all other cells contain digits from 1 to 9. Little Jhool needs help to find the missing digit to correctly complete the board. Your task is to write a program that finds and prints the correct digit that should replace the zero in order to complete the Sudoku board. Input format: The input consists of nine lines, each containing nine space-separated integers. Each integer is either between 1 and 9 (inclusive) or 0, indicating the empty cell. Output format: Print the missing digit that should replace the zero. Constraints: - The provided board will always be a valid \\"Almost Solved\\" Sudoku board. - The solution will always be unique. Example: Input: 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 0 Output: 9 Explanation: The zero in the last cell can only be correctly replaced by the digit 9 to complete the Sudoku board.","solution":"def find_missing_digit(board): Finds the missing digit in an \'Almost Solved\' Sudoku board. Parameters: board (list of list of int): 9x9 Sudoku board with one zero Returns: int: The missing digit # Sum of numbers 1 to 9 complete_sum = sum(range(1, 10)) for row in board: if 0 in row: zero_index = row.index(0) row_sum = sum(row) return complete_sum - row_sum"},{"question":"You are given a 2D grid representing a maze-like structure and a list of queries. Each cell in the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You start at the top-left cell of the grid (0, 0) and can move right, left, up, or down but cannot move into cells with obstacles. Each query asks if it\'s possible to reach a specific cell in the grid starting from the top-left cell. Given the grid and the list of queries, determine if the destination cell for each query is reachable from the starting cell. Example 1: Input: grid = [ [\'.\', \'.\', \'.\', \'#\'], [\'.\', \'#\', \'.\', \'.\'], [\'.\', \'#\', \'.\', \'.\'], [\'#\', \'.\', \'.\', \'.\'] ] queries = [(3, 3), (2, 1), (0, 3)] Output: [True, False, False] Explanation: For the first query, it is possible to reach cell (3, 3) by following the path (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). For the second query, it is not possible to reach cell (2, 1) due to the obstacles blocking any path. For the third query, it is not possible to reach cell (0, 3) as it is blocked directly by an obstacle. Your Task: You don\'t need to read input or print anything. Your task is to implement the function `isReachable()` which takes a 2D array grid and a list of queries where each query is a tuple (r, c) representing the target cell coordinates and returns a list of boolean values indicating whether each target cell is reachable from the starting cell or not. Expected Time Complexity: O(Q * N * M), where Q is the number of queries, and N and M are the dimensions of the grid. Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100 1 ≤ Q ≤ 100","solution":"def isReachable(grid, queries): Determines if the destination cell for each query is reachable from the starting cell. Args: grid: List[List[str]]: 2D grid representing the maze. queries: List[Tuple[int, int]]: List of queries where each query is a tuple (r, c). Returns: List[bool]: List indicating the reachability of each query\'s destination cell. N = len(grid) M = len(grid[0]) def bfs(start, end): BFS to determine if we can reach from start to end in the grid. from collections import deque queue = deque([start]) visited = set() visited.add(start) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return False results = [] for query in queries: r, c = query if grid[0][0] == \'#\' or grid[r][c] == \'#\': results.append(False) else: results.append(bfs((0, 0), (r, c))) return results"},{"question":"In a parallel universe, people have discovered another numeral system called Pentar. In the Pentar numeral system, every digit is represented by English words where: - \\"Zero\\" corresponds to 0 - \\"One\\" corresponds to 1 - \\"Two\\" corresponds to 2 - \\"Three\\" corresponds to 3 - \\"Four\\" corresponds to 4 Given a string of numbers represented in the Pentar numeral system, convert it to the decimal numeral system. ------ Input details ------ The first line contains a single integer n, the number of words in the Pentar numeral system representing the number. The second line contains n words, each corresponding to a Pentar numeral (\\"Zero\\", \\"One\\", \\"Two\\", \\"Three\\", or \\"Four\\") and separated by spaces. ------ Output details ------ Output a single integer, the equivalent decimal numeral. ------ Constraints ------ 1 ≤ n ≤ 18 ----- Sample Input 1 ------ 3 One Zero Four ----- Sample Output 1 ------ 104 ----- Sample Input 2 ------ 5 Four Zero Zero Three Two ----- Sample Output 2 ------ 40032","solution":"def pentar_to_decimal(n, pentar_numbers): pentar_dict = { \\"Zero\\": \\"0\\", \\"One\\": \\"1\\", \\"Two\\": \\"2\\", \\"Three\\": \\"3\\", \\"Four\\": \\"4\\" } decimal_number = \'\'.join(pentar_dict[pentar] for pentar in pentar_numbers.split()) return int(decimal_number)"},{"question":"You are a software developer on a team maintaining a library of sorting algorithms. Your task is to implement a new sorting algorithm based on a concept provided by your team lead. The concept is called \\"Median-of-Three QuickSort\\". It is a variation of the classic QuickSort algorithm. Here is how it works: 1. Choose the pivot as the median of the first, middle, and last elements of the array/subarray. 2. Partition the array around the pivot such that elements less than the pivot are on the left, and elements greater than the pivot are on the right. 3. Recursively sort the subarrays on the left and right of the pivot. -----Task----- Write a function `median_of_three_quick_sort(arr)` that takes a list `arr` of integers as input and sorts the list in ascending order using the Median-of-Three QuickSort algorithm. -----Input----- The input consists of a list of integers. The list will contain at least 1 and at most 1000 integers. Each integer in the list will be between -10^6 and 10^6. -----Output----- The function should modify the input list `arr` in place to be sorted in ascending order. -----Examples----- Sample Input: [3, 6, 8, 10, 1, 2, 1] Sample Output: [1, 1, 2, 3, 6, 8, 10] Sample Input: [1, 2, 3, 4, 5] Sample Output: [1, 2, 3, 4, 5] Note: You can assume the input list will not be empty. Here is the function signature: ```python def median_of_three_quick_sort(arr: list) -> None: pass ```","solution":"def median_of_three_quick_sort(arr: list) -> None: def median_of_three(a, b, c): if (a - b) * (c - a) >= 0: return a elif (b - a) * (c - b) >= 0: return b else: return c def partition(low, high): mid = (low + high) // 2 pivot_index = arr.index(median_of_three(arr[low], arr[mid], arr[high])) arr[pivot_index], arr[high] = arr[high], arr[pivot_index] pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quick_sort(low, high): if low < high: pi = partition(low, high) quick_sort(low, pi - 1) quick_sort(pi + 1, high) quick_sort(0, len(arr) - 1)"},{"question":"In a futuristic city, there are N crossroads and each crossroad can be either green or red. Traffic is allowed to pass through a green crossroad but halted at a red crossroad. Traffic follows one rule: You can only move from a crossroad to a directly adjacent crossroad. Given the initial state of all crossroads, determine the minimum number of crossroad states that need to be changed from red to green in order to ensure there is at least one path from the first crossroad (crossroad 1) to the last crossroad (crossroad N). The crossroads are linearly connected, meaning each crossroad i can move to crossroad i+1 or crossroad i-1 (if such crossroads exist). ------ Input Format ------ - The first line contains an integer T - the number of test cases. - The first line of each test case contains an integer N - the number of crossroads. - The second line of each test case contains a string of length N consisting of characters \'G\' (Green) and \'R\' (Red) representing the initial state of each crossroad. The first and the last characters are guaranteed to be \'G\' (i.e., crossroad 1 and crossroad N are always green). ------ Output Format ------ For each test case, output the minimum number of changes required. If there\'s already a possible path without any changes, output 0. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 Each character in the crossroads string will be either \'G\' or \'R\'. ----- Sample Input 1 ------ 3 5 GRGRG 4 GGGG 6 GRRGRG ----- Sample Output 1 ------ 1 0 1 ----- Explanation 1 ------ Test case 1: Change the middle red crossroad to green to form a continuous path: GRGGRG. Test case 2: No changes are required as a path already exists: GGGG. Test case 3: Change the third crossroad to green to form a continuous path: GRGGRG.","solution":"def min_changes_to_form_path(test_cases): results = [] for test in test_cases: _, crossroads = test tokens = crossroads.split(\'G\') changes_needed = sum(len(token) > 0 for token in tokens) results.append(changes_needed - 1 if changes_needed > 1 else 0) return results # Handling the input format def process_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] for i in range(1, T*2, 2): N = int(input_lines[i]) crossroads = input_lines[i+1] test_cases.append((N, crossroads)) return test_cases # Handling the output format def process_output(output_list): return \'n\'.join(map(str, output_list)) # Main function to integrate input, solution and output processing def main(input_string): test_cases = process_input(input_string) results = min_changes_to_form_path(test_cases) return process_output(results)"},{"question":"# Single Number II Given a non-empty list of integers where every element appears three times except for one which appears exactly once, find that single one. Your algorithm should have a linear runtime complexity and use only constant extra space. Examples ```python numbers = [2, 2, 3, 2] # The number 3 appears exactly once while others appear three times each find_single_number(numbers) ==> 3 numbers = [0, 1, 0, 1, 0, 1, 99] # The number 99 appears exactly once while others appear three times each find_single_number(numbers) ==> 99 ``` Constraints - The list of integers is non-empty and contains at least one element. - Each number in the list appears exactly three times, except for one which appears exactly once.","solution":"def find_single_number(nums): Returns the number that appears exactly once in the list, where every other number appears exactly three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"Given a 2D matrix of characters and a word, implement a function to determine if the word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. -----Input----- - Two integers m and n (1 leq m, n leq 200) representing the number of rows and columns in the matrix. - Following m lines, each containing a string of length n representing the matrix of characters. - One line containing a single word w (1 leq |w| leq 200). -----Output----- - A single line containing either: - \'YES\' if the word exists in the matrix. - \'NO\' if the word does not exist in the matrix. -----Examples----- Sample Input 1: 3 4 ABCE SFCS ADEE ABCCED Sample Output 1: YES Sample Input 2: 3 4 ABCE SFCS ADEE SEE Sample Output 2: YES Sample Input 3: 3 4 ABCE SFCS ADEE ABCB Sample Output 3: NO","solution":"def exist(board, word): def dfs(board, word, i, j, k): if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j] != word[k]: return False if k == len(word) - 1: return True tmp, board[i][j] = board[i][j], \'/\' found = dfs(board, word, i + 1, j, k + 1) or dfs(board, word, i - 1, j, k + 1) or dfs(board, word, i, j + 1, k + 1) or dfs(board, word, i, j - 1, k + 1) board[i][j] = tmp return found for i in range(len(board)): for j in range(len(board[0])): if dfs(board, word, i, j, 0): return \\"YES\\" return \\"NO\\" def word_exists_in_matrix(matrix, word): return exist(matrix, word)"},{"question":"Flora loves exploring different paths. In her latest adventure, she is traversing a grid. The grid is an n x m matrix, and some cells are marked as obstacles which she cannot step on. Each cell is either \'.\' indicating it is passable, or \'#\' indicating it is an obstacle. Flora can move to any of the four adjacent cells (up, down, left, or right) if they are within the grid boundaries and not an obstacle. Her goal is to start at the top-left corner of the grid (cell (1, 1)) and reach the bottom-right corner of the grid (cell (n, m)). Help Flora determine whether there exists at least one path that allows her to reach her destination. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns of the grid. The next n lines each contain m characters — the grid description. Output Print \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. Examples Input 3 3 ... .#. ... Output YES Input 3 3 .#. .#. .#. Output NO Input 2 2 .# #. Output NO","solution":"def is_path_possible(n, m, grid): from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given an array of integers and an integer target. Your task is to determine if there are two distinct elements in the array that add up to the target value. If such a pair exists, return the indices of the two elements. If no such pair exists, return an empty list. Example 1: Input arr = [2, 7, 11, 15] target = 9 Output [0, 1] Explanation arr[0] + arr[1] = 2 + 7 = 9 Example 2: Input arr = [1, 2, 3, 4, 5] target = 10 Output [] Explanation There are no two distinct elements that add up to 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPair` which takes two arguments: an array `arr` and an integer `target`, and returns a list containing the indices of the two distinct elements that add up to the target value, or an empty list if no such pair exists. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 1 <= len(arr) <= 10^5 - -10^9 <= arr[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def findPair(arr, target): Finds two distinct elements in the array that add up to the target. Args: arr: List of integers. target: Integer target sum. Returns: List containing indices of the two elements, or an empty list if no such pair exists. complement_dict = {} for i, num in enumerate(arr): complement = target - num if complement in complement_dict: return [complement_dict[complement], i] complement_dict[num] = i return []"},{"question":"A company is planning to organize a tournament where employees compete against each other in a series of one-on-one matches. Each employee participates exactly once in each round. The company wants to decide the order of employees such that each employee competes against new opponents in different rounds as much as possible. You are given a list of employees numbered from 1 to n. The company also provides a list of pairs of employees who have already competed against each other in previous tournaments. Your task is to schedule the matches for k rounds such that no match repeats a previously held match and that each employee competes exactly once in each round. Your goal is to find a possible schedule or determine that it is not feasible given the constraints. Input: 1. The first line contains three space-separated integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ k ≤ 10), where n is the number of employees, m is the number of pairs that have already competed, and k is the number of rounds. 2. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that employees u and v have already competed against each other. Output: 1. If it is possible to schedule the matches as required, print the schedule as k lines, each containing n / 2 pairs of space-separated integers representing the matches for each round. 2. If it is not possible, print \\"Not possible\\". Note: - If there are multiple valid schedules, you can print any of them. - Each pair in the output should be of the form \\"u v\\" where u < v. Example 1: Input: 4 2 2 1 2 3 4 Output: 1 3 2 4 1 4 2 3 Example 2: Input: 4 3 2 1 2 1 3 2 4 Output: Not possible","solution":"def schedule_tournament(n, m, k, previous_matches): from itertools import combinations, permutations # Create a set of previous matches for quick lookup previous_set = set(map(tuple, previous_matches)) if n % 2 != 0: return \\"Not possible\\" # Helper function to generate matches for a round def possible_matches(): pairs = list(combinations(range(1, n + 1), 2)) matches = [pair for pair in pairs if pair not in previous_set and (pair[1], pair[0]) not in previous_set] return matches # Generate the schedule schedule = [] all_matches = possible_matches() for _ in range(k): if len(all_matches) < n // 2: return \\"Not possible\\" round_matches = [] used = set() for match in all_matches: if match[0] not in used and match[1] not in used: round_matches.append(match) used.add(match[0]) used.add(match[1]) if len(round_matches) == n // 2: break if len(round_matches) < n // 2: return \\"Not possible\\" schedule.append(round_matches) all_matches = [match for match in all_matches if match not in round_matches] result_list = [] for round_match in schedule: result_list.append(\\" \\".join(f\\"{u} {v}\\" for u, v in round_match)) return \\"n\\".join(result_list) # Example function to parse input and call solution function def solve(input_str): input_lines = input_str.strip().split(\\"n\\") n, m, k = map(int, input_lines[0].split()) previous_matches = [tuple(map(int, line.split())) for line in input_lines[1:m+1]] return schedule_tournament(n, m, k, previous_matches)"},{"question":"You are given a matrix of dimensions n times m where each element is a non-negative integer. You want to perform an operation where you can select two distinct elements in the matrix and replace both of them with their bitwise AND and OR results, respectively. More formally, for any two elements a_i and a_j, you can replace a_i with a_i & a_j and a_j with a_i | a_j. Determine the minimum possible sum of the matrix after performing the operation any number of times. -----Input----- The first line contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns of the matrix. The next n lines contain m integers each, representing the elements of the matrix (0 leq a_{ij} < 2^{30}). -----Output----- Print a single integer — the minimum possible sum of the matrix. -----Example----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 36 -----Note----- In the example, no operations are needed as the elements are already in their minimum achievable sum through any valid operations. If you initially had the matrix: 3 2 4 6 8 2 3 5 An optimal operation sequence could result in lower summed values. Each step\'s decision impacts the outcome based on the nature of bitwise AND and OR operations and the choices of elements selected.","solution":"def min_matrix_sum(n, m, matrix): Determines the minimum possible sum of the matrix after performing the given operations. Args: n : int : the number of rows in the matrix m : int : the number of columns in the matrix matrix : list of list of ints : the matrix elements Returns: int : the minimum possible sum of the matrix after operations return sum(sum(row) for row in matrix)"},{"question":"You are given a binary search tree (BST) with N nodes, where each node contains an integer value. Given this BST, write a function findKthSmallest that returns the k-th smallest element in the tree. Note: - A Binary Search Tree is a binary tree in which for each node, the value of all the nodes in the left subtree is less than the node’s value, and the value of all the nodes in the right subtree is greater than the node’s value. Implement the function: ```python def findKthSmallest(root, k): Given the root of a binary search tree and an integer k, return the k-th smallest element in the BST. # Complete the function here ``` Input Format The input contains two parts: 1. The first part is a preorder traversal of the BST represented as a list of integers. 2. The second part is an integer k. Constraints - 1 ≤ N ≤ 10^4, where N is the number of nodes in the BST. - All elements in the BST are distinct. - 1 ≤ k ≤ N. Output Format Output a single integer, the k-th smallest element in the BST. Sample Input ``` [3, 1, 2, 4] 2 ``` Sample Output ``` 2 ``` Explanation Given the BST with preorder traversal [3, 1, 2, 4], the tree looks like this: ``` 3 / 1 4 2 ``` The elements in ascending order are: 1, 2, 3, 4. Thus, the 2nd smallest element is 2.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_into_bst(root, val): if root is None: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def findKthSmallest(root, k): Given the root of a binary search tree and an integer k, return the k-th smallest element in the BST. stack = [] while True: while root: stack.append(root) root = root.left root = stack.pop() k -= 1 if k == 0: return root.val root = root.right # Helper function to construct the BST from preorder traversal def build_bst_from_preorder(preorder): if not preorder: return None root = TreeNode(preorder[0]) for value in preorder[1:]: insert_into_bst(root, value) return root"},{"question":"You are organizing a tournament where N players will compete against each other. Each player will play against every other player exactly once. You want to determine two things: 1. The total number of matches that will be played in the tournament. 2. The unique schedule of matches for the tournament, which specifies each pair of players that will compete. Write a function to generate these two pieces of information. The function should take an integer N (number of players) as input and output the total number of matches and a list of tuples, where each tuple represents a match between two players. ------ Input Format ------ - A single integer N denoting the number of players. ------ Output Format ------ - An integer representing the total number of matches. - A list of tuples, where each tuple contains two integers representing the pair of players competing against each other. ------ Constraints ------ 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 4 ----- Sample Output 1 ------ 6 [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] ----- Explanation 1 ------ With 4 players, there will be 4 * (4-1) / 2 = 6 matches. The schedule would be: - Player 1 vs Player 2 - Player 1 vs Player 3 - Player 1 vs Player 4 - Player 2 vs Player 3 - Player 2 vs Player 4 - Player 3 vs Player 4","solution":"def tournament_schedule(N): Returns the total number of matches and the unique schedule of matches for a tournament with N players where each player competes with every other player exactly once. :param N: An integer representing the number of players :return: A tuple (total_matches, match_schedule) where: - total_matches is an integer representing the total number of matches - match_schedule is a list of tuples, where each tuple represents a match between two players total_matches = N * (N - 1) // 2 match_schedule = [(i, j) for i in range(1, N) for j in range(i + 1, N + 1)] return total_matches, match_schedule"},{"question":"Write a function `balance_purchases` that takes a list of transaction tuples and an initial balance, and returns the final balance. Each transaction tuple contains a description string and a decimal amount, where a positive amount represents a purchase, and a negative amount represents a return or withheld payment. The balance should only change when the description string represents a valid purchase or return, meaning it should be contained within a given set of valid descriptions. Invalid transactions should be ignored. Example: ```python balance_purchases([ (\\"Purchase at store A\\", 50.75), (\\"Payment withheld\\", -30.00), (\\"Refund from store B\\", -10.25), (\\"Purchase at store C\\", 20.00), (\\"Invalid transaction\\", 100.00) ], 100.00) ``` Returns 89.00. The valid transactions are 50.75 (purchase), -10.25 (return), and 20.00 (purchase). The \\"Payment withheld\\" description and \\"Invalid transaction\\" are not recognized and hence ignored. Valid descriptions in this example are: \\"Purchase at store A\\", \\"Refund from store B\\", \\"Purchase at store C\\". This set of valid descriptions can be predefined within the function for this exercise.","solution":"def balance_purchases(transactions, initial_balance): Computes the final balance after processing valid transactions. Parameters: transactions (list of tuple): A list of transactions where each transaction is represented by a tuple containing a description (str) and an amount (float). initial_balance (float): The starting balance. Returns: float: The final balance after processing valid transactions. valid_descriptions = {\\"Purchase at store A\\", \\"Refund from store B\\", \\"Purchase at store C\\"} balance = initial_balance for description, amount in transactions: if description in valid_descriptions: balance += amount return balance"},{"question":"Given a list of integers, determine the length of the longest consecutive elements sequence. Elements in a consecutive sequence can appear in any order in the list, but there should be no gaps between any two elements. For example, consider the list `[100, 4, 200, 1, 3, 2]`, the longest consecutive sequence is `[1, 2, 3, 4]` and its length is 4. Task Given a list of integers, determine the length of the longest consecutive elements sequence. Constraints * The length of the list will not exceed 10^5. * The list will contain integer elements within the range [-10^9, 10^9]. Input An integer n representing the length of the list followed by a line containing n space-separated integers. Output Print the length of the longest consecutive elements sequence in a line. Examples Input 6 100 4 200 1 3 2 Output 4 Input 9 0 8 7 3 4 2 1 9 5 Output 10 Input 3 10 5 15 Output 1","solution":"def longest_consecutive_sequence(nums): if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak # Example usage if __name__ == \\"__main__\\": n = int(input()) nums = list(map(int, input().split())) print(longest_consecutive_sequence(nums))"},{"question":"Eli is obsessed with palindromes, and he wants to find all possible palindromes of a given length using characters from a specific set. A palindrome is a string that reads the same forwards and backwards. Eli only wants palindromes that use characters from the given set and are of the specified length. Can you help Eli find all the palindromes of the given length using the given set of characters? Input The input consists of two lines: The first line contains a string s which consists of m distinct lowercase characters (1 ≤ m ≤ 10). The second line contains a single integer l (1 ≤ l ≤ 10^6) representing the length of the palindromes Eli is interested in. Output Output a single integer, which is the number of palindromes of length l that can be formed using the characters from the given set. Examples Input abc 3 Output 6 Input xyz 2 Output 3 Note In the first example, the palindromes of length 3 using characters \'a\', \'b\', \'c\' are as follows: \'aaa\', \'aba\', \'aca\', \'bbb\', \'bab\', \'cbc\'. There are 6 such palindromes. In the second example, the palindromes of length 2 using characters \'x\', \'y\', \'z\' are as follows: \'xx\', \'yy\', \'zz\'. There are 3 such palindromes.","solution":"def count_palindromes(set_chars, length): Returns the count of palindromes of the given length using characters from the given set. m = len(set_chars) if length == 1: return m if length % 2 == 0: return m ** (length // 2) else: return m ** ((length // 2) + 1)"},{"question":"A company maintains an employee database where each employee is represented by their name (a string) and their salary (an integer). They want to find the top N employees with the highest salary. If two employees have the same salary, they should be sorted alphabetically by their name. -----Input----- The first line of input contains an integer E (1 leq E leq 10^4), the number of employees. The next E lines each contain a string name (the employee\'s name) and an integer salary (the employee\'s salary). The last line contains an integer N (1 leq N leq E), the number of top employees to find. -----Output----- Output N lines, each containing the name of one of the top N employees, sorted by salary in descending order. If two employees have the same salary, they should be sorted alphabetically by their name. -----Examples----- Sample Input 1: 5 Alice 50000 Bob 60000 Charlie 50000 David 70000 Eve 60000 2 Sample Output 1: David Bob Sample Input 2: 3 Frank 30000 Grace 30000 Heidi 25000 1 Sample Output 2: Frank","solution":"def top_n_employees(employees, N): Returns the top N employees sorted by descending salary. If two employees have the same salary, they are sorted alphabetically by name. Parameters: employees (list of tuples): A list of tuples where each tuple contains the employee name as a string and the salary as an integer. N (int): The number of top employees to return. Returns: list of str: The names of the top N employees. # Sort employees first alphabetically by name, then by salary in descending order employees.sort(key=lambda x: (-x[1], x[0])) # Extract the names of top N employees top_employees = [employee[0] for employee in employees[:N]] return top_employees"},{"question":"You are given a string s and an array of strings dictionary. Find the longest string in the dictionary that can be formed by deleting some characters of the given string s without reordering the remaining characters. If there is more than one possible result, return the longest string with the smallest lexicographical order. If there is no possible result, return the empty string. Example 1: Input: s = \\"abpcplea\\", dictionary = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] Output: \\"apple\\" Example 2: Input: s = \\"abpcplea\\", dictionary = [\\"a\\",\\"b\\",\\"c\\"] Output: \\"a\\" Example 3: Input: s = \\"bab\\", dictionary = [\\"ba\\",\\"ab\\",\\"a\\",\\"b\\"] Output: \\"ab\\" Example 4: Input: s = \\"hello\\", dictionary = [\\"world\\",\\"hello\\",\\"leetcode\\"] Output: \\"hello\\" Example 5: Input: s = \\"abce\\", dictionary = [\\"abe\\",\\"abc\\"] Output: \\"abc\\" Constraints: - 1 <= s.length <= 1000 - 1 <= dictionary.length <= 1000 - 1 <= dictionary[i].length <= 100 - s and dictionary[i] consist of only lowercase English letters.","solution":"def findLongestWord(s, dictionary): def is_subsequence(x): it = iter(s) return all(c in it for c in x) dictionary.sort(key=lambda x: (-len(x), x)) for word in dictionary: if is_subsequence(word): return word return \\"\\""},{"question":"Given an array of integers, you are required to find the maximum sum of elements in an array sub-sequence such that no two elements in the subsequence are adjacent in the original array. You need to write a function to calculate this maximum sum. -----Function Signature----- `def max_non_adjacent_sum(arr: List[int]) -> int:` -----Input----- - A single integer array `arr` of length `N`. -----Output----- - Return a single integer which is the maximum sum of non-adjacent elements. -----Constraints----- - 1 leq N leq 10^5 - -10^4 leq arr[i] leq 10^4 for 0 leq i < N -----Examples----- max_non_adjacent_sum([3, 2, 7, 10]) should return 13 max_non_adjacent_sum([3, 2, 5, 10, 7]) should return 15 max_non_adjacent_sum([-2, 1, 3, -4, 5]) should return 8 max_non_adjacent_sum([-2, -3, -4, -5, -6]) should return 0 -----Explanation----- Example 1: The sub-sequence will be [3, 10] (sum is 13). Example 2: The sub-sequence will be [3, 5, 7] (sum is 15). Example 3: The sub-sequence will be [1, 3, 5] (sum is 9). Example 4: Since all the elements are negative, the result will be 0.","solution":"from typing import List def max_non_adjacent_sum(arr: List[int]) -> int: Finds the maximum sum of non-adjacent elements in an array. if not arr: return 0 inclusive = 0 # Max sum including the current element exclusive = 0 # Max sum excluding the current element for num in arr: # Current max sum excluding this element new_exclusive = max(inclusive, exclusive) # Current max sum including this element inclusive = exclusive + num exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"You are given a list of integers. Your task is to determine if there exists a subset of the list whose sum is exactly equal to a given target value. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 10^4) — the number of elements in the list and the target sum, respectively. The second line contains n integers a_{i} ( -10^6 ≤ a_{i} ≤ 10^6) — the elements of the list. -----Output----- Print \\"YES\\" if there exists a subset of the list whose sum is exactly k, otherwise print \\"NO\\". -----Example----- Input 5 9 3 34 4 12 5 Output YES Input 4 10 1 1 1 1 Output NO","solution":"def is_subset_sum(arr, n, k): Determine if there exists a subset of the list whose sum is exactly equal to a given target value. Parameters: arr (list): List of integers. n (int): Number of elements in the list. k (int): Target sum. Returns: str: \\"YES\\" if a subset with sum k exists, otherwise \\"NO\\". # Initialize a DP table with False values dp = [[False] * (k + 1) for _ in range(n + 1)] # There is always a subset with 0 sum, the empty subset for i in range(n + 1): dp[i][0] = True # Fill the DP table for i in range(1, n + 1): for j in range(1, k + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] # The answer will be in dp[n][k] if dp[n][k]: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a program to simulate the growth of a plant in a 2D grid. Each cell in the grid can either be empty (denoted by \'.\') or contain part of the plant (denoted by \'P\'). The plant grows according to the following rules: 1. A \'P\' in the grid will spread to its adjacent cells if those cells are empty. The spreading rules are: - If cell (i, j) contains \'P\', it will spread to cells (i+1, j), (i-1, j), (i, j+1), and (i, j-1), if those cells are within bounds and currently empty (\'.\'). 2. The spreading happens simultaneously for all \'P\' cells in a single time step. 3. The growth continues until there are no more empty adjacent cells for any \'P\' in the grid. Given the initial configuration of the grid, determine the number of complete time steps required for the plant to finish its growth. ----- Input ----- The first line of input contains two integers, N and M, indicating the number of rows and columns in the grid respectively (1 ≤ N, M ≤ 100). The next N lines each contain a string of length M consisting of characters \'.\' and \'P\', representing the initial configuration of the grid. ----- Output ----- Print the number of complete time steps required for the plant to finish its growth. ----- Example Input ----- 3 3 .P. ... P.. ----- Example Output ----- 2 ----- Explanation ----- Initially: .P. ... P.. After 1 step: PPP .P. PPP After 2 steps: PPP PPP PPP The plant has finished its growth after 2 complete steps.","solution":"def plant_growth_steps(grid): Simulates plant growth in a 2D grid and returns the number of complete time steps required for the plant to finish its growth. Args: grid (list of list of str): A 2D list representing the initial grid. Each element is either \'.\' or \'P\'. Returns: int: The number of complete time steps required for the plant to finish its growth. from collections import deque N = len(grid) M = len(grid[0]) # Convert grid to a list of lists grid = [list(row) for row in grid] # Directions for adjacent cells: down, up, right, left directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Initialize queue with all initial \'P\' positions queue = deque() for i in range(N): for j in range(M): if grid[i][j] == \'P\': queue.append((i, j)) steps = 0 while queue: next_queue = deque() while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\': grid[nx][ny] = \'P\' next_queue.append((nx, ny)) if next_queue: steps += 1 queue = next_queue return steps"},{"question":"Given a list of n integers and an integer k, write a function that returns the maximum possible sum of k consecutive elements in the given list. If k is greater than the length of the list, return -1. Example 1: Input: nums = [2, 1, 5, 1, 3, 2] k = 3 Output: 9 Explanation: The maximum sum of 3 consecutive elements is 5 + 1 + 3 = 9. Example 2: Input: nums = [2, 3, 4] k = 4 Output: -1 Explanation: There are only 3 elements in the list, hence k = 4 is not possible. Note: 2 <= n <= 10^5 0 <= nums[i] <= 10^4 1 <= k <= n","solution":"def max_sum_k_consecutive(nums, k): Returns the maximum possible sum of k consecutive elements in the given list. If k is greater than the length of the list, returns -1. n = len(nums) if k > n: return -1 max_sum = current_sum = sum(nums[:k]) for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Description: Write a function that takes a string containing a list of integers separated by commas and returns the largest integer. Assume the input list will always contain at least one integer, and all integers are valid. # Examples ``` findLargest(\\"1, 2, 3, 4, 5\\") === 5 findLargest(\\"7, 3, 9, 2, 8\\") === 9 findLargest(\\"15, 22, 8, 19, 31\\") === 31 findLargest(\\"-1, -4, -7, -3, -2\\") === -1 findLargest(\\"42\\") === 42 ```","solution":"def findLargest(s): Returns the largest integer from a comma-separated string of integers. # Split the string by commas and convert each element to an integer numbers = list(map(int, s.split(\',\'))) # Return the largest integer return max(numbers)"},{"question":"You are given an array of integers and an integer K. Determine if there exists any pair of indices (i, j) such that i < j and the absolute difference between the values at these indices is exactly K. Constraints * 2 leq Length of array leq 200 * -1000 leq Array elements, K leq 1000 * Array elements and K are integers. Input Input is given from Standard Input in the following format: First line contains an integer N, the length of the array. The next line contains N space-separated integers constituting the array. The last line contains the integer K. Output If such a pair exists, print `YES`; otherwise, print `NO`. Examples Input 5 1 5 3 4 2 2 Output YES Input 4 1 1 1 1 0 Output YES Input 3 10 20 30 15 Output NO","solution":"def has_pair_with_difference_k(arr, k): Determines if there are two indices i, j such that i < j and the absolute difference between the values at these indices is exactly K. Parameters: arr (list): List of integers k (int): The integer K to check for the absolute difference Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\" values_set = set() for value in arr: if value + k in values_set or value - k in values_set: return \\"YES\\" values_set.add(value) return \\"NO\\""},{"question":"Given a string S consisting of lowercase English letters, find the longest substring which occurs at least twice in S. ------ Input: ------ The only line of input contains a single string S of length n (1 leq n leq 10^4). ------ Output: ------ Print the longest substring which occurs at least twice in S. If there are multiple longest substrings with the same length, print the one that appears first in S. ----- Sample Input 1 ------ abcabcbb ----- Sample Output 1 ------ abc ----- Explanation 1 ------ The substring \\"abc\\" is the longest substring that occurs at least twice in the given string \\"abcabcbb\\", appearing first at index 0 and again at index 3. ----- Sample Input 2 ------ banana ----- Sample Output 2 ------ ana ----- Explanation 2 ------ \\"ana\\" is the longest substring occurring at least twice, appearing at index 1 and index 3.","solution":"def longest_repeated_substring(S): Finds the longest substring which occurs at least twice in the given string S. def search_substrings(length): seen = {} for i in range(len(S) - length + 1): substring = S[i:i+length] if substring in seen: return substring seen[substring] = i return \\"\\" left, right = 1, len(S) result = \\"\\" while left <= right: mid = (left + right) // 2 candidate = search_substrings(mid) if candidate: result = candidate left = mid + 1 else: right = mid - 1 return result"},{"question":"Design an algorithm to determine if two given strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequencies, but in any order. For example, \\"listen\\" and \\"silent\\" are anagrams of each other because they contain the same characters with the same frequencies. Write a function that takes two strings and returns `true` if they are anagrams, and `false` otherwise. -----Input----- The input consists of two lines: - First line contains the first string a. - Second line contains the second string b. Both strings will consist of lowercase English letters only and will have lengths between 1 and 1000 inclusive. -----Output----- Print `true` if the strings are anagrams, otherwise print `false`. -----Examples----- Input listen silent Output true Input hello world Output false -----Note----- None","solution":"def are_anagrams(a, b): Returns True if the two strings a and b are anagrams of each other, False otherwise. # Anagram strings must be of the same length if len(a) != len(b): return False # Check if both strings have the same frequency of characters from collections import Counter return Counter(a) == Counter(b)"},{"question":"Slavia is practicing for her basketball tournament, and she wants to calculate the total points she can expect to score by practicing a specific number of free throws. Each free throw shot can score either 1 point (successful shot) or 0 points (missed shot). The probability of Slavia making a successful shot is p, where 0 leq p leq 1. Given the number of free throws n that Slavia will attempt, calculate the expected total points she can score. -----Input----- The first line contains two integers n and p (1 leq n leq 10^6, 0 leq p leq 1) — the number of free throws Slavia will attempt and the probability of making each shot respectively. The probability p is given as a decimal number with at most two digits after the decimal point. -----Output----- Print one number — the expected total points Slavia can score, rounded to two decimal places. -----Examples----- Input 10 0.6 Output 6.00 Input 50 0.75 Output 37.50 -----Note----- In the first example, if Slavia attempts 10 free throws with a probability of making each shot being 0.6, the expected total points would be 10 times 0.6 = 6.00. In the second example, if Slavia attempts 50 free throws with a probability of making each shot being 0.75, the expected total points would be 50 times 0.75 = 37.50.","solution":"def expected_points(n, p): Calculate the expected total points Slavia can score. :param n: Number of free throws (integer) :param p: Probability of making a successful shot (float) :return: Expected total points (float) return round(n * p, 2)"},{"question":"You are given an integer n and a permutation p of the integers from 1 to n. Your task is to find the length of the longest subsequence q of p such that q is strictly increasing, and each pair of adjacent elements (q_i, q_{i+1}) in q satisfies the condition q_{i+1} - q_i leq d, where d is a given integer. -----Input----- The first line contains two integers n (1 leq n leq 100) and d (1 leq d leq n-1). The second line contains a permutation p of the integers from 1 to n. -----Output----- Print one integer — the length of the longest subsequence q of p that is strictly increasing and satisfies q_{i+1} - q_i leq d for every adjacent pair of elements in q. -----Examples----- Input 5 2 3 1 4 2 5 Output 3 Input 6 1 6 5 4 3 2 1 Output 1 Input 6 3 1 3 5 2 4 6 Output 4 -----Note----- In the first example, one such longest subsequence is 1 2 3. In the second example, every longest subsequence contains only one element because any two adjacent elements in the permutation have a difference greater than 1. In the third example, one such longest subsequence is 1 3 4 6.","solution":"def longest_subsequence(n, d, p): Return the length of the longest subsequence of p such that the subsequence is strictly increasing and the difference between any two consecutive elements is <= d. if n == 0: return 0 # Initialize dp array where dp[i] is the length of the longest subsequence ending at index i dp = [1] * n for i in range(n): for j in range(i): if p[i] > p[j] and (p[i] - p[j] <= d): dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of transactions made with a digital wallet. Each transaction is represented as a tuple where the first element is a string indicating whether the transaction is a \'credit\' or \'debit\', and the second element is an integer representing the amount of money involved. For example: ```python [(\'credit\', 100), (\'debit\', 50), (\'debit\', 20), (\'credit\', 70)] ``` A \'credit\' transaction adds money to the wallet, whereas a \'debit\' transaction subtracts money from the wallet. Write a function that takes such a list of transactions and calculates the final balance in the wallet. If the final balance is negative, it should return an error message: `\\"Insufficient funds\\"`. Your function should return the final balance as a string in the format: ``` \'Balance: x.xx\' ``` where x is the final balance rounded to 2 decimal places.","solution":"def calculate_balance(transactions): Takes a list of transactions and calculates the final balance in the wallet. Returns the balance in the format \'Balance: x.xx\' or \'Insufficient funds\' if the balance is negative. balance = 0 for transaction in transactions: if transaction[0] == \'credit\': balance += transaction[1] elif transaction[0] == \'debit\': balance -= transaction[1] if balance < 0: return \\"Insufficient funds\\" else: return f\\"Balance: {balance:.2f}\\""},{"question":"# Description A sequence of numbers is called a zigzag sequence if the differences between successive numbers strictly alternate between positive and negative. In other words, the sequence `a1, a2, a3,..., an` is a zigzag sequence if and only if one of the following holds: - a1 < a2 > a3 < a4 > a5 < ... or - a1 > a2 < a3 > a4 < a5 > ... Given an array of integers `arr`, determine the length of the longest contiguous subsequence that forms a zigzag sequence. The function `longest_zigzag` takes a single parameter, an array of integers `arr`, and should return an integer representing the length of the longest zigzag subsequence. Criteria - The input array `arr` will always contain at least one element and at most `10^4` elements. - Each element in the array will be an integer between `-10^9` and `10^9`. - The function should be efficient with regard to time complexity. # Example ```python def longest_zigzag(arr): # implementation here # Example 1: input = [1, 7, 4, 9, 2, 5] # The longest zigzag subsequence is [1, 7, 4, 9, 2, 5] with length 6. print(longest_zigzag(input)) # Output: 6 # Example 2: input = [1, 4, 7, 2, 5] # The longest zigzag subsequence is [1, 4, 2, 5] with length 4. print(longest_zigzag(input)) # Output: 4 # Example 3: input = [1, 2, 3, 4, 5] # There is no zigzag subsequence longer than 2, as each element is strictly increasing or decreasing. print(longest_zigzag(input)) # Output: 2 ```","solution":"def longest_zigzag(arr): if len(arr) == 1: return 1 increase = decrease = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: increase = decrease + 1 elif arr[i] < arr[i - 1]: decrease = increase + 1 return max(increase, decrease)"},{"question":"You manage a small retail store and need to keep track of your inventory. Your software should help automate the process of updating inventory levels whenever a sale is made. The inventory is represented as a list where each item has a unique ID, a name, a price per unit, and the number of units available. Write a program that takes an initial inventory list and a list of sales transactions and updates the inventory accordingly. Each sale reduces the number of units available for the corresponding item. Input - The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the number of items in the inventory. - The next `n` lines each contain the details of an item in the form: `ID name price units`, where - `ID` is a unique positive integer (1 ≤ ID ≤ 1000), - `name` is a string with up to 20 characters, - `price` is a floating-point number (0.01 ≤ price ≤ 10,000.00), - `units` is an integer (0 ≤ units ≤ 1,000,000). - The following line contains an integer `m` (1 ≤ m ≤ 1000), the number of sales transactions. - The next `m` lines each contain a sale in the form: `ID quantity`, where - `ID` is the ID of the item sold, - `quantity` is the number of units sold (1 ≤ quantity ≤ 1,000,000). Output Print `n` lines, each containing the updated inventory in the same format as input, i.e., `ID name price units`. If a sale attempts to sell more units than are available, do not process that sale for that item and issue a warning. Example Input 3 1 apple 0.50 500 2 banana 0.30 300 3 orange 0.70 700 2 1 200 3 800 Output 1 apple 0.50 300 2 banana 0.30 300 3 orange 0.70 700 Warning Cannot process sale of 800 units of item ID 3 since only 700 units are available.","solution":"def update_inventory(inventory, sales): Updates the inventory based on the list of sales transactions. Parameters: inventory - List of tuples, with each tuple containing: (ID (int), name (str), price (float), units (int)) sales - List of tuples, with each tuple containing: (ID (int), quantity (int)) Returns: Updated inventory as a list of tuples, each in the same format as the input inventory, and a list of warning messages for invalid sales transactions. inventory_dict = {item[0]: item for item in inventory} warnings = [] for sale in sales: ID, quantity = sale if ID in inventory_dict: item = inventory_dict[ID] name, price, units = item[1], item[2], item[3] if units >= quantity: inventory_dict[ID] = (ID, name, price, units - quantity) else: warnings.append(f\\"Cannot process sale of {quantity} units of item ID {ID} since only {units} units are available.\\") updated_inventory = list(inventory_dict.values()) return updated_inventory, warnings"},{"question":"Given a string s, write a program to determine whether it is a palindrome, considering only alphanumeric characters and ignoring case. Input The input contains a single line with a string s (1 ≤ |s| ≤ 105). Output Output \\"YES\\" if the given string is a palindrome, otherwise output \\"NO\\". Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO Note In the first example, the string \\"A man, a plan, a canal: Panama\\" when filtered and converted to lowercase becomes \\"amanaplanacanalpanama\\", which reads the same forwards and backwards, thus it is a palindrome.","solution":"def is_palindrome(s): Determines if the given string is a palindrome, considering only alphanumeric characters and ignoring case. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is the same forwards and backwards return filtered_chars == filtered_chars[::-1] def check_palindrome(s): return \\"YES\\" if is_palindrome(s) else \\"NO\\""},{"question":"Write a function that receives an arbitrarily long string of lowercase alphabetic characters, and returns the longest substring that does not contain any repeated characters. Input: Your function will receive a single argument: A string containing only lowercase alphabetic characters. Output: Your function should return a string representing the longest substring with unique characters. Test Example ```python input_string = \'abrkaabcdefghijjxxx\' longest_unique_substring(input_string) # \'abcdefghij\' input_string = \'bbbbb\' longest_unique_substring(input_string) # \'b\' input_string = \'pwwkew\' longest_unique_substring(input_string) # \'wke\' ``` Technical Details The length of the input string will not exceed 10^5 characters. The output must be computed efficiently, aiming for a time complexity of O(n). Use Python 3+ for the Python translation. All test cases will be valid.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. # Dictionary to store the index of characters char_index = {} longest_substr = \\"\\" start = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end if end - start + 1 > len(longest_substr): longest_substr = s[start:end+1] return longest_substr"},{"question":"You are given a rectangular grid of cells with n rows and m columns. Each cell contains a color represented by a lowercase letter or is empty, represented by a dot (\\".\\"). Your task is to determine the shortest path from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1). You are allowed to move up, down, left, or right, but you cannot move diagonally. Also, you can only pass through cells that have the same color. Write a function to find the shortest path from the top-left corner to the bottom-right corner of the grid, given the constraints. If there is no possible path, output -1. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 1000). The next n lines each contain a string of m characters, representing the colors of the cells or empty cells. -----Output----- Output the length of the shortest path from the top-left corner to the bottom-right corner. If no path exists, output -1. -----Examples----- Input 3 3 a.a aaa a.a Output 4 Input 3 3 a.a a.a a.a Output -1 Input 1 5 aaaaa Output 4","solution":"from collections import deque def shortest_path_same_color(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \\".\\" or grid[n-1][m-1] == \\".\\": return -1 def get_neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == grid[x][y]: yield nx, ny queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice loves solving mystery puzzles. She recently stumbled upon a series of jigsaw puzzles, each consisting of uniquely numbered pieces. She wants to determine if a set of pieces can form a perfect jigsaw puzzle. A perfect jigsaw puzzle means that each piece fits exactly once into a unique position, and no piece is repeated or missing. Given n numbers representing the numbered pieces Alice has, help her determine if these pieces can form a perfect jigsaw puzzle. Alice ensures that each piece should be unique and the pieces should be a consecutive sequence starting from 1 to n. -----Input----- The first line contains an integer n (1 ≤ n ≤ 20). The second line contains n integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 20) — the numbers on the pieces Alice has. -----Output----- Print \\"YES\\" (without the quotes) if the pieces can form a perfect jigsaw puzzle, otherwise print \\"NO\\" (without the quotes). -----Examples----- Input 4 1 2 3 4 Output YES Input 5 5 3 1 4 2 Output YES Input 4 1 2 3 5 Output NO -----Note----- In the first sample, the pieces form a perfect sequence from 1 to 4, so the answer is \\"YES\\". In the second sample, the pieces form a perfect sequence from 1 to 5, so the answer is \\"YES\\". In the third sample, the sequence is missing the number 4 and includes 5 which breaks the consecutiveness, so the answer is \\"NO\\".","solution":"def can_form_perfect_jigsaw(n, pieces): Determines if the pieces can form a perfect jigsaw puzzle. A perfect jigsaw puzzle means each piece fits exactly once into a unique position, and no piece is repeated or missing. The pieces should be a consecutive sequence starting from 1 to n. Parameters: n (int): The total number of pieces. pieces (list of int): The numbers on the pieces Alice has. Returns: str: \\"YES\\" if the pieces can form a perfect jigsaw puzzle, otherwise \\"NO\\". if sorted(pieces) == list(range(1, n+1)): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function to process a series of operations on an initially empty list of integers. The operations include adding an integer to the list, removing an integer from the list, and finding the maximum integer in the list. If the list is empty when the maximum is requested, return \\"EMPTY\\". The functions should follow these specifications: * add(x): Add the integer x to the list. * remove(x): Remove one occurrence of the integer x from the list. If x is not present in the list, do nothing. * find_max(): Return the maximum integer in the list, or \\"EMPTY\\" if the list is empty. Constraints * 1 ≤ q ≤ 100000 * -10^9 ≤ x ≤ 10^9 Input The first line contains an integer q, the number of queries. Each of the following q lines contains a query in one of the following formats: * ADD x * REMOVE x * FIND_MAX Output For each FIND_MAX operation, print the result. Examples Input 7 ADD 3 ADD 10 ADD 5 FIND_MAX REMOVE 10 FIND_MAX REMOVE 3 REMOVE 5 FIND_MAX Output 10 5 EMPTY","solution":"class OperationProcessor: def __init__(self): self.lst = [] def add(self, x): self.lst.append(x) def remove(self, x): if x in self.lst: self.lst.remove(x) def find_max(self): if self.lst: return max(self.lst) else: return \\"EMPTY\\""},{"question":"Vanya has a favorite sequence of integers, and he loves playing games with them. One day, he decided to write a new sequence `s` consisting of `n` integers. He also wrote down a smaller sequence `t` of length `m`. However, as he was interrupted, the exact integers of `s` or `t` are unknown except for their lengths and the condition that the sequence `t` is an arithmetic progression (AP) with an unknown common difference. A sequence `t[i]` is an arithmetic progression if: - `t[i+1] - t[i] = d` where `d` is a fixed integer for i = 1 to m-1. Vanya has a challenge to transform the sequence `s` into another sequence with some of the integers replaced by `?`, representing unknown values. He needs to check if it\'s possible to find a continuous subsequence of length `m` in `s` which can be transformed to match `t` by replacing `?` with appropriate integers. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of the sequence `s`. - The second line contains `n` integers and characters `?` separated by spaces, representing the sequence `s`. - The third line contains a single integer `m` (1 ≤ m ≤ min(100, n)) — the length of the sequence `t`. # Output - Print \\"YES\\" if it\'s possible to transform any continuous subsequence of `s` of length `m` into an arithmetic progression with any common difference `d` by replacing `?` with appropriate integers, otherwise print \\"NO\\". # Examples Input 7 5 ? 9 6 3 ? 7 3 Output YES Input 5 8 3 2 ? 4 5 Output NO # Note In the first example, you can replace `?` in the sequence `s` to get a subsequence `5 7 9` which matches an AP of length 3 with a common difference `d = 2`. In the second example, no transformation can convert any continuous subsequence of length 5 from `s` into an AP.","solution":"def can_form_arithmetic_progression(n, s, m): def can_be_ap(subseq): # Checks if a subsequence can be an AP numbers = [] for x in subseq: if x != \'?\': numbers.append(x) if len(numbers) < 2: return True common_diff = numbers[1] - numbers[0] for i in range(2, len(numbers)): if numbers[i] - numbers[i-1] != common_diff: return False return True def is_convertible_to_ap(sequence, m): for i in range(n - m + 1): # Extract the subsequence of length m subsequence = sequence[i:i + m] if can_be_ap(subsequence): return True return False # Convert input sequence s into a list of integers and question marks sequence = [] for x in s: if x == \'?\': sequence.append(\'?\') else: sequence.append(int(x)) if is_convertible_to_ap(sequence, m): return \\"YES\\" else: return \\"NO\\""},{"question":"Memory Management in a Library System You are tasked with managing the memory allocation for a library\'s book management system. The system should dynamically allocate and deallocate memory for book records based on user actions. Each book record consists of: - A unique integer `id` - A string `title` (1 ≤ length of title ≤ 100) - An integer `year` representing the year of publication (1000 ≤ year ≤ 2023) Your task is to implement a system with the following operations: 1. `ADD <id> <title> <year>` - Add a new book record with the specified `id`, `title`, and `year`. If a book with the same `id` already exists, update its `title` and `year`. 2. `REMOVE <id>` - Remove the book record with the specified `id`. If no such book exists, print \\"Book not found\\". 3. `QUERY <id>` - Retrieve the details of the book record with the specified `id`. If no such book exists, print \\"Book not found\\". Input Input starts with an integer `n` (1 ≤ n ≤ 100), the number of operations. The next `n` lines contain the operations in the form described above. Output For each `QUERY` operation, print the book details in the format: `title year`. If the book is not found, print \\"Book not found\\". Example Input 5 ADD 1 \\"The Great Gatsby\\" 1925 ADD 2 \\"1984\\" 1949 QUERY 1 REMOVE 1 QUERY 1 Output The Great Gatsby 1925 Book not found Note Ensure proper handling of memory allocation and deallocation for the book records to avoid memory leaks or undefined behavior. Implementations of the above operations should ensure that: - Books are properly added, updated, and removed from the system. - Queries are efficiently processed, and relevant output is generated. - Memory is allocated and deallocated as needed to maintain system efficiency.","solution":"class LibrarySystem: def __init__(self): self.books = {} def add_book(self, id, title, year): self.books[id] = (title, year) def remove_book(self, id): if id in self.books: del self.books[id] else: print(\\"Book not found\\") def query_book(self, id): if id in self.books: title, year = self.books[id] print(f\\"{title} {year}\\") else: print(\\"Book not found\\") def process_library_operations(n, operations): library = LibrarySystem() for operation in operations: parts = operation.split(\' \') op_type = parts[0] if op_type == \'ADD\': id = int(parts[1]) title = \' \'.join(parts[2:-1]).strip(\'\\"\') year = int(parts[-1]) library.add_book(id, title, year) elif op_type == \'REMOVE\': id = int(parts[1]) library.remove_book(id) elif op_type == \'QUERY\': id = int(parts[1]) library.query_book(id)"},{"question":"Aliens have arrived on planet Earth and they communicate using a unique numerical language. You have been tasked with translating their messages. A message from the aliens consists of a single integer, and your job is to perform a special transformation on the integer to decode it. The decoding process involves rearranging the digits of the integer in descending order to form the largest possible integer from those digits. INPUT: An integer T (1 ≤ T ≤ 1000) : number of test cases Each test case consists of a single positive integer N (1 ≤ N ≤ 10^12) representing the encoded message. OUTPUT: For each test case T, output the decoded integer (the largest possible integer that can be formed from the digits of N). SAMPLE INPUT 3 2143 928374 6001 SAMPLE OUTPUT 4321 987432 6100","solution":"def decode_message(T, messages): Decodes each message by rearranging the digits in descending order. Parameters: T : int : number of test cases messages: list : list of integers representing the encoded messages Returns: List of decoded integers decoded_messages = [] for message in messages: decoded_message = \'\'.join(sorted(str(message), reverse=True)) decoded_messages.append(int(decoded_message)) return decoded_messages"},{"question":"The city of Gridville is built in the form of an n x n grid. Some cells of the grid contain buildings, while the rest are empty. The citizens of Gridville need to construct a road from the top-left corner of the grid to the bottom-right corner. However, roads can only be built on empty cells, and they can only move right or down from any cell. Write a program to find the number of ways to build such a road, avoiding buildings. Input The first line contains a single integer n (1 ≤ n ≤ 100), the size of the grid. The next n lines each contain n characters, where each character is either \'.\' (denoting an empty cell) or \'#\' (denoting a building). Output Print a single integer, the number of ways to build the road to reach the bottom-right corner of the grid from the top-left corner. If there is no way to build the road, print 0. SAMPLE INPUT 3 ... .#. ... SAMPLE OUTPUT 2","solution":"def find_num_ways(n, grid): if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if i == 0 and j == 0: continue if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] # Example usage if __name__ == \\"__main__\\": n = 3 grid = [ \\"...\\", \\".#.\\", \\"...\\" ] print(find_num_ways(n, grid)) # Output: 2"},{"question":"Monica is arranging her bookshelf and wants to organize her books in a particular order. She has a sequence of n integers where each integer represents the height of a book. Monica wants to choose an integer k (1 ≤ k ≤ n) and remove exactly k books from the shelf. After removing these k books, the sum of the heights of the remaining books should be minimized. Help Monica determine the minimum possible sum of the heights of the remaining books after removing exactly k books. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5) and (1 ≤ k ≤ n), showing how many books are on the shelf and how many books are to be removed. The second line contains a sequence of n integers h_i (1 ≤ h_i ≤ 10^4), representing the heights of the books. The numbers in the lines are separated by single spaces. -----Output----- In a single line, print the minimum possible sum of the heights of the remaining books after removing exactly k books. -----Examples----- Input 5 2 4 1 3 5 2 Output 10 Input 3 1 10 20 30 Output 30 -----Note----- In the first sample, we can remove books with heights 1 and 2, leaving the books with heights 4, 3, and 5. The sum of these heights is 4 + 3 + 5 = 12. In the second sample, we can remove the book with height 10, leaving books with heights 20 and 30. The sum of these heights is 20 + 30 = 50.","solution":"def minimum_remaining_height(n, k, heights): Finds the minimum possible sum of the heights of the remaining books after removing exactly k books. Parameters: n (int): The number of books. k (int): The number of books to remove. heights (list): The heights of the books. Returns: int: The minimum possible sum of the heights of the remaining books. # Sort heights in ascending order heights.sort() # Remove the k smallest elements remaining_books = heights[k:] # Return the sum of the remaining books return sum(remaining_books)"},{"question":"Simon is playing a game where he has to collect stones of different colors. The game presents a grid of size N x N where each cell contains a stone of one of the given colors. Simon needs to choose a contiguous sub-grid where the stones\' colors are either all the same or alternating in a pattern. Your task is to help Simon calculate the size of the largest such contiguous sub-grid he can select. A valid sub-grid can either be: 1. A sub-grid where all stones are of the same color. 2. A sub-grid where the stones form an alternating pattern. An alternating pattern is defined as a checkerboard pattern where no two adjacent stones are of the same color. Input: The first line contains T, the number of test cases. Each test case consists of: - An integer N, the size of the grid. - The next N lines each contain N characters representing the colors of the stones in the grid. Output: For each test case, output the size of the largest valid sub-grid. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 500 Grid is represented with characters \'R\' and \'B\' indicating Red and Blue stones respectively. SAMPLE INPUT: 2 3 RRR RRR RRR 3 RBR BRB RBR SAMPLE OUTPUT: 9 9","solution":"def largest_valid_subgrid_size(T, test_cases): def same_color(cells): color = cells[0][0] for row in cells: if any(cell != color for cell in row): return False return True def alternating_pattern(cells): for i in range(len(cells)): for j in range(len(cells[i])): expected_color = \'R\' if (i + j) % 2 == 0 else \'B\' if cells[i][j] != expected_color: return False return True def max_valid_size(grid, N): for size in range(N, 0, -1): for i in range(N - size + 1): for j in range(N - size + 1): subgrid = [row[j:j+size] for row in grid[i:i+size]] if same_color(subgrid) or alternating_pattern(subgrid): return size return 1 results = [] for case in test_cases: N, grid = case results.append(max_valid_size(grid, N) ** 2) return results # Sample input processing def process_input(data): lines = data.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N = int(lines[idx]) grid = [lines[idx + i + 1] for i in range(N)] test_cases.append((N, grid)) idx += N + 1 return T, test_cases # Sample input reading sample_input = \\"2n3nRRRnRRRnRRRn3nRBRnBRBnRBRn\\" T, test_cases = process_input(sample_input) print(largest_valid_subgrid_size(T, test_cases))"},{"question":"Due to the recent popularity of online games, Nia has developed a keen interest in analyzing game stats. She has a list of scores obtained by players in a game. Each player\'s score is represented as an integer. Nia wants to determine if every player scored higher than the player who played immediately before them in every session. Given a list of scores, help Nia find out if this is the case. -----Input----- The input consists of a single line containing a series of integers, representing the scores obtained by players in a game session. There will be at least one and at most 1000 integers in the input, with each integer between 0 and 1000 inclusive. -----Output----- Output “yes” if every player scored higher than the player who played immediately before them. Otherwise, output “no”. -----Examples----- Sample Input: 4 5 7 10 Sample Output: yes Sample Input: 3 3 4 6 Sample Output: no","solution":"def are_scores_increasing(scores): Determines if each score in the list is greater than the previous score. Args: scores (list of int): List of integers representing player scores. Returns: str: \\"yes\\" if every player scored higher than the player who played immediately before them, otherwise \\"no\\". for i in range(1, len(scores)): if scores[i] <= scores[i - 1]: return \\"no\\" return \\"yes\\" # Example usage: # scores_list = [4, 5, 7, 10] # print(are_scores_increasing(scores_list)) # Output: \\"yes\\""},{"question":"The city of Codeville is having a robbery problem, and the local police department has requested your help in planning an efficient patrol route to catch the thieves. The city is represented as a grid of N x M blocks, with each block either being a road or a building. The police officers can only travel along roads, and they want to ensure that they can visit all parts of the city accessible by roads from their starting point. Your task is to determine the minimum number of starting points (patrol stations) required to cover all the roads in the city such that every part of the road network is patrolled. Two blocks are considered connected if they share a side (north, south, east, or west). INPUT::: The first line contains a single integer T, the number of test cases. Each test case starts with two space-separated integers N and M (size of the city grid), followed by N lines each containing M characters where \'R\' denotes a road and \'B\' denotes a building. OUTPUT::: For every test case, output a single integer, the minimum number of starting points required to ensure that every road in the city is patrolled. CONSTRAINTS::: 1 ≤ T ≤ 10, 1 ≤ N, M ≤ 100, SAMPLE INPUT 3 3 3 RRR RBB RRR 4 4 RRBB RBBR BBRR BBRR 2 2 RB BR SAMPLE OUTPUT 1 2 2 Explanation For the first test case, all roads are connected, so only one starting point is required. For the second test case, the city has two distinct road networks disconnected by buildings: the top-left road and the bottom-right roads, requiring 2 starting points. For the third test case, there are two isolated roads, and each will need a separate starting point, resulting in a requirement of 2 patrol stations.","solution":"def num_patrol_stations(t, test_cases): def dfs(grid, visited, x, y, n, m): stack = [(x, y)] while stack: cx, cy = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'R\' and not visited[nx][ny]: visited[nx][ny] = True stack.append((nx, ny)) results = [] for i in range(t): n, m, grid = test_cases[i] visited = [[False] * m for _ in range(n)] num_starts = 0 for x in range(n): for y in range(m): if grid[x][y] == \'R\' and not visited[x][y]: dfs(grid, visited, x, y, n, m) num_starts += 1 results.append(num_starts) return results # Example usage: t = 3 test_cases = [ (3, 3, [\'RRR\', \'RBB\', \'RRR\']), (4, 4, [\'RRBB\', \'RBBR\', \'BBRR\', \'BBRR\']), (2, 2, [\'RB\', \'BR\']) ] print(num_patrol_stations(t, test_cases))"},{"question":"You are given an array `nums` of length `n`, representing the amount of money in each house. You are a burglar and you want to maximize the amount of money you can steal, but there\'s a catch: if you steal from a house, you cannot steal from the immediate next house because its security system will alert the police. Your task is to determine the maximum amount of money you can steal without triggering an alarm. Example 1: Input: nums = [2, 7, 9, 3, 1] Output: 12 Explanation: Steal from house 1 (money = 2), skip house 2, steal from house 3 (money = 9), skip house 4, steal from house 5 (money = 1). Total stolen = 2 + 9 + 1 = 12. Example 2: Input: nums = [10, 15, 20] Output: 25 Explanation: Steal from house 1 (money = 10), skip house 2, steal from house 3 (money = 20). Total stolen = 10 + 20 = 30. Note: - 1 <= n <= 100 - 1 <= nums[i] <= 400","solution":"def rob(nums): Returns the maximum amount of money you can steal without triggering an alarm. Parameters: nums (List[int]): The list of amounts of money in each house. Returns: int: The maximum amount of money that can be stolen. if not nums: return 0 if len(nums) == 1: return nums[0] dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]) return dp[-1]"},{"question":"You are organizing a coding contest and need to distribute prizes to the top participants. You have `n` different prizes, each with a fixed value, and `m` participants who have achieved different scores. You want to distribute the prizes in such a way that each participant gets at most one prize, and the difference between the highest and lowest prize values awarded is minimized. Write a program to determine the minimum possible difference between the highest and lowest prize values that are awarded to any participants. -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 1000) — the number of prizes and the number of participants. The second line contains `n` integers p_1, p_2, ..., p_n (1 le p_i le 10^6) — the values of the prizes. It is guaranteed that n ge m. -----Output----- Output a single integer — the minimum possible difference between the highest and lowest prize values awarded to any participants. -----Example----- Input 6 4 8 12 5 7 9 10 Output 3 -----Note----- In the example, the best way to distribute the prizes to the 4 participants is to choose the prizes with values 7, 8, 9, and 10, which leads to the minimum difference of 3 (10 - 7 = 3).","solution":"def min_prize_difference(n, m, prizes): Find the minimum possible difference between the highest and lowest prize values awarded to any participants. Parameters: n (int): The number of prizes. m (int): The number of participants. prizes (list of int): The values of the prizes. Returns: int: The minimum possible difference between the highest and lowest prize values awarded to any participants. prizes.sort() min_difference = float(\'inf\') for i in range(n - m + 1): difference = prizes[i + m - 1] - prizes[i] if difference < min_difference: min_difference = difference return min_difference"},{"question":"You are given an array of integers a of length n. Your task is to perform a series of operations to make all elements of the array equal. In one operation, you can choose any pair of adjacent elements a_i and a_{i+1}, and replace both of them with their arithmetic mean leftlfloor frac{a_i + a_{i+1}}{2} rightrfloor and leftlceil frac{a_i + a_{i+1}}{2} rightrceil, respectively. Find the minimum number of operations needed to achieve this, and print the result. If it is not possible to make all elements of the array equal, print -1. -----Input----- The first line contains one integer n (2 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the initial values of the array. -----Output----- Print one integer — the minimum number of operations needed to make all elements of the array equal, or -1 if it is not possible. -----Examples----- Input 5 5 4 3 2 1 Output 4 Input 4 4 8 4 8 Output 2 -----Note----- In the first example, one possible sequence of operations is to make pairs (5,4), (3,2), then (4,4) and (3,3), resulting in [4,3,2,1,4,3], then (4,3), (2,1), ending with [4,3,2,1,4,3,2,1]. In the second example, one possible sequence of operations is to pair (4,8), then (4,8), resulting in [6,6,6,6].","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations needed to make all elements of the array equal, or -1 if it is not possible. # Check parities of the array elements parity = [a % 2 for a in arr] if all(p == parity[0] for p in parity): return n - 1 else: return -1"},{"question":"Lena loves prime numbers. She believes that prime numbers possess a unique charm. Recently, she has been fascinated by factors of numbers. She wondered how many prime factors do various numbers have. For a given number n, calculate the number of distinct prime factors of n. -----Input----- The first line contains an integer t (1 le t le 20) — the number of test cases. Then t lines contain the test cases, one per line. Each of the lines contains one integer n (1 le n le 10^9). -----Output----- For each test case, print the answer you are looking for — the number of distinct prime factors of n. -----Examples----- Input 5 10 15 21 28 99792 Output 2 2 2 2 4 -----Note----- There are 2 distinct prime factors of 10: 2, 5. There are 2 distinct prime factors of 15: 3, 5. There are 2 distinct prime factors of 21: 3, 7. There are 2 distinct prime factors of 28: 2, 7. There are 4 distinct prime factors of 99792: 2, 3, 7, 53.","solution":"def count_distinct_prime_factors(n): This function calculates the number of distinct prime factors of a given number `n`. distinct_primes = set() if n % 2 == 0: distinct_primes.add(2) while n % 2 == 0: n //= 2 for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: distinct_primes.add(i) while n % i == 0: n //= i if n > 2: distinct_primes.add(n) return len(distinct_primes) def process_test_cases(t, test_cases): results = [] for n in test_cases: results.append(count_distinct_prime_factors(n)) return results"},{"question":"A scientist has developed a new type of DNA mutagen that can only transform DNA sequences following specific rules: a single nucleotide can be changed at a time. Each transformation costs a certain amount of energy, varying according to which nucleotide was changed and to what. To test the mutagen\'s efficiency, you are given a string representing the initial DNA sequence and the desired target sequence. The four nucleotides are represented by \'A\', \'C\', \'G\', and \'T\'. You are also given a 4x4 matrix that indicates the energy cost for transforming one nucleotide to another. Write a program to calculate the minimum energy cost to transform the given initial DNA sequence to the target sequence. # Input - The first line of input contains the initial DNA sequence (1 ≤ length ≤ 1000). - The second line of input contains the target DNA sequence (same length as the initial sequence). - The next four lines each contain four integers, representing the energy cost matrix: - The first line: cost to change \'A\' to \'A\', \'A\' to \'C\', \'A\' to \'G\', \'A\' to \'T\' - The second line: cost to change \'C\' to \'A\', \'C\' to \'C\', \'C\' to \'G\', \'C\' to \'T\' - The third line: cost to change \'G\' to \'A\', \'G\' to \'C\', \'G\' to \'G\', \'G\' to \'T\' - The fourth line: cost to change \'T\' to \'A\', \'T\' to \'C\', \'T\' to \'G\', \'T\' to \'T\' # Output - Output the minimum energy cost required to transform the initial DNA sequence to the target sequence. # Constraints - 1 ≤ length of DNA sequence ≤ 1000 - Costs for any transformation range between 0 and 100 # Example INPUT: ``` ACGT TGCA 0 1 2 3 1 0 2 3 1 2 0 3 1 2 3 0 ``` OUTPUT: ``` 4 ``` # Explanation Initial DNA: ACGT Target DNA: TGCA - Change A to T (cost 3) - Change C to G (cost 2) - Change G to C (cost 2) - Change T to A (cost 1) Total Energy Cost: 3 + 2 + 2 + 1 = 8","solution":"def min_energy_cost(initial, target, cost_matrix): Calculate the minimum energy cost to transform the initial DNA sequence to the target DNA sequence. Args: initial (str): The initial DNA sequence. target (str): The target DNA sequence. cost_matrix (list of lists): 4x4 matrix representing the energy cost for transforming nucleotides. Returns: int: The minimum energy cost. nucleotide_to_index = {\'A\': 0, \'C\': 1, \'G\': 2, \'T\': 3} total_cost = 0 for i in range(len(initial)): from_nucleotide = initial[i] to_nucleotide = target[i] from_index = nucleotide_to_index[from_nucleotide] to_index = nucleotide_to_index[to_nucleotide] total_cost += cost_matrix[from_index][to_index] return total_cost"},{"question":"You are given a list of integers. Your task is to find if there exist three distinct elements in the list such that the sum of the three elements is zero. This is a well-known problem often referred to as the 3Sum problem. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. The second line contains n integers ai (-10^9 ≤ ai ≤ 10^9). Output If there exists such a triplet in the list, print \\"YES\\". If there is no such triplet, print \\"NO\\". Examples Input 5 -1 0 1 2 -1 Output YES Input 4 -1 1 2 3 Output NO Input 6 1 2 3 4 5 6 Output NO","solution":"def has_three_sum(nums): Determines if there are three distinct integers in nums that sum up to zero. Args: nums (list): List of integers. Returns: str: \\"YES\\" if such a triplet exists, otherwise \\"NO\\". nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: return \\"YES\\" elif total < 0: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given an array of n integers b_1, b_2, ldots, b_n. You want to perform the following operation: In one operation, you choose two distinct elements b_i and b_j (i neq j), and replace both of them with their GCD (Greatest Common Divisor). Determine whether it is possible to reduce the array to an array that contains only one unique element after some number of such operations. -----Input----- The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 100) — the number of integers. The second line of each test case contains n integers b_1, b_2, ldots, b_n (1 le b_i le 1000). -----Output----- For each test case, if it is possible to make all elements equal after some number of operations, output {YES}. Otherwise, output {NO}. You can output {YES} and {NO} in any case (for example, strings {yEs}, {yes}, {Yes} will be recognized as a positive response). -----Examples----- Input 3 2 2 4 4 5 10 20 25 3 7 11 13 Output YES YES NO -----Note----- In the first test case, we can choose the two elements 2 and 4, whose GCD is 2. So the array will become [2, 2]. In the second test case, we can perform multiple operations to eventually make all elements equal to 5. In the third test case, all the elements are prime numbers and their GCD will always remain 1, thus making it impossible to make all elements equal.","solution":"from math import gcd from functools import reduce def can_all_elements_become_equal(t, test_cases): results = [] for n, arr in test_cases: overall_gcd = reduce(gcd, arr) if overall_gcd in arr: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"We need to implement a function that checks if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward, e.g., \\"radar\\" or \\"level\\". In order for a string to be rearranged into a palindrome, at most one character may appear an odd number of times, while all other characters must appear an even number of times. Let\'s look at an example: ``` string = \\"carrace\\" ``` The string \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\". Another example: ``` string = \\"daily\\" ``` The string \\"daily\\" cannot be rearranged to form a palindrome. Your task is to write the function ```can_rearrange_palindrome(s)``` that will receive a string as an argument and return `True` if the string can be rearranged to form a palindrome, or `False` otherwise. ```python can_rearrange_palindrome(\\"carrace\\") == True can_rearrange_palindrome(\\"daily\\") == False ``` Features of the random tests: ``` Low Performance Tests: 40 Length of the strings between 6 and 15 High Performance Tests: 80 Length of the strings between 15 and 100 ``` Just do it!","solution":"from collections import Counter def can_rearrange_palindrome(s): Checks if the string s can be rearranged to form a palindrome. :param s: A string input :return: True if the string can be rearranged to form a palindrome, False otherwise char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a list of integers. Your task is to find the largest sum of a contiguous subarray within the given list (contains at least one number). ------ Input ------ The first line of the input contains a single integer N denoting the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. ------ Output ------ Print a single line containing the largest sum of a contiguous subarray. ------ Constraints ------ 1 ≤ N ≤ 100,000 -10,000 ≤ text{list element} ≤ 10,000 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 5 1 -2 3 4 -1 ----- Sample Output 1 ------ 7 ----- Sample Input 2 ------ 8 -2 -3 4 -1 -2 1 5 -3 ----- Sample Output 2 ------ 7","solution":"def max_subarray_sum(nums): Returns the largest sum of a contiguous subarray within the given list (contains at least one number). max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given two strings representing two file paths, path1 and path2, determine if path2 is a subpath of path1. A subpath means that path2 is a directory or file within path1. Both paths are given in the Unix-style format, and you may assume that neither path contains any symbolic links, relative path segments (e.g., \\"..\\"), or consecutive slashes. Paths can be of varying lengths and structures, including file names with extensions. Example 1: Input: path1 = \\"/home/user/docs\\", path2 = \\"/home/user/docs/reports\\" Output: true Example 2: Input: path1 = \\"/home/user/docs\\", path2 = \\"/home/user/music\\" Output: false Example 3: Input: path1 = \\"/var/log\\", path2 = \\"/var/log/nginx/access.log\\" Output: true","solution":"def is_subpath(path1, path2): Determines if path2 is a subpath of path1. Args: path1 (str): The first path (parent directory). path2 (str): The second path (potential subpath). Returns: bool: True if path2 is a subpath of path1, False otherwise. if not path1.endswith(\'/\'): path1 += \'/\' return path2.startswith(path1)"},{"question":"You are given an array representing an integer collection and a set of operations to perform on it. Your task is to implement the methods sumRange, update, and findMedian. These methods should execute as per the given operations in a sequence: 1) `sumRange(left, right)`: Returns the sum of the elements between indices `left` and `right` inclusive. 2) `update(index, value)`: Updates the value of the element at the given `index` to `value`. 3) `findMedian()`: Returns the median of the current elements in the array. If the array has an even number of elements, return the average of the two middle elements. Example 1: Input: N = 5 Queries: update(0, 1) update(1, 3) update(2, -1) update(3, 6) update(4, 0) sumRange(1, 3) findMedian() update(2, 2) findMedian() Output: sumRange(1, 3) returns 8 findMedian() returns 1 findMedian() returns 2 Example 2: Input: N = 4 Queries: update(0, 5) update(1, 1) update(2, 7) update(3, 3) sumRange(0, 2) findMedian() update(1, 6) findMedian() Output: sumRange(0, 2) returns 13 findMedian() returns 4 findMedian() returns 5.5 Your Task: You need to implement the functions: - `update(index, value)` that takes an integer `index` and an integer `value` as arguments. - `sumRange(left, right)` that takes two integers `left` and `right` as arguments and returns an integer. - `findMedian()` that returns a float representing the median. Expected Time Complexity: - For `update`: O(Log N) - For `sumRange`: O(Log N) - For `findMedian`: O(N Log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^4 <= element value <= 10^4","solution":"import bisect class NumArray: def __init__(self, n): self.array = [0] * n self.sorted_array = [0] * n def update(self, index, value): # Remove the old value from the sorted array old_value = self.array[index] pos = bisect.bisect_left(self.sorted_array, old_value) self.sorted_array.pop(pos) # Update the array self.array[index] = value # Insert the new value in the sorted array bisect.insort(self.sorted_array, value) def sumRange(self, left, right): return sum(self.array[left:right+1]) def findMedian(self): n = len(self.sorted_array) if n % 2 == 1: return float(self.sorted_array[n // 2]) else: return (self.sorted_array[n // 2 - 1] + self.sorted_array[n // 2]) / 2.0"},{"question":"Implement a function that takes a string containing a full name (first name, middle names in an optional list, and last name) and returns a formatted string with the last name, a comma, the first name, and the initial of each middle name. Each part should be separated by a space. If there are no middle names, the function should still return the last name, a comma, and the first name. Function description Complete the `formatName` function in the editor below. `formatName` has the following parameter: - string fullName: the input string containing the full name. Input Format A single line containing the full name. Full name can have multiple spaces and is case-insensitive. Constraints - 1 <= len(fullName) <= 100 - The input will always contain at least a first name and a last name. - The full name will only contain alphabetical characters and spaces. Output Format Return the formatted name as described. Sample Input 1 ``` John Jacob Jingleheimer Schmidt ``` Sample Output 1 ``` Schmidt, John J J ``` Sample Input 2 ``` Mary Elizabeth Morrison ``` Sample Output 2 ``` Morrison, Mary E ``` Sample Input 3 ``` Alex Turner ``` Sample Output 3 ``` Turner, Alex ``` Explanation 1. In the first example, the last name is \\"Schmidt\\", the first name is \\"John\\", and the middle names are \\"Jacob\\" and \\"Jingleheimer\\". The initials \\"J\\" and \\"J\\" are taken from the middle names and appended to the formatted output. 2. In the second example, the last name is \\"Morrison\\", the first name is \\"Mary\\", and the middle name is \\"Elizabeth\\". The initial \\"E\\" is taken from the middle name and appended. 3. In the third example, the last name is \\"Turner\\" and the first name is \\"Alex\\". There are no middle names, so the output does not include any extra initials.","solution":"def formatName(fullName): Takes a full name and returns a formatted string with the last name, a comma, the first name, and the initial of each middle name. Parameters: fullName (str): The input string containing the full name. Returns: str: The formatted name. # Split the input name into parts name_parts = fullName.split() # Extract the first name, last name, and middle names first_name = name_parts[0] last_name = name_parts[-1] middle_names = name_parts[1:-1] # Prepare the middle initials middle_initials = \' \'.join([name[0] for name in middle_names]) # Combine the format LastName, FirstName M M if middle_initials: return f\\"{last_name}, {first_name} {middle_initials}\\" else: return f\\"{last_name}, {first_name}\\""},{"question":"A factory produces gears in two colors - red and blue. The gears are arranged in an infinite x by y grid. Each cell in the grid contains exactly one gear, and the colors are distributed such that there are no two adjacent cells (horizontally or vertically) with gears of the same color. You are given the coordinates of a series of selected gears in the format (i1, j1), (i2, j2), ..., (in, jn). You need to determine the color of the gear at each of the given coordinates. A gear at cell (i, j) follows this coloring pattern: - If both i and j are even, the gear is red. - If both i and j are odd, the gear is red. - If one of them is even and the other is odd, the gear is blue. Write a program to determine the color of the gear at each specified coordinate. -----Input----- The first line contains one integer number n (1 ≤ n ≤ 1000) — the number of coordinates you are given. The next n lines each contain two integers i and j (1 ≤ i, j ≤ 10^9), representing the coordinates of the gears whose colors you need to determine. -----Output----- For each coordinate pair, print \\"Red\\" if the gear at that coordinate is red, or \\"Blue\\" if the gear at that coordinate is blue. -----Examples----- Input 3 2 3 4 4 1 2 Output Blue Red Blue Input 2 1 1 7 8 Output Red Blue","solution":"def gear_color(n, coordinates): colors = [] for i, j in coordinates: if (i % 2 == j % 2): colors.append(\\"Red\\") else: colors.append(\\"Blue\\") return colors"},{"question":"In a small town, there is a unique vending machine that dispenses candies of different types. Each candy type has a distinct identifier and the machine maintains a fixed but different stock of each type. People come to the machine and select candies one by one based on their preference and the stock levels. However, once a candy type is selected, the stock of that particular candy diminishes by one. If the stock of a desired candy is empty, the vending machine will skip to the next type in the person\'s preference list until it finds one with available stock or all preferences are exhausted. Write a program that simulates the dispensing process of such a vending machine. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of different candy types. - The second line contains n integers, where the i-th integer represents the initial stock of the i-th candy type (0 ≤ stock ≤ 1000). - The third line contains an integer m (1 ≤ m ≤ 1000), the number of people using the vending machine. - Each of the following m lines describes a person\'s preferences. Each line starts with an integer k (1 ≤ k ≤ n), the number of preferred candy types for that person, followed by k integers each representing a preferred candy type in order of preference (1-based index). Output: - Output m lines, each representing the result for one person. For each person, print the identifier of the candy type they received from their preferences, or -1 if none of their preferred candy types are available. Example Input: 5 4 2 0 5 1 3 3 1 3 5 2 2 4 4 1 2 5 3 Example Output: 1 2 1 Explanation: 1. The first person prefers types 1, 3, and 5. They receive candy type 1 because there is stock available for it (4 initially). 2. The second person prefers types 2 and 4. The first choice (type 2) has stock available (2 initially). 3. The third person prefers types 1, 2, 5, and 3. The first choice (type 1) has available stock remaining after the first person takes one candy. Note that all indices in preferences are 1-based, but your program should internally handle them appropriately (e.g., by converting to 0-based indices where necessary).","solution":"def dispense_candies(n, stocks, m, preferences): results = [] for person in preferences: received = -1 for candy in person: if stocks[candy - 1] > 0: received = candy stocks[candy - 1] -= 1 break results.append(received) return results"},{"question":"Ben loves arrays where each element is equal to the length of the longest increasing subarray that ends at that element. For example, if the array is [1, 2, 2, 3, 4], then the lengths of the longest increasing subarrays ending at each element are [1, 2, 1, 2, 3]. Given an array, Ben wants to know the sum of the lengths of the longest increasing subarrays ending at each element in the array. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N - the length of the array. - The second line of each test case contains N space-separated integers - the elements of the array. ------ Output Format ------ For each test case, output the sum of the lengths of the longest increasing subarrays ending at each element in the array. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} - Sum of N does not exceed 10^{6} over all test cases ------ Sample Input 1 ------ 2 5 1 2 2 3 4 3 3 2 1 ------ Sample Output 1 ------ 9 3 ------ Explanation 1 ------ - Test case 1: The lengths of the longest increasing subarrays ending at each element are [1, 2, 1, 2, 3]. Their sum is 9. - Test case 2: The lengths of the longest increasing subarrays ending at each element are [1, 1, 1]. Their sum is 3.","solution":"def sum_of_longest_increasing_subarrays(T, test_cases): results = [] for case in test_cases: N, arr = case lis_lengths = [1] * N total_sum = 1 for i in range(1, N): if arr[i] > arr[i-1]: lis_lengths[i] = lis_lengths[i-1] + 1 total_sum += lis_lengths[i] results.append(total_sum) return results # Function to parse inputs and provide expected outputs def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) arr = list(map(int, data[index+1:index+1+N])) test_cases.append((N, arr)) index += 1 + N return T, test_cases"},{"question":"In a distant city, the water supply system is regulated by a unique structure of pipelines. Each pipeline can either supply water from a given source or distribute water to multiple destinations. A fluctuating water demand in various parts of the city requires frequent adjustments to ensure every section receives adequate supply. You are tasked with maintaining an efficient water distribution system that fulfills the demand in each section while adhering to city regulations. Given the structure of the city’s pipeline system and the water demand in each section, determine the minimal number of changes required to the pipeline configuration to meet the water demands. ----- Input ----- The first line of input contains two space-separated integers: - `N` (number of sections in the city) - `M` (number of pipelines) The next `M` lines each contain two space-separated integers: - `u` (starting section of the pipeline) - `v` (ending section of the pipeline) Following this, the next line contains `N` space-separated integers representing the water demand in each section `i` (`d_i`). ----- Output ----- Print a single integer representing the minimal number of changes required to the pipeline configuration to meet the water demands in each section. ----- Constraints ----- 2 ≤ N ≤ 1000 1 ≤ M ≤ 5000 0 ≤ d_i ≤ 10^5 ----- Sample Input 1 ----- 5 6 1 2 1 3 2 4 2 5 3 4 3 5 10 20 30 40 50 ----- Sample Output 1 ----- 3 ----- Explanation 1 ----- Given the complexities in water distribution, a minimum of 3 changes in the pipeline configuration are needed to meet the specified demands in each section.","solution":"def minimum_pipeline_changes(N, M, pipelines, demands): # Create adjacency list for the pipeline graph adj_list = [[] for _ in range(N)] for u, v in pipelines: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) # This function computes the minimum pipeline changes required. # In this example, we will use a simple heuristic function # based on balancing demand and supply in each node. # Initialize changes counter changes = 0 # Simple heuristic: each section at least needs to satisfy its own demand for d in demands: if d > 0: changes += 1 return changes"},{"question":"Task: You have to create a function `isHappyNumber` to determine whether the argument passed is a Happy Number and return true if it is & false otherwise. # Description: A `Happy Number` is a number which eventually reaches 1 when replaced by the sum of the square of each digit. If a number is not happy, it will result in a cycle that does not include 1. # Explanation: 19 is a Happy Number: 1² + 9² = 82 8² + 2² = 68 6² + 8² = 100 1² + 0² + 0² = 1 Therefore, the function should return true for 19. Let\'s take another example: 2 is not a Happy Number: 2² = 4 4² = 16 1² + 6² = 37 3² + 7² = 58 5² + 8² = 89 8² + 9² = 145 1² + 4² + 5² = 42 4² + 2² = 20 2² + 0² = 4 (cycle starts again) Therefore, the function should return false for 2.","solution":"def isHappyNumber(n): Determine if a number is a Happy Number. :param n: int, the number to check :return: bool, True if n is a Happy Number, False otherwise def get_next(number): return sum(int(ch)**2 for ch in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"You are given a sequence of integers b of length n consisting of integers from 1 to 10^9. The sequence may contain duplicates (i.e., some elements can be equal). Your task is to find the number of subarrays such that the sum of the elements of the subarray is divisible by p. Formally, you need to find the number of tuples (i, j) such that the sum of the elements of the subarray b_i + b_{i+1} + ldots + b_j is divisible by p. For example, if n=4, p=5, and b=[5,10,15,20], then there are ten such subarrays. If n=3, p=3, and b=[3,6,9], then all six possible subarrays are suitable. As the result can be very large, you should print the value modulo 10^9 + 7 (the remainder when divided by 10^9 + 7). -----Input----- The first line contains a single integer q (1 le q le 10^4) — the number of queries. Then q queries follow. The first line of each query contains two integers n and p (1 le n le 2 cdot 10^5, 1 le p le 10^9) — the length of the sequence b and the divisor p. The next line contains n integers b_1, b_2,ldots, b_n (1 le b_i le 10^9) — the sequence b. It is guaranteed that the sum of n for all queries does not exceed 2 cdot 10^5. -----Output----- Output q answers to the given queries. Each answer is the required number of subarrays whose sum is divisible by p, modulo 10^9 + 7. -----Examples----- Input 3 4 5 5 10 15 20 3 3 3 6 9 5 2 1 2 3 4 5 Output 10 6 6 -----Note----- In the first example, all possible subarrays\' sums are divisible by 5. In the second example, all possible subarrays\' sums are divisible by 3.","solution":"MOD = 10**9 + 7 def count_subarrays_divisible_by_p(q, queries): results = [] for i in range(q): n, p = queries[i][0] b = queries[i][1] prefix_sum_mod = [0] * (n + 1) for j in range(n): prefix_sum_mod[j + 1] = (prefix_sum_mod[j] + b[j]) % p from collections import defaultdict mod_count = defaultdict(int) subarray_count = 0 for j in range(n + 1): subarray_count = (subarray_count + mod_count[prefix_sum_mod[j]]) % MOD mod_count[prefix_sum_mod[j]] += 1 results.append(subarray_count) return results"},{"question":"You are developing software for an online bookstore that has a diverse inventory of books various genres and authors. Each book has a unique identifier, title, author, genre, and number of pages. The system needs to support complex queries to help customers find exactly what they are looking for. Implement a function that takes three parameters: 1. A list of dictionaries representing the bookstore\'s inventory. Each dictionary contains the following key-value pairs: - \\"id\\": Unique identifier of the book (integer) - \\"title\\": Title of the book (string) - \\"author\\": Author of the book (string) - \\"genre\\": Genre of the book (string) - \\"pages\\": Number of pages in the book (integer) 2. A list of genres to filter by (an empty list means no genre filter). 3. A maximum number of pages (integer; `None` means no page limit). The function should return a list of book titles that match the given filters. The titles should be sorted alphabetically.","solution":"def filter_books(inventory, genres, max_pages): Filters the books based on the provided genres and max_pages. Parameters: - inventory (list of dict): List of dictionaries where each dictionary represents a book. - genres (list of str): List of genres to filter by. - max_pages (int or None): Maximum number of pages; None means no page limit. Returns: - List of book titles that match the filters, sorted alphabetically. filtered_books = [] for book in inventory: if (not genres or book[\'genre\'] in genres) and (max_pages is None or book[\'pages\'] <= max_pages): filtered_books.append(book[\'title\']) return sorted(filtered_books)"},{"question":"Write a function that takes an integer array `nums`, representing the current scores of various players in a game, and an integer `extraPoints`, denoting the extra points a player can gain. Return a list of booleans where each boolean indicates whether, after adding the `extraPoints` to the corresponding player’s score, that player could have the highest score among all players. Examples: Input: nums = [2, 3, 5, 1, 3], extraPoints = 3 Output: [true, true, true, false, true] Input: nums = [4, 2, 1, 1, 2], extraPoints = 1 Output: [true, false, false, false, false] Input: nums = [12, 1, 12], extraPoints = 10 Output: [true, false, true] Note: - `1 <= nums.length <= 100` - `0 <= nums[i] <= 100` - `1 <= extraPoints <= 50`","solution":"def can_have_highest_score(nums, extraPoints): Returns a list of booleans indicating whether, after adding extraPoints to the corresponding player\'s score, that player could have the highest score among all players. Parameters: nums (list of int): the current scores of various players. extraPoints (int): the extra points a player can gain. Returns: list of bool: whether each player could have the highest score after adding the extra points. max_score = max(nums) return [(score + extraPoints >= max_score) for score in nums]"},{"question":"You are given a rectangular grid of size NxM, where certain cells contain obstacles. A robot starts at the top-left corner (1, 1) and its goal is to reach the bottom-right corner (N, M). The robot can only move either right or down. Write a function to determine the number of unique paths the robot can take to reach the target while avoiding obstacles. # Input The first line contains a single integer T, the number of test cases. Each test case begins with a line containing two integers N and M representing the dimensions of the grid. The next line contains an integer K, the number of obstacles in the grid. The following K lines each contain two integers x and y, representing the coordinates of an obstacle cell. # Output For each test case, print the number of unique paths from the top-left to the bottom-right corner of the grid. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N, M ≤ 100 - 0 ≤ K ≤ min(N*M, 10^4) - 1 ≤ x ≤ N - 1 ≤ y ≤ M # Sample Input ```plaintext 2 3 3 1 2 2 3 3 2 2 2 3 2 ``` # Sample Output ```plaintext 2 1 ``` # Explanation For the first test case: - The grid is 3x3 with one obstacle at (2, 2). - There are 2 unique paths to reach from (1, 1) to (3, 3): 1. (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) 2. (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) For the second test case: - The grid is 3x3 with obstacles at (2, 2) and (3, 2). - There is only 1 unique path to reach from (1, 1) to (3, 3): 1. (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3)","solution":"def unique_paths_with_obstacles(n, m, obstacles): Determine the number of unique paths from top-left to bottom-right of a grid with obstacles. :param n: number of rows in the grid :param m: number of columns in the grid :param obstacles: list of (x, y) tuples representing obstacle coordinates :return: number of unique paths grid = [[0 for _ in range(m)] for _ in range(n)] # Mark obstacles on the grid for x, y in obstacles: grid[x-1][y-1] = -1 # If the start or end point is an obstacle, there are no paths if grid[0][0] == -1 or grid[n-1][m-1] == -1: return 0 # Initialize the start point grid[0][0] = 1 # Fill the dynamic programming table for i in range(n): for j in range(m): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[n-1][m-1] def number_of_unique_paths(test_cases): Process multiple test cases to find the number of unique paths for each case. :param test_cases: list of (N, M, K, obstacles) tuples :return: list of results for each test case results = [] for n, m, k, obstacles in test_cases: results.append(unique_paths_with_obstacles(n, m, obstacles)) return results"},{"question":"Calculate the maximum amount of water that can be trapped after raining in a set of bars of different heights. Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. The elevation map provided looks like this: [0,1,0,2,1,0,1,3,2,1,2,1], where the array represents the height of bars. Input: - First line contains an integer t, the number of test cases. - For next t lines, each line contains an integer n followed by n non-negative integers representing the height of the elevation map. Output: - For each test case, print the maximum amount of water that can be trapped. Constraints: 1 ≤ t ≤ 10 0 ≤ n ≤ 10^5 0 ≤ elevation[i] ≤ 10^4 Example: Input: 2 12 0 1 0 2 1 0 1 3 2 1 2 1 6 4 2 0 3 2 5 Output: 6 9 SAMPLE INPUT 2 12 0 1 0 2 1 0 1 3 2 1 2 1 6 4 2 0 3 2 5 SAMPLE OUTPUT 6 9","solution":"def max_water_trapped(n, heights): Calculate the maximum amount of water that can be trapped after raining on a given elevation map. :param n: Integer, length of the list `heights` :param heights: List of non-negative integers representing the elevation map. :return: Integer, maximum water trapped. if n == 0: return 0 left = [0] * n right = [0] * n water_trapped = 0 # Fill left array left[0] = heights[0] for i in range(1, n): left[i] = max(left[i - 1], heights[i]) # Fill right array right[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], heights[i]) # Calculate the trapped water for i in range(0, n): water_trapped += min(left[i], right[i]) - heights[i] return water_trapped def process_input(t, test_cases): Process multiple test cases to determine the maximum amount of water trapped for each case. :param t: Integer, the number of test cases. :param test_cases: List of tuples where each tuple contains (n, heights) for each test case. :return: List of integers representing the result for each test case. results = [] for i in range(t): n, heights = test_cases[i] result = max_water_trapped(n, heights) results.append(result) return results"},{"question":"Tom is building a sequence of binary strings of a certain length. He wants to find out how many unique binary strings of length `n` can be constructed such that there are no two consecutive \'1\'s. A binary string is a string that consists of only \'0\'s and \'1\'s. For instance, \\"0101\\" and \\"1001\\" are binary strings of length 4. Can you help Tom figure out how many such unique binary strings of length `n` exist? ----- Input ----- The first and only line contains a single integer `n` (1 ≤ n ≤ 50) — the length of the binary strings. ----- Output ----- Print a single integer, the number of unique binary strings of length `n` such that no two consecutive \'1\'s appear. ----- Examples ----- Input 3 Output 5 Input 4 Output 8 Input 1 Output 2 Input 2 Output 3 ----- Note ----- In the first example, the possible strings are \\"000\\", \\"001\\", \\"010\\", \\"100\\", \\"101\\". In the second example, the possible strings are \\"0000\\", \\"0001\\", \\"0010\\", \\"0100\\", \\"0101\\", \\"1000\\", \\"1001\\", \\"1010\\".","solution":"def count_binary_strings(n): Returns the number of unique binary strings of length n such that there are no two consecutive \'1\'s. if n == 1: return 2 # \\"0\\", \\"1\\" if n == 2: return 3 # \\"00\\", \\"01\\", \\"10\\" dp = [0] * (n + 1) dp[1] = 2 # \\"0\\", \\"1\\" dp[2] = 3 # \\"00\\", \\"01\\", \\"10\\" for i in range(3, n + 1): dp[i] = dp[i-1] + dp[i-2] return dp[n]"},{"question":"The company \\"Autonomous Vehicles Inc.\\" is developing a navigation system for self-driving cars. The system must determine whether a car can travel from a start position to an end position on a grid-based map without encountering obstacles. The grid is represented by an M times N matrix, where each cell is either free (denoted by \'.\') or contains an obstacle (denoted by \'#\'). The car can move up, down, left, or right but cannot move diagonally. Given the starting position and the destination position, determine if there is a path that the car can take to reach its destination. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and N (the dimensions of the grid). The next M lines describe the grid with N characters each (either \'.\' or \'#\'). The following line contains four space-separated integers S_{r}, S_{c}, E_{r}, and E_{c}, which represent the starting row, starting column, ending row, and ending column, respectively. ------ Output ------ For each test case, print \\"YES\\" if there is a path from the starting position to the destination, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ M, N ≤ 100 1 ≤ S_{r}, E_{r} ≤ M 1 ≤ S_{c}, E_{c} ≤ N S_{r}, S_{c} are the starting row and column (1-based index). E_{r}, E_{c} are the ending row and column (1-based index). There will be exactly one path from S to E if there are no obstacles. ----- Sample Input 1 ------ 2 3 4 .... ..#. .... 1 1 3 4 3 4 .... .... 1 1 3 4 ----- Sample Output 1 ------ YES NO ----- explanation 1 ------ Example case 1: In the first test case, there is a clear path from the starting position (1, 1) to the ending position (3, 4). In the second test case, the path is blocked by obstacles, so it is not possible to reach the ending position from the starting position.","solution":"def can_travel(grid, start, end): from collections import deque M = len(grid) N = len(grid[0]) if M > 0 else 0 visited = [[False] * N for _ in range(M)] def is_valid(x, y): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' and not visited[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def autonomous_vehicles_inc(T, test_cases): results = [] for t in range(T): M, N = test_cases[t][\'dimensions\'] grid = test_cases[t][\'grid\'] S_r, S_c, E_r, E_c = test_cases[t][\'positions\'] start = (S_r - 1, S_c - 1) end = (E_r - 1, E_c - 1) results.append(can_travel(grid, start, end)) return results"},{"question":"Julia is a video game developer working on a new puzzle game. In the game, players must guide a character through a series of rooms connected by doors. The character starts in a specific room and must find the shortest path to a goal room. Each room is represented as a node in a graph, and each door as an edge between nodes. Some doors are one-way, allowing passage in only one direction. Julia wants to determine the shortest path from a starting room to a goal room in the graph for various scenarios. If no path exists, the game should indicate that the goal is unreachable. Can you help Julia by writing a program that calculates the shortest path in each scenario? -----Input:----- - First line contains T, the number of test cases. The test cases follow. - The first line of each test case contains two integers, N and M, representing the number of rooms (nodes) and the number of doors (edges) respectively. - The next M lines each contain three integers u, v, and w. This means there is a door from room u to room v with a time cost w. - The next line contains two integers S and G, representing the starting room and the goal room. -----Output:----- For each test case, output a single line with the shortest path cost from the starting room to the goal room. If the goal room is unreachable from the starting room, print \\"unreachable\\". -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 2000 - 1 ≤ u, v, S, G ≤ N - 1 ≤ w ≤ 1000 -----Sample Input:----- 2 4 4 1 2 1 2 3 2 3 4 1 1 4 4 1 4 5 6 1 2 2 1 3 1 2 4 3 3 4 1 4 5 2 3 5 5 1 5 -----Sample Output:----- 4 4 In the first scenario, the character can take the direct path from room 1 to room 4 with cost 4. In the second scenario, the shortest path is from room 1 to room 3, then room 3 to room 4, and finally room 4 to room 5 with a total cost of 4.","solution":"import heapq def find_shortest_paths(T, test_cases): results = [] for i in range(T): N, M, edges, S, G = test_cases[i] graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((w, v)) distance = {i: float(\'inf\') for i in range(1, N + 1)} distance[S] = 0 priority_queue = [(0, S)] while priority_queue: current_distance, node = heapq.heappop(priority_queue) if current_distance > distance[node]: continue for weight, neighbor in graph[node]: distance_via_node = current_distance + weight if distance_via_node < distance[neighbor]: distance[neighbor] = distance_via_node heapq.heappush(priority_queue, (distance_via_node, neighbor)) if distance[G] == float(\'inf\'): results.append(\\"unreachable\\") else: results.append(distance[G]) return results"},{"question":"Arjun is fascinated by the idea of representing various sequences using arrays. He has been working on generating special sequences where each element is defined by a specific formula based on its position in the sequence. Your task is to help Arjun by writing a code to generate his special sequence. The definition of the sequence is as follows: - The sequence starts with a given number `A`. - The next element in the sequence is obtained by adding `B` to the previous element. - This continues until the sequence contains `M` elements in total. Input: - The first line of the input contains the number of test cases `T`. - The following `T` lines each contain three integers `A`, `B`, and `M`, which stand for the start number, the common difference, and the length of the sequence respectively. Output: - For each test case, print the generated sequence in a single line separated by spaces. - There should be an empty line separating the outputs of different test cases. Constraints: - `T ≤ 5` - `1 ≤ A, B ≤ 100` - `1 ≤ M ≤ 15` SAMPLE INPUT 2 1 2 5 3 4 3 SAMPLE OUTPUT 1 3 5 7 9 3 7 11","solution":"def generate_sequences(t, cases): This function generates special sequences for each test case. Parameters: t (int): Number of test cases. cases (List[Tuple[int, int, int]]): A list of tuples, each containing three integers A, B, and M. Returns: List[str]: A list containing the generated sequences for each test case. results = [] for case in cases: A, B, M = case sequence = [] for i in range(M): sequence.append(A + i * B) results.append(\\" \\".join(map(str, sequence))) return results def format_output(sequences): This function formats the output of sequences as expected with a newline separating them. Parameters: sequences (List[str]): List of sequences as strings. Returns: str: Formatted string with sequences separated by newlines. return \\"nn\\".join(sequences)"},{"question":"A university has decided to organize its end-of-semester exams in multiple rooms of varying sizes. They want to allocate students to rooms such that no room is overfilled and each room has at least half of its capacity occupied. Each student takes exactly one exam and is allowed to choose any room provided it meets the room’s constraints after all students have made their choice. Can you help determine if it’s possible to allocate students to rooms under these conditions? -----Input----- Input starts with an integer t (1 leq t leq 100), the number of test cases. Each test case starts with two integers n (1 leq n leq 100), the number of rooms, and s (1 leq s leq 1000), the number of students. The next line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 1000) representing the capacity of each room. -----Output----- Output “yes” if it’s possible to allocate students to rooms under the given conditions for each test case. Otherwise, output “no”. -----Examples----- Sample Input 1: 2 3 150 60 70 90 2 50 60 40 Sample Output 1: yes no Sample Input 2: 1 4 200 50 100 70 80 Sample Output 2: yes","solution":"def can_allocate_rooms(test_cases): Determines if it is possible to allocate students to rooms under given conditions. :param test_cases: List of test cases where each test case is a tuple of (n, s, capacities) n: number of rooms s: number of students capacities: list of room capacities :returns: List of \\"yes\\" or \\"no\\" for each test case results = [] for n, s, capacities in test_cases: if sum(capacities) < s or any(s // len(capacities) < capacity // 2 for capacity in capacities): results.append(\\"no\\") else: results.append(\\"yes\\") return results"},{"question":"You are given two strings `a` and `b`, both consisting of only lowercase letters and having the same length of `n`. In one operation, you can choose any character in string `a` and replace it with any other lowercase letter. You cannot make any changes in string `b`. Your goal is to determine the minimum number of operations required to make the two strings anagrams of each other. Two strings are anagrams if they use the same characters in the same frequencies. -----Input----- The first line contains a single integer `t` (1 le t le 100) — the number of test cases. The first line of each test case contains an integer `n` (1 le n le 100000) — the length of the strings `a` and `b`. The second line of each test case contains the binary string `a` of length `n`. The third line of each test case contains the binary string `b` of length `n`. It\'s guaranteed that the total sum of `n` over all test cases does not exceed 10^6. -----Output----- For each test case, print the minimum number of operations required to make `a` and `b` anagrams of each other. -----Example----- Input 2 3 abc bca 4 abcd dcba Output 0 0 -----Note----- In the first test case, the strings `abc` and `bca` are already anagrams, therefore no operations are needed. In the second test case, the strings `abcd` and `dcba` are also already anagrams, so no operations are required.","solution":"def min_operations_to_anagrams(t, test_cases): Determines the minimum number of operations required to make two strings anagrams. Parameters: t (int): The number of test cases. test_cases (list): A list of test cases, each containing three elements: n (int), a (str), b (str). Returns: list: A list of integers representing the minimum number of operations for each test case. results = [] for case in test_cases: n, a, b = case count_a = [0] * 26 count_b = [0] * 26 for char in a: count_a[ord(char) - ord(\'a\')] += 1 for char in b: count_b[ord(char) - ord(\'a\')] += 1 operations = 0 for i in range(26): if count_b[i] > count_a[i]: operations += count_b[i] - count_a[i] results.append(operations) return results"},{"question":"In a futuristic amusement park, there\'s a new game involving an AI-controlled robotic arm called the \\"Block Stacker.\\" The game involves stacking blocks on a board, represented as a 2D grid, following a set of rules and instructions. # Objective You need to write a program that simulates the stacking process and provides the final height of each column on the board after all instructions have been executed. # Input The input consists of several test cases. Each test case starts with two integers W and H (the width and height of the board), followed by a sequence of instructions. - The first line of each test case contains two integers W and H (1 ≤ W, H ≤ 100), which represent the number of columns and the maximum height of the board, respectively. - The next line contains a single integer N (1 ≤ N ≤ 100), which represents the number of instructions. Each of the following N lines describes one instruction in the format: C B, where: - C is an integer (0 ≤ C < W) representing the column (0-indexed) where blocks are to be placed. - B is an integer (1 ≤ B ≤ H) representing the number of blocks to be placed in that column. # Output For each test case, output a single line containing W integers, where the i-th integer represents the height of the i-th column after all instructions have been executed. # Example Input ``` 2 3 5 4 0 1 1 2 2 3 1 2 4 10 5 0 4 3 3 2 2 1 3 0 1 ``` Output ``` 1 2 3 5 3 2 3 0 ``` # Explanation For the first test case: - Initially, the board has 3 columns with a maximum height of 5. - The first instruction places 1 block in column 0. The heights become [1, 0, 0]. - The second instruction places 2 blocks in column 1. The heights become [1, 2, 0]. - The third instruction places 3 blocks in column 2. The heights become [1, 2, 3]. - The fourth instruction places 2 blocks in column 1, but since column 1 already has 2 blocks from the second instruction, the new height becomes 4, which is the total number of blocks added. However, it exceeds the maximum height, so it remains as 2. The heights remain [1, 2, 3]. For the second test case: - Initially, the board has 4 columns with a maximum height of 10. - The first instruction places 4 blocks in column 0. The heights become [4, 0, 0, 0]. - The second instruction places 3 blocks in column 3. The heights become [4, 0, 0, 3]. - The third instruction places 2 blocks in column 2. The heights become [4, 0, 2, 3]. - The fourth instruction places 3 blocks in column 1. The heights become [4, 3, 2, 3]. - The fifth instruction places 1 block in column 0. The heights become [5, 3, 2, 3]. Hence, the final output should be: ``` 5 3 2 3 0 ```","solution":"def block_stacker(test_cases): results = [] for case in test_cases: W, H = case[\'W\'], case[\'H\'] instructions = case[\'instructions\'] column_heights = [0] * W for instruction in instructions: C, B = instruction column_heights[C] = min(column_heights[C] + B, H) results.append(column_heights) return results"},{"question":"A large company is planning to implement a new bonus structure for their employees based on their performance scores. Each employee has a unique ID and is assigned a score. The company wants to reward bonuses to the top k performers. Write a program to determine the IDs of the top k performers. If multiple employees have the same score, they should be ordered by their IDs in ascending order. Input The input consists of multiple datasets. Each dataset starts with two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n), where n is the number of employees and k is the number of top performers to retrieve. The next n lines contain two integers, each representing an employee\'s ID (1 ≤ ID ≤ 1000) and their performance score (1 ≤ score ≤ 100). Each ID is unique within a dataset. The end of the input is indicated by a line with two zeros. Output For each dataset, print the IDs of the top k performers in ascending order of their IDs. Print one set of IDs per line, separated by spaces. Example Input 5 3 101 95 102 90 103 95 104 85 105 90 4 2 201 100 202 100 203 50 204 50 0 0 Output 101 103 102 201 202","solution":"def find_top_k_performers(datasets): results = [] for dataset in datasets: n, k = dataset[0] employees = dataset[1:] employees = sorted(employees, key=lambda x: (-x[1], x[0])) top_k_ids = [employee[0] for employee in employees[:k]] results.append(\\" \\".join(map(str, top_k_ids))) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): n, k = map(int, lines[i].split()) if n == 0 and k == 0: break dataset = [(n, k)] for j in range(i+1, i+1+n): id_score = tuple(map(int, lines[j].split())) dataset.append(id_score) datasets.append(dataset) i += n + 1 return datasets # Testing function with given input and output def main(): input_str = 5 3 101 95 102 90 103 95 104 85 105 90 4 2 201 100 202 100 203 50 204 50 0 0 datasets = parse_input(input_str) results = find_top_k_performers(datasets) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Problem Description: A local grocery store is managing their inventory and they need your help to keep track of the stock levels. You are provided with a list of items and their respective quantities. Your task is to create a function that updates the stock levels after a set of transactions. Each transaction consists of an item and a quantity change, which can be either positive (adding stock) or negative (removing stock). Example Test Case 1: Input: items = { \\"apple\\": 10, \\"banana\\": 5, \\"orange\\": 8 } transactions = [ (\\"apple\\", -3), (\\"banana\\", 2), (\\"orange\\", -5), (\\"grape\\", 7) ] Output: { \\"apple\\": 7, \\"banana\\": 7, \\"orange\\": 3, \\"grape\\": 7 } Example Test Case 2: Input: items = { \\"milk\\": 12, \\"bread\\": 6, \\"butter\\": 2 } transactions = [ (\\"milk\\", 4), (\\"bread\\", -3), (\\"butter\\", -2), (\\"cheese\\", 5) ] Output: { \\"milk\\": 16, \\"bread\\": 3, \\"butter\\": 0, \\"cheese\\": 5 } When you click on submit and choose your language, you will see the incorrect code being displayed on the editor. You may copy that code or edit it there itself. You have to submit a code that correctly updates the stock levels as described above. Note: Your code should handle cases where a transaction contains a new item that doesn’t exist in the initial list.","solution":"def update_stock(items, transactions): Updates the stock levels according to the given transactions. Parameters: items (dict): Dictionary of items with their current stock levels. transactions (list): List of transactions where each transaction is a tuple (item, quantity_change). Returns: dict: Updated dictionary of items with adjusted stock levels. for item, quantity_change in transactions: if item in items: items[item] += quantity_change else: items[item] = quantity_change return items"},{"question":"You are given a series of stacks filled with plates. Plates in each stack are labeled with a number representing their cleanliness level, where a higher number indicates a cleaner plate. The task at hand is to help Raju determine the cleanliness level of the cleanest plate across all the stacks. Input: - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer S, the number of stacks. - The next S lines contain space-separated integers. The first integer in each line denotes the number of plates in the stack followed by the cleanliness levels of the plates. Output: - For each test case, print the cleanliness level of the cleanest plate among all stacks. Constraints: 1 ≤ T ≤ 5 1 ≤ S ≤ 1000 1 ≤ Number of plates in each stack ≤ 1000 1 ≤ Cleanliness level of each plate ≤ 1000 SAMPLE INPUT 1 3 3 5 1 9 2 3 8 4 7 6 2 4 SAMPLE OUTPUT 9","solution":"def find_cleanest_plate(test_cases): Given a series of stacks filled with plates, each labeled with a cleanliness level, return the cleanliness level of the cleanest plate across all the stacks for each test case. :param test_cases: List of test cases, each test case is a tuple where the first item is the number of stacks, and the second item is a list of stacks. :return: List of cleanliness levels of the cleanest plate for each test case. results = [] for test_case in test_cases: stacks = test_case[1] cleanest = 0 for stack in stacks: plates = stack[1:] # The first number is the count of plates cleanest = max(cleanest, max(plates)) results.append(cleanest) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines.pop(0)) index = 0 test_cases = [] for _ in range(T): S = int(lines[index]) stacks = [] for i in range(1, S + 1): stacks.append(list(map(int, lines[index + i].split()))) index += S + 1 test_cases.append((S, stacks)) return test_cases def solve(input_str): test_cases = parse_input(input_str) results = find_cleanest_plate(test_cases) for result in results: print(result)"},{"question":"You are given an array of integers nums, where the ith element represents the score of the ith player in a game. Your task is to divide all the players into two teams such that the absolute difference between the total scores of the two teams is minimized. Return the minimum absolute difference. Example 1: Input: nums = [1,2,3,4,5] Output: 1 Explanation: One possible team division is [1,2,4] and [3,5], with total scores 7 and 8 respectively. The absolute difference is 1. Example 2: Input: nums = [10,20,15,5,25] Output: 5 Explanation: One possible team division is [10,15,5] and [20,25], with total scores 30 and 45 respectively. The absolute difference is 5. Example 3: Input: nums = [1,1,1,1,1] Output: 1 Explanation: With equal scores, any division will result in a minimal non-zero difference, which is 1. Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100","solution":"def min_diff_teams(nums): Returns the minimum absolute difference between the total scores of two teams. total_sum = sum(nums) n = len(nums) # DP array where dp[i] will be True if a subset with sum i can be formed dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in nums: for i in range(total_sum // 2, num - 1, -1): if dp[i - num]: dp[i] = True for i in range(total_sum // 2, -1, -1): if dp[i]: other_team_sum = total_sum - i return abs(i - other_team_sum)"},{"question":"There are n balls in a row, initially sorted in ascending order by weight. There are two operations you can perform an unlimited number of times: 1. Reverse the entire row. 2. Swap any two adjacent balls. Your task is to determine if it is possible to sort the balls in descending order using the allowed operations. Write a function `canSortDescending(n: int, weights: List[int]) -> bool` that takes in an integer n representing the number of balls and a list of integers weights representing the weight of each ball, and returns a boolean indicating whether it is possible to sort the balls in descending order. # Example 1: Input: ```python n = 5 weights = [1, 2, 3, 4, 5] ``` Output: ```python True ``` Explanation: You can reverse the entire row to get [5, 4, 3, 2, 1], which is sorted in descending order. # Example 2: Input: ```python n = 4 weights = [3, 1, 2, 4] ``` Output: ```python True ``` Explanation: By swapping adjacent balls, you can achieve [3, 2, 1, 4], then reverse it to get [4, 1, 2, 3], continue swapping until [4, 3, 2, 1] is achieved. # Example 3: Input: ```python n = 3 weights = [3, 2, 1] ``` Output: ```python True ``` Explanation: The weights are already sorted in descending order. # Example 4: Input: ```python n=3 weights = [2, 1, 3] ``` Output: ```python False ``` Explanation: It is not possible to sort the balls in strictly descending order using the given operations. Note: - The list is guaranteed to contain unique weights. - n is a positive integer and fits in the range [1, 1000]. - The weights list fits in memory and its length is n.","solution":"from typing import List def canSortDescending(n: int, weights: List[int]) -> bool: Determine if it is possible to sort the balls in descending order using the allowed operations. :param n: Number of balls :param weights: List of integers representing the weights of the balls :return: Boolean value indicating if it is possible to sort the balls in descending order # If we reverse the whole row, we get the reversed list reversed_weights = weights[::-1] # Create a sorted list in descending order sorted_weights = sorted(weights, reverse=True) # If reversing the entire row results in the sorted list, return True if reversed_weights == sorted_weights: return True # Otherwise, check if we can sort it using adjacent swaps # We can transform any permutation to another by adjacent swaps return True"},{"question":"This is an interactive task. You are given a list of N distinct integers, where N is an even number greater than or equal to 2. The integers are initially hidden from you. Your goal is to find the integer with the maximum value within a limited number of comparisons. You are allowed to compare any two integers at a time to determine which one is greater. The total number of comparisons you can make is limited to (N log N). Each comparison is represented by a query where you choose two different indices and ask which integer is greater. Now, let us begin. Constraints * 2 leq N leq 100 * N is an even number. Example Input Output","solution":"def find_maximum(arr): Returns the maximum value in the array using a limited number of comparisons. Assumes N, the length of the array, is an even number. if len(arr) == 0: return None # Standard linear search to find the maximum value max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_value = arr[i] return max_value"},{"question":"A group of friends is playing a game where they have to rearrange the letters of a given string to form as many palindromes as possible. A palindrome is a string that reads the same forwards and backwards. You are given a string S consisting of lowercase English letters, and your task is to determine the maximum number of palindromic strings that can be formed by rearranging the characters of S. Each character can be used in only one palindromic string, and each palindromic string must use at least one character. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string S consisting of lowercase English letters. ------ Output ------ For each test case, print a single integer denoting the maximum number of palindromic strings that can be formed by rearranging the characters of S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{3} S consists of lowercase English letters {a-z} ----- Sample Input 1 ------ 3 aabb abc aaaaaa ----- Sample Output 1 ------ 2 1 3 ----- Explanation 1 ------ Example case 1: The string \\"aabb\\" can be rearranged to form the palindromes \\"abba\\" or \\"baab\\", resulting in a maximum of 2 palindromic strings. Example case 2: The string \\"abc\\" can only form a single palindrome, either \\"a\\", \\"b\\", or \\"c\\". Example case 3: The string \\"aaaaaa\\" can be divided into 3 palindromes, each consisting of two \'a\'s: \\"aa\\", \\"aa\\", \\"aa\\".","solution":"from collections import Counter def max_palindromic_strings(s): Given a string \'s\', calculate the maximum number of palindromic strings that can be formed by rearranging the characters. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # We can form (sum of counts) // 2 palindromes + 1 if there is an odd count palindrome_count = (len(s) - odd_count) // 2 + (1 if odd_count > 0 else 0) return palindrome_count def solve_problem(T, test_cases): results = [] for s in test_cases: results.append(max_palindromic_strings(s)) return results"},{"question":"In a game, there are n players numbered from 0 to n-1. Each player has a list of points they scored in each round of the game, given in a 2D array `scores`, where `scores[i]` is a list of integers representing the points scored by player i in each round. The winner of the game is the player with the maximum total points. If two or more players have the same total points, the winner is determined by the highest points scored in a single round among the tied players. If there is still a tie, the winner is the player with the lowest index. Write a function `find_winner` to determine the winner of the game. Example 1: Input: n = 3, scores = [[10, 20, 30], [20, 30, 10], [30, 10, 20]] Output: 2 Explanation: - Player 0 total points: 10 + 20 + 30 = 60 - Player 1 total points: 20 + 30 + 10 = 60 - Player 2 total points: 30 + 10 + 20 = 60 - All players have the same total points (60). - Player 0 highest single round: 30 - Player 1 highest single round: 30 - Player 2 highest single round: 30 - All players have the same highest points in a single round. - Player with the lowest index is player 2. Example 2: Input: n = 4, scores = [[40, 50], [30, 60], [50, 50], [60, 30]] Output: 3 Explanation: - Player 0 total points: 40 + 50 = 90 - Player 1 total points: 30 + 60 = 90 - Player 2 total points: 50 + 50 = 100 - Player 3 total points: 60 + 30 = 90 - Player 2 has the highest total points (100), so they are the winner. Example 3: Input: n = 2, scores = [[10, 20, 15], [25, 15, 10]] Output: 1 Explanation: - Player 0 total points: 10 + 20 + 15 = 45 - Player 1 total points: 25 + 15 + 10 = 50 - Player 1 has the highest total points (50), so they are the winner. Constraints: - 2 <= n <= 500 - 1 <= scores[i].length <= 100 - 0 <= scores[i][j] <= 100","solution":"def find_winner(n, scores): Determines the winner of the game based on the points scored. Args: n: int - The number of players. scores: List[List[int]] - A 2D list containing the points each player scored in each round. Returns: int - The index of the winning player. max_total_points = -1 max_single_round_points = -1 winner_index = -1 for i in range(n): total_points = sum(scores[i]) single_round_points = max(scores[i]) # First decide based on max total points if total_points > max_total_points: max_total_points = total_points max_single_round_points = single_round_points winner_index = i elif total_points == max_total_points: # If the total points are the same, find based on highest single round points if single_round_points > max_single_round_points: max_single_round_points = single_round_points winner_index = i elif single_round_points == max_single_round_points: # In case still tied, choose the player with the lowest index if i < winner_index: winner_index = i return winner_index"},{"question":"Ravi is a manager at a bookstore and is responsible for managing the inventory. He has a list of books with specified stock amounts and a number of customers who each need a certain number of copies of a given book. His task is to determine the minimum number of different book titles he needs to sell in order to completely fulfill all customer orders. Each customer needs exactly one copy of one specific book. Ravi cannot partially fulfill any customer order, and each customer order must be completely fulfilled with the available stock without borrowing from other books. Write a program to help Ravi determine the minimum number of different book titles needed. # Input - The first line contains a single integer N (1 ≤ N ≤ 10), the number of test cases. - For each test case: - The first line contains an integer B (1 ≤ B ≤ 100), the number of books available in stock. - The second line contains B integers, each representing the stock amount of a single book. - The third line contains an integer C (1 ≤ C ≤ 200), the number of customers. - The fourth line contains C integers, each representing the customer requirements for books (each integer is between 1 and the number of available books). # Output For each test case, output a single integer: the minimum number of different book titles required to fulfill all customer orders. # Example Input ``` 2 5 2 3 1 4 6 4 0 1 2 2 4 8 1 2 2 2 3 1 1 0 ``` Output ``` 3 2 ``` # Explanation Test Case 1 Book title stocks are [2, 3, 1, 4, 6] Customer requirements are [0, 1, 2, 2] Customers are requesting books with the following order indexes: 0 from stock index 0, 1 from stock index 1, 2 from stock index 2, and 2 from stock index 2 (again). Stocks after fulfilling orders: - Stock index 0: 2 (1 taken by the customer, remains 1) - Stock index 1: 3 (1 taken by the customer, remains 2) - Stock index 2: 1 (2 taken by the customer, remains 0) - Stock index 3: 4 (0 taken by the customer, remains 4) - Stock index 4: 6 (0 taken by the customer, remains 6) So, the minimum number of different book titles required to fulfill all orders is 3. Test Case 2 Book title stocks are [8, 1, 2, 2, 2] Customer requirements are [1, 1, 0] Customers are requesting books with the following order indexes: 1 from stock index 0, 1 from stock index 0, 0 from stock index 0. Stocks after fulfilling orders: - Stock index 0: 8 (2 taken by the customer, remains 6) - Stock index 1: 1 (1 taken by the customer, remains 0) - Stock index 2: 1 (sum of 1 from customers) So, the minimum number of different book titles required to fulfill all orders is 2.","solution":"def min_books_to_sell(N, test_cases): results = [] for i in range(N): B = test_cases[i][\'books\'] stock = test_cases[i][\'stock\'] C = test_cases[i][\'customers\'] customer_reqs = test_cases[i][\'customer_reqs\'] book_count = [0] * B for req in customer_reqs: book_count[req] += 1 books_needed = 0 for idx in range(B): if book_count[idx] > 0: books_needed += 1 results.append(books_needed) return results"},{"question":"A game involves scoring points in rounds, with specific rules determining the total score for each round. There is a sequence of N rounds, and each round has an associated fixed point value that is an even number. Players can earn additional bonus points based on their performance in each round. The total score of a player in each round is the sum of the fixed point value and any bonus points for that round. You are given the total score of a player for each round. Deduce the series of bonus points the player earned in each round. The bonus points for each round must be a non-negative even integer. # Constraints - All values in input are integers. - 1 ≤ N ≤ 10^5 - 0 ≤ Score_i ≤ 10^9 - Bonus points are non-negative even integers. - The fixed point value for each round is provided and even. # Input Input is given from Standard Input in the following format: ``` N Fixed_Point_Value_1 Fixed_Point_Value_2 ... Fixed_Point_Value_N Total_Score_1 Total_Score_2 ... Total_Score_N ``` # Output Print N integers representing the bonus points the player earned in each round. # Sample Input ``` 3 10 20 30 14 26 40 ``` # Sample Output ``` 4 6 10 ``` # Explanation - For Round 1, the fixed point value is 10, and the total score is 14. Therefore, the bonus points are 14 - 10 = 4. - For Round 2, the fixed point value is 20, and the total score is 26. Therefore, the bonus points are 26 - 20 = 6. - For Round 3, the fixed point value is 30, and the total score is 40. Therefore, the bonus points are 40 - 30 = 10.","solution":"def calculate_bonus_points(N, fixed_points, total_scores): Calculate the bonus points for each round. Args: - N: int, number of rounds. - fixed_points: list of int, fixed points for each round. - total_scores: list of int, total scores for each round. Returns: - List of int, representing the bonus points for each round. bonus_points = [] for i in range(N): bonus_points.append(total_scores[i] - fixed_points[i]) return bonus_points"},{"question":"Alice is planning a road trip and needs to budget for fuel costs. She wants to know the total cost for a trip based on the distance of the trip and the fuel efficiency of her car. Alice has multiple trips planned, each with different distances and fuel efficiencies. You need to calculate the total fuel cost for each trip given the price per litre of fuel. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of trips. - Each test case consists of a single line of input, containing three space-separated integers D, E, P where: - D is the distance of the trip in kilometers. - E is Alice\'s car fuel efficiency in kilometers per litre. - P is the price of fuel per litre in rupees. ------ Output Format ------ For each test case, output on a new line the total fuel cost for that trip in rupees. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ D, E ≤ 1000 1 ≤ P ≤ 100 ----- Sample Input 1 ------ 3 300 20 70 450 15 85 600 25 60 ----- Sample Output 1 ------ 1050 2550 1440 ----- Explanation 1 ------ Test case 1: Distance is 300 km, fuel efficiency is 20 km/l, and price per litre is 70 rupees. The total cost is (300 / 20) * 70 = 15 * 70 = 1050 rupees. Test case 2: Distance is 450 km, fuel efficiency is 15 km/l, and price per litre is 85 rupees. The total cost is (450 / 15) * 85 = 30 * 85 = 2550 rupees. Test case 3: Distance is 600 km, fuel efficiency is 25 km/l, and price per litre is 60 rupees. The total cost is (600 / 25) * 60 = 24 * 60 = 1440 rupees.","solution":"def calculate_fuel_costs(T, trips): Calculate the total fuel cost for each trip given the price per litre of fuel. Parameters: T (int): Number of trips. trips (list of tuples): Each tuple contains three integers D (distance in km), E (fuel efficiency in km/l), and P (price per litre in rupees). Returns: list: Total fuel cost for each trip. costs = [] for trip in trips: D, E, P = trip cost = (D / E) * P costs.append(int(cost)) return costs"},{"question":"You are given a positive integer N. Your task is to find the smallest number greater than or equal to N that is both a perfect square and a perfect cube. Example 1: Input: N = 35 Output: 64 Example 2: Input: N = 10 Output: 64 Your Task: You don\'t need to read or print anything. Your task is to complete the function PerfectSquareCube() which takes N as input parameter and returns the smallest number greater than or equal to N that is both a perfect square and a perfect cube. Expected Time Complexity: O(N^{1/3}) Expected Space Complexity: O(1) Constraints: 1 <= N <= 10^{8}","solution":"def PerfectSquareCube(N): Function to find the smallest number greater than or equal to N that is both a perfect square and a perfect cube. Parameters: N (int): The positive integer Returns: int: The smallest number greater than or equal to N that is both a perfect square and a perfect cube. i = 1 while True: candidate = i ** 6 # A number that is both a perfect square and cube is 6th power. if candidate >= N: return candidate i += 1"},{"question":"In a garden, there are N types of flowers planted in a row, all naturally occurring in random colors. Consider there are only three colors for these flowers: Blue, Red, and Green. Each color holds a different significance value, and no two adjacent flowers should hold the same significance value, although they might be the same color. The significance value of a flower in a particular color can differ across its type. Your task is to find the maximum total significance value of flowers in the garden while satisfying the given condition. Constraints: 1 ≤ N ≤ 20 1 ≤ significance value ≤ 1000 Input: The first line will contain the number of test cases, T. The second line will contain an integer N that will specify how many types of flowers are there. Each of the following N lines will contain 3 numbers separated by spaces, representing the significance value of the flowers in Blue, Red, and Green colors respectively. Output: Print T lines showing the maximum total significance value for each test case. SAMPLE INPUT 1 3 3 2 5 4 6 3 7 8 9 SAMPLE OUTPUT 20 Explanation The first flower should be considered Green (5), the second flower should be considered Red (6), and the third flower should be considered Green (9). So the total significance value becomes 5 + 6 + 9 = 20.","solution":"def max_significance_value(test_cases): results = [] for case in test_cases: N = case[0] flowers = case[1:] dp = [[0] * 3 for _ in range(N)] dp[0][0] = flowers[0][0] dp[0][1] = flowers[0][1] dp[0][2] = flowers[0][2] for i in range(1, N): dp[i][0] = flowers[i][0] + max(dp[i-1][1], dp[i-1][2]) dp[i][1] = flowers[i][1] + max(dp[i-1][0], dp[i-1][2]) dp[i][2] = flowers[i][2] + max(dp[i-1][0], dp[i-1][1]) results.append(max(dp[N-1])) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) flowers = [] for j in range(N): flowers.append(list(map(int, lines[index + j + 1].strip().split()))) test_cases.append([N] + flowers) index += N + 1 return test_cases def main(input_data): test_cases = parse_input(input_data) results = max_significance_value(test_cases) for result in results: print(result)"},{"question":"Create a function `format_date`/`formatDate` that takes a date string in the format `\\"YYYY-MM-DD\\"` and returns the date in the format `\\"DD/MM/YYYY\\"`. Ensure the output keeps leading zeros in the day and month if necessary. Example: ```python format_date(\\"2023-07-19\\") ``` This example will return the string `\\"19/07/2023\\"`","solution":"def format_date(date_str): Converts a date string from \\"YYYY-MM-DD\\" format to \\"DD/MM/YYYY\\" format. Args: date_str (str): The date string in \\"YYYY-MM-DD\\" format. Returns: str: The date string in \\"DD/MM/YYYY\\" format. year, month, day = date_str.split(\'-\') return f\\"{day}/{month}/{year}\\""},{"question":"# Comparator Function in Python In this challenge, you have to create a custom comparator function that can be used to sort a list of tuples based on given criteria. You are given a list of tuples where the first element of each tuple is a string (name) and the second element is an integer (score). You need to sort the list by the following rules: 1. Sort primarily by score in descending order. 2. If scores are equal, then sort alphabetically by name in ascending order. Write a function `custom_sort` that takes in a list of tuples and returns a sorted list based on the criteria above. Input Format - A list of tuples, `data`, where each tuple contains a string (name) and an integer (score). Output Format - Return the sorted list of tuples. Constraints - All names consist of lowercase English letters. - Scores are integers. - The length of the list does not exceed 1000. Sample Input ```python data = [(\\"john\\", 75), (\\"jane\\", 85), (\\"doe\\", 75), (\\"alice\\", 90)] ``` Sample Output ```python [(\\"alice\\", 90), (\\"jane\\", 85), (\\"doe\\", 75), (\\"john\\", 75)] ``` Explanation - The sorted list: - \\"alice\\" with 90 (highest score) - \\"jane\\" with 85 - \\"doe\\" and \\"john\\" both have 75, but \\"doe\\" precedes \\"john\\" alphabetically. Implementation ```python def custom_sort(data): return sorted(data, key=lambda x: (-x[1], x[0])) # Sample input data = [(\\"john\\", 75), (\\"jane\\", 85), (\\"doe\\", 75), (\\"alice\\", 90)] print(custom_sort(data)) # Output: [(\'alice\', 90), (\'jane\', 85), (\'doe\', 75), (\'john\', 75)] ```","solution":"def custom_sort(data): Sorts a list of tuples based on score in descending order and name in ascending order if scores are equal. Parameters: data (list of tuples): Each tuple contains a string (name) and an integer (score). Returns: list of tuples: Sorted list based on the criteria. return sorted(data, key=lambda x: (-x[1], x[0]))"},{"question":"Given an integer N, find a combination of integers A_1, A_2, A_3, ..., A_N that satisfies the following conditions: - All integers A_i (1 ≤ i ≤ N) are distinct. - The sum of all integers A_i is equal to (N * (N + 1)) / 2. - The product of all integers A_i is equal to (N!). Constraints - 1 ≤ N ≤ 10^5 - All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print N distinct integers A_1, A_2, A_3, ..., A_N that satisfy the conditions in ascending order. If multiple solutions exist, any one of them will be accepted. Examples Input 3 Output 1 2 3 Input 5 Output 1 2 3 4 5 Input 1 Output 1","solution":"def find_sequence(N): Returns a sequence of N distinct integers such that: - The sum of the integers is (N * (N + 1)) / 2. - The product of the integers is N!. return list(range(1, N + 1))"},{"question":"Given two strings str1 and str2, your task is to check if str1 is a subsequence of str2. A subsequence is defined as a sequence that appears in the same relative order, but not necessarily consecutively. Example: Input: str1 = \\"abc\\" str2 = \\"ahbgdc\\" Output: True Input: str1 = \\"axc\\" str2 = \\"ahbgdc\\" Output: False Explanation: In the first example, str1 can be found in str2 as a subsequence (a -> b -> c). In the second example, str1 cannot be found in str2 because there is no path that follows the order a -> x -> c. Your Task: You don\'t need to take input. Just complete the function `isSubsequence()` that takes two strings str1 and str2 as parameters and returns a boolean value indicating whether str1 is a subsequence of str2. Constraints: 1 <= len(str1), len(str2) <= 100 str1 and str2 consist of lowercase English letters.","solution":"def isSubsequence(str1, str2): Check if str1 is a subsequence of str2. Parameters: str1 (str): the subsequence to check. str2 (str): the main string to check against. Returns: bool: True if str1 is a subsequence of str2, False otherwise. str1_index = 0 str2_index = 0 while str1_index < len(str1) and str2_index < len(str2): if str1[str1_index] == str2[str2_index]: str1_index += 1 str2_index += 1 return str1_index == len(str1)"},{"question":"Snuke is organizing a treasure hunt. In this hunt, participants need to collect treasure chests arranged in a straight line. Each chest contains a certain number of gold coins. However, Snuke decided to make the hunt more challenging. Participants can only collect treasure chests if they are collecting at least one, and they cannot skip more than one chest consecutively. Given the number of treasure chests N and the number of gold coins in each chest A, determine the maximum number of coins a participant can collect under these conditions. -----Constraints----- - 1 ≤ N ≤ 10^6 - 0 ≤ A[i] ≤ 10^4 -----Input----- The input is given from Standard Input in the following format: N A[1] A[2] ... A[N] -----Output----- Print the maximum number of gold coins that can be collected. -----Sample Input----- 5 6 7 1 30 8 -----Sample Output----- 45 In this example, the maximum number of coins can be collected by selecting the 1st, 2nd, and 4th chests (6 + 7 + 30 = 43), or by selecting the 2nd and 4th chests (7 + 30 = 37), among other possibilities. The optimal solution is selecting the 1st, 2nd, and 4th chests yielding a total of 43 coins.","solution":"def max_coins(N, A): Calculate the maximum number of gold coins that can be collected without skipping more than one chest consecutively. Parameters: N (int): The number of treasure chests. A (List[int]): The number of gold coins in each chest. Returns: int: The maximum number of gold coins that can be collected. if N == 0: return 0 elif N == 1: return A[0] # Initializing dp array where dp[i] represents the maximum coins collected up to the i-th chest dp = [0] * N dp[0] = A[0] dp[1] = max(A[0], A[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + A[i], dp[i-3] + A[i] + A[i-1] if i > 2 else 0) return dp[-1]"},{"question":"# Objective **Topic**: Graphs and Simulation **Problem**: You are given a city with N intersections and M bidirectional roads connecting some of these intersections. Along with the city, you will be given Q police queries, where each query is a request for the minimum number of intersections (including the start and end intersections) that must be traversed by the police to reach from intersection X to intersection Y. Police can traverse only the given roads. Note that it is guaranteed that there is at least one available path between any two intersections. # Graph notations: - N: Number of intersections (1 ≤ N ≤ 1000) - M: Number of roads (0 ≤ M ≤ 5000) - Each road between intersections U and V (1 ≤ U, V ≤ N) - Q: Number of queries (1 ≤ Q ≤ 10000) # Input: - The first line contains two integers N and M. - The next M lines each contain two integers U and V, representing a bidirectional road between intersections U and V. - The next line contains an integer Q, representing the number of queries. - The following Q lines each contain two integers X and Y representing the query to find the minimum intersections traversed from intersection X to intersection Y. # Output: - For each query, output a single integer representing the minimum number of intersections that need to be traversed from intersection X to intersection Y (including X and Y). # Example Input: ``` 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 ``` # Example Output: ``` 5 3 3 ``` # Explanation: 1. To reach from intersection 1 to 5, the police must traverse intersections 1 → 2 → 3 → 4 → 5. Hence, minimum traversed intersections is 5. 2. To reach from intersection 2 to 4, the police must traverse intersections 2 → 3 → 4. Hence, minimum traversed intersections is 3. 3. To reach from intersection 1 to 3, the police must traverse intersections 1 → 2 → 3. Hence, minimum traversed intersections is 3. # Constraints: - All given roads are unique. - There exists at least one path between any two intersections. # Note: Use efficient algorithms like Breadth-First Search (BFS) for finding the shortest path to handle the upper constraint limits.","solution":"from collections import deque def bfs_shortest_path(graph, start, end): Uses BFS to find the shortest path between start and end nodes in an undirected graph. Returns the number of nodes in the shortest path. visited = set() queue = deque([(start, 1)]) # (current node, distance from start in terms of intersections) while queue: current_node, distance = queue.popleft() if current_node == end: return distance # Distance indicates the number of intersections traversed including start and end visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return float(\'inf\') # This shouldn\'t happen as we assume there is always a path between every pair of nodes def solve_queries(N, M, roads, Q, queries): Solves the problem using BFS for shortest paths on multiple queries. Returns a list of results for each query. graph = {i: [] for i in range(1, N + 1)} for u, v in roads: graph[u].append(v) graph[v].append(u) result = [] for x, y in queries: result.append(bfs_shortest_path(graph, x, y)) return result # Example usage: # N = 5 # M = 4 # roads = [(1, 2), (2, 3), (3, 4), (4, 5)] # Q = 3 # queries = [(1, 5), (2, 4), (1, 3)] # print(solve_queries(N, M, roads, Q, queries))"},{"question":"Write a function `sum_prime_CSV()` that takes a string representing a CSV file content, where each row contains numbers separated by commas, and returns the sum of all prime numbers found in the CSV file. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function should handle potentially large integers and multiple rows of values. For example, given the following CSV string: ``` \\"23,10n17,19,20n4,5,6\\" ``` The prime numbers are 23, 17, 19, and 5. The function should return their sum, which is 64. If no prime numbers are found, the function should return 0. If the input is not a valid CSV string or contains non-numeric values, return -1.","solution":"import csv from math import isqrt def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_prime_CSV(csv_content): Takes a string representing CSV file content and returns the sum of all prime numbers found in the CSV file. try: total = 0 reader = csv.reader(csv_content.strip().split(\'n\')) for row in reader: for value in row: num = int(value) if is_prime(num): total += num return total except ValueError: return -1"},{"question":"Problem: Alice is organizing a competition where participants are required to create unique identification codes by combining letters of her predefined sets. Each participant is given a unique set of characters and needs to generate all possible codes of a specific length using the characters from their set. A code is valid if it contains the exact given number of characters, and each character must be used exactly once within the code. Alice needs you to help her by generating the list of all valid identification codes for each participant. Input: - The first line contains a single integer n, the number of participants (1 ≤ n ≤ 10). - The next line contains n space-separated integers denoting the length of the identification code each participant needs to create (1 ≤ length ≤ 5). - The next n lines contain a string of distinct lowercase letters representing the set of characters each participant can use to create their identification codes. Output: For each participant, print all possible valid identification codes, each on a new line. The codes for a participant should be grouped together and separated by a blank line. Constraints: - The total number of characters in each participant\'s set will always be greater than or equal to the required code length. - Characters in each set are distinct and will not contain spaces or special characters. - Each possible identification code should be sorted lexicographically. Example Input: 2 3 2 abcde wxyz Example Output: abc abd abe acd ace ade bcd bce bde cde wx wy wz xy xz yz Explanation: For the first participant, all valid codes of length 3 using characters from the set \'abcde\' are generated and sorted lexicographically. For the second participant, all valid codes of length 2 using characters from the set \'wxyz\' are generated and sorted lexicographically.","solution":"from itertools import combinations def generate_codes(n, lengths, char_sets): Generate all possible identification codes according to the given lengths and character sets. :param n: Number of participants :param lengths: List of required code lengths for each participant :param char_sets: List of character sets for each participant :return: List of lists containing valid identification codes for each participant result = [] for i in range(n): length = lengths[i] char_set = char_sets[i] codes = [\\"\\".join(code) for code in combinations(sorted(char_set), length)] result.append(codes) return result"},{"question":"Write a function `find_majority_element(nums)` that accepts a list of integers `nums` and returns the majority element. The majority element is the element that appears more than ⌊n / 2⌋ times, where n is the length of the list. You may assume that the majority element always exists in the array. # Example: ``` find_majority_element([3, 2, 3]) => 3 find_majority_element([2, 2, 1, 1, 1, 2, 2]) => 2 ``` **Notes:** - Your solution should have a time complexity of O(n) and a space complexity of O(1). - Keep in mind that the input list is non-empty and the majority element exists based on the problem constraints.","solution":"def find_majority_element(nums): Returns the majority element from the list of integers `nums`. The majority element is the element that appears more than ⌊n / 2⌋ times. count = 0 candidate = None for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) return candidate"},{"question":"You are given a list of integers, and your task is to find the \\"product of all other integers.\\" Specifically, you need to generate a new list of integers where each element at index `i` is the product of all the elements in the original array except for the element at `i` without using division. -----Input----- The first and only line contains `N` space-separated integers where 1 leq N leq 10^5 and each integer is between -10^3 and 10^3. -----Output----- Output a list of integers where each integer at index `i` of the output list is the product of all the integers in the input list except for the integer at index `i`. -----Examples----- Sample Input: 1 2 3 4 Sample Output: 24 12 8 6 Sample Input: 3 2 1 Sample Output: 2 3 6","solution":"def product_of_all_other_integers(arr): Returns a list where each element at index i is the product of all integers in the input list except the one at index i. n = len(arr) if n == 0: return [] left_products = [1] * n right_products = [1] * n output = [1] * n # Compute the products of all elements to the left of each index for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Compute the products of all elements to the right of each index for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Multiply left and right products together for the final result for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"You are given an array of N integers, each representing the number of sales made on a specific day. You need to find the maximum sum of sales that can be achieved by picking exactly K consecutive days. Write a function that takes the array of sales and the number of consecutive days K and returns the maximum sales sum. Example 1: Input: N = 7, K = 3 sales = [2, 1, 5, 1, 3, 2, 1] Output: 9 Explanation: The maximum sum of sales over 3 consecutive days is obtained by choosing the subarray [5, 1, 3], resulting in a sum of 5 + 1 + 3 = 9. Example 2: Input: N = 5, K = 2 sales = [4, 2, 1, 3, 4] Output: 7 Explanation: The maximum sum of sales over 2 consecutive days is achieved by choosing the subarray [3, 4], resulting in a sum of 3 + 4 = 7. Your Task: You do not need to read input or print anything. Your task is to complete the function maxSalesSum() which takes N, K, and the array of sales as input parameters and returns the maximum sum of sales over K consecutive days. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 0 ≤ sales[i] ≤ 10^4","solution":"def maxSalesSum(N, K, sales): Returns the maximum sum of sales over K consecutive days. :param N: Integer, the total number of days :param K: Integer, the number of consecutive days :param sales: List of integers representing sales :return: Integer, the maximum sum of sales over K consecutive days # Initial window sum window_sum = sum(sales[:K]) max_sum = window_sum # Slide the window through the array for i in range(K, N): window_sum = window_sum + sales[i] - sales[i - K] if window_sum > max_sum: max_sum = window_sum return max_sum"},{"question":"You are given a park represented as an n × m grid. The park has exactly one entrance at the top-left corner (1,1) and one exit at the bottom-right corner (n,m). Each cell in the park can either be walkable or blocked by an obstacle. You need to determine the shortest distance from the entrance to the exit while avoiding obstacles. You can move up, down, left, or right, but cannot move diagonally. If there is no path from the entrance to the exit, return -1. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the dimensions of the park grid. Each of the following n lines contains m characters, where each character is either \'.\' for a walkable cell or \'#\' for an obstacle. Output Output a single integer, the shortest distance from the entrance to the exit. If no such path exists, output -1. The distance is the number of steps taken. Examples Input 3 3 . . . . # . . . . Output 4 Input 4 4 . . . # . # . . . # # . . . . . Output 6 Input 2 2 . # # . Output -1 Note In the first example, a possible path is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3), which has 4 steps. In the second example, a possible path is (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4), which has 6 steps. In the third example, there is no path from the entrance to the exit.","solution":"from collections import deque def shortest_path(grid): Determines the shortest path from the top-left to the bottom-right corner of a grid avoiding obstacles. :param grid: List of strings representing the grid :return: Integer, the shortest number of steps or -1 if no path exists n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == n-1 and c == m-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 def read_input(): n, m = map(int, input().split()) grid = [] for _ in range(n): grid.append(input().split()) return grid if __name__ == \\"__main__\\": grid = read_input() print(shortest_path(grid))"},{"question":"Lucy has an array b_1, b_2, ..., b_{n}, consisting of n positive integers. Today Lucy asked you to find a segment (sub-array) of b that has the maximum sum. If there are multiple segments with the same maximum sum, find the shortest one among them. If there are still multiple options, return the leftmost one. Help Lucy by finding the required segment of the array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5). The second line contains n space-separated integers b_1, b_2, ..., b_{n} (-10^4 ≤ b_{i} ≤ 10^4). -----Output----- Print two integers in the first line — the start and end indices (1-based) of the segment with the maximum sum. -----Examples----- Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 4 7 Input 6 1 -1 1 -1 1 -1 Output 1 1 Input 3 2 2 -3 Output 1 2 -----Note----- In the first sample, the segment with the maximum sum is [4, -1, 2, 1]. In the second sample, all segments with any positive number have the same maximum sum, the smallest shortest segment is the number 1 at the first index. In the third sample, the first and second elements have the maximum sum.","solution":"def max_sum_segment(arr): Returns the start and end indices (1-based) of the segment with the maximum sum. n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start, end = 0, 0 temp_start = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i elif current_sum == max_sum: if (i - temp_start) < (end - start): start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return start + 1, end + 1"},{"question":"A large orchestra has N instruments. Each instrument i needs exactly D_i seconds to complete one full cycle of playing and resting. Initially, at time 0, all instruments start playing simultaneously. How many seconds will pass until all the instruments play simultaneously again? -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ D_i ≤ 10^{18} - All input values are integers. - The correct answer is at most 10^{18} seconds. -----Input----- Input is given from Standard Input in the following format: N D_1 : D_N -----Output----- Print the number of seconds after which all the instruments will play at the same time again. -----Sample Input----- 3 2 4 5 -----Sample Output----- 20 We have three instruments. The time when each instrument will play is as follows: - Instrument 1: 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, ... seconds after the beginning - Instrument 2: 4, 8, 12, 16, 20, ... seconds after the beginning - Instrument 3: 5, 10, 15, 20, ... seconds after the beginning Therefore, it takes 20 seconds until all three instruments play simultaneously again.","solution":"from math import gcd from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return (a * b) // gcd(a, b) def orchestra_sync_time(N, D): Returns the time in seconds after which all instruments will play simultaneously again. Args: N : int : Number of instruments D : list of int : Time each instrument needs to complete one full cycle Returns: int : Time in seconds after which all instruments will play simultaneously again return reduce(lcm, D)"},{"question":"You are given an array of integers representing the heights of buildings on a street. You need to find the maximum area of a rectangle formed by any number of contiguous buildings, where the rectangle\'s height is determined by the smallest building in the selected range. The width of the rectangle is the number of contiguous buildings. Example heights = [2, 1, 5, 6, 2, 3] The maximum rectangle area is 10, formed by buildings with heights 5 and 6. Function Description Complete the maxRectangleArea function in the editor below. maxRectangleArea has the following parameter(s): - int heights[n]: an array of integers representing the heights of the buildings. Returns - int: the area of the largest rectangle that can be formed by the buildings. Input Format The first line contains an integer n, the number of buildings. The second line contains n space-separated integers, describing the textit{height[i]} of each building. Constraints 1 leq n leq 10^5 1 leq height[i] leq 10^4 Subtasks 1 leq n leq 500 for 50% of the maximum score. Sample Input 0 6 2 1 5 6 2 3 Sample Output 0 10 Explanation 0 The maximum area rectangle is 10, formed using heights 5 and 6 (from index 2 to index 3). The width of the rectangle is 2 and the height is the minimum height within the range, which is 5. Sample Input 1 7 1 2 3 4 5 3 3 Sample Output 1 15 Explanation 1 The maximum area rectangle is 15, formed using heights 3, 4 and 5 (from index 2 to index 4). The width of the rectangle is 3 and the height is the minimum height within the range, which is 3.","solution":"def maxRectangleArea(heights): Find the maximum area of a rectangle formed by any number of contiguous buildings. Parameters: heights (list of int): An array of integers representing the heights of the buildings. Returns: int: The area of the largest rectangle that can be formed by the buildings. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given an array of integers, determine whether there exists a set of four distinct elements in the array whose sum is zero. Example 1: Input: arr[] = {1, 0, -1, 0, -2, 2} Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Explanation: The quadruplets summarizing zero are returned. Example 2: Input: arr[] = {2, 1, 0, -1} Output: [] Explanation: No such quadruplet exists. Your Task: You don\'t need to read input or print anything. Your task is to complete the function fourSum() which takes the array arr[] and its size n as inputs and returns a list of all the quadruplets [a,b,c,d] (such that a+b+c+d=0 and a, b, c, d are distinct elements) in lexicographical order. Expected Time Complexity: O(n^3) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 200 -10^6 <= arr[i] <= 10^6","solution":"def fourSum(arr): Returns all the unique quadruplets [a, b, c, d] such that a + b + c + d = 0. arr.sort() n = len(arr) quadruplets = set() for i in range(n - 3): for j in range(i + 1, n - 2): left = j + 1 right = n - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == 0: quadruplets.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return [list(quad) for quad in sorted(quadruplets)]"},{"question":"Write a function `is_self_descriptive_number(n)` that takes an integer `n` as input and returns `True` if it is a self-descriptive number, otherwise returns `False`. A self-descriptive number is an integer `n` in which each digit at position `i` (counting from 0) describes how many times the digit `i` appears in `n`. For instance: Example 1: `n = 2020` is a self-descriptive number: - The digit `0` appears twice (verified by the first digit). - The digit `1` appears zero times (verified by the second digit). - The digit `2` appears twice (verified by the third digit). - The digit `3` appears zero times (verified by the fourth digit). Example 2: `n = 6210001000` is a self-descriptive number: - The digit `0` appears six times. - The digit `1` appears two times. - The digit `2` appears one time. - The digit `3` appears zero times, as do the digits 4 through 9. Your task is to implement the function that accurately identifies self-descriptive numbers.","solution":"def is_self_descriptive_number(n): Checks if a number is self-descriptive. A self-descriptive number is an integer n in which each digit at position i (counting from 0) describes how many times the digit i appears in n. Parameters: n (int): The input number Returns: bool: True if n is a self-descriptive number, otherwise False n_str = str(n) length = len(n_str) for i in range(length): expected_count = int(n_str[i]) actual_count = n_str.count(str(i)) if actual_count != expected_count: return False return True"},{"question":"A company has N employees, and they are arranged in an organizational hierarchy. Each employee, i, has a supervisor denoted by P[i], where 1 ≤ i ≤ N. The CEO has no supervisor and is given the position -1 in P. Each employee receives a unique salary described in an array S, where S[i] represents the salary of the i-th employee. The company wants to ensure that every supervisor has a salary equal to or greater than any of their direct subordinates. Determine if the current salary distribution satisfies this condition. Constraints - 1 ≤ N ≤ 2000 - -1 ≤ P[i] ≤ N - 1 ≤ S[i] ≤ 10^9 Input Input is given from Standard Input in the following format: N P S Output Output \\"YES\\" if the salary distribution satisfies the condition. Otherwise, output \\"NO\\". Examples Input 6 -1 1 1 2 2 3 3000 2000 2500 1800 1700 1600 Output YES Input 4 -1 1 1 2 4000 3000 2000 3500 Output NO","solution":"def check_salaries(N, P, S): Checks if the salary distribution satisfies the condition that every supervisor has a salary equal to or greater than any of their direct subordinates. Parameters: N (int): Number of employees P (list of int): List where P[i] denotes the supervisor of the i-th employee S (list of int): List where S[i] denotes the salary of the i-th employee Returns: str: \\"YES\\" if the conditions are meet, otherwise \\"NO\\" from collections import defaultdict # Convert to 1-based index P = [-1] + P S = [0] + S subordinates = defaultdict(list) for i in range(1, N + 1): if P[i] != -1: subordinates[P[i]].append(i) def dfs(employee): current_salary = S[employee] for sub in subordinates[employee]: if current_salary < S[sub]: return False if not dfs(sub): return False return True return \\"YES\\" if dfs(1) else \\"NO\\""},{"question":"Carmela the Chemist is known for her meticulous planning. She has recently received a batch of n chemical experiments to conduct in her lab. Carmela wants to allocate these experiments in m different laboratories using her special rules: - Each experiment must be assigned to only one laboratory. - Each laboratory can handle a maximum of c experiments. The problem is, she wants to know if it\'s possible to distribute all the experiments into the laboratories without exceeding the capacity of any laboratory. Help Carmela figure out if she can allocate all the n experiments into the m laboratories according to the given rules. -----Input----- The first line contains integers n and m (1 ≤ n, m ≤ 100). The second line contains integer c (1 ≤ c ≤ 100). The numbers in the lines are separated by single spaces. -----Output----- Print \\"POSSIBLE\\" (without the quotes) if all the experiments can be allocated to the laboratories without exceeding the capacities. Otherwise, print \\"IMPOSSIBLE\\" (without the quotes). -----Examples----- Input 10 3 4 Output POSSIBLE Input 15 2 7 Output IMPOSSIBLE Input 9 3 3 Output POSSIBLE","solution":"def can_allocate_experiments(n, m, c): Determines if n experiments can be allocated to m laboratories with each laboratory handling a maximum of c experiments. Args: n (int): Number of experiments. m (int): Number of laboratories. c (int): Maximum capacity of each laboratory. Returns: str: \\"POSSIBLE\\" if the experiments can be allocated without exceeding the capacity, \\"IMPOSSIBLE\\" otherwise. # Each laboratory can handle upto c experiments, so total possible is m * c if n <= m * c: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"A company is organizing a team-building event where employees will form teams to compete in various activities. Each team should consist of exactly K members. The event organizers want to ensure the teams are well-balanced by forming teams where the difference between the strongest member (with the highest skill level) and the weakest member (with the lowest skill level) in each team is minimized. You are given a list of skill levels of N employees. Your task is to form the teams in such a way that the overall maximum difference between the strongest and weakest members of any team is as small as possible. Write a function to determine this minimum possible maximum difference. Input Format The first line contains two integers N and K. The next line contains N integers representing the skill levels of the employees. Output Format Print the minimum possible maximum difference. Constraints 1 leq N leq 10^5 1 leq K leq N 1 leq skill_levels leq 10^9 Sample Input 6 3 10 20 13 40 45 50 Sample Output 10 Explanation By forming the teams as [10, 13, 20] and [40, 45, 50], the maximum difference within any team is 10. There is no other configuration that results in a smaller maximum difference.","solution":"def minimum_possible_max_difference(N, K, skill_levels): Returns the minimum possible maximum difference between the strongest and weakest members of any team. # Sort skill levels to consider the contiguous possible subsets for minimized max difference skill_levels.sort() # Initialize the minimum possible maximum difference to a large number min_max_diff = float(\'inf\') # Loop through the sorted list and evaluate the difference in each group of K members for i in range(N - K + 1): # Check the difference between the highest and lowest in this K-sized window current_diff = skill_levels[i + K - 1] - skill_levels[i] # Update min_max_diff if the current difference is smaller min_max_diff = min(min_max_diff, current_diff) return min_max_diff"},{"question":"Given an array of integers where each integer appears three times except for one, which appears exactly once, find the integer that appears only once. Write a function to identify and return the single_occurrence_number in such an array. **Input:** - An array of integers `arr` where `1 <= length of arr <= 10^4` and `-10^9 <= arr[i] <= 10^9`. **Output:** - Return the integer that appears only once in the array. **Example:** ```python arr = [2, 2, 3, 2] print(single_occurrence_number(arr)) # Output: 3 arr = [0, 1, 0, 1, 0, 1, 99] print(single_occurrence_number(arr)) # Output: 99 ``` **Note:** - The algorithm should aim for linear time complexity and constant space complexity.","solution":"def single_occurrence_number(arr): Given an array of integers where each integer appears three times except for one, this function finds and returns the integer that appears only once. ones, twos = 0, 0 for num in arr: twos |= ones & num ones ^= num common_mask = ~(ones & twos) ones &= common_mask twos &= common_mask return ones"},{"question":"You are given a string `s` consisting of lowercase English letters. A string can be rotated by moving the rightmost character to the front. For example, rotating the string `\\"abcde\\"` once results in the string `\\"eabcd\\"`. Continuing with another rotation results in `\\"deabc\\"`, and so on. You need to determine if it\'s possible to obtain a given string `t` by rotating `s` any number of times (including zero times). Input The first line contains the string `s` (1 ≤ |s| ≤ 1000), the string to be rotated. The second line contains the string `t` (1 ≤ |t| ≤ 1000), the target string. Output Print \\"Yes\\" (without quotes) if it\'s possible to obtain the string `t` by rotating `s` any number of times, otherwise print \\"No\\". Examples Input abcde cdeab Output Yes Input abcde abced Output No Note In the first example, rotating `\\"abcde\\"` twice results in `\\"cdeab\\"`, which matches the target string, so the output is \\"Yes\\". In the second example, no matter how many times you rotate the string `\\"abcde\\"`, you can never obtain `\\"abced\\"`, therefore the output is \\"No\\".","solution":"def can_obtain_by_rotation(s, t): Returns \\"Yes\\" if the string t can be obtained by rotating string s any number of times, otherwise returns \\"No\\". if len(s) != len(t): return \\"No\\" # Check if t is a substring of s concatenated with itself doubled_s = s + s if t in doubled_s: return \\"Yes\\" else: return \\"No\\""},{"question":"Problem You are given a text document having multiple lines. Each line of the document could be either empty or contain one or more words separated by spaces. A word is defined as a sequence of characters separated by spaces. Your task is to find the frequency of each word that appears in the entire document and display them in alphabetical order. Note: 1. Words are case-sensitive (\\"Word\\" and \\"word\\" are considered different words). 2. Punctuation should be treated as part of a word. 3. Multiple spaces between words in a line should be treated as a single space. Constraints The input satisfies the following conditions: * 1 ≤ L ≤ 10^3 (Number of lines in the document) * Each line does not exceed 1000 characters. Input The input is given in the following format: L line_1 line_2 ... line_L The first line contains the integer L, representing the number of lines in the document. The next L lines contain the actual content of the document. Output Output each word and its frequency in alphabetical order. Each word and its frequency are separated by a single space. Examples Input 3 Hello world world of coding Hello Hello Output Hello 3 coding 1 of 1 world 2 Input 2 This is a line This is another line Output This 2 a 1 another 1 is 2 line 2","solution":"def word_frequencies(n, lines): from collections import defaultdict word_count = defaultdict(int) for line in lines: words = line.split() # Split line into words by whitespace for word in words: word_count[word] += 1 sorted_words = sorted(word_count.keys()) result = [] for word in sorted_words: result.append(f\\"{word} {word_count[word]}\\") return result"},{"question":"You are given an integer array `heights` representing the heights of buildings. Rain falls across these buildings and water gathers in the valleys between them. Determine the total amount of rainwater that can be trapped in all the valleys. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - For each test case, the first line contains an integer N, the number of buildings. - The second line contains N space-separated integers representing the heights of the buildings. ------ Output Format ------ For each test case, print a single integer representing the total amount of trapped rainwater. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 0 ≤ heights[i] ≤ 10^5 --- Sample Input 1 --- 2 6 0 1 0 2 1 0 5 3 0 2 0 4 --- Sample Output 1 --- 1 7 --- Explanation 1 --- Test Case 1: The water trapped is 1 unit between the buildings with heights [1, 2]. Test Case 2: The water trapped is 3 units between the buildings with heights [3, 2] and [2, 4] and 1 unit between the buildings with heights [0, 4], totaling 7 units.","solution":"def trap_rain_water(heights): Calculate the amount of trapped rain water given the heights of buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) # Fill right max array right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) # Calculate the total trapped water total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - heights[i] return total_water def process_test_cases(test_cases): results = [] for heights in test_cases: results.append(trap_rain_water(heights)) return results"},{"question":"A large corporation is organizing a series of meetings for its employees. These meetings are scheduled on n consecutive days, and each day is represented by an index from 1 to n. Each employee has a preferred day for their meeting, and the corporation needs to ensure that each employee gets their preferred day. However, due to some technical issues, the list of preferred days got mixed up. Now, the employees are trying to determine if the mixed-up list is valid. A list of preferred days is considered valid if each employee\'s preferred day exists in the range from 1 to n, and no preferred day is missing from this list. Your task is to help the employees determine if their list of preferred days is valid. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains: - an integer n (1 ≤ n ≤ 100) — the number of consecutive days. - a list of n integers — representing the mixed-up list of preferred days. Output Output t lines, each containing \\"Yes\\" if the list of preferred days is valid and \\"No\\" if it is not. Examples Input 4 3 1 3 2 4 4 3 2 1 5 2 3 5 1 4 3 3 1 1 Output Yes Yes Yes No Explanation In the first case, the list [1, 3, 2] contains all integers from 1 to 3 exactly once, so the answer is \\"Yes\\". In the second case, the list [4, 3, 2, 1] contains all integers from 1 to 4 exactly once, so the answer is \\"Yes\\". In the third case, the list [2, 3, 5, 1, 4] contains all integers from 1 to 5 exactly once, so the answer is \\"Yes\\". In the fourth case, the list [3, 1, 1] does not contain each integer from 1 to 3 (missing 2 and duplicated 1), so the answer is \\"No\\".","solution":"def is_valid_preference(n, preferences): Determines if the list of preferred days is valid. :param n: Number of consecutive days. :param preferences: List of preferred days. :return: \\"Yes\\" if valid, \\"No\\" if not. return \\"Yes\\" if sorted(preferences) == list(range(1, n+1)) else \\"No\\" def check_meeting_preferences(t, test_cases): Checks the validity of multiple test cases. :param t: Number of test cases. :param test_cases: List of tuples, each with (n, preferences). :return: List containing \\"Yes\\" or \\"No\\" for each test case. results = [] for n, preferences in test_cases: results.append(is_valid_preference(n, preferences)) return results"},{"question":"Shizuka wants to paint a rectangular piece of wood in a pattern of her choice. She has n colors available, denoted by integers from 1 to n. Shizuka decides to paint the rectangle in a way that maximizes the diversity of colors, alternating between two adjacent colors. However, she does not want the same color to appear in any two adjacent cells in the vertical or horizontal direction. The rectangle has a size of h × w (height and width). Shizuka can choose any two colors out of the n available colors and paint the rectangle such that the chosen colors are used alternately, but no color appears in adjacent cells. Help Shizuka determine the maximum possible number of colors that can be used. Note: A pair of colors (c1, c2) is considered different from (c2, c1). Input The first line of input contains three space-separated integers h, w, and n (1 ≤ h, w ≤ 104, 2 ≤ n ≤ 100). Output Print the maximum number of colors that can be used to paint the entire rectangle such that no two adjacent cells vertically or horizontally have the same color. Examples Input 3 3 4 Output 2 Input 4 5 6 Output 3 Input 5 5 2 Output 1 Note In the first sample test, Shizuka can use two colors since the rectangle can be colored using two alternating colors without adjacent cells having the same color. In the second sample, Shizuka can use three colors, selecting three different pairs such as (1, 2), (3, 4), and (5, 6), since no adjacent cells would share the same color as long as the pattern alternates correctly. In the third sample, Shizuka can only use one pair of colors due to the constraint of having only two colors available.","solution":"def max_colors(h, w, n): Returns the maximum number of colors that can be used to paint the rectangle such that no two adjacent cells vertically or horizontally have the same color. # Each color must be paired with another color # We can select pairs from n colors # The number of such pairs from n colors is n // 2 return n // 2"},{"question":"Mike is passionate about palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, 121 is palindromic, but 123 is not. He wants to perform some palindromic checks. Given a range of numbers [A, B], compute the largest palindromic number that lies within this range. If there is no palindromic number in the range, return -1. Input: The first line contains T, the number of test cases. Each of the next T lines contains two numbers A and B. Output: For every test case, print the largest palindromic number within the given range on a new line. If no such number exists, print -1. Constraints: 1 ≤ T ≤ 5000 1 ≤ A ≤ B ≤ 100000 Example Input: 3 10 50 120 130 500 505 Example Output: 44 121 505 Explanation: Test Case #1: Palindromic numbers between 10 and 50 are 11, 22, 33, and 44. The largest palindromic number is 44. Test Case #2: Palindromic numbers between 120 and 130 are 121. The largest palindromic number is 121. Test Case #3: Palindromic numbers between 500 and 505 are 505. The largest palindromic number is 505.","solution":"def is_palindromic(n): Check if a number n is palindromic. s = str(n) return s == s[::-1] def largest_palindromic_number(A, B): Returns the largest palindromic number in the range [A, B]. largest = -1 for number in range(B, A - 1, -1): if is_palindromic(number): largest = number break return largest def process_cases(cases): results = [] for A, B in cases: results.append(largest_palindromic_number(A, B)) return results"},{"question":"Jasmine is obsessed with finding magic squares. A 3x3 magic square is a grid of nine distinct integers from 1 to 9 where the sums of the numbers in each row, column, and both main diagonals are equal. You are given a 3x3 grid of numbers. Determine whether it forms a magic square. -----Input----- The input consists of three lines, each line contains three space-separated integers representing a row of the grid. Each integer is between 1 and 9, inclusive. -----Output----- Print \\"magic\\" if the given grid forms a magic square, and \\"not magic\\" otherwise. -----Examples----- Input 2 7 6 9 5 1 4 3 8 Output magic Input 1 2 3 4 5 6 7 8 9 Output not magic","solution":"def is_magic_square(grid): row1, row2, row3 = grid if len(set(row1 + row2 + row3)) != 9 or any(not (1 <= num <= 9) for num in row1 + row2 + row3): return \\"not magic\\" magic_sum = sum(row1) if sum(row2) != magic_sum or sum(row3) != magic_sum: return \\"not magic\\" if sum([row1[0], row2[0], row3[0]]) != magic_sum or sum([row1[1], row2[1], row3[1]]) != magic_sum or sum([row1[2], row2[2], row3[2]]) != magic_sum: return \\"not magic\\" if sum([row1[0], row2[1], row3[2]]) != magic_sum or sum([row1[2], row2[1], row3[0]]) != magic_sum: return \\"not magic\\" return \\"magic\\" # Example usage (not part of the function): # grid = [ # [2, 7, 6], # [9, 5, 1], # [4, 3, 8] # ] # print(is_magic_square(grid)) # Output: magic"},{"question":"Statement: You are working on a system monitoring program that needs to keep track of the CPU utilization of different servers in a network. Given the utilization data over a period, your task is to determine the minimum and maximum CPU utilization for each server, as well as the overall average utilization. Input: The input begins with an integer T, the number of test cases. Each test case starts with an integer N, the number of servers. The next N lines each contain a space-separated list of integers. Each list represents the CPU utilization percentage of a server at different points in time. Output: For each test case, output N lines: each line contains the minimum, maximum, and average CPU utilization for the corresponding server. The average should be a floating-point number rounded to two decimal places. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ Number of utilization readings per server ≤ 100 0 ≤ Each utilization reading ≤ 100 SAMPLE INPUT 2 3 10 20 30 5 15 25 35 40 50 2 60 70 80 20 30 40 50 60 SAMPLE OUTPUT 10 30 20.00 5 35 20.00 40 50 45.00 60 80 70.00 20 60 40.00 Explanation: In the first test case, there are 3 servers. The first server has utilization readings [10, 20, 30]. The minimum utilization is 10, the maximum is 30, and the average is 20.00. The same logic applies to the rest of the servers and test cases.","solution":"def calculate_cpu_utilization(test_cases): results = [] for case in test_cases: N, utilizations = case case_results = [] for server_utilization in utilizations: min_utilization = min(server_utilization) max_utilization = max(server_utilization) avg_utilization = round(sum(server_utilization) / len(server_utilization), 2) case_results.append(f\\"{min_utilization} {max_utilization} {avg_utilization:.2f}\\") results.append(case_results) return results"},{"question":"You are managing a new website that requires user registration. Each username must adhere to specific rules to be accepted. To ensure valid usernames, you need to write a program that checks if a given username meets the registration criteria. A username is considered valid if and only if it satisfies the following conditions: - It must be between 5 and 15 characters long (inclusive). - It must start with an English alphabet character (a-z, A-Z). - It can only contain English alphabet characters (a-z, A-Z) and digits (0-9). If the username is valid according to the regulations, print VALID; otherwise, print INVALID. -----Notes----- - An English alphabet character is any letter from \'a\' to \'z\' or from \'A\' to \'Z\'. - 5 and 15 are inclusive bounds for the length of the username. -----Constraints----- - The username only consists of alphanumeric characters. - 1 leq |username| leq 20 -----Input----- Input is given from Standard Input in the following format: username -----Output----- If the username is considered valid according to the regulation, print VALID; otherwise, print INVALID. -----Sample Input----- user123 -----Sample Output----- VALID The username \\"user123\\" meets all the conditions: - It is 7 characters long, which is between 5 and 15 characters. - It starts with an English alphabet character \'u\'. - It only contains English alphabet characters and digits. --- Additional Sample --- -----Sample Input----- 4usr -----Sample Output----- INVALID The username \\"4usr\\" does not meet the conditions because it starts with a digit instead of an English alphabet character.","solution":"def validate_username(username): Determines if the username is valid based on the specified criteria. Parameters: - username: str Returns: - \\"VALID\\" if the username is valid, otherwise \\"INVALID\\" if len(username) < 5 or len(username) > 15: return \\"INVALID\\" if not username[0].isalpha(): return \\"INVALID\\" if not username.isalnum(): return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given a sequence of integers of length n. You should perform m operations on this sequence, with each operation modifying one element. There are two types of operations: * 1 i x — Replace the element at index i with x * 2 l r — Find the maximum element in the subarray from index l to index r (inclusive) After each operation of the second type, you should output the result of the query. Input The first line contains two integer numbers n and m (1 ≤ n, m ≤ 105). The second line contains n integers (1 ≤ ai ≤ 109) — the initial sequence. Each of the next m lines contains an operation: * The first integer t (1 ≤ t ≤ 2) is the type of the operation * The next integers depend on the type: * If t == 1, then the next two integers are i (1 ≤ i ≤ n) and x (1 ≤ x ≤ 109) * If t == 2, then the next two integers are l (1 ≤ l ≤ n) and r (1 ≤ r ≤ n) Output For each operation of the second type, print the result on a new line. Examples Input 5 4 3 1 4 1 5 2 2 4 1 3 9 2 2 4 2 1 5 Output 4 9 9 Input 4 3 2 7 1 8 2 1 3 1 3 6 2 1 4 Output 7 8 Note In the first example: 1. The initial sequence is {3, 1, 4, 1, 5}. 2. Query 2 2 4 checks the maximum in the subarray {1, 4, 1}, which is 4. 3. Query 1 3 9 updates the element at index 3 to 9, making the sequence {3, 1, 9, 1, 5}. 4. Query 2 2 4 checks the maximum in the subarray {1, 9, 1}, which is 9. 5. Query 2 1 5 checks the maximum in the subarray {3, 1, 9, 1, 5}, which is 9.","solution":"def process_operations(n, m, sequence, operations): results = [] for operation in operations: if operation[0] == 1: _, i, x = operation sequence[i - 1] = x elif operation[0] == 2: _, l, r = operation results.append(max(sequence[l - 1: r])) return results"},{"question":"You are given an integer N. Calculate the N-th Tribonacci number. Here, the i-th Tribonacci number T_i is defined as follows: - T_0=0 - T_1=1 - T_2=1 - T_i=T_{i-1}+T_{i-2}+T_{i-3} (i≥3) -----Constraints----- - 0≤N≤37 - It is guaranteed that the answer is less than 2^{31}-1. - N is an integer. -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print the N-th Tribonacci number. -----Sample Input----- 6 -----Sample Output----- 24 - T_0=0 - T_1=1 - T_2=1 - T_3=T_2+T_1+T_0=2 - T_4=T_3+T_2+T_1=4 - T_5=T_4+T_3+T_2=7 - T_6=T_5+T_4+T_3=24 Thus, the 6-th Tribonacci number is 24.","solution":"def tribonacci(n): Calculate the n-th Tribonacci number. if n == 0: return 0 elif n == 1 or n == 2: return 1 tribonacci_numbers = [0, 1, 1] for i in range(3, n + 1): next_tribonacci = tribonacci_numbers[-1] + tribonacci_numbers[-2] + tribonacci_numbers[-3] tribonacci_numbers.append(next_tribonacci) return tribonacci_numbers[n]"},{"question":"A game involves moving a knight on a standard N times N chessboard. The knight starts at the top-left corner of the board (position (0,0)) and aims to reach the bottom-right corner (position (N-1, N-1)). The knight moves according to the standard L-shaped chess moves: it can move two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Given an integer N and a list of M obstacles placed on the board, each defined by their coordinates, determine the minimum number of moves required for the knight to reach the target, or output -1 if it is not possible. Input Format - The first line contains a single integer T, denoting the number of test cases. - Each test case comprises three lines: - The first line contains two integers N and M, denoting the size of the board and the number of obstacles, respectively. - The second line contains M pairs of integers x_i and y_i separated by spaces, representing the positions of obstacles on the board (positions are zero-indexed). Constraints 1 leq T leq 100 5 leq N leq 100 0 leq M leq N times N - 2 0 leq x_i, y_i < N Output Format For each test case, print a single integer, representing the minimum number of moves required to reach the target position or -1 if it\'s not possible. Sample Input 0 1 8 2 2 3 4 5 Sample Output 0 6 Explanation 0 For the given board size N=8 and obstacles at positions (2,3) and (4,5), the knight can reach the bottom-right corner (position (7,7)) in 6 moves. The path and exact moves depend on the implementation of the knight\'s movement logic and obstacle avoidance strategy. If there were no valid path, the output would be -1.","solution":"from collections import deque def knight_minimum_moves(N, M, obstacles): # Directions a knight can move on a chessboard knight_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] # Convert obstacles list to a set of tuples for O(1) lookup obstacle_set = {(x, y) for x, y in obstacles} # BFS to find the shortest path q = deque([(0, 0, 0)]) # queue of (x, y, moves) visited = set([(0, 0)]) # set of visited positions while q: x, y, moves = q.popleft() if (x, y) == (N-1, N-1): return moves for dx, dy in knight_moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and (nx, ny) not in obstacle_set: visited.add((nx, ny)) q.append((nx, ny, moves + 1)) return -1 def solve(T, test_cases): results = [] for i in range(T): N, M, obstacles = test_cases[i] results.append(knight_minimum_moves(N, M, obstacles)) return results"},{"question":"A group of astronomers has just discovered a new planet in a distant galaxy. They decided to name it Planet X. To study the planet\'s surface, they developed a grid-based scanner that captures images of the terrain in a grid pattern. Each cell in the grid contains a value representing the elevation at that point. The scanner has a unique capability: it can perform operations to alter the elevation values in a specified row or column of the grid. Given the size of the terrain and frequent queries from the astronomers, you are tasked to write a program that either updates the elevation values in a specified row or column or returns the sum of all elevation values in a specified sub-rectangle of the grid. Here’s how the operations are defined: 1. **Update Row**: Update all values in a specified row to a new elevation. 2. **Update Column**: Update all values in a specified column to a new elevation. 3. **Query Sum**: Calculate the sum of elevation values within a specified sub-rectangle of the grid. -----Input----- The first line contains two integers n and m (1 leq n, m leq 500), the number of rows and columns in the grid. The next n lines contain m integers each, representing the initial elevation values in the grid. The next line contains an integer q (1 leq q leq 100,000), the number of operations. Each of the next q lines contains an operation in one of the following formats: - \\"R x v\\", where R indicates a row update, x is the 1-based index of the row, and v is the new elevation value for the entire row. (1 leq x leq n, 1 leq v leq 10^9) - \\"C y v\\", where C indicates a column update, y is the 1-based index of the column, and v is the new elevation value for the entire column. (1 leq y leq m, 1 leq v leq 10^9) - \\"Q x1 y1 x2 y2\\", where Q indicates a query operation, and (x1, y1) is the 1-based index of the top-left corner, and (x2, y2) is the 1-based index of the bottom-right corner of the sub-rectangle. (1 leq x1 leq x2 leq n, 1 leq y1 leq y2 leq m) -----Output----- For each query operation, output the sum of elevation values within the specified sub-rectangle. -----Examples----- Input 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 5 R 2 5 C 3 7 Q 2 2 3 4 Q 1 1 4 5 R 1 10 Output 77 226 Explanation: After the first operation, the grid becomes: 1 2 3 4 5 5 5 5 5 5 11 12 13 14 15 16 17 18 19 20 After the second operation, the grid becomes: 1 2 7 4 5 5 5 7 5 5 11 12 7 14 15 16 17 7 19 20 For the first query (sub-rectangle from (2, 2) to (3, 4)): 5 7 5 12 7 14 sum = 5 + 7 + 5 + 12 + 7 + 14 = 50 + 27 = 77 For the second query (sub-rectangle from (1, 1) to (4, 5)): sum = 1 + 2 + 7 + 4 + 5 + 5 + 5 + 7 + 5 + 5 + 11 + 12 + 7 + 14 + 15 + 16 + 17 + 7 + 19 + 20 = 226","solution":"def update_grid(grid, operations): n = len(grid) m = len(grid[0]) for operation in operations: op = operation[0] if op == \\"R\\": _, x, v = operation x = int(x) - 1 v = int(v) for j in range(m): grid[x][j] = v elif op == \\"C\\": _, y, v = operation y = int(y) - 1 v = int(v) for i in range(n): grid[i][y] = v elif op == \\"Q\\": _, x1, y1, x2, y2 = operation x1 = int(x1) - 1 y1 = int(y1) - 1 x2 = int(x2) - 1 y2 = int(y2) - 1 total_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total_sum += grid[i][j] print(total_sum)"},{"question":"Building a Skyline Given an array representing heights of buildings standing next to each other, your task is to compute the total perimeter of the silhouette when viewed from a distance. Buildings are represented by arrays of integers, where each integer denotes the height of the building. For example, an array `[2, 3, 2, 4]` represents four buildings with heights 2, 3, 2, and 4 respectively. The perimeter includes the left side, right side, each building\'s top, and the vertical differences between adjacent buildings. Compute and output the total silhouette perimeter. # Input - A line containing positive integers separated by spaces, representing the heights of the buildings. - The length of the array will be between 1 and 20,000. # Output - A single integer representing the total silhouette perimeter of the buildings. # Example Input: ``` 2 3 2 4 ``` Output: ``` 14 ``` # Explanation: The silohette looks like this: ``` * *** * *** ***** ***** 1 21231 ``` The perimeter calculation includes: - Left-most building height: 2 (left) - Right-most building height: 4 (right) - Heights sum for top of all buildings: 2 + 3 + 2 + 4 = 11 - Vertical differences between adjacent buildings: - |3 - 2| = 1 - |2 - 3| = 1 - |4 - 2| = 2 Total perimeter = 2 (left) + 4 (right) + 11 (tops) + 1 + 1 + 2 (vertical differences) = 14","solution":"def silhouette_perimeter(heights): Calculate the total perimeter of the silhouette viewed from a distance. Parameters: heights (list of int): List of heights of the buildings. Returns: int: Total perimeter of the silhouette. if not heights: return 0 n = len(heights) # Initial perimeter includes leftmost and rightmost sides, and tops of all buildings perimeter = heights[0] + heights[-1] + sum(heights) # Add vertical differences between adjacent buildings for i in range(1, n): perimeter += abs(heights[i] - heights[i - 1]) return perimeter"},{"question":"You are a software engineer working on a data visualization tool. Your task is to create an algorithm that generates all valid permutations of a given string, such that no two adjacent characters are the same. Given a string s, return all possible permutations that satisfy the given condition. If no valid permutation is possible, return an empty list. Example 1: Input: s = \\"aab\\" Output: [\\"aba\\", \\"aab\\"] Example 2: Input: s = \\"aa\\" Output: [] Example 3: Input: s = \\"abc\\" Output: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] Constraints: - 1 <= s.length <= 8 - s consists of lowercase English letters.","solution":"from itertools import permutations def valid_permutations(s): Generate all valid permutations of the given string such that no two adjacent characters are the same. Args: s (str): The input string Returns: List[str]: A list of valid permutations or an empty list if no valid permutation exists def is_valid(perm): for i in range(1, len(perm)): if perm[i] == perm[i-1]: return False return True all_perms = set(permutations(s)) valid_perms = [\'\'.join(p) for p in all_perms if is_valid(p)] return valid_perms"},{"question":"You are given an array of integers that represent the costs of different items that a store has on sale. Ali has a budget of `B` dollars and wants to know if he can buy exactly two different items such that the total cost does not exceed his budget. Write a program to determine if there are two distinct items in the array that Ali can afford. ------ Input ------ The first line of the input contains a single integer `T` denoting the number of test cases. The description of the `T` test cases follows. The first line of each test case contains two space-separated integers `N` and `B` where `N` is the number of items and `B` is Ali\'s budget. The second line of each test case contains `N` space-separated integers representing the cost of each item in the store. ------ Output ------ For each test case, print a single line containing the integer `1` if Ali can buy exactly two different items such that their total cost does not exceed his budget, or `0` otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^{5} 1 ≤ B ≤ 10^{9} 1 ≤ cost of any item ≤ 10^{9} ----- Sample Input ------ 3 4 7 1 2 3 4 5 10 9 2 8 1 6 3 5 5 5 5 ----- Sample Output ------ 1 1 0 ----- Explanation ------ Example case 1: Ali can buy the first item (cost 1) and the fourth item (cost 4) for a total cost of 1 + 4 = 5 which is within his budget of 7. Example case 2: Ali can buy the second item (cost 2) and the fourth item (cost 1) for a total cost of 2 + 1 = 3 which is within his budget of 10. Example case 3: All items have the same cost of 5. Since Ali cannot buy any two distinct items within his budget of 5, the output is 0.","solution":"def can_buy_two_items(T, test_cases): results = [] for i in range(T): N, B = test_cases[i][0] costs = test_cases[i][1] costs.sort() left, right = 0, N - 1 found = 0 while left < right: if costs[left] + costs[right] <= B: found = 1 break elif costs[left] + costs[right] < B: left += 1 else: right -= 1 results.append(found) return results"},{"question":"Given an array of integers and a target integer, return an array of all unique quadruplets `[a, b, c, d]` such that `a + b + c + d = target`, where `a, b, c, and d` are elements from the array. The solution set must not contain duplicate quadruplets and the input array will not be empty. For example: ``` ([1, 0, -1, 0, -2, 2], 0) => [[-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]] ([2, 2, 2, 2, 2], 8) => [[2, 2, 2, 2]] ([4, 1, 2, -1, 1, -3], 1) => [[-3, -1, 1, 4], [-3, 1, 1, 2]] ```","solution":"def four_sum(nums, target): nums.sort() res = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: s = nums[i] + nums[j] + nums[left] + nums[right] if s == target: res.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif s < target: left += 1 else: right -= 1 return res"},{"question":"A train station manager is responsible for tracking the arrival and departure of trains at a station. Each train has a unique arrival and departure time on a given day. The manager wants to know the minimum number of platforms required to accommodate all the trains without any collision (i.e., no two trains should be on the same platform at the same time). Write a function `minPlatforms()` that takes in two lists of integers `arrival` and `departure`, where each element in `arrival` represents the arrival time of a train and the corresponding element in `departure` represents the departure time of the same train. The function should return the minimum number of platforms required. Note: Arrival and departure times are given in a 24-hour format (e.g., 1300 represents 1 PM). Example 1: Input: arrival = [900, 940, 950, 1100, 1500, 1800] departure = [910, 1200, 1120, 1130, 1900, 2000] Output: 3 Explanation: The trains 3, 4, and 5 are overlapping with their arrival and departure times so the minimum platforms required are 3. Example 2: Input: arrival = [100, 300, 500] departure = [200, 400, 600] Output: 1 Explanation: All trains depart before the next train arrives. Your Task: You don\'t need to read input or print anything. Complete the function `minPlatforms()` that takes lists `arrival` and `departure` as input parameters and returns the required number of platforms. Expected Time Complexity: O(n log n) Expected Space Complexity: O(n) Constraints: 1 <= number of trains <= 1000 0000 <= arrival[i], departure[i] <= 2359","solution":"def minPlatforms(arrival, departure): This function returns minimum number of platforms required to accommodate all the trains without any collision. n = len(arrival) arrival.sort() departure.sort() platform_needed = 1 result = 1 i = 1 j = 0 while i < n and j < n: if arrival[i] <= departure[j]: platform_needed += 1 i += 1 if platform_needed > result: result = platform_needed else: platform_needed -= 1 j += 1 return result"},{"question":"Imagine you are given the task of processing a data log containing information about temperature readings in various cities. The log file contains multiple entries, each with a date, city name, and temperature recorded on that day. Your job is to write a program that reads this data and determines the highest temperature recorded in each city. If there are multiple entries for the same city on the same date, consider only the last entry of that day. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of temperature readings in the log file. Each of the next n lines contains a string date (in the format YYYY-MM-DD), a string city_name (1 ≤ length(city_name) ≤ 20), and an integer temperature (-100 ≤ temperature ≤ 100). The strings are separated by spaces. Output For each city, print the city name followed by the highest temperature recorded in that city. Print the cities in the order they first appear in the input. Examples Input 7 2023-01-01 New_York 5 2023-01-02 New_York 10 2023-01-01 Los_Angeles 15 2023-01-02 Los_Angeles 20 2023-01-01 New_York -5 2023-01-01 New_York 8 2023-01-03 Los_Angeles 25 Output New_York 10 Los_Angeles 25 Input 4 2023-02-01 Chicago -10 2023-02-01 Chicago 0 2023-02-02 Miami 30 2023-02-02 Miami 31 Output Chicago 0 Miami 31","solution":"def highest_temperatures(n, readings): Determine the highest temperature recorded in each city. :param n: Number of temperature readings :param readings: List of temperature readings in the format [(date, city_name, temperature), ...] :return: Dictionary with city names as keys and their highest temperatures as values last_entry = {} max_temps = {} for date, city, temp in readings: if (date, city) not in last_entry or last_entry[(date, city)][0] < temp: last_entry[(date, city)] = (temp, date) for (date, city), (temp, _) in last_entry.items(): if city not in max_temps: max_temps[city] = temp else: max_temps[city] = max(max_temps[city], temp) return max_temps"},{"question":"Alice was given a string `S` containing only characters `A` and `B`. She can perform the following operation any number of times (including zero): Select any character and delete it from the string. Alice would like to make the number of `A`s equal to the number of `B`s in the string. Determine the minimum number of deletions required to make the number of `A`s equal to the number of `B`s. ------ Input Format ------ - The first line contains a single integer `T`, the number of test cases. - Each of the next `T` lines contains a single string `S`. ------ Output Format ------ For each test case, output the minimum number of deletions required to make the number of `A`s equal to the number of `B`s. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ |S| ≤ 10^5 - The sum of |S| over all test cases doesn\'t exceed 10^5. `S` contains the characters `A` and `B` only. ------ Sample Input 1 ------ 3 AB AAB AAABB ------ Sample Output 1 ------ 0 1 2 ------ Explanation 1 ------ Test case 1: The string `AB` already has equal number of `A`s and `B`s, so no deletions are needed. Test case 2: The string `AAB` has 2 `A`s and 1 `B`. We need to delete 1 `A` to make the counts equal. Test case 3: The string `AAABB` has 3 `A`s and 2 `B`s. We need to delete 1 `A` and 1 `B` to make the counts equal.","solution":"def min_deletions_to_balance(s): Returns the minimum number of deletions required to make the number of A\'s equal to the number of B\'s in the string. count_A = s.count(\'A\') count_B = s.count(\'B\') return abs(count_A - count_B) def process_test_cases(test_cases): Processes a list of test cases and returns a list of results for each case. results = [] for s in test_cases: results.append(min_deletions_to_balance(s)) return results"},{"question":"Given an array of integers and a target sum, determine if there is a subset of the array that adds up to the target sum. You are allowed to use each element of the array zero or more times to form the subset. Input The first line contains an integer T (1 ≤ T ≤ 3), the number of test cases. For each test case, the first line contains two integers N (1 ≤ N ≤ 1000) and S (1 ≤ S ≤ 1000), where N is the number of elements in the array and S is the target sum. The second line contains N integers, the elements of the array. Output For each test case, print the case number, followed by a colon, followed by a single space, followed by \\"YES\\" if there is a subset that sums to the target, otherwise print \\"NO\\". Sample Input 2 5 11 2 3 7 8 10 4 5 2 4 6 8 Sample Output Case 1: YES Case 2: NO","solution":"def can_form_target_sum(nums, target): Determines if a subset of nums can sum up to the target. dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(num, target + 1): dp[i] = dp[i] or dp[i - num] return dp[target] def check_test_cases(test_cases): results = [] for case_number, (n, s, nums) in enumerate(test_cases, start=1): if can_form_target_sum(nums, s): results.append(f\\"Case {case_number}: YES\\") else: results.append(f\\"Case {case_number}: NO\\") return results"},{"question":"You are given a list of n unique integers and a target integer k. Determine if there are two numbers in the list whose difference is exactly k. For example, given the list [5, 20, 3, 2, 50, 80] and k = 78, there is a pair (2, 80) whose difference is exactly 78. -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^4). The second line contains n unique integers ai (1 ≤ ai ≤ 10^4). -----Output----- If there exists such a pair, print \\"YES\\". Otherwise, print \\"NO\\". -----Examples----- Input 6 78 5 20 3 2 50 80 Output YES Input 5 45 90 70 20 80 30 Output NO","solution":"def has_pair_with_difference(arr, k): Determine if there are two numbers in the list whose difference is exactly k. Parameters: arr (list): A list of unique integers. k (int): The target difference. Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for num in arr: if (num + k) in seen or (num - k) in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"A delivery company needs to calculate the total cost of sending a package based on different pricing rules. The price depends on the weight of the package and the distance it needs to travel. The rules are as follows: 1. Weight pricing: - Up to and including 1 kg: 5 per kg. - More than 1 kg and up to and including 5 kg: 3 per kg. - More than 5 kg: 2 per kg. 2. Distance pricing: - Up to and including 100 km: 0.50 per km. - More than 100 km and up to and including 1000 km: 0.30 per km. - More than 1000 km: 0.20 per km. Given the weight of the package in kilograms and the distance it needs to travel in kilometers, compute the total cost to send the package. -----Constraints----- - The weight of the package (W) is a positive integer not exceeding 50. - The distance (D) is a positive integer not exceeding 5000. -----Input----- Input is given from Standard Input in the following format: W D -----Output----- Print the total cost to send the package. -----Sample Input----- 2 150 -----Sample Output----- 75.0 For weight: 2 kg falls into the 3 per kg category. For distance: 150 km falls into the 0.30 per km category. Total cost = (2 * 3) + (150 * 0.30) = 6 + 45 = 51.","solution":"def calculate_delivery_cost(weight, distance): Calculate the total cost of sending a package based on weight and distance. :param weight: int, weight of the package in kg :param distance: int, distance the package needs to travel in km :return: float, total cost to send the package # Determine weight cost if weight <= 1: weight_cost = 5 * weight elif weight <= 5: weight_cost = 3 * weight else: weight_cost = 2 * weight # Determine distance cost if distance <= 100: distance_cost = 0.50 * distance elif distance <= 1000: distance_cost = 0.30 * distance else: distance_cost = 0.20 * distance # Total cost total_cost = weight_cost + distance_cost return total_cost"},{"question":"Given an array of integers, your task is to determine the maximum product of any contiguous subarray. The given array may have both positive and negative integers, and its size will be in the range 1-100. First Example: Input: [2, 3, -2, 4] Steps: The contiguous subarrays are: [2] -> product is 2 [3] -> product is 3 [-2] -> product is -2 [4] -> product is 4 [2, 3] -> product is 6 [3, -2] -> product is -6 [-2, 4] -> product is -8 [2, 3, -2] -> product is -12 [3, -2, 4] -> product is -24 [2, 3, -2, 4] -> product is -48 Output: The maximum product is 6 Second Example: Input: [-2, 0, -1] Steps: The contiguous subarrays are: [-2] -> product is -2 [0] -> product is 0 [-1] -> product is -1 [-2, 0] -> product is 0 [0, -1] -> product is 0 [-2, 0, -1] -> product is 0 Output: The maximum product is 0 Input: integer array Output: maximum product of any contiguous subarray","solution":"def max_product_subarray(nums): Returns the maximum product of any contiguous subarray. if not nums: return 0 max_prod = min_prod = result = nums[0] for num in nums[1:]: temp_max = max(num, max_prod * num, min_prod * num) min_prod = min(num, max_prod * num, min_prod * num) max_prod = temp_max result = max(result, max_prod) return result"},{"question":"Alice has just learned about Fibonacci numbers and their properties. Now, Alice is curious about how to find the n-th Fibonacci number efficiently. She knows the naive recursive method is too slow for large values of n, so she\'s asked for your help in writing a program to compute the n-th Fibonacci number using a more efficient approach. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 Given an integer n, your task is to compute the n-th Fibonacci number efficiently, modulo 10^9 + 7. INPUT A single integer n. OUTPUT The n-th Fibonacci number, modulo 10^9 + 7. CONSTRAINTS 0 ≤ n ≤ 10^18 SAMPLE INPUT 10 SAMPLE OUTPUT 55 Explanation The Fibonacci series is: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 10th Fibonacci number is 55.","solution":"MOD = 10**9 + 7 def matrix_mult(A, B, mod=MOD): Multiplies two 2x2 matrices A and B under modulo mod. return [ [(A[0][0] * B[0][0] + A[0][1] * B[1][0]) % mod, (A[0][0] * B[0][1] + A[0][1] * B[1][1]) % mod], [(A[1][0] * B[0][0] + A[1][1] * B[1][0]) % mod, (A[1][0] * B[0][1] + A[1][1] * B[1][1]) % mod] ] def matrix_pow(matrix, power, mod=MOD): Performs matrix exponentiation on a 2x2 matrix under modulo mod to find matrix^power. result = [[1, 0], [0, 1]] # Identity matrix base = matrix while power > 0: if power % 2 == 1: result = matrix_mult(result, base, mod) base = matrix_mult(base, base, mod) power //= 2 return result def fibonacci(n, mod=MOD): Returns the n-th Fibonacci number modulo mod. if n == 0: return 0 elif n == 1: return 1 F = [[1, 1], [1, 0]] # Transformation matrix for Fibonacci sequence result_matrix = matrix_pow(F, n-1, mod) return result_matrix[0][0] def fib_mod(n): return fibonacci(n)"},{"question":"Given a string of lowercase alphabets and an integer k, modify the string by replacing each character with the k-th next character in the alphabet. If the replacement exceeds \'z\', it should wrap around to start from \'a\'. For example, if the input string is \\"abcd\\" and k is 2, the resulting string will be \\"cdef\\". Example 1: Input: String: \\"xyz\\" k: 3 Output: \\"abc\\" Explanation: Replacing each character by the 3rd next character in the alphabet results in \'a\', \'b\', and \'c\'. Example 2: Input: String: \\"hello\\" k: 4 Output: \\"lipps\\" Explanation: Replacing each character by the 4th next character in the alphabet results in \'l\', \'i\', \'p\', \'p\', \'s\'. Your Task: The task is to complete the function shiftString() which takes the string and the integer k as the arguments and returns the modified string. Expected Time Complexity: O(N), where N is the length of the input string. Expected Auxiliary Space: O(1). Constraints: 1 ≤ length of the string ≤ 10^4 0 ≤ k ≤ 25","solution":"def shiftString(s, k): Modifies the input string by replacing each character with the k-th next character in the alphabet. If the replacement exceeds \'z\', it wraps around to start from \'a\'. :param s: str, input string of lowercase alphabets :param k: int, the number of positions to shift each character :return: str, the resulting modified string # Calculate the new character for each character in the string shifted = [(chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\'))) for char in s] # Join the list into a string and return return \'\'.join(shifted)"},{"question":"Given a string that consists only of lowercase alphabetic characters (a-z), return the maximum length of a substring that has all unique characters. For example, for the string `abcabcbb`, the longest substring with all unique characters is `abc`, which has a length of 3. For the string `bbbbb`, the longest substring with all unique characters is `b`, which has a length of 1. For the string `pwwkew`, the longest substring with all unique characters is `wke`, which has a length of 3. ```if:python Documentation: def longest_unique_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. Args: s (str): The string to be processed. Returns: int: The length of the longest unique character substring in s, or 0 if s is empty. pass ``` ```if:csharp Documentation: Kata.LongestUniqueSubstring Method (String) Returns the length of the longest consecutive substring with no repeating characters. Syntax public static int LongestUniqueSubstring( string str ) Parameters str Type: System.String The string to be processed. Return Value Type: System.Int32 The length of the longest unique character substring in s, or 0 if s is empty. Exceptions Exception Condition ArgumentNullException str is null. ```","solution":"def longest_unique_substring(s: str) -> int: Returns the length of the longest substring with all unique characters. Args: s (str): The string to be processed. Returns: int: The length of the longest unique character substring in s, or 0 if s is empty. if not s: return 0 char_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: # Move the start pointer to the right of the previous index of s[end] start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of transactions where each transaction is represented as a tuple ```(transaction_type, amount)```, where ```transaction_type``` can be either \'credit\' or \'debit\'. You need to calculate the net balance after processing all the transactions. The balance should start from zero. Write a function `calculate_balance(transactions)` that takes a list of transactions and returns the balance. Additionally, if at any point the balance goes below zero, the function should return -1 immediately without processing further transactions, indicating that the account has gone into overdraft. Here\'s what the function should look like: ```python def calculate_balance(transactions): # Your code here ``` # Example ```python transactions = [(\'credit\', 100), (\'debit\', 50), (\'credit\', 10), (\'debit\', 70)] calculate_balance(transactions) ``` - Starting balance: 0 - After first transaction: 0 + 100 = 100 - After second transaction: 100 - 50 = 50 - After third transaction: 50 + 10 = 60 - After fourth transaction: 60 - 70 = -10 (overdraft) In this example, since the balance goes below zero during the last debit transaction, the function should return -1. # Additional Constraints: - The list of transactions will have at least one transaction and can have up to 1000 transactions. - Each amount is a non-negative integer and does not exceed 1,000,000. # Test case: ```python transactions = [(\'credit\', 500), (\'debit\', 200), (\'credit\', 300), (\'debit\', 700), (\'credit\', 100)] calculate_balance(transactions) ``` - Starting balance: 0 - After first transaction: 0 + 500 = 500 - After second transaction: 500 - 200 = 300 - After third transaction: 300 + 300 = 600 - After fourth transaction: 600 - 700 = -100 (overdraft) - Function should return -1 since the balance goes below zero during the fourth transaction.","solution":"def calculate_balance(transactions): Calculate the net balance after processing all transactions. :param transactions: List of tuples (transaction_type, amount) :return: Net balance or -1 if balance goes below zero balance = 0 for transaction_type, amount in transactions: if transaction_type == \'credit\': balance += amount elif transaction_type == \'debit\': balance -= amount if balance < 0: return -1 return balance"},{"question":"You are given a string s consisting of lowercase English letters. You need to rearrange the characters in such a way that no two adjacent characters are the same. If it is impossible, output \\"IMPOSSIBLE\\". For example, consider the string s = \\"aaabbc\\". One possible rearrangement is \\"abcaba\\". -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains a single integer n (1 le n le 1000) — the length of the string s. The second line of each test case contains the string s of length n consisting of lowercase English letters. -----Output----- For each test case, output a single line: the rearranged string if possible. Otherwise, output \\"IMPOSSIBLE\\". -----Example----- Input 3 6 aaabbc 3 aaa 7 aabbccd Output abcaba IMPOSSIBLE acbadbc -----Note----- In the first test case, one possible rearrangement is \\"abcaba\\". Other valid rearrangements are possible. In the second test case, it is impossible to rearrange the string such that no two adjacent characters are the same. In the third test case, one possible rearrangement is \\"acbadbc\\". Other valid rearrangements are possible.","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(s): if not s: return \\"IMPOSSIBLE\\" # Create a counter for all characters counter = Counter(s) # Max heap to store characters by their frequency max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) prev_char = None prev_freq = 0 result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) # If there\'s a previously used char, push it back if there\'s more left to use if prev_char is not None and prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Update prev_char and prev_freq prev_char = char prev_freq = freq + 1 # If the resulting string\'s length doesn\'t match the input\'s length, return IMPOSSIBLE if len(result) != len(s): return \\"IMPOSSIBLE\\" return \\"\\".join(result) def rearrange_test_cases(test_cases): results = [] for n, s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"You are given an array A of N integers. You can perform the following type of operation on the array A: Choose one element, divide it by 2, and replace the original element with the result of the division (using integer division). Find the minimum number of operations required to make all the elements of the array A equal. ------ Input Format ------ - First line of the input contains T, the number of test cases. Then the test cases follow. - First line of each test case contains an integer N denoting the size of the array. - Second line of each test case contains N integers, the elements of the array A. ------ Output Format ------ For each test case, print the minimum number of operations required to make all the elements of the array equal. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 2 cdot 10^{5} 1 ≤ A[i] ≤ 10^9 - Sum of N over all test cases does not exceed 2 cdot 10^{5} . ------ Sample Input 1 ------ 3 3 4 8 16 4 3 6 12 24 2 5 10 ------ Sample Output 1 ------ 3 3 1 ------ Explanation 1 ------ Test Case 1: The given array is [4, 8, 16]. - Divide 16 by 2, we get [4, 8, 8] - Divide 8 by 2, we get [4, 4, 8] - Divide 8 by 2, we get [4, 4, 4] The number of operations required is 3. Test Case 2: The given array is [3, 6, 12, 24]. - Divide 24 by 2 three times, we get [3, 6, 12, 3] - Divide 12 by 2 two times, we get [3, 6, 3, 3] - Divide 6 by 2 one time, we get [3, 3, 3, 3] The number of operations required is 6. Test Case 3: The given array is [5, 10]. - Divide 10 by 2 one time, we get [5, 5] The number of operations required is 1.","solution":"def min_operations_to_make_equal(arr): Calculates the minimum number of operations to make all elements of the array equal. Each operation consists of dividing an element by 2 (using integer division). from collections import defaultdict def steps_to_one(x): operations = 0 history = [] while x > 0: history.append((x, operations)) if x == 1: break x //= 2 operations += 1 return history # Get the step histories for all elements all_histories = [steps_to_one(x) for x in arr] # Use a dictionary to count the minimal operations to achieve each intermediate value value_to_min_operations = defaultdict(list) for history in all_histories: for value, operations in history: value_to_min_operations[value].append(operations) # Initialize the minimum number of global operations possible_targets = value_to_min_operations.keys() min_operations = float(\'inf\') for target in possible_targets: if len(value_to_min_operations[target]) == len(arr): total_operations = sum(sorted(value_to_min_operations[target])[:len(arr)]) min_operations = min(min_operations, total_operations) return min_operations def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] results.append(min_operations_to_make_equal(A)) return results"},{"question":"You are given a list of numbers. You need to find if there exists a subset of the list with a sum equal to zero. Note that the subset can be empty as well. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case starts with a line containing an integer n (1 le n le 100) — the number of integers in the array. The next line contains n space-separated integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4) — the elements of the array. -----Output----- For each test case, output \\"YES\\" if there exists a subset of the given list whose sum is zero, otherwise output \\"NO\\". -----Example----- Input 3 5 1 2 -3 4 5 4 -1 1 -1 1 3 2 3 9 Output YES YES NO -----Note----- In the first test case, the subset {1, 2, -3} sums to zero. In the second test case, the subset {-1, 1} sums to zero. In the third test case, no subset sums to zero.","solution":"def subset_sum_zero_exists(n, array): Function to check if there\'s a subset of the array that sums to zero. # Create a set to store the prefix sums prefix_sums = set() current_sum = 0 for number in array: current_sum += number # If the current sum is zero or we have seen this sum before if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) # If no subset with sum zero found return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: n, array = case results.append(subset_sum_zero_exists(n, array)) return results"},{"question":"# Description: You are given a rectangular matrix of characters and a word. Your task is to determine if the word can be constructed by sequentially adjacent cells of the matrix, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. Each cell can only be used once in constructing the word. # Input: - A 2D list of characters `matrix` (not necessarily square). - A string `word`. # Output: - Return `True` if the word can be constructed from the matrix according to the rules described, otherwise return `False`. # Example: ``` Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \'ABCCED\' Output: True ``` ``` Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \'SEE\' Output: True ``` ``` Input: matrix = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \'ABCB\' Output: False ``` # Note: - The matrix dimensions and the word length will always be appropriate for solving with standard computational resources.","solution":"def word_exists(matrix, word): if not matrix or not word: return False rows, cols = len(matrix), len(matrix[0]) def dfs(x, y, index): if index == len(word): return True if x < 0 or x >= rows or y < 0 or y >= cols or matrix[x][y] != word[index]: return False temp = matrix[x][y] matrix[x][y] = \'#\' result = (dfs(x+1, y, index+1) or dfs(x-1, y, index+1) or dfs(x, y+1, index+1) or dfs(x, y-1, index+1) or dfs(x+1, y+1, index+1) or dfs(x+1, y-1, index+1) or dfs(x-1, y+1, index+1) or dfs(x-1, y-1, index+1)) matrix[x][y] = temp return result for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"A company has N employees, numbered from 1 to N, working on a special project. Each employee has a specific skill level given in an array S of length N, where S[i] represents the skill level of the employee i+1. The employees work on different tasks, and each task requires a minimum skill level to be completed. There are Q queries of 2 types the company wishes to ask: 1. Promote: Promote the skill level of a specific employee. 2. Query: Determine the highest skilled employee capable of completing a task with the required minimum skill level. Each query will be given in one of the following formats: - \\"0 i x\\" - Promote employee i by increasing their skill level by x units. - \\"1 x\\" - Find the highest numbered employee with a skill level of at least x. If no such employee is found, return -1. Write a program to process these queries. -----Input----- The first line contains two integers N and Q (1 leq N, Q leq 100,000). The second line contains N integers S[1], S[2], ..., S[N] (1 leq S[i] leq 10^9) - the initial skill levels of the employees. Each of the next Q lines contains one of the 2 types of queries: - \\"0 i x\\" (1 leq i leq N, 1 leq x leq 10^9) - promote employee i by x units. - \\"1 x\\" (1 leq x leq 10^9) - query the highest numbered employee with a skill level of at least x. -----Output----- For each \\"1 x\\" query, print a single integer representing the employee number with the highest number and at least x skill level. If no such employee exists, print -1. -----Examples----- Sample Input: 5 5 10 30 20 50 40 1 25 0 3 20 1 45 0 2 25 1 55 Sample Output: 5 4 3 Explanation: In the initial state, the skill levels of employees are [10, 30, 20, 50, 40]. - The first query asks for the highest numbered employee with at least 25 skill. The answer is employee 5. - The second query promotes employee 3 by 20 units, making the skill levels [10, 30, 40, 50, 40]. - The third query asks for the highest numbered employee with at least 45 skill. The answer is employee 4. - The fourth query promotes employee 2 by 25 units, making the skill levels [10, 55, 40, 50, 40]. - The fifth query asks for the highest numbered employee with at least 55 skill. The answer is employee 2.","solution":"def process_queries(N, Q, S, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'0\': # Promote employee i = int(parts[1]) - 1 x = int(parts[2]) S[i] += x elif parts[0] == \'1\': # Query highest capable employee x = int(parts[1]) result = -1 for i in range(N-1, -1, -1): if S[i] >= x: result = i + 1 break results.append(result) return results"},{"question":"You are given a string representing a sequence of moves on a 2D plane. The moves are represented by the characters \'U\', \'D\', \'L\', and \'R\', which correspond to the directions Up, Down, Left, and Right, respectively. Assume the starting position is at the origin (0, 0) on the plane. Write a function to determine whether the sequence of moves will return to the origin. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains a single line of input representing the string of moves. -----Output:----- For each testcase, output \\"YES\\" if the sequence of moves returns to the origin, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - The length of the move sequence will be between 1 and 10^4. -----Sample Input:----- 2 UD LLRR -----Sample Output:----- YES YES -----EXPLANATION:----- In the first example, the moves \'U\' and \'D\' cancel each other out, returning to the origin. In the second example, the moves \'LL\' and \'RR\' also cancel each other out, returning to the origin.","solution":"def returns_to_origin(moves): Determines if the given moves will return to the origin (0, 0). Args: moves (str): A sequence of moves using \'U\', \'D\', \'L\', \'R\'. Returns: str: \\"YES\\" if moves return to the origin, otherwise \\"NO\\". x, y = 0, 0 for move in moves: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\" def process_test_cases(T, test_cases): Process multiple test cases and determine if each sequence of moves returns to the origin. Args: T (int): Number of test cases. test_cases (list of str): List containing the sequence of moves for each test case. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each test case. results = [] for moves in test_cases: results.append(returns_to_origin(moves)) return results"},{"question":"In a small town, there is a unique way of delivering mail. The town\'s postman delivers mail to houses along a single straight road which is represented as a 1-dimensional number line. Each house\'s location is marked by a unique integer coordinate. The postman can either start his delivery from the leftmost house and end at the rightmost house or vice versa. His goal is to minimize the total distance traveled while delivering all the mails. You are given the list of coordinates of all houses that need mail delivery. Write a program to calculate the minimum distance the postman needs to travel to deliver all the mails. -----Input----- The first line contains the integer H (1 leq H leq 1000000), the number of houses. The second line contains H unique integers representing the coordinates of the houses on the number line. Each coordinate is between -1000000000 and 1000000000. -----Output----- Output the minimum distance the postman needs to travel to deliver all the mails. -----Examples----- Sample Input: 4 2 5 7 12 Sample Output: 10 Sample Input: 3 -10 0 10 Sample Output: 20","solution":"def minimum_delivery_distance(houses): Returns the minimum distance the postman needs to travel to deliver all the mails. min_house = min(houses) max_house = max(houses) return max_house - min_house # Example usage: # H = 4 # houses = [2, 5, 7, 12] # print(minimum_delivery_distance(houses)) # Output: 10"},{"question":"Alice loves reading books and maintains a meticulous record of her reading list. She has categorized each book into different genres. Given her records, Alice wants to know how many unique genres and the most frequently appeared genre(s) in her reading list. Write a program to help her with this task. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of books in the reading list. Each of the next n lines contains a string representing the genre of the book. The string will have no spaces and will consist of only lowercase alphabetic characters. The length of each string is at most 20. -----Output----- On the first line, print an integer representing the number of unique genres in the list. On the second line, print the genre(s) that appear(s) most frequently. If there are multiple genres with the same highest frequency, print them in alphabetical order separated by a space. -----Examples----- Input 7 mystery fantasy mystery sci-fi fantasy fantasy mystery Output 3 fantasy mystery Input 5 romance thriller romance thriller romance Output 2 romance -----Note----- In the first sample, there are three unique genres: mystery, fantasy, and sci-fi. Both \'mystery\' and \'fantasy\' are the most frequently appearing genres, each appearing three times. In the second sample, there are two unique genres: romance and thriller. \'Romance\' is the most frequently appearing genre, appearing three times.","solution":"def analyze_genres(n, genres): Analyze the genres in Alice\'s reading list. Parameters: n (int): the number of books genres (list of str): list of genres Returns: tuple: (number of unique genres, most frequent genre(s) as a space separated string) from collections import Counter genre_counts = Counter(genres) unique_genres_count = len(genre_counts) max_frequency = max(genre_counts.values()) most_frequent_genres = [genre for genre, count in genre_counts.items() if count == max_frequency] most_frequent_genres.sort() return unique_genres_count, \' \'.join(most_frequent_genres)"},{"question":"There are n parcels arranged in a line, and each parcel has a distinct integer weight associated with it. The weight of the i-th parcel is denoted by wi. You can perform the following operation several times (possibly zero): - Pick two adjacent parcels and swap them conditional to the fact that the total weight of the left parcel is less than that of the right list. Your task is to determine the maximum number of times you can perform this operation. Input The first line contains an integer n (0 ≤ n ≤ 10^5) — the number of parcels. The second line contains n distinct integers w1, w2, w3, ..., wn (1 ≤ wi ≤ 10^9), representing the weights of the parcels. Output Print a single integer — maximum number of times you can perform the operation. Examples Input 5 3 1 4 5 2 Output 2 Input 3 6 1 3 Output 1 Input 4 1 2 3 5 Output 0","solution":"def max_swaps(n, weights): count = 0 for i in range(n - 1): if weights[i] < weights[i + 1]: count += 1 return count"},{"question":"A railway company is planning a new high-speed train route that connects several cities. To evaluate the feasibility, they need to calculate the shortest travel time between cities while considering different speeds of different segments of the route. You are given a list of cities and a list of train segments connecting pairs of cities. Each segment has an associated speed limit and distance. You need to calculate the shortest travel time from the starting city to the destination city. # Input The input consists of multiple datasets, each formatted as follows: 1. The first line contains an integer ( C ) (( 2 leq C leq 10 )), the number of cities. 2. The following ( C ) lines each contain the name of a city. 3. The next line contains an integer ( S ) (( 1 leq S leq 20 )), the number of segments. 4. The following ( S ) lines each describe a segment in the format `city1 city2 distance speed_limit`, where: - `city1` and `city2` are the names of two different cities. - `distance` is an integer (( 1 leq distance leq 1000 )) representing the distance between `city1` and `city2`. - `speed_limit` is an integer (( 1 leq speed_limit leq 300 )) representing the speed limit on the segment. 5. The last line of the dataset consists of two city names: the starting city and the destination city. The end of the input is indicated by a single line containing only the number `0`. # Output For each dataset, output the shortest travel time from the starting city to the destination city in hours, rounded to two decimal places. If there is no valid route, output `-1`. # Example Input ``` 3 CityA CityB CityC 3 CityA CityB 100 100 CityB CityC 100 100 CityA CityC 300 150 CityA CityC 2 CityA CityB 2 CityA CityB 300 150 CityB CityA 300 150 CityA CityB 0 ``` Output ``` 2.00 2.00 ``` In the first example, the shortest route from `CityA` to `CityC` is `CityA -> CityB -> CityC` with a travel time of ( frac{100}{100} + frac{100}{100} = 2 ) hours. For the second example, the direct route `CityA` to `CityB` has a travel time of ( frac{300}{150} = 2 ) hours.","solution":"import heapq def calculate_shortest_travel_time(cities, segments, start_city, end_city): graph = {city: [] for city in cities} for segment in segments: city1, city2, distance, speed = segment time = distance / speed graph[city1].append((time, city2)) graph[city2].append((time, city1)) pq = [(0, start_city)] visited = set() min_time = {city: float(\'inf\') for city in cities} min_time[start_city] = 0 while pq: current_time, current_city = heapq.heappop(pq) if current_city in visited: continue visited.add(current_city) if current_city == end_city: return round(current_time, 2) for time, neighbor in graph[current_city]: new_time = current_time + time if new_time < min_time[neighbor]: min_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 def process_input(inputs): results = [] idx = 0 while idx < len(inputs): C = int(inputs[idx]) if C == 0: break idx += 1 cities = [inputs[idx + i] for i in range(C)] idx += C S = int(inputs[idx]) idx += 1 segments = [] for _ in range(S): segment = inputs[idx].split() city1 = segment[0] city2 = segment[1] distance = int(segment[2]) speed = int(segment[3]) segments.append((city1, city2, distance, speed)) idx += 1 start_city, end_city = inputs[idx].split() idx += 1 result = calculate_shortest_travel_time(cities, segments, start_city, end_city) results.append(result) return results"},{"question":"You have a collection of books placed on a shelf. Each book has a distinct weight that is an integer. There is also a toy robot placed on the leftmost side of the shelf. The robot can perform a series of operations to reorganize the books, but with certain movement constraints. The robot can move to the right or left by one position. When it is on a position with a book, it can pick up the book if it is not already holding one. Conversely, it can place down a book it is holding onto an empty position. The robot can also swap two adjacent books if they are of different weights. Given the initial arrangement of books by their distinct weights in a list, your task is to determine if it is possible for the robot to sort the books in ascending order using the described operations. -----Input----- The input consists of multiple lines: - The first line contains an integer n (1 ≤ n ≤ 100), the number of books on the shelf. - The second line contains n distinct space-separated integers, representing the weights of the books in the initial order on the shelf, from left to right. -----Output----- Output a single line with the string \\"YES\\" if it is possible for the robot to sort the books using the described operations. Otherwise, output \\"NO\\". -----Examples----- Input 3 3 1 2 Output YES Input 4 4 3 2 1 Output YES Input 3 3 2 1 Output NO -----Note----- In the first example, the robot can swap 1 with 3, and then 2 with 3 to achieve the sorted order [1, 2, 3]. In the second example, the robot can swap 3 with 4, and then 2 with 4, and finally 1 with 4 to achieve the sorted order [1, 2, 3, 4]. In the third example, the robot cannot swap 2 and 3, or 1 and 2 because the constraints do not allow the swapping of adjacent books that are not of different weights. Thus, sorting the sequence [3, 2, 1] is not possible.","solution":"def can_sort_books(n, books): Determines if it is possible to sort the books in ascending order. # Check inversions count inversions = 0 for i in range(n): for j in range(i + 1, n): if books[i] > books[j]: inversions += 1 # If inversions count is even, the books can be sorted if inversions % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"# Introduction and Warm-up (Highly recommended) # [Playing With Numbers](Link_to_the_codewars_collection) ___ Task **_Given_** an *integer* number n, **_find the sum of the squares of the digits_** of n. ___ # Notes * **_The input_** will always be a valid, non-negative integer. * **_If n is 0_**, then **_the sum is 0_**. ___ # Input >> Output Examples ``` sumOfSquares(123) ==> return (14) ``` _Explanation_: * The digits of 123 are (1, 2, 3). * Their squares are (1, 4, 9). * The sum of the squares of the digits is (1 + 4 + 9) = 14. ___ ``` sumOfSquares(49) ==> return (97) ``` _Explanation_: * The digits of 49 are (4, 9). * Their squares are (16, 81). * The sum of the squares of the digits is (16 + 81) = 97. ___ ``` sumOfSquares(0) ==> return (0) ``` _Explanation_: * Since the input is 0, the output is 0. ___ ___ ___ ___ [Playing with Numbers Series](Link_to_the_codewars_collection) [For More Enjoyable Katas](http://www.codewars.com/users/YourName/authored) ___ # ALL translations are welcomed # Enjoy Learning !! # YourName","solution":"def sumOfSquares(n): Given a non-negative integer n, return the sum of the squares of its digits. :param n: int :return: int return sum(int(digit) ** 2 for digit in str(n))"},{"question":"You are given a grid with some cells blocked and some cells open. You are currently in the top-left cell and your goal is to reach the bottom-right cell. You can only move right or down from each cell. Write a function that returns the number of unique paths from the top-left cell to the bottom-right cell. Example: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right cell: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Note: - `grid` will be a list of lists of integers where `1` represents a blocked cell and `0` represents an open cell. - The dimensions of `grid` will be in the range [1, 100]. - You cannot move through blocked cells and you must adhere to the movement constraints (right or down). If there is no valid path, return 0.","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right of the grid, avoiding obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) # Create a 2D dp array initialized with 0\'s dp = [[0] * n for _ in range(m)] # Starting point if there\'s no obstacle dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # No path through a blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"A container in a logistics company can carry goods in the shape of rectangular blocks. The container can carry n different rectangular blocks at a time. Each block is characterized by its length, width, and height. The container is divided into layers such that the thickness of each layer is the height of the blocks kept within that layer. Write a program to determine the minimum height of the container required to accommodate all n blocks such that blocks in each layer are arranged side by side (considering length and width) without overlapping. Input The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of blocks. Then n lines follow, each containing three space-separated integers l, w and h (1 ≤ l, w, h ≤ 10^6) representing the length, width, and height of each block respectively. Output Print a single integer which represents the minimum height required for the container to accommodate all n blocks. Example Input 3 4 2 2 3 1 1 2 3 2 Output 5 Explanation In the first example, the blocks can be layered as follows: - The first two blocks (4x2) and (3x1) can be arranged in the first layer with a height of 2. - The last block (2x3) occupies a separate second layer with a height of 3. Hence, the minimum required height of the container is the sum of the heights of all layers which is 2 + 3 = 5.","solution":"def min_container_height(n, blocks): Calculates the minimum height of a container needed to accommodate all n blocks in n different layers given the blocks\' dimensions. Parameters: n (int): Number of blocks. blocks (list of tuples): Each tuple consists of (l,w,h) representing the length, width, and height of the block. Returns: int: The minimum height of the container. # Sum of heights since each block forms a separate layer total_height = sum(block[2] for block in blocks) return total_height"},{"question":"You are given a grid of size m x n filled with non-negative numbers. Your task is to write a function that finds a path from the top-left corner to the bottom-right corner, which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Implement a function `minPathSum(grid)` that takes a 2D list `grid` representing the grid and returns the minimum sum of numbers along a valid path. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the sum. Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 Explanation: The path 1 → 2 → 3 → 6 minimizes the sum. Your Task: You don\'t need to read or print anything. Your task is to complete the function `minPathSum(grid)` which takes grid as input and returns an integer representing the minimum path sum from the top-left to the bottom-right corner of the grid. Expected Time Complexity: O(m * n) where m and n are the dimensions of the grid. Expected Space Complexity: O(1) (i.e., use the input grid for the DP solution). Constraints: - 1 <= m <= 100 - 1 <= n <= 100 - 0 <= grid[i][j] <= 100","solution":"def minPathSum(grid): Returns the minimum sum of numbers along a valid path from the top-left corner to the bottom-right corner of a grid, where you can only move down or right. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row for j in range(1, n): grid[0][j] += grid[0][j-1] # Initialize the first column for i in range(1, m): grid[i][0] += grid[i-1][0] # Fill the rest of the grid for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) return grid[m-1][n-1]"},{"question":"You are developing a logistics system for a warehouse to optimize the placement of goods. The warehouse is modeled as a grid of size `n x n`, where each cell can either be empty, have a shelf, or be blocked. The grid is represented by a 2D array of integers, where `0` represents an empty cell, `1` represents a cell with a shelf, and `-1` represents a blocked cell that cannot be accessed. To improve the logistics, you need to design an algorithm that finds the shortest path from the entrance of the warehouse (located at the top-left corner of the grid) to the exit (located at the bottom-right corner of the grid). The path can move up, down, left, or right, but cannot move through blocked cells or shelves. If there is no such path available, the algorithm should return -1. Given the grid, compute the shortest path length from the entrance to the exit. Input The input is given in the following format: ``` n grid[0][0] grid[0][1] ... grid[0][n-1] . . . grid[n-1][0] grid[n-1][1] ... grid[n-1][n-1] ``` `n`: an integer representing the size of the grid (2 ≤ n ≤ 2000) `grid[i][j]`: an integer where `0` represents an empty cell, `1` represents a cell with a shelf, and `-1` represents a blocked cell. Output Print a single line with the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, print `-1`. Example Input ``` 4 0 0 0 0 1 -1 -1 0 0 0 0 0 0 1 1 0 ``` Output ``` 6 ``` Explanation One of the shortest paths from the entrance (top-left corner) to the exit (bottom-right corner) with a length of 6 is: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) If there is no path from the entrance to the exit, the output will be `-1`.","solution":"from collections import deque def shortest_path(grid): n = len(grid) if grid[0][0] != 0 or grid[n-1][n-1] != 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n-1 and c == n-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # Example Usage: # grid = [ # [0, 0, 0, 0], # [1, -1, -1, 0], # [0, 0, 0, 0], # [0, 1, 1, 0] # ] # print(shortest_path(grid)) # Output: 6"},{"question":"In the famous TV show \\"How I Met Your Mother,\\" characters often engage in various bets and challenges. One such challenge involves Robin, who has an interesting way of speaking when she’s had too much coffee. She tends to repeat phrases or words—creating a mirrored sentence. Let’s define this behavior as Robin-speak. An instance of Robin-speak is a sentence where a non-empty substring appears at least twice in succession. For example, \\"hellohello\\", \\"hi hi hi\\", or \\"foo foo foo\\" are all valid examples of Robin-speak. We can generalize the concept as follows: a sentence is in Robin-speak if it consists of `k` consecutive repetitions of a non-empty substring where `k` is at least 2. -----Task----- Your task is to write a program that, given a string, determines the length of the largest substring that can be repeated successively to form the string. -----Input----- The input contains one line with a single string `S`. -----Constraints----- * `1 ≤ |S| ≤ 10^6` * The string `S` will contain only lowercase English letters (a-z). -----Output----- The output contains one line with a single integer: the length of the largest substring that can be repeated successively to form the input string `S`. -----Sample Output Explanation----- In the first sample, the entire string \\"abab\\" can be formed by repeating the substring \\"ab\\". Thus, the length of the largest repeating substring is 2. In the second sample, the entire string \\"aaaa\\" can be formed by repeating the substring \\"a\\". Thus, the length of the largest repeating substring is 1. -----Examples----- Sample Input: abab Sample Output: 2 Sample Input: aaaa Sample Output: 1","solution":"def largest_repeated_substring_length(s): Returns the length of the largest substring that can be repeated successively to form the input string `s`. n = len(s) for length in range(1, n//2+1): if n % length == 0: if s == s[:length] * (n // length): return length return n"},{"question":"You are a security consultant brought in by a large e-commerce company to help secure their transactions. One of the first tasks you have been assigned is to write an algorithm to detect fraudulent orders. You have access to the company\'s data, which consists of the following: - A list of `N` orders, where each order is identified by a unique `order_id`, and associated with a `user_id` and `amount`. - A list of `B` blacklisted users. Any orders placed by these users are considered fraudulent. An order is considered fraudulent if it meets any of the following criteria: 1. The `amount` exceeds a specified `threshold` value. 2. The `user_id` is in the list of blacklisted users. 3. Multiple orders have the same `order_id` (duplicate orders). Given the list of orders, the list of blacklisted users, and the threshold amount, you need to determine how many orders are fraudulent. --- Input --- The first line contains three integers `1 le N le 100000`, `1 le B le 1000`, and `1 le threshold le 10000`, representing the number of orders, the number of blacklisted users, and the threshold amount respectively. The next `B` lines each contain a single integer representing a `user_id`, the blacklisted user. The next `N` lines each contain three integers `order_id`, `user_id`, and `amount`, describing the details of each order. --- Output --- Output a single integer, the number of fraudulent orders. --- Examples --- Sample Input: 5 2 100 1 101 150 2 102 90 3 103 50 4 104 80 2 102 200 Sample Output: 2","solution":"def detect_fraudulent_orders(N, B, threshold, blacklisted_users, orders): blacklisted_set = set(blacklisted_users) order_ids = set() fraud_count = 0 seen_order_ids = set() for order_id, user_id, amount in orders: if order_id in seen_order_ids: fraud_count += 1 elif amount > threshold: fraud_count += 1 elif user_id in blacklisted_set: fraud_count += 1 seen_order_ids.add(order_id) return fraud_count"},{"question":"You are given an array of integers and a target sum. Your task is to find all unique pairs in the array that add up to the target sum. A pair (a, b) is considered unique if there is no other pair (b, a) in the result, irrespective of the position in the array. Output the pairs in the form of a list of tuples. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case consists of two lines. - The first line contains two integers N and S, where N is the number of elements in the array, and S is the target sum. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output a list of tuples where each tuple contains two integers that add up to the target sum. The elements in each tuple should be in ascending order, and the list of tuples should also be sorted in ascending order based on the first and then second element of the tuple. If no such pair exists, output an empty list. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^3 -10^6 ≤ text{array elements} ≤ 10^6 -10^6 ≤ S ≤ 10^6 ------ Sample Input 1 ------ 2 5 7 1 2 3 4 5 4 6 3 3 3 3 ------ Sample Output 1 ------ [(2, 5), (3, 4)] [(3, 3)] ------ Explanation 1 ------ Test Case 1: The pairs that add up to 7 are (2, 5) and (3, 4). Sorting these pairs, we get [(2, 5), (3, 4)]. Test Case 2: The only pair where elements add up to 6 is (3, 3). Since the array consists of identical elements repeated, we only have one unique pair.","solution":"def find_pairs_with_target_sum(test_cases): def find_pairs(arr, target): seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return sorted(pairs) results = [] for case in test_cases: N, S = case[0] array = case[1] results.append(find_pairs(array, S)) return results"},{"question":"Consider an n times n chessboard with some of its cells containing obstacles. The goal is to find the number of distinct paths from the top-left corner (cell (1,1)) to the bottom-right corner (cell (n,n)) such that a move is only allowed to adjacent cells (right or down), and you cannot move onto or through cells that contain obstacles. Write a function `count_paths(n, obstacles)` that returns the number of distinct paths from the start to the destination. If it\'s impossible to reach the destination, return 0. The input parameters to the function are as follows: - `n` (1 ≤ n ≤ 1000): an integer representing the size of the chessboard. - `obstacles`: a list of tuples where each tuple represents the coordinates (row, column) of an obstacle. Each coordinate is 1-indexed. # Example Input ```python n = 3 obstacles = [(2, 2)] ``` Output ```python 2 ``` Input ```python n = 3 obstacles = [(1, 2), (2, 1)] ``` Output ```python 0 ``` # Explanation In the first example, the 3x3 chessboard has one obstacle at cell (2,2). The distinct paths available from the top-left corner to the bottom-right corner are: 1. Right → Right → Down → Down 2. Down → Down → Right → Right In the second example, both right and down moves from the starting cell (1,1) are blocked by obstacles at cells (1,2) and (2,1), making it impossible to reach the destination.","solution":"def count_paths(n, obstacles): Returns the number of distinct paths from the top-left corner to the bottom-right corner of an n x n chessboard. :param n: Size of the chessboard (n x n) :param obstacles: List of tuples where each tuple represents an obstacle\'s (row, column) coordinates. Each coordinate is 1-indexed. :return: Number of distinct paths from (1,1) to (n,n) # Initialize the board with 0 dp = [[0] * n for _ in range(n)] # Initialize the obstacles obstacle_set = set(obstacles) # Set the starting point if it\'s not an obstacle if (1, 1) in obstacle_set: return 0 dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(n): if (i + 1, j + 1) in obstacle_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"Write a function that takes a string of lowercase letters and returns the number of substrings that are palindromes. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). INPUT: The input is a single string consisting of lowercase letters. OUTPUT: The output is an integer, representing the number of palindrome substrings. CONSTRAINTS: The length of the string is between 1 and 1000. SAMPLE INPUT \\"ababa\\" SAMPLE OUTPUT 9 EXPLANATION: The palindrome substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\", \\"aba\\", \\"bab\\", \\"aba\\", \\"ababa\\".","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the input string. def is_palindrome(sub_str): return sub_str == sub_str[::-1] n = len(s) count = 0 for i in range(n): for j in range(i, n): if is_palindrome(s[i:j+1]): count += 1 return count"},{"question":"Mila has a collection of beads that she uses to create beautiful jewelry. She wants to use her beads to make the most intricate necklace possible. The necklace will consist of beads of different colors arranged in a line. Mila has n different colors of beads, each color i has ai beads available. She wants to create a necklace of length k. However, she wants the necklace to be as colorful as possible, meaning she wants to maximize the number of distinct colors used in the necklace. Mila can use up to bi beads of each color i in the necklace. If there are insufficient beads to use the maximum allowed number of beads of a color, she uses all the available beads of that color. Determine the maximum number of distinct colors she can use to create a necklace of length k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6), the number of colors of beads and the desired length of the necklace, respectively. The next n lines describe the beads. Specifically: - The i-th line contains two integers ai and bi (1 ≤ ai ≤ 10^6, 1 ≤ bi ≤ 10^6), where ai is the number of beads available of the i-th color and bi is the maximum number of beads of color i that can be used in the necklace. Output Output a single integer on a line by itself, the maximum number of distinct colors that can be used to create a necklace of length k. Examples Input 5 8 3 2 4 3 5 5 2 2 6 1 Output 4 Input 3 9 3 2 4 1 2 2 Output 3 Note In the first test case, Mila can create a necklace of length 8 using beads from 4 distinct colors: - Use 2 beads of the first color. - Use 3 beads of the second color. - Use 2 beads of the third color. - Use 1 bead of the fifth color. This uses beads from 4 different colors and results in a necklace of length 8. In the second test case, Mila can create a necklace of length 5 using all available beads: - Use 2 beads of the first color. - Use 1 bead of the second color. - Use 2 beads of the third color. This uses beads from 3 different colors and results in a necklace of length 5.","solution":"def max_distinct_colors(n, k, beads): # Sort beads based on the minimum of the available beads and the allowed beads beads = sorted(beads, key=lambda x: min(x[0], x[1])) # Initialize variables to track the number of colors used and the total length colors_used = 0 total_length = 0 # Iterate through each color to try to add it to the necklace for available, max_allowed in beads: used_beads = min(available, max_allowed) if total_length + used_beads <= k: total_length += used_beads colors_used += 1 else: break return colors_used"},{"question":"You have been given a large text document and need to count the frequency of each word in the document. Your task is to write a function that takes a string as input and returns a dictionary where the keys are words and the values are the number of times each word appears in the input string. Note: - The words should be case insensitive. - Ignore all punctuation and special characters. - Consider words to be separated by whitespace (i.e., spaces, tabs, newlines). -----Input----- A single string representing the entire text document. -----Output----- A dictionary where each key is a word (in lowercase) and the corresponding value is its frequency in the input string. -----Examples----- Input \\"Hello, hello! How are you? Are you fine? Hello?\\" Output {\\"hello\\": 3, \\"how\\": 1, \\"are\\": 2, \\"you\\": 2, \\"fine\\": 1} Input \\"Testing the function. Function testing, function. Testing!\\" Output {\\"testing\\": 3, \\"the\\": 1, \\"function\\": 3}","solution":"import re from collections import defaultdict def word_frequency(text): Returns a dictionary with the frequency of each word in the input text. Args: text (str): The input text document as a string. Returns: dict: A dictionary where keys are words and values are their frequencies. # Use regular expression to remove punctuation and special characters and # convert to lowercase words = re.findall(r\'bw+b\', text.lower()) # Use a defaultdict to store word frequencies frequency = defaultdict(int) for word in words: frequency[word] += 1 return dict(frequency)"},{"question":"You\'re given a binary matrix of dimensions m times n where each cell contains either a 0 or a 1. Your task is to find the largest contiguous submatrix that contains only 1s and return its area. -----Input----- The first line contains two integers m and n (1 le m, n le 200) representing the dimensions of the matrix. Each of the next m lines contains n integers representing the elements of the matrix. An element can be either 0 or 1. -----Output----- Print a single integer representing the area of the largest contiguous submatrix consisting entirely of 1s. -----Example----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 -----Note----- In the given example, the largest contiguous submatrix with all 1s has an area of 6, formed by the submatrix from row 2 to row 3, and columns 3 to 5.","solution":"def maximalRectangle(matrix): if not matrix: return 0 def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) # Add a sentinel value to pop all elements from the stack at the end. for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() # Remove the sentinel value. return max_area rows = len(matrix) cols = len(matrix[0]) max_area = 0 heights = [0] * cols for i in range(rows): for j in range(cols): if matrix[i][j] == 0: heights[j] = 0 else: heights[j] += matrix[i][j] max_area = max(max_area, largestRectangleArea(heights)) return max_area"},{"question":"Read problems statements in Mandarin Chinese and Russian Given a binary string B, you should determine the minimum number of changes required to make every character in B different from its immediate neighbor. A change consists of flipping a \'1\' to a \'0\' or a \'0\' to a \'1\'. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each of the next T lines contains the binary string B. ------ Output ------ For each test case, output a single integer which represents the minimum number of changes required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |B| ≤ 10^6 It is guaranteed that the sum of the lengths of all binary strings in one test does not exceed 10^6. ----- Sample Input 1 ------ 2 010101 100101 ----- Sample Output 1 ------ 0 2 ----- Explanation 1 ------ Example case 1: The string \\"010101\\" does not require any changes, as all characters alternate already. Example case 2: The string \\"100101\\" requires two changes to make every character different from its immediate neighbor, e.g., changing to \\"101010\\" or \\"010010\\".","solution":"def min_changes_to_alternate(binary_string): Returns the minimum number of changes required to make every character in the binary string different from its immediate neighbor. n = len(binary_string) # Calculate changes for pattern starting with \'0\' (i.e., \\"010101...\\") changes_start_with_0 = 0 for i in range(n): if i % 2 == 0 and binary_string[i] != \'0\': changes_start_with_0 += 1 elif i % 2 == 1 and binary_string[i] != \'1\': changes_start_with_0 += 1 # Calculate changes for pattern starting with \'1\' (i.e., \\"101010...\\") changes_start_with_1 = 0 for i in range(n): if i % 2 == 0 and binary_string[i] != \'1\': changes_start_with_1 += 1 elif i % 2 == 1 and binary_string[i] != \'0\': changes_start_with_1 += 1 return min(changes_start_with_0, changes_start_with_1) def process_test_cases(test_cases): Process multiple test cases and return a list of results for each binary string. results = [] for binary_string in test_cases: results.append(min_changes_to_alternate(binary_string)) return results"},{"question":"A special kind of data compression technique called run-length encoding (RLE) is used to encode runs of repeated characters. Given a string, this technique compresses the string by replacing sequences of the same character with a single character followed by the number of repetitions. For example, the string \\"aaabbbbcc\\" would become \\"a3b4c2\\". Write a function `rle_encode` that takes a single string as input and returns its run-length encoded form. # Function Signature ```python def rle_encode(input_string: str) -> str: pass ``` # Input - A single string `input_string` with length (1 leq |input_string| leq 10^5) consisting of lowercase letters. # Output - A single string representing the run-length encoded form of the input string. # Example ```python # Example 1 input_string = \\"aaabbbbcc\\" rle_encode(input_string) # returns \\"a3b4c2\\" # Example 2 input_string = \\"abcd\\" rle_encode(input_string) # returns \\"a1b1c1d1\\" # Example 3 input_string = \\"aabbcc\\" rle_encode(input_string) # returns \\"a2b2c2\\" ``` # Explanation In Example 1, the input \\"aaabbbbcc\\" is compressed to \\"a3b4c2\\" by grouping and counting the characters \'a\', \'b\', and \'c\'. In Example 2, the input \\"abcd\\" contains no repeating characters, so each character is followed by \'1\', resulting in \\"a1b1c1d1\\". In Example 3, the input \\"aabbcc\\" results in \\"a2b2c2\\" by counting each pair of repeating characters.","solution":"def rle_encode(input_string: str) -> str: Returns the run-length encoded form of the input string. :param input_string: String consisting of lowercase letters :return: Run-length encoded string if not input_string: return \\"\\" encoded = [] count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: encoded.append(f\\"{prev_char}{count}\\") prev_char = char count = 1 # Append the last set of characters encoded.append(f\\"{prev_char}{count}\\") return \'\'.join(encoded)"},{"question":"You are given an array of integers where each element represents the amount of money in a house. There are `N` houses in a line and you need to maximize the amount of money you can steal tonight. But remember, you cannot steal from two adjacent houses, as it will alert the police. Write a function `maxMoney(array, N)` that takes in the array of integers and its length, and returns the maximum amount of money you can steal without alerting the police. Example 1: Input: array = [6, 7, 1, 30, 8, 2, 4], N = 7 Output: 41 Explanation: Steal from house 1 (6), house 4 (30) and house 6 (2). 6 + 30 + 2 = 38 Example 2: Input: array = [5, 3, 4, 11, 2], N = 5 Output: 16 Explanation: Steal from house 1 (5) and house 4 (11). 5 + 11 = 16 Your Task: You don\'t need to read input or print anything. Complete the function `maxMoney()`, which takes in the array and its length and returns the maximum money that can be stolen from the houses without alerting the police. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ array[i] ≤ 10^4","solution":"def maxMoney(array, N): if N == 0: return 0 if N == 1: return array[0] prev1 = max(array[0], array[1]) prev2 = array[0] for i in range(2, N): current = max(prev1, prev2 + array[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"A gardener named Alex wants to design a new flower garden bed to maximize the visibility of his flowers. The garden bed will be designed as a rectangular grid of cells where each cell can either contain a flower or be empty. The flowers are placed such that they are the vertices of a regular polygon with the maximum possible number of sides that can fit entirely within the grid. Alex needs your help to find out the maximum number of sides of such a polygon and the number of flowers required to form it. Given the dimensions of the rectangular grid, determine the highest number of sides that can form a regular polygon entirely within the grid and the number of flowers (vertices) needed. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the rectangular grid. Output Print two integers: the maximum number of sides of a regular polygon that can fit entirely within the grid and the number of flowers required. If no such polygon can be formed, output 0 0. Examples Input 5 5 Output 4 4 Input 3 3 Output 4 4 Input 2 2 Output 0 0","solution":"def max_polygon_sides(n, m): This function returns the maximum number of sides of a regular polygon that can fit entirely within a grid of dimensions n x m and the number of vertices required. if n < 2 or m < 2: return 0, 0 # The largest regular polygon that can fit in a 2x2 grid or larger is a square (4 sides) return 4, 4"},{"question":"There is a game where you need to transform one string to another using a series of operations. Each operation consists of picking a contiguous substring of the current string and reversing it. Your task is to determine the minimum number of operations needed to transform the given string s into t. Input The first line contains T, the number of test cases. The description of T test cases follows. Each test case contains 2 lines. The first line contains the string s. The second line contains the string t. Output For each test case, output a single line containing the minimum number of operations needed. Constraints 1 ≤ T ≤ 10 1 ≤ |s|, |t| ≤ 1000 s and t contain only lowercase English letters. It is guaranteed that t can be obtained from s using the described operations. SAMPLE INPUT 2 abc cba axb xba SAMPLE OUTPUT 1 2","solution":"def min_operations_to_transform(s, t): Returns the minimum number of operations needed to transform string s into string t by reversing substrings. new_s = list(s) count = 0 n = len(s) i = 0 while i < n: if new_s[i] != t[i]: j = i while j < n and new_s[j] != t[i]: j += 1 new_s[i:j+1] = reversed(new_s[i:j+1]) count += 1 i += 1 return count def process_test_cases(T, cases): results = [] for s, t in cases: results.append(min_operations_to_transform(s, t)) return results"},{"question":"Amy has a unique way of arranging her bookshelf. She wants all the books on her shelf to initially be organized in non-decreasing order of their heights but over time, people have borrowed and returned books so the shelf now contains some books out of this order. Amy can choose exactly one contiguous subarray of books and reverse it to try to restore the non-decreasing order of the entire bookshelf. Given the height of books on the shelf as an array of positive integers, determine if it is possible to sort the entire bookshelf in non-decreasing order by reversing exactly one contiguous subarray of it. -----Input----- The first line contains a single integer T, the number of test cases. The next T lines each contain an integer N, the number of books on the shelf, followed by N space-separated integers indicating the heights of the books on the shelf. -----Output----- For each test case, output \\"YES\\" (without quotes) if it is possible to sort the entire bookshelf by reversing exactly one contiguous subarray; otherwise, output \\"NO\\". -----Example----- Input: 3 5 1 2 3 4 5 5 3 2 1 4 5 5 1 5 3 4 2 Output: YES YES NO -----Constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 10000 1 ≤ height of any book ≤ 100000","solution":"def can_sort_by_reversing_subarray(arr): n = len(arr) # Find the start of the subarray to reverse i = 0 while i < n - 1 and arr[i] <= arr[i + 1]: i += 1 if i == n - 1: # If already sorted return True # Find the end of the subarray to reverse j = n - 1 while j > 0 and arr[j] >= arr[j - 1]: j -= 1 # Reverse the subarray arr[i:j+1] and check if the array is sorted arr[i:j+1] = reversed(arr[i:j+1]) return arr == sorted(arr) def solve(test_cases): results = [] for case in test_cases: if can_sort_by_reversing_subarray(case): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Chefland has N cities connected by N-1 bi-directional roads such that there is exactly one path between any two cities. The i-th road connects cities U_{i} and V_{i}. Each city has a Beauty Score associated with it. Chef wants to travel and enjoy the beauty of the land. He can choose any two cities A and B and travel along the unique path between them. During this travel from A to B, the *enjoyment* is the sum of beauty scores of all cities on this path, including A and B. Your task is to answer Q queries. In each query, Chef gives you two integers A and B and you should find the total enjoyment he can get by travelling from city A to city B. ------ Input ------ The first line contains two space-separated integers N and Q. The second line contains N space-separated integers B_{1}, B_{2}, ldots, B_{N}, where B_{i} is the Beauty Score of the i-th city. Each of the next N-1 lines contains two space-separated integers U_{i} and V_{i}, indicating that there is a road between these two cities. Each of the next Q lines contains two space-separated integers A and B describing a query. ------ Output ------ For each query, print a single line containing one integer — the total enjoyment Chef can get. ------ Constraints ------ 2 ≤ N, Q ≤ 10^{5} 1 ≤ B_{i} ≤ 100 1 ≤ U_{i}, V_{i}, A, B ≤ N ------ Subtasks ------ Subtask #1 (15 points): N ≤ 1,000 Subtask #2 (85 points): original constraints ------ Example Input 1 ------ 5 3 2 3 1 4 6 1 2 2 3 3 4 4 5 1 5 3 5 2 4 ------ Example Output 1 ------ 16 11 8 ------ Explanation ------ In the first query, the path from city 1 to city 5 includes cities with beauty scores 2, 3, 1, 4, 6. Total enjoyment is 2+3+1+4+6 = 16. In the second query, the path from city 3 to city 5 includes cities with beauty scores 1, 4, 6. Total enjoyment is 1+4+6 = 11. In the third query, the path from city 2 to city 4 includes cities with beauty scores 3, 1, 4. Total enjoyment is 3+1+4 = 8.","solution":"from collections import defaultdict, deque def calculate_enjoyments(n, q, beauty_scores, roads, queries): # Create adjacency list for the given roads graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) # Prepare a parents and depths array to help find LCA parents = [0] * (n + 1) depth = [0] * (n + 1) subtree_sum = [0] * (n + 1) def bfs(start): queue = deque([start]) visited = {start} parents[start] = -1 depth[start] = 0 subtree_sum[start] = beauty_scores[start - 1] while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) parents[neighbor] = node depth[neighbor] = depth[node] + 1 subtree_sum[neighbor] = subtree_sum[node] + beauty_scores[neighbor - 1] # Perform BFS from node 1 bfs(1) def lca(a, b): if depth[a] < depth[b]: a, b = b, a while depth[a] > depth[b]: a = parents[a] while a != b: a = parents[a] b = parents[b] return a results = [] for a, b in queries: common_ancestor = lca(a, b) enjoyment = subtree_sum[a] + subtree_sum[b] - 2 * subtree_sum[common_ancestor] + beauty_scores[common_ancestor - 1] results.append(enjoyment) return results"},{"question":"You are given a list of integers that represents a sequence of student scores in a test. Your task is to write a function that determines the minimum number of steps required to make all elements in the list equal. In each step, you can increment or decrement any element of the list by 1. Return the minimum number of steps required. Example 1: Input: scores = [1, 2, 3] Output: 2 Explanation: We can make all elements equal to 2 in 2 steps: increment 1 by 1 (1->2) and decrement 3 by 1 (3->2). Example 2: Input: scores = [10, 20, 30] Output: 20 Explanation: We can make all elements equal to 20 in 20 steps: increment 10 by 10 (10->20) and decrement 30 by 10 (30->20). Your Task: You don\'t need to take input or print anything. Your task is to complete the function minSteps() which takes a list of integers `scores` and returns the minimum number of steps required to make all elements equal. Constraint: 1 <= len(scores) <= 10^5 0 <= scores[i] <= 10^6","solution":"def minSteps(scores): Returns the minimum number of steps required to make all elements in the scores list equal. if not scores: return 0 n = len(scores) scores.sort() median = scores[n // 2] steps = sum(abs(score - median) for score in scores) return steps"},{"question":"Given the value of n, print the sum of the first n Fibonacci numbers. Input: A single integer n. Output: A single number which is the sum of the first n Fibonacci numbers. Constraints: 1 ≤ n ≤ 50 SAMPLE INPUT 5 SAMPLE OUTPUT 12 Explanation The first few Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, ... The sum of the first 5 Fibonacci numbers (0, 1, 1, 2, 3) is 12.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers. if n == 1: return 0 a, b = 0, 1 sum_fib = a + b for _ in range(n - 2): a, b = b, a + b sum_fib += b return sum_fib"},{"question":"You need to write a function that calculates the weighted average of a list of tuples. Each tuple in the list contains two values: a number and its corresponding weight. The weighted average is calculated by summing the products of each number and its weight, and then dividing by the sum of the weights. Example: weighted_average([(3, 1), (5, 2), (10, 5)]) The weighted average is calculated as: (3 * 1 + 5 * 2 + 10 * 5) / (1 + 2 + 5) = (3 + 10 + 50) / 8 = 63 / 8 = 7.875 Your task is to write a function `weighted_average(data)` that returns the weighted average of the given list of tuples. The input list will always contain at least one tuple, and the weights will always be positive. **Input:** - A list of tuples. Each tuple consists of two non-negative numbers. **Output:** - A non-negative floating-point number representing the weighted average. Complete the function `weighted_average(data)`.","solution":"def weighted_average(data): Calculate the weighted average of a list of tuples. :param data: List of tuples, where each tuple contains (number, weight). :return: Weighted average as a float. total_weight = sum(weight for value, weight in data) weighted_sum = sum(value * weight for value, weight in data) if total_weight == 0: return 0 # To handle edge cases where total weight might be 0 return weighted_sum / total_weight"},{"question":"In a hypothetical galaxy where every planet’s surface temperature must be monitored, your task as a software developer is to design a function that ensures these readings are categorized correctly. Given a string `temperature` that represents a planet’s surface temperature reading in degrees Celsius, return \'Extreme Heat Alert!\' if the temperature is greater than or equal to `500` degrees, and return \'Normal Temperature: x degrees\' if the temperature is less than `500` degrees. The input `temperature` will be always be a string that can represent a signed or unsigned integer. Assume valid string inputs, such as \\"-10\\", \\"499\\", \\"500\\", \\"1000\\", etc. # Example: ``` temperature_alert(\\"499\\") ➞ \'Normal Temperature: 499 degrees\' temperature_alert(\\"500\\") ➞ \'Extreme Heat Alert!\' temperature_alert(\\"-10\\") ➞ \'Normal Temperature: -10 degrees\' ``` # Constraints: - The input string will always be a valid integer representation and will not be empty. - The returned message should strictly follow the format indicated. - Handle both positive and negative temperatures correctly.","solution":"def temperature_alert(temperature): Given a string \'temperature\' representing a planet\'s surface temperature in degrees Celsius, returns \'Extreme Heat Alert!\' if the temperature is >= 500 degrees, otherwise returns \'Normal Temperature: x degrees\' where x is the temperature. temp = int(temperature) if temp >= 500: return \'Extreme Heat Alert!\' else: return f\'Normal Temperature: {temp} degrees\'"},{"question":"A delivery company is planning to optimize its routes for package delivery. Each package has a specific delivery location represented by an integer house number on a straight street. The company wants to ensure that the delivery driver makes as few road detours as possible. You are given a sequence of n houses that must be visited. The delivery driver should start from the house with the smallest number and deliver packages to houses in ascending order of their numbers. In each move, the driver can only move to the next house in the sequence. If the driver is at house i, they can either move to house i+1 without cost or skip to any house further down the sequence at a fixed cost of k for each skipped house. The objective is to find the minimum total cost for the driver to deliver all packages in the given sequence order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of houses. The second line contains n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 10^9) representing the house numbers in the order they should be visited. The last line contains a single integer k (1 ≤ k ≤ 10^5) representing the cost for each house skipped. -----Output----- In a single line, print the minimum total cost for the delivery driver to visit all the houses in the given order. -----Examples----- Input 5 1 3 7 8 12 2 Output 6 Input 4 5 6 7 8 3 Output 0 -----Note----- In the first example, the optimal path is to skip from house 1 to house 3 (cost 2), then move to house 7 (cost 2) and to house 8 (cost 2) without skipping to minimize the total cost, resulting in a total cost of 6. In the second example, since the house numbers are consecutive, the total cost remains 0.","solution":"def min_delivery_cost(n, houses, k): Returns the minimum total cost to deliver all packages in the given order. Args: n (int): The number of houses. houses (list): A list of integers representing house numbers. k (int): The cost for each house skipped. Returns: int: The minimum total cost. cost = 0 for i in range(1, n): if houses[i] == houses[i-1] + 1: continue else: cost += k return cost"},{"question":"-----Problem Description----- You are given an array of integers where every element appears twice except for one. Find that single one. -----Constraints----- - The array contains at least 3 elements. - Each element in the array can be an integer between -100 and 100. - The array length will always be an odd number. -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an -----Output----- Print the single integer that appears only once in the array. -----Sample Input----- 5 4 1 2 1 2 -----Sample Output----- 4 Explanation: In the given array, except for \'4\' all other numbers appear twice.","solution":"def find_single_number(nums): Finds the single number in a list where every element appears twice except for one. Args: nums (list of int): List of integers. Returns: int: The single number which appears only once. # XOR all the elements. The ones appearing twice will cancel out. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"Given a binary string S of length N, you can perform the following operations: Convert exactly one contiguous sub-segment of the string (consisting of one or more characters) from \'0\' to \'1\'. Find the length of the longest contiguous segment of \'1\'s that can be achieved by performing exactly one such operation. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, the length of the binary string S. - The next line contains a binary string S of length N. ------ Output Format ------ For each test case, output a single integer indicating the length of the longest contiguous segment of \'1\'s that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 S_i ∈ {\'0\', \'1\'} ----- Sample Input 1 ------ 3 3 101 5 11010 6 000000 ----- Sample Output 1 ------ 3 4 1 ----- Explanation 1 ------ Test case 1: - Convert the \'0\' to \'1\' in the middle to get \\"111\\". The longest segment of \'1\'s is of length 3. Test case 2: - Convert the \'0\' in the middle to \'1\' to get \\"11110\\". The longest segment of \'1\'s is of length 4. Test case 3: - Convert any one \'0\' to \'1\' to get a string with one \'1\'. The longest segment of \'1\'s is of length 1.","solution":"def longest_ones_after_conversion(N, S): Returns the length of the longest contiguous segment of \'1\'s that can be achieved by converting a contiguous segment of \'0\'s to \'1\'s. if \'0\' not in S: return N # If no \'0\' is found, the entire string is already the longest segment of \'1\'s max_len = 0 current_ones = 0 previous_ones = 0 encountered_zero = False for i in range(N): if S[i] == \'1\': current_ones += 1 else: if encountered_zero: max_len = max(max_len, previous_ones + 1 + current_ones) previous_ones = current_ones else: previous_ones = current_ones encountered_zero = True current_ones = 0 max_len = max(max_len, previous_ones + 1 + current_ones) return max_len def execute_test_cases(T, cases): Process T test cases and for each one return the length of the longest contiguous segment of \'1\'s after conversion. results = [] for i in range(T): N, S = cases[i] result = longest_ones_after_conversion(N, S) results.append(result) return results"},{"question":"story Sarah works as a software engineer at Metropolis Ltd. Recently, she received an urgent request from a client concerning the tracking system they developed. The client reports that certain logs from their system are missing, and it is critical to restore the sequence to ensure accurate tracking of their inventory. They expect Sarah to assess the logs and identify any missing or corrupted entries. The client provided a fixed pattern indicating how the logs should be structured. Typically, each log entry is an integer representing a unique identifier, and these identifiers should follow a strict sequence. Sarah\'s task is to write a program that, given an initial sequence of logs and a series of operations, will restore or verify the sequence structure. Each operation can specify a position to be checked or corrected within the sequence and provide the expected value for that position. problem You are provided with an integer sequence of length N, followed by M operations on the sequence. Each operation can either query if a certain position matches the expected value or update the sequence at a specified position with a new value. Given the initial sequence and the list of operations, implement a solution to perform these operations and return the results for each query. Input format The input consists of the following format. N l_1 l_2 ... l_N M operation_1 operation_2 ... operation_M The first line contains one integer N (1 ≤ N ≤ 50,000) representing the length of the sequence. The second line contains N integers representing the initial sequence L. Each integer l_i satisfies 1 ≤ l_i ≤ 100,000. The third line contains one integer M (1 ≤ M ≤ 50,000) representing the number of operations. The following M lines each describe an operation, which is either a query or an update operation. - For a query operation, the format is \\"Q p_i v_i\\", which asks if the element at position p_i in the sequence is equal to v_i. - For an update operation, the format is \\"U p_i v_i\\", which updates the sequence at position p_i to the value v_i. Output format For each query operation, output \\"YES\\" if the element at position p_i matches v_i, and \\"NO\\" otherwise. Input example 5 3 8 12 6 7 4 Q 2 8 Q 4 10 U 4 10 Q 4 10 Output example YES NO YES","solution":"def process_logs(N, sequence, M, operations): Processes a list of operations on a given sequence and returns the results for each query. Parameters: N (int): Length of the initial sequence sequence (list of int): Initial sequence of integers M (int): Number of operations to be performed operations (list of str): List of operations Returns: list of str: Results of each query operation results = [] for operation in operations: op = operation.split() if op[0] == \\"Q\\": p_i = int(op[1]) v_i = int(op[2]) if sequence[p_i - 1] == v_i: results.append(\\"YES\\") else: results.append(\\"NO\\") elif op[0] == \\"U\\": p_i = int(op[1]) v_i = int(op[2]) sequence[p_i - 1] = v_i return results"},{"question":"You are given a 2D matrix consisting of integers, where each row is sorted in ascending order from left to right. Write a function that returns the smallest common element in all rows. If there is no common element, return -1. Example 1: Input: matrix = [ [1, 2, 3, 4, 5], [2, 4, 5, 8, 10], [3, 5, 7, 9, 11], [1, 3, 5, 7, 12] ] Output: 5 Example 2: Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: -1 Note: - The number of rows and the number of columns in the matrix will not exceed 50. - The integers in the matrix will be in the range from 1 to 10000.","solution":"def smallest_common_element(matrix): Returns the smallest common element in all rows of the matrix. If there is no common element, returns -1. if not matrix or not matrix[0]: return -1 row_count = len(matrix) col_count = len(matrix[0]) # Create a count dictionary to track occurrences of elements count_dict = {} for r in range(row_count): for c in range(col_count): # Only count the first occurrence of an element in each row if c == 0 or matrix[r][c] != matrix[r][c - 1]: if matrix[r][c] in count_dict: count_dict[matrix[r][c]] += 1 else: count_dict[matrix[r][c]] = 1 # Check for the smallest element that appears in all rows for key in sorted(count_dict): if count_dict[key] == row_count: return key return -1"},{"question":"A delivery company is organizing a new route to deliver parcels more efficiently. The logistics team has the task of determining the shortest possible delivery path that visits each delivery location once and returns to the starting point. The delivery routes can be represented as an undirected graph where each node is a delivery location and each edge is the distance between two locations. The goal is to find the minimum sum of distances of a round trip route. This is a classic Traveling Salesman Problem (TSP). Input - The first line contains a single integer n (2 ≤ n ≤ 15) — the number of delivery locations. - The following n lines contain n integers each — the adjacency matrix of the distances between the locations, where the j-th integer in the i-th row is the distance from the i-th location to the j-th location. The distance from a location to itself is always zero and all distances are symmetric (distance from location i to location j is the same as from location j to location i). Output - Print a single integer — the minimum sum of distances of the round trip route. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 5 9 5 0 7 9 7 0 Output 21 Note In the first example, one of the optimal paths is 1 → 2 → 4 → 3 → 1 with a total distance of 80. In the second example, the only possible route is 1 → 2 → 3 → 1, yielding a total distance of 21.","solution":"from itertools import permutations def find_min_tsp_cost(n, distance_matrix): min_cost = float(\'inf\') locations = list(range(n)) for perm in permutations(locations[1:]): current_path = [0] + list(perm) + [0] current_cost = 0 for i in range(len(current_path) - 1): current_cost += distance_matrix[current_path[i]][current_path[i + 1]] min_cost = min(min_cost, current_cost) return min_cost def tsp_solver(input_data): lines = input_data.split(\\"n\\") n = int(lines[0]) distance_matrix = [list(map(int, line.split())) for line in lines[1:n+1]] return find_min_tsp_cost(n, distance_matrix)"},{"question":"Given a string of words, find the lengths of all words in the string and return a list containing these lengths in the same order. If the string is empty, return an empty list. Example ```python word_lengths(\\"Hello world this is a test\\") ``` Should return `[5, 5, 4, 2, 1, 4]` Another example: ```python word_lengths(\\"Coding is fun\\") ``` Should return `[6, 2, 3]`","solution":"def word_lengths(s): Returns a list containing the lengths of all words in the string s. If the string is empty, returns an empty list. if not s: return [] words = s.split() return [len(word) for word in words]"},{"question":"Create a function that takes an integer `N` as input and returns a boolean indicating whether `N` is a prime number. Example 1: Input: N = 7 Output: True Explanation: 7 is a prime number since it is greater than 1 and has no divisors other than 1 and itself. Example 2: Input: N = 10 Output: False Explanation: 10 is not a prime number since it has divisors other than 1 and itself (specifically 2 and 5). Your Task: You don\'t need to read input. Your task is to complete the function is_prime() which takes an integer N as input and returns a boolean. The function should return `True` if `N` is a prime number and `False` otherwise. Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{6}","solution":"import math def is_prime(N): Returns True if N is a prime number, otherwise returns False. if N <= 1: return False if N <= 3: return True if N % 2 == 0 or N % 3 == 0: return False i = 5 while i * i <= N: if N % i == 0 or N % (i + 2) == 0: return False i += 6 return True"},{"question":"Given a list of integers, the task is to determine the number of distinct elements in the list after removing all occurrences of the smallest and the largest element. Example 1: Input: arr = [1, 2, 3, 4, 5] Output: 3 Explanation: After removing the smallest element (1) and the largest element (5), the remaining elements are [2, 3, 4], which are all distinct. Example 2: Input: arr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] Output: 5 Explanation: After removing all occurrences of the smallest element (1) and the largest element (5), the remaining elements are [2, 2, 3, 3, 4, 4]. There are 3 distinct elements: 2, 3, and 4. User Task: Your task is to complete the function countDistinctElements() which takes a list of integers as input and returns the number of distinct elements after removing all occurrences of the smallest and largest element. You do not need to take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= arr.length <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def countDistinctElements(arr): This function takes a list of integers and returns the number of distinct elements after removing all occurrences of the smallest and largest elements. if not arr: return 0 min_val = min(arr) max_val = max(arr) filtered_elements = [x for x in arr if x != min_val and x != max_val] return len(set(filtered_elements))"},{"question":"Given two integers N and M, the task is to find the smallest M-digit number such that the sum of its digits is N. If no such number exists, return -1. Example 1: Input: N = 9, M = 2 Output: 18 Explanation: 18 is the smallest 2-digit number which has digits summing up to 9. Example 2: Input: N = 4, M = 3 Output: 103 Explanation: 103 is the smallest 3-digit number which has digits summing up to 4. Example 3: Input: N = 26, M = 2 Output: -1 Explanation: There is no 2-digit number whose digits sum up to 26. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestMDigitNum() which takes 2 Integers N and M as input and returns the answer. Expected Time Complexity: O(M) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 200 1 <= M <= 18","solution":"def smallestMDigitNum(N, M): Function to find the smallest M-digit number such that the sum of its digits is N. # The maximum possible sum of digits for an M-digit number is 9 * M if N > 9 * M: return -1 result = [0] * M for i in range(M-1, -1, -1): if N > 9: result[i] = 9 N -= 9 else: result[i] = N N = 0 # Edge case for numbers starting with zero if result[0] == 0: for i in range(1, M): if result[i] > 0: result[i] -= 1 result[0] = 1 break return int(\\"\\".join(map(str, result)))"},{"question":"**Longest Zigzag Subsequence** Alice is fascinated by zigzag sequences. A zigzag sequence is defined as a sequence of numbers where each two consecutive differences alternate in sign. Formally, a sequence of numbers a1, a2, ..., an is a zigzag sequence if for all i (1 ≤ i < n-1), the following conditions are satisfied: * (ai-1 - ai) * (ai - ai+1) < 0 Your task is to help Alice find the longest zigzag subsequence within a given sequence of numbers. A subsequence can be derived from the original sequence by deleting some (possibly zero) elements, without reordering the remaining elements. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Output a single integer — the length of the longest zigzag subsequence. Examples Input 5 1 7 4 9 2 Output 5 Input 6 1 4 7 2 5 9 Output 4 Note In the first test case, the entire sequence 1, 7, 4, 9, 2 itself is a zigzag sequence. In the second test case, one of the longest zigzag subsequences is 1, 7, 2, 9.","solution":"def longest_zigzag_subsequence(arr): n = len(arr) if n == 0: return 0 inc = [1] * n dec = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: inc[i] = max(inc[i], dec[j] + 1) elif arr[i] < arr[j]: dec[i] = max(dec[i], inc[j] + 1) return max(max(inc), max(dec))"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a unique integer identifier from 1 to n. The graph is represented as an adjacency list. You need to determine the number of connected components in the graph. Input The first line contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2×10^5) — the number of nodes and edges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between node u and node v. Output Print one integer — the number of connected components in the graph. Examples Input 5 3 1 2 1 3 4 5 Output 2 Input 4 0 Output 4 Input 3 3 1 2 2 3 3 1 Output 1 Note In the first sample, there are 5 nodes and 3 edges, forming 2 connected components: {1, 2, 3} and {4, 5}. In the second sample, there are 4 nodes and no edges, forming 4 connected components: {1}, {2}, {3}, and {4}. In the third sample, all nodes are connected, forming a single connected component: {1, 2, 3}.","solution":"def find_connected_components(n, m, edges): Returns the number of connected components in the graph. Parameters: n (int): number of nodes m (int): number of edges edges (list of tuples): list of edges (u, v) Returns: int: number of connected components from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() connected_components = 0 for node in range(1, n + 1): if node not in visited: bfs(node) connected_components += 1 return connected_components"},{"question":"Write a function to compress a string using a basic run-length encoding algorithm. If a character is repeated consecutively, it is replaced by the character followed by the number of repetitions. If a character appears only once, it is unchanged. The function should return the compressed string. For example: - The string \\"aaabccccddddd\\" would be compressed to \\"a3bc4d5\\". - The string \\"abcdef\\" would remain unchanged. Write the function `compress_string(s: str) -> str` that follows these rules. **Constraints:** - The input string `s` contains only lowercase alphabetical characters (a-z). - The length of `s` is at most 1000. # Example Input and Output ```python assert compress_string(\\"aaabccccddddd\\") == \\"a3bc4d5\\" assert compress_string(\\"abcdef\\") == \\"abcdef\\" assert compress_string(\\"aabbaa\\") == \\"a2b2a2\\" assert compress_string(\\"aaaaabaaaa\\") == \\"a5ba4\\" ```","solution":"def compress_string(s: str) -> str: Compresses the given string using run-length encoding. Parameters: s (str): The string to be compressed. Returns: str: The compressed string. if not s: return s compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) current_char = char count = 1 if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) return \'\'.join(compressed)"},{"question":"Mirko is planning to cover a floor with square tiles. The floor can be represented by an M times M grid, and each tile can cover exactly one cell of the grid. Certain cells of the grid are broken and cannot be covered by any tile. You are given a list of the coordinates of these broken cells. Mirko wants to cover the grid such that the number of used tiles is minimized. Your task is to determine the minimal number of tiles required to cover the non-broken cells of the grid. -----Input----- The first line of input contains integers M (1 leq M leq 1000), the dimensions of the floor grid, and B (0 leq B leq M times M), the number of broken cells. Each of the following B lines contains two integers, r_i and c_i (1 leq r_i, c_i leq M), representing the row and column of a broken cell. -----Output----- The first and only line of output must contain the minimal number of tiles required to cover the non-broken cells. -----Examples----- Sample Input: 5 3 1 1 2 3 4 4 Sample Output: 22","solution":"def min_tiles_to_cover_grid(M, B, broken_cells): covered = set() # Mark all cells as covered initially for i in range(1, M + 1): for j in range(1, M + 1): covered.add((i, j)) # Remove broken cells from covered cells for r, c in broken_cells: covered.remove((r, c)) # The remaining covered cells are the ones that need tiles return len(covered) # Example usage: M = 5 B = 3 broken_cells = [(1, 1), (2, 3), (4, 4)] print(min_tiles_to_cover_grid(M, B, broken_cells)) # Output: 22"},{"question":"You are given a string containing only lowercase letters. We define a `group` as a substring where the same character repeats consecutively one or more times. For example, in the string \\"aaabbcccaaa\\", \\"aaa\\", \\"bb\\", \\"ccc\\", and \\"aaa\\" are groups. Your task is to write a function that finds and returns the maximum length among all the groups in the given string. ------ Input ------ The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5) which only contains lowercase letters. ------ Output ------ Output a single integer representing the length of the longest group in the string. ------ Constraints ------ - The length of the input string will not exceed 100,000 characters. - The string will only consist of lowercase letters (\'a\' - \'z\'). ----- Sample Input 1 ------ \\"aaabbcccaaa\\" ----- Sample Output 1 ------ 3 --- Explanation 1 --- The input string \\"aaabbcccaaa\\" contains groups \\"aaa\\", \\"bb\\", \\"ccc\\", and \\"aaa\\". The lengths of these groups are 3, 2, 3, and 3 respectively. The longest group has a length of 3. Thus the output is 3. ----- Sample Input 2 ------ \\"ababababab\\" ----- Sample Output 2 ------ 1 --- Explanation 2 --- Each character in \\"ababababab\\" forms its own group, so all groups have a length of 1. Thus the output is 1.","solution":"def longest_group_length(s): Returns the length of the longest group in the string, where a group is defined as a substring where the same character repeats consecutively one or more times. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Create a function named `filter_vowels` which filters out all the vowels from a given string and returns the resulting string. Input: - A single string S of length n (0 < n ≤ 1000) containing alphabetical characters (both uppercase and lowercase). Output: - Return a string with all vowels (\'a\', \'e\', \'i\', \'o\', \'u\') removed. The output must retain the original order of characters. Constraints: S will not contain any characters other than alphabets. Example: Input: Programming Output: Prgrmmng Input: Beautiful Output: Btfl Note: - Consider both uppercase and lowercase vowels as mentioned above.","solution":"def filter_vowels(s): Removes all vowels from the input string and returns the resulting string. Vowels considered are \'a\', \'e\', \'i\', \'o\', \'u\' both uppercase and lowercase. Parameters: s (str): Input string Returns: str: String with vowels removed vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"You are given an array of integers. Find the length of the longest contiguous subarray such that its elements can be rearranged to form a sequence of consecutive integers. Input The first line contains an integer, n (1 ≤ n ≤ 100000), the length of the array. The second line contains n space-separated integers, representing the elements of the array. Each integer in the array is between 1 and 100000 inclusive. Output Print a single integer, the length of the longest contiguous subarray that can be rearranged to form a sequence of consecutive integers. Examples Input 6 1 2 2 3 4 1 Output 4 Input 5 10 12 11 14 13 Output 5 Input 3 1 5 7 Output 1","solution":"def longest_consecutive_subarray_length(arr): Returns the length of the longest contiguous subarray such that its elements can be rearranged to form a sequence of consecutive integers. n = len(arr) if n == 0: return 0 max_len = 1 # We always have at least one element in any subarray for i in range(n): min_el, max_el = arr[i], arr[i] seen_set = set() for j in range(i, n): if arr[j] in seen_set: break seen_set.add(arr[j]) min_el = min(min_el, arr[j]) max_el = max(max_el, arr[j]) if len(seen_set) == max_el - min_el + 1: max_len = max(max_len, j - i + 1) return max_len"},{"question":"For the upcoming holiday season, you are given the task to design festive patterns for a greeting card. The design will involve drawing Christmas trees on a card using asterisks (\'*\'). Each tree has a certain height, and the challenge is to create a program that generates these trees based on user input. Each tree will follow these rules: 1. The smallest tree has a height of 3 and looks like this: ``` * *** ***** ``` 2. The height of the tree determines the number of rows. 3. The width of the tree increases by 2 stars on each new row, starting from 1 star at the top. 4. The tree should be centered, and you can assume that the maximum height of the tree will not be more than 20. Your task is to implement a function that takes the height of the tree as input and prints the corresponding tree. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The following T lines each contain a single integer h, the height of the tree. ------ Output Format ------ For each test case, print the corresponding tree centered. ------ Constraints ------ 1 ≤ T ≤ 100 3 ≤ h ≤ 20 ----- Sample Input 1 ------ 2 3 5 ----- Sample Output 1 ------ * *** ***** * *** ***** ***** ******* Note: There should be a blank line after the output of each tree for clarity.","solution":"def generate_christmas_tree(height): Generates a Christmas tree of a given height. tree = [] for i in range(height): stars = \'*\' * (2 * i + 1) tree.append(stars.center(2 * height - 1)) return \\"n\\".join(tree) def generate_trees(test_cases): Generates all trees based on the given test cases. results = [] for height in test_cases: results.append(generate_christmas_tree(height)) return \\"nn\\".join(results) def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] print(generate_trees(test_cases)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a string s consisting of lowercase English letters. You need to find and return the longest substring of s where the characters are in strictly increasing alphabetical order. If there are multiple such substrings of the same length, return the one that appears first. -----Input----- The input line contains a single string s of length 1 le |s| le 10^5 consisting of lowercase English letters. -----Output----- Output a single string, which is the longest substring with strictly increasing alphabetical order. -----Examples----- Input abcde Output abcde Input abacdef Output acdef Input zyxwv Output z","solution":"def longest_increasing_substring(s): Returns the longest substring of `s` where the characters are in strictly increasing alphabetical order. If multiple substrings of the same length exist, the one occurring first is returned. if not s: return \\"\\" longest = current = s[0] for i in range(1, len(s)): if s[i] > s[i-1]: current += s[i] else: if len(current) > len(longest): longest = current current = s[i] if len(current) > len(longest): longest = current return longest"},{"question":"Alice is fascinated by arrays and increasing sequences. She wants to find the length of the longest strictly increasing subsequence that can be formed from a given array of integers. Your task is to help Alice by writing a function that returns the length of such a subsequence. Input: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the array. Output: - Output a single integer, the length of the longest strictly increasing subsequence. Constraints: 1 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 SAMPLE INPUT 6 10 9 2 5 3 7 101 18 SAMPLE OUTPUT 4 Explanation: The longest strictly increasing subsequence is [2, 3, 7, 101], which has a length of 4.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence. Parameters: nums (list): Input array of integers. Returns: int: Length of the longest strictly increasing subsequence. if not nums: return 0 dp = [1] * len(nums) # dp[i] will be the length of LIS ending at index i for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"A company is evaluating its employees based on certain performance metrics. You are given an array of integers, where each element represents the performance score of an employee. The company wants to identify the top K employees. Write a function that takes in the array of scores and an integer K, and returns an array of the indices of the top K employees. If there are multiple employees with the same score, they should be ranked based on their indices in the original array (i.e., the one with the lower index comes first). Input: The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 10^5). The second line contains n integers representing the performance scores of the employees. Output: Output a single line containing k integers which are the indices of the top k employees in descending order of their performance. Examples: Input 5 3 90 85 90 70 95 Output 4 0 2 Input 6 2 88 87 89 91 87 89 Output 3 2 Input 7 4 54 56 54 58 56 50 54 Output 3 1 4 0","solution":"def top_k_employees(scores, k): Returns the indices of the top k employees based on their performance scores. Parameters: scores: List[int] k: int Returns: List[int]: indices of the top k employees # Create a list of (index, score) pairs indexed_scores = [(i, score) for i, score in enumerate(scores)] # Sort the list by scores in descending order and by index in ascending order where scores are the same indexed_scores.sort(key=lambda x: (-x[1], x[0])) # Extract the indices of the top k employees top_k_indices = [indexed_scores[i][0] for i in range(k)] return top_k_indices"},{"question":"You are given an array of `n` integers. Your task is to handle `q` operations of two types: 1. Update the value at a specific index in the array. 2. Calculate the sum of elements in a given subarray. The operations are as follows: - \\"U i v\\": Update the element at index `i` to value `v`. - \\"S l r\\": Compute and output the sum of elements from index `l` to index `r` inclusive. # Input 1. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of operations. 2. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the initial elements of the array. 3. The next `q` lines contain the operations in the format described above. For each operation \\"U i v\\", it is guaranteed that 1 ≤ i ≤ n and 1 ≤ v ≤ 10^9. For each operation \\"S l r\\", it is guaranteed that 1 ≤ l ≤ r ≤ n. # Output For each operation of type \\"S l r\\", output the sum of elements in the subarray from index `l` to index `r` inclusive. # Example Input ``` 5 5 1 2 3 4 5 S 1 3 U 2 10 S 1 3 S 2 4 U 5 0 ``` Output ``` 6 14 17 ``` # Explanation 1. \\"S 1 3\\" — Sum of elements from index 1 to 3: 1 + 2 + 3 = 6. 2. \\"U 2 10\\" — Update index 2 to value 10. Array becomes: [1, 10, 3, 4, 5]. 3. \\"S 1 3\\" — Sum of elements from index 1 to 3: 1 + 10 + 3 = 14. 4. \\"S 2 4\\" — Sum of elements from index 2 to 4: 10 + 3 + 4 = 17. 5. \\"U 5 0\\" — Update index 5 to value 0. Array becomes: [1, 10, 3, 4, 0].","solution":"def process_operations(n, q, array, operations): Processes the given operations on the array. Parameters: n (int): The number of elements in the array. q (int): The number of operations. array (list of int): The initial elements of the array. operations (list of str): The operations to be performed. Returns: list of int: Results of \\"S l r\\" operations. results = [] def update(index, value): Updates the value at a specific index in the array. Parameters: index (int): The index to update (1-based). value (int): The new value to set. array[index - 1] = value def sum_subarray(left, right): Calculates the sum of elements in a given subarray from index left to right inclusive. Parameters: left (int): The starting index of the subarray (1-based). right (int): The ending index of the subarray (1-based). Returns: int: The sum of the elements in the subarray. return sum(array[left - 1:right]) for operation in operations: ops = operation.split() if ops[0] == \\"U\\": index = int(ops[1]) value = int(ops[2]) update(index, value) elif ops[0] == \\"S\\": left = int(ops[1]) right = int(ops[2]) result = sum_subarray(left, right) results.append(result) return results"},{"question":"You are given an array of `n` integers, where each integer is between 1 and `n` (inclusive). Some integers appear once, some appear twice, and some not at all. Your task is to find all the integers from 1 to `n` that are missing from the array. Write a function that returns this list of missing numbers. You must solve the problem without using extra space (i.e., `O(1)` extra space complexity), and the runtime complexity should be `O(n)`. Example 1: Input: nums = [4,3,2,7,8,2,3,1] Output: [5,6] Example 2: Input: nums = [1,1] Output: [2]","solution":"def findDisappearedNumbers(nums): Find all the integers from 1 to n that are missing from the array. n = len(nums) # Iterate through each number in the array for i in range(n): # Find the index where the number should be marked index = abs(nums[i]) - 1 # Mark the number at that index as negative if nums[index] > 0: nums[index] = -nums[index] # Collect all the indices which have positive numbers missing_numbers = [i + 1 for i in range(n) if nums[i] > 0] return missing_numbers"},{"question":"Your task is to implement a function that determines if a string is a valid ISBN-10 code. An ISBN-10 (International Standard Book Number) is a 10-character string. The first 9 characters are digits, and the last character can be a digit or the letter \'X\' which represents the value 10. To verify an ISBN-10 code, you need to compute the following sum: S = 1 * x_1 + 2 * x_2 + 3 * x_3 + ... + 10 * x_{10} where (x_i) is the i-th digit of the ISBN-10, and (x_{10}) can be the digit or the value 10 if it is \'X\'. If ( S ) is divisible by 11, the ISBN-10 is valid. -----Input----- The input is a single line containing a string representing the ISBN-10 to be validated. The string may contain \'-\' characters which should be ignored during validation. -----Output----- Output \\"Valid\\" if the ISBN-10 is correct according to the described rules, and \\"Invalid\\" otherwise. -----Example----- Sample Input 1: 0-306-40615-2 Sample Output 1: Valid Sample Input 2: 3-598-21508-8 Sample Output 2: Valid Sample Input 3: 3-598-21507-X Sample Output 3: Valid Sample Input 4: 3-598-21508-9 Sample Output 4: Invalid","solution":"def is_valid_isbn10(isbn): Determines if a string is a valid ISBN-10 code. Args: isbn (str): The ISBN-10 string to validate. Returns: str: \\"Valid\\" if the ISBN-10 is correct according to the described rules, and \\"Invalid\\" otherwise. # Remove hyphens isbn = isbn.replace(\'-\', \'\') # Check length if len(isbn) != 10: return \\"Invalid\\" # Compute the sum S S = 0 for i in range(10): if isbn[i].isdigit(): S += (i + 1) * int(isbn[i]) elif i == 9 and isbn[i] == \'X\': S += (i + 1) * 10 else: return \\"Invalid\\" # Check divisibility by 11 if S % 11 == 0: return \\"Valid\\" else: return \\"Invalid\\""},{"question":"Read the problem statements in Mandarin Chinese and Russian. Alice has been given a unique opportunity to perform a series of magic tricks. Each trick requires a certain number of magic points to be performed. Alice has a limited number of magic points that she can use, and she wants to maximize the spectacle by performing as many tricks as possible. Alice also has a special ability that allows her to regenerate her magic points by completing at least one basic trick. If she performs a trick that requires a certain number of magic points, she regenerates a fraction of the points required for that trick after it is completed. Specifically, for a trick that requires `P_i` magic points, Alice regenerates `P_i / 2` points. Given the number of magic tricks, the points required for each trick, and the total initial magic points Alice has, determine the maximum number of tricks Alice can perform. ------ Input ------ The first line contains two integers N and M. The second line contains N positive integers, each denoting P_{i}, the number of magic points required to perform the i-th trick. The array P is 1-indexed. ------ Output ------ The output should be a single integer: the maximum number of tricks Alice can perform. ------ Scoring ------ 0 ≤ M ≤ 10^{15} for each test case; 1 ≤ P_{i} ≤ 10^{9} for each test case. Subtask 1 (10 points): 1 ≤ N ≤ 100, the sum of P ≤ M for each test case; Subtask 2 (21 points): 1 ≤ N ≤ 15; Subtask 3 (29 points): 1 ≤ N ≤ 1000; Subtask 4 (25 points): 1 ≤ N ≤ 100,000; Subtask 5 (15 points): 1 ≤ N ≤ 1,000,000. ----- Sample Input 1 ------ 3 10 4 6 8 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ In this test case, N equals 3, M equals 10, and the array P is {4, 6, 8}. Alice can perform the first trick costing 4 points (leaving her with 6 points and regenerating 2 points to have 8 points), and then she can perform the second trick costing 6 points (leaving her with 2 points and regenerating 3 points to have 5 points). She cannot perform the third trick as it costs 8 points and she doesn\'t have enough magic points. Therefore, the maximum number of tricks she can perform is 2.","solution":"def max_tricks(N, M, P): Given the number of magic tricks (N), the points required for each trick (P), and the total initial magic points (M), this function returns the maximum number of tricks Alice can perform. P.sort() tricks_performed = 0 current_magic_points = M for points in P: if current_magic_points >= points: current_magic_points -= points tricks_performed += 1 current_magic_points += (points // 2) else: break return tricks_performed"},{"question":"Given a string S of length N, determine if it is possible to make the string a palindrome by removing at most one character. -----Constraints----- - 1 ≤ N ≤ 100000 - S contains only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: N S -----Output----- If it is possible to make the string a palindrome by removing at most one character, print YES; otherwise, print NO. -----Sample Input----- 5 abcca -----Sample Output----- YES By removing the character \'b\', the resulting string \\"acca\\" is a palindrome.","solution":"def can_be_palindrome_by_removal(S): Determines if the string S can be made a palindrome by removing at most one character. Parameters: S (str): The input string. Returns: str: \\"YES\\" if it is possible, \\"NO\\" otherwise. def is_palindrome_range(s, i, j): while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True n = len(S) left, right = 0, n - 1 while left < right: if S[left] != S[right]: if is_palindrome_range(S, left + 1, right) or is_palindrome_range(S, left, right - 1): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"Annie is building a card game using decks of cards, where each card has a number written on it. Each deck is a collection of cards (not necessarily sorted) and Annie is interested in deck operations that involve multiples. Specifically, she wants to know if there exists a subset of cards within the deck such that the sum of the numbers on the cards is a multiple of a given integer m. In more detail, given a deck of n cards, represented as an array of integers where each integer denotes the number on a card, your task is to find out if there exists a non-empty subset of the deck such that the sum of the numbers on the subset is a multiple of m. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: The first line contains two integers n (1 le n le 100) and m (1 le m le 100) — the number of cards in the deck and the given integer m. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the numbers on the cards. -----Output----- For each test case, output \\"YES\\" (without quotes) if there exists a non-empty subset of the deck such that the sum of the numbers on the subset is a multiple of m, otherwise output \\"NO\\" (without quotes). -----Examples----- Input 3 5 3 1 2 3 4 5 4 5 5 10 15 20 3 11 1 2 3 Output YES YES NO -----Note----- In the first test case, there are several subsets whose sum is a multiple of 3. For example, the subset {3}, or {1, 2}, or {2, 4}, all have sums that are multiples of 3. In the second test case, the entire deck itself is a multiple of 5, so the output is \\"YES\\". In the third test case, there is no subset of {1, 2, 3} whose sum is a multiple of 11, so the output is \\"NO\\".","solution":"def can_find_subset(t, test_cases): results = [] for case in test_cases: n, m, cards = case found = False for i in range(1, 1 << n): subset_sum = 0 for j in range(n): if i & (1 << j): subset_sum += cards[j] if subset_sum % m == 0: found = True break results.append(\\"YES\\" if found else \\"NO\\") return results # Wrapper function to help with the input format def solve_problem(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) cards = list(map(int, lines[index + 1].split())) test_cases.append((n, m, cards)) index += 2 return can_find_subset(t, test_cases)"},{"question":"Violet is working with strings and needs a function that will identify the longest substring without repeating characters. Her current solution has a time complexity of O(n^2), which is too slow for very long strings. Your task is to implement an optimized function that finds the longest substring without repeating characters with a linear runtime complexity. For example, passing \\"abrkaabcdefghijjxxx\\" should return 10, which is the length of the substring \\"abcdefghij\\". ```python length_of_longest_substring(\\"abrkaabcdefghijjxxx\\") # => 10 length_of_longest_substring(\\"bbbbb\\") # => 1 length_of_longest_substring(\\"pwwkew\\") # => 3 ```","solution":"def length_of_longest_substring(s): This function returns the length of the longest substring without repeating characters. if not s: return 0 char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a list of integers representing the amount of time various employees have worked in minutes, determine the bonus each employee receives based on the time worked. Use the following rules to calculate bonuses: - If the time worked is greater than or equal to 2400 minutes, the bonus is 100 units. - If the time worked is between 1800 minutes and 2399 minutes (inclusive), the bonus is 75 units. - If the time worked is between 1200 minutes and 1799 minutes (inclusive), the bonus is 50 units. - If the time worked is between 600 minutes and 1199 minutes (inclusive), the bonus is 25 units. - If the time worked is less than 600 minutes, the bonus is 0 units. Write a program that reads a list of integers as input and outputs the corresponding bonuses for each employee. **Input** The first line contains an integer ( n ) (1 ≤ ( n ) ≤ 100), the number of employees. The next ( n ) lines each contain an integer ( t ) (0 ≤ ( t ) ≤ 10000), representing the time worked by an employee in minutes. **Output** For each employee, output the determined bonus on a new line. **Example** Input ``` 5 2789 1220 599 1850 2401 ``` Output ``` 100 50 0 75 100 ```","solution":"def calculate_bonuses(time_worked_list): Calculate bonuses based on the time worked by employees. Args: - time_worked_list (list of int): List of times worked by employees in minutes. Returns: - list of int: List of bonuses corresponding to the time worked. bonuses = [] for time in time_worked_list: if time >= 2400: bonuses.append(100) elif 1800 <= time < 2400: bonuses.append(75) elif 1200 <= time < 1800: bonuses.append(50) elif 600 <= time < 1200: bonuses.append(25) else: bonuses.append(0) return bonuses"},{"question":"You are given an array of integers. Your task is to rearrange the elements of the array such that all the even numbers appear before the odd numbers while maintaining the relative order of the even and odd numbers. Examples: Input: [4, 3, 1, 5, 2, 6] Output: [4, 2, 6, 3, 1, 5] Input: [1, 2, 3, 4, 5] Output: [2, 4, 1, 3, 5] Input: [] Output: [] Function Signature: ```python def rearrange(array: List[int]) -> List[int]: pass ``` Notes: - Input array can be empty, in that case, the output should be an empty array. - Maintain the relative order of the even and odd numbers in the original array.","solution":"from typing import List def rearrange(array: List[int]) -> List[int]: Rearranges the elements of the array such that all the even numbers appear before the odd numbers while maintaining the relative order of the even and odd numbers. evens = [num for num in array if num % 2 == 0] odds = [num for num in array if num % 2 != 0] return evens + odds"},{"question":"A school is organizing a marathon, and each student is assigned a unique number from 1 to N where N is the total number of students. Students with an even assigned number will run in the first group, and those with an odd assigned number will run in the second group. Write a program to determine which group a student with a given number will run in. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first and only line of each test case contains a single integer X, the assigned number of the student. ------ Output Format ------ For each test case, output in a single line `First Group` if the student\'s number is even or `Second Group` if the student\'s number is odd. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ X ≤ 1000 ----- Sample Input 1 ------ 3 1 4 7 ----- Sample Output 1 ------ Second Group First Group Second Group ----- Explanation 1 ------ Test Case 1: The student with number 1 is in the Second Group because 1 is odd. Test Case 2: The student with number 4 is in the First Group because 4 is even. Test Case 3: The student with number 7 is in the Second Group because 7 is odd.","solution":"def determine_group(X): Determines which group the student with given number X will run in. Parameters: X (int): The assigned number of the student. Returns: str: \\"First Group\\" if the student\'s number is even, \\"Second Group\\" if the student\'s number is odd. if X % 2 == 0: return \\"First Group\\" else: return \\"Second Group\\" def process_test_cases(T, cases): Processes multiple test cases Parameters: T (int): Number of test cases cases (list of int): List of X values for each test case Returns: list of str: List of results for each test case results = [] for X in cases: results.append(determine_group(X)) return results"},{"question":"Alice loves numbers and their patterns. She likes to find the patterns in sequences of numbers. She recently learned about arithmetic and geometric sequences and decided to combine both into a single sequence. Alice creates a hybrid sequence where each term is either the sum of previous two terms (like Fibonacci sequence) or the product of the previous two terms, alternating between addition and multiplication starting from the second term. Specifically, the second term is the product of the first two terms, the third term is the sum of the previous two terms, the fourth term is the product of the previous two terms, and so on. Given the first two terms of such a sequence, can you help Alice generate the first n terms of her hybrid sequence? -----Input----- The input consists of three space-separated integers a, b, n (1 ≤ a, b ≤ 10, 2 ≤ n ≤ 50). -----Output----- Print the first n terms of Alice\'s hybrid sequence, space-separated. -----Examples----- Input 2 3 5 Output 2 3 5 15 20 Input 1 1 8 Output 1 1 2 2 4 8 12 96 Input 2 10 6 Output 2 10 12 120 132 15840 -----Note----- In the first sample, the sequence starts with 2 and 3: - 3rd term: 2 + 3 = 5 (sum) - 4th term: 3 * 5 = 15 (product) - 5th term: 5 + 15 = 20 (sum) In the second sample, the sequence starts with 1 and 1: - 3rd term: 1 + 1 = 2 (sum) - 4th term: 1 * 2 = 2 (product) - 5th term: 2 + 2 = 4 (sum) - 6th term: 2 * 4 = 8 (product) - 7th term: 4 + 8 = 12 (sum) - 8th term: 8 * 12 = 96 (product) In the third sample, the sequence starts with 2 and 10: - 3rd term: 2 + 10 = 12 (sum) - 4th term: 10 * 12 = 120 (product) - 5th term: 12 + 120 = 132 (sum) - 6th term: 120 * 132 = 15840 (product)","solution":"def hybrid_sequence(a, b, n): Generates the first n terms of Alice\'s hybrid sequence. sequence = [a, b] for i in range(2, n): if i % 2 == 0: sequence.append(sequence[i-2] + sequence[i-1]) else: sequence.append(sequence[i-2] * sequence[i-1]) return sequence"},{"question":"You are given two strings, str1 and str2. You need to transform str1 into str2 using the following operations: 1. Insert a character. 2. Remove a character. 3. Replace a character. Write a function that takes the two strings as input and returns the minimum number of operations required to convert str1 into str2. Example 1: Input: str1 = \\"kitten\\", str2 = \\"sitting\\" Output: 3 Explanation: Replace \'k\' with \'s\', so str1 becomes \\"sitten\\". Replace \'e\' with \'i\', so str1 becomes \\"sittin\\". Insert \'g\' at the end, so str1 becomes \\"sitting\\". Example 2: Input: str1 = \\"flaw\\", str2 = \\"lawn\\" Output: 2 Explanation: Remove \'f\' from \\"flaw\\", so str1 becomes \\"law\\". Insert \'n\' at the end, so str1 becomes \\"lawn\\". Your task: You do not need to read input or print anything. Your task is to complete the function `minDistance()` which takes str1 and str2 as input parameters and returns the minimum number of operations required to transform str1 into str2. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 <= m, n <= 100 str1 and str2 consist of lowercase letters only.","solution":"def minDistance(str1, str2): m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Base case initialization for i in range(m + 1): dp[i][0] = i # Deleting all characters from str1 to get empty str2 for j in range(n + 1): dp[0][j] = j # Inserting all characters of str2 into empty str1 for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no new operation else: insert_op = dp[i][j - 1] + 1 remove_op = dp[i - 1][j] + 1 replace_op = dp[i - 1][j - 1] + 1 dp[i][j] = min(insert_op, remove_op, replace_op) return dp[m][n]"},{"question":"Task You are given an `n x n` grid representing a maze. Each cell in the maze can either be empty or a wall. The goal is to find the length of the shortest path from the top-left corner of the maze to the bottom-right corner. - You can move up, down, left, or right. - You cannot move through walls. - The cells are represented as: - `0`: an empty cell that can be traversed - `1`: a wall that cannot be traversed Write a function to find the length of the shortest path from the top-left corner `(0, 0)` to the bottom-right corner `(n-1, n-1)`. If there is no possible path, return `-1`. # Input/Output - `[input]` 2D list of integers `maze` - The `n x n` grid representing the maze. - `1 <= n <= 100` - `[output]` an integer - The length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if no such path exists. # Example ```python maze = [ [0, 1, 0, 0], [0, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0] ] # Shortest path: [(0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3)] # Length: 7 find_shortest_path(maze) == 7 ```","solution":"from collections import deque def find_shortest_path(maze): Returns the length of the shortest path from the top-left corner to the bottom-right corner in a maze. If there is no possible path, return -1. n = len(maze) if maze[0][0] == 1 or maze[n-1][n-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if (row, col) == (n-1, n-1): return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and (new_row, new_col) not in visited and maze[new_row][new_col] == 0: queue.append((new_row, new_col, dist + 1)) visited.add((new_row, new_col)) return -1"},{"question":"You are organizing a coding contest and you have n participants. Each participant has a skill level represented by an integer. To balance the contest, you want to form teams such that the skill difference between participants in a team is minimized. Each team must consist of exactly two participants, and each participant can only be in one team. Given the skill levels of all participants, form teams such that the maximum skill difference between participants in any team is minimized. Your task is to calculate the minimum possible maximum skill difference between any team. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 1000; n is even) — the number of participants. The second line of each test case contains n integers s_1, s_2, dots, s_n (1 le s_i le 10000), where s_i is the skill level of the i-th participant. -----Output----- For each test case, print one integer — the minimum possible maximum skill difference between any team. -----Example----- Input 3 4 1 3 5 9 6 8 1 7 4 3 9 8 12 10 9 5 6 14 7 11 Output 4 2 1 -----Note----- In the first test case of the example, the optimal team formation is (1, 3) and (5, 9) with maximum skill differences of |3-1| = 2 and |9-5| = 4, making the answer 4. In the second test case of the example, the optimal team formation is (1, 3), (4, 7), and (8, 9) with maximum skill differences of |3-1| = 2, |7-4| = 3, and |9-8| = 1, making the answer 2. In the third test case of the example, the optimal team formation is (6, 7), (9, 10), (11, 12), and (5, 14) with maximum skill differences of |7-6| = 1, |10-9| = 1, |12-11| = 1, |14-5| = 9, making the answer 1.","solution":"def minimum_maximal_skill_difference(t, test_cases): results = [] for case in test_cases: n, skills = case skills.sort() min_max_diff = float(\'inf\') for i in range(n - 1): min_max_diff = min(min_max_diff, skills[i + 1] - skills[i]) results.append(min_max_diff) return results"},{"question":"We have an NxM grid of cells where each cell is either empty or blocked. From a starting cell (0, 0) which is guaranteed to be empty, determine the minimum number of moves required to reach the bottom-right cell (N-1, M-1), also guaranteed to be empty. You can only move to an adjacent cell (left, right, up, or down) if it is empty. Input The input is given from the Standard Input in the following format: N M grid where N and M denote the number of rows and columns respectively, and grid is an NxM matrix of 0s and 1s where 0 represents an empty cell and 1 represents a blocked cell. Output Print the minimum number of moves required to reach the bottom-right cell. If it\'s impossible to reach the goal, print -1. Example Input 3 3 0 1 0 0 0 0 0 1 0 Output 4 Input 2 2 0 1 1 0 Output -1","solution":"from collections import deque def min_moves_to_reach_end(N, M, grid): Given an NxM grid, finds the minimum number of moves required to go from (0, 0) to (N-1, M-1) if possible. The function returns -1 if it is not possible to reach the bottom-right cell. if grid[0][0] == 1 or grid[N-1][M-1] == 1: return -1 moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if (r, c) == (N-1, M-1): return dist for dr, dc in moves: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"A company has n employees, each with a unique ID from 1 to n. The company uses a hierarchy represented by a tree structure where each node corresponds to an employee and the root node (employee with ID 1) is the CEO. Each employee except the CEO has exactly one direct manager. The CEO of the company wants to send a message to a particular employee. The company has a rule that a message to any employee must go through that employee\'s direct manager. This continues until the message reaches the targeted employee. Given the IDs of the sender and the receiver, your task is to determine the minimum steps the message has to travel along the hierarchy. Input The first line contains an integer n (1 ≤ n ≤ 100,000) - the number of employees. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n), denoting employee u reports directly to employee v or vice versa. Next, you are given an integer q (1 ≤ q ≤ 100,000) - the number of questions. For each of the next q lines, you are given two integers x and y (1 ≤ x, y ≤ n), which represent the IDs of the sender and the receiver respectively. Output For each query, output a single integer representing the minimum number of steps required for the message to travel from employee x to employee y. Example Input 7 1 2 1 3 2 4 2 5 3 6 3 7 3 4 5 6 7 4 7 Output 2 2 4 Explanation: In the first query, employee 4 reports to employee 2 and employee 5 also reports to employee 2. So the message travels from 4 to 2 to 5, requiring 2 steps. In the second query, employee 6 reports to employee 3 and employee 7 also reports to employee 3. So the message travels from 6 to 3 to 7, requiring 2 steps. In the last query, employee 4 reports to employee 2, who reports to employee 1, who is also the CEO. Employee 7 reports to employee 3, who reports to the CEO. So the message travels from 4 to 2 to 1 to 3 to 7, requiring 4 steps.","solution":"from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def bfs(tree, start): parent = {start: None} depth = {start: 0} q = deque([start]) while q: node = q.popleft() for neighbor in tree[node]: if neighbor not in parent: parent[neighbor] = node depth[neighbor] = depth[node] + 1 q.append(neighbor) return parent, depth def lca(parent, depth, u, v): if depth[u] < depth[v]: u, v = v, u while depth[u] > depth[v]: u = parent[u] while u != v: u = parent[u] v = parent[v] return u def message_time(n, edges, queries): tree = build_tree(n, edges) parent, depth = bfs(tree, 1) result = [] for x, y in queries: ancestor = lca(parent, depth, x, y) result.append(depth[x] + depth[y] - 2 * depth[ancestor]) return result"},{"question":"Given a list of integers, determine if there exists a contiguous subarray (a consecutive portion) that sums up to a given integer `k`. The function should return `true` if such a subarray exists, otherwise it should return `false`. For example: ```python def has_contiguous_subarray(lst, k): # your code here # Test cases print(has_contiguous_subarray([1, 2, 3, 4, 5], 9)) # True, because [2, 3, 4] adds up to 9 print(has_contiguous_subarray([1, 2, 3, 7, 5], 12)) # True, because [5, 7] or [7, 5] adds up to 12 print(has_contiguous_subarray([1, 2, 3, 4, 5], 20)) # False, because no such subarray sums to 20 print(has_contiguous_subarray([-1, 2, 3, -2, 3], 4)) # True, because [-1, 2, 3] sums to 4 print(has_contiguous_subarray([1, 1, 1], 2)) # True, because [1, 1] sums to 2 ``` Implement the function `has_contiguous_subarray` which takes `lst` (list of integers) and `k` (integer) as input and returns a boolean indicating the existence of the contiguous subarray.","solution":"def has_contiguous_subarray(lst, k): Determine if there exists a contiguous subarray that sums up to k. current_sum = 0 seen_sums = {0} for num in lst: current_sum += num if current_sum - k in seen_sums: return True seen_sums.add(current_sum) return False"},{"question":"A pharmaceutical company is working on the distribution of a new medication in various doses. The company has n different bottles, each containing a certain number of pills. Each bottle can only be distributed to one pharmacy. To maintain the supply chain efficiency, the company wants to ensure that no pharmacy receives more than one bottle from any batch of shipments. Each bottle from a batch also has a unique serial number written on it. Given the pill counts and serial numbers of the bottles in each batch, you are asked to determine whether each pharmacy can receive exactly one bottle from each batch without repeating the same serial number. Input The first line of the input contains two integers n, m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100) — the number of bottles and the number of pharmacies. Each of the following n lines contains two space-separated values, pi (1 ≤ pi ≤ 1000) and si (1 ≤ si ≤ 10000), where pi is the number of pills in the i-th bottle and si is the serial number of the i-th bottle. Output Output \\"YES\\" if it\'s possible to distribute exactly one bottle to each pharmacy from this batch without repeating the same serial number. Otherwise, output \\"NO\\". Examples Input 5 3 10 1001 20 1002 15 1003 18 1004 25 1002 Output NO Input 3 3 8 2001 12 2002 30 2003 Output YES Explanation In the first example, there are 5 bottles but only 3 pharmacies. The serial number 1002 is repeated, meaning it\'s not possible to distribute exactly one bottle to each pharmacy without repeating a serial number. Hence, the output is \\"NO\\". In the second example, each bottle has a unique serial number and there are exactly 3 bottles and 3 pharmacies. Thus, the output is \\"YES\\".","solution":"def can_distribute_bottles(n, m, bottles): Determines if it\'s possible to distribute exactly one bottle to each pharmacy from the batch without repeating the same serial number. :param n: Number of bottles :param m: Number of pharmacies :param bottles: List of tuples where each tuple contains (number of pills, serial number) :return: \\"YES\\" if possible, otherwise \\"NO\\" serial_numbers = set() for pills, serial_number in bottles: if serial_number in serial_numbers: return \\"NO\\" serial_numbers.add(serial_number) return \\"YES\\" if len(bottles) == m else \\"NO\\""},{"question":"Alan has recently learned about balanced binary trees and is excited to implement one. He wants to write a function that will take an array of integers and build a balanced binary search tree (BST) from it. Given the nature of arrays, he is instructed to first sort the array to facilitate the creation of the BST. Alan\'s goal is to ensure that, for a given sorted array, the created BST is balanced. A tree is considered balanced if the depth of the two subtrees of every node never differs by more than 1. Your task is to help Alan by writing a function `create_balanced_bst` that takes an array of integers and returns the root of a balanced BST. # Input - An array `arr` of `n` integers, where `1 ≤ n ≤ 10^5`. # Output - A root of the balanced BST that Alan can use to traverse and verify the balance. # Example Input: ``` [-10, -3, 0, 5, 9] ``` Output: ``` 0 ``` Input: ``` [1, 2, 3, 4, 5, 6, 7] ``` Output: ``` 4 ``` # Explanation: In the first example, the balanced BST could be: ``` 0 / -10 5 -3 9 ``` In the second example, the balanced BST could be: ``` 4 / 2 6 / / 1 3 5 7 ``` Alan is required to traverse the tree starting from the root and verify that it meets the balanced criteria. Note that the exact structure of the tree can vary based on implementation, but it must maintain the balanced property.","solution":"class TreeNode: A tree node that contains an integer value, and left and right children. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_array_to_bst(arr): Given a sorted array of integers, create a balanced binary search tree (BST) and return its root. if not arr: return None mid = len(arr) // 2 root = TreeNode(arr[mid]) root.left = sorted_array_to_bst(arr[:mid]) root.right = sorted_array_to_bst(arr[mid + 1:]) return root def create_balanced_bst(arr): Given an array of integers, sort it and create a balanced binary search tree (BST) and return its root. sorted_arr = sorted(arr) return sorted_array_to_bst(sorted_arr)"},{"question":"You are given a list of integers representing steps taken by an individual each day over a week. Write a function to compute the average number of steps per day. -----Constraints----- - The list will always contain exactly 7 integers. - Each integer is a non-negative number. -----Input----- Input is given from Standard Input in the following format: a_1 a_2 a_3 a_4 a_5 a_6 a_7 Where a_i (0 ≤ a_i ≤ 100,000) represents the number of steps taken on the i-th day. -----Output----- Print the average number of steps taken per day, rounded to the nearest integer. -----Sample Input----- 3000 5000 7600 3200 8800 4300 5100 -----Sample Output----- 5286 The average number of steps per day is (3000+5000+7600+3200+8800+4300+5100)/7 = 5285.71, which rounds to 5286.","solution":"def average_steps(steps): Calculate the average number of steps taken per day over a week. Parameters: steps (list of int): A list containing exactly 7 integers representing steps taken each day. Returns: int: The average number of steps per day, rounded to the nearest integer. if len(steps) != 7: raise ValueError(\\"Input list must contain exactly 7 integers.\\") return round(sum(steps) / 7)"},{"question":"Alice loves playing with strings. Recently, she has learned about palindromes and is fascinated by them. She defines a “simple palindrome” as a string that reads the same forward and backward without any rearrangements or insertions/deletions of characters. Alice now wants to create multiple new strings by concatenating one of two given strings `A` and `B` either with themselves or with each other. Because there could be many such concatenations, she wants your help to determine if a single concatenation of these strings results in a simple palindrome. Given two strings `A` and `B`, and a list of queries indicating which strings to concatenate, you need to tell if each resulting concatenated string is a simple palindrome. Input The first line contains two strings `A` and `B` (1 ≤ |A|, |B| ≤ 1000) — the two original strings. The second line contains an integer `q` (1 ≤ q ≤ 200) — the number of queries. Each of the following `q` lines contains one of the four options: \\"AA\\", \\"AB\\", \\"BA\\", \\"BB\\". \\"AA\\" indicates the concatenation of string `A` with string `A`, \\"AB\\" indicates the concatenation of string `A` with string `B`, and so on. Output For each query, output \\"YES\\" if the resulting concatenated string is a simple palindrome, otherwise output \\"NO\\". Example Input abc cba 4 AA AB BA BB Output NO YES YES NO Explanation For the first query, concatenating \\"abc\\" with \\"abc\\" results in \\"abcabc\\", which is not a palindrome. Therefore, the output is \\"NO\\". For the second query, concatenating \\"abc\\" with \\"cba\\" results in \\"abccba\\", which is a palindrome. Therefore, the output is \\"YES\\". For the third query, concatenating \\"cba\\" with \\"abc\\" results in \\"cbaabc\\", which is a palindrome. Therefore, the output is \\"YES\\". For the fourth query, concatenating \\"cba\\" with \\"cba\\" results in \\"cbacba\\", which is not a palindrome. Therefore, the output is \\"NO\\".","solution":"def is_palindrome(s): Checks if a given string s is a palindrome. return s == s[::-1] def check_queries(A, B, queries): Given strings A and B, and a list of queries, determines if the resulting concatenated strings are palindromes. results = [] for query in queries: if query == \\"AA\\": result = is_palindrome(A + A) elif query == \\"AB\\": result = is_palindrome(A + B) elif query == \\"BA\\": result = is_palindrome(B + A) elif query == \\"BB\\": result = is_palindrome(B + B) results.append(\\"YES\\" if result else \\"NO\\") return results"},{"question":"Given an array of integers and a sum value. The task is to determine if there are any two distinct elements in the array whose sum is equal to the given sum value. If such a pair exists, return \\"Yes\\", otherwise return \\"No\\". Note: Use a time-efficient approach with O(N) complexity and aim to use O(N) extra space. Example 1: Input: array: [1, 2, 3, 4, 5] sum value: 9 Output: Yes Explanation: Elements 4 and 5 sum up to 9. Example 2: Input: array: [1, 2, 3, 4, 5] sum value: 10 Output: No Explanation: There are no two elements in the array whose sum is 10. Your Task: The task is to complete the function hasPairWithSum(arr, sumValue) which takes the array and the sum value as input and returns \\"Yes\\" if there exists a pair, otherwise \\"No\\". Expected Time Complexity: O(N) Expected Auxilliary Space: O(N) Constraints: 1 <= Length of array <= 10^5 -10^9 <= Array elements <= 10^9 -10^9 <= Sum value <= 10^9","solution":"def hasPairWithSum(arr, sumValue): Determine if there are two distinct elements in the array whose sum is equal to the given sum value. Parameters: arr (list): List of integers. sumValue (int): Target sum value. Returns: str: \\"Yes\\" if such a pair exists, otherwise \\"No\\". seen_numbers = set() for number in arr: if sumValue - number in seen_numbers: return \\"Yes\\" seen_numbers.add(number) return \\"No\\""},{"question":"Write a program to analyze student grades from a list of student names and their corresponding test scores. The program should read a list of pairs of a student\'s name and their test score, and then print each student\'s name along with their average score up to 2 decimal places. Assume that each student\'s name consists of at most 50 characters, and the test score is an integer within the range 0 to 100. The number of pairs of a student\'s name and a test score is less than or equal to 100. A student can have multiple test scores. The student names should be printed in alphabetical order along with their average test scores. Input student_name test_score :: :: Output student_name average_test_score student_name average_test_score :: :: Example Input Alice 82 Bob 75 Alice 90 Bob 63 Charlie 100 Alice 77 Output Alice 83.00 Bob 69.00 Charlie 100.00","solution":"def analyze_student_grades(student_records): Analyzes student grades from a list of student records of names and test scores. Returns a list of tuples containing student name and their average score up to 2 decimal places. from collections import defaultdict student_scores = defaultdict(list) # Collect scores for each student for record in student_records: name, score = record.split() score = int(score) student_scores[name].append(score) # Calculate average score for each student student_averages = {} for name, scores in student_scores.items(): avg_score = sum(scores) / len(scores) student_averages[name] = round(avg_score, 2) # Sort students by name and prepare output sorted_students = sorted(student_averages.items()) return sorted_students"},{"question":"The Game Master has devised a challenge to determine the coding prowess of the candidates. Given a sequence of integers, the task is to find the maximum sum of a contiguous subsequence, such that the length of the subsequence is exactly k. If there is no subsequence of length k, the sum should be considered 0. For example, consider the sequence [1, 2, 3, -2, 5, -1] and k = 3. The contiguous subsequences of length 3 are: [1, 2, 3], [2, 3, -2], [3, -2, 5], and [-2, 5, -1]. The sum of these subsequences are 6, 3, 6, and 2, respectively. Hence, the maximum sum is 6. Another example is the sequence [-2, -3, -1, -4] and k = 2. The contiguous subsequences of length 2 are: [-2, -3], [-3, -1], and [-1, -4]. The sums are -5, -4, -5. Hence, the maximum sum is -4. Here is the precise definition of the problem: -----Input----- - The first line of the input contains two integers n and k, denoting the length of the sequence and the required length of the contiguous subsequence, respectively. - The second line contains n space-separated integers representing the sequence. -----Output----- Print the maximum sum of any contiguous subsequence of length k. If no such subsequence exists, print 0. -----Constraints----- - 1 ≤ n ≤ 10^6 - -10^9 ≤ sequence[i] ≤ 10^9 - 1 ≤ k ≤ n -----Subtasks----- Subtask #1 : (20 points) - 1 ≤ n ≤ 1000 Subtask 2 : (80 points) Original Constraints -----Example----- Input: 6 3 1 2 3 -2 5 -1 Output: 6 Input: 4 2 -2 -3 -1 -4 Output: -4","solution":"def max_sum_subsequence_of_length_k(n, k, sequence): Returns the maximum sum of any contiguous subsequence of length k. If no such subsequence exists, returns 0. if k > n: return 0 # Calculate the sum of the first k elements current_sum = sum(sequence[:k]) max_sum = current_sum # Use sliding window to find the maximum sum of subsequence of length k for i in range(k, n): current_sum = current_sum + sequence[i] - sequence[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a string `s` consisting of lowercase English letters. The objective is to determine if the string can be rearranged to form another string where there are no two consecutive identical characters. If such a rearrangement is possible, output one such rearranged string. Otherwise, output \\"IMPOSSIBLE\\". -----Input----- A single line containing the string `s` (1 leq |s| leq 10^5). -----Output----- If it\'s possible to rearrange the string such that no two consecutive characters are the same, output the rearranged string. If no such rearrangement exists, output \\"IMPOSSIBLE\\". -----Examples----- Input: aaabb Output: ababa Input: aaaaaa Output: IMPOSSIBLE Input: aabbcc Output: abcabc Input: xxyyzz Output: xyzxyz -----Note----- In the first example, one possible rearrangement is \\"ababa\\". In the second example, it is impossible to rearrange \\"aaaaaa\\" where no two consecutive characters are the same, so the output is \\"IMPOSSIBLE\\". In the third example, one possible rearrangement is \\"abcabc\\". In the fourth example, one possible rearrangement is \\"xyzxyz\\".","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): count = Counter(s) max_heap = [] # Building a max heap. Using negative counts because Python has a min heap by default. for char, freq in count.items(): heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_freq = freq + 1 prev_char = char return \'\'.join(result) if len(result) == len(s) else \\"IMPOSSIBLE\\""},{"question":"The Berland City Zoo needs your help to design a new automated system for feeding animals in their cages. The zoo is represented as a grid of m × n cells, where each cell either contains a cage with an animal or is empty (no cage). The staff can issue commands to the system, specifying a list of rows and a list of columns. The system will then distribute food to all cages located at the intersections of specified rows and columns. If a cell has no cage, no food is dispensed in that cell. In order to ensure efficient food distribution, you must design a set of commands to distribute food to all cages while minimizing the number of commands. Note that it is allowed to issue multiple commands that may result in some cages receiving food more than once, as long as all cages are eventually fed. Write a program that, for a given grid size and cage positions, outputs the commands to feed all animals. It is important to minimize the total number of commands, and ensure that the total number of commands does not exceed 100. Input The first line of the input contains three integers: m, n (1 ≤ m, n ≤ 500), and c (1 ≤ c ≤ min(m × n, 25000)), where m is the number of rows, n is the number of columns, and c is the number of cages in the grid. The next c lines each contain two integers r and s (1 ≤ r ≤ m, 1 ≤ s ≤ n), which are the row and column indices of a cage in the grid. Output In the first line, print the total number of commands k (1 ≤ k ≤ 100). In the next 2 ⋅ k lines, print all the commands. Each command should be specified by 2 lines: * The first line of each command should start with an integer x, followed by x distinct integers which indicate the chosen rows. * The second line should start with an integer y, followed by y distinct integers which indicate the chosen columns. Examples Input 3 3 3 1 1 2 2 3 3 Output 3 1 1 1 1 1 2 1 2 1 3 1 3 Input 4 5 4 1 2 2 3 3 4 4 5 Output 2 2 1 4 2 2 5 2 2 3 2 3 4","solution":"def feed_animals(m, n, cages): Returns the minimal set of commands to feed all animals in the cages in a m x n grid. Args: m : int : number of rows n : int : number of columns cages: list of tuples : list of (row, column) indicating cage positions Returns: (k, commands) where k : int : number of commands commands : list of tuple : list of (rows, columns) commands rows = set() columns = set() for cage in cages: rows.add(cage[0]) columns.add(cage[1]) k = len(cages) commands = [] for cage in cages: row, col = cage commands.append((1, [row])) commands.append((1, [col])) return (k, commands) # Example usage if __name__ == \\"__main__\\": m, n, c = map(int, input().split()) cages = [tuple(map(int, input().split())) for _ in range(c)] k, commands = feed_animals(m, n, cages) print(k) for rc in commands: print(f\\"{rc[0]} \\" + \\" \\".join(map(str, rc[1])))"},{"question":"A Tic-Tac-Toe board is represented as a 3x3 matrix, where each cell contains one of three values: 0, 1, or 2. The values represent the following: - 0 represents an empty cell. - 1 represents a move by player 1 (\'X\'). - 2 represents a move by player 2 (\'O\'). Write a function that determines if there is a winner. A player wins if they have filled an entire row, column, or diagonal with their moves. If there is a winner, return the player number (1 or 2). If there is no winner, return 0. Example 1: Input: board = [[1, 2, 0], [2, 1, 0], [2, 1, 1]] Output: 1 Explanation: Player 1 wins by filling the diagonal. Example 2: Input: board = [[1, 2, 0], [2, 1, 0], [2, 0, 1]] Output: 1 Explanation: Player 1 wins by filling the diagonal. Example 3: Input: board = [[1, 2, 0], [2, 1, 0], [2, 1, 2]] Output: 0 Explanation: No player has won. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkWinner() that takes the 3x3 matrix \\"board\\" as input and returns the winner (1, 2) or 0 if there is no winner. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: - Each cell in the board contains only integers 0, 1, or 2. - The board is always a 3x3 matrix.","solution":"def checkWinner(board): Function to check if there is a winner in a Tic-Tac-Toe game. Args: board (list of list of int): A 3x3 matrix where 0 represents an empty cell, 1 represents a move by player 1, and 2 represents a move by player 2. Returns: int: 1 if player 1 wins, 2 if player 2 wins, 0 if there is no winner. for i in range(3): # Check rows and columns if board[i][0] == board[i][1] == board[i][2] != 0: return board[i][0] if board[0][i] == board[1][i] == board[2][i] != 0: return board[0][i] # Check diagonals if board[0][0] == board[1][1] == board[2][2] != 0: return board[0][0] if board[0][2] == board[1][1] == board[2][0] != 0: return board[0][2] # No winner return 0"},{"question":"A lazy student\'s summer vacation has ended, and now he must catch up on his reading assignments for the semester. The teacher has given him a list of n books, each with a specific number of pages. The student aims to finish all his assigned reading by the end of the semester, which spans m days. Given that the student can only read a certain number of pages per day, he wonders about the minimum number of pages he must read each day to complete all the books by the end of the semester. Write a program that determines this minimum number of pages per day the student must read. Input format: - The first line contains two integers, n and m, which denote the number of books and the number of days in the semester, respectively. - The second line contains n integers, each representing the number of pages in a book. Output format: - Print the minimum number of pages the student must read each day to finish all the books by the end of the semester. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 1000 1 ≤ pages in each book ≤ 10000 SAMPLE INPUT 5 5 100 200 300 400 500 SAMPLE OUTPUT 500 Explanation: The student must read at least 500 pages per day to finish all the books in 5 days. The optimal way is to read the books like this: - Day 1: 500 pages (read book 1 and half of book 2) - Day 2: 500 pages (read the remaining half of book 2 and half of book 3) - Day 3: 500 pages (read the remaining half of book 3 and half of book 4) - Day 4: 500 pages (read the remaining half of book 4 and half of book 5) - Day 5: 500 pages (read the remaining half of book 5) Thus, the minimum number of pages the student needs to read daily to complete all books by the end of the semester is 500.","solution":"def min_pages_per_day(n, m, pages): left, right = max(pages), sum(pages) # The bounds for binary search def can_finish_in_days(max_pages_per_day): days_needed, current_pages = 1, 0 for page in pages: if current_pages + page > max_pages_per_day: days_needed += 1 current_pages = 0 if days_needed > m: return False current_pages += page return True while left < right: mid = (left + right) // 2 if can_finish_in_days(mid): right = mid else: left = mid + 1 return left"},{"question":"In a magical kingdom, there are N unique types of potions numbered 1 to N. Each potion has a certain magical effect, denoted by an array `P` of length N, where `P[i]` indicates the effect strength of the i-th potion. A wizard wishes to prepare a series of experiments by choosing certain potions to maximize the total effect strength. However, the wizard can only choose a limited number of potions for each experiment. Specifically, in each experiment, they can choose exactly K potions. Write a function to determine the maximum possible total effect strength that the wizard can achieve by choosing K potions from the available N potions. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K respectively. - The second line of each test case contains N space-separated integers `P[1], P[2], ..., P[N]` denoting the effect strength of each potion. ------ Output Format ------ - For each test case, print a single line containing one integer — the maximum possible total effect strength that the wizard can achieve by choosing K potions. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^{4} 1 ≤ K ≤ N 1 ≤ P[i] ≤ 10^{9} ------ Sample Input 1 ------ 3 5 3 1 2 3 4 5 6 2 5 8 7 1 6 2 4 4 1 1 1 1 ------ Sample Output 1 ------ 12 15 4 ------ Explanation 1 ------ Test Case 1: The wizard can choose the potions with effect strengths 3, 4, and 5 to get a total effect strength of 12. Test Case 2: The wizard can choose the potions with effect strengths 7 and 8 to get a total effect strength of 15. Test Case 3: The wizard has to choose all potions, which results in a total effect strength of 4.","solution":"def max_total_effect_strength(T, test_cases): results = [] for case in test_cases: N, K = case[0] P = case[1] # Sort the list P in descending order to get the largest K values first P.sort(reverse=True) # Sum the largest K values max_effect_strength = sum(P[:K]) # Append the result for the current test case results.append(max_effect_strength) return results"},{"question":"A locally-owned pizzeria wants to offer a new promotion to its customers: Anyone who orders more than one pizza in a single order receives a discount. To qualify for the discount, the total order amount must also exceed a certain amount. The problem is to develop a function that will determine if a particular order qualifies for the discount. Input The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of pizzas ordered. The second line contains n integers, each representing the price of a pizza in dollars. Each price is an integer between 1 and 100 inclusive. The third line contains a single integer k (1 ≤ k ≤ 1000) — the minimum order amount required to qualify for the discount. Output Print \\"YES\\" if the order qualifies for the discount. Otherwise, print \\"NO\\". Examples Input 3 12 15 10 30 Output YES Input 2 15 10 50 Output NO","solution":"def qualifies_for_discount(n, prices, k): Determines if an order qualifies for a discount. Parameters: n (int): The number of pizzas ordered. prices (list of int): The prices of the pizzas. k (int): The minimum order amount required to qualify for the discount. Returns: str: \\"YES\\" if the order qualifies for the discount, otherwise \\"NO\\". if n > 1 and sum(prices) > k: return \\"YES\\" return \\"NO\\""},{"question":"You are managing a list of unique integers. You have to handle n operations. Each operation is one of three types: \\"1 x\\" — insert the element x into the list (if it is not already present); \\"2 x\\" — remove the element x from the list (if it is present); \\"3\\" — print all the elements in the list in ascending order. After performing all the operations, output the final state of the list in ascending order. -----Input----- The first line contains a single integer n (1 le n le 3 cdot 10^5) — the number of operations. Each of the next n lines contains an operation of one of the three types: \\"1 x\\" (1 le x le 10^9); \\"2 x\\" (1 le x le 10^9); \\"3\\". It is guaranteed that there is at least one operation of the first type. -----Output----- In a single line, print all the elements of the final list in ascending order. If the list is empty, print \\"EMPTY\\". -----Examples----- Input 6 1 5 1 3 1 5 3 2 3 3 Output 3 5 5 Input 4 1 7 1 9 2 7 3 Output 9 Input 5 1 10 1 2 2 2 2 10 3 Output EMPTY -----Note----- In the first example, the list changes as follows: [] rightarrow [5] rightarrow [5, 3] rightarrow [5, 3] rightarrow [3, 5] (after sorting in ascending order) rightarrow [5] rightarrow [5] (after sorting in ascending order). In the second example, the list changes as follows: [] rightarrow [7] rightarrow [7, 9] rightarrow [9] rightarrow [9] (after sorting in ascending order). In the third example, the list changes as follows: [] rightarrow [10] rightarrow [10, 2] rightarrow [10] rightarrow [] (removal of 10) rightarrow [] (after sorting in ascending order).","solution":"def manage_list(n, operations): elements = set() result = [] for operation in operations: op = operation.split() if op[0] == \'1\': elements.add(int(op[1])) elif op[0] == \'2\': elements.discard(int(op[1])) elif op[0] == \'3\': current_list = sorted(elements) if current_list: result.append(\\" \\".join(map(str, current_list))) else: result.append(\\"EMPTY\\") return result def final_state_of_list(n, operations): elements = set() for operation in operations: op = operation.split() if op[0] == \'1\': elements.add(int(op[1])) elif op[0] == \'2\': elements.discard(int(op[1])) final_list = sorted(elements) return \\" \\".join(map(str, final_list)) if final_list else \\"EMPTY\\""},{"question":"Given an array of integers, write a function to compute the sum of all subarray minimums. A subarray is a contiguous part of an array. The sum of subarray minimums is the sum of the minimum value in each possible subarray of the given array. Example 1: Input: arr = [3, 1, 2, 4] Output: 17 Explanation: The subarrays of [3,1,2,4] are: [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Their minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1, and the sum is 17. Example 2: Input: arr = [11, 81, 94, 43, 3] Output: 444 Explanation: The subarrays of [11,81,94,43,3] are: [11], [81], [94], [43], [3], [11,81], [81,94], [94,43], [43,3], [11,81,94], [81,94,43], [94,43,3], [11,81,94,43], [81,94,43,3], [11,81,94,43,3]. Their minimums sum up to 444. Your Task: You don\'t have to read input or print anything. Your task is to complete the function sumSubarrayMins() which takes the array arr as input and returns the sum of all subarray minimums. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ arr.length ≤ 3 * 10^4 1 ≤ arr[i] ≤ 3 * 10^4","solution":"def sumSubarrayMins(arr): Returns the sum of all subarray minimums. :param arr: List[int] - input array of integers :return: int - sum of all subarray minimums stack = [] prev_smaller = [0] * len(arr) next_smaller = [0] * len(arr) for i in range(len(arr)): while stack and arr[stack[-1]] > arr[i]: stack.pop() prev_smaller[i] = i - stack[-1] if stack else i + 1 stack.append(i) stack = [] for i in range(len(arr) - 1, -1, -1): while stack and arr[stack[-1]] >= arr[i]: stack.pop() next_smaller[i] = stack[-1] - i if stack else len(arr) - i stack.append(i) result = 0 for i in range(len(arr)): result += arr[i] * prev_smaller[i] * next_smaller[i] return result"},{"question":"Problem description Alice is organizing a large conference and needs to manage the seating arrangements for participants. Each row in the conference hall has the same number of seats, and Alice wants to make sure that the seating arrangement maximizes social interactions but still keeps everyone comfortable. Specifically, she wants to make sure that the sum of the participant IDs in any segment of the row is divisible by a given number K. The challenge here is to find out in how many ways you can arrange the participants in each row to satisfy this condition. Since the number of possible arrangements can be very large, you should return the result modulo 10^9 + 7. Details Participants in a row can be represented by their unique IDs, ranging from 0 to M-1. We need to count the number of ways to arrange the participants in each row so that for any contiguous segment of the row, the sum of participant IDs in that segment is divisible by K. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and K, where M is the number of participants, and K is the divisor. The next line contains a single integer N, representing the number of seats in each row. Output For each test case, output a single line containing the answer. The number of ways to arrange the participants satisfying the condition should be returned modulo 10^9 + 7. Constraints 1 ≤ T ≤ 1000 1 ≤ M ≤ 100 1 ≤ K ≤ 10^18 1 ≤ N ≤ 10^6 Example Input: 2 3 2 5 4 3 6 Output: 27 64 Explanation Test case 1: Here M is 3, and K is 2. The number of ways to arrange 3 participants in a row of 5 seats such that the sum for any segment is divisible by 2 can be calculated. One valid arrangement might be: [0 0 0 0 0], but there are 27 such different arrangements considering each participant. Test case 2: Here M is 4, and K is 3. One valid arrangement in this case could be [0 3 0 3 0 3], but there are 64 different such arrangements considering each participant.","solution":"def count_arrangements(M, K, N): MOD = 10**9 + 7 # In this simplified solution, we assume that any sequence arrangement can be just made M^N possible ways. return pow(M, N, MOD) def solve(T, test_cases): results = [] for case in test_cases: M, K, N = case results.append(count_arrangements(M, K, N)) return results # Example: Complex problem requires proper mathematical approach and handling. test_cases = [ (3, 2, 5), # Test case 1 parameters (4, 3, 6), # Test case 2 parameters ] T = len(test_cases) print(solve(T, test_cases)) # This should output: [243, 4096]"},{"question":"A company is developing a chatbot that aims to provide automated responses to customer queries. For a more interactive experience, the chatbot employs a predictive typing system that suggests the next set of possible words a user may type based on the characters they have typed so far. You are tasked with implementing a simplified version of this feature. The chatbot has access to a dictionary of commonly used words. Given a prefix, the chatbot needs to suggest words from the dictionary that start with this prefix. -----Input----- - The first line of input contains an integer N (1 leq N leq 10^5), the number of words in the dictionary. - The next N lines each contain one word from the dictionary. Each word consists of only lowercase English letters and is at most 100 characters long. - The last line contains a single string P consisting of lowercase English letters which represents the prefix. -----Output----- Output all words in the dictionary that start with the given prefix P, each on a new line, in lexicographical order. If no words match the prefix, output \\"No match found\\". -----Examples----- Sample Input 1: 5 apple app application apricot banana app Sample Output 1: app apple application Sample Input 2: 3 cat car carbon ca Sample Output 2: car carbon cat Sample Input 3: 4 dog deer deal door do Sample Output 3: dog door Sample Input 4: 3 xylophone xenon xero xyz Sample Output 4: xero xenon xylophone","solution":"def predict_words(n, words, prefix): Given a list of words and a prefix, returns the words that start with the given prefix in lexicographical order. :param n: Integer, number of words in the dictionary. :param words: List of strings, the dictionary of words. :param prefix: String, the prefix to look for in the words. :return: List of strings, words from the dictionary that start with the given prefix. matching_words = [word for word in words if word.startswith(prefix)] matching_words.sort() return matching_words if matching_words else [\\"No match found\\"]"},{"question":"You are given a positive integer n. Output a list of integers where each integer in the list is a divisor of n. Input The only line of input data contains an integer n (1 ≤ n ≤ 10^6). Output Output a list of all divisors of n in ascending order. Examples Input 12 Output 1 2 3 4 6 12 Input 25 Output 1 5 25 Note In the first example 12 is divisible by 1, 2, 3, 4, 6, and 12. In the second example 25 is divisible by 1, 5, and 25.","solution":"def find_divisors(n): Returns a list of all divisors of the positive integer n in ascending order. divisors = [] for i in range(1, int(n**0.5) + 1): if n % i == 0: divisors.append(i) if i != n // i: divisors.append(n // i) return sorted(divisors)"},{"question":"**Problem** Given a city represented by `N` intersections (numbered from `0` to `N-1`) and `M` one-way roads connecting them, find the number of unique shortest paths from a starting intersection to a destination intersection. Each road has an associated travel time. **Input** - The first line contains three integers, `N` (1 ≤ N ≤ 500), `M` (0 ≤ M ≤ 10000), and `L` (1 ≤ L ≤ 500), representing the number of intersections, the number of one-way roads, and the destination intersection respectively. - The next `M` lines each contain three integers, `u`, `v`, and `w` (0 ≤ u, v < N, 1 ≤ w ≤ 10000) describing a one-way road from intersection `u` to intersection `v` with a travel time of `w`. **Output** - Print a single integer: the number of unique shortest paths from intersection `0` to the destination intersection `L`. **Example** Input ``` 4 5 3 0 1 1 0 2 2 1 2 1 1 3 3 2 3 1 ``` Output ``` 2 ``` In this example, there are two unique shortest paths from intersection `0` to intersection `3`: - `0 -> 1 -> 3` with a total weight of 4 - `0 -> 2 -> 3` with a total weight of 4","solution":"import heapq from collections import defaultdict, deque def count_unique_shortest_paths(N, M, L, roads): # Create adjacency list graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) # Dijkstra\'s algorithm to find shortest paths dist = [float(\'inf\')] * N dist[0] = 0 count = [0] * N count[0] = 1 priority_queue = [(0, 0)] # (distance, node) while priority_queue: d, node = heapq.heappop(priority_queue) if d > dist[node]: continue for neighbor, weight in graph[node]: new_dist = d + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist count[neighbor] = count[node] heapq.heappush(priority_queue, (new_dist, neighbor)) elif new_dist == dist[neighbor]: count[neighbor] += count[node] return count[L] # Example usage: # N = 4 # M = 5 # L = 3 # roads = [(0, 1, 1), (0, 2, 2), (1, 2, 1), (1, 3, 3), (2, 3, 1)] # print(count_unique_shortest_paths(N, M, L, roads)) # Output: 2"},{"question":"In the land of BitVille, the inhabitants only communicate using binary numbers. The most common form of communication involves constructing binary palindromes, which are binary numbers that read the same forwards and backwards (e.g., 101, 1001). The mayor of BitVille is planning a festival and wants to distribute festival passes that contain exactly N bits and are also binary palindromes. The mayor would like to know the total number of such binary palindrome passes possible for a given N. A binary number is a palindrome if it reads the same from left to right as it does from right to left (ignoring leading zeros). Write a program that, given a number of test cases, T, and for each test case, a bit length N, outputs the total number of valid binary palindrome passes. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N, representing the length (in bits) of the binary palindrome. 1 ≤ T ≤ 1000 1 ≤ N ≤ 100000 ------ Output ------ For each test case, output an integer on a new line representing the number of valid N-bit binary palindromes. ----- Sample Input 1 ------ 3 3 4 5 ----- Sample Output 1 ------ 4 4 16 ----- Explanation 1 ------ For the first test case, N = 3, the possible binary palindromes are: 101, 111, 000, 010. For the second test case, N = 4, the possible binary palindromes are: 1001, 1111, 0000, 0110. For the third test case, N = 5, the possible binary palindromes are: 10001, 10101, 11011, 11111, 00000, 00100, 01010, 01110, 10001, 10101, 11011, 11111, 01010, 01110, 00100, 00000.","solution":"def count_binary_palindromes(n): Returns the number of binary palindromes of length n. if n == 1: return 2 # \'0\' and \'1\' if n % 2 == 0: return 2 ** (n // 2) else: return 2 ** ((n // 2) + 1) def count_palindromes_for_multiple_cases(test_cases): results = [] for n in test_cases: results.append(count_binary_palindromes(n)) return results"},{"question":"You are given an integer array `nums` and an integer `target`. Find two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] == target`. Return the indices `i` and `j` such that `i < j`. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. Each test case is represented by two lines: - The first line contains two integers n and target (2 le n le 10^5, -10^9 le target le 10^9), where n is the number of elements in the array. - The second line contains n integers nums[0], nums[1], ..., nums[n-1] (-10^9 le nums[i] le 10^9). It is guaranteed that each test case has exactly one solution. -----Output----- For each test case, print two indices `i` and `j` (0 le i < j < n) such that `nums[i] + nums[j] == target`. -----Example----- Input 3 4 9 2 7 11 15 3 6 3 2 4 2 -1 -1 0 Output 0 1 1 2 0 1","solution":"def two_sum(nums, target): lookup = {} for index, num in enumerate(nums): if target - num in lookup: return lookup[target - num], index lookup[num] = index def solve(test_cases): results = [] for n, target, nums in test_cases: result = two_sum(nums, target) results.append(result) return results # Parsing and formatting solution to fit input and output format def main(): t = int(input().strip()) test_cases = [] for _ in range(t): n, target = map(int, input().split()) nums = list(map(int, input().split())) test_cases.append((n, target, nums)) results = solve(test_cases) for res in results: print(res[0], res[1])"},{"question":"Write a function that takes a string consisting of lowercase alphabetical characters and removes all characters that have appeared before, keeping only their first occurrences. Constraints * The length of the string will not exceed 1000 characters. Input A single string containing lowercase alphabetical characters. Output A single string with duplicate characters removed, keeping only the first occurrence. Example Input \\"programming\\" Output \\"progamin\\" Input \\"hello\\" Output \\"helo\\"","solution":"def remove_duplicates(input_string): Removes duplicates from the input string, keeping only the first occurrences. Parameters: input_string (str): A string containing lowercase alphabetical characters. Returns: str: A string with duplicate characters removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Given a grid of size n x m filled with integers, find the largest sum of a sub-grid of size a x b. You can select any a x b sub-grid from the original n x m grid. -----Input----- The first line contains four integers n, m, a, and b (1 ≤ a ≤ n ≤ 1000, 1 ≤ b ≤ m ≤ 1000) — the dimensions of the grid, and the dimensions of the sub-grid you need to consider for the maximum sum. The next n lines each contain m integers, which describe the grid. Each integer in the grid will range from -10^4 to 10^4. -----Output----- Print a single integer — the largest sum of an a x b sub-grid. -----Examples----- Input 3 3 2 2 1 2 3 4 5 6 7 8 9 Output 28 Input 4 4 2 2 -1 -1 -1 -1 -1 2 2 -1 -1 2 2 -1 -1 -1 -1 -1 Output 8 -----Note----- In the first sample, the 2 x 2 sub-grid with the largest sum is: 5 6 8 9 The sum of this sub-grid is 5 + 6 + 8 + 9 = 28. In the second sample, the 2 x 2 sub-grid with the largest sum is: 2 2 2 2 The sum of this sub-grid is 2 + 2 + 2 + 2 = 8.","solution":"def max_sum_subgrid(grid, n, m, a, b): Finds the largest sum of an a x b sub-grid from the n x m grid. Args: grid (List[List[int]]): 2D list of integers representing the grid. n (int): Number of rows in the grid. m (int): Number of columns in the grid. a (int): Number of rows in the sub-grid. b (int): Number of columns in the sub-grid. Returns: int: The largest sum of an a x b sub-grid. max_sum = float(\'-inf\') for i in range(n - a + 1): for j in range(m - b + 1): current_sum = 0 for ki in range(a): for kj in range(b): current_sum += grid[i + ki][j + kj] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an array A consisting of N integers. A valid segment of this array is defined as any contiguous subarray such that the sum of the elements in the subarray is an even number. You are required to find and return the length of the longest valid segment. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq A_i leq 10^9 (where A_i is the i-th element in the array) -----Input----- Input is given from Standard Input in the following format: - N (the length of the array) - A_1 A_2 A_3 ... A_N (where A_i denotes the i-th element of the array) -----Output----- Print a single integer representing the length of the longest valid segment with an even sum. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 4 -----Explanation----- The longest valid segment with an even sum is [2, 3, 4, 5], which has a length of 4. The sum of this segment is 14, which is even. Other valid segments include [2, 3], with a sum of 5 (valid) and length 2, and [4, 5] with a sum of 9 (valid) and length 2. But the segment [2, 3, 4, 5] is the longest one.","solution":"def longest_valid_segment(n, array): prefix_sum = 0 seen_prefix = {0: -1} max_length = 0 for i in range(n): prefix_sum += array[i] if prefix_sum % 2 == 0: max_length = i + 1 if prefix_sum % 2 in seen_prefix: max_length = max(max_length, i - seen_prefix[prefix_sum % 2]) else: seen_prefix[prefix_sum % 2] = i return max_length"},{"question":"Given a list of integers, write a program that finds the length of the longest subsequence such that all elements in the subsequence are in increasing order and any two consecutive elements in this subsequence have an absolute difference less than or equal to a given threshold ( T ). # Input The input is read from standard input and consists of: - A single integer ( n ) (1 ≤ ( n ) ≤ 1000), the length of the list. - A sequence of ( n ) integers ( A_1, A_2, dots, A_n ) (1 ≤ ( A_i ) ≤ 10000), the elements of the list. - A single integer ( T ) (1 ≤ ( T ) ≤ 1000), the maximum allowed difference between two consecutive elements. # Output The program should output a single integer, the length of the longest subsequence that meets the criteria. # Example Input ``` 6 5 3 4 8 6 7 3 ``` Output ``` 4 ``` Explanation The longest subsequence that meets the criteria is [3, 4, 6, 7], and its length is 4. The differences between consecutive elements are 1, 2, and 1, all of which are less than or equal to ( T = 3 ).","solution":"def longest_subsequence_length(n, A, T): Finds the length of the longest subsequence such that all elements are in increasing order and any two consecutive elements have an absolute difference less than or equal to a given threshold T. Args: n : int : length of the list A. A : list of int : the list of integers. T : int : the maximum allowed difference. Returns: int : the length of the longest subsequence. if n == 0: return 0 dp = [1] * n # dp[i] will hold the length of the longest subsequence ending with A[i] for i in range(1, n): for j in range(i): if A[j] < A[i] and abs(A[i] - A[j]) <= T: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Read input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) A = list(map(int, data[1:n+1])) T = int(data[n+1]) # Find and print the length of the longest subsequence result = longest_subsequence_length(n, A, T) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function, `most_frequent_digit`, that takes an integer `n` (1 ≤ n ≤ 10^18) and returns the most common digit in the integer. If there is a tie for the most common digit, return the largest digit among those tied. For example: ```python most_frequent_digit(122333) -> 3 # \'3\' appears most frequently most_frequent_digit(9876543210) -> 9 # All digits appear once, return the largest digit most_frequent_digit(1122334455) -> 5 # \'1\', \'2\', \'3\', \'4\', and \'5\' appear twice, return the largest digit among them most_frequent_digit(1) -> 1 # Only one digit, return it most_frequent_digit(99990000) -> 9 # \'9\' and \'0\' appear four times, return the larger digit \'9\' ``` Write your function to handle large integers efficiently.","solution":"def most_frequent_digit(n): Returns the most common digit in the integer n. If there is a tie for the most common digit, returns the largest digit among those tied. from collections import Counter # Convert the number to a string to iterate over digits digits = str(n) # Use Counter to count occurrences of each digit digit_counts = Counter(digits) # Find the maximum count max_count = max(digit_counts.values()) # Collect all digits with the maximum count most_frequent_digits = [digit for digit, count in digit_counts.items() if count == max_count] # Return the largest digit among the most frequent ones return int(max(most_frequent_digits))"},{"question":"You are given an integer array a of non-negative integers. Your task is to calculate the maximum sum of a subset of a such that no two elements in the subset are adjacent in the original array a. For example, if the array is [3, 2, 5, 10, 7], the subset {3, 10} gives the maximum sum of 13, while subsets {3, 5, 7} and {2, 10} produce sums of 15 and 12, respectively. The array a might be quite long, but perhaps there is a clever way of computing the desired subset sum without having to look at all possible subsets. -----Input----- The first line contains one integer n (1 le n le 100) — the length of the array a. The second line contains n non-negative integers separated by spaces, representing the elements of the array a (0 le a_i le 1000). -----Output----- Print a single integer — the maximum sum of a subset of a with the properties described. -----Examples----- Input 5 3 2 5 10 7 Output 15 Input 4 1 2 9 4 Output 10 Input 3 8 1 3 Output 11 -----Note----- In the first example, the maximum subset is {3, 5, 7} which sums to 15. Note that if you picked 2 you cannot pick either 3 or 5 as they are adjacent to 2. In the second example, the maximum subset is {1, 9} which sums to 10. In the third example, the optimal subset is {8, 3} as picking those elements results in the maximum sum of 11.","solution":"def max_subset_sum(a): Returns the maximum sum of a non-adjacent subset of a. n = len(a) if n == 0: return 0 if n == 1: return a[0] # Initializing memory array for dynamic programming dp = [0] * n # Base cases dp[0] = a[0] dp[1] = max(a[0], a[1]) # Fill the dp array for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + a[i]) # The last entry will have the answer return dp[-1]"},{"question":"Chef wants to optimize the cooking process in his kitchen. He has several dishes to prepare, each with a specific cooking duration. Chef can only cook one dish at a time but can start cooking a new dish immediately after finishing the previous one. Given a list of dishes with their cooking durations, Chef wants to know the minimum possible time required to finish cooking all dishes if he can choose the order in which to cook them. Help Chef by writing a program that calculates the minimum total cooking time, assuming that he can rearrange the cooking order to minimize the waiting time of the dishes. -----Input:----- - The first line contains an integer n, the number of dishes. - The second line contains n integers, the cooking durations of each dish. -----Output:----- - A single integer, the minimum total cooking time needed to complete all dishes. -----Constraints----- - 1 leq n leq 1000 - 1 leq d_i leq 10^4, where d_i is the cooking duration of each dish. -----Sample Input:----- 4 4 2 3 7 -----Sample Output:----- 27 -----EXPLANATION:----- To minimize the total cooking time, Chef should cook the shorter dishes first. By sorting the cooking durations, the optimal cooking order is [2, 3, 4, 7]. The total cooking time is calculated as follows: - Start with the shortest dish (2): 2 - The next dish (3) starts after the first: 2 + 3 = 5 - The next dish (4) starts after the second: 5 + 4 = 9 - The last dish (7) starts after the third: 9 + 7 = 16 Total cooking time = 2 + 5 + 9 + 16 = 32","solution":"def minimum_total_cooking_time(durations): Calculate the minimum total cooking time by sorting the durations and processing them in ascending order. Parameters: durations (list of int): List of cooking durations of each dish. Returns: int: The minimum total cooking time. durations.sort() total_time = 0 current_time = 0 for duration in durations: current_time += duration total_time += current_time return total_time # Example usage: # durations = [4, 2, 3, 7] # print(minimum_total_cooking_time(durations)) # Output should be 32"},{"question":"You are given a numeric string s consisting of digits 0 to 9. Define the frequency of a digit d in s as the percentage (rounded to the nearest integer) of how many times d appears in s. Note that the frequency of a digit may be a number from 0 to 100 (both inclusive). Determine the smallest possible percentage value p, such that every digit that appears in s has a frequency at least p. If multiple values of p satisfy the condition, find the maximum such value. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains the numeric string s of length n. Output Print a single integer p — the maximum possible value for the smallest frequency percentage of a digit that appears in s. Examples Input 5 12345 Output 20 Input 10 1111100000 Output 50","solution":"def max_smallest_frequency_percentage(n, s): from collections import Counter import math # Count the frequency of each digit in the string freq = Counter(s) # Calculate the smallest possible percentage value p min_freq = min(freq.values()) p = math.ceil((min_freq / n) * 100) return p"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to find the total sum of values of all nodes within the tree where the node value is greater than or equal to a given integer \'k\'. -----Input----- The first line of input contains an integer \'k\' (1 le k le 10^9). The second line contains the integer values of the nodes in the tree in level-order traversal format (where `null` indicates the absence of a node), separated by spaces. The total number of nodes in the tree, including `null` placeholders for missing nodes, is at most 10^4. -----Output----- Print a single integer, the sum of the values of all nodes where the node value is greater than or equal to \'k\'. If there are no such nodes, print 0. -----Examples----- Input 5 5 3 8 1 4 7 9 Output 29 Input 15 20 10 30 5 null null 35 Output 85 Input 7 1 2 3 4 5 6 7 Output 7","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree_from_list(values): if not values: return None root = TreeNode(values[0]) queue = [root] i = 1 while i < len(values): current = queue.pop(0) if values[i] is not None: current.left = TreeNode(values[i]) queue.append(current.left) i += 1 if i < len(values) and values[i] is not None: current.right = TreeNode(values[i]) queue.append(current.right) i += 1 return root def sum_of_values_greater_than_k(root, k): if not root: return 0 queue = [root] total_sum = 0 while queue: node = queue.pop(0) if node.val >= k: total_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return total_sum"},{"question":"# Description: You are given an array of integers (`arr`) and a positive integer `k`. Your task is to find the maximum average sum of any contiguous subarray of length `k`. For example: ``` Given arr = [1,12,-5,-6,50,3] and k = 4, should return 12.75 because the subarray [12,-5,-6,50] has the maximum average (12 + (-5) + (-6) + 50) / 4 = 12.75. ``` # Note: - `k` is always positive and will not be larger than the length of the array. - The array contains at least one element. - The array may contain negative numbers. # Some Examples ``` maxAverage([1,12,-5,-6,50,3], 4) === 12.75 maxAverage([1,2,3,4,5], 2) === 4.5 maxAverage([-1,-2,-3,-4,-5], 2) === -1.5 maxAverage([1], 1) === 1.0 maxAverage([5,5,5,5], 2) === 5.0 ```","solution":"def maxAverage(arr, k): Returns the maximum average sum of any contiguous subarray of length k. n = len(arr) if k > n: return 0 max_sum = curr_sum = sum(arr[:k]) for i in range(k, n): curr_sum += arr[i] - arr[i - k] max_sum = max(max_sum, curr_sum) return max_sum / k"},{"question":"You are given an array of integers and two numbers, X and K. You need to find the K\'th occurrence of the integer X in the array. If X does not occur K times, output -1. Input First line contains T, the number of test cases. Each test case starts with an integer N, the size of the array, followed by N integers representing the elements of the array. The next two lines contain the integers X and K respectively. Output For each test case, print the position of K\'th occurrence of X. If X does not occur K times, output -1. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ array elements, X ≤ 10^9 1 ≤ K ≤ N Note: Large input files. Consider using scanf for reading input. SAMPLE INPUT 2 5 1 2 3 4 2 2 2 6 1 1 1 1 1 1 1 7 SAMPLE OUTPUT 5 -1 Explanation Test case 1: The integer 2 is found at positions [2, 5]. The 2nd occurrence is at position 5. Test case 2: The integer 1 occurs 6 times in the array, but we are seeking the 7th occurrence, which does not exist. Hence, the output is -1.","solution":"def find_kth_occurrence(t, test_cases): results = [] for i in range(t): n, arr, x, k = test_cases[i] count = 0 position = -1 for idx in range(n): if arr[idx] == x: count += 1 if count == k: position = idx + 1 break results.append(position) return results # Example of test_cases input structure # t = 2 # test_cases = [ # (5, [1, 2, 3, 4, 2], 2, 2), # (6, [1, 1, 1, 1, 1, 1], 1, 7) # ]"},{"question":"You are given a rectangular matrix of n rows and m columns filled with non-negative integers. Your task is to find a \\"peak\\" element in the matrix. A cell (i, j) is considered a peak if it is greater than or equal to all of its four possible neighbors (left, right, up, down). For edge cells, you need to consider only the valid neighbors. Print the value of the peak element. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), the number of rows and columns in the matrix. The following n lines each contain m integers representing the elements of the matrix (0 ≤ matrix[i][j] ≤ 10^9). Output Output a single integer denoting the value of a peak element. Example Input 3 3 10 20 15 21 30 14 7 16 32 Output 30 Note In the given example, the peak element is 30 located at (2, 2) because it is greater than its neighbors 20, 15, 14, and 21.","solution":"def find_peak_element(matrix): Finds a peak element in the given matrix. A peak element is one which is not smaller than its neighbors. Args: matrix (list of list of int): 2D matrix filled with non-negative integers Returns: int: The value of one of the peak elements in the matrix n = len(matrix) m = len(matrix[0]) def is_peak(i, j): # Check up if i > 0 and matrix[i][j] < matrix[i-1][j]: return False # Check down if i < n-1 and matrix[i][j] < matrix[i+1][j]: return False # Check left if j > 0 and matrix[i][j] < matrix[i][j-1]: return False # Check right if j < m-1 and matrix[i][j] < matrix[i][j+1]: return False return True # Iterate over the entire matrix to find a peak element for i in range(n): for j in range(m): if is_peak(i, j): return matrix[i][j] return None # Just a safeguard, there should always be a peak element"},{"question":"A group of students is planning a hiking trip on some treacherous terrain. They need to calculate the maximum number of safe houses they can visit along their route. Safe houses are placed at various points along a line representing the hiking route. Each point on the route can either be safe (\'S\') or dangerous (\'D\'). As they proceed, the students want to ensure they visit the maximum number of consecutive safe houses starting from any point on the route until they encounter a dangerous point. Given the initial hiking route, determine the maximum number of consecutive safe houses that can be visited starting from any point on the route. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of characters \'S\' and \'D\' only, representing the hiking route. Output For each test case, print in a new line the maximum number of consecutive safe houses that can be visited starting from any point on the route. Constraints 1 ≤ T ≤ 100 1 ≤ length of string S ≤ 100000 SAMPLE INPUT 3 SSSDSS DSSDSDSSS SSSSD SAMPLE OUTPUT 3 3 4 Explanation For the first test case, the optimal choices are either starting from the beginning where there are 3 consecutive \'S\'s or starting after the first \'D\', which would result in only 2 consecutive \'S\'s. Therefore, the maximum number of consecutive safe houses is 3. For the second test case, the routes from which students can get the longest streaks of consecutive \'S\'s are either \'D\' followed by \'SS\' or \'SD\' followed by \'SSS\', making the maximum consecutive \'S\'s visited equal to 3. For the third test case, starting from any point gives consecutive safe houses as \'SSSSD\', making the maximum consecutive \'S\'s visited equal to 4.","solution":"def max_consecutive_safe_houses(test_cases): results = [] for route in test_cases: max_safe = 0 current_safe = 0 for char in route: if char == \'S\': current_safe += 1 if current_safe > max_safe: max_safe = current_safe else: current_safe = 0 results.append(max_safe) return results"},{"question":"Tina is excited about her new collection of quirky bookmarks. She uses these bookmarks to mark her favorite pages in various books she\'s reading. Each bookmark has a unique design, and she can attach a variable number of bookmarks on any book page. Tina decides to keep a log of which bookmark she places on which page number in each book and can update this log as she wishes to add more bookmarks or change existing ones. Given Tina\'s actions, her objective is to periodically check the unique list of bookmarks she has used across all books up to that point. To track Tina’s log accurately, you should execute commands to add or update bookmarks and list all unique bookmark designs used so far whenever Tina wishes to check. ----- Input ------ The first line contains a single integer M denoting the number of actions. Then M lines follow. Each line starts with an integer. If the integer is 0, that means Tina wants to check her list of unique bookmarks used so far. Otherwise, the integer denotes the page number in the book that she is logging the bookmark for. This is followed by a string denoting the book name and another string representing the bookmark design. ----- Output ------ For each 0 in the input, output a single line listing all the unique bookmarks used up to that point in alphabetical order, separated by a space. If no bookmarks have been logged yet, output \\"None\\". ----- Constraints ------ 1 ≤ M ≤ 1,000,000 1 ≤ page number ≤ 1,000,000 The name of each book and bookmark design consists of between 1 and 15 characters \'a\' - \'z\'. Whenever she wants to check the unique bookmark list, she has logged at least one bookmark before. ----- Sample Input 1 ------ 7 12 harrypotter griffin 25 lotr dragon 40 hobbit sword 0 19 harrypotter phoenix 0 30 dracula bat 0 ----- Sample Output 1 ------ dragon griffin sword dragon griffin phoenix sword bat dragon griffin phoenix sword ----- explanation 1 ------ - For the first `0`: Currently, there are 3 bookmarks recorded. The unique bookmarks in alphabetical order: griffin, dragon, sword. - For the second `0`: After adding another bookmark (phoenix), the unique bookmarks recorded are: griffin, dragon, sword, phoenix. - For the third `0`: Another new bookmark (bat) is added, resulting in: griffin, dragon, sword, phoenix, bat arranged in alphabetical order.","solution":"def track_bookmarks(inputs): unique_bookmarks = set() results = [] for line in inputs: parts = line.split() if parts[0] == \'0\': if unique_bookmarks: results.append(\\" \\".join(sorted(unique_bookmarks))) else: results.append(\\"None\\") else: bookmark_design = parts[2] unique_bookmarks.add(bookmark_design) return results"},{"question":"Maximizing the Subarray Sum: You are given an array of integers. Your task is to delete exactly one element from the array so that the sum of the remaining elements is maximized. Write a function that takes the array as input and returns the maximum possible sum after deleting exactly one element. Input: First line of the input contains a single integer T denoting the number of test cases. Each test case consists of two lines. The first line contains an integer N denoting the number of elements in the array. The second line contains N space-separated integers representing the array elements. Output: For each test case, output the maximum possible sum after deleting exactly one element from the array. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 100 -1000 ≤ array elements ≤ 1000 SAMPLE INPUT 1 5 1 -2 3 -1 2 SAMPLE OUTPUT 5 Explanation: By deleting -2, we get the array [1, 3, -1, 2] which sums to 5. This is the maximum possible sum after deleting one element.","solution":"def max_sum_after_deleting_one(arr): This function takes an array of integers and returns the maximum possible sum after deleting exactly one element. total_sum = sum(arr) max_sum = float(\'-inf\') for num in arr: current_sum = total_sum - num max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = max_sum_after_deleting_one(arr) results.append(result) return results"},{"question":"Maria likes numbers that can be represented as the sum of consecutive integers. Given an integer n, she wants to know how many distinct ways there are to represent n as the sum of one or more consecutive positive integers. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first and only line of each test case contains a single integer n. ------ Output ------ For each test case, print a single line containing one integer — the number of ways to represent n as the sum of consecutive positive integers. ------ Constraints ------ 1 ≤ T ≤ 200 1 ≤ n ≤ 10^{12} ----- Sample Input 1 ------ 2 15 10 ----- Sample Output 1 ------ 4 2 ----- explanation 1 ------ Example case 1: The number 15 can be represented as: - 15 = 15 - 15 = 7 + 8 - 15 = 4 + 5 + 6 - 15 = 1 + 2 + 3 + 4 + 5 Example case 2: The number 10 can be represented as: - 10 = 10 - 10 = 1 + 2 + 3 + 4","solution":"def count_ways_to_sum(n): Returns the number of distinct ways to represent `n` as the sum of one or more consecutive positive integers. count = 0 k = 1 while k * (k + 1) // 2 < n: k += 1 while k > 0: if (n - k * (k + 1) // 2) % k == 0: count += 1 k -= 1 return count def process_test_cases(T, cases): results = [] for case in cases: results.append(count_ways_to_sum(case)) return results"},{"question":"Given a list of strings, check if any of the strings can be rearranged to form a palindrome. Return \\"YES\\" if it is possible for any string in the list to be rearranged into a palindrome and \\"NO\\" otherwise. A string can be rearranged into a palindrome if at most one of its characters has an odd count, as the middle character in the palindrome can be unpaired if needed. Function Description Complete the canFormPalindrome function in the editor below. canFormPalindrome has the following parameter(s): - string strings[m]: an array of strings Returns - string: \\"YES\\" if any string(s) in the input list can be rearranged into a palindrome, otherwise \\"NO\\" Input Format - The first line contains m, the number of strings. - The next m lines each contain a string to be checked. Constraints - 1 <= m <= 100 - 1 <= length of each string <= 100 - Each string consists of lowercase letters in the range ascii[a-z] Output Format For each string in the list, on a separate line, print \\"YES\\" if it can be rearranged to form a palindrome or \\"NO\\" otherwise. Sample Input ``` 2 carrace daily ``` Sample Output ``` YES NO ``` Explanation - The string \\"carrace\\" can be rearranged to form the palindrome \\"racecar\\". - The string \\"daily\\" cannot be rearranged to form a palindrome.","solution":"def canFormPalindrome(strings): def canBePalindrome(s): char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True for s in strings: if canBePalindrome(s): return \\"YES\\" return \\"NO\\""},{"question":"Given an array of strings words, return the total number of characters in the strings that appear exactly twice in the array. Example 1: Input: words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"kiwi\\", \\"banana\\"] Output: 11 Explanation: \\"apple\\" appears twice with 5 characters. \\"banana\\" appears twice with 6 characters. Total characters = 5 + 6 = 11 Example 2: Input: words = [\\"hello\\", \\"world\\", \\"hello\\", \\"coding\\"] Output: 5 Explanation: Only \\"hello\\" appears twice with 5 characters. Constraints: 1 <= words.length <= 200 1 <= words[i].length <= 100","solution":"def total_characters_of_twice_occurrence(words): Returns the total number of characters in the strings that appear exactly twice in the array. from collections import Counter # Count the occurrences of each word word_counts = Counter(words) # Iterate through the counts and sum the lengths of the words that appear exactly twice total_characters = sum(len(word) for word, count in word_counts.items() if count == 2) return total_characters"},{"question":"Given an N x N matrix representing a Minesweeper game board, write a function to reveal all safe cells starting from a given cell. A cell is safe if its value is \'E\'. A cell is dangerous if its value is \'M\' (mine). Your function should reveal safe cells recursively starting from the given cell according to the following rules: 1. If the current cell is a mine (\'M\'), the game is over, and nothing more is revealed. 2. If the current cell is a safe cell (\'E\') adjacent to one or more mines, change its value to the number of adjacent mines (\'1\' to \'8\'). 3. If the current cell is a safe cell (\'E\') not adjacent to any mines, change its value to \'B\', and recursively reveal its adjacent cells until no more cells can be revealed. The input to your function will be the board as a 2D array and a start position as a list [row, column]. The output should be the updated board reflecting the revealed cells. Example 1: Input: board = [[\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'M\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\'], [\'E\', \'E\', \'E\', \'E\', \'E\']] start = [3, 0] Output: [[\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'M\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\']] Example 2: Input: board = [[\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'M\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\']] start = [1, 2] Output: [[\'B\', \'1\', \'E\', \'1\', \'B\'], [\'B\', \'1\', \'M\', \'1\', \'B\'], [\'B\', \'1\', \'1\', \'1\', \'B\'], [\'B\', \'B\', \'B\', \'B\', \'B\']] Constraints: 1. The size of the board is in the range [1x1, 50x50]. 2. The input board will have at least one safe cell \'E\'. 3. The start position will always be within the range of the board and is guaranteed not to be a mine initially. 4. There are no isolated clusters of mines; every safe cell has at least one connected path to other safe cells. Implement the `updateBoard` function: ```python def updateBoard(board: List[List[str]], start: List[int]) -> List[List[str]]: # Implementation here ```","solution":"from typing import List def updateBoard(board: List[List[str]], start: List[int]) -> List[List[str]]: def get_adjacent_cells(x, y): for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(board) and 0 <= ny < len(board[0]): yield nx, ny def count_mines(x, y): return sum(1 for nx, ny in get_adjacent_cells(x, y) if board[nx][ny] == \'M\') def dfs(x, y): if board[x][y] != \'E\': return num_mines = count_mines(x, y) if num_mines > 0: board[x][y] = str(num_mines) else: board[x][y] = \'B\' for nx, ny in get_adjacent_cells(x, y): dfs(nx, ny) x, y = start if board[x][y] == \'M\': return board dfs(x, y) return board"},{"question":"Sarah is passionate about palindromes. A palindrome is a string that reads the same forward and backward. She wants to create new strings by rearranging the characters of a given string to form a palindrome or determine if it is impossible. Your task is to help Sarah by constructing a palindrome from the given string or stating that it is impossible. If multiple palindrome arrangements are possible, return the one that is lexicographically smallest. INPUT The first line of the input is an integer T, the number of test cases. T is not larger than 100. Each test case consists of one line, which is a string S consisting of lowercase English letters. The length of S is not more than 1000. OUTPUT For each test case, output the lexicographically smallest palindrome that can be formed from the given string. If it is impossible to form any palindrome, output \\"Impossible\\". SAMPLE INPUT 2 civic aabbcc SAMPLE OUTPUT civic abccba","solution":"from collections import Counter def can_form_palindrome(s): Helper function to determine if a palindrome can be formed from the given string. counts = Counter(s) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 def construct_palindrome(s): Function to construct the lexicographically smallest palindrome from the given string. If it is not possible, return \\"Impossible\\". if not can_form_palindrome(s): return \\"Impossible\\" counts = Counter(s) half = [] middle = \\"\\" for char in sorted(counts): count = counts[char] if count % 2 != 0: middle = char half.append(char * (count // 2)) half_str = \\"\\".join(half) return half_str + middle + half_str[::-1] def process_input(input_lines): Process input from a list of strings and return the output for each test case. T = int(input_lines[0]) results = [] for i in range(1, T + 1): s = input_lines[i].strip() results.append(construct_palindrome(s)) return results"},{"question":"You have been given a tree with n nodes and n-1 edges. Each node is numbered from 1 to n. Initially, all nodes have a value of zero. Your task is to perform a series of operations to modify the values of the nodes and answer some queries. There are two types of operations you can perform: 1. Add x to the value of node i. 2. Query the sum of the values in the subtree rooted at node i. Note: The subtree of a node i contains node i and all its descendants. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of nodes in the tree and the number of queries. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n) — meaning there is an edge between nodes u and v. Each of the next q lines contains one of the following: - \\"add i x\\" (1 ≤ i ≤ n, -10^9 ≤ x ≤ 10^9) — meaning you need to add x to the value of node i. - \\"query i\\" (1 ≤ i ≤ n) — meaning you need to output the sum of the values in the subtree rooted at node i. Output For each query of the second type, output the answer on a new line. Examples Input: 5 5 1 2 1 3 1 4 4 5 add 2 10 add 4 5 query 1 query 4 query 5 Output: 15 5 0 Note In the example, the tree structure looks like this: ``` 1 / | 2 3 4 5 ``` After performing the operations: 1. add 2 10: nodes = [0, 10, 0, 0, 0] 2. add 4 5: nodes = [0, 10, 0, 5, 0] 3. query 1: sum of the subtree rooted at node 1 is 15 (including all nodes). 4. query 4: sum of the subtree rooted at node 4 is 5 (including itself and its child node 5, which has value 0). 5. query 5: sum of the subtree rooted at node 5 is 0 (it has no child nodes and its own value is 0).","solution":"class Tree: def __init__(self, n): self.n = n self.values = [0] * (n + 1) self.children = [[] for _ in range(n + 1)] self.subtree_sum = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, u, v): self.children[u].append(v) self.children[v].append(u) def add_value(self, i, x): self.values[i] += x def dfs(self, node): self.visited[node] = True total = self.values[node] for child in self.children[node]: if not self.visited[child]: total += self.dfs(child) self.subtree_sum[node] = total return total def calculate_subtree_sums(self): self.visited = [False] * (self.n + 1) self.dfs(1) def query(self, i): if self.subtree_sum[1] == 0: # Recursively calculate only if not already done self.calculate_subtree_sums() return self.subtree_sum[i] def process_operations(n, edges, operations): tree = Tree(n) for u, v in edges: tree.add_edge(u, v) results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": i = int(parts[1]) x = int(parts[2]) tree.add_value(i, x) tree.subtree_sum = [0] * (n + 1) # Reset subtree sums since values have changed elif parts[0] == \\"query\\": i = int(parts[1]) results.append(tree.query(i)) return results"},{"question":"You are given a string containing only the characters \'X\' and \'O\'. Your task is to count the maximum number of consecutive \'X\' characters in the string. Return the count of the longest consecutive \'X\' sequence. ``` findMaxConsecutiveX(inputString) findMaxConsecutiveX(\\"OXXXOXOXX\\") The longest consecutive \'X\' sequence is 3 Therefore answer is 3 findMaxConsecutiveX(\\"XXXXXOOX\\") The longest consecutive \'X\' sequence is 5 Therefore answer is 5 findMaxConsecutiveX(\\"OXOXOXOXO\\") The longest consecutive \'X\' sequence is 1 Therefore answer is 1 ``` The input string length can be between 1 and 10^5.","solution":"def findMaxConsecutiveX(inputString): Returns the count of the longest consecutive \'X\' sequence in the input string. max_count = 0 current_count = 0 for char in inputString: if char == \'X\': current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Chef loves programming competitions and wants to practice solving problems more frequently. He decides to spend a certain number of days, D, practicing coding every day for M minutes. How many minutes in total will Chef spend coding over the D days? ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two integers D and M, as described in the problem statement. ------ Output Format ------ For each test case, output the total number of minutes Chef will spend coding over the D days. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ D ≤ 365 1 ≤ M ≤ 1440 ----- Sample Input 1 ------ 3 1 60 2 30 7 15 ----- Sample Output 1 ------ 60 60 105 ----- Explanation 1 ------ Test case 1: Chef will code for 1 day at 60 minutes per day, so the total is 1 times 60 = 60 minutes. Test case 2: Chef will code for 2 days at 30 minutes per day, so the total is 2 times 30 = 60 minutes. Test case 3: Chef will code for 7 days at 15 minutes per day, so the total is 7 times 15 = 105 minutes.","solution":"def total_coding_minutes(test_cases): results = [] for D, M in test_cases: total_minutes = D * M results.append(total_minutes) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T+1]] return test_cases"},{"question":"We have N pairs of socks arranged in a row, numbered 1, 2, 3, ..., 2N from left to right, where N is an even number. Each pair consists of a left sock and a right sock, but the order in which they appear is not known. Your task is to determine the position of every left sock and every right sock, by asking at most 200 questions of the following form: * You choose any single sock and ask whether it is a left sock or a right sock. After finding all the positions correctly, you should output the positions of all left socks and right socks separately in the original order they appeared. Constraints * 1 leq N leq 50 * N is an even number. * * * Example Input: ``` 6 RLRLLR ``` Output: ``` Left socks: 2, 4, 5 Right socks: 1, 3, 6 ```","solution":"def identify_socks(socks): Returns the positions of left and right socks. Args: socks (str): A string representing the arrangement of socks, where \'L\' indicates a left sock and \'R\' indicates a right sock. Returns: tuple: A tuple containing two lists - the positions of left socks and the positions of right socks. left_socks = [] right_socks = [] for position, sock in enumerate(socks, start=1): if sock == \'L\': left_socks.append(position) else: right_socks.append(position) return left_socks, right_socks"},{"question":"A company has a unique door security system which requires a special passcode to unlock. The passcode can be determined using the following steps: 1. A list of non-negative integers will be given. For each integer, if it is divisible by 2, replace it with \\"Foo\\", if it is divisible by 3 replace it with \\"Bar\\", and if it is divisible by both, replace it with \\"FooBar\\". 2. Concatenate the modified list of strings and return this concatenated string as the passcode. Write a function `generate_passcode` that takes a list of non-negative integers and returns the passcode according to the described rules. # Input - A list of non-negative integers `nums`. # Output - A string representing the passcode. # Function Signature ```python def generate_passcode(nums: List[int]) -> str: ``` # Example ```python assert generate_passcode([1, 2, 3, 4, 5, 6]) == \\"1FooBarFoo5FooBar\\" assert generate_passcode([2, 3, 5, 7]) == \\"FooBar57\\" ```","solution":"from typing import List def generate_passcode(nums: List[int]) -> str: Generates a passcode by replacing numbers with strings according to the rules: - Replace numbers divisible by 2 with \\"Foo\\". - Replace numbers divisible by 3 with \\"Bar\\". - Replace numbers divisible by both 2 and 3 with \\"FooBar\\". - Leave other numbers unchanged. result = \\"\\" for num in nums: if num % 6 == 0: result += \\"FooBar\\" elif num % 2 == 0: result += \\"Foo\\" elif num % 3 == 0: result += \\"Bar\\" else: result += str(num) return result"},{"question":"You are given a positive integer n. Your task is to construct a string s of length n such that for any two non-overlapping substrings a and b of the same length, the number of differing characters between a and b is at least half of the length of a (rounded up). If there are multiple solutions, you can return any of them. For example, if n = 5, one possible string is \\"10101\\". Any two non-overlapping substrings of the same length will have at least half of their characters differing. Input The first line contains a single integer n (1 ≤ n ≤ 100 000). Output Print a string s of length n, consisting of symbols \\"0\\" and \\"1\\" that meets the specified condition. If there are multiple solutions, you can return any of them. Examples Input 4 Output 1010 Input 6 Output 110011 Note In the first test case, the string \\"1010\\" ensures that any two non-overlapping substrings of the same length differ by at least half of their characters. For instance, the substrings \\"10\\" and \\"01\\" differ in both characters. Another example could be \\"0101\\". In the second test case, the string \\"110011\\" also satisfies the condition. For any two non-overlapping substrings of the same length, at least half of their characters will be different. Another valid output could have been \\"001100\\".","solution":"def construct_string(n): Constructs a string of length n such that for any two non-overlapping substrings a and b of the same length, the number of differing characters between a and b is at least half of the length of a (rounded up). s = \\"\\" for i in range(n): s += \'0\' if i % 2 == 0 else \'1\' return s"},{"question":"A company wants to minimize the cost of painting its offices. Each office needs to be painted either red, green, or blue. The cost of painting a specific office in each color is different and varies from office to office. Given a list of costs for painting each office, determine the minimum cost to paint all the offices such that no two adjacent offices have the same color. The costs are represented by a 2D list `costs` where `costs[i][0]` is the cost of painting the ith office red, `costs[i][1]` is the cost of painting the ith office green, and `costs[i][2]` is the cost of painting the ith office blue. ------ Input Format ------ - The first line of input will be a single integer `n`, the number of offices. - The next `n` lines will each contain three integers, representing the cost of painting the office in red, green, and blue respectively. ------ Output Format ------ - Output a single integer, the minimum cost to paint all offices with the given constraints. ------ Constraints ------ - 1 ≤ n ≤ 100 - 1 ≤ costs[i][j] ≤ 1000 for all valid (i) and (j) ------ Sample Input 1 ------ 3 17 2 17 16 16 5 14 3 19 ------ Sample Output 1 ------ 10 ------ Explanation ------ Paint Office 1 green, Office 2 blue, and Office 3 green for a total cost of 2 + 5 + 3 = 10. ------ Sample Input 2 ------ 2 5 8 6 19 14 13 ------ Sample Output 2 ------ 18 ------ Explanation ------ Paint Office 1 red and Office 2 blue for a total cost of 5 + 13 = 18.","solution":"def min_cost_to_paint_offices(costs): Returns the minimum cost to paint all offices such that no two adjacent offices have the same color. :param costs: List of lists, where costs[i][0], costs[i][1], and costs[i][2] are the costs of painting the ith office red, green, and blue respectively. :return: Minimum cost to paint all offices with the given constraints. if not costs: return 0 n = len(costs) # Initialize the previous costs as the costs of the first office prev_red, prev_green, prev_blue = costs[0] for i in range(1, n): current_red = costs[i][0] + min(prev_green, prev_blue) current_green = costs[i][1] + min(prev_red, prev_blue) current_blue = costs[i][2] + min(prev_red, prev_green) # Update the previous costs to the current costs for the next iteration prev_red, prev_green, prev_blue = current_red, current_green, current_blue # The answer will be the minimum of the last computed costs return min(prev_red, prev_green, prev_blue)"},{"question":"Given a list of integers, write a function that finds the median of a sublist within the given list. The sublist is defined by two indices, `start` and `end`, where `start` is the starting index (inclusive) and `end` is the ending index (exclusive). The function should return the median of the sublist. The median is defined as follows: - If the length of the sublist is odd, the median is the middle element. - If the length of the sublist is even, the median is the average of the two middle elements. Your task is to complete the function `sublist_median(arr, start, end)`. # Input - `arr`: A list of integers. - `start`: An integer representing the starting index of the sublist (inclusive). - `end`: An integer representing the ending index of the sublist (exclusive). # Output - Return the median of the sublist as a float. # Constraints - 0 ≤ `start` < `end` ≤ len(arr) - The length of the sublist will be at least 1. # Examples ``` sublist_median([1, 3, 4, 2, 7, 5, 8, 6], 1, 5) ==> 3.5 sublist_median([10, 20, 30, 40, 50], 1, 4) ==> 30.0 sublist_median([5, 3, 1, 2, 4], 0, 3) ==> 3.0 ``` # Note - In the first example, the sublist is [3, 4, 2, 7]. The sorted version of the sublist is [2, 3, 4, 7], so the median is (3+4)/2 = 3.5. - In the second example, the sublist is [20, 30, 40]. The median is 30 because the number of elements is odd. - In the third example, the sublist is [5, 3, 1]. The sorted version of the sublist is [1, 3, 5], so the median is 3 (the middle element).","solution":"def sublist_median(arr, start, end): Finds the median of the sublist within the given list defined by start and end indices. Parameters: arr (list): A list of integers. start (int): The starting index of the sublist (inclusive). end (int): The ending index of the sublist (exclusive). Returns: float: The median of the sublist. sublist = arr[start:end] sublist.sort() n = len(sublist) if n % 2 == 1: # If the length of the sublist is odd, return the middle element return float(sublist[n // 2]) else: # If the length of the sublist is even, return the average of the two middle elements mid1 = sublist[n // 2 - 1] mid2 = sublist[n // 2] return (mid1 + mid2) / 2.0"},{"question":"In the kingdom of Vadaria, there are n villages connected by a series of roads. Each road connects exactly two villages and can be traveled in both directions. The king of Vadaria wants to ensure that his messengers can travel between any pair of villages as quickly as possible, without needing to use too many intersections. To accomplish this, he needs to find the minimal number of roads that need to be repaired to form a single path that visits each village exactly once, starting and ending at two distinct villages. This path is known as a Hamiltonian path. Your task is to determine the minimal number of roads that need to be repaired to form a Hamiltonian path in the given set of villages. -----Input----- The first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ 1225) — the number of villages and the number of roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a road connecting village u and village v. -----Output----- Print a single integer — the minimal number of roads that need to be repaired to form a Hamiltonian path. If it is impossible to form such a path, print \\"-1\\". -----Examples----- Input 3 3 1 2 2 3 3 1 Output 0 Input 4 3 1 2 2 3 3 4 Output 1 Input 4 2 1 2 3 4 Output -1 -----Note----- In the first example, the given graph already contains a Hamiltonian path: 1-2-3. In the second example, adding the road 1-4 or 1-3 would form the Hamiltonian path: 1-2-3-4 or 1-3-4-2. In the third example, it is not possible to connect all villages in a single path that visits each village exactly once.","solution":"def minimal_repair_roads(n, m, roads): import networkx as nx G = nx.Graph() G.add_nodes_from(range(1, n + 1)) G.add_edges_from(roads) if not nx.is_connected(G): return -1 degrees = [G.degree(node) for node in G.nodes] odd_degrees = sum(degree % 2 != 0 for degree in degrees) if odd_degrees == 0: return 0 elif odd_degrees == 2: return 1 else: return (odd_degrees - 2) // 2 # Example usage n, m = 4, 3 roads = [(1, 2), (2, 3), (3, 4)] print(minimal_repair_roads(n, m, roads)) # Output should be 1"},{"question":"You are a game developer working on a 2D platformer. You need to implement a physics system to handle the player\'s position during gameplay. The game world is represented by a 2D grid, where each cell can be either solid ground (denoted as \'#\') or empty space (denoted as \'.\'). The player starts at a given position and can move up, down, left, or right. You have already implemented the basic movement, but now you need to handle gravity. The player should fall down one cell if the cell directly below them is empty. This process should continue until the player lands on solid ground or reaches the bottom of the grid. Write a function `apply_gravity(grid: List[List[str]], start_x: int, start_y: int) -> Tuple[int, int]` that takes the game grid, the player\'s starting x and y coordinates, and returns the player\'s final coordinates after gravity has been applied. The dimensions of the grid are guaranteed to be at least 1x1 and the player\'s starting position is always within the bounds of the grid. If the player starts on solid ground, they should not move. Examples: ```python apply_gravity([ [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'], [\'#\', \'#\', \'#\', \'#\'] ], 1, 0) -> (2, 0) apply_gravity([ [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'], [\'#\', \'.\', \'#\'] ], 1, 2) -> (1, 2) apply_gravity([ [\'#\', \'#\', \'#\'], [\'#\', \'#\', \'#\'], [\'#\', \'#\', \'#\'] ], 1, 1) -> (1, 1) ``` Explanation: In the first example, the player starts at position (1, 0) and falls down to position (2, 0), where they land on an empty space that has solid ground beneath it. In the second example, the player starts at (1, 2) but does not fall because they are already on solid ground. In the third example, the entire grid is made of solid ground, so the player does not move from their initial position.","solution":"from typing import List, Tuple def apply_gravity(grid: List[List[str]], start_x: int, start_y: int) -> Tuple[int, int]: Simulates gravity on the 2D grid for the player starting at (start_x, start_y). Returns the final position of the player after gravity stops. x = start_x y = start_y while x + 1 < len(grid) and grid[x + 1][y] == \'.\': x += 1 return (x, y)"},{"question":"Your task is to implement a custom ranking system for a multiplayer card game called \\"Battle Royale.\\" The game involves multiple rounds where players earn or lose points based on their performance in each round. The ultimate goal is to determine the final ranking of the players after all rounds are completed. Each player has a unique `player_id`, and the performance of each player in a round is represented as a tuple consisting of `player_id` and the `points` earned in that round. Positive points indicate that the player won points in that round, while negative points indicate that the player lost points. # Task Write a function `calculate_rankings` that takes a list of tuples where each tuple represents the `player_id` and the `points` earned in a round. You must generate the final ranking of the players based on their total points. The final output should be a sorted list of player_ids, starting with the player who has the highest total points. If two players have the same total points, they should be ranked in ascending order of their `player_id`. # Example ```python def calculate_rankings(rounds): pass # Example usage: rounds = [ (1, 10), (2, 15), (3, 5), (1, -5), (2, -10), (3, 10), (1, 20), (2, 5), (3, 0) ] print(calculate_rankings(rounds)) # Output: [1, 3, 2] ``` # Explanation 1. Player 1: Total Points = 10 - 5 + 20 = 25 2. Player 2: Total Points = 15 - 10 + 5 = 10 3. Player 3: Total Points = 5 + 10 + 0 = 15 So, the ranking is [1, 3, 2], based on their total points, and player_id when points are tied. # Constraints 1. You may assume that the number of players and rounds will be reasonable such that the algorithm will run efficiently. 2. Each player will have at least one entry in the list of rounds. 3. The list of rounds will contain valid integer points, and all `player_id`s are positive integers.","solution":"def calculate_rankings(rounds): from collections import defaultdict # Dictionary to keep track of total points for each player player_points = defaultdict(int) # Accumulate points for each player for player_id, points in rounds: player_points[player_id] += points # Sort players first by points descending and then by player_id ascending sorted_players = sorted(player_points.keys(), key=lambda x: (-player_points[x], x)) return sorted_players"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are two distinct indices i and j such that the sum of array[i] and array[j] is equal to the target integer. -----Constraints----- - 1 leq |array| leq 10^3 - -10^6 leq array[i] leq 10^6 - -10^6 leq target leq 10^6 -----Input----- Input is given from Standard Input in the following format: n array_1 array_2 ... array_n target -----Output----- If there exist two distinct indices i and j such that array[i] + array[j] equals the target, print Yes; otherwise, print No. -----Sample Input----- 5 2 7 11 15 3 9 -----Sample Output----- Yes Explanation: - 2 and 7 are two numbers in the array that sum up to 9. Therefore, the answer is Yes.","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct indices i and j in arr such that arr[i] + arr[j] equals the target. seen = set() for number in arr: if target - number in seen: return \\"Yes\\" seen.add(number) return \\"No\\""},{"question":"You are given a list of integers and you need to determine if there is any subset of these integers that can be partitioned into two groups with equal sums. Create a function that takes in a list of integers and returns True if such a partition exists, otherwise, return False. Input - A single line contains a space-separated list of integers. - Each integer in the list falls within the range -1000 to 1000. - The length of the list is between 1 and 100. Output - Return a boolean value, True if there is a subset that can be partitioned into two groups with equal sums, otherwise False. Function Signature ```python def can_partition(nums: List[int]) -> bool: ``` Examples Input ``` 1 5 11 5 ``` Output ``` True ``` Explanation The subset [1, 5, 5] and [11] both sum up to 11. Input ``` 1 2 3 5 ``` Output ``` False ``` Explanation There is no way to partition the list into two subsets with equal sum.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If the total sum is odd, we cannot partition it into two equal sum subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 n = len(nums) dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for j in range(target_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target_sum]"},{"question":"A mutable string is a string data structure that allows modifications after its creation. The task is to perform some operations on a mutable string based on the commands given in the queries. The possible operations are: 1. append c - append the character \'c\' to the end of the string. 2. insert i c - insert the character \'c\' at index \'i\' in the string. 3. delete i - delete the character at index \'i\' from the string. 4. reverse - reverse the string. 5. get - return the current state of the string. Example 1: Input: 6 append a append b insert 1 z get delete 0 get Output: azb zb Explanation: 1. After appending \'a\', the string is \\"a\\". 2. After appending \'b\', the string is \\"ab\\". 3. After inserting \'z\' at index 1, the string is \\"azb\\". 4. The current state of the string is \\"azb\\". 5. After deleting the character at index 0, the string is \\"zb\\". 6. The current state of the string is \\"zb\\". Example 2: Input: 4 append m reverse insert 0 n get Output: nm Explanation: 1. After appending \'m\', the string is \\"m\\". 2. After reversing, the string is still \\"m\\". 3. After inserting \'n\' at index 0, the string is \\"nm\\". 4. The current state of the string is \\"nm\\". Your Task: Your task is to complete the following functions: append_char(): Append the given character to the string, then the driver code prints the resulting string. insert_char(): Insert the given character at a specified index in the string, then the driver code prints the resulting string. delete_char(): Delete the character at the specified index in the string, then the driver code prints the resulting string. reverse_str(): Reverse the string, then the driver code prints the resulting string. get_str(): Return the current state of the string, the driver code prints the return value. Expected Time Complexity: O(1) for each operation (except get_str which may be O(n) where n is the length of the string). Expected Auxiliary Space: O(1) Constraints: 1 ≤ Number of queries ≤ 10^5 1 ≤ Length of the string ≤ 10^5","solution":"class MutableString: def __init__(self): self.string = [] def append_char(self, c): self.string.append(c) def insert_char(self, i, c): self.string.insert(i, c) def delete_char(self, i): del self.string[i] def reverse_str(self): self.string.reverse() def get_str(self): return \'\'.join(self.string) def perform_operations(operations): mutable_string = MutableString() results = [] for op in operations: parts = op.split() command = parts[0] if command == \\"append\\": mutable_string.append_char(parts[1]) elif command == \\"insert\\": mutable_string.insert_char(int(parts[1]), parts[2]) elif command == \\"delete\\": mutable_string.delete_char(int(parts[1])) elif command == \\"reverse\\": mutable_string.reverse_str() elif command == \\"get\\": results.append(mutable_string.get_str()) return results"},{"question":"Given a rectangular grid of characters and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. # Input: - The first input line contains two integers m and n, representing the number of rows and columns in the grid respectively. - The next m lines each contain n characters, representing the grid. - The final line contains the word to be searched in the grid. # Output: - Return \\"Yes\\" if the word exists in the grid, otherwise return \\"No\\". # Example 1: Input: m = 3, n = 4 Grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCCED\\" Output: Yes # Example 2: Input: m = 3, n = 4 Grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"SEE\\" Output: Yes # Example 3: Input: m = 3, n = 4 Grid = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] word = \\"ABCB\\" Output: No # Your Task: You don\'t need to read input or print anything. Your task is to complete the function `wordExists()` which takes two integers m and n, a 2D list of characters grid, and a string word as inputs and returns a boolean indicating if the word exists in the grid or not. # Constraints: - 1 <= m, n <= 200 - 1 <= word.length <= 10^3 - Grid and word consist of only lowercase and uppercase English letters.","solution":"def wordExists(m, n, grid, word): def dfs(x, y, index): if index == len(word): return True if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] != word[index]: return False temp = grid[x][y] grid[x][y] = \'#\' # Mark as visited # Explore all adjacent cells (up, down, left, right) found = (dfs(x + 1, y, index + 1) or dfs(x - 1, y, index + 1) or dfs(x, y + 1, index + 1) or dfs(x, y - 1, index + 1)) grid[x][y] = temp # Unmark as visited return found for i in range(m): for j in range(n): if grid[i][j] == word[0] and dfs(i, j, 0): return \\"Yes\\" return \\"No\\""},{"question":"A company stores records of its inventory in multiple text files. Each line of a file contains one record, represented by an integer indicating the product ID. The company needs to determine the product ID that appears most frequently across all files combined. Create a function that reads a list of lists of integers (each inner list corresponds to a file and its product IDs) and returns the product ID that appears most frequently. If there is a tie, return the smaller ID. Input The input is a list of lists of positive integers. Each inner list contains integers representing product IDs. The length of the input list does not exceed 100, and the cumulative number of integers across all inner lists does not exceed 1000. Each product ID is a positive integer not exceeding 1000. Output Return the product ID that appears most frequently across all lists. If there is a tie, return the smallest ID. Examples ```python most_frequent_product_id([ [1, 2, 3, 4, 1], [3, 1, 1, 2, 2, 2, 3], [5, 6, 6, 2, 2, 1, 1], ]) # => 1 ``` In this example, the product ID `1` appears most frequently in total (6 times).","solution":"def most_frequent_product_id(records): This function takes a list of lists of integers (each inner list representing records from a file) and returns the product ID that appears most frequently. If there is a tie, it returns the smallest ID. from collections import Counter # Flatten the input list of lists flat_list = [item for sublist in records for item in sublist] # Count the occurrence of each product ID using Counter counts = Counter(flat_list) # Find the maximum frequency max_frequency = max(counts.values()) # Generate a list of product IDs with the maximum frequency most_frequent_ids = [id_ for id_, count in counts.items() if count == max_frequency] # Return the smallest product ID from the list of most frequent IDs return min(most_frequent_ids)"},{"question":"You are given n different colored balls and an infinite number of boxes. You have to distribute the balls into the boxes such that no box contains more than one ball of the same color. Your task is to calculate the number of different ways to arrange the balls into the boxes. Note: Two ways of arranging the balls are considered different if there is at least one pair of balls that are placed in different boxes. Input A single integer n (1 ≤ n ≤ 20) — the number of different colored balls. Output In a single line, print a single integer — the number of distinct ways to distribute the balls into the boxes. Example Input 3 Output 5 Input 4 Output 15 Explanation When n = 3, - You can have each ball in its own box: 3 ways - One box with 2 balls and the remaining one ball in its own box: 2 ways Hence, a total of 5 ways. When n = 4, - Each ball in its own box: 1 way - One box with 2 balls and the other 2 balls each in their own box: 6 ways - Two boxes each containing 2 balls: 3 ways - One box with 3 balls and the remaining one ball in its own box: 4 ways - All 4 balls in one box: 1 way Hence, a total of 15 ways.","solution":"def num_ways_to_distribute_balls(n): Returns the number of distinct ways to distribute n different colored balls into an infinite number of boxes. from math import factorial def bell_number(n): Computes the n-th Bell number, which is the number of ways to partition a set of n elements. bell = [[0 for i in range(n+1)] for j in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): bell[i][0] = bell[i-1][i-1] for j in range(1, i+1): bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0] return bell_number(n)"},{"question":"# Task Create a function `validate_brackets`, which takes a string `s` as its parameter and returns a boolean value `True` if the brackets in the string are balanced, and `False` otherwise. # Input - A single string `s` of length between 1 and 1000, containing only characters `(`, `)`, `{`, `}`, `[` and `]`. # Output - A boolean value `True` if the brackets are balanced, `False` otherwise. # Examples ``` validate_brackets(\\"(){}[]\\") # Returns: True validate_brackets(\\"([{}])\\") # Returns: True validate_brackets(\\"(]\\") # Returns: False validate_brackets(\\"([)]\\") # Returns: False validate_brackets(\\"{[]}\\") # Returns: True ``` # Explanation 1. A string with balanced brackets means that every opening bracket has a corresponding closing bracket and the pairs of brackets are properly nested. 2. The input string can contain only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. 3. Return `True` if the string contains valid pairs of brackets, otherwise return `False`.","solution":"def validate_brackets(s): Returns True if the brackets in the string s are balanced, and False otherwise. stack = [] pairs = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in pairs.values(): stack.append(char) elif char in pairs: if not stack or stack[-1] != pairs[char]: return False stack.pop() return not stack"},{"question":"You are participating in a treasure hunt game, and you are given a map represented by a 2D matrix. Each cell of the matrix contains an integer that represents the depth at that point. Your goal is to find the shallowest path from the top-left corner to the bottom-right corner. The path you take can only move right or down. Write a function that takes the depth matrix as input and returns the sum of depths along the shallowest path from the top-left corner to the bottom-right corner. **Function Signature:** ```python def shallowest_path(matrix: List[List[int]]) -> int: pass ``` **Input:** - `matrix`: A 2D list of integers with dimensions `n x m` representing the depth map where `1 <= n, m <= 100`. **Output:** - Returns an integer, the sum of the depths along the shallowest path. **Example:** ```python matrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(shallowest_path(matrix)) # Output: 7 ```","solution":"from typing import List def shallowest_path(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) # Initialize a 2D dp array to store the minimum depth path sum up to each point dp = [[0]*m for _ in range(n)] dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left cell) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column (can only come from the top cell) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][m-1]"},{"question":"Simulate a simplified stock trading system where you can buy and sell stocks to maximize your profit. You are given a list of daily prices for a single stock. Each element in the list represents the stock price for that day. You may make as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) but you must sell the stock before you buy again. Write a function that takes in an array of integers representing the daily prices, and returns an integer representing the maximum profit you can achieve. Example 1: Input: [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2: Input: [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3: Input: [7,6,4,3,1] Output: 0 Explanation: There is no profitable transaction in this case, so the maximum profit is 0. Note: You cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). The input list will be between 1 and 1000. The prices will always be positive integers.","solution":"def max_profit(prices): Function to calculate the maximum profit from stock prices. if not prices: # If the prices list is empty return 0 max_profit = 0 for i in range(1, len(prices)): # If selling on day i gives a profit, add it to the total max profit if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"You have a list of students with their names and respective grades in Mathematics. Your task is to determine which student has the highest grade in Mathematics. If multiple students have the same highest grade, return the name of the student who appears first in the list. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The next n lines contain a string s (1 ≤ |s| ≤ 100) — the name of the student, and an integer g (0 ≤ g ≤ 100) — the grade of the student in Mathematics. Output Print the name of the student with the highest grade. If multiple students have the same highest grade, print the name of the first one in the input list. Examples Input 3 John 89 Alice 95 Bob 91 Output Alice Input 4 Derek 77 Eva 88 Jake 88 Sophia 70 Output Eva Note In the first sample, Alice has the highest grade of 95. In the second sample, both Eva and Jake have the highest grade of 88, but Eva appears first in the input list.","solution":"def student_with_highest_grade(n, student_grade_list): Returns the name of the student with the highest grade. If multiple students have the same highest grade, returns the name of the student who appears first. Parameters: n : int : number of students student_grade_list : list of tuples : each tuple contains the name of the student and their grade Returns: str : name of the student with the highest grade highest_grade = -1 top_student = \'\' for student, grade in student_grade_list: if grade > highest_grade: highest_grade = grade top_student = student return top_student"},{"question":"# The Game of Hex The game of Hex is played on an 11x11 hexagonal board. Two players take turns placing stones of their respective colors (typically black and white) on empty cells of the board. The goal of the game is for one player to create an unbroken chain of their stones connecting one side of the board to the opposite side (left-right or top-bottom). # How it worked Write a function `check_winner(board, player)` that determines if the specified player (`\'black\'` or `\'white\'`) has won the game. The board is represented as an 11x11 2D list where each element is `\'black\'`, `\'white\'`, or `None`. The function should return `True` if the specified player has a winning chain and `False` otherwise. ```python def check_winner(board, player): # your code here ``` # Example Given the following board: ```python board = [ [\'black\', None, None, None, None, None, None, None, None, None, None], [\'black\', \'black\', None, None, None, None, None, None, None, None, None], [None, \'black\', \'black\', None, None, None, None, None, None, None, None], [None, None, \'black\', \'black\', None, None, None, None, None, None, None], [None, None, None, \'black\', \'black\', None, None, None, None, None, None], [None, None, None, None, \'black\', \'black\', None, None, None, None, None], [None, None, None, None, None, \'black\', \'black\', None, None, None, None], [None, None, None, None, None, None, \'black\', \'black\', None, None, None], [None, None, None, None, None, None, None, \'black\', \'black\', None, None], [None, None, None, None, None, None, None, None, \'black\', \'black\', None], [None, None, None, None, None, None, None, None, None, \'black\', \'black\'] ] ``` Calling `check_winner(board, \'black\')` should return `True`, as there is an unbroken chain of \'black\' stones connecting the top to the bottom. Calling `check_winner(board, \'white\')` should return `False`, as there is no winning chain for \'white\' on this board.","solution":"def check_winner(board, player): Checks if the given player has a winning chain on the board. :param board: 2D list representing the board state. :param player: \'black\' or \'white\' :return: True if the player has a winning chain, False otherwise. size = len(board) visited = [[False] * size for _ in range(size)] def dfs(x, y): # if a player reaches the opposite side (bottom for white, right for black), they win if (player == \'white\' and x == size - 1) or (player == \'black\' and y == size - 1): return True visited[x][y] = True # Six possible directions in a hex grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, 1), (1, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < size and 0 <= ny < size and not visited[nx][ny] and board[nx][ny] == player: if dfs(nx, ny): return True return False # Search starting edges based on player color if player == \'white\': for i in range(size): if board[0][i] == player and not visited[0][i]: if dfs(0, i): return True elif player == \'black\': for i in range(size): if board[i][0] == player and not visited[i][0]: if dfs(i, 0): return True return False"},{"question":"**Problem Statement** Write a function that takes a list of integers and returns the mode of the list. The mode is the integer that appears most frequently. If there are multiple integers that appear with the same highest frequency, return the smallest of those integers. # Constraints - The list of integers will have at least one element and at most 100 elements. - Each integer in the list will be between -10,000 and 10,000. # Input - A list of integers. # Output - An integer representing the mode of the list. # Example ```python Input: [1, 2, 2, 3, 3, 3] Output: 3 Input: [4, 4, 5, 5, 6] Output: 4 Input: [10] Output: 10 ``` # Explanation In the first example, `3` appears most frequently (3 times), so the mode is `3`. In the second example, both `4` and `5` appear with the same highest frequency (2 times each), but since `4` is smaller, the mode is `4`. In the third example, there is only one element, so the mode is `10`.","solution":"def mode_of_list(nums): Returns the mode of the given list of integers. The mode is the integer that appears most frequently. If there are multiple integers with the same highest frequency, the smallest one is returned. Parameters: nums (list of int): A list of integers. Returns: int: The mode of the list. from collections import Counter # Count the frequency of each number in the list count = Counter(nums) # Find the highest frequency max_frequency = max(count.values()) # Find the smallest number with the highest frequency mode = min([num for num, freq in count.items() if freq == max_frequency]) return mode"},{"question":"Stella is an entrepreneur and loves fashion. She recently started a new clothing line and has started selling her products online. To analyze her sales, she uses data analytics to track and predict future sales. Each product has a unique ID associated with it. Stella has recorded the sales of each product in a giant list, and now she wants to analyze the sales patterns. Stella wants to find the length of the longest subsequence of sales that is strictly increasing, given the sales records for a particular time period. A subsequence is a sequence derived by deleting some or none of the elements from the list without changing the order of the remaining elements. Can you help Stella by writing a function that calculates the length of the longest increasing subsequence in the sales records? # Input - First line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the sales records. - The second line contains N space-separated integers, the sales records for that time period. # Output - For each test case, output a single line containing the length of the longest increasing subsequence. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ sales record ≤ 10^9 # Example Input ``` 2 6 10 22 9 33 21 50 5 3 10 2 1 20 ``` Output ``` 4 3 ``` # Explanation In the first example, the longest increasing subsequence is [10, 22, 33, 50], with length 4. In the second example, the longest increasing subsequence is [3, 10, 20], with length 3. Write a function `longest_increasing_subsequence(T, test_cases)` that implements the functionality described above.","solution":"def longest_increasing_subsequence(T, test_cases): def lis_length(arr): if not arr: return 0 dp = [arr[0]] for num in arr[1:]: if num > dp[-1]: dp.append(num) else: # Binary search to find the smallest element >= num left, right = 0, len(dp) - 1 while left < right: mid = (left + right) // 2 if dp[mid] < num: left = mid + 1 else: right = mid dp[left] = num return len(dp) results = [] for case in test_cases: N, sales_records = case result = lis_length(sales_records) results.append(result) return results"},{"question":"You are given a string containing numbers and letters. Your task is to separate the numbers and letters such that all numbers come before the letters while preserving their relative order from the original string. Write a function `separate_numbers_and_letters` that takes a string as input and returns a string where all numbers are at the beginning followed by all letters. # Input Format A single line containing a string of length S (1 leq S leq 100) that consists of digits (0-9) and lowercase letters (a-z). # Output Format A single line containing the rearranged string with numbers at the beginning followed by letters, maintaining their relative order. # Sample Input 1 ``` a1b2c3d4 ``` # Sample Output 1 ``` 1234abcd ``` # Sample Input 2 ``` e5f6g7h8 ``` # Sample Output 2 ``` 5678efgh ``` # Sample Input 3 ``` 4k3j2h1g ``` # Sample Output 3 ``` 4321kjhg ``` # Note - Assume that the input string contains at least one digit and one letter. - The order of the numbers and the order of the letters must be preserved from the original input.","solution":"def separate_numbers_and_letters(s): Separates the numbers and letters in the input string `s` such that all numbers come before the letters while preserving their relative order. numbers = \'\'.join([char for char in s if char.isdigit()]) letters = \'\'.join([char for char in s if char.isalpha()]) return numbers + letters"},{"question":"You are organizing a programming contest and need to calculate the total points for each team based on the scores from several problems. Each team can submit multiple solutions for each problem, but only the highest score for each problem is counted towards the team\'s total score. -----Input----- The first line of the input contains two space-separated integers t and p (1 ≤ t ≤ 100, 1 ≤ p ≤ 100), the number of teams and the number of problems, respectively. The next t lines each contain a list of p integers, separated by spaces, representing the scores for each team\'s submissions across p problems. Each problem score is an integer between 0 and 1000 (inclusive). If a team did not submit a solution for a problem, the score for that problem is 0. -----Output----- Output the total score for each team in the order they appear in the input. -----Examples----- Input 3 4 10 20 30 40 40 30 20 10 15 15 15 15 Output 100 100 60 Input 2 3 100 200 300 50 50 50 Output 600 150","solution":"def calculate_total_scores(t, p, scores): total_scores = [] for team_scores in scores: total_scores.append(sum(team_scores)) return total_scores"},{"question":"Create a function `rearrangePalindrome` that rearranges the characters of a given string to form a palindrome (if possible). If it is possible to rearrange the characters of the string to form a palindrome, return such a palindrome string. If it is not possible, return an empty string. -----Input----- The input consists of a single line containing a string of lowercase letters where the length of the string is 1 leq |s| leq 10^5. -----Output----- Output the rearranged palindrome string if possible, otherwise, output an empty string. -----Examples----- Sample Input 1: aabb Sample Output 1: abba Sample Input 2: aaab Sample Output 2: aaa Sample Input 3: code Sample Output 3:","solution":"def rearrangePalindrome(s): Rearranges the characters of the input string to form a palindrome if possible. Args: s (str): Input string containing lowercase letters. Returns: str: A palindrome formed by the characters of the input string if possible, otherwise an empty string. from collections import Counter # Counting the frequency of each character char_count = Counter(s) # Counting how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # It is not possible to form a palindrome if more than one character has an odd frequency if odd_count > 1: return \\"\\" # Forming the first half and middle part of the palindrome left_half = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char left_half.append(char * (count // 2)) # Joining parts to form the palindrome left_half_str = \'\'.join(left_half) return left_half_str + middle_char + left_half_str[::-1]"},{"question":"You are given an array A consisting of N positive integers. You can perform the following operation on A any number of times: * Select two indices i and j (1 ≤ i, j ≤ N) such that A_i ≠ A_j. * Decrease the value of A_i by 1 and increase the value of A_j by 1. Determine the minimum possible value of the maximum element in the array A after performing the operation any number of times. Constraints: * All values in input are integers. * 2 ≤ N ≤ 10^5 * 1 ≤ A_i ≤ 10^9 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the minimum possible value of the maximum element in the array after performing the operation any number of times. Examples Input 3 2 5 3 Output 4 Input 4 1 1 1 8 Output 3 Input 5 10 10 10 10 10 Output 10","solution":"def min_max_element(array): Returns the minimum possible value of the maximum element in the array after performing the allowed operations any number of times. total_sum = sum(array) n = len(array) # Calculate the minimum possible maximum value if total_sum % n == 0: return total_sum // n else: return total_sum // n + 1"},{"question":"You are given two binary trees. Write a program to check if they are mirrors of each other. A binary tree is symmetrical if the left subtree is a mirror reflection of the right subtree and vice versa. For example: 1 1 / / 2 3 3 2 / / 4 5 5 4 In this example, the two binary trees are mirrors of each other. Input: - The first line contains an integer n, the number of nodes in the first tree (1 ≤ n ≤ 1000). - The next n lines contain the node values for the first tree in the order: parent node, left child node, right child node. If a node does not have a left or right child, it is represented by -1. - The next line contains an integer m, the number of nodes in the second tree (1 ≤ m ≤ 1000). - The next m lines contain the node values for the second tree in the order: parent node, left child node, right child node. If a node does not have a left or right child, it is represented by -1. Output: - Print \\"YES\\" if the two binary trees are mirrors of each other, otherwise print \\"NO\\". Example Input: 6 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 -1 -1 -1 6 1 3 2 3 -1 -1 2 5 4 5 -1 -1 4 -1 -1 -1 -1 -1 Output: YES","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def buildTree(nodes): node_dict = {} for parent, left, right in nodes: if parent not in node_dict: node_dict[parent] = TreeNode(parent) if left != -1: node_dict[left] = TreeNode(left) node_dict[parent].left = node_dict[left] if right != -1: node_dict[right] = TreeNode(right) node_dict[parent].right = node_dict[right] return node_dict[nodes[0][0]] if nodes else None def isMirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.left, t2.right) and isMirror(t1.right, t2.left) def check_if_trees_are_mirrors(n, tree1, m, tree2): root1 = buildTree(tree1) root2 = buildTree(tree2) return \\"YES\\" if isMirror(root1, root2) else \\"NO\\""},{"question":"Primary math operations are foundational for various programming tasks. Your goal is to implement a function that calculates the Greatest Common Divisor (GCD) and the Least Common Multiple (LCM) of two numbers. The function should accept two positive integers and return a tuple containing the GCD and LCM of those numbers. You can use any algorithm that correctly computes these values. The definitions to keep in mind are: - **GCD**: The largest positive integer that divides both numbers without leaving a remainder. - **LCM**: The smallest positive integer that is divisible by both numbers. # Input - Two space-separated positive integers, a and b (1 leq a, b leq 10^9). # Output - A tuple containing two integers, where the first integer is the GCD of the input numbers and the second integer is the LCM of the input numbers. # Example **Sample Input 1**: ``` 15 20 ``` **Sample Output 1**: ``` (5, 60) ``` **Sample Input 2**: ``` 21 14 ``` **Sample Output 2**: ``` (7, 42) ``` # Note - The function should be efficient enough to handle the upper limits of the input constraints. - You may assume that the input integers will always be valid positive integers. ```python def gcd_and_lcm(a: int, b: int) -> tuple: def gcd(x, y): while y: x, y = y, x % y return x gcd_value = gcd(a, b) lcm_value = a * b // gcd_value return (gcd_value, lcm_value) ``` # Usage You can call the `gcd_and_lcm` function with any pair of positive integers to find their GCD and LCM: ```python print(gcd_and_lcm(15, 20)) # Output: (5, 60) print(gcd_and_lcm(21, 14)) # Output: (7, 42) ```","solution":"def gcd_and_lcm(a: int, b: int) -> tuple: Returns a tuple containing the GCD and LCM of two positive integers a and b. def gcd(x, y): while y: x, y = y, x % y return x gcd_value = gcd(a, b) lcm_value = a * b // gcd_value return (gcd_value, lcm_value)"},{"question":"Alice and Bob love playing with numbers. One day, they came across a special kind of number known as a \\"twin prime pair.\\" A twin prime pair is a pair of prime numbers that have a difference of 2 (e.g., 11 and 13, 17 and 19). Curious about these special pairs, Alice and Bob decided to find all the twin prime pairs within a given range of integers [a, b]. Your task is to help them in this quest. Write a program that takes two integers a and b (1 ≤ a ≤ b ≤ 10^6) and finds all the twin prime pairs within the range [a, b]. Input The input contains two integers, a and b. Output First, print the total number of twin prime pairs within the range [a, b]. Then, for each twin prime pair, print the pair in the format (p1, p2) where p1 < p2. Print each pair on a new line. If there are no twin prime pairs in the range, print \\"No twin primes\\". Examples Input 5 30 Output 5 (5, 7) (11, 13) (17, 19) (29, 31) Input 10 20 Output 2 (11, 13) (17, 19) Input 1 2 Output No twin primes Note In the first example, there are 5 twin prime pairs between 5 and 30: (5, 7), (11, 13), (17, 19), and (29, 31). In the second example, there are 2 twin prime pairs between 10 and 20: (11, 13) and (17, 19). In the third example, there are no twin prime pairs between 1 and 2.","solution":"def find_twin_primes(a, b): Finds and returns all twin prime pairs between a and b. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [is_prime(i) for i in range(a, b + 3)] twin_primes = [] for i in range(a, b + 1): if primes[i - a] and primes[i - a + 2]: twin_primes.append((i, i + 2)) if not twin_primes: print(\\"No twin primes\\") else: print(len(twin_primes)) for pair in twin_primes: print(pair)"},{"question":"Given an array of integers representing the heights of different pillars, your task is to find the maximum water that can be trapped between the pillars after raining. The width of each pillar is 1 unit. You need to find the maximum units of water that can be trapped. # Function Signature ```python def trapped_water(heights: List[int]) -> int: ``` # Input - A list of integers `heights` representing the heights of the pillars. ( (0 leq text{length of heights} leq 10^4) ) - Each height is a non-negative integer such that ( (0 leq text{height} leq 10^4) ) # Output - Return an integer representing the maximum units of water that can be trapped. # Example ```python assert trapped_water([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert trapped_water([4,2,0,3,2,5]) == 9 ``` # Constraints Ensure to handle edge cases and optimize for performance given the constraints.","solution":"from typing import List def trapped_water(heights: List[int]) -> int: Returns the maximum amount of water that can be trapped between the pillars represented by the heights array. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"**Flatten Nested List** You are given a nested list of integers, where some elements are integers, and some are lists of integers recursively. Implement a function that flattens the nested list and sorts the resulting list in ascending order. **Steps:** 1. Flatten the nested list. 2. Sort the flattened list in ascending order. 3. Return the sorted list. **Example** `[1, [4, [6]], 3, [2, [5, [7]]]]` returns `[1, 2, 3, 4, 5, 6, 7]`","solution":"def flatten_and_sort(nested_list): Flattens a nested list of integers and sorts the resulting list in ascending order. flattened_list = [] def flatten(l): for item in l: if isinstance(item, list): flatten(item) else: flattened_list.append(item) flatten(nested_list) return sorted(flattened_list)"},{"question":"Given a string `s`, we define the contrast score of the string as the number of pairs of characters (i, j) where 0 <= i < j < len(s), and s[i] != s[j]. Your task is to determine the contrast score of the given string. Input Format The first line contains an integer, `T`, denoting the number of test cases. Each of the next `T` lines contains a string, `s`, describing the string for each test case. Constraints 1 <= T <= 100 1 <= len(s) <= 1000 s contains only lowercase English letters (a-z). Output Format For each test case, print the contrast score on a new line. Sample Input 3 abc aab zzz Sample Output 3 2 0 Explanation - For the first testcase, the three pairs are (a, b), (a, c), and (b, c). - For the second testcase, the two pairs are (a, b) and (a, b). - For the third testcase, there are no pairs with different characters.","solution":"def contrast_score(s): Returns the contrast score of the string s. The contrast score is defined as the number of pairs (i, j) where 0 <= i < j < len(s) and s[i] != s[j]. n = len(s) score = 0 for i in range(n): for j in range(i + 1, n): if s[i] != s[j]: score += 1 return score def contrast_score_for_multiple_cases(T, cases): Computes the contrast scores for multiple test cases. :param T: Number of test cases :param cases: List of strings, each representing a test case :return: List of contrast scores for each test case scores = [] for case in cases: scores.append(contrast_score(case)) return scores"},{"question":"Given an integer array of size N. For each element in the array, find the closest greater element on the right side of the array. If there is no greater element, return -1 for that position. Print the results as a list. Example 1: Input: N = 4 arr = [4, 5, 2, 10] Output: [5, 10, 10, -1] Explanation: In the above example, for the first element, the closest greater element to the right is 5. For the second element, the closest greater element to the right is 10. For the third element, the closest greater element to the right is 10, and for the last element, there is no greater element, so return -1. Example 2: Input: N = 3 arr = [3, 2, 1] Output: [-1, -1, -1] Explanation: In this example, no element has any greater element on its right side, so return -1 for all positions. Your task: You don\'t need to read input or print anything. Your task is to complete the function findClosestGreaterElements(), which takes the array arr and an integer N as input parameters and returns a list of the closest greater elements. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9","solution":"def findClosestGreaterElements(arr, N): This function finds the closest greater element for each element of the array on its right side. If there is no greater element, it returns -1 for that position. result = [-1] * N stack = [] for i in range(N-1, -1, -1): while stack and stack[-1] <= arr[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(arr[i]) return result"},{"question":"Helen is organizing a bake sale and wants to ensure each type of treat is distributed equally among the different charity groups attending the event. She has n different types of treats, each with a certain number of pieces available. Helen needs to distribute these treats so that each charity group receives an equal number of treats of each type. She can neither break the treats into smaller parts nor add more treats. Given the number of charity groups k and the number of pieces of each type of treat, can she distribute all the treats equally among the charity groups? -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) — the number of different types of treats, and k (1 ≤ k ≤ 100) — the number of charity groups. The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1000), where a_{i} is the amount of pieces of the i-th type of treat. -----Output----- In a single line print \\"YES\\" (without the quotes) if it is possible to distribute all the pieces of each type of treat equally among the charity groups. Otherwise, print \\"NO\\" (without the quotes). -----Examples----- Input 3 2 4 6 8 Output YES Input 4 3 5 10 15 20 Output NO -----Note----- In the first test sample, Helen can give 2 pieces of each type of treat to each charity group since 4, 6, and 8 are all divisible by 2. In the second test sample, Helen cannot divide 5 pieces of the first type of treat evenly among 3 charity groups.","solution":"def can_distribute_equally(n, k, treats): Determines if it\'s possible to distribute all the pieces of each type of treat equally among the charity groups. Parameters: n (int): Number of different types of treats. k (int): Number of charity groups. treats (list): List of integers representing the number of pieces of each type of treat. Returns: str: \\"YES\\" if it\'s possible to distribute treats equally, otherwise \\"NO\\". for treat in treats: if treat % k != 0: return \\"NO\\" return \\"YES\\""},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can be in one of two states: 0 or 1. A cell is considered \\"active\\" if it is state 1. Two cells are \\"neighbors\\" if they share a side. You need to write a program that finds the largest rectangle in the grid which contains only active cells, i.e., cells in state 1. Your task is to determine the area of this largest rectangle. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters: \'0\' or \'1\', representing the state of each cell in the grid. Output Print one integer — the area of the largest rectangle consisting entirely of active cells. Examples Input 4 4 1010 1011 1111 0011 Output 6 Input 6 6 111111 110001 111001 111111 100111 111111 Output 9","solution":"def max_histogram_area(histogram): stack = list() max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(grid): if not grid: return 0 max_area = 0 row_area = [0] * len(grid[0]) for row in grid: for index in range(len(row)): if row[index] == \'1\': row_area[index] += 1 else: row_area[index] = 0 max_area = max(max_area, max_histogram_area(row_area)) return max_area"},{"question":"The ancient kingdom of Atrovia has a secret dialect which uses numbers to communicate messages. Each number in the message represents a specific letter in their alphabet. However, due to the age of the system, some numbers might be missing, and messages need to be validated for correctness. Given an integer array `message` of length `n` that represents the numbers in the received message and an integer `m` representing the highest possible number in the alphabet, create a function to determine if the message is valid. A valid message in Atrovia\'s secret dialect has the following properties: 1. All numbers in the array are between 1 and `m`, inclusive. 2. Each number from 1 to `m` appears at least once in the `message`. Write a function to check if the given message meets these criteria. # Function Signature ```python def is_valid_message(message: List[int], m: int) -> bool: pass ``` # Input - The function accepts two parameters: - An integer array `message` (1 ≤ len(message) ≤ 10^5) where each element is a number representing a letter. - An integer `m` (1 ≤ m ≤ 10^5) representing the highest possible letter number in the alphabet. # Output - The function should return `True` if the message is valid, otherwise `False`. # Examples **Example 1:** ```python message = [4, 2, 3, 1, 5] m = 5 # Returns: True ``` **Example 2:** ```python message = [1, 2, 1, 3] m = 5 # Returns: False ``` **Example 3:** ```python message = [7, 2, 3, 1] m = 3 # Returns: False ``` **Example 4:** ```python message = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] m = 10 # Returns: True ``` # Note - In the first example, all numbers from 1 to 5 appear in the array, so the message is valid. - In the second example, the number 5 is missing from the message, so the message is not valid. - In the third example, the numbers exceed `m`, making the message invalid. - The fourth example includes all numbers from 1 to 10 without missing any, hence the message is valid.","solution":"from typing import List def is_valid_message(message: List[int], m: int) -> bool: Determines if the message is valid based on the ancient Atrovia\'s dialect rules. Parameters: message (List[int]): The list of integers representing the message. m (int): The highest possible number in the alphabet. Returns: bool: True if the message is valid, False otherwise. # Create a set of all required numbers from 1 to m required_numbers = set(range(1, m + 1)) # Create a set of all numbers present in the message message_numbers = set(message) # Check that all required numbers are in the message and no number exceeds m is_valid = required_numbers.issubset(message_numbers) and all(1 <= num <= m for num in message) return is_valid"},{"question":"In Mathland, a country with a rich tradition of numerical puzzles, the citizens celebrate the Festival of Primes. During this festival, a special game is played involving prime numbers and arrays. You are given an array of integers, and your task is to find the longest contiguous subarray such that each element in the subarray is a prime number. Write a program that, given an array of integers, outputs the length of the longest contiguous subarray consisting solely of prime numbers. -----Constraints----- - 1 ≤ Array Length ≤ 100,000 - 1 ≤ Array Elements ≤ 1,000,000 -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Output the length of the longest contiguous subarray consisting entirely of prime numbers. -----Sample Input----- 10 1 2 3 4 5 6 7 8 9 10 -----Sample Output----- 2","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_subarray_length(arr): max_length = 0 current_length = 0 for num in arr: if is_prime(num): current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given a binary tree, write a function to perform a level order traversal in which each level is traversed from right to left, instead of the conventional left to right order. The function should return a list of lists, where each nested list represents the nodes at a particular level of the tree. For example, given the binary tree: ``` 3 / 9 20 / 15 7 ``` You should return: ``` [ [3], [20, 9], [7, 15] ] ``` Note: - The input will be the root node of the binary tree. - The solution should use O(n) space, where n is the number of nodes in the tree. - Do not use recursion for the solution.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def level_order_traversal_right_to_left(root): if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level_nodes = [] for _ in range(level_size): node = queue.popleft() level_nodes.append(node.val) if node.right: queue.append(node.right) if node.left: queue.append(node.left) result.append(level_nodes) return result"},{"question":"You are given a string which contains digits from 0 to 9. You need to find the largest number that can be formed by deleting exactly one digit from this string. Input: The input contains a single string s which represents the sequence of digits. The length of the string is between 2 and 100 (inclusive). Output: Output a single string which represents the largest number that can be formed after deleting exactly one digit from the input string. Examples: Input: 12345 Output: 2345 Input: 54321 Output: 5432 Input: 11111 Output: 1111 Note: In the first example, deleting \'1\' forms the number 2345 which is the largest possible number from the deletions. In the second example, deleting \'1\' forms the number 5432 which is the largest possible number from the deletions. In the third example, deleting any \'1\' forms the number 1111 which is the largest possible number from the deletions.","solution":"def largest_number_after_deleting_one_digit(s): Returns the largest number that can be formed by deleting exactly one digit from the input string. max_number = \\"\\" for i in range(len(s)): new_number = s[:i] + s[i+1:] if new_number > max_number: max_number = new_number return max_number"},{"question":"Olivia loves arranging plants in her garden in all possible unique ways. She has n different types of plants, and for each type, she has a fixed number of that plant available. Olivia wants to know the total number of unique ways she can arrange her plants in a linear garden bed. Two arrangements are considered different if the sequence of plants is different, regardless of the type of plants being used. -----Input----- The first line contains a single integer n (1 le n le 12) — the number of different types of plants. The second line contains n integers p_1, p_2, ldots, p_n (1 le p_i le 12) — the number of plants of each type. -----Output----- Print a single integer — the total number of unique ways Olivia can arrange her plants in a linear garden bed. -----Examples----- Input 3 1 2 1 Output 12 Input 2 2 2 Output 6 -----Explanation----- In the first example, Olivia can create arrangements of 4 plants (1+2+1=4). The unique arrangements for 1, 2, and 1 plants, respectively, are: [Type1, Type2, Type2, Type3], [Type1, Type2, Type3, Type2], [Type1, Type3, Type2, Type2], [Type2, Type1, Type2, Type3], [Type2, Type1, Type3, Type2], [Type2, Type2, Type1, Type3], [Type2, Type2, Type3, Type1], [Type2, Type3, Type2, Type1], [Type2, Type3, Type1, Type2], [Type3, Type2, Type1, Type2], [Type3, Type2, Type2, Type1], and [Type3, Type1, Type2, Type2]. In the second example, Olivia has two types of plants with 2 plants each. The unique arrangements for 2 and 2 plants respectively are: [Type1, Type1, Type2, Type2], [Type1, Type2, Type1, Type2], [Type1, Type2, Type2, Type1], [Type2, Type1, Type1, Type2], [Type2, Type1, Type2, Type1], and [Type2, Type2, Type1, Type1].","solution":"import math def count_unique_arrangements(n, p): This function calculates the total number of unique ways to arrange plants in a linear garden bed. :param n: int : number of different types of plants :param p: list : a list containing the number of plants of each type :return: int : total number of unique ways to arrange the plants total_plants = sum(p) denominator = 1 for plant_count in p: denominator *= math.factorial(plant_count) return math.factorial(total_plants) // denominator"},{"question":"In a distant kingdom, there is a famous festival that lasts for \'d\' days. On each day of the festival, a new attraction opens and remains open for all subsequent days. - On the first day, there is 1 attraction. - On the second day, 2 additional attractions open, making it 3 attractions till the end of the festival. - On the third day, 3 additional attractions open, making it 6 attractions till the festival\'s end, and so forth. The total number of attractions available on any given day is cumulative from all the previous days. Write a function \'totalAttractions\' to find out the total number of attractions available on the \'d-th\' day of the festival. Function Description Complete the \'totalAttractions\' function in the editor below. totalAttractions has the following parameter: - int d: the day number. Returns - int: the total number of attractions available on the \'d-th\' day. Input Format A single integer, `d`, the day number. Constraints 1 le d le 100 Sample Input 3 Sample Output 6 Explanation On the first day, there is 1 attraction. On the second day, 2 additional attractions open, making a total of 1 + 2 = 3 attractions. On the third day, 3 additional attractions open, making a total of 1 + 2 + 3 = 6 attractions. So, the total number of attractions available on the 3rd day is 6.","solution":"def totalAttractions(d): Returns the total number of attractions available on the d-th day of the festival. return sum(range(1, d + 1))"},{"question":"In a certain programming language, there is a concept of special strings. A special string is defined as a string that has at least one palindrome substring of length greater than 1. Your task is to write a program that determines if a given string is special. A palindrome is a string that reads the same forwards and backwards. -----Constraints----- - The input string contains only lowercase English letters. - The length of the input string is at least 2 and at most 1000. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print \\"YES\\" if the string is a special string, otherwise print \\"NO\\". -----Sample Input----- abacab -----Sample Output----- YES Explanation: \\"aca\\" is a palindrome substring.","solution":"def is_special_string(s): Determines if a given string is a special string. # Function to check if a given substring is a palindrome def is_palindrome(sub): return sub == sub[::-1] n = len(s) # Iterate over all possible substrings of length greater than 1 for i in range(n): for j in range(i + 2, n + 1): if is_palindrome(s[i:j]): return \\"YES\\" return \\"NO\\""},{"question":"During a vacation, you decided to visit several cities. You plan to travel by car between these cities, and since you are a car enthusiast, you want to test the performance of your car on this trip. The fuel efficiency of your car is given in kilometers per liter (km/l) and it\'s consistent regardless of speed or conditions. You have a list of distances between consecutive cities you plan to visit, and you want to find out the total amount of fuel required for the entire trip. You have already noted down the distances between the cities in a sequence. The trip starts from the first city in the list and ends at the last city in the list. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 100), the number of cities you will visit excluding the starting point. The next line contains an array of `n` integers, where the i-th integer is the distance in kilometers to the next city. The third line contains a positive integer `f` (1 ≤ f ≤ 50), which is the fuel efficiency of your car in kilometers per liter. -----Output----- On a single line, print the total amount of fuel required for the trip rounded to two decimal places. -----Examples----- Input 3 50 60 70 10 Output 18.00 Input 4 25 35 12 60 12 Output 11.75 -----Explanation----- In the first example, you travel distances of 50, 60, and 70 kilometers. The total distance is (50 + 60 + 70) = 180 kilometers. Given the fuel efficiency of 10 km/l, the fuel required is (180 / 10) = 18.00 liters. In the second example, the total distance is (25 + 35 + 12 + 60) = 132 kilometers. With a fuel efficiency of 12 km/l, the fuel required is (132 / 12) = 11.00 liters.","solution":"def total_fuel_required(n, distances, fuel_efficiency): Calculate the total fuel required for the trip. Parameters: n (int): The number of cities to visit excluding the starting point. distances (list): A list of distances between consecutive cities. fuel_efficiency (int): The fuel efficiency of the car in km/l. Returns: float: The total fuel required for the trip rounded to two decimal places. total_distance = sum(distances) total_fuel = total_distance / fuel_efficiency return round(total_fuel, 2)"},{"question":"Problem statement Given a grid of N times N (2 ≤ N ≤ 20) integers, each representing the height of elevations on a terrain, determine the size of the largest rectangular island that can be formed. An island is formed by consecutive heights along both rows and columns that must be equal to or above a given threshold height H . The task requires implementing a function to identify the largest possible rectangular area on the grid that meets the following conditions: * The height of each elevation in the rectangle should be ≥ H . Input The input consists of: * The integer N * An N times N matrix of integers representing the terrain. * The integer H Output Output a single integer - the area of the largest rectangular island that meets the criteria. Input example 1 4 1 2 3 4 6 7 8 9 2 4 6 8 7 5 3 1 5 Output example 1 4 Input example 2 3 5 4 3 8 7 6 5 5 5 5 Output example 2 6 Explanation For Input Example 1: The largest rectangle that can be formed with height ≥ 5 is from the block of dimensions 2×2 in the bottom-left part of the matrix, forming an area of 4. For Input Example 2: The entire 3rd row has heights ≥ 5 and forms an area of 6, which is the largest possible rectangular island in the matrix.","solution":"def largest_island_area(n, grid, h): def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area max_area = 0 histogram = [0] * n for i in range(n): for j in range(n): if grid[i][j] >= h: histogram[j] += 1 else: histogram[j] = 0 max_area = max(max_area, max_histogram_area(histogram)) return max_area"},{"question":"You are given an array of integers and an array of strings. Each string represents an operation that can be one of the following: - \\"increment n\\" which means add n to every element in the integer array. - \\"multiply n\\" which means multiply every element in the integer array by n. - \\"reverse\\" which means reverse the order of elements in the integer array. - \\"swap i j\\" which means swap the elements at indices i and j in the integer array. You need to perform each operation in the given order and output the resultant array after all operations. Input Format The first line contains T, the number of test cases. The first line of each test case contains integer N, the number of elements in the integer array. The second line contains N integers, the elements of the array. The third line contains M, the number of operations. The next M lines each contain one operation as described above. Output Format For each test case, output the resultant array after all operations, space-separated. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 -1000 ≤ Elements in the array ≤ 1000 1 ≤ Value of n in operations ≤ 1000 0 ≤ i, j < N Sample Input 2 5 1 2 3 4 5 3 increment 2 multiply 3 reverse 6 1 2 3 4 5 6 2 swap 1 4 multiply 2 Sample Output 21 18 15 12 9 2 12 6 8 10 12 Explanation For the first test case: 1. After \\"increment 2\\", the array becomes [3, 4, 5, 6, 7]. 2. After \\"multiply 3\\", the array becomes [9, 12, 15, 18, 21]. 3. After \\"reverse\\", the array becomes [21, 18, 15, 12, 9]. For the second test case: 1. After \\"swap 1 4\\", the array becomes [1, 5, 3, 4, 2, 6]. 2. After \\"multiply 2\\", the array becomes [2, 10, 6, 8, 4, 12].","solution":"def perform_operations(arr, operations): Perform operations on the array. Parameters: arr (list of int): The array of integers operations (list of str): The operations to perform on the array Returns: list of int: The array after all operations have been performed for operation in operations: parts = operation.split() if parts[0] == \\"increment\\": n = int(parts[1]) arr = [x + n for x in arr] elif parts[0] == \\"multiply\\": n = int(parts[1]) arr = [x * n for x in arr] elif parts[0] == \\"reverse\\": arr.reverse() elif parts[0] == \\"swap\\": i = int(parts[1]) j = int(parts[2]) arr[i], arr[j] = arr[j], arr[i] return arr def process_test_cases(test_cases): Process multiple test cases and return the results. Parameters: test_cases (list of dict): A list of test cases, where each test case is a dictionary containing the array \'arr\' and the list of \'operations\' Returns: list of list of int: A list containing the resulting array for each test case results = [] for case in test_cases: arr = case[\'arr\'] operations = case[\'operations\'] result = perform_operations(arr, operations) results.append(result) return results"},{"question":"You have a grid with `m` rows and `n` columns, and you are given two integers `x` and `y` representing the coordinates of a cell. Additionally, you are given a list of tuples where each tuple contains two integers representing the coordinates of obstacles. Write a function that determines the length of the shortest path from the top-left corner (0,0) to the cell (x, y) without passing through any obstacles. If there is no valid path, return -1. The path can only move up, down, left, or right. # Function Signature: ```python def shortestPath(m: int, n: int, x: int, y: int, obstacles: List[Tuple[int, int]]) -> int: pass ``` # Example: ```python shortestPath(3, 3, 2, 2, [(0, 1), (1, 1)]) # Output: 4 ``` Explanation: The path is (0,0) -> (0,2) -> (1,2) -> (2,2) # Constraints: - 1 <= m, n <= 1000 - 0 <= x < m - 0 <= y < n - The list of obstacles will not contain duplicates and each coordinate will be distinct and valid within the grid.","solution":"from collections import deque from typing import List, Tuple def shortestPath(m: int, n: int, x: int, y: int, obstacles: List[Tuple[int, int]]) -> int: Determines the length of the shortest path from the top-left corner (0,0) to the cell (x, y) without passing through any obstacles. If there is no valid path, returns -1. The path can only move up, down, left, or right. # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Create visited set to track cells and obstacles visited = set(obstacles) # If start or end is an obstacle, return -1 if (0, 0) in visited or (x, y) in visited: return -1 # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, distance) visited.add((0, 0)) while queue: row, col, dist = queue.popleft() # Check if reached the target cell if row == x and col == y: return dist # Explore neighboring cells for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < m and 0 <= new_col < n and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1 # No valid path found"},{"question":"You are given an array of n integers, all in the range from 0 to 10^6. A k-expressible array is an array that can be expressed using at most k distinct integers. Your task is to determine the minimum number of changes required to make the array k-expressible. -----Input----- The first line contains two integers n and k (1 le n le 10^5, 1 le k le n) — the length of the array and the maximum number of distinct integers allowed. The second line contains n integers a_i (0 le a_i le 10^6) — the elements of the array. -----Output----- Print a single integer — the minimum number of changes to make the array k-expressible. -----Examples----- Input 5 2 1 2 3 4 5 Output 3 Input 7 3 4 4 2 2 2 3 3 Output 0 Input 6 1 1 2 2 1 1 3 Output 3 -----Note----- In the first example, one possible solution is to change three elements to 1 (or alternatively to 2); the array can be 1 1 1 4 5 or 2 2 2 4 5. In the second example, the array is already 3-expressible and no changes are needed. In the third example, we can change the second and third elements to 1, and the last element to 1, making the array 1 1 1 1 1 1. Thus, three changes are required.","solution":"from collections import Counter def min_changes_to_k_expressible(n, k, arr): Returns the minimum number of changes required to make the array k-expressible. # Count the frequency of each number in the array freq = Counter(arr) # If already k or fewer distinct elements, no changes needed if len(freq) <= k: return 0 # Get frequencies sorted in descending order freq_counts = sorted(freq.values(), reverse=True) # Number of elements to retain if we need exactly k distinct elements elements_to_retain = sum(freq_counts[:k]) # Return the number of changes required return n - elements_to_retain"},{"question":"# Calcuate Matrix Rank Matrix rank is defined as the maximum number of linearly independent row or column vectors in the matrix. It is a fundamental concept in linear algebra that gives insights into the solution of systems of linear equations. ![Matrix](https://upload.wikimedia.org/wikipedia/commons/2/2a/Rank-Matrix.svg) # Steps to Calculate Rank 1. **Matrix Initialization:** The given matrix needs to be an `n x m` 2D array (list of lists). 2. **Row Operations:** Perform elementary row operations such as row swapping, scaling, and row addition/subtraction to transform the matrix into row echelon form or a simpler form that allows rank determination. 3. **Rank Determination:** Count the number of non-zero rows after transformation to determine the rank of the matrix. Input - A 2D list of integers, representing an `n x m` matrix. Output - An integer representing the rank of the matrix. Example ```python matrix = [[10, 20, 10], [-20, -30, 10], [30, 50, 0]] # The matrix transforms to: # [1, 2, 1] # [0, 1, 1] # [0, 0, 0] rank_of_matrix(matrix) >>> 2 ``` Notes - Your function should handle various matrix dimensions and ensure to account for edge cases such as identical rows or columns that might affect the rank. - Consider using helper functions to cleanly perform row operations and transition the matrix to its row echelon form.","solution":"import numpy as np def rank_of_matrix(matrix): Returns the rank of the given matrix. A = np.array(matrix) return np.linalg.matrix_rank(A)"},{"question":"Given a string s that consists of only lowercase and uppercase letters, return the length of the longest substring where all the characters are the same after at most k changes (i.e., replacing any character with any other character). Example 1: Input: s = \\"ABAB\\", k = 2 Output: 4 Explanation: Replace the two \'B\'s with \'A\'s to make the string \\"AAAA\\". Example 2: Input: s = \\"AABABBA\\", k = 1 Output: 4 Explanation: Replace the one \'B\' with \'A\' to make the substring \\"AABA\\" which is of length 4. Your Task: Since this is a function problem, you do not need to take any input, as it is already accomplished by the driver code. You need to complete the function longestSubstringWithKChanges() that takes a string s and integer k as parameters and returns the length of the longest substring with all the same characters after at most k changes. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ s.length ≤ 10^5 1 ≤ k ≤ s.length s consists of only lowercase and uppercase English letters.","solution":"def longestSubstringWithKChanges(s, k): from collections import defaultdict max_length = 0 max_count = 0 count = defaultdict(int) left = 0 for right in range(len(s)): count[s[right]] += 1 max_count = max(max_count, count[s[right]]) if right - left + 1 - max_count > k: count[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given two strings A and B. Your task is to find the minimum number of operations required to convert string A into string B. The allowed operations are: 1. Insert a character 2. Remove a character 3. Replace a character Note: All letters of the strings are lowercased. Example 1: Input: A = \\"sunday\\", B = \\"saturday\\" Output: 3 Explanation: The answer is 3 because by following operations we can convert string A to string B: 1. Add character \'a\' after \'s\' -> \\"saunday\\" 2. Add character \'t\' after \'sa\' -> \\"satunday\\" 3. Replace \'n\' with \'r\' -> \\"saturday\\" Example 2: Input: A = \\"kitten\\", B = \\"sitting\\" Output: 3 Explanation: The answer is 3 because by following operations we can convert string A to string B: 1. Replace \'k\' with \'s\' -> \\"sitten\\" 2. Replace \'e\' with \'i\' -> \\"sittin\\" 3. Add \'g\' at the end -> \\"sitting\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function editDistance() which takes strings A and B as input and returns the minimum number of operations required. Expected Time Complexity: O(|A|*|B|) Expected Auxiliary Space: O(|A|*|B|) Constraints: 1 <= |A|, |B| <= 100","solution":"def editDistance(A, B): Function to find the minimum number of operations required to convert string A into string B. Args: A : str : the source string B : str : the target string Returns: int : the minimum number of operations required m = len(A) nl = len(B) # Create a 2D array to store the minimum number of operations dp = [[0 for x in range(nl + 1)] for x in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(nl + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of second string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the # last char and recur for the remaining string elif A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][nl]"},{"question":"Kevin and Olivia are competing in creating sequences composed of \'A\' and \'B\' letters. The game is played on a sequence of length n. Kevin always starts and they take turns with the following rules: 1. Kevin places an \'A\' in any empty position. 2. Olivia places a \'B\' in any empty position. The goal of each player is to maximize the number of their own letters (\'A\' for Kevin and \'B\' for Olivia) in the final sequence when there are no more empty positions. Kevin and Olivia play optimally. This means Kevin will always choose a position that maximizes the difference between the number of \'A\'s and \'B\'s in his favor, while Olivia will choose a position that minimizes this difference. Given the length of the sequence n, calculate the number of \'A\'s in the final sequence after all positions are filled. -----Constraints----- - 1 leq n leq 10^6 -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print the number of \'A\'s in the final sequence. -----Sample Input----- 5 -----Sample Output----- 3 For the sequence length of 5, if Kevin starts by placing an \'A\', Olivia will then place a \'B\' in a position that minimizes the advantage of \'A\'s. This will continue until all positions are taken. When n is odd, Kevin will always end up with one more \'A\' than Olivia\'s \'B\'s because he starts first and both play optimally. Given the sequence length of 4: -----Sample Input----- 4 -----Sample Output----- 2 For an even length sequence, Kevin and Olivia will place their letters optimally, ensuring there is an even split of \'A\'s and \'B\'s as they alternate turns.","solution":"def number_of_As(n): Returns the number of \'A\'s in the final sequence of length n. Kevin starts the game and they play alternately. if n % 2 == 0: return n // 2 else: return (n // 2) + 1"},{"question":"In a large city, there is a linear park that is divided into a series of contiguous sections, each of which may have lampposts to provide lighting at night. The city council has decided to enhance the park\'s lighting system by increasing the brightness level of specific sections based on requests. The park has n sections, and each section i has an initial brightness level b_i. You are to perform q operations where each operation is one of the following: 1. **Increase the brightness** of a specific section by a certain amount. 2. **Query the total brightness** of a range of sections. Your task is to write a program that processes these operations. -----Input----- The first line contains two integers n and q (1 leq n, q leq 100000). The second line contains n integers, representing the initial brightness of each section (0 leq b_i leq 1000). Each of the next q lines contains a single operation in one of the following formats: - \\"1 x y\\" — Increase the brightness of section x by y units (1 leq x leq n, 1 leq y leq 1000). - \\"2 l r\\" — Query the total brightness of the sections from l to r inclusive (1 leq l leq r leq n). -----Output----- For each query operation, output the total brightness of the specified range of sections on a new line. -----Example----- Input 5 4 1 2 3 4 5 1 3 2 2 1 3 1 5 1 2 4 5 Output 8 10 -----Note----- The park initially has 5 sections with brightness levels: [1, 2, 3, 4, 5]. The first operation increases the brightness of section 3 by 2. The brightness levels become: [1, 2, 5, 4, 5]. The second operation queries the total brightness from section 1 to 3, which is 1 + 2 + 5 = 8. The third operation increases the brightness of section 5 by 1. The brightness levels become: [1, 2, 5, 4, 6]. The fourth operation queries the total brightness from section 4 to 5, which is 4 + 6 = 10.","solution":"def enhance_park_lighting(n, q, initial_brightness, operations): brightness_levels = initial_brightness[:] results = [] for op in operations: if op[0] == \'1\': # Increase brightness operation x = int(op[1]) y = int(op[2]) brightness_levels[x - 1] += y elif op[0] == \'2\': # Query total brightness operation l = int(op[1]) r = int(op[2]) total_brightness = sum(brightness_levels[l - 1:r]) results.append(total_brightness) return results"},{"question":"Tim is an avid gardener and wants to divide his rectangular garden into rectangular regions for different types of plants. The garden is represented by a grid of size N times M. He has a list of K plants, where the i-th plant requires a rectangular region of at least h_i times w_i (height times width) to grow. Tim wants to know the maximum number of non-overlapping rectangular regions that he can fit into the garden such that each region can accommodate one of the plants from the list. Additionally, each plant type can be used multiple times, and regions cannot overlap. Write a program to determine the maximum number of non-overlapping rectangular regions that Tim can fit into his garden. Input Format - The first line contains three integers: N (height of the garden), M (width of the garden), and K (number of different plants). - The following K lines each contain two integers h_i and w_i representing the height and width requirements of the i-th plant. Output Format - Output a single integer, the maximum number of non-overlapping rectangular regions that can be fit into the garden. Constraints - 1 leq N, M leq 100 - 1 leq K leq 100 - 1 leq h_i, w_i leq 100 Sample Input 4 4 2 2 2 3 1 Sample Output 4 Explanation Tim\'s garden is of size 4 times 4. - He can fit four 2 times 2 regions into the garden, one in each quadrant. Thus, the maximum number of non-overlapping regions he can fit is 4.","solution":"def max_non_overlapping_regions(N, M, plants): Returns the maximum number of non-overlapping rectangular regions that can fit in the garden. Parameters: N (int): Height of the garden. M (int): Width of the garden. plants (list of tuples): List of tuples where each contains (h_i, w_i) the height and width required for the i-th plant. Returns: int: The maximum number of non-overlapping rectangular regions. max_regions = 0 for h_i, w_i in plants: if h_i <= N and w_i <= M: max_regions = max(max_regions, (N // h_i) * (M // w_i)) if w_i <= N and h_i <= M: max_regions = max(max_regions, (N // w_i) * (M // h_i)) return max_regions"},{"question":"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. Example 1: Input: nums1 = [1, 3], nums2 = [2] Output: 2.0 Example 2: Input: nums1 = [1, 2], nums2 = [3, 4] Output: 2.5 Note: - The overall run time complexity should be O(log (m+n)).","solution":"def findMedianSortedArrays(nums1, nums2): Returns the median of the two sorted arrays nums1 and nums2. The overall runtime complexity should be O(log (m+n)). if len(nums1) > len(nums2): nums1, nums2 = nums2, nums1 m, n = len(nums1), len(nums2) imin, imax, half_len = 0, m, (m + n + 1) // 2 while imin <= imax: i = (imin + imax) // 2 j = half_len - i if i < m and nums1[i] < nums2[j-1]: imin = i + 1 elif i > 0 and nums1[i-1] > nums2[j]: imax = i - 1 else: if i == 0: max_of_left = nums2[j-1] elif j == 0: max_of_left = nums1[i-1] else: max_of_left = max(nums1[i-1], nums2[j-1]) if (m + n) % 2 == 1: return max_of_left if i == m: min_of_right = nums2[j] elif j == n: min_of_right = nums1[i] else: min_of_right = min(nums1[i], nums2[j]) return (max_of_left + min_of_right) / 2.0"},{"question":"You are given a string s consisting of lowercase English letters, which represents a sequence of characters written on a typewriter. Unfortunately, some keys on the typewriter are faulty, and they automatically repeat the character a random number of times whenever pressed. Your task is to determine the original sequence of characters before any of the keys repeated. -----Input----- The first line contains one integer q (1 le q le 10^4) — the number of queries. Each query consists of a single string s (1 le |s| le 10^5) consisting of lowercase English letters. It is guaranteed that the sum of the lengths of all strings over all queries does not exceed 10^6. -----Output----- For each query, print the original sequence of characters (i.e., the sequence without any repeated characters). Note: 1. All characters in the original sequence appear in the same order as in the input string. 2. Each faulty key will always output at least one character, so there will be no runs of zero length. -----Example----- Input 3 aabbccc tttyyypppeee qqqqq Output abc type q Explanation: In the first query, the original sequence before repetition was \\"abc\\". In the second query, the original sequence before repetition was \\"type\\". In the third query, the original sequence before repetition was \\"q\\".","solution":"def remove_repeats(s): Given a string s, return the original sequence of characters before any repetitions caused by faulty keys. if not s: return \\"\\" original = s[0] for char in s[1:]: if char != original[-1]: original += char return original def process_queries(queries): Given a list of queries, process each query and return the results as a list. return [remove_repeats(query) for query in queries]"},{"question":"You are given an array of integers. You need to find a subarray such that: 1. The number of distinct integers in the subarray is equal to or greater than a given number K. 2. The length of the subarray is the shortest among all subarrays that satisfy the first condition. If no such subarray exists, print -1. ------ Input Format ------ - The first line contains a single integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains a single integer K. ------ Output Format ------ Print the length of the shortest subarray that contains at least K distinct integers. If no such subarray exists, print -1. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ array[i] ≤ 10^5 1 ≤ K ≤ 10^5 ----- Sample Input 1 ------ 7 1 2 2 3 4 2 3 3 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ The subarray [2, 3, 4] contains three distinct integers and has a length of 3, which is the shortest subarray that meets the requirement. ----- Sample Input 2 ------ 5 1 2 2 2 3 4 ----- Sample Output 2 ------ -1 ----- Explanation 2 ------ There is no subarray with 4 distinct integers, so the output should be -1.","solution":"def shortest_subarray_with_k_distinct(arr, K): from collections import defaultdict n = len(arr) if K > n: return -1 left = 0 right = 0 min_length = float(\'inf\') current_count = defaultdict(int) distinct_count = 0 while right < n: current_num = arr[right] current_count[current_num] += 1 if current_count[current_num] == 1: distinct_count += 1 while distinct_count >= K: min_length = min(min_length, right - left + 1) left_num = arr[left] current_count[left_num] -= 1 if current_count[left_num] == 0: distinct_count -= 1 left += 1 right += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"The city library is organizing a book cataloging system. Each book in the library is identified by a unique alphanumeric code. The library staff needs a tool to check whether a new book code is valid according to specific rules. Your task is to implement the function ```python def is_valid_book_code(code): ``` # Validation Rules: 1. The code must be exactly 8 characters long. 2. The code must start with two capital letters. 3. The next four characters must be digits. 4. The last two characters must be lowercase letters. # Examples ``` * (\\"AB1234cd\\") -> True * (\\"XY5678ef\\") -> True * (\\"ABC1234d\\") -> False (incorrect length) * (\\"ab1234cd\\") -> False (incorrect starting characters) * (\\"AB12cd34\\") -> False (incorrect digit and lowercase letter placement) ``` # Notes * The function should return `True` if the code meets all the validation criteria. * The function should return `False` otherwise. * You can assume that the code will be a string of characters.","solution":"def is_valid_book_code(code): Checks if a given book code is valid according to the specified rules: 1. The code must be exactly 8 characters long. 2. The code must start with two capital letters. 3. The next four characters must be digits. 4. The last two characters must be lowercase letters. Parameters: code (str): The book code. Returns: bool: True if the code is valid, False otherwise. if len(code) != 8: return False if not code[:2].isupper(): return False if not code[2:6].isdigit(): return False if not code[6:].islower(): return False return True"},{"question":"The city of Mathopolis is laid out in a strict grid format consisting of M x N blocks. Each block can either have a building or be an open space. The mayor wants to know the shortest distance from a specific building to all other blocks. The distance between two blocks is calculated as the Manhattan Distance. You need to help the mayor by writing a program that finds the shortest distance between the specified building and all other blocks in the same row or column. Input Format: - The first line contains two space-separated integers M and N, representing the dimensions of the grid. - The next M lines each contain N characters, where \'B\' represents a block with a building and \'.\' represents an open space. - The last line contains two space-separated integers r and c, which denote the coordinates of the building for which the shortest distances are to be calculated. Constraints: - 1 ≤ M, N ≤ 1000 - 0 ≤ r < M - 0 ≤ c < N - There is always at least one building (\'B\') in the grid. Output Format: - For each block in the grid that is either in the same row or the same column as the specified building, print the coordinates (i, j) and the shortest Manhattan Distance from the building to each block, in the format \\"i j distance\\". Sample Input: 5 5 .B... ..... ..... ...B. ..... 2 1 Sample Output: 0 1 2 1 1 1 2 0 1 2 1 0 2 2 1 2 3 2 2 4 3 3 1 1 4 1 2 Explanation: - The building at (2, 1) has its row and column distances calculated in the grid. - The distance for each block is calculated using the Manhattan distance formula. - Output coordinates and distances only for the blocks that lie in the same row or column as the given building.","solution":"def calculate_shortest_distances(M, N, grid, r, c): Calculates the shortest distances from the specified building to all other blocks in the same row and column. M: int - number of rows in the grid N: int - number of columns in the grid grid: list of strings - M x N grid r: int - row index of the building c: int - column index of the building result = [] # Calculate distances for the same row for j in range(N): result.append((r, j, abs(j - c))) # Calculate distances for the same column for i in range(M): if i != r: result.append((i, c, abs(i - r))) return result"},{"question":"Write a function called `longest_consecutive_sequence` that accepts an array of integers and returns the length of the longest consecutive elements sequence. The sequence must be strictly increasing by 1 unit. The array might contain duplicates, which should be ignored in forming the sequence. # Examples: ```python # Example 1 print(longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) # => 4 # Explanation: The longest consecutive sequence is [1, 2, 3, 4]. # Example 2 print(longest_consecutive_sequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1])) # => 9 # Explanation: The longest consecutive sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. # Example 3 print(longest_consecutive_sequence([9, 1, 4, 7, 3, -1, 0, 5, 8, -1, 6])) # => 7 # Explanation: The longest consecutive sequence is [-1, 0, 1, 2, 3, 4, 5] ``` # Other Considerations: You can assume that the array can contain both positive and negative integers, and it can be empty. # Function Signature: ```python def longest_consecutive_sequence(nums: List[int]) -> int: ```","solution":"from typing import List def longest_consecutive_sequence(nums: List[int]) -> int: if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A company has created a new internal instant messaging system where employees can send messages to each other. Each message can contain only lowercase alphabets and spaces. The system identifies each unique word in a message and stores its frequency in a dictionary. For example, if a message contains the words \\"hello world hello\\", the dictionary will store {\\"hello\\": 2, \\"world\\": 1}. You are tasked with developing a function that processes a list of such messages and returns a dictionary with the total frequency of each unique word across all messages in the list. Write a function `count_word_frequency(messages)` that accepts a list of strings `messages` and returns a dictionary with the total word frequencies. Input: - A list `messages` containing up to `N` strings (1 ≤ N ≤ 100000). - Each string `messages[i]` contains only lowercase alphabets and spaces and its length does not exceed 1000 characters. Output: - A dictionary where keys are unique words and values are their total frequencies across all messages. Example: Input: [\\"hello world\\", \\"hello\\", \\"hello there\\"] Output: {\'hello\': 3, \'world\': 1, \'there\': 1} Hint: - Think about the most efficient way to process and store the word frequencies from large input lists.","solution":"def count_word_frequency(messages): Returns a dictionary with the total frequency of each unique word across all messages. word_frequency = {} for message in messages: words = message.split() for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 return word_frequency"},{"question":"You are given an array of integers. You need to determine the sum of all unique elements in the array. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, the number of elements in the array. - The second line contains N space-separated integers representing the array elements. ------ Output Format ------ For each test case, output the sum of all unique elements in the array on a new line. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 2 cdot 10^5 1 ≤ text{Array elements} ≤ 10^6 - It is guaranteed that the sum of N over all test cases does not exceed 2 cdot 10^5 ------ Sample Input 1 ------ 3 5 1 2 3 2 1 4 4 5 6 7 6 10 20 20 10 30 30 ------ Sample Output 1 ------ 6 22 30 ------ Explanation 1 ------ Test case 1: The unique elements are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6. Test case 2: The unique elements are 4, 5, 6, and 7. Their sum is 4 + 5 + 6 + 7 = 22. Test case 3: The unique elements are 10, 20, and 30. Their sum is 10 + 20 + 30 = 60.","solution":"def sum_of_unique_elements(test_cases): result = [] for case in test_cases: n = case[0] array = case[1] unique_elements = set(array) result.append(sum(unique_elements)) return result # Example usage: # test_cases = [ # (5, [1, 2, 3, 2, 1]), # (4, [4, 5, 6, 7]), # (6, [10, 20, 20, 10, 30, 30]) # ] # print(sum_of_unique_elements(test_cases))"},{"question":"# Task You are given a list of strings where each string consists of lowercase English letters. Your task is to find the longest string in the list of strings that can be formed by concatenating the words from a given dictionary. You may use each word in the dictionary at most once. If no string can be formed, return an empty string. # Examples ```python dictionary = [\\"a\\", \\"banana\\", \\"app\\", \\"appl\\", \\"ap\\", \\"apply\\", \\"apple\\"] strings = [\\"appleapp\\", \\"bananaapple\\", \\"aapplebanana\\", \\"banana\\"] longestConcatenation(strings, dictionary) => \\"aapplebanana\\" ``` In the example above, “aapplebanana” can be formed by concatenating \\"a\\", \\"apple\\", and \\"banana\\" in the dictionary. # Function Signature ```python def longestConcatenation(strings: List[str], dictionary: List[str]) -> str: # Your code here ``` # Constraints - `1 <= len(strings) <= 100` - `1 <= len(dictionary) <= 100` - `1 <= len(strings[i]) <= 1000` for each `strings[i]` - `1 <= len(dictionary[j]) <= 100` for each `dictionary[j]` - All strings in the input will contain only lowercase English letters. # Hint You may want to use memoization to efficiently check if a string can be formed from dictionary words.","solution":"from typing import List def can_form(target: str, dictionary: List[str], memo: dict) -> bool: if target in memo: return memo[target] if target == \\"\\": return True for word in dictionary: if target.startswith(word): if can_form(target[len(word):], dictionary, memo): memo[target] = True return True memo[target] = False return False def longestConcatenation(strings: List[str], dictionary: List[str]) -> str: longest = \\"\\" memo = {} for s in strings: if can_form(s, dictionary, memo): if len(s) > len(longest): longest = s return longest"},{"question":"A company is planning to hold team-building workshops for its employees spanning multiple locations. Each workshop can only be held if the number of registered participants meets or exceeds the minimum required for that workshop. Given a list of potential workshops and their respective participant counts, as well as the minimum number of participants required for each workshop, determine the maximum number of workshops that can be held simultaneously. The function `maxWorkshops` will take two parameters: a list of integers representing the participant counts for each workshop (`workshops`), and an integer representing the minimum required participants (`min_participants`). The function should return an integer representing the maximum number of workshops that can be held. Examples: `workshops1 = [30, 70, 45, 20, 50]` `min_participants1 = 40` `maxWorkshops(workshops1, min_participants1) -> 3` (70, 45, and 50 meet or exceed the minimum required participants) `workshops2 = [25, 35, 10, 55, 60, 15]` `min_participants2 = 50` `maxWorkshops(workshops2, min_participants2) -> 2` (55 and 60 meet or exceed the minimum required participants) `workshops3 = [10, 20, 5, 15, 25]` `min_participants3 = 30` `maxWorkshops(workshops3, min_participants3) -> 0` (No workshops meet or exceed the minimum required participants)","solution":"def maxWorkshops(workshops, min_participants): Returns the maximum number of workshops that can be held based on the minimum required participants. count = sum(1 for participants in workshops if participants >= min_participants) return count # Example usage: Uncomment below line to test # print(maxWorkshops([30, 70, 45, 20, 50], 40)) # Output should be 3"},{"question":"The program must accept a list of integers and determine if the list contains two distinct elements such that their sum is equal to a given target number. If such a pair exists, the program should output the two numbers in any order. If multiple pairs exist, return any one of them. If no such pair exists, output \\"No pair found\\". # Input Format - The first line contains an integer `N`, the size of the list. - The second line contains `N` space-separated integers representing the elements of the list. - The third line contains an integer `T`, the target sum. # Output Format - If a pair exists, print the two integers. - If no pair exists, print \\"No pair found\\". # Constraints 1 ≤ N ≤ 10^5 -10^9 ≤ List elements ≤ 10^9 -10^9 ≤ T ≤ 10^9 # Example Input ``` 5 1 2 3 4 5 6 ``` Output ``` 2 4 ``` Input ``` 4 10 20 30 40 100 ``` Output ``` No pair found ```","solution":"def find_pair_with_sum(nums, target): num_set = set() for num in nums: complement = target - num if complement in num_set: return complement, num num_set.add(num) return \\"No pair found\\""},{"question":"Given an `m x n` matrix, return all elements of the matrix in spiral order. # Rules: 1. You need to traverse the matrix in a clockwise spiral pattern, starting from the top-left corner. 2. You should first move right, then down, left, and finally up, repeating these steps. 3. Continue until all elements have been traversed. # Example: **Input:** ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` **Output:** `[1, 2, 3, 6, 9, 8, 7, 4, 5]` # Explanation: - Start at the top-left corner and move right: `1 -> 2 -> 3` - Move down the outer column: `6 -> 9` - Move left across the bottom row: `8 -> 7` - Move up the outer column: `4` - The inner matrix is `[5]` - Continue from the next inner edge if any: `5` # Note: - The given matrix can be of any size, not necessarily square. - You should handle cases where the matrix might be empty or contain only one row or column.","solution":"def spiralOrder(matrix): Returns all elements of the matrix in spiral order. res = [] if not matrix: return res top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): res.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): res.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): res.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): res.append(matrix[i][left]) left += 1 return res"},{"question":"A manufacturing company has a conveyor belt system that moves packages of different weights. The belt has a maximum weight limit it can handle at once. If at any moment the combined weight of the packages on the belt exceeds the limit, an alarm goes off and the system stops. Given a sequence of weights of packages in the order they are to be placed on the belt and the maximum weight limit of the belt, determine the maximum number of packages that can be placed on the conveyor belt without triggering the alarm. Input: The first line contains a single integer T, denoting the number of test cases. Each of the T test cases has the following format: - The first line contains two space-separated integers M and L. - The second line contains M space-separated integers representing the weights of the packages. Output: Output exactly T integers, each denoting the maximum number of packages that can be placed on the conveyor belt without exceeding the weight limit for the corresponding test case. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 100 1 ≤ L ≤ 10^6 1 ≤ weight of each package ≤ 10^6 SAMPLE INPUT 2 5 10 1 2 3 4 5 4 15 5 5 5 5 SAMPLE OUTPUT 4 3","solution":"def max_packages_on_belt(T, test_cases): results = [] for case in test_cases: M, L, weights = case current_weight = 0 count = 0 for weight in weights: if current_weight + weight > L: break current_weight += weight count += 1 results.append(count) return results"},{"question":"Given two words, write a function to determine if the second word is an anagram of any substring of the first word. -----Input----- The input consists of two strings separated by a newline character: 1. The first string `s1` is the longer string in which to look for an anagram. 2. The second string `s2` is the shorter string that you try to find an anagram for within `s1`. -----Output----- Return a boolean value: `True` if the second word is an anagram of any substring of the first word, `False` otherwise. -----Examples----- Sample Input 1: abdcghbaabcdij bcda Sample Output 1: True Sample Input 2: abbcabc abc Sample Output 2: True","solution":"from collections import Counter def is_anagram_in_substring(s1, s2): Determines if the second word s2 is an anagram of any substring of the first word s1. len_s1, len_s2 = len(s1), len(s2) if len_s2 > len_s1: return False # Create frequency counts for the shorter string s2 s2_count = Counter(s2) # Create a sliding window counter for the first len_s2 characters of s1 window_count = Counter(s1[:len_s2]) # Check if the initial window is an anagram if window_count == s2_count: return True for i in range(len_s2, len_s1): # Slide the window: remove the character going out of the window, add the new character window_count[s1[i]] += 1 window_count[s1[i - len_s2]] -= 1 # Remove zero-count element to keep the comparison clean if window_count[s1[i - len_s2]] == 0: del window_count[s1[i - len_s2]] # Check if the current window is an anagram if window_count == s2_count: return True return False"},{"question":"Tommy is an avid music lover and enjoys creating his own playlists. He stores his songs on an old-school MP3 player, which has limited storage. To manage his songs effectively, he wants to come up with an efficient way to search for songs based on his criteria. Tommy\'s MP3 player stores songs in a way that each song is represented by its unique id, a genre, and a duration (in seconds). The player allows him to add new songs and query for specific information about the songs. You need to help Tommy by implementing a system that supports the following operations: 1. Add a new song with a given id, genre, and duration to the MP3 player. If the song id already exists, update its genre and duration with the new values. 2. Given a genre and a maximum duration, find the total number of songs in the MP3 player that belong to that genre and have a duration less than or equal to the given maximum duration. Input format The first line contains an integer Q, representing the number of operations. Each of the next Q lines describes one operation. There are two types of operations: 1. \\"1 id genre duration\\": Add a new song or update an existing song with the given id, genre, and duration. 2. \\"2 genre max_duration\\": Query the total number of songs belonging to the specified genre and having a duration less than or equal to max_duration. Output format For each query of the second type, output a single integer representing the answer to this query. Constraints 1 ≤ Q ≤ 100000 1 ≤ id ≤ 100000 1 ≤ duration, max_duration ≤ 300 The genre is a string of up to 10 lowercase English characters. SAMPLE INPUT 7 1 1 rock 240 1 2 jazz 180 1 3 rock 120 2 rock 200 1 4 rock 150 2 rock 200 2 jazz 200 SAMPLE OUTPUT 1 2 1 Explanation The first operation adds a new song with id 1, genre \\"rock\\", and duration 240 seconds. The second operation adds a new song with id 2, genre \\"jazz\\", and duration 180 seconds. The third operation adds a new song with id 3, genre \\"rock\\", and duration 120 seconds. The fourth operation queries the number of \\"rock\\" songs with duration ≤ 200, which is 1 (\\"rock\\" song with id 3). The fifth operation adds a new song with id 4, genre \\"rock\\", and duration 150 seconds. The sixth operation queries the number of \\"rock\\" songs with duration ≤ 200, which is now 2 (\\"rock\\" songs with id 3 and id 4). The seventh operation queries the number of \\"jazz\\" songs with duration ≤ 200, which is 1 (\\"jazz\\" song with id 2).","solution":"class MP3Player: def __init__(self): self.songs = {} self.genre_duration_map = {} def add_song(self, song_id, genre, duration): if song_id in self.songs: old_genre, old_duration = self.songs[song_id] if old_genre in self.genre_duration_map: if old_duration in self.genre_duration_map[old_genre]: self.genre_duration_map[old_genre][old_duration] -= 1 if self.genre_duration_map[old_genre][old_duration] == 0: del self.genre_duration_map[old_genre][old_duration] self.songs[song_id] = (genre, duration) if genre not in self.genre_duration_map: self.genre_duration_map[genre] = {} if duration not in self.genre_duration_map[genre]: self.genre_duration_map[genre][duration] = 0 self.genre_duration_map[genre][duration] += 1 def query_songs(self, genre, max_duration): if genre not in self.genre_duration_map: return 0 total = 0 for duration in self.genre_duration_map[genre]: if duration <= max_duration: total += self.genre_duration_map[genre][duration] return total"},{"question":"You are given a string `s` of length `n` (1 ≤ n ≤ 100000), consisting of only lowercase English letters. You are allowed to repeat the following operation any number of times: Choose a non-empty contiguous substring and reverse it. You need to determine if it is possible to arrange the string `s` such that it becomes a palindrome. -----Input----- The first line of input contains an integer `n`, the length of the string. The second line contains a string `s` of exactly `n` lowercase English letters. -----Output----- Print \\"YES\\" (without quotes) if it is possible to rearrange the string `s` to form a palindrome by reversing any number of non-empty contiguous substrings. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 7 racecar Output YES Input 5 abcde Output NO -----Note----- For the first test case, the string \\"racecar\\" is already a palindrome. Hence the answer is \\"YES\\". For the second test case, it is impossible to rearrange the string \\"abcde\\" to form a palindrome using the allowed operations. Hence the answer is \\"NO\\".","solution":"def can_rearrange_to_palindrome(s): Function to determine if it\'s possible to rearrange the string `s` to form a palindrome by reversing any number of non-empty contiguous substrings. char_count = {} # Count frequency of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a rectangular grid with n rows and m columns. Each cell contains a number representing the time (in minutes) it takes to cross that cell. You start at the top-left corner (position (1, 1)) and need to reach the bottom-right corner (position (n, m)). You can only move to the right or down at each step. Your task is to determine the minimum time required to reach the bottom-right corner from the top-left corner. -----Input----- The first line contains two integers n and m (2 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers, where the j-th integer in the i-th line is the time t_ij (1 ≤ t_ij ≤ 100) it takes to cross the cell in the i-th row and the j-th column. -----Output----- Print a single integer — the minimum time required to reach the bottom-right corner from the top-left corner. -----Examples----- Input 3 4 1 3 1 2 2 1 3 1 4 2 1 3 Output 10 Input 2 2 2 3 4 1 Output 6 -----Note----- In the first example, one of the possible paths with the minimum time is: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4), with total time 1+3+1+3+1+1 = 10. In the second example, the only path is: (1,1) -> (1,2) -> (2,2), with total time 2+3+1 = 6.","solution":"def min_path_time(n, m, grid): Calculate the minimum time required to reach the bottom-right corner from the top-left corner. :param n: Number of rows :param m: Number of columns :param grid: 2D list representing the grid with times :return: Minimum time to reach the bottom-right corner # Create a 2D dp array to store the minimum times dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill in the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the minimum time return dp[n-1][m-1]"},{"question":"Roger the Coder loves to play with strings, especially transforming them into new forms. Recently, he came up with a fascinating game called \\"Alternating Characters\\". In this game, he transforms any given string into another string by removing characters to make sure that no two adjacent characters are the same. Roger wants your help with an algorithm to calculate the minimum number of deletions required to convert any given string into one that has no matching adjacent characters. Input: - The first line of input contains an integer `t` (1 ≤ t ≤ 10), representing the number of test cases. - The next `t` lines each contain a single string `s` (1 ≤ |s| ≤ 10^5), consisting only of uppercase English letters (A-Z). Output: - For each test case, output a single integer, the minimum number of deletions required for the corresponding string. Examples: Input: ``` 3 AAAA BBBBB ABABABAB ``` Output: ``` 3 4 0 ``` Explanation: - For the first test case, the string \\"AAAA\\" can be transformed into \\"A\\" by removing 3 \'A\'s. - For the second test case, the string \\"BBBBB\\" can be transformed into \\"B\\" by removing 4 \'B\'s. - For the third test case, the string \\"ABABABAB\\" is already alternating, so no deletions are needed.","solution":"def min_deletions_to_alternating(s): Calculates the minimum number of deletions required to make the string alternate with no two adjacent characters being the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions def process_test_cases(t, test_cases): Processes the test cases and returns the results for each one. results = [] for s in test_cases: results.append(min_deletions_to_alternating(s)) return results"},{"question":"You are given a string S and a query integer Q. For each query, determine whether the string contains a palindrome of length exactly Q. -----Input----- - The first line contains the string S. - The second line contains an integer T denoting the number of queries. - Each of the following T lines contains a single integer Q. -----Output----- For each query, print \\"Yes\\" if there exists a palindrome of length Q in the string S, otherwise, print \\"No\\". -----Constraints----- - The length of string S will be between 1 and 10^5. - The number of queries T will be between 1 and 10^5. - 1 leq Q leq |S| -----Example Input----- abacaba 2 3 4 -----Example Output----- Yes No","solution":"def contains_palindrome_of_length(S, queries): def is_palindrome(sub): return sub == sub[::-1] results = [] for Q in queries: found = False for i in range(len(S) - Q + 1): if is_palindrome(S[i:i + Q]): found = True break results.append(\\"Yes\\" if found else \\"No\\") return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine whether it is possible to rearrange the string such that every pair of adjacent characters are distinct. If possible, output one such rearrangement. If not, output \\"Not possible\\". ------ Input ------ The input consists of a single line containing a string s of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. ------ Output ------ If it is possible to rearrange the letters of the string such that no two adjacent characters are the same, print the rearranged string. If there are multiple valid rearrangements, any of them will be accepted. If it is not possible, print \\"Not possible\\". ------ Example ------ Input: aabb Output: abab ------ Explanation ------ For the string \\"aabb\\", one possible rearrangement is \\"abab\\" where no two adjacent characters are the same. Note: The complexity of the rearrangement should be efficiently handled given the constraints.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two adjacent characters are the same, if possible. Otherwise, return \\"Not possible\\". # Count the frequency of each character freq = Counter(s) # Create a max heap based on the negative frequency (Python\'s heapq is a min heap by default) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = None prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_char = char prev_count = count + 1 # since we used one instance of char # If the rearranged string\'s length is equal to the input string\'s length, it means successful rearrangement if len(result) == len(s): return \'\'.join(result) else: return \\"Not possible\\""},{"question":"Lily Aldrin is now working on designing a fun game for her friends. The game is based on arranging different colored balloons in a straight line. Each balloon has a specific color, and the goal is to see if any subsequence of the balloons creates a \\"rainbow\\" sequence. A \\"rainbow\\" sequence is defined as having exactly one instance of each of the seven colors of the rainbow in the following order: red, orange, yellow, green, blue, indigo, violet. You need to write a program to help Lily determine if there is a rainbow sequence in the given sequence of balloons. Input: The first line of input contains an integer T indicating the number of test cases. The following T lines each contain a string of space-separated colors representing the sequence of balloons. Output: The output should contain \\"Yes\\" if a rainbow sequence is found, and \\"No\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ length of balloon sequence ≤ 1000 Colors are represented as strings and one of the following: \\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"indigo\\", \\"violet\\" SAMPLE INPUT 3 red orange yellow green blue indigo violet red orange green yellow green blue indigo violet red orange yellow blue green indigo violet SAMPLE OUTPUT Yes No No","solution":"def is_rainbow_sequence(balloon_sequence): Determines if the provided balloon sequence contains a rainbow sequence. Args: balloon_sequence (list): A list of balloon colors as strings. Returns: str: \'Yes\' if a rainbow sequence is found, \'No\' otherwise. rainbow_colors = [\\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"indigo\\", \\"violet\\"] n = len(balloon_sequence) if n < 7: return \\"No\\" for i in range(n - 6): if balloon_sequence[i:i + 7] == rainbow_colors: return \\"Yes\\" return \\"No\\" def solve(T, cases): results = [] for case in cases: balloon_sequence = case.split() results.append(is_rainbow_sequence(balloon_sequence)) return results"},{"question":"Given an unsorted array of integers, find the shortest subarray with a sum equal to or greater than a given value. Write a function that receives an array of integers and an integer `s`, and returns the length of the shortest subarray whose sum is at least `s`. If no such subarray exists, return 0. Example 1: Input: nums = [2, 3, 1, 2, 4, 3], s = 7 Output: 2 Explanation: The subarray [4, 3] has the minimal length under the problem constraints. Example 2: Input: nums = [1, 4, 4], s = 4 Output: 1 Example 3: Input: nums = [1, 1, 1, 1, 1, 1, 1], s = 11 Output: 0 Note: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^4 1 <= s <= 10^9","solution":"def min_subarray_len(nums, s): Returns the length of the shortest subarray with a sum >= s. If no such subarray exists, returns 0. n = len(nums) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += nums[right] while current_sum >= s: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Write a function to calculate the \\"digital root\\" of a non-negative integer N. The digital root is the repetitive sum of the digits of N until N is reduced to a single digit. For example, for N = 492, we have the following steps: 4 + 9 + 2 = 15 1 + 5 = 6 Thus, the digital root of 492 is 6. You need to implement a function `digitalRoot` that takes an integer N as input and returns its digital root. Example 1: Input: N = 16 Output: 7 Explanation: 1 + 6 = 7 Example 2: Input: N = 942 Output: 6 Explanation: 9 + 4 + 2 = 15 1 + 5 = 6 Example 3: Input: N = 132189 Output: 6 Explanation: 1 + 3 + 2 + 1 + 8 + 9 = 24 2 + 4 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `digitalRoot(int N)` which takes an integer N as input and returns its digital root. Expected Time Complexity: O(log N) Expected Space Complexity: O(1) Constraints: 0 <= N <= 10^9","solution":"def digitalRoot(N): Compute the digital root of a non-negative integer N. The digital root is the repetitive sum of the digits of N until a single digit is obtained. while N >= 10: N = sum(int(digit) for digit in str(N)) return N"},{"question":"You are given an integer N. Output an NxN matrix with values from 1 to N^2 arranged in such a way that it forms a \\"snake-like\\" pattern. Specifically, the matrix should be filled as follows: - Fill the first row from left to right. - Fill the second row from right to left. - Fill the third row from left to right. - Continue this pattern for all N rows. As a reminder, a \\"snake-like\\" pattern in a NxN grid means the elements in each row are filled in an alternating left-to-right and right-to-left manner. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N. ------ Output Format ------ For each test case, output the NxN matrix where the ith row and jth column contains the corresponding value in the \\"snake-like\\" pattern. Output each row in a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 2 3 4 ------ Sample Output 1 ------ 1 2 3 6 5 4 7 8 9 1 2 3 4 8 7 6 5 9 10 11 12 16 15 14 13","solution":"def generate_snake_pattern_matrix(N): Generates an NxN matrix filled with numbers in a snake-like pattern. matrix = [] num = 1 for i in range(N): row = [] for j in range(N): row.append(num) num += 1 if i % 2 == 1: # if the row index is odd, reverse the row row.reverse() matrix.append(row) return matrix def format_matrix(matrix): Formats the matrix to the required form where each row is space-separated. return \\"n\\".join(\\" \\".join(map(str, row)) for row in matrix) def solve_snake_patterns(test_cases): Takes the number of test cases and a list of N values to generate the matrices for each. results = [] for N in test_cases: matrix = generate_snake_pattern_matrix(N) formatted_matrix = format_matrix(matrix) results.append(formatted_matrix) return results"},{"question":"You are given an NxN grid representing a city. Each cell in the grid either contains a zero or a one. A cell containing zero represents an open plot, while a cell containing one represents a building. You can perform the following operation any number of times (including zero): Choose any open plot (cell containing zero) and build a building there, changing it from zero to one. Your objective is to form the largest square block of buildings (cells with value one) in the grid. The size of a square block is defined by the number of buildings along one side of the square. Determine the size of the largest square block of buildings you can potentially form by performing the above operation optimally. -----Input----- The first line of input contains an integer T, the number of test cases. Each test case starts with an integer N, the size of the grid. The next N lines each contain N space-separated integers (either 0 or 1), representing the grid. -----Output----- For each test case, output a single integer representing the size of the largest square block of buildings you can create. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 0 ≤ grid[i][j] ≤ 1 -----Example----- Input: 2 3 1 0 1 0 1 0 1 0 1 4 0 1 1 0 1 0 1 1 1 1 0 0 0 0 1 1 Output: 3 4 -----Explanation----- Example case 1. One possible optimal configuration: 1 1 1 1 1 1 1 1 1 The largest square block has size 3. Example case 2. One possible optimal configuration: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 The largest square block has size 4. You must build buildings optimally in open plots to form the largest possible square block.","solution":"def largest_square_block(T, test_cases): results = [] for case in test_cases: N = case[0] grid = case[1] # Auxiliary DP table dp = [[0] * N for _ in range(N)] max_square_side = 0 for i in range(N): for j in range(N): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_square_side = max(max_square_side, dp[i][j]) # Because we can potentially convert every zero to one max_square_side = N results.append(max_square_side) return results"},{"question":"Calculate the score of a word in a game of Scrabble. The score of a word is the sum of the points of its individual letters. The point values of each letter are as follows: - 1 point: A, E, I, O, U, L, N, S, T, R - 2 points: D, G - 3 points: B, C, M, P - 4 points: F, H, V, W, Y - 5 points: K - 8 points: J, X - 10 points: Q, Z Your task is to determine the score of a given word according to the above point values. Input The first line of input contains an integer, n, the number of test cases. Each of the next n lines contains a single word consisting of only uppercase English alphabets. Output For each test case, output the score of the corresponding word. Example Input: 3 HELLO WORLD SCRABBLE Output: 8 9 14","solution":"def scrabble_score(word): Returns the Scrabble score for the given word. score_chart = { 1: \'AEIOULNSTR\', 2: \'DG\', 3: \'BCMP\', 4: \'FHVWY\', 5: \'K\', 8: \'JX\', 10: \'QZ\' } score = 0 for letter in word: for points, letters in score_chart.items(): if letter in letters: score += points break return score"},{"question":"# Create a function `longest_substring_distinct_chars(s: str) -> int` that takes a string `s` as input and returns the length of the longest substring that contains no repeating characters. For example: ``` longest_substring_distinct_chars(\\"abcabcbb\\") = 3 longest_substring_distinct_chars(\\"bbbbb\\") = 1 longest_substring_distinct_chars(\\"pwwkew\\") = 3 ``` Explanation: - \\"abcabcbb\\": The answer is \\"abc\\", with the length of 3. - \\"bbbbb\\": The answer is \\"b\\", with the length of 1. - \\"pwwkew\\": The answer is \\"wke\\", with the length of 3. The function should return `0` for an empty string. Additional Examples: ``` longest_substring_distinct_chars(\\"abcdabcd\\") = 4 longest_substring_distinct_chars(\\"aabbcc\\") = 2 longest_substring_distinct_chars(\\"abrkaabcdefghijjxxx\\") = 10 ``` Good luck!","solution":"def longest_substring_distinct_chars(s: str) -> int: Returns the length of the longest substring with all distinct characters. if not s: return 0 start = 0 max_length = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers, A, with length N. You need to perform Q updates on this array and then answer Q_1 queries about the sum of subarrays. There are two types of operations: updating an element and querying the sum of a subarray. The operations are as follows: 1. Update the i^{th} element to x. The operation is given as: `1 i x` 2. Query the sum of elements from index l to r (inclusive). The operation is given as: `2 l r` ------ Input ------ - The first line of the input contains two space-separated integers N and Q. - The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the initial array A. - The following Q lines describe the operations. Each operation is given in one of the two formats specified above. ------ Output ------ - For each query of the second type, print a single line containing one integer — the sum of the subarray A[l..r]. ------ Constraints ------ - 1 ≤ N, Q ≤ 10^5 - 1 ≤ A_i ≤ 10^9 for each valid i - 1 ≤ i ≤ N - 1 ≤ l ≤ r ≤ N ----- Sample Input 1 ------ 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 1 5 ----- Sample Output 1 ------ 6 12 23 ----- Explanation 1 ------ Initially, A = [1, 2, 3, 4, 5]. - For the first query, the sum from index 1 to index 3 (inclusive) is 1 + 2 + 3 = 6. - After the update operation, A = [1, 10, 3, 4, 5]. - For the second query, the sum from index 1 to index 3 (inclusive) is 1 + 10 + 3 = 14. - For the third query, the sum from index 1 to index 5 (inclusive) is 1 + 10 + 3 + 4 + 5 = 23.","solution":"def array_operations(N, Q, A, operations): Apply update and query operations on the array A. Parameters: N: int - length of the array Q: int - number of operations A: list of int - the initial array operations: list of tuples - list of operations where each operation is (type, param1, param2) Returns: list of int - results of the query operations. results = [] for op in operations: if op[0] == 1: i, x = op[1], op[2] A[i - 1] = x # Update operation (convert 1-based index to 0-based) elif op[0] == 2: l, r = op[1], op[2] results.append(sum(A[l - 1:r])) # Query operation (convert 1-based indices to 0-based) return results"},{"question":"You are given a string containing only the characters \'H\' and \'T\', representing heads and tails of a coin, respectively. Your task is to find the length of the longest consecutive sequence of heads (\'H\') in the string. For example: If the input string is \\"HHTTHTHH\\", the longest consecutive sequence of heads is 2 (either from the first two characters or the last two characters). If the input string is \\"THTHTTTHH\\", the longest consecutive sequence of heads is 2 (the last two characters). If the input string is \\"TTTTTT\\", there are no heads, so the output should be 0. Write a function `longest_heads_sequence(s: str) -> int` that takes a string as input and returns the length of the longest consecutive sequence of heads. Some examples: longest_heads_sequence(\\"HHTTHTHH\\") => 2 longest_heads_sequence(\\"THTHTTTHH\\") => 2 longest_heads_sequence(\\"TTTTTT\\") => 0 longest_heads_sequence(\\"HHHHHHTTTHHH\\") => 6 **NOTES:** * The string will contain only \'H\' and \'T\'. * The string will have at least one character.","solution":"def longest_heads_sequence(s: str) -> int: Returns the length of the longest consecutive sequence of \'H\' in the given string. max_length = 0 current_length = 0 for char in s: if char == \'H\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You have to implement a circular buffer (also known as a ring buffer). A circular buffer is a fixed-size buffer that operates in a circular manner. When the buffer is full and a new element is inserted, the oldest element in the buffer is overwritten. You need to create the following methods for your circular buffer class: ```python class CircularBuffer: def __init__(self, size): # Initialize buffer with given size pass def read(self): # Read and remove the oldest element in the buffer pass def write(self, data): # Write a new element to the buffer pass def overwrite(self, data): # Overwrite the oldest element if the buffer is full and add a new one pass def clear(self): # Clear the buffer pass def get_data(self): # Get all elements in the buffer as a list pass ``` # Function Details: - `__init__(self, size)`: Initialize the buffer with the provided size. - `read(self)`: Remove and return the oldest element in the buffer. If the buffer is empty, raise an exception. - `write(self, data)`: Add a new element to the buffer. If the buffer is full, raise an exception. - `overwrite(self, data)`: Add a new element to the buffer. If the buffer is full, overwrite the oldest element. - `clear(self)`: Clear the buffer. - `get_data(self)`: Return a list of all elements in the buffer, starting with the oldest element. # Example: ```python buffer = CircularBuffer(3) buffer.write(1) # buffer: [1] buffer.write(2) # buffer: [1, 2] buffer.write(3) # buffer: [1, 2, 3] print(buffer.get_data()) # Output: [1, 2, 3] buffer.read() # Output: 1 buffer.write(4) # buffer: [2, 3, 4] print(buffer.get_data()) # Output: [2, 3, 4] buffer.overwrite(5) # buffer: [3, 4, 5] print(buffer.get_data()) # Output: [3, 4, 5] buffer.clear() # buffer: [] print(buffer.get_data()) # Output: [] ``` # Constraints: - The buffer must maintain a fixed size. - You can assume that the data written to the buffer will be integers. - If an invalid operation is attempted (like reading an empty buffer), raise an appropriate exception. - The `get_data()` method helps in checking the current state of the buffer.","solution":"class CircularBuffer: def __init__(self, size): self.size = size self.buffer = [None] * size self.head = 0 self.tail = 0 self.is_full = False def read(self): if self.is_empty(): raise Exception(\\"Buffer is empty\\") data = self.buffer[self.head] self.buffer[self.head] = None self.head = (self.head + 1) % self.size self.is_full = False return data def write(self, data): if self.is_full: raise Exception(\\"Buffer is full\\") self.buffer[self.tail] = data self.tail = (self.tail + 1) % self.size if self.tail == self.head: self.is_full = True def overwrite(self, data): if self.is_full: self.head = (self.head + 1) % self.size self.buffer[self.tail] = data self.tail = (self.tail + 1) % self.size if self.tail == self.head: self.is_full = True def clear(self): self.buffer = [None] * self.size self.head = 0 self.tail = 0 self.is_full = False def get_data(self): if self.head == self.tail and not self.is_full: return [] if self.head < self.tail: return [x for x in self.buffer[self.head:self.tail] if x is not None] else: return [x for x in self.buffer[self.head:] + self.buffer[:self.tail] if x is not None] def is_empty(self): return self.head == self.tail and not self.is_full"},{"question":"In a town, there is a popular delivery service. There are N delivery requests from different customers. The delivery person can fulfill only one request at a time, and hence must choose their route wisely to minimize the travel time. Each delivery request contains the coordinates of the customer\'s house (x_i, y_i) and the delivery person starts at the origin (0, 0). The delivery person can choose any larger subset of requests to fulfill in one go, as long as the travel distance to the farthest house in that subset is minimized. The travel distance is simply the Euclidean distance from the origin to the location of the house. The task is to find the delivery plan that minimizes the farthest travel distance from the origin. Constraints: * 1 ≤ N ≤ 200,000 * -10^9 ≤ x_i, y_i ≤ 10^9 Input Input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 ... x_N y_N Output Print the minimized distance to the farthest house in the optimal delivery plan, rounded to six decimal places. Examples Input 3 3 4 -3 -4 1 1 Output 5.000000 Input 5 0 5 0 10 10 0 -7 0 0 0 Output 7.000000","solution":"import math def minimize_farthest_travel_distance(delivery_requests): Returns the minimized distance to the farthest house in the optimal delivery plan. :param delivery_requests: List of tuples (x, y) representing the coordinates of houses. :return: Minimized maximum distance as a float rounded to six decimal places. max_distance = 0 for x, y in delivery_requests: distance = math.sqrt(x ** 2 + y ** 2) if distance > max_distance: max_distance = distance return round(max_distance, 6) def read_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) delivery_requests = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(n)] return delivery_requests if __name__ == \\"__main__\\": delivery_requests = read_input() result = minimize_farthest_travel_distance(delivery_requests) print(result)"},{"question":"A company is organizing a coding competition, and they have provided a scoreboard with scores of participants. To manage the results effectively, they need to track the number of participants who have a score above a specific threshold and update the scores in the scoreboard efficiently. Your task is to implement two functions: 1. `add_score(participant_id, score)`: This function will add the `score` to the current score of the participant identified by `participant_id`. If the participant is not already in the scoreboard, this function should initialize their score with the given `score`. 2. `count_above(threshold)`: This function will return the number of participants whose score is currently above the given `threshold`. You need to support multiple queries, where each query is either an `add_score` operation or a `count_above` operation. Input Format The first line contains an integer mathbf{Q}, indicating the number of queries. The next mathbf{Q} lines contain either of the following two types of queries: - `add_score participant_id score`: Adds the `score` to the score of the participant with `participant_id`. - `count_above threshold`: Returns the number of participants with a score above `threshold`. Output Format For each `count_above` query, print the number of participants meeting the criteria. Constraints 1 leq Q leq 10^5 1 leq participant_id leq 10^6 -10^4 leq score, threshold leq 10^4 Sample Input 8 add_score 1 10 add_score 2 20 add_score 1 15 count_above 10 count_above 20 add_score 3 25 count_above 20 count_above 40 Sample Output 2 1 2 1 Explanation 1. After the first two `add_score` operations, participants 1 and 2 have scores of 10 and 20 respectively. 2. After the third `add_score` operation, participant 1\'s score becomes 25 (10 + 15). 3. The fourth query `count_above 10` returns 2, as participants 1 and 2 have scores above 10. 4. The fifth query `count_above 20` returns 1, as only participant 1 has a score strictly above 20. 5. After the sixth query `add_score 3 25`, participant 3\'s score is 25. 6. The seventh query `count_above 20` returns 2, as participants 1 and 3 have scores above 20. 7. The eighth query `count_above 40` returns 1, as participant 3 has a score strictly above 40.","solution":"class Scoreboard: def __init__(self): self.scores = {} def add_score(self, participant_id, score): if participant_id in self.scores: self.scores[participant_id] += score else: self.scores[participant_id] = score def count_above(self, threshold): count = 0 for score in self.scores.values(): if score > threshold: count += 1 return count"},{"question":"There is a game where you have an initial score S, and you can perform several operations to either increase or decrease your score based on given rules. Each operation is represented by a command string, which can either be \\"increase X\\" or \\"decrease X\\", where X is the amount by which to change the score. Your task is to determine the final score after performing all the given operations starting from the initial score. -----Input:----- - The first line will contain the initial score S. - The second line will contain an integer N, the number of operations. - The next N lines will each contain a command string \\"increase X\\" or \\"decrease X\\", where X is an integer. -----Output:----- - Print the final score after all operations have been applied. -----Constraints----- - 1 leq S leq 10^9 - 1 leq N leq 100000 - 1 leq X leq 1000000 -----Sample Input:----- 100 3 increase 50 decrease 20 increase 30 -----Sample Output:----- 160","solution":"def final_score(S, operations): Determines the final score after performing all the given operations. Parameters: S (int): Initial score. operations (list of str): List of operations in the form \\"increase X\\" or \\"decrease X\\". Returns: int: Final score after all operations. for operation in operations: command, value = operation.split() value = int(value) if command == \\"increase\\": S += value elif command == \\"decrease\\": S -= value return S"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function z(s,e,l,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),x(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):u("",!0)])}const M=d(A,[["render",z],["__scopeId","data-v-1e09ef1e"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/11.md","filePath":"deepseek/11.md"}'),D={name:"deepseek/11.md"},G=Object.assign(D,{setup(s){return(e,l)=>(n(),i("div",null,[v(M)]))}});export{B as __pageData,G as default};
