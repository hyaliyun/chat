import{_ as h,o as n,c as i,a as t,m as c,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function A(r,e,l,m,s,a){return n(),i("div",q,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(d(l.poem.solution),1)])])])}const C=h(k,[["render",A],["__scopeId","data-v-adf08a18"]]),F=JSON.parse(`[{"question":"Write a function that takes a large text document as input and returns the k most frequent words in the document. Ensure that your function is efficient in terms of both time and space complexity. The function should be case-insensitive and should disregard punctuation marks such as commas, periods, and exclamation points. Words should be treated as sequences of alphabetic characters only. The function should also handle ties by returning the words in alphabetical order when they have the same frequency count. Additionally, the function should be designed to handle very large files, so ensure that it efficiently processes the text. Your function should return a list of tuples where each tuple contains a word and its frequency count, sorted by the frequency count in descending order. If k is greater than the number of unique words, the function should return all unique words. Duplicate words and their counts should be combined properly. Write appropriate error handling to manage edge cases such as an empty file, files that do not exist, or files with non-alphabetic characters only.","solution":"import re from collections import Counter def k_most_frequent_words(text, k): Returns the k most frequent words in the text. Args: text (str): input text document as a string k (int): number of most frequent words to return Returns: List[Tuple[str, int]]: list of tuples containing words and their frequency count if not text or not isinstance(text, str): return [] # Normalize the text text = text.lower() words = re.findall(r'b[a-z]+b', text) # Extract words if not words: return [] # Count the frequency of words word_count = Counter(words) # Get the k most common words and handle ties alphabetically most_common = word_count.most_common() most_common.sort(key=lambda x: (-x[1], x[0])) return most_common[:k]"},{"question":"Create a function in Python that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. Implement the function with a nested helper function to check for prime numbers. Ensure the solution is optimized for large input sizes.","solution":"def filter_primes(numbers): Returns a list of prime numbers from the input list. :param numbers: List[int] - A list of integers. :return: List[int] - A list of prime numbers from the input list. def is_prime(n): Checks if a number is prime. :param n: int - The number to check. :return: bool - True if the number is prime, False otherwise. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True return [num for num in numbers if is_prime(num)]"},{"question":"Write a function in Python that takes a list of strings and a target string, and returns the list of strings sorted by the number of characters they have in common with the target string. Only consider common characters once (even if they occur multiple times in both strings). If two strings have the same number of common characters, they should retain their original order. Input: - A list of strings: ['apple', 'banana', 'pear', 'peach'] - A target string: 'pale' Output: - The sorted list of strings: ['apple', 'pear', 'peach', 'banana'] The function should be defined as follows: \`\`\`python def sort_by_common_chars(strings, target): # Your code here \`\`\`","solution":"def count_common_chars(s, target_set): Counts the number of unique characters in s that are also in the target_set. return len(set(s) & target_set) def sort_by_common_chars(strings, target): Sorts a list of strings based on the number of unique characters they have in common with the target string. target_set = set(target) return sorted(strings, key=lambda s: count_common_chars(s, target_set), reverse=True)"},{"question":"How would you implement a function that takes a matrix of integers and returns the sum of each of its diagonals? The primary diagonal runs from the top left to the bottom right, while the secondary diagonal runs from the top right to the bottom left. Your function should return a tuple containing the sum of the primary diagonal and the sum of the secondary diagonal. Note that the matrix is always square (n x n) and you should handle matrices of various sizes. Illustrate your solution with an example and explain the expected output.","solution":"def sum_of_diagonals(matrix): Returns a tuple (sum_primary_diagonal, sum_secondary_diagonal) containing the sum of the primary diagonal and the secondary diagonal of a square matrix. n = len(matrix) sum_primary_diagonal = sum(matrix[i][i] for i in range(n)) sum_secondary_diagonal = sum(matrix[i][n - 1 - i] for i in range(n)) return (sum_primary_diagonal, sum_secondary_diagonal) # Example # Input: # [ # [1, 2, 3], # [4, 5, 6], # [7, 8, 9] # ] # Primary Diagonal: 1 + 5 + 9 = 15 # Secondary Diagonal: 3 + 5 + 7 = 15 # Output: (15, 15)"},{"question":"Given a string, write a function that finds the first non-repeating character. If all characters repeat, return an empty string. Ignore spaces and consider uppercase and lowercase characters as distinct. \`\`\`python def first_non_repeating_character(s: str) -> str: # Your code here pass # Example usage: s = \\"Swiss cheese\\" print(first_non_repeating_character(s)) # Output should be 'S' \`\`\`","solution":"def first_non_repeating_character(s: str) -> str: Given a string, finds the first non-repeating character. If all characters repeat, return an empty string. Ignore spaces and consider uppercase and lowercase characters as distinct. from collections import Counter # Remove spaces and count character frequencies s_no_spaces = s.replace(\\" \\", \\"\\") char_count = Counter(s_no_spaces) # Find the first non-repeating character for char in s_no_spaces: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function \`find_unique_triplets(arr, target_sum)\` that finds all unique triplets in a list of integers \`arr\` that add up to a given \`target_sum\`. A triplet (a, b, c) is considered unique if no two triplets contain the same set of three numbers, regardless of their order. The function should return a list of these unique triplets. # Example Input \`\`\`python arr = [12, 3, 6, 1, 6, 9] target_sum = 24 \`\`\` # Example Output \`\`\`python [[12, 6, 6], [3, 9, 12]] \`\`\` # Function Signature \`\`\`python def find_unique_triplets(arr: List[int], target_sum: int) -> List[List[int]]: pass \`\`\` # Constraints 1. The function should handle lists with at least three numbers and no more than 1000 numbers. 2. All numbers in the array will be integers in the range -10^6 to 10^6. 3. The solution should have a reasonable time complexity, preferably better than O(n^3). A typical solution can achieve O(n^2) complexity. # Additional Notes - Include appropriate error handling for edge cases, such as when the input list does not contain enough elements. - Ensure your implementation does not return duplicate triplets in different orders.","solution":"from typing import List def find_unique_triplets(arr: List[int], target_sum: int) -> List[List[int]]: arr.sort() triplets = set() # Using a set to automatically handle duplicates for i in range(len(arr) - 2): left, right = i + 1, len(arr) - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target_sum: triplets.add((arr[i], arr[left], arr[right])) left += 1 right -= 1 elif current_sum < target_sum: left += 1 else: right -= 1 return [list(triplet) for triplet in triplets]"},{"question":"Develop a Python function that simulates a basic inventory system for a small store. The function should accept a list of tuples where each tuple contains the name of the item (a string), the price of the item (a float), and the quantity in stock (an integer). Your task is to create two main functionalities: 1. A function to add a new item to the inventory. If the item already exists, update the quantity in stock. 2. A function to generate a report of the current inventory. This should return a list of dictionaries, where each dictionary represents an item in the inventory with the following keys: 'name', 'price', and 'quantity'. Ensure that: - The inventory list should remain sorted by the item names in ascending order. - The functions handle edge cases, such as adding items with the same name but different prices. Example of input: \`\`\`python inventory = [ (\\"apple\\", 0.50, 10), (\\"banana\\", 0.30, 5), (\\"orange\\", 0.60, 8) ] \`\`\` Example usage: \`\`\`python # Add a new item or update existing item add_item(inventory, \\"apple\\", 0.50, 5) add_item(inventory, \\"grape\\", 0.70, 7) # Generate the report print(generate_report(inventory)) \`\`\` Expected result: \`\`\`python [ {'name': 'apple', 'price': 0.50, 'quantity': 15}, {'name': 'banana', 'price': 0.30, 'quantity': 5}, {'name': 'grape', 'price': 0.70, 'quantity': 7}, {'name': 'orange', 'price': 0.60, 'quantity': 8} ] \`\`\` Advanced Difficulty Bonus: The inventory system should also manage the selling of items. Create a function that accepts the item name and the quantity to sell. If the quantity in stock is less than the quantity to sell, notify the user and do not make any change to the inventory. If the sale is successful, update the inventory accordingly.","solution":"def add_item(inventory, name, price, quantity): Add a new item to the inventory or update the quantity if the item already exists. found = False for item in inventory: if item[0] == name: if item[1] == price: item[2] += quantity found = True break if not found: inventory.append([name, price, quantity]) inventory.sort(key=lambda x: x[0]) def generate_report(inventory): Generate a report of the current inventory. report = [] for item in inventory: report.append({ 'name': item[0], 'price': item[1], 'quantity': item[2] }) return report"},{"question":"Write a function to compute the area and circumference of an ellipse. This function should first calculate the area and then the circumference of the ellipse. There are two parts to this problem: 1. Compute the area (A) of the ellipse as \`A = pi * a * b\`, where 'a' is the semi-major axis and 'b' is the semi-minor axis. 2. Then calculate the circumference (C) of the ellipse using the approximation formula \`C ≈ pi * (3(a + b) - sqrt((3a + b) * (a + 3b)))\`. It is essential to follow these steps to obtain the required results, rather than simply applying the formulas directly. Your function should return both the area and the circumference as a tuple. Test your function with various inputs to validate its correctness. Ensure that your implementation handles potential inaccuracies due to floating-point precision.","solution":"import math def ellipse_area_and_circumference(a, b): Calculate the area and circumference of an ellipse. Parameters: a (float): semi-major axis b (float): semi-minor axis Returns: tuple: (area, circumference) # Calculate area area = math.pi * a * b # Approximate circumference using the given formula circumference = math.pi * (3 * (a + b) - math.sqrt((3 * a + b) * (a + 3 * b))) return area, circumference"},{"question":"Write a Python function that takes a list of strings and returns a dictionary. The keys of the dictionary should be the strings, and the values should be the number of vowels (a, e, i, o, u) in each string. Ignore case (i.e., treat 'A' and 'a' as the same vowel) and do not use any external libraries.","solution":"def count_vowels(strings): Takes a list of strings and returns a dictionary with the strings as keys and the number of vowels in each string as values. Ignores case. def vowel_count(s): vowels = \\"aeiou\\" count = 0 for char in s.lower(): if char in vowels: count += 1 return count result = {s: vowel_count(s) for s in strings} return result"},{"question":"Implement a class-based solution to manage a collection of geometrical shapes and compute their total area. The system should handle at least three different shapes: circles, rectangles, and triangles, with the capability to add more in the future. Each shape should be represented by an object containing the necessary attributes (e.g., radius for a circle, width and height for a rectangle) and a method to calculate its area. Additionally, create a container class that holds a list of different shape objects and provides a method to calculate the total area of all shapes in the collection. Ensure the solution is extensible to accommodate new shapes by adhering to principles of polymorphism and inheritance. Each shape class should include: - Private attributes for storing its essential parameters. - A public method to calculate and return its area. - An initializer to set its parameters. The container class should include: - Methods to add new shape objects to the collection. - A method to compute and return the total area of all shapes. Write a program that tests your implementation by creating instances of each shape, adding them to the container, and computing the total area.","solution":"from typing import List import math class Shape: def area(self): raise NotImplementedError(\\"Subclasses should implement this!\\") class Circle(Shape): def __init__(self, radius: float): self._radius = radius def area(self): return math.pi * (self._radius ** 2) class Rectangle(Shape): def __init__(self, width: float, height: float): self._width = width self._height = height def area(self): return self._width * self._height class Triangle(Shape): def __init__(self, base: float, height: float): self._base = base self._height = height def area(self): return 0.5 * self._base * self._height class ShapeCollection: def __init__(self): self._shapes: List[Shape] = [] def add_shape(self, shape: Shape): self._shapes.append(shape) def total_area(self): return sum(shape.area() for shape in self._shapes)"},{"question":"Develop a Python function that receives a list of integers and identifies the contiguous subarray which has the largest sum, then returns that sum. This exercise tests your comprehension of dynamic programming and array manipulation techniques.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray within a list which has the largest sum. Args: nums (list of int): The list of integers. Returns: int: The sum of the contiguous subarray with the largest sum. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that accepts a string of words separated by spaces and returns a dictionary where the keys are the unique words and the values are the number of occurrences of each word in the string. Ensure the function is case-insensitive. Next, write a function that sorts the dictionary produced from the first function by the number of occurrences of each word in descending order. Finally, demonstrate these functions using the input string \\"Hello world hello\\".","solution":"def word_count(s): Returns a dictionary with unique words as keys and their occurrences as values. The function is case-insensitive. words = s.lower().split() count_dict = {} for word in words: if word in count_dict: count_dict[word] += 1 else: count_dict[word] = 1 return count_dict def sort_word_count(word_dict): Returns a sorted list of tuples (word, count) from a dictionary. The list is sorted by count in descending order. return sorted(word_dict.items(), key=lambda item: item[1], reverse=True) # Demonstration input_string = \\"Hello world hello\\" word_dict = word_count(input_string) sorted_word_list = sort_word_count(word_dict) sorted_word_list"},{"question":"Write a function named \`merge_and_sort\` that takes two lists of integers as input, merges them into a single list, and returns the merged list sorted in ascending order. You are not allowed to use any built-in sorting functions. Ensure efficiency by leveraging a sorting algorithm such as merge sort or quicksort. Test your function with the input lists [3, 1, 4] and [2, 6, 5], and ensure the output is [1, 2, 3, 4, 5, 6].","solution":"def merge_and_sort(list1, list2): Merges two lists and sorts them using merge sort algorithm. Returns the sorted merged list. merged_list = list1 + list2 return merge_sort(merged_list) def merge_sort(lst): if len(lst) <= 1: return lst mid = len(lst) // 2 left_half = merge_sort(lst[:mid]) right_half = merge_sort(lst[mid:]) return merge(left_half, right_half) def merge(left, right): sorted_list = [] left_index = right_index = 0 while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: sorted_list.append(left[left_index]) left_index += 1 else: sorted_list.append(right[right_index]) right_index += 1 sorted_list.extend(left[left_index:]) sorted_list.extend(right[right_index:]) return sorted_list"},{"question":"Write a Python function that takes a list of integers as input and returns a list of squared values of only the even numbers in the original list. The order of the even numbers in the output list should match their order in the input list. If there are no even numbers, the function should return an empty list. Example: Input list: [1, 2, 3, 4, 5] Output list: [4, 16]","solution":"def square_even_numbers(numbers): Returns a list of squares of the even numbers from the input list, while maintaining their order in the original list. return [x**2 for x in numbers if x % 2 == 0]"},{"question":"Write a Python function that takes a string as input and returns the most frequent character in the string. In the case of a tie, return the character that appears first in the string. The function should handle both lowercase and uppercase characters and consider them as the same character (i.e., 'A' and 'a' should be treated as the same). Ignore non-alphabetic characters. Here is the function signature: \`\`\`python def most_frequent_character(s: str) -> str: Returns the most frequent character in the string (case insensitive). In case of tie, returns the character that appears first. Ignores non-alphabetic characters. >>> most_frequent_character(\\"Hello World!\\") 'l' >>> most_frequent_character(\\"aabbccddee\\") 'a' >>> most_frequent_character(\\"!@#%^&\\") '' \`\`\`","solution":"def most_frequent_character(s: str) -> str: from collections import Counter # Preprocess string: remove non-alphabetic characters and make it lower case filtered_s = [char.lower() for char in s if char.isalpha()] if not filtered_s: return '' # Create a Counter object to count the frequencies of each character character_count = Counter(filtered_s) # Find the maximum frequency and the corresponding character most_frequent = max(character_count, key=lambda char: (character_count[char], -filtered_s.index(char))) return most_frequent"},{"question":"Refactor the given Python function which calculates the compound interest to ensure it correctly handles user inputs, including non-numeric or negative values for principal, rate of interest, and time duration. Incorporate appropriate validation and error-handling mechanisms. def compound_interest(principal, rate, time): Given principal amount, annual interest rate, and time in years, calculates and returns the compound interest assuming it’s compounded annually. >>> compound_interest(1000, 5, 2) 1102.5","solution":"def compound_interest(principal, rate, time): Given principal amount, annual interest rate, and time in years, calculates and returns the compound interest assuming it's compounded annually. if not isinstance(principal, (int, float)) or principal < 0: raise ValueError(\\"Principal must be a non-negative number.\\") if not isinstance(rate, (int, float)) or rate < 0: raise ValueError(\\"Rate of interest must be a non-negative number.\\") if not isinstance(time, (int, float)) or time < 0: raise ValueError(\\"Time duration must be a non-negative number.\\") return principal * (1 + rate / 100) ** time"},{"question":"Write a function that takes a string containing an encoded message and an integer representing a shift value for a Caesar cipher. The function should return a new string where each letter in the input string has been shifted by the integer value. The function should maintain the case of the letters and should not alter any non-letter characters.","solution":"def caesar_cipher(message, shift): Encrypts the message by shifting each letter by the provided shift value using the Caesar cipher. Non-letter characters remain unaffected. Args: message (str): the input message to be encoded. shift (int): the shift value for the Caesar cipher. Returns: str: the encoded message. encrypted_message = [] for char in message: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') encrypted_char = chr((ord(char) - shift_base + shift) % 26 + shift_base) encrypted_message.append(encrypted_char) else: encrypted_message.append(char) return ''.join(encrypted_message)"},{"question":"Write a function that takes a list of strings representing binary numbers and returns a new list where each binary number has been decreased by one. If the binary number is '0', it should remain '0'. Consider that the binary numbers may include leading zeros which should be retained in the output. Example, Input: ['101', '0010', '0001', '0'] Expected Output: ['100', '0001', '0000', '0']","solution":"def decrement_binaries(binaries): Takes a list of strings representing binary numbers and returns a new list where each binary number has been decreased by one. If the binary number is '0', it should remain '0'. result = [] for binary in binaries: if binary == '0': result.append('0') continue decimal = int(binary, 2) if decimal == 0: result.append('0') else: decremented_decimal = decimal - 1 decremented_binary = bin(decremented_decimal)[2:] leading_zeros = len(binary) - len(decremented_binary) result.append('0' * leading_zeros + decremented_binary) return result"},{"question":"Implement a function that transforms a given string by reversing each word while maintaining the original word order. A word is defined as a sequence of non-space characters. For example, the string \\"Hello World!\\" should be transformed to \\"olleH !dlroW\\". Note that you must handle multiple spaces between words and ensure they are preserved in the output. The function should be case-sensitive and handle punctuation correctly.","solution":"def reverse_words(s): Reverses each word in the string s while maintaining the original order of words. Parameters: s (str): The input string. Returns: str: The transformed string with each word reversed. words = s.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Develop a function to generate the nth Fibonacci number using dynamic programming. The function should optimize memory usage by only storing previously calculated values that are necessary for the computation. Ensure the function handles large values of n efficiently. Example: Input: n = 10 Output: 55","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming with optimized memory usage. if n <= 1: return n a, b = 0, 1 for i in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that are perfect squares, sorted in ascending order. Additionally, your function should count the number of perfect squares identified and append this count as the last element of the returned list. For example, given the input list [16, 10, 25, 7, 1, 30, 4], your function should return [1, 4, 16, 25, 4] because 1, 4, 16, and 25 are perfect squares and there are 4 of them in total. Note: Do not use any library function to check perfect squares directly. Instead, implement the logic manually within your function.","solution":"import math def is_perfect_square(n): if n < 0: return False root = int(math.sqrt(n)) return root * root == n def perfect_squares(lst): Returns a new list that contains only the perfect squares from the input list, sorted in ascending order, and appends the count of perfect squares as the last element. perfect_squares_list = [x for x in lst if is_perfect_square(x)] perfect_squares_list.sort() perfect_squares_list.append(len(perfect_squares_list)) return perfect_squares_list"},{"question":"Write a Python program that reads a CSV file containing movie data and performs the following tasks: - Calculate the average rating of all the movies. - List the top 10 highest rated movies with their respective ratings. - Find and list the number of movies released each year. - Identify and list the 5 most common genres and the number of movies in each genre. Input CSV file structure: - MovieID: integer - Title: string - Genre: string (genre names separated by commas if multiple) - Year: integer - Rating: float Your program should handle erroneous or missing data gracefully.","solution":"import csv from collections import defaultdict, Counter from statistics import mean def read_csv(file_path): movies = [] with open(file_path, newline='') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: movie = { 'MovieID': int(row['MovieID']), 'Title': row['Title'].strip(), 'Genre': [genre.strip() for genre in row['Genre'].split(',')], 'Year': int(row['Year']), 'Rating': float(row['Rating']) } movies.append(movie) except ValueError: # Skip rows with malformed data continue return movies def calculate_average_rating(movies): ratings = [movie['Rating'] for movie in movies] return mean(ratings) if ratings else 0 def get_top_10_highest_rated_movies(movies): top_movies = sorted(movies, key=lambda x: x['Rating'], reverse=True)[:10] return [(movie['Title'], movie['Rating']) for movie in top_movies] def count_movies_per_year(movies): year_count = defaultdict(int) for movie in movies: year_count[movie['Year']] += 1 return dict(year_count) def find_most_common_genres(movies): genre_count = Counter() for movie in movies: genre_count.update(movie['Genre']) return genre_count.most_common(5) # Wrapper function to process the CSV and return the required information def process_movie_data(file_path): movies = read_csv(file_path) average_rating = calculate_average_rating(movies) top_10_movies = get_top_10_highest_rated_movies(movies) movies_per_year = count_movies_per_year(movies) common_genres = find_most_common_genres(movies) return average_rating, top_10_movies, movies_per_year, common_genres"},{"question":"Consider the following Python code. Identify its purpose and describe how it operates step-by-step. # Code Segment \`\`\`python def find_unique_numbers(arr): unique = set() duplicates = set() for num in arr: if num not in unique: unique.add(num) else: duplicates.add(num) return unique - duplicates numbers = [4, 5, 6, 7, 8, 8, 9, 4, 2, 1, 1] print(find_unique_numbers(numbers)) \`\`\` Additionally, modify the function to accept a secondary parameter that determines whether to return the set of unique numbers or the set of duplicates. Validate this parameter to ensure the function behaves correctly.","solution":"def find_unique_numbers(arr, return_type='unique'): This function finds unique numbers in the array that are not repeated. If return_type is 'unique', it returns the set of unique numbers. If return_type is 'duplicates', it returns the set of duplicate numbers. :param arr: List of integers :param return_type: 'unique' or 'duplicates' :return: Set of integers unique = set() duplicates = set() for num in arr: if num not in unique: unique.add(num) else: duplicates.add(num) if return_type == 'unique': return unique - duplicates elif return_type == 'duplicates': return duplicates else: raise ValueError(\\"Invalid return_type. Must be 'unique' or 'duplicates'.\\") numbers = [4, 5, 6, 7, 8, 8, 9, 4, 2, 1, 1] print(find_unique_numbers(numbers)) print(find_unique_numbers(numbers, 'duplicates'))"},{"question":"Write a function in Python that takes two inputs - a list of strings and an integer n. The function should return a new list of strings where each string is modified to include its length at the end, but only if the length of the string is greater than n. If the length is less than or equal to n, the string should remain unchanged. Additionally, describe how the algorithm's time complexity compares to that of iterating through the list once. Example Input: \`\`\`python input_list = [\\"apple\\", \\"beet\\", \\"cherry\\", \\"date\\"] n = 4 \`\`\` Example Output: \`\`\`python [\\"apple,5\\", \\"beet\\", \\"cherry,6\\", \\"date\\"] \`\`\` Description: - The function should iterate through the list of strings and check the length of each string. - If the length of the string is greater than n, append the length to the string. - Return the modified list of strings. Your task: 1. Implement the function in Python. 2. Explain the time complexity of your implementation.","solution":"def modify_strings(input_list, n): Returns a new list of strings where each string is modified to include its length at the end, but only if the length of the string is greater than n. If the length is less than or equal to n, the string remains unchanged. Parameters: - input_list: List[str] - A list of strings. - n: int - An integer threshold for string length. Returns: - List[str]: A new list of modified strings. return [word + f\\",{len(word)}\\" if len(word) > n else word for word in input_list] # Time complexity explanation: # The algorithm iterates through the input list of strings once and performs an O(1) operation for each string. # Thus, the time complexity is O(m * k), where m is the number of strings in the list and k is the average length # of the strings (due to string concatenation), making it effectively O(m)."},{"question":"Write a function that takes in a list of integers and returns the length of the longest contiguous subarray where the difference between any two consecutive elements is the same. For example, given the list \`[1, 2, 3, 4, 5, 8, 9, 10]\`, the longest subarray with the same difference is \`[1, 2, 3, 4, 5]\`, which has a length of 5. If the input list is empty, the function should return 0. **Function Signature:** \`\`\`python def longest_subarray_with_same_diff(arr: List[int]) -> int: # Your code here \`\`\` **Examples:** \`\`\`python assert longest_subarray_with_same_diff([1, 2, 3, 4, 5, 8, 9, 10]) == 5 assert longest_subarray_with_same_diff([10, 20, 30, 40, 50, 60]) == 6 assert longest_subarray_with_same_diff([100, 105, 110, 115, 120, 150]) == 5 assert longest_subarray_with_same_diff([]) == 0 \`\`\`","solution":"from typing import List def longest_subarray_with_same_diff(arr: List[int]) -> int: if len(arr) < 2: return len(arr) max_len = 1 current_diff = None current_len = 1 for i in range(1, len(arr)): diff = arr[i] - arr[i - 1] if diff == current_diff: current_len += 1 else: current_diff = diff current_len = 2 # Start new subarray including the last element and the current one max_len = max(max_len, current_len) return max_len"},{"question":"Create a comprehensive search algorithm capable of traversing a dynamically built, weighted, directed graph to find the shortest path between two given nodes. Your solution should incorporate heuristic methods to improve search efficiency, such as A* or Dijkstra's algorithm. Implement the algorithm, ensuring it handles cycles and varying edge weights appropriately. Additionally, validate your algorithm's correctness using multiple test cases and explain your choices for the heuristic function, graph representation, and any optimization strategies used. Be ready to elucidate the trade-offs made in terms of time complexity, space complexity, and accuracy of the solution.","solution":"import heapq class Graph: def __init__(self): self.nodes = set() self.edges = dict() def add_node(self, value): self.nodes.add(value) if value not in self.edges: self.edges[value] = [] def add_edge(self, from_node, to_node, weight): self.edges[from_node].append((to_node, weight)) def dijkstra(graph, start, goal): queue = [] heapq.heappush(queue, (0, start)) distances = {node: float('infinity') for node in graph.nodes} distances[start] = 0 shortest_path = {} while queue: current_distance, current_node = heapq.heappop(queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph.edges[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(queue, (distance, neighbor)) shortest_path[neighbor] = current_node path = [] node = goal while node != start: path.insert(0, node) if node in shortest_path: node = shortest_path[node] else: return None path.insert(0, start) return path"},{"question":"Your task is to design an algorithm that can read a text document and identify the k most frequently occurring words. The document may contain punctuation and special characters, which should be ignored in the word count. Words are case-insensitive, meaning \\"Word\\" and \\"word\\" should be considered the same. Here is what you need to do: 1. Write a function \`clean_text(text)\` that takes a string and returns a cleaned version of the string, where all characters are converted to lowercase, and all punctuation and special characters are removed. 2. Implement a function \`get_word_frequencies(text)\` that takes the cleaned text and returns a dictionary with words as keys and their frequency counts as values. 3. Create a function \`top_k_frequent_words(text, k)\` that uses the previous two functions to determine the k most frequent words in the text. It should return a list of tuples with the word and its frequency, sorted by frequency in descending order. If two words have the same frequency, they should be sorted alphabetically. 4. Write a script to read the content of a text file and use the functions you've implemented to print out the k most frequent words along with their frequencies. Example: Assume the text file contains the following text: \\"Hello world! Hello everyone. Programming in Python is fun. Python programming is powerful.\\" If \`k\` is 3, the output should be: \`\`\` [ ('hello', 2), ('is', 2), ('programming', 2) ] \`\`\` Ensure your code is efficient, well-structured, and thoroughly documented. Provide detailed comments to explain your logic and thought process.","solution":"import re from collections import Counter def clean_text(text): Takes a string and returns a cleaned version of the string, where all characters are converted to lowercase, and all punctuation and special characters are removed. # Convert to lowercase text = text.lower() # Remove punctuation and special characters text = re.sub(r'[^a-zA-Z0-9s]', '', text) return text def get_word_frequencies(text): Takes the cleaned text and returns a dictionary with words as keys and their frequency counts as values. words = text.split() word_counts = Counter(words) return word_counts def top_k_frequent_words(text, k): Uses the previous two functions to determine the k most frequent words in the text. Returns a list of tuples with the word and its frequency, sorted by frequency in descending order. If two words have the same frequency, they are sorted alphabetically. cleaned_text = clean_text(text) word_frequencies = get_word_frequencies(cleaned_text) sorted_frequencies = sorted(word_frequencies.items(), key=lambda item: (-item[1], item[0])) return sorted_frequencies[:k]"},{"question":"You are given two arrays of integers \`arr1\` and \`arr2\` where \`arr2\` contains all the elements of \`arr1\` except for one element which is missing. Write a function \`find_missing_element(arr1, arr2)\` that returns the missing element. Example: \`\`\`python arr1 = [4, 12, 5, 2, 7, 9] arr2 = [4, 5, 2, 7, 9] find_missing_element(arr1, arr2) # Output: 12 \`\`\`","solution":"def find_missing_element(arr1, arr2): Returns the missing element in arr2 that is present in arr1. missing_element = sum(arr1) - sum(arr2) return missing_element"},{"question":"Write a Python function that simulates a basic inventory management system for a store. The function should allow users to add new items, update the quantity of existing items, and remove items from the inventory. The inventory should be stored as a dictionary where the keys are item names and the values are their quantities. The function should provide an interface for performing these operations and display the inventory after each operation. # Requirements: 1. Define a dictionary to store the inventory. 2. Implement functions for adding, updating, and removing items. 3. Ensure the functions handle cases where items are not found in the inventory. 4. Display the current inventory after each operation. # Example Usage: \`\`\`python # Initialize empty inventory inventory = {} add_item(inventory, 'apple', 10) # Inventory: {'apple': 10} update_item(inventory, 'apple', 5) # Inventory: {'apple': 15} remove_item(inventory, 'apple') # Inventory: {} \`\`\` # Function Signatures: \`\`\`python def add_item(inventory: dict, item: str, quantity: int) -> None: pass def update_item(inventory: dict, item: str, quantity: int) -> None: pass def remove_item(inventory: dict, item: str) -> None: pass \`\`\`","solution":"def add_item(inventory: dict, item: str, quantity: int) -> None: Adds a new item or updates the quantity if the item already exists. if item in inventory: inventory[item] += quantity else: inventory[item] = quantity print(f\\"Inventory: {inventory}\\") def update_item(inventory: dict, item: str, quantity: int) -> None: Updates the quantity of an existing item. If the item is not found, it raises a KeyError. if item in inventory: inventory[item] += quantity print(f\\"Inventory: {inventory}\\") else: print(f\\"Error: Item '{item}' not found in inventory.\\") raise KeyError(f\\"Item '{item}' not found in inventory.\\") def remove_item(inventory: dict, item: str) -> None: Removes an item from the inventory. If the item is not found, it raises a KeyError. if item in inventory: del inventory[item] print(f\\"Inventory: {inventory}\\") else: print(f\\"Error: Item '{item}' not found in inventory.\\") raise KeyError(f\\"Item '{item}' not found in inventory.\\")"},{"question":"Design a robust recommendation system for an e-commerce platform that tailors product suggestions to individual users based on their browsing history, purchase records, and user feedback. Your solution should outline the steps needed to preprocess data, choose appropriate algorithms (e.g., collaborative filtering, content-based filtering, or hybrid methods), and evaluate the effectiveness of the recommendations. Additionally, discuss how you would address scalability concerns, ensure user privacy, and handle cold-start problems for new users or products.","solution":"import numpy as np from sklearn.metrics.pairwise import cosine_similarity from sklearn.preprocessing import StandardScaler class RecommendationSystem: def __init__(self): self.user_ratings = None self.product_features = None self.user_profiles = None def preprocess_data(self, user_ratings, product_features): Preprocesses the raw user and product data. self.user_ratings = StandardScaler().fit_transform(user_ratings) self.product_features = StandardScaler().fit_transform(product_features) def build_user_profiles(self): Builds user profiles based on their ratings and browsing history. # Here we assume that user ratings matrix is user x products self.user_profiles = np.dot(self.user_ratings, self.product_features) def recommend_products(self, user_id, top_n=5): Recommends top_n products for a given user based on their profile. user_profile = self.user_profiles[user_id, :] product_scores = cosine_similarity(user_profile.reshape(1, -1), self.product_features)[0] recommended_product_indices = np.argsort(-product_scores)[:top_n] return recommended_product_indices def evaluate_recommendations(self, actual_ratings, predicted_ratings): Evaluates the recommendation system using Mean Squared Error. mse = np.mean((actual_ratings - predicted_ratings) ** 2) return mse def handle_cold_start(self, new_user_ratings, new_product_features): Handles cold-start problems for new users or products. if new_user_ratings is not None: new_user_ratings = StandardScaler().fit_transform(new_user_ratings) new_user_profiles = np.dot(new_user_ratings, self.product_features) return new_user_profiles if new_product_features is not None: new_product_features = StandardScaler().fit_transform(new_product_features) new_recommendations = cosine_similarity(self.user_profiles, new_product_features) return new_recommendations def ensure_user_privacy(self): Ensures user privacy by anonymizing user data. anonymized_data = np.random.permutation(self.user_ratings) return anonymized_data"},{"question":"Develop a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Implement the algorithm without using any external libraries for prime-checking, and ensure that the function is efficient for large lists.","solution":"def is_prime(n): Helper function to check if a number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the provided list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a Python function that takes in a list of integers and returns the sum of the squares of only the even numbers in the list. For example, given the list [1, 2, 3, 4, 5, 6], the function should return 56, as 2^2 + 4^2 + 6^2 = 4 + 16 + 36 = 56. Ensure the function handles both positive and negative even numbers appropriately.","solution":"def sum_of_squares_of_even_numbers(numbers): Takes a list of integers and returns the sum of the squares of only the even numbers. :param numbers: List of integers :return: Sum of the squares of even numbers return sum(x**2 for x in numbers if x % 2 == 0)"},{"question":"Write a function that takes an array of integers and an integer target as input and returns a list of unique quadruplets [a, b, c, d] such that a + b + c + d equals the target. Ensure the function handles cases with multiple quadruplets and avoids duplicates. You can assume that the input array and target number are valid, and your function should have a time complexity better than O(n^4).","solution":"def four_sum(nums, target): Returns a list of unique quadruplets [a, b, c, d] such that a + b + c + d equals the target. nums.sort() quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: quad_sum = nums[i] + nums[j] + nums[left] + nums[right] if quad_sum == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif quad_sum < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Write a function that takes a string as input and returns the string with all its characters in reverse order, but with each word's original position in the string preserved. For instance, given the input \`\\"hello world\\"\`, the function should return \`\\"olleh dlrow\\"\`. Consider punctuation and whitespace as they appear in the input.","solution":"def reverse_words_preserve_positions(s): Reverses the characters in each word of the string s, but preserves the original positions of the words. words = s.split(' ') reversed_words = [''.join(reversed(word)) for word in words] return ' '.join(reversed_words)"},{"question":"Consider an array of integers where each consecutive element represents a node in a circular linked list. Implement a function \`find_max_sum_subarray(arr, k)\` that takes two parameters: the array \`arr\` of length \`n\` and an integer \`k\`. The function should return the maximum sum of any subarray of length \`k\` in the circular linked list. Note that because the array represents a circular linked list, the subarray can wrap around the end of the array and continue from the beginning. For example: \`\`\`python find_max_sum_subarray([1, 2, 3, 4, 5], 3) should return 12 find_max_sum_subarray([8, -1, 3, 4], 2) should return 12 \`\`\` Your task is to write the function \`find_max_sum_subarray\` that works efficiently even for large values of \`n\`. There is also a piece of erroneous code given below, which was written by a novice programmer to solve the problem statement above. There are a few mistakes and inaccuracies that prevent it from working properly. \`\`\`python def find_max_sum_subarray(arr, k): n = len(arr) max_sum = float('-inf') for i in range(n): current_sum = 0 for j in range(k): current_sum += arr[(i + j) % n] max_sum = max(max_sum, current_sum) return max_sum \`\`\` Identify the mistakes in the code and rectify them so that the program correctly solves the problem.","solution":"def find_max_sum_subarray(arr, k): Returns the maximum sum of any subarray of length k in a circular linked list representation. n = len(arr) if n == 0 or k <= 0 or k > n: return 0 # Compute the sum of the first subarray of length k current_sum = sum(arr[:k]) max_sum = current_sum # Use sliding window technique to find the max sum in circular manner for i in range(1, n): current_sum = current_sum - arr[i-1] + arr[(i + k - 1) % n] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Design an algorithm in Python that takes a list of integers and returns a new list containing only the elements that are greater than the average of the original list. lst=[4,8,2,6,1,9]","solution":"def elements_greater_than_average(lst): Returns a list of elements that are greater than the average of the original list. if not lst: return [] average = sum(lst) / len(lst) return [x for x in lst if x > average]"},{"question":"Can you devise a function to determine whether the elements in a given list of strings are arranged in alphabetical order? The function should return True if they are in order, otherwise False. words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"]","solution":"def is_alphabetical_order(words): Determines if the elements in the given list of strings are in alphabetical order. Parameters: words (list): List of strings to be checked. Returns: bool: True if the list is in alphabetical order, False otherwise. return words == sorted(words)"},{"question":"Write a Python program that takes a matrix of integers and returns a list of the elements in spiral order, starting from the top-left corner. The input matrix is given as a 2-dimensional list of integers, where the number of rows and columns can vary. For example, if the input is: \`\`\` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] \`\`\` The output should be a list: \`\`\` [1, 2, 3, 6, 9, 8, 7, 4, 5] \`\`\` Your task is to implement the function \`spiralOrder(matrix: List[List[int]]) -> List[int]\` that achieves this. Note that if the input matrix is empty, the function should return an empty list.","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Given a 2D matrix, return elements in spiral order. if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse downwards for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"You are given a JSON file containing an array of student records, each with \`name\`, \`age\`, \`grades\`, and \`city\`. Write a Python script to analyze this data. Your script should provide the following functionalities: 1. Load the JSON data from a file. 2. Display the number of students. 3. Display the names of students who are older than a specified age. 4. Calculate and display the average grade of students from a specified city. 5. Save a new JSON file containing only the records of students who have grades above a specified threshold. Here is an example structure of the JSON data file: \`\`\`json [ {\\"name\\": \\"Alice\\", \\"age\\": 23, \\"grades\\": [85, 90, 78], \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 21, \\"grades\\": [82, 88, 84], \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 22, \\"grades\\": [70, 75, 80], \\"city\\": \\"New York\\"}, {\\"name\\": \\"David\\", \\"age\\": 24, \\"grades\\": [90, 92, 89], \\"city\\": \\"Boston\\"} ] \`\`\` Requirements: - Use built-in Python modules such as \`json\` and \`os\`. - Handle file I/O operations with appropriate exception handling. - Structure your solution with functions corresponding to the functionalities listed above. - Provide clear docstrings and comments in your code for clarity. Example usage: \`\`\`python students_data = \\"students.json\\" min_age = 22 city = \\"New York\\" grade_threshold = 80 number_of_students = count_students(students_data) print(f\\"Number of students: {number_of_students}\\") students_above_age = get_students_above_age(students_data, min_age) print(f\\"Students above age {min_age}: {students_above_age}\\") average_grade_in_city = calculate_average_grade(students_data, city) print(f\\"Average grade in {city}: {average_grade_in_city}\\") save_students_above_grade(students_data, grade_threshold, \\"high_grades.json\\") \`\`\` You need to implement the following functions: - \`count_students(json_file)\`: Returns the number of students. - \`get_students_above_age(json_file, age)\`: Returns a list of names of students older than the specified age. - \`calculate_average_grade(json_file, city)\`: Returns the average grade of students from the specified city. - \`save_students_above_grade(json_file, grade_threshold, output_file)\`: Saves a new JSON file with records of students having grades above the specified threshold.","solution":"import json import os def load_json_data(json_file): Loads JSON data from a file and returns it. if not os.path.exists(json_file): raise FileNotFoundError(f\\"The file {json_file} does not exist.\\") with open(json_file, 'r') as f: data = json.load(f) return data def count_students(json_file): Returns the number of students in the JSON data file. data = load_json_data(json_file) return len(data) def get_students_above_age(json_file, age): Returns a list of names of students older than a specified age. data = load_json_data(json_file) return [student['name'] for student in data if student['age'] > age] def calculate_average_grade(json_file, city): Returns the average grade of students from a specified city. data = load_json_data(json_file) grades = [ grade for student in data if student['city'] == city for grade in student['grades'] ] if not grades: return 0 return sum(grades) / len(grades) def save_students_above_grade(json_file, grade_threshold, output_file): Saves a new JSON file containing only the records of students who have grades above the specified threshold. data = load_json_data(json_file) filtered_data = [ student for student in data if all(grade > grade_threshold for grade in student['grades']) ] with open(output_file, 'w') as f: json.dump(filtered_data, f, indent=4)"},{"question":"Write a function to merge two sorted linked lists into a single sorted linked list. The function should take as input two linked lists where each node contains an integer value and a reference to the next node. The returned linked list should be sorted in ascending order. Assume the linked lists are defined by a 'ListNode' class with 'val' and 'next' attributes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): Merge two sorted linked lists and returns it as a new sorted list. The new list is made by splicing together the nodes of the first two lists. dummy = ListNode() # Dummy node to form the base of the merged list current = dummy # Pointer to the current end of the merged list # Traverse both lists and append the smaller value to the merged list while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If any elements remain in either list, append them if l1: current.next = l1 else: current.next = l2 # Return the merged list, skipping the dummy head node return dummy.next"},{"question":"Create a function that takes an input list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the squares of these integers. Ensure the output dictionary preserves the order of the first appearance of each integer in the input list.","solution":"def list_to_squares_dict(input_list): Converts a list of integers to a dictionary where keys are unique integers from the list and values are their squares. The order of first appearance of each integer is preserved. result = {} for num in input_list: if num not in result: result[num] = num ** 2 return result"},{"question":"Write a Python function that takes a list of integers and returns the longest contiguous subarray that contains exactly k distinct integers. If there are multiple such subarrays, return the one which starts first. You are required to implement the function with the following signature: \`\`\`python def longest_subarray_with_k_distinct(nums: List[int], k: int) -> List[int]: pass \`\`\` **Example:** \`\`\` Input: nums = [1, 2, 1, 2, 3], k = 2 Output: [1, 2, 1, 2] Input: nums = [1, 2, 1, 2, 3], k = 3 Output: [1, 2, 1, 2, 3] Input: nums = [1, 2, 1, 2, 1], k = 2 Output: [1, 2, 1, 2, 1] Input: nums = [1, 2, 3, 4, 5], k = 3 Output: [1, 2, 3] \`\`\`","solution":"from typing import List, Dict def longest_subarray_with_k_distinct(nums: List[int], k: int) -> List[int]: if k == 0: return [] n = len(nums) left = 0 right = 0 max_length = 0 max_subarray = [] current_subarray: Dict[int, int] = {} while right < n: if len(current_subarray) <= k: current_subarray[nums[right]] = current_subarray.get(nums[right], 0) + 1 right += 1 while len(current_subarray) > k: current_subarray[nums[left]] -= 1 if current_subarray[nums[left]] == 0: del current_subarray[nums[left]] left += 1 if len(current_subarray) == k and (right - left) > max_length: max_length = right - left max_subarray = nums[left:right] return max_subarray"},{"question":"Analyze the implementation and usage differences between 'depth-first search' (DFS) and 'breadth-first search' (BFS) algorithms in graph traversal. Provide detailed pseudocode for both algorithms and compare their time and space complexities. Discuss scenarios where one might be more advantageous than the other, such as in exploring game state spaces, web crawlers, or routing algorithms in networking. Additionally, explain potential pitfalls and common optimization techniques to improve the performance and efficiency of these algorithms in large graphs.","solution":"def dfs(graph, start): Depth-First Search implementation. visited = set() stack = [start] while stack: node = stack.pop() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: stack.append(neighbor) return visited def bfs(graph, start): Breadth-First Search implementation. visited = set() queue = [start] while queue: node = queue.pop(0) if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited"},{"question":"Construct a function that takes a list of integers and returns a new list that contains only the prime integers from the original list. In addition to this, the function should be optimized to handle large lists efficiently. Avoid using built-in functions that directly identify prime numbers. Moreover, provide a snippet of flawed code that attempts to solve this problem but fails due to a common mistake in checking for prime numbers. Analyze the code, identify the error, correct it, and explain why the original code was incorrect. The erroneous code should also incorporate a typical mistake in handling edge cases pertaining to prime number identification. Example: \`\`\`python def find_primes(numbers): # Flawed code snippet attempting to solve the problem primes = [] for num in numbers: if num > 1: for i in range(2, num): if num % i == 0: break else: primes.append(num) return primes # Analysis and correction explanation # The flaw in the above code is that it runs the inner loop up to 'num', instead of its square root. # Additionally, it does not handle the edge case where the number is less than 2 properly. # Below is the corrected version. import math def find_primes(numbers): def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False for i in range(5, int(math.sqrt(n)) + 1, 6): if n % i == 0 or n % (i + 2) == 0: return False return True return [num for num in numbers if is_prime(num)] # Test cases print(find_primes([10, 15, 3, 7, 11, 13, 19, 23, 25, 29])) # Output: [3, 7, 11, 13, 19, 23, 29] print(find_primes([4, 6, 8, 9, 10, 12, 14, 15, 16, 18])) # Output: [] \`\`\`","solution":"import math def find_primes(numbers): Returns a list of prime numbers from the given list of integers. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False for i in range(5, int(math.sqrt(n)) + 1, 6): if n % i == 0 or n % (i + 2) == 0: return False return True return [num for num in numbers if is_prime(num)]"},{"question":"Write a function that processes a list of course records from a university database and returns a summary of students' final grades based on their assignment scores. Each record in the list is a dictionary containing the student's name, a unique student ID, and a list of assignments. Each assignment is also a dictionary containing the assignment name, maximum possible score, and the student's score. The function should calculate the final percentage for each student and return a dictionary with student IDs as keys and their final percentage as values. The final percentage should be calculated as the total score obtained by the student divided by the total maximum score, multiplied by 100. Additionally, handle edge cases where: - The student's record might be missing scores or assignments. - The function should not crash and should return a final grade percentage of 0 if no assignments are present. # Example Input \`\`\`python students = [ { \\"name\\": \\"Alice\\", \\"student_id\\": \\"S001\\", \\"assignments\\": [ {\\"name\\": \\"Assignment 1\\", \\"max_score\\": 100, \\"score\\": 90}, {\\"name\\": \\"Assignment 2\\", \\"max_score\\": 100, \\"score\\": 85} ] }, { \\"name\\": \\"Bob\\", \\"student_id\\": \\"S002\\", \\"assignments\\": [ {\\"name\\": \\"Assignment 1\\", \\"max_score\\": 100, \\"score\\": 80} ] }, { \\"name\\": \\"Charlie\\", \\"student_id\\": \\"S003\\", \\"assignments\\": [] } ] \`\`\` # Example Output \`\`\`python { \\"S001\\": 87.5, \\"S002\\": 80.0, \\"S003\\": 0.0 } \`\`\` # Function Signature \`\`\`python def calculate_final_grades(students: list) -> dict: pass \`\`\` Create the function \`calculate_final_grades\` to ensure it processes the given input format and handles the described edge cases effectively.","solution":"def calculate_final_grades(students): Processes a list of course records and returns a summary of student final grades. Arguments: students -- List of dictionaries containing student information and their assignments. Returns: Dictionary with student IDs as keys and their final percentage as values. final_grades = {} for student in students: student_id = student['student_id'] assignments = student['assignments'] if not assignments: # Case where student has no assignments final_grades[student_id] = 0.0 continue total_score = 0 total_max_score = 0 for assignment in assignments: total_score += assignment.get('score', 0) total_max_score += assignment.get('max_score', 0) if total_max_score == 0: final_percentage = 0.0 else: final_percentage = (total_score / total_max_score) * 100 final_grades[student_id] = round(final_percentage, 2) return final_grades"},{"question":"Design and implement a Python program that demonstrates the differences between shallow copy and deep copy operations when duplicating compound data structures such as lists and dictionaries. Provide an explanation of these two types of copy operations and their implications on nested structures. Discuss scenarios where one type of copy might be preferred over the other and potential pitfalls of using the wrong type. Implement code examples to illustrate the difference in behavior between shallow and deep copies, particularly focusing on the mutability of nested elements. Additionally, explain the module used for deep copy operations in Python, its syntax, and how to use it effectively. Include a paragraph discussing the importance of understanding these concepts in the context of Python programming, particularly in terms of memory management and avoiding unintentional data modifications.","solution":"import copy def demonstrate_shallow_copy(): original_list = [[1, 2, 3], [4, 5, 6]] shallow_copied_list = copy.copy(original_list) shallow_copied_list[0][1] = 'modified' return original_list, shallow_copied_list def demonstrate_deep_copy(): original_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]} deep_copied_dict = copy.deepcopy(original_dict) deep_copied_dict['a'][1] = 'modified_deep' return original_dict, deep_copied_dict # Explanation: # Shallow Copy: A shallow copy creates a new object, but does not create copies of objects that the original object references. Instead, it only copies references to the original nested objects. Therefore, if the nested objects are modified, it reflects in both the original and shallow copied objects. # Deep Copy: A deep copy creates a new object and recursively copies all objects found within the original. This means that modifications to the nested objects in the deep copy do not affect the original object. # Use Cases & Pitfalls: # - Use a shallow copy if you have a flat (non-nested) data structure or if you do not need to modify nested objects. # - Use a deep copy when working with nested structures or when modifications to the duplicate should not affect the original data. # - Pitfalls: Using a shallow copy when you need a deep copy can lead to bugs due to unintentional modifications across the object and its duplicate. # Python's \`copy\` module provides both \`copy\` and \`deepcopy\` functions. # Importance: # Understanding the difference between shallow and deep copies is crucial in managing memory effectively in Python and preventing unintended side effects. This knowledge is essential for maintaining data integrity and ensuring that operations on duplicates do not inadvertently alter the original structures."},{"question":"Write a function that accepts a string input representing a sentence and returns the count of each vowel (a, e, i, o, u) present in the sentence. The function should ignore case sensitivity and display the result in a dictionary format with vowels as keys and their respective counts as values. Use the following sentence for testing: \\"The quick brown fox jumps over the lazy dog\\".","solution":"def count_vowels(sentence): Returns a dictionary with each vowel and their respective counts in the sentence. vowels = 'aeiou' sentence = sentence.lower() vowel_counts = {vowel: 0 for vowel in vowels} for char in sentence: if char in vowels: vowel_counts[char] += 1 return vowel_counts"},{"question":"Write a function that reads a log file containing entries with timestamps and error messages. Each line contains a timestamp in the format 'YYYY-MM-DD HH:MM:SS' followed by an error message. The function should filter and return all errors that occurred during a specific hour given by the user. Use Python's \`datetime\` module to parse and compare the timestamps. Assume the input file is named 'errors.log'. Example log entry: \`\`\` 2023-05-23 14:02:15 Error: Connection failure 2023-05-23 14:45:00 Error: Timeout 2023-05-23 15:12:34 Error: Disk full \`\`\` Your function should take two arguments, the \`filepath\` of the log file and an \`hour\` in the format 'HH' (24-hour clock), and return a list of error messages that occurred during that hour. For example, if the specified hour is '14' and the log entries are as above, the function should return: \`\`\`python [ '2023-05-23 14:02:15 Error: Connection failure', '2023-05-23 14:45:00 Error: Timeout', ] \`\`\` You may assume the log file is well-formatted and that the hour specified by the user is always valid (i.e., '00' to '23').","solution":"from datetime import datetime def filter_errors_by_hour(filepath, hour): Reads a log file and returns all error messages that occurred during the specified hour. Parameters: filepath (str): The path to the log file. hour (str): The hour during which to filter the errors (format 'HH', 24-hour clock). Returns: list: A list of error messages that occurred during the specified hour. errors = [] target_hour = int(hour) with open(filepath, 'r') as file: for line in file: timestamp_str = line.split(' ', 2)[1] # Extracting the 'HH:MM:SS' part timestamp = datetime.strptime(timestamp_str, \\"%H:%M:%S\\") if timestamp.hour == target_hour: errors.append(line.strip()) return errors"},{"question":"Implement a function that takes a list of integers and returns the length of the longest contiguous subarray with equal number of 0s and 1s. Note that the input list will only contain 0s and 1s. Write test cases to validate your implementation.","solution":"def findMaxLength(nums): Finds the maximum length of a contiguous subarray with an equal number of 0s and 1s. :param nums: List[int] :return: int count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): count += 1 if num == 1 else -1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"# Context You are a data scientist named Alice. You work for an online music streaming service similar to Spotify or Apple Music. Your goal is to design and implement a recommendation system that suggests songs and playlists to users based on their past listening behavior. Requirement: \`\`\`python [ \\"Develop an algorithm to recommend songs and playlists to users\\", \\"Use collaborative filtering methods to find similar users and songs\\", \\"Implement content-based filtering to suggest songs based on music metadata\\", \\"Ensure that the system can handle large datasets efficiently\\", \\"Provide a mechanism to periodically update the recommendations\\" ] \`\`\` User Stories: \`\`\`python [ \\"As a user, I want to discover new songs that fit my taste so that I can expand my playlist\\", \\"As a user, I want to receive playlist recommendations based on my listening history so that I have a curated experience\\", \\"As a casual listener, I want to get similar song suggestions after each song ends so that I can keep the music flowing\\", \\"As a user, I want to have personalized and up-to-date recommendations so that my experience on the platform remains fresh and exciting\\", \\"As a user, I want to have control over the recommendations I receive so that I can customize my listening experience\\" ] \`\`\` Competitive Analysis: \`\`\`python [ \\"Spotify: Utilizes a combination of collaborative filtering, audio analysis, and natural language processing to provide personalized music recommendations\\", \\"Apple Music: Leverages human curation combined with machine learning algorithms to suggest songs and playlists\\", \\"Pandora: Uses the Music Genome Project, a sophisticated taxonomy of musical attributes, to create highly personalized radio stations\\", \\"YouTube Music: Suggests content based on watching and listening habits, integrating video and music preferences\\", \\"Deezer: Employs the Flow algorithm, a blend of collaborative filtering and editorial recommendations\\" ] \`\`\` Competitive Quadrant Chart: \`\`\`mermaid quadrantChart title Effectiveness and innovation of recommendation systems in music streaming services x-axis Low Effectiveness --> High Effectiveness y-axis Low Innovation --> High Innovation quadrant-1 We should aim for quadrant-2 Need improvement quadrant-3 Reconsider this approach quadrant-4 Room for growth \\"Spotify\\": [0.9, 0.9] \\"Apple Music\\": [0.8, 0.7] \\"Pandora\\": [0.7, 0.8] \\"YouTube Music\\": [0.6, 0.6] \\"Deezer\\": [0.7, 0.7] \\"Our Target Product\\": [0.8, 0.8] \`\`\` Requirement Analysis: The product should provide accurate, personalized song and playlist recommendations using collaborative and content-based filtering. It must handle large datasets efficiently and update recommendations frequently. Requirement Pool: \`\`\`python [ (\\"Collaborative filtering to find similar users and song preferences\\", \\"P0\\"), (\\"Content-based filtering using song metadata for recommendations\\", \\"P0\\"), (\\"Efficient data processing for large-scale recommendation updates\\", \\"P0\\"), (\\"Periodic and automated recommendation updates\\", \\"P1\\"), (\\"User control over recommendation preferences\\", \\"P1\\") ] \`\`\` Implementation approach: We will implement a hybrid recommendation system that combines collaborative and content-based filtering techniques. The collaborative filtering algorithm will use users' listening history to identify similar listeners and recommend songs they like. The content-based filtering will analyze song metadata (genres, artists, tempo, etc.) to suggest similar tracks. We'll employ open-source tools like Apache Spark for large-scale data processing and Scikit-learn for machine learning models. We aim to design an efficient data pipeline that updates recommendations regularly. Python package name: \`\`\`python \\"music_recommender\\" \`\`\` File list: \`\`\`python [ \\"main.py\\", \\"collaborative_filtering.py\\", \\"content_based_filtering.py\\", \\"data_pipeline.py\\", \\"model_training.py\\", \\"update_recommendations.py\\" ] \`\`\` Data structures and interface definitions: \`\`\`mermaid classDiagram class User{ +int user_id +str name +list liked_songs +def __init__(self, user_id: int, name: str, liked_songs: list) } class Song{ +int song_id +str title +str artist +str genre +float duration +def __init__(self, song_id: int, title: str, artist: str, genre: str, duration: float) } class RecommendationSystem{ +list users +list songs +def __init__(self) +def recommend_songs(self, user_id: int) -> list +def recommend_playlists(self, user_id: int) -> list } class CollaborativeFiltering{ +def find_similar_users(self, user: User) -> list +def recommend(self, user: User) -> list } class ContentBasedFiltering{ +def analyze_song(self, song: Song) -> dict +def recommend(self, user: User) -> list } RecommendationSystem \\"1\\" -- \\"*\\" User: contains RecommendationSystem \\"1\\" -- \\"*\\" Song: contains RecommendationSystem \\"1\\" -- \\"1\\" CollaborativeFiltering: uses RecommendationSystem \\"1\\" -- \\"1\\" ContentBasedFiltering: uses \`\`\` Program call flow: \`\`\`mermaid sequenceDiagram participant M as Main participant RS as RecommendationSystem participant CF as CollaborativeFiltering participant CBF as ContentBasedFiltering participant U as User participant S as Song M->>RS: __init__() M->>RS: recommend_songs(user_id) RS->>CF: find_similar_users(user) CF-->>RS: return similar_users RS->>CBF: recommend(user) CBF-->>RS: return recommended_songs RS-->>M: return recommended_songs M->>RS: recommend_playlists(user_id) RS->>CF: recommend(user) CF-->>RS: return recommended_playlists RS-->>M: return recommended_playlists \`\`\` Anything UNCLEAR: The requirement is clear to me.","solution":"class User: def __init__(self, user_id, name, liked_songs): self.user_id = user_id self.name = name self.liked_songs = liked_songs class Song: def __init__(self, song_id, title, artist, genre, duration): self.song_id = song_id self.title = title self.artist = artist self.genre = genre self.duration = duration class CollaborativeFiltering: def find_similar_users(self, user): # Dummy implementation for demo purposes return [user] def recommend(self, user): # Dummy implementation for demo purposes return user.liked_songs class ContentBasedFiltering: def analyze_song(self, song): # Dummy implementation for demo purposes return {\\"genre\\": song.genre, \\"artist\\": song.artist} def recommend(self, user): # Dummy implementation for demo purposes return user.liked_songs class RecommendationSystem: def __init__(self): self.users = [] self.songs = [] self.collaborative_filtering = CollaborativeFiltering() self.content_based_filtering = ContentBasedFiltering() def add_user(self, user): self.users.append(user) def add_song(self, song): self.songs.append(song) def recommend_songs(self, user_id): user = next((u for u in self.users if u.user_id == user_id), None) if not user: return [] similar_users = self.collaborative_filtering.find_similar_users(user) recommendations_cf = self.collaborative_filtering.recommend(user) recommendations_cbf = self.content_based_filtering.recommend(user) recommendations = list(set(recommendations_cf + recommendations_cbf)) return recommendations def recommend_playlists(self, user_id): user = next((u for u in self.users if u.user_id == user_id), None) if not user: return [] return self.collaborative_filtering.recommend(user)"},{"question":"Write a Python program to parse a large XML file and extract specific data based on a given datatype and attribute criteria. The program should handle different XML namespaces and incorporate exception handling for potential parsing errors. Additionally, design the function to process the extracted data and save it to a JSON file, ensuring proper formatting and encoding. Furthermore, include a feature to log the processing time and any errors encountered during the execution, providing a summary report at the end.","solution":"import xml.etree.ElementTree as ET import json import logging import time def parse_and_process_xml(xml_file, output_json_file, datatype, attribute): Parses an XML file, extracts data based on the provided datatype and attribute criteria, processes the data, and saves it to a JSON file. logging.basicConfig(filename='xml_processing.log', level=logging.INFO) start_time = time.time() try: tree = ET.parse(xml_file) root = tree.getroot() except ET.ParseError as e: logging.error(f\\"XML parsing error: {e}\\") return except FileNotFoundError: logging.error(f\\"XML file {xml_file} not found\\") return except Exception as e: logging.error(f\\"Unexpected error: {e}\\") return namespace = {'ns': root.tag.split('}')[0].strip('{')} extracted_data = [] try: for elem in root.findall(f\\".//ns:{datatype}\\", namespaces=namespace): if attribute in elem.attrib: extracted_data.append(elem.attrib[attribute]) with open(output_json_file, 'w', encoding='utf-8') as json_file: json.dump(extracted_data, json_file, ensure_ascii=False, indent=4) except Exception as e: logging.error(f\\"Error during processing: {e}\\") end_time = time.time() logging.info(f\\"Processing completed in {end_time - start_time} seconds\\") return extracted_data"},{"question":"Create a function \`deep_copy_dictionary\` that takes a dictionary as an argument and returns a deep copy of it. The dictionary may contain nested dictionaries, lists, and other primitive data types (integers, strings, floats, etc.). Ensure that the function properly handles the recursion needed to copy nested structures without using any external libraries for deep copying. Write test cases to verify the correctness of your function with various combinations of nested structures.","solution":"def deep_copy_dictionary(d): Returns a deep copy of the input dictionary. The dictionary may contain nested dictionaries, lists, and other primitive data types (integers, strings, floats, etc.). if not isinstance(d, dict): raise ValueError(\\"Input is not a dictionary.\\") def deep_copy(d): result = {} for key, value in d.items(): if isinstance(value, dict): result[key] = deep_copy(value) elif isinstance(value, list): result[key] = [deep_copy(v) if isinstance(v, dict) else v for v in value] else: result[key] = value return result return deep_copy(d)"},{"question":"You are given a list of dictionaries, each representing a student with keys 'name', 'grades', and 'attendance'. Construct a Python function called \\"top_student\\" that returns the name of the student with the highest average grade, provided their attendance is above 75%. If there are multiple students with the highest average grade, return the name of the student who appears first in the list. If the list is empty, the function should return None.","solution":"def top_student(students): Returns the name of the student with the highest average grade and attendance above 75%. top_name = None top_average = -1 for student in students: if student['attendance'] > 75: average_grade = sum(student['grades']) / len(student['grades']) if average_grade > top_average: top_average = average_grade top_name = student['name'] return top_name"},{"question":"Write a function that takes a dictionary where the keys are student names and the values are lists of their scores in different subjects. The function should return a dictionary where the keys are student names and the values are their average scores rounded to two decimal places. Additionally, the function should filter out any students whose average score is below a threshold value passed as a parameter. \`\`\` students_scores = { \\"Alice\\": [85, 90, 78], \\"Bob\\": [70, 65, 75], \\"Charlie\\": [95, 100, 85], \\"David\\": [60, 62, 58] } threshold = 80 \`\`\` Note: You will need to implement this in Python. The solution should not use any external libraries for calculating averages or rounding.","solution":"def average_scores(students_scores, threshold): Returns a dictionary with student names and their average scores rounded to two decimal places. Filters out students whose average score is below the threshold. Args: students_scores (dict): A dictionary where keys are student names and values are lists of scores. threshold (float): The threshold for filtering out students. Returns: dict: A dictionary with student names and their average scores. result = {} for student, scores in students_scores.items(): if scores: avg_score = round(sum(scores) / len(scores), 2) if avg_score >= threshold: result[student] = avg_score return result"},{"question":"You are given a list of integers representing stock prices of a particular stock on consecutive days. Your task is to determine the maximum profit you can achieve by making at most one buy and one sell transaction. If no profit can be achieved, return 0. Write a function \`maxProfit(prices: List[int]) -> int\` that takes a list of integers and returns the maximum possible profit. Example: \`\`\` Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. \`\`\` Constraints: - The length of the list will be in the range [1, 10^5]. - The value of each element in the list will be within the range [0, 10^5].","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by buying and selling one share of the stock given the list of daily prices. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: # Update the minimum price encountered so far if price < min_price: min_price = price # Calculate potential profit with current price and update max profit if it is higher potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Write a Python function that simulates and visualizes the movement of a bouncing ball within a 2D box using matplotlib. The ball should start at a random position within the box and move with a constant velocity. When the ball hits the boundary of the box, it should bounce off in the opposite direction. For simplicity, you can assume the box has a fixed size of 100x100 units and the ball has a velocity of 1 unit per update. Use \`matplotlib.animation\` to create an animation of the ball's movement.","solution":"import matplotlib.pyplot as plt import matplotlib.animation as animation import numpy as np def simulate_bouncing_ball(): box_size = 100 ball_radius = 1 dt = 1 ball_position = np.random.rand(2) * (box_size - 2*ball_radius) + ball_radius ball_velocity = np.random.rand(2) * 2 - 1 # random velocity (-1 to 1) for x and y direction fig, ax = plt.subplots() ax.set_xlim(0, box_size) ax.set_ylim(0, box_size) ball, = plt.plot([], [], 'bo', ms=8) def init(): ball.set_data([], []) return ball, def update(frame): nonlocal ball_position, ball_velocity ball_position += ball_velocity * dt # Check for collisions and update velocity accordingly if ball_position[0] <= ball_radius or ball_position[0] >= box_size - ball_radius: ball_velocity[0] *= -1 if ball_position[1] <= ball_radius or ball_position[1] >= box_size - ball_radius: ball_velocity[1] *= -1 ball.set_data(ball_position[0], ball_position[1]) return ball, ani = animation.FuncAnimation(fig, update, frames=200, init_func=init, blit=True, interval=20, repeat=False) plt.show() # Example usage simulate_bouncing_ball()"},{"question":"Develop a function that takes a list of integers and returns the length of the longest subsequence which forms an arithmetic progression. For example, given the list [1, 3, 5, 7, 9, 11], the function should return 6, as the entire list forms an arithmetic progression.","solution":"def length_of_longest_ap(arr): if len(arr) <= 2: return len(arr) n = len(arr) dp = [{} for _ in range(n)] max_len = 2 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Design a Python function that accepts an unsorted list of integers and returns a dictionary where the keys are the distinct integers from the list, and the values are the corresponding counts of each integer's occurrence. Additionally, the function should be optimized to perform this task with minimal time complexity. Provide the implementation and demonstrate its functionality with a few test cases.","solution":"def count_occurrences(arr): Returns a dictionary with distinct integers from the list as keys and their corresponding counts as values. occurrence_dict = {} for num in arr: if num in occurrence_dict: occurrence_dict[num] += 1 else: occurrence_dict[num] = 1 return occurrence_dict"},{"question":"Given a square matrix of integers, write a Python function to rotate the matrix by 90 degrees clockwise. The function should return the resulting matrix. # Function Signature \`\`\`python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass \`\`\` # Input - \`matrix\` (List[List[int]]): A square matrix (n x n) where 1 ≤ n ≤ 1000, and each element in the matrix is an integer. # Output - Return a new matrix (List[List[int]]) which represents the input matrix rotated 90 degrees clockwise. # Example \`\`\`python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert rotate_matrix(matrix) == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] matrix = [ [5, 1], [2, 3] ] assert rotate_matrix(matrix) == [ [2, 5], [3, 1] ] \`\`\` # Constraints - You may assume all the elements will fit within the integer range. - Try to achieve this in-place if possible. # Analysis Focus on manipulating the index values to achieve the rotation. Consider breaking the problem into parts, such as transposing the matrix and then reversing rows or columns.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates a square matrix by 90 degrees clockwise. :param matrix: A square n x n matrix of integers :return: The rotated matrix n = len(matrix) # Create a new matrix for the rotated result rotated = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): # Copy the elements to rotated matrix with 90 degrees shift rotated[j][n-1-i] = matrix[i][j] return rotated"},{"question":"Write a Python program that takes a string as input and returns a list of all possible substrings. Ensure that the function uses a generator to yield each substring, allowing the process to be paused and resumed. def all_substrings(string): # Your implementation here pass # Example Usage # Input: \\"abc\\" # Output: ['a', 'ab', 'abc', 'b', 'bc', 'c']","solution":"def all_substrings(string): Generates all possible substrings of the given string. Parameters: string (str): The input string. Yields: str: Each possible substring of the input string. length = len(string) for start in range(length): for end in range(start + 1, length + 1): yield string[start:end]"},{"question":"Context Original Requirements [BOSS: Design a system that processes and visualizes real-time weather data from various global weather stations. The system should provide users with a graphical interface to select specific weather stations and view detailed reports for different weather parameters such as temperature, humidity, and wind speed.] Real-Time Data Processing # Data Flow # Processing Requirements mermaid lineChart code syntax example. DONT USE QUOTES IN CODE DUE TO INVALID SYNTAX. Replace <Weather Station X> with REAL WEATHER STATION NAMES \`\`\`mermaid lineChart title Weather Data Over Time x-axis time y-axis temperature \\"Weather Station A\\": [23, 21, 20, 22, 24] \\"Weather Station B\\": [18, 17, 19, 16, 20] \\"Weather Station C\\": [25, 24, 26, 27, 28] \\"Weather Station D\\": [22, 21, 23, 24, 22] \\"Weather Station E\\": [19, 18, 17, 20, 21] \`\`\` Format example --- Original Requirements The boss asked for a system that processes and visualizes real-time weather data from various global weather stations. The system should provide users with a graphical interface to select specific weather stations and view detailed reports for different weather parameters such as temperature, humidity, and wind speed. Product Goals \`\`\`python [ \\"Create a system to process real-time weather data from multiple global weather stations.\\", \\"Provide a graphical interface for data visualization and station selection.\\", \\"Ensure detailed reporting for various weather parameters.\\" ] \`\`\` User Stories \`\`\`python [ \\"As a user, I want to select a weather station from a map so I can view its data.\\", \\"As a user, I want to see temperature graphs over time to analyze trends.\\", \\"As a user, I want to view humidity and wind speed data for better context.\\", ] \`\`\` Competitive Analysis \`\`\`python [ \\"WeatherBug: Offers real-time weather data and forecasts with map visualizations.\\", \\"AccuWeather: Provides detailed weather reports and interactive maps.\\", \\"Weather.com: Real-time updates and detailed weather parameters with a user-friendly interface.\\", \\"Dark Sky: Known for its hyperlocal weather reports and sleek user interface.\\", \\"Weather Underground: Combines personal weather stations data with powerful visualization features.\\", ] \`\`\` Competitive Quadrant Chart \`\`\`mermaid quadrantChart title Reach and Engagement of Weather Apps x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 Expand Potential quadrant-2 Need Promotion quadrant-3 Needs Reevaluation quadrant-4 Minor Improvements Needed \\"WeatherBug\\": [0.6, 0.5] \\"AccuWeather\\": [0.8, 0.7] \\"Weather.com\\": [0.9, 0.9] \\"Dark Sky\\": [0.7, 0.8] \\"Weather Underground\\": [0.5, 0.4] \\"New Weather App\\": [0.6, 0.7] \`\`\` Requirement Analysis The product must handle real-time data processing from several global weather stations, provide detailed weather parameter reports, and offer a user-friendly graphical interface for data visualization and station selection. Requirement Pool \`\`\`python [ (\\"Implement real-time data ingestion from multiple weather stations\\", \\"P0\\"), (\\"Develop a graphical user interface for station selection\\", \\"P0\\"), (\\"Create detailed reports for temperature, humidity, and wind speed\\", \\"P1\\"), (\\"Ensure smooth running and scalability of the system\\", \\"P2\\"), ] \`\`\` UI Design draft The interface should feature an interactive map with selectable weather stations. Upon selecting a station, users will view graphs of temperature, humidity, and wind speed data over time. The design should be intuitive and visually appealing, with clear, concise data representation. Anything UNCLEAR There are no unclear points.","solution":"def generate_product_goals(): Returns a list of product goals based on the given requirements. return [ \\"Create a system to process real-time weather data from multiple global weather stations.\\", \\"Provide a graphical interface for data visualization and station selection.\\", \\"Ensure detailed reporting for various weather parameters.\\" ] def generate_user_stories(): Returns a list of user stories based on the given requirements. return [ \\"As a user, I want to select a weather station from a map so I can view its data.\\", \\"As a user, I want to see temperature graphs over time to analyze trends.\\", \\"As a user, I want to view humidity and wind speed data for better context.\\" ] def generate_competitive_analysis(): Returns a list of competitive analysis for different weather apps. return [ \\"WeatherBug: Offers real-time weather data and forecasts with map visualizations.\\", \\"AccuWeather: Provides detailed weather reports and interactive maps.\\", \\"Weather.com: Real-time updates and detailed weather parameters with a user-friendly interface.\\", \\"Dark Sky: Known for its hyperlocal weather reports and sleek user interface.\\", \\"Weather Underground: Combines personal weather stations data with powerful visualization features.\\", ] def generate_requirement_pool(): Returns a list of prioritized requirements. return [ (\\"Implement real-time data ingestion from multiple weather stations\\", \\"P0\\"), (\\"Develop a graphical user interface for station selection\\", \\"P0\\"), (\\"Create detailed reports for temperature, humidity, and wind speed\\", \\"P1\\"), (\\"Ensure smooth running and scalability of the system\\", \\"P2\\"), ]"},{"question":"Write a Python function that processes a CSV file containing user data with columns such as \\"UserID,\\" \\"Name,\\" \\"Email,\\" and \\"SignupDate.\\" Your function should parse the CSV file and retrieve the top 5 most recent signups. Ensure your function also validates email addresses using a regex pattern to discard any invalid email entries. Furthermore, the function should output the extracted recent signups to a new CSV file, sorted by \\"SignupDate\\" in descending order and with columns \\"UserID\\" and \\"Email\\" only.","solution":"import csv import re from datetime import datetime def is_valid_email(email): Validates the email address using a regex pattern. regex = r'^b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b' return re.match(regex, email) is not None def process_csv(input_file, output_file): Processes the CSV file to retrieve the top 5 most recent signups, validates emails, and writes the output to a new CSV file. users = [] with open(input_file, mode='r', newline='') as csvfile: reader = csv.DictReader(csvfile) for row in reader: if is_valid_email(row['Email']): row['SignupDate'] = datetime.strptime(row['SignupDate'], '%Y-%m-%d') users.append(row) sorted_users = sorted(users, key=lambda x: x['SignupDate'], reverse=True)[:5] with open(output_file, mode='w', newline='') as csvfile: fieldnames = ['UserID', 'Email'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for user in sorted_users: writer.writerow({'UserID': user['UserID'], 'Email': user['Email']})"},{"question":"Create a function that accepts a list of integers and returns a list of integers where each element is the product of all the other elements in the original list except for the element at that position. Do this without using division. For example, given the list \`[1, 2, 3, 4]\`, the function should return \`[24, 12, 8, 6]\` because: - \`24\` is the product of \`2 * 3 * 4\` - \`12\` is the product of \`1 * 3 * 4\` - \`8\` is the product of \`1 * 2 * 4\` - \`6\` is the product of \`1 * 2 * 3\` Write a function named \`product_except_self\` that accomplishes this. # Constraints: - You may assume that the list contains at least two integers. - The elements of the list can be positive, negative, or zero. - Try to perform the computation in O(n) time with O(1) extra space. (The output list does not count towards extra space) # Example: \`\`\`python assert product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] assert product_except_self([2, 5, 9]) == [45, 18, 10] assert product_except_self([1, -2, 3, -4]) == [24, -12, 8, -6] \`\`\`","solution":"def product_except_self(nums): Given a list of integers, returns a list where each element is the product of all other elements except for the element at that position. n = len(nums) # Initialize the result array with ones result = [1] * n # Calculate products of elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate products of elements to the right of each element and multiply with the left products right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function that takes a string as input, reverses the words in the string while maintaining the order of characters within each word, and returns the transformed string. Words in the input string are separated by single spaces. The function should handle strings up to 10^5 characters in length. Example: - Input: \\"hello world this is a test\\" - Output: \\"world hello siht si a tset\\"","solution":"def reverse_words_order_and_characters(string): Reverses the words in the string while maintaining the order of characters within each word. words = string.split() reversed_words = [word[::-1] for word in words] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Write a Python function that connects to an Amazon S3 bucket and downloads a file. The function should accept the bucket name and file key as parameters, and save the downloaded file to a specified local path. Ensure to include proper error handling to manage scenarios such as incorrect bucket name, nonexistent file key, or network issues. Use the \`boto3\` library to interact with S3.","solution":"import boto3 from botocore.exceptions import NoCredentialsError, ClientError def download_file_from_s3(bucket_name, file_key, local_path): Downloads a file from an Amazon S3 bucket. :param bucket_name: str. Name of the S3 bucket. :param file_key: str. Key of the file in the S3 bucket. :param local_path: str. Local path where the file should be saved. :return: str. Message indicating success or type of error. s3 = boto3.client('s3') try: s3.download_file(bucket_name, file_key, local_path) return \\"Download successful.\\" except NoCredentialsError: return \\"Credentials not available.\\" except ClientError as e: if e.response['Error']['Code'] == \\"404\\": return \\"The file does not exist.\\" elif e.response['Error']['Code'] == \\"NoSuchBucket\\": return \\"The bucket does not exist.\\" else: return \\"An error occurred.\\""},{"question":"Write a program to determine whether an input string is a palindrome. A string is considered a palindrome if it reads the same backward as forward. The input string will only contain lowercase alphabetical characters. Example: - Input: \\"racecar\\" - Output: True - Input: \\"hello\\" - Output: False","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Write a Python function that takes in a text document (string format) and returns the top N most common words in the document, along with their frequencies. Ignore common stop words (e.g., \\"the\\", \\"and\\", \\"is\\", etc.) and consider words case-insensitively (e.g., \\"Apple\\" and \\"apple\\" should be treated as the same word). Use regular expressions to process the text. Test your function with a sample document and demonstrate its effectiveness.","solution":"import re from collections import Counter def get_top_n_words(text, n=5): Returns the top N most common words in the text document, ignoring common stop words. # Define a list of common stop words stop_words = set([ 'the', 'and', 'is', 'in', 'to', 'a', 'of', 'that', 'it', 'with', 'as', 'for', 'its', 'on', 'at', 'by', 'an', 'be' ]) # Use regular expressions to remove punctuation (keeping spaces) and lower the text cleaned_text = re.sub(r'[^ws]', '', text).lower() # Split the cleaned text into words words = cleaned_text.split() # Filter out stop words filtered_words = [word for word in words if word not in stop_words] # Count the frequency of each word word_counts = Counter(filtered_words) # Return the top N most common words along with their frequencies return word_counts.most_common(n)"},{"question":"Design an algorithm that outputs the number in the Fibonacci sequence at position \`n\` (where the sequence starts with 0 at position 0), ensuring an efficient computation for large values of \`n\`: def fibonacci(n: int): Compute the nth Fibonacci number using a method that ensures efficiency for large inputs. Constraints: 0 <= n <= 10^5 >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(10) 55 >>> fibonacci(50) 12586269025 >>> fibonacci(100) 354224848179261915075 Implement this problem using an optimal strategy to handle constraints effectively.","solution":"def fibonacci(n: int) -> int: Compute the nth Fibonacci number using an efficient approach. if n < 0: raise ValueError(\\"The input n should be a non-negative integer.\\") if n == 0: return 0 elif n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[-1] + fib[-2]) return fib[-1]"},{"question":"Create a function that takes in a list of integers and a target integer. The function should return a list of tuples, where each tuple contains a pair of indices whose corresponding elements in the input list sum up to the target integer. Ensure that each pair of indices (i, j) meets the criteria i < j and does not include the same pair more than once in the result. If no such pairs exist, return an empty list. Handle edge cases such as an empty list and lists with fewer than two elements gracefully. Function Signature: \`\`\`python def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: pass \`\`\` Example: \`\`\`python find_pairs_with_sum([2, 7, 11, 15], 9) -> [(0, 1)] find_pairs_with_sum([1, 2, 3, 4, 3], 6) -> [(1, 3), (2, 4)] find_pairs_with_sum([5, 5, 5], 10) -> [(0, 1), (0, 2), (1, 2)] find_pairs_with_sum([], 5) -> [] find_pairs_with_sum([1], 2) -> [] \`\`\`","solution":"from typing import List, Tuple def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: Returns a list of tuples where each tuple contains pairs of indices whose corresponding elements in the input list sum up to the target integer. pairs = [] seen_indices = set() for i in range(len(nums)): for j in range(i + 1, len(nums)): if (nums[i] + nums[j] == target) and (i, j) not in seen_indices: pairs.append((i, j)) seen_indices.add((i, j)) seen_indices.add((j, i)) return pairs"},{"question":"Implement an algorithm in Python that detects a cycle in a directed graph. Given a graph represented as an adjacency list, write a function \`has_cycle(graph)\` that returns \`True\` if there is a cycle in the graph, and \`False\` otherwise. Provide a detailed explanation of your solution and discuss its time complexity. *Example:* \`\`\`python graph1 = { 0: [1], 1: [2], 2: [0, 3], 3: [4], 4: [] } graph2 = { 0: [1, 2], 1: [2], 2: [3], 3: [4], 4: [] } print(has_cycle(graph1)) # Output: True print(has_cycle(graph2)) # Output: False \`\`\`","solution":"def has_cycle(graph): Returns True if there is a cycle in the graph, else False. Parameters: - graph: a dictionary representing the adjacency list of the graph Returns: - Boolean value indicating the presence of a cycle visited = set() rec_stack = set() def is_cyclic(v): visited.add(v) rec_stack.add(v) for neighbour in graph[v]: if neighbour not in visited: if is_cyclic(neighbour): return True elif neighbour in rec_stack: return True rec_stack.remove(v) return False for node in graph: if node not in visited: if is_cyclic(node): return True return False"},{"question":"Write a Python function called \`remove_duplicates\` that takes a list as input and returns a new list with all the duplicates removed. The order of the elements in the original list should be preserved in the resulting list. You are not allowed to use any libraries or built-in functions that directly accomplish this task, such as \`set\` or \`collections.OrderedDict\`. Example: \`\`\` Input: [1, 3, 2, 1, 4, 3, 5, 6, 1] Output: [1, 3, 2, 4, 5, 6] \`\`\`","solution":"def remove_duplicates(lst): Removes duplicates from a list while preserving order of elements. :param lst: List of elements with possible duplicates. :return: List of elements without duplicates, maintaining original order. result = [] seen = {} for item in lst: if item not in seen: result.append(item) seen[item] = True return result"},{"question":"Design a function to determine if a given string is a rotation of another string. For instance, the string \\"waterbottle\\" is a rotation of \\"erbottlewat\\". Implement a function \`is_rotation(s1: str, s2: str) -> bool\` that returns True if \`s1\` is a rotation of \`s2\`, and False otherwise. Assume you have a helper function \`is_substring(s1: str, s2: str) -> bool\` that checks if one string is a substring of another. Your solution should use this helper function.","solution":"def is_substring(s1: str, s2: str) -> bool: return s1 in s2 def is_rotation(s1: str, s2: str) -> bool: Determines if s2 is a rotation of s1. :param s1: Original string :param s2: String to check if it is a rotation of s1 :return: True if s2 is a rotation of s1, False otherwise if len(s1) != len(s2): return False combined = s1 + s1 return is_substring(s2, combined)"},{"question":"Implement a binary search algorithm to determine if a target value exists within a sorted array of integers. The function should return True if the target value is found and False if it is not. Ensure to handle edge cases where the input array is empty or contains only one element. Additionally, analyze the time complexity of your implementation and provide an explanation of why binary search is more efficient than a linear search for this task.","solution":"def binary_search(arr, target): Performs binary search on a sorted array to determine if the target value exists. Parameters: arr (list of int): The sorted list of integers. target (int): The integer target value to search for. Returns: bool: True if the target value is found, False otherwise. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a function that accepts a string representing a mathematical expression containing only positive integers, addition (+), subtraction (-), multiplication (*), and division (/) operators. The task is to evaluate the expression and return the result as a float. You must consider the order of operations (i.e., BODMAS/BIDMAS rules - Brackets, Orders (i.e. powers and square roots, etc.), Division and Multiplication, Addition and Subtraction) and handle any amount of whitespace around the operators or numbers. For example: expression = \\" 3 + 5 * 2 / ( 8 - 3 ) \\" The result should be: 5.0 Make sure your function can handle expressions with more than one set of parentheses and multiple operators, and ensure that it performs efficiently.","solution":"import re def evaluate_expression(expression): Evaluates a mathematical expression and returns the result as a float. The expression can include positive integers, +, -, *, / operators, and parentheses, with consideration of operator precedence (BODMAS/BIDMAS). def parse_tokens(expression): Parses an expression string into tokens (numbers, operators, and parentheses) return re.findall(r'd+.?d*|[-+*/()]', expression) def precedence(op): Returns the precedence of the operators. if op == '+' or op == '-': return 1 if op == '*' or op == '/': return 2 return 0 def apply_operation(a, b, op): Applies an arithmetic operation to two numbers. if op == '+': return a + b elif op == '-': return a - b elif op == '*': return a * b elif op == '/': return a / b def evaluate(tokens): Evaluates a list of tokens to compute the result of the expression. values = [] ops = [] def perform_operation(): Performs the last operation on the two topmost values. b = values.pop() a = values.pop() op = ops.pop() values.append(apply_operation(a, b, op)) i = 0 while i < len(tokens): token = tokens[i] if token.isdigit() or '.' in token: # if the token is a number values.append(float(token)) elif token == '(': ops.append(token) elif token == ')': while ops and ops[-1] != '(': perform_operation() ops.pop() # Remove '(' from stack elif token in '+-*/': while (ops and precedence(ops[-1]) >= precedence(token)): perform_operation() ops.append(token) i += 1 while ops: perform_operation() return values[-1] tokens = parse_tokens(expression) return evaluate(tokens)"},{"question":"Given an array of integers, develop an algorithm to find all quadruplets (i.e., sets of four numbers) that sum up to a specified target value. Ensure that the algorithm handles the following constraints efficiently: 1. The array can contain both positive and negative numbers, as well as zeros. 2. Quadruplets should be unique; the order of numbers in quadruplets does not matter (e.g., [1, 2, 3, 4] is considered the same as [4, 3, 2, 1]). Provide the solution in a programming language of your choice.","solution":"def four_sum(nums, target): Finds all unique quadruplets in the list that sum up to the target value. nums.sort() results = [] length = len(nums) for i in range(length - 3): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicates continue for j in range(i + 1, length - 2): if j > i + 1 and nums[j] == nums[j - 1]: # Skip duplicates continue left, right = j + 1, length - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: results.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: # Skip duplicates left += 1 while left < right and nums[right] == nums[right - 1]: # Skip duplicates right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return results"},{"question":"Write a function that takes a list of words and returns a dictionary where each key is a word length, and each value is the number of words of that length. The function should be case-insensitive. For example, given the list \`[\\"apple\\", \\"Banana\\", \\"cat\\", \\"DOG\\", \\"Elephant\\"]\`, the function should return \`{5: 2, 6: 1, 3: 2, 8: 1}\`.","solution":"def word_length_count(words): Returns a dictionary with word lengths as keys and the number of words of those lengths as values. The function is case-insensitive. word_length_dict = {} for word in words: word_length = len(word) if word_length in word_length_dict: word_length_dict[word_length] += 1 else: word_length_dict[word_length] = 1 return word_length_dict"},{"question":"Suppose you are given an array of integers, and you need to find a contiguous subarray (containing at least one number) which has the largest sum and return its sum. Implement a function \`maxSubArraySum\` that takes an array of integers as input and returns the maximum sum of the contiguous subarray. The function should implement an efficient algorithm to handle large input sizes. Function signature: \`def maxSubArraySum(nums: List[int]) -> int:\` For example: \`\`\`python maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) \`\`\` Should return: \`\`\` 6 \`\`\` Justify the choice of your algorithm and briefly explain why it is efficient compared to a straightforward, brute-force approach.","solution":"from typing import List def maxSubArraySum(nums: List[int]) -> int: Find the contiguous subarray which has the largest sum and return its sum. Implements Kadane's Algorithm which runs in O(n) time complexity. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a list of integers and returns the second smallest integer in the list. If there are fewer than two unique integers in the list, the function should return \`None\`. Ensure that your function efficiently handles edge cases like lists with all identical elements or empty lists.","solution":"def second_smallest(lst): Returns the second smallest integer in the list. If there are fewer than two unique integers, return None. if len(lst) < 2: return None unique_elements = list(set(lst)) if len(unique_elements) < 2: return None unique_elements.sort() return unique_elements[1]"},{"question":"Write a Python function that simulates the withdrawal of money from an ATM. The function should check if the requested amount can be dispensed based on the available denominations (50, 20, 10, 5, 1). It should return the count of each denomination to dispense the exact requested amount if possible, or an error message if the amount cannot be dispensed with the available denominations. requested_amount = 187","solution":"def atm_withdrawal(requested_amount): Simulates the withdrawal of money from an ATM. The function checks if the requested amount can be dispensed based on the available denominations (50, 20, 10, 5, 1). It should return the count of each denomination to dispense the exact requested amount if possible, or an error message if the amount cannot be dispensed. denominations = [50, 20, 10, 5, 1] result = {} if requested_amount <= 0: return \\"Invalid amount\\" for denom in denominations: count, requested_amount = divmod(requested_amount, denom) if count > 0: result[denom] = count return result if requested_amount == 0 else \\"Cannot dispense the exact amount with available denominations\\""},{"question":"In designing a Python application that handles real-time data processing, you are required to implement a logging solution that ensures all data points processed within a specific time window are efficiently logged into a file for later analysis. Your task involves creating a class \`RealTimeLogger\` that: 1. Initializes with a specific time window in seconds. 2. Provides a method \`log_data(data_point)\` to log each data point with its timestamp. 3. Aggregates and writes all data points to a file after the time window elapses. 4. Automatically starts a new logging cycle for the next time window after writing to the file. Considerations: - Assume the data processing rate is high (hundreds of data points per second). - Ensure that the logging mechanism does not hinder the performance of real-time data processing. - Implement proper thread-safety measures for concurrent data logging and writing. Provide a sample code implementation for this class and explain how you would ensure the performance and thread-safety of the logging operation.","solution":"import time import threading class RealTimeLogger: def __init__(self, time_window, file_name): self.time_window = time_window self.file_name = file_name self.data_points = [] self.lock = threading.Lock() self.stop_event = threading.Event() self.thread = threading.Thread(target=self._write_periodically) self.thread.start() def log_data(self, data_point): timestamp = time.time() with self.lock: self.data_points.append((timestamp, data_point)) def _write_periodically(self): while not self.stop_event.is_set(): time.sleep(self.time_window) self._write_to_file() def _write_to_file(self): with self.lock: if not self.data_points: return with open(self.file_name, 'a') as file: for timestamp, data_point in self.data_points: file.write(f\\"{timestamp},{data_point}n\\") self.data_points = [] def stop_logging(self): self.stop_event.set() self.thread.join() self._write_to_file() # Example usage: # logger = RealTimeLogger(time_window=5, file_name=\\"log.txt\\") # logger.log_data(\\"data_point_1\\") # logger.log_data(\\"data_point_2\\") # time.sleep(6) # logger.stop_logging()"},{"question":"Create a function that takes a list of integers and returns a new list containing only the integers that remain after removing all consecutive duplicate values. For example, given the input list [1, 2, 2, 3, 3, 1, 1, 4], the output should be [1, 2, 3, 1, 4].","solution":"def remove_consecutive_duplicates(lst): Given a list of integers, return a new list containing only the integers that remain after removing all consecutive duplicate values. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): if lst[i] != lst[i - 1]: result.append(lst[i]) return result"},{"question":"Write a function that takes a list of dictionaries, where each dictionary contains two keys: 'name' (a string) and 'price' (a float). The function should return a new list of strings that includes the names of the items whose price is above the average price of all items in the list. items = [ {'name': 'apple', 'price': 1.2}, {'name': 'banana', 'price': 0.8}, {'name': 'cherry', 'price': 2.5} ] def filter_above_average(items): # Complete the code here","solution":"def filter_above_average(items): Returns a list of item names whose price is above the average price of all items. Parameters: items (list of dict): A list of dictionaries, each with 'name' (str) and 'price' (float). Returns: list of str: A list of item names with prices above the average price. if not items: return [] # Calculate average price total_price = sum(item['price'] for item in items) average_price = total_price / len(items) # Filter items with price above average above_average_items = [item['name'] for item in items if item['price'] > average_price] return above_average_items"},{"question":"Design and implement a recommendation system algorithm that utilizes collaborative filtering techniques to suggest items to users based on their historical interaction data. The system should integrate both user-based and item-based approaches, and be capable of dealing with sparse datasets. Your task is to implement the recommendation algorithm, ensuring that it can efficiently compute similarity measures (e.g., cosine similarity, Pearson correlation) and generate recommendations based on these measures. Additionally, demonstrate how you would handle the cold-start problem for new users and items. The effectiveness of the recommendation system should be evaluated using precision, recall, and F1 score metrics.","solution":"import numpy as np from sklearn.metrics.pairwise import cosine_similarity from scipy.sparse import csr_matrix from sklearn.metrics import precision_score, recall_score, f1_score class CollaborativeFiltering: def __init__(self, user_item_matrix): Initialize the collaborative filtering recommendation system. Parameters: user_item_matrix (np.array): A user-item interaction matrix. self.user_item_matrix = csr_matrix(user_item_matrix) self.user_sim_matrix = None self.item_sim_matrix = None def compute_user_similarity(self): Compute the user-user similarity matrix using cosine similarity. self.user_sim_matrix = cosine_similarity(self.user_item_matrix) def compute_item_similarity(self): Compute the item-item similarity matrix using cosine similarity. self.item_sim_matrix = cosine_similarity(self.user_item_matrix.T) def recommend_for_user(self, user_index, top_n=5): Generate item recommendations for a given user based on user-based collaborative filtering. Parameters: user_index (int): Index of the user for whom to generate recommendations. top_n (int): Number of top recommendations to return. Returns: list: A list of recommended item indices. if self.user_sim_matrix is None: self.compute_user_similarity() similar_users = self.user_sim_matrix[user_index] item_scores = similar_users.dot(self.user_item_matrix.toarray()) item_scores = item_scores / similar_users.sum() user_items = self.user_item_matrix[user_index].toarray().flatten() item_indices = np.argsort(item_scores - user_items)[::-1] return item_indices[:top_n] def recommend_for_item(self, item_index, top_n=5): Generate item recommendations based on item-based collaborative filtering. Parameters: item_index (int): Index of the item for which to generate recommendations. top_n (int): Number of top recommendations to return. Returns: list: A list of similar item indices. if self.item_sim_matrix is None: self.compute_item_similarity() similar_items = self.item_sim_matrix[item_index] item_indices = np.argsort(similar_items)[::-1] return item_indices[:top_n] def handle_cold_start_user(self, n_items=5): Handle the cold-start problem for new users by recommending the most popular items. Parameters: n_items (int): Number of top items to recommend. Returns: list: A list of recommended item indices for a new user. item_popularity = np.array(self.user_item_matrix.sum(axis=0)).flatten() return np.argsort(item_popularity)[-n_items:] def handle_cold_start_item(self, n_users=5): Handle the cold-start problem for new items by recommending them to the most active users. Parameters: n_users (int): Number of top users to recommend the new item to. Returns: list: A list of user indices to recommend the new item to. user_activity = np.array(self.user_item_matrix.sum(axis=1)).flatten() return np.argsort(user_activity)[-n_users:] def evaluate(self, true_items, pred_items): Evaluate the recommendation system using precision, recall, and F1 score. Parameters: true_items (list): A list of ground truth items. pred_items (list): A list of predicted recommended items. Returns: tuple: A tuple containing precision, recall, and F1 score. precision = precision_score(true_items, pred_items, average='macro') recall = recall_score(true_items, pred_items, average='macro') f1 = f1_score(true_items, pred_items, average='macro') return precision, recall, f1"},{"question":"You are provided with an incomplete Python function intended to read a file of weather data and compute the average temperature for each day. The weather data file (\`weather_data.txt\`) contains lines in the format \\"<date> <temperature>\\", where \`<date>\` is in \`YYYY-MM-DD\` format and \`<temperature>\` is a floating-point number. Your task is to complete the function so it returns a dictionary where the keys are dates and the values are the average temperatures for those dates. Handle any potential errors gracefully and ensure the function behaves as expected if the file is empty or contains malformed lines. Here is the provided code snippet: \`\`\`python def compute_average_temperatures(file_path): This function reads a file of weather data and computes the average temperature for each day. :param file_path: str: path to the weather data file :return: dict: a dictionary where keys are dates and values are average temperatures averages = {} counts = {} try: with open(file_path, 'r') as file: for line in file: parts = line.strip().split() if len(parts) != 2: continue date, temp_str = parts try: temperature = float(temp_str) except ValueError: continue if date in averages: averages[date] += temperature counts[date] += 1 else: averages[date] = temperature counts[date] = 1 for date in averages: averages[date] /= counts[date] except FileNotFoundError: print(f\\"File {file_path} not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\") return averages \`\`\` Your task: 1. Complete the function \`compute_average_temperatures\`. 2. Ensure the function returns the correct dictionary of average temperatures after reading from the file. 3. Write a short explanation justifying any steps taken to ensure the function handles edge cases such as an empty file or lines with malformed data.","solution":"def compute_average_temperatures(file_path): This function reads a file of weather data and computes the average temperature for each day. :param file_path: str: path to the weather data file :return: dict: a dictionary where keys are dates and values are average temperatures averages = {} counts = {} try: with open(file_path, 'r') as file: for line in file: parts = line.strip().split() if len(parts) != 2: continue date, temp_str = parts try: temperature = float(temp_str) except ValueError: continue if date in averages: averages[date] += temperature counts[date] += 1 else: averages[date] = temperature counts[date] = 1 for date in averages: averages[date] /= counts[date] except FileNotFoundError: print(f\\"File {file_path} not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\") return averages"},{"question":"Write a function to find the longest substring without repeating characters in a given string. The function should return the length of this substring. Additionally, the function should efficiently handle long strings with potential repeated patterns. For reference, here's a suboptimal code sample that uses a brute-force approach with nested loops: \`\`\`python def length_of_longest_substring(s: str) -> int: max_length = 0 for i in range(len(s)): for j in range(i + 1, len(s) + 1): if len(set(s[i:j])) == (j - i): max_length = max(max_length, j - i) return max_length print(length_of_longest_substring(\\"abcabcbb\\")) # Output should be 3 (\\"abc\\") print(length_of_longest_substring(\\"bbbbb\\")) # Output should be 1 (\\"b\\") \`\`\` Your task is to improve this function by using a more efficient approach, such as the sliding window technique, to handle larger input strings effectively.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. Uses sliding window technique for efficient implementation. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function in Python that takes a list of strings as input and returns a dictionary where each key is a string from the list and its value is the length of that string. Ensure that the function handles case sensitivity and does not count duplicate strings. Example Input: \`\`\`python strings = [\\"apple\\", \\"banana\\", \\"Apple\\", \\"cherry\\", \\"banana\\"] \`\`\` Example Output: \`\`\`python { \\"apple\\": 5, \\"banana\\": 6, \\"Apple\\": 5, \\"cherry\\": 6 } \`\`\`","solution":"def string_lengths(strings): Takes a list of strings as input and returns a dictionary where each key is a string from the list and its value is the length of that string. Handles case sensitivity and does not count duplicate strings. return {string: len(string) for string in set(strings)}"},{"question":"You are given a list of integers \`nums\` and an integer \`k\`. Your task is to find the number of contiguous subarrays that have a sum equal to \`k\`. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: Subarrays [1,1] and [1,1] both have a sum of 2. Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: Subarrays [1,2] and [3] both have a sum of 3. Example 3: Input: nums = [-1,-1,1], k = 0 Output: 1 Explanation: Subarray [-1,-1,1] has a sum of 0. Constraints: - The number of elements in \`nums\` is in the range \`[1, 2 * 10^4]\`. - The sum of elements in any subarray will be in the range of \`[-10^5, 10^5]\`. - \`-10^5 <= k <= 10^5\`.","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays that sum to k. Parameters: nums (List[int]): The list of integers. k (int): The target sum. Returns: int: The number of contiguous subarrays with a sum equal to k. count = 0 sum_dict = {0: 1} current_sum = 0 for num in nums: current_sum += num if (current_sum - k) in sum_dict: count += sum_dict[current_sum - k] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"Generate a list of tuples where each tuple contains a date string and a corresponding integer temperature reading from the following two lists. Convert the date strings to datetime objects and sort the list of tuples based on the dates in ascending order. Finally, print the sorted list in the format of \\"YYYY-MM-DD: temperature\\". The lists are as follows: date_list = ['2021-07-20', '2020-05-15', '2022-09-30'] temp_list = [30, 22, 25]","solution":"from datetime import datetime def generate_sorted_temperature_list(date_list, temp_list): Generate a sorted list of tuples with date strings and corresponding temperature readings. Each tuple contains a datetime object and an integer temperature value. Args: date_list (list of str): List of date strings. temp_list (list of int): List of temperatures corresponding to the dates. Returns: list of tuple: Sorted list of tuples by date in ascending order. # Zip the lists together into a list of tuples combined_list = list(zip(date_list, temp_list)) # Convert date strings to datetime objects and create a new list of tuples datetime_temp_list = [(datetime.strptime(date, '%Y-%m-%d'), temp) for date, temp in combined_list] # Sort the list of tuples by datetime objects sorted_datetime_temp_list = sorted(datetime_temp_list) # Format the sorted list for printing formatted_list = [f\\"{date.strftime('%Y-%m-%d')}: {temp}\\" for date, temp in sorted_datetime_temp_list] return formatted_list"},{"question":"Implement a function in Python that takes a binary search tree (BST) and returns a list of all values greater than a given number. The BST is represented by a class with \`value\`, \`left\`, and \`right\` attributes. \`\`\`python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def values_greater_than(root: TreeNode, x: int) -> List[int]: # Your code here \`\`\`","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def values_greater_than(root: TreeNode, x: int): Returns a list of all values in the BST greater than a given number x. result = [] def dfs(node): if node: if node.value > x: result.append(node.value) dfs(node.left) dfs(node.right) dfs(root) return result"},{"question":"Given a list of courses, each course has a prerequisite list which indicates the courses that need to be completed before taking that course. Write a function to determine if it is possible to finish all courses. The courses are represented by integers from 0 to \`n-1\`. You will be given a list of prerequisite pairs where \`prerequisite[i] = [a, b]\` indicates that course \`b\` needs to be completed before course \`a\`. Return \`true\` if it is possible to finish all courses, and \`false\` otherwise. # Example 1: \`\`\` Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. \`\`\` # Example 2: \`\`\` Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should have finished course 1. This makes it impossible to finish all courses. \`\`\` # Constraints: * The input prerequisites is a list of lists of size \`m\`, where \`0 <= m <= 5000\`. * \`prerequisites[i].length == 2\` * \`0 <= a, b < numCourses\` * \`All prerequisite pairs \`[a, b]\` are unique\`. * \`1 <= numCourses <= 1000\`","solution":"from collections import defaultdict, deque def canFinish(numCourses, prerequisites): Determine if it is possible to finish all courses given the prerequisites. :param numCourses: int, number of courses :param prerequisites: List[List[int]], list of prerequisite pairs :return: bool, True if it is possible to finish all courses, else False # Create a graph of course prerequisites adj_list = defaultdict(list) in_degree = [0] * numCourses # Build the graph and in-degree array for dest, src in prerequisites: adj_list[src].append(dest) in_degree[dest] += 1 # Queue for courses with no prerequisites queue = deque([i for i in range(numCourses) if in_degree[i] == 0]) visited_courses = 0 while queue: course = queue.popleft() visited_courses += 1 # Reduce the in-degree of subsequent courses for neighbor in adj_list[course]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we've visited all courses, return True return visited_courses == numCourses"},{"question":"Write a function to determine if a given string is a palindrome, ignoring case and punctuation. The function should return a boolean value (True or False). def isPalindrome(inputString):","solution":"import string def isPalindrome(inputString): Returns True if the inputString is a palindrome, ignoring case and punctuation, False otherwise. # Remove punctuation and convert to lowercase cleaned_string = ''.join(char.lower() for char in inputString if char.isalnum()) # Check if the cleaned string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Given a piece of incomplete code and an unordered list of numbers, complete the Python function \`sort_and_count_odd\` which sorts the list in ascending order, and returns a tuple containing the sorted list and the count of odd numbers present in the list. The function should handle various types of inputs in the list, including strings, negative numbers, and special characters or None values. Incomplete Code: \`\`\`python def sort_and_count_odd(num_list): sorted_list = [] odd_count = 0 for num in num_list: if num is None or type(num) not in [int, float] or isinstance(num, bool): pass else: sorted_list.append(num) if isinstance(num, int) and num % 2 != 0: odd_count += 1 # Add logic to sort the \`sorted_list\` here return (sorted_list, odd_count) numbers = [4, \\"17\\", None, -3, 11.2, 6, True, \\"8\\", 4, -1] print(sort_and_count_odd(numbers)) \`\`\` In the above code: - Complete the logic to sort the \`sorted_list\`. - Ensure all invalid inputs (like strings, special characters, None, and booleans) are handled appropriately. - The function should count only odd integers. After completing the code, create test cases to validate your function. Verify the sorted list and the count of odd numbers against expected outcomes.","solution":"def sort_and_count_odd(num_list): sorted_list = [] odd_count = 0 for num in num_list: if num is None or type(num) not in [int, float] or isinstance(num, bool): pass else: sorted_list.append(num) if isinstance(num, int) and num % 2 != 0: odd_count += 1 # Sorting the list in ascending order sorted_list.sort() return (sorted_list, odd_count) numbers = [4, \\"17\\", None, -3, 11.2, 6, True, \\"8\\", 4, -1] print(sort_and_count_odd(numbers))"},{"question":"Create a Python function \`is_interesting_substring(s: str, k: int) -> bool\` that determines if there exists a contiguous substring of length \`k\` within the given string \`s\` such that the sum of the ASCII values of its characters is divisible by \`k\`. Function Signature: \`\`\`python def is_interesting_substring(s: str, k: int) -> bool: pass \`\`\` Input: - \`s\`: A string containing only alphanumeric characters (both lower and upper case). - \`k\`: An integer representing the length of the substring to consider. Output: - A boolean value: \`True\` if there exists such a substring, otherwise \`False\`. Examples: \`\`\`python assert is_interesting_substring(\\"abcdefgh\\", 3) == True assert is_interesting_substring(\\"abcde\\", 2) == False assert is_interesting_substring(\\"Aaaaa\\", 2) == True \`\`\` Explanation: 1. For the first example, consider the substring \\"abc\\" which has ASCII values 97 ('a') + 98 ('b') + 99 ('c') = 294. Since 294 modulo 3 equals 0, the function should return \`True\`. 2. For the second example, no contiguous substring of length 2 results in a sum divisible by 2, so the function should return \`False\`. 3. In the third case, the substring \\"Aa\\" has ASCII values 65 ('A') + 97 ('a') = 162. Since 162 modulo 2 equals 0, the function should return \`True\`. Additional Notes: - Remember to handle edge cases such as when the length of \`s\` is less than \`k\`. - Consider efficient ways to calculate the sum for each substring of length \`k\` to avoid excessive computations.","solution":"def is_interesting_substring(s: str, k: int) -> bool: n = len(s) if k > n: return False # Compute the sum for the first k-length substring current_sum = sum(ord(s[i]) for i in range(k)) if current_sum % k == 0: return True # Sliding window to examine every k-length substring for i in range(k, n): current_sum += ord(s[i]) - ord(s[i - k]) if current_sum % k == 0: return True return False"},{"question":"Develop a Python function that takes a list of integers and returns a new list with each element transformed according to a specific rule: if the element is even, replace it with its square; if the element is odd, replace it with its cube. Test your function with the following list of integers: [1, 2, 3, 4, 5, 6].","solution":"def transform_list(int_list): Transforms a list of integers according to the following rule: - If the element is even, replace it with its square. - If the element is odd, replace it with its cube. Args: int_list (list): List of integers. Returns: list: Transformed list of integers. return [x**2 if x % 2 == 0 else x**3 for x in int_list]"},{"question":"You are given a string consisting of numbers and lowercase alphabets. Construct an algorithm to encode this string into a compressed format. The compression should replace consecutive repeated characters with the character followed by the count of its repetitions. If a character does not repeat consecutively, it should be left as is. For instance, inputString = \\"aabcccdeff\\" Your algorithm should return: \\"a2bc3def2\\" Note that: 1. The count should only be appended if the character repeats consecutively. 2. The original order of characters should be preserved. Write a function \`compressString(s: str) -> str\` that performs this task. Your function should handle input strings of any length and should be efficient in terms of both time and space complexity.","solution":"def compressString(s: str) -> str: if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for i in range(1, len(s)): if s[i] == current_char: count += 1 else: if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) current_char = s[i] count = 1 # Handling the last set of characters if count > 1: compressed.append(f\\"{current_char}{count}\\") else: compressed.append(current_char) return ''.join(compressed)"},{"question":"Develop a function that simulates a simple bank account. Your function should allow users to deposit and withdraw money, as well as check their current balance. Additionally, the function should prevent overdrafting by ensuring that withdrawals do not exceed the account balance. Your function should be capable of handling multiple transactions in sequence. Create a set of test cases to validate your function.","solution":"class BankAccount: def __init__(self, initial_balance=0): self.balance = initial_balance def deposit(self, amount): if amount > 0: self.balance += amount return True return False def withdraw(self, amount): if 0 < amount <= self.balance: self.balance -= amount return True return False def get_balance(self): return self.balance"},{"question":"Design and implement an efficient algorithm that takes as input two strings, \`s1\` and \`s2\`, and determines whether \`s2\` is an anagram of \`s1\`. An anagram of a string is another string that contains the same characters, only the order of characters can be different. The algorithm should be optimized for both time and space complexity. Provide a clear explanation of the approach taken, including any assumptions made, and discuss the computational efficiency of the solution.","solution":"def is_anagram(s1, s2): Determines whether s2 is an anagram of s1. :param s1: First string :param s2: Second string :return: True if s2 is an anagram of s1, False otherwise # If lengths of s1 and s2 aren't the same, s2 can't be an anagram of s1 if len(s1) != len(s2): return False # Count frequencies of each character in both strings char_count_s1 = {} char_count_s2 = {} for char in s1: char_count_s1[char] = char_count_s1.get(char, 0) + 1 for char in s2: char_count_s2[char] = char_count_s2.get(char, 0) + 1 # Compare the frequency dictionaries return char_count_s1 == char_count_s2"},{"question":"Given an array of integers \`nums\`, return the length of the longest contiguous subarray that sums to a given target \`k\`. The subarray must have at least a length of 1. If no such subarray exists, return \`0\`. Example 1: Input: nums = [1, -1, 5, -2, 3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest. Example 2: Input: nums = [-2, -1, 2, 1], k = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest. Example 3: Input: nums = [1, 2, 3], k = 6 Output: 3 Explanation: The entire array sums to 6. Constraints: \`1 <= nums.length <= 104\` \`-1000 <= nums[i] <= 1000\` \`-107 <= k <= 107\` Here is a piece of erroneous code for reference: \`\`\`python def longestSubarray(nums, k): max_length = 0 for i in range(len(nums)): total = 0 for j in range(i, len(nums)): total += nums[j] if total == k: max_length = max(max_length, j - i + 1) return max_length \`\`\` This code correctly calculates the length of the subarray that sums to \`k\`, but it is not efficient for larger inputs. Modify this code to solve the problem more efficiently.","solution":"def longestSubarray(nums, k): Returns the length of the longest contiguous subarray that sums to k. If no such subarray exists, return 0. sum_map = {} # Dictionary to store (sum, index) pairs current_sum = 0 # Initialize the cumulative sum max_length = 0 # Initialize the max_length of the subarray for i, num in enumerate(nums): current_sum += num # Check if current_sum is equal to k if current_sum == k: max_length = i + 1 # Check if current_sum - k exists in the dictionary if (current_sum - k) in sum_map: max_length = max(max_length, i - sum_map[current_sum - k]) # Store current_sum[i] if it is not already in the dictionary if current_sum not in sum_map: sum_map[current_sum] = i return max_length"},{"question":"Write a function to determine if a string is a palindrome after ignoring non-alphanumeric characters and case. For example, \\"A man, a plan, a canal: Panama\\" should return \`True\` as it reads the same backward after removing spaces, punctuation, and letter casing.","solution":"def is_palindrome(s): Determine if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. Parameters: s (str): The input string to be checked. Returns: bool: True if the string is a palindrome, False otherwise. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a list of dictionaries representing sales data for a store. Each dictionary contains 'date', 'item', and 'quantity' keys. Your task is to write a Python function that takes this list of dictionaries and returns a new dictionary where each key is the item name and each value is the total quantity sold for that item. Ideally, use pandas for this task. How would you approach this problem and implement the function?","solution":"import pandas as pd def total_quantity_sold(sales_data): Returns a dictionary where each key is the item name and each value is the total quantity sold for that item. Parameters: sales_data (list of dict): Sales data where each dictionary contains 'date', 'item', and 'quantity' keys. Returns: dict: Dictionary with item names as keys and total quantity sold as values. if not sales_data: return {} # Convert the list of dictionaries to a pandas DataFrame df = pd.DataFrame(sales_data) # Group by the 'item' column and sum the 'quantity' column grouped_df = df.groupby('item')['quantity'].sum() # Convert the result to a dictionary result = grouped_df.to_dict() return result"},{"question":"Write a function that determines the maximum depth of nested parentheses within a given string. The function should return an integer representing this maximum depth. If the string is empty or contains no parentheses, the function should return 0. Additionally, ensure that the function handles unbalanced parentheses gracefully by returning -1 in such cases.","solution":"def max_depth_of_parentheses(s: str) -> int: Returns the maximum depth of nested parentheses within the given string. If the string contains unbalanced parentheses, the function returns -1. max_depth = 0 current_depth = 0 for char in s: if char == '(': current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == ')': if current_depth == 0: return -1 # Unbalanced case: more closing than opening current_depth -= 1 if current_depth != 0: return -1 # Unbalanced case: more opening than closing return max_depth"},{"question":"Write a Python function called \`sorted_squared_array\` that takes a list of integers and returns a new list containing the squares of each integer from the original list, sorted in non-decreasing order. The input list may contain both negative and positive integers. # Example \`\`\`python >>> sorted_squared_array([-4, -1, 0, 3, 10]) [0, 1, 9, 16, 100] >>> sorted_squared_array([-7, -3, 2, 3, 11]) [4, 9, 9, 49, 121] \`\`\` # Constraints - The input list can have at most 10^4 elements. - Each element in the list will be in the range [-10^4, 10^4]. # Notes - You must create a solution that is more efficient than simply squaring each element and then sorting the results. - Consider edge cases such as an empty list or a list with only one element.","solution":"def sorted_squared_array(nums): Takes a list of integers and returns a list containing the squares of each integer sorted in non-decreasing order. n = len(nums) result = [0] * n left, right = 0, n - 1 for i in range(n - 1, -1, -1): if abs(nums[left]) > abs(nums[right]): result[i] = nums[left] ** 2 left += 1 else: result[i] = nums[right] ** 2 right -= 1 return result"},{"question":"Create a function that takes a string containing both alphabets and numerals and returns a new string with all the digits sorted in ascending order, while keeping the order of the alphabets intact. The function should ignore any other characters and maintain the original position of the alphabets. Also, ensure to validate the input data type and handle any exceptions appropriately by displaying a meaningful error message. Here is an example for your reference: \`\`\`python Input: \\"a3b1c9d5\\" Output: \\"a1b3c5d9\\" Input: \\"hello12world45\\" Output: \\"hello12world45\\" Input: \\"abcd1234efgh\\" Output: \\"abcd1234efgh\\" \`\`\` Note: Provide computational complexity of your solution and explain why it fits within the allowed time constraints.","solution":"def sort_digits_in_string(s): Takes a string with alphabets and numerals and returns a new string with digits sorted in ascending order. The alphabets maintain their original order. Args: s (str): Input string containing both alphabets and numerals. Returns: str: A new string with sorted digits while alphabets remain in original order. Raises: ValueError: If the input is not a string. if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") digits = sorted([ch for ch in s if ch.isdigit()]) digit_index = 0 result = [] for ch in s: if ch.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(ch) return ''.join(result) # Computational Complexity: # Time Complexity: O(n log n) due to sorting the digits where n is the number of characters in the string. # Space Complexity: O(n) for storing the result string and digits list."},{"question":"Create a matrix class in a programming language of your choice, which supports fundamental operations including matrix addition, scalar multiplication, and matrix multiplication. Your class should implement methods for initializing a matrix, displaying the matrix, adding two matrices, multiplying a matrix by a scalar, and multiplying two matrices together. Additionally, include error handling for cases such as dimension mismatches that would make addition or multiplication invalid. Demonstrate the usage of your matrix class with examples and ensure to include comments explaining your code and the operations performed.","solution":"class Matrix: def __init__(self, data): Initializes a matrix with the given 2D list \`data\`. self.data = data self.rows = len(data) self.cols = len(data[0]) if data else 0 def __str__(self): Returns a string representation of the matrix. return \\"n\\".join([\\"t\\".join(map(str, row)) for row in self.data]) def __eq__(self, other): Checks if two matrices are equal. return self.data == other.data def add(self, other): Adds this matrix with another matrix \`other\`. Raises an error if dimensions do not match. if self.rows != other.rows or self.cols != other.cols: raise ValueError(\\"Matrix dimensions do not match for addition\\") result_data = [[self.data[i][j] + other.data[i][j] for j in range(self.cols)] for i in range(self.rows)] return Matrix(result_data) def scalar_multiply(self, scalar): Multiplies this matrix by a scalar \`scalar\`. result_data = [[self.data[i][j] * scalar for j in range(self.cols)] for i in range(self.rows)] return Matrix(result_data) def multiply(self, other): Multiplies this matrix with another matrix \`other\`. Raises an error if dimensions do not match for matrix multiplication. if self.cols != other.rows: raise ValueError(\\"Matrix dimensions do not match for multiplication\\") result_data = [[sum(self.data[i][k] * other.data[k][j] for k in range(self.cols)) for j in range(other.cols)] for i in range(self.rows)] return Matrix(result_data)"},{"question":"Given a list of students and their respective grades, write a function to categorize each student into \\"pass\\" or \\"fail\\" based on a passing grade threshold. The function should return a dictionary with the keys \\"pass\\" and \\"fail\\", where each key maps to a list of names of students who passed or failed respectively. Example Input: students = {\\"John\\": 85, \\"Jane\\": 60, \\"Doe\\": 47, \\"Anna\\": 75}, passing_grade = 50 Expected Output: {\\"pass\\": [\\"John\\", \\"Jane\\", \\"Anna\\"], \\"fail\\": [\\"Doe\\"]}","solution":"def categorize_students(students, passing_grade): Categorizes students into \\"pass\\" or \\"fail\\" based on the given passing grade threshold. Parameters: - students (dict): A dictionary where keys are student names and values are their respective grades. - passing_grade (int): The grade threshold for passing. Returns: - dict: A dictionary with keys \\"pass\\" and \\"fail\\", mapping to lists of student names. categorized = {\\"pass\\": [], \\"fail\\": []} for name, grade in students.items(): if grade >= passing_grade: categorized[\\"pass\\"].append(name) else: categorized[\\"fail\\"].append(name) return categorized"},{"question":"Trouble: I am working with datetime objects in Python and I need to write a function that calculates the number of seconds between two given datetime strings. The datetime strings are in the format \\"YYYY-MM-DD HH:MM:SS\\". Here's an example of the input datetime strings: start_datetime = \\"2023-01-01 10:00:00\\" end_datetime = \\"2023-01-01 12:30:00\\" Could you help me with a function to compute the difference in seconds between these two datetimes? A: \`\`\`python from datetime import datetime def seconds_difference(start, end): # return the solution in this function # result = seconds_difference(start_datetime, end_datetime) # BEGIN SOLUTION start_dt = datetime.strptime(start, '%Y-%m-%d %H:%M:%S') end_dt = datetime.strptime(end, '%Y-%m-%d %H:%M:%S') difference = (end_dt - start_dt).total_seconds() return difference # END SOLUTION # Example usage start_datetime = \\"2023-01-01 10:00:00\\" end_datetime = \\"2023-01-01 12:30:00\\" print(seconds_difference(start_datetime, end_datetime)) # Output should be: 9000.0 \`\`\`","solution":"from datetime import datetime def seconds_difference(start, end): Calculate the number of seconds between two datetime strings. Args: start (str): The start datetime string in the format \\"YYYY-MM-DD HH:MM:SS\\". end (str): The end datetime string in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns: float: The number of seconds between start and end. start_dt = datetime.strptime(start, '%Y-%m-%d %H:%M:%S') end_dt = datetime.strptime(end, '%Y-%m-%d %H:%M:%S') difference = (end_dt - start_dt).total_seconds() return difference"},{"question":"Design a function that calculates the maximum sum of any contiguous subarray within a given array of integers. The function should be efficient, handling arrays that could potentially contain hundreds of thousands of elements. Additionally, account for the possibility of the array containing negative numbers. Your implementation should return both the maximum sum and the subarray yielding this sum. Ensure your program handles edge cases, such as arrays with all negative numbers or empty arrays.","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray and the subarray itself. if not arr: return 0, [] max_sum = current_sum = arr[0] start = end = s = 0 for i in range(1, len(arr)): if current_sum + arr[i] > arr[i]: current_sum += arr[i] else: current_sum = arr[i] s = i if current_sum > max_sum: max_sum = current_sum start = s end = i return max_sum, arr[start:end+1]"},{"question":"Write a function to rotate a matrix 90 degrees clockwise in place. The given matrix will have the same number of rows and columns (n x n). Matrix: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] The function should modify the input matrix directly without using any additional data structures. The time complexity should be O(n^2) and the space complexity should be O(1).","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise in place. :param matrix: List of lists where each list represents a row of the n x n matrix. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Create a function that simulates a simple inventory management system. The function should track the adding and removing of items, prevent underflow (removing more items than available), and handle multiple types of items. Write a class \`Inventory\` with the following methods: 1. \`add_item(item: str, quantity: int)\`: Adds a specified quantity of an item to the inventory. The item is represented by a string, and the quantity is an integer. If the item already exists in the inventory, increment its quantity; otherwise, add the item with the specified quantity. 2. \`remove_item(item: str, quantity: int) -> bool\`: Removes a specified quantity of an item from the inventory. The item is represented by a string, and the quantity is an integer. If the item doesn't exist or the quantity to be removed is greater than the available quantity, return \`False\`; otherwise, decrement its quantity and return \`True\`. 3. \`check_inventory(item: str) -> int\`: Returns the current quantity of the specified item. If the item doesn't exist, return 0. **Constraints:** - The item names are case-sensitive strings. - The quantities are non-negative integers. **Example:** \`\`\`python class Inventory: def __init__(self): self.items = {} def add_item(self, item: str, quantity: int): if item in self.items: self.items[item] += quantity else: self.items[item] = quantity def remove_item(self, item: str, quantity: int) -> bool: if item in self.items and self.items[item] >= quantity: self.items[item] -= quantity if self.items[item] == 0: del self.items[item] return True return False def check_inventory(self, item: str) -> int: return self.items.get(item, 0) # Example usage inventory = Inventory() inventory.add_item(\\"apple\\", 10) inventory.add_item(\\"banana\\", 5) print(inventory.check_inventory(\\"apple\\")) # Output: 10 print(inventory.remove_item(\\"apple\\", 3)) # Output: True print(inventory.check_inventory(\\"apple\\")) # Output: 7 print(inventory.remove_item(\\"apple\\", 8)) # Output: False print(inventory.check_inventory(\\"apple\\")) # Output: 7 \`\`\` Extend the implementation to handle these scenarios and verify the robustness of your solution through various test cases.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item: str, quantity: int): if item in self.items: self.items[item] += quantity else: self.items[item] = quantity def remove_item(self, item: str, quantity: int) -> bool: if item in self.items and self.items[item] >= quantity: self.items[item] -= quantity if self.items[item] == 0: del self.items[item] return True return False def check_inventory(self, item: str) -> int: return self.items.get(item, 0)"},{"question":"Implement a function called \`matrix_diagonal_sum\` that takes a square matrix (a list of lists) as input and returns the sum of the elements on its main diagonal. Additionally, analyze the algorithm you used and provide the time complexity. Now, modify your function to return the sum of both the main diagonal and the secondary diagonal. Consider edge cases such as small matrices (e.g., 1x1) and large matrices (e.g., 1000x1000).","solution":"def matrix_diagonal_sum(matrix): Returns the sum of the elements on the main and secondary diagonals of a square matrix. n = len(matrix) main_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): main_diagonal_sum += matrix[i][i] secondary_diagonal_sum += matrix[i][n - 1 - i] return main_diagonal_sum + secondary_diagonal_sum"},{"question":"Given an integer n, write a function that returns the sum of all prime numbers less than or equal to n. Provide an efficient solution and highlight any potential pitfalls in a naive approach. \`\`\`python def sum_primes(n): if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n + 1, start): sieve[i] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime) # Potential Pitfall with Naive Approach: # The naive approach checks each number from 2 to n individually for primality, which can result in a time complexity of O(n*sqrt(n)). # An efficient approach like the Sieve of Eratosthenes has a better time complexity of O(n log log n). \`\`\`","solution":"def sum_primes(n): if n < 2: return 0 sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for i in range(start * start, n + 1, start): sieve[i] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a Python function \`rotate_list\` that takes a list of integers \`nums\` and an integer \`k\`, and returns the list after rotating it to the right by \`k\` steps. The rotation should be done in-place with O(1) extra space complexity. For example: \`\`\`python rotate_list([1, 2, 3, 4, 5, 6, 7], 3) => [5, 6, 7, 1, 2, 3, 4] rotate_list([-1, -100, 3, 99], 2) => [3, 99, -1, -100] \`\`\` Constraints: - The function should handle edge cases such as empty lists and when \`k\` is larger than the length of the list. - The function should not use any additional data structures like sets or lists.","solution":"def rotate_list(nums, k): Rotates the elements of the list 'nums' in place to the right by 'k' steps. :param nums: List of integers. :param k: Number of steps to rotate the list. n = len(nums) if n == 0: return nums k = k % n # In case k is larger than the length of the list # Reverse the entire list reverse(nums, 0, n - 1) # Reverse the first k elements reverse(nums, 0, k - 1) # Reverse the remaining elements reverse(nums, k, n - 1) return nums def reverse(nums, start, end): Reverses the elements of the list 'nums' from index 'start' to 'end' in place. :param nums: List of integers. :param start: Starting index of the segment to reverse. :param end: Ending index of the segment to reverse. while start < end: nums[start], nums[end] = nums[end], nums[start] start += 1 end -= 1"},{"question":"Create a Python program that simulates a simplified game of Minesweeper. The game should allow the user to input the size of the grid and the number of mines to be placed randomly on the grid. The program should then display the grid to the user, allowing them to select cells to \\"reveal\\" or mark as containing a mine. If a mine is revealed, the game ends with a loss message; if the user successfully marks all mines and reveals all other cells, the game ends with a win message. Implement appropriate boundary checking and user input validation to ensure smooth gameplay.","solution":"import random class Minesweeper: def __init__(self, size, mines): self.size = size self.mines = mines self.grid = [[' ' for _ in range(size)] for _ in range(size)] self.revealed = [[False for _ in range(size)] for _ in range(size)] self.marked = [[False for _ in range(size)] for _ in range(size)] self.mine_positions = set() self.generate_mines() self.compute_adjacency() def generate_mines(self): while len(self.mine_positions) < self.mines: row = random.randint(0, self.size - 1) col = random.randint(0, self.size - 1) self.mine_positions.add((row, col)) self.grid[row][col] = 'M' def compute_adjacency(self): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for row in range(self.size): for col in range(self.size): if self.grid[row][col] != 'M': mine_count = 0 for d in directions: new_row, new_col = row + d[0], col + d[1] if 0 <= new_row < self.size and 0 <= new_col < self.size and self.grid[new_row][new_col] == 'M': mine_count += 1 self.grid[row][col] = str(mine_count) if mine_count > 0 else ' ' def reveal(self, row, col): if self.marked[row][col]: return if self.grid[row][col] == 'M': return 'Game Over! You hit a mine.' if self.revealed[row][col]: return self.revealed[row][col] = True self.flood_fill(row, col) if self.check_win(): return 'Congratulations! You win.' return self.display_grid() def flood_fill(self, row, col): if self.grid[row][col] != ' ': return directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] self.revealed[row][col] = True for d in directions: new_row, new_col = row + d[0], col + d[1] if 0 <= new_row < self.size and 0 <= new_col < self.size and not self.revealed[new_row][new_col]: self.reveal(new_row, new_col) def mark_mine(self, row, col): self.marked[row][col] = not self.marked[row][col] def check_win(self): for row, col in self.mine_positions: if not self.marked[row][col]: return False return True def display_grid(self): disp_grid = [[' ' for _ in range(self.size)] for _ in range(self.size)] for row in range(self.size): for col in range(self.size): if self.revealed[row][col]: disp_grid[row][col] = self.grid[row][col] elif self.marked[row][col]: disp_grid[row][col] = 'F' else: disp_grid[row][col] = '*' return disp_grid # Example usage # game = Minesweeper(5, 5) # print(game.display_grid()) # print(game.reveal(0, 0)) # game.mark_mine(1, 1) # print(game.reveal(2, 2))"},{"question":"Write a Python function that accepts a list of tuples containing two elements each: a student’s name and their grade (an integer between 0 and 100). The function should return a dictionary where each key is a grade category ('A', 'B', 'C', 'D', 'F') and each value is a list of students’ names who fall into that grade category. Use the following grading scale: 'A' for grades 90 and above, 'B' for grades 80-89, 'C' for grades 70-79, 'D' for grades 60-69, and 'F' for grades below 60. Ensure the function handles edge cases such as an empty list or invalid grades gracefully.","solution":"def categorize_grades(students): Categorizes students into grade categories based on their grades. Parameters: students (list of tuples): A list where each tuple contains a student's name and their grade (0-100). Returns: dict: A dictionary with grade categories ('A', 'B', 'C', 'D', 'F') as keys and lists of student names as values. grade_categories = { 'A': [], 'B': [], 'C': [], 'D': [], 'F': [] } for name, grade in students: if not isinstance(grade, int) or not 0 <= grade <= 100: continue # Skip invalid grades if grade >= 90: grade_categories['A'].append(name) elif grade >= 80: grade_categories['B'].append(name) elif grade >= 70: grade_categories['C'].append(name) elif grade >= 60: grade_categories['D'].append(name) else: grade_categories['F'].append(name) return grade_categories"},{"question":"You are given a string containing a mix of alphabetical characters and digits. Write a function that processes this string to separate out the digits and alphabetical characters. The function should then return a new string where all the digits are positioned at the front in ascending order, followed by the alphabetical characters in descending order. The function should handle both uppercase and lowercase letters, treating them the same for ordering purposes but retaining their original case in the output. Input: \\"a3B1c2A\\" Output: \\"123cBaA\\"","solution":"def process_string(s): digits = sorted(char for char in s if char.isdigit()) letters = sorted((char for char in s if char.isalpha()), key=lambda x: x.lower(), reverse=True) return ''.join(digits + letters)"},{"question":"Compose a Python function that checks if a given list of integers contains two distinct elements that sum up to a specified target value. The function should return True if such a pair exists, and False otherwise.","solution":"def has_pair_with_sum(nums, target): Checks if there are two distinct elements in the list that sum up to the target value. seen_elements = set() for num in nums: complement = target - num if complement in seen_elements: return True seen_elements.add(num) return False"},{"question":"You have a list of strings, each string representing a pipeline of data transformations. The strings are composed of transformation names separated by arrows ('->'). Write a Python function that identifies the most frequent transformation that appears as the last step in the pipelines. For example, given the following list of pipelines: \`\`\`python pipelines = [ \\"extract -> clean -> transform -> load\\", \\"extract -> transform -> load\\", \\"extract -> clean -> analyze\\", \\"extract -> clean -> transform -> analyze\\", \\"load -> clean -> transform -> load\\" ] \`\`\` The function should return \`\\"load\\"\` because it is the most frequent final transformation. If there is a tie, return any one of the most frequent transformations. Your function should have the following signature: \`\`\`python def most_frequent_final_transformation(pipelines: list) -> str: pass \`\`\` Complete the function and demonstrate how it works with the given list of pipelines.","solution":"def most_frequent_final_transformation(pipelines: list) -> str: Identifies the most frequent transformation that appears as the last step in the pipelines. from collections import Counter last_steps = [pipeline.split('->')[-1].strip() for pipeline in pipelines] most_common = Counter(last_steps).most_common(1) return most_common[0][0] if most_common else None # Example usage: pipelines = [ \\"extract -> clean -> transform -> load\\", \\"extract -> transform -> load\\", \\"extract -> clean -> analyze\\", \\"extract -> clean -> transform -> analyze\\", \\"load -> clean -> transform -> load\\" ] print(most_frequent_final_transformation(pipelines)) # Output should be \\"load\\""},{"question":"Write a Python function that accepts a list of integers and returns a new list with the cube of each even number from the original list, while leaving the odd numbers unchanged. The function should preserve the order of the original list. If the input list is empty, the function should return an empty list.","solution":"def modify_list(lst): Takes a list of integers and returns a new list with the cube of each even number, while leaving the odd numbers unchanged. return [x**3 if x % 2 == 0 else x for x in lst]"},{"question":"Given a list of product reviews, your task is to generate a summary report of products mentioned in the reviews, including the average rating and the number of times each product was mentioned. Each review is composed of a \`userName\`, \`productName\`, \`rating\`, and \`reviewText\`. The report should be in the format of a list of lists, where the first row is a header [\\"Product\\", \\"Average Rating\\", \\"Mentions\\"], and each subsequent row contains the product name, the average rating (rounded to the nearest tenth), and the number of mentions. The rows should be sorted by the product names in alphabetical order. Example 1: Input: reviews = [[\\"Alice\\", \\"Air Fryer\\", 4, \\"This air fryer is amazing!\\"], [\\"Bob\\", \\"Blender\\", 5, \\"The best blender I've ever used.\\"], [\\"Alice\\", \\"Blender\\", 4, \\"Makes great smoothies.\\"], [\\"David\\", \\"Air Fryer\\", 5, \\"I use it every day.\\"], [\\"Eve\\", \\"Coffee Maker\\", 3, \\"Good for the price.\\"]] Output: [[\\"Product\\", \\"Average Rating\\", \\"Mentions\\"], [\\"Air Fryer\\", 4.5, 2], [\\"Blender\\", 4.5, 2], [\\"Coffee Maker\\", 3.0, 1]] Explanation: The summary report is as follows: Product , Average Rating, Mentions Air Fryer , 4.5 , 2 Blender , 4.5 , 2 Coffee Maker, 3.0 , 1 Constraints: 1. \`1 <= reviews.length <= 10^4\` 2. \`reviews[i].length == 4\` 3. \`1 <= userName.length, productName.length, reviewText.length <= 50\` 4. \`userName\`, \`productName\`, and \`reviewText\` consist of lowercase and uppercase English letters and the space character. 5. \`rating\` is an integer between \`1\` and \`5\`.","solution":"from collections import defaultdict def generate_summary_report(reviews): Generates a summary report of products from the reviews. :param reviews: List of reviews, each a list in the format [userName, productName, rating, reviewText] :return: Summary report as a list of lists in the format [[\\"Product\\", \\"Average Rating\\", \\"Mentions\\"], ...] product_ratings = defaultdict(list) for _, productName, rating, _ in reviews: product_ratings[productName].append(rating) summary = [[\\"Product\\", \\"Average Rating\\", \\"Mentions\\"]] for product in sorted(product_ratings): ratings = product_ratings[product] average_rating = round(sum(ratings) / len(ratings), 1) mentions = len(ratings) summary.append([product, average_rating, mentions]) return summary"},{"question":"Write a function in Python that takes in a string consisting of a series of mathematical expressions separated by semicolons, evaluates each expression, and returns a list of the results. Each expression can include the standard arithmetic operators (+, -, *, /) and assume the presence of integer numbers only. For example, if the input string is \\"2+2; 3*5; 10/2; 7-3\\", the function should return [4, 15, 5.0, 4]. Ensure your function handles invalid expressions gracefully by skipping and logging them, and only includes valid results in the output list. Additionally, implement error handling for cases where the expressions include unsupported operations or erroneous syntax, and make sure to run basic tests to confirm the correctness of your implementation.","solution":"def evaluate_expressions(expression_string): Evaluates each mathematical expression in a string separated by semicolons. Parameters: - expression_string (str): The string containing expressions separated by semicolons. Returns: - List of results of evaluated expressions (only valid results). results = [] expressions = expression_string.split(';') for expression in expressions: expression = expression.strip() try: # Evaluating the expression using eval result = eval(expression) results.append(result) except Exception as e: # Skips the invalid expression print(f\\"Skipping invalid expression: '{expression}' ({e})\\") return results"},{"question":"Write a function that, given a rectangular matrix of integers, returns the smallest value in each row as a list. The matrix will be non-empty, and each row will contain at least one integer. Implement this function in Python, ensuring that it performs efficiently even for large matrices. Function Signature: \`def smallest_in_rows(matrix: List[List[int]]) -> List[int]:\` **Sample Input:** \`\`\`python matrix = [ [3, 5, 2, 4], [1, 6, 9, 8], [7, 3, 4, 2] ] \`\`\` **Sample Output:** \`\`\`python [2, 1, 2] \`\`\` In this example, the smallest number in the first row is 2, in the second row is 1, and in the third row is 2. Hence, the function should return [2, 1, 2].","solution":"from typing import List def smallest_in_rows(matrix: List[List[int]]) -> List[int]: Returns a list of the smallest values in each row of the matrix. return [min(row) for row in matrix]"},{"question":"Write a function in Python that takes as input a dictionary where keys are names (strings) and values are lists of integers representing scores. The function should return a new dictionary with the same keys, but with the values being the average score for each name, rounded to two decimal places. For example, given the input: \`\`\` students_scores = { \\"Alice\\": [88, 76, 92, 85], \\"Bob\\": [67, 80, 78, 72], \\"Charlie\\": [95, 90, 85, 87] } \`\`\` The function should return: \`\`\` { \\"Alice\\": 85.25, \\"Bob\\": 74.25, \\"Charlie\\": 89.25 } \`\`\` Provide the implementation of the function along with a brief explanation of its logic.","solution":"def average_scores(students_scores): Takes a dictionary with names as keys and lists of scores as values. Returns a new dictionary with names as keys and average scores rounded to two decimal places as values. averages = {} for name, scores in students_scores.items(): average_score = sum(scores) / len(scores) if scores else 0 averages[name] = round(average_score, 2) return averages"},{"question":"Write a function that takes an integer array and an integer \`k\`, and returns the maximum sum of \`k\` consecutive elements in the array. **Function Signature:** \`\`\`python def max_consecutive_sum(arr: List[int], k: int) -> int: \`\`\` **Input:** - \`arr\` (List[int]): A list of integers representing the array. - \`k\` (int): The number of consecutive elements to consider for the sum. **Output:** - An integer representing the maximum sum of \`k\` consecutive elements. **Examples:** 1. \`max_consecutive_sum([1, 2, 5, 2, 8, 1, 5], 2)\` should return \`10\` (5+2=10, 2+8=10, and 8+1=9). 2. \`max_consecutive_sum([4, 2, 1, 6, 2], 3)\` should return \`9\` (4+2+1=7, 2+1+6=9, and 1+6+2=9).","solution":"from typing import List def max_consecutive_sum(arr: List[int], k: int) -> int: # Edge cases: if k is greater than the length of the array or k is less than 1 if not arr or k > len(arr) or k < 1: return 0 max_sum = current_sum = sum(arr[:k]) for i in range(k, len(arr)): current_sum = current_sum + arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Implement a function that accepts an array of integers and an integer k. The function should return the k most frequent elements in the array. If there are multiple elements with the same frequency, the function should prioritize the elements with the larger values. For example, given the input array [1, 1, 1, 2, 2, 3] and k = 2, the function should return [1, 2]. Remember to optimize your solution for larger datasets.","solution":"from collections import Counter def top_k_frequent(nums, k): Returns the k most frequent elements in the array \`nums\`. If there are multiple elements with the same frequency, it prioritizes the elements with the larger values. :param nums: List of integers. :param k: Integer, number of top frequent elements to return. :return: List of k most frequent elements. if not nums: return [] # Count the frequency of each element in the list count = Counter(nums) # Create a sorted list of the elements by frequency, and then by number (descending) sorted_elements = sorted(count.items(), key=lambda x: (-x[1], -x[0])) # Extract the top k elements top_k = [element for element, frequency in sorted_elements[:k]] return top_k"},{"question":"Write a Python function that takes two lists of integers and returns a dictionary with four keys: 'unique_in_list1', 'unique_in_list2', 'common_elements', and 'combined_sorted'. Each key should have corresponding values being lists of integers that are respectively unique to the first list, unique to the second list, common to both lists, and the combined list of integers from both lists but sorted in ascending order. list1 = [1, 2, 3, 5, 7] list2 = [3, 4, 5, 6]","solution":"def analyze_lists(list1, list2): Takes two lists of integers and returns a dictionary with four keys: 'unique_in_list1', 'unique_in_list2', 'common_elements', and 'combined_sorted'. Parameters: list1 (list): The first list of integers. list2 (list): The second list of integers. Returns: dict: A dictionary with the analysis of the lists. set1 = set(list1) set2 = set(list2) unique_in_list1 = sorted(list(set1 - set2)) unique_in_list2 = sorted(list(set2 - set1)) common_elements = sorted(list(set1 & set2)) combined_sorted = sorted(list1 + list2) return { 'unique_in_list1': unique_in_list1, 'unique_in_list2': unique_in_list2, 'common_elements': common_elements, 'combined_sorted': combined_sorted }"},{"question":"Write a function called \`find_largest_product\` that takes a string of digits and an integer \`k\` as input. The function should compute the largest product of \`k\` consecutive digits within the string. If the string contains non-digit characters, the function should raise a \`ValueError\` exception. The input string will have a length of at least \`k\`. # Function Signature \`\`\`python def find_largest_product(digits: str, k: int) -> int: pass \`\`\` # Input - \`digits\` (str): A string consisting of digit characters (0-9), with possible non-digit characters. - \`k\` (int): The number of consecutive digits to consider for the product. # Output - (int): The largest product of \`k\` consecutive digits within the string. # Constraints - The length of \`digits\` will always be at least \`k\`. # Example \`\`\`python find_largest_product(\\"123456789\\", 2) # Output: 72 (9 * 8) find_largest_product(\\"12304a5678\\", 3) # Output should raise an error: ValueError \`\`\` # Notes 1. Ensure that the function validates the input string to only contain digit characters. 2. Use efficient algorithms to handle the problem within reasonable time complexity bounds. 3. Handle edge cases such as very large input sizes gracefully.","solution":"def find_largest_product(digits: str, k: int) -> int: Finds the largest product of k consecutive digits in the string. If the string contains non-digit characters, raises ValueError. # Validate input containing only digits if not digits.isdigit(): raise ValueError(\\"Input string contains non-digit characters.\\") max_product = 0 length = len(digits) for i in range(length - k + 1): # Compute product of the k consecutive digits product = 1 for j in range(k): product *= int(digits[i + j]) # Update max product if the current one is greater if product > max_product: max_product = product return max_product"},{"question":"Write a function that takes a string and returns the count of each unique character in the string, ignoring case. The result should be a dictionary where the keys are the characters and the values are their respective counts. \\"Programming\\" -> {'p': 1, 'r': 2, 'o': 1, 'g': 2, 'a': 1, 'm': 2, 'i': 1, 'n': 1}","solution":"def count_unique_characters(s): Returns a dictionary with the count of each unique character in the string, ignoring case. :param s: Input string :type s: str :return: Dictionary of character counts :rtype: dict s = s.lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Design a Python class named \`InventoryManager\` that simulates the inventory management system of a small retail store. This class should include methods to add new items, remove existing ones, and view the current inventory. Each item has the properties \`name\`, \`quantity\`, and \`price\`. Furthermore, implement a method to calculate the total value of the inventory. Provide an example demonstrating the creation of the \`InventoryManager\` object, adding items, removing an item, and getting the total inventory value.","solution":"class InventoryManager: def __init__(self): self.inventory = {} def add_item(self, name, quantity, price): if name in self.inventory: self.inventory[name][\\"quantity\\"] += quantity else: self.inventory[name] = {\\"quantity\\": quantity, \\"price\\": price} def remove_item(self, name): if name in self.inventory: del self.inventory[name] def view_inventory(self): return self.inventory def total_inventory_value(self): total_value = 0 for item in self.inventory.values(): total_value += item[\\"quantity\\"] * item[\\"price\\"] return total_value # Example usage: # Create InventoryManager object inv_manager = InventoryManager() # Add items inv_manager.add_item(\\"apple\\", 10, 0.5) inv_manager.add_item(\\"orange\\", 20, 0.75) # Remove an item inv_manager.remove_item(\\"apple\\") # Get total inventory value print(inv_manager.total_inventory_value()) # Output: 15.00"},{"question":"Write a function that takes a list of integers and sorts it such that all the negative numbers come before any positive numbers, while preserving their relative order. This should be done in-place without using extra space for another list. Additionally, write a helper function that verifies if the list is sorted in the required order. Also, provide sample inputs and outputs. Example: Input: [3, -2, -5, 7, 9, -1, 4] Output: [-2, -5, -1, 3, 7, 9, 4]","solution":"def sort_negatives_first(nums): Sorts a list such that all negative numbers come before positive numbers while maintaining their relative order. Args: nums: List of integers Returns: None: The list is modified in place. if not nums: return # Stable partition in-place using O(1) extra space n = len(nums) i = 0 # Start from the beginning for j in range(n): if nums[j] < 0: nums.insert(i, nums.pop(j)) i += 1 def is_sorted_negatives_first(nums): Helper function to verify if the list is sorted such that all negative numbers come before positive numbers while preserving their relative order. Args: nums: List of integers Returns: bool: True if the list is sorted as required, False otherwise. found_positive = False for num in nums: if num >= 0: found_positive = True elif found_positive: return False return True"},{"question":"Design a function that simulates the behavior of a vending machine. The vending machine should be able to dispense items based on user selection, accept different denominations of money, and provide change when necessary. The input will be a list of commands, where each command is either an item selection or an inserted money. The function should process each command and return the final state, including the list of items dispensed and any remaining money. Implement the function as described: from typing import List, Tuple def vending_machine(commands: List[str], items: dict, prices: dict) -> Tuple[List[str], int]: Simulate a vending machine that dispenses items based on commands. # your code here # Example of items and their prices: # items = {\\"A1\\": \\"Soda\\", \\"B1\\": \\"Chips\\", \\"C1\\": \\"Candy\\"} # prices = {\\"A1\\": 100, \\"B1\\": 50, \\"C1\\": 25} # Test your function with the following: # vending_machine([\\"insert 100\\", \\"select A1\\"], {\\"A1\\": \\"Soda\\", \\"B1\\": \\"Chips\\", \\"C1\\": \\"Candy\\"}, {\\"A1\\": 100, \\"B1\\": 50, \\"C1\\": 25}) #-> ([\\"Soda\\"], 0) # vending_machine([\\"insert 100\\", \\"select B1\\", \\"select C1\\"], {\\"A1\\": \\"Soda\\", \\"B1\\": \\"Chips\\", \\"C1\\": \\"Candy\\"}, {\\"A1\\": 100, \\"B1\\": 50, \\"C1\\": 25}) #-> ([\\"Chips\\", \\"Candy\\"], 25) # vending_machine([\\"insert 50\\", \\"insert 50\\", \\"select C1\\"], {\\"A1\\": \\"Soda\\", \\"B1\\": \\"Chips\\", \\"C1\\": \\"Candy\\"}, {\\"A1\\": 100, \\"B1\\": 50, \\"C1\\": 25}) #-> ([\\"Candy\\"], 75)","solution":"from typing import List, Tuple def vending_machine(commands: List[str], items: dict, prices: dict) -> Tuple[List[str], int]: dispensed_items = [] balance = 0 for command in commands: if command.startswith(\\"insert\\"): _, amount_str = command.split() balance += int(amount_str) elif command.startswith(\\"select\\"): _, item_code = command.split() if item_code in items and balance >= prices[item_code]: balance -= prices[item_code] dispensed_items.append(items[item_code]) return (dispensed_items, balance)"},{"question":"Write a function in Python that takes a list of strings and returns a dictionary with the strings as keys and their lengths as the values. Additionally, filter out any strings that contain the substring \\"xyz\\". Use the list provided below: words = [\\"apple\\", \\"xyzbanana\\", \\"cherry\\", \\"xyz\\", \\"blueberry\\"]","solution":"def filter_and_map(strings): Returns a dictionary with strings as keys and their lengths as values, omitting any strings that contain the substring \\"xyz\\". return {s: len(s) for s in strings if 'xyz' not in s}"},{"question":"Design an algorithm that takes an input string representing a mathematical expression and evaluates it. The expression will consist of non-negative integers and the binary operators +, -, *, and / (integer division). Given the nature of mathematical operations, ensure the correct order of precedence is respected and parentheses are properly handled. Implement the function: \`\`\`python def evaluate_expression(expression: str) -> int: # Your code here pass \`\`\` **Requirements:** - Ensure the function handles parentheses \`()\` correctly, reflecting their higher precedence over other operators. - Handle multiple nested parentheses. - Perform the operations \`*\` and \`/\` before \`+\` and \`-\` when no parentheses dictate another order. - You can assume the expression is valid and contains only integers and the operators mentioned. **Examples:** 1. Given \`\\"3 + 6 * (5 + 4) / 3 - 7\\"\`, the function should return \`14\`. 2. Given \`\\"10 + 2 * 6\\"\`, the function should return \`22\`. 3. Given \`\\"100 * 2 + 12\\"\`, the function should return \`212\`. 4. Given \`\\"100 * ( 2 + 12 ) / 14\\"\`, the function should return \`100\`. Explain your approach for parsing and evaluating the expression string, ensuring correctness in all edge cases.","solution":"def evaluate_expression(expression: str) -> int: def helper(tokens): stack = [] num = 0 sign = '+' while tokens: token = tokens.pop(0) if token.isdigit(): num = int(token) if token == '(': num = helper(tokens) if token in '+-*/' or not tokens or token == ')': if sign == '+': stack.append(num) elif sign == '-': stack.append(-num) elif sign == '*': stack.append(stack.pop() * num) elif sign == '/': stack.append(int(stack.pop() / num)) num = 0 if token == ')': break sign = token return sum(stack) tokens = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = '' while i < len(expression) and expression[i].isdigit(): num += expression[i] i += 1 tokens.append(num) elif expression[i] in '+-*/()': tokens.append(expression[i]) i += 1 else: i += 1 return helper(tokens)"},{"question":"Implement a spell checker in Python. The spell checker should take a dictionary of correctly spelled words and a sentence as inputs. It should identify the words in the sentence that are not in the dictionary and suggest corrections. If there is more than one possible correction, it should return the one that has the smallest edit distance with the misspelled word. Use the Levenshtein distance algorithm to calculate the edit distances. Additionally, calculate the time complexity of your spell checker and discuss any potential optimizations.","solution":"import numpy as np def levenshtein_distance(str1, str2): Returns the Levenshtein distance between str1 and str2. n, m = len(str1), len(str2) if n > m: str1, str2 = str2, str1 n, m = m, n current_row = range(n + 1) for i in range(1, m + 1): previous_row, current_row = current_row, [i] + [0] * n for j in range(1, n + 1): add, delete, change = previous_row[j] + 1, current_row[j - 1] + 1, previous_row[j - 1] if str1[j - 1] != str2[i - 1]: change += 1 current_row[j] = min(add, delete, change) return current_row[n] def spell_checker(dictionary, sentence): Identifies misspelled words in the sentence and suggests corrections. suggestions = {} words = sentence.split() for word in words: if word not in dictionary: closest_word = min(dictionary, key=lambda dict_word: levenshtein_distance(word, dict_word)) suggestions[word] = closest_word return suggestions"},{"question":"Implement a function that takes a string containing digits and returns the number of possible ways to decode it, based on the mapping 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. For example, the string \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). Write a Python function that takes such a string as input and outputs the total number of valid decodings. **Function Signature:** \`def num_decodings(s: str) -> int:\` **Input:** - \`s\` (str): A string composed of digits. **Output:** - An integer representing the number of ways to decode the input string. **Constraints:** - The input string will not be empty and will only contain numeric digits. **Example:** \`\`\`python assert num_decodings(\\"12\\") == 2 assert num_decodings(\\"226\\") == 3 assert num_decodings(\\"0\\") == 0 assert num_decodings(\\"10\\") == 1 \`\`\`","solution":"def num_decodings(s: str) -> int: Returns the number of possible ways to decode the input string. if not s or s[0] == '0': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): if s[i-1] != '0': dp[i] += dp[i-1] two_digit = int(s[i-2:i]) if 10 <= two_digit <= 26: dp[i] += dp[i-2] return dp[n]"},{"question":"Write a Python function that, given a list of words, returns the words that can be typed using letters of the alphabet on only one row of a QWERTY keyboard. The function should consider that the letters are not case-sensitive. Here is the list of letters for each row on a QWERTY keyboard: - Row 1: \\"qwertyuiop\\" - Row 2: \\"asdfghjkl\\" - Row 3: \\"zxcvbnm\\" For example, given the list \`[\\"Hello\\", \\"Alaska\\", \\"Dad\\", \\"Peace\\"]\`, the function should return \`[\\"Alaska\\", \\"Dad\\"]\` since these words can be typed using letters from only one row. The solution should make use of Python's set data structure to efficiently determine whether a word can be typed using letters from only one row.","solution":"def find_words(words): Given a list of words, return the words that can be typed using letters of the alphabet on only one row of a QWERTY keyboard. rows = [ set(\\"qwertyuiop\\"), set(\\"asdfghjkl\\"), set(\\"zxcvbnm\\") ] def can_be_typed_on_one_row(word): lowercase_word = word.lower() for row in rows: if set(lowercase_word).issubset(row): return True return False return [word for word in words if can_be_typed_on_one_row(word)]"},{"question":"The challenge is to develop a function that computes the recently added names within a span of n days from a list of name records. Each name record contains a name and the date it was added. The function should return a list of names added within the last n days from the current date. Implement the function \`recently_added_names(records, days)\` which takes two arguments: 1. \`records\` - a list of tuples where each tuple consists of a name (string) and a date (string in the format 'YYYY-MM-DD'). 2. \`days\` - an integer representing the number of days to look back. The function should return a list of names that were added within the last \`days\` days from the current date. The names in the returned list should be in the same order they appear in the input list. You can assume that the current date can be fetched using \`datetime.date.today()\`. The function should handle edge cases where there are no records, the date format is incorrect, or the \`days\` parameter is zero or negative. **Example:** \`\`\`python from datetime import datetime, timedelta def recently_added_names(records, days): Returns a list of names added within the last n days from today's date Args: records (list of tuples): A list of tuples, where each tuple contains a name (string) and a date (string in 'YYYY-MM-DD' format). days (int): An integer representing the number of days to look back from today. Returns: list: A list of names (strings) added within the last n days. Examples: recently_added_names([('Alice', '2023-09-20'), ('Bob', '2023-10-01'), ('Charlie', '2023-10-10')], 10) returns ['Bob', 'Charlie'] # assuming today's date is 2023-10-10 recently_added_names([('Alice', '2023-09-20'), ('Bob', '2023-10-01')], 0) returns [] # No names since days is zero today = datetime.today().date() result = [] for name, date_str in records: try: date = datetime.strptime(date_str, '%Y-%m-%d').date() except ValueError: continue if today - timedelta(days=days) <= date <= today: result.append(name) return result \`\`\`","solution":"from datetime import datetime, timedelta def recently_added_names(records, days): Returns a list of names added within the last n days from today's date Args: records (list of tuples): A list of tuples, where each tuple contains a name (string) and a date (string in 'YYYY-MM-DD' format). days (int): An integer representing the number of days to look back from today. Returns: list: A list of names (strings) added within the last n days. today = datetime.today().date() result = [] cutoff_date = today - timedelta(days=days) for name, date_str in records: try: date = datetime.strptime(date_str, '%Y-%m-%d').date() except ValueError: continue if cutoff_date <= date <= today: result.append(name) return result"},{"question":"Write a function \`rotate_list\` that takes as its input a list of integers \`lst\` and a positive integer \`k\`, and returns a new list that is the result of rotating \`lst\` to the right by \`k\` positions. If \`k\` is greater than the length of the list, the list should be rotated \`k % len(lst)\` times instead. For example: - \`rotate_list([1, 2, 3, 4, 5], 2)\` should return \`[4, 5, 1, 2, 3]\` - \`rotate_list([1, 2, 3, 4, 5], 7)\` should return \`[4, 5, 1, 2, 3]\` because 7 % 5 is 2 You may assume that the input list will not be empty and that \`k\` will be a positive integer.","solution":"def rotate_list(lst, k): Rotates the list lst to the right by k positions. Parameters: lst (list): A list of integers. k (int): A positive integer indicating the number of positions to rotate. Returns: list: A new list that has been rotated. n = len(lst) k = k % n # Normalize k to avoid unnecessary full rotations return lst[-k:] + lst[:-k]"},{"question":"Given a list of strings, your task is to group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Each group of anagrams should be represented as a list of strings, and the result should be a list of these lists. For instance, consider these examples: Example 1: Given Input: strs = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Expected Output: [[\\"eat\\",\\"tea\\",\\"ate\\"], [\\"tan\\",\\"nat\\"], [\\"bat\\"]] Example 2: Given Input: strs = [\\"\\"] Expected Output: [[\\"\\"]] Example 3: Given Input: strs = [\\"a\\"] Expected Output: [[\\"a\\"]] Please note the constraints: All inputs are strings arranged in a list, and the length of each string falls within the range \`[1, 100]\`. Each string contains lowercase English letters.","solution":"from collections import defaultdict def group_anagrams(strs): Groups the given list of strings into anagram groups. Each group contains words that are anagrams of each other. Parameters: strs (list of str): The list of words to be grouped. Returns: list of list of str: List of groups, each containing anagrams. anagram_map = defaultdict(list) for s in strs: sorted_s = \\"\\".join(sorted(s)) anagram_map[sorted_s].append(s) return list(anagram_map.values())"},{"question":"Given a list of student records, each containing the student's name, age, and scores in three subjects (Math, Science, and English), write a function that calculates and returns the name of the student with the highest average score across the three subjects. If there are multiple students with the same highest average score, return the name of the student who comes first alphabetically. Function signature: \`def top_student(records: List[Dict[str, Union[str, int, List[int]]]]) -> str:\` # Input - \`records\`: A list of dictionaries, each dictionary representing a student's record. Each record contains: - 'name': a string representing the student's name - 'age': an integer representing the student's age - 'scores': a list of three integers representing the student's scores in Math, Science, and English # Output - Return the name of the student with the highest average score. In case of a tie, return the lexicographically first name. # Example \`\`\`python records = [ {'name': 'Alice', 'age': 17, 'scores': [88, 92, 85]}, {'name': 'Bob', 'age': 18, 'scores': [90, 91, 89]}, {'name': 'Charlie', 'age': 17, 'scores': [88, 92, 85]} ] print(top_student(records)) # Output: 'Bob' \`\`\` # Constraints - All student names are unique. - The list of student records is not empty. - Each score is between 0 and 100 (inclusive).","solution":"from typing import List, Dict, Union def top_student(records: List[Dict[str, Union[str, int, List[int]]]]) -> str: Return the name of the student with the highest average score. In case of a tie, return the lexicographically first name. top_name = None highest_avg = -1 for record in records: name = record['name'] scores = record['scores'] avg_score = sum(scores) / len(scores) if (avg_score > highest_avg) or (avg_score == highest_avg and name < top_name): highest_avg = avg_score top_name = name return top_name"},{"question":"Given a list of integers that represents the number of votes each candidate received, implement a function to determine the winner of the election. The candidate with the highest number of votes wins. If there is a tie, return a list of all candidates who received the highest number of votes. Your solution should efficiently handle large lists. Additionally, consider the code block below which contains some errors. You need to find the errors and correct them in your solution: \`\`\`python def election_winner(votes): max_votes = -1 winners = [] for candidate in votes: if candidate > max_votes: max_votes = candidate winners.clear() winners.append(candidate) elif candidate == max_votes: winners.append(candidate) return winners # Sample input list of votes votes = [4, 2, 7, 7, 1, 4] \`\`\` Fix the provided code to ensure it returns the correct output and efficiently handles the election process. The corrected function should output the indices of the winning candidates or a list of indices if there is a tie. Use the sample input to verify your solution.","solution":"def election_winner(votes): Returns the index or indices of the candidate(s) with the highest votes. If there is a tie, returns a list of indices of the tied candidates. if not votes: return [] max_votes = max(votes) winners = [index for index, vote in enumerate(votes) if vote == max_votes] return winners"},{"question":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list in the same reverse order format. The digits are stored in the linked lists such that the least significant digit is at the head of the list. Example: Input: l1 = [2, 4, 3] l2 = [5, 6, 4] Output: [7, 0, 8] Explanation: 342 + 465 = 807 (in reverse order, 7->0->8) Constraints: - The number of nodes in each linked list is in the range \`[1, 100]\`. - The value of each node is in the range \`[0, 9]\`. - It is guaranteed that the list represents a number without leading zeros.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def add_two_numbers(l1, l2): Adds two numbers represented by linked lists l1 and l2, where digits are stored in reverse order. Returns the sum as a linked list in the same reverse order format. dummy_head = ListNode() current = dummy_head carry = 0 while l1 or l2 or carry: val1 = (l1.val if l1 else 0) val2 = (l2.val if l2 else 0) total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"Write a function that takes a list of integers and returns the second largest number in the list. If the list has fewer than two unique elements, return \`None\`.","solution":"def second_largest(numbers): Returns the second largest number in the list. If the list has fewer than two unique elements, returns None. :param numbers: List of integers :return: The second largest integer or None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Create a function called \`rotate_list\` that takes two arguments: a list of integers \`lst\` and a positive integer \`k\`. The function should rotate the list to the right by \`k\` positions. Rotating a list to the right means that for each step, the last element of the list becomes the first element, and the rest are shifted one position to the right. Ensure the function works efficiently even for large values of \`k\`. For example: \`\`\`python def rotate_list(lst, k): # Your code here # Example usage: print(rotate_list([1, 2, 3, 4, 5], 2)) # Output should be [4, 5, 1, 2, 3] print(rotate_list([10, 20, 30, 40, 50], 3)) # Output should be [30, 40, 50, 10, 20] \`\`\`","solution":"def rotate_list(lst, k): Rotates the list to the right by k positions. if not lst or k <= 0: return lst n = len(lst) k = k % n # Handle cases where k is larger than the list's length return lst[-k:] + lst[:-k]"},{"question":"Given an array of integers, write a function to find the k-th largest element in the array. Assume k is always valid, 1 ≤ k ≤ array's length.","solution":"import heapq def find_kth_largest(nums, k): Returns the k-th largest element in the array. return heapq.nlargest(k, nums)[-1]"},{"question":"Implement a function that takes an integer \`n\` as input and returns the first \`n\` prime numbers in a list. Additionally, the function should calculate the sum of these prime numbers and return both the list of prime numbers and their sum. Handle cases where the input \`n\` is less than 1 by returning an empty list and a sum of 0. Example: Input: \`n = 5\` Output: \`([2, 3, 5, 7, 11], 28)\`","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def first_n_primes(n): if n < 1: return ([], 0) primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return (primes, sum(primes))"},{"question":"Given a list of integers, write a function to find all unique triplets in the list which gives the sum of zero. Example: Input: [-1, 0, 1, 2, -1, -4] Output: [ [-1, 0, 1], [-1, -1, 2] ] Note: - The solution set must not contain duplicate triplets. - The triplets can be returned in any order.","solution":"def three_sum(nums): Given a list of integers, find all unique triplets in the list which gives the sum of zero. :param nums: List[int] :return: List[List[int]] nums.sort() triplets = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate elements continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s == 0: triplets.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif s < 0: left += 1 else: right -= 1 return triplets"},{"question":"Write a Python program to generate random, non-overlapping rectangles within a specified boundary size. The program should ensure that the rectangles do not overlap each other, and all rectangles fit within the boundary. Input: - **Boundary Width (W)**: Integer representing the width of the boundary. - **Boundary Height (H)**: Integer representing the height of the boundary. - **Number of Rectangles (N)**: Integer representing the number of rectangles to be generated. - **Minimum Width (min_w)** and **Minimum Height (min_h)**: Integers representing the minimum width and height of the rectangles. - **Maximum Width (max_w)** and **Maximum Height (max_h)**: Integers representing the maximum width and height of the rectangles. Output: - A list of tuples, where each tuple represents a rectangle with coordinates (x, y, width, height), indicating the top-left corner and dimensions. Example: \`\`\`python generate_rectangles(W=100, H=100, N=5, min_w=10, min_h=10, max_w=30, max_h=30) \`\`\` Constraints: - The generated rectangles must not overlap. - The rectangles must fit entirely within the specified boundary. - Ensure that the number of rectangles and their sizes can realistically fit within the bounded area. Implement the function \`generate_rectangles\` with the following signature: \`\`\`python def generate_rectangles(W: int, H: int, N: int, min_w: int, min_h: int, max_w: int, max_h: int) -> List[Tuple[int, int, int, int]]: \`\`\`","solution":"import random from typing import List, Tuple def generate_rectangles(W: int, H: int, N: int, min_w: int, min_h: int, max_w: int, max_h: int) -> List[Tuple[int, int, int, int]]: def is_overlapping(rect1, rect2): x1, y1, w1, h1 = rect1 x2, y2, w2, h2 = rect2 return not (x1 + w1 <= x2 or x2 + w2 <= x1 or y1 + h1 <= y2 or y2 + h2 <= y1) rectangles = [] retries = 1000 # Limit the retries to avoid infinite loops while len(rectangles) < N and retries > 0: w = random.randint(min_w, max_w) h = random.randint(min_h, max_h) x = random.randint(0, W - w) y = random.randint(0, H - h) new_rect = (x, y, w, h) if all(not is_overlapping(new_rect, existing_rect) for existing_rect in rectangles): rectangles.append(new_rect) else: retries -= 1 return rectangles"},{"question":"Create a function in Python called 'evaluate_expression' that takes in a string representing a mathematical expression (containing non-negative integers and the operators +, -, *, and / without spaces) and returns the result of the expression as a float. Ensure that the function correctly handles the order of operations (parentheses can be ignored for this problem). The function should raise a ValueError if the input string is not a valid mathematical expression. Provide a few test cases to demonstrate the functionality of your solution.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing non-negative integers and the operators +, -, *, and / without spaces, and returns the result as a float. try: # Evaluate the expression using Python's eval function result = eval(expression) return float(result) except: # Raise a ValueError if the expression is invalid raise ValueError(\\"Invalid mathematical expression\\")"},{"question":"Write a function to extract unique elements from a list while preserving their original order. The function should take a list as input and return another list with the unique elements in the order they first appear. This function should handle lists with any data type and must maintain the types of the input elements in the returned list. Examples >>> unique_in_order([1, 2, 2, 3, 4, 4, 5]) [1, 2, 3, 4, 5] >>> unique_in_order(['a', 'b', 'a', 'c', 'd', 'd']) ['a', 'b', 'c', 'd'] >>> unique_in_order([1, '2', 2, '2', 3, '3']) [1, '2', 2, 3, '3'] Note: - The function should not use any external libraries or built-in functions except for basic list operations. - The function should handle empty lists and return an empty list if input is empty. - The function should ensure that the data types of the elements in the returned list match those in the original list, even if they are different from each other.","solution":"def unique_in_order(lst): Returns a list with the unique elements of lst while preserving their original order. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a function that takes a list of integers and returns a boolean indicating whether there are any two distinct numbers in the list whose sum is equal to a given target number. The function should have a time complexity of O(n).","solution":"def has_pair_with_sum(nums, target): Checks if there are two distinct numbers in list \`nums\` whose sum is equal to \`target\`. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Create a function that takes an integer array as input and returns the second largest element in the array. If the array has fewer than two unique elements, return None. For example, given the input array [3, 1, 4, 1, 5, 9], the function should return 5.","solution":"def second_largest(arr): Returns the second largest unique element in the array. If the array has fewer than two unique elements, return None. if len(arr) < 2: return None unique_elements = list(set(arr)) if len(unique_elements) < 2: return None unique_elements.sort(reverse=True) return unique_elements[1]"},{"question":"Given an array of integers, write a function that reorders the array such that all even numbers appear before all the odd numbers. The relative order among even and odd numbers should remain the same. For example: \`\`\`python def reorder_array(arr): # Your code here # Example usage: arr = [4, 3, 2, 5, 7, 8] print(reorder_array(arr)) # Output: [4, 2, 8, 3, 5, 7] arr = [1, 11, 2, 8, 3] print(reorder_array(arr)) # Output: [2, 8, 1, 11, 3] \`\`\` Constraints: - You are not allowed to use additional space, i.e., the solution should be in-place. - You can safely assume that the integers fit within the standard integer range. Additionally, write a unittest test case to confirm the expected behavior of the function.","solution":"def reorder_array(arr): Reorders the array such that all even numbers appear before all the odd numbers. The relative order among even and odd numbers should remain the same. This function modifies the array in-place. even_index = 0 for i in range(len(arr)): if arr[i] % 2 == 0: arr.insert(even_index, arr.pop(i)) even_index += 1 return arr"},{"question":"Given a list of integers, write a function that finds the length of the longest contiguous subarray such that all elements in the array have the same value. The function should handle edge cases like an empty list and lists with only one unique element. \`\`\`python def longest_uniform_subarray(arr): longest = 0 current_count = 1 if not arr: return 0 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_count += 1 else: longest = max(longest, current_count) current_count = 1 longest = max(longest, current_count) return longest \`\`\`","solution":"def longest_uniform_subarray(arr): This function finds the length of the longest contiguous subarray such that all elements in the array have the same value. # Return 0 for an empty list if not arr: return 0 # Initialize variables to track the longest subarray and current count longest = 0 current_count = 1 # Iterate through the list starting from the second element for i in range(1, len(arr)): if arr[i] == arr[i-1]: # If current element is the same as previous current_count += 1 else: longest = max(longest, current_count) current_count = 1 # Reset count for the new subarray # Compare for the last segment of the array longest = max(longest, current_count) return longest"},{"question":"Design a method that accepts a linked list of integers and returns the list reversed. The linked list can have a length of up to 10^5 elements, and the method should have a runtime complexity of O(n). Additionally, ensure the solution uses O(1) extra space (other than the input list itself).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a singly linked list. :param head: ListNode, the head of the singly linked list. :return: ListNode, the new head of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Implement a function \`consecutive_character_count\` that takes a string and returns a list of tuples, where each tuple contains a character from the string and the number of consecutive occurrences of that character. Do not include spaces in the output. For example: \`\`\`python def consecutive_character_count(s): pass # Example usage: print(consecutive_character_count(\\"aabbcccddee fghhh\\")) # Output: [('a', 2), ('b', 2), ('c', 3), ('d', 2), ('e', 2), ('f', 1), ('g', 1), ('h', 3)] \`\`\` # Requirements 1. The function should iterate through the string and count the number of consecutive occurrences of each character. 2. The function should return a list of tuples, where each tuple contains a character and its consecutive count. 3. Spaces should be ignored in the count. 4. The function should be case-sensitive. # Constraints - The input string can include lowercase and uppercase alphabets and spaces. - You can assume the input string will not be empty.","solution":"def consecutive_character_count(s): Returns a list of tuples, where each tuple contains a character from the string and the number of consecutive occurrences of that character, excluding spaces. if not s: return [] result = [] prev_char = '' count = 0 for char in s: if char == ' ': continue if char == prev_char: count += 1 else: if prev_char: result.append((prev_char, count)) prev_char = char count = 1 if prev_char: result.append((prev_char, count)) return result"},{"question":"Write a function in Python that takes a list of integers and an integer \`k\` as inputs. The function should return the length of the longest contiguous subarray whose sum is exactly \`k\`. If no such subarray exists, the function should return 0.","solution":"def len_longest_subarray(nums, k): Returns the length of the longest contiguous subarray whose sum is exactly k. If no such subarray exists, return 0. sum_map = {} current_sum = 0 max_len = 0 for i in range(len(nums)): current_sum += nums[i] if current_sum == k: max_len = i + 1 if (current_sum - k) in sum_map: max_len = max(max_len, i - sum_map[current_sum - k]) if current_sum not in sum_map: sum_map[current_sum] = i return max_len"},{"question":"You are given access to a public dataset of global temperatures available at https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv. Extract and process the dataset to focus exclusively on the average annual temperatures. Once the data is processed, generate a graph illustrating the change in average annual global temperatures from the year 1900 to the most recent year available in the dataset. Ensure that the graph includes proper labeling of axes and a title that accurately describes the content of the graph.","solution":"import pandas as pd import matplotlib.pyplot as plt def fetch_and_process_data(url): This function fetches the data from the provided URL and processes it to focus on average annual temperatures. # Fetch data df = pd.read_csv(url, skiprows=1) # Select relevant columns df = df[['Year', 'J-D']] # Remove rows with missing data df = df.dropna() # Filter data from year 1900 onwards df = df[df['Year'] >= 1900] # Rename columns for clarity df.columns = ['Year', 'AvgAnnualTemp'] return df def plot_data(df): This function generates a graph illustrating the change in average annual global temperatures from the year 1900 to the most recent year. plt.figure(figsize=(14, 7)) plt.plot(df['Year'], df['AvgAnnualTemp'], label='Avg Annual Temperature') plt.xlabel('Year') plt.ylabel('Temperature (°C)') plt.title('Change in Average Annual Global Temperatures (1900 - Present)') plt.legend() plt.grid(True) plt.show() # URL to the dataset url = \\"https://data.giss.nasa.gov/gistemp/tabledata_v4/GLB.Ts+dSST.csv\\" # Fetch and process the data df = fetch_and_process_data(url) # Plot the data plot_data(df)"},{"question":"Write a program that sorts a list of words based on the length of each word, in ascending order. If two words have the same length, they should be sorted in alphabetical order. The list of words should be taken as input from the user, where the words are separated by spaces. The program should validate that the input contains only alphabetic characters and spaces.","solution":"def sort_words_by_length(words): Sorts a list of words first by their length and then alphabetically for words of the same length. Args: words (str): A string of words separated by spaces. Returns: list: A sorted list of words. # Validate the input if not all(word.isalpha() for word in words.split()): raise ValueError(\\"Input should only contain alphabetic characters and spaces.\\") # Split the input string into a list of words words_list = words.split() # Sort the list of words by length, then alphabetically sorted_words = sorted(words_list, key=lambda w: (len(w), w.lower())) return sorted_words"},{"question":"Implement a class \`Matrix\` that has the following functionalities: 1. **Initialization**: Accepts a 2D list representing the matrix elements. \`\`\`python class Matrix: def __init__(self, elements: List[List[int]]): # Your code here \`\`\` 2. **Scalar Multiplication**: Multiples the matrix by a scalar value. \`\`\`python def scalar_multiply(self, scalar: int) -> None: # Your code here \`\`\` 3. **Matrix Addition**: Adds another matrix to the current matrix. \`\`\`python def add(self, other: 'Matrix') -> 'Matrix': # Your code here \`\`\` 4. **Matrix Transpose**: Transposes the matrix. \`\`\`python def transpose(self) -> 'Matrix': # Your code here \`\`\` 5. **String Representation**: Provides a readable string representation of the matrix, where each row is on a new line and elements are space-separated. \`\`\`python def __str__(self) -> str: # Your code here \`\`\` # Example: \`\`\`python if __name__ == \\"__main__\\": m1 = Matrix([[1, 2], [3, 4]]) m2 = Matrix([[5, 6], [7, 8]]) print(m1) # Output: # 1 2 # 3 4 m1.scalar_multiply(2) print(m1) # Output: # 2 4 # 6 8 m3 = m1.add(m2) print(m3) # Output: # 7 10 # 13 16 m4 = m3.transpose() print(m4) # Output: # 7 13 # 10 16 \`\`\`","solution":"from typing import List class Matrix: def __init__(self, elements: List[List[int]]): self.elements = elements def scalar_multiply(self, scalar: int) -> None: self.elements = [[scalar * element for element in row] for row in self.elements] def add(self, other: 'Matrix') -> 'Matrix': if len(self.elements) != len(other.elements) or len(self.elements[0]) != len(other.elements[0]): raise ValueError(\\"Matrices are not of the same size\\") result_elements = [ [self.elements[i][j] + other.elements[i][j] for j in range(len(self.elements[0]))] for i in range(len(self.elements)) ] return Matrix(result_elements) def transpose(self) -> 'Matrix': transposed_elements = [ [self.elements[j][i] for j in range(len(self.elements))] for i in range(len(self.elements[0])) ] return Matrix(transposed_elements) def __str__(self) -> str: return 'n'.join(' '.join(map(str, row)) for row in self.elements)"},{"question":"Write a Python function that takes a list of integers as input and returns a new list where each integer in the original list is replaced by the product of all other integers in the list (i.e., all integers except the one at that index). Your function should handle cases where the input list contains zeros. You should not use division to solve this problem. For example, if the input list is [1, 2, 3, 4], the output list should be [24, 12, 8, 6]. If the input list is [0, 2, 3], the output list should be [6, 0, 0].","solution":"def product_of_all_except_self(numbers): Returns a new list where each integer in the original list is replaced by the product of all other integers in the list. length = len(numbers) result = [1] * length # Compute prefix products prefix_product = 1 for i in range(length): result[i] = prefix_product prefix_product *= numbers[i] # Compute suffix products and multiply with prefix products suffix_product = 1 for i in range(length - 1, -1, -1): result[i] *= suffix_product suffix_product *= numbers[i] return result"},{"question":"Write a function to determine whether a given string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same backward as forward, and a permutation is a rearrangement of letters. The function should ignore spaces and be case-insensitive. Implement your solution in such a way that it is optimal in terms of time and space complexity. def is_palindrome_permutation(s): Example: is_palindrome_permutation('Tact Coa') returns True ('taco cat', 'atco cta', etc.) is_palindrome_permutation('Not a Palindrome') returns False is_palindrome_permutation('A Santa at Nasa') returns True ('a santa at nasa', 'as atan a santa', etc.)","solution":"def is_palindrome_permutation(s): Determines if a given string is a permutation of a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string is a permutation of a palindrome, otherwise False. from collections import Counter s = ''.join(s.lower().split()) # Convert to lowercase and remove spaces char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given the task to implement a function that merges two sorted linked lists into one sorted linked list. The linked lists must be merged in a way that ensures the resulting list remains sorted. Your function should take two linked lists as inputs and return the head of the new merged list. A Python function \`mergeTwoLists(l1, l2)\` has been prepared for this, but it is incomplete. Your task is to complete this function to correctly merge the two lists. \`\`\`python class ListNode: def __init__(self, x): self.val = x self.next = None def mergeTwoLists(l1, l2): dummy = ListNode(0) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next \`\`\` To demonstrate how the function should operate, consider the following examples: Example 1: Input: l1 = [1,2,4], l2 = [1,3,4] Expected Output: [1,1,2,3,4,4] Example 2: Input: l1 = [], l2 = [] Expected Output: [] Example 3: Input: l1 = [], l2 = [0] Expected Output: [0] Example 4: Input: l1 = [2,5,7], l2 = [1,3,4] Expected Output: [1,2,3,4,5,7] The constraints for this problem are as follows: - The number of nodes in both linked lists is in the range \`[0, 50]\`. - \`-100 <= Node.val <= 100\`","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def mergeTwoLists(l1, l2): dummy = ListNode(0) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 else: current.next = l2 return dummy.next # Helper function to create linked list from a list def create_linked_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert linked list to list def linked_list_to_list(node): result = [] while node: result.append(node.val) node = node.next return result"},{"question":"Create a Python function that takes in a list of integers and an integer 'n'. The function should return a new list containing the indices of all occurrences of 'n' in the input list. If 'n' is not present in the list, return an empty list. Ensure to handle potential errors with appropriate exception handling. **Example:** \`\`\`python def find_indices(lst, n): # Your code here # Sample calls print(find_indices([1, 2, 3, 2, 4, 2], 2)) # Output: [1, 3, 5] print(find_indices([5, 5, 5], 5)) # Output: [0, 1, 2] print(find_indices([1, 2, 3], 4)) # Output: [] \`\`\`","solution":"def find_indices(lst, n): Returns a list of indices where the integer 'n' occurs in the input list 'lst'. If 'n' is not present in 'lst', returns an empty list. if not isinstance(lst, list): raise ValueError(\\"The first argument must be a list.\\") if not isinstance(n, int): raise ValueError(\\"The second argument must be an integer.\\") return [i for i, x in enumerate(lst) if x == n]"},{"question":"Write a Python function that validates and calculates the factorial of a given number. The function should check if the input is a non-negative integer, and if it is not, it should raise a \`ValueError\`. Your function should be named \`calculate_factorial()\` and take one parameter \`n\`. After creating this function, write a set of pytest test cases under the function \`test_calculate_factorial()\` that will fully test \`calculate_factorial()\` function. Make sure to include tests for valid inputs as well as tests for invalid inputs. # Example: \`\`\`python def calculate_factorial(n): if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n+1): factorial *= i return factorial def test_calculate_factorial(): assert calculate_factorial(5) == 120 assert calculate_factorial(0) == 1 assert calculate_factorial(1) == 1 # Test invalid input: negative number try: calculate_factorial(-5) except ValueError: pass else: raise AssertionError(\\"Expected error when input is negative\\") # Test invalid input: non-integer try: calculate_factorial(3.5) except ValueError: pass else: raise AssertionError(\\"Expected error when input is a non-integer\\") # Test large number assert calculate_factorial(10) == 3628800 \`\`\`","solution":"def calculate_factorial(n): Calculates the factorial of a given non-negative integer n. Raises ValueError if n is not a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 factorial = 1 for i in range(2, n+1): factorial *= i return factorial"},{"question":"Given a Python development environment where the Pandas library is available, create a function to process a dataframe containing customer transaction data. The dataframe has the following columns: * 'transaction_id' - Unique identifier for each transaction (integer) * 'customer_id' - Unique identifier for each customer (integer) * 'transaction_date' - The date of the transaction (datetime) * 'amount' - The transaction amount (float) Your task is to write a function \`process_transactions(df)\` that performs the following operations: 1. Ensure there are no missing values in any of the columns. If missing values are detected, raise an appropriate error. 2. Convert 'transaction_date' to datetime format if it is not already. 3. Add a new column 'year' extracting the year from the 'transaction_date'. 4. Group the dataframe by 'customer_id' and 'year', and sum the 'amount' for each group. 5. Return a new dataframe with columns 'customer_id', 'year', and 'total_amount', where 'total_amount' is the summed 'amount' for each 'customer_id' and year. Ensure that your function handles unexpected data gracefully, such as invalid date formats or non-numeric amounts. Remember to clean and validate your inputs before processing. Your code should be efficient and you may use the following data format for testing: \`\`\`python import pandas as pd from io import StringIO data = StringIO( transaction_id, customer_id, transaction_date, amount 1, 101, 2022-01-15, 150.00 2, 101, 2021-12-22, 200.50 3, 102, 2022-02-17, -100.00 4, 103, 2021-11-30, 500.00 5, 103, 2022-01-20, 300.75 ) df = pd.read_csv(data, sep=\\",\\") \`\`\` Provide the implementation of the \`process_transactions(df)\` function and demonstrate its usage with the given data.","solution":"import pandas as pd def process_transactions(df): # Step 1: Ensure no missing values if df.isnull().values.any(): raise ValueError(\\"Missing values detected in the dataframe.\\") # Step 2: Convert 'transaction_date' to datetime if not already in datetime format if df['transaction_date'].dtype != 'datetime64[ns]': try: df['transaction_date'] = pd.to_datetime(df['transaction_date']) except Exception as e: raise ValueError(f\\"Invalid date format detected: {e}\\") # Step 3: Add a new column 'year' extracting the year from the transaction_date df['year'] = df['transaction_date'].dt.year # Step 4: Group by 'customer_id' and 'year', summing the 'amount' result = df.groupby(['customer_id', 'year']).agg(total_amount=('amount', 'sum')).reset_index() # Step 5: Return the new dataframe return result"},{"question":"The volume of a cone is calculated using the formula: [ V = frac{1}{3} pi r^2 h ] where \`r\` is the radius of the base of the cone, \`h\` is the height of the cone, and \`π\` is a constant (approximately 3.14159). Write a Python function \`cone_volume(radius, height)\` that takes the radius and height of a cone as input, and returns the volume of the cone. Design your function to handle exceptions gracefully for invalid input values such as negative numbers or non-numeric types. \`\`\`python def cone_volume(radius, height): # Your code here pass \`\`\` Use the function to calculate and print the volume of a cone with a radius of 5 units and a height of 12 units.","solution":"import math def cone_volume(radius, height): Returns the volume of a cone given the radius of the base and the height. Parameters: radius (float): the radius of the base of the cone. height (float): the height of the cone. Returns: float: the volume of the cone. # Check for valid input if not isinstance(radius, (int, float)) or not isinstance(height, (int, float)): raise ValueError(\\"Both radius and height must be numeric values.\\") if radius < 0 or height < 0: raise ValueError(\\"Both radius and height must be non-negative values.\\") volume = (1/3) * math.pi * radius ** 2 * height return volume # Example usage: calculate and print the volume of a cone with radius 5 and height 12 radius = 5 height = 12 print(f\\"The volume of the cone is: {cone_volume(radius, height)}\\")"},{"question":"Write a Python function that takes a list of integers and returns the length of the longest sequence of consecutive integers in the list. The integers in the list are not necessarily sorted. For example, for the input [100, 4, 200, 1, 3, 2], the longest sequence of consecutive integers is [1, 2, 3, 4], so the output should be 4. As an additional exercise, provide a short piece of code that attempts to solve the problem but contains an off-by-one error, and ask for corrections to be made to it.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in the list. Args: nums: List[int] : A list of integers. Returns: int : Length of the longest sequence of consecutive integers. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: # Check if it's the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an integer array nums of length n where all the elements are unique. A permutation of the array is an arrangement of its elements in any order. For example, the array [1,2,3] can be permuted to [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1]. Return the rearranged array that is the lexicographically next permutation of nums. If such an arrangement is not possible, return the array sorted in ascending order. Example 1: Input: nums = [1,2,3] Output: [1,3,2] Explanation: The next permutation is [1,3,2]. Example 2: Input: nums = [3,2,1] Output: [1,2,3] Explanation: The next permutation does not exist. Therefore, the array is sorted in ascending order. Example 3: Input: nums = [1,1,5] Output: [1,5,1] Example 4: Input: nums = [1,3,2] Output: [2,1,3] Constraints: \`1 <= nums.length <= 100\` \`0 <= nums[i] <= 100\`","solution":"def next_permutation(nums): Modifies nums in-place to the lexicographically next permutation and returns it. If such arrangement is not possible, returns the array sorted in ascending order. n = len(nums) # Step 1: Find the longest non-increasing suffix i = n - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 # Step 2: If the array is entirely non-increasing, return the sorted array if i == -1: nums.sort() return nums # Step 3: Find the rightmost element that exceeds nums[i] j = n - 1 while nums[j] <= nums[i]: j -= 1 # Step 4: Swap elements at i and j nums[i], nums[j] = nums[j], nums[i] # Step 5: Reverse the suffix nums[i + 1:] = reversed(nums[i + 1:]) return nums"},{"question":"Develop a function that takes a list of strings and returns a dictionary mapping each unique word to the number of times it appears in the list. The function should ignore case and punctuation. For simplicity, consider only alphabetical characters and spaces as valid input.","solution":"import re from collections import defaultdict def count_words(strings): Takes a list of strings and returns a dictionary mapping each unique word to the number of times it appears in the list. Ignores case and punctuation. Parameters: strings (list of str): The list of input strings. Returns: dict: Dictionary with words as keys and their counts as values. word_count = defaultdict(int) for string in strings: # Remove punctuation and make lowercase cleaned_string = re.sub(r'[^a-zA-Zs]', '', string).lower() words = cleaned_string.split() for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the odd numbers from the original list, each multiplied by 3. Ensure the function performs validation to only accept lists containing integers, and handle any errors gracefully.","solution":"def odd_multiples_of_three(int_list): Returns a new list containing only the odd numbers from the original list, each multiplied by 3. Validates that the input is a list of integers. if not isinstance(int_list, list): raise ValueError(\\"Input must be a list\\") for elem in int_list: if not isinstance(elem, int): raise ValueError(\\"All elements in the list must be integers\\") return [x * 3 for x in int_list if x % 2 != 0]"},{"question":"Context # Game Development Original Requirements [BOSS: Create an interactive tic-tac-toe game that can be played by two players on the same device; implement it using Python and offer a simple text-based interface.] # Search Information Search Results - User can mark X or O in a 3x3 grid. - The players take turns to place their respective marks. - The game ends when one player aligns three of their marks horizontally, vertically, or diagonally, or when the grid is full without a winner. # Search Summary We found that creating a simple tic-tac-toe game involves implementing a 3x3 grid system, alternating turns between two players, and checking for winning or draw conditions. # mermaid quadrantChart code syntax example \`\`\`mermaid quadrantChart title Fun and complexity of games x-axis Low Fun --> High Fun y-axis Low Complexity --> High Complexity quadrant-1 Must Play quadrant-2 Casual Play quadrant-3 For Kids quadrant-4 Avoid \\"Chess\\": [0.8, 0.9] \\"Checkers\\": [0.6, 0.4] \\"Connect Four\\": [0.5, 0.3] \\"Sudoku\\": [0.4, 0.7] \\"Rock Paper Scissors\\": [0.2, 0.2] \\"Tetris\\": [0.7, 0.6] \\"Our Target Game\\": [0.5, 0.5] \`\`\` Format example --- Original Requirements The boss requested to develop an interactive tic-tac-toe game to be played by two players on the same device. The game should be implemented in Python with a simple text-based interface. Product Goals \`\`\`python [ \\"Develop a basic interactive tic-tac-toe game.\\", \\"Implement turn-based gameplay and winning/draw conditions.\\", \\"Ensure user-friendliness with a clear text-based interface.\\" ] \`\`\` User Stories \`\`\`python [ \\"As a player, I want to place my mark on a grid, so that I can participate in the game.\\", \\"As a player, I want to take turns with another player, so that the game progresses fairly.\\", \\"As a player, I want to see the current state of the grid after each turn, so that I know the progress of the game.\\", \\"As a player, I want to be notified when I win, lose, or draw, so that I know the outcome of the game.\\", \\"As a player, I want the option to restart the game, so that I can play again without restarting the program.\\" ] \`\`\` Competitive Analysis \`\`\`python [ \\"Checkers: Simple two-player game with alternating turns and clear winning conditions.\\", \\"Chess: Complex two-player strategy game with history and substantial rules.\\", \\"Rock Paper Scissors: Minimalistic two-player game with immediate outcomes.\\", \\"Connect Four: Interactive game with clear visual interface that enhances engagement.\\", \\"Tetris: Single-player game with progressively challenging levels.\\" ] \`\`\` Competitive Quadrant Chart \`\`\`mermaid quadrantChart title Fun and complexity of games x-axis Low Fun --> High Fun y-axis Low Complexity --> High Complexity quadrant-1 Must Play quadrant-2 Casual Play quadrant-3 For Kids quadrant-4 Avoid \\"Chess\\": [0.8, 0.9] \\"Checkers\\": [0.6, 0.4] \\"Connect Four\\": [0.5, 0.3] \\"Sudoku\\": [0.4, 0.7] \\"Rock Paper Scissors\\": [0.2, 0.2] \\"Tetris\\": [0.7, 0.6] \\"Our Target Game\\": [0.5, 0.5] \`\`\` Requirement Analysis The game should be straightforward with clear rules, alternating turns, and a reset feature. The goal is to provide a quick, engaging two-player experience with minimal setup. Requirement Pool \`\`\`python [ (\\"Implement a 3x3 grid system\\", \\"P0\\"), (\\"Develop alternating turn logic\\", \\"P0\\"), (\\"Check for win/draw conditions\\", \\"P0\\"), (\\"Create a simple text-based interface\\", \\"P1\\"), (\\"Add a restart game feature\\", \\"P2\\") ] \`\`\` UI Design draft The interface consists of a 3x3 grid displayed as a text representation. Players will input their moves by specifying the row and column numbers. After each move, the updated grid will be displayed. The interface will announce the winner or if the game results in a draw and provide an option to restart the game. Anything UNCLEAR There are no unclear points.","solution":"class TicTacToe: def __init__(self): self.board = [[' ' for _ in range(3)] for _ in range(3)] self.current_player = 'X' def display_board(self): for row in self.board: print('|'.join(row)) print('-'*5) def make_move(self, row, col): if self.board[row][col] == ' ': self.board[row][col] = self.current_player if self.check_winner(self.current_player): return f\\"Player {self.current_player} wins!\\" if self.check_draw(): return \\"The game is a draw!\\" self.current_player = 'O' if self.current_player == 'X' else 'X' return \\"Move accepted\\" else: return \\"Invalid move\\" def check_winner(self, player): win_conditions = [ [self.board[0][0], self.board[0][1], self.board[0][2]], [self.board[1][0], self.board[1][1], self.board[1][2]], [self.board[2][0], self.board[2][1], self.board[2][2]], [self.board[0][0], self.board[1][0], self.board[2][0]], [self.board[0][1], self.board[1][1], self.board[2][1]], [self.board[0][2], self.board[1][2], self.board[2][2]], [self.board[0][0], self.board[1][1], self.board[2][2]], [self.board[2][0], self.board[1][1], self.board[0][2]] ] if [player, player, player] in win_conditions: return True return False def check_draw(self): for row in self.board: if ' ' in row: return False return True def reset_game(self): self.__init__()"},{"question":"Implement a function to determine whether a given string contains any permutation of another given string. For instance, given strings \`s1\` and \`s2\`, the function should return \`true\` if any permutation of \`s1\` is a substring of \`s2\`, and \`false\` otherwise. # Function Signature \`\`\`python def check_permutation_substring(s1: str, s2: str) -> bool: pass \`\`\` # Input - \`s1\` (1 <= len(s1) <= 10^4): A string whose permutations are to be checked. - \`s2\` (1 <= len(s2) <= 10^5): A string to be checked for containing any permutation of \`s1\`. # Output - Return \`true\` if \`s2\` contains any permutation of \`s1\`, \`false\` otherwise. # Example \`\`\`python assert check_permutation_substring(\\"ab\\", \\"eidbaooo\\") == True assert check_permutation_substring(\\"ab\\", \\"eidboaoo\\") == False \`\`\`","solution":"from collections import Counter def check_permutation_substring(s1: str, s2: str) -> bool: Determine if s2 contains any permutation of s1 as a substring. Args: s1 (str): The string whose permutations are to be checked. s2 (str): The string to be checked for containing any permutation of s1. Returns: bool: True if any permutation of s1 is a substring of s2, False otherwise. len_s1, len_s2 = len(s1), len(s2) if len_s1 > len_s2: return False s1_count = Counter(s1) window_count = Counter(s2[:len_s1]) for i in range(len_s2 - len_s1 + 1): if i > 0: # Update the current window window_count[s2[i - 1]] -= 1 if window_count[s2[i - 1]] == 0: del window_count[s2[i - 1]] window_count[s2[i + len_s1 - 1]] += 1 if window_count == s1_count: return True return False"},{"question":"Given a series of strings representing names of computer files with varying suffixes, delimiters, and random characters, the task is to extract and return the file extension from each name. Your solution should not use any built-in string manipulation or regular expression functions. Assume that each file name always has an extension and there are no invalid characters in the file names. The extensions can vary in length. Complete the following function: \`\`\`python def extract_file_extension(file_name: str) -> str: This function should return the file extension of the provided file name. >>> extract_file_extension(\\"example.txt\\") 'txt' >>> extract_file_extension(\\"document.pdf\\") 'pdf' >>> extract_file_extension(\\"my.homework.docx\\") 'docx' >>> extract_file_extension(\\"archive.tar.gz\\") 'gz' \`\`\`","solution":"def extract_file_extension(file_name: str) -> str: This function should return the file extension of the provided file name. >>> extract_file_extension(\\"example.txt\\") 'txt' >>> extract_file_extension(\\"document.pdf\\") 'pdf' >>> extract_file_extension(\\"my.homework.docx\\") 'docx' >>> extract_file_extension(\\"archive.tar.gz\\") 'gz' extension_start = -1 for i in range(len(file_name)): if file_name[i] == '.': extension_start = i extension = \\"\\" for i in range(extension_start + 1, len(file_name)): extension += file_name[i] return extension"},{"question":"Given a list of non-negative integers \`nums\`, write a function \`can_partition(nums: List[int]) -> bool\` which returns \`True\` if we can partition the list into two subsets such that the sum of elements in both subsets is equal, otherwise \`False\`. # Constraints - All elements in the input list are non-negative integers. - The length of the input list will not exceed 200. - The sum of elements in the input list will not exceed 20000. # Examples \`\`\`python can_partition([1, 5, 11, 5]) # Output: True # Explanation: The list can be partitioned as [1, 5, 5] and [11]. can_partition([1, 2, 3, 5]) # Output: False # Explanation: The list cannot be partitioned into two subsets with equal sum. \`\`\` # Explanation Your task is to implement the \`can_partition\` function which determines whether the given list can be partitioned into two subsets such that the sum of their elements is equal. This problem can be approached using dynamic programming, much like the subset-sum problem, a common problem for practicing dynamic programming techniques.","solution":"from typing import List def can_partition(nums: List[int]) -> bool: total_sum = sum(nums) # If total sum is odd, it cannot be partitioned into two subsets with equal sum if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Initialize a DP array of size (target + 1) with all False dp = [False] * (target + 1) dp[0] = True # Because a subset with sum 0 is always possible for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"Write a Python function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. Ensure that your solution handles an empty list gracefully and returns an empty dictionary in such cases. Additionally, your solution should be efficient even for large lists, and you should consider edge cases, such as lists with negative integers or repetitive sequences. Here is an example function signature to help you get started: \`\`\`python def count_occurrences(int_list): # Your code here pass # Example usage: # count_occurrences([1, 2, 2, 3, 3, 3]) should return {1: 1, 2: 2, 3: 3} # count_occurrences([]) should return {} # count_occurrences([-1, -1, 2, -1, 2, 2, 2]) should return {-1: 3, 2: 4} \`\`\`","solution":"def count_occurrences(int_list): Returns a dictionary where the keys are the unique integers from the list and the values are the number of times each integer appears in the list. occurrences = {} for num in int_list: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 return occurrences"},{"question":"Create a Python function that takes a list of integers and returns a list of tuples, where each tuple contains an integer from the list and its frequency in the list, sorted in descending order by frequency. If two integers have the same frequency, they should be sorted in ascending order numerically. For example, given the list [4, 6, 2, 6, 6, 1, 4, 2], the function should return [(6, 3), (4, 2), (2, 2), (1, 1)].","solution":"from collections import Counter def frequency_sort(nums): Returns a list of tuples where each tuple contains an integer from the list \`nums\` and its frequency in the list, sorted in descending order by frequency. If two integers have the same frequency, they are sorted in ascending order numerically. :param nums: List of integers :return: List of tuples (integer, frequency) counter = Counter(nums) return sorted(counter.items(), key=lambda x: (-x[1], x[0]))"},{"question":"Create a function in Python that takes a list of strings and returns a new list containing only the strings that have at least one vowel (a, e, i, o, or u). Ensure the function maintains the original order of the strings. Example: \`\`\`python def strings_with_vowels(strings): # Your code here # Sample Input strings = [\\"apple\\", \\"sky\\", \\"world\\", \\"bcdfg\\", \\"universe\\"] # Sample Output # [\\"apple\\", \\"world\\", \\"universe\\"] \`\`\` Note: - The function should be case-insensitive, i.e., it should consider both uppercase and lowercase vowels. - Input list can have empty strings, but they should not be included in the output if they do not contain any vowels.","solution":"def strings_with_vowels(strings): Returns a list of strings that contain at least one vowel. vowels = set(\\"aeiouAEIOU\\") return [s for s in strings if any(char in vowels for char in s)]"},{"question":"Given an unsorted array of integers, write a function to find the \\"Kth\\" largest element in the array without using any built-in sorting functions. The function should run in O(n) average time complexity. Discuss the approach and reasoning behind your solution.","solution":"def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] >= pivot: # We use >= to arrange in non-increasing order i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low <= high: pi = partition(arr, low, high) if pi == k: return arr[pi] elif pi < k: return quickselect(arr, pi + 1, high, k) else: return quickselect(arr, low, pi - 1, k) raise ValueError(\\"Index out of bounds\\") def find_kth_largest(arr, k): n = len(arr) return quickselect(arr, 0, n - 1, k - 1)"},{"question":"Write a function that identifies the longest common contiguous subarray (subarray with consecutive elements) shared by two given lists. For example, if the inputs are: List_A = [1, 2, 8, 2, 4, 5, 6, 7] List_B = [6, 7, 8, 2, 4, 1, 2, 4, 5, 6, 7] The output should be: [2, 4, 5, 6, 7]","solution":"def longest_common_contiguous_subarray(List_A, List_B): Identifies the longest common contiguous subarray shared by List_A and List_B. m, n = len(List_A), len(List_B) max_len = 0 end_index_A = 0 # Create a 2D array to store the length of longest common suffix # of subarray ending at each pair of indices (i, j) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if List_A[i - 1] == List_B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_len: max_len = dp[i][j] end_index_A = i start_index_A = end_index_A - max_len return List_A[start_index_A:end_index_A]"},{"question":"Create a function that receives a list of numbers and returns a new list containing only the elements that are larger than the arithmetic mean of the original list. Example: Input: [1, 5, 3, 7, 2, 6] Output: [5, 7, 6] Explanation: - Arithmetic mean of [1, 5, 3, 7, 2, 6] is 4. - The elements larger than 4 are [5, 7, 6]. Considerations: - Make sure your function handles both positive and negative numbers. - If the list is empty, the output should also be an empty list. Function signature: \`\`\`python def filter_greater_than_mean(numbers: list) -> list: \`\`\`","solution":"def filter_greater_than_mean(numbers: list) -> list: Returns a new list containing only the elements that are larger than the arithmetic mean of the original list. Args: numbers: A list of numbers. Returns: A list of numbers greater than the arithmetic mean of the original list. if not numbers: return [] arithmetic_mean = sum(numbers) / len(numbers) return [x for x in numbers if x > arithmetic_mean]"},{"question":"You are given a Python script that processes and analyzes a dataset containing sales records. The script reads records from a CSV file, performs some calculations, and generates a summary file. Your task is to ensure the script runs without errors. Identify and correct any issues in the given code. \`\`\`python imprt pandas as pd import numy as np # Load sales data sales_data = pd.readexcel('sales_records.csv') # Calculate total sales for each product category total_sales_by_category = sales_data.groupby('Category')['Sales'].sum() # Find the overall total sales total_sales = sales_data['Sales'].sum() # Calculate the average sales per transaction average_sales = sales_data['Sales'].mean # Generate a summary summary = { 'Total Sales by Category': total_sales_by_category, 'Overall Total Sales': total_sales, 'Average Sales per Transaction': average_sales } # Save the summary to a CSV file summary_df = pd.DataFrame(list(summary.items()), columns=['Description', 'Value']) summary_df.to_csv('sales_summary.csv', index=False) \`\`\` # Requirements 1. Correct all the syntax and logical errors in the script to ensure it reads the data, performs the calculations correctly, and generates the summary file. 2. Ensure the script follows best practices for readability and efficiency. 3. Make sure the script handles potential errors such as file not found or invalid data gracefully.","solution":"import pandas as pd import numpy as np def process_sales_data(input_file, output_file): Processes the sales data from the given input file and generates a summary file. Parameters: input_file (str): The path to the input CSV file containing sales records. output_file (str): The path to the output CSV file to save the summary. try: # Load sales data sales_data = pd.read_csv(input_file) # Check if the required columns are present if 'Category' not in sales_data.columns or 'Sales' not in sales_data.columns: raise ValueError(\\"Input file must contain 'Category' and 'Sales' columns.\\") # Calculate total sales for each product category total_sales_by_category = sales_data.groupby('Category')['Sales'].sum() # Find the overall total sales total_sales = sales_data['Sales'].sum() # Calculate the average sales per transaction average_sales = sales_data['Sales'].mean() # Generate a summary summary = { 'Total Sales by Category': total_sales_by_category, 'Overall Total Sales': total_sales, 'Average Sales per Transaction': average_sales } # Convert the summary to a DataFrame summary_df = pd.DataFrame({ 'Description': ['Total Sales by Category', 'Overall Total Sales', 'Average Sales per Transaction'], 'Value': [total_sales_by_category.to_dict(), total_sales, average_sales] }) # Save the summary to a CSV file summary_df.to_csv(output_file, index=False) except FileNotFoundError: print(f\\"Error: The file '{input_file}' was not found.\\") except pd.errors.EmptyDataError: print(\\"Error: The input file is empty.\\") except ValueError as e: print(f\\"Error: {e}\\") except Exception as e: print(f\\"An unexpected error occurred: {e}\\") # Example usage: # process_sales_data('sales_records.csv', 'sales_summary.csv')"},{"question":"You are given a list of 2D points representing coordinates on a Cartesian plane. Write a function that finds the convex hull of these points. The convex hull is the smallest convex polygon that can enclose all the given points. Implement the function using Andrew's monotone chain algorithm. Function Signature: def find_convex_hull(points: List[List[int]]) -> List[List[int]]: Input: - points: a list of lists where each sublist contains two integers representing the x and y coordinates of a point. Output: - A list of lists containing the coordinates of the convex hull in counterclockwise order starting from the one with the lowest y-coordinate. If there are multiple points with the same y-coordinate, pick the one with the lowest x-coordinate. Example 1: Input: points = [[0,0],[1,1],[2,2],[3,3],[2,0],[2,4],[4,2]] Output: [[0,0],[2,0],[4,2],[2,4]] Example 2: Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3]] Output: [[1,1],[2,0],[3,3],[2,4]] Constraints: - \`1 <= points.length <= 104\` - \`points[i].length == 2\` - \`-104 <= points[i][0], points[i][1] <= 104\` - All points are unique.","solution":"def find_convex_hull(points): Finds the convex hull of a set of 2D points using Andrew's monotone chain algorithm. :param points: A list of lists containing the x and y coordinates of the points. :return: A list of lists containing the coordinates of the convex hull in counterclockwise order. points = sorted(points) def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) return lower[:-1] + upper[:-1]"},{"question":"Create a function called \`find_next_fibonacci\` to calculate the smallest Fibonacci number greater than a given number \`n\`. The function should take an integer \`n\` as input and return the next Fibonacci number that is greater than \`n\`. For example: - If the input is \`21\`, the function should return \`34\`. - If the input is \`50\`, the function should return \`55\`.","solution":"def find_next_fibonacci(n): Returns the smallest Fibonacci number greater than a given number n. if n < 0: raise ValueError(\\"Input should be a non-negative integer.\\") a, b = 0, 1 while b <= n: a, b = b, a + b return b"},{"question":"Write a Python function using the pandas library that takes a DataFrame with columns 'name', 'age', and 'score', and returns a new DataFrame where the rows are sorted by 'score' in descending order. In case of a tie in scores, the rows should be sorted by 'age' in ascending order.","solution":"import pandas as pd def sort_dataframe(df): Returns a new DataFrame sorted by 'score' in descending order. If scores are tied, it sorts by 'age' in ascending order. Parameters: df (pd.DataFrame): The input DataFrame with columns 'name', 'age', and 'score'. Returns: pd.DataFrame: The sorted DataFrame. return df.sort_values(by=['score', 'age'], ascending=[False, True])"},{"question":"Given a string \`s\` consisting only of characters '(', ')', '{', '}', '[' and ']', determine if the string is valid. A string is considered valid if: 1. Every opening bracket ('(', '{', '[') has a corresponding closing bracket (')', '}', ']'). 2. Opening brackets are closed in the correct order. Return \`true\` if the string is valid, otherwise \`false\`. Here are some examples and their explanations: Example 1: Input: \\"()\\" Output: true Explanation: The string contains a single pair of parentheses, which is correctly matched. Example 2: Input: \\"()[]{}\\" Output: true Explanation: The string contains three pairs of different types of parentheses, all correctly matched. Example 3: Input: \\"(]\\" Output: false Explanation: The string contains mismatched parentheses where '(' does not have a corresponding closing ')'. Example 4: Input: \\"([)]\\" Output: false Explanation: The string has correctly matched pairs, but they are not in the proper nesting order. Example 5: Input: \\"{[]}\\" Output: true Explanation: The string contains nested parentheses, all correctly matched in order. Please note the following constraints: - The input string \`s\` length will be in the range [1, 10000].","solution":"def is_valid(s): Returns true if the input string has valid parentheses, otherwise false. stack = [] matching_bracket = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else '#' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function that takes an array of integers as input and returns the length of the longest subarray containing only distinct elements.","solution":"def longest_distinct_subarray(arr): Returns the length of the longest subarray containing only distinct elements. max_len = 0 start = 0 seen = {} for end, value in enumerate(arr): if value in seen: start = max(start, seen[value] + 1) seen[value] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Create a Python function that determines if a string is a valid palindrome after removing at most one character. The function should return a boolean value indicating whether the string can be a palindrome by removing one character or less. Additionally, craft a subroutine that can check for overlaps in substrings and validate their palindromic nature. Ensure your solution is optimized for performance with strings up to 10^5 characters.","solution":"def valid_palindrome(s: str) -> bool: Determine if a string can be a palindrome by removing at most one character. def is_palindrome_range(i, j): Helper function to check if s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (i+j)//2 + 1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left += 1 right -= 1 return True"},{"question":"Write a function that receives a list of strings and returns a new list containing only those strings that are palindromes. A palindrome is a word that reads the same backward as forward, ignoring spaces, punctuation, and case. The function should be insensitive to capitalization and spaces but must handle punctuation marks correctly. For example, \\"A man, a plan, a canal, Panama\\" should be considered a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and case. # Using regex to remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^A-Za-z0-9]', '', s).lower() return cleaned == cleaned[::-1] def filter_palindromes(strings): Returns a list of strings that are palindromes. return [s for s in strings if is_palindrome(s)]"},{"question":"Create a Python function that takes a string as input and returns the string with each word reversed, but with their original order preserved. Strip out any leading or trailing whitespace and ensure that multiple spaces between words are reduced to a single space.","solution":"def reverse_words_preserve_order(s): Reverses each word in the input string while preserving the original order of the words. Leading and trailing whitespace is removed and multiple spaces between words are reduced to a single space. return ' '.join(word[::-1] for word in s.split())"},{"question":"You are given a binary tree and a target node. Your task is to find all nodes at a distance \`k\` from the target node. Distance is defined as the number of edges between two nodes. Write a function that takes three arguments: the root of the binary tree, the target node, and the distance \`k\`. The function should return a list of values of the nodes that are exactly \`k\` distance away from the target node. \`\`\`python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def nodes_at_distance_k(root: TreeNode, target: TreeNode, k: int) -> List[int]: # Implement your solution here pass # Example usage: # Constructing the following binary tree: # 3 # / # 5 1 # / / # 6 2 0 8 # / # 7 4 # Target node: 5 # # For k = 2, the output should be [7, 4, 1] root = TreeNode(3) root.left = TreeNode(5) root.right = TreeNode(1) root.left.left = TreeNode(6) root.left.right = TreeNode(2) root.left.right.left = TreeNode(7) root.left.right.right = TreeNode(4) root.right.left = TreeNode(0) root.right.right = TreeNode(8) target = root.left # Node with value 5 distance = 2 print(nodes_at_distance_k(root, target, distance)) # Output: [7, 4, 1] \`\`\` # Constraints - The number of nodes in the tree is between 1 and 1000. - Each node has a unique integer value within the range of 0 to 1000. - The given target node is guaranteed to be a node in the binary tree. - \`0 <= k <= 1000\`","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def nodes_at_distance_k(root: TreeNode, target: TreeNode, k: int) -> list: from collections import defaultdict, deque def buildGraph(node, parent = None): if node: if parent: graph[node.val].append(parent.val) graph[parent.val].append(node.val) if node.left: buildGraph(node.left, node) if node.right: buildGraph(node.right, node) graph = defaultdict(list) buildGraph(root) queue = deque([(target.val, 0)]) visited = {target.val} result = [] while queue: currentNode, currentDist = queue.popleft() if currentDist == k: result.append(currentNode) elif currentDist < k: for neighbor in graph[currentNode]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, currentDist + 1)) return result"},{"question":"Design a Python function that determines if a given string can be rearranged to form a palindrome. The function should return True if it's possible to rearrange the string into a palindrome, and False otherwise. The solution should be efficient in terms of both time and space complexity.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. A string can form a palindrome if at most one character has an odd count. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter char_counts = Counter(s) odd_count = 0 for count in char_counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"Write a Python function that recursively searches through a nested dictionary to find and return the value associated with a specified key. The function should handle cases where the key might not be present, and the dictionary can contain other dictionaries as values at any level of nesting. Provide an example demonstrating the function's usage.","solution":"def find_key_recursively(nested_dict, search_key): Recursively searches through a nested dictionary to find and return the value associated with the specified key. If the key is not present, returns None. :param nested_dict: The nested dictionary to search through. :param search_key: The key to search for. :return: The value associated with the search_key or None if the key is not found. if isinstance(nested_dict, dict): for key, value in nested_dict.items(): if key == search_key: return value if isinstance(value, dict): result = find_key_recursively(value, search_key) if result is not None: return result return None # Example demonstrating the function's usage example_dict = { 'a': 10, 'b': {'ba': 20, 'bb': {'bba': 30}}, 'c': 40 } # Searches for 'bba', which should return 30 print(find_key_recursively(example_dict, 'bba')) # Output: 30 # Searches for a key that does not exist, which should return None print(find_key_recursively(example_dict, 'd')) # Output: None"},{"question":"Write a program to sort an array of integers such that all prime numbers appear before non-prime numbers, while keeping the relative order of the prime and non-prime numbers the same. The input will be a single line containing integers separated by spaces. Ensure to include input validation to verify that the input contains only integers.","solution":"def is_prime(num): Returns True if the given number is prime, otherwise False. if num <= 1: return False if num == 2: return True # 2 is the only even prime number if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sort_array(array): Sorts the array such that prime numbers come before non-prime numbers. primes = [num for num in array if is_prime(num)] non_primes = [num for num in array if not is_prime(num)] return primes + non_primes def parse_input(input_str): Parses the input string and returns a list of integers if valid. Raises ValueError if the input contains non-integer values. try: return list(map(int, input_str.split())) except ValueError: raise ValueError(\\"Input contains non-integer values. Only integers are allowed.\\")"},{"question":"Given an integer array \`nums\` and an integer \`k\`, your task is to return the maximum sum of a subarray of length \`k\`. A subarray is a contiguous part of an array. Write a function that takes two arguments: 1. \`nums\`: an array of integers 2. \`k\`: an integer The function should return an integer representing the maximum sum of any subarray of length \`k\`. Constraints: - \`1 <= nums.length <= 10^5\` - \`1 <= k <= nums.length\` - \`-10^4 <= nums[i] <= 10^4\` **Example**: \`\`\`python def max_subarray_sum(nums, k): # Your code here # Example 1 nums = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 Output: 39 Explanation: The subarray [4, 2, 10, 23] has the maximum sum of 39. # Example 2 nums = [-1, -2, -3, -4, -5, -6, -7, -8, -9] k = 3 Output: -6 Explanation: The subarray [-1, -2, -3] has the maximum sum of -6. \`\`\` Use the sliding window technique to solve the problem efficiently.","solution":"def max_subarray_sum(nums, k): Returns the maximum sum of a subarray of length k. Args: nums: List of integers. k: Integer, length of subarray. Returns: Integer, maximum sum of any subarray of length k. # Initialize the sum of the first window window_sum = sum(nums[:k]) max_sum = window_sum # Slide the window over the array, compute sums efficiently for i in range(k, len(nums)): window_sum = window_sum + nums[i] - nums[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Create a function that takes a string as input and returns a dictionary with the count of each unique character in the string, ignoring case sensitivity and excluding non-alphabetic characters. \\"Hello, World!\\"","solution":"def count_unique_chars(s): Takes a string as input and returns a dictionary with the count of each unique character in the string, ignoring case sensitivity and excluding non-alphabetic characters. s = s.lower() char_count = {} for char in s: if char.isalpha(): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Create a Python function that takes an input string containing both alphabets and digits and separates them into two distinct strings: one containing only the alphabets and the other containing only the digits. The function should return a tuple of these two strings. Example Input: \\"a1b2c3\\" Example Output: (\\"abc\\", \\"123\\")","solution":"def separate_alphabets_digits(input_string): Separates the input string into two distinct strings: one containing only alphabets and the other containing only digits. Args: input_string (str): The string containing both alphabets and digits. Returns: tuple: A tuple containing two strings. The first string contains only the alphabets, and the second string contains only the digits. alphabets = ''.join([char for char in input_string if char.isalpha()]) digits = ''.join([char for char in input_string if char.isdigit()]) return (alphabets, digits)"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is replaced with the product of all other integers in the original list except the one at the current position. Do not use division in your implementation.","solution":"def product_except_self(nums): Returns a new list where each integer is replaced with the product of all other integers in the original list except the one at the current position. length = len(nums) if length == 0: return [] # Initialize the left and right products left_products = [1] * length right_products = [1] * length # Calculate left products for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying left and right products result = [1] * length for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Design a function in Python named \\"find_top_k_frequent\\" that takes a list of integers and an integer k. Your task is to return the k most frequent elements in the list. In case of a tie (multiple elements with the same frequency), sort the elements in ascending order. Use appropriate data structures to ensure optimal performance. Include necessary validations and edge case handling.","solution":"from collections import Counter from heapq import nlargest def find_top_k_frequent(nums, k): Returns the k most frequent elements in the list nums. In case of a tie, the elements are sorted in ascending order. if not isinstance(nums, list) or not all(isinstance(x, int) for x in nums): raise ValueError(\\"Input must be a list of integers\\") if not isinstance(k, int) or k < 1: raise ValueError(\\"k must be a positive integer\\") if not nums: return [] count = Counter(nums) result = nlargest(k, sorted(count), key=count.get) return result"},{"question":"Create a Python function that reads a list of words from an external file and identifies all the anagrams among them. Your solution should return a dictionary where the keys are the sorted characters of the words and the values are lists of words that are anagrams of one another from the input list. Ensure your code handles edge cases, such as different word lengths and special characters, effectively.","solution":"def find_anagrams(file_path): Reads a list of words from a file and returns a dictionary of anagrams. :param file_path: Path to the input file containing one word per line :return: A dictionary where the keys are sorted characters and the values are lists of anagrams from collections import defaultdict anagram_dict = defaultdict(list) with open(file_path, \\"r\\") as file: for line in file: word = line.strip() sorted_word = \\"\\".join(sorted(word)) anagram_dict[sorted_word].append(word) return anagram_dict"},{"question":"Given an array of integers, where each integer represents the height of a bar in a histogram. Each bar has a width of 1. Find the maximum possible rectangle's area that can be drawn between the bars. You are not allowed to use any in-built functions or libraries to solve this problem. Your solution should only use loops and conditionals. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle has an area of 10 units, formed by the bars with heights [5, 6]. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle has an area of 4 units, formed by the bars with heights [2, 4]. Constraints: \`1 <= heights.length <= 10^4\` \`0 <= heights[i] <= 10^4\` Follow up: Your solution should be efficient for the given constraints. Analyze the time complexity of your approach.","solution":"def largestRectangleArea(heights): Given an array of integers representing the heights of a histogram's bars, returns the area of the largest rectangle in the histogram. max_area = 0 stack = [] index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Write a Python function that takes an integer \`n\` and returns the \`n\`th Fibonacci number. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n ≥ 2 The function should handle larger values of \`n\` efficiently.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 if n == 1: return 1 prev, curr = 0, 1 for _ in range(2, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"Design an algorithm in Python that simulates a simple shopping cart system for an online store. The script should be able to add items to the cart, remove items, and calculate the total cost of items in the cart. Additionally, include functionality to apply discount codes to the total cost. Introduce purposeful errors in the initial implementation, such as incorrect calculations, faulty discount application, and issues with item addition or removal. Inspect and debug these errors, providing the corrected code to ensure the shopping cart system functions as expected.","solution":"class ShoppingCart: def __init__(self): self.items = [] def add_item(self, name, price, quantity): self.items.append({'name': name, 'price': price, 'quantity': quantity}) def remove_item(self, name): self.items = [item for item in self.items if item['name'] != name] def total_cost(self): total = sum(item['price'] * item['quantity'] for item in self.items) return total def apply_discount(self, discount_code): total = self.total_cost() if discount_code == \\"DISCOUNT10\\": total = total * 0.9 elif discount_code == \\"DISCOUNT20\\": total = total * 0.8 return total"},{"question":"Write a Python function \`max_difference\` that takes a list of integers and returns the maximum difference between any two elements in the list such that the larger integer comes after the smaller integer in the list. If the list has fewer than two elements, the function should return 0. The function should not use the built-in \`max\` or \`min\` functions. \`\`\`python def max_difference(nums: list) -> int: Given a list of integers, returns the maximum difference between any two elements such that the larger element comes after the smaller one. Args: nums: List of integers. Returns: An integer representing the maximum difference. Returns 0 if the list has fewer than two elements. # Implement your code here # Test cases print(max_difference([2, 3, 10, 6, 4, 8, 1])) # Output: 8 (10 - 2) print(max_difference([7, 9, 5, 6, 3, 2])) # Output: 2 (9 - 7) print(max_difference([1])) # Output: 0 (less than two elements) print(max_difference([10, 8, 7, 6, 5])) # Output: 0 (no element greater than previous ones) \`\`\`","solution":"def max_difference(nums: list) -> int: Given a list of integers, returns the maximum difference between any two elements such that the larger element comes after the smaller one. Args: nums: List of integers. Returns: An integer representing the maximum difference. Returns 0 if the list has fewer than two elements. if len(nums) < 2: return 0 min_value = nums[0] max_diff = 0 for num in nums[1:]: if num - min_value > max_diff: max_diff = num - min_value if num < min_value: min_value = num return max_diff"},{"question":"Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. \`\`\`python phone_mapping = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz' } \`\`\` Write a function \`letter_combinations\` that takes a string of digits as input and returns a list of all possible letter combinations. The function should handle the input efficiently and consider edge cases such as an empty input string. \`\`\`python def letter_combinations(digits): # Your implementation here pass # Test the function with example inputs print(letter_combinations(\\"23\\")) # Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] \`\`\` 1. Implement the \`letter_combinations\` function. 2. Explain the approach used to generate the combinations. 3. Discuss the time complexity of your solution.","solution":"def letter_combinations(digits): Returns all possible letter combinations that the given digits could represent. if not digits: return [] phone_mapping = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return letters = phone_mapping[digits[index]] for letter in letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Write a function that takes an array of integers and a target sum as input. The function should find all unique pairs of elements in the array whose sum equals the target sum. Each pair should be returned as a tuple, and the function should return a set of these tuples. The order of elements in each tuple doesn't matter, and pairs considered the same regardless of the order should not be duplicated in the set. Example Input: arr = [2, 4, 3, 5, 7, 8, 1, 9] target_sum = 10 Example Output: {(1, 9), (3, 7), (2, 8)}","solution":"def find_pairs_with_sum(arr, target_sum): Finds all unique pairs of elements in the array whose sum equals the target sum. Each pair is returned as a tuple and added to a set. seen = set() output = set() for num in arr: complement = target_sum - num if complement in seen: pair = tuple(sorted((num, complement))) output.add(pair) seen.add(num) return output"},{"question":"Write a function that takes a list of integers and returns the list sorted in ascending order using the QuickSort algorithm. Your implementation should handle edge cases such as an empty list, a list with one element, and a list with all identical elements. Additionally, the function should not use Python's built-in sorting methods.","solution":"def quicksort(arr): Sorts a list of integers in ascending order using the QuickSort algorithm. Parameters: arr (list): A list of integers. Returns: list: The sorted list in ascending order. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a function in your chosen programming language that returns the sum of all prime numbers up to a given integer \`n\`. The function should take an integer \`n\` as input and return the sum of all prime numbers less than or equal to \`n\`. For example, given \`n = 10\`, your function should return \`17\`, as the prime numbers less than or equal to \`10\` are \`2, 3, 5,\` and \`7\`. Additionally, illustrate a scenario where an inefficient implementation (like checking divisibility for each number up to \`n\`) might fail to perform well for larger values of \`n\` and suggest an optimized approach (such as using the Sieve of Eratosthenes) to solve the problem. Example of inefficient implementation: \`\`\`python def sum_primes(n): def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True total = 0 for i in range(2, n+1): if is_prime(i): total += i return total \`\`\` Explain why this code is inefficient for larger values of \`n\`. Provide an optimized version that performs better for larger inputs. \`\`\`python def sum_primes(n): sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return sum(idx for idx, is_prime in enumerate(sieve) if is_prime) \`\`\`","solution":"def sum_primes(n): Returns the sum of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. if n < 2: return 0 sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start * start, n + 1, start): sieve[multiple] = False return sum(idx for idx, is_prime in enumerate(sieve) if is_prime)"},{"question":"Write a Python function that takes a list of integers and returns a list of those integers that are prime numbers. Example input: [10, 11, 15, 18, 19, 21, 23] Example output: [11, 19, 23] \`\`\`python def get_prime_numbers(numbers): def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True return [num for num in numbers if is_prime(num)] # Example usage: numbers = [10, 11, 15, 18, 19, 21, 23] print(get_prime_numbers(numbers)) # Output: [11, 19, 23] \`\`\`","solution":"def get_prime_numbers(numbers): Returns a list of prime numbers from the input list of integers. def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True return [num for num in numbers if is_prime(num)] # Example usage: numbers = [10, 11, 15, 18, 19, 21, 23] print(get_prime_numbers(numbers)) # Output: [11, 19, 23]"},{"question":"Write a function that simulates an elevator system in a building with a given number of floors. The program should handle two types of commands: 1. \`CALL <floor_number>\`: This command simulates a user calling the elevator to the specified floor. 2. \`DESTINATION <floor_number>\`: This command simulates a user inside the elevator pressing the button for the desired floor. The elevator starts at the ground floor (floor number 0). Your program should process a list of commands, return the sequence of floors that the elevator travels through, and handle multiple commands efficiently. For example, if the input commands are: \`\`\` CALL 3 CALL 5 DESTINATION 2 CALL 1 DESTINATION 4 DESTINATION 6 \`\`\` The output should show the sequence of floors the elevator visits as it processes each command in the given order, considering the optimal path to minimize travel time and stops. Your task is to implement the function with the following signature: \`\`\`python def elevator_system(commands): \`\`\` Input: - A list of commands in the format specified. Output: - A list of integers representing the floors visited by the elevator in sequence.","solution":"def elevator_system(commands): Simulates an elevator system in a building. Parameters: commands (List[str]): A list of commands in the format specified (i.e., \\"CALL <floor_number>\\" or \\"DESTINATION <floor_number>\\"). Returns: List[int]: The sequence of floors that the elevator travels through. current_floor = 0 floors_visited = [current_floor] call_queue = [] destination_queue = [] for command in commands: cmd, floor = command.split() floor = int(floor) if cmd == \\"CALL\\": if floor not in call_queue and floor not in destination_queue: call_queue.append(floor) elif cmd == \\"DESTINATION\\": if floor not in destination_queue: destination_queue.append(floor) all_floors = sorted(set(call_queue + destination_queue)) for floor in all_floors: if floor not in floors_visited: floors_visited.append(floor) return floors_visited"},{"question":"Write a function that emulates a UNIX \`tail\` command, which outputs the last 10 lines of a text file. Your function should accept two parameters: the file path and the number of lines to output (defaulting to 10 if not specified). You must ensure the function efficiently handles large files. Provide a sample implementation in Python.","solution":"def tail(file_path, num_lines=10): Emulates the UNIX \`tail\` command. Reads the last \`num_lines\` lines from the file at \`file_path\`. with open(file_path, 'rb') as f: # Move to the end of the file f.seek(0, 2) file_size = f.tell() buffer_size = 1024 buffer = b'' blocked_lines = [] # Search for lines in the file, starting from the end while len(blocked_lines) <= num_lines and file_size > 0: if file_size < buffer_size: buffer_size = file_size file_size -= buffer_size f.seek(file_size) buffer = f.read(buffer_size) + buffer blocked_lines = buffer.split(b'n') # Join the last \`num_lines\` lines return b'n'.join(blocked_lines[-num_lines:]).decode('utf-8')"},{"question":"Create a function \`matrix_diagonal_diff\` that computes the absolute difference between the sums of the matrix's two diagonals. The function should accept a square matrix (2D list) as input. Ensure the function raises appropriate exceptions for invalid inputs, such as when the input is not a square matrix or is not a list of lists of integers. Include test cases to demonstrate the function's behavior for various valid and invalid inputs. \`\`\`python class InvalidMatrixException(Exception): pass def matrix_diagonal_diff(matrix): if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): raise InvalidMatrixException(\\"Input must be a list of lists\\") n = len(matrix) if not all(len(row) == n for row in matrix): raise InvalidMatrixException(\\"Input must be a square matrix\\") for row in matrix: if not all(isinstance(elem, int) for elem in row): raise InvalidMatrixException(\\"All elements must be integers\\") primary_diag_sum = sum(matrix[i][i] for i in range(n)) secondary_diag_sum = sum(matrix[i][n - i - 1] for i in range(n)) return abs(primary_diag_sum - secondary_diag_sum) # Test cases try: print(matrix_diagonal_diff([[1, 2], [3, 4]])) # Expected output: 0 print(matrix_diagonal_diff([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) # Expected output: 0 print(matrix_diagonal_diff([[1, 2], [3, '4']])) # Should raise InvalidMatrixException except InvalidMatrixException as e: print(e) try: print(matrix_diagonal_diff([[1, 2], [3, 4, 5]])) # Should raise InvalidMatrixException except InvalidMatrixException as e: print(e) try: print(matrix_diagonal_diff([1, 2, 3])) # Should raise InvalidMatrixException except InvalidMatrixException as e: print(e) \`\`\`","solution":"class InvalidMatrixException(Exception): pass def matrix_diagonal_diff(matrix): if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix): raise InvalidMatrixException(\\"Input must be a list of lists.\\") n = len(matrix) if not all(len(row) == n for row in matrix): raise InvalidMatrixException(\\"Input must be a square matrix.\\") for row in matrix: if not all(isinstance(elem, int) for elem in row): raise InvalidMatrixException(\\"All elements must be integers.\\") primary_diag_sum = sum(matrix[i][i] for i in range(n)) secondary_diag_sum = sum(matrix[i][n - i - 1] for i in range(n)) return abs(primary_diag_sum - secondary_diag_sum)"},{"question":"Write a function that takes a list of non-negative integers and returns a new list where each integer is replaced with the product of all other integers in the list except for the one at the current position. You are not allowed to use the division operator in your solution. Ensure that your implementation has a time complexity of O(n) and space complexity of O(n).","solution":"def product_except_self(nums): Given a list of non-negative integers, return a new list where each integer is replaced with the product of all other integers in the list except for the one at the current position. This implementation does not use the division operator and has O(n) time and space complexity. length = len(nums) # Initialize the result array with 1s result = [1] * length # Fill result array with products of elements to the left of each index left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Fill result array with products of elements to the right of each index right_product = 1 for i in range(length-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a Python function that accepts a list of strings and calculates the longest common prefix (LCP) among them. Your function should return the LCP if it exists; otherwise, it should return an empty string. For example, for the input \`[\\"flower\\", \\"flow\\", \\"flight\\"]\`, the function should return \`\\"fl\\"\`, while for input \`[\\"dog\\", \\"racecar\\", \\"car\\"]\`, it should return an empty string \`\\"\\"\`.","solution":"def longest_common_prefix(strs): Finds and returns the longest common prefix among a list of strings. Args: strs (list of str): List of strings to find the common prefix. Returns: str: The longest common prefix or an empty string if there is none. if not strs: return \\"\\" # Sort the array, so the potential common prefixes are aligned strs.sort() # The first and the last string will have the shortest common prefix first = strs[0] last = strs[-1] i = 0 while i < len(first) and i < len(last) and first[i] == last[i]: i += 1 return first[:i]"},{"question":"Design a Python function that takes a list of integers and returns a new list that contains only the prime numbers from the original list. Ensure the solution is efficient by implementing an optimal primality test. Next, write a unit test for this function using the unittest framework in Python. Your test should cover a variety of cases, including an empty list, a list with no prime numbers, a list with all prime numbers, and a list with a mix of prime and non-prime numbers. Furthermore, provide an example of inefficient code for this task and explain why it is suboptimal compared to your solution.","solution":"from math import isqrt def is_prime(n): Returns True if the number n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Returns a list of prime numbers from the given list of integers. return [num for num in nums if is_prime(num)]"},{"question":"Implement a function \`pair_with_sum\` that accepts a list of integers and a target sum as arguments and returns a tuple containing a pair of indices of the elements in the list that add up to the target sum. If no such pair exists, return \`None\`. Ensure your implementation has a time complexity of O(n). For example: \`\`\`python def pair_with_sum(nums, target): # Your code here # Examples print(pair_with_sum([2, 7, 11, 15], 9)) # Output: (0, 1) print(pair_with_sum([1, 2, 3, 4, 5], 10)) # Output: None \`\`\`","solution":"def pair_with_sum(nums, target): Finds two numbers in nums that add up to the target sum and returns their indices as a tuple. If no such pair exists, returns None. seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Create a function \`even_odd_sort\` that takes a list of integers and sorts the list such that all the even numbers come before all the odd numbers. The even and odd numbers should remain in their original relative order from the input list. The function should return the sorted list. For example, given the list \`[3, 8, 5, 12, 10, 15, 7, 2]\`, the function should return \`[8, 12, 10, 2, 3, 5, 15, 7]\`.","solution":"def even_odd_sort(nums): Sorts the list such that all the even numbers come before all the odd numbers, while maintaining their original relative order. Args: nums (list of int): List of integers to sort. Returns: list of int: Sorted list where evens come before odds. evens = [x for x in nums if x % 2 == 0] odds = [x for x in nums if x % 2 != 0] return evens + odds"},{"question":"Given a list of words, find the word that forms the maximum number of unique anagrams. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your task is to write a function that finds the word in the list that has the highest number of unique anagrams. If there is a tie, return the word that appears first in the list. The input will be a list of words, and the output should be the word with the maximum number of unique anagrams. Note that words are case-sensitive and should be treated as distinct if their cases differ (e.g., \\"abc\\" and \\"Abc\\" are different words). # Example Input: [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"zyx\\", \\"Aabc\\"] Output: \\"abc\\" Input: [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"silent\\"] Output: \\"listen\\" # Constraints - The length of each word in the given list will not exceed 50. - The number of words in the given list will be in the range of [2, 100]. - You may assume that all characters in the words are alphabetic and case-sensitive. Write a function: \`\`\`python def max_unique_anagrams(words: List[str]) -> str: # Your code here \`\`\`","solution":"from collections import defaultdict from typing import List def max_unique_anagrams(words: List[str]) -> str: Finds the word that forms the maximum number of unique anagrams. Args: words (List[str]): A list of words. Returns: str: The word with the maximum number of unique anagrams. anagram_dict = defaultdict(set) for word in words: sorted_word = ''.join(sorted(word)) anagram_dict[sorted_word].add(word) max_anagram_word = \\"\\" max_anagrams_count = 0 for word in words: sorted_word = ''.join(sorted(word)) current_count = len(anagram_dict[sorted_word]) if current_count > max_anagrams_count: max_anagram_word = word max_anagrams_count = current_count return max_anagram_word"},{"question":"Implement a function that simulates a simple ticket booking system for a small theater. The theater has a seating arrangement in a grid of rows and columns, where each seat can either be occupied or available. The function should accept a specific seat request (given by row and column index) and return whether the seat can be booked (i.e., whether it is available). If the seat is available, the function should mark it as occupied. If not, it should provide an appropriate message. Additionally, implement a function to reset the seating arrangement to make all seats available again. Write test cases to validate your implementation and explain your reasoning behind them.","solution":"class Theater: def __init__(self, rows, cols): Initialize the theater with given rows and columns as a grid of available seats (denoted by True). self.rows = rows self.cols = cols self.seats = [[True for _ in range(cols)] for _ in range(rows)] def book_seat(self, row, col): Tries to book a seat at the specified row and column. Returns a message indicating if the seat was successfully booked or if it was already occupied. if row >= self.rows or col >= self.cols: return \\"Seat request is out of bounds!\\" if self.seats[row][col]: self.seats[row][col] = False return \\"Seat successfully booked.\\" else: return \\"Seat is already occupied.\\" def reset_seating(self): Resets all seats to be available. self.seats = [[True for _ in range(self.cols)] for _ in range(self.rows)] # Example usage theater = Theater(5, 5) print(theater.book_seat(1, 1)) # Should print \\"Seat successfully booked.\\" print(theater.book_seat(1, 1)) # Should print \\"Seat is already occupied.\\" print(theater.book_seat(6, 6)) # Should print \\"Seat request is out of bounds!\\" theater.reset_seating()"},{"question":"Write a program that simulates a basic inventory management system for a small shop. The system should support the following functionalities: 1. **Add a new item** with a name, price, and quantity. 2. **Update the quantity** of an existing item. 3. **Update the price** of an existing item. 4. **Remove an item** from the inventory. 5. **Display all items** in the inventory sorted by their name. Each operation should be performed through a function, and your program should start with an empty inventory. Ensure that your inventory is stored in a suitable data structure for efficient retrieval and updates.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, name, price, quantity): self.items[name] = {'price': price, 'quantity': quantity} def update_quantity(self, name, quantity): if name in self.items: self.items[name]['quantity'] = quantity def update_price(self, name, price): if name in self.items: self.items[name]['price'] = price def remove_item(self, name): if name in self.items: del self.items[name] def display_items(self): sorted_items = sorted(self.items.items()) for name, details in sorted_items: print(f\\"Name: {name}, Price: {details['price']}, Quantity: {details['quantity']}\\") return sorted_items # For testing purposes"},{"question":"Write a function that finds the longest palindromic subsequence in a given string. A palindromic subsequence is a sequence that reads the same backward as forward, but it does not need to be contiguous. Your function should return both the length of this longest subsequence and the subsequence itself. **Input:** - A string \`s\` of length \`n\` where \`1 <= n <= 1000\`. **Output:** - An integer representing the length of the longest palindromic subsequence. - A string representing the longest palindromic subsequence. If there are multiple subsequences of the same maximum length, return any one of them. **Example:** \`\`\` Input: \\"agbdba\\" Output: 5, \\"abdba\\" Input: \\"cbbd\\" Output: 2, \\"bb\\" \`\`\` **Note:** Consider time complexity and aim for an efficient algorithm to solve the problem.","solution":"def longest_palindromic_subsequence(s): Finds the longest palindromic subsequence in a given string. :param s: Input string :return: A tuple containing the length of the longest palindromic subsequence and the subsequence itself. n = len(s) # Create a 2D table to store the length of palindromic subsequence dp = [[0 for _ in range(n)] for _ in range(n)] # All substrings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table for cl in range(2, n+1): # cl is the length of substring for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # The length of LPS is at dp[0][n-1] lps_length = dp[0][n-1] # Create a character array to store the lps lps = [''] * lps_length i, j = 0, n - 1 start, end = 0, lps_length - 1 while i <= j: if s[i] == s[j]: lps[start] = s[i] lps[end] = s[j] i += 1 j -= 1 start += 1 end -= 1 elif dp[i][j-1] > dp[i+1][j]: j -= 1 else: i += 1 return lps_length, ''.join(lps)"},{"question":"Create a function that accepts a list of unsorted integers and a target integer value. The function should return the indices of the two numbers in the list that add up to the target value. If no such pair exists, the function should return an empty list. Assume that each input will have exactly one solution, and you may not use the same element twice. The function should optimize for both time and space complexity. The output indices should be in ascending order. For example, given the list: [4, 7, 1, -3, 2] and the target: 5, the function should return [0, 1] since 4 + 1 = 5.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list that add up to the target value. If no such pair exists, the function returns an empty list. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: # Return sorted indices return sorted([num_dict[complement], i]) num_dict[num] = i return []"},{"question":"Given an array of integers, write a function that returns the second largest number in the array. Note that the array contains at least two distinct integers. Function Signature: \`\`\`python def second_largest(arr: List[int]) -> int: pass \`\`\` # Example: \`\`\`python assert second_largest([10, 20, 4, 45, 99]) == 45 assert second_largest([1, 2, 3, 4]) == 3 \`\`\` # Constraints: - The array will have at least two distinct integers.","solution":"from typing import List def second_largest(arr: List[int]) -> int: Returns the second largest number in the array. first, second = float('-inf'), float('-inf') for number in arr: if number > first: second = first first = number elif number > second and number != first: second = number return second"},{"question":"Write a function that takes a list of integers and returns a new list with each element incremented by 1. For example, given the list [1, 2, 3], the function should return [2, 3, 4].","solution":"def increment_list_elements(input_list): Takes a list of integers and returns a new list with each element incremented by 1. Args: input_list (list): A list of integers. Returns: list: A new list with each element incremented by 1. return [x + 1 for x in input_list]"},{"question":"In the provided code, enhance the implementation to handle both nested collections and primitive data types: Extend the given function to flatten nested collections into a single list. The function should work with both lists and tuples containing integers. Handle edge cases like empty nested collections or mixed types within the same nesting level. Here is the original function that needs modification: FIX = Enhance the given function to handle nested collections and primitive data types effectively. def flatten_collection(nested): Define a function flatten_collection that takes a nested collection (list or tuple) and returns a single list of integers. Flatten input collections by recursively extracting integers from nested lists or tuples. Example: >>> flatten_collection([1, [2, 3, [4]], (5, 6, [7, [8, 9]])]) [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> flatten_collection((1, (2, 3), [4, (5,)])) [1, 2, 3, 4, 5] >>> flatten_collection([]) [] >>> flatten_collection(((), [(), [()]])) [] >>> flatten_collection([1, (2, 'three'), 4]) ValueError: Collection must contain only integers.","solution":"def flatten_collection(nested): Takes a nested collection (list or tuple) and returns a single list of integers. Flatten input collections by recursively extracting integers from nested lists or tuples. Args: nested: A nested collection (list or tuple) of integers. Returns: A single list of integers. Raises: ValueError: If any of the elements are not integers, lists, or tuples. Example: >>> flatten_collection([1, [2, 3, [4]], (5, 6, [7, [8, 9]])]) [1, 2, 3, 4, 5, 6, 7, 8, 9] >>> flatten_collection((1, (2, 3), [4, (5,)])) [1, 2, 3, 4, 5] >>> flatten_collection([]) [] >>> flatten_collection(((), [(), [()]])) [] >>> flatten_collection([1, (2, 'three'), 4]) Traceback (most recent call last): ... ValueError: Collection must contain only integers. if isinstance(nested, (list, tuple)): result = [] for item in nested: result.extend(flatten_collection(item)) return result elif isinstance(nested, int): return [nested] else: raise ValueError(\\"Collection must contain only integers.\\")"},{"question":"Design a function in Python that takes a list of integers and returns a new list where each integer is replaced by the product of all other integers in the original list except the integer at that position. Ensure that your function operates with a time complexity of O(n), and that you handle edge cases, such as the presence of zeroes in the list, appropriately.","solution":"def product_except_self(nums): Returns a list where each element is the product of all elements in nums except itself. Args: nums: List of integers Returns: A list of integers n = len(nums) if n == 0: return [] # Generate prefix products prefix_products = [1] * n for i in range(1, n): prefix_products[i] = prefix_products[i - 1] * nums[i - 1] # Generate suffix products and output using prefix products suffix_product = 1 for i in range(n - 1, -1, -1): prefix_products[i] *= suffix_product suffix_product *= nums[i] return prefix_products"},{"question":"Write a Python function that takes in a list of integers and returns the sum of all the odd numbers, while ignoring the even numbers. The function should not use any in-built functions such as \`sum()\`, \`filter()\`, or list comprehensions. Example: Input: [10, 3, 5, 12, 17, 6, 8] Output: 25 (since 3 + 5 + 17 = 25)","solution":"def sum_of_odds(numbers): Returns the sum of all odd numbers in the provided list. :param numbers: List of integers :return: Sum of the odd numbers total = 0 for number in numbers: if number % 2 != 0: total += number return total"},{"question":"Given a list of integers, write a function that finds the subarray with the maximum sum and returns that sum. The integers in the list can be both positive and negative, and the list may contain up to 10^5 elements. Example: Input: \`[-2,1,-3,4,-1,2,1,-5,4]\` Output: \`6\` Explanation: The subarray with the maximum sum is \`[4,-1,2,1]\` which has a sum of \`6\`.","solution":"def max_subarray_sum(nums): Finds the subarray with the maximum sum in a list of integers and returns that sum. :param nums: List[int], a list of integers :return: int, the sum of the subarray with the maximum sum if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of stock prices for a company for N consecutive days. Write a Python function that calculates the maximum profit you could have made by buying and then later selling exactly one share of the stock within these N days. You must buy the stock before you can sell it, and you cannot sell the stock before you buy it. The function should have the following signature: \`\`\`python def max_profit(prices: List[int]) -> int: \`\`\` # Input - \`prices\`: a list of integers representing the stock prices on each day. # Output - Returns an integer representing the maximum profit possible. If no profit is possible, return 0. # Example \`\`\`python assert max_profit([7, 1, 5, 3, 6, 4]) == 5 # Buy on day 2 (price=1) and sell on day 5 (price=6) -> profit = 6-1 = 5 assert max_profit([7, 6, 4, 3, 1]) == 0 # No profit possible assert max_profit([3, 3, 5, 0, 0, 3, 1, 4]) == 4 # Buy on day 4 (price=0) and sell on day 8 (price=4) -> profit = 4-0 = 4 \`\`\` # Constraints - 1 <= N <= 10^5 - 0 <= prices[i] <= 10^4","solution":"def max_profit(prices): Calculates the maximum profit from buying and selling one stock. :param prices: List[int] - List of stock prices. :return: int - Maximum possible profit, or 0 if no profit is possible. if not prices: return 0 min_price = float('inf') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Write a function that takes an array of integers as input and returns the sum of all the even numbers in the array. If the array is empty or contains no even numbers, the function should return 0. Example: \`\`\`python def sum_even_numbers(arr): # Your code here # Sample Input arr = [1, 2, 3, 4, 5] # Sample Output 6 \`\`\`","solution":"def sum_even_numbers(arr): Returns the sum of all the even numbers in the array. If the array is empty or contains no even numbers, returns 0. return sum(num for num in arr if num % 2 == 0)"},{"question":"Write a function that takes a string consisting of lowercase letters and returns the first non-repeated character in it. If all characters are repeated, return an empty string. Example: Input: \\"swiss\\" Output: \\"w\\" Input: \\"aabbcc\\" Output: \\"\\"","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in a string. If all characters are repeated, returns an empty string. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeated character for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a Python function to determine if a given string is a valid palindrome, ignoring non-alphanumeric characters and considering only alphanumeric characters. The function should be case-insensitive. Additionally, provide a piece of erroneous code that attempts to solve this problem but fails due to a logical error. Analyze and explain why the erroneous code doesn't work and correct it. The function should not use any built-in Python functions or libraries to directly solve the problem.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, ignoring non-alphanumeric characters and case. def is_alphanumeric(c): return ('a' <= c <= 'z') or ('A' <= c <= 'Z') or ('0' <= c <= '9') def to_lower(c): if 'A' <= c <= 'Z': return chr(ord(c) + 32) return c cleaned = [] for char in s: if is_alphanumeric(char): cleaned.append(to_lower(char)) left, right = 0, len(cleaned) - 1 while left < right: if cleaned[left] != cleaned[right]: return False left += 1 right -= 1 return True def is_palindrome_erroneous(s): Erroneous implementation that tries to solve the same problem. def is_alphanumeric(c): return ('a' <= c <= 'z') or ('A' <= c <= 'Z') or ('0' <= c <= '9') def to_lower(c): if 'A' <= c <= 'Z': return chr(ord(c) + 32) return c cleaned = [] for char in s: if is_alphanumeric(char): cleaned.append(to_lower(char)) return cleaned == cleaned[::-1] # Analyze and explain why the erroneous code doesn't work: # # The erroneous code will work correctly for checking if a string is a palindrome or not by comparing the cleaned list to its reverse. # The issue in this problem is that it uses built-in list slicing (cleaned[::-1]) which directly solves the problem by reversing the list. # This contravenes the requirement of not using built-in Python functions or libraries to solve the problem directly."},{"question":"Your task is to create a Python function that converts a given integer into its binary representation without using the built-in \`bin()\` function. The function should take an integer as input and return a string representing the binary format of that integer. # Requirements: 1. The function should handle both positive and negative integers. 2. Ensure that negative integers are represented using two's complement binary format within a fixed size of 32 bits. 3. Do not use any built-in functions like \`bin()\` or formatting methods such as \`format()\`. # Example: \`\`\`python convert_to_binary(5) # Output: '00000000000000000000000000000101' convert_to_binary(-5) # Output: '11111111111111111111111111111011' convert_to_binary(0) # Output: '00000000000000000000000000000000' convert_to_binary(1) # Output: '00000000000000000000000000000001' convert_to_binary(-1) # Output: '11111111111111111111111111111111' \`\`\` Implement the \`convert_to_binary\` function that follows the criteria mentioned above.","solution":"def convert_to_binary(n): Converts a given integer to its binary representation as a string of 32 bits in two's complement. Parameters: n (int): The integer to be converted. Returns: str: A string representing the 32-bit binary representation of the input integer. if n < 0: n = (1 << 32) + n bits = [] for i in range(31, -1, -1): bits.append('1' if (n & (1 << i)) else '0') return ''.join(bits)"},{"question":"Write a Python function called \`list_multiples\` that takes two parameters: a positive integer \`n\` and a positive integer \`limit\`. The function should return a list of all multiples of \`n\` up to (and including) \`limit\`. If \`n\` is greater than \`limit\`, the function should return an empty list. For example: \`\`\`python list_multiples(3, 20) \`\`\` should return \`\`\`python [3, 6, 9, 12, 15, 18] \`\`\` and \`\`\`python list_multiples(5, 25) \`\`\` should return \`\`\`python [5, 10, 15, 20, 25] \`\`\` Ensure your function handles edge cases correctly and performs efficiently.","solution":"def list_multiples(n, limit): Returns a list of all multiples of n up to (and including) limit. if n > limit: return [] multiples = [] multiple = n while multiple <= limit: multiples.append(multiple) multiple += n return multiples"},{"question":"Given an unsorted array of integers, write a function that finds the first occurrence of the largest element. If the array is empty, return -1. For example, given the array \`[3, 7, 2, 5, 7, 4]\`, the output should be \`1\` since the largest element is \`7\` and its first occurrence is at index \`1\`.","solution":"def find_first_largest(arr): Returns the index of the first occurrence of the largest element in the array. If the array is empty, returns -1. if not arr: return -1 max_value = arr[0] max_index = 0 for index in range(1, len(arr)): if arr[index] > max_value: max_value = arr[index] max_index = index return max_index"},{"question":"Write a function that detects and removes duplicate adjacent characters from a given string. If a character repeats consecutively, only one of the characters should be retained in the string. Example string: \\"aabbccddeeff\\" Expected output: \\"abcdef\\" Your function should handle edge cases such as an empty string or a string with no consecutive duplicates. Example inputs and outputs: - Input: \\"abcde\\" Output: \\"abcde\\" - Input: \\"aabbcc\\" Output: \\"abc\\" - Input: \\"\\" Output: \\"\\"","solution":"def remove_adjacent_duplicates(s): Removes duplicate adjacent characters from the given string. Parameters: s (str): The input string. Returns: str: The string with adjacent duplicates removed. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return ''.join(result)"},{"question":"Create a function \`interleave_lists\` that takes two lists of equal length and returns a single list with elements from the input lists interleaved. For example, given the lists \`[1, 2, 3]\` and \`['a', 'b', 'c']\`, the function should return \`[1, 'a', 2, 'b', 3, 'c']\`. Your solution should handle the case where input lists elements are of differing data types. Example input: \`\`\`python list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] print(interleave_lists(list1, list2)) \`\`\` Expected output: \`\`\` [1, 'a', 2, 'b', 3, 'c'] \`\`\` Another example input: \`\`\`python list1 = ['x', 'y'] list2 = [10, 20] print(interleave_lists(list1, list2)) \`\`\` Expected output: \`\`\` ['x', 10, 'y', 20] \`\`\`","solution":"def interleave_lists(list1, list2): Returns a list where elements from list1 and list2 are interleaved. Assumes both lists are of equal length. if len(list1) != len(list2): raise ValueError(\\"Both lists must have the same length\\") interleaved_list = [] for i in range(len(list1)): interleaved_list.append(list1[i]) interleaved_list.append(list2[i]) return interleaved_list"},{"question":"Design a function that takes a singly linked list and a value \`k\`, and rotates the list to the right by \`k\` places. Assume the linked list is implemented with the following structure: \`\`\`python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next \`\`\` For example, given the linked list \`1 -> 2 -> 3 -> 4 -> 5\` and \`k = 2\`, the list should be modified to \`4 -> 5 -> 1 -> 2 -> 3\`. Implement the function, ensuring it handles edge cases such as an empty list or \`k\` greater than the length of the list efficiently.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or not head.next or k == 0: return head # First, let's determine the length of the list length, current = 1, head while current.next: current = current.next length += 1 # Make the list circular current.next = head # Find the new head and tail k %= length steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"Construct a Python function to analyze a CSV file containing sales data. Each row of the CSV represents a sale with columns: \\"Item\\", \\"Price\\", \\"Quantity\\", and \\"Date\\". The function should read the CSV file, calculate and return the total sales for each item. Additionally, generate a summary indicating the item with the highest sales and the item with the highest quantity sold over the specified date range. Implement error handling to manage potential issues such as missing files, malformed data, or invalid date ranges.","solution":"import csv from collections import defaultdict def analyze_sales(csv_file_path, start_date, end_date): Analyzes the sales data from the given CSV file and returns the total sales for each item, the item with the highest sales, and the item with the highest quantity sold. Args: csv_file_path (str): The path to the CSV file. start_date (str): The start date in the format 'YYYY-MM-DD'. end_date (str): The end date in the format 'YYYY-MM-DD'. Returns: tuple: A tuple containing: - total_sales (dict): A dictionary with item names as keys and total sales as values. - highest_sales_item (str): The item with the highest sales. - highest_quantity_item (str): The item with the highest quantity sold. total_sales = defaultdict(float) total_quantity = defaultdict(int) try: with open(csv_file_path, mode='r') as file: reader = csv.DictReader(file) for row in reader: try: item = row['Item'] price = float(row['Price']) quantity = int(row['Quantity']) date = row['Date'] if start_date <= date <= end_date: total_sales[item] += price * quantity total_quantity[item] += quantity except (ValueError, KeyError) as e: print(f\\"Skipping row due to malformed data: {row}, Error: {e}\\") if not total_sales: raise ValueError(\\"No sales data found in the specified date range.\\") highest_sales_item = max(total_sales, key=total_sales.get) highest_quantity_item = max(total_quantity, key=total_quantity.get) return total_sales, highest_sales_item, highest_quantity_item except FileNotFoundError: raise FileNotFoundError(\\"The specified file was not found.\\") except Exception as e: raise e"},{"question":"Craft a function that accepts a sorted list of integers \`nums\`, where all integers appear twice except for one that appears exactly once, and returns the single integer that only appears once. Ensure the function has a logarithmic runtime complexity. Implement the function: def find_single(nums): ''' This function takes in a sorted list of integers, \`nums\`, where each integer occurs exactly twice, except for one unique integer that appears exactly once. The function should employ a logarithmic time complexity solution to identify and return the unique integer. Parameters: nums (List[int]): A sorted list of integers where every element appears twice except for one. Returns: int: The single integer that appears exactly once. Examples: >>> find_single([1, 1, 2, 3, 3, 4, 4, 8, 8]) 2 >>> find_single([1, 1, 2, 2, 3, 3, 4, 5, 5]) 4 >>> find_single([0, 1, 1]) 0 >>> find_single([2, 3, 3]) 2 '''","solution":"def find_single(nums): This function takes in a sorted list of integers, \`nums\`, where each integer occurs exactly twice, except for one unique integer that appears exactly once. The function should employ a logarithmic time complexity solution to identify and return the unique integer. Parameters: nums (List[int]): A sorted list of integers where every element appears twice except for one. Returns: int: The single integer that appears exactly once. left, right = 0, len(nums) - 1 while left < right: mid = left + (right - left) // 2 if mid % 2 == 1: mid -= 1 if nums[mid] == nums[mid + 1]: left = mid + 2 else: right = mid return nums[left]"},{"question":"Write a function that takes a positive integer \`n\` and returns the nth Fibonacci number. Ensure that the function handles large numbers efficiently. Additionally, implement a function to cache the results of previously calculated Fibonacci numbers to improve performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number. Uses memoization to cache previously calculated results for efficiency. if n <= 0: raise ValueError(\\"Input must be a positive integer\\") if n in memo: return memo[n] if n == 1: return 0 if n == 2: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a file system simulation in Python where users can create, delete, and navigate through directories and files. Implement the following functionalities: 1. \`create_file(path, content)\`: Creates a new file at the specified path and writes the given content to it. If the file already exists, it should overwrite the existing content. 2. \`read_file(path)\`: Reads and returns the content of the file at the specified path. Raise an error if the file does not exist. 3. \`create_directory(path)\`: Creates a new directory at the specified path. Raise an error if the directory already exists. 4. \`delete(path)\`: Deletes a file or directory at the specified path. If it is a directory, ensure it is empty before deleting. 5. \`change_directory(path)\`: Changes the current working directory to the specified path. Raise an error if the path does not exist or is not a directory. 6. \`list_directory()\`: Lists all files and directories in the current working directory. Ensure proper error handling for invalid paths or operations throughout the system. Provide documentation for each function and include a minimum of five unit tests to verify the accuracy and robustness of your file system simulation.","solution":"import os class FileSystem: def __init__(self): self.current_directory = \\"/\\" def create_file(self, path, content): Creates a new file at the specified path and writes the given content to it. If the file already exists, it overwrites the existing content. full_path = os.path.join(self.current_directory, path) os.makedirs(os.path.dirname(full_path), exist_ok=True) with open(full_path, 'w') as file: file.write(content) def read_file(self, path): Reads and returns the content of the file at the specified path. Raises an error if the file does not exist. full_path = os.path.join(self.current_directory, path) if not os.path.isfile(full_path): raise FileNotFoundError(f\\"File at path '{path}' does not exist.\\") with open(full_path, 'r') as file: return file.read() def create_directory(self, path): Creates a new directory at the specified path. Raises an error if the directory already exists. full_path = os.path.join(self.current_directory, path) if os.path.exists(full_path): raise FileExistsError(f\\"Directory at path '{path}' already exists.\\") os.makedirs(full_path) def delete(self, path): Deletes a file or directory at the specified path. If it is a directory, ensure it is empty before deleting. full_path = os.path.join(self.current_directory, path) if os.path.isdir(full_path): if os.listdir(full_path): raise OSError(f\\"Directory at path '{path}' is not empty.\\") os.rmdir(full_path) elif os.path.isfile(full_path): os.remove(full_path) else: raise FileNotFoundError(f\\"Path '{path}' does not exist.\\") def change_directory(self, path): Changes the current working directory to the specified path. Raises an error if the path does not exist or is not a directory. full_path = os.path.join(self.current_directory, path) if not os.path.isdir(full_path): raise NotADirectoryError(f\\"Path '{path}' is not a directory.\\") self.current_directory = full_path def list_directory(self): Lists all files and directories in the current working directory. return os.listdir(self.current_directory)"},{"question":"Write a function in Python that takes a list of integers and a target number as inputs. The function should return a tuple containing two integers from the list that add up to the target number. If no such pair exists, return None. Consider that there is exactly one solution. Example: \`\`\`python def find_pair(numbers, target): # Your code here # Example usage numbers = [2, 7, 11, 15] target = 9 result = find_pair(numbers, target) # Output should be (2, 7) or (7, 2) \`\`\`","solution":"def find_pair(numbers, target): Find two numbers in the list that add up to the target. :param numbers: List of integers :param target: Target sum :return: Tuple of two integers that add up to the target or None if no such pair exists seen = {} for num in numbers: complement = target - num if complement in seen: return (complement, num) seen[num] = True return None"},{"question":"Create a function to manage an inventory system for a small retail store. The store sells a variety of products, each with a unique identifier (ID), name, and quantity in stock. Your task is to implement functions that allow the store owner to add new products, update the stock of existing products, remove products that are no longer sold, and retrieve the current stock level of a specific product. Your solution should include: 1. A function to add a new product to the inventory. 2. A function to update the stock quantity of an existing product. 3. A function to remove a product from the inventory by its ID. 4. A function to retrieve the stock level of a specific product by its ID. Assume the system starts with an empty inventory. Design the data structures and functions necessary to support these operations efficiently. Also, include error handling for cases such as trying to update or retrieve a product that does not exist, or removing a product that is not in the inventory. Example: \`\`\`python class Inventory: def __init__(self): # initialize the inventory data structure pass def add_product(self, product_id, name, quantity): # add a new product pass def update_stock(self, product_id, quantity): # update the stock of an existing product pass def remove_product(self, product_id): # remove a product by its ID pass def get_stock(self, product_id): # get the current stock level of a product pass # Sample usage inventory = Inventory() inventory.add_product(1, \\"Apple\\", 50) inventory.add_product(2, \\"Banana\\", 30) inventory.update_stock(1, 20) current_stock = inventory.get_stock(1) # should return 20 inventory.remove_product(2) \`\`\`","solution":"class Inventory: def __init__(self): # Initialize the inventory as an empty dictionary self.inventory = {} def add_product(self, product_id, name, quantity): Adds a new product to the inventory. Parameters: product_id (int): Unique identifier for the product. name (str): Name of the product. quantity (int): Quantity of the product in stock. Returns: None if product_id in self.inventory: raise ValueError(f\\"Product ID {product_id} already exists in the inventory.\\") self.inventory[product_id] = {\\"name\\": name, \\"quantity\\": quantity} def update_stock(self, product_id, quantity): Updates the stock of an existing product. Parameters: product_id (int): Unique identifier for the product. quantity (int): New quantity of the product in stock. Returns: None if product_id not in self.inventory: raise KeyError(f\\"Product ID {product_id} does not exist in the inventory.\\") self.inventory[product_id][\\"quantity\\"] = quantity def remove_product(self, product_id): Removes a product from the inventory by its ID. Parameters: product_id (int): Unique identifier for the product. Returns: None if product_id not in self.inventory: raise KeyError(f\\"Product ID {product_id} does not exist in the inventory.\\") del self.inventory[product_id] def get_stock(self, product_id): Retrieves the current stock level of a specific product by its ID. Parameters: product_id (int): Unique identifier for the product. Returns: int: The quantity of the product in stock. if product_id not in self.inventory: raise KeyError(f\\"Product ID {product_id} does not exist in the inventory.\\") return self.inventory[product_id][\\"quantity\\"]"},{"question":"Write a function that takes an integer \`n\` and returns a list of all prime numbers less than \`n\`. Ensure your function is optimized for performance, considering the computational cost of frequent prime checks. Provide a brief explanation of your chosen algorithm's time complexity. Here are a few constraints you should consider: - The function should be written in Python. - You can assume that \`n\` will be a positive integer greater than 1. - Try to achieve a time complexity of O(n log log n).","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. The time complexity of this algorithm is O(n log log n). Parameters: n (int): The number up to which primes are to be found (exclusive). Returns: list: A list of all primes less than n. if n <= 2: return [] # Create a boolean array \\"prime[0..n-1]\\" and initialize all entries as True. prime = [True] * n p = 2 while p * p < n: if prime[p]: # Update all multiples of p as False indicating non-prime for i in range(p * p, n, p): prime[i] = False p += 1 # Collect all prime numbers return [p for p in range(2, n) if prime[p]] # Example usage # print(sieve_of_eratosthenes(30)) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"question":"Create a function that detects whether a given directed graph contains a cycle. Your function should receive an adjacency list representation of the graph. If a cycle is detected, return \`True\`; otherwise, return \`False\`. **Input:** - An adjacency list representing the directed graph. - Each key in the list is a node, and the corresponding value is a list of nodes that can be reached from this node via a directed edge. **Output:** - Return a boolean indicating whether the graph contains a cycle. **Example:** \`\`\`python # Sample Input graph = { 'A': ['B'], 'B': ['C'], 'C': ['A'] } # Sample Output True # Sample Input graph = { 'A': ['B', 'C'], 'B': ['C'], 'C': [] } # Sample Output False \`\`\`","solution":"def has_cycle(graph): Detects whether a given directed graph contains a cycle. :param graph: Dict representing an adjacency list of a directed graph :return: Boolean, True if there is a cycle, False otherwise def visit(node): if node in temp_marked: return True if node in visited: return False temp_marked.add(node) for neighbor in graph.get(node, []): if visit(neighbor): return True temp_marked.remove(node) visited.add(node) return False visited = set() temp_marked = set() for node in graph: if visit(node): return True return False"},{"question":"Implement a simplified version of a Library system using Python. Your implementation should include the following: 1. Create a Book class with the following properties: - A private attribute \`title\` to store the book's title. - A private attribute \`author\` to store the author's name. - A private attribute \`isbn\` to store the ISBN of the book. - A private attribute \`available\` to store whether the book is available for borrowing, initially set as True. 2. Provide methods in the Book class: - A constructor that takes the title, author, and ISBN as inputs and sets the corresponding attributes. - A method \`borrow()\` that sets \`available\` to False if the book is available, otherwise prints that the book is already borrowed. - A method \`return_book()\` that sets \`available\` to True if the book is not available, otherwise prints that the book was not borrowed. - A method \`display_info()\` that returns a dictionary with the book’s title, author, ISBN, and availability status. 3. Create a Library class to manage multiple Book objects with the following capabilities: - A private attribute \`books\` that stores a list of Book objects. - A method \`add_book()\` that takes a Book object and adds it to the library's books list. - A method \`remove_book()\` that takes an ISBN as input and removes the corresponding book from the library if it exists. - A method \`find_book_by_title()\` that takes a title as input and returns a list of dictionaries with the details of matching books, or an empty list if no books match. - A method \`find_book_by_author()\` that takes an author's name as input and returns a list of dictionaries with the details of matching books, or an empty list if no books match. 4. Write test cases to demonstrate the functionality of your classes and methods.","solution":"class Book: def __init__(self, title, author, isbn): self.__title = title self.__author = author self.__isbn = isbn self.__available = True def borrow(self): if self.__available: self.__available = False else: print(f\\"The book '{self.__title}' is already borrowed.\\") def return_book(self): if not self.__available: self.__available = True else: print(f\\"The book '{self.__title}' was not borrowed.\\") def display_info(self): return { 'title': self.__title, 'author': self.__author, 'isbn': self.__isbn, 'available': self.__available } class Library: def __init__(self): self.__books = [] def add_book(self, book): self.__books.append(book) def remove_book(self, isbn): for book in self.__books: if book.display_info()['isbn'] == isbn: self.__books.remove(book) break def find_book_by_title(self, title): return [book.display_info() for book in self.__books if book.display_info()['title'].lower() == title.lower()] def find_book_by_author(self, author): return [book.display_info() for book in self.__books if book.display_info()['author'].lower() == author.lower()]"},{"question":"Write a program that finds the common elements in three sorted arrays. The program should take three sorted arrays (with possible duplicates) and return a list of their common elements without duplicates. You should demonstrate your solution using both imperative programming style and list comprehensions. Here is an example code snippet that tries to achieve this but contains bugs. Identify the bugs, and then correct and improve the code: \`\`\`python def find_common_elements(arr1, arr2, arr3): i = j = k = 0 common = [] while (i < len(arr1) and j < len(arr2) and k < len(arr3)): if arr1[i] == arr2[j] == arr3[k]: common.append(arr1[i]) i += 1 j += 1 k += 1 elif arr1[i] < arr2[j]: i += 1 elif arr2[j] < arr3[k]: j += 1 else: k += 1 return common print(find_common_elements([1, 5, 5, 10], [3, 4, 5, 5, 10], [5, 5, 10, 20])) \`\`\`","solution":"def find_common_elements(arr1, arr2, arr3): Find common elements in three sorted arrays and return a list of their common elements without duplicates i = j = k = 0 common = [] while i < len(arr1) and j < len(arr2) and k < len(arr3): # Check if elements are same and also not already in common list if arr1[i] == arr2[j] == arr3[k] and (len(common) == 0 or arr1[i] != common[-1]): common.append(arr1[i]) i += 1 j += 1 k += 1 elif arr1[i] < arr2[j]: i += 1 elif arr2[j] < arr3[k]: j += 1 else: k += 1 return common def find_common_elements_comprehension(arr1, arr2, arr3): Find common elements in three sorted arrays using list comprehension and return a list of their common elements without duplicates set1, set2, set3 = set(arr1), set(arr2), set(arr3) return sorted(set1 & set2 & set3)"},{"question":"Implement a function that simulates the basic operations of a stack data structure using only basic data types like integers, strings, and lists. Your function should support the following stack operations: 1. \`push\` - Add an element to the top of the stack. 2. \`pop\` - Remove the top element from the stack and return it. If the stack is empty, return \`None\`. 3. \`peek\` - Return the top element of the stack without removing it. If the stack is empty, return \`None\`. 4. \`is_empty\` - Return \`True\` if the stack is empty, else return \`False\`. The stack operations should be performed efficiently, and you should avoid using any built-in data structures provided by your programming language beyond the basic types mentioned.","solution":"class Stack: def __init__(self): self.stack = [] def push(self, element): self.stack.append(element) def pop(self): if self.is_empty(): return None return self.stack.pop() def peek(self): if self.is_empty(): return None return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"question":"Write a Python function called \`count_alphabets\` that takes a single string as an input and returns a dictionary with the count of each alphabet present in the string. The function should be case-insensitive, meaning 'A' and 'a' should be considered the same character. Non-alphabet characters should be ignored. **Function Signature:** \`\`\`python def count_alphabets(s: str) -> Dict[str, int]: \`\`\` **Examples:** \`\`\`python assert count_alphabets(\\"Hello World!\\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1} assert count_alphabets(\\"Python 3.8\\") == {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1} assert count_alphabets(\\"\\") == {} \`\`\` **Constraints:** - The input string can have a length in the range of [0, 1000]. - All inputs are guaranteed to be in the printable ASCII range. **Hint:** Consider using a dictionary comprehension or the \`collections.Counter\` class to simplify the implementation.","solution":"def count_alphabets(s: str) -> dict: Returns a dictionary with the count of each alphabet present in the string. The function is case-insensitive and ignores non-alphabet characters. from collections import Counter # Normalize the string to lowercase and filter out non-alphabet characters filtered_string = ''.join([char.lower() for char in s if char.isalpha()]) # Use Counter to count the occurrences of each character return dict(Counter(filtered_string))"},{"question":"Context You are tasked with designing a recommendation engine for a streaming service that suggests content (such as movies, TV shows, etc.) to users based on their viewing history and preferences. The aim is to increase user engagement and viewing time on the platform. The system should consider various factors such as genre, actors, directors, release year, and user ratings to provide personalized recommendations. Sample Data \`\`\`python users = [ {\\"user_id\\": 1, \\"name\\": \\"Alice\\", \\"viewing_history\\": [\\"Movie A\\", \\"Movie C\\", \\"TV Show B\\"]}, {\\"user_id\\": 2, \\"name\\": \\"Bob\\", \\"viewing_history\\": [\\"Movie B\\", \\"Movie D\\", \\"TV Show A\\"]}, {\\"user_id\\": 3, \\"name\\": \\"Carol\\", \\"viewing_history\\": [\\"Movie A\\", \\"Movie E\\", \\"TV Show C\\"]}, ] content = [ {\\"title\\": \\"Movie A\\", \\"genre\\": \\"Action\\", \\"actors\\": [\\"Actor 1\\", \\"Actor 2\\"], \\"director\\": \\"Director 1\\", \\"release_year\\": 2020, \\"ratings\\": 4.5}, {\\"title\\": \\"Movie B\\", \\"genre\\": \\"Comedy\\", \\"actors\\": [\\"Actor 3\\", \\"Actor 4\\"], \\"director\\": \\"Director 2\\", \\"release_year\\": 2019, \\"ratings\\": 3.8}, {\\"title\\": \\"Movie C\\", \\"genre\\": \\"Drama\\", \\"actors\\": [\\"Actor 1\\", \\"Actor 5\\"], \\"director\\": \\"Director 3\\", \\"release_year\\": 2021, \\"ratings\\": 4.7}, {\\"title\\": \\"Movie D\\", \\"genre\\": \\"Action\\", \\"actors\\": [\\"Actor 2\\", \\"Actor 6\\"], \\"director\\": \\"Director 1\\", \\"release_year\\": 2018, \\"ratings\\": 4.2}, {\\"title\\": \\"Movie E\\", \\"genre\\": \\"Horror\\", \\"actors\\": [\\"Actor 7\\", \\"Actor 8\\"], \\"director\\": \\"Director 4\\", \\"release_year\\": 2022, \\"ratings\\": 3.9}, {\\"title\\": \\"TV Show A\\", \\"genre\\": \\"Comedy\\", \\"actors\\": [\\"Actor 3\\", \\"Actor 4\\"], \\"director\\": \\"Director 2\\", \\"release_year\\": 2019, \\"ratings\\": 4.0}, {\\"title\\": \\"TV Show B\\", \\"genre\\": \\"Drama\\", \\"actors\\": [\\"Actor 5\\", \\"Actor 9\\"], \\"director\\": \\"Director 3\\", \\"release_year\\": 2020, \\"ratings\\": 4.6}, {\\"title\\": \\"TV Show C\\", \\"genre\\": \\"Action\\", \\"actors\\": [\\"Actor 1\\", \\"Actor 10\\"], \\"director\\": \\"Director 5\\", \\"release_year\\": 2021, \\"ratings\\": 4.1}, ] \`\`\` Recommendation Algorithm Design - Factor in user preferences based on their viewing history. - Give higher weight to preferences for genres, actors, and directors that appear frequently in the user's history. - Use collaborative filtering to identify similar users and recommend content they liked. - Ensure diversity in the recommendations to avoid redundancy. Format example ----- Original Requirements The aim is to increase user engagement and viewing time on the platform by suggesting content based on user preferences and viewing history. Product Goals \`\`\`python [ \\"Create a personalized recommendation system\\", \\"Increase user engagement\\", \\"Provide diverse content suggestions\\", ] \`\`\` User Stories \`\`\`python [ \\"As a user, I want to receive movie recommendations based on my favorite genres.\\", \\"As a user, I want to discover new TV shows similar to the ones I've watched.\\", \\"As a user, I want recommendations to include content with my favorite actors.\\", \\"As a user, I want to find content directed by directors I like.\\", ] \`\`\` Competitive Analysis \`\`\`python [ \\"Netflix: Uses a sophisticated recommendation algorithm based on user ratings and viewing history\\", \\"Amazon Prime: Recommends content based on purchased and viewed items\\", \\"Hulu: Provides suggestions based on user-selected genres and viewing history\\", \\"Disney+: Recommends content from its extensive library based on user profiles and preferences\\", \\"HBO Max: Suggests trending and popular shows based on user activity\\", \\"Apple TV+: Curates recommendations using a combination of machine learning and human curation\\", ] \`\`\` Competitive Quadrant Chart \`\`\`mermaid quadrantChart title Reach and Engagement of Streaming Services x-axis Low Reach --> High Reach y-axis Low Engagement --> High Engagement quadrant-1 Competitive quadrant-2 Less Competitive quadrant-3 Broaden Reach quadrant-4 Improve Engagement \\"Netflix\\": [0.9, 0.9] \\"Amazon Prime\\": [0.8, 0.75] \\"Hulu\\": [0.7, 0.65] \\"Disney+\\": [0.85, 0.8] \\"HBO Max\\": [0.75, 0.7] \\"Apple TV+\\": [0.6, 0.55] \\"Our Recommendation Engine\\": [0.5, 0.6] \`\`\` Requirement Analysis The recommendation engine should use both content-based and collaborative filtering methods to generate personalized suggestions. It must ensure user satisfaction by providing diverse recommendations. Requirement Pool \`\`\`python [ (\\"Collect user viewing history and preferences\\", \\"P0\\"), (\\"Develop content-based filtering algorithm\\", \\"P0\\"), (\\"Develop collaborative filtering algorithm\\", \\"P1\\"), (\\"Integrate algorithm outputs for final recommendations\\", \\"P1\\"), (\\"Test recommendations for diversity and redundancy\\", \\"P2\\"), ] \`\`\` UI Design draft The UI should have a section for personalized recommendations, displaying content thumbnails, titles, genres, ratings, and a 'Watch Now' button. The layout should be visually appealing and easy to navigate, with a user-friendly interface. Anything UNCLEAR Clarify the algorithm's priority in case of conflicting user preferences (e.g., a user likes both comedy and horror genres).","solution":"from collections import Counter from typing import List, Dict def recommend_content(user_id: int, users: List[Dict], content: List[Dict], num_recommendations: int = 5): Recommends content based on user preferences and viewing history. :param user_id: The ID of the user for whom recommendations are being generated. :param users: List of users with viewing history. :param content: List of available content with metadata. :param num_recommendations: Number of recommendations to generate. :return: List of recommended content titles. # Find the user user = next(user for user in users if user[\\"user_id\\"] == user_id) # Extract genres, actors, and directors from viewing history genres = [] actors = [] directors = [] for title in user[\\"viewing_history\\"]: for c in content: if c[\\"title\\"] == title: genres.append(c[\\"genre\\"]) actors += c[\\"actors\\"] directors.append(c[\\"director\\"]) # Create counters for genres, actors, and directors genre_counter = Counter(genres) actor_counter = Counter(actors) director_counter = Counter(directors) # Score content based on user preferences content_scores = [] for c in content: score = 0 if c[\\"title\\"] not in user[\\"viewing_history\\"]: score += genre_counter[c[\\"genre\\"]] * 5 score += sum(actor_counter[actor] * 3 for actor in c[\\"actors\\"]) score += director_counter[c[\\"director\\"]] * 2 score += c[\\"ratings\\"] content_scores.append((score, c[\\"title\\"])) # Sort content by scores and return the top recommendations content_scores.sort(reverse=True, key=lambda x: x[0]) recommended_titles = [title for _, title in content_scores[:num_recommendations]] return recommended_titles"},{"question":"Implement a function that converts a binary tree to a doubly linked list. The function should take the root of a binary tree and return the head of a doubly linked list that represents the in-order traversal of the tree. Each node in the doubly linked list must have 'prev' and 'next' pointers corresponding to the in-order predecessor and successor in the binary tree, respectively. Maintain the structure of the tree nodes where right child becomes the 'next' and left child becomes the 'prev'. Example Input: \`\`\` 10 / 6 14 / / 4 8 12 16 \`\`\` Expected Output: head -> 4 <-> 6 <-> 8 <-> 10 <-> 12 <-> 14 <-> 16 Function Signature: \`\`\`python def binary_tree_to_doubly_linked_list(root: TreeNode) -> TreeNode: # Your code here \`\`\`","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def binary_tree_to_doubly_linked_list(root: TreeNode) -> TreeNode: def inorder(node): nonlocal last, first if not node: return # Traverse the left subtree inorder(node.left) # Process the current node if last: last.right = node node.left = last else: first = node last = node # Traverse the right subtree inorder(node.right) if not root: return None first, last = None, None inorder(root) return first"},{"question":"Design a function that determines whether a given string is a valid palindrome or not. A valid palindrome reads the same forward and backward, and it is case-insensitive and ignores non-alphanumeric characters. Implement the function in Python and include a description of the algorithm used to solve the problem. Analyze the time and space complexity of your solution. # Function Signature \`\`\`python def is_valid_palindrome(s: str) -> bool: pass \`\`\` # Example \`\`\`python Input : \\"A man, a plan, a canal: Panama\\" Output: True Input : \\"race a car\\" Output: False \`\`\` # Constraints - The input string can contain ASCII characters only. - The maximum length of the input string is 2 * 10^5.","solution":"import re def is_valid_palindrome(s: str) -> bool: Determines whether a given string is a valid palindrome or not. A valid palindrome reads the same forward and backward, and it is case-insensitive and ignores non-alphanumeric characters. Parameters: s (str): The input string to check for palindrome validity. Returns: bool: True if the string is a valid palindrome, False otherwise. # Remove all non-alphanumeric characters and convert to lowercase clean_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Compare the cleaned string with its reverse return clean_string == clean_string[::-1]"},{"question":"Write a function in Python that takes a list of integers as input and returns a new list containing only the prime numbers from the original list. To determine if a number is prime, you should implement a helper function \`is_prime()\`. Optimize your code for efficiency with respect to both time and space.","solution":"def is_prime(n): Determines if a number n is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the input list. return [num for num in numbers if is_prime(num)]"},{"question":"Design a Python function that takes a list of dictionaries representing a collection of books, where each dictionary contains 'title' (string), 'author' (string), 'year_published' (integer), and 'genre' (string). The function should return a list of titles of books published in a given year. Additionally, implement a sorting option that allows the user to sort the titles either alphabetically or by the publication year. Your function should handle edge cases, such as the absence of books for the given year, and should be well-commented to explain the logic used for filtering and sorting.","solution":"def get_books_by_year(books, year, sort_by='none'): Returns a list of titles of books published in a given year, with an option to sort the titles either alphabetically or by publication year. :param books: List of dictionaries where each dictionary represents a book with 'title', 'author', 'year_published', and 'genre'. :param year: An integer representing the year of publication to filter the books. :param sort_by: A string that indicates the sort order: 'none', 'title', or 'year'. Default is 'none', no sorting applied. :return: List of titles of books published in the given year. filtered_books = [book['title'] for book in books if book['year_published'] == year] if sort_by == 'title': filtered_books.sort() elif sort_by == 'year': # Sort by publication year, though this should generally be unnecessary since all books have the same year filtered_books.sort(key=lambda title: next(book['year_published'] for book in books if book['title'] == title)) return filtered_books"},{"question":"Create a Python class named \`ShoppingCart\` that allows you to add and remove items, and calculate the total cost of the items in the cart. Each item should have a name, price, and quantity. The class should provide the following functionalities: - Add an item to the cart. - Remove an item from the cart. - Get the list of items currently in the cart. - Calculate the total cost of the items in the cart, considering the quantity of each item. Additionally, implement input validations to ensure the price and quantity of each item are non-negative. Provide examples of how the class would be used, including edge cases such as attempting to remove an item that is not in the cart or adding an item with a price or quantity less than zero.","solution":"class ShoppingCart: def __init__(self): self.items = [] def add_item(self, name, price, quantity): if price < 0 or quantity < 0: raise ValueError(\\"Price and quantity must be non-negative\\") for item in self.items: if item['name'] == name: item['quantity'] += quantity return self.items.append({'name': name, 'price': price, 'quantity': quantity}) def remove_item(self, name): for item in self.items: if item['name'] == name: self.items.remove(item) return raise ValueError(\\"Item not in the cart\\") def get_items(self): return self.items def total_cost(self): return sum(item['price'] * item['quantity'] for item in self.items)"},{"question":"You are given a matrix of integers where each row is sorted in ascending order from left to right. Your task is to write a function that searches for a target value in this matrix. The function should return the position of the target in the format \`(row_index, col_index)\` if it is found, otherwise return \`(-1, -1)\`. **Function Signature:** \`def search_matrix(matrix: List[List[int]], target: int) -> Tuple[int, int]:\` **Input:** - \`matrix\`: A list of lists of integers (\`List[List[int]]\`), representing the matrix where each row is sorted. - \`target\`: An integer (\`int\`), the value to search for. **Output:** - A tuple (\`Tuple[int, int]\`) representing the position of the target value in the format \`(row_index, col_index)\` if found, otherwise \`(-1, -1)\`. **Constraints:** - The number of rows in the matrix (\`m\`) is between 1 and 100. - The number of columns in the matrix (\`n\`) is between 1 and 100. - The integers in the matrix and the target are within the range \`-10^9\` to \`10^9\`. **Example:** \`\`\`python matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 search_matrix(matrix, target) # Output: (1, 1) target = 20 search_matrix(matrix, target) # Output: (-1, -1) \`\`\` **Note:** - Remember that each row of the matrix is sorted. - You can devise a strategy to efficiently search the matrix, possibly considering properties of the matrix to reduce the search space.","solution":"from typing import List, Tuple def search_matrix(matrix: List[List[int]], target: int) -> Tuple[int, int]: if not matrix or not matrix[0]: return (-1, -1) rows = len(matrix) cols = len(matrix[0]) row = 0 col = cols - 1 while row < rows and col >= 0: if matrix[row][col] == target: return (row, col) elif matrix[row][col] < target: row += 1 else: col -= 1 return (-1, -1)"},{"question":"Write a program that takes two strings as input and determines the longest common subsequence (LCS) between them. The program should output the length of the LCS as well as the actual subsequence itself. If there are multiple such subsequences of the same maximum length, return any one of them. The implementation must handle strings of lengths up to 1000 efficiently. Input: \\"AGGTAB\\", \\"GXTXAYB\\" Output: 4 \\"GTAB\\"","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence (LCS) and the actual LCS between two strings. m, n = len(str1), len(str2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp table in bottom-up fashion. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # The length of LCS is dp[m][n] lcs_length = dp[m][n] # To reconstruct the LCS index = lcs_length lcs = [''] * (index+1) lcs[index] = \\"\\" i, j = m, n while i > 0 and j > 0: if str1[i-1] == str2[j-1]: lcs[index-1] = str1[i-1] i -= 1 j -= 1 index -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return lcs_length, ''.join(lcs[:lcs_length]) # Example usage: length, subsequence = longest_common_subsequence(\\"AGGTAB\\", \\"GXTXAYB\\") print(length) # Expected 4 print(subsequence) # Expected \\"GTAB\\""},{"question":"Given an array of integers, determine if it is possible to partition the array into three non-empty subsets such that the sum of the elements in each subset is equal. Write a function \`canPartitionIntoThreeEqualSumSubsets(arr)\` that takes an array \`arr\` as input and returns a boolean indicating whether such a partitioning is possible. # Input - An array of integers \`arr\` where \`1 <= len(arr) <= 20\` and \`-10^4 <= arr[i] <= 10^4\`. # Output - Return \`true\` if the array can be partitioned into three subsets with equal sum, and \`false\` otherwise. # Example \`\`\`python canPartitionIntoThreeEqualSumSubsets([1, 2, 3, 4, 5, 6, 7, 8, 9]) \`\`\` Output: \`\`\`python True \`\`\` Explanation: You can partition the array into \`[1, 8]\`, \`[2, 7]\`, and \`[3, 4, 5]\` with each subset summing to 9. # Constraints - Time complexity should be optimized for a reasonably small array size. - Consider edge cases where the total sum of the array elements is not divisible by 3.","solution":"from functools import lru_cache def canPartitionIntoThreeEqualSumSubsets(arr): if len(arr) < 3: return False total_sum = sum(arr) if total_sum % 3 != 0: return False target = total_sum // 3 n = len(arr) arr.sort(reverse=True) if arr[0] > target: return False @lru_cache(None) def dfs(i, subset_sums): if i == n: return subset_sums[0] == subset_sums[1] == subset_sums[2] == target for j in range(3): if subset_sums[j] + arr[i] <= target: new_sums = list(subset_sums) new_sums[j] += arr[i] if dfs(i + 1, tuple(new_sums)): return True return False return dfs(0, (0, 0, 0))"},{"question":"Given a string s and an integer k, you need to perform a sliding window operation that finds the longest substring with exactly k unique characters. If there are multiple substrings with the same maximum length, return the one that appears first. If no such substring exists, return an empty string. \`\`\`python def longest_substring_k_unique(s: str, k: int) -> str: Return the longest substring with exactly k unique characters. If multiple substrings have the same maximum length, return the one that appears first. If no such substring exists, return an empty string. Parameters: - s (str): The input string where the substring is to be found. - k (int): The exact number of unique characters required in the substring. Returns: - str: The longest substring with exactly k unique characters, or an empty string if none exists. pass # Example: # Input: s = \\"aabbcc\\", k = 2 # Output: \\"aabb\\" # Explanation: The substring \\"aabb\\" has exactly 2 unique characters and is the longest. \`\`\`","solution":"def longest_substring_k_unique(s: str, k: int) -> str: Return the longest substring with exactly k unique characters. If multiple substrings have the same maximum length, return the one that appears first. If no such substring exists, return an empty string. Parameters: - s (str): The input string where the substring is to be found. - k (int): The exact number of unique characters required in the substring. Returns: - str: The longest substring with exactly k unique characters, or an empty string if none exists. from collections import defaultdict n = len(s) if n == 0 or k == 0: return \\"\\" left = 0 right = 0 max_len = 0 max_substring = \\"\\" char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == k: current_len = right - left + 1 if current_len > max_len: max_len = current_len max_substring = s[left:right+1] right += 1 return max_substring"},{"question":"Given an array of non-negative integers representing an elevation map where the width of each bar is \`1\`, compute how much water it can trap after raining. For example, consider the following elevation map: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. After raining, 6 units of water are trapped as depicted in the diagram provided in practice platforms. Note: - \`height\` is a list of integers representing the elevation at each index. - The length of the height array (\`n\`) is at least 1 and at most 20,000. - The values in the height array will be within the range \`0 to 1000\`.","solution":"def trap(height): Given an array of non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining. :param height: List[int] :return: int if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a function that takes a string consisting of lowercase alphabets and returns another string where the character 'a' shifts to 'z', 'b' shifts to 'y', and so on (reverse the alphabet). The resultant string should have the same length as the input string, and you should preserve the characters' positions that are not letters. For example, given the string \\"abc\\", the output should be \\"zyx\\". If the input is \\"a-b-c\\", the output should be \\"z-y-x\\".","solution":"def reverse_alphabet_shift(s): This function takes a string consisting of lowercase alphabets and returns another string where 'a' shifts to 'z', 'b' shifts to 'y', and so on. Non-alphabet characters are preserved in their positions. def shift_char(c): if 'a' <= c <= 'z': return chr(219 - ord(c)) return c return ''.join(shift_char(c) for c in s)"},{"question":"Implement a function to determine the shortest path in a weighted directional graph using Dijkstra's algorithm. The function should accept as input an adjacency matrix representing the graph and two nodes, the start node, and the end node. The function should return a list of nodes representing the shortest path from the start node to the end node. Ensure your implementation handles graphs with varying edge weights appropriately, including zero-weight edges. Additionally, implement error handling for disconnected nodes and invalid inputs.","solution":"import heapq def dijkstra(adj_matrix, start, end): Returns the shortest path from start node to end node in a weighted directional graph. If there is no path, returns an empty list. Parameters: adj_matrix (list of list of int): The adjacency matrix representing the graph. start (int): The starting node. end (int): The target node. Returns: list of int: The shortest path from start node to end node. # Number of nodes in the graph num_nodes = len(adj_matrix) # Handle invalid inputs if not adj_matrix or not isinstance(adj_matrix, list) or start < 0 or end < 0 or start >= num_nodes or end >= num_nodes: return [] # Min-heap to store minimum weight edges heap = [(0, start)] # Distance array to store the shortest distance to each node distances = [float('inf')] * num_nodes distances[start] = 0 # Array to store the path previous_nodes = [None] * num_nodes while heap: current_distance, current_node = heapq.heappop(heap) # Stop processing if we've reached the end node if current_node == end: break # Explore neighbors for neighbor, weight in enumerate(adj_matrix[current_node]): if weight > 0: # there is an edge distance = current_distance + weight # Only consider this path if it's better if distance < distances[neighbor]: distances[neighbor] = distance previous_nodes[neighbor] = current_node heapq.heappush(heap, (distance, neighbor)) # Reconstruct the shortest path path = [] current_node = end while current_node is not None: path.insert(0, current_node) current_node = previous_nodes[current_node] if path[0] == start: return path else: return []"},{"question":"Write a Python program to create a nested dictionary from a list of strings. The strings will be formatted with hierarchical keys separated by dots (e.g., \\"key1.key2.key3\\"). The program should dynamically build the nested dictionary structure based on the keys and their hierarchy. Additionally, create a custom exception to handle cases where an empty string or a malformed key (e.g., leading or trailing dots) is encountered in the input list. The exception should return a descriptive error message and prompt the user to input a corrected list of strings.","solution":"class MalformedKeyException(Exception): def __init__(self, message): super().__init__(message) def create_nested_dict(key_list): nested_dict = {} for key in key_list: if not key or key.startswith('.') or key.endswith('.'): raise MalformedKeyException( f\\"Malformed key '{key}' found. Keys must not be empty or have leading/trailing dots.\\" ) keys = key.split('.') d = nested_dict for part in keys[:-1]: if part not in d: d[part] = {} d = d[part] if keys[-1] in d: raise MalformedKeyException( f\\"Duplicated key '{keys[-1]}' at the same level found in '{key}'.\\" ) d[keys[-1]] = {} return nested_dict"},{"question":"Create a Python function that receives a list of student records, where each record is represented as a dictionary containing \`name\`, \`grades\` (a list of integers), and \`attendance\` (a boolean). The function should: 1. Return a list of students who have attended the class (attendance is \`True\`) and have an average grade above a specified threshold. 2. The function should take an additional parameter, \`threshold\`, which is used to filter the students' average grades. 3. Sort the result by the students' average grades in descending order. Example input: \`\`\`python students = [ {'name': 'Alice', 'grades': [90, 85, 88], 'attendance': True}, {'name': 'Bob', 'grades': [70, 75, 78], 'attendance': False}, {'name': 'Charlie', 'grades': [95, 90, 93], 'attendance': True}, {'name': 'David', 'grades': [60, 62, 68], 'attendance': True} ] threshold = 85 \`\`\` Expected output: \`\`\`python [ {'name': 'Charlie', 'average_grade': 92.67}, {'name': 'Alice', 'average_grade': 87.67} ] \`\`\`","solution":"def filter_students_by_attendance_and_grade(students, threshold): Filters students by attendance and average grade above a specified threshold. :param students: List of student records where each record is a dictionary with keys 'name', 'grades', and 'attendance'. :param threshold: A numerical value representing the grade threshold. :return: A list of dictionaries containing 'name' and 'average_grade' of students meeting the criteria. filtered_students = [] for student in students: if student['attendance']: avg_grade = sum(student['grades']) / len(student['grades']) if avg_grade > threshold: filtered_students.append({ 'name': student['name'], 'average_grade': round(avg_grade, 2) }) # Sort the students by average_grade in descending order filtered_students.sort(key=lambda x: x['average_grade'], reverse=True) return filtered_students"},{"question":"Implement a function that checks if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. Implement a function \`is_valid_palindrome(s: str) -> bool\` that takes a string and returns \`True\` if it is a valid palindrome considering only alphanumeric characters and ignoring cases, otherwise returns \`False\`. **Example 1:** \`\`\` Input: \\"A man, a plan, a canal: Panama\\" Output: True Explanation: \\"amanaplanacanalpanama\\" is a valid palindrome. \`\`\` **Example 2:** \`\`\` Input: \\"race a car\\" Output: False Explanation: \\"raceacar\\" is not a valid palindrome. \`\`\` **Example 3:** \`\`\` Input: \\"\\" Output: True Explanation: An empty string is a valid palindrome. \`\`\` **Constraints:** - The input string consists only of printable ASCII characters. \`\`\` def is_valid_palindrome(s: str) -> bool: # Define a function that checks if a character is alphanumeric def is_alphanumeric(c): return (ord('a') <= ord(c) <= ord('z') or ord('A') <= ord(c) <= ord('Z') or ord('0') <= ord(c) <= ord('9')) # Convert to lowercase and filter out non-alphanumeric characters filtered_chars = [char.lower() for char in s if is_alphanumeric(char)] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1] # Test cases to validate the solution assert(is_valid_palindrome(\\"A man, a plan, a canal: Panama\\") == True) assert(is_valid_palindrome(\\"race a car\\") == False) assert(is_valid_palindrome(\\"\\") == True) print(\\"All test cases passed!\\") \`\`\`","solution":"def is_valid_palindrome(s: str) -> bool: Returns True if s is a valid palindrome considering only alphanumeric characters and ignoring cases. # Define a function that checks if a character is alphanumeric def is_alphanumeric(c): return (ord('a') <= ord(c) <= ord('z') or ord('A') <= ord(c) <= ord('Z') or ord('0') <= ord(c) <= ord('9')) # Convert to lowercase and filter out non-alphanumeric characters filtered_chars = [char.lower() for char in s if is_alphanumeric(char)] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Given a Python dictionary that represents a collection of student names and their corresponding scores in a class, write a function \`get_top_students\` that returns the names of students whose scores are at or above the average score of the class. The output should be a list of names sorted in descending order of their scores. If multiple students have the same score, their names should appear in alphabetical order. For instance, given the following dictionary: \`\`\`python students = { 'Alice': 78, 'Bob': 92, 'Charlie': 87, 'David': 94, 'Eva': 65, 'Frank': 78, 'Grace': 84 } \`\`\` The average score is \`(78+92+87+94+65+78+84)/7 = 82.57\`. The students with scores at or above 82.57 are \`['Bob', 'Charlie', 'David', 'Grace']\`. When sorted by scores in descending order, and alphabetically for ties, the result should be \`['David', 'Bob', 'Charlie', 'Grace']\`. Provide your solution in the form of a function with appropriate comments: \`\`\`python def get_top_students(students): # Calculate the average score avg_score = sum(students.values()) / len(students) # Filter out students whose scores are below the average top_students = {name: score for name, score in students.items() if score >= avg_score} # Sort the students first by score in descending order, then by name alphabetically sorted_top_students = sorted(top_students.items(), key=lambda x: (-x[1], x[0])) # Extract the names only from the sorted list of tuples result = [name for name, score in sorted_top_students] return result # Example usage and test data students = { 'Alice': 78, 'Bob': 92, 'Charlie': 87, 'David': 94, 'Eva': 65, 'Frank': 78, 'Grace': 84 } print(get_top_students(students)) # Should print: ['David', 'Bob', 'Charlie', 'Grace'] \`\`\`","solution":"def get_top_students(students): Returns a list of student names whose scores are at or above the average score, sorted in descending order of their scores. In case of ties, names are sorted alphabetically. :param students: Dictionary containing student names as keys and scores as values :return: List of student names sorted based on criteria # Calculate the average score avg_score = sum(students.values()) / len(students) # Filter students whose scores are at or above the average top_students = {name: score for name, score in students.items() if score >= avg_score} # Sort the students first by score in descending order, then by name alphabetically sorted_top_students = sorted(top_students.items(), key=lambda x: (-x[1], x[0])) # Extract and return the names from the sorted list of tuples result = [name for name, score in sorted_top_students] return result"},{"question":"Using the Python programming language, create a function that simulates a simple text-based game. The game should prompt the user to guess a randomly generated number between 1 and 100. The function should provide feedback indicating whether the guessed number is too high, too low, or correct. If the guess is incorrect, the game should allow the user to continue guessing until the correct number is found. Additionally, count the number of attempts taken by the user to guess the number correctly and display this count at the end of the game.","solution":"import random def guess_number_game(): Simulate a text-based game where the user guesses a randomly generated number between 1 and 100. Provide feedback for each guess and count the number of attempts until the correct number is guessed. number_to_guess = random.randint(1, 100) attempts = 0 while True: guess = int(input(\\"Guess the number between 1 and 100: \\")) attempts += 1 if guess < number_to_guess: print(\\"Too low!\\") elif guess > number_to_guess: print(\\"Too high!\\") else: print(f\\"Correct! You've guessed the number in {attempts} attempts.\\") break"},{"question":"Create a program in Python that accepts a list of tuples, where each tuple contains a start time and an end time. Each start time and end time are represented as strings in the 24-hour \\"HH:MM\\" format. Implement a function that merges all overlapping intervals and returns a new list of tuples with the merged intervals. For example, if the input list is \`[(“09:00”, “11:30”), (“10:00”, “13:00”), (“12:30”, “14:00”), (“16:00”, “18:00”)]\`, the function should output \`[(“09:00”, “14:00”), (“16:00”, “18:00”)]\`. Your program should handle edge cases, such as intervals that are fully contained within another interval, and intervals with the same start and end times. Provide a sample list of input intervals and demonstrate the functioning and output of your program.","solution":"from datetime import datetime def merge_intervals(intervals): Merges overlapping intervals and returns a new list of merged intervals. :param intervals: List of tuples where each tuple contains start and end times in \\"HH:MM\\" format. :return: List of tuples with merged intervals in \\"HH:MM\\" format. # Convert time strings to datetime objects for comparison intervals = [(datetime.strptime(start, \\"%H:%M\\"), datetime.strptime(end, \\"%H:%M\\")) for start, end in intervals] # Sort intervals by start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If merged list is empty or current interval does not overlap with the last merged interval if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the current interval with the last merged interval merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) # Convert datetime objects back to \\"HH:MM\\" strings merged = [(start.strftime(\\"%H:%M\\"), end.strftime(\\"%H:%M\\")) for start, end in merged] return merged"},{"question":"Write a function that takes a list of positive integers and produces a new list containing only the numbers that are a majority element in the original list. A majority element is an element that appears more than n/2 times in the list, where n is the size of the list. If no majority element exists, return an empty list. Your function should handle edge cases including empty lists and lists with no majority element.","solution":"def find_majority_elements(nums): This function takes a list of positive integers and returns a list of elements that appear more than n/2 times in the original list, where n is the list size. If no such element exists, it returns an empty list. if not nums: return [] n = len(nums) count_dict = {} for num in nums: count_dict[num] = count_dict.get(num, 0) + 1 result = [num for num, count in count_dict.items() if count > n // 2] return result"},{"question":"You are asked to analyze the performance of a machine learning model using Python. Below is a skeleton script with missing components. Your task is to fill in the script to load the dataset, train a RandomForestClassifier, evaluate its performance using cross-validation, and plot the feature importances. Comments provide guidance on what needs to be implemented. \`\`\`python # Impont necessary libraries import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import cross_val_score import matplotlib.pyplot as plt # Load the dataset # Assume the dataset is a CSV file named 'data.csv' with the last column as the target variable. def load_dataset(file_path): # Implement loading of dataset dataset = pd.read_csv(file_path) X = dataset.iloc[:,:-1] y = dataset.iloc[:,-1] return X, y # Train the RandomForest model and evaluate its performance using 5-fold cross-validation def train_and_evaluate(X, y): # Initialize the RandomForestClassifier model = RandomForestClassifier(random_state=42) # Perform 5-fold cross-validation and return the mean accuracy cv_scores = cross_val_score(model, X, y, cv=5) mean_cv_score = np.mean(cv_scores) return model, mean_cv_score # Plot the feature importances def plot_feature_importances(model, feature_names): # Fit the model to the entire dataset to get feature importances model.fit(X, y) importances = model.feature_importances_ # Sort the features by importance indices = np.argsort(importances)[::-1] # Plot plt.figure() plt.title(\\"Feature Importances\\") plt.bar(range(X.shape[1]), importances[indices], align=\\"center\\") plt.xticks(range(X.shape[1]), feature_names[indices], rotation=90) plt.xlim([-1, X.shape[1]]) plt.show() if __name__ == \\"__main__\\": # File path to the dataset file_path = 'data.csv' # Load the dataset X, y = load_dataset(file_path) # Train the model and evaluate performance model, mean_cv_score = train_and_evaluate(X, y) print(f\\"Mean Cross-Validation Accuracy: {mean_cv_score:.2f}\\") # Plot feature importances feature_names = X.columns plot_feature_importances(model, feature_names) \`\`\` # Instructions: 1. Implement the \`load_dataset\` function to read the dataset from a CSV file. 2. Implement the \`train_and_evaluate\` function to train a \`RandomForestClassifier\` and evaluate its performance using 5-fold cross-validation. Return the mean CV accuracy. 3. Implement the \`plot_feature_importances\` function to plot the feature importances of the RandomForest model. 4. Ensure that your code is clean, properly indented, and follows Python conventions/tests for readability and functionality.","solution":"# Import necessary libraries import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import cross_val_score import matplotlib.pyplot as plt # Load the dataset # Assume the dataset is a CSV file named 'data.csv' with the last column as the target variable. def load_dataset(file_path): # Implement loading of dataset dataset = pd.read_csv(file_path) X = dataset.iloc[:,:-1] y = dataset.iloc[:,-1] return X, y # Train the RandomForest model and evaluate its performance using 5-fold cross-validation def train_and_evaluate(X, y): # Initialize the RandomForestClassifier model = RandomForestClassifier(random_state=42) # Perform 5-fold cross-validation and return the mean accuracy cv_scores = cross_val_score(model, X, y, cv=5) mean_cv_score = np.mean(cv_scores) return model, mean_cv_score # Plot the feature importances def plot_feature_importances(model, X, y, feature_names): # Fit the model to the entire dataset to get feature importances model.fit(X, y) importances = model.feature_importances_ # Sort the features by importance indices = np.argsort(importances)[::-1] # Plot plt.figure() plt.title(\\"Feature Importances\\") plt.bar(range(X.shape[1]), importances[indices], align=\\"center\\") plt.xticks(range(X.shape[1]), feature_names[indices], rotation=90) plt.xlim([-1, X.shape[1]]) plt.show() if __name__ == \\"__main__\\": # File path to the dataset file_path = 'data.csv' # Load the dataset X, y = load_dataset(file_path) # Train the model and evaluate performance model, mean_cv_score = train_and_evaluate(X, y) print(f\\"Mean Cross-Validation Accuracy: {mean_cv_score:.2f}\\") # Plot feature importances feature_names = X.columns plot_feature_importances(model, X, y, feature_names)"},{"question":"You are given a piece of code that is intended to process a list of integers, squaring each value and collecting the results using the \`multiprocessing\` library in Python. The current code uses a shared list data structure to store the results, but it contains a race condition causing incorrect outputs. Your task is to identify and fix the race condition. Additionally, explain the concept of race conditions, why they occur in multiprocessing scenarios, and the mechanisms provided by Python's multiprocessing library to mitigate them. You must demonstrate an understanding of the concepts of process synchronization, inter-process communication, and shared resources management in Python. \`\`\`python import multiprocessing def square_number(number, result, index): result[index] = number * number if __name__ == '__main__': numbers = [1, 2, 3, 4, 5] manager = multiprocessing.Manager() result = manager.list([0] * len(numbers)) # Shared list jobs = [] for i, num in enumerate(numbers): p = multiprocessing.Process(target=square_number, args=(num, result, i)) jobs.append(p) p.start() for j in jobs: j.join() print(result) \`\`\` Ensure the output is correctly computed and the race condition is eliminated. Provide a write-up explaining your solution and the concepts addressed.","solution":"import multiprocessing def square_number(number, result, index): This function computes the square of a number and stores it at the specified index of a shared list. result[index] = number * number def square_numbers(numbers): This function takes a list of numbers, computes the square of each number using multiple processes, and returns a new list with the squared values. manager = multiprocessing.Manager() result = manager.list([0] * len(numbers)) # Shared list jobs = [] for i, num in enumerate(numbers): p = multiprocessing.Process(target=square_number, args=(num, result, i)) jobs.append(p) p.start() for j in jobs: j.join() return list(result)"},{"question":"Design a function \`find_longest_word\` that takes a list of words as input and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered in the list. Ensure the implementation is efficient and handles edge cases such as an empty list or a list with one element.","solution":"def find_longest_word(words): Returns the longest word in the list. If there are multiple words with the same maximum length, returns the first one encountered. Args: words (list of str): List of words. Returns: str: The longest word in the list. if not words: return \\"\\" longest_word = words[0] for word in words[1:]: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Write a function that takes a string of mathematical operations involving addition and subtraction of integers and returns the result. The string will contain only non-negative integers and the operators '+' and '-'. Ensure your function can handle leading and trailing spaces in the input string. Example: - For the input \\"3 + 2 - 1\\", the function should return 4. - For the input \\"10 - 5 + 3 \\", the function should return 8. - For the input \\" 7 + 2 - 3 + 5 - 8 \\", the function should return 3.","solution":"def evaluate_expression(expression): Evaluates a string expression involving addition and subtraction of non-negative integers. Parameters: expression (str): The string containing the mathematical expression. Returns: int: The result of the evaluated expression. # Remove leading and trailing spaces expression = expression.strip() # Split the expression by spaces tokens = expression.split() # Initialize the result and the current operand result = 0 current_op = '+' for token in tokens: if token.isdigit() or token in ('+', '-'): if token.isdigit(): if current_op == '+': result += int(token) elif current_op == '-': result -= int(token) else: current_op = token return result"},{"question":"In the context of data analysis, where sequences of numeric data points are periodically recorded, design an algorithm to calculate the average of every contiguous subarray of a specified length within a larger array of integers. For example, given an array of integers: data = [1, 3, 4, 6, 10] and a subarray length k = 2, the subarray averages would be: [2.0, 3.5, 5.0, 8.0] Provide a function with the signature: \`\`\`python def calculate_subarray_averages(data: List[int], k: int) -> List[float]: \`\`\` where \`data\` is the list of integers and \`k\` is the length of the subarray, to return a list of floating-point numbers representing the averages of each contiguous subarray of length \`k\`. Ensure efficiency and consider edge cases such as empty arrays or subarray length being greater than the array length.","solution":"from typing import List def calculate_subarray_averages(data: List[int], k: int) -> List[float]: Calculates the average of every contiguous subarray of length k in the given data list. Parameters: data (List[int]): List of integers. k (int): Length of subarray. Returns: List[float]: A list of averages of each contiguous subarray of length k. n = len(data) if n == 0 or k > n: return [] subarray_averages = [] current_sum = sum(data[:k]) subarray_averages.append(current_sum / k) for i in range(k, n): current_sum += data[i] - data[i - k] subarray_averages.append(current_sum / k) return subarray_averages"},{"question":"Write a program that takes a list of words and generates a new list with each word's characters reversed, while maintaining the original word order. The program should handle all edge cases, including empty strings and strings containing only whitespace characters. Moreover, ensure to implement the character reversal part of the function manually, without using built-in string reversal methods. For example, given the input [\\"hello\\", \\"world\\", \\" \\", \\"\\", \\"123\\"], the output should be [\\"olleh\\", \\"dlrow\\", \\" \\", \\"\\", \\"321\\"].","solution":"def reverse_words(words): Reverses the characters of each word in the input list, keeping the original order. Args: words (list of str): The list of words to be reversed. Returns: list of str: A list with each word's characters reversed. reversed_words = [] for word in words: reversed_word = \\"\\" for char in word: reversed_word = char + reversed_word reversed_words.append(reversed_word) return reversed_words"},{"question":"Write a Python function that accepts a list of strings and returns a dictionary where each key is a unique string from the list and the corresponding value is the length of that string. Ensure your solution respects case-sensitivity, meaning \\"hello\\" and \\"Hello\\" should be treated as different strings.","solution":"def string_lengths(string_list): Returns a dictionary where each key is a unique string from the list and the corresponding value is the length of that string. return {s: len(s) for s in string_list}"},{"question":"Write a function that evaluates a string to determine if it contains a valid sequence of parentheses. The function should return \`True\` if the sequence of parentheses in the string is valid, and \`False\` otherwise. A valid sequence means every opening parenthesis \\"(\\" has a corresponding closing parenthesis \\")\\", and they are correctly nested. The function should handle multiple types of brackets: \`()\`, \`{}\`, and \`[]\`. Examples: - For the string \`\\"({[()]})\\"\`, the function should return \`True\`. - For the string \`\\"([)]\\"\`, the function should return \`False\`. - For the string \`\\"(((\\"\`, the function should return \`False\`.","solution":"def is_valid_parentheses(s): Evaluate if a string has a valid parenthesis sequence including (), {}, and [] stack = [] matching_parenthesis = {')': '(', '}': '{', ']': '['} for char in s: if char in matching_parenthesis.values(): stack.append(char) elif char in matching_parenthesis.keys(): if stack == [] or matching_parenthesis[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Design a Python function that takes in a list of strings and an integer \`n\`. The function should return a list of strings that are exactly \`n\` characters long. If the list contains any non-string elements, raise a \`ValueError\` with a message \\"List contains non-string elements\\". Additionally, if there are no strings of length \`n\` in the input list, return an empty list. Ensure your function handles edge cases, such as an empty input list and strings with special characters or spaces.","solution":"def filter_strings_by_length(strings, n): Returns a list of strings that have exactly n characters from the input list. Parameters: strings (list): List of strings to be filtered. n (int): The length of strings to filter by. Returns: list: List of strings that are exactly n characters long. Raises: ValueError: If the input list contains non-string elements. if not all(isinstance(s, str) for s in strings): raise ValueError(\\"List contains non-string elements\\") return [s for s in strings if len(s) == n]"},{"question":"Write a Python function called \`find_event_days\` that takes a list of integers where each integer represents the number of days past since an event occurred. The function should return a list of strings representing the day of the week on which each event happened. Assume today is Monday. For instance, given the input list \`[0, 1, 2, 3, 4, 5, 6]\`, the output should be: \`\`\`python [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] \`\`\` Additional notes: - The function should account for events that happened more than a week ago by cycling back through the days of the week. - The days of the week should be represented as full strings (\\"Monday\\", \\"Tuesday\\", etc.). Here's a starting template for your function: \`\`\`python def find_event_days(days_past): # Your code here # Example usage: print(find_event_days([0, 1, 2, 3, 4, 5, 6])) # Output: [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] \`\`\`","solution":"def find_event_days(days_past): Given a list of integers representing the number of days since an event occurred, return a list of strings representing the day of the week each event happened. Assume today is Monday. days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] return [days_of_week[day % 7] for day in days_past]"},{"question":"Create a function in Python to calculate and print the factorial of a given non-negative integer. Identify and rectify the errors in the given code snippet related to the initialization error and faulty logic within the while loop. Here's the problematic code: def factorial(n): result = 1 i = 0 while i <= n: result *= i i += 1 return result # Example usage n = 5 print(f\\"The factorial of {n} is {factorial(n)}\\")","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. if n < 0: raise ValueError(\\"Factorial is not defined for negative integers\\") result = 1 i = 1 # Start with 1 since multiplying by 0 would result in 0 while i <= n: result *= i i += 1 return result # Example usage n = 5 print(f\\"The factorial of {n} is {factorial(n)}\\")"},{"question":"You are given a list of integers. Your task is to write a Python function that returns a new list where each element is the sum of the original element and its right neighbor. If an element does not have a right neighbor, it should remain unchanged in the new list. For example, consider the list \`input_list = [2, 4, 6, 8]\`. The expected output would be \`[6, 10, 14, 8]\` because: - The first element \`2\` is added to the second element \`4\` to get \`6\`. - The second element \`4\` is added to the third element \`6\` to get \`10\`. - The third element \`6\` is added to the fourth element \`8\` to get \`14\`. - The fourth element \`8\` has no right neighbor, so it remains unchanged. Your function should follow this signature: \`\`\`python def sum_with_right_neighbor(input_list): # Your code here \`\`\` **Constraints:** - The input list will contain at least one element and will have at most 10^6 elements. - Elements of the list are integers and can be positive, negative, or zero. - You should aim to solve this problem in linear time complexity, O(n), where n is the number of elements in the list. **Example:** \`\`\`python assert sum_with_right_neighbor([2, 4, 6, 8]) == [6, 10, 14, 8] assert sum_with_right_neighbor([1, 2, 3]) == [3, 5, 3] assert sum_with_right_neighbor([5]) == [5] assert sum_with_right_neighbor([1, -1, 0]) == [0, -1, 0] \`\`\` Implement the function and make sure it passes the provided test cases.","solution":"def sum_with_right_neighbor(input_list): Returns a new list where each element is the sum of the original element and its right neighbor. If an element does not have a right neighbor, it remains unchanged. n = len(input_list) if n == 0: return [] output_list = [0] * n for i in range(n - 1): output_list[i] = input_list[i] + input_list[i + 1] output_list[-1] = input_list[-1] return output_list"},{"question":"Write a program that simulates the operation of a simple cash register. The register should keep track of the items and their prices entered by the user. When the user indicates they are finished entering items, the program should compute and display the total amount due, the amount of tax (assuming a fixed tax rate of 5%), and the final total including tax. Also, include a functionality to allow the user to input the amount of money provided, and the program should then calculate and display the amount of change to be returned.","solution":"class CashRegister: def __init__(self, tax_rate=0.05): self.items = [] self.tax_rate = tax_rate def add_item(self, price): self.items.append(price) def compute_totals(self): subtotal = sum(self.items) tax = subtotal * self.tax_rate total = subtotal + tax return subtotal, tax, total def calculate_change(self, payment): _, _, total = self.compute_totals() if payment < total: return \\"Insufficient payment\\" return payment - total"},{"question":"You are working on a weather forecasting application and need to process data representing temperatures measured over several days. Given a list of daily temperatures, write a Python function called \`daily_temperatures\` that, for each day in the input, outputs the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For instance, given the list \`temperatures = [73, 74, 75, 71, 69, 72, 76, 73]\`, your function should return \`[1, 1, 4, 2, 1, 1, 0, 0]\`. # Input - A list of integers, \`temperatures\`, where \`1 <= len(temperatures) <= 10^5\` and \`30 <= temperatures[i] <= 100\`. # Output - A list of integers representing the number of days you would have to wait until a warmer temperature for each day in the input list. Write your function signature as: \`\`\`python def daily_temperatures(temperatures: List[int]) -> List[int]: \`\`\` # Example: \`\`\`python # Given temperatures temperatures = [73, 74, 75, 71, 69, 72, 76, 73] # Example function call result = daily_temperatures(temperatures) # Example output print(result) # Outputs: [1, 1, 4, 2, 1, 1, 0, 0] \`\`\`","solution":"from typing import List def daily_temperatures(temperatures: List[int]) -> List[int]: Given a list of daily temperatures, output a list where each element is the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. n = len(temperatures) answer = [0] * n stack = [] # This will store indices of the temperatures list. for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Given a binary tree, write a function to determine if it is a balanced binary tree. A balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differs by more than 1. Your solution should consider both the time and space complexity, and it should be optimized to run in linear time.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced(root): Determines if a binary tree is balanced. A tree is balanced if the depth of the two subtrees of every node never differs by more than 1. :param root: TreeNode, the root of the binary tree :return: Boolean, True if the tree is balanced, False otherwise def height_and_balance(node): if not node: return 0, True left_height, left_balanced = height_and_balance(node.left) right_height, right_balanced = height_and_balance(node.right) current_height = max(left_height, right_height) + 1 current_balance = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return current_height, current_balance return height_and_balance(root)[1]"},{"question":"You are given a \`land\` of size \`m x n\` and you want to find the maximum area of an island in the land. An island is a group of \`1\`s (representing land) connected 4-directionally (horizontal or vertical.) Each cell is either \`land\` (1) or \`water\` (0). Your task is to write a function \`maxAreaOfIsland(grid)\` where \`grid\` is an \`m x n\` binary matrix representing the map of the land. Example 1: Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]] Output: 6 Example 2: Input: grid = [[0,0,0,0,0,0,0,0]] Output: 0 Example 3: Input: grid = [[1,1,1], [1,0,1], [1,1,1]] Output: 8 Example 4: Input: grid = [[0,1,0,1,0], [1,0,1,0,1], [0,1,0,1,0], [1,0,1,0,1], [0,1,0,1,0]] Output: 1 Example 5: Input: grid = [[1]] Output: 1 Constraints: \`m == grid.length\` \`n == grid[i].length\` \`1 <= m, n <= 500\` \`grid[i][j]\` is either \`0\` or \`1\`.","solution":"def maxAreaOfIsland(grid): Returns the maximum area of an island in the given grid. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) max_area = 0 def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark the cell as visited by setting it to 0 area = 1 area += dfs(x + 1, y) area += dfs(x - 1, y) area += dfs(x, y + 1) area += dfs(x, y - 1) return area for i in range(m): for j in range(n): if grid[i][j] == 1: max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"Design a function that takes a string as input and returns the length of the longest substring that contains at most two distinct characters. The solution should optimize for performance, and aim to be executed in linear time complexity. s = \\"eceba\\" Output: 3 (The substring is \\"ece\\")","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len"},{"question":"Refine the following coding task: Implement the following function: def longest_even_subsequence(arr): This function takes in an array of integers and returns the length of the longest contiguous subsequence wherein all the numbers are even. If there are no even numbers in the array, the function should return 0. Example cases: longest_even_subsequence([1, 2, 4, 6, 3, 8, 10, 2]) = 3 # [4, 6] is the longest even subsequence. longest_even_subsequence([1, 3, 5, 7]) = 0 # No even numbers are present. longest_even_subsequence([2, 4, 6, 8, 10]) = 5 # Entire array consists of even numbers.","solution":"def longest_even_subsequence(arr): This function takes in an array of integers and returns the length of the longest contiguous subsequence wherein all the numbers are even. If there are no even numbers in the array, the function should return 0. max_len = 0 current_len = 0 for num in arr: if num % 2 == 0: current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Write a function that determines if a given string can be rearranged to form a palindrome. Return 'True' if it is possible, otherwise return 'False'. Example: input_string = \\"carrace\\" Output: True","solution":"def can_form_palindrome(input_string): Determines if the given string can be rearranged to form a palindrome. Args: input_string (str): The string to check. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. char_count = {} for char in input_string: char_count[char] = char_count.get(char, 0) + 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # A string can form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Write a function that takes a string representing a mathematical expression containing positive integers and the operators +, -, *, /, and parentheses, and returns the evaluated result following the proper order of operations. The function should handle nested parentheses and ensure no use of Python's eval() function for security reasons. Also, it should handle division by zero by returning the string \\"Error: Division by zero\\".","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing positive integers, operators +, -, *, /, and parentheses, following the proper order of operations. Args: expression (str): The mathematical expression to evaluate. Returns: int/float/str: The result of the evaluated expression or \\"Error: Division by zero\\" for division by zero errors. def precedence(op): if op == '+' or op == '-': return 1 if op == '*' or op == '/': return 2 return 0 def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == '+': values.append(left + right) elif op == '-': values.append(left - right) elif op == '*': values.append(left * right) elif op == '/': if right == 0: return \\"Error: Division by zero\\" values.append(left / right) def evaluate(expression): if expression == \\"\\": return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == ' ': i += 1 continue if expression[i] == '(': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == ')': while len(operators) != 0 and operators[-1] != '(': result = apply_operator(operators, values) if result == \\"Error: Division by zero\\": return result operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): result = apply_operator(operators, values) if result == \\"Error: Division by zero\\": return result operators.append(expression[i]) i += 1 while len(operators) != 0: result = apply_operator(operators, values) if result == \\"Error: Division by zero\\": return result return values[-1] return int(evaluate(expression)) if isinstance(evaluate(expression), (int, float)) else evaluate(expression)"},{"question":"Devise a function that takes an unsorted list of unique integers and returns a new list with the integers sorted in ascending order, but rearrange every second element to its negative value. Implement your solution in Python and provide an example input and output to demonstrate its functionality.","solution":"def rearrange_and_sort(arr): This function takes an unsorted list of unique integers and returns a new list: elements are sorted in ascending order, but every second element is its negative value. sorted_arr = sorted(arr) for i in range(1, len(sorted_arr), 2): sorted_arr[i] = -sorted_arr[i] return sorted_arr"},{"question":"Develop a Python function called \`longest_substring_with_k_distinct_chars(s: str, k: int) -> int\` that finds the length of the longest substring of a given string \`s\` that contains at most \`k\` distinct characters. Your solution should have a time complexity better than O(n^2). If \`s\` is empty or \`k\` is 0, return 0. # Example \`\`\`python s = \\"eceba\\" k = 2 # Output: 3 # The substring is \\"ece\\" with length 3 s = \\"aa\\" k = 1 # Output: 2 # The substring is \\"aa\\" with length 2 \`\`\` # Constraints - The input string \`s\` consists of only lowercase English letters. - 0 ≤ k ≤ len(s) ≤ 2 * 10^4","solution":"def longest_substring_with_k_distinct_chars(s: str, k: int) -> int: if k == 0 or not s: return 0 n = len(s) left = 0 right = 0 max_length = 0 char_count = {} while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Write a function that takes a list of strings and a target string, and returns a list of all the indices at which the target string is found in the list. If the target string is not in the list, return an empty list. Make sure your function handles case sensitivity properly and provide meaningful comments in your code explaining its functionality. Example: \`\`\`python list_of_strings = [\\"apple\\", \\"banana\\", \\"orange\\", \\"apple\\", \\"grape\\"] target_string = \\"apple\\" # Expected output: [0, 3] \`\`\`","solution":"def find_target_indices(strings, target): Returns a list of indices where the target string is found in the list of strings. Parameters: strings (list of str): The list of strings to search within. target (str): The target string to find in the list. Returns: list of int: List of indices at which the target string is found. Returns an empty list if the target string is not found. indices = [] for index, string in enumerate(strings): if string == target: indices.append(index) return indices"},{"question":"Create a function to reverse a given string recursively. The function should take a single string as input and return the reversed string as output. Ensure that no iterative structures are used. Example input: \\"hello\\" Example output: \\"olleh\\"","solution":"def reverse_string_recursively(s): Reverses a given string recursively. # Base case: if the string is empty or has only one character, return it as is. if len(s) <= 1: return s # Recursive case: return the last character + reverse of the rest of the string. return s[-1] + reverse_string_recursively(s[:-1])"},{"question":"Write a function \`longest_substring_two_distinct(s: str) -> int\` that takes a string \`s\` as input and returns the length of the longest substring that contains at most two distinct characters. The function should be efficient, aiming for a linear time complexity, O(n). Explain your approach and provide the function implementation. **Examples:** \`\`\`python assert longest_substring_two_distinct(\\"eceba\\") == 3 # \\"ece\\" assert longest_substring_two_distinct(\\"ccaabbb\\") == 5 # \\"aabbb\\" assert longest_substring_two_distinct(\\"abcabcabc\\") == 2 # \\"ab\\" \`\`\` **Explanation:** In the first example, the longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. In the second example, the longest substring with at most two distinct characters is \\"aabbb\\", which has a length of 5. In the third example, any two-character substring will suffice, but the maximum length will always be 2 for this string.","solution":"def longest_substring_two_distinct(s: str) -> int: Returns the length of the longest substring that contains at most two distinct characters. Args: s (str): input string Returns: int: length of the longest substring with at most two distinct characters from collections import defaultdict n = len(s) if n < 3: return n # Sliding window left and right pointers left, right = 0, 0 # HashMap character -> its rightmost position in the sliding window hashmap = defaultdict(int) max_len = 2 while right < n: # When the sliding window contains less than 3 characters hashmap[s[right]] = right right += 1 # When the sliding window contains 3 characters if len(hashmap) == 3: # delete the leftmost character del_index = min(hashmap.values()) del hashmap[s[del_index]] # move left pointer of the sliding window left = del_index + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given a mapping of digit to letters (just like on a telephone buttons) and a digit string. Write a function to return all possible letter combinations that the number could represent. Your function should utilize backtracking to explore all possibilities. The mapping is given below: \`\`\` 2: abc 3: def 4: ghi 5: jkl 6: mno 7: pqrs 8: tuv 9: wxyz \`\`\` Your function should return the combinations in lexicographical order. **Example** \`\`\` Input: \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] \`\`\` Note: - The digits 0 and 1 do not map to any letters. - The input string will only contain digits from 2 to 9. - The length of the input string is at most 4.","solution":"def letter_combinations(digits): Given a digit string, return all possible letter combinations that the number could represent. if not digits: return [] digit_to_char = { '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz' } def backtrack(index, path): if index == len(digits): combinations.append(''.join(path)) return possible_letters = digit_to_char[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return sorted(combinations)"},{"question":"Write a Python function that takes in a list of integers and an integer \`n\`. The function should return a new list containing only those integers from the input list that are divisible by \`n\`. If the input list is empty or no integers are divisible by \`n\`, the function should return an empty list. For instance, given the list \`[10, 20, 33, 46, 55]\` and \`n = 5\`, the function should return \`[10, 20, 55]\`. **Function Signature:** \`\`\`python def filter_divisible(numbers: list, n: int) -> list: pass \`\`\` **Example:** \`\`\`python assert filter_divisible([10, 20, 33, 46, 55], 5) == [10, 20, 55] assert filter_divisible([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5] assert filter_divisible([10, 20, 33, 46, 55], 10) == [10, 20] assert filter_divisible([], 3) == [] assert filter_divisible([1, 2, 4], 3) == [] \`\`\`","solution":"def filter_divisible(numbers: list, n: int) -> list: Returns a list of numbers from the input list that are divisible by n. Parameters: numbers (list): A list of integers. n (int): An integer divisor. Returns: list: A list of integers from the input list that are divisible by n. if n == 0: raise ValueError(\\"n should not be 0\\") return [num for num in numbers if num % n == 0]"},{"question":"# Reverse Integer with Overflow Handling Given a 32-bit signed integer, reverse digits of an integer. Assume we are dealing with an environment that could handle integers within the 32-bit signed integer range: [-2^31, 2^31 - 1]. The function should return 0 when the reversed integer overflows. Example 1: Input: 123 Output: 321 Example 2: Input: -123 Output: -321 Example 3: Input: 120 Output: 21 Example 4: Input: 1534236469 Output: 0 Explanation: Reversing 1534236469 gives 9646324351, which overflows and exceeds the range of a 32-bit signed integer. Note: - You must handle negative numbers appropriately. - Clearly specify the integer range that the environment can handle. - Ensure the function handles overflow cases and returns 0 when the reversed integer does not fit within the 32-bit signed integer range.","solution":"def reverse_integer(x): Reverse digits of a 32-bit signed integer. Return 0 when the reversed integer overflows. INT_MAX = 2**31 - 1 INT_MIN = -2**31 sign = -1 if x < 0 else 1 x *= sign reversed_int = 0 while x != 0: pop = x % 10 x //= 10 if reversed_int > (INT_MAX - pop) // 10: return 0 reversed_int = reversed_int * 10 + pop return sign * reversed_int"},{"question":"Write a Python function that takes a list of integers and a target number as input and returns a list of unique pairs (as tuples) from the given list that sum up to the target number. Ensure that each pair is ordered such that the smaller integer comes first, and avoid duplicate pairs in the output.","solution":"def find_pairs(nums, target): Given a list of integers and a target number, returns a list of unique pairs (tuples) from the list that sum up to the target. Each pair is ordered such that the smaller integer comes first, and duplicate pairs in the output are avoided. nums.sort() pairs = [] seen = set() for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: pair = (nums[i], nums[j]) if pair not in seen: pairs.append(pair) seen.add(pair) return pairs"},{"question":"Write a Python function that accepts a string containing a mix of alphabetic characters and integers, separates them into alphabetic and numeric components, and returns a dictionary with two keys: 'letters' and 'numbers'. The 'letters' key should have a string of all alphabetic characters sorted in ascending order, and the 'numbers' key should have the sum of all numeric values present in the string. Ensure to handle edge cases such as an empty string or a string with no alphabetic characters or no numeric characters. For example, given the input \\"a2b3c1\\", the function should return {'letters': 'abc', 'numbers': 6}.","solution":"def separate_and_sort(input_string): Separates alphabetic and numeric components from the input string. Sorted alphabetic characters are stored under the 'letters' key, and the sum of numeric values is stored under the 'numbers' key. Args: input_string (str): A string containing alphabetic characters and integers. Returns: dict: A dictionary with 'letters' and 'numbers' keys. letters = \\"\\" numbers = 0 for char in input_string: if char.isalpha(): letters += char elif char.isdigit(): numbers += int(char) sorted_letters = ''.join(sorted(letters)) return { 'letters': sorted_letters, 'numbers': numbers }"},{"question":"Write a function called \`reverse_vowels\` that takes a string as input and returns a new string with only the vowels reversed, while keeping all other characters in their original positions. Vowels are defined as 'a', 'e', 'i', 'o', 'u' and their uppercase counterparts. Ensure the function has a worst-case time complexity of O(n), where n is the length of the string.","solution":"def reverse_vowels(s): Returns a new string with the vowels reversed while keeping other characters in their original positions. vowels = set('aeiouAEIOU') s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 elif s_list[right] not in vowels: right -= 1 else: s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return ''.join(s_list)"},{"question":"LeetCode has decided to organize a coding competition event in M different regions of the world. Each region has several cities, and each city will host one or more competition events across W weeks. The task is to devise a travel schedule for participants to maximize the number of events they can attend, while adhering to a set of rules and restrictions. The rules and restrictions are as follows: Participants are allowed to travel among M regions, denoted by indices from 0 to M-1. The competition starts in the region indexed 0 on a Monday. Each region is interconnected with other regions by direct flights, represented by an M*M matrix, named regionalFlights, which indicates whether there's a flight from region i to region j. If there's no flight from region i to region j, regionalFlights[i][j] = 0; otherwise, regionalFlights[i][j] = 1. Additionally, regionalFlights[i][i] = 0 for all i. Within each region, cities are interconnected by direct flights, represented by a 2D list of N*N matrices named cityFlights. cityFlights[r] represents the matrix for region r indicating the flights among N cities in that region. If there's no flight from city p to city q in region r, cityFlights[r][p][q] = 0; otherwise, cityFlights[r][p][q] = 1. Also, cityFlights[r][p][p] = 0 for all p. Each city hosts a maximum number of competition events in different weeks, represented by an M*L*K tensor named events, where L is the number of cities in each region. The value of events[r][c][w] indicates the maximum number of competition events hosted in city c of region r in week w. Flights between regions and cities can only be taken once per day, specifically on Monday mornings of each week. Flight time is negligible and thus, not considered. Each flight has a cost, represented by an M*M matrix named regionalCosts for inter-region flights and a 2D list of N*N matrices named cityCosts for intra-region flights. regionalCosts[i][j] and cityCosts[r][p][q] denote the flight costs. If there's no flight from region or city, the cost is 0. The total budget for all flights is B dollars. Additionally, participants can only attend an event in a city if they solved a problem in a previous event in the same or another city. Participants earn experience points for each event attended, represented by an M*L*K tensor named expPoints, where the value of expPoints[r][c][w] indicates the experience points earned in city c of region r in week w. Example 1: Input: regionalFlights = [[0,1,1],[1,0,0],[1,0,0]], cityFlights = [ [[0,1],[1,0]], [[0,1],[1,0]], [[0,1],[1,0]] ], events = [[[2,3],[4,1]],[[1,0],[2,2]],[[3,3],[3,3]]], regionalCosts = [[0,300,500],[700,0,0],[800,0,0]], cityCosts = [ [[0,50],[50,0]], [[0,60],[60,0]], [[0,70],[70,0]] ], B = 1000, expPoints = [[[1,2],[2,1]],[[1,0],[1,1]],[[1,1],[1,1]]] Output: 7 Explanation: A viable strategy is: 1st week: Fly from region 0, city 0 to region 1, city 0 (costs 300 + 60 = 360 dollars), attend 1 event (1 exp point). Remaining budget: 640 dollars. 2nd week: Use same budget, stay in region 1 and attend 2 events (2 exp point). 3rd week: Fly from region 1, city 0 to region 2, city 1 (costs 700 + 70 dollars). Attend 1 event (1 exp). Remaining budget: None. Note: M, N, W are positive integers, ranging from [1, 50]. In the regionalFlights and cityFlights matrices, all values are integers ranging from [0, 1]. In the events tensor, values are integers ranging from [0, 10]. In the regionalCosts and cityCosts matrices, values are integers ranging from [0, 1000]. In the expPoints tensor, values are integers ranging from [0, 10]. The impact of flight hours on the calculation of event day attendance is not considered. Participants can only solve one problem (or earn experience points) per week. Participants cannot attend an event in a city unless they have solved a problem in another city in the same or previous week(s).","solution":"def calculate_max_events(M, regionalFlights, cityFlights, events, regionalCosts, cityCosts, B, expPoints): Calculate maximum number of events a participant can attend given the constraints. # For now, assuming maximum number of weeks (W) is derived from events tensor. W = len(events[0][0]) # Initialize DP table dp = [[[0] * (B + 1) for _ in range(M)] for _ in range(W + 1)] # Base condition: Starting point (region 0) dp[0][0][0] = 0 # Max experience points collected max_exp_points = 0 for week in range(W): for region in range(M): for budget in range(B + 1): if dp[week][region][budget] > 0 or (week == 0 and region == 0): # Within the same region, travel between cities for next_city in range(M): cost = regionalCosts[region][next_city] if regionalFlights[region][next_city] == 1 and budget + cost <= B: new_budget = budget + cost new_exp_points = dp[week][region][budget] + expPoints[next_city][0][week] dp[week + 1][next_city][new_budget] = max(dp[week + 1][next_city][new_budget], new_exp_points) max_exp_points = max(max_exp_points, new_exp_points) return max_exp_points"},{"question":"Write a Python function that takes a list of integers and a target integer as inputs and returns a list of all unique quadruplets [a, b, c, d] from the input list such that a + b + c + d equals the target integer. The order of the quadruplets in the output list does not matter, but the quadruplets themselves must be unique (i.e., no duplicate quadruplets). Assume that the input list can contain both positive and negative integers. Your implementation should optimize for time and space complexity. Include handling for edge cases such as an empty list or list that does not contain at least four integers. Your final output should include example function calls with test cases and the expected results.","solution":"def four_sum(nums, target): Returns a list of all unique quadruplets [a, b, c, d] such that a + b + c + d equals the target. nums.sort() results = [] n = len(nums) if n < 4: return results for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: sum_ = nums[i] + nums[j] + nums[left] + nums[right] if sum_ == target: results.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_ < target: left += 1 else: right -= 1 return results"},{"question":"Create a function that accepts a string as an argument and returns a dictionary where the keys are the unique characters in the string and the values are the counts of those characters. For example, given the input \\"apple\\", the function should return {'a': 1, 'p': 2, 'l': 1, 'e': 1}. Make sure your function handles both uppercase and lowercase letters appropriately, treating characters as case insensitive (i.e., 'A' and 'a' should be considered the same character).","solution":"def char_count(s): Returns a dictionary with the count of each unique character in the string. Treats characters as case insensitive. s = s.lower() count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Given a list of integers, write a function to create a new list where each element is the running product of the elements up to that index in the original list. That is, each element in the new list should be the product of all elements from the start of the list up to that index. For example, given the list \`[1, 2, 3, 4]\`, your function should return \`[1, 2, 6, 24]\`. Here is a possible function signature: \`\`\`python def running_product(nums: List[int]) -> List[int]: \`\`\`","solution":"from typing import List def running_product(nums: List[int]) -> List[int]: Returns a list where each element is the running product of elements up to that index in the input list. if not nums: return [] running_product_list = [nums[0]] for i in range(1, len(nums)): running_product_list.append(running_product_list[-1] * nums[i]) return running_product_list"},{"question":"Write a Python function to implement the binary search algorithm that takes two parameters: a sorted list of integers \`arr\` and an integer \`target\`. The function should return the index of \`target\` in \`arr\` if it is present, and \`-1\` if it is not present. Demonstrate your function with at least three test cases, showing both successful searches and unsuccessful searches.","solution":"def binary_search(arr, target): Conducts a binary search on a sorted list to find the index of the target element. If the target is found, returns its index. Otherwise, returns -1. Parameters: arr (list of int): A sorted list of integers. target (int): The integer to search for in the list. Returns: int: The index of the target element, or -1 if not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a Python function that takes a list of integers as input and returns a dictionary where the keys are the prime integers from the list, and the values are the number of times each prime integer appears in the list. Your function should include a helper function to check if a number is prime. Additionally, ensure your function handles an edge case where the list is empty by returning an empty dictionary. For testing your function, use the following list of integers: numbers = [3, 5, 7, 11, 3, 5, 2, 11, 13, 5, 3, 7]","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n**0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def prime_counts(numbers): Returns a dictionary where the keys are the prime integers from the list, and the values are the number of times each prime integer appears in the list. prime_count_dict = {} for num in numbers: if is_prime(num): if num in prime_count_dict: prime_count_dict[num] += 1 else: prime_count_dict[num] = 1 return prime_count_dict"},{"question":"Write a program that reads an integer input \`n\` from the user and then generates the first \`n\` numbers in the Fibonacci series. The Fibonacci series is characterized by the fact that every number after the first two is the sum of the two preceding ones. The sequence starts with 0 and 1. For instance, if the user inputs \`n = 6\`, the output should be \`0, 1, 1, 2, 3, 5\`. If the user inputs a number less than 1, the program should print an error message.","solution":"def generate_fibonacci_series(n): Generates the first n numbers in the Fibonacci series. If n is less than 1, returns an error message. if n < 1: return \\"Error: n should be a positive integer.\\" fibonacci_series = [] a, b = 0, 1 for _ in range(n): fibonacci_series.append(a) a, b = b, a + b return fibonacci_series"},{"question":"Write a function in Python that generates a maze using Depth-First Search (DFS) algorithm. The maze should be represented by a 2D list where '0' represents a wall and '1' represents a path. The function should take the dimensions of the maze as input and return the 2D list representing the generated maze. Provide a visualization function that prints the maze, where walls are denoted by '#' and paths by spaces.","solution":"import random def generate_maze(width, height): Generates a maze using Depth-First Search (DFS) algorithm. Parameters: width (int): The width of the maze height (int): The height of the maze Returns: List[List[int]]: The generated maze represented as a 2D list maze = [[0 for _ in range(width)] for _ in range(height)] start_x, start_y = (random.randrange(1, width - 1, 2), random.randrange(1, height - 1, 2)) def dfs(x, y): directions = [(2, 0), (-2, 0), (0, 2), (0, -2)] random.shuffle(directions) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 < nx < width and 0 < ny < height and maze[ny][nx] == 0: maze[ny][nx] = 1 maze[ny - dy//2][nx - dx//2] = 1 dfs(nx, ny) maze[start_y][start_x] = 1 dfs(start_x, start_y) # Make sure the entry and exit are open maze[1][0] = 1 maze[-2][-1] = 1 return maze def print_maze(maze): Visualizes the maze by printing it, where walls are denoted by '#' and paths by spaces. Parameters: maze (List[List[int]]): The maze represented as a 2D list for row in maze: print(''.join(' ' if cell == 1 else '#' for cell in row))"},{"question":"Problem: Given a string of parentheses, write an algorithm to determine if the string is a valid sequence of parentheses. A string containing just the characters '(' and ')' is considered valid if all opening parentheses have their corresponding closing parentheses in the correct order. For example: - \\"()\\" is valid - \\"(())\\" is valid - \\"(()\\" is not valid - \\"())(\\" is not valid Your function should return True if the sequence is valid and False otherwise. **Input:** A string s containing only the characters '(' and ')'. **Output:** A boolean value indicating whether the input string is a valid sequence of parentheses. **Examples:** \`\`\`python Input: \\"()\\" Output: True Input: \\"(())\\" Output: True Input: \\"(()\\" Output: False Input: \\"())(\\" Output: False \`\`\` Executable code <code> def is_valid_parentheses(s: str) -> bool: # BEGIN SOLUTION","solution":"def is_valid_parentheses(s: str) -> bool: stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function that takes a string as input and returns a new string with the characters in reverse order. Example: input_str = \\"hello\\" output_str = \\"olleh\\"","solution":"def reverse_string(input_str): Returns a new string with the characters in reverse order. return input_str[::-1]"},{"question":"Write a function in Python that takes a list of dictionaries containing student records and a threshold grade as input. The function should return a list of names of students whose average grade is above the threshold. Each student record contains the following keys: 'name' (a string), 'grades' (a list of integers, each representing a grade). Example input: students = [ {'name': 'Alice', 'grades': [85, 90, 78]}, {'name': 'Bob', 'grades': [70, 85, 65]}, {'name': 'Charlie', 'grades': [95, 100, 100]} ] threshold = 80 Example output: ['Alice', 'Charlie']","solution":"def students_above_threshold(students, threshold): Returns a list of names of students whose average grade is above the given threshold. Args: students (list of dict): List of student records where each record is a dictionary with keys 'name' and 'grades'. threshold (int): The grade threshold. Returns: list: List of names of students whose average grade is above the threshold. result = [] for student in students: avg_grade = sum(student['grades']) / len(student['grades']) if avg_grade > threshold: result.append(student['name']) return result"},{"question":"Write a function \`reverse_string\` that takes a string \`s\` as an argument and returns the string with its characters in reverse order. For example, if the input is 'abcdef', the output should be 'fedcba'.","solution":"def reverse_string(s): Returns the string with its characters in reverse order. return s[::-1]"},{"question":"Implement a ParkingSystem class: Design a parking system for a parking lot. The parking lot consists of three kinds of parking spaces: big, medium, and small. Each kind of parking space has the following characteristics: \`\`\` big: There are 'big' number of available big parking slots. medium: There are 'medium' number of available medium parking slots. small: There are 'small' number of available small parking slots. \`\`\` The class should contain the following methods: \`ParkingSystem(int big, int medium, int small)\` Initializes the object of the parking system with the number of slots for each parking space. \`boolean addCar(int carType)\` Parks the car of the type \`carType\` (1 for big, 2 for medium, 3 for small) into the corresponding parking space. Returns \`false\` if there is no available slot for this car type, otherwise parks the car and returns \`true\`. Additionally: \`boolean removeCar(int carType)\` Removes a car of the type \`carType\` from the parking space. Returns \`false\` if there are no cars of this car type parked, otherwise removes the car and returns \`true\`. \`int availableSlots(int carType)\` Returns the number of remaining slots for car type \`carType\` (1 for big, 2 for medium, 3 for small). Example: Input: [ \\"ParkingSystem\\", \\"addCar\\", \\"addCar\\", \\"addCar\\", \\"addCar\\", \\"removeCar\\", \\"availableSlots\\"] [ [3, 3, 3], [1], [2], [3], [1], [1], [1]] Output: [null, true, true, true, false, true, 2] Explanation: // Parking lot has 3 big, 3 medium, and 3 small parking slots. ParkingSystem ps = new ParkingSystem(3, 3, 3); ps.addCar(1); // Parks a big car. Returns true. Parking slots available: 2 big, 3 medium, 3 small ps.addCar(2); // Parks a medium car. Returns true. Parking slots available: 2 big, 2 medium, 3 small ps.addCar(3); // Parks a small car. Returns true. Parking slots available: 2 big, 2 medium, 2 small ps.addCar(1); // Tries to park another big car. Returns false. No big slots left. ps.removeCar(1); // Removes a big car. Returns true. Parking slots available: 3 big, 2 medium, 2 small ps.availableSlots(1); // Returns 2 as there are now 2 big parking slots available. Constraints: 0 <= big, medium, small, carType <= 1000","solution":"class ParkingSystem: def __init__(self, big: int, medium: int, small: int): self.spaces = { 1: big, 2: medium, 3: small } self.occupied_spaces = { 1: 0, 2: 0, 3: 0 } def addCar(self, carType: int) -> bool: if self.occupied_spaces[carType] < self.spaces[carType]: self.occupied_spaces[carType] += 1 return True return False def removeCar(self, carType: int) -> bool: if self.occupied_spaces[carType] > 0: self.occupied_spaces[carType] -= 1 return True return False def availableSlots(self, carType: int) -> int: return self.spaces[carType] - self.occupied_spaces[carType]"},{"question":"Given a sequence of operations on a stack data structure, implement a function that validates the sequence. The function should return a boolean indicating whether the sequence of operations is valid or not. The operations are given as a list of strings where \`\\"PUSH\\"\` represents an addition of an element to the stack and \`\\"POP\\"\` represents the removal of an element from the stack. An operation sequence is valid if no \`\\"POP\\"\` operation is attempted on an empty stack. Write test cases to validate your solution against various scenarios including edge cases. Example: \`\`\`python def validate_stack_operations(operations): stack_size = 0 for operation in operations: if operation == \\"PUSH\\": stack_size += 1 elif operation == \\"POP\\": if stack_size == 0: return False stack_size -= 1 return True # Test cases print(validate_stack_operations([\\"PUSH\\", \\"PUSH\\", \\"POP\\", \\"PUSH\\", \\"POP\\"])) # Expected: True print(validate_stack_operations([\\"POP\\", \\"PUSH\\", \\"POP\\"])) # Expected: False print(validate_stack_operations([\\"PUSH\\", \\"PUSH\\", \\"POP\\", \\"POP\\", \\"POP\\"])) # Expected: False print(validate_stack_operations([\\"PUSH\\", \\"POP\\", \\"PUSH\\", \\"PUSH\\", \\"POP\\", \\"POP\\", \\"PUSH\\"])) # Expected: True print(validate_stack_operations([])) # Expected: True \`\`\`","solution":"def validate_stack_operations(operations): Validates a sequence of stack operations. Parameters: operations (list): A list of strings where \\"PUSH\\" adds an element to the stack and \\"POP\\" removes an element from the stack. Returns: bool: True if the sequence of operations is valid, False otherwise. stack_size = 0 for operation in operations: if operation == \\"PUSH\\": stack_size += 1 elif operation == \\"POP\\": if stack_size == 0: return False stack_size -= 1 return True"},{"question":"Given an unordered list of positive integers, write a function that finds and returns the second smallest number in the list. If there is no second smallest number (because the list has fewer than two distinct elements), the function should return \`None\`. Example inputs and expected outputs: - For the input [4, 1, 7, 3, 2, 9], the function should return 2. - For the input [6, 4, 2, 8, 4, 6, 2], the function should return 4. - For the input [5, 5, 5, 5], the function should return \`None\`. You should handle all edge cases appropriately. Here's a skeleton of the function for you to complete: \`\`\`python def find_second_smallest(nums): if not nums or len(nums) < 2: return None # Logic to find the second smallest number first_min = float('inf') second_min = float('inf') for num in nums: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num # Check if a valid second smallest exists return second_min if second_min != float('inf') else None \`\`\`","solution":"def find_second_smallest(nums): if not nums or len(nums) < 2: return None first_min = float('inf') second_min = float('inf') for num in nums: if num < first_min: second_min = first_min first_min = num elif first_min < num < second_min: second_min = num if second_min == float('inf'): return None return second_min"},{"question":"Implement a function that evaluates a mathematical expression given as a string. The expression will contain non-negative integers, the operators +, -, *, / and parentheses. Your function should properly handle operator precedence and parentheses to return the correct result as an integer. Division should be performed as integer division, discarding any fractional part. def evaluate_expression(expression): For this task, you need to evaluate a mathematical expression provided as a string. The expression will contain non-negative integers, operators (+, -, *, /) and parentheses. You must handle the precedence of operators and parentheses correctly and return the result as an integer. Division should perform integer division. This is what the implementation should produce: >>> evaluate_expression(\\"3+2*2\\") == 7 >>> evaluate_expression(\\" 3/2 \\") == 1 >>> evaluate_expression(\\" 3+5 / 2 \\") == 5 >>> evaluate_expression(\\"(2+6*3+5-(3*14/7+2)*5)+3\\") == -12 # Your code goes here.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression provided as a string. The expression contains non-negative integers, operators (+, -, *, /), and parentheses. The expression is evaluated according to operator precedence and parentheses. Division is performed as integer division. :param expression: A string containing the mathematical expression. :return: The integer result of the evaluated expression. def calculate(operators, operands): right = operands.pop() left = operands.pop() operator = operators.pop() if operator == '+': operands.append(left + right) elif operator == '-': operands.append(left - right) elif operator == '*': operands.append(left * right) elif operator == '/': operands.append(left // right) # Integer division def precedence(op): if op in ('+', '-'): return 1 if op in ('*', '/'): return 2 return 0 operators, operands = [], [] i = 0 while i < len(expression): if expression[i] == ' ': i += 1 continue elif expression[i] == '(': operators.append(expression[i]) elif expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 operands.append(num) i -= 1 elif expression[i] == ')': while operators and operators[-1] != '(': calculate(operators, operands) operators.pop() else: while operators and precedence(operators[-1]) >= precedence(expression[i]): calculate(operators, operands) operators.append(expression[i]) i += 1 while operators: calculate(operators, operands) return operands[-1]"},{"question":"Consider a list of integers where each integer appears exactly twice, except for one integer which appears only once. Write a function \`find_unique_number\` that finds and returns this unique integer. \`\`\`python def find_unique_number(nums): # Your code here pass # Example usage: # find_unique_number([4, 3, 2, 4, 1, 3, 2]) should return 1 \`\`\`","solution":"def find_unique_number(nums): Finds and returns the unique number in a list where every other number appears exactly twice. unique_number = 0 for num in nums: unique_number ^= num return unique_number # Example usage: # find_unique_number([4, 3, 2, 4, 1, 3, 2]) should return 1"},{"question":"You are given a list of customers and their order totals. You need to determine the top 3 customers based on their total order amount. If there are ties (multiple customers with the same order total), include all tied customers, even if it exceeds 3. Write a function that receives a list of tuples, where each tuple contains the customer name and their order total, and returns a list of customer names based on the criteria mentioned. **Function Signature:** \`\`\`python def top_customers(orders: List[Tuple[str, int]]) -> List[str]: pass \`\`\` **Input:** - A list of tuples where each tuple consists of a string (customer name) and an integer (order total). **Output:** - A list of customer names. **Example:** \`\`\`python top_customers([(\\"Alice\\", 300), (\\"Bob\\", 200), (\\"Charlie\\", 300), (\\"David\\", 400), (\\"Eve\\", 200)]) \`\`\` **Expected Output:** \`\`\`python [\\"David\\", \\"Alice\\", \\"Charlie\\"] \`\`\` **Explanation:** - The customer with the highest order total is David with 400. - Alice and Charlie both have the next highest total with 300. - Since Eve and Bob are tied at the next level with 200, they are not included as we only need the top 3. # Constraints: - You can assume the list will have at least one customer. - The customer names are unique in terms of case-sensitivity (e.g., 'Alice' and 'alice' are considered different customers).","solution":"from typing import List, Tuple def top_customers(orders: List[Tuple[str, int]]) -> List[str]: # Sort the orders by the order total in descending order while maintaining original indices for stability sorted_orders = sorted(orders, key=lambda x: (-x[1], x[0])) # Find the order total of the third highest customer if len(sorted_orders) >= 3: third_highest_total = sorted_orders[2][1] else: third_highest_total = sorted_orders[-1][1] # Collect all customers who have order total equal to or higher than the third highest total result = [customer for customer, total in sorted_orders if total >= third_highest_total] return result"},{"question":"Given a string, write a function in Python that calculates the maximum number of consecutive vowels in the string. For this problem, consider vowels as 'a', 'e', 'i', 'o', and 'u'. Example: \`\`\`python s = \\"earthquake\\" \`\`\` The function should return: \`\`\`python 3 \`\`\` Explanation: The maximum consecutive vowels in \\"earthquake\\" are \\"e\\", \\"a\\", and \\"r\\". Therefore, the output is 3.","solution":"def max_consecutive_vowels(s): Returns the maximum number of consecutive vowels in the string s. vowels = set('aeiou') max_count = 0 current_count = 0 for char in s: if char in vowels: current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"Write a function \`flatten_dict\` that takes a dictionary with nested dictionaries as input, and returns a new dictionary with no nesting. The keys of the new dictionary should be the concatenation of the keys from each level separated by dots (e.g., \\"key1.key2.key3\\"). Assume all keys are strings and there are no cycles in the input dictionary. Example: \`\`\`python input_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } }, \\"f\\": { \\"g\\": 4 } } # Should return: # { # \\"a\\": 1, # \\"b.c\\": 2, # \\"b.d.e\\": 3, # \\"f.g\\": 4, # } def flatten_dict(d): result = {} def flatten(current, key_prefix=\\"\\"): for key, value in current.items(): full_key = f\\"{key_prefix}.{key}\\" if key_prefix else key if isinstance(value, dict): flatten(value, full_key) else: result[full_key] = value flatten(d) return result \`\`\`","solution":"def flatten_dict(d): Flatten a nested dictionary such that the keys are concatenations of the nested keys, separated by dots. result = {} def flatten(current, key_prefix=\\"\\"): for key, value in current.items(): full_key = f\\"{key_prefix}.{key}\\" if key_prefix else key if isinstance(value, dict): flatten(value, full_key) else: result[full_key] = value flatten(d) return result"},{"question":"Write a function that takes a list of strings and returns a list of all potential anagrams present in the original list. An anagram is a word, phrase, or name formed by rearranging the letters of another, using all the original letters exactly once. The function should group anagrams together, and their order within the group does not matter, but the groups should be sorted alphabetically based on the first word of each group. Ensure the function treats words case-insensitively and only includes groups with at least two anagrams. Additionally, provide a short test case to demonstrate the correct functionality of your function. Example Input: \`\`\`python words = [\\"listen\\", \\"enlist\\", \\"google\\", \\"silent\\", \\"inlets\\", \\"abc\\", \\"bca\\", \\"loan\\"] \`\`\` Example Output: \`\`\`python [ [\\"abc\\", \\"bca\\"], [\\"inlets\\", \\"listen\\", \\"silent\\", \\"enlist\\"] ] \`\`\`","solution":"from collections import defaultdict def find_anagrams(words): Returns a list of all potential anagram groups present in the original list. The groups are sorted alphabetically based on the first word of each group. Only groups with at least two anagrams are included. anagram_dict = defaultdict(list) for word in words: sorted_word = ''.join(sorted(word.lower())) anagram_dict[sorted_word].append(word) anagram_groups = [sorted(group) for group in anagram_dict.values() if len(group) > 1] return sorted(anagram_groups, key=lambda group: group[0].lower())"},{"question":"Write a function that organizes a list of tuples representing students and their grades into a dictionary where the keys are the grade categories (A, B, C, D, F) and the values are lists of student names. Each student's grade is evaluated based on the following scale: - A: 90 - 100 - B: 80 - 89 - C: 70 - 79 - D: 60 - 69 - F: 0 - 59 # Input - A list of tuples where each tuple contains a student's name (a string) and their grade (an integer). # Output - A dictionary with the grade categories as keys and lists of student names as values. # Example \`\`\` organize_grades([(\\"John\\", 85), (\\"Jane\\", 92), (\\"Dave\\", 78), (\\"Sara\\", 62), (\\"Tim\\", 55)]) \`\`\` # Expected output: \`\`\` { 'A': ['Jane'], 'B': ['John'], 'C': ['Dave'], 'D': ['Sara'], 'F': ['Tim'] } \`\`\` # Constraints - You can assume that each student's grade is a distinct integer between 0 and 100. - There may be no students in some grade categories, but all categories should be present in the dictionary even if they are empty.","solution":"def organize_grades(students): Organizes a list of tuples representing students and their grades into a dictionary. Parameters: students (list of tuples): A list where each tuple contains a student's name and their grade. Returns: dict: A dictionary where keys are grade categories ('A', 'B', 'C', 'D', 'F') and values are lists of student names. # Initialize the dictionary with keys for each grade category grade_categories = {'A': [], 'B': [], 'C': [], 'D': [], 'F': []} for name, grade in students: if 90 <= grade <= 100: grade_categories['A'].append(name) elif 80 <= grade <= 89: grade_categories['B'].append(name) elif 70 <= grade <= 79: grade_categories['C'].append(name) elif 60 <= grade <= 69: grade_categories['D'].append(name) elif 0 <= grade <= 59: grade_categories['F'].append(name) return grade_categories"},{"question":"Write a function that takes a list of integers and returns the first missing positive integer that does not appear in the list. The function should have a time complexity of O(n). For example, given the input [3, 4, -1, 1], the function should return 2.","solution":"def first_missing_positive(nums): Returns the first missing positive integer from the list nums. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a Python function that takes a string containing a mathematical expression in infix notation (e.g., \\"3 + 5 * 2 - 8\\") and converts it to postfix notation (e.g., \\"3 5 2 * + 8 -\\"). The function should correctly handle operator precedence and associativity for addition (+), subtraction (-), multiplication (*), and division (/).","solution":"def infix_to_postfix(expression): Converts an infix expression to postfix notation. Args: expression (str): A string containing a mathematical expression in infix notation. Returns: str: A string containing the expression in postfix notation. precedence = {'+':1, '-':1, '*':2, '/':2} def is_operator(c): return c in precedence def precedence_of(c): return precedence[c] def infix_to_postfix_conversion(expression): output = [] stack = [] for char in expression.split(): if char.isdigit(): output.append(char) elif is_operator(char): while (stack and stack[-1] != '(' and precedence_of(stack[-1]) >= precedence_of(char)): output.append(stack.pop()) stack.append(char) elif char == '(': stack.append(char) elif char == ')': while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() # pop '(' from stack while stack: output.append(stack.pop()) return ' '.join(output) return infix_to_postfix_conversion(expression)"},{"question":"Design a Python algorithm that, given a string of lowercase letters, determines all possible permutations that have no two identical letters adjacent to each other. If it is impossible to achieve such permutations, the algorithm should return an empty list.","solution":"from itertools import permutations from collections import Counter def no_adjacent_duplicates_permutations(s): def is_valid(permutation): for i in range(len(permutation) - 1): if permutation[i] == permutation[i + 1]: return False return True if not s: return [] # Generate permutations perms = set(permutations(s)) # Filter permutations that have no two identical letters adjacent valid_perms = [''.join(p) for p in perms if is_valid(p)] return valid_perms"},{"question":"Write a function that takes a list of timestamps representing the start and end times of various appointments in a 24-hour format \\"HH:MM\\". The function should return the total time in minutes when all appointments overlap. Example: appointments = [('09:00', '12:30'), ('11:15', '14:00'), ('10:00', '11:45')] In this example, the overlapping intervals are: - 11:15 to 11:45 (30 minutes) So, the output should be 30.","solution":"from datetime import datetime def compute_overlap_minutes(appointments): Returns the total time in minutes when all appointments overlap. :param appointments: List of tuples where each tuple is (start_time, end_time) with time in \\"HH:MM\\" 24-hour format. :return: Total overlapping time in minutes. # Convert time intervals into minutes since start of the day intervals = [(convert_to_minutes(start), convert_to_minutes(end)) for start, end in appointments] # Find the latest start time and earliest end time max_start = max(start for start, end in intervals) min_end = min(end for start, end in intervals) # Calculate the overlapping time overlap = max(0, min_end - max_start) return overlap def convert_to_minutes(t): Convert a time string in \\"HH:MM\\" format to minutes past midnight. :param t: Time string in \\"HH:MM\\" format :return: Equivalent minutes past midnight. dt = datetime.strptime(t, \\"%H:%M\\") return dt.hour * 60 + dt.minute"},{"question":"Write a function in Python that takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the number of times each string appears.","solution":"def count_strings(strings): Takes a list of strings and returns a dictionary where the keys are the unique strings from the list and the values are the number of times each string appears. :param strings: List of strings :return: Dictionary with string counts string_counts = {} for s in strings: if s in string_counts: string_counts[s] += 1 else: string_counts[s] = 1 return string_counts"},{"question":"You are given a nested dictionary where the values can be either a standard datatype (integer, float, string), another dictionary, or a list containing standard datatype elements. Your task is to design a function that takes this nested dictionary and returns a flattened dictionary. The keys in the flattened dictionary should be constructed by concatenating the keys from each level, separated by dots. Consider the following nested dictionary: \`\`\`python nested_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": [4, 5, 6] }, \\"g\\": 7 }, \\"h\\": [8, 9] } \`\`\` The expected output after flattening the dictionary would be: \`\`\`python flattened_dict = { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": [4, 5, 6], \\"b.g\\": 7, \\"h\\": [8, 9] } \`\`\` Design your function to recursively traverse through the dictionary, properly handle nested dictionaries and lists, and ensure the integrity of the data types. Custom exception handling should be included in case the nested structure contains unsupported types.","solution":"def flatten_dict(d, parent_key='', sep='.'): Flattens a nested dictionary such that the keys in the flattened dictionary are the concatenation of the nested keys separated by a specified separator. Parameters: ----------- d : dict The nested dictionary to flatten. parent_key : str, optional A prefix to prepend to the keys of the flattened dictionary (default is ''). sep : str, optional The separator to use between different levels of key concatenation (default is '.'). Returns: -------- dict A flattened dictionary. Raises: ------- TypeError: If the structure contains unsupported types. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) elif isinstance(v, list) or isinstance(v, (str, int, float)): items.append((new_key, v)) else: raise TypeError(f\\"Unsupported data type: {type(v)} in key {new_key}\\") return dict(items)"},{"question":"Design a Python function that takes a list of integers and an integer \`k\`, and reorders the list such that all elements less than \`k\` come before elements greater than or equal to \`k\`. The relative order of the elements should be preserved within the two partitions. For example, given the list \`[5, 1, 4, 2, 3]\` and \`k=3\`, the output should be \`[1, 2, 5, 4, 3]\`. Avoid using extra space for another list; modify the given list in place.","solution":"def partition_list(nums, k): Reorders the list \`nums\` such that all elements less than \`k\` come before elements greater than or equal to \`k\`, preserving their relative order. Args: nums (list of int): List of integers to be partitioned. k (int): The partition value. Returns: None. The list \`nums\` is modified in place. left = 0 # Initialize the left pointer for right in range(len(nums)): if nums[right] < k: nums[left], nums[right] = nums[right], nums[left] left += 1"},{"question":"Consider a grid with dimensions n times n. Each cell in this grid can either be empty (represented by 0) or contain an obstacle (represented by 1). A robot starts at the top-left corner of the grid (cell (0, 0)) and wants to reach the bottom-right corner of the grid (cell (n-1, n-1)). The robot can move either right or down at any step. Your goal is to determine the number of unique paths that the robot can take to reach its destination. Write a function \`unique_paths(grid: List[List[int]]) -> int\` that takes in a 2D list representing the grid and returns the number of unique paths from the top-left corner to the bottom-right corner, avoiding obstacles. If there is no possible path, return 0. # Input - A 2D list of integers \`grid\` where grid[i][j] can be either 0 (empty) or 1 (obstacle). - 2 ≤ n ≤ 100 (i.e., the grid is always at least a 2x2 grid). # Output - An integer representing the number of unique paths from the top-left corner to the bottom-right corner. # Example Input: \`\`\` grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] \`\`\` Output: \`\`\` 2 \`\`\` Explanation: The unique paths are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right # Example Input: \`\`\` grid = [ [0, 1], [0, 0] ] \`\`\` Output: \`\`\` 1 \`\`\` Explanation: The unique path is: 1. Down -> Right","solution":"from typing import List def unique_paths(grid: List[List[int]]) -> int: n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0]*n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Design and implement an e-commerce recommendation system that suggests products to users based on previous purchase history and browsing behavior. Use collaborative filtering to predict user ratings for different products, as well as content-based filtering to recommend items that are similar to those the user has shown interest in. Address the cold start problem where new users have little to no history, as well as the scalability issues associated with large datasets. Compare and contrast the performance of these algorithms using metrics such as Mean Squared Error (MSE) or Mean Absolute Error (MAE). Discuss the trade-offs between accuracy, complexity, and computational efficiency. Lastly, propose a hybrid approach that combines both collaborative and content-based filtering, and evaluate how it improves the recommendation quality. Validate your final model with user engagement metrics like click-through rate (CTR) and conversion rate.","solution":"import numpy as np import pandas as pd from sklearn.metrics import mean_squared_error, mean_absolute_error from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import linear_kernel from sklearn.model_selection import train_test_split import random # Collaborative Filtering using user-item matrix and matrix factorization (SVD) def collaborative_filtering(user_item_matrix, user_id, item_id, k=20): user_ratings = user_item_matrix[user_id, :] sim_scores = np.zeros(user_item_matrix.shape[0]) for other_user in range(user_item_matrix.shape[0]): sim_scores[other_user] = np.dot(user_ratings, user_item_matrix[other_user, :]) k_nearest_neighbors = np.argsort(sim_scores)[-k:] predicted_score = np.dot(user_item_matrix[k_nearest_neighbors, item_id], sim_scores[k_nearest_neighbors]) / (np.abs(sim_scores[k_nearest_neighbors]).sum() + 1e-8) return predicted_score # Content-based Filtering using item data def content_based_filtering(item_data, item_id, top_n=10): tfidf = TfidfVectorizer(stop_words='english') tfidf_matrix = tfidf.fit_transform(item_data['description']) cosine_similarities = linear_kernel(tfidf_matrix[item_id], tfidf_matrix).flatten() related_items_indices = cosine_similarities.argsort()[:-top_n-1:-1] return item_data.iloc[related_items_indices] # Hybrid Approach def hybrid_recommendation(user_item_matrix, item_data, user_id, item_id, k_cf=20, top_n_cb=10): cf_prediction = collaborative_filtering(user_item_matrix, user_id, item_id, k=k_cf) cb_recommendations = content_based_filtering(item_data, item_id, top_n=top_n_cb) final_recommendations = cb_recommendations.head(top_n_cb) final_recommendations['cf_score'] = cf_prediction final_recommendations = final_recommendations.sort_values(by='cf_score', ascending=False) return final_recommendations # Generating synthetic data for testing def generate_synthetic_data(num_users, num_items): user_ids = [f\\"user_{i}\\" for i in range(num_users)] item_ids = [f\\"item_{i}\\" for i in range(num_items)] user_item_matrix = np.random.rand(num_users, num_items) item_data = pd.DataFrame({ 'item_id': item_ids, 'description': [f\\"Description of item {i}\\" for i in range(num_items)] }) return user_ids, item_ids, user_item_matrix, item_data # Evaluate performance def evaluate_model(user_item_matrix, user_ids, item_ids): mse_scores = [] mae_scores = [] for _ in range(100): # Sample 100 random test cases user_id = random.choice(range(len(user_ids))) item_id = random.choice(range(len(item_ids))) true_rating = user_item_matrix[user_id, item_id] predicted_rating = collaborative_filtering(user_item_matrix, user_id, item_id) mse_scores.append((predicted_rating - true_rating) ** 2) mae_scores.append(abs(predicted_rating - true_rating)) mse = np.mean(mse_scores) mae = np.mean(mae_scores) return mse, mae # Generating synthetic data num_users = 100 num_items = 50 user_ids, item_ids, user_item_matrix, item_data = generate_synthetic_data(num_users, num_items) # Evaluate the collaborative filtering model mse, mae = evaluate_model(user_item_matrix, user_ids, item_ids) print(f\\"Collaborative Filtering - MSE: {mse}, MAE: {mae}\\")"},{"question":"Design a function that takes a list of integers and returns all possible subsets of the list. Each subset should be sorted in non-descending order, and the solution should not include duplicate subsets. Implement this function in Python and explain the approach and techniques you used to solve the problem. Provide an example input and output to illustrate how the function works.","solution":"def subsets(nums): Returns all possible subsets of the list nums. Each subset is sorted in non-descending order. Duplicate subsets are not included. def backtrack(start, end, path): result.append(path) for i in range(start, end): if i > start and nums[i] == nums[i - 1]: # skip duplicates continue backtrack(i + 1, end, path + [nums[i]]) nums.sort() # sort the nums to ensure non-descending order in subsets result = [] backtrack(0, len(nums), []) return result"},{"question":"Write a function in Python that takes a string as input and returns a dictionary where the keys are the unique words in the string and the values are the counts of each word’s occurrences. The function should ignore punctuation and be case-insensitive. Words are defined as sequences of characters separated by whitespace.","solution":"import re from collections import defaultdict def word_count(s): Returns a dictionary where the keys are the unique words in the string and the values are the counts of each word's occurrences. The function ignores punctuation and is case-insensitive. words = re.findall(r'bw+b', s.lower()) word_dict = defaultdict(int) for word in words: word_dict[word] += 1 return dict(word_dict)"},{"question":"A company wants to create a play list of 'N' songs, where each song has a length in seconds and a genre. However, they face a constraint that no two songs of the same genre can be placed consecutively. Write a function that takes a list of tuples, each containing the length of the song and its genre, and returns the order of song indices to be played that satisfies the constraint. If multiple solutions are possible, return any valid order. If it is impossible to create such a playlist, return an empty list. If all songs are of unique genres, simply return the list in the order given. Example: \`\`\` Input: [(200, 'pop'), (180, 'rock'), (120, 'pop'), (250, 'jazz'), (90, 'rock')] Output: [0, 1, 3, 2, 4] or any other combination that satisfies the genre constraint. \`\`\` **Function Signature:** \`\`\`python def create_playlist(songs: List[Tuple[int, str]]) -> List[int]: \`\`\`","solution":"from collections import defaultdict from typing import List, Tuple def create_playlist(songs: List[Tuple[int, str]]) -> List[int]: if not songs: # If the input list is empty, return an empty list return [] # Step 1: Group the songs by their genres genre_dict = defaultdict(list) for i, (length, genre) in enumerate(songs): genre_dict[genre].append(i) # Check if there is any genre that has more than half of the total songs. max_genre_count = max(len(genre_songs) for genre_songs in genre_dict.values()) if max_genre_count > (len(songs) + 1) // 2: return [] # It's not possible to create the playlist result = [] # Create a list of genres sorted by the number of songs in descending order sorted_genres = sorted(genre_dict.keys(), key=lambda g: -len(genre_dict[g])) # Use two pointers to interleave songs from the genres pointers = {genre: 0 for genre in sorted_genres} for i in range(len(songs)): for j in range(len(sorted_genres)): genre = sorted_genres[j] if pointers[genre] < len(genre_dict[genre]): if not result or songs[result[-1]][1] != genre: result.append(genre_dict[genre][pointers[genre]]) pointers[genre] += 1 break return result"},{"question":"Create a function that, given an array of integers representing the heights of a series of buildings, returns the maximum number of buildings that can be seen from the rightmost building. A building is considered visible if there are no taller buildings blocking the view between it and the rightmost building. Example array: [3, 5, 4, 4, 2, 1]","solution":"def max_visible_buildings_from_right(buildings): Returns the number of buildings visible when viewed from the rightmost building. if not buildings: return 0 max_height = 0 visible_count = 0 for height in reversed(buildings): if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Write a Python program to merge two sorted linked lists into a single sorted linked list. Each node in the linked list contains an integer value and a reference to the next node. Implement a function that takes the head nodes of both linked lists as input and returns the head node of the merged linked list. Your solution should maintain the order of elements and handle lists of up to 1,000 nodes efficiently. Ensure that your program can handle cases where one or both of the input lists are empty.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): # Create a dummy node to act as the start of the merged list dummy = ListNode() current = dummy # Traverse both lists and append the smaller node to the merged list while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If one of the lists is not empty, append the rest of it to the merged list if l1: current.next = l1 elif l2: current.next = l2 # Return the head of the merged list return dummy.next"},{"question":"Palindrome Detector: You are given a string \`s\` consisting of lowercase letters. Your task is to write a Python function \`is_palindrome(s: str) -> bool\` that checks whether \`s\` is a palindrome or not. A string is considered a palindrome if it reads the same backward as forward. **Example:** \`\`\`python assert is_palindrome(\\"racecar\\") == True assert is_palindrome(\\"hello\\") == False assert is_palindrome(\\"level\\") == True assert is_palindrome(\\"algorithm\\") == False \`\`\` **Requirements:** - Do not use library functions that directly solve the problem (e.g., reversing the string using slicing or built-in functions). - Ensure that your function has a linear time complexity, i.e., \`O(n)\`. **Your solution should include:** 1. A brief explanation of your logic. 2. The function definition and implementation. Example Python code: \`\`\`python def is_palindrome(s: str) -> bool: # Explanation: # Insert your solution here ... \`\`\`","solution":"def is_palindrome(s: str) -> bool: Check whether the given string s is a palindrome. A string is considered a palindrome if it reads the same backward as forward. Parameters: s (str): The input string consisting of lowercase letters. Returns: bool: True if the string is a palindrome, False otherwise. left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True"},{"question":"Write a function that takes a nested dictionary and returns a new dictionary in which the keys are the unique paths to leaf nodes, and the values are the corresponding leaf node values. Paths should be represented as tuples of keys. The function should handle arbitrarily nested dictionaries and be able to process large inputs efficiently. Additionally, provide a piece of erroneous code that attempts to solve the problem but fails due to a common mistake. Analyze the code, identify the mistake, and correct it.","solution":"def flatten_dict(d, parent_key=()): Flattens a nested dictionary so that keys are tuples representing the path to each leaf node, and values are the corresponding leaf node values. Args: d (dict): The nested dictionary to flatten. parent_key (tuple): The current path (used for recursion). Returns: dict: The flattened dictionary. items = {} for k, v in d.items(): new_key = parent_key + (k,) if isinstance(v, dict): items.update(flatten_dict(v, new_key)) else: items[new_key] = v return items # Erroneous Code def erroneous_flatten_dict(d, parent_key=\\"\\"): Attempts to flatten a nested dictionary but fails due to a common mistake. Args: d (dict): The nested dictionary to flatten. parent_key (str): The current path (used for recursion). Returns: dict: The flattened dictionary. items = {} for k, v in d.items(): new_key = parent_key + \\".\\" + k if parent_key else k if isinstance(v, dict): items.update(erroneous_flatten_dict(v, new_key)) else: items[new_key] = v return items # Mistake: Using string concatenation and '.' as separator instead of tuples. # This can cause issues when keys have '.' in them or when performing operations that depend on immutable keys."},{"question":"Given an array of integers, return the length of the longest subarray where the sum of the elements is equal to zero. For example, for the array [1, -1, 3, 2, -2, -3, 4], the longest subarray with a sum of zero is [1, -1, 3, 2, -2, -3], with a length of 6.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest subarray with a sum of zero. sum_to_index = {} max_length = 0 current_sum = 0 for i, num in enumerate(arr): current_sum += num if current_sum == 0: max_length = i + 1 if current_sum in sum_to_index: max_length = max(max_length, i - sum_to_index[current_sum]) else: sum_to_index[current_sum] = i return max_length"},{"question":"Write a Python program that reads a CSV file containing student records and outputs a summary report of the class's performance. The CSV file will have the following columns: Student Name, Subject, Grade. The program should do the following: 1. Calculate and display each student's average grade. 2. Determine the highest and lowest grades per subject, along with the student who achieved them. 3. Provide the overall class average grade. Example CSV file content: \`\`\` Student Name,Subject,Grade Alice Johnson,Math,88 Alice Johnson,Science,92 Bob Smith,Math,75 Bob Smith,Science,85 Charlie Brown,Math,90 Charlie Brown,Science,78 \`\`\`","solution":"import csv from collections import defaultdict def read_csv(filename): with open(filename, mode='r') as file: reader = csv.DictReader(file) data = [row for row in reader] return data def student_average(data): student_grades = defaultdict(list) for record in data: student_grades[record['Student Name']].append(float(record['Grade'])) student_averages = {student: sum(grades)/len(grades) for student, grades in student_grades.items()} return student_averages def subject_extremes(data): subjects = defaultdict(list) for record in data: subjects[record['Subject']].append((record['Student Name'], float(record['Grade']))) subject_high_low = {} for subject, grades in subjects.items(): highest = max(grades, key=lambda x: x[1]) lowest = min(grades, key=lambda x: x[1]) subject_high_low[subject] = { 'highest': highest, 'lowest': lowest } return subject_high_low def overall_class_average(data): total_grade = 0 total_count = 0 for record in data: total_grade += float(record['Grade']) total_count += 1 class_average = total_grade / total_count return class_average def class_performance_summary(filename): data = read_csv(filename) student_averages = student_average(data) subject_high_low = subject_extremes(data) class_average = overall_class_average(data) summary = { 'student_averages': student_averages, 'subject_high_low': subject_high_low, 'class_average': class_average } return summary"},{"question":"Can you write a function that takes a string as input and returns the string with vowels removed? Input: \\"hello world\\"","solution":"def remove_vowels(input_string): Removes vowels from the input string. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels])"},{"question":"Write a function named \`sort_matrix_columns\` that accepts a 2D list (matrix) \`mat\` with non-negative integers, and returns a new matrix where each column is sorted in ascending order. Ensure that the original matrix remains unmodified. The function should handle edge cases such as empty matrices and matrices with different row lengths gracefully. \`\`\`python def sort_matrix_columns(mat): Given a 2D list (matrix) mat containing non-negative integers, return a new matrix where each column is sorted in ascending order. Parameters: mat (list of lists of int): The input matrix with non-negative integers. Returns: list of lists of int: A new matrix with each column sorted in ascending order. Examples: sort_matrix_columns([[9, 4, 6], [3, 7, 5], [8, 2, 1]]) --> [[3, 2, 1], [8, 4, 5], [9, 7, 6]] sort_matrix_columns([[7, 5], [1, 12], [9, 3]]) --> [[1, 3], [7, 5], [9, 12]] sort_matrix_columns([[], []]) --> [[], []] sort_matrix_columns([]) --> [] \`\`\`","solution":"def sort_matrix_columns(mat): Given a 2D list (matrix) mat containing non-negative integers, return a new matrix where each column is sorted in ascending order. Parameters: mat (list of lists of int): The input matrix with non-negative integers. Returns: list of lists of int: A new matrix with each column sorted in ascending order. if not mat or not mat[0]: return mat # Transpose the matrix transposed = list(zip(*mat)) # Sort each column sorted_columns = [sorted(column) for column in transposed] # Transpose back to original form sorted_matrix = list(zip(*sorted_columns)) # Convert tuples back to lists sorted_matrix = [list(row) for row in sorted_matrix] return sorted_matrix"},{"question":"Write a Python program to implement a Min-Heap data structure. Your implementation should include the following functionalities: 1. Insert an integer into the Min-Heap. 2. Extract the minimum integer from the Min-Heap. 3. Return the minimum integer without removing it from the Min-Heap. 4. Return the size of the Min-Heap. Ensure appropriate exception handling if an attempt is made to extract from an empty Min-Heap. Use an array to represent the heap structure, maintaining the properties of a Min-Heap throughout all operations.","solution":"import heapq class MinHeap: def __init__(self): self.heap = [] def insert(self, val): Insert an integer into the Min-Heap heapq.heappush(self.heap, val) def extract_min(self): Extract the minimum integer from the Min-Heap if not self.heap: raise IndexError(\\"Extract from an empty heap is not allowed\\") return heapq.heappop(self.heap) def get_min(self): Return the minimum integer without removing it from the Min-Heap if not self.heap: raise IndexError(\\"Heap is empty\\") return self.heap[0] def size(self): Return the size of the Min-Heap return len(self.heap)"},{"question":"Write a Python function that takes two lists of integers as input and returns a new list containing the intersection of the two lists, i.e., the elements that are common to both lists. The function should handle cases where the lists contain duplicate elements and return the intersection with duplicates considered. Ensure that the function can handle various data types and invalid inputs such as non-list arguments or lists containing non-integer elements.","solution":"def intersection_of_lists(list1, list2): Returns a new list containing the intersection of the two input lists with duplicates considered. if not isinstance(list1, list) or not isinstance(list2, list): raise ValueError(\\"Both arguments must be lists\\") if any(not isinstance(x, int) for x in list1) or any(not isinstance(x, int) for x in list2): raise ValueError(\\"Both lists must contain only integers\\") list1_counter = {} list2_counter = {} for item in list1: if item in list1_counter: list1_counter[item] += 1 else: list1_counter[item] = 1 for item in list2: if item in list2_counter: list2_counter[item] += 1 else: list2_counter[item] = 1 intersection = [] for item in list1_counter: if item in list2_counter: min_count = min(list1_counter[item], list2_counter[item]) intersection.extend([item] * min_count) return intersection"},{"question":"Write a Python function to calculate the moving average of a list of numbers over a specified window size. The function should return a new list containing the moving averages for each window position. Parameters: - A list of integers or floating-point numbers, \`data\`. - An integer, \`window_size\`, representing the number of elements in each window. Output: - A list of floating-point numbers representing the moving average for each possible position of the window in the original data list. The function should handle cases where the window size is greater than the length of the list by raising a ValueError. Additionally, ensure that the function handles edge cases and invalid inputs gracefully. Example: \`\`\`python data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] window_size = 3 result = moving_average(data, window_size) print(result) # Expected Output: [2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] \`\`\`","solution":"def moving_average(data, window_size): Calculates the moving average of a list of numbers over a specified window size. Parameters: - data (list): A list of integers or floating-point numbers. - window_size (int): The number of elements in each window. Returns: - list: A list of floating-point numbers representing the moving average for each possible position of the window in the original data list. Raises: - ValueError: If window_size is greater than the length of data. if not data or window_size <= 0: return [] if window_size > len(data): raise ValueError(\\"window_size must not be greater than the length of data\\") moving_averages = [] for i in range(len(data) - window_size + 1): window = data[i:i + window_size] average = sum(window) / window_size moving_averages.append(average) return moving_averages"},{"question":"Create a Python function \`find_anagram_groups(words)\` that takes a list of words and returns groups of anagrams found within the list. An anagram is a word formed by rearranging the letters of another word (e.g., \\"listen\\" and \\"silent\\"). Each group of anagrams should be represented as a list of words, and the function should return a list of these groups. If no anagrams are found, return an empty list. The order of words and anagram groups in the output does not matter. def find_anagram_groups(words): Returns groups of anagrams from the input list of words. >>> find_anagram_groups([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"evil\\", \\"vile\\", \\"veil\\"]) [['listen', 'silent', 'enlist'], ['google', 'gogole'], ['evil', 'vile', 'veil']] >>> find_anagram_groups([\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\"]) [['cat', 'tac'], ['dog', 'god']] >>> find_anagram_groups([\\"hello\\", \\"world\\"]) [] >>> find_anagram_groups([]) [] pass","solution":"def find_anagram_groups(words): from collections import defaultdict # Dictionary to hold sorted character tuple as key and list of anagrams as value anagrams = defaultdict(list) for word in words: # Sorting the word and using it as a key key = tuple(sorted(word)) anagrams[key].append(word) # Returning groups of anagrams return [group for group in anagrams.values() if len(group) > 1]"},{"question":"Write a function that takes a list of integers and returns a new list that contains only the integers that are greater than the average of the original list. def above_average(lst: list) -> list: This function accepts a list of integers 'lst' and computes the average value of these integers. It then constructs a new list containing only those integers from the original list that are greater than the computed average. >>> above_average([1, 2, 3, 4, 5]) [4, 5] >>> above_average([10, 20, 30, 40, 50]) [40, 50] >>> above_average([-1, -2, -3, -4, -5]) [-1, -2]","solution":"def above_average(lst: list) -> list: This function accepts a list of integers 'lst' and computes the average value of these integers. It then constructs a new list containing only those integers from the original list that are greater than the computed average. if not lst: return [] average = sum(lst) / len(lst) return [x for x in lst if x > average]"},{"question":"A company needs a program to manage its inventory. You are required to write a function that accepts a list of item names and their corresponding quantities (in the format of a list of tuples), and returns the total number of items available in the inventory. Ensure your algorithm efficiently handles a large inventory of items. Example: Input: [('apple', 10), ('banana', 5), ('orange', 3), ('apple', 2)] Output: 20 Note: You may assume all item quantities are non-negative integers and the list can contain duplicates of the same item.","solution":"def total_inventory(items): Returns the total number of items available in the inventory. Args: items (list of tuples): A list where each tuple contains an item name and its quantity. Returns: int: The total number of items. total = 0 for item, quantity in items: total += quantity return total"},{"question":"Write the code for the function: def min_avg_log(arr, k): Given a list of integers arr and an integer k, find the starting index of the subarray of length k that has the minimum average value. If there are multiple such subarrays, return the starting index of the first one. If the length of the array is less than k, return -1. Example 1: Input: [1, 2, 3, 4, 5], 2 Output: 0 Explanation: The subarrays of length 2 are [1, 2], [2, 3], [3, 4], [4, 5]. The averages are 1.5, 2.5, 3.5, and 4.5 respectively. The minimum average is 1.5 for the subarray starting at index 0. Example 2: Input: [1, 4, 2, 3], 3 Output: 0 Explanation: The subarrays of length 3 are [1, 4, 2] and [4, 2, 3]. The averages are 2.33 and 3 respectively. The minimum average is 2.33 for the subarray starting at index 0. Constraints: * 1 <= len(arr) <= 10000 * -1e4 <= arr[i] <= 1e4 * 1 <= k <= len(arr) pass","solution":"def min_avg_log(arr, k): Given a list of integers arr and an integer k, find the starting index of the subarray of length k that has the minimum average value. If there are multiple such subarrays, return the starting index of the first one. If the length of the array is less than k, return -1. n = len(arr) if n < k: return -1 min_avg = float('inf') min_index = -1 # calculate the sum of first window of size k window_sum = sum(arr[:k]) # initialize min window sum as the sum of the first window min_window_sum = window_sum min_index = 0 # slide window by one element at a time towards right for i in range(1, n - k + 1): window_sum = window_sum - arr[i - 1] + arr[i + k - 1] if window_sum < min_window_sum: min_window_sum = window_sum min_index = i return min_index"},{"question":"Write a function that takes a list of integers and returns the second most frequent number. If there is no unique second most frequent number, or if the list contains fewer than two distinct numbers, return None. The function should be efficient in both time and space complexity.","solution":"def second_most_frequent(nums): Returns the second most frequent number in the list. If there is no unique second most frequent number, or if the list contains fewer than two distinct numbers, returns None. if len(nums) < 2: return None from collections import Counter frequency = Counter(nums) if len(frequency) < 2: return None most_common = frequency.most_common() if len(most_common) < 2: return None second_most_common = most_common[1][1] # Check if there's a unique second most frequent number if sum(1 for item in most_common if item[1] == second_most_common) > 1: return None return most_common[1][0]"},{"question":"Create a Python function named \`find_max_subarray_sum\` that takes a list of integers as input and returns the maximum sum of any contiguous subarray within the list. A subarray must contain at least one number. Implement the function using Kadane's Algorithm. # Constraints: - The input list will have at least one integer. - The list can contain both positive and negative integers. # Example: \`\`\`python def find_max_subarray_sum(arr): # Your implementation here # Example usage: print(find_max_subarray_sum([1, -3, 2, 1, -1])) # Output: 3 (subarray: [2, 1]) print(find_max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3])) # Output: 7 (subarray: [4, -1, -2, 1, 5]) print(find_max_subarray_sum([5, 4, -1, 7, 8])) # Output: 23 (subarray: [5, 4, -1, 7, 8]) print(find_max_subarray_sum([-1, -2, -3, -4])) # Output: -1 (subarray: [-1]) \`\`\`","solution":"def find_max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray within the input list of integers. Implements Kadane's Algorithm. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Create a function that takes an array of integers and returns a new array containing only the even integers, sorted in ascending order. The original array should remain unmodified. If the input array is empty or contains no even numbers, the function should return an empty array.","solution":"def filter_and_sort_evens(arr): Takes an array of integers and returns a new array containing only the even integers, sorted in ascending order. Parameters: arr (list): A list of integers. Returns: list: A new list containing only even integers sorted in ascending order. even_integers = [x for x in arr if x % 2 == 0] even_integers.sort() return even_integers"},{"question":"Given a list of folder paths represented as strings, implement a function to group the paths by their root directories. A root directory is defined as the top-most directory in the path. If a path doesn't have any subdirectories, it is its own root. Your function should return a dictionary where the keys are the root directories and the values are lists of all paths that belong to that root. **Constraints:** - Each path in the list will be unique. - The path components are separated by forward slashes (\`/\`). - A path can contain alphanumeric characters and underscores (\`_\`). - The number of paths will not exceed 1000. **Function Signature:** \`\`\`python def group_by_roots(paths: List[str]) -> Dict[str, List[str]]: pass \`\`\` **Examples:** \`\`\`python # Example 1: paths = [ \\"root/dir1/subdir1/file1.txt\\", \\"root/dir1/subdir2/file2.txt\\", \\"root/dir2/file3.txt\\", \\"root/dir2/file4.txt\\", \\"root2/file5.txt\\" ] print(group_by_roots(paths)) # Output: { # \\"root\\": [ # \\"root/dir1/subdir1/file1.txt\\", # \\"root/dir1/subdir2/file2.txt\\", # \\"root/dir2/file3.txt\\", # \\"root/dir2/file4.txt\\" # ], # \\"root2\\": [\\"root2/file5.txt\\"] # } # Example 2: paths = [ \\"a/b/c/d/e.txt\\", \\"a/b/f/g.txt\\", \\"a/h.txt\\", \\"b/i/j.txt\\", \\"c/k.txt\\" ] print(group_by_roots(paths)) # Output: { # \\"a\\": [\\"a/b/c/d/e.txt\\", \\"a/b/f/g.txt\\", \\"a/h.txt\\"], # \\"b\\": [\\"b/i/j.txt\\"], # \\"c\\": [\\"c/k.txt\\"] # } \`\`\`","solution":"def group_by_roots(paths): Group folder paths by root directories. Args: paths (List[str]): List of folder paths. Returns: Dict[str, List[str]]: Dictionary grouping paths by their root directories. root_dict = {} for path in paths: # Extract the root directory root = path.split('/')[0] if root not in root_dict: root_dict[root] = [] root_dict[root].append(path) return root_dict"},{"question":"Design a function that takes a list of integers and returns the sum of the two largest unique integers. If there are fewer than two unique integers in the list, return 0. Ensure your function handles edge cases efficiently and maintains optimal performance. # Example \`\`\` Input: [1, 2, 3, 4, 5] Output: 9 Input: [5, 5, 5] Output: 0 Input: [10, 10, 9, 8] Output: 19 \`\`\` # Constraints 1. The function should handle lists of up to 10^6 integers efficiently. 2. All integers can be assumed to be in the range of -10^6 to 10^6. # Notes - Consider utilizing different data structures to store unique integers if necessary. - Think about how sorting might affect performance and choose your approach accordingly.","solution":"def sum_of_two_largest_unique_integers(lst): Returns the sum of the two largest unique integers in the list. If there are fewer than two unique integers, returns 0. unique_integers = set(lst) if len(unique_integers) < 2: return 0 largest = second_largest = float('-inf') for num in unique_integers: if num > largest: second_largest = largest largest = num elif num > second_largest: second_largest = num return largest + second_largest"},{"question":"Write a Python function that takes a list of numbers and returns a dictionary with the keys 'odd' and 'even'. The 'odd' key should have a list of all odd numbers from the input list, and the 'even' key should have a list of all even numbers. If the list contains any non-numeric values, the function should raise a ValueError with a message indicating that all elements must be numbers. Ensure your function is robust and handles various edge cases, such as an empty list or a list with all odd/even numbers. Sample erroneous code: \`\`\`python def odd_even(numbers): odd = [] even = [] for number in numbers: if number % 2 == 0: even.append(number) else: odd.append(number) return {'odd': odd, 'even': even} \`\`\` Identify the issues and correct them to make the function handle edge cases and invalid inputs as specified.","solution":"def odd_even(numbers): Returns a dictionary with the keys 'odd' and 'even'. The 'odd' key should have a list of all odd numbers from the input list, and the 'even' key should have a list of all even numbers. Raises a ValueError if the list contains non-numeric values. Args: numbers (list): A list of integers. Returns: dict: A dictionary with keys 'odd' and 'even'. Raises: ValueError: If any element in the list is not a number. odd = [] even = [] for number in numbers: if not isinstance(number, (int, float)): raise ValueError(\\"All elements must be numbers\\") if number % 2 == 0: even.append(number) else: odd.append(number) return {'odd': odd, 'even': even}"},{"question":"Define a function called \`find_unique_numbers\` that takes a list of integers as input and returns a list of integers that appear exactly once in the input list, in the order they first appeared. **Function Signature:** \`\`\`python def find_unique_numbers(nums: List[int]) -> List[int]: pass \`\`\` **Constraints:** - The input list can contain up to 10^5 integers. - Each integer in the input list is between -10^9 and 10^9. **Example:** \`\`\`python find_unique_numbers([4, 5, 4, 5, 7, 8, 8, 9]) => [7, 9] find_unique_numbers([1, 1, 2, 2, 3, 4, 5, 6]) => [3, 4, 5, 6] find_unique_numbers([]) => [] \`\`\` **Note:** - The output list should contain elements in the order they first appeared in the input list.","solution":"from typing import List def find_unique_numbers(nums: List[int]) -> List[int]: Returns a list of integers that appear exactly once in the input list, in the order they first appeared. count_map = {} # Count the occurrence of each number for num in nums: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 # Collect numbers that appear exactly once unique_numbers = [] for num in nums: if count_map[num] == 1: unique_numbers.append(num) return unique_numbers"},{"question":"Optimize the following function, improving both its efficiency and readability: def prime_numbers_up_to_n(n): This function takes an integer n as input and returns a list of all prime numbers less than or equal to n. >>> prime_numbers_up_to_n(10) [2, 3, 5, 7] >>> prime_numbers_up_to_n(20) [2, 3, 5, 7, 11, 13, 17, 19] primes = [] for num in range(2, n+1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes","solution":"def prime_numbers_up_to_n(n): This function takes an integer n as input and returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. >>> prime_numbers_up_to_n(10) [2, 3, 5, 7] >>> prime_numbers_up_to_n(20) [2, 3, 5, 7, 11, 13, 17, 19] if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function that identifies the largest product of any pair of adjacent elements in a given list of integers. To increase the complexity, provide a misleading code example that fails to address an edge case. Here is an example of a deceptive code snippet: \`\`\`python def max_adjacent_product(nums): max_product = 0 for i in range(len(nums) - 1): product = nums[i] * nums[i + 1] if product > max_product: max_product = product return max_product \`\`\` Identify the flaw in the above code and implement a corrected function to solve the problem. Additionally, provide an explanation of why the provided code was incorrect and how your corrected version addresses the issue.","solution":"def max_adjacent_product(nums): Returns the largest product of any pair of adjacent elements in the given list of integers. if len(nums) < 2: raise ValueError(\\"List must contain at least two elements\\") max_product = nums[0] * nums[1] for i in range(1, len(nums) - 1): product = nums[i] * nums[i + 1] if product > max_product: max_product = product return max_product # Explanation: # The provided code does not correctly handle cases when all products are negative or when the largest # product is negative but the initial max_product is set to 0, which can incorrectly influence the # result. The corrected version initializes max_product to the product of the first pair of adjacent # elements to correctly handle all possible cases."},{"question":"Write a function \`is_bipartite(graph)\` that determines whether a given graph (represented as an adjacency list) is bipartite. A graph is bipartite if we can split its set of nodes into two sets such that there are no edges between nodes within each set, only between nodes in different sets. Input: The input parameter \`graph\` is a dictionary where the keys represent nodes and the values are lists of adjacent nodes. Output: The function should return \`True\` if the graph is bipartite, and \`False\` otherwise. Example: \`\`\`python graph = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"A\\", \\"D\\"], \\"C\\": [\\"A\\", \\"D\\"], \\"D\\": [\\"B\\", \\"C\\"] } print(is_bipartite(graph)) # Output: True graph = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"A\\", \\"C\\"], \\"C\\": [\\"A\\", \\"B\\"] } print(is_bipartite(graph)) # Output: False \`\`\` Notes: - You may assume that the graph is undirected. - You can use any traversal method (BFS or DFS) to check for bipartiteness. Make sure to handle potential disconnected components within the graph. - Consider edge cases such as an empty graph or a graph with a single node.","solution":"def is_bipartite(graph): Determine whether the given graph is bipartite. The graph is represented as an adjacency list. :param graph: Dictionary representing the graph (node -> list of adjacent nodes) :return: True if graph is bipartite, False otherwise def bfs_check(node): queue = [node] color[node] = 0 # Assign the first color while queue: current = queue.pop(0) current_color = color[current] for neighbor in graph.get(current, []): if neighbor in color: if color[neighbor] == current_color: return False else: color[neighbor] = 1 - current_color queue.append(neighbor) return True color = {} for node in graph: if node not in color: if not bfs_check(node): return False return True"},{"question":"Design a function named 'balanced_string_index' that accepts a string of parentheses and square brackets. The function should return the index of the character that achieves a balanced state for the first time in the string. A balanced state means that up to and including that index, every opening parenthesis and bracket has a corresponding closing one in the correct order. If no such position exists, the function should return -1. For example, in the string \\"([])\\" the output would be 3, since at index 3 the string is balanced for the first time. If the string is unbalanced throughout, return -1. Implement the function using efficient string manipulation techniques. \`\`\`python def balanced_string_index(s): # starter code here; requires user to include logic pass #remove this ''' Examples: balanced_string_index(\\"([])\\") == 3 balanced_string_index(\\"([)]\\") == -1 balanced_string_index(\\"[()]\\") == 3 balanced_string_index(\\"\\") == -1 balanced_string_index(\\"([])\\") == 3 balanced_string_index(\\"([[]]())\\") == 7 ''' \`\`\`","solution":"def balanced_string_index(s): Return the index of the character that achieves a balanced state for the first time in the string. A balanced state means every opening parenthesis and bracket has a corresponding closing one in the correct order. stack = [] matching = {')': '(', ']': '['} for i, char in enumerate(s): if char in '([': stack.append((char, i)) elif char in ')]': if stack and stack[-1][0] == matching[char]: stack.pop() if not stack: return i else: return -1 return -1"},{"question":"Design an algorithm that performs image compression using the Run-Length Encoding (RLE) technique on a given binary image. A binary image is represented by a 2D list of integers (0s and 1s). Implement the function \`compress_image(image)\` which takes a 2D list as input and returns a new 2D list representing the compressed image in the RLE format. In the RLE format, consecutive runs of the same value are replaced by the value and count. For example, the input \`[[1, 1, 0], [0, 0, 1]]\` should be compressed to \`[[1, 2, 0, 1], [0, 2, 1, 1]]\`. Additionally, write a function \`decompress_image(compressed_image)\` to convert the RLE compressed image back to its original uncompressed form.","solution":"def compress_image(image): Compresses a binary image using Run-Length Encoding (RLE). Arguments: image -- 2D list of integers (0s and 1s) representing a binary image Returns: 2D list representing the compressed image in RLE format compressed_image = [] for row in image: compressed_row = [] current_value = row[0] count = 1 for value in row[1:]: if value == current_value: count += 1 else: compressed_row.append(current_value) compressed_row.append(count) current_value = value count = 1 compressed_row.append(current_value) compressed_row.append(count) compressed_image.append(compressed_row) return compressed_image def decompress_image(compressed_image): Decompresses an RLE compressed binary image. Arguments: compressed_image -- 2D list representing the compressed image in RLE format Returns: 2D list of integers (0s and 1s) representing the original binary image decompressed_image = [] for row in compressed_image: decompressed_row = [] for i in range(0, len(row), 2): value = row[i] count = row[i+1] decompressed_row.extend([value] * count) decompressed_image.append(decompressed_row) return decompressed_image"},{"question":"You are given a list of integers. Write a Python function to find the most frequent integer in the list. If there is a tie for the most frequent integer, return the smallest integer among them. For example: Given the list [1, 3, 2, 3, 4, 1, 5, 1] the function should return 1. Given the list [4, 4, 5, 5, 6, 6, 3] the function should return 4.","solution":"def most_frequent_integer(nums): Returns the most frequent integer in the list. If there is a tie, returns the smallest integer among the most frequent ones. from collections import Counter if not nums: return None # Handle empty list count = Counter(nums) most_frequent_count = max(count.values()) most_frequent_numbers = [num for num, freq in count.items() if freq == most_frequent_count] return min(most_frequent_numbers)"},{"question":"Design a function to calculate the maximum sum of any contiguous subarray within a given list of integers. The function should take a list of integers as input and return the maximum possible sum. Do not use built-in functions that directly solve the problem. Example input: \`arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\` Example output: \`6\` Explanation: The contiguous subarray \`[4, -1, 2, 1]\` has the largest sum of 6.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray within a given list of integers. if not arr: return 0 current_sum = arr[0] max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that checks whether a given string is a permutation of a palindrome. A permutation of a palindrome is a string that, when rearranged, can form a palindrome. The function should ignore spaces and be case-insensitive. Example: - Input: \\"Tact Coa\\" - Output: true Explanation: \\"Tact Coa\\" can be rearranged to \\"taco cat\\" or \\"atco cta\\", both of which are palindromes.","solution":"def is_permutation_of_palindrome(s): Checks whether a given string is a permutation of a palindrome. Parameters: s (str): Input string. Returns: bool: True if the input string is a permutation of a palindrome, False otherwise. s = s.replace(\\" \\", \\"\\").lower() char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 return odd_count <= 1"},{"question":"You are given a string expression containing numbers, operators (+, -, *, /), and parentheses. Write a function to evaluate the expression and return the result as an integer. The integer division should truncate toward zero. Assume the given expression is always valid and you need to handle the operator precedence correctly, where '*' and '/' have higher precedence over '+' and '-' but parentheses can change the precedence. **Example:** \`\`\`python Input: \\"3+2*2\\" Output: 7 Input: \\" 3/2 \\" Output: 1 Input: \\" (1+(4+5+2)-3)+(6+8) \\" Output: 23 \`\`\` This prompt requires understanding of stack data structures and how to correctly parse and evaluate mathematical expressions while accounting for operator precedence and parentheses.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, operators (+, -, *, /), and parentheses and returns the result as an integer. def operate(a, b, operator): if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': return int(a / b) # Truncate toward zero def precedence(operator): if operator in ('+', '-'): return 1 elif operator in ('*', '/'): return 2 return 0 def shunting_yard(expression): output = [] operators = [] i = 0 n = len(expression) while i < n: if expression[i].isdigit(): num = 0 while i < n and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 output.append(num) i -= 1 # the for loop will increment it again elif expression[i] == '(': operators.append(expression[i]) elif expression[i] == ')': while operators and operators[-1] != '(': output.append(operators.pop()) operators.pop() elif expression[i] in ('+', '-', '*', '/'): while operators and precedence(operators[-1]) >= precedence(expression[i]): output.append(operators.pop()) operators.append(expression[i]) i += 1 while operators: output.append(operators.pop()) return output def evaluate_rpn(tokens): stack = [] for token in tokens: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() stack.append(operate(a, b, token)) return stack[0] expression = expression.replace(' ', '') rpn = shunting_yard(expression) return evaluate_rpn(rpn)"},{"question":"Write a function called \`sort_and_analyze\` that takes a list of integers, \`numbers\`, as an argument. The function should perform the following tasks: 1. Sort the list in ascending order. 2. Calculate the median of the sorted list. 3. Calculate the frequency of each number in the list. 4. Identify and return: - The sorted list. - The median value. - A dictionary where the keys are the unique numbers and the values are their frequencies. Assume that the list always has an odd number of elements so that the median is always a single element. Here is the definition of \`sort_and_analyze\`: \`\`\`python def sort_and_analyze(numbers): # Your code goes here pass \`\`\` For example: \`\`\`python print(sort_and_analyze([3, 1, 4, 1, 5, 9, 2])) \`\`\` Should output: \`\`\`python ([1, 1, 2, 3, 4, 5, 9], 3, {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 9: 1}) \`\`\`","solution":"def sort_and_analyze(numbers): # Step 1: Sort the list in ascending order sorted_numbers = sorted(numbers) # Step 2: Calculate the median of the sorted list n = len(sorted_numbers) median = sorted_numbers[n // 2] # Step 3: Calculate the frequency of each number in the list frequency = {} for number in sorted_numbers: if number in frequency: frequency[number] += 1 else: frequency[number] = 1 # Step 4: Return the sorted list, median value, and frequency dictionary return sorted_numbers, median, frequency"},{"question":"Write a Python function that accepts a dictionary with integer values and returns a new dictionary with the same keys but the values are their logarithms (base 10). If the dictionary contains any value less than or equal to zero, it should raise a ValueError indicating the invalid entry. For example, for the input \`{\\"a\\": 10, \\"b\\": 100, \\"c\\": 0, \\"d\\": 1000}\`, the function should raise a ValueError because of the zero value associated with the key \`\\"c\\"\`.","solution":"import math def log_transform(input_dict): Transforms the input dictionary by taking the logarithm (base 10) of its values. Raises a ValueError if any value in the dictionary is less than or equal to zero. Parameters: input_dict (dict): Dictionary with integer values. Returns: dict: Dictionary with the same keys but with logarithmic values. output_dict = {} for key, value in input_dict.items(): if value <= 0: raise ValueError(f\\"Invalid entry {value} associated with key '{key}'\\") output_dict[key] = math.log10(value) return output_dict"},{"question":"Implement a function in Python that takes a sorted array of integers and removes any duplicates in place, returning the new length of the array and modifying the input array to contain only the unique elements in the first part. The order of the unique elements should remain the same as in the original array, and you do not need to consider the elements beyond the new length. Example: \`\`\`python def remove_duplicates(nums): # your implementation # Example Usage: nums = [1, 1, 2, 2, 3, 4, 4, 5] length = remove_duplicates(nums) print(length) # Output should be 5 print(nums[:length]) # Output should be [1, 2, 3, 4, 5] \`\`\`","solution":"def remove_duplicates(nums): Remove duplicates from a sorted array in place, returning the new length of the array and modifying the input array to contain only the unique elements in the first part. Args: nums (list): A sorted list of integers. Returns: int: The length of the array after removing duplicates. if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Write a function that takes a list of dictionaries, each representing a student's record with keys \`name\`, \`id\`, and a list of \`marks\` in various subjects. Return another dictionary where the keys are student ids and the values are the average marks of the respective students.","solution":"def calculate_average_marks(students): Takes a list of dictionaries each representing a student's record with keys 'name', 'id', and 'marks'. Returns a dictionary where the keys are student ids and the values are the average marks of the respective students. average_marks = {} for student in students: student_id = student['id'] marks = student['marks'] average_marks[student_id] = sum(marks) / len(marks) if marks else 0 return average_marks"},{"question":"Develop a mechanism that identifies the insertion point for a specified value within a sorted array without altering the array. Complete the implementation of the following function: def find_insertion_index(arr, value): Create a functionality that returns the index where 'value' can be inserted into 'arr' to maintain the sorted order. The array 'arr' will always be sorted in ascending order and will contain unique values. Examples: find_insertion_index([1, 3, 5, 6], 5) = 2 find_insertion_index([1, 3, 5, 6], 2) = 1 find_insertion_index([1, 3, 5, 6], 7) = 4 find_insertion_index([1, 3, 5, 6], 0) = 0","solution":"def find_insertion_index(arr, value): Returns the index where 'value' can be inserted into 'arr' to maintain the sorted order. The array 'arr' is sorted in ascending order and contains unique values. :param arr: List[int] - A sorted list of unique integers. :param value: int - The value to insert. :return: int - The index where 'value' should be inserted. left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] < value: left = mid + 1 else: right = mid return left"},{"question":"How would you implement a function to merge two sorted linked lists into one sorted linked list? Make sure the resulting linked list is also sorted. Provide the complete code implementation in Python and explain each step briefly in comments.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_lists(l1, l2): Merges two sorted linked lists (l1 and l2) into one sorted linked list. # Create a dummy node to act as the starting point of the merged linked list. dummy = ListNode() # Create a pointer to the current node, initially set to the dummy node. current = dummy # Loop until either l1 or l2 becomes None (indicating the end of either list). while l1 and l2: # Compare the current nodes of l1 and l2. if l1.val < l2.val: # If the node from l1 is smaller, add it to the merged list. current.next = l1 l1 = l1.next else: # If the node from l2 is smaller or equal, add it to the merged list. current.next = l2 l2 = l2.next # Move the current pointer to the next node. current = current.next # After the loop, append the rest of the remaining nodes (if any) from l1 or l2. current.next = l1 if l1 is not None else l2 # Return the next node of the dummy, which is the head of the merged list. return dummy.next"},{"question":"Write a function in Python that accepts a list of words and returns a dictionary where the keys are the words sorted alphabetically and the values are the lengths of these words. The function should ignore case while sorting, but the original case structure should be preserved in the keys of the dictionary. Additionally, create a function to identify the longest word(s) in the original list and return it (or them if there are ties) as a list.","solution":"def words_length(words): Returns a dictionary where the keys are the words sorted alphabetically ignoring case, and the values are the lengths of these words. sorted_words = sorted(words, key=lambda word: word.lower()) return {word: len(word) for word in sorted_words} def longest_words(words): Returns a list of the longest word(s) in the original list. if not words: return [] max_length = max(len(word) for word in words) return [word for word in words if len(word) == max_length]"},{"question":"Design a function in Python that takes a string as input and returns the longest substring without repeating characters. Your solution should be efficient, working within linear time complexity. Ensure to handle edge cases such as an empty string and strings with all identical characters. Function Signature: \`\`\`python def longest_unique_substring(s: str) -> str: # Your code here \`\`\`","solution":"def longest_unique_substring(s: str) -> str: Returns the longest substring without repeating characters from the input string. if not s: return \\"\\" start = 0 max_len = 0 max_substring = \\"\\" char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_len = i - start + 1 if current_len > max_len: max_len = current_len max_substring = s[start:i+1] return max_substring"},{"question":"Develop a Python class called \`Circle\` that has two private attributes: \`radius\` and \`color\`. Include methods to set and get the values of these attributes. Additionally, implement a method \`area\` to calculate and return the area of the circle, and a method \`circumference\` to calculate and return its circumference. Ensure that the radius can only be a non-negative number and the color is a string with more than 2 characters.","solution":"import math class Circle: def __init__(self, radius, color): self._radius = None self._color = None self.set_radius(radius) self.set_color(color) def set_radius(self, radius): Sets the radius of the circle ensuring it is non-negative. if radius >= 0: self._radius = radius else: raise ValueError(\\"Radius must be a non-negative number.\\") def get_radius(self): Returns the radius of the circle. return self._radius def set_color(self, color): Sets the color of the circle ensuring it is a string with more than 2 characters. if isinstance(color, str) and len(color) > 2: self._color = color else: raise ValueError(\\"Color must be a string with more than 2 characters.\\") def get_color(self): Returns the color of the circle. return self._color def area(self): Calculates and returns the area of the circle. return math.pi * self._radius ** 2 def circumference(self): Calculates and returns the circumference of the circle. return 2 * math.pi * self._radius"},{"question":"Develop a function that takes a list of integers and returns a new list containing only those integers that are both prime and greater than 10. For instance, given the input list [2, 17, 4, 19, 23, 6, 20], the function should return [17, 19, 23]. Ensure that your solution efficiently checks for prime numbers and correctly filters out integers based on the specified conditions.","solution":"import math def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes_greater_than_10(numbers): Returns a list containing only the integers from the input list that are both prime and greater than 10. return [num for num in numbers if num > 10 and is_prime(num)]"},{"question":"Write a Python function to implement the Fibonacci sequence recursively. The function should take an integer \`n\` as its parameter and return the \`n\`-th Fibonacci number. Remember that the Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the previous two. If \`n\` is 0, return 0. If \`n\` is 1, return 1. For any other value of \`n\`, return the sum of the last two Fibonacci numbers. Be cautious about the performance implications of the recursive approach for large values of \`n\`.","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"question":"Write a function called \`find_largest_palindromic_substring\` that, given a string, returns the largest palindromic substring within that string. A palindromic substring is a substring that reads the same forward and backward. If there are multiple palindromic substrings of the same maximum length, return the first one encountered in the string. **Constraints:** - The input string will have a maximum length of 1000 characters. - The input string will contain only ASCII characters. **Example:** \`\`\`python Input: \\"babad\\" Output: \\"bab\\" or \\"aba\\" Input: \\"cbbd\\" Output: \\"bb\\" \`\`\` **Hints:** - Consider the use of dynamic programming or expanding around the centers of the string to find all possible palindrome substrings. - Ensure the function handles both odd and even length palindromes correctly.","solution":"def find_largest_palindromic_substring(s): Returns the largest palindromic substring within the input string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" largest_palindrome = \\"\\" for i in range(len(s)): # Odd length palindromes: odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(largest_palindrome): largest_palindrome = odd_palindrome # Even length palindromes: even_palindrome = expand_around_center(s, i, i + 1) if len(even_palindrome) > len(largest_palindrome): largest_palindrome = even_palindrome return largest_palindrome"},{"question":"Implement a function that takes a list of integers and returns the length of the longest subsequence that is strictly increasing. Your solution should have a time complexity of O(n^2) or better. **Function Signature:** \`\`\`python def longest_increasing_subsequence(arr: List[int]) -> int: \`\`\` **Input:** - A list, \`arr\`, of integers where 0 ≤ len(arr) ≤ 1000. **Output:** - An integer representing the length of the longest strictly increasing subsequence. **Examples:** \`\`\`python assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1 \`\`\`","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function that takes in a list of integers and returns a new list containing only the prime numbers from the original list. You must implement an efficient algorithm to check for prime numbers, considering the performance for large inputs. The function should handle both positive and negative integers, ignoring the negative ones as they are not considered prime. For example, if the input list is \`[29, 15, -7, 13, 6, 23, -2]\`, the output should be \`[29, 13, 23]\`.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False max_divisor = int(n ** 0.5) + 1 for d in range(3, max_divisor, 2): if n % d == 0: return False return True def filter_primes(numbers): Filters the list of numbers and returns a list of prime numbers. return [num for num in numbers if num > 0 and is_prime(num)]"},{"question":"Can you help solve this problem: Write a Python function that takes in a list of integers and returns a tuple containing two elements: the highest product of three different numbers in the list and a list of the three numbers that form this product. If there are less than three integers in the list, return None. **Function signature:** \`\`\`python def highest_product_of_three(nums: List[int]) -> Union[Tuple[int, List[int]], None]: pass \`\`\` **Example:** \`\`\`python >>> highest_product_of_three([1, 10, 2, 6, 5, 3]) (300, [10, 6, 5]) >>> highest_product_of_three([1, -10, -2, 6, 5, 3]) (120, [-10, -2, 6]) >>> highest_product_of_three([1, 2]) None \`\`\` **Requirements:** - Consider both positive and negative numbers. - Ensure the function handles edge cases properly, such as when there are not enough elements in the list. **Constraints:** - The input list contains integers. - All integers are within the range [-10^4, 10^4]. - The list can have up to 10^3 elements.","solution":"from typing import List, Union, Tuple def highest_product_of_three(nums: List[int]) -> Union[Tuple[int, List[int]], None]: Returns the highest product of three different numbers in the list and a list of those numbers. If there are less than three integers in the list, returns None. if len(nums) < 3: return None nums.sort() # The highest product can be: # 1. Product of the three largest numbers # 2. Product of the two smallest numbers (both could be negative) and the largest number max1 = nums[-1] * nums[-2] * nums[-3] max2 = nums[0] * nums[1] * nums[-1] if max1 > max2: return (max1, [nums[-1], nums[-2], nums[-3]]) else: return (max2, [nums[0], nums[1], nums[-1]])"},{"question":"Implement a Function to Convert Roman Numerals to Integers Write a function \`romanToInt(s: str) -> int\` that converts a Roman numeral to an integer. Roman numerals are represented by the following symbols: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer. You may assume the input will be a valid roman numeral. # Example: Input: \\"III\\" Output: 3 Input: \\"IV\\" Output: 4 Input: \\"IX\\" Output: 9 Input: \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Input: \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90, IV = 4. # Constraints: - The input will be a Roman numeral string in the range from 1 to 3999. # Function Signature: \`\`\`python def romanToInt(s: str) -> int: pass \`\`\`","solution":"def romanToInt(s: str) -> int: Converts a Roman numeral to an integer. roman_to_int = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Implement a function in Python that receives a list of integers and returns a new list with the integers sorted in ascending order. However, if two numbers have the same value, they should be ordered according to their original positions in the list (i.e., the sort should be stable). You should not use any built-in sorting functions. Demonstrate your implementation using a set of sample test cases.","solution":"def stable_sort(nums): Performs a stable sort on a list of integers and returns a new sorted list. n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"question":"Implement a function in Python to parse a string containing mathematical expressions and evaluate their results. The string will contain integers, addition (+), and multiplication (*) operators. The function should respect the usual operator precedence rules (i.e., multiplication before addition). \`\`\`python def evaluate_expression(expression: str) -> int: # Your code here # Example usage: print(evaluate_expression(\\"2+3*4\\")) # Expected output: 14 print(evaluate_expression(\\"2*3+4*5\\")) # Expected output: 26 print(evaluate_expression(\\"10+20*30+40\\")) # Expected output: 650 \`\`\` Write test cases to validate the correctness of your solution and explain your approach briefly.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression string containing integers, addition (+), and multiplication (*) operators, respecting the usual operator precedence rules. # Split the expression into tokens tokens = expression.replace(\\" \\", \\"\\") num_stack = [] op_stack = [] i = 0 # Helper function to apply an operator to the top two elements in the num_stack def apply_operation(): right = num_stack.pop() left = num_stack.pop() op = op_stack.pop() if op == '+': num_stack.append(left + right) elif op == '*': num_stack.append(left * right) while i < len(tokens): if tokens[i].isdigit(): num = 0 while i < len(tokens) and tokens[i].isdigit(): num = num * 10 + int(tokens[i]) i += 1 num_stack.append(num) else: while (op_stack and op_stack[-1] == '*'): apply_operation() op_stack.append(tokens[i]) i += 1 while op_stack: apply_operation() return num_stack[0] # Example usage: #print(evaluate_expression(\\"2+3*4\\")) # Expected output: 14 #print(evaluate_expression(\\"2*3+4*5\\")) # Expected output: 26 #print(evaluate_expression(\\"10+20*30+40\\")) # Expected output: 650"},{"question":"We've detected a performance bottleneck in a piece of code designed for processing large text files. Your task is to optimize the script to improve its efficiency. The current script reads a text file and counts the occurrence of each word. Here's the code: \`\`\`python def count_words(file_path): word_count = {} with open(file_path, 'r') as file: for line in file: words = line.split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count file_path = 'large_text_file.txt' word_count = count_words(file_path) sorted_word_count = sorted(word_count.items(), key=lambda item: item[1], reverse=True) for word, count in sorted_word_count: print(f\\"{word}: {count}\\") \`\`\` You need to: 1. Identify the main inefficiencies in the given code. 2. Optimize the code to handle large files more efficiently. 3. Ensure that your optimized code maintains the same functionality as the original. **Hint:** Consider the performance implications of dictionary operations and I/O operations when working with large text files. **Note:** You do not need to change the way the final results are printed. Provide your optimized code below.","solution":"from collections import defaultdict def count_words(file_path): word_count = defaultdict(int) with open(file_path, 'r') as file: for line in file: words = line.split() for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"Write a Python program that implements a simple inventory management system for a warehouse. The system should allow you to add new items, delete items, update the quantity of existing items, and display all items in the inventory. Each item should have the following attributes: Item Code (which is unique), Item Name, Quantity, and Price. The inventory information should be stored in a dictionary with the structure as follows: { \\"ItemCode1\\": {\\"ItemName\\": \\"ItemA\\", \\"Quantity\\": 100, \\"Price\\": 20.5}, \\"ItemCode2\\": {\\"ItemName\\": \\"ItemB\\", \\"Quantity\\": 50, \\"Price\\": 15.0}, \\"ItemCode3\\": ... } The program should handle the following operations through an interactive menu: 1. Add a new item to the inventory. 2. Delete an item from the inventory using the Item Code. 3. Update the quantity and/or price of an existing item. 4. Display all items in the inventory. Make sure to include error handling for cases where an item cannot be added (e.g., duplicate Item Code), deleted (e.g., Item Code does not exist), or updated (e.g., invalid input). The program should continue to run until the user decides to exit.","solution":"class InventoryManagementSystem: def __init__(self): self.inventory = {} def add_item(self, item_code, item_name, quantity, price): if item_code in self.inventory: return \\"Item code already exists.\\" self.inventory[item_code] = { \\"ItemName\\": item_name, \\"Quantity\\": quantity, \\"Price\\": price } return \\"Item added successfully.\\" def delete_item(self, item_code): if item_code not in self.inventory: return \\"Item code does not exist.\\" del self.inventory[item_code] return \\"Item deleted successfully.\\" def update_item(self, item_code, quantity=None, price=None): if item_code not in self.inventory: return \\"Item code does not exist.\\" if quantity is not None: self.inventory[item_code][\\"Quantity\\"] = quantity if price is not None: self.inventory[item_code][\\"Price\\"] = price return \\"Item updated successfully.\\" def display_items(self): return self.inventory"},{"question":"Given a list of integers \`nums\` and an integer \`target\`, write a function to identify the indices of the two numbers such that they add up to the target. Assume that each input has exactly one solution, and you may not use the same element twice. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. Example 3: Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, we return [0, 1]. Constraints: - \`2 <= nums.length <= 10^4\` - \`-10^9 <= nums[i] <= 10^9\` - \`-10^9 <= target <= 10^9\` Note: Your solution should aim to have a time complexity of O(n), where n is the length of the input list.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to the given target. :param nums: List[int] - List of integers :param target: int - Target sum :return: List[int] - Indices of the two numbers num_to_index = {} for i, num in enumerate(nums): diff = target - num if diff in num_to_index: return [num_to_index[diff], i] num_to_index[num] = i return []"},{"question":"Write a function that takes a string and returns a dictionary where the keys are the words in the string and the values are the counts of the occurrences of each word. Ignore case and punctuation, and consider only alphabetical characters and spaces in the words. The function should also handle an empty string and return an empty dictionary in such cases. def word_count(s): '''This function should return a dictionary with words as keys and the counts of their occurrences as values, ignoring case and punctuation.''' # TODO","solution":"import re from collections import defaultdict def word_count(s): This function returns a dictionary with words as keys and the counts of their occurrences as values, ignoring case and punctuation. # Remove non-alphabetic characters and convert to lowercase cleaned_string = re.sub(r'[^a-zA-Zs]', '', s).lower() words = cleaned_string.split() # Count the occurrences of each word word_counts = defaultdict(int) for word in words: word_counts[word] += 1 return dict(word_counts)"},{"question":"Create a Python program that simulates a digital library system for managing a collection of books. Your program should be able to: 1. Add a book to the library with the following attributes: - Title - Author - Publication Year - ISBN - Number of Copies 2. Search for a book by any of its attributes (partial matches inclusive). 3. Check out a book, reducing the available copies by one. 4. Return a book, increasing the available copies by one. 5. List all books in the library, showing their details and the number of copies available. 6. Handle duplicate entries by updating the number of copies instead of adding a new entry. 7. Implement error checking to handle: - Trying to check out a book with no available copies. - Trying to return a book not in the library. Consider the following partial code snippet, which contains a class definition for the books and library along with a basic implementation of adding a book: \`\`\`python class Book: def __init__(self, title, author, pub_year, isbn, copies): self.title = title self.author = author self.pub_year = pub_year self.isbn = isbn self.copies = copies class Library: def __init__(self): self.collection = [] def add_book(self, title, author, pub_year, isbn, copies): for book in self.collection: if book.isbn == isbn: book.copies += copies return new_book = Book(title, author, pub_year, isbn, copies) self.collection.append(new_book) \`\`\` Complete the Library class by implementing the following methods: 1. \`search_book(attribute, value)\` 2. \`checkout_book(isbn)\` 3. \`return_book(isbn)\` 4. \`list_books()\` Additionally, create a simple menu interface to interact with the library system, allowing users to choose actions like adding books, searching for a book, checking out, returning books, and listing all books. Remember to write tests for each function ensuring the program works as expected and handles edge cases.","solution":"class Book: def __init__(self, title, author, pub_year, isbn, copies): self.title = title self.author = author self.pub_year = pub_year self.isbn = isbn self.copies = copies def __str__(self): return f\\"Title: {self.title}, Author: {self.author}, Year: {self.pub_year}, ISBN: {self.isbn}, Copies Available: {self.copies}\\" class Library: def __init__(self): self.collection = [] def add_book(self, title, author, pub_year, isbn, copies): for book in self.collection: if book.isbn == isbn: book.copies += copies return new_book = Book(title, author, pub_year, isbn, copies) self.collection.append(new_book) def search_book(self, attribute, value): results = [] for book in self.collection: if (attribute == \\"title\\" and value.lower() in book.title.lower()) or (attribute == \\"author\\" and value.lower() in book.author.lower()) or (attribute == \\"pub_year\\" and value == str(book.pub_year)) or (attribute == \\"isbn\\" and value == book.isbn): results.append(book) return results def checkout_book(self, isbn): for book in self.collection: if book.isbn == isbn: if book.copies > 0: book.copies -= 1 return True else: return False return False def return_book(self, isbn): for book in self.collection: if book.isbn == isbn: book.copies += 1 return True return False def list_books(self): return [str(book) for book in self.collection]"},{"question":"Given an integer \`n\`. Your task is to split \`n\` into exactly two parts where: - Both parts are positive integers. - Neither part contains the digit \`2\` or the digit \`6\` in their decimal representation. Return the two parts as a list \`[A, B]\` where: - \`A + B = n\` - Both \`A\` and \`B\` do not contain the digits \`2\` or \`6\` in their decimal representation. You can return any valid pair of parts. It's guaranteed that there is at least one valid solution. Example 1: Input: n = 5 Output: [1,4] Explanation: A = 1 and B = 4. A + B = n. Neither 1 nor 4 contains the digit 2 or 6 in their decimal representation. Example 2: Input: n = 13 Output: [3,10] Explanation: A = 3 and B = 10. A + B = n. Neither 3 nor 10 contains the digit 2 or 6 in their decimal representation. Example 3: Input: n = 37 Output: [31,6] Constraints: - \`2 <= n <= 1000\`","solution":"def split_number(n): Splits the number \`n\` into two parts where: - Both parts are positive integers. - Neither part contains the digit \`2\` or \`6\` in their decimal representation. Returns: list: A list [A, B] where A + B = n and neither A nor B contains the digit \`2\` or \`6\`. def contains_unwanted_digits(number): return '2' in str(number) or '6' in str(number) for i in range(1, n): if not contains_unwanted_digits(i) and not contains_unwanted_digits(n - i): return [i, n - i]"},{"question":"Write a function that evaluates a tic-tac-toe game board and determines the state of the game. The game board is represented as a 3x3 matrix of strings, where each slot can be \\"X\\", \\"O\\", or an empty string \\"\\". Your function should return: - \\"X wins\\" if player X has won the game. - \\"O wins\\" if player O has won the game. - \\"Draw\\" if all slots are filled, but neither player has won. - \\"Incomplete\\" if there are still empty slots and the game is not yet finished. Example input: board1 = [[\\"X\\", \\"O\\", \\"X\\"], [\\"\\", \\"X\\", \\"O\\"], [\\"O\\", \\"\\", \\"X\\"]] Example output: \\"X wins\\" Example input: board2 = [[\\"X\\", \\"O\\", \\"X\\"], [\\"\\", \\"O\\", \\"O\\"], [\\"O\\", \\"X\\", \\"\\"]] Example output: \\"Incomplete\\"","solution":"def evaluate_tic_tac_toe(board): Evaluates the state of a tic-tac-toe game board. :param board: A 3x3 list of lists representing the tic-tac-toe game board, where each slot is \\"X\\", \\"O\\", or an empty string \\"\\". :return: A string representing the state of the game (\\"X wins\\", \\"O wins\\", \\"Draw\\", or \\"Incomplete\\"). # Check rows and columns for a win for i in range(3): if board[i][0] == board[i][1] == board[i][2] != \\"\\": return f\\"{board[i][0]} wins\\" if board[0][i] == board[1][i] == board[2][i] != \\"\\": return f\\"{board[0][i]} wins\\" # Check diagonals for a win if board[0][0] == board[1][1] == board[2][2] != \\"\\": return f\\"{board[0][0]} wins\\" if board[0][2] == board[1][1] == board[2][0] != \\"\\": return f\\"{board[0][2]} wins\\" # Check for incomplete or draw for row in board: for cell in row: if cell == \\"\\": return \\"Incomplete\\" return \\"Draw\\""},{"question":"Design a function that takes a string as input and returns a new string where each character is replaced by the next character in the ASCII sequence. If a character is 'z' or 'Z', it should wrap around to 'a' or 'A' respectively.","solution":"def shift_characters(s): Takes a string as input and returns a new string where each character is replaced by the next character in the ASCII sequence. If a character is 'z' or 'Z', it wraps around to 'a' or 'A' respectively. result = [] for char in s: if char == 'z': result.append('a') elif char == 'Z': result.append('A') else: result.append(chr(ord(char) + 1)) return ''.join(result)"},{"question":"Create a Python function that accepts a string and returns a new string with all vowels removed. If the input string is empty or does not contain any vowels, return the original string. Your function should be case insensitive (i.e., it should remove both uppercase and lowercase vowels). Additionally, construct several test cases to validate the correctness of your code. Also, analyze the following provided Python code. Identify its flaws, explain why it's not behaving as intended, and suggest the corrected version. \`\`\`python def remove_vowels(s): vowels = \\"aeiou\\" return ''.join([char for char in s if char not in vowels]) print(remove_vowels(\\"Hello World\\")) \`\`\` P.S. This code is supposed to remove vowels from the given string, but it's not addressing case sensitivity. Why is this so and how can you revise the code?","solution":"def remove_vowels(s): Returns a new string with all vowels removed. It is case insensitive. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"Write a Python function that accepts a list of strings and returns a new list where each string is reversed, but the order of the strings in the list remains the same. The function should be able to handle an empty list or a list where strings are empty. Example: input_list = [\\"hello\\", \\"world\\", \\"python\\", \\"\\"] Output: [\\"olleh\\", \\"dlrow\\", \\"nohtyp\\", \\"\\"]","solution":"def reverse_strings(input_list): Accepts a list of strings and returns a new list where each string is reversed, but the order of the strings in the list remains the same. return [s[::-1] for s in input_list]"},{"question":"Write a Python function that takes a string as input and returns the first non-repeating character in the string. If all characters repeat or the string is empty, return an underscore ('_'). The function should have a linear time complexity. For example: \`\`\`python input_str = \\"swiss\\" output = \\"w\\" \`\`\` \`\`\`python input_str = \\"teeter\\" output = \\"r\\" \`\`\` \`\`\`python input_str = \\"aabbcc\\" output = \\"_\\" \`\`\` Note: Make sure that your implementation handles case sensitivity, such that 'a' and 'A' are considered distinct characters.","solution":"def first_non_repeating_char(input_str): Returns the first non-repeating character in the input string. If all characters repeat, or the string is empty, returns an underscore ('_'). char_count = {} # Count the occurrences of each character in the input string for char in input_str: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in input_str: if char_count[char] == 1: return char return '_'"},{"question":"Devise a Python function which validates if a given string containing only characters '(', ')', '{', '}', '[' and ']' is a valid parentheses sequence. A valid sequence must satisfy the following conditions: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. For example: - input: \\"()\\" -> output: True - input: \\"(]\\" -> output: False - input: \\"({[]})\\" -> output: True","solution":"def is_valid_parentheses(s): stack = [] mapping = {')': '(', '}': '{', ']': '['} for char in s: if char in mapping: top_element = stack.pop() if stack else '#' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function in Python to merge two sorted lists into one sorted list. [1, 3, 5], [2, 4, 6]","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1 (if any) while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2 (if any) while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Implement a function to determine if a given string contains all unique characters. The function should run in O(n) complexity where n is the length of the string. \`\`\`python def is_unique(string): Check if the input string contains all unique characters. Args: string (str): The string to be checked. Returns: bool: True if the string contains all unique characters, False otherwise. Examples: is_unique(\\"hello\\") ==> False is_unique(\\"world\\") ==> True # Code here \`\`\`","solution":"def is_unique(string): Check if the input string contains all unique characters. Args: string (str): The string to be checked. Returns: bool: True if the string contains all unique characters, False otherwise. # Using a set to track characters seen so far seen = set() for char in string: if char in seen: return False seen.add(char) return True"},{"question":"Create a function that takes a list of integers and returns a new list containing only the elements that appear exactly once in the original list, maintaining their original order. The function should handle input lists with up to 10,000 elements efficiently. Use Python for your implementation. # Example: Input: [4, 5, 4, 5, 6, 7, 8, 6, 9] Output: [7, 8, 9]","solution":"def unique_elements(lst): Returns a new list containing only the elements that appear exactly once in the original list, maintaining their original order. from collections import Counter counter = Counter(lst) return [x for x in lst if counter[x] == 1]"},{"question":"Write a function named \`find_largest_digit\` that takes a positive integer as input and returns the largest digit in that number. For example: - If the input is 4936, the function should return 9. - If the input is 85732, the function should return 8. You must not convert the number to a string or any other data type, the solution should purely use mathematical operations. Function signature: \`\`\`python def find_largest_digit(number: int) -> int: pass \`\`\`","solution":"def find_largest_digit(number: int) -> int: Returns the largest digit in a given positive integer. largest_digit = 0 while number > 0: digit = number % 10 if digit > largest_digit: largest_digit = digit number //= 10 return largest_digit"},{"question":"Write a function that takes two strings as input and returns a list of indices where the second string occurs in the first string. If the second string does not occur in the first string, return an empty list. The function should be case-sensitive and should not use any built-in string find or count methods. # Example \`\`\` Input: text = \\"abracadabra\\", pattern = \\"abra\\" Output: [0, 7] Input: text = \\"hello world\\", pattern = \\"world\\" Output: [6] Input: text = \\"abcabcabc\\", pattern = \\"abc\\" Output: [0, 3, 6] Input: text = \\"abcdefg\\", pattern = \\"hij\\" Output: [] \`\`\`","solution":"def find_occurrences(text, pattern): Returns a list of indices where the pattern occurs in the text. if not text or not pattern: return [] indices = [] pattern_length = len(pattern) text_length = len(text) for i in range(text_length - pattern_length + 1): if text[i:i + pattern_length] == pattern: indices.append(i) return indices"},{"question":"Create a function to analyze and process a list of bank transactions stored in a JSON object. The transactions include details such as transaction ID, transaction amount, date, and transaction type (either DEBIT or CREDIT). The aim is to generate a summary of transactions within a specified date range, along with the total amount debited and credited in that period. Specifically, you need to create a function that reads the JSON data, filters the transactions based on the provided start and end dates, and computes the total amounts for debit and credit transactions separately. Consider the given JSON structure: \`\`\`json { \\"transactions\\": [ { \\"transaction_id\\": \\"t1\\", \\"amount\\": 150.00, \\"date\\": \\"2023-01-10\\", \\"type\\": \\"DEBIT\\" }, { \\"transaction_id\\": \\"t2\\", \\"amount\\": 200.00, \\"date\\": \\"2023-02-14\\", \\"type\\": \\"CREDIT\\" }, { \\"transaction_id\\": \\"t3\\", \\"amount\\": 100.00, \\"date\\": \\"2023-03-15\\", \\"type\\": \\"DEBIT\\" }, { \\"transaction_id\\": \\"t4\\", \\"amount\\": 300.00, \\"date\\": \\"2023-04-18\\", \\"type\\": \\"CREDIT\\" } ] } \`\`\` Your function should take two parameters, \`start_date\` and \`end_date\`, both in the format \\"YYYY-MM-DD\\" and return an object with the filtered transactions list and the total amounts for each type.","solution":"from datetime import datetime import json def analyze_transactions(json_data, start_date, end_date): Analyze and process a list of bank transactions stored in a JSON object. Parameters: - json_data: JSON string containing the list of transactions. - start_date: Start date in the format \\"YYYY-MM-DD\\". - end_date: End date in the format \\"YYYY-MM-DD\\". Returns: - summary: A dictionary containing the filtered transactions list and the total amounts for each type. data = json.loads(json_data) transactions = data['transactions'] filtered_transactions = [] total_debit = 0.0 total_credit = 0.0 start_date_dt = datetime.strptime(start_date, '%Y-%m-%d') end_date_dt = datetime.strptime(end_date, '%Y-%m-%d') for transaction in transactions: transaction_date_dt = datetime.strptime(transaction['date'], '%Y-%m-%d') if start_date_dt <= transaction_date_dt <= end_date_dt: filtered_transactions.append(transaction) if transaction['type'] == \\"DEBIT\\": total_debit += transaction['amount'] elif transaction['type'] == \\"CREDIT\\": total_credit += transaction['amount'] summary = { 'transactions': filtered_transactions, 'total_debit': total_debit, 'total_credit': total_credit } return summary"},{"question":"Write a Python function that takes a string as input and returns a dictionary where the keys are the unique characters from the string and the values are the frequency count of each character. The function should ignore the case and consider 'A' and 'a' to be the same character.","solution":"def character_frequency(s): Returns a dictionary with the frequency count of each unique character in the input string. The function ignores case. :param s: input string :return: dictionary where keys are characters and values are their frequency count in the string s = s.lower() # Convert the string to lowercase to ignore case freq_dict = {} for char in s: if char not in freq_dict: freq_dict[char] = 1 else: freq_dict[char] += 1 return freq_dict"},{"question":"Implement a function to manipulate a mixed list of integers and strings. The function should be named \`process_mixed_list\` and take a single parameter, which is a list containing both integers and strings. The task is to create a resultant list where all the integer values are doubled, and all string values are converted to their respective uppercase versions. The output should be a new list with the same order as the input list. Function signature: \`\`\`python def process_mixed_list(input_list: list) -> list: \`\`\` # Example Input \`\`\`python process_mixed_list([1, 'hello', 5, 'world', 10]) \`\`\` Output \`\`\`python [2, 'HELLO', 10, 'WORLD', 20] \`\`\` Input \`\`\`python process_mixed_list(['python', 7, 'programming', 3]) \`\`\` Output \`\`\`python ['PYTHON', 14, 'PROGRAMMING', 6] \`\`\` # Constraints - All elements of the input list are either integers or strings. - The input list will contain at least one element. - The strings will contain only alphabetic characters.","solution":"def process_mixed_list(input_list: list) -> list: This function processes a mixed list of integers and strings. Each integer is doubled and each string is converted to uppercase. Args: input_list (list): A list of integers and strings. Returns: list: A new list with processed integers and strings. result = [] for item in input_list: if isinstance(item, int): result.append(item * 2) elif isinstance(item, str): result.append(item.upper()) return result"},{"question":"Implement a Python function to check whether a given string is a palindrome, considering both iterative and recursive approaches. Your function should ignore case sensitivity and non-alphanumeric characters. Additionally, write test cases to validate your function across various scenarios, including edge cases (e.g., an empty string, a single character string, strings with special characters). For the recursive approach, ensure that the base case and recursive case are correctly defined. For the iterative approach, use a two-pointer technique to verify the string. Make sure your solution handles invalid input (e.g., non-string input) gracefully, providing appropriate feedback.","solution":"import re def is_palindrome_iterative(s): Check if a string is a palindrome using the iterative approach. Ignores case and non-alphanumeric characters. Returns True if the string is a palindrome, False otherwise. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True def is_palindrome_recursive(s): Check if a string is a palindrome using the recursive approach. Ignores case and non-alphanumeric characters. Returns True if the string is a palindrome, False otherwise. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") s = re.sub(r'[^a-zA-Z0-9]', '', s).lower() def helper_sub(s, left, right): if left >= right: return True if s[left] != s[right]: return False return helper_sub(s, left + 1, right - 1) return helper_sub(s, 0, len(s) - 1)"},{"question":"Explain the differences between shallow copy and deep copy in the context of data structures. Provide a code example in Python to illustrate the difference. What are the implications of using one over the other in various scenarios?","solution":"import copy def shallow_copy_example(original_list): Returns a shallow copy of the original list. return copy.copy(original_list) def deep_copy_example(original_list): Returns a deep copy of the original list. return copy.deepcopy(original_list) # Example of shallow copy vs. deep copy original_list = [1, [2, 3], 4] shallow_copied_list = shallow_copy_example(original_list) deep_copied_list = deep_copy_example(original_list) # Modify the nested list in the original list original_list[1][0] = 'modified' # Now, shallow_copied_list will reflect the change but deep_copied_list will not shallow_copied_result = shallow_copied_list deep_copied_result = deep_copied_list shallow_copied_result, deep_copied_result"},{"question":"Write a program to determine if a given string is a permutation of a palindrome. A palindrome is a word or phrase that is the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Check if the permutations of the given string could form any such palindrome. def is_permutation_of_palindrome(s: str) -> bool: Check if permutations of a string can form a palindrome considering constraints. Constraints: 1 <= length of string <= 10^5, only lowercase letters and spaces are allowed >>> is_permutation_of_palindrome(\\"taco cat\\") True >>> is_permutation_of_palindrome(\\"atco cta\\") True >>> is_permutation_of_palindrome(\\"abc\\") False >>> is_permutation_of_palindrome(\\"aabb\\") True >>> is_permutation_of_palindrome(\\"aabbcc\\") True","solution":"def is_permutation_of_palindrome(s: str) -> bool: Check if permutations of a string can form a palindrome considering constraints. Constraints: 1 <= length of string <= 10^5, only lowercase letters and spaces are allowed >>> is_permutation_of_palindrome(\\"taco cat\\") True >>> is_permutation_of_palindrome(\\"atco cta\\") True >>> is_permutation_of_palindrome(\\"abc\\") False >>> is_permutation_of_palindrome(\\"aabb\\") True >>> is_permutation_of_palindrome(\\"aabbcc\\") True from collections import Counter # Remove spaces and convert to lowercase cleaned_string = s.replace(\\" \\", \\"\\").lower() # Count character frequencies char_counter = Counter(cleaned_string) # Check number of characters with odd counts odd_count = sum(1 for count in char_counter.values() if count % 2 == 1) # For the string to be a permutation of a palindrome, it can have at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a function in Python that takes a list of integers and returns a new list where each element is the product of all the other elements in the original list except for the current element. Do this without using division and in O(n) time complexity. For example, given the list \`[1, 2, 3, 4]\`, the function should return \`[24, 12, 8, 6]\`.","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the original list. length = len(nums) # Initialize the result list with 1s result = [1] * length # Calculate the prefix products prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] # Calculate the postfix products and multiply with the prefix products postfix = 1 for i in range(length - 1, -1, -1): result[i] *= postfix postfix *= nums[i] return result"},{"question":"Write a function in Python that takes a string and returns a dictionary with each unique character (case-insensitive) as keys, and the count of their occurrences as values. Ignore spaces and special characters in the string. Example: Input: \\"Hello, World!\\" Output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}","solution":"def character_count(s): Returns a dictionary with each unique character (case-insensitive) as keys, and the count of their occurrences as values. Ignores spaces and special characters. import string s = s.lower() char_dict = {} for char in s: if char in string.ascii_lowercase: # Only consider alphabet characters char_dict[char] = char_dict.get(char, 0) + 1 return char_dict"},{"question":"Design a Python function that determines the longest substring within a given string that consists solely of unique characters. Ensure your function efficiently handles cases where the input string contains various types of characters, including letters, digits, and special characters. Additionally, the function should be able to return both the length of this longest unique substring and the substring itself. Example Input: \`\`\`python input_string = \\"abcabcbb\\" \`\`\` Example Output: \`\`\`python (3, \\"abc\\") \`\`\` Provide a complete function definition with a clear docstring that explains the function's purpose, parameters, and returns.","solution":"def longest_unique_substring(s): Determines the longest substring within a given string that consists solely of unique characters. Returns both the length of this longest unique substring and the substring itself. Parameters: s (str): The input string Returns: tuple: A tuple containing the length of the longest unique substring and the substring itself start = 0 max_len = 0 max_substr = \\"\\" char_index_map = {} for end in range(len(s)): if s[end] in char_index_map and char_index_map[s[end]] >= start: start = char_index_map[s[end]] + 1 char_index_map[s[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_substr = s[start:end + 1] return (max_len, max_substr)"},{"question":"Develop a Python script to take a list of words and determine if there are any two words in the list that are anagrams of each other. The script should return a list of tuples, where each tuple contains two words that are anagrams. If no anagram pairs are found, return an empty list. Consider case sensitivity in your implementation.","solution":"from collections import defaultdict def find_anagram_pairs(words): Returns a list of tuples, each containing two words that are anagrams of each other. Args: words (list of str): The list of words to be checked. Returns: list of tuples: A list of tuples where each tuple contains two anagram words. anagrams = defaultdict(list) for word in words: # Sort the word and use it as the key sorted_word = ''.join(sorted(word)) anagrams[sorted_word].append(word) anagram_pairs = [] for group in anagrams.values(): if len(group) > 1: # Create tuples of anagram pairs for i in range(len(group)): for j in range(i + 1, len(group)): anagram_pairs.append((group[i], group[j])) return anagram_pairs"},{"question":"Create a function named \`invert_dictionary\` that takes a dictionary as input and returns a new dictionary where the keys are values from the input dictionary and the values are lists of keys from the input dictionary that had the same value. # Requirements: - Function Name: \`invert_dictionary\` - Input: A dictionary with keys of any hashable type and values of any hashable type. - Output: A dictionary with the keys as the unique values from the input dictionary and values as lists of keys from the input dictionary that correspond to each unique value. # Example: \`\`\`python def invert_dictionary(d): # Your code here # Example input_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3} output_dict = invert_dictionary(input_dict) print(output_dict) # Output should be {1: ['a', 'c'], 2: ['b'], 3: ['d']} \`\`\` # Constraints: - The input dictionary will have at most 10^4 key-value pairs.","solution":"def invert_dictionary(d): Inverts a dictionary so that keys are values and values are lists of keys that had the same value. Parameters: d (dict): Input dictionary with hashable keys and values. Returns: dict: Inverted dictionary with values from the input dict as keys and the keys from the input as list values. inverted = {} for key, value in d.items(): if value in inverted: inverted[value].append(key) else: inverted[value] = [key] return inverted"},{"question":"<p>Consider a rectangular matrix filled with an integer spiral starting from the top-left corner and moving clockwise. Given a matrix with dimensions 'n' x 'm', the elements are filled in increasing order starting from 1. For example, in a 4x3 matrix, the spiral would look like this:</p> <pre> 1 2 3 10 11 4 9 12 5 8 7 6 </pre> <p>Write a function <code>generate_spiral_matrix(n, m)</code> that takes two integers, <code>n</code> and <code>m</code>, as input and returns the matrix filled in a clockwise spiral. The function should output the matrix such that:</p> <pre> generate_spiral_matrix(4, 3) returns [[1, 2, 3], [10, 11, 4], [9, 12, 5], [8, 7, 6]] </pre> <p>Additional considerations:</p> <ul> <li><code>n</code> and <code>m</code> will be between 1 and 100.</li> <li>You should aim for an efficient solution in terms of both time and space complexities.</li> </ul> <p>Test your function to ensure it works for various input scenarios.</p>","solution":"def generate_spiral_matrix(n, m): Generates an n x m matrix filled with integers in a clockwise spiral pattern. matrix = [[0 for _ in range(m)] for _ in range(n)] num = 1 left, right = 0, m - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for i in range(left, right + 1): # Move from left to right matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom + 1): # Move from top to bottom matrix[i][right] = num num += 1 right -= 1 if top <= bottom: for i in range(right, left - 1, -1): # Move from right to left matrix[bottom][i] = num num += 1 bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): # Move from bottom to top matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Write a function in Python that takes an integer \`n\` as input and returns a list of all prime numbers up to \`n\` in ascending order. Optimize the function for performance given possible large values of \`n\`. Additionally, the function should avoid using any built-in libraries or functions specifically designed for prime number generation.","solution":"def primes_up_to(n): Returns a list of all prime numbers up to n (inclusive). Parameters: n (int): The upper limit to generate prime numbers. Returns: list: A list of prime numbers up to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"Create a function to process files and calculate the total size: Modify the given function to not only compute the total size of all files in a provided directory but also to categorize the files based on their extensions (e.g., .txt, .jpg) and calculate the cumulative size for each category. Ensure the function handles nested directories and manage any file read errors gracefully. Use the sample code below as a starting point: \`\`\`python import os def calculate_total_size(directory: str) -> int: Given a directory path, it calculates the total size of all files in the directory and its subdirectories. The function should return the cumulative size in bytes. >>> calculate_total_size('/path/to/directory') 1048576 \`\`\`","solution":"import os def calculate_file_sizes(directory: str) -> dict: Given a directory path, it calculates the total size of all files in the directory and its subdirectories. The function categorizes the files based on their extensions and calculates the cumulative size for each category. It handles nested directories and manages any file read errors gracefully. Args: directory (str): Path to the directory. Returns: dict: A dictionary with file extensions as keys and cumulative sizes as values, and 'total' key for the cumulative size of all files. sizes = {} for root, dirs, files in os.walk(directory): for file in files: file_path = os.path.join(root, file) try: file_size = os.path.getsize(file_path) file_extension = os.path.splitext(file)[1].lower() if file_extension not in sizes: sizes[file_extension] = 0 sizes[file_extension] += file_size if 'total' not in sizes: sizes['total'] = 0 sizes['total'] += file_size except OSError: # Gracefully ignore files that cannot be read pass return sizes"},{"question":"Write a Python program that utilizes dynamic programming to solve the classic Fibonacci sequence problem. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 The program should take a non-negative integer \`n\` as input and return the \`n\`th Fibonacci number. Ensure that your solution is optimized to handle large values of \`n\` efficiently by making use of a dynamic programming approach, which typically involves storing computed Fibonacci numbers in a list to avoid redundant calculations. def fibonacci(n): # Implement the dynamic programming solution to compute the nth Fibonacci number #","solution":"def fibonacci(n): Returns the nth Fibonacci number using dynamic programming. if n == 0: return 0 elif n == 1: return 1 # Initialize base cases fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 # Compute subsequent Fibonacci numbers for i in range(2, n + 1): fib[i] = fib[i - 1] + fib[i - 2] return fib[n]"},{"question":"Create a function that takes a list of integers and returns the maximum product that can be obtained from any three of the integers. Develop your implementation without using built-in sorting functions to maintain linear time complexity. Be sure to handle edge cases where the list may contain fewer than three integers.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three integers in the list. If the list contains fewer than three integers, raises a ValueError. if len(nums) < 3: raise ValueError(\\"List must contain at least three integers.\\") max1 = max2 = max3 = float('-inf') min1 = min2 = float('inf') for num in nums: if num > max1: max3 = max2 max2 = max1 max1 = num elif num > max2: max3 = max2 max2 = num elif num > max3: max3 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num return max(max1 * max2 * max3, max1 * min1 * min2)"},{"question":"Implement a function that takes a list of integers and a target number as inputs. The function should return the indices of the two numbers in the list such that they add up to the target number. Assume each input would have exactly one solution, and you may not use the same element twice. Provide an implementation that demonstrates the use of dictionaries (hash maps) for efficient lookup. In addition to the correct implementation, provide a piece of erroneous code attempting to solve the problem but containing exactly 3 bugs. The candidate's task would be to understand and correct the code while explaining the cause of each bug. On successful debugging, the code should return the correct indices and print the input list along with the target number. If the target number is not reachable with any two numbers in the list, ensure the program throws a meaningful custom exception.","solution":"class TargetNotFoundException(Exception): def __init__(self, message=\\"Target number not reachable with any two numbers in the list\\"): self.message = message super().__init__(self.message) def two_sum(nums, target): Returns the indices of the two numbers in the list such that they add up to the target number. Uses a dictionary for efficient lookup. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i raise TargetNotFoundException()"},{"question":"Write a function that takes a list of integers and returns a list of tuples where each tuple contains pairs of integers that sum up to a target value. The order of the tuples in the output list should be in ascending order based on their first and second values. If no such pairs exist, return an empty list. The function should also handle edge cases like an empty list or a list with only one integer.","solution":"def find_pairs(nums, target): Returns a list of tuples where each tuple contains pairs of integers from 'nums' that sum up to 'target'. The result is sorted in ascending order based on the first and second values of the tuples. If no such pairs exist, returns an empty list. pairs = [] seen = set() for num in nums: complement = target - num if complement in seen: pairs.append((min(num, complement), max(num, complement))) seen.add(num) # Remove duplicates and sort the list of tuples unique_pairs = list(set(pairs)) unique_pairs.sort() return unique_pairs"},{"question":"Write a function int isMagicSquare(int[][] matrix) that takes a 2D array representing a square matrix as input and returns 1 if the matrix is a magic square and 0 if it is not. A magic square is defined as an n x n matrix of distinct numbers from 1 to n^2 whose rows, columns, and main diagonals all add up to the same number. Assume the matrix is always square and has at least size 1x1. For example: Input: matrix = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] Output: 1 Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 0","solution":"def isMagicSquare(matrix): Check if the given matrix is a magic square. Parameters: matrix (list of list of int): A 2D array representing the square matrix. Returns: int: 1 if the matrix is a magic square, 0 otherwise. n = len(matrix) magic_sum = n * (n*n + 1) // 2 # Check rows and columns for i in range(n): if sum(matrix[i]) != magic_sum or sum(matrix[j][i] for j in range(n)) != magic_sum: return 0 # Check diagonals if sum(matrix[i][i] for i in range(n)) != magic_sum or sum(matrix[i][n-i-1] for i in range(n)) != magic_sum: return 0 # Check that all numbers from 1 to n^2 are present expected_numbers = set(range(1, n*n + 1)) actual_numbers = set() for row in matrix: actual_numbers.update(row) if expected_numbers != actual_numbers: return 0 return 1"},{"question":"Given a list of integers representing the prices of a stock on each day over a period of time, write a function to calculate the maximum profit achievable by making a single buy and then sell transaction within this period. The goal is to find the best days to buy and sell in order to maximize the profit, but the buying day must be before the selling day. For example, for the input prices: [7, 1, 5, 3, 6, 4], the best day to buy would be at price 1 (second day) and the best day to sell would be at price 6 (fifth day), so the maximum profit is 6 - 1 = 5. Here is an incorrect implementation to illustrate the problem. Your task is to correct this function to handle edge cases appropriately and yield the maximum possible profit: \`\`\`python def max_profit(prices): if not prices: return 0 max_profit = 0 min_price = prices[0] for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit print(max_profit([7, 1, 5, 3, 6, 4])) # expected output: 5 print(max_profit([7, 6, 4, 3, 1])) # expected output: 0 \`\`\` The provided code may not correctly handle cases where the prices decrease every day, such as the second print statement example. Ensure your corrected code functions accurately for such edge cases.","solution":"def max_profit(prices): Calculate the maximum profit achievable by making a single buy and sell transaction. Args: prices (list of int): List of prices representing the stock price on each day. Returns: int: Maximum profit achievable. if not prices: return 0 max_profit = 0 min_price = prices[0] for price in prices: if price < min_price: min_price = price current_profit = price - min_price if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"Design a function in Python that takes a list of dictionaries and a key, and returns a dictionary grouping the original dictionaries by the specified key. If any dictionary in the list lacks the specified key, it should be grouped under a special key \\"Undefined\\". Include proper error handling to ensure that the function behaves correctly if the inputs are not types expected (i.e., list of dictionaries for the list and a string for the key). Provide an example of how to use this function and the expected output.","solution":"def group_by_key(list_of_dicts, key): Groups a list of dictionaries by a specified key. Parameters: list_of_dicts (list): List of dictionaries to be grouped. key (str): The key to group the dictionaries by. Returns: dict: A dictionary where the keys are the unique values found in the input dictionaries under the specified key, and the values are lists of dictionaries that have the corresponding key value. Dictionaries without the specified key are grouped under 'Undefined'. Raises: ValueError: If the list_of_dicts is not a list or if key is not a string. if not isinstance(list_of_dicts, list): raise ValueError(\\"The first argument must be a list of dictionaries.\\") if not isinstance(key, str): raise ValueError(\\"The key must be a string.\\") if not all(isinstance(d, dict) for d in list_of_dicts): raise ValueError(\\"All elements of the list must be dictionaries.\\") grouped_dict = {} for dictionary in list_of_dicts: value = dictionary.get(key, \\"Undefined\\") if value not in grouped_dict: grouped_dict[value] = [] grouped_dict[value].append(dictionary) return grouped_dict"},{"question":"Write a Python function that reads a large CSV file in chunks using pandas, processes each chunk to filter out rows based on a specified condition, and appends the filtered data into a new CSV file. The condition to filter out rows should be provided as a lambda function. Ensure that the function handles memory efficiently by only keeping necessary data in memory.","solution":"import pandas as pd def process_large_csv(input_file, output_file, chunk_size, condition): Processes a large CSV file in chunks, filters rows based on a condition, and appends the filtered data to a new CSV file. :param input_file: Path to the input large CSV file. :param output_file: Path to the output CSV file where filtered data will be stored. :param chunk_size: Number of rows per chunk to process. :param condition: Lambda function to filter rows. chunks = pd.read_csv(input_file, chunksize=chunk_size) for i, chunk in enumerate(chunks): filtered_chunk = chunk[chunk.apply(condition, axis=1)] if i == 0: filtered_chunk.to_csv(output_file, index=False) else: filtered_chunk.to_csv(output_file, mode='a', header=False, index=False)"},{"question":"You are given an integer array \`nums\` which is sorted in non-decreasing order, and an integer \`target\`. Write a function \`findClosestElements(nums, target, k)\` to return the \`k\` closest integers to the \`target\`. The result should also be sorted in non-decreasing order. In the case of a tie, the smaller elements are preferred. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 3, k = 2 Output: [2, 3] Example 2: Input: nums = [0, 1, 2, 3, 4, 5, 6], target = 5, k = 4 Output: [3, 4, 5, 6] Example 3: Input: nums = [1, 2, 3, 4, 5], target = -1, k = 3 Output: [1, 2, 3] Function Signature: \`\`\`python def findClosestElements(nums: List[int], target: int, k: int) -> List[int]: \`\`\` Constraints: - \`1 <= len(nums) <= 10^4\` - \`-10^4 <= nums[i] <= 10^4\` - \`nums\` is sorted in non-decreasing order. - \`1 <= k <= len(nums)\` - \`-10^4 <= target <= 10^4\` Hint: - Consider using a binary search approach to find the closest element to the \`target\`, then expanding outwards to find the \`k\` closest elements.","solution":"from typing import List def findClosestElements(nums: List[int], target: int, k: int) -> List[int]: # Binary search to find the insertion point left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid - 1 # Initializing two pointers for the closest k elements index = left left, right = index - 1, index # Find k closest elements result = [] while k > 0: if left < 0: result.append(nums[right]) right += 1 elif right >= len(nums): result.append(nums[left]) left -= 1 elif abs(nums[left] - target) <= abs(nums[right] - target): result.append(nums[left]) left -= 1 else: result.append(nums[right]) right += 1 k -= 1 # Return sorted result result.sort() return result"},{"question":"Design a function to merge two pre-sorted lists of integers into a single sorted list without using any built-in sorting functions. Your solution should maintain the efficiency expected of sorted data merging. Consider edge cases such as one or both lists being empty.","solution":"def merge_sorted_lists(list1, list2): Merges two pre-sorted lists of integers into a single sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from list1 or list2 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function in Python that takes a string containing a mixture of digits and lowercase letters and returns the string sorted in such a way that all digits come before the letters, while preserving their relative order. # Function Signature \`\`\`python def sort_string_mix(s: str) -> str: pass \`\`\` # Input - \`s\` (str): A string containing a mixture of digits (\`0-9\`) and lowercase letters (\`a-z\`). The string length does not exceed 1000 characters. # Output - (str): The input string sorted with all digits appearing before any letters, but both digits and letters must maintain their original relative order. # Example \`\`\`python assert sort_string_mix(\\"a1b2c3\\") == \\"123abc\\" assert sort_string_mix(\\"z3y2x1\\") == \\"321zyx\\" assert sort_string_mix(\\"a2b1c3d\\") == \\"213abcd\\" \`\`\`","solution":"def sort_string_mix(s: str) -> str: # Separate digits and letters while maintaining their relative order digits = [char for char in s if char.isdigit()] letters = [char for char in s if char.isalpha()] # Concatenate digits followed by letters return ''.join(digits + letters)"},{"question":"Write a function that takes an array of integers and a target value, and returns the indices of the two numbers that add up to the target value. Assume that each input would have exactly one solution, and you may not use the same element twice. For example, given array \`[2, 7, 11, 15]\` and target \`9\`, the function should return \`[0, 1]\` because \`2 + 7 = 9\`.","solution":"def two_sum(nums, target): Finds two indices such that the numbers at those indices add up to the target. Args: nums (list): A list of integers. target (int): The target sum. Returns: list: A list containing the two indices. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"Write a function in Python that rotates a given matrix 90 degrees clockwise. The input will be a 2D list representing the matrix, and the function should return a new 2D list representing the rotated matrix. Consider edge cases such as empty matrices, and ensure that your solution handles any square or rectangular matrix efficiently.","solution":"def rotate_matrix(matrix): Rotates a given matrix 90 degrees clockwise. :param matrix: A 2D list representing the matrix. :return: A new 2D list representing the rotated matrix. if not matrix or not matrix[0]: return [] row_count = len(matrix) col_count = len(matrix[0]) # Create a new matrix with swapped rows and columns rotated_matrix = [[0] * row_count for _ in range(col_count)] for r in range(row_count): for c in range(col_count): rotated_matrix[c][row_count - 1 - r] = matrix[r][c] return rotated_matrix"},{"question":"Write a Python function that takes a list of dictionaries and a key name as arguments, and returns the sum of all values associated with the given key name. list_of_dicts = [{'a': 5, 'b': 10}, {'a': 3, 'c': 8}, {'a': 7, 'b': 2}, {'b': 4, 'c': 1}] key_name = 'a'","solution":"def sum_of_values(list_of_dicts, key_name): Returns the sum of all values associated with the given key name in the list of dictionaries. :param list_of_dicts: List of dictionaries to search for the key. :param key_name: The key for which values are to be summed. :return: Sum of all values corresponding to the given key. return sum(d.get(key_name, 0) for d in list_of_dicts)"},{"question":"Develop a Python function that takes a list of integers and returns a new list with each integer incremented by the same amount. The increment amount is determined by the number of unique integers in the input list. Remember to use appropriate error handling to manage cases where the input is not a list of integers. Validate the complete functionality and robustness of your solution through a set of representative test cases.","solution":"def increment_by_unique_count(lst): Takes a list of integers and returns a new list with each integer incremented by the number of unique integers in the input list. Args: lst (list): A list of integers. Returns: list: A new list with each integer incremented by the number of unique integers. Raises: TypeError: If the input is not a list or if the elements in the list are not all integers. if not isinstance(lst, list): raise TypeError(\\"Input must be a list.\\") if not all(isinstance(i, int) for i in lst): raise TypeError(\\"All elements in the list must be integers.\\") unique_count = len(set(lst)) return [i + unique_count for i in lst]"},{"question":"Develop a recommendation algorithm in Python that utilizes a collaborative filtering approach to suggest movies to users based on their past ratings and the preferences of similar users. Ensure the implementation includes efficient handling of large datasets, adequate error checking, and optimization for performance. The algorithm should be designed to incorporate new user data seamlessly and adapt recommendations in real-time.","solution":"import numpy as np import pandas as pd from sklearn.metrics.pairwise import cosine_similarity class CollaborativeFilteringRecommender: def __init__(self, ratings_df): Initialize the recommender with a DataFrame containing user-item ratings. The DataFrame should have columns: 'user_id', 'item_id', 'rating'. self.ratings_df = ratings_df self.user_similarity_matrix = None self.prediction_matrix = None self.prepare_matrices() def prepare_matrices(self): Prepare the user similarity and prediction matrices. user_item_matrix = self.ratings_df.pivot(index='user_id', columns='item_id', values='rating').fillna(0) self.user_item_matrix = user_item_matrix.to_numpy() # Compute user similarity matrix based on cosine similarity self.user_similarity_matrix = cosine_similarity(self.user_item_matrix) # Predict ratings self.prediction_matrix = np.dot(self.user_similarity_matrix, self.user_item_matrix) # Filter out already rated items rated_matrix = (self.user_item_matrix > 0).astype(float) self.prediction_matrix *= (1 - rated_matrix) def recommend(self, user_id, top_n=5): Recommend top N items for a given user. Returns a list of item_ids. if user_id not in self.ratings_df['user_id'].unique(): raise ValueError(\\"User ID not found in dataset\\") user_idx = self.ratings_df['user_id'].unique().tolist().index(user_id) # Get the predicted ratings for the user user_predictions = self.prediction_matrix[user_idx] # Sort the predictions recommended_items_idx = (-user_predictions).argsort()[:top_n] # Get the item_ids for the top_n recommendations item_ids = self.ratings_df['item_id'].unique()[recommended_items_idx].tolist() return item_ids def update_ratings(self, new_ratings_df): Update the ratings matrix with new ratings. self.ratings_df = pd.concat([self.ratings_df, new_ratings_df]) self.prepare_matrices() # Example usage # ratings = pd.DataFrame({ # 'user_id': [1, 1, 1, 2, 2, 2, 3, 3, 3], # 'item_id': [1, 2, 3, 1, 2, 3, 1, 2, 4], # 'rating': [4, 5, 2, 3, 3, 4, 2, 5, 4] # }) # recommender = CollaborativeFilteringRecommender(ratings) # print(recommender.recommend(user_id=1, top_n=3))"},{"question":"Write a Python function that takes a list of integers and returns the largest number from that list. If the list is empty, the function should return \`None\`.","solution":"def find_largest_number(numbers): Returns the largest number in the list of integers, or None if the list is empty. if not numbers: return None return max(numbers)"},{"question":"Design a class for a data structure that supports the following operations: 1. **insert(value)**: Inserts the value into the data structure. 2. **delete(value)**: Removes one occurrence of the value from the data structure. If the value does not exist, do nothing. 3. **getRandom()**: Returns a random value present in the data structure. 4. **getAllValues()**: Returns a list of all values in the data structure. The data structure should support inserting and deleting values efficiently, aiming for O(1) average time complexity for these operations. You can use any Python standard library modules that may help to achieve this. Implement the class as follows: \`\`\`python import random class RandomizedCollection: def __init__(self): Initialize your data structure here. pass def insert(self, value: int) -> None: Inserts a value to the data structure. pass def delete(self, value: int) -> None: Removes a value from the data structure. Do nothing if the value is not found. pass def getRandom(self) -> int: Returns a random value from the current set of elements. pass def getAllValues(self) -> list: Returns all the values currently present in the data structure. pass \`\`\` **Example:** \`\`\`python # Initialize the RandomizedCollection object collection = RandomizedCollection() # Insert values collection.insert(1) collection.insert(2) collection.insert(3) # Retrieve all values print(collection.getAllValues()) # Example output: [1, 2, 3] # Retrieve a random value print(collection.getRandom()) # Example output: 2 (or any other inserted value) # Delete a value collection.delete(2) # Retrieve all values after deletion print(collection.getAllValues()) # Example output: [1, 3] \`\`\` **Constraints:** - The \`insert\` and \`delete\` methods should run in average O(1) time complexity. - The data structure can store duplicate values.","solution":"import random class RandomizedCollection: def __init__(self): Initialize your data structure here. self.value_list = [] self.value_to_indices = {} def insert(self, value: int) -> None: Inserts a value to the data structure. if value in self.value_to_indices: self.value_to_indices[value].add(len(self.value_list)) else: self.value_to_indices[value] = {len(self.value_list)} self.value_list.append(value) def delete(self, value: int) -> None: Removes a value from the data structure. Do nothing if the value is not found. if value in self.value_to_indices and self.value_to_indices[value]: # Get an index of the value to be removed remove_idx = self.value_to_indices[value].pop() # Move the last element to the remove_idx if it's not the last element last_val = self.value_list[-1] self.value_list[remove_idx] = last_val # Update the moved element's index set if self.value_to_indices[last_val]: self.value_to_indices[last_val].add(remove_idx) self.value_to_indices[last_val].remove(len(self.value_list) - 1) # Remove the last element in the list self.value_list.pop() # Remove the entry from the dictionary if it's empty if not self.value_to_indices[value]: del self.value_to_indices[value] def getRandom(self) -> int: Returns a random value from the current set of elements. return random.choice(self.value_list) def getAllValues(self) -> list: Returns all the values currently present in the data structure. return self.value_list[:]"},{"question":"Create a function that takes an integer array and returns the same array with each element replaced by the sum of the elements to its left. The first element should remain unchanged as there are no elements to its left. If the array is empty, return an empty array. Ensure your function has a linear time complexity. Example: Input: [4, 8, 15, 16, 23, 42] Output: [4, 12, 27, 43, 66, 108]","solution":"def replace_with_left_sums(arr): Replace each element in the array with the sum of the elements to its left. The first element remains unchanged. :param arr: List of integers :return: Modified list of integers if not arr: # Handle empty array case return [] for i in range(1, len(arr)): arr[i] += arr[i - 1] return arr"},{"question":"Create a function that takes an integer input N and generates a list of the first N prime numbers. Additionally, implement a secondary function that will take this list of prime numbers and calculate their sum, product, and geometric mean. The primary function should: 1. Verify that the input N is a positive integer. 2. Implement an efficient algorithm to find prime numbers. 3. Generate a list of the first N prime numbers. The secondary function should: 1. Take the list of prime numbers as input. 2. Return a tuple with the sum, product, and geometric mean of the prime numbers. For simplicity, assume that the input for the secondary function will always be valid (i.e., a non-empty list of prime numbers). Test your solution with at least one example where N=10. Return the results in a structured tuple or dictionary format.","solution":"import math def generate_primes(N): Generates the first N prime numbers. Args: N (int): The number of prime numbers to generate. Returns: List[int]: List of the first N prime numbers. if not isinstance(N, int) or N <= 0: raise ValueError(\\"Input must be a positive integer.\\") primes = [] num = 2 while len(primes) < N: is_prime = True for p in primes: if p * p > num: # No need to check higher divisors break if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes def calculate_prime_stats(primes): Calculate sum, product, and geometric mean of a list of prime numbers. Args: primes (List[int]): List of prime numbers. Returns: Tuple[int, int, float]: A tuple containing the sum, product, and geometric mean. total_sum = sum(primes) total_product = math.prod(primes) geom_mean = total_product ** (1 / len(primes)) return total_sum, total_product, geom_mean"},{"question":"In Python, write a function that takes a dictionary where the values are lists of integers and returns a dictionary with the same keys but where the values are the sums of the corresponding lists. For example, if the input dictionary is {\\"a\\": [1, 2, 3], \\"b\\": [4, 5], \\"c\\": [6]}, the output should be {\\"a\\": 6, \\"b\\": 9, \\"c\\": 6}.","solution":"def sum_values_in_dict(input_dict): Takes a dictionary where the values are lists of integers and returns a dictionary with the same keys but where the values are the sums of the corresponding lists. return {key: sum(value) for key, value in input_dict.items()}"},{"question":"Create a function that reads a string containing a mathematical expression with addition and subtraction, evaluates it, and returns the result. The function should handle both integers and floats, and also account for spaces in the input string. from typing import Union def evaluate_expression(expression: str) -> Union[int, float]: Given a string containing a mathematical expression, evaluate it and return the result. The expression will only contain numbers, spaces, '+' and '-'. It can handle both integer and float numbers. >>> evaluate_expression(\\"1 + 2 - 3 + 4\\") 4 >>> evaluate_expression(\\"5.5 + 4.5 - 2\\") 8.0 >>> evaluate_expression(\\" 10 - 3.5 + 4 \\") 10.5 # Extended code to implement should be added below","solution":"def evaluate_expression(expression: str): Given a string containing a mathematical expression, evaluates it and returns the result. Parameters: expression (str): A string containing a mathematical expression with numbers, spaces, '+' and '-'. The numbers can be both integers and floats. Returns: The evaluated result of the expression as an int or float. Examples: >>> evaluate_expression(\\"1 + 2 - 3 + 4\\") 4 >>> evaluate_expression(\\"5.5 + 4.5 - 2\\") 8.0 >>> evaluate_expression(\\" 10 - 3.5 + 4 \\") 10.5 # Remove any whitespace from the expression expression = expression.replace(' ', '') # Evaluate the expression result = eval(expression) return result"},{"question":"Write a function that takes a list of strings and an integer \`n\`, and returns a new list containing only the strings that have at least \`n\` characters. If the resulting list is empty, return a list containing a single empty string (\\"\\"). Additionally, implement a sorting mechanism that sorts the list of strings in descending order based on their length. If two strings have the same length, maintain their original order as in the input list. Finally, write a function to handle potential input errors, such as when the list contains non-string elements or when \`n\` is not a positive integer. Raise appropriate exceptions for each error case with descriptive error messages. Below is a fragment of an erroneous code for the described functionality. Identify and correct the errors in this code. \`\`\`python def filter_and_sort_strings(str_list, n): # Check for input errors if not isinstance(n, int) or n <= 0: raise ValueError(\\"n must be a positive integer\\") for item in str_list: if not isinstance(item, str): raise TypeError(\\"str_list must contain only strings\\") # Filter strings of at least length n filtered_list = [s for s in str_list if len(s) >= n] # Return list with single empty string if filtered list is empty if len(filtered_list) == 0: return [\\"\\"] # Sort strings by length in descending order filtered_list.sort(key=lambda x: len(x), reverse=True) return filtered_list \`\`\` Use the following test cases to validate your code: - Input: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], 6 Output: ['banana', 'cherry'] - Input: [\\"hi\\", \\"hello\\", \\"yes\\", 12345], 2 Output: TypeError - Input: [\\"one\\", \\"two\\", \\"three\\", \\"four\\"], -1 Output: ValueError - Input: [\\"abc\\", \\"de\\", \\"fghi\\"], 5 Output: ['']","solution":"def filter_and_sort_strings(str_list, n): Filters and sorts a list of strings based on the length condition and sorts them in descending order by length. Parameters: str_list (list): List of strings to be filtered and sorted. n (int): Minimum length of the strings to be included in the returned list. Returns: list: A new list containing strings with at least n characters, sorted by length in descending order. # Check for input errors if not isinstance(n, int) or n <= 0: raise ValueError(\\"n must be a positive integer\\") for item in str_list: if not isinstance(item, str): raise TypeError(\\"str_list must contain only strings\\") # Filter strings of at least length n filtered_list = [s for s in str_list if len(s) >= n] # Return list with single empty string if filtered list is empty if len(filtered_list) == 0: return [\\"\\"] # Sort strings by length in descending order filtered_list.sort(key=lambda x: len(x), reverse=True) return filtered_list"},{"question":"You are given a string \`s\` composed only of lowercase English alphabets. Your task is to return the length of the longest substring without repeating characters. To clarify, a \\"substring\\" is a contiguous sequence of characters within a string. Your solution needs to identify the maximum length possible for any such contiguous sequence in the string \`s\` where no characters are repeated. Consider the following examples: Example 1: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Example 4: Input: s = \\"nfpdmpi\\" Output: 5 Explanation: The answer is \\"fpdmp\\", with the length of 5. Example 5: Input: s = \\"abcabcdefg\\" Output: 7 Explanation: The answer is \\"abcdefg\\", with the length of 7. Constraints: - The length of the string \`s\` will be between 1 and 1000 inclusive.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index_map = {} for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Write a Python function called \`find_missing_number\` that takes an unsorted list of integers and returns the missing number in the sequence. The list will contain n-1 integers and will have integers from 1 to n with only one number missing. Your function should handle the case where the missing number could be anywhere in the range, including the first or the last number. Function signature: \`\`\`python def find_missing_number(arr: list[int]) -> int: pass \`\`\` Example: \`\`\`python assert find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 assert find_missing_number([1, 3, 4, 5, 6]) == 2 \`\`\` Constraints: - The list will have at least 2 integers and at most 10,000 integers. - All integers in the list are unique and within the valid range. Develop your solution considering optimal performance and readability.","solution":"def find_missing_number(arr: list[int]) -> int: Finds the missing number in the list. The list contains n-1 distinct integers from 1 to n with one missing. n = len(arr) + 1 total_sum = n * (n + 1) // 2 array_sum = sum(arr) return total_sum - array_sum"},{"question":"Implement a Python class TemperatureTracker that supports temperature readings and provides useful temperature-related functionalities. Your class should have methods to perform the following operations: - **insert(temp)**: Inserts a new temperature reading into the tracker. - **get_max()**: Returns the highest temperature reading inserted so far. If no readings are available, return None. - **get_min()**: Returns the lowest temperature reading inserted so far. If no readings are available, return None. - **get_mean()**: Returns the mean of all the temperature readings inserted so far. If no readings are available, return None. - **get_mode()**: Returns the mode(s) of all the temperature readings inserted so far. If no readings are available, return None. The class should handle real-time data insertion and updates efficiently. The \`get_mode\` method should return a list of the most frequently occurring temperature readings (there can be more than one mode). Your implementation should consider edge cases such as when no readings have been inserted. For example: \`\`\`python tracker = TemperatureTracker() tracker.insert(30) tracker.insert(20) tracker.insert(20) tracker.insert(40) print(tracker.get_max()) # Output: 40 print(tracker.get_min()) # Output: 20 print(tracker.get_mean()) # Output: 27.5 print(tracker.get_mode()) # Output: [20] \`\`\` Write this class and be sure to include exception handling for potential issues that may arise during insertions or calculations.","solution":"from collections import defaultdict import math class TemperatureTracker: def __init__(self): self.temperatures = [] self.counts = defaultdict(int) self.total_sum = 0 def insert(self, temp): self.temperatures.append(temp) self.counts[temp] += 1 self.total_sum += temp def get_max(self): if not self.temperatures: return None return max(self.temperatures) def get_min(self): if not self.temperatures: return None return min(self.temperatures) def get_mean(self): if not self.temperatures: return None return self.total_sum / len(self.temperatures) def get_mode(self): if not self.temperatures: return None max_count = max(self.counts.values()) mode = [key for key, count in self.counts.items() if count == max_count] return mode"},{"question":"Write a function \`merge_two_sorted_lists\` that takes in two sorted lists of integers and returns a single sorted list that contains all elements from both input lists. Ensure that your function handles edge cases where one or both input lists may be empty. The function should not use any built-in sort functions. Example: \`\`\` Input: list1 = [1, 3, 5, 7], list2 = [2, 4, 6, 8] Output: [1, 2, 3, 4, 5, 6, 7, 8] Input: list1 = [1, 2, 3], list2 = [] Output: [1, 2, 3] Input: list1 = [], list2 = [4, 5, 6] Output: [4, 5, 6] \`\`\`","solution":"def merge_two_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 # Loop through both lists and append the smaller element to merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append any remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Append any remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a Python function that takes a list of integers and returns the second most frequent element in the list. If there is a tie for the second most frequent element, return the smallest one. If there are less than two distinct elements, return None. Below is an example of how the function should behave: Example: \`\`\`python def second_most_frequent(numbers): # your implementation here print(second_most_frequent([1, 3, 3, 3, 2, 2, 4, 4, 4, 6, 6])) # Output: 3 print(second_most_frequent([1, 1, 2, 2])) # Output: 1 print(second_most_frequent([5])) # Output: None \`\`\`","solution":"from collections import Counter def second_most_frequent(numbers): Returns the second most frequent element in the list If there is a tie for the second most frequent element, return the smallest one. If there are less than two distinct elements, return None. if len(set(numbers)) < 2: return None count = Counter(numbers) most_common = count.most_common() if len(most_common) < 2: return None # The second most frequent value can be in a tie second_most_freq_val = most_common[1][1] candidates = [num for num, freq in most_common if freq == second_most_freq_val] return min(candidates)"},{"question":"Create a function that receives an array of integers and an integer target value. The function should find all unique pairs of integers within the array whose sum matches the target value. The pairs should be returned as a list of tuples, with each tuple containing two integers. Ensure that each pair (a, b) follows the convention that a < b, and that the pairs are listed in ascending order based on their first element. If multiple pairs have the same first element, order them by the second element. If there are no such pairs, return an empty list.","solution":"def find_pairs(nums, target): Find all unique pairs in the array whose sum matches the target value. :param nums: List of integers. :param target: Integer target value. :return: List of tuples containing unique pairs. pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) # Return the sorted list of pairs return sorted(list(pairs))"},{"question":"Implement the function, binary_tree_sum(node), that takes the root node of a binary tree and computes the sum of all the node values. Each node contains an integer value and pointers to its left and right children. Ensure the function efficiently handles trees with varying depths and is optimized for both time and space complexity. Additionally, handle edge cases such as an empty tree or trees with negative values. \`\`\`python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def binary_tree_sum(node): binary_tree_sum(TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5)))) => 15 binary_tree_sum(TreeNode(-10, TreeNode(20, None, TreeNode(-30)), TreeNode(10))) => -10 binary_tree_sum(None) => 0 binary_tree_sum(TreeNode(1)) => 1 binary_tree_sum(TreeNode(1, TreeNode(2), TreeNode(3, TreeNode(4), TreeNode(5, TreeNode(6))))) => 21 \`\`\`","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def binary_tree_sum(node): Returns the sum of all values in the binary tree rooted at \`node\`. An empty tree has a sum of 0. if node is None: return 0 # Recursively compute sum of left subtree, right subtree and root node return node.value + binary_tree_sum(node.left) + binary_tree_sum(node.right)"},{"question":"Define a Python function that takes two parameters: a list of integers and an integer \`k\`. The function should return a list of all the unique quadruplets (four elements) from the input list that sum up to \`k\`. The quadruplets within the list should be sorted in ascending order and the output list should not contain duplicate quadruplets. \`\`\`python def find_quadruplets(lst, k): # Implementation here # Example usage: lst = [1, 0, -1, 0, -2, 2] k = 0 print(find_quadruplets(lst, k)) # Expected output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] \`\`\`","solution":"def find_quadruplets(lst, k): Returns a list of unique quadruplets from the input list that sum up to k. lst.sort() quadruplets = set() n = len(lst) for i in range(n - 3): for j in range(i + 1, n - 2): left, right = j + 1, n - 1 while left < right: total = lst[i] + lst[j] + lst[left] + lst[right] if total == k: quadruplets.add((lst[i], lst[j], lst[left], lst[right])) left += 1 right -= 1 elif total < k: left += 1 else: right -= 1 return [list(quad) for quad in sorted(quadruplets)]"},{"question":"Create a function that takes a list of integers as input and returns the second largest unique integer from the list. If the list contains fewer than two unique integers, the function should return None. Ensure that your implementation is efficient and can handle edge cases appropriately. **Function Signature:** \`\`\`python def second_largest_unique(nums: List[int]) -> Optional[int]: pass \`\`\` **Example:** \`\`\`python # Example case 1: nums = [4, 2, 10, 10, 2, 2, 4, 5] # The unique integers are [4, 2, 10, 5] # The second largest unique integer is 5 assert second_largest_unique(nums) == 5 # Example case 2: nums = [1, 1, 1, 1] # There are no unique integers greater than 1 assert second_largest_unique(nums) == None # Example case 3: nums = [7, 3, 7, 3, 8] # The unique integers are [7, 3, 8] # The second largest unique integer is 7 assert second_largest_unique(nums) == 7 \`\`\`","solution":"from typing import List, Optional def second_largest_unique(nums: List[int]) -> Optional[int]: Returns the second largest unique integer from the list. If there are fewer than two unique integers, returns None. unique_nums = set(nums) if len(unique_nums) < 2: return None largest = max(unique_nums) unique_nums.remove(largest) second_largest = max(unique_nums) return second_largest"},{"question":"Alice is organizing a virtual book club and wants to distribute books to all the members efficiently. She has 45 fiction books and 35 non-fiction books. Each book must be wrapped in either red or blue wrapping paper. Each fiction book is wrapped with red paper while each non-fiction book is wrapped with blue paper. When the books are being prepared, it is discovered that 20% of the fiction books and 40% of the non-fiction books have a defect in their wrapping paper and must be rewrapped. How many books in total need rewrapping?","solution":"def books_to_rewrap(fiction_books, non_fiction_books, fiction_defect_rate, non_fiction_defect_rate): Calculate the total number of books that need rewrapping. Parameters: fiction_books (int): Number of fiction books. non_fiction_books (int): Number of non-fiction books. fiction_defect_rate (float): Defect rate for fiction books. non_fiction_defect_rate (float): Defect rate for non-fiction books. Returns: int: Total number of books that need rewrapping. fiction_defect_books = fiction_books * fiction_defect_rate non_fiction_defect_books = non_fiction_books * non_fiction_defect_rate total_defects = fiction_defect_books + non_fiction_defect_books return int(total_defects) # Example usage fiction_books = 45 non_fiction_books = 35 fiction_defect_rate = 0.20 non_fiction_defect_rate = 0.40 books_needing_rewrap = books_to_rewrap(fiction_books, non_fiction_books, fiction_defect_rate, non_fiction_defect_rate) books_needing_rewrap"},{"question":"Write a function that converts a given integer to its Roman numeral representation. Your function should accept one parameter: an integer \`num\` between 1 and 3999. Make sure to handle cases where the integer is not within the specified range and instead return an appropriate error message as a string. For reference, the Roman numerals are: - 1 => I - 4 => IV - 5 => V - 9 => IX - 10 => X - 40 => XL - 50 => L - 90 => XC - 100 => C - 400 => CD - 500 => D - 900 => CM - 1000 => M Example: integer_to_roman(3549) Sample Output: \\"MMMDXLIX\\" integer_to_roman(4000) Sample Output: \\"Error: Input out of range\\"","solution":"def integer_to_roman(num): if not (1 <= num <= 3999): return \\"Error: Input out of range\\" roman_numerals = [ (1000, \\"M\\"), (900, \\"CM\\"), (500, \\"D\\"), (400, \\"CD\\"), (100, \\"C\\"), (90, \\"XC\\"), (50, \\"L\\"), (40, \\"XL\\"), (10, \\"X\\"), (9, \\"IX\\"), (5, \\"V\\"), (4, \\"IV\\"), (1, \\"I\\") ] result = [] for value, numeral in roman_numerals: while num >= value: result.append(numeral) num -= value return ''.join(result)"},{"question":"Write a function that accepts an integer array and a target integer as input and returns true if there are three distinct elements in the array that add up to the target sum. If no such triplet exists, return false. Ensure your solution has a time complexity better than O(n^3) and handles edge cases, such as arrays of insufficient length. Provide a detailed explanation of your algorithm and its time complexity.","solution":"def three_sum_triplet_exists(nums, target): Returns True if there are three distinct elements in the array that add up to the target sum. Otherwise, returns False. nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a function that takes as input a list of integers and returns a new list with duplicate elements removed and the remaining elements sorted in ascending order. The function signature should be \`def remove_duplicates_and_sort(nums: List[int]) -> List[int]:\`. Example: \`\`\`python >>> remove_duplicates_and_sort([4, 2, 5, 2, 3, 4]) [2, 3, 4, 5] \`\`\`","solution":"from typing import List def remove_duplicates_and_sort(nums: List[int]) -> List[int]: Removes duplicate elements from the list and returns the remaining elements sorted in ascending order. Args: nums (List[int]): A list of integers that may contain duplicates. Returns: List[int]: A new list with duplicates removed and elements sorted in ascending order. return sorted(set(nums))"},{"question":"Write a function that takes a string as input and returns a new string with all the vowels removed. Vowels in this context are defined as 'a', 'e', 'i', 'o', and 'u' (both uppercase and lowercase). Ensure the function handles an empty string appropriately and accounts for any non-alphabetic characters by leaving them unchanged. Demonstrate the function with the string \\"Hacktoberfest\\".","solution":"def remove_vowels(input_str): Remove all vowels from the input string. Parameters: input_str (str): The string from which vowels should be removed. Returns: str: New string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join(char for char in input_str if char not in vowels) # Demonstrating the function with the string \\"Hacktoberfest\\" example_string = \\"Hacktoberfest\\" print(remove_vowels(example_string)) # Output: \\"Hcktbrfst\\""},{"question":"You are given a list of integers. Your task is to determine the integer that appears the most frequently in that list. If there are multiple integers that appear with the same highest frequency, return the smallest one among them.","solution":"def most_frequent_integer(arr): Returns the integer that appears the most frequently in the list. If there are multiple integers with the same highest frequency, return the smallest one. from collections import Counter if not arr: return None counter = Counter(arr) max_frequency = max(counter.values()) candidates = [key for key, value in counter.items() if value == max_frequency] return min(candidates)"},{"question":"Write a function that takes a list of integers and returns a dictionary mapping each unique integer to the list of its indices in the original list. For example, given the list \`[4, 3, 2, 3, 1, 2, 4, 4]\`, the function should return \`{4: [0, 6, 7], 3: [1, 3], 2: [2, 5], 1: [4]}\`.","solution":"def map_indices(lst): Returns a dictionary mapping each unique integer in lst to a list of its indices. Parameters: lst (list): The list of integers Returns: dict: A dictionary where keys are unique integers from the list and values are lists of indices index_map = {} for index, value in enumerate(lst): if value not in index_map: index_map[value] = [] index_map[value].append(index) return index_map"},{"question":"Develop a function that accepts a list of integers and returns a new list where each element is the product of all the integers in the original list except for the integer at that position. For example, given the input list [1, 2, 3, 4], the function should return [24, 12, 8, 6], because: - 24 is the product of 2 * 3 * 4 - 12 is the product of 1 * 3 * 4 - 8 is the product of 1 * 2 * 4 - 6 is the product of 1 * 2 * 3 This solution should not use division and should handle an input list of any size, including edge cases like lists with zeroes or lists of length one. Optimize the function to achieve O(n) time complexity by using auxiliary arrays or any other suitable optimization technique. Ensure that the solution manages varying input sizes and values efficiently.","solution":"def product_except_self(nums): Returns a list where each element is the product of all numbers in the input list except for the number at that position. n = len(nums) if n == 0: return [] # Initialize the left and right product lists left_products = [1] * n right_products = [1] * n # Fill in left_products where left_products[i] is the product of all elements to the left of index i for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill in right_products where right_products[i] is the product of all elements to the right of index i for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying corresponding elements of left_products and right_products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a Python function that takes a list of integers and returns a new list with all duplicates removed, preserving the order of their first appearance. Additionally, ensure that the function does not use any built-in functions like \`set()\` or \`dict.fromkeys()\`. \`\`\`python def remove_duplicates(lst): # Your code here \`\`\` Example: \`\`\`python remove_duplicates([1, 2, 3, 1, 2, 4, 5, 3]) \`\`\` Output: \`\`\`python [1, 2, 3, 4, 5] \`\`\`","solution":"def remove_duplicates(lst): Returns a new list with all duplicates removed, preserving the order of their first appearance. seen = [] result = [] for item in lst: if item not in seen: seen.append(item) result.append(item) return result"},{"question":"Implement a function that simulates a simple text-based stock market trading system where users can buy and sell stocks, and check their portfolio. # Requirements: 1. Create a class 'StockMarket' that should contain a dictionary of available stocks with their prices and the number of shares available. 2. Create a class 'User' that should represent a user of the trading system. This class should contain the user's name, balance, and a dictionary representing the user's portfolio (stocks owned by the user with the number of shares). 3. The 'User' class should have methods to: - Buy shares of a specific stock if the stock is available and the user has sufficient balance. On buying, deduct the corresponding amount from the user's balance and add the shares to the user's portfolio. - Sell shares of a specific stock if the user owns the shares. On selling, add the corresponding amount to the user's balance and deduct the shares from the user's portfolio. - Display the current portfolio of the user including the cash balance. # Implementation Details: - The 'StockMarket' class should have methods to: - Initialize the stock prices and the available shares for each stock. - Update stock prices. # Example: Let's say the 'StockMarket' has the following stocks: - {'AAPL': {'price': 150, 'available_shares': 100}, 'GOOGL': {'price': 2800, 'available_shares': 50}, 'AMZN': {'price': 3400, 'available_shares': 30}} The user has an initial balance of 10,000. \`\`\` stock_market = StockMarket({'AAPL': {'price': 150, 'available_shares': 100}, 'GOOGL': {'price': 2800, 'available_shares': 50}, 'AMZN': {'price': 3400, 'available_shares': 30}}) user = User(name='John Doe', balance=10000) user.buy(stock_market, 'AAPL', 10) # Buys 10 shares of AAPL user.sell(stock_market, 'AAPL', 5) # Sells 5 shares of AAPL user.display_portfolio() \`\`\` The user class should handle edge cases such as attempting to buy more shares than are available or trying to buy/sell stocks without having enough funds/shares.","solution":"class StockMarket: def __init__(self, stocks): Initialize stock market with available stocks. :param stocks: Dictionary with stock information. E.g. {'AAPL': {'price': 150, 'available_shares': 100}} self.stocks = stocks def update_price(self, stock_symbol, new_price): Update the price of a specific stock. :param stock_symbol: Stock ticker symbol (str) :param new_price: New price of the stock (float) if stock_symbol in self.stocks: self.stocks[stock_symbol]['price'] = new_price class User: def __init__(self, name, balance): Initialize user with name and balance. :param name: Name of the user (str) :param balance: Initial balance of the user (float) self.name = name self.balance = balance self.portfolio = {} def buy(self, stock_market, stock_symbol, shares): Buy shares of a specific stock. :param stock_market: StockMarket instance :param stock_symbol: Stock ticker symbol (str) :param shares: Number of shares to buy (int) if stock_symbol not in stock_market.stocks: raise ValueError(\\"Stock not available in the market\\") stock = stock_market.stocks[stock_symbol] if shares > stock['available_shares']: raise ValueError(\\"Not enough shares available in the market\\") total_cost = stock['price'] * shares if total_cost > self.balance: raise ValueError(\\"Insufficient balance to buy shares\\") self.balance -= total_cost stock_market.stocks[stock_symbol]['available_shares'] -= shares if stock_symbol in self.portfolio: self.portfolio[stock_symbol] += shares else: self.portfolio[stock_symbol] = shares def sell(self, stock_market, stock_symbol, shares): Sell shares of a specific stock. :param stock_market: StockMarket instance :param stock_symbol: Stock ticker symbol (str) :param shares: Number of shares to sell (int) if stock_symbol not in self.portfolio or self.portfolio[stock_symbol] < shares: raise ValueError(\\"Not enough shares in the portfolio to sell\\") stock = stock_market.stocks[stock_symbol] total_gain = stock['price'] * shares self.balance += total_gain stock_market.stocks[stock_symbol]['available_shares'] += shares self.portfolio[stock_symbol] -= shares if self.portfolio[stock_symbol] == 0: del self.portfolio[stock_symbol] def display_portfolio(self): Display current portfolio of the user including the cash balance. print(f\\"{self.name}'s Portfolio:\\") for stock_symbol, shares in self.portfolio.items(): print(f\\"{stock_symbol}: {shares} shares\\") print(f\\"Cash balance: {self.balance:.2f}\\")"},{"question":"Write a function to find the longest palindrome substring in a given string \`s\`. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces and special characters). String s = \\"A man, a plan, a canal, Panama!\\" Note: Return the first longest palindrome in case there are multiple longest palindromes with the same length.","solution":"def longest_palindrome(s): Returns the longest palindrome substring in a given string s. def preprocess_string(s): return ''.join([char.lower() for char in s if char.isalnum()]) def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] s_processed = preprocess_string(s) if not s_processed: return \\"\\" longest = \\"\\" for i in range(len(s_processed)): # Odd length palindromes temp = expand_around_center(s_processed, i, i) if len(temp) > len(longest): longest = temp # Even length palindromes temp = expand_around_center(s_processed, i, i + 1) if len(temp) > len(longest): longest = temp return longest"},{"question":"Create a function that takes a list of integers and an integer k, and returns the maximum sum of k consecutive elements in the list. If the list length is less than k, the function should return None. Ensure your function has an optimized runtime complexity.","solution":"def max_sum_consecutive_elements(nums, k): Returns the maximum sum of k consecutive elements in the list nums. If the length of nums is less than k, return None. if len(nums) < k: return None # Initialize the current sum to the sum of the first k elements current_sum = sum(nums[:k]) max_sum = current_sum # Iterate through the list starting from the k-th element for i in range(k, len(nums)): current_sum = current_sum - nums[i - k] + nums[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Create a function that takes an input string consisting of space-separated words and checks if each word in the string is a palindrome. The function should return an array of boolean values, where each element corresponds to a word in the input string, indicating whether that word is a palindrome or not. A palindrome is defined as a word that reads the same backward as forward, and all comparisons should be case-insensitive.","solution":"def check_palindromes(sentence): Takes a space-separated string of words and returns a list of boolean values indicating whether each word is a palindrome. Parameters: sentence (str): The input string containing space-separated words. Returns: list: A list of boolean values where each value corresponds to whether a word in the input string is a palindrome. words = sentence.split() return [word.lower() == word[::-1].lower() for word in words]"},{"question":"Write a function in Python that takes an integer \`n\` as input and returns a list containing the first \`n\` Fibonacci numbers. Use a generator to yield the Fibonacci sequence one element at a time.","solution":"def fibonacci(n): Takes an integer n and returns a list of the first n Fibonacci numbers. def fib_generator(): a, b = 0, 1 while True: yield a a, b = b, a + b fib_sequence = [] gen = fib_generator() for _ in range(n): fib_sequence.append(next(gen)) return fib_sequence"},{"question":"Develop a Python script to implement and evaluate a k-means clustering algorithm on a given dataset of city coordinates to identify natural clusters of cities based on their geographical location. Ensure that the script includes the following components: 1. Data Preprocessing: Normalize the data to ensure efficient convergence of the k-means algorithm. 2. Choosing the Optimal Number of Clusters: Use the elbow method to determine and justify the optimal number of clusters. 3. k-means Implementation: Write a function to perform k-means clustering, allowing for dynamic input of the number of clusters. 4. Evaluation Metrics: Evaluate your clustering performance using silhouette scores and provide a visual representation of the clusters on a 2D plot. 5. Additional Requirement: Calculate the geographic center (centroid) of each identified cluster and plot them on the same graph. Ensure the code is well-documented and include a sample dataset for testing.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler from sklearn.metrics import silhouette_score def normalize_data(data): Normalize the data to ensure efficient convergence of the k-means algorithm. Parameters: data (numpy array): The data to be normalized. Returns: numpy array: The normalized data. scaler = StandardScaler() return scaler.fit_transform(data) def elbow_method(data, range_n_clusters): Use the elbow method to determine the optimal number of clusters. Parameters: data (numpy array): The dataset to be clustered. range_n_clusters (range): A range of the number of clusters to try. Returns: list: The sum of squared distances for each number of clusters. sse = [] for k in range_n_clusters: kmeans = KMeans(n_clusters=k) kmeans.fit(data) sse.append(kmeans.inertia_) return sse def k_means_clustering(data, n_clusters): Perform k-means clustering on the data. Parameters: data (numpy array): The dataset to be clustered. n_clusters (int): The number of clusters to form. Returns: tuple: The cluster labels and the cluster centroids. kmeans = KMeans(n_clusters=n_clusters) kmeans.fit(data) return kmeans.labels_, kmeans.cluster_centers_ def silhouette_evaluation(data, labels): Evaluate the clustering performance using silhouette scores. Parameters: data (numpy array): The clustered data. labels (numpy array): The cluster labels. Returns: float: The silhouette score. return silhouette_score(data, labels) def plot_clusters(data, labels, centroids): Plot the clusters and their centroids on a 2D plot. Parameters: data (numpy array): The dataset to be plotted. labels (numpy array): The cluster labels. centroids (numpy array): The cluster centroids. plt.scatter(data[:, 0], data[:, 1], c=labels, s=50, cmap='viridis') plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=200, alpha=0.5) plt.show() # Example dataset of city coordinates for testing purposes sample_data = np.array([ [1, 2], [2, 3], [3, 1], [8, 8], [9, 9], [10, 10], [5, 5], [6, 6], [7, 7], [12, 11] ]) # Normalize the data normalized_data = normalize_data(sample_data) # Determine optimal number of clusters using the elbow method range_n = range(1, 11) sse = elbow_method(normalized_data, range_n) # Plot the elbow method result plt.plot(range_n, sse) plt.xlabel('Number of clusters') plt.ylabel('Sum of squared distances') plt.title('Elbow Method For Optimal k') plt.show() # Perform k-means clustering for optimal number of clusters (e.g., identified as 3) n_clusters_optimal = 3 labels, centroids = k_means_clustering(normalized_data, n_clusters_optimal) # Evaluate the clustering sil_score = silhouette_evaluation(normalized_data, labels) print(f'Silhouette Score: {sil_score}') # Plot clusters and centroids plot_clusters(normalized_data, labels, centroids)"},{"question":"Implement a Python function that takes a string composed of lowercase and uppercase letters as input and returns a dictionary where the keys are individual characters and the values are the counts of each character's occurrence in the string. Ensure the function treats uppercase and lowercase characters as distinct. For example, given the input \\"aAbBcC\\", the function should return {'a': 1, 'A': 1, 'b': 1, 'B': 1, 'c': 1, 'C': 1}.","solution":"def count_characters(s): Returns a dictionary containing the counts of each character's occurrence in the string. The function treats uppercase and lowercase characters as distinct. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"We need a function that converts a string to \\"Leet Speak\\". Leet Speak (also known as \\"1337\\" or \\"leet\\") is an alternative alphabet used primarily on the internet. It uses various combinations of ASCII characters to replace certain letters in words. The goal is to take a plain English string and convert it into its Leet Speak equivalent by replacing certain characters. We will use the following replacements: \`\`\` A -> 4 E -> 3 G -> 6 I -> 1 O -> 0 S -> 5 T -> 7 \`\`\` The function should be case-insensitive, meaning that the replacements should occur regardless of whether the letters are in uppercase or lowercase. # Example Input \\"Leet Speak is Great!\\" # Example Output \\"L337 5p34k 15 6r347!\\" # Function Signature \`\`\`python def to_leet_speak(plain_text: str) -> str: # Your code here \`\`\`","solution":"def to_leet_speak(plain_text: str) -> str: Converts a plain English string to Leet Speak by replacing specific characters. Replacements: A -> 4 E -> 3 G -> 6 I -> 1 O -> 0 S -> 5 T -> 7 leet_dict = { 'A': '4', 'a': '4', 'E': '3', 'e': '3', 'G': '6', 'g': '6', 'I': '1', 'i': '1', 'O': '0', 'o': '0', 'S': '5', 's': '5', 'T': '7', 't': '7' } return ''.join(leet_dict.get(c, c) for c in plain_text)"},{"question":"# Context Background You are a software engineer working for a robotics company. Your team is tasked with developing an inventory management system for a warehouse that is operated by automated robots. The main goal is to efficiently manage and pick items using robots based on their location and the demands from orders received. Goal Create a system that optimizes the robots' routes and tasks for fetching items to fulfill orders as fast and efficiently as possible. # Search Information - The warehouse catalog includes thousands of items. - Robots have limited carrying capacity and battery life. - Orders usually consist of multiple items located at various parts of the warehouse. # Search Summary Design an efficient algorithm that assigns picking tasks to robots and optimizes their paths. System Specification Example \`\`\`python class WarehouseRobot: def __init__(self, id, location): self.id = id self.location = location self.capacity = 10 # Maximum items it can carry self.battery_life = 100 # Battery life percentage def calculate_route_to(self, item_location): pass # Return the most efficient path to item_location def pick_item(self, item_id): pass # Simulates picking an item class InventoryManagementSystem: def __init__(self, warehouse_map, robots): self.warehouse_map = warehouse_map self.robots = robots self.orders = [] def add_order(self, order): self.orders.append(order) self.assign_tasks_to_robots() def assign_tasks_to_robots(self): pass # Distribute tasks among robots and optimize paths \`\`\` Format Example --- Original Requirements Develop an inventory management system for a robotics-operated warehouse that optimizes robots' routes for picking and delivering items based on received orders. Ensure system efficiency by minimizing travel distances and avoiding overlapping tasks. Product Goals \`\`\`python [ \\"Optimize robots' routes and tasks to minimize travel distances.\\", \\"Ensure each robot operates within its capacity and battery life.\\", \\"Achieve high efficiency in fulfilling orders.\\" ] \`\`\` User Stories \`\`\`python [ \\"As a warehouse manager, I want to monitor the robots' activity to ensure efficient operations.\\", \\"As a robot operator, I want to receive clear instructions on which items to pick and their locations.\\", \\"As a system admin, I want to manage and update the warehouse layout and robot configurations.\\", \\"As a customer, I want my orders to be fulfilled quickly and accurately.\\", \\"As a warehouse employee, I want to easily input and manage orders in the system.\\" ] \`\`\` Competitive Analysis \`\`\`python [ \\"X Robotics Inventory System: Efficient route optimization but lacks user-friendly UI.\\", \\"Y Automated Systems: Good UI but slower in executing complex orders.\\", \\"Z Warehouse Solutions: Integrates well with existing systems but has higher costs.\\", \\"A Real-time Robotics: Fast order processing but limited functionality for robot configuration.\\", \\"B Warehouse Manager Pro: Comprehensive features but less efficient in route optimization.\\" ] \`\`\` Competitive Quadrant Chart \`\`\`mermaid quadrantChart title Reach and engagement of warehouse systems x-axis Low Efficiency --> High Efficiency y-axis Low Usability --> High Usability quadrant-1 Expand functionality quadrant-2 Maintain efficiency quadrant-3 Improve usability quadrant-4 Focus on specific needs \\"X Robotics Inventory System\\": [0.75, 0.4] \\"Y Automated Systems\\": [0.6, 0.8] \\"Z Warehouse Solutions\\": [0.7, 0.6] \\"A Real-time Robotics\\": [0.9, 0.5] \\"B Warehouse Manager Pro\\": [0.5, 0.9] \\"Our Inventory System\\": [0.7, 0.75] \`\`\` Requirement Analysis The product should be an efficient, easy-to-use inventory management system that minimizes robots' travel distances while ensuring they operate within capacity and battery constraints. Requirement Pool \`\`\`python [ (\\"Robot route optimization\\", \\"P0\\"), (\\"Order prioritization and assignment\\", \\"P0\\"), (\\"Battery life monitoring\\", \\"P1\\"), (\\"Warehouse map management\\", \\"P1\\"), (\\"User-friendly interface\\", \\"P2\\") ] \`\`\` UI Design draft The system should include a dashboard displaying real-time robot activities and order statuses. It should have easy-to-use forms for entering orders and updating robot configurations. The layout should be clean and allow quick access to all major functions. Anything UNCLEAR The requirement on how to handle simultaneous orders and priorities is unclear. Ensure efficient handling of such scenarios using priority queues or similar techniques. --- ----- Role: You are a professional software engineer; the goal is to design a reliable, efficient, and easy-to-use inventory management system operated by robots. Requirements: Based on the context provided, fill in the following missing information, ensuring each section is presented in Python code triple-quote format and separated by ' <SECTION_NAME>'. If the requirements are unclear, ensure minimum viability and avoid excessive design. ATTENTION: Use '' to SPLIT SECTIONS, not '#'. Ensure ' <SECTION_NAME>' is written before the code and triple quotes. Output the answer carefully referencing the \\"Format example\\".","solution":"import heapq from collections import deque class WarehouseRobot: def __init__(self, id, location): self.id = id self.location = location self.capacity = 10 # Maximum items it can carry self.battery_life = 100 # Battery life percentage self.current_load = 0 # Number of items currently carrying def calculate_route_to(self, item_location): # Placeholder for an actual route calculation algorithm. # For simplicity we return distance (Manhattan Distance here). return abs(self.location[0] - item_location[0]) + abs(self.location[1] - item_location[1]) def pick_item(self, item_id, item_location): if self.current_load < self.capacity and self.battery_life > 0: route_distance = self.calculate_route_to(item_location) # Simulating picking item self.location = item_location self.current_load += 1 self.battery_life -= route_distance * 0.1 # Assuming each distance unit reduces battery life by 0.1% return True return False class InventoryManagementSystem: def __init__(self, warehouse_map, robots): self.warehouse_map = warehouse_map self.robots = robots self.orders = deque() self.item_locations = {} # Dictionary to store item_id and location mapping def add_order(self, order): self.orders.append(order) self.assign_tasks_to_robots() def assign_tasks_to_robots(self): while self.orders: order = self.orders.popleft() for item_id in order: if item_id in self.item_locations: item_location = self.item_locations[item_id] # Use a priority queue (min-heap) to assign closest available robot priority_queue = [] for robot in self.robots: if robot.current_load < robot.capacity and robot.battery_life > 0: distance = robot.calculate_route_to(item_location) heapq.heappush(priority_queue, (distance, robot)) if priority_queue: # Get closest available robot _, selected_robot = heapq.heappop(priority_queue) selected_robot.pick_item(item_id, item_location)"},{"question":"Create a function \`find_second_largest(numbers)\` that takes a list of integers and returns the second largest number in the list. You should handle the case where the list has fewer than two distinct numbers by returning \`None\`. Below is an incomplete version of the function that you need to fix: \`\`\`python def find_second_largest(numbers): if len(numbers) < 2: return None first_largest = second_largest = float('-inf') for num in numbers: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num return second_largest \`\`\`","solution":"def find_second_largest(numbers): Returns the second largest number in the list if present, else returns None. if len(set(numbers)) < 2: return None first_largest = second_largest = float('-inf') for num in numbers: if num > first_largest: second_largest = first_largest first_largest = num elif first_largest > num > second_largest: second_largest = num return second_largest if second_largest != float('-inf') else None"},{"question":"Write a function that takes two strings as input and returns a boolean indicating whether the first string is an anagram of the second string. Ignore case and spaces, and assume the strings contain only alphabetic characters.","solution":"def is_anagram(str1, str2): Returns True if str1 is an anagram of str2, False otherwise. Ignores case and spaces. clean_str1 = ''.join(str1.lower().split()) clean_str2 = ''.join(str2.lower().split()) return sorted(clean_str1) == sorted(clean_str2)"},{"question":"Devise an algorithm that processes a JSON dataset of weather information obtained from a public weather API. The algorithm should determine the average temperature for the next 7 days and identify the day with the highest predicted rainfall. Hyperlink resource = \\"https://api.openweathermap.org/data/2.5/forecast\\". Ensure your solution handles potential data anomalies such as missing or corrupted entries.","solution":"import requests import json def process_weather_data(api_key, city_id): Processes weather information to determine the average temperature for the next 7 days and identifies the day with the highest predicted rainfall. Parameters: api_key (str): API key for the weather API city_id (str): City ID to get the weather information for Returns: tuple: (average_temperature, day_with_highest_rainfall) # Get weather data response = requests.get(f\\"https://api.openweathermap.org/data/2.5/forecast?id={city_id}&appid={api_key}&units=metric\\") # Handle potential request errors if response.status_code != 200: raise Exception(\\"Failed to retrieve data from the weather API\\") weather_data = response.json() # Initialize variables total_temperature = 0 total_days = 0 highest_rainfall = 0 day_with_highest_rainfall = None # Process weather data for entry in weather_data.get('list', []): try: date = entry['dt_txt'][:10] # Extract date (YYYY-MM-DD) temperature = entry['main']['temp'] rainfall = entry.get('rain', {}).get('3h', 0) if rainfall > highest_rainfall: highest_rainfall = rainfall day_with_highest_rainfall = date total_temperature += temperature total_days += 1 except (KeyError, TypeError, ValueError) as e: # Handle missing or corrupted data entries gracefully print(f\\"Data anomaly encountered: {e}, skipping entry\\") # Determine average temperature average_temperature = total_temperature / total_days if total_days > 0 else 0 return average_temperature, day_with_highest_rainfall"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Write a function \`filter_primes(numbers: List[int]) -> List[int]\` that accomplishes this. # Examples \`\`\` filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7] filter_primes([15, 17, 19, 23, 24, 28, 30, 31]) -> [17, 19, 23, 31] filter_primes([11, 13, 14, 15, 16, 17, 18]) -> [11, 13, 17] \`\`\` # Constraints - The input list, \`numbers\`, will always contain at least one integer. - The input list can contain both positive and negative integers, but only positive integers can be prime. - Your implementation should be efficient, aiming for a time complexity better than O(n^2), where n is the length of the input list.","solution":"from typing import List def is_prime(n: int) -> bool: Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers: List[int]) -> List[int]: Returns a list of prime numbers from the given list of integers. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function to merge two sorted arrays into one sorted array. The function should handle large datasets efficiently and maintain the time complexity of O(n + m), where n and m are the lengths of the two arrays. Additionally, the function should preserve duplicate elements and work under the assumption that the input arrays can contain negative numbers, zero, and positive numbers. Ensure to include both an efficient and readable solution.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Assumes both input arrays are sorted. Parameters: arr1 (list): First sorted array. arr2 (list): Second sorted array. Returns: list: A new sorted array containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 n, m = len(arr1), len(arr2) while i < n and j < m: if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < n: merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < m: merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a Python program to implement a circular queue using a fixed-size list. The program should handle the following operations efficiently: - Enqueue: Add an element to the end of the queue. - Dequeue: Remove an element from the front of the queue. - Front: Get the front item from the queue. - Rear: Get the last item from the queue. - isFull: Check if the queue is full. - isEmpty: Check if the queue is empty. Your implementation should ensure that all operations are performed in constant time. Example: cq = CircularQueue(5) # Initialize a circular queue with size 5 cq.enqueue(10) cq.enqueue(20) cq.enqueue(30) cq.enqueue(40) print(cq.dequeue()) # Output: 10 print(cq.Front()) # Output: 20 print(cq.Rear()) # Output: 40 cq.enqueue(50) cq.enqueue(60) print(cq.isFull()) # Output: True","solution":"class CircularQueue: def __init__(self, k): Initialize the queue with a given size k. self.size = k self.queue = [None] * k self.front = self.rear = -1 def enqueue(self, value): Add an element to the end of the queue. if self.isFull(): return False if self.front == -1: self.front = 0 self.rear = (self.rear + 1) % self.size self.queue[self.rear] = value return True def dequeue(self): Remove an element from the front of the queue. if self.isEmpty(): return False value = self.queue[self.front] if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return value def Front(self): Get the front item from the queue. if self.isEmpty(): return -1 return self.queue[self.front] def Rear(self): Get the last item from the queue. if self.isEmpty(): return -1 return self.queue[self.rear] def isFull(self): Check if the queue is full. return (self.rear + 1) % self.size == self.front def isEmpty(self): Check if the queue is empty. return self.front == -1"},{"question":"Write a function that takes a list of integers and returns a new list that contains only the non-negative integers from the original list doubled, while maintaining their original order. If the list is empty or contains no non-negative integers, return an empty list. Example: \`\`\`python def double_non_negatives(lst): result = [] for num in lst: if num >= 0: result.append(num * 2) return result # Sample Input and Results print(double_non_negatives([1, 2, -3, 4, -5])) # Output: [2, 4, 8] print(double_non_negatives([-1, -2, -3])) # Output: [] print(double_non_negatives([])) # Output: [] print(double_non_negatives([5, -10, 0])) # Output: [10, 0] print(double_non_negatives([-7, 7, -8, 8])) # Output: [14, 16] \`\`\`","solution":"def double_non_negatives(lst): Takes a list of integers and returns a new list that contains only the non-negative integers from the original list doubled, while maintaining their original order. result = [] for num in lst: if num >= 0: result.append(num * 2) return result"},{"question":"Implement a function to compute the Jaccard similarity between two sets of strings. The Jaccard similarity is a measure of how similar two sets are, defined as the size of the intersection divided by the size of the union of the sets. Your function should take two sets as input and return the Jaccard similarity score as a float. Example: \`\`\`python set1 = {\\"apple\\", \\"banana\\", \\"cherry\\"} set2 = {\\"banana\\", \\"cherry\\", \\"date\\"} jaccard_similarity(set1, set2) # Should return 0.5 \`\`\`","solution":"def jaccard_similarity(set1, set2): Calculate the Jaccard similarity between two sets of strings. Parameters: set1: A set of strings. set2: A set of strings. Returns: A float representing the Jaccard similarity between the two sets. intersection = len(set1.intersection(set2)) union = len(set1.union(set2)) if union == 0: return 0.0 # Cannot divide by zero, so similarity is 0 if both sets are empty return intersection / union"},{"question":"Devise an algorithm to rotate a given NxN matrix by 90 degrees in a clockwise direction, in-place. The matrix will be provided as a two-dimensional array, and you are required to manipulate the array directly to achieve the rotation. Provide a function definition for your solution, and ensure the algorithm operates within O(N^2) time complexity.","solution":"def rotate_matrix(matrix): Rotates an NxN matrix by 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"Design a cutting-edge neural network library that streamlines the creation, training, and deployment of deep learning models. The library should support various layer types, activation functions, and optimization algorithms, and allow users to easily integrate custom components for specialized tasks, thereby enhancing the flexibility and efficiency of the machine learning workflow.","solution":"import numpy as np class DenseLayer: def __init__(self, input_size, output_size, activation): self.weights = np.random.randn(input_size, output_size) * 0.01 self.biases = np.zeros((1, output_size)) self.activation = activation def forward(self, inputs): z = np.dot(inputs, self.weights) + self.biases return self.activation(z) class ActivationReLU: def __call__(self, x): return np.maximum(0, x) class ActivationSoftmax: def __call__(self, x): exp_values = np.exp(x - np.max(x, axis=1, keepdims=True)) probabilities = exp_values / np.sum(exp_values, axis=1, keepdims=True) return probabilities class LossCrossEntropy: def __call__(self, y_pred, y_true): samples = len(y_pred) y_pred_clipped = np.clip(y_pred, 1e-7, 1 - 1e-7) correct_confidences = y_pred_clipped[range(samples), y_true] negative_log_likelihoods = -np.log(correct_confidences) return np.mean(negative_log_likelihoods) class OptimizerSGD: def __init__(self, learning_rate=1.0): self.learning_rate = learning_rate def update_parameters(self, layer): layer.weights -= self.learning_rate * layer.dweights layer.biases -= self.learning_rate * layer.dbiases class NeuralNetwork: def __init__(self): self.layers = [] def add_layer(self, layer): self.layers.append(layer) def forward(self, X): for layer in self.layers: X = layer.forward(X) return X def train(self, X_train, y_train, epochs=1, learning_rate=1.0): optimizer = OptimizerSGD(learning_rate) for epoch in range(epochs): output = self.forward(X_train) loss_function = LossCrossEntropy() loss = loss_function(output, y_train) print(f'Epoch {epoch+1}, Loss: {loss}') # (Backward pass and weight updates are simplified) # This simplified implementation does not support backward pass and gradient updates. # Sample usage if __name__ == \\"__main__\\": # Create a neural network nn = NeuralNetwork() nn.add_layer(DenseLayer(input_size=2, output_size=3, activation=ActivationReLU())) nn.add_layer(DenseLayer(input_size=3, output_size=3, activation=ActivationSoftmax())) # Dummy data X_train = np.array([[1, 2], [3, 4], [5, 6]]) y_train = np.array([0, 1, 2]) # Train the network nn.train(X_train, y_train, epochs=5)"},{"question":"Implement a function \`flip_matrix_diagonally(matrix)\` that takes a 2D square matrix (a list of lists) and flips the matrix across its main diagonal. The main diagonal is the set of elements that run from the top-left to the bottom-right of the matrix. The function should modify the matrix in place and not return anything. For example, given the following input matrix: \`\`\` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] \`\`\` After calling \`flip_matrix_diagonally(matrix)\`, the matrix should be transformed to: \`\`\` [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] \`\`\` # Constraints - The matrix will always be an \`n x n\` (square) matrix with \`1 <= n <= 100\`. - Each element in the matrix will be an integer. Note: You are expected to change the matrix in place, meaning you should directly modify the input matrix without using extra space for another matrix.","solution":"def flip_matrix_diagonally(matrix): Flips the matrix across its main diagonal in place. :param matrix: List of lists representing the square matrix n = len(matrix) for i in range(n): for j in range(i + 1, n): # Swap elements across the main diagonal matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"},{"question":"Design a function that analyzes a list of integers and returns a dictionary containing the mean, median, mode(s), and the standard deviation of the list. If the list is empty, return an empty dictionary. Ensure to handle cases with multiple modes appropriately. Keep in mind the efficiency of your solution, and write clear, concise code. Include appropriate error handling for invalid inputs. Function signature: \`def analyze_list(numbers: List[int]) -> Dict[str, Union[float, List[float]]]:\` You may use built-in functions from the Python \`statistics\` module to assist in your solution.","solution":"from typing import List, Dict, Union from statistics import mean, median, multimode, stdev def analyze_list(numbers: List[int]) -> Dict[str, Union[float, List[float]]]: Analyzes a list of integers and returns a dictionary containing the mean, median, mode(s), and the standard deviation. If the list is empty, returns an empty dictionary. if not numbers: return {} analysis = { 'mean': mean(numbers), 'median': median(numbers), 'mode': multimode(numbers), 'std_dev': stdev(numbers) if len(numbers) > 1 else 0.0 } return analysis"},{"question":"You are given a piece of buggy code that attempts to reverse a singly linked list. Your task is to identify and fix the issues in the given implementation. Additionally, explain how reversing a singly linked list works and what your corrections achieve. \`\`\`python # Erroneous Singly Linked List Reversal class Node: def __init__(self, data): self.data = data self.next = None def reverse_list(head): prev = None current = head while current: next = current.next current.next = prev prev = current current = next return current # Creating a linked list: 1 -> 2 -> 3 -> None head = Node(1) head.next = Node(2) head.next.next = Node(3) # Attempt to reverse the linked list reversed_head = reverse_list(head) # Print reversed linked list while reversed_head: print(reversed_head.data, end=\\" \\") reversed_head = reversed_head.next \`\`\` The code should reverse the given singly linked list and return the new head. However, it incorrectly assumes the final head of the reversed list. Identify the errors and correct them. Provide an explanation of how the reversal algorithm works and detail the changes you made to fix the code.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverse_list(head): Reverses a singly linked list. :param head: The head node of the singly linked list. :return: The new head node of the reversed singly linked list. prev = None current = head while current: next_node = current.next # Correct variable name to avoid conflict and clarifying purpose. current.next = prev prev = current current = next_node return prev # The correct new head of the reversed list is \`prev\`, not \`current\`. # Creating a linked list: 1 -> 2 -> 3 -> None head = Node(1) head.next = Node(2) head.next.next = Node(3) # Attempt to reverse the linked list reversed_head = reverse_list(head) # Function to print linked list def print_list(node): while node: print(node.data, end=\\" -> \\" if node.next else \\"n\\") node = node.next # Print reversed linked list, output should be: 3 -> 2 -> 1 -> None print_list(reversed_head)"},{"question":"You are given a list of dictionaries where each dictionary contains information about a person's name and age. The program should return the names of people who are above a certain age limit. Currently, the program is either returning incorrect values or encountering errors. Your task is to identify and correct the errors in the code so that it successfully returns a list of names of people who are above the given age limit. Additionally, add exception handling to deal with potential issues such as missing 'age' keys, non-integer age values, or missing values for 'name' keys. \`\`\`python people = [ {\\"name\\": \\"Alice\\", \\"age\\": 25}, {\\"name\\": \\"Bob\\", \\"age\\": 20}, {\\"name\\": \\"Charlie\\", \\"age\\": 30}, ] def get_people_above_age(people, age_limit): result = [] for person in people: if person['age'] > age_limit: result.append(person['name']) return result # Example usage: age_limit = 22 print(get_people_above_age(people, age_limit)) \`\`\` Expected output: \`\`\` ['Alice', 'Charlie'] \`\`\`","solution":"def get_people_above_age(people, age_limit): Returns a list of names of people who are above the given age_limit. result = [] for person in people: try: name = person.get('name') age = person.get('age') if name is None: raise ValueError(\\"Missing 'name' key for a person.\\") if age is None: raise ValueError(f\\"Missing 'age' key for person {name}.\\") if not isinstance(age, int): raise ValueError(f\\"Non-integer 'age' value for person {name}.\\") if age > age_limit: result.append(name) except ValueError as ve: print(f\\"Error: {ve}\\") return result"},{"question":"Construct a Python function \`find_smallest_missing_positive\` that takes a list of integers as input and returns the smallest positive integer that is missing from the list. The function should have a time complexity of O(n) and should avoid using extra space beyond a few variables. To increase the challenge, do not use any external libraries or additional data structures like sets or dictionaries. Additionally, you are given a piece of erroneous code as a reference for misdirection. Erroneous Code: \`\`\`python def find_smallest_missing_positive(nums): nums.sort() missing = 1 for num in nums: if num == missing: missing += 1 return missing print(find_smallest_missing_positive([3, 4, -1, 1])) # Expected output: 2 print(find_smallest_missing_positive([1, 2, 0])) # Expected output: 3 print(find_smallest_missing_positive([-1, -2, -3])) # Expected output: 1 \`\`\` Example Input and Output: \`\`\`python print(find_smallest_missing_positive([3, 4, -1, 1])) # Expected output: 2 print(find_smallest_missing_positive([1, 2, 0])) # Expected output: 3 print(find_smallest_missing_positive([-1, -2, -3])) # Expected output: 1 \`\`\`","solution":"def find_smallest_missing_positive(nums): n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[i] != nums[nums[i] - 1]: correct_idx = nums[i] - 1 nums[i], nums[correct_idx] = nums[correct_idx], nums[i] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Implement a File System with Limited Storage and Path Tracking Description: Design and implement a simplified file system that supports the following functionalities: 1. \`createPath(string path, int value)\` Creates a new path with the given value in the file system. The path will always start with '/' and consist of lowercase English letters, such as \\"/a\\", \\"/a/b\\", etc. The value will be an integer. If the path already exists, return false. If the parent path does not exist, return false. Otherwise, return true. 2. \`getPathValue(string path)\` Returns the value associated with the given path. If the path does not exist, return -1. 3. \`setPathValue(string path, int value)\` Sets the value for an existing path in the file system. If the path does not exist, return false. Otherwise, return true. 4. \`listPaths()\` Returns a list of all paths currently created in the file system in lexicographical order. Example 1: \`\`\` createPath(\\"/a\\", 1): true createPath(\\"/a/b\\", 2): true createPath(\\"/a/b/c\\", 3): true createPath(\\"/a/b\\", 4): false (\\"/a/b\\" already exists) getPathValue(\\"/a/b\\"): 2 getPathValue(\\"/a/b/c\\"): 3 getPathValue(\\"/a/d\\"): -1 setPathValue(\\"/a/b\\", 10): true getPathValue(\\"/a/b\\"): 10 setPathValue(\\"/a/e\\", 5): false (\\"/a/e\\" does not exist) listPaths(): [\\"/a\\", \\"/a/b\\", \\"/a/b/c\\"] \`\`\` Assumptions and Notes: - All path operations are performed according to lexicographical order by default. - Assume the paths contain only lowercase English letters and consist of a total length of at most \`3000\`. - The number of operations for \`createPath\`, \`getPathValue\`, \`setPathValue\`, and \`listPaths\` combined do not exceed \`10^4\` in a single test case. - The file system should handle scenarios where a path may attempt to create with non-existing parent directories. - Invalid operations should be handled gracefully and return appropriate responses. Method Constraints: - \`createPath\` should return a boolean indicating the success or failure of the creation. - \`getPathValue\` should return an integer representing the value or -1 if the path does not exist. - \`setPathValue\` should return a boolean indicating the success or failure of setting the value. - \`listPaths\` should return a sorted list of currently created paths.","solution":"class FileSystem: def __init__(self): self.paths = {} # Initialize an empty dictionary to store path-value pairs def createPath(self, path, value): if not path or path == \\"/\\" or path in self.paths: return False parent = path[:path.rfind('/')] if len(parent) > 1 and parent not in self.paths: return False self.paths[path] = value return True def getPathValue(self, path): return self.paths.get(path, -1) def setPathValue(self, path, value): if path not in self.paths: return False self.paths[path] = value return True def listPaths(self): return sorted(self.paths.keys())"},{"question":"Write a function that, given an array of integers, finds the contiguous subarray (containing at least one number) which has the maximum sum and returns its sum. Your implementation should aim to achieve O(n) time complexity. Provide detailed comments within your code to illustrate the thought process and the steps of the algorithm.","solution":"def max_subarray_sum(nums): Finds the contiguous subarray which has the maximum sum and returns its sum. :param nums: List of integers :return: Integer, the maximum sum of a contiguous subarray if not nums: # If the list is empty, return 0 return 0 # Initialize the current sum and maximum sum to the first element current_sum = max_sum = nums[0] for num in nums[1:]: # Update the current sum to be the maximum of either the current number itself or the current sum plus the current number current_sum = max(num, current_sum + num) # Update the maximum sum encountered so far max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task: Create a Data Analysis Pipeline Context You have been hired as a data scientist for a technology startup, and your first task is to build a data analysis pipeline for user activity data. The startup aims to understand user behavior patterns and improve user engagement through data-driven decisions. Use the following example data and guidelines to create the analysis pipeline. Example Data \`\`\`python user_activity_data = [ {'user_id': 1, 'activity': 'login', 'timestamp': '2023-01-01 08:00:00'}, {'user_id': 2, 'activity': 'purchase', 'timestamp': '2023-01-01 09:00:00'}, {'user_id': 1, 'activity': 'logout', 'timestamp': '2023-01-01 10:00:00'}, {'user_id': 3, 'activity': 'login', 'timestamp': '2023-01-01 11:00:00'}, {'user_id': 2, 'activity': 'logout', 'timestamp': '2023-01-01 12:00:00'}, # more records... ] \`\`\` Guidelines Design a lightweight data processing pipeline that can parse the example data, clean it, and extract useful insights. The pipeline should be constructed using Python, and should include the following steps: # 1. Data Loading - Load the data into a suitable data structure. # 2. Data Cleaning - Handle any missing or corrupted data entries. - Normalize the timestamps to a common format. # 3. Data Transformation - Convert the activities into numerical codes (e.g., login: 1, purchase: 2, logout: 3). # 4. Data Aggregation - Calculate the number of unique users. - Calculate the number of activities per user. # 5. Data Visualization - Plot a simple bar chart showing the distribution of activities. - Plot a time series graph showing user activity over time. Question \`\`\`python # Data Loading Code: import pandas as pd user_activity_data = [ {'user_id': 1, 'activity': 'login', 'timestamp': '2023-01-01 08:00:00'}, {'user_id': 2, 'activity': 'purchase', 'timestamp': '2023-01-01 09:00:00'}, {'user_id': 1, 'activity': 'logout', 'timestamp': '2023-01-01 10:00:00'}, {'user_id': 3, 'activity': 'login', 'timestamp': '2023-01-01 11:00:00'}, {'user_id': 2, 'activity': 'logout', 'timestamp': '2023-01-01 12:00:00'}, ] df = pd.DataFrame(user_activity_data) # Data Cleaning Clean missing or corrupted data and normalize timestamp Code: df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce') df.dropna(subset=['timestamp'], inplace=True) # Data Transformation Convert activities to numerical codes Code: activity_map = {'login': 1, 'purchase': 2, 'logout': 3} df['activity_code'] = df['activity'].map(activity_map) # Data Aggregation Calculate the number of unique users and activities per user Code: unique_users = df['user_id'].nunique() activities_per_user = df.groupby('user_id').size() # Data Visualization Plot bar chart and time series graph Code: import matplotlib.pyplot as plt # Bar chart for activity distribution df['activity'].value_counts().plot(kind='bar') plt.title('Distribution of Activities') plt.xlabel('Activity') plt.ylabel('Count') plt.show() # Time series graph of user activity over time df.set_index('timestamp').groupby('activity_code')['activity_code'].resample('H').count().unstack(0).plot() plt.title('User Activity Over Time') plt.xlabel('Time') plt.ylabel('Activity Count') plt.legend(['Login', 'Purchase', 'Logout'], title='Activity') plt.show() # Requirements Analysis The pipeline should be capable of loading raw activity data, cleaning the data, transforming activities into numerical codes, aggregating insights such as unique user count and activities per user, and visualizing the results via bar charts and time series graphs. The solution should be efficient and capable of processing data of similar structure and larger size. \`\`\`","solution":"import pandas as pd import matplotlib.pyplot as plt def load_data(data): df = pd.DataFrame(data) return df def clean_data(df): df['timestamp'] = pd.to_datetime(df['timestamp'], errors='coerce') df.dropna(subset=['timestamp'], inplace=True) return df def transform_data(df): activity_map = {'login': 1, 'purchase': 2, 'logout': 3} df['activity_code'] = df['activity'].map(activity_map) return df def aggregate_data(df): unique_users = df['user_id'].nunique() activities_per_user = df.groupby('user_id').size() return unique_users, activities_per_user def visualize_data(df): # Bar chart for activity distribution df['activity'].value_counts().plot(kind='bar') plt.title('Distribution of Activities') plt.xlabel('Activity') plt.ylabel('Count') plt.show() # Time series graph of user activity over time df.set_index('timestamp').groupby('activity_code')['activity_code'].resample('H').count().unstack(0).plot() plt.title('User Activity Over Time') plt.xlabel('Time') plt.ylabel('Activity Count') plt.legend(['Login', 'Purchase', 'Logout'], title='Activity') plt.show() def data_analysis_pipeline(data): df = load_data(data) df = clean_data(df) df = transform_data(df) unique_users, activities_per_user = aggregate_data(df) visualize_data(df) return df, unique_users, activities_per_user"},{"question":"Problem : Destination City Description: You are given the array \`journeys\`, where \`journeys[i] = [cityAi, cityBi]\` signifies there exists a direct journey from \`cityAi\` to \`cityBi\`. Return the destination city, which is the city that does not have any outgoing journey to another city. It is guaranteed that the graph of journeys forms a tree without any loop, and hence, there will be exactly one destination city. Example 1: Input: journeys = [[\\"Paris\\", \\"Berlin\\"], [\\"Berlin\\", \\"Moscow\\"], [\\"Moscow\\", \\"Tokyo\\"]] Output: \\"Tokyo\\" Explanation: Starting at \\"Paris\\" city you will reach \\"Tokyo\\" city. The journeys are: \\"Paris\\" -> \\"Berlin\\" -> \\"Moscow\\" -> \\"Tokyo\\". Clearly the destination city is \\"Tokyo\\". Example 2: Input: journeys = [[\\"X\\", \\"Y\\"], [\\"Y\\", \\"Z\\"], [\\"A\\", \\"X\\"], [\\"B\\", \\"A\\"]] Output: \\"Z\\" Explanation: All possible trips are: \\"B\\" -> \\"A\\" -> \\"X\\" -> \\"Y\\" -> \\"Z\\". \\"A\\" -> \\"X\\" -> \\"Y\\" -> \\"Z\\". \\"X\\" -> \\"Y\\" -> \\"Z\\". \\"Y\\" -> \\"Z\\". Clearly, the destination city is \\"Z\\". Example 3: Input: journeys = [[\\"A\\", \\"B\\"], [\\"B\\", \\"C\\"], [\\"C\\", \\"D\\"], [\\"D\\", \\"E\\"], [\\"F\\", \\"G\\"]] Output: \\"E\\" Constraints: \`1 <= journeys.length <= 100\` \`journeys[i].length == 2\` \`1 <= cityAi.length, cityBi.length <= 10\` \`cityAi != cityBi\` All strings consist of lowercase and uppercase English letters and the space character.","solution":"def destination_city(journeys): Returns the destination city with no outgoing journeys. :param journeys: List[List[str]], each sublist represents a direct journey from cityAi to cityBi :return: str, the city with no outgoing journey cities_with_departure = set() all_cities = set() for journey in journeys: cityA, cityB = journey cities_with_departure.add(cityA) all_cities.add(cityA) all_cities.add(cityB) # The destination city will be in all_cities but not in cities_with_departure for city in all_cities: if city not in cities_with_departure: return city"},{"question":"Create a function in Python that takes two lists of integers as input and returns a new list that contains only the elements that are present in both input lists (i.e., the intersection), but without any duplicates. The function should be case insensitive and should handle exceptions gracefully for invalid input types. Implement the function such that it has a time complexity of O(n). Example: list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6, 7] Output: [3, 4, 5]","solution":"def intersection(list1, list2): Returns a list containing only the elements that are present in both input lists, without duplicates. try: set1 = set(list1) set2 = set(list2) intersection_set = set1.intersection(set2) return list(intersection_set) except TypeError: raise ValueError(\\"Both inputs must be lists of integers\\")"},{"question":"You are given a list of tuples where each tuple contains a user's name and their age. Write a function \`sort_users(users_list)\` that takes this list and sorts the users first by the descending order of age, and in case of a tie, alphabetically by name in ascending order. If the input list contains any invalid entries (e.g., not a tuple, tuple with incorrect types), the function should raise a \`ValueError\`. Additionally, implement error handling that provides a comprehensive error message indicating the invalid entries causing the failure. Example: \`\`\`python users_list = [(\\"Alice\\", 30), (\\"Bob\\", 25), (\\"Charlie\\", 30), (\\"David\\", \\"twenty\\")] try: sorted_users = sort_users(users_list) print(sorted_users) except ValueError as e: print(e) \`\`\` Expected output: \`\`\` [('Alice', 30), ('Charlie', 30), ('Bob', 25)] \`\`\` or, in case of an invalid entry: \`\`\` Invalid entry found: ('David', 'twenty'). Each entry should be a tuple of (name, age) where name is a string and age is an integer. \`\`\`","solution":"def sort_users(users_list): This function sorts a list of users by descending age, and by name alphabetically in case of a tie. It raises a ValueError if any entry is invalid. # Validate entries for entry in users_list: if not (isinstance(entry, tuple) and len(entry) == 2 and isinstance(entry[0], str) and isinstance(entry[1], int)): raise ValueError(f\\"Invalid entry found: {entry}. Each entry should be a tuple of (name, age) where name is a string and age is an integer.\\") # Sort users first by age in descending order, then by name in ascending order sorted_list = sorted(users_list, key=lambda x: (-x[1], x[0])) return sorted_list"},{"question":"Create a function that takes a string as input and returns a new string where each character is replaced by the next character in the ASCII table. If a character is 'z' or 'Z', it should wrap around and become 'a' or 'A', respectively. Additionally, the function should keep all non-alphabetic characters unchanged in their position, and count the number of vowels in the resulting string, returning this count along with the modified string.","solution":"def shift_string(input_str): Shifts each alphabetical character to the next character in the ASCII table, wraps 'z' to 'a' and 'Z' to 'A', and counts the number of vowels in the modified string. Non-alphabetic characters remain unchanged. Args: input_str (str): The input string Returns: tuple: A tuple containing the modified string and the number of vowels in it modified_str = [] vowels = 'aeiouAEIOU' vowels_count = 0 for char in input_str: if 'a' <= char <= 'y' or 'A' <= char <= 'Y': new_char = chr(ord(char) + 1) elif char == 'z': new_char = 'a' elif char == 'Z': new_char = 'A' else: new_char = char if new_char in vowels: vowels_count += 1 modified_str.append(new_char) return ''.join(modified_str), vowels_count"},{"question":"Design a function that takes a 2D matrix and rotates it 90 degrees clockwise. The function should do this in place, modifying the input matrix directly. The matrix will have NxN dimensions (square matrix). Provide a clear step-by-step algorithm as well as a working implementation in Python. Ensure to handle both even and odd dimensions and consider the efficiency of your approach in terms of both time and space complexity. Test your function on the following sample input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]","solution":"def rotate_90_clockwise(matrix): Rotate the given NxN matrix 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() # Sample input matrix matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_90_clockwise(matrix) print(matrix) # Output should be [[7, 4, 1], [8, 5, 2], [9, 6, 3]]"},{"question":"Write a function that takes a string containing a mathematical expression with + and - operators only (e.g., \\"3+5-2+8\\") and returns the result of the expression as an integer. The function should correctly handle any whitespace in the input. If the input expression is invalid or contains any non-numeric characters (excluding the operators and whitespace), the function should return an error message.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression with + and - operators only. :param expression: str : The expression to be evaluated (e.g., \\"3 + 5 - 2 + 8\\") :return: int : The result of the expression, or an error message if the expression is invalid try: # Remove whitespace from the expression expression = expression.replace(\\" \\", \\"\\") # Validate the cleaned expression if not all(char.isdigit() or char in '+-' for char in expression): return \\"Error: Invalid characters in the expression\\" # Evaluate the expression result = eval(expression) return result if isinstance(result, int) else \\"Error: Evaluation did not return an integer\\" except: return \\"Error: Invalid expression\\""},{"question":"Explain the concept of recursive algorithms by providing a detailed example. Include a problem statement, a step-by-step breakdown of the solution using recursion, and a discussion on the base case and recursive case. Additionally, compare the recursive solution with an iterative approach, highlighting the trade-offs in terms of time complexity and space complexity.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n == 0: return 1 else: return n * factorial(n - 1) # Iterative approach: def factorial_iterative(n): Returns the factorial of a non-negative integer n using an iterative approach. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function that takes a string representing a mathematical expression and determines if the parentheses, brackets, and braces are correctly balanced and nested. For instance, the expression \\"[(2+3)*5]\\" is valid, but the expression \\"[(2+3]*5)\\" is not.","solution":"def is_balanced(expression): Returns True if the parentheses, brackets, and braces in the expression are correctly balanced and nested, otherwise returns False. stack = [] pairs = {')': '(', ']': '[', '}': '{'} for char in expression: if char in pairs.values(): stack.append(char) elif char in pairs.keys(): if not stack or pairs[char] != stack.pop(): return False return not stack"},{"question":"Write a function that accepts a string and a character as arguments. The function should return a list of indices where the character appears in the string. If the character does not exist in the string, the function should return an empty list.","solution":"def find_char_indices(s, char): Returns a list of indices where the character appears in the string. If the character does not exist in the string, returns an empty list. :param s: str - The string to search within. :param char: str - The character to search for. :return: list of int - The list of indices where the character appears. return [i for i, c in enumerate(s) if c == char]"},{"question":"Write a function \`longest_subarray_with_sum_k(arr, k)\` that, given a list of integers \`arr\` and an integer \`k\`, returns the length of the longest subarray that sums to \`k\`. Ensure your solution handles all possible edge cases such as empty arrays, arrays with no valid subarrays, and large input sizes efficiently. Example: \`\`\`python longest_subarray_with_sum_k([1, -1, 5, -2, 3], 3) # should return 4 longest_subarray_with_sum_k([1, 2, 3], 3) # should return 2 \`\`\`","solution":"def longest_subarray_with_sum_k(arr, k): Returns the length of the longest subarray with sum equal to k. # Dictionary to store the cumulative sum up to all indices cum_sum_map = {} max_length = 0 cum_sum = 0 for i in range(len(arr)): cum_sum += arr[i] if cum_sum == k: max_length = i + 1 if cum_sum - k in cum_sum_map: max_length = max(max_length, i - cum_sum_map[cum_sum - k]) if cum_sum not in cum_sum_map: cum_sum_map[cum_sum] = i return max_length"},{"question":"Write a function in Python that takes an unsorted list of integers and returns a new list containing only the prime numbers from the original list, but sorted in increasing order. Ensure your function handles edge cases such as negative numbers and zero correctly.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_and_sort_primes(numbers): Returns a list of prime numbers from the input list, sorted in increasing order. primes = [num for num in numbers if is_prime(num)] return sorted(primes)"},{"question":"Create a function that, given a binary tree, returns all the paths from root to each leaf node in the form of a list of lists. Each path should be represented as a list of values showing the sequence from the root to the leaf node. Additionally, the function should also return the sum of values for each path. If the tree is empty, the function should return an empty list for paths and an empty list for sums. For example, consider the following binary tree: \`\`\` 5 / 4 8 / / 11 13 4 / 7 2 1 \`\`\` The paths from the root to leaf nodes are: - [5, 4, 11, 7] - [5, 4, 11, 2] - [5, 8, 13] - [5, 8, 4, 1] The sums of each path are: - 27 (for the path [5, 4, 11, 7]) - 22 (for the path [5, 4, 11, 2]) - 26 (for the path [5, 8, 13]) - 18 (for the path [5, 8, 4, 1]) Your task is to write a function that generates these lists of paths and lists of sums.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def binary_tree_paths_and_sums(root): Returns all the paths from root to each leaf node and their sums in the form of two lists. :param root: TreeNode, the root of the binary tree. :return: tuple of two lists, (paths, sums) def dfs(node, path, paths, sums): if not node: return path.append(node.value) if not node.left and not node.right: paths.append(list(path)) sums.append(sum(path)) else: if node.left: dfs(node.left, path, paths, sums) if node.right: dfs(node.right, path, paths, sums) path.pop() paths = [] sums = [] dfs(root, [], paths, sums) return paths, sums"},{"question":"You are given a problem titled \\"Island Perimeter\\". The task is to determine the perimeter of an island in the form of a binary matrix \`grid\` where \`1\` represents land and \`0\` represents water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. There may be multiple islands in the \`grid\`, but you need to find the perimeter of the one island that exists (it is guaranteed that there is exactly one island). Your task is to write a function that computes the perimeter of the island. For instance, consider the following examples: Example 1: Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] Output: 16 Explanation: The perimeter is the sum of the edges of the island, which amounts to 16. Example 2: Input: grid = [[1,0]] Output: 4 Explanation: The single land cell has 4 edges contributing to the perimeter. Constraints: - \`grid.length == m\` - \`grid[0].length == n\` - \`1 <= m, n <= 100\` - \`grid[i][j]\` is \`0\` or \`1\`.","solution":"def island_perimeter(grid): Given a grid representing land (1) and water (0), calculates the perimeter of the island. Parameters: grid (List[List[int]]): A binary matrix where 1 represents land and 0 represents water. Returns: int: The perimeter of the island. rows = len(grid) cols = len(grid[0]) perimeter = 0 for i in range(rows): for j in range(cols): if grid[i][j] == 1: # Check for water or grid edges at the top, bottom, left and right if i == 0 or grid[i-1][j] == 0: # Top perimeter += 1 if i == rows-1 or grid[i+1][j] == 0: # Bottom perimeter += 1 if j == 0 or grid[i][j-1] == 0: # Left perimeter += 1 if j == cols-1 or grid[i][j+1] == 0: # Right perimeter += 1 return perimeter"},{"question":"# Problem Statement You are given a function that calculates the factorial of a number using recursion. Your task is to refactor this function to handle invalid inputs gracefully by implementing exception handling. If invalid input (e.g., a negative number, a non-integer, or any other inappropriate type) is encountered, the function should raise an appropriate error message. Additionally, log the details of the invalid input and the error message using a logging system. \`\`\`python def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1) \`\`\` **Requirements:** 1. Implement exception handling to manage invalid inputs. 2. Use Python's logging module to log error details. 3. Ensure the function returns an appropriate response or exception for invalid inputs. **Example:** \`\`\`python factorial(5) # Output: 120 factorial(-3) # Logs an error saying \\"Negative numbers are not allowed\\" factorial(3.5) # Logs an error saying \\"Factorial is not defined for non-integer values\\" factorial(\\"Five\\") # Logs an error saying \\"Invalid input type\\" \`\`\`","solution":"import logging # Configure logging logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s') def factorial(n): try: if not isinstance(n, int): raise ValueError(\\"Factorial is not defined for non-integer values.\\") if n < 0: raise ValueError(\\"Negative numbers are not allowed.\\") if n == 0: return 1 else: return n * factorial(n - 1) except Exception as e: logging.error(f\\"Invalid input: {n}. Error: {str(e)}\\") raise"},{"question":"Develop a Python function named \`matrix_diagonal_difference\` that takes a single argument, a 2D square matrix \`matrix\` (a list of lists), representing integers. The function should calculate and return the absolute difference between the sums of its diagonals. The primary diagonal is the one that runs from the top left to the bottom right of the matrix, while the secondary diagonal runs from the top right to the bottom left. Ensure that your function handles potential edge cases, like matrices with only one element or invalid matrices that are not square. Additionally, include a comprehensive set of test cases to validate the correctness of your function.","solution":"def matrix_diagonal_difference(matrix): Returns the absolute difference between the sums of the primary and secondary diagonals of a square matrix. :param matrix: List of lists containing integers, representing a square matrix. :return: Absolute difference between the sums of the primary and secondary diagonals. if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"The input must be a square matrix.\\") n = len(matrix) primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n-1-i] for i in range(n)) return abs(primary_diagonal_sum - secondary_diagonal_sum)"},{"question":"Write a Python function that takes two lists of integers, each representing the digits of two non-negative integers, and returns a new list representing the digits of their sum. Do not use any built-in functions that directly convert the lists to integers and then perform the addition. Example: \`\`\`python list1 = [1, 2, 3] list2 = [9, 8, 7] \`\`\` should return: \`\`\`python [1, 1, 1, 0] \`\`\`","solution":"def add_lists(list1, list2): Returns the list of digits representing the sum of the integers represented by list1 and list2. list1 = list1[::-1] list2 = list2[::-1] result = [] carry = 0 for i in range(max(len(list1), len(list2))): digit1 = list1[i] if i < len(list1) else 0 digit2 = list2[i] if i < len(list2) else 0 total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) if carry != 0: result.append(carry) return result[::-1]"},{"question":"Design a function in Python that accepts a dictionary where the keys are strings representing names of students and the values are lists of integers representing their scores. The function should return a dictionary where each key is a student's name and the corresponding value is the student's average score. Use built-in Python functions and avoid using external libraries.","solution":"def calculate_average_scores(student_scores): Calculate the average score for each student. :param student_scores: Dictionary where the keys are student names and values are lists of scores. :return: Dictionary with student names as keys and their average scores as values. average_scores = {} for student, scores in student_scores.items(): if scores: # Check if the list is not empty average_scores[student] = sum(scores) / len(scores) else: average_scores[student] = 0.0 # Define behavior for students with no scores return average_scores"},{"question":"A web application tracks user activities by recording timestamps of various events. Given a list of timestamps (in seconds), create an algorithm that identifies the longest stretch of continuous user activity. Activity is considered continuous if the difference between consecutive timestamps does not exceed 5 seconds. For instance, given the timestamps [10, 13, 15, 16, 25, 26, 27, 30, 50], the maximum continuous activity duration would span from 10 to 16, yielding a duration of 6 seconds. Optimize your solution for efficiency, taking into account the potential size of the list.","solution":"def longest_continuous_activity(timestamps): if not timestamps: return 0 timestamps.sort() max_duration = 0 current_start = timestamps[0] current_end = timestamps[0] for i in range(1, len(timestamps)): if timestamps[i] - current_end <= 5: current_end = timestamps[i] else: max_duration = max(max_duration, current_end - current_start) current_start = timestamps[i] current_end = timestamps[i] max_duration = max(max_duration, current_end - current_start) return max_duration"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the elements that appear more than once in the original list. Also, include a segment of erroneous code as an additional challenge for the candidate. Refactor the code to ensure it correctly identifies and returns the duplicate elements: \`\`\`python def find_duplicates(original_list): duplicates = [] for i in range(len(original_list)): for j in range(i + 1, len(original_list)): if original_list[i] == original_list[j] and original_list[i] not in duplicates: duplicates.append(original_list[i]) return duplicates print(find_duplicates([1, 2, 3, 4, 5, 1, 2, 6, 7, 8, 6])) \`\`\` The intended functionality should ensure that the list returned only contains elements that appear more than once in the original list list.","solution":"def find_duplicates(original_list): Returns a list of elements that appear more than once in the original_list. count_dict = {} duplicates = [] # Count the occurrences of each element for element in original_list: if element in count_dict: count_dict[element] += 1 else: count_dict[element] = 1 # Add elements to duplicates list that appear more than once for key, value in count_dict.items(): if value > 1: duplicates.append(key) return duplicates"},{"question":"Consider the following piece of code that is supposed to check if a given string is a palindrome. However, the code contains logical errors. Identify the bugs, correct them, and propose a better approach to handle palindrome checks for very long strings more efficiently. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example: 'Madam, In Eden, I’m Adam'. Erroneous code: \`\`\`python def is_palindrome(s): s = s.lower() s = ''.join(e for e in s if e.isalnum()) return s == s[::-1] print(is_palindrome('A man, a plan, a canal, Panama')) # This should print True \`\`\` (Note: The given code doesn't handle certain edge cases effectively and could be optimized for performance, especially with very long strings. For example, a large number of non-alphanumeric characters can increase preprocessing time unnecessarily. Additionally, considering character case conversion and reversal together may lead to inefficiencies.) Your task is to: 1. Identify any bugs or inefficiencies present in the provided code. 2. Correct the code to accurately determine if the string is a palindrome. 3. Suggest and implement a more efficient algorithm for checking if very long strings are palindromes. Explain your solution briefly.","solution":"def is_palindrome(s): Returns True if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Returns False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Initialize pointers for the two ends of the filtered list left, right = 0, len(filtered_chars) - 1 while left < right: if filtered_chars[left] != filtered_chars[right]: return False left += 1 right -= 1 return True"},{"question":"Consider a string 's' comprised of a mixture of uppercase and lowercase alphabets. Construct a Python function to determine whether 's' is a palindrome while disregarding case sensitivity and non-alphabetic characters. Return a boolean value indicating the result. s = \\"A man, a plan, a canal, Panama\\"","solution":"def is_palindrome(s): Determines if the given string s is a palindrome, ignoring case and non-alphabetic characters. Args: s (str): Input string Returns: bool: True if s is a palindrome, False otherwise. cleaned_str = ''.join(char.lower() for char in s if char.isalpha()) return cleaned_str == cleaned_str[::-1] # Example usage: # s = \\"A man, a plan, a canal, Panama\\" # print(is_palindrome(s)) # Output: True"},{"question":"Write a function that takes an integer input \`n\` and outputs a staircase of size \`n\`. The staircase is composed of space (' ') and hashtag ('#') characters, and is right-aligned. Each level of the staircase consists of the same number of characters, with the number of hashtags increasing from 1 to \`n\` from the top level to the bottom level. For example, if \`n\` is 5, the function should output the following staircase: \`\`\` # # # \`\`\` Function signature: \`\`\`python def print_staircase(n: int) -> None: \`\`\` Your task is to implement the function \`print_staircase\` to achieve the intended functionality. Test your function with different values of \`n\` to ensure it behaves as expected.","solution":"def print_staircase(n: int) -> None: Prints a right-aligned staircase of height \`n\`. for i in range(1, n + 1): print(' ' * (n - i) + '#' * i)"},{"question":"Develop a function that takes an unsorted integer array and an integer k, and returns the kth smallest element in the array without using any in-built sorting functions. For example, given the array [7, 10, 4, 3, 20, 15] and k = 3, the function should return 7.","solution":"def find_kth_smallest(arr, k): Returns the k-th smallest element in the array. Parameters: arr (list): The unsorted list of integers. k (int): The desired rank of the smallest element. Returns: int: The k-th smallest element in the array. def quickselect(low, high, k): if low == high: return arr[low] pivot_index = partition(low, high) if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(low, pivot_index - 1, k) else: return quickselect(pivot_index + 1, high, k) def partition(low, high): pivot = arr[high] i = low for j in range(low, high): if arr[j] < pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[high] = arr[high], arr[i] return i return quickselect(0, len(arr) - 1, k - 1)"},{"question":"You are given a list of words. Create a function that takes a list and returns a dictionary with keys as the lengths of the words and values as the list of words with that length. Ensure the words are sorted alphabetically within each length category. If the input list is empty, return an empty dictionary. Example Input: \`[\\"apple\\", \\"bat\\", \\"ball\\", \\"cat\\", \\"dog\\", \\"elephant\\"]\` Example Output: \`{3: [\\"bat\\", \\"cat\\", \\"dog\\"], 4: [\\"ball\\"], 5: [\\"apple\\"], 8: [\\"elephant\\"]}\` Note: You may assume that all words consist of lower-case alphabets and there are no duplicate words in the list.","solution":"def categorize_words_by_length(words): Categorizes words by their lengths and returns a dictionary with word lengths as keys and sorted lists of words as values. Arguments: words -- a list of words (list of strings) Returns: A dictionary with word lengths as keys and sorted lists of words as values. from collections import defaultdict length_dict = defaultdict(list) for word in words: length_dict[len(word)].append(word) # Sort words in each length category for key in length_dict: length_dict[key] = sorted(length_dict[key]) return dict(length_dict)"},{"question":"Design a function in Python that takes an integer array as input and determines if a continuous subarray sums to zero. You are required to return a Boolean value: \`True\` if there is a continuous subarray that sums to zero, otherwise \`False\`. Ensure that your function has an optimal time complexity. Illustrate the correctness of your function with several test cases.","solution":"def has_zero_sum_subarray(arr): Checks if there is a continuous subarray that sums to zero in the given array. :param arr: List[int], input array of integers :return: bool, True if there is a continuous subarray that sums to zero, False otherwise sum_set = set() curr_sum = 0 for num in arr: curr_sum += num if curr_sum == 0 or curr_sum in sum_set: return True sum_set.add(curr_sum) return False"},{"question":"Design a function that accepts a string containing a mix of letters and digits, and returns a new string where letters and digits are separated and all letters are converted to uppercase. Ensure that the function handles edge cases such as strings with no letters, no digits, or being empty. Additionally, implement error handling for cases where the input is not a string. The function should provide appropriate error messages for invalid inputs without terminating abruptly. Do not use Python's built-in error handling capabilities directly in the return statement. Example: Input: \\"a1b2c3\\" Output: \\"ABC123\\"","solution":"def separate_and_uppercase(input_string): Separates letters and digits from the input string, converts letters to uppercase, and returns the new formatted string. Args: input_string (str): The string containing a mix of letters and digits. Returns: str: A new string with letters in uppercase followed by digits. Raises: TypeError: If input is not a string. if not isinstance(input_string, str): raise TypeError(\\"Input must be a string\\") letters = [] digits = [] for char in input_string: if char.isalpha(): letters.append(char.upper()) elif char.isdigit(): digits.append(char) return ''.join(letters) + ''.join(digits)"},{"question":"Write a function called \`reverse_string\` that takes a single string as an argument and returns the string with its characters in reversed order. For example, if the input string is \\"hello\\", the function should return \\"olleh\\". Function signature: \`\`\`python def reverse_string(s: str) -> str: \`\`\` Example: \`\`\`python reverse_string(\\"world\\") # should return \\"dlrow\\" \`\`\`","solution":"def reverse_string(s: str) -> str: Returns the string with its characters in reversed order. Parameters: s (str): The string to be reversed. Returns: str: The reversed string. return s[::-1]"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list in ascending order. Include error handling to manage cases where the input list is empty or contains non-integer elements. Also, ensure your function is efficient for large inputs. Example: Input: [29, 15, 3, 8, 23, 76, 5] Output: [3, 5, 23, 29]","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(input_list): Returns a sorted list of prime numbers from the input list. if not isinstance(input_list, list): raise ValueError(\\"Input should be a list\\") for element in input_list: if not isinstance(element, int): raise ValueError(\\"All elements in the input list should be integers\\") # Filter prime numbers and sort the result primes = sorted([num for num in input_list if is_prime(num)]) return primes"},{"question":"A company wants to analyze the performance of a newly launched product over the first month. They collected daily sales data and now wish to understand the trends. Which of the following approaches should be employed to gain the most insightful analysis: A) Calculate the mean and median sales per day and compare them, B) Look at the sum of sales over the entire month to gauge overall performance, C) Use a linear regression model to identify any upward or downward trend over the days, or D) Compare each week's total sales to identify weekly patterns and variations?","solution":"def identify_trend(sales_data): Identifies the trend in sales data over the days using linear regression. sales_data: List of daily sales figures. Returns: - The slope of the trend line (positive indicates an upward trend, negative indicates a downward trend). - The intercept of the trend line. from scipy.stats import linregress days = list(range(1, len(sales_data) + 1)) slope, intercept, r_value, p_value, std_err = linregress(days, sales_data) return slope, intercept"},{"question":"Word Transformation with Deletions **Description:** Given two strings \`str1\` and \`str2\`, return \`true\` if they can be transformed into the same string by only removing characters. Specifically, you can remove characters from any part of the string, but cannot rearrange the order of remaining characters. **Example 1:** \`\`\` Input: str1 = \\"abcat\\", str2 = \\"act\\" Output: true Explanation: By deleting the 'b' and the second 'a' from \\"abcat\\", we get \\"act\\". \`\`\` **Example 2:** \`\`\` Input: str1 = \\"edit\\", str2 = \\"tide\\" Output: false Explanation: We cannot transform \\"edit\\" into \\"tide\\" by simply removing characters. \`\`\` **Example 3:** \`\`\` Input: str1 = \\"hello\\", str2 = \\"oeh\\" Output: false Explanation: Although \\"hello\\" contains 'h', 'e', and 'o', their order is different and cannot be rearranged. \`\`\` **Example 4:** \`\`\` Input: str1 = \\"flowchart\\", str2 = \\"fcht\\" Output: true Explanation: By deleting 'l', 'o', 'w', 'a', and 'r' from \\"flowchart\\", we get \\"fcht\\". \`\`\` **Constraints:** - \`1 <= str1.length, str2.length <= 200\` - Both \`str1\` and \`str2\` contain only lowercase English letters. **Follow-up:** Can you solve it using two pointers with \`O(n + m)\` time complexity?","solution":"def can_transform(str1, str2): Returns True if str1 can be transformed to str2 by only deleting characters. m, n = len(str1), len(str2) i, j = 0, 0 while i < m and j < n: if str1[i] == str2[j]: j += 1 i += 1 return j == n"},{"question":"Devise an algorithm that will accept a string input consisting of digits, and ascertain whether the sum of its digits is divisible by 4. The function should return a boolean value: True if the sum is divisible by 4, and False otherwise. Implement the function using efficient string manipulation and iteration techniques.","solution":"def is_sum_of_digits_divisible_by_4(s): Check if the sum of the digits in the input string s is divisible by 4 Args: s (str): Input string consisting of digits Returns: bool: True if the sum of digits is divisible by 4, False otherwise # Calculate sum of digits sum_of_digits = sum(int(char) for char in s) # Check if the sum is divisible by 4 return sum_of_digits % 4 == 0"},{"question":"Write a function \`is_anagram(str1, str2)\` that checks if two given strings are anagrams of each other. Two strings are anagrams if they are made of the same characters with the same frequency. The function should return \`True\` if the strings are anagrams and \`False\` otherwise. For example: \`\`\` is_anagram(\\"listen\\", \\"silent\\") -> True is_anagram(\\"hello\\", \\"world\\") -> False \`\`\`","solution":"def is_anagram(str1, str2): Checks if two given strings are anagrams. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. # Convert both strings to lower case to handle case insensitivity str1 = str1.lower() str2 = str2.lower() # Return True if sorted characters of both strings are equal, else False return sorted(str1) == sorted(str2)"},{"question":"Write a function in Python that takes a list of integers and checks whether the list represents a strictly increasing sequence. Additionally, augment the function to handle edge cases where the list might be empty or contain only one element. The function should return \`True\` if the sequence is strictly increasing, and \`False\` otherwise.","solution":"def is_strictly_increasing(sequence): Check if the given list of integers is a strictly increasing sequence. Args: sequence (list): A list of integers. Returns: bool: True if the sequence is strictly increasing, False otherwise. # An empty list or a list with one element is not strictly increasing if len(sequence) <= 1: return False # Check if every element is less than the next one in the sequence for i in range(len(sequence) - 1): if sequence[i] >= sequence[i+1]: return False return True"},{"question":"Design a subroutine, function, or method that processes a string to identify and return the longest palindromic substring. The implementation must account for the following requirements: - It should handle strings containing both uppercase and lowercase letters. - The solution should efficiently manage strings of up to 10^4 characters in length to demonstrate performance under large-scale input. - If multiple palindromic substrings of the same length are found, return the first one encountered. Sample Input: \\"babad\\" Expected Output: \\"bab\\" (or \\"aba\\", since both are valid solutions in this case)","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of the input string s. def expand_from_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] if not s: return \\"\\" longest = \\"\\" for i in range(len(s)): # Odd length palindrome odd_palindrome = expand_from_center(i, i) if len(odd_palindrome) > len(longest): longest = odd_palindrome # Even length palindrome even_palindrome = expand_from_center(i, i + 1) if len(even_palindrome) > len(longest): longest = even_palindrome return longest"},{"question":"''' Given a list of unsorted integers, write a Python function called \`find_missing_number\` to identify the missing number in the sequence. The list is supposed to contain numbers from 1 to N with one missing. For example: Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 Input: [1, 2, 3, 5] Output: 4 **Function Signature:** \`\`\`python def find_missing_number(arr: List[int]) -> int: pass \`\`\` Note: Do not use any built-in library function to find the missing number directly.","solution":"from typing import List def find_missing_number(arr: List[int]) -> int: Returns the missing number in the sequence from 1 to N. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"Write a function in Python that checks whether a given string is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Implement the function using recursion. def is_palindrome(s): # Function body goes here #","solution":"def is_palindrome(s): Recursively checks whether a given string is a palindrome. Ignores spaces, punctuation, and capitalization. s = ''.join(char.lower() for char in s if char.isalnum()) def check_palindrome(low, high): if low >= high: return True if s[low] != s[high]: return False return check_palindrome(low + 1, high - 1) return check_palindrome(0, len(s) - 1)"},{"question":"Write a Python function that takes a list of integers and returns the longest contiguous subarray that sums up to a given number \`S\`. If there are multiple subarrays with the same maximum length, return the one that appears first. If no such subarray exists, return an empty list. Example Input: - arr = [1, 2, 3, 7, 5] - S = 12 Example Output: - [2, 3, 7] Example Explanation: The subarray [2, 3, 7] sums up to 12 and is the longest possible contiguous subarray with this sum.","solution":"def longest_subarray_with_sum(arr, S): Returns the longest contiguous subarray that sums up to a given number S. max_length = 0 start_index = 0 curr_sum = 0 sum_dict = {} for i in range(len(arr)): curr_sum += arr[i] if curr_sum == S: if i + 1 > max_length: max_length = i + 1 start_index = 0 if curr_sum - S in sum_dict: if i - sum_dict[curr_sum - S] > max_length: max_length = i - sum_dict[curr_sum - S] start_index = sum_dict[curr_sum - S] + 1 if curr_sum not in sum_dict: sum_dict[curr_sum] = i if max_length == 0: return [] return arr[start_index:start_index + max_length]"},{"question":"A company is tracking the sales of its products in different regions. Each product has its unique product ID and each region is identified by its name. The sales data is represented as a list of dictionaries where each dictionary contains a region, product ID, and the amount of sales for that product in that region. You are required to write a function that takes this sales data and returns a new dictionary that aggregates the total sales for each product across all regions. \`\`\` sales_data = [ {\\"region\\": \\"North\\", \\"product_id\\": 101, \\"sales\\": 150}, {\\"region\\": \\"South\\", \\"product_id\\": 101, \\"sales\\": 200}, {\\"region\\": \\"East\\", \\"product_id\\": 102, \\"sales\\": 300}, {\\"region\\": \\"West\\", \\"product_id\\": 103, \\"sales\\": 250}, {\\"region\\": \\"North\\", \\"product_id\\": 102, \\"sales\\": 100}, {\\"region\\": \\"South\\", \\"product_id\\": 103, \\"sales\\": 300}, ] expected_output = { 101: 350, 102: 400, 103: 550, } def aggregate_sales(data): # Your code here print(aggregate_sales(sales_data)) \`\`\` When inputting the given \`sales_data\` into the \`aggregate_sales\` function, the output should match \`expected_output\`. Ensure to test your function with this sample data and possibly other test cases to verify its correctness. Describe your approach and solution in detail.","solution":"def aggregate_sales(data): Takes a list of sales data and returns a dictionary aggregating total sales for each product across all regions. data: List[Dict] A list of dictionaries where each dictionary contains 'region', 'product_id', and 'sales' keys. returns: Dict A dictionary with product IDs as keys and their aggregated total sales as values. aggregated_sales = {} for entry in data: product_id = entry['product_id'] sales = entry['sales'] if product_id in aggregated_sales: aggregated_sales[product_id] += sales else: aggregated_sales[product_id] = sales return aggregated_sales # Sample sales data sales_data = [ {\\"region\\": \\"North\\", \\"product_id\\": 101, \\"sales\\": 150}, {\\"region\\": \\"South\\", \\"product_id\\": 101, \\"sales\\": 200}, {\\"region\\": \\"East\\", \\"product_id\\": 102, \\"sales\\": 300}, {\\"region\\": \\"West\\", \\"product_id\\": 103, \\"sales\\": 250}, {\\"region\\": \\"North\\", \\"product_id\\": 102, \\"sales\\": 100}, {\\"region\\": \\"South\\", \\"product_id\\": 103, \\"sales\\": 300}, ] # Expected output expected_output = { 101: 350, 102: 400, 103: 550, } # Testing the function with the sample data print(aggregate_sales(sales_data)) # should print expected_output"},{"question":"Design a Contact Management System **Description**: You are to design a small contact management system that stores and manages a list of contacts. Each contact has a name and a phone number. Your task is to implement various functionalities like adding a new contact, deleting an existing contact, searching for a contact, and displaying the list of contacts sorted alphabetically by their names. The system should support the following operations: 1. \`AddContact\`: Adds a new contact to the contact list. If the contact already exists, update the contact's phone number. 2. \`DeleteContact\`: Deletes an existing contact from the contact list. If the contact does not exist, do nothing. 3. \`SearchContact\`: Searches for a contact by name and returns the associated phone number. If the contact does not exist, return \\"Not found\\". 4. \`DisplayContacts\`: Returns a list of all contacts sorted alphabetically by their names. **Class Signature**: \`\`\`python class ContactManager: def __init__(self): # Initializes the contact manager pass def AddContact(self, name: str, phone: str) -> None: # Adds or updates a contact pass def DeleteContact(self, name: str) -> None: # Deletes a contact pass def SearchContact(self, name: str) -> str: # Searches and returns the phone number if found pass def DisplayContacts(self) -> List[Tuple[str, str]]: # Returns the list of all contacts sorted alphabetically by name pass \`\`\` **Examples**: Example 1: \`\`\`python cm = ContactManager() cm.AddContact(\\"John Doe\\", \\"555-1234\\") cm.AddContact(\\"Jane Doe\\", \\"555-5678\\") print(cm.SearchContact(\\"John Doe\\")) # Output: \\"555-1234\\" print(cm.SearchContact(\\"Jane Doe\\")) # Output: \\"555-5678\\" cm.DeleteContact(\\"John Doe\\") print(cm.SearchContact(\\"John Doe\\")) # Output: \\"Not found\\" \`\`\` Example 2: \`\`\`python cm = ContactManager() cm.AddContact(\\"Alice\\", \\"111-2222\\") cm.AddContact(\\"Bob\\", \\"333-4444\\") cm.AddContact(\\"Charlie\\", \\"555-6666\\") print(cm.DisplayContacts()) # Output: [(\\"Alice\\", \\"111-2222\\"), (\\"Bob\\", \\"333-4444\\"), (\\"Charlie\\", \\"555-6666\\")] cm.AddContact(\\"Bob\\", \\"777-8888\\") print(cm.DisplayContacts()) # Output: [(\\"Alice\\", \\"111-2222\\"), (\\"Bob\\", \\"777-8888\\"), (\\"Charlie\\", \\"555-6666\\")] cm.DeleteContact(\\"Alice\\") print(cm.DisplayContacts()) # Output: [(\\"Bob\\", \\"777-8888\\"), (\\"Charlie\\", \\"555-6666\\")] \`\`\` **Constraints**: 1. \`name\` will be a string containing only alphanumeric characters (a-z, A-Z, 0-9) and spaces. No other characters are allowed. 2. \`phone\` will be a string containing only numeric characters (0-9) and hyphens (-). 3. The length of \`name\` will not exceed 50 characters. 4. The length of \`phone\` will not exceed 15 characters. 5. The contact list can store up to 1000 contacts.","solution":"class ContactManager: def __init__(self): # Initializes the contact manager self.contacts = {} def AddContact(self, name: str, phone: str) -> None: # Adds or updates a contact self.contacts[name] = phone def DeleteContact(self, name: str) -> None: # Deletes a contact if name in self.contacts: del self.contacts[name] def SearchContact(self, name: str) -> str: # Searches and returns the phone number if found return self.contacts.get(name, \\"Not found\\") def DisplayContacts(self) -> list: # Returns the list of all contacts sorted alphabetically by name return sorted(self.contacts.items(), key=lambda x: x[0])"},{"question":"You are given a list of positive integers and a target sum. Write a function \`split_into_pairs(nums, target)\` that splits the given list into pairs such that the sum of each pair is equal to the target sum. If it is not possible, return an empty list. **Constraints:** - Each integer in the list can only be used in one pair. - The list may have up to 10^4 elements. - The integers in the list are all positive. **Example:** \`\`\`python def split_into_pairs(nums, target): pass # Example 1: nums = [1, 2, 3, 4, 5, 6] target = 7 # Output: [(1, 6), (2, 5), (3, 4)] # Example 2: nums = [1, 1, 2, 2, 3, 3] target = 5 # Output: [] # Example 3: nums = [1, 2, 3, 4, 5, 6] target = 10 # Output: [] \`\`\` **Note:** 1. The output should contain all such pairs in any order. 2. If there are multiple valid outputs, you can return any of them. 3. If it is not possible to split into pairs that sum to the target, return an empty list.","solution":"def split_into_pairs(nums, target): Splits the given list into pairs such that the sum of each pair is equal to the target sum. If it is not possible, return an empty list. from collections import Counter count = Counter(nums) result = [] for num in nums: if count[num] > 0: complement = target - num if count[complement] > 0: if num == complement and count[num] < 2: continue result.append((num, complement)) count[num] -= 1 count[complement] -= 1 # Check if all counts are zero for num in nums: if count[num] > 0: return [] return result"},{"question":"Design a function \`generate_combinations\` that takes two parameters: a list of strings \`items\` and an integer \`n\`. The function should return all possible combinations of \`n\` items from the input list. Each combination should be represented as a tuple. Ensure that the combinations are unique and ordered lexicographically. If \`n\` is greater than the length of the list, return an empty list. Example: \`\`\`python items = ['apple', 'banana', 'cherry'] n = 2 generate_combinations(items, n) \`\`\` Output: \`\`\`python [('apple', 'banana'), ('apple', 'cherry'), ('banana', 'cherry')] \`\`\`","solution":"from itertools import combinations def generate_combinations(items, n): Generates all possible combinations of \`n\` items from the list \`items\`. Parameters: items (list): The list of items to combine. n (int): The number of items in each combination. Returns: list: A list of tuples, each containing a unique combination of \`n\` items from \`items\`. if n > len(items) or n < 0: return [] return sorted(combinations(sorted(items), n))"},{"question":"Write a Python function that takes a dictionary with string keys and integer values, and returns a new dictionary with the same keys, but the values are squared. For example, given the input {\\"a\\": 2, \\"b\\": 3}, the function should output {\\"a\\": 4, \\"b\\": 9}.","solution":"def square_dict_values(input_dict): Returns a new dictionary with the same keys as input_dict, but with squared values. return {k: v**2 for k, v in input_dict.items()}"},{"question":"Given a list of strings, write a function that returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that specific length. The input list may contain duplicate strings, and all instances should be included in the result. Additionally, the strings in each list should be in the order they appear in the input list. For example, given the input list \`[\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\", \\"egg\\", \\"fig\\", \\"grape\\"]\`, the function should return the dictionary \`{5: [\\"apple\\", \\"grape\\"], 6: [\\"banana\\", \\"cherry\\"], 4: [\\"date\\"], 3: [\\"egg\\", \\"fig\\"]}\`. The function should handle edge cases like an empty list and strings of varying lengths. Optimize the function to ensure it performs efficiently with larger lists. Output should be a dictionary as described. Consider how to best structure your solution to handle the potential size and variability of input efficiently.","solution":"from collections import defaultdict def group_strings_by_length(strings): Returns a dictionary where the keys are the lengths of the strings and the values are lists of strings of that specific length. result = defaultdict(list) for string in strings: result[len(string)].append(string) return dict(result)"},{"question":"Implement a function to check if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward. Examples of palindromes are \\"A man, a plan, a canal: Panama\\" and \\"racecar\\". def is_palindrome(s: str) -> bool: # Your code here Examples: is_palindrome(\\"A man, a plan, a canal: Panama\\") should return True. is_palindrome(\\"racecar\\") should return True. is_palindrome(\\"hello\\") should return False.","solution":"def is_palindrome(s: str) -> bool: Checks if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter only alphanumeric characters and transform to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered characters form a palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"Given a list of integers, write a Python function called \`find_second_largest\` that finds and returns the second largest element in the list. If the list contains less than two unique elements, raise a ValueError with the message \\"List must contain at least two unique elements\\". # Function Signature \`\`\`python def find_second_largest(nums: List[int]) -> int: pass \`\`\` # Input - A list \`nums\` of integers. # Output - An integer, the second largest unique element of the list. # Constraints - The input list \`nums\` will contain at least one element. - You can assume all elements in the list are integers. # Example \`\`\`python assert find_second_largest([2, 3, 1, 4, 4, 5]) == 4 assert find_second_largest([10, 20, 20, 30]) == 20 assert find_second_largest([5, 5, 5]) raises ValueError \`\`\`","solution":"def find_second_largest(nums): Returns the second largest unique element in the list. If the list contains less than two unique elements, raises a ValueError. unique_nums = list(set(nums)) if len(unique_nums) < 2: raise ValueError(\\"List must contain at least two unique elements\\") unique_nums.sort() return unique_nums[-2]"},{"question":"Determine the maximum subarray sum for any given list of integers. The subarray must include at least one element. Implement the function as follows: def max_subarray_sum(arr): ''' Develop a function that calculates the maximum sum of a contiguous subarray within the given list of integers, utilizing Kadane's algorithm. Ensure optimal performance for large input sizes. Example Usage: max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) ➞ 6 max_subarray_sum([1]) ➞ 1 max_subarray_sum([5, 4, -1, 7, 8]) ➞ 23 max_subarray_sum([-1, -2, -3, -4]) ➞ -1 '''","solution":"def max_subarray_sum(arr): Calculates the maximum sum of a contiguous subarray within the given list of integers, using Kadane's algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Create a function that validates a given email address based on specific rules. def validate_email(email): ''' This function takes a string representing an email address and returns a boolean indicating whether the email is valid according to the following criteria: 1. The email address must contain exactly one '@' character. 2. The local part (before the '@') must contain only alphanumeric characters and may include dots ('.'), but dots cannot be consecutive or at the start or end of the local part. 3. The domain part (after the '@') must contain only alphanumeric characters and dots ('.'), but dots cannot be consecutive or at the start or end of the domain part. 4. The domain part must include at least one dot ('.') separating the domain name and the top-level domain. Examples: validate_email(\\"john.doe@example.com\\") ➞ True validate_email(\\"john.doe..@example.com\\") ➞ False validate_email(\\"john@.example.com\\") ➞ False validate_email(\\"john.doe@example..com\\") ➞ False validate_email(\\"john..doe@example.com\\") ➞ False validate_email(\\"john.doe@examplecom\\") ➞ False validate_email(\\"john.doe@sub.example.com\\") ➞ True '''","solution":"import re def validate_email(email): Validates an email address based on specific rules. # Define the regex pattern for a valid email address. pattern = r\\"^[A-Za-z0-9]+(.[A-Za-z0-9]+)*@[A-Za-z0-9]+(.[A-Za-z0-9]+)+\\" return bool(re.match(pattern, email))"},{"question":"Write a Python function that takes a list of integers and an integer value \`x\`, and removes all occurrences of \`x\` from the list. The function should return the modified list. For example, given the list \`[1, 2, 3, 4, 2, 2, 5]\` and the integer \`2\`, the function should return \`[1, 3, 4, 5]\`. Ensure your function handles cases where \`x\` does not exist in the list gracefully.","solution":"def remove_occurrences(numbers, x): Removes all occurrences of x from the list of integers numbers. Parameters: numbers (list): A list of integers. x (int): An integer value to be removed from the list. Returns: list: The modified list with all occurrences of x removed. return [num for num in numbers if num != x]"},{"question":"Implement a function to find all unique quadruplets in a given list of integers that sum up to a target value. The integers in the list range from -10^4 to 10^4 and the list length does not exceed 200. The quadruplets themselves should also be listed without any specific order but must avoid duplicates. Example: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2]]","solution":"def four_sum(nums, target): nums.sort() quadruplets = set() n = len(nums) for i in range(n-3): for j in range(i+1, n-2): left = j + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruplets.add((nums[i], nums[j], nums[left], nums[right])) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return [list(quadruplet) for quadruplet in quadruplets]"},{"question":"Problem Description: You are tasked with implementing a file system simulation in Python. The system should be able to perform the following operations: - **create**: Creates a new file with a specified path and content. - **read**: Reads the content of a file at the specified path. - **update**: Updates the content of a file at the specified path. - **delete**: Deletes the file at the specified path. # Constraints: - The path is always a string of the format \\"/folder1/folder2/.../filename\\". - The filename should not contain any forward slashes. - All path operations should be case-sensitive. - The content of the file is a string. # Example: \`\`\`python fs = FileSystem() # Create files fs.create('/root/file1.txt', 'Hello, World!') fs.create('/root/folder/file2.txt', 'Second File') # Read files print(fs.read('/root/file1.txt')) # Output: 'Hello, World!' print(fs.read('/root/folder/file2.txt')) # Output: 'Second File' # Update files fs.update('/root/file1.txt', 'Updated Content') print(fs.read('/root/file1.txt')) # Output: 'Updated Content' # Delete files fs.delete('/root/file1.txt') print(fs.read('/root/file1.txt')) # Output: None \`\`\` # Requirements: 1. Implement the class \`FileSystem\` with the following methods: - \`create(self, path: str, content: str) -> None\` - \`read(self, path: str) -> Optional[str]\` - \`update(self, path: str, content: str) -> None\` - \`delete(self, path: str) -> None\` 2. Handle invalid operations gracefully: - Trying to \`read\` or \`update\` a non-existent file should return \`None\`. - Trying to \`create\` a file at an existing path should overwrite the content with the new content. # Solution: \`\`\`python from typing import Optional class FileSystem: def __init__(self): self.files = {} def create(self, path: str, content: str) -> None: self.files[path] = content def read(self, path: str) -> Optional[str]: return self.files.get(path, None) def update(self, path: str, content: str) -> None: if path in self.files: self.files[path] = content def delete(self, path: str) -> None: if path in self.files: del self.files[path] # Testing the FileSystem class fs = FileSystem() fs.create('/root/file1.txt', 'Hello, World!') fs.create('/root/folder/file2.txt', 'Second File') print(fs.read('/root/file1.txt')) # Output: 'Hello, World!' print(fs.read('/root/folder/file2.txt')) # Output: 'Second File' fs.update('/root/file1.txt', 'Updated Content') print(fs.read('/root/file1.txt')) # Output: 'Updated Content' fs.delete('/root/file1.txt') print(fs.read('/root/file1.txt')) # Output: None \`\`\` This testing code demonstrates creating, reading, updating, and deleting files in the simulated file system. Ensure your implementation passes these tests.","solution":"from typing import Optional class FileSystem: def __init__(self): self.files = {} def create(self, path: str, content: str) -> None: Creates or overwrites a file at the specified path with the given content. self.files[path] = content def read(self, path: str) -> Optional[str]: Reads the content of a file at the specified path. Returns the content of the file if it exists, otherwise returns None. return self.files.get(path, None) def update(self, path: str, content: str) -> None: Updates the content of an existing file at the specified path. If the file does not exist, no action is performed. if path in self.files: self.files[path] = content def delete(self, path: str) -> None: Deletes the file at the specified path. If the file does not exist, no action is performed. if path in self.files: del self.files[path]"},{"question":"Write a Python function that takes a list of strings and returns a new list containing only the strings that are palindromes. A string is considered a palindrome if it reads the same forward and backward, case-sensitive. Do not use any built-in Python functions for reversing strings.","solution":"def is_palindrome(s): Helper function to check if a string is a palindrome. length = len(s) for i in range(length // 2): if s[i] != s[length - 1 - i]: return False return True def filter_palindromes(strings): Returns a list containing only the palindromes from the input list of strings. palindromes = [] for string in strings: if is_palindrome(string): palindromes.append(string) return palindromes"},{"question":"In a particular city, the average monthly rent for a two-bedroom apartment is observed to be 1,200 with a standard deviation of 150. Suppose you are researching rental costs in this city and randomly select a sample of 16 two-bedroom apartments. What is the approximate standard deviation of the mean rental cost for these 16 apartments? Choose from the following options: A) 37.50, B) 75, C) 150, or D) 300.","solution":"def standard_deviation_of_sample_mean(stdev_population, sample_size): Returns the standard deviation of the sample mean. :param stdev_population: Standard deviation of the population :param sample_size: Size of the sample :return: Standard deviation of the sample mean return stdev_population / (sample_size ** 0.5) # Given parameters stdev_population = 150 sample_size = 16 # Calculate the standard deviation of the sample mean std_dev_sample_mean = standard_deviation_of_sample_mean(stdev_population, sample_size) std_dev_sample_mean"},{"question":"Write a function to flatten a list that can contain sub-lists and single elements, regardless of their depth. The function should return a single list with all the elements flattened in the same order as they were found in the sub-lists. As part of your solution, provide a test case that might commonly cause errors for beginners and explain why it could be problematic. Example: Input: list = [1, [2, [3, 4], 5], 6, [[7]], 8] Output: [1, 2, 3, 4, 5, 6, 7, 8]","solution":"def flatten_list(nested_list): Flatten a list containing sub-lists into a single list. Arguments: nested_list -- list that can contain nested sub-lists Returns: A single, flattened list with all the elements. flat_list = [] for element in nested_list: if isinstance(element, list): flat_list.extend(flatten_list(element)) else: flat_list.append(element) return flat_list"},{"question":"Create a function that takes two lists of integers and returns a new list containing only the integers that are present in both input lists, without duplicates. Ensure that the order of integers in the resulting list follows their order of first appearance in the first input list.","solution":"def intersection_list(list1, list2): Returns a list of integers that are present in both input lists, without duplicates, and in the order of their appearance in the first list. set2 = set(list2) result = [] seen = set() for num in list1: if num in set2 and num not in seen: result.append(num) seen.add(num) return result"},{"question":"Consider a transportation company that needs to optimize its fleet usage by tracking the number of operational buses. Each bus is either marked as \\"active\\" if it is on the road and serving a route or \\"inactive\\" when parked at the depot. Write a function that also groups buses by their route number. You are to implement a function \`group_and_count_buses\` that takes a list of dictionaries, where each dictionary represents a bus. Each dictionary contains the bus's ID, status, and route number (if the bus is active). Your function should return a tuple with two elements: 1. The total count of active buses. 2. A dictionary that groups buses by their route number. Make sure to handle cases where there might be no active buses for a given route. Function Signature: \`\`\`python def group_and_count_buses(buses: List[Dict]) -> Tuple[int, Dict[int, List[int]]]: pass \`\`\` Input: - List of dictionaries where each dictionary contains: - \\"id\\": an integer representing the bus ID. - \\"status\\": a string that is either \\"active\\" or \\"inactive\\". - \\"route_number\\": an integer representing the route number if the bus is active (absent if the bus is inactive). Output: - A tuple containing: 1. An integer representing the total number of active buses. 2. A dictionary where keys are route numbers and values are lists of bus IDs on those routes. Example: \`\`\`python buses = [ {\\"id\\": 1, \\"status\\": \\"inactive\\"}, {\\"id\\": 2, \\"status\\": \\"active\\", \\"route_number\\": 101}, {\\"id\\": 3, \\"status\\": \\"active\\", \\"route_number\\": 102}, {\\"id\\": 4, \\"status\\": \\"inactive\\"}, {\\"id\\": 5, \\"status\\": \\"active\\", \\"route_number\\": 101}, ] print(group_and_count_buses(buses)) \`\`\` Output: \`\`\` (3, {101: [2, 5], 102: [3]}) \`\`\`","solution":"from typing import List, Dict, Tuple def group_and_count_buses(buses: List[Dict]) -> Tuple[int, Dict[int, List[int]]]: active_count = 0 route_groups = {} for bus in buses: if bus['status'] == 'active': active_count += 1 route_number = bus['route_number'] bus_id = bus['id'] if route_number in route_groups: route_groups[route_number].append(bus_id) else: route_groups[route_number] = [bus_id] return (active_count, route_groups)"},{"question":"You are tasked with creating an event management system. This system will handle registrations for multiple events, each event having a title, a date, and a limit on the number of participants. Participants can register for multiple events but not more than one slot per event. # Function Requirements: - Implement a class \`Event\` with the following attributes: - title (string) - date (string in the format 'YYYY-MM-DD') - participant_limit (integer) - participants (list of strings) and the following methods: - \`__init__(self, title, date, participant_limit)\`: to initialize the event. - \`register_participant(self, participant_name)\`: to register a participant, ensuring the limit is not exceeded. - Implement a class \`EventManager\` responsible for managing the events with the following methods: - \`__init__(self)\`: to initialize the EventManager with an empty list of events. - \`add_event(self, event)\`: to add a new event. - \`register(self, event_title, participant_name)\`: to register a participant for an event. If the event does not exist, raise an appropriate exception. - \`participant_events(self, participant_name)\`: to return a list of event titles the participant is registered for. # Constraints: - The date will always be a valid date in the format 'YYYY-MM-DD'. - The participant_limit will be a positive integer. - Participant names will be unique strings. # Example: \`\`\`python # Initializing events event1 = Event(\\"Python Workshop\\", \\"2023-10-10\\", 30) event2 = Event(\\"Data Science Conference\\", \\"2023-11-10\\", 100) # Initializing EventManager manager = EventManager() manager.add_event(event1) manager.add_event(event2) # Registering participants manager.register(\\"Python Workshop\\", \\"Alice\\") manager.register(\\"Python Workshop\\", \\"Bob\\") manager.register(\\"Data Science Conference\\", \\"Alice\\") # Getting participant events alice_events = manager.participant_events(\\"Alice\\") print(alice_events) # Output: ['Python Workshop', 'Data Science Conference'] \`\`\` Implement the \`Event\` and \`EventManager\` classes as per the requirements.","solution":"class Event: def __init__(self, title, date, participant_limit): self.title = title self.date = date self.participant_limit = participant_limit self.participants = [] def register_participant(self, participant_name): if len(self.participants) < self.participant_limit: if participant_name not in self.participants: self.participants.append(participant_name) return True return False class EventManager: def __init__(self): self.events = [] def add_event(self, event): self.events.append(event) def register(self, event_title, participant_name): for event in self.events: if event.title == event_title: if event.register_participant(participant_name): return True else: raise Exception(\\"Registration failed. Either the event is full or the participant is already registered.\\") raise Exception(\\"Event not found.\\") def participant_events(self, participant_name): registered_events = [] for event in self.events: if participant_name in event.participants: registered_events.append(event.title) return registered_events"},{"question":"You are developing a Python application to handle customer support ticketing. Each ticket has a unique ID, a description, and a priority level (low, medium, high). The application should include a function that allows you to add a new ticket, retrieve the highest-priority ticket, and remove a ticket once it has been addressed. How would you implement a system that optimally handles these ticket operations (adding, retrieving the highest-priority, and removing tickets) considering efficiency in mind? Which data structures and methods/objects in Python should you use to ensure that the primary operations (insertion, retrieval, and deletion) are performed efficiently? Provide a brief explanation along with the implementation.","solution":"import heapq class Ticket: def __init__(self, ticket_id, description, priority): self.ticket_id = ticket_id self.description = description self.priority = self._priority_to_int(priority) def _priority_to_int(self, priority): if priority == \\"high\\": return 1 elif priority == \\"medium\\": return 2 elif priority == \\"low\\": return 3 else: raise ValueError(\\"Invalid priority level\\") def __lt__(self, other): return self.priority < other.priority class TicketManager: def __init__(self): self.heap = [] def add_ticket(self, ticket_id, description, priority): ticket = Ticket(ticket_id, description, priority) heapq.heappush(self.heap, ticket) def get_highest_priority_ticket(self): if not self.heap: return None return self.heap[0] def remove_ticket(self, ticket_id): for i in range(len(self.heap)): if self.heap[i].ticket_id == ticket_id: self.heap.pop(i) heapq.heapify(self.heap) return raise ValueError(\\"Ticket not found\\")"},{"question":"Given a list of integers, write a Python function that returns a new list containing the factorial of each integer in the original list. Your function should handle any possible exceptions caused by non-integer elements. Ensure that your function processes the list efficiently to avoid performance issues with large numbers or large lists. To add to the challenge, identify and correct the errors in the sample code provided: \`\`\`python def calculate_factorials(numbers): def factorial(n): return 1 if n == 0 else n * factorial(n - 1) return [factorial(num) for num in numbers] numbers = [5, 3, 'a', None] print(calculate_factorials(numbers)) \`\`\` Example: \`\`\` Input = [3, 4] Output = [6, 24] \`\`\`","solution":"import math def calculate_factorials(numbers): Returns a new list containing the factorial of each integer in the original list. Non-integer elements are skipped. def factorial(n): return math.factorial(n) factorial_list = [] for num in numbers: try: result = factorial(int(num)) factorial_list.append(result) except (ValueError, TypeError): continue return factorial_list"},{"question":"Sarah decided to share her collection of 60 apples equally among her 4 friends. However, she also wants to keep a certain number of apples for herself, which is exactly 2 more than the number of apples each friend gets. Can you determine how many apples Sarah keeps for herself?","solution":"def apples_kept_by_sarah(total_apples, num_friends): Returns the number of apples Sarah keeps for herself after sharing the apples among her friends. Sarah keeps 2 more apples than each friend. apples_per_friend = total_apples // (num_friends + 1) # Sarah is considered as one additional person apples_sarah_keeps = apples_per_friend + 2 return apples_sarah_keeps # Specific case def sarahs_apples(): return apples_kept_by_sarah(60, 4)"},{"question":"<p>Given an array of integers, a subarray is a contiguous part of the array. The product of a subarray is the result of multiplying all elements within that subarray. Your task is to find the maximum product of any subarray within a given array.</p> <p>Write a function <code>maxSubarrayProduct</code> that takes an array of integers as input and returns the maximum product of any subarray. You should consider both positive and negative integers in the array, and handle cases where the array contains zeros.</p> <p><b>Input:</b></p> <ul> <li>An array <code>nums</code> of integers, where <code>1 <= nums.length <= 10^4</code> and <code>-10 <= nums[i] <= 10</code>.</li> </ul> <p><b>Output:</b></p> <ul> <li>An integer representing the maximum product of any subarray.</li> </ul> <p><b>Example:</b></p> <pre> maxSubarrayProduct([2, 3, -2, 4]) // returns 6 // Explanation: The subarray [2, 3] has the maximum product 6. maxSubarrayProduct([-2, 0, -1]) // returns 0 // Explanation: The subarray [0] has the maximum product 0. </pre> <p><b>Note:</b> Consider implementing a solution with O(n) time complexity.</p>","solution":"def maxSubarrayProduct(nums): if not nums: return 0 max_so_far = nums[0] min_so_far = nums[0] result = max_so_far for i in range(1, len(nums)): current = nums[i] temp_max = max(current, max_so_far * current, min_so_far * current) min_so_far = min(current, max_so_far * current, min_so_far * current) max_so_far = temp_max result = max(result, max_so_far) return result"},{"question":"Write a function to analyze the frequencies of characters in a given string and classify it into three categories. The input string will consist of lowercase and uppercase letters, digits, and special characters. Based on the character frequencies, the function should determine and return which of the following categories the string belongs to: - \\"Balanced\\": If the number of lowercase letters, uppercase letters, digits, and special characters are approximately equal. (The count of each type should not differ by more than 1.) - \\"Dominant\\": If one type of character (lowercase, uppercase, digits, or special characters) appears more than half the total number of characters in the string. - \\"Unbalanced\\": If the string does not meet the criteria for being \\"Balanced\\" or \\"Dominant\\". The function should have the following signature: \`\`\`python def categorize_string(input_string: str) -> str: # Your implementation here \`\`\` **Examples:** \`\`\`python categorize_string(\\"aA1!aA1!a!\\") # Output: \\"Balanced\\" categorize_string(\\"aaaaAAA111!!!\\") # Output: \\"Balanced\\" categorize_string(\\"aaaaAAAaaa!!!\\") # Output: \\"Dominant\\" categorize_string(\\"aaaaAAA111!\\") # Output: \\"Unbalanced\\" \`\`\`","solution":"def categorize_string(input_string: str) -> str: num_lower = sum(1 for c in input_string if c.islower()) num_upper = sum(1 for c in input_string if c.isupper()) num_digits = sum(1 for c in input_string if c.isdigit()) num_specials = len(input_string) - num_lower - num_upper - num_digits total_chars = len(input_string) max_count = max(num_lower, num_upper, num_digits, num_specials) min_count = min(num_lower, num_upper, num_digits, num_specials) if max_count > total_chars / 2: return \\"Dominant\\" if max_count - min_count <= 1: return \\"Balanced\\" return \\"Unbalanced\\""},{"question":"Define a function that checks if a string complies with a set of formatting rules: def is_valid_format(s): This function takes a string s and returns True if it adheres to the following rules: 1. The string must start with a capital letter. 2. The string must contain at least one digit. 3. The string must end with a punctuation mark (.,!,?) Here are some examples: is_valid_format(\\"Hello123.\\") -> True is_valid_format(\\"hello123.\\") -> False is_valid_format(\\"Hello123\\") -> False is_valid_format(\\"Hello\\") -> False is_valid_format(\\"Hello123!\\") -> True","solution":"def is_valid_format(s): This function takes a string s and returns True if it adheres to the following rules: 1. The string must start with a capital letter. 2. The string must contain at least one digit. 3. The string must end with a punctuation mark (.,!,?) Parameters: s (str): Input string to check against the formatting rules. Returns: bool: True if the string adheres to all rules, otherwise False. if not s: return False if not s[0].isupper(): return False if not any(char.isdigit() for char in s): return False if s[-1] not in '.!?': return False return True"},{"question":"You are given a 2D grid consisting of '1's (land) and '0's (water). An island is formed by connecting adjacent lands horizontally or vertically. You are to write a function that counts the number of islands in the grid. A grid cell is considered part of one island if it is a '1' and is connected horizontally or vertically to other cells that are '1's. Diagonal connections are not considered. For example, the grid: \`\`\` 11110 11010 11000 00000 \`\`\` has exactly one island, while the grid: \`\`\` 11000 11000 00100 00011 \`\`\` has three islands. Your function signature should be: \`\`\`python def count_islands(grid): # Your implementation here pass \`\`\` Ensure your solution is optimized for grids of varying sizes, typically ranging from 3x3 to 10x10. Consider edge cases, such as grids consisting entirely of water or a single large island. Implement your solution in the programming language of your choice.","solution":"def count_islands(grid): Given a 2D grid of '1's (land) and '0's (water), count the number of islands. An island is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 rows, cols = len(grid), len(grid[0]) def dfs(x, y): Depth-First Search to mark all parts of the island starting from (x, y) if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] != '1': return grid[x][y] = '0' # Mark the land cell as visited by setting it to '0' directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # (down, up, right, left) for dx, dy in directions: dfs(x + dx, y + dy) island_count = 0 for i in range(rows): for j in range(cols): if grid[i][j] == '1': island_count += 1 dfs(i, j) return island_count"},{"question":"Create a function \`find_anagrams\` that takes a list of words and returns a dictionary where the keys are the words from the original list and the values are lists of anagrams from the same list (including the word itself). For example, given the list \`[\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"goo\\"])\`, the function should return \`{'listen': ['listen', 'silent', 'enlist'], 'silent': ['listen', 'silent', 'enlist'], 'enlist': ['listen', 'silent', 'enlist'], 'google': ['google'], 'goo': ['goo']}\`. Ensure the function handles varying letter cases and returns anagrams in the same letter case as they appear in the input list.","solution":"def find_anagrams(words): Returns a dictionary where keys are words from the original list and values are lists of anagrams from the same list. anagrams = {} for word in words: # Normalize letters to lowercase and sort sorted_word = ''.join(sorted(word.lower())) if sorted_word not in anagrams: anagrams[sorted_word] = [] anagrams[sorted_word].append(word) result = {word: anagrams[''.join(sorted(word.lower()))] for word in words} return result"},{"question":"Create a function that calculates the longest increasing subsequence that can be derived from a given list of integers. The subsequence does not need to be contiguous, but each element must be larger than the preceding one. The function should return the length of this subsequence. Ensure the function runs efficiently for longer lists. For example, if given the list [10, 9, 2, 5, 3, 7, 101, 18], the function would return 4, corresponding to the subsequence [2, 3, 7, 101]. Start with the following syntax: def lengthOfLIS(nums):","solution":"def lengthOfLIS(nums): Returns the length of the longest increasing subsequence in the list of integers nums. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Write a function that takes a list of integers and an integer k and returns the k most frequent elements in the list. If there is a tie for the k-th frequent element, include all tied elements in the result. The function should return the elements in ascending order. If the list is empty or the value of k is 0, return an empty list.","solution":"from collections import Counter def k_most_frequent(nums, k): Returns the k most frequent elements in the list 'nums'. If there is a tie for the k-th frequent element, it includes all tied elements in the result. The result is returned in ascending order. if not nums or k == 0: return [] count = Counter(nums) freq = count.most_common() # If k is greater than the number of unique elements, reduce it k = min(k, len(freq)) # Frequent elements sorted by frequency and then by value freq.sort(key=lambda x: (-x[1], x[0])) result = [] current_freq = None for num, cnt in freq: if current_freq is None: current_freq = cnt if len(result) < k or current_freq == cnt: result.append(num) else: break return sorted(result)"},{"question":"# Implementation of a Custom Data Structure You are to implement a custom data structure called \`CustomStack\` which simulates a stack but with some additional functionality. The \`CustomStack\` should support the following operations: 1. **push(value: int)**: Adds the given value onto the stack. 2. **pop() -> int**: Removes and returns the element on the top of the stack. If the stack is empty, return -1. 3. **increment(k: int, val: int)**: Increment the bottom \`k\` elements of the stack by \`val\`. If there are fewer than \`k\` elements, increment all the elements. The stack can have a maximum size, defined during initialization. If more elements are added when the stack is full, those elements should be ignored. **Constraints:** - Elements of the stack and the value \`val\` are integers. - Maximum size of the stack is a positive integer. **Example 1:** \`\`\` customStack = CustomStack(3); # Stack is empty [] customStack.push(1); # Stack becomes [1] customStack.push(2); # Stack becomes [1, 2] customStack.pop(); # return 2 --> Stack becomes [1] customStack.push(2); # Stack becomes [1, 2] customStack.push(3); # Stack becomes [1, 2, 3] customStack.push(4); # Stack still [1, 2, 3], don't add 4 customStack.increment(5, 100); # Stack becomes [101, 102, 103] customStack.increment(2, 100); # Stack becomes [201, 202, 103] customStack.pop(); # return 103 --> Stack becomes [201, 202] customStack.pop(); # return 202 --> Stack becomes [201] customStack.pop(); # return 201 --> Stack becomes [] \`\`\` **Example 2:** \`\`\` customStack = CustomStack(2); # Stack is empty [] customStack.push(1); # Stack becomes [1] customStack.push(2); # Stack becomes [1, 2] customStack.push(3); # Stack still [1, 2], don't add 3 customStack.increment(2, 1); # Stack becomes [2, 3] customStack.increment(1, 100); # Stack becomes [102, 3] customStack.pop(); # return 3 --> Stack becomes [102] customStack.pop(); # return 102 --> Stack becomes [] customStack.pop(); # return -1 --> Stack is empty \`\`\` Write the class \`CustomStack\` and the methods \`push\`, \`pop\`, and \`increment\` based on the above specifications.","solution":"class CustomStack: def __init__(self, maxSize: int): self.stack = [] self.maxSize = maxSize def push(self, value: int) -> None: if len(self.stack) < self.maxSize: self.stack.append(value) def pop(self) -> int: if not self.stack: return -1 return self.stack.pop() def increment(self, k: int, val: int) -> None: for i in range(min(k, len(self.stack))): self.stack[i] += val"},{"question":"Write a function that takes a string containing a mathematical expression and returns the evaluated result. The expression can contain integers, addition (+), and multiplication (*) operations, and should follow standard operator precedence (i.e., multiplication before addition). You cannot use the \`eval\` function. For example, given the input \`\\"2+3*4\\"\`, the output should be \`14\`.","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing integers, addition (+), and multiplication (*). The function follows standard operator precedence (i.e., multiplication before addition). def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == '+': values.append(left + right) elif operator == '*': values.append(left * right) operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(num) continue elif expression[i] in \\"+*\\": while (operators and operators[-1] in \\"*\\"): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Write a function that processes a list of strings where each string represents an arithmetic expression. The function should evaluate each string expression, handle potential errors (like division by zero, invalid operations, or incorrect syntax), and return a list of results. Ignore any expressions containing errors. Also, assume that the list can contain nested lists of string expressions up to a depth of \`d\`. def evaluate_expressions(expr_list, d): ''' This function evaluates a list of arithmetic expressions and returns a list of results, ignoring any expressions with errors.''' results = [] for expr in expr_list: try: result = eval(expr) # Using eval for simplicity; careful with real-world use cases results.append(result) except (ZeroDivisionError, SyntaxError, TypeError): continue return results","solution":"def evaluate_expressions(expr_list, d): Evaluates a list of arithmetic expressions, handling potential errors. Parameters: expr_list (list): A list of arithmetic expressions as strings. d (int): The depth of the nested list. Returns: list: A list of evaluation results, with erroneous expressions ignored. results = [] def evaluate(expr): Evaluates a single expression and returns its result. try: return eval(expr) except (ZeroDivisionError, SyntaxError, TypeError, NameError): return None def process_list(lst, depth): Recursively process each list up to the specified depth. if depth < 0: return for item in lst: if isinstance(item, list): process_list(item, depth - 1) elif isinstance(item, str): result = evaluate(item) if result is not None: results.append(result) process_list(expr_list, d) return results"},{"question":"Write a Python function that reads a list of tuples, where each tuple contains a date string in the format 'YYYY-MM-DD' and a timezone string (e.g., 'Europe/London'). The function should sort this list of tuples by the date in descending order and convert each date to the 'US/Eastern' timezone. The output should be a new list with the converted date strings maintaining the original tuple structure. Ensure that the function correctly handles various edge cases such as invalid date formats or non-existent timezones by logging appropriate error messages.","solution":"import pytz from datetime import datetime import logging def convert_and_sort_dates(date_tuples): Sorts a list of tuples by the date in descending order and converts each date to the 'US/Eastern' timezone. Parameters: date_tuples (list of tuples): List of tuples with a date string and timezone string Returns: List of tuples: Sorted and converted dates maintaining the original tuple structure eastern_tz = pytz.timezone('US/Eastern') converted_dates = [] for date_str, tz_str in date_tuples: try: # Localize the date with given timezone local_tz = pytz.timezone(tz_str) local_date = local_tz.localize(datetime.strptime(date_str, '%Y-%m-%d')) # Convert to US/Eastern timezone eastern_date = local_date.astimezone(eastern_tz) converted_dates.append((eastern_date.strftime('%Y-%m-%d'), 'US/Eastern')) except (pytz.UnknownTimeZoneError, ValueError) as e: logging.error(f\\"Error processing {date_str} in timezone {tz_str}: {e}\\") # Sort dates in descending order converted_dates.sort(key=lambda x: datetime.strptime(x[0], '%Y-%m-%d'), reverse=True) return converted_dates"},{"question":"Design a function that takes two lists of integers as input and returns a list containing the common elements between the two lists, without duplicates. The order of elements in the resulting list should reflect their first appearance in the input lists. list1 = [1, 2, 3, 4, 4, 5] list2 = [4, 4, 5, 6, 7]","solution":"def common_elements(list1, list2): Returns a list of common elements between list1 and list2 without duplicates. The order of elements in the resulting list reflects their first appearance in input lists. set1 = set(list1) set2 = set(list2) common_set = set1 & set2 result = [] seen = set() for element in list1 + list2: if element in common_set and element not in seen: result.append(element) seen.add(element) return result"},{"question":"Implement a text-based Minesweeper game. The game should use a two-dimensional list to represent the board where mines are marked by '*'. Allow the user to input the dimensions of the board (M x N) and the number of mines. After placing the mines randomly, the board should display the number of adjacent mines for each non-mine cell. Write a function that updates the board based on the user's guess, revealing the cell and any adjacent cells with no mines. Continue the game until the user either steps on a mine (loses) or reveals all non-mine cells (wins). # Requirements 1. Write a function to create the board with the given dimensions and number of mines. 2. Implement the logic to populate the board with mines randomly. 3. Calculate the number of adjacent mines for each non-mine cell. 4. Write a function to process the user's move, revealing cells and updating the board state. 5. Provide the mechanism to check if the player has lost (stepped on a mine) or won (revealed all non-mine cells). 6. Print the board after each move indicating the cells revealed so far. # Example \`\`\`python # Example usage: board = create_board(5, 5, 5) # 5x5 board with 5 mines print_board(board) # Move simulation: move_result = make_move(board, row, col) print_board(board, reveal=True) # reveal=True for showing all cells or based on the move's result. \`\`\`","solution":"import random def create_board(rows, cols, mines): Creates a Minesweeper board of given dimensions with a specified number of mines. # Initialize an empty board board = [[0 for _ in range(cols)] for _ in range(rows)] # Place mines randomly mines_placed = 0 while mines_placed < mines: r = random.randint(0, rows - 1) c = random.randint(0, cols - 1) if board[r][c] != '*': board[r][c] = '*' mines_placed += 1 update_adjacent_cells(board, r, c, rows, cols) return board def update_adjacent_cells(board, row, col, rows, cols): Updates the count of adjacent mines for the cells surrounding a mine. for i in range(-1, 2): for j in range(-1, 2): r = row + i c = col + j if 0 <= r < rows and 0 <= c < cols and board[r][c] != '*': board[r][c] += 1 def print_board(board, reveal=False): Prints the Minesweeper board. If reveal is True, all cells are shown. for row in board: print(\\" \\".join(str(cell) if cell == '*' or reveal else '.' for cell in row)) def make_move(board, revealed, row, col): Processes the user's move, revealing cells and updating the board state. rows, cols = len(board), len(board[0]) if board[row][col] == '*': return 'lost' reveal_cells(board, revealed, row, col, rows, cols) if all(revealed[i][j] or board[i][j] == '*' for i in range(rows) for j in range(cols)): return 'won' return 'continue' def reveal_cells(board, revealed, row, col, rows, cols): Reveals cells starting from the given cell. If the cell has no adjacent mines, it recursively reveals its neighbors. if not (0 <= row < rows and 0 <= col < cols) or revealed[row][col]: return revealed[row][col] = True if board[row][col] == 0: for i in range(-1, 2): for j in range(-1, 2): if i != 0 or j != 0: reveal_cells(board, revealed, row + i, col + j, rows, cols) def init_revealed_board(rows, cols): Initializes a board to keep track of revealed cells. return [[False for _ in range(cols)] for _ in range(rows)]"},{"question":"Write a function that takes a list of integers and an integer \`k\`, and returns a list of integers from the original list where each element is either divisible by \`k\` or is itself \`k\`. The returned list should maintain the order of elements from the original list.","solution":"def filter_divisibles_and_k(nums, k): Returns a list of integers from the original list where each element is either divisible by \`k\` or is itself \`k\`. Parameters: nums (list): List of integers. k (int): The integer k. Returns: list: A list of integers satisfying the conditions. result = [] for num in nums: if num == k or num % k == 0: result.append(num) return result"},{"question":"Write a function that takes a list of words and a target word length. The function should return a list of all possible words that can be constructed using only the letters from the original list of words and where each word meets the target word length. The returned list of words should contain no duplicate entries and be sorted in alphabetical order. Function Signature: \`\`\`python def generate_words(words: List[str], target_length: int) -> List[str]: pass \`\`\` # Constraints: 1. All words in the input list contain only lowercase alphabetic characters. 2. The length of the input list of words will not exceed 1000 words. 3. Each word in the input list will have a maximum length of 15 characters. # Example: \`\`\`python input_words = [\\"cat\\", \\"dog\\", \\"bird\\", \\"mouse\\"] target_length = 3 output = generate_words(input_words, target_length) print(output) # Output: [\\"act\\", \\"bag\\", \\"bad\\", \\"big\\", \\"dig\\", \\"dog\\", \\"dot\\", \\"mug\\", \\"out\\", \\"rid\\", \\"sit\\", \\"tod\\", \\"tom\\"] \`\`\` # Explanation: Given the list of words [\\"cat\\", \\"dog\\", \\"bird\\", \\"mouse\\"], and the target length 3, the function should generate a list of all possible unique 3-letter words using the characters found in any of the words. The result should include words like \\"act\\", \\"bag\\", \\"bad\\", etc., and should be sorted alphabetically without duplicates. Design unit tests to validate your solution. Your tests should cover a variety of scenarios including: - An empty input list. - Scenarios where no valid words can be generated. - Different target lengths. - Duplicate characters in the input words.","solution":"from typing import List from itertools import permutations def generate_words(words: List[str], target_length: int) -> List[str]: # Concatenate all the words into one string of characters all_chars = ''.join(words) # Use permutations to get all possible combinations of the given length possible_words = {''.join(p) for p in permutations(all_chars, target_length)} # Return the sorted list of unique possible words return sorted(possible_words)"},{"question":"Write a Python function that takes a string representing a sentence as input and returns the most frequent word in the sentence. If there is a tie for the most frequent word, return any one of the most frequent words. The input string will contain only alphabetic characters and spaces, and will have at least one word. For example, for the input string \\"the quick brown fox jumps over the lazy dog the\\", the function should return \\"the\\".","solution":"from collections import Counter def most_frequent_word(sentence): Returns the most frequent word in the sentence. If there is a tie, returns any of the most frequent words. words = sentence.split() word_counts = Counter(words) most_common_word, _ = word_counts.most_common(1)[0] return most_common_word"},{"question":"Your task is to implement a data structure from scratch that represents a min-heap. A min-heap is a binary tree where the value of each node is less than or equal to the values of its children, with the property that the smallest value is always at the root. # Requirements: 1. **Initialization**: The heap should be initialized as an empty list. 2. **Insert**: A function \`insert(self, val)\` that inserts a new value into the heap while maintaining the heap property. 3. **Extract Min**: A function \`extract_min(self)\` that removes and returns the smallest value from the heap while maintaining the heap property. 4. **Peek Min**: A function \`peek_min(self)\` that returns the smallest value without removing it. 5. **Size**: A function \`size(self)\` that returns the number of elements currently in the heap. # Example Usage: \`\`\`python heap = MinHeap() heap.insert(10) heap.insert(7) heap.insert(15) heap.insert(5) print(heap.peek_min()) # Outputs: 5 print(heap.extract_min()) # Outputs: 5 print(heap.peek_min()) # Outputs: 7 print(heap.size()) # Outputs: 3 \`\`\` # Constraints: - Do not use any libraries or built-in functions that implement heap data structures. - Aim to achieve O(log n) time complexity for the \`insert\` and \`extract_min\` operations, and O(1) time complexity for \`peek_min\` and \`size\`. Implement the \`MinHeap\` class with the described methods.","solution":"class MinHeap: def __init__(self): self.heap = [] def insert(self, val): Inserts a value into the min-heap. self.heap.append(val) self._heapify_up(len(self.heap) - 1) def extract_min(self): Removes and returns the smallest value from the min-heap. if self.size() == 0: return None min_val = self.heap[0] if self.size() > 1: self.heap[0] = self.heap.pop() self._heapify_down(0) else: self.heap.pop() return min_val def peek_min(self): Returns the smallest value without removing it. if self.size() == 0: return None return self.heap[0] def size(self): Returns the number of elements currently in the heap. return len(self.heap) def _heapify_up(self, index): Maintains the heap property from the given index upwards. parent_index = (index - 1) // 2 if index > 0 and self.heap[index] < self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._heapify_up(parent_index) def _heapify_down(self, index): Maintains the heap property from the given index downwards. left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 smallest = index if left_child_index < self.size() and self.heap[left_child_index] < self.heap[smallest]: smallest = left_child_index if right_child_index < self.size() and self.heap[right_child_index] < self.heap[smallest]: smallest = right_child_index if smallest != index: self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index] self._heapify_down(smallest)"},{"question":"You are given a list of strings representing sports scores in the format \\"TeamA vs TeamB: ScoreA-ScoreB\\". Write a Python function that takes this list and returns a dictionary with team names as keys and a dictionary of their wins, losses, and draws as the values. Here's the format of the dictionary you need to create: \`\`\`python { \\"TeamA\\": { \\"wins\\": X, \\"losses\\": Y, \\"draws\\": Z }, \\"TeamB\\": { \\"wins\\": A, \\"losses\\": B, \\"draws\\": C }, ... } \`\`\` # Input - A list of strings, \`scores\`, where each string represents a match's outcome in the format \\"TeamA vs TeamB: ScoreA-ScoreB\\". # Output - A dictionary with each team's name as keys, and each value itself a dictionary with keys \\"wins\\", \\"losses\\", and \\"draws\\" indicating the respective counts. # Example \`\`\`python scores = [ \\"TeamA vs TeamB: 1-0\\", \\"TeamA vs TeamC: 2-2\\", \\"TeamB vs TeamC: 3-1\\" ] print(calculate_results(scores)) \`\`\` Expected output: \`\`\`python { \\"TeamA\\": {\\"wins\\": 1, \\"losses\\": 0, \\"draws\\": 1}, \\"TeamB\\": {\\"wins\\": 1, \\"losses\\": 1, \\"draws\\": 0}, \\"TeamC\\": {\\"wins\\": 0, \\"losses\\": 1, \\"draws\\": 1} } \`\`\` # Constraints - All Scores will be non-negative integers. - Team names will be unique and contain no spaces.","solution":"def calculate_results(scores): results = {} for score in scores: teams_and_scores = score.split(\\":\\") teams = teams_and_scores[0].split(\\" vs \\") scores = list(map(int, teams_and_scores[1].split(\\"-\\"))) team_a, team_b = teams score_a, score_b = scores # Initialize the team results if they do not exist yet if team_a not in results: results[team_a] = {\\"wins\\": 0, \\"losses\\": 0, \\"draws\\": 0} if team_b not in results: results[team_b] = {\\"wins\\": 0, \\"losses\\": 0, \\"draws\\": 0} if score_a > score_b: results[team_a][\\"wins\\"] += 1 results[team_b][\\"losses\\"] += 1 elif score_a < score_b: results[team_a][\\"losses\\"] += 1 results[team_b][\\"wins\\"] += 1 else: results[team_a][\\"draws\\"] += 1 results[team_b][\\"draws\\"] += 1 return results"},{"question":"Write a function that checks if a given string is an anagram of another string. The function should ignore spaces, punctuation, and capitalization. The two input strings will contain only alphabetic characters, spaces, and basic punctuation marks. Ensure the function handles edge cases such as empty strings or strings with no alphabetic characters.","solution":"def is_anagram(str1, str2): Check if str1 is an anagram of str2, ignoring spaces, punctuation, and capitalization. # Removing spaces, punctuation, and converting to lowercase filtered_str1 = ''.join(filter(str.isalpha, str1)).lower() filtered_str2 = ''.join(filter(str.isalpha, str2)).lower() # Sorting and comparing return sorted(filtered_str1) == sorted(filtered_str2)"},{"question":"Write a function that takes a string as input and returns a new string with the characters sorted in ascending order. The function should be able to handle both uppercase and lowercase letters, as well as special characters, but it should sort them based on their ASCII values. Additionally, explain the time complexity of your sorting approach.","solution":"def sort_string(s): Returns a new string with the characters from the input string sorted in ascending order based on their ASCII values. return ''.join(sorted(s)) # The sorted() function in Python uses Timsort algorithm which has a time complexity of O(n log n), # where n is the length of the input string."},{"question":"Write a Python function to find the second smallest number in a given list of integers. The function should handle lists with duplicate values and return an error message if the list has fewer than two distinct elements. For example, for the input [4, 2, 2, 8, 7, 6], the function should correctly identify 4 as the second smallest distinct number.","solution":"def second_smallest(input_list): Returns the second smallest distinct number in the list. If fewer than two distinct elements are present, returns an error message. distinct_elements = list(set(input_list)) if len(distinct_elements) < 2: return \\"Error: List must contain at least two distinct elements\\" distinct_elements.sort() return distinct_elements[1]"},{"question":"Write a function in Python that takes a list of integers and returns a new list where each element at index i is the product of all the numbers in the original list except the one at index i. You must achieve this without using division and in O(n) time complexity. For example, given the list [1, 2, 3, 4], your function should return [24, 12, 8, 6]. Constraints: - You may assume that the input list will have at least two integers. - The integers in the list are guaranteed to be non-zero.","solution":"def product_except_self(nums): Returns a list such that each element at index i is the product of all the numbers in the original list except the one at index i. Achieved without using division and in O(n) time complexity. length = len(nums) # Initialize the result array where we'll store our results. result = [1] * length # Calculate the prefix products and store them in result. prefix_product = 1 for i in range(length): result[i] = prefix_product prefix_product *= nums[i] # Calculate the postfix products and multiply with the result. postfix_product = 1 for i in range(length - 1, -1, -1): result[i] *= postfix_product postfix_product *= nums[i] return result"},{"question":"Write a function that, given a list of student grades, returns the top three highest grades. If the list contains fewer than three grades, return the list itself sorted in descending order. The function should handle the edge case where the list is empty by returning an empty list. Input: [85, 92, 88, 73, 96, 81, 99] Output: [99, 96, 92]","solution":"def top_three_grades(grades): Returns the top three highest grades from the list. If the list contains fewer than three grades, return the list sorted in descending order. If the list is empty, return an empty list. if not grades: return [] sorted_grades = sorted(grades, reverse=True) return sorted_grades[:3]"},{"question":"Devise a coding solution to determine the greatest common divisor (GCD) of two provided integers, for example, a = 48 and b = 18.","solution":"def gcd(a, b): Returns the greatest common divisor (GCD) of a and b. while b: a, b = b, a % b return a"},{"question":"Given a singly linked list of integers, implement a function that reverses the list in place. You should modify the original list structure and return the head of the reversed linked list. Provide the function signature, complete with input parameters and return type. Here is the signature you should use: \`\`\`python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseLinkedList(head: ListNode) -> ListNode: # Your code here \`\`\` # Example **Input:** \`\`\` head = [1 -> 2 -> 3 -> 4 -> 5] \`\`\` **Output:** \`\`\` reversed_head = [5 -> 4 -> 3 -> 2 -> 1] \`\`\` # Constraints - The number of nodes in the list is in the range [0, 5000]. - -10^4 <= Node.val <= 10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseLinkedList(head: ListNode) -> ListNode: Reverses a singly linked list in place. :param head: ListNode - the head of the singly linked list :return: ListNode - the head of the reversed singly linked list prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Fix the following function to return the factorial of a given non-negative integer. The current implementation encounters a recursion depth error for values greater than 10. def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1) factorial(5)","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Uses an iterative approach to prevent recursion depth error. result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Design a function that accepts a list of integers and returns the greatest difference between any two elements in the list. The function should be efficient in terms of time complexity. For instance, given the list [3, 10, 5, 25], the greatest difference is 22 (i.e., 25 - 3).","solution":"def greatest_difference(nums): Returns the greatest difference between any two elements in the list. if not nums or len(nums) < 2: return 0 min_num = min(nums) max_num = max(nums) return max_num - min_num"},{"question":"Write a Python function that takes in a list of integers representing the sales figures of a product over a span of days. The function should return the maximum difference between any two sales figures, where the lower sales figure must come earlier in the list than the higher sales figure. Example: Input: [7, 1, 5, 3, 6, 4] Output: 5 (buy at 1, sell at 6)","solution":"def max_profit(sales): Returns the maximum difference between any two sales figures where the lower sales figure comes earlier in the list than the higher sales figure. if not sales or len(sales) < 2: return 0 min_price = sales[0] max_diff = 0 for price in sales[1:]: if price < min_price: min_price = price else: max_diff = max(max_diff, price - min_price) return max_diff"},{"question":"Implement a Library Management System that evaluates book borrowing feasibility based on user account status, book availability, and borrowing rules. The system should handle the following scenario: Users attempt to borrow books from the library. The program should determine if the borrowing request can be successfully processed. Consider the following conditions: 1. Users have different membership types (regular, premium), each with specified borrowing limits. 2. Some books may be reserved for specific membership types or may have a hold placed by other users. 3. A book requested by a user could already be checked out by another user. 4. Users can request to extend their borrowing period, subject to extension rules and book demand. Additionally, the system should handle unexpected scenarios such as: 1. A user attempting to borrow more books than their membership limit allows. 2. A reserved book becoming available due to a cancellation of a hold. 3. A user failing to return a borrowed book by the due date, restricting future borrowing until resolved. The system should dynamically adjust book availability, hold statuses, and borrowing limits to process user requests effectively. Implement the system in Python and ensure it can accurately assess borrowing feasibility under the given rules. The program should output whether the borrowing request can be processed ('approved') or not ('denied'), along with a brief reason if denied.","solution":"class Library: def __init__(self): self.books = {} self.membership_limits = {'regular': 5, 'premium': 10} self.users = {} def add_book(self, title, reserved_for=None): self.books[title] = { 'available': True, 'reserved_for': reserved_for, 'hold_by': None, 'checked_out_by': None } def add_user(self, name, membership_type): self.users[name] = { 'membership_type': membership_type, 'borrowed_books': [], 'blocked': False } def borrow_book(self, user, book_title): if user not in self.users: return ('denied', 'User not found') if book_title not in self.books: return ('denied', 'Book not found') user_data = self.users[user] book_data = self.books[book_title] if user_data['blocked']: return ('denied', 'User is blocked due to overdue books') if len(user_data['borrowed_books']) >= self.membership_limits[user_data['membership_type']]: return ('denied', 'Borrowing limit reached') if book_data['checked_out_by']: return ('denied', 'Book already checked out') if book_data['hold_by'] and book_data['hold_by'] != user: return ('denied', \\"Book is on hold by another user\\") if book_data['reserved_for'] and book_data['reserved_for'] != user_data['membership_type']: return ('denied', f\\"Book is reserved for {book_data['reserved_for']} members only\\") book_data['available'] = False book_data['checked_out_by'] = user user_data['borrowed_books'].append(book_title) return ('approved', '') def return_book(self, user, book_title): if book_title in self.users[user]['borrowed_books']: self.users[user]['borrowed_books'].remove(book_title) self.books[book_title]['checked_out_by'] = None self.books[book_title]['available'] = True return ('approved', '') return ('denied', 'Book was not borrowed by the user') def extend_borrowing(self, user, book_title): user_data = self.users[user] book_data = self.books[book_title] if book_data['checked_out_by'] != user: return ('denied', 'Book is not borrowed by the user') if book_data['hold_by']: return ('denied', 'Book is on hold by another user') return ('approved', '') def block_user(self, user): self.users[user]['blocked'] = True def unblock_user(self, user): self.users[user]['blocked'] = False"},{"question":"Write a function \`find_unique_elements\` that accepts a list of integers and returns a new list containing only the elements that are unique in the input list (i.e., elements that appear exactly once). Ensure that the output list maintains the original order of appearance in the input list. For example: \`\`\`python def find_unique_elements(lst): # Your code here # Sample Input input_list = [4, 5, 6, 7, 8, 4, 5, 9] # Sample Output output_list = [6, 7, 8, 9] \`\`\` # Constraints: - The function should handle an empty list and return an empty list. - The input list may contain negative integers, but no other data types.","solution":"def find_unique_elements(lst): Returns a new list containing only the elements that are unique in the input list. from collections import Counter element_counts = Counter(lst) unique_elements = [x for x in lst if element_counts[x] == 1] return unique_elements"},{"question":"Develop a Python function that generates all possible permutations of a given string. Ensure that your function handles strings with duplicate characters by including each unique permutation only once in the result.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the given string s. return sorted(set(''.join(p) for p in permutations(s)))"},{"question":"Write a function in Python to count the number of vowels in a given string. The function should be case-insensitive and should also handle both English vowels ('a', 'e', 'i', 'o', 'u') and optionally a set of additional vowels provided by the user. If no additional vowels are provided, the function should default to standard English vowels only. Implement appropriate error handling for invalid input types.","solution":"def count_vowels(s, additional_vowels=None): Counts the number of vowels in a given string. The function is case-insensitive and can handle both English vowels ('a', 'e', 'i', 'o', 'u') and optional additional vowels provided by the user. Args: s (str): The string to count vowels in. additional_vowels (iterable, optional): Additional vowels to be considered. Defaults to None. Returns: int: The number of vowels in the string. Raises: TypeError: If the input is not a string or the additional_vowels is not an iterable. if not isinstance(s, str): raise TypeError(\\"Input must be a string.\\") if additional_vowels is not None: if not hasattr(additional_vowels, \\"__iter__\\") or isinstance(additional_vowels, str): raise TypeError(\\"Additional vowels must be an iterable, but not a string.\\") vowels = set('aeiouAEIOU') if additional_vowels is not None: vowels.update(v.lower() for v in additional_vowels) vowels.update(v.upper() for v in additional_vowels) return sum(1 for char in s if char in vowels)"},{"question":"Use the Iris dataset from scikit-learn and implement a classification model using K-Nearest Neighbors (KNN). Evaluate the performance of your model using accuracy, precision, and recall metrics.","solution":"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score def iris_knn_classification(): # Load the Iris dataset iris = load_iris() X, y = iris.data, iris.target # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the KNN classifier knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X_train, y_train) # Make predictions on the test set y_pred = knn.predict(X_test) # Calculate accuracy, precision, and recall accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average='macro') recall = recall_score(y_test, y_pred, average='macro') return accuracy, precision, recall"},{"question":"Design an algorithm that computes the longest consecutive subsequence in an unsorted array of integers. The function should return the length of this subsequence. Aim to achieve an optimal runtime complexity.","solution":"def longest_consecutive(nums): Computes the length of the longest consecutive subsequence in an unsorted array of integers. :param nums: List of integers :return: Length of the longest consecutive subsequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # start of a new sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"I'm working on an algorithm to sort a list of integers but with a twist. I need to return the list sorted in ascending order, and at the same time, I need to keep track of and return the index positions of the original list relative to the new sorted list. For example, if the original list is \`[10, 1, 15, 3, 7]\`, the sorted list should be \`[1, 3, 7, 10, 15]\`, and the index mapping should be \`[1, 3, 4, 0, 2]\`. This means that the smallest element in the original list (1) was at index 1, the next smallest (3) was at index 3, and so on. Write a function \`custom_sort\` that takes a list of integers and returns a tuple containing two lists: the sorted list and the list of original indices. \`\`\`python def custom_sort(arr): # Provide your implementation here pass # Test cases print(custom_sort([10, 1, 15, 3, 7])) # Output: ([1, 3, 7, 10, 15], [1, 3, 4, 0, 2]) print(custom_sort([5, 2, 9, 4])) # Output: ([2, 4, 5, 9], [1, 3, 0, 2]) \`\`\`","solution":"def custom_sort(arr): Sorts the list in ascending order and keeps track of the original indices. Parameters: arr (list of int): The list to be sorted. Returns: tuple: A tuple containing two lists - the sorted list and the list of original indices. # Create a list of tuples where each tuple is (element, index) indexed_arr = [(val, idx) for idx, val in enumerate(arr)] # Sort the list of tuples based on the element value sorted_indexed_arr = sorted(indexed_arr, key=lambda x: x[0]) # Extract the sorted values and their original indices sorted_arr = [val for val, idx in sorted_indexed_arr] original_indices = [idx for val, idx in sorted_indexed_arr] return sorted_arr, original_indices"},{"question":"Evaluate a given string to determine if it contains valid arrangements of parentheses, brackets, and braces. input_str = \\"{[()()]}\\"","solution":"def is_valid_parentheses(input_str): Determines if the input_str contains valid arrangements of parentheses, brackets, and braces. Args: input_str (str): The input string containing parentheses, brackets, and braces. Returns: bool: True if the string is valid, otherwise False. stack = [] mapping = {\\")\\": \\"(\\", \\"}\\": \\"{\\", \\"]\\": \\"[\\"} for char in input_str: if char in mapping: top_element = stack.pop() if stack else '#' if mapping[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"In this task, you are required to implement a function that verifies if a given string contains only alphanumeric characters (letters and numbers) and no special symbols. Your function should return \`True\` if the string is purely alphanumeric, and \`False\` otherwise. Function Signature: \`\`\`python def is_alphanumeric(s: str) -> bool: pass \`\`\` Example: \`\`\`python assert is_alphanumeric(\\"Hello123\\") == True assert is_alphanumeric(\\"Hello 123\\") == False assert is_alphanumeric(\\"Hello@123\\") == False \`\`\` Constraints: - The input string will contain at least one character and at most 100 characters. - The verification should be case insensitive.","solution":"def is_alphanumeric(s: str) -> bool: Returns True if the string contains only alphanumeric characters (letters and numbers), otherwise False. return s.isalnum()"},{"question":"Write a function that takes an integer array and an integer target value, and returns all unique combinations of array elements that sum up to the target value. Each element in the array can be used multiple times in combinations. Ensure that the combinations are displayed in a non-decreasing order (i.e., [1,2] is valid, but [2,1] is not). For example, given the array [2, 3, 6, 7] and the target value 7, the function should return [[2, 2, 3], [7]]. If no such combinations exist, return an empty list. The function should handle cases where the array is empty or the target value is less than or equal to zero.","solution":"def combination_sum(candidates, target): Given an integer array 'candidates' and an integer 'target', return all unique combinations of 'candidates' where the chosen numbers sum to 'target'. Each number in 'candidates' may be used an unlimited number of times in the combination. :param candidates: List of integers :param target: Target integer value :return: List of unique combinations where each combination's elements sum up to the target def backtrack(start, remain, path): if remain == 0: result.append(list(path)) return elif remain < 0: return for i in range(start, len(candidates)): path.append(candidates[i]) backtrack(i, remain - candidates[i], path) path.pop() if not candidates or target <= 0: return [] candidates.sort() result = [] backtrack(0, target, []) return result"},{"question":"Develop an intelligent sorting algorithm capable of managing large data sets that are dynamically updated. The algorithm should be implemented in Python, ensuring both efficient time complexity and adaptability to continuous data input. As part of this task, demonstrate a practical application by sorting a list of integers provided via an asynchronous data stream.","solution":"import heapq class IntelligentSorter: def __init__(self): self.min_heap = [] def add_number(self, number): heapq.heappush(self.min_heap, number) def get_sorted_list(self): return [heapq.heappop(self.min_heap) for _ in range(len(self.min_heap))] # Demo function to simulate asynchronous data stream input and sorting import asyncio async def simulate_data_stream(sorter, data_stream): for number in data_stream: await asyncio.sleep(0.1) # Simulate delay in data stream sorter.add_number(number) async def main(): sorter = IntelligentSorter() data_stream = [5, 1, 3, 9, 7, 2, 6, 4, 8] await simulate_data_stream(sorter, data_stream) sorted_list = sorter.get_sorted_list() return sorted_list"},{"question":"Write a program that reads a list of integers and performs the following operations: - If the list contains all positive numbers, print \\"All positive\\". - If the list contains all negative numbers, print \\"All negative\\". - If the list contains both positive and negative numbers, print \\"Mixed numbers\\". - Additionally, for each scenario, calculate and print the sum of all numbers in the list. Sample Input: [1, -2, 3, -4, 5] Sample Output: \`\`\` Mixed numbers Sum: 3 \`\`\`","solution":"def classify_and_sum_numbers(numbers): Classifies the list of numbers and computes their sum: - \\"All positive\\" if all numbers are positive - \\"All negative\\" if all numbers are negative - \\"Mixed numbers\\" if there are both positive and negative numbers Additionally, returns the sum of all numbers in the list. total_sum = sum(numbers) if all(num > 0 for num in numbers): print(\\"All positive\\") elif all(num < 0 for num in numbers): print(\\"All negative\\") else: print(\\"Mixed numbers\\") print(f\\"Sum: {total_sum}\\")"},{"question":"Design a function that takes a list of integers as input and returns a dictionary where each key is an integer from the list, and each value is the factorial of that integer. If the input list contains repeated integers, the dictionary should only contain unique keys. Example: Input: [3, 4, 5, 3] Output: {3: 6, 4: 24, 5: 120}","solution":"from math import factorial def list_to_factorial_dict(lst): Returns a dictionary where each key is a unique integer from the input list, and each value is the factorial of that integer. return {num: factorial(num) for num in set(lst)}"},{"question":"Given a list of integers, write a Python function \`max_pairwise_product\` that returns the maximum product of any two distinct integers from the list. The function should work in O(n) time complexity. \`\`\`python def max_pairwise_product(numbers): pass # Example print(max_pairwise_product([1, 2, 3])) # Output: 6 (2*3) print(max_pairwise_product([7, 5, 14, 2, 8, 8, 10, 1, 2, 3])) # Output: 140 (14*10) print(max_pairwise_product([0, -1, -2, -3, -4])) # Output: -1 (-1*-1) \`\`\` # Guidelines - Assume the input list \`numbers\` will have at least two integers. - The function should handle both positive and negative integers efficiently.","solution":"def max_pairwise_product(numbers): Returns the maximum product of any two distinct integers from the list. if len(numbers) < 2: return None # Initialize maximum and second maximum with the lowest possible integer max1, max2 = float('-inf'), float('-inf') # Initialize minimum and second minimum to handle negative numbers min1, min2 = float('inf'), float('inf') for number in numbers: # Update max1 and max2 if number > max1: max1, max2 = number, max1 elif number > max2: max2 = number # Update min1 and min2 if number < min1: min1, min2 = number, min1 elif number < min2: min2 = number # The maximum product could be from the two largest numbers or two smallest numbers return max(max1 * max2, min1 * min2) # Examples print(max_pairwise_product([1, 2, 3])) # Output: 6 (2*3) print(max_pairwise_product([7, 5, 14, 2, 8, 8, 10, 1, 2, 3])) # Output: 140 (14*10) print(max_pairwise_product([0, -1, -2, -3, -4])) # Output: 12 (-2*-3)"},{"question":"Design and implement an efficient algorithm using Python to tackle the classic 'knapsack problem.' Your objective is to maximize the total value in the knapsack while staying within a specified weight limit. Specifically, given a set of items, each with a weight and a value, determine the number of each item to include in the knapsack such that the total weight is less than or equal to the given limit and the total value is as large as possible. Your solution should employ a Dynamic Programming approach to achieve optimality. After implementing the algorithm, explain how it handles multiple constraints and describe its time and space complexity.","solution":"def knapsack(weights, values, capacity): Solves the knapsack problem using dynamic programming. Parameters: weights (list of int): Weights of the items. values (list of int): Values of the items. capacity (int): Maximum weight the knapsack can carry. Returns: int: Maximum value that can be carried by the knapsack. n = len(weights) dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(capacity + 1): if weights[i - 1] <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1]) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Consider a binary tree. Write a function that traverses the tree in a zigzag level order (also known as spiral order traversal). In zigzag traversal, the first level is traversed from left to right, the second level from right to left, and so on. You need to implement the function \`zigzagLevelOrder(root)\` where \`root\` is the root node of the given binary tree. Return a list of lists, where each list represents one level of the tree. Node class definition is provided: \`\`\`python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right \`\`\` Example: \`\`\` Input: 1 / 2 3 / / 4 5 6 7 Output: [[1], [3, 2], [4, 5, 6, 7]] \`\`\` You may assume the binary tree does not contain any duplicate values.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def zigzagLevelOrder(root): if not root: return [] result, current_level, direction = [], [root], 1 while current_level: level_values = [node.value for node in current_level][::direction] result.append(level_values) direction *= -1 next_level = [] for node in current_level: if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) current_level = next_level return result"},{"question":"Write a function that accepts a string and an integer k. The function should return the k-th permutation of the characters in the string in lexicographic order. The input string will have unique characters only. Implement error checking to ensure that k is a valid integer within the possible range of permutations. If k is not valid, the function should return an appropriate error message. Consider the efficiency of your algorithm, particularly for larger strings.","solution":"import math def get_kth_permutation(s, k): Returns the k-th permutation of the string characters in lexicographic order. If k is invalid (out of range), returns an error message. # Error checking for invalid k n = len(s) total_permutations = math.factorial(n) if not (1 <= k <= total_permutations): return \\"Error: k is out of valid range\\" # Initialize variables k -= 1 # Convert to zero-index characters = sorted(s) permutation = [] # Generate k-th permutation while characters: n = len(characters) factorial = math.factorial(n - 1) index = k // factorial k = k % factorial permutation.append(characters.pop(index)) return ''.join(permutation)"},{"question":"Develop a function in Python that takes a string as an input and returns the count of each unique character in the string. The function should return a dictionary where the keys are the unique characters and the values are their respective counts. Consider all edge cases, such as an empty string or strings with spaces, punctuation, and varying cases (i.e., treat 'A' and 'a' as different characters). Example Input: \`\`\`python input_string = \\"Hello, World!\\" \`\`\` Example Output: \`\`\`python { 'H': 1, 'e': 1, 'l': 3, 'o': 2, ',': 1, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1 } \`\`\`","solution":"def count_unique_characters(input_string): Returns a dictionary with the count of each unique character in the input string. char_count = {} for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write a function that takes a list of strings and returns a new list containing all the strings that are anagrams of a palindrome. A string is an anagram of a palindrome if it can be rearranged into a palindrome. The program should be case-insensitive. Additionally, provide an option for the user to input extra strings to check and include them in the list if they meet the criteria. Ensure to validate the user inputs and handle edge cases appropriately.","solution":"from collections import Counter def is_anagram_of_palindrome(s): Check if the given string is an anagram of a palindrome. s = s.lower().replace(' ', '') count = Counter(s) odd_count = sum(1 for val in count.values() if val % 2 != 0) return odd_count <= 1 def filter_anagrams_of_palindrome(lst): Returns a list of strings that are anagrams of a palindrome. return [s for s in lst if is_anagram_of_palindrome(s)] def add_and_filter_anagrams_of_palindrome(lst, extra_strs): Adds extra strings to the list and returns a list of strings that are anagrams of a palindrome. Also removes any strings from either list that are not valid strings. valid_strings = [s for s in lst + extra_strs if isinstance(s, str) and s] return filter_anagrams_of_palindrome(valid_strings)"},{"question":"You are given an array of integers. Write a function that identifies and returns a list of all unique elements that appear exactly twice in the array. The function should handle arrays of varying lengths and should not rely on built-in functions solely dedicated to this task. **Function Signature:** \`\`\`python def find_elements_appearing_twice(arr: List[int]) -> List[int]: pass \`\`\` **Input:** - \`arr\` (list of integers): An unsorted array of integers which may contain duplicates. **Output:** - A list of integers containing all unique elements that appear exactly twice in the input array. **Example:** \`\`\`python find_elements_appearing_twice([1, 2, 3, 2, 4, 5, 1, 6]) # Output: [1, 2] find_elements_appearing_twice([4, 3, 5, 6, 4, 3, 7, 8]) # Output: [4, 3] \`\`\`","solution":"from typing import List def find_elements_appearing_twice(arr: List[int]) -> List[int]: Identifies and returns a list of all unique elements that appear exactly twice in the array. :param arr: List of integers (input array) :return: List of integers containing all unique elements that appear exactly twice element_count = {} result = [] # Step 1: Count the occurrences of each element for num in arr: if num in element_count: element_count[num] += 1 else: element_count[num] = 1 # Step 2: Collect elements that appear exactly twice for num, count in element_count.items(): if count == 2: result.append(num) return result"},{"question":"Implement a function that mimics the behavior of a basic spell checker. The function will receive a list of correct words and a string containing a paragraph of text. It should output a list of words from the paragraph that are misspelled. Assume that the input text contains only alphabetic characters and spaces, and words are separated by a single space. Case sensitivity should be ignored (i.e., assume all inputs are in lowercase). **Function Signature:** \`\`\`python def find_misspelled_words(correct_words: List[str], text: str) -> List[str]: pass \`\`\` **Input:** - A list of words representing the correct spelling: \`correct_words: List[str]\` - A string representing the paragraph of text: \`text: str\` **Output:** - A list of words from the paragraph that are not present in the list of correct words. **Example:** \`\`\`python correct_words = [\\"correct\\", \\"spelling\\", \\"list\\", \\"of\\", \\"words\\"] text = \\"this is a test of the spell checker\\" # Output: [\\"this\\", \\"is\\", \\"a\\", \\"test\\", \\"the\\", \\"spell\\", \\"checker\\"] \`\`\` # Constraints: 1. The given list \`correct_words\` contains at most 10^5 words. 2. The length of the list \`correct_words\` does not exceed 100,000 characters in total. 3. The length of \`text\` does not exceed 10,000 characters.","solution":"from typing import List def find_misspelled_words(correct_words: List[str], text: str) -> List[str]: # Convert the list of correct words to a set for O(1) average time complexity lookups correct_set = set(correct_words) # Split the text into individual words words = text.split() # Check each word in the text against the set of correct words misspelled_words = [word for word in words if word not in correct_set] return misspelled_words"},{"question":"Refactor the existing function to manage nested data structures, specifically those containing list, dictionary, and tuple combinations, and ensure it accurately handles such scenarios. Enhance the fundamental function: ADJUST = Broadly test various nested structures including lists within dictionaries, dictionaries within lists, and tuples mixed with other data types. def multifaceted_sum(input_structure): Design a function named multifaceted_sum that accepts a complex data structure composed of numbers nested within lists, dictionaries, and tuples. The function should traverse through the nested layers and sum all numeric values present. Ensure that the function can handle complex nesting and correctly identify and sum numeric values without being affected by mixed data types within the structure. Example: >>> multifaceted_sum([1, 2, [3, 4], {'a': 5, 'b': (6, 7)}]) 28 >>> multifaceted_sum({'x': 1, 'y': [2, 3, {'z': 4}], 'w': (5, {'u': 6, 'v': 7})}) 28 >>> multifaceted_sum(([1, {'a': [2, 3]}, 4], {'b': 5, 'c': (6, 7)})) 28","solution":"def multifaceted_sum(input_structure): Sums all numeric values from a nested data structure that can include lists, dictionaries, and tuples. total = 0 if isinstance(input_structure, (list, tuple)): for element in input_structure: total += multifaceted_sum(element) elif isinstance(input_structure, dict): for key, value in input_structure.items(): total += multifaceted_sum(value) elif isinstance(input_structure, (int, float)): total += input_structure return total"},{"question":"Using a given string S, return a list of all possible subsequences of S in which the subsequences have their characters in non-decreasing order. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: \`\`\`python S = \\"abc\\" \`\`\` The expected output would be: \`\`\`python [\\"a\\", \\"ab\\", \\"abc\\", \\"ac\\", \\"b\\", \\"bc\\", \\"c\\"] \`\`\`","solution":"from itertools import combinations def get_subsequences(S): Returns a list of all possible subsequences of S in which the subsequences have their characters in non-decreasing order. subsequences = [] for r in range(1, len(S) + 1): for combo in combinations(S, r): subsequences.append(''.join(combo)) return subsequences"},{"question":"Write a Python function that accepts a list of strings and returns a dictionary where each key is a string length and the value is the list of strings of that length. Ensure your solution handles both uppercase and lowercase characters, treats them distinctly, and maintains the order of strings as they appear in the list.","solution":"def group_strings_by_length(strings): Groups strings by their length. Parameters: strings (list): A list of strings Returns: dict: A dictionary where keys are string lengths and values are lists of strings with that length lengths = {} for string in strings: length = len(string) if length not in lengths: lengths[length] = [] lengths[length].append(string) return lengths"},{"question":"Create a Python program to process a given list of integers and generate a new list where each element is the square of the original element's value if the element is even, or the cube of the value if the element is odd. For example, for the list [1, 2, 3, 4], the output list should be [1, 4, 27, 16]. Create a test case to validate your solution, ensuring to consider and handle scenarios with negative integers and zeros.","solution":"def process_list(numbers): This function processes a list of integers and returns a new list where each element is: - Squared if the element is even. - Cubed if the element is odd. Parameters: numbers (list): A list of integers. Returns: list: A new list where each element is transformed as specified. return [x**2 if x % 2 == 0 else x**3 for x in numbers]"},{"question":"Implement a Python program that reads a string and checks if it is a palindrome (i.e., it reads the same forward and backward). The program should ignore spaces, punctuation, and case differences while performing the check.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and case differences. Parameters: s (str): the string to check. Returns: bool: True if s is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Create a function in Python that takes in a string and returns a dictionary where keys are the characters in the string, and values are the counts of each character's occurrences. The function should ignore spaces and be case-insensitive. Additionally, include a snippet of code that might seem correct but does not work, and explain the error. \`\`\`python string = \\"Hello World\\" \`\`\`","solution":"def count_characters(s): Takes in a string and returns a dictionary where keys are the characters and values are the counts of each character's occurrences. Ignores spaces and is case-insensitive. s = s.replace(\\" \\", \\"\\").lower() char_dict = {} for char in s: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 return char_dict"},{"question":"I am trying to understand the concept of generators in Python and how they differ from regular functions. I came across this piece of code which uses a generator to yield numbers from 1 to 5. Can someone explain how the generator works in this example and compare its efficiency and usage to a traditional function that returns a list of numbers? \`\`\`python def number_generator(): for i in range(1, 6): yield i gen = number_generator() for number in gen: print(number) \`\`\` In contrast, how would the equivalent code look using a regular function that returns a list, and what are the trade-offs between the two approaches in terms of memory consumption and performance?","solution":"def number_generator(): for i in range(1, 6): yield i def number_list(): return [i for i in range(1, 6)]"},{"question":"Design and implement a function named \`nested_list_depth\` that calculates the maximum depth of a given nested list. A nested list is a list that can contain other lists as elements, which in turn can also contain lists, and so on. For this function, an empty list has a depth of 1. # Required Function Signature: \`\`\`python def nested_list_depth(nested_list: list) -> int: Calculate the maximum depth of a given nested list. # Implementation goes here pass \`\`\` # Constraints: - The input list can be arbitrarily nested and can include any number of elements which might be another list or a different data type. - You may assume that the input list does not contain cycles. - Do not use any additional libraries or modules to perform this task. # Examples: - \`nested_list_depth([1, [2, [3]], 4])\` should return \`3\`. - \`nested_list_depth([])\` should return \`1\`. - \`nested_list_depth([1, 2, [3, 4, [5]], [6], 7])\` should return \`3\`. - \`nested_list_depth([1, [2, [3, [4, [5]]]]])\` should return \`5\`. - \`nested_list_depth([['a', ['b', ['c', ['d', ['e']]]]], 'f'])\` should return \`5\`. # Solution Outline: 1. **Base Case**: If the given \`nested_list\` is empty, return 1. 2. **Recursive Case**: Transitively calculate each sub-list's depth and return the maximum depth plus one (accounting for the current list level).","solution":"def nested_list_depth(nested_list: list) -> int: Calculate the maximum depth of a given nested list. if not isinstance(nested_list, list): return 0 if not nested_list: return 1 max_depth = 0 for item in nested_list: max_depth = max(max_depth, nested_list_depth(item)) return max_depth + 1"},{"question":"Write a Python function \`rotate_matrix(matrix)\` that takes a 2D square matrix (list of lists) and rotates it by 90 degrees clockwise. The function should modify the matrix in-place and not return anything. Note: The input matrix is guaranteed to be square (NxN). Example: \`\`\` Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] \`\`\` Hints: 1. You might find it helpful to consider rotating the matrix layer by layer. 2. To avoid using additional space, aim to rotate the elements in-place.","solution":"def rotate_matrix(matrix): Rotates a given N x N matrix by 90 degrees clockwise in-place. :param matrix: List of lists representing the NxN matrix n = len(matrix) for layer in range(n // 2): first = layer last = n - layer - 1 for i in range(first, last): offset = i - first # save top top = matrix[first][i] # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top"},{"question":"You are given a binary tree where each node contains an integer value. Your task is to write a function that finds the maximum value path sum in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. # Function Signature \`\`\`python def maxPathSum(root: Optional[TreeNode]) -> int: pass \`\`\` # Input - \`root\`: The root node of the binary tree. This node is an instance of \`TreeNode\` with attributes \`val\`, \`left\`, and \`right\`. # Output - Return an integer representing the maximum path sum in the binary tree. # Example \`\`\`python # Binary tree example: # 1 # / # 2 3 # / # 4 5 tree = TreeNode(1) tree.left = TreeNode(2) tree.right = TreeNode(3) tree.left.left = TreeNode(4) tree.left.right = TreeNode(5) assert maxPathSum(tree) == 11 # Path 4 -> 2 -> 1 -> 3 # Binary tree example: # -10 # / # 9 20 # / # 15 7 tree = TreeNode(-10) tree.left = TreeNode(9) tree.right = TreeNode(20) tree.right.left = TreeNode(15) tree.right.right = TreeNode(7) assert maxPathSum(tree) == 42 # Path 15 -> 20 -> 7 \`\`\` # Constraints - The number of nodes in the tree is in the range \`[1, 3 * 10^4]\`. - \`-1000 <= Node.val <= 1000\`. # Notes - Ensure your solution runs efficiently and handles large inputs within acceptable time limits. - Consider edge cases like trees with only one node or trees with all nodes having negative values.","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root: Optional[TreeNode]) -> int: Returns the maximum path sum in the binary tree. def helper(node): nonlocal max_sum if not node: return 0 # Compute the maximum path sum with/without the left child left_max = max(helper(node.left), 0) # Compute the maximum path sum with/without the right child right_max = max(helper(node.right), 0) # Compute the maximum path value at the current node current_max_path = node.val + left_max + right_max # Update the maximum path sum found so far max_sum = max(max_sum, current_max_path) # Return the maximum path sum starting at the current node return node.val + max(left_max, right_max) max_sum = float('-inf') helper(root) return max_sum"},{"question":"Write a function in Python that takes a list of dictionaries and a key name as input. The function should merge the dictionaries based on the specified key. If multiple dictionaries have the same value for a given key, their non-key values should be combined into a list. The function should return a new list of dictionaries with the merged results. Example: input_list = [{'id': 1, 'value': 'a'}, {'id': 2, 'value': 'b'}, {'id': 1, 'value': 'c'}] key_name = 'id' Your function should return [{'id': 1, 'value': ['a', 'c']}, {'id': 2, 'value': ['b']}]. Note: Ensure the function handles cases with keys having both numerical and string values.","solution":"def merge_dictionaries(input_list, key_name): Merge dictionaries in the input list based on the specified key. If multiple dictionaries have the same value for the key, their non-key values are combined into a list. Args: input_list (list): List of dictionaries. key_name (str): The key name to merge dictionaries by. Returns: list: A new list of dictionaries with merged results. if not input_list: return [] merged_dict = {} for item in input_list: key_value = item[key_name] if key_value not in merged_dict: merged_dict[key_value] = {k: [v] for k, v in item.items() if k != key_name} else: for k, v in item.items(): if k != key_name: merged_dict[key_value][k].append(v) return [{key_name: k, **{nk: nv for nk, nv in v.items()}} for k, v in merged_dict.items()]"},{"question":"You are given an array of integers, where each element represents a day. If the number at the i-th position is negative, it means that it rained on the i-th day, otherwise it did not rain (the positive number on the day represents the amount of sun). A reservoir starts empty, and every time it rains, a certain unique lake fills up and needs to be dried later. Write a function that determines if it's possible to dry every lake that filled up due to the rain, considering the days with no rain can be used to dry any previously filled lake. The function signature is: \`\`\`python def can_dry_reservoir(rains: List[int]) -> bool: \`\`\` # Examples: \`\`\`python assert can_dry_reservoir([1, 2, 0, 0, 1, 2, 3, 0, 2]) == True assert can_dry_reservoir([-1, -2, 2, 1, 0, 0, -1, -1]) == False \`\`\` # Constraints: - Use appropriate data structures to manage the lakes requiring drying. - Focus on efficiency in terms of time complexity. - Consider edge cases such as multiple days of rain without any sunny days in between and handling excess sunny days. # Explanation: For the example \`can_dry_reservoir([1, 2, 0, 0, 1, 2, 3, 0, 2]) == True\`, the function should return \`True\` because it allows for drying every lake filled due to the rain. For the example \`can_dry_reservoir([-1, -2, 2, 1, 0, 0, -1, -1]) == False\`, the function should return \`False\` since it's impossible to dry every lake filled up by the rain considering the constraints.","solution":"from typing import List def can_dry_reservoir(rains: List[int]) -> bool: lakes = {} sunny_days = [] for day, lake in enumerate(rains): if lake < 0: # rain day lake = -lake if lake in lakes and lakes[lake] > 0: if not sunny_days: return False dry_day = None for sd in sunny_days: if sd > lakes[lake]: # find the sunny day after it rained on this lake dry_day = sd break if dry_day is None: return False sunny_days.remove(dry_day) lakes[lake] = day + 1 else: # sunny day sunny_days.append(day + 1) return True"},{"question":"Your task is to implement a function that takes a string consisting of words separated by spaces, and returns the shortest word in the string. If there are multiple words with the same shortest length, return the first one that appears. Function Signature: \`\`\`python def find_shortest_word(s: str) -> str: \`\`\` # Examples 1. Input: \`\\"Python is a great programming language\\"\` Output: \`\\"a\\"\` 2. Input: \`\\"The quick brown fox jumps over the lazy dog\\"\` Output: \`\\"The\\"\` 3. Input: \`\\"May the force be with you\\"\` Output: \`\\"be\\"\` # Constraints - The input string will consist of only alphabetic characters and spaces. - The input string will contain at least one word. - Words will be separated by a single space. - The input string will not be empty. # Note - You can assume that there will be at least one word in the input string.","solution":"def find_shortest_word(s: str) -> str: Takes a string consisting of words separated by spaces, and returns the shortest word in the string. If there are multiple words with the same shortest length, it returns the first one that appears. words = s.split() shortest_word = min(words, key=len) return shortest_word"},{"question":"Explain the concept and implementation of a \\"circular queue\\" in data structures. Provide a detailed example with sample code in Python, showcasing how to create a circular queue and perform its principal operations such as \`enqueue\`, \`dequeue\`, \`is_empty\`, and \`is_full\`.","solution":"class CircularQueue: def __init__(self, size): self.size = size self.queue = [None] * size self.front = self.rear = -1 def is_empty(self): return self.front == -1 def is_full(self): return (self.rear + 1) % self.size == self.front def enqueue(self, item): if self.is_full(): raise Exception(\\"Queue is full\\") if self.front == -1: # queue is empty self.front = 0 self.rear = (self.rear + 1) % self.size self.queue[self.rear] = item def dequeue(self): if self.is_empty(): raise Exception(\\"Queue is empty\\") item = self.queue[self.front] if self.front == self.rear: # queue has only one element self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return item def __str__(self): if self.is_empty(): return \\"CircularQueue is empty\\" items = [] i = self.front while True: items.append(self.queue[i]) if i == self.rear: break i = (i + 1) % self.size return \\"CircularQueue: \\" + ' -> '.join(map(str, items))"},{"question":"Implement a function in Python that takes a list of integers and returns the largest product that can be obtained from any three of the integers in the list. Your function should be able to handle lists with negative numbers as well as positive numbers. # Function Signature \`\`\`python def max_product_of_three(nums: List[int]) -> int: \`\`\` # Input - \`nums\` (List[int]): A list of integers where the size of the list is at least 3 and each integer x | -10^3 <= x <= 10^3. # Output - \`int\`: The largest product of any three integers from the list. # Example \`\`\`python max_product_of_three([1, 10, 2, 6, 5, 3]) # returns 300 (10 * 6 * 5) max_product_of_three([-10, -10, 5, 2]) # returns 500 (-10 * -10 * 5) \`\`\` # Note - Consider which combinations of three numbers might produce the highest product. - Think about how both the highest positive numbers and the lowest (most negative) numbers might affect the outcome.","solution":"from typing import List def max_product_of_three(nums: List[int]) -> int: Returns the largest product that can be obtained from any three integers in the list. nums.sort() # The maximum product can be either: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers (which can be negative, thus resulting in a positive product) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Implement a function \`longest_substring_with_k_distinct\` that takes two parameters: a string \`s\` and an integer \`k\`. The function should return the length of the longest substring of \`s\` that contains at most \`k\` distinct characters. If \`k\` is 0 or if the string is empty, return 0. Consider edge cases and optimize for performance. Here's the function signature: \`\`\`python def longest_substring_with_k_distinct(s: str, k: int) -> int: # Your code here \`\`\` Example: \`\`\`python print(longest_substring_with_k_distinct(\\"eceba\\", 2)) # Output: 3 (The substring is \\"ece\\" which has length 3) print(longest_substring_with_k_distinct(\\"aaa\\", 1)) # Output: 3 (The substring is \\"aaa\\" which has length 3) print(longest_substring_with_k_distinct(\\"\\", 2)) # Output: 0 print(longest_substring_with_k_distinct(\\"abc\\", 0)) # Output: 0 print(longest_substring_with_k_distinct(\\"aabc\\", 1)) # Output: 2 (The substring is \\"aa\\" which has length 2) \`\`\`","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 from collections import defaultdict char_map = defaultdict(int) left = 0 max_length = 0 for right in range(len(s)): char_map[s[right]] += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function that takes a list of integers and returns the highest product of any three numbers from the list. Your function should handle both positive and negative integers and should be optimized for performance with large input sizes. If the list contains less than three integers, your function should raise a ValueError. Implement appropriate error handling to ensure robustness.","solution":"def highest_product_of_three(nums): Returns the highest product of any three numbers in the list. Raises a ValueError if the list contains less than three integers. if len(nums) < 3: raise ValueError(\\"List must contain at least three integers\\") nums.sort() # The highest product of three numbers can be the product of: # 1. The three largest numbers # 2. The two smallest numbers (which can be negative) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Given the dataset available at https://archive.ics.uci.edu/ml/datasets/Wine, which contains data on different types of wines and their chemical properties, implement a K-Nearest Neighbors (KNN) algorithm to classify the wine types. Evaluate your model by calculating the accuracy, precision, recall, and F1-score. Additionally, provide a confusion matrix to give a detailed view of your model's performance. Make sure to preprocess the data before training the model, including any necessary handling of missing values and normalization of the features.","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix def load_and_preprocess_data(url): # Load dataset df = pd.read_csv(url, header=None) # Assign column names based on UCI dataset description df.columns = ['Class', 'Alcohol', 'Malic_acid', 'Ash', 'Alcalinity_of_ash', 'Magnesium', 'Total_phenols', 'Flavanoids', 'Nonflavanoid_phenols', 'Proanthocyanins', 'Color_intensity', 'Hue', 'OD280/OD315_of_diluted_wines', 'Proline'] # Separate features and target X = df.drop('Class', axis=1) y = df['Class'] # Normalize the features scaler = StandardScaler() X_scaled = scaler.fit_transform(X) return train_test_split(X_scaled, y, test_size=0.2, random_state=42) def train_knn_classifier(X_train, X_test, y_train, y_test, n_neighbors=3): # Instantiate KNN classifier knn = KNeighborsClassifier(n_neighbors=n_neighbors) # Fit the model knn.fit(X_train, y_train) # Predict on the test set y_pred = knn.predict(X_test) # Calculate metrics accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average='weighted') recall = recall_score(y_test, y_pred, average='weighted') f1 = f1_score(y_test, y_pred, average='weighted') cm = confusion_matrix(y_test, y_pred) return accuracy, precision, recall, f1, cm # URL of the dataset url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data' # Load and preprocess data X_train, X_test, y_train, y_test = load_and_preprocess_data(url) # Train the KNN classifier and get performance metrics accuracy, precision, recall, f1, cm = train_knn_classifier(X_train, X_test, y_train, y_test) # Output results accuracy, precision, recall, f1, cm"},{"question":"You are given a sequence of integers as a list and an integer \`k\`. Implement a function \`kth_largest_element(nums, k)\` that finds the k-th largest element in the list \`nums\`. The function should: - Use an efficient algorithm for finding the k-th largest element (consider using a heap or quickselect). - Handle cases where the list might contain duplicate values. **Function Signature:** \`\`\`python def kth_largest_element(nums: List[int], k: int) -> int: pass \`\`\` **Input:** - A list of integers, \`nums\` (with (1 leq text{len(nums)} leq 10^4)). - An integer, \`k\` (with (1 leq k leq text{len(nums)})). **Output:** - An integer representing the k-th largest element in the list. **Example:** \`\`\`python nums = [3, 2, 1, 5, 6, 4] k = 2 kth_largest_element(nums, k) # Should return 5 \`\`\` \`\`\`python nums = [3, 2, 3, 1, 2, 4, 5, 5, 6] k = 4 kth_largest_element(nums, k) # Should return 4 \`\`\`","solution":"import heapq from typing import List def kth_largest_element(nums: List[int], k: int) -> int: Finds the k-th largest element in the list nums. Uses a min-heap of size k to keep track of the k largest elements encountered so far. # Create a min-heap with the first k elements. min_heap = nums[:k] heapq.heapify(min_heap) # Iterate over the rest of the elements. for num in nums[k:]: if num > min_heap[0]: heapq.heappushpop(min_heap, num) return min_heap[0]"},{"question":"Write a function that takes a list of positive integers and a target number. The function should return the indices of the two numbers that add up to the target number. Assume that each input would have exactly one solution and you may not use the same element twice. Example: If the input list is [2, 7, 11, 15] and the target number is 9, the function should return [0,1] since 2 + 7 = 9.","solution":"def two_sum(nums, target): Returns indices of the two numbers that add up to the target number. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Write a function that takes an unordered list of integers, identifies all the pairs of integers whose sum is equal to a given target, and returns these pairs as a list of tuples. Each pair should be listed only once, even if there are duplicate elements that can form the same sum. The function should be efficient and capable of handling large lists with up to 1 million integers. Additionally, it should work correctly even if the input list contains negative numbers and zero. If no such pairs exist, the function should return an empty list. The function should also include a feature to return the count of total unique pairs found.","solution":"def find_pairs_with_sum(nums, target): Finds unique pairs in the list \`nums\` that sum up to \`target\`. Parameters: nums (list of int): The list of integers. target (int): The target sum for pairs. Returns: list of tuple: A list containing tuples of unique pairs that add up to the target sum. int: The total unique pairs found. if not nums: return [], 0 nums_set = set(nums) pairs = set() for num in nums_set: complement = target - num if complement in nums_set: pair = tuple(sorted((num, complement))) pairs.add(pair) return list(pairs), len(pairs)"},{"question":"Create a function in Python that takes a list of integers and returns a dictionary summarizing the list's elements. The keys of the dictionary should include 'positive', 'negative', 'zero', 'even', 'odd', and 'sum', representing the count of positive numbers, negative numbers, zeroes, even numbers, odd numbers, and the sum of all numbers in the list, respectively. For example, the input list [1, -1, 0, 2, 3] should return {'positive': 3, 'negative': 1, 'zero': 1, 'even': 2, 'odd': 3, 'sum': 5}.","solution":"def summarize_list_elements(lst): Takes a list of integers and returns a dictionary summarizing the list's elements. :param lst: List of integers :return: Dictionary with counts of 'positive', 'negative', 'zero', 'even', 'odd', and the 'sum' of the list summary = { 'positive': 0, 'negative': 0, 'zero': 0, 'even': 0, 'odd': 0, 'sum': 0 } for num in lst: if num > 0: summary['positive'] += 1 elif num < 0: summary['negative'] += 1 else: summary['zero'] += 1 if num % 2 == 0: summary['even'] += 1 else: summary['odd'] += 1 summary['sum'] += num return summary"},{"question":"Create a Python function called 'find_anagrams' that takes two arguments: a list of strings and a target string. The function should return a list of all strings from the input list that are anagrams of the target string. If there are no anagrams, the function should return an empty list. Ensure the function handles case sensitivity and ignores spaces and punctuation in determining if a string is an anagram of the target.","solution":"import re from collections import Counter def clean_string(s): Cleans the input string by removing spaces, punctuation, and converting to lowercase. return ''.join(re.findall(r'w', s)).lower() def find_anagrams(words, target): Returns a list of all strings from the input list that are anagrams of the target string. cleaned_target = clean_string(target) target_counter = Counter(cleaned_target) anagrams = [] for word in words: if Counter(clean_string(word)) == target_counter: anagrams.append(word) return anagrams"},{"question":"You are tasked with a problem titled \\"Longest Substring with At Least K Repeating Characters\\". The problem is described as follows: Given a string \`s\` and an integer \`k\`, you need to find the length of the longest substring of \`s\` such that the frequency of each character in this substring is at least \`k\`. Your task is to implement a function that returns this length. For instance, consider the following examples: Example 1: Input: s = \\"aaabb\\", k = 3 Output: 3 Explanation: The longest substring is \\"aaa\\", as 'a' appears 3 times and no characters appear fewer than 3 times in this substring. Example 2: Input: s = \\"ababbc\\", k = 2 Output: 5 Explanation: The longest substring is \\"ababb\\", as 'a' and 'b' each appear at least 2 times in this substring. The problem has the following constraints: \`1 <= s.length <= 10^4\` \`s\` consists of only lowercase English letters. \`1 <= k <= 10^4\`","solution":"def longest_substring_with_at_least_k_repeating_characters(s, k): from collections import Counter def helper(start, end): if end - start < k: return 0 count = Counter(s[start:end]) for mid in range(start, end): if count[s[mid]] < k: next_mid = mid + 1 while next_mid < end and count[s[next_mid]] < k: next_mid += 1 return max(helper(start, mid), helper(next_mid, end)) return end - start return helper(0, len(s))"},{"question":"Create a Python function named \`analyze_text\` that accepts a string input and returns a dictionary with the following key-value pairs: the total number of characters in the string (key: \\"total_chars\\"), the number of alphabetic characters (key: \\"alphabets\\"), the number of digits (key: \\"digits\\"), the number of spaces (key: \\"spaces\\"), and the number of punctuation marks (key: \\"punctuations\\"). Use regular expressions to identify the various components of the input string and ensure that the function handles edge cases such as an empty string or a string with only punctuation marks. Implement test cases to validate the function's accuracy.","solution":"import re def analyze_text(text): Analyzes the input text and returns a dictionary with counts of various types of characters. Args: - text (str): The text to be analyzed. Returns: - dict: A dictionary with counts for total_chars, alphabets, digits, spaces, and punctuations. total_chars = len(text) alphabets = len(re.findall(r'[a-zA-Z]', text)) digits = len(re.findall(r'd', text)) spaces = len(re.findall(r's', text)) punctuations = len(re.findall(r'[^ws]', text)) return { \\"total_chars\\": total_chars, \\"alphabets\\": alphabets, \\"digits\\": digits, \\"spaces\\": spaces, \\"punctuations\\": punctuations }"},{"question":"Create a function that takes an input list of integers and returns a list of tuples where each tuple contains a pair of numbers whose sum and product are both even. Additionally, write a script to test this function with an example list of integers [1, 2, 3, 4, 5, 6, 7, 8, 9]. Utilize the itertools library for generating potential pairs and provide the count of valid pairs. Also, visualize these pairs using a scatter plot with the x-axis representing the first number in the pair and the y-axis representing the second number in the pair. Hint: Ensure that no number is paired with itself, and consider the use of exception handling for any edge cases during the pairing process.","solution":"import itertools def find_even_sum_and_product_pairs(numbers): Takes a list of integers and returns a list of tuples where each tuple contains a pair of numbers whose sum and product are both even. valid_pairs = [] for a, b in itertools.combinations(numbers, 2): if (a + b) % 2 == 0 and (a * b) % 2 == 0: valid_pairs.append((a, b)) return valid_pairs def count_even_sum_and_product_pairs(pairs): Takes a list of pairs and returns the count of these pairs. return len(pairs) def visualize_pairs(pairs): Takes a list of pairs and generates a scatter plot. import matplotlib.pyplot as plt x_vals = [pair[0] for pair in pairs] y_vals = [pair[1] for pair in pairs] plt.scatter(x_vals, y_vals) plt.xlabel('First number') plt.ylabel('Second number') plt.title('Scatter plot of pairs with even sum and product') plt.show()"},{"question":"Design a function in Python that accepts a list of dictionaries representing books in a library. Each dictionary contains the title, author, and publication year of a book. Your function should filter out all books published before the year 2000 and return the remaining books sorted by their publication year in ascending order. Example Input: [ {'title': 'Book A', 'author': 'Author A', 'year': 1999}, {'title': 'Book B', 'author': 'Author B', 'year': 2001}, {'title': 'Book C', 'author': 'Author C', 'year': 2005}, {'title': 'Book D', 'author': 'Author D', 'year': 1995} ] Expected Output: [ {'title': 'Book B', 'author': 'Author B', 'year': 2001}, {'title': 'Book C', 'author': 'Author C', 'year': 2005} ]","solution":"def filter_and_sort_books(books): Filters books published before the year 2000 and returns the remaining books sorted by their publication year in ascending order. :param books: list of dictionaries, each representing a book with keys 'title', 'author', and 'year' :return: list of dictionaries of filtered and sorted books filtered_books = [book for book in books if book['year'] >= 2000] sorted_books = sorted(filtered_books, key=lambda x: x['year']) return sorted_books"},{"question":"Mike and Sarah need to refill their fountain pen with ink. Mike used 3 milliliters less than twice the amount Sarah used. If the amount of ink Sarah used is represented by 's', write an equation to find the exact quantity of ink, represented by 'm', that Mike used.","solution":"def ink_used_by_mike(s): Returns the amount of ink used by Mike, given the amount used by Sarah. m = 2 * s - 3 return m"},{"question":"Write a Python function \`find_longest_palindromic_substring\` that takes a string as input and returns the longest palindromic substring. In case of multiple palindromic substrings with the same maximum length, the function should return the first one found. Your solution should not use Python's built-in functions for substring extraction, such as slicing, to find the palindromes. Implement a helper function \`is_palindrome\` to check if a given substring is a palindrome without using slicing. \`\`\`python def find_longest_palindromic_substring(s: str) -> str: Return the longest palindromic substring in the input string. >>> find_longest_palindromic_substring(\\"babad\\") 'bab' >>> find_longest_palindromic_substring(\\"cbbd\\") 'bb' >>> find_longest_palindromic_substring(\\"a\\") 'a' >>> find_longest_palindromic_substring(\\"ac\\") 'a' >>> find_longest_palindromic_substring(\\"forgeeksskeegfor\\") 'geeksskeeg' def is_palindrome(sub: str) -> bool: # Helper function to check if a given substring is a palindrome without slicing left, right = 0, len(sub)-1 while left < right: if sub[left] != sub[right]: return False left += 1 right -= 1 return True max_length = 0 longest_palindrome = \\"\\" for i in range(len(s)): for j in range(i, len(s)): substr = \\"\\" for k in range(i, j + 1): substr += s[k] if is_palindrome(substr): if len(substr) > max_length: max_length = len(substr) longest_palindrome = substr return longest_palindrome print(find_longest_palindromic_substring(\\"babad\\")) # Expected output: 'bab' print(find_longest_palindromic_substring(\\"cbbd\\")) # Expected output: 'bb' print(find_longest_palindromic_substring(\\"a\\")) # Expected output: 'a' print(find_longest_palindromic_substring(\\"ac\\")) # Expected output: 'a' print(find_longest_palindromic_substring(\\"forgeeksskeegfor\\")) # Expected output: 'geeksskeeg' \`\`\` Note: This code has areas that you need to implement, particularly for checking palindromes without slicing and appropriately finding the longest palindromic substring. Your task is to identify any additional necessary changes and complete the implementation.","solution":"def find_longest_palindromic_substring(s: str) -> str: Return the longest palindromic substring in the input string. >>> find_longest_palindromic_substring(\\"babad\\") 'bab' >>> find_longest_palindromic_substring(\\"cbbd\\") 'bb' >>> find_longest_palindromic_substring(\\"a\\") 'a' >>> find_longest_palindromic_substring(\\"ac\\") 'a' >>> find_longest_palindromic_substring(\\"forgeeksskeegfor\\") 'geeksskeeg' def is_palindrome(sub: str) -> bool: # Helper function to check if a given substring is a palindrome without slicing left, right = 0, len(sub)-1 while left < right: if sub[left] != sub[right]: return False left += 1 right -= 1 return True max_length = 0 longest_palindrome = \\"\\" for i in range(len(s)): for j in range(i, len(s)): # construct substr from s[i] to s[j] without slicing substr = \\"\\" for k in range(i, j + 1): substr += s[k] if is_palindrome(substr): if len(substr) > max_length: max_length = len(substr) longest_palindrome = substr return longest_palindrome"},{"question":"In Python, write a function \`find_substring_indices\` that takes in two arguments: a main string and a substring. This function should return a list of all starting indices where the substring is found within the main string. Ensure that your function handles edge cases, such as when the substring is longer than the main string or when the substring is empty. Provide examples demonstrating the usage of your function.","solution":"def find_substring_indices(main_string, substring): Returns a list of starting indices where the substring is found within the main string. if not substring: return [i for i in range(len(main_string) + 1)] if main_string else [0] indices = [] len_main = len(main_string) len_sub = len(substring) for i in range(len_main - len_sub + 1): if main_string[i:i + len_sub] == substring: indices.append(i) return indices"},{"question":"Imagine you are building an inventory management application using Python and SQL. Your task is to write a function that retrieves data from a database table named \`products\` that contains columns \`id\`, \`name\`, \`quantity\`, and \`price\`. You need to fetch all items that have a \`quantity\` greater than a specified threshold and return their details as a list of dictionaries. Each dictionary should contain the keys \`'id'\`, \`'name'\`, \`'quantity'\`, and \`'price'\`, with their respective values. Here's the setup for the database connection using SQLite: \`\`\`python import sqlite3 def get_products_above_threshold(threshold): # Your code goes here \`\`\` Write the implementation of the \`get_products_above_threshold\` function to achieve the described functionality. Use parameterized queries to protect against SQL injection.","solution":"import sqlite3 def get_products_above_threshold(threshold): Retrieves all items from the 'products' table that have a quantity greater than the specified threshold. Parameters: - threshold (int): The quantity threshold. Returns: - list of dicts: A list of dictionaries containing the product details with keys 'id', 'name', 'quantity', and 'price'. connection = sqlite3.connect('inventory.db') cursor = connection.cursor() query = SELECT id, name, quantity, price FROM products WHERE quantity > ? cursor.execute(query, (threshold,)) rows = cursor.fetchall() # Convert the result to a list of dictionaries products = [] for row in rows: product = { 'id': row[0], 'name': row[1], 'quantity': row[2], 'price': row[3] } products.append(product) # Close the connection cursor.close() connection.close() return products"},{"question":"Use the Iris dataset from Scikit-learn to build a k-nearest neighbors classifier. Implement a method to find the optimal value for k using cross-validation. Evaluate the model's accuracy, precision, recall, and F1-score for the optimal k. Visualize the decision boundaries for your model.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn import datasets from sklearn.model_selection import train_test_split, cross_val_score from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score def load_iris_data(): iris = datasets.load_iris() X = iris.data[:, :2] # For visualization purposes, we use only 2 features y = iris.target return train_test_split(X, y, test_size=0.3, random_state=42) def find_optimal_k(X_train, y_train, max_k=20): k_range = range(1, max_k + 1) k_scores = [] for k in k_range: knn = KNeighborsClassifier(n_neighbors=k) scores = cross_val_score(knn, X_train, y_train, cv=5, scoring='accuracy') k_scores.append(scores.mean()) optimal_k = k_range[np.argmax(k_scores)] return optimal_k, k_scores def evaluate_model(knn, X_test, y_test): y_pred = knn.predict(X_test) accuracy = accuracy_score(y_test, y_pred) precision = precision_score(y_test, y_pred, average='weighted') recall = recall_score(y_test, y_pred, average='weighted') f1 = f1_score(y_test, y_pred, average='weighted') return accuracy, precision, recall, f1 def plot_decision_boundaries(knn, X, y): h = .02 # step size in the mesh x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1 y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1 xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h)) Z = knn.predict(np.c_[xx.ravel(), yy.ravel()]) Z = Z.reshape(xx.shape) plt.figure(figsize=(8, 6)) plt.contourf(xx, yy, Z, cmap=plt.cm.Paired) plt.scatter(X[:, 0], X[:, 1], c=y, edgecolor='k', cmap=plt.cm.Paired) plt.xlabel('Sepal length') plt.ylabel('Sepal width') plt.title('K-Nearest Neighbors decision boundaries') plt.show() # Main execution X_train, X_test, y_train, y_test = load_iris_data() optimal_k, k_scores = find_optimal_k(X_train, y_train) print(f\\"The optimal value of k is: {optimal_k}\\") knn = KNeighborsClassifier(n_neighbors=optimal_k) knn.fit(X_train, y_train) accuracy, precision, recall, f1 = evaluate_model(knn, X_test, y_test) print(f\\"Accuracy: {accuracy}\\") print(f\\"Precision: {precision}\\") print(f\\"Recall: {recall}\\") print(f\\"F1 Score: {f1}\\") # Plot decision boundaries plot_decision_boundaries(knn, np.vstack((X_train, X_test)), np.hstack((y_train, y_test)))"},{"question":"Implement a function to check if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should use a deque for efficient removal of elements from both ends. Write the function and demonstrate its usage on several test cases. \`\`\`python from collections import deque def is_palindrome(s: str) -> bool: # Initialize an empty deque dq = deque() # Populate the deque with alphanumeric characters in lowercase for char in s: if char.isalnum(): dq.append(char.lower()) # Check palindrome by comparing the ends while len(dq) > 1: if dq.popleft() != dq.pop(): return False return True # Test the function with various test cases test_cases = [\\"A man, a plan, a canal: Panama\\", \\"race a car\\", \\" \\", \\"madam\\", \\"No 'x' in Nixon\\", \\"Able was I, ere I saw Elba\\"] results = {test: is_palindrome(test) for test in test_cases} for test, result in results.items(): print(f\\"Is '{test}' a palindrome? {result}\\") \`\`\` This question requires the user to understand and implement a solution involving string manipulation, deques for efficient element removal, and basic control structures. This ensures cognitive and technical engagement in a practical context.","solution":"from collections import deque def is_palindrome(s: str) -> bool: Returns whether the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. # Initialize an empty deque dq = deque() # Populate the deque with alphanumeric characters in lowercase for char in s: if char.isalnum(): dq.append(char.lower()) # Check palindrome by comparing the ends while len(dq) > 1: if dq.popleft() != dq.pop(): return False return True"},{"question":"Write a Python function \`find_max_consecutive_sum(arr, k)\` that takes a list of integers \`arr\` and an integer \`k\`, and returns the maximum sum of \`k\` consecutive elements in the list. If \`k\` is greater than the length of the list, the function should return None. Ensure optimal efficiency in your solution by leveraging an appropriate algorithmic approach.","solution":"def find_max_consecutive_sum(arr, k): Returns the maximum sum of k consecutive elements in the list arr. If k is greater than the length of the list, returns None. n = len(arr) if k > n: return None max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Implement a program to solve a scheduling conflict problem. You are given a list of meeting intervals where each interval is represented by two integers, start time and end time. Write a function 'can_attend_all_meetings' that takes a list of intervals and returns a boolean indicating whether a person can attend all the meetings without any overlap. Example: \`\`\`python meetings = [(1, 3), (2, 4), (5, 6)] result = can_attend_all_meetings(meetings) print(result) # Output: False \`\`\` In this example, the person cannot attend all meetings because the first and second meetings overlap.","solution":"def can_attend_all_meetings(intervals): Determine if a person can attend all meetings without overlap. Args: intervals (list of tuple): A list of meeting time intervals Returns: bool: True if a person can attend all the meetings without overlap, else False # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) for i in range(len(intervals) - 1): # If the end time of the current meeting is greater than the start time # of the next meeting, they overlap. if intervals[i][1] > intervals[i + 1][0]: return False return True"},{"question":"You are given an integer array nums and a target integer k. Write a function to calculate the minimum length of a contiguous subarray of which the sum equals k. If there is no such subarray, return 0 instead. Example 1: Input: nums = [1, 1, 1, 2, 4, 3], k = 6 Output: 2 Explanation: The subarray [2, 4] has the minimum length with a sum of 6. Example 2: Input: nums = [1, 2, 3], k = 3 Output: 1 Explanation: The subarray [3] has the minimum length with a sum of 3. Example 3: Input: nums = [1, 1, 1, 1, 1], k = 5 Output: 5 Explanation: The subarray [1, 1, 1, 1, 1] has a sum of 5. Constraints: 1. \`1 <= nums.length <= 10^4\` 2. \`-10^5 <= nums[i] <= 10^5\` 3. \`-10^5 <= k <= 10^5\`","solution":"def min_subarray_len(nums, k): Returns the minimum length of a contiguous subarray whose sum equals k. If no such subarray exists, returns 0. current_sum = 0 min_length = float('inf') prefix_sum_map = {0: -1} for i, num in enumerate(nums): current_sum += num if current_sum - k in prefix_sum_map: min_length = min(min_length, i - prefix_sum_map[current_sum - k]) if current_sum not in prefix_sum_map: prefix_sum_map[current_sum] = i return min_length if min_length != float('inf') else 0"},{"question":"Construct a Python function that checks whether a given string can be rearranged to form a palindrome. A string can form a palindrome if at most one character appears an odd number of times; all other characters must appear an even number of times. This function should be capable of handling strings containing various characters, and should account for both uppercase and lowercase letters by treating them as distinct characters. Your function should also include error handling to manage edge cases such as empty strings, strings with only one character, and input types other than strings. Furthermore, the function should be equipped to recognize and handle large input strings effectively without compromising performance. To challenge the candidate further, provide a piece of erroneous code that attempts to solve the problem but fails due to incorrect handling of character counting or incorrect logic that does not correctly identify the characters that need to appear an even number of times. The candidate should be able to identify the errors in the code and correct them.","solution":"def can_form_palindrome(s): Check if a given string can be rearranged to form a palindrome. Args: s (str): The input string to check. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. if not isinstance(s, str): raise ValueError(\\"Input must be a string\\") if s == \\"\\": return True from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Implement a function that receives a list of dictionaries, where each dictionary represents a student's details, including their name (string), age (integer), and scores (list of integers). Your task is to write a program that calculates the average score for each student and returns a new list of dictionaries with their name and average score. If a student has no scores, the average score should be recorded as \`None\`. **Function Signature:** \`\`\`python def calculate_average_scores(students: list) -> list: pass \`\`\` **Example Input:** \`\`\`python students = [ {\\"name\\": \\"Alice\\", \\"age\\": 20, \\"scores\\": [90, 85, 88]}, {\\"name\\": \\"Bob\\", \\"age\\": 21, \\"scores\\": [72, 75, 68]}, {\\"name\\": \\"Charlie\\", \\"age\\": 19, \\"scores\\": []}, ] \`\`\` **Example Output:** \`\`\`python [ {\\"name\\": \\"Alice\\", \\"average_score\\": 87.67}, {\\"name\\": \\"Bob\\", \\"average_score\\": 71.67}, {\\"name\\": \\"Charlie\\", \\"average_score\\": None}, ] \`\`\` **Constraints:** - The list of students will have at most 100 entries. - The \\"name\\" will always be a non-empty string. - The age will be a positive integer. - Scores will be a list of integers ranging from 0 to 100. If the list is empty, the average score should be \`None\`. - The average score should be rounded to two decimal places.","solution":"def calculate_average_scores(students: list) -> list: Calculates the average score for each student and returns a new list of dictionaries with their name and average score. If a student has no scores, the average score is None. Args: - students: List of dictionaries, where each dictionary contains 'name' (str), 'age' (int), and 'scores' (list of int). Returns: - List of dictionaries, where each dictionary contains 'name' (str) and 'average_score' (float or None). result = [] for student in students: name = student['name'] scores = student['scores'] if scores: avg_score = round(sum(scores) / len(scores), 2) else: avg_score = None result.append({\\"name\\": name, \\"average_score\\": avg_score}) return result"},{"question":"Design a class-based library in Python to simulate a simplified banking system. The library should support the following functionalities: 1. Creating a new bank account with an initial balance. 2. Depositing money into the account. 3. Withdrawing money from the account, ensuring the balance never becomes negative. 4. Transferring money between accounts. 5. Monitoring account transactions and maintaining a history of all transactions for each account. Define appropriate classes, methods, and any necessary attributes to implement the library. # Constraints - A bank account can only be created with a non-negative initial balance. - Withdrawal and transfer operations should fail if they would result in negative balances. - Each transaction should be recorded in the transaction history, along with a timestamp and a brief description. # Interface The library should expose the following class and methods: \`class BankAccount\` - \`__init__(self, initial_balance: float)\`: Initializes a new bank account with \`initial_balance\`. - \`deposit(self, amount: float) -> bool\`: Deposits \`amount\` to the account. Returns \`True\` if the operation is successful, \`False\` otherwise. - \`withdraw(self, amount: float) -> bool\`: Withdraws \`amount\` from the account if sufficient funds are available. Returns \`True\` if the operation is successful, \`False\` otherwise. - \`transfer(self, recipient_account: 'BankAccount', amount: float) -> bool\`: Transfers \`amount\` from this account to \`recipient_account\` if sufficient funds are available. Returns \`True\` if the operation is successful, \`False\` otherwise. - \`transaction_history(self) -> list\`: Returns a list of transaction history records, where each record is a dictionary containing \`timestamp\`, \`type\`, \`amount\`, and \`description\`. # Example Usage \`\`\`python # Creating two bank accounts account1 = BankAccount(500) account2 = BankAccount(1000) # Performing deposits and withdrawals account1.deposit(200) # Current balance: 700 account1.withdraw(100) # Current balance: 600 # Transferring money between accounts account1.transfer(account2, 150) # account1’s balance: 450, account2’s balance: 1150 # Printing transaction history print(account1.transaction_history()) \`\`\` # Example Output \`\`\`plaintext [ {\\"timestamp\\": \\"2023-10-01 10:00:00\\", \\"type\\": \\"deposit\\", \\"amount\\": 200, \\"description\\": \\"Deposit of 200\\"}, {\\"timestamp\\": \\"2023-10-01 11:00:00\\", \\"type\\": \\"withdrawal\\", \\"amount\\": 100, \\"description\\": \\"Withdrawal of 100\\"}, {\\"timestamp\\": \\"2023-10-01 12:00:00\\", \\"type\\": \\"transfer\\", \\"amount\\": 150, \\"description\\": \\"Transfer of 150 to account ID 2\\"} ] \`\`\`","solution":"from datetime import datetime class BankAccount: __account_id_counter = 0 def __init__(self, initial_balance: float): if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative\\") self.balance = initial_balance self.transactions = [] BankAccount.__account_id_counter += 1 self.account_id = BankAccount.__account_id_counter def deposit(self, amount: float) -> bool: if amount <= 0: return False self.balance += amount self.transactions.append({ \\"timestamp\\": datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\"), \\"type\\": \\"deposit\\", \\"amount\\": amount, \\"description\\": f\\"Deposit of {amount}\\" }) return True def withdraw(self, amount: float) -> bool: if amount <= 0 or self.balance < amount: return False self.balance -= amount self.transactions.append({ \\"timestamp\\": datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\"), \\"type\\": \\"withdrawal\\", \\"amount\\": amount, \\"description\\": f\\"Withdrawal of {amount}\\" }) return True def transfer(self, recipient_account: 'BankAccount', amount: float) -> bool: if amount <= 0 or self.balance < amount: return False self.balance -= amount recipient_account.balance += amount self.transactions.append({ \\"timestamp\\": datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\"), \\"type\\": \\"transfer\\", \\"amount\\": amount, \\"description\\": f\\"Transfer of {amount} to account ID {recipient_account.account_id}\\" }) recipient_account.transactions.append({ \\"timestamp\\": datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\"), \\"type\\": \\"transfer\\", \\"amount\\": amount, \\"description\\": f\\"Transfer of {amount} from account ID {self.account_id}\\" }) return True def transaction_history(self) -> list: return self.transactions"},{"question":"Write a program that takes a string containing only parentheses characters '(' and ')' and determines if the parentheses are balanced. A string is considered balanced if every opening parenthesis has a corresponding closing parenthesis and the order of parentheses is correct. Your program should print \\"Balanced\\" if the string is balanced, or \\"Not Balanced\\" otherwise. Additionally, ensure your program handles edge cases like an empty string or a large number of parentheses. Implement the solution using an appropriate data structure and algorithm.","solution":"def is_balanced_parentheses(s): Determines if the parentheses in the string \`s\` are balanced. :param s: A string containing only parentheses characters '(' and ')' :return: \\"Balanced\\" if the string is balanced, otherwise \\"Not Balanced\\" stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if not stack: return \\"Not Balanced\\" stack.pop() if not stack: return \\"Balanced\\" else: return \\"Not Balanced\\""},{"question":"Create a function in Python that reads a CSV file and returns the number of unique values in a specified column. You should handle missing data gracefully by ignoring the rows where the specified column has a missing value. Write test cases to verify your implementation with different CSV inputs, including testing how the function handles an empty file and a file with all missing values in the specified column. You may use the Python \`csv\` module for handling CSV files.","solution":"import csv def count_unique_values_in_column(file_path, column_name): Reads a CSV file and returns the number of unique values in a specified column, ignoring rows where the column has missing values. Arguments: file_path -- The path to the CSV file. column_name -- The name of the column to count unique values for. Returns: int -- The number of unique values in the specified column. unique_values = set() try: with open(file_path, newline='', encoding='utf-8') as csvfile: reader = csv.DictReader(csvfile) for row in reader: value = row.get(column_name) if value: unique_values.add(value) except FileNotFoundError: print(f\\"The file {file_path} does not exist.\\") return 0 return len(unique_values)"},{"question":"Create a Python function that accepts a string containing an expression with nested parentheses and verifies if the parentheses are balanced. You must implement this function without using any pre-existing Python libraries for stack operations. For example: \`\`\`python expression_1 = \\"((a+b)*(c-d))\\" expression_2 = \\"((a+b)*(c-d)\\" \`\`\`","solution":"def are_parentheses_balanced(expression): Returns True if the parentheses in the expression are balanced, False otherwise. stack = [] for char in expression: if char == '(': stack.append(char) elif char == ')': if not stack: # if stack is empty return False stack.pop() return len(stack) == 0 # return True if stack is empty, meaning all parentheses were balanced"},{"question":"Create a function named 'findMajorityElement' that takes an array of integers as input and returns the majority element. A majority element in an array is an element that appears more than half of the size of the array. If no majority element exists, the function should return 'None'. Ensure the solution has a time complexity of O(n) and uses O(1) extra space.","solution":"def findMajorityElement(nums): Finds the majority element in the array, which is the element that appears more than half the size of the array. If no such element exists, returns None. candidate = None count = 0 # Boyer-Moore Voting Algorithm for num in nums: if count == 0: candidate = num count += (1 if num == candidate else -1) # Verify if the candidate is the majority element if nums.count(candidate) > len(nums) // 2: return candidate else: return None"},{"question":"Write a function that takes a list of strings and returns a new list with the strings sorted by the number of vowels they contain, in descending order. In the case of a tie (when two strings have the same number of vowels), maintain the relative order of those strings as they appeared in the input list. # Function Signature: \`\`\`python def sort_by_vowel_count(strings: List[str]) -> List[str]: \`\`\` # Input - A list of n strings where 1 <= n <= 1000. # Output - A new list of n strings sorted by the number of vowels in each string, in descending order. # Example \`\`\`python input: [\\"hello\\", \\"world\\", \\"python\\", \\"programming\\"] output: [\\"programming\\", \\"hello\\", \\"world\\", \\"python\\"] \`\`\` # Notes - For the purpose of this problem, vowels are considered to be 'a', 'e', 'i', 'o', and 'u' (case insensitive). - The input only contains lowercase alphabetic characters.","solution":"def sort_by_vowel_count(strings): def count_vowels(s): return sum(1 for char in s if char in 'aeiouAEIOU') return sorted(strings, key=lambda s: (-count_vowels(s), strings.index(s)))"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the elements that appear more than once in the original list. The order of the elements in the returned list should be the same as their first appearance in the original list. Ensure that your solution has a time complexity of O(n).","solution":"def find_duplicates(nums): Returns a list containing elements that appear more than once in the input list. The order of elements in the returned list is the same as their first appearance in the original list. Parameters: nums (list): A list of integers. Returns: list: A list of integers containing elements that appear more than once in the input list. from collections import defaultdict count = defaultdict(int) duplicates = [] seen = set() # Count the occurrences of each number in the list for num in nums: count[num] += 1 # Find numbers that appear more than once for num in nums: if count[num] > 1 and num not in seen: duplicates.append(num) seen.add(num) return duplicates"},{"question":"Write a function that computes the sum of all the even numbers in a given range [a, b], inclusive. The function should handle both positive and negative integers and ensure it works for any order of input for a and b (i.e., a may be less than, equal to, or greater than b). For example: Initial input: a = 1, b = 10 Expected output: 30 Initial input: a = 10, b = 1 Expected output: 30 Initial input: a = -10, b = 10 Expected output: 0","solution":"def sum_even_in_range(a, b): Returns the sum of all even numbers in the given range [a, b], inclusive. # Make sure that a is less than or equal to b for proper range creation if a > b: a, b = b, a sum_evens = 0 for number in range(a, b + 1): if number % 2 == 0: sum_evens += number return sum_evens"},{"question":"Write a function named \`find_pair_with_sum\` that takes two arguments: a list of integers and a target sum. Your function should return a tuple of two integers that add up to the target sum, or \`None\` if no such pair exists. Ensure your solution has a time complexity of O(n). For example: \`\`\`python def find_pair_with_sum(numbers, target_sum): # Your code here # Example usage: result = find_pair_with_sum([2, 7, 11, 15], 9) print(result) # Output: (2, 7) result = find_pair_with_sum([1, 2, 3, 4, 5], 10) print(result) # Output: None \`\`\`","solution":"def find_pair_with_sum(numbers, target_sum): Returns a tuple of two integers from the list that add up to the target sum, or None if no such pair exists. This function has a time complexity of O(n). seen_numbers = {} for number in numbers: complement = target_sum - number if complement in seen_numbers: return (complement, number) seen_numbers[number] = True return None"},{"question":"Describe an efficient method to implement a real-time chat application in Python, where messages between users are instantly transmitted and displayed. Discuss the challenges you might face regarding concurrency, message broadcasting, and maintaining a persistent connection. Please provide a succinct example of how you would handle these issues using Python libraries and frameworks, while also considering security, scalability, and fault tolerance. Include a brief code snippet to illustrate key aspects of your solution.","solution":"from fastapi import FastAPI, WebSocket, WebSocketDisconnect from typing import List app = FastAPI() class ConnectionManager: def __init__(self): self.active_connections: List[WebSocket] = [] async def connect(self, websocket: WebSocket): await websocket.accept() self.active_connections.append(websocket) def disconnect(self, websocket: WebSocket): self.active_connections.remove(websocket) async def broadcast(self, message: str): for connection in self.active_connections: await connection.send_text(message) manager = ConnectionManager() @app.websocket(\\"/ws/chat\\") async def chat_endpoint(websocket: WebSocket): await manager.connect(websocket) try: while True: data = await websocket.receive_text() await manager.broadcast(data) except WebSocketDisconnect: manager.disconnect(websocket)"},{"question":"Implement a function that takes a list of integers as input and returns a new list with all the prime numbers in the original list doubled, while keeping non-prime numbers unchanged. Ensure the function is efficient even for a large list size of up to 10^5 elements. \`\`\`python def double_primes(arr): Function to double the prime numbers in a list while keeping non-prime numbers unchanged. Constraints: - 1 <= len(arr) <= 10^5 - -10^9 <= arr[i] <= 10^9 >>> double_primes([2, 3, 4, 5, 6, 7, 8, 9]) [4, 6, 4, 10, 6, 14, 8, 9] >>> double_primes([11, 13, 17, 19, 23]) [22, 26, 34, 38, 46] >>> double_primes([1, 4, 6, 8, 10]) [1, 4, 6, 8, 10] >>> double_primes([31, 33, 37, 39, 41]) [62, 33, 74, 39, 82] >>> double_primes([-3, -5, -7, 0, 1]) [6, 10, 14, 0, 1] def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True return [2 * x if is_prime(abs(x)) else x for x in arr] \`\`\`","solution":"def double_primes(arr): Function to double the prime numbers in a list while keeping non-prime numbers unchanged. Args: arr (list of int): The list of integers. Returns: list of int: A new list where prime numbers are doubled and non-prime numbers are unchanged. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True return [2 * x if is_prime(abs(x)) else x for x in arr]"},{"question":"Imagine you are given a dataset about employee information in a company. You are tasked with predicting an employee's likelihood of leaving the company based on several features such as satisfaction level, last evaluation score, number of projects, average monthly hours, time spent at the company, and whether they had a work accident or got a promotion in the last 5 years. Using logistic regression, you have fitted the model and obtained the following coefficients: - **Intercept**: -1.25 - **Satisfaction Level**: -3.1 - **Last Evaluation Score**: 0.8 - **Number of Projects**: 0.5 - **Average Monthly Hours**: 0.01 - **Time Spent at Company**: 0.2 - **Work Accident (Yes=1, No=0)**: -0.5 - **Promotion in Last 5 Years (Yes=1, No=0)**: -0.3 The dataset contains the following example row for which you need to calculate the probability of leaving the company using the logistic regression model: - **Satisfaction Level**: 0.5 - **Last Evaluation Score**: 0.7 - **Number of Projects**: 3 - **Average Monthly Hours**: 150 - **Time Spent at Company**: 3 - **Work Accident**: 0 - **Promotion in Last 5 Years**: 1 # Tasks: 1. Write down the logistic regression equation using the given coefficients. 2. Calculate the linear combination (z) of these features for the given example row. 3. Compute the probability of the employee leaving the company using the sigmoid function. Make sure to show your calculations and interpret the result in simple terms.","solution":"import math def logistic_regression_probability(satisfaction_level, last_evaluation_score, num_projects, avg_monthly_hours, time_spent_at_company, work_accident, promotion_last_5_years): Calculate the probability of an employee leaving the company using the logistic regression model. :param satisfaction_level: Satisfaction level of the employee. :param last_evaluation_score: Last evaluation score of the employee. :param num_projects: Number of projects the employee is involved in. :param avg_monthly_hours: Average monthly hours the employee works. :param time_spent_at_company: Number of years the employee has been at the company. :param work_accident: Whether the employee had a work accident (1 if yes, 0 if no). :param promotion_last_5_years: Whether the employee got a promotion in the last 5 years (1 if yes, 0 if no). :return: Probability of the employee leaving the company. # Coefficients from the logistic regression model intercept = -1.25 coeffs = { \\"satisfaction_level\\": -3.1, \\"last_evaluation_score\\": 0.8, \\"num_projects\\": 0.5, \\"avg_monthly_hours\\": 0.01, \\"time_spent_at_company\\": 0.2, \\"work_accident\\": -0.5, \\"promotion_last_5_years\\": -0.3 } # Calculate linear combination (z) z = (intercept + coeffs[\\"satisfaction_level\\"] * satisfaction_level + coeffs[\\"last_evaluation_score\\"] * last_evaluation_score + coeffs[\\"num_projects\\"] * num_projects + coeffs[\\"avg_monthly_hours\\"] * avg_monthly_hours + coeffs[\\"time_spent_at_company\\"] * time_spent_at_company + coeffs[\\"work_accident\\"] * work_accident + coeffs[\\"promotion_last_5_years\\"] * promotion_last_5_years) # Calculate the probability using the sigmoid function probability = 1 / (1 + math.exp(-z)) return probability # Example row from the dataset probability = logistic_regression_probability( satisfaction_level=0.5, last_evaluation_score=0.7, num_projects=3, avg_monthly_hours=150, time_spent_at_company=3, work_accident=0, promotion_last_5_years=1 ) print(f\\"Probability of the employee leaving the company: {probability}\\")"},{"question":"Write a function that takes an input list of strings and returns a new list containing only the unique strings from the input. The function should be case-insensitive and ignore any leading or trailing whitespace when determining uniqueness. The output list should preserve the original order of first occurrence from the input list. Examples: \`\`\` Input: [\\" Apple \\", \\"banana\\", \\"apple\\", \\" Banana\\", \\"CHERRY\\", \\" cherry \\"] Output: [\\" Apple \\", \\"banana\\", \\"CHERRY\\"] Input: [\\"hello\\", \\"HELLO\\", \\"Hello \\", \\"world\\", \\" WORLD\\"] Output: [\\"hello\\", \\"world\\"] \`\`\`","solution":"def unique_strings(input_list): Returns a new list containing only the unique strings from the input list. The comparison is case-insensitive and ignores leading/trailing whitespace. Args: input_list (list): List of strings. Returns: list: List of unique strings preserving the order of first occurrence. seen = set() unique_list = [] for string in input_list: normalized_string = string.strip().lower() if normalized_string not in seen: seen.add(normalized_string) unique_list.append(string) return unique_list"},{"question":"Write a Python function \`find_most_frequent\` that takes a list of integers as input and returns the integer that appears the most frequently in the list. If there is a tie for the most frequent element, return the smallest one. **Function Signature:** \`def find_most_frequent(nums: List[int]) -> int:\` **Example:** \`\`\`python # Example 1 input_list = [1, 3, 3, 2, 1, 3, 1, 2, 1] output = find_most_frequent(input_list) print(output) # Output: 1 # Example 2 input_list = [4, 5, 6, 7, 6, 5, 6, 4, 4] output = find_most_frequent(input_list) print(output) # Output: 4 # Example 3 input_list = [10, 9, 8, 9, 10, 7, 8, 8] output = find_most_frequent(input_list) print(output) # Output: 8 \`\`\` **Constraints:** - The input list will have at least one integer. - The elements in the list will be non-negative integers.","solution":"from typing import List from collections import Counter def find_most_frequent(nums: List[int]) -> int: Returns the integer that appears most frequently in the list. If there is a tie, return the smallest integer with the highest frequency. counter = Counter(nums) most_common = counter.most_common() max_freq = most_common[0][1] most_frequent_candidates = [num for num, freq in most_common if freq == max_freq] return min(most_frequent_candidates)"},{"question":"Write a Python function \`merge_sorted_arrays\` that takes two parameters: \`arr1\` and \`arr2\`. These parameters are both lists containing sorted integers in ascending order. The function should merge both lists into a new list with all integers sorted in ascending order, without using any built-in sort functions. Additionally, if the input lists contain non-integer items, the function should raise a \`TypeError\` with a descriptive error message. After implementing the function, write five test cases to ensure it works correctly under different scenarios including edge cases (e.g., when one or both lists are empty). **Example:** \`\`\`python def merge_sorted_arrays(arr1, arr2): # Your implementation here # Test Cases: # 1. Normal case with two non-empty lists of integers # 2. Normal case where one list is empty and the other is non-empty # 3. Edge case where both lists are empty # 4. Edge case where input lists include non-integer values # 5. Normal case with duplicate values in input lists \`\`\`","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted lists into one sorted list. Raises TypeError if non-integer items are found in the input lists. if not all(isinstance(x, int) for x in arr1): raise TypeError(\\"arr1 contains non-integer items\\") if not all(isinstance(x, int) for x in arr2): raise TypeError(\\"arr2 contains non-integer items\\") i, j = 0, 0 merged_list = [] while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_list.append(arr1[i]) i += 1 else: merged_list.append(arr2[j]) j += 1 while i < len(arr1): merged_list.append(arr1[i]) i += 1 while j < len(arr2): merged_list.append(arr2[j]) j += 1 return merged_list"},{"question":"Design a Python function that accepts a list of integers and an integer target value, and determines whether any two distinct integers in the list sum up to the target value without using Python's combination functions. The function should return True if such a pair exists, and False otherwise. For instance, for the list [2, 7, 11, 15] and the target value 9, the function should return True as 2 + 7 equals 9.","solution":"def has_pair_with_sum(nums, target): Determines if any two distinct integers in the list sum up to the target value. :param nums: List of integers :param target: Target sum value :return: True if a pair exists that sums to the target value, False otherwise seen = set() for num in nums: needed = target - num if needed in seen: return True seen.add(num) return False"},{"question":"Compute the product of all even numbers in a given list of integers, excluding numbers greater than 50, and then return the result modulo 1000000007. List: [12, 18, 25, 32, 45, 60, 72, 80]","solution":"def product_of_evens_modulo(nums): Computes the product of all even numbers in the given list \`nums\`, excluding numbers greater than 50 and returns the result modulo 1000000007. MOD = 1000000007 product = 1 for num in nums: if num % 2 == 0 and num <= 50: product = (product * num) % MOD return product"},{"question":"Write a function that takes in a string containing multiple positive integers separated by various delimiters (such as spaces, commas, semicolons, and newlines) and returns the sum of these integers. The function should handle cases where the integers are embedded within other characters gracefully and should ignore any non-numeric characters while summing up the integers. Additionally, the function should be capable of processing very large integers and returning the correct sum without integer overflow or precision errors.","solution":"import re def sum_of_integers(s): Takes in a string containing multiple positive integers separated by various delimiters and returns the sum of these integers. Non-numeric characters and delimiters are ignored in the sum computation. # Use regex to find all sequences of digits in the input string numbers = re.findall(r'd+', s) # Convert all found digit sequences to integers and sum them up return sum(map(int, numbers))"},{"question":"Find the longest substring without repeating characters in the given string using Python. #Initial Erroneous Code: def longest_unique_substtr(string): n = len(string) longest = 0 for i in range(n): seen = set() for j in range(i, n): if string[j] in seen: break seen.add(string[j]) longest = max(longest, j - i) return longest # Example usage: s = \\"abcabcbb\\" print(longest_unique_substtr(s)) # Output should be 3 # Note that in the initial code provided, there is an off-by-one error in calculating the length of the substring.","solution":"def longest_unique_substtr(s): Returns the length of the longest substring without repeating characters in the given string. n = len(s) char_index_map = {} longest = 0 start = 0 for i in range(n): if s[i] in char_index_map: start = max(start, char_index_map[s[i]] + 1) char_index_map[s[i]] = i longest = max(longest, i - start + 1) return longest"},{"question":"The input to the function is given as - a list of tuples where each tuple contains a first name (string), last name (string), and a score (float). The function should group the scores by the concatenated first and last name, and compute the average score for each name. Write a function that sorts the names in ascending order based on their average score. If two names have the same average score, sort them alphabetically by their full name (concatenation of first name and last name). The output should be a list of tuples, where each tuple contains the full name and the average score. Additionally, the function should handle erroneous data entries. If the score is not a float or cannot be cast to a float, the function should skip that score and log the error with a message indicating the full name and the score in question. The function should also handle cases where the list is empty or contains invalid tuples (not containing exactly three elements), raising a ValueError if encountered. Lastly, write unit tests to validate the functionality of your code. The function should also be able to handle large datasets efficiently.","solution":"def process_scores(data): import logging logging.basicConfig(level=logging.ERROR) if not data: raise ValueError(\\"Input list is empty\\") scores = {} for entry in data: if len(entry) != 3: raise ValueError(f\\"Invalid tuple (does not contain exactly three elements): {entry}\\") first_name, last_name, score = entry full_name = f\\"{first_name} {last_name}\\" try: score = float(score) except ValueError: logging.error(f\\"Invalid score for {full_name}: {score}\\") continue if full_name not in scores: scores[full_name] = [] scores[full_name].append(score) averages = [(name, sum(score_list) / len(score_list)) for name, score_list in scores.items()] averages.sort(key=lambda x: (x[1], x[0])) return averages"},{"question":"Create a Python script that interacts with a SQLite database to manage a collection of books in a library. The script should allow users to perform CRUD operations on the books, where each book has a title, author, publication date, and genre. Implement search functionality to query the database for books by title or author. Additionally, provide a way to list all books published within a specific date range. Ensure the script adheres to best practices for database handling and error management.","solution":"import sqlite3 from contextlib import contextmanager @contextmanager def open_connection(db_name): conn = sqlite3.connect(db_name) try: yield conn finally: conn.close() def create_books_table(db_name): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL, author TEXT NOT NULL, publication_date TEXT NOT NULL, genre TEXT NOT NULL ) ''') conn.commit() def add_book(db_name, title, author, publication_date, genre): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' INSERT INTO books (title, author, publication_date, genre) VALUES (?, ?, ?, ?) ''', (title, author, publication_date, genre)) conn.commit() def get_book(db_name, book_id): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' SELECT * FROM books WHERE id = ? ''', (book_id,)) return cursor.fetchone() def update_book(db_name, book_id, title, author, publication_date, genre): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' UPDATE books SET title = ?, author = ?, publication_date = ?, genre = ? WHERE id = ? ''', (title, author, publication_date, genre, book_id)) conn.commit() def delete_book(db_name, book_id): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' DELETE FROM books WHERE id = ? ''', (book_id,)) conn.commit() def search_books_by_title_author(db_name, search_term): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' SELECT * FROM books WHERE title LIKE ? OR author LIKE ? ''', (f'%{search_term}%', f'%{search_term}%')) return cursor.fetchall() def list_books_by_date_range(db_name, start_date, end_date): with open_connection(db_name) as conn: cursor = conn.cursor() cursor.execute(''' SELECT * FROM books WHERE publication_date BETWEEN ? AND ? ''', (start_date, end_date)) return cursor.fetchall() # Initialize the database create_books_table('library.db')"},{"question":"Design a function that takes a list of integer intervals and an integer value as inputs, and determines whether the value falls within any of the intervals. If the value is present in any interval, return the interval as a tuple; otherwise, return None. intervals = [(1, 5), (10, 15), (20, 25)] value = 12","solution":"def interval_contains_value(intervals, value): Determines whether the value falls within any of the given intervals. Parameters: intervals (list of tuples): List of integer intervals represented as tuples (start, end). value (int): The integer value to be checked. Returns: tuple or None: The interval that contains the value if found, otherwise None. for interval in intervals: if interval[0] <= value <= interval[1]: return interval return None"},{"question":"Design an algorithm to find all unique permutations of a given string \`s\` that do not contain consecutive identical characters. The solution should be efficient and take into account the possibility of repeated characters in the input string. Return the list of unique permutations sorted in lexicographical order. Example 1: Input: s = \\"aab\\" Output: [\\"aba\\"] Example 2: Input: s = \\"aaa\\" Output: [] Example 3: Input: s = \\"abc\\" Output: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] Constraints: - The length of \`s\` is between 1 and 8, inclusive. - \`s\` consists of lowercase English letters only. - The output list should not contain any duplicate values.","solution":"from itertools import permutations def unique_permutations_without_consecutive(s): Generates all unique permutations of the string \`s\` that do not contain consecutive identical characters. unique_perms = set(permutations(s)) valid_perms = [] for perm in unique_perms: valid = True for i in range(1, len(perm)): if perm[i] == perm[i-1]: valid = False break if valid: valid_perms.append(\\"\\".join(perm)) return sorted(valid_perms)"},{"question":"Using the pandas and matplotlib libraries, create a bar chart that shows the total sales revenue for each product category in a given dataset. The dataset contains a \\"category\\" column representing the category of the product and a \\"sales\\" column representing the sales revenue for each product. Additionally, ensure that: 1. The chart has an appropriate title and labels for the x-axis and y-axis. 2. The bars are color-coded based on the categories, and a legend is included to explain the color coding. 3. Annotations are added to the top of each bar to display the exact total sales revenue for each category. 4. The categories are sorted in descending order based on total sales revenue. Extend your solution to include the standard deviation of the sales within each category as error bars on the bar chart. This will help in understanding the variability in sales within each category.","solution":"import pandas as pd import matplotlib.pyplot as plt import numpy as np def plot_total_sales_with_error_bars(df): Plots a bar chart with total sales revenue for each product category. Includes error bars representing the standard deviation of sales within each category. Parameters: df (pd.DataFrame): DataFrame containing 'category' and 'sales' columns. # Group by category and calculate total sales and standard deviation summary = df.groupby('category').agg({'sales': ['sum', 'std']}) summary.columns = ['total_sales', 'std_dev'] summary = summary.sort_values(by='total_sales', ascending=False) categories = summary.index total_sales = summary['total_sales'] std_dev = summary['std_dev'] # Plotting fig, ax = plt.subplots() bars = ax.bar(categories, total_sales, yerr=std_dev, capsize=5) # Add title and labels ax.set_title('Total Sales Revenue by Category') ax.set_xlabel('Category') ax.set_ylabel('Total Sales Revenue') # Annotate bars with total sales values for bar in bars: height = bar.get_height() ax.annotate(f'{height:.2f}', xy=(bar.get_x() + bar.get_width() / 2, height), xytext=(0, 3), # 3 points vertical offset textcoords=\\"offset points\\", ha='center', va='bottom') # Add legend and show plot ax.legend([bars], ['Total Sales'], loc='best') plt.xticks(rotation=45) plt.show()"},{"question":"Implement a class-based system to simulate a library management system. The system should support adding new books, borrowing books, returning books, and listing all available books. Each book is characterized by ISBN, title, author, and a boolean indicating its availability status. Your implementation should include appropriate classes, methods, and exception handling for invalid operations (e.g., borrowing a book that is not available). Additionally, write a driver program to demonstrate the functionality of your library management system. Optimize your code for readability and reusability, ensuring it adheres to the principles of object-oriented design, such as encapsulation and abstraction. Document the code with appropriate comments, and include a discussion on the trade-offs between time and space efficiency in your design.","solution":"class Book: def __init__(self, isbn, title, author): self.isbn = isbn self.title = title self.author = author self.available = True def __repr__(self): return f\\"Book(ISBN: {self.isbn}, Title: {self.title}, Author: {self.author}, Available: {self.available})\\" class Library: def __init__(self): self.books = [] def add_book(self, isbn, title, author): new_book = Book(isbn, title, author) self.books.append(new_book) def borrow_book(self, isbn): for book in self.books: if book.isbn == isbn: if book.available: book.available = False return f\\"You have borrowed: {book.title}\\" else: raise Exception(\\"This book is already borrowed.\\") raise Exception(\\"Book with the given ISBN not found.\\") def return_book(self, isbn): for book in self.books: if book.isbn == isbn: book.available = True return f\\"You have returned: {book.title}\\" raise Exception(\\"Book with the given ISBN not found.\\") def list_books(self): available_books = [book for book in self.books if book.available] return available_books"},{"question":"Given an unsorted array of integers, write a function to find the longest increasing subsequence (LIS). The function should return both the length of the LIS and one possible LIS. Example Input: Array: [3, 10, 2, 1, 20] Expected Output: Length of LIS: 3 One possible LIS: [3, 10, 20]","solution":"def longest_increasing_subsequence(arr): Function to find the length of the longest increasing subsequence (LIS) and one possible LIS in an unsorted array. if not arr: return 0, [] n = len(arr) dp = [1] * n predecessor = [-1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 predecessor[i] = j max_length = max(dp) lis_index = dp.index(max_length) lis = [] while lis_index != -1: lis.append(arr[lis_index]) lis_index = predecessor[lis_index] lis.reverse() return max_length, lis"},{"question":"Create a Python function that takes an integer as input and returns the factorial of that number. The function should handle edge cases such as negative numbers and zero appropriately. Additionally, optimize your solution for large input values to avoid stack overflow errors.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. Returns 1 if n is 0. For negative integers, raises a ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"給定一個包含多個子串的字串陣列，請撰寫一個函式來找到最常出現的單一子串，並返回該子串及其出現的次數。 ['apple', 'banana', 'apple', 'orange', 'banana', 'apple'] Output: ('apple', 3)","solution":"def most_common_substring(arr): Returns the most common substring and its count from the array. substring_count = {} # Count the occurrences of each substring for substring in arr: if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 # Find the substring with the maximum count most_common_substring = max(substring_count, key=substring_count.get) return (most_common_substring, substring_count[most_common_substring])"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. The order of numbers in the original list must be preserved in the new list. You are not allowed to use any built-in functions for prime detection; you must implement your own logic for checking if a number is prime. For example: If the input list is \`[2, 4, 5, 6, 7, 8, 9]\`, the output list should be \`[2, 5, 7]\`. Note: Handle edge cases such as empty list, lists with all non-prime numbers, or lists with repeated numbers appropriately.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is a prime number if n % 2 == 0: return False # if n is even and not 2, it's not a prime number for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def get_primes_from_list(nums): Returns a new list containing only the prime numbers from the original list. Preserves the order of numbers in the original list. return [num for num in nums if is_prime(num)]"},{"question":"In the context of database normalization, explain the concept of Boyce-Codd Normal Form (BCNF) and how it differs from the Third Normal Form (3NF). Provide an example of a relational schema that is in 3NF but not in BCNF, and demonstrate the steps to convert that schema to BCNF.","solution":"def explain_bcnf_and_3nf(): Provides an explanation of Boyce-Codd Normal Form (BCNF) and its differences from the Third Normal Form (3NF). Also includes an example of a relational schema that is in 3NF but not in BCNF, and the steps to convert that schema to BCNF. explanation = Boyce-Codd Normal Form (BCNF) is a stronger version of the Third Normal Form (3NF). It deals with certain types of anomalies that are not covered by 3NF. - **Third Normal Form (3NF):** A relation is in 3NF if it is in 2NF and no transitive dependency exists, meaning non-prime attributes are not dependent on other non-prime attributes. - **Boyce-Codd Normal Form (BCNF):** A relation is in BCNF if it is in 3NF and, for every functional dependency (X -> Y), X is a superkey. This removes the anomalies that can be present even in 3NF. **Example of a relational schema that is in 3NF but not in BCNF:** Consider the relation R (A, B, C) with the following functional dependencies: 1. A -> B 2. B -> C **Checking 3NF:** - The relation is in 2NF as every non-key attribute is fully functionally dependent on the primary key. - Attribute C is non-prime and B -> C, with B as prime attribute (B is not a candidate key here). Since no non-prime attribute depends on another non-prime attribute, the relation is in 3NF. **Checking BCNF:** - For A -> B, A is a candidate key (superkey). - For B -> C, B is not a superkey. Thus, the relation is not in BCNF. **Steps to convert to BCNF:** 1. Decompose the relation into: - R1(A, B) - R2(B, C) 2. Now both R1 and R2 are in BCNF: - In R1, A is the superkey for A -> B. - In R2, B is the superkey for B -> C. This eliminates the anomaly present in the original schema. return explanation"},{"question":"Design a function that takes a list of dictionaries and a target key as input and returns a new list where each dictionary is filtered to retain only the target key and its corresponding value. If the target key is not found in a dictionary, it should be omitted from the filtered list. Function signature: \`def filter_dicts(input_list: List[Dict[str, Any]], target_key: str) -> List[Dict[str, Any]]:\`","solution":"from typing import List, Dict, Any def filter_dicts(input_list: List[Dict[str, Any]], target_key: str) -> List[Dict[str, Any]]: Filters a list of dictionaries to retain only the target key and its corresponding value. Parameters: input_list (List[Dict[str, Any]]): The list of dictionaries to be filtered. target_key (str): The key that should be retained in new dictionaries. Returns: List[Dict[str, Any]]: A new list of dictionaries containing only the target key and its value. Dictionaries from the input list that do not contain the target key are omitted. filtered_list = [] for d in input_list: if target_key in d: filtered_list.append({target_key: d[target_key]}) return filtered_list"},{"question":"Write a function in Python that takes a string as input and returns the longest substring that contains no repeating characters. If there are multiple substrings with the same length, return the first one that appears. Additionally, provide a faulty approach where beginners often mistakenly overwrite the longest substring found so far. Example input: \\"abcabcbb\\" Expected output: \\"abc\\" Consider this common mistake and correct it in your implementation. Mistaken code: \`\`\` def longest_unique_substring(s): longest = \\"\\" for i in range(len(s)): current = \\"\\" for j in range(i, len(s)): if s[j] in current: break current += s[j] longest = current return longest \`\`\`","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. if not s: return \\"\\" start = 0 max_len = 0 max_substr = \\"\\" used_char = {} for index, char in enumerate(s): if char in used_char and start <= used_char[char]: start = used_char[char] + 1 else: current_len = index - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:index + 1] used_char[char] = index return max_substr"},{"question":"Write a function that takes a string containing a mathematical expression (containing only non-negative integers, \`+\`, and \`-\` operators) and evaluates the result. The function should return the final value as an integer. For example: - Input: \`\\"3+5-2+8\\"\` - Output: \`14\`","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string containing non-negative integers and +, - operators. return eval(expression)"},{"question":"Write a function that takes a list of integers and returns a new list that contains the squares of all the even numbers from the original list, arranged in the same order they appeared in the input list. Ensure that odd numbers are not included in the output list. def square_evens(nums: list) -> list: Takes a list of integers and returns a list containing squares of the even integers in the same order >>> square_evens([1, 2, 3, 4, 5]) [4, 16] >>> square_evens([10, 11, 12, 13]) [100, 144] >>> square_evens([7, 8, 9, 14, 17]) [64, 196]","solution":"def square_evens(nums: list) -> list: Takes a list of integers and returns a list containing squares of the even integers in the same order. return [x**2 for x in nums if x % 2 == 0]"},{"question":"Write a function that takes a list of integers as input and returns a new list containing only the prime numbers from the input list. Additionally, provide the sum of the prime numbers extracted. Your function should return a tuple with two elements: the list of prime numbers and their sum. For the purposes of this problem, assume that the input list will contain at least one integer.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def extract_primes_and_sum(int_list): Takes a list of integers as input and returns a tuple with two elements: 1. A list of prime numbers from the input list. 2. The sum of the extracted prime numbers. primes = [num for num in int_list if is_prime(num)] prime_sum = sum(primes) return (primes, prime_sum)"},{"question":"Write a function \`balanced_brackets\` that accepts a single string \`s\` containing only the characters '(', ')', '{', '}', '[' and ']', and returns \`True\` if the string is balanced, and \`False\` otherwise. A string is considered balanced if every opening bracket has a corresponding closing bracket in the correct order. For example: - \`balanced_brackets(\\"(){}[]\\")\` should return \`True\` - \`balanced_brackets(\\"([{}])\\")\` should return \`True\` - \`balanced_brackets(\\"(}\\")\` should return \`False\` - \`balanced_brackets(\\"({[})\\")\` should return \`False\`","solution":"def balanced_brackets(s): Returns True if the input string s containing only the characters '(', ')', '{', '}', '[' and ']' is balanced. Otherwise, returns False. stack = [] bracket_map = {')': '(', '}': '{', ']': '['} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: # Character is not one of the allowed brackets return False return stack == []"},{"question":"Write a function that calculates the nth Fibonacci number, where n is provided as input. The Fibonacci sequence is defined such that each number is the sum of the two preceding ones, starting with 0 and 1. Your function should be optimized to handle large values of n efficiently. Input: n = 10 Output: 55","solution":"def fibonacci(n): Returns the nth Fibonacci number. Parameters: n (int): The position in the Fibonacci sequence to retrieve. Returns: int: The nth Fibonacci number. if n < 0: raise ValueError(\\"Input should be a non-negative integer\\") a, b = 0, 1 for _ in range(n): a, b = b, a + b return a"},{"question":"Write a Python function that takes a list of integers and returns a new list where each element is the sum of its adjacent neighbors and itself. For elements at the edges of the list, assume the outside neighbor is zero. Your function should not use any built-in functions for array manipulations (e.g., \`sum\`). For example, given the input list \`[1, 2, 3, 4]\`, the output should be \`[3, 6, 9, 7]\`, where: - 3 is obtained from 0+1+2 - 6 is obtained from 1+2+3 - 9 is obtained from 2+3+4 - 7 is obtained from 3+4+0","solution":"def sum_with_neighbors(lst): Returns a list where each element is the sum of its adjacent neighbors and itself. For edge elements, assume the outside neighbor is zero. if not lst: return [] result = [] n = len(lst) for i in range(n): left = lst[i - 1] if i > 0 else 0 center = lst[i] right = lst[i + 1] if i < n - 1 else 0 result.append(left + center + right) return result"},{"question":"Develop a Python function that takes a string consisting of a series of words separated by spaces. The function should determine the length of each word, construct a new string in which each word is replaced by a tuple consisting of the word itself and its length, and return this new string. Ensure that the function also handles any punctuation attached to the words. For instance, for the input \\"Hello, world! How's everything?\\", the output should be \\"('Hello,', 6) ('world!', 6) ('How's', 5) ('everything?', 11)\\".","solution":"def words_with_lengths(s): Returns a string in which each word is replaced by a tuple consisting of the word itself and its length. Parameters: s (str): The input string consisting of a series of words separated by spaces. Returns: str: A new string with each word replaced by a tuple of (word, length). words = s.split() result = ' '.join(f\\"('{word}', {len(word)})\\" for word in words) return result"},{"question":"Given a list of integers, write a Python function to find the second highest number in the list. If there is no second highest number (e.g., the list contains duplicates of a single integer or is empty), return \`None\`. Example: Input: [1, 3, 4, 5, 0, 2] Output: 4 Input: [7, 7, 7, 7] Output: None","solution":"def second_highest(numbers): Returns the second highest number in the list. If there is no second highest number, (e.g. the list contains duplicates of a single integer or is empty), return None. if len(numbers) < 2: return None unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Implement a function \`longest_substring_with_k_distinct(input_str, k)\` that takes a string \`input_str\` and an integer \`k\` as inputs. The function should return the length of the longest substring that contains exactly \`k\` distinct characters. If no such substring exists, return 0. Ensure the function efficiently handles edge cases such as empty strings and varying values of \`k\`. *Example*: \`\`\`python print(longest_substring_with_k_distinct(\\"eceba\\", 2)) # Output: 3 print(longest_substring_with_k_distinct(\\"aa\\", 1)) # Output: 2 print(longest_substring_with_k_distinct(\\"aabcd\\", 3)) # Output: 4 \`\`\`","solution":"def longest_substring_with_k_distinct(input_str, k): Returns the length of the longest substring with exactly k distinct characters. If no such substring exists, returns 0. if k == 0 or not input_str: return 0 n = len(input_str) window_start = 0 max_length = 0 char_frequency = {} for window_end in range(n): right_char = input_str[window_end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = input_str[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 if len(char_frequency) == k: max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"Write a function that takes a string of words separated by spaces and returns the length of the longest word. If there are multiple words of the same longest length, return the length of the first one encountered. Your function should ignore punctuation and case differences. Example input: \\"I love programming in Python!\\" Example output: 11","solution":"import string def longest_word_length(s): Returns the length of the longest word in the string \`s\`. Punctuation is ignored and case differences are not considered. # Remove punctuation s = s.translate(str.maketrans('', '', string.punctuation)) # Split the string into words and normalize to lowercase words = s.lower().split() # Find the longest word length max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) return max_length"},{"question":"Write a Python function that takes a string representing a mathematical expression and evaluates the result. The expression will include integers, operations (+, -, *, /), and may contain parentheses to indicate order of operations. Make sure your function handles invalid expressions gracefully by raising an appropriate error. Additionally, avoid using the built-in \`eval()\` function.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression string which can include integers, +, -, *, / operations, and parentheses. import operator import re def parse_expression(expression): tokens = re.findall(r'd+|[+/*()-]', expression) return tokens def precedence(op): if op == '+' or op == '-': return 1 if op == '*' or op == '/': return 2 return 0 def apply_operation(operands, operators): right = operands.pop() left = operands.pop() op = operators.pop() if op == '+': operands.append(operator.add(left, right)) elif op == '-': operands.append(operator.sub(left, right)) elif op == '*': operands.append(operator.mul(left, right)) elif op == '/': if right == 0: raise ZeroDivisionError(\\"Division by zero.\\") operands.append(operator.truediv(left, right)) def evaluate(tokens): operands = [] operators = [] i = 0 while i < len(tokens): token = tokens[i] if token.isdigit(): operands.append(int(token)) i += 1 elif token == '(': operators.append(token) i += 1 elif token == ')': while operators and operators[-1] != '(': apply_operation(operands, operators) operators.pop() i += 1 else: while (operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token)): apply_operation(operands, operators) operators.append(token) i += 1 while operators: apply_operation(operands, operators) return operands[0] tokens = parse_expression(expression) return evaluate(tokens)"},{"question":"Write a function that calculates and returns the most frequently occurring element in a given list. If there is a tie for the most frequent element, return any one of the most frequent elements. Consider edge cases where the list may be empty or contain multiple data types. Example: Input: [1, 2, 2, 'a', 'b', 'a'] Output: 2 or 'a'","solution":"from collections import Counter def most_frequent(lst): Returns the most frequently occurring element in the given list. If there is a tie, returns any one of the most frequent elements. If the list is empty, returns None. if not lst: return None counter = Counter(lst) max_count = max(counter.values()) return next(item for item, count in counter.items() if count == max_count)"},{"question":"Analyze the function \`reverse_and_sum\` and its behavior for an array of integers. Identify any logical errors or improvements that can be made. Additionally, suggest a more optimized version of the function if possible. \`\`\`python def reverse_and_sum(arr): total = 0 for i in range(len(arr)): total += arr[-i] return total \`\`\` Input: \`arr\` is an array of integers with length between 1 and 100, inclusive.","solution":"def reverse_and_sum(arr): total = 0 for i in range(len(arr)): total += arr[-(i+1)] # Corrected the indexing to access the reversed elements properly return total # Optimized version using Python built-in functions for better readability def reverse_and_sum_optimized(arr): return sum(arr[::-1])"},{"question":"Design a function that takes an integer n and generates a list of prime numbers up to n. Ensure the function only includes prime numbers less than or equal to n. The prime numbers should be generated using the Sieve of Eratosthenes algorithm. The function should return the list of prime numbers.","solution":"def sieve_of_eratosthenes(n): Generate a list of prime numbers up to n using the Sieve of Eratosthenes algorithm. Parameters: n (int): The upper limit for generating prime numbers. Returns: list: A list of prime numbers less than or equal to n. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 return [i for i in range(n + 1) if primes[i]]"},{"question":"Develop a Python function that simulates the functionality of a Least Recently Used (LRU) cache. Your function should use a dictionary to store the items and an order-preserving data structure to maintain the recency of access for each item. Implement methods to add an item to the cache, retrieve an item, and automatically evict the least recently used item when the cache reaches its maximum capacity. Function Signature: \`\`\`python class LRUCache: def __init__(self, capacity: int): pass def get(self, key: int) -> int: pass def put(self, key: int, value: int) -> None: pass \`\`\` # Example \`\`\`python cache = LRUCache(2) cache.put(1, 1) # cache is {1=1} cache.put(2, 2) # cache is {1=1, 2=2} print(cache.get(1)) # returns 1 and updates the recent usage; cache order is {2=2, 1=1} cache.put(3, 3) # evicts key 2; cache is {1=1, 3=3} print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1; cache is {3=3, 4=4} print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 \`\`\` # Constraints 1. The maximum capacity of the cache (\`capacity\`) is a positive integer. 2. You may assume the methods \`get\` and \`put\` will never be called concurrently. 3. All keys and values are integers.","solution":"class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = {} self.order = [] def get(self, key: int) -> int: if key in self.cache: self.order.remove(key) self.order.append(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.cache[key] = value self.order.remove(key) self.order.append(key) else: if len(self.cache) >= self.capacity: oldest_key = self.order.pop(0) del self.cache[oldest_key] self.cache[key] = value self.order.append(key)"},{"question":"Write a function that takes a list of integers and returns a new list with the elements sorted in ascending order, but keeping all the negative numbers in their original positions. For example: \`\`\`python input_list = [3, -1, 5, -2, 4] # The output should be [3, -1, 4, -2, 5] \`\`\` **Hint**: Use a two-pass approach where you first extract and sort the positive numbers, and then re-insert them into their corresponding original positions.","solution":"def sort_positive_keep_negative_positions(input_list): Returns a list with the elements sorted in ascending order, but keeping all the negative numbers in their original positions. # Extract positive numbers and their indices positive_numbers = [num for num in input_list if num >= 0] positive_numbers.sort() # Create a new list to store the result result = [] positive_index = 0 # Iterate through the original list for num in input_list: if num < 0: # Keep the negative numbers in their original positions result.append(num) else: # Replace the original positive numbers with the sorted ones result.append(positive_numbers[positive_index]) positive_index += 1 return result"},{"question":"You are tasked with evaluating a string consisting of only characters '(', ')', '{', '}', '[' and ']'. Your goal is to determine if the input string is valid. An input string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. Each closing bracket has a corresponding and preceding opening bracket. Examples: Input: \\"()\\" Output: True Input: \\"()[]{}\\" Output: True Input: \\"(]\\" Output: False Input: \\"([)]\\" Output: False Input: \\"{[]}\\" Output: True Function Signature: \`\`\`python def is_valid(s: str) -> bool: # Implement your solution here pass \`\`\` Constraints: - \`s\` length will be in the range \`[1, 10**4]\`.","solution":"def is_valid(s: str) -> bool: Determine if the input string of brackets is valid. :param s: Input string containing '(', ')', '{', '}', '[' and ']' :return: Boolean indicating whether the string is valid stack = [] bracket_map = {')': '(', '}': '{', ']': '['} for char in s: if char in bracket_map: top_element = stack.pop() if stack else '#' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function that takes a list of integers as input, removes any duplicate values, sorts the remaining numbers in ascending order, and returns the sorted list. Provide an erroneous piece of code for the candidate to analyze and fix. #Erroneous code: def remove_duplicates_and_sort(numbers): unique_numbers = [] for number in numbers: if not number in unique_numbers: unique_numbers.append(number) return unique_numbers.sort() test_list = [3, 1, 2, 3, 4, 1, 5] print(remove_duplicates_and_sort(test_list))","solution":"def remove_duplicates_and_sort(numbers): Takes a list of integers, removes duplicate values, sorts the remaining numbers, and returns the sorted list. unique_numbers = list(set(numbers)) # Converts the list to a set to remove duplicates, then back to a list unique_numbers.sort() # Sorts the list in ascending order return unique_numbers # Returns the sorted list"},{"question":"Design an algorithm in Python that reads a CSV file containing student grade data, calculates the average grade for each student, and writes the results to a new CSV file. The input CSV file is in the format: \`\`\` student_id, subject, grade \`\`\` For example: \`\`\` 001, Math, 78 001, English, 85 002, Math, 92 002, English, 88 \`\`\` The output CSV file should be in the format: \`\`\` student_id, average_grade \`\`\` For example: \`\`\` 001, 81.5 002, 90 \`\`\` You may assume all input files are correctly formatted. Use the \`csv\` module for reading and writing CSV files.","solution":"import csv from collections import defaultdict def calculate_average_grades(input_csv, output_csv): Reads an input CSV file with student grades, calculates the average grade for each student, and writes the results to an output CSV file. :param input_csv: Path to the input CSV file with student grade data :param output_csv: Path to the output CSV file to write the average grades student_grades = defaultdict(list) # Read the input CSV and aggregate grades for each student with open(input_csv, mode='r', newline='') as infile: reader = csv.reader(infile) next(reader) # Skip header for row in reader: student_id, subject, grade = row student_grades[student_id].append(float(grade)) # Calculate average grades averages = {student_id: sum(grades) / len(grades) for student_id, grades in student_grades.items()} # Write the results to the output CSV with open(output_csv, mode='w', newline='') as outfile: writer = csv.writer(outfile) writer.writerow(['student_id', 'average_grade']) for student_id, avg_grade in averages.items(): writer.writerow([student_id, avg_grade])"},{"question":"Design an algorithm that simulates the automated packaging of books into boxes of a specified weight limit. Given a list of books with their respective weights and a maximum weight capacity for each box, your algorithm should determine how to pack the books into the fewest number of boxes possible. Each box can contain multiple books as long as their combined weight does not exceed the weight limit. Your solution should consider the most efficient way to group the books, potentially leaving the least amount of unused space in each box.","solution":"def pack_books(weights, max_weight): Packs books into the fewest number of boxes possible without exceeding the maximum weight capacity per box. Parameters: weights (list of int): A list of book weights. max_weight (int): Maximum weight capacity per box. Returns: list of list of int: A list where each sublist contains the weights of books in one box. weights.sort(reverse=True) packed_boxes = [] while weights: current_box = [] current_weight = 0 for weight in weights[:]: if current_weight + weight <= max_weight: current_box.append(weight) current_weight += weight weights.remove(weight) packed_boxes.append(current_box) return packed_boxes"},{"question":"Given an unsorted list of integers, return the second-highest unique value in the list. If the list contains less than two unique values, return \`None\`. Additionally, examine the provided code and correct any issues found. Erroneous code: \`\`\` def find_second_highest(numbers): unique_numbers = list(set(numbers)) unique_numbers.sort() if len(unique_numbers) < 2: return unique_numbers[1] else: return None numbers_list = [45, 23, 12, 67, 45, 23, 99] print(find_second_highest(numbers_list)) \`\`\` Notes: - Do not use the built-in Python function \`sorted()\` to sort the list. - Explain the issues in the erroneous code and provide a corrected version.","solution":"def find_second_highest(numbers): Returns the second-highest unique value in the list. If the list contains less than two unique values, returns None. unique_numbers = list(set(numbers)) for i in range(len(unique_numbers)): for j in range(0, len(unique_numbers) - i - 1): if unique_numbers[j] > unique_numbers[j + 1]: unique_numbers[j], unique_numbers[j + 1] = unique_numbers[j + 1], unique_numbers[j] if len(unique_numbers) < 2: return None else: return unique_numbers[-2]"},{"question":"Create a function that takes a string as input and returns the most frequent character in the string. In case of a tie, return the character that appears first in the string. You may assume that the input string will contain at least one character. Function Signature: \`\`\`python def most_frequent_char(s: str) -> str: \`\`\` **Example** \`\`\`python most_frequent_char(\\"hello\\") \`\`\` **Expected Output** \`\`\`python l \`\`\` \`\`\`python most_frequent_char(\\"aabbbcccc\\") \`\`\` **Expected Output** \`\`\`python c \`\`\`","solution":"def most_frequent_char(s: str) -> str: Returns the most frequent character in the string s. In case of a tie, returns the character that appears first. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the character with the maximum frequency # In case of a tie, the one that appears first in the string will be chosen most_frequent = max(char_count, key=lambda char: (char_count[char], -s.index(char))) return most_frequent"},{"question":"Write a function that processes a collection of book titles and authors to generate a structured bibliographic record. The function should take a list of dictionaries, where each dictionary contains two keys: 'title' and 'author'. The function should return a string that lists the books alphabetically by title, with each title on a new line followed by the author in parenthesis. Additionally, create a secondary function that allows users to search for books by a specific author and returns a list of titles by that author. Ensure proper error handling for cases where the input format is incorrect or the author's name yields no results. Example input: \`\`\`python books = [ {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger'}, {'title': 'To Kill a Mockingbird', 'author': 'Harper Lee'}, {'title': '1984', 'author': 'George Orwell'} ] \`\`\` Expected output: \`\`\`python # Output of the first function \\"1984 (George Orwell)nThe Catcher in the Rye (J.D. Salinger)nTo Kill a Mockingbird (Harper Lee)\\" # Output of the second function when searching for \\"Harper Lee\\" ['To Kill a Mockingbird'] \`\`\` Instructions: - Implement the main function to generate the bibliographic record string. - Implement the search function to find titles by a given author. - Handle potential errors or invalid input by raising appropriate exceptions. - Ensure your code is well-documented and includes type hints where applicable.","solution":"from typing import List, Dict, Any def generate_bibliography(books: List[Dict[str, str]]) -> str: Generates a structured bibliographic record from a collection of book titles and authors. :param books: List of dictionaries containing book 'title' and 'author'. :return: A string that lists the books alphabetically by title with each title on a new line followed by the author in parenthesis. :raises ValueError: If the input data format is incorrect. if not all(isinstance(book, dict) and 'title' in book and 'author' in book for book in books): raise ValueError(\\"Each item in the books list must be a dictionary with 'title' and 'author' keys\\") sorted_books = sorted(books, key=lambda x: x['title']) return 'n'.join(f\\"{book['title']} ({book['author']})\\" for book in sorted_books) def search_books_by_author(books: List[Dict[str, str]], author: str) -> List[str]: Searches for books by a specific author. :param books: List of dictionaries containing book 'title' and 'author'. :param author: The author to search for. :return: A list of titles by the given author. :raises ValueError: If the input data format is incorrect. if not all(isinstance(book, dict) and 'title' in book and 'author' in book for book in books): raise ValueError(\\"Each item in the books list must be a dictionary with 'title' and 'author' keys\\") return [book['title'] for book in books if book['author'] == author]"},{"question":"Define a class called 'Cookbook' that encapsulates details and operations related to a cookbook. The class should utilize data encapsulation, employ a private data structure to store recipes, and define methods to manage these recipes. The 'Cookbook' class should support the following operations: 1. Adding a new recipe: Each recipe should include information such as the name of the dish, list of ingredients, and steps to prepare it. 2. Removing an existing recipe by the name of the dish. 3. Retrieving the details of a recipe by the name of the dish. 4. Listing all recipe names stored in the cookbook. Additionally, implement a way to handle scenarios where a user may try to add a duplicate recipe or remove a recipe that does not exist. Ensure the class can handle these cases gracefully by providing appropriate feedback. To extend complexity, implement a method that returns a list of recipes that can be made with a given set of ingredients. This method should check the provided ingredients against the ingredients required for each recipe and return only the names of recipes for which all ingredients are available. Example: - \`add_recipe(\\"Spaghetti Carbonara\\", [\\"Spaghetti\\", \\"Eggs\\", \\"Cheese\\", \\"Bacon\\"], [\\"Boil spaghetti\\", \\"Fry bacon\\", \\"Mix eggs and cheese\\", \\"Combine all ingredients\\"])\` - \`remove_recipe(\\"Spaghetti Carbonara\\")\` - \`get_recipe(\\"Spaghetti Carbonara\\")\` - \`list_recipes()\` - \`find_recipes([\\"Spaghetti\\", \\"Eggs\\", \\"Cheese\\"])\`","solution":"class Cookbook: def __init__(self): self._recipes = {} def add_recipe(self, name, ingredients, steps): if name in self._recipes: return f\\"Recipe for {name} already exists.\\" self._recipes[name] = { 'ingredients': ingredients, 'steps': steps } return f\\"Recipe for {name} added successfully.\\" def remove_recipe(self, name): if name not in self._recipes: return f\\"Recipe for {name} does not exist.\\" del self._recipes[name] return f\\"Recipe for {name} removed successfully.\\" def get_recipe(self, name): if name not in self._recipes: return f\\"Recipe for {name} does not exist.\\" return self._recipes[name] def list_recipes(self): return list(self._recipes.keys()) def find_recipes(self, available_ingredients): possible_recipes = [] for name, details in self._recipes.items(): if all(item in available_ingredients for item in details['ingredients']): possible_recipes.append(name) return possible_recipes"},{"question":"Write a function in Python that takes a 2D array of integers and rotates it 90 degrees clockwise. The function should be capable of handling both square and rectangular arrays. Additionally, it should also consider and handle the presence of zeroes or any other special integer values effectively, ensuring they are rotated as part of the structure without disruption. Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: rotated_matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given 2D matrix 90 degrees clockwise. :param matrix: List of lists where each list represents a row of integers. :returns: Rotated matrix 90 degrees clockwise. if not matrix or not matrix[0]: return [] num_rows, num_columns = len(matrix), len(matrix[0]) rotated_matrix = [[0] * num_rows for _ in range(num_columns)] for i in range(num_rows): for j in range(num_columns): rotated_matrix[j][num_rows - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Consider an array of integers where each value in the array represents the number of steps one can move forward from that position. For example, if an element at index \`i\` is \`3\`, you can move to positions \`i + 1\`, \`i + 2\`, or \`i + 3\` from there. Write a function that takes such an array and determines if it is possible to reach the last index of the array starting from the first index. The function should return a boolean value - \`True\` if it is possible to reach the end, and \`False\` otherwise. **Function Signature:** \`\`\`python def can_reach_end(steps: List[int]) -> bool: pass \`\`\` **Examples:** \`\`\`python assert can_reach_end([2, 3, 1, 1, 4]) == True # You can move to index 1 (2 steps), then to index 4 (3 steps). assert can_reach_end([3, 2, 1, 0, 4]) == False # You get stuck at index 3, as it has zero steps. \`\`\`","solution":"from typing import List def can_reach_end(steps: List[int]) -> bool: max_reachable = 0 for i, step in enumerate(steps): if i > max_reachable: return False max_reachable = max(max_reachable, i + step) if max_reachable >= len(steps) - 1: return True return False"},{"question":"Given a string of words, write a function that finds the longest word in which all the characters appear in order in the alphabet. If there are multiple words of the same length, return the first one. The words are separated by spaces, and the input string will contain only lowercase letters and spaces. # Function Signature \`\`\`python def longest_alphabetical_word(sentence: str) -> str: pass \`\`\` # Example \`\`\`python assert longest_alphabetical_word(\\"hello abcdefg xzy\\") == \\"abcdefg\\" assert longest_alphabetical_word(\\"email abc defgh\\") == \\"defgh\\" assert longest_alphabetical_word(\\"az by cx\\") == \\"az\\" \`\`\` # Constraints - The length of the input string will not exceed 1000 characters. - The input string will contain only lowercase letters and spaces. - There will be at least one word in the input string.","solution":"def longest_alphabetical_word(sentence: str) -> str: def is_alphabetical(word): return all(word[i] <= word[i+1] for i in range(len(word) - 1)) words = sentence.split() max_length = 0 longest_word = \\"\\" for word in words: if is_alphabetical(word) and len(word) > max_length: max_length = len(word) longest_word = word return longest_word"},{"question":"Design and implement a program that reverses the words in a given sentence while maintaining the original spacing and punctuation. For example, given the input sentence \\"Hello, world! This is a test.\\", the output should be \\"test. a is This world! Hello,\\". Bonus: Ensure that your solution handles multiple spaces between words, leading and trailing spaces, and various punctuation marks correctly. Include test cases to demonstrate the robustness of your solution.","solution":"import re def reverse_words(sentence): Reverses the words in a given sentence while maintaining the original spacing and punctuation. Args: sentence (str): The input sentence to be reversed. Returns: str: The sentence with words reversed but original punctuation and spacing preserved. # Using regular expression to identify words and spaces words = re.findall(r'S+|s+', sentence) # Extracting only the words word_list = [word for word in words if word.strip()] # Reversing the list of words reversed_words = word_list[::-1] # Creating a mapping for original indexes of words and spaces word_index = 0 result = [] for item in words: if item.strip(): result.append(reversed_words[word_index]) word_index += 1 else: result.append(item) return ''.join(result)"},{"question":"<p>Consider a sequence of integers. A segment tree is a versatile data structure used for storing information about intervals or segments of this sequence. Implement a segment tree to support the following operations efficiently:</p> <ul> <li><strong>Build:</strong> Construct the segment tree using an array of integers.</li> <li><strong>Range Sum Query (RSQ):</strong> Given two indices, compute the sum of elements in the specified range.</li> <li><strong>Update:</strong> Given an index and a new value, update the element at that index and recompute the necessary parts of the segment tree.</li> </ul> <p>You are required to write a class <code>SegmentTree</code> that supports the above operations:</p> <ul> <li><code>__init__(self, arr: List[int])</code>: Initializes the segment tree with the given array <code>arr</code> of integers.</li> <li><code>range_sum(self, left: int, right: int) -> int</code>: Returns the sum of elements from index <code>left</code> to <code>right</code> (inclusive).</li> <li><code>update(self, index: int, value: int)</code>: Updates the element at index <code>index</code> to <code>value</code> and adjusts the segment tree accordingly.</li> </ul> <p>Assume that the input array has a length of at most <code>10^5</code> and contains integer values. The number of queries and updates can both be up to <code>10^5</code>. Write efficient code to handle this under the constraints.</p> <p>For example, given an array <code>[1, 3, 5, 7, 9, 11]</code>:</p> <pre> tree = SegmentTree([1, 3, 5, 7, 9, 11]) assert tree.range_sum(1, 3) == 15 # sum of elements at indices 1 to 3 -> 3 + 5 + 7 = 15 tree.update(1, 10) # update the element at index 1 to 10 assert tree.range_sum(1, 3) == 22 # after the update, sum of elements at indices 1 to 3 -> 10 + 5 + 7 = 22 </pre>","solution":"from typing import List class SegmentTree: def __init__(self, arr: List[int]): self.n = len(arr) self.tree = [0] * (2 * self.n) # Build the tree self.build(arr) def build(self, arr: List[int]): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = arr[i] # Build the tree by calculating parent nodes for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def range_sum(self, left: int, right: int) -> int: # Get the sum of elements from index left to right (inclusive) left += self.n right += self.n + 1 # Make the right endpoint exclusive sum_ = 0 while left < right: if left % 2 == 1: sum_ += self.tree[left] left += 1 if right % 2 == 1: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def update(self, index: int, value: int): # Update the value at index and rebuild the tree index += self.n self.tree[index] = value while index > 1: index //= 2 self.tree[index] = self.tree[index * 2] + self.tree[index * 2 + 1]"},{"question":"Create a function that takes a list of integers and an integer n, and returns a new list containing only the elements that are greater than n. Additionally, sort the returned list in ascending order. For example, given the list [1, 5, 8, 12, -3, 7] and n = 5, the function should return [7, 8, 12].","solution":"def filter_and_sort(lst, n): Returns a new list containing only the elements that are greater than n, sorted in ascending order. :param lst: List of integers :param n: Integer threshold :return: Sorted list of integers greater than n return sorted([x for x in lst if x > n])"},{"question":"Design an algorithm that replaces each occurrence of a target number in a linked list with a new number. The function should traverse the linked list only once and must handle cases where multiple nodes contain the target value or the linked list is empty. \`\`\`python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def replace_value(head, target, new_val): Replace all occurrences of 'target' value in the linked list with 'new_val'. The function should traverse the linked list only once. Parameters: head (ListNode): The head node of the linked list. target (int): The value to be replaced. new_val (int): The value to replace the target with. Returns: ListNode: The head of the modified linked list. Example: >>> node1 = ListNode(1) >>> node2 = ListNode(2) >>> node3 = ListNode(2) >>> node4 = ListNode(4) >>> node1.next = node2 >>> node2.next = node3 >>> node3.next = node4 >>> result = replace_value(node1, 2, 3) >>> while result: print(result.val, end=\\" -> \\") result = result.next Output: 1 -> 3 -> 3 -> 4 -> \`\`\`","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def replace_value(head, target, new_val): Replace all occurrences of 'target' value in the linked list with 'new_val'. The function should traverse the linked list only once. Parameters: head (ListNode): The head node of the linked list. target (int): The value to be replaced. new_val (int): The value to replace the target with. Returns: ListNode: The head of the modified linked list. Example: >>> node1 = ListNode(1) >>> node2 = ListNode(2) >>> node3 = ListNode(2) >>> node4 = ListNode(4) >>> node1.next = node2 >>> node2.next = node3 >>> node3.next = node4 >>> result = replace_value(node1, 2, 3) >>> while result: print(result.val, end=\\" -> \\") result = result.next Output: 1 -> 3 -> 3 -> 4 -> current = head while current is not None: if current.val == target: current.val = new_val current = current.next return head"},{"question":"Compose a Python program to implement a function that takes a list of integers and returns a new list containing the squares of the even integers and the cubes of the odd integers. Ensure the output list maintains the original order of input elements.","solution":"def process_numbers(numbers): Returns a new list containing the squares of the even integers and the cubes of the odd integers from the input list. Parameters: numbers (list): A list of integers. Returns: list: A new list with processed integers. result = [] for num in numbers: if num % 2 == 0: result.append(num ** 2) else: result.append(num ** 3) return result"},{"question":"Create a function in Python that takes a string as input and returns the character that appears the maximum number of times. If multiple characters have the same highest frequency, return the one that appears first in the string. Write your function to handle both uppercase and lowercase letters as distinct characters. For example, given the input string \\"abracadabra\\", your function should return 'a'.","solution":"def max_frequency_char(s): Returns the character that appears the maximum number of times in the input string. If multiple characters have the same highest frequency, returns the one that appears first in the string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 max_freq = 0 max_char = '' for char in s: if char_count[char] > max_freq: max_freq = char_count[char] max_char = char return max_char"},{"question":"Create a function that finds the intersection of two arrays and returns a new array containing the intersecting elements, sorted in ascending order. Do not use any built-in sorting functions. Implement your own sorting algorithm for this purpose. You can use the following arrays for testing purposes: array1 = [4, 9, 5, 3, 7] array2 = [9, 4, 9, 8, 3, 4]","solution":"def find_intersection_and_sort(array1, array2): Returns a sorted array containing the intersecting elements of array1 and array2. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) # Find the intersection of the two arrays intersection = list(set(array1) & set(array2)) # Sort the intersection using the custom quicksort function return quicksort(intersection) # Example usage: # array1 = [4, 9, 5, 3, 7] # array2 = [9, 4, 9, 8, 3, 4] # print(find_intersection_and_sort(array1, array2)) # Output: [3, 4, 9]"},{"question":"Given a list of integers, a \\"mountain\\" subarray is defined as a contiguous subarray where the elements strictly increase up to a peak element, and then strictly decrease. The length of the mountain must be at least 3. Write a function in Python that takes a list of integers as input and returns the length of the longest mountain. If there is no mountain, return 0. # Example \`\`\`python Input: [2, 1, 4, 7, 3, 2, 5] Output: 5 Explanation: The longest mountain is [1, 4, 7, 3, 2], which has a length of 5. Input: [2, 2, 2] Output: 0 Explanation: There is no mountain, so the length is 0. \`\`\` # Constraints - The input list will have a length of at least 1 and at most 10,000. - Each element in the list will be an integer between -10^4 and 10^4.","solution":"def longest_mountain(arr): Returns the length of the longest mountain in the array. n = len(arr) if n < 3: return 0 longest = 0 for i in range(1, n - 1): if arr[i - 1] < arr[i] > arr[i + 1]: left = i - 1 while left > 0 and arr[left - 1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right + 1] < arr[right]: right += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Write a Python program that finds the longest increasing subsequence of a list of integers. Given a list of integers, the program should efficiently determine its longest increasing subsequence. You can assume that all the integers in the list are unique. Your solution should handle lists of up to 100,000 elements. For instance, given the list [10, 9, 2, 5, 3, 7, 101, 18], the program should return the subsequence [2, 3, 7, 101]. Validate your solution with multiple test cases, ensuring it covers edge cases such as an empty list or a list with only one element.","solution":"from bisect import bisect_left def longest_increasing_subsequence(nums): Returns the longest increasing subsequence of a list of integers. if not nums: return [] # Subsequence holding the ends of the longest increasing subsequence at each point sub = [] for num in nums: pos = bisect_left(sub, num) # If num is greater than all elements in sub, append it. if pos == len(sub): sub.append(num) else: # Otherwise replace the element at the found position sub[pos] = num return sub"},{"question":"Write a function that takes a list of integers as input and returns a new list containing the squares of all the positive integers in the original list. Negative integers and zeros should be excluded from the new list. The function should maintain the order of the positive integers as they appeared in the original list.","solution":"def square_positive_numbers(lst): This function takes a list of integers as input and returns a new list containing the squares of all the positive integers in the original list. Negative integers and zeros will be excluded from the new list. Parameters: lst (list): A list of integers Returns: list: A new list containing the squares of all the positive integers in the original list return [x**2 for x in lst if x > 0]"},{"question":"Design and implement a function that takes as input a list of strings, each string representing a sequence of comma-separated integers. The function should convert each string into a sorted list of integers and then merge these lists into a single sorted list of integers without duplicates. For example, given the input [\\"1,3,5,7\\", \\"2,4,6,8\\", \\"5,6\\"], the function should return [1, 2, 3, 4, 5, 6, 7, 8].","solution":"def merge_and_sort_strings(input_list): Takes a list of strings where each string is a sequence of comma-separated integers. Converts each string into a sorted list of integers and merges them into a single sorted list without duplicates. Args: input_list (list of str): List of comma-separated integer strings. Returns: list: Sorted list of integers without duplicates. merged_set = set() for item in input_list: numbers = map(int, item.split(',')) merged_set.update(numbers) return sorted(merged_set)"},{"question":"Design a function in Python that takes a string representing an algebraic expression containing only positive integers, addition ('+'), and multiplication ('*') operators. The function should parse this expression and calculate the result while respecting the standard operator precedence (i.e., multiplication before addition). You are NOT allowed to use the built-in \`eval\` function. Example: Input: \\"2+3*4\\" Output: 14 Input: \\"2*3+4\\" Output: 10 Helper functions that you might consider implementing could be a function to evaluate multiplication and another to handle addition. The primary function will integrate these to parse and compute the final result, maintaining the correct order of operations.","solution":"def evaluate(expression): Evaluates an algebraic expression containing integers, +, and * operators. Respects standard operator precedence (multiplication before addition). def evaluate_multiplication(expression): parts = expression.split('*') result = 1 for part in parts: result *= int(part) return result add_parts = expression.split('+') total = 0 for part in add_parts: if '*' in part: total += evaluate_multiplication(part) else: total += int(part) return total"},{"question":"Implement a function \`merge_unique_lists\` that takes two lists of integers as input and returns a new list containing all the unique elements from both input lists. The output list should not contain any duplicate values and should be sorted in ascending order. # Example \`\`\`python merge_unique_lists([1, 3, 5, 7], [2, 3, 5, 8, 9]) \`\`\` Output: \`\`\`python [1, 2, 3, 5, 7, 8, 9] \`\`\` # Constraints - The input lists can be of variable lengths and may contain elements in any order, including descending order. - The elements in the input lists are all integers within the range -10^6 to 10^6. - The function should work efficiently even for lists with up to 10^5 elements each. Write your function in Python.","solution":"def merge_unique_lists(list1, list2): Merges two lists into a single list containing only unique elements, sorted in ascending order. Args: list1 (list): First list of integers. list2 (list): Second list of integers. Returns: list: A sorted list with unique elements from both input lists. merged_set = set(list1).union(set(list2)) sorted_list = sorted(merged_set) return sorted_list"},{"question":"Given a list of people's names along with their known languages, write a program that accomplishes the following: 1. Calculate the total number of unique languages spoken across the list. 2. Determine the number of people speaking each language. 3. Identify all languages spoken by at least a specified number of people, inputted by the user. 4. For each person, find and list other people who speak the same set of languages (ignoring exact order). 5. Your code should be optimized to handle a large list of people and languages efficiently. Assume the input is in the following format: people_languages = {'Alice':['English', 'Spanish'], 'Bob':['French'], 'Charlie':['Spanish', 'French'], 'David':['English', 'Spanish', 'French']}","solution":"def get_unique_languages(people_languages): Calculates the total number of unique languages spoken across the list. unique_languages = set() for languages in people_languages.values(): for language in languages: unique_languages.add(language) return len(unique_languages) def get_language_speakers(people_languages): Determine the number of people speaking each language. language_speakers = {} for languages in people_languages.values(): for language in languages: if language in language_speakers: language_speakers[language] += 1 else: language_speakers[language] = 1 return language_speakers def languages_spoken_by_at_least_n_people(people_languages, n): Identify all languages spoken by at least a specified number of people. language_speakers = get_language_speakers(people_languages) result = [language for language, count in language_speakers.items() if count >= n] return result def find_other_people_with_same_languages(people_languages): For each person, find and list other people who speak the same set of languages. from collections import defaultdict language_sets = defaultdict(list) for person, languages in people_languages.items(): language_set = frozenset(languages) language_sets[language_set].append(person) result = {} for person, languages in people_languages.items(): language_set = frozenset(languages) result[person] = [p for p in language_sets[language_set] if p != person] return result"},{"question":"Create a class \`Rectangle\` that takes two parameters during initialization: length and width. The class should have the following methods: 1. \`area()\` - Returns the area of the rectangle. 2. \`perimeter()\` - Returns the perimeter of the rectangle. 3. \`is_square()\` - Returns \`True\` if the rectangle is a square (length equals width) and \`False\` otherwise. 4. \`scale(factor)\` - Scales the size of the rectangle by a given factor. Both the length and width should be multiplied by the factor. Ensure the factor is a positive non-zero number, otherwise return an error message. For demonstration purposes, use the following steps: - Initialize a rectangle with length 4 and width 2. - Check if it is a square. - Scale the rectangle by a factor of 2. - Calculate and output the area and perimeter of the scaled rectangle.","solution":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width def perimeter(self): return 2 * (self.length + self.width) def is_square(self): return self.length == self.width def scale(self, factor): if factor > 0: self.length *= factor self.width *= factor else: return \\"Factor must be a positive non-zero number\\" # Demonstration rect = Rectangle(4, 2) print(\\"Is square:\\", rect.is_square()) rect.scale(2) print(\\"Scaled length:\\", rect.length) print(\\"Scaled width:\\", rect.width) print(\\"Area:\\", rect.area()) print(\\"Perimeter:\\", rect.perimeter())"},{"question":"Create a function that takes a string representing a mathematical expression involving addition (+), subtraction (-), multiplication (*), and division (/). The function should evaluate the expression and return the result as a float. Assume the expression does not contain any spaces and handles only non-negative integers and the standard arithmetic operators. Explain the algorithm used to parse and evaluate the expression, and discuss its time complexity. Provide an explanation of how the operator precedence and associativity are managed in your solution.","solution":"def eval_math_expression(expression): Evaluates a mathematical expression given as a string and returns the result as a float. Assumes the expression contains only non-negative integers and +, -, *, / operators. def get_precedence(op): if op in ['+', '-']: return 1 if op in ['*', '/']: return 2 return 0 def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == '+': values.append(left + right) elif operator == '-': values.append(left - right) elif operator == '*': values.append(left * right) elif operator == '/': values.append(left / right) def to_postfix(expression): operators = [] values = [] index = 0 while index < len(expression): if expression[index].isdigit(): num = 0 while index < len(expression) and expression[index].isdigit(): num = num * 10 + int(expression[index]) index += 1 values.append(num) else: while (operators and get_precedence(operators[-1]) >= get_precedence(expression[index])): apply_operator(operators, values) operators.append(expression[index]) index += 1 while operators: apply_operator(operators, values) return values.pop() return float(to_postfix(expression))"},{"question":"Implement a function to parse given JSON data representing a collection of books and return a summary, handling potential errors within the data. The function should be able to handle missing fields, incorrect data types, and return a formatted output summarizing the book information. Data: \`\`\`json [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"year\\": \\"2001\\", \\"isbn\\": \\"123-4567890123\\"}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"year\\": 2003, \\"isbn\\": \\"456-7890123456\\"}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author C\\", \\"year\\": \\"year_net_given\\", \\"isbn\\": \\"789-0123456789\\"} ] \`\`\` Requirements: 1. The JSON data must be parsed and validated in Python. 2. Each book entry must include a title, author, year, and ISBN number. 3. Handle any incorrect data types (e.g., non-integer year fields) by skipping those entries with errors. 4. The function should print the summary in a tabular format with the column headers: 'Title', 'Author', 'Year', 'ISBN'. 5. Your solution should include test cases that validate these scenarios.","solution":"import json def parse_books(json_data): Parses the JSON data representing the collection of books and returns a formatted summary. If any book entry has incorrect data types or missing fields, those entries will be skipped. books = json.loads(json_data) valid_books = [] for book in books: try: title = book['title'] author = book['author'] year = int(book['year']) # This will raise ValueError for non-integer values isbn = book['isbn'] valid_books.append(book) except (KeyError, ValueError): continue # Create summary in a tabular format summary = \\"TitlettAuthorttYeartISBNn\\" summary += \\"-\\" * 50 + \\"n\\" for book in valid_books: summary += f\\"{book['title']}t{book['author']}t{book['year']}t{book['isbn']}n\\" return summary # Assuming this is the provided JSON data json_data = ''' [ {\\"title\\": \\"Book One\\", \\"author\\": \\"Author A\\", \\"year\\": \\"2001\\", \\"isbn\\": \\"123-4567890123\\"}, {\\"title\\": \\"Book Two\\", \\"author\\": \\"Author B\\", \\"year\\": 2003, \\"isbn\\": \\"456-7890123456\\"}, {\\"title\\": \\"Book Three\\", \\"author\\": \\"Author C\\", \\"year\\": \\"year_net_given\\", \\"isbn\\": \\"789-0123456789\\"} ] ''' # Display the summary print(parse_books(json_data))"},{"question":"Design a function that takes a list of strings and an integer k, and returns a list of the k most frequent strings in descending order of frequency. In case of a tie, the strings should be sorted alphabetically. For this problem, assume all strings are lowercase and contain only alphabetical characters. You are not allowed to use any built-in functions that directly accomplish this task (such as Counter from collections in Python). Example: Input: \`[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\", \\"kiwi\\"]\`, \`2\` Output: \`[\\"apple\\", \\"banana\\"]\`","solution":"def k_most_frequent_strings(strings, k): Returns a list of the k most frequent strings in descending order of frequency. In case of a tie, the strings are sorted alphabetically. Parameters: strings (List[str]): A list of strings k (int): Number of most frequent strings to return Returns: List[str]: list of the k most frequent strings in descending order of frequency # Count the frequency of each string frequency = {} for string in strings: if string in frequency: frequency[string] += 1 else: frequency[string] = 1 # Convert frequency dictionary to a list of tuples and sort sorted_strings = sorted(frequency.items(), key=lambda item: (-item[1], item[0])) # Extract the k most frequent strings result = [item[0] for item in sorted_strings[:k]] return result"},{"question":"You are given a list of words and a target word. Write a program that finds all anagrams of the target word within the provided list of words. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. The output should be a list that contains all such anagrams found in the original list. # Input - A list of words \`words\` (1 <= len(words) <= 10^4, 1 <= len(word) <= 100 for each word). - A single string \`target\` (1 <= len(target) <= 100). # Output - A list of strings representing the anagrams of the target word found in the list of words. # Example \`\`\`python # Example Input words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"notanagram\\"] target = \\"inlets\\" # Example Output [\\"listen\\", \\"silent\\", \\"enlist\\"] # Example Input words = [\\"angel\\", \\"glean\\", \\"lane\\", \\"angle\\", \\"galen\\", \\"lean\\"] target = \\"glean\\" # Example Output [\\"angel\\", \\"glean\\", \\"angle\\", \\"galen\\"] \`\`\` # Note - You can assume that all input words and the target word are in lowercase. - The order of the words in the output list should be the same as they appear in the input list. # Constraints - Optimize for time complexity given the size of the input.","solution":"def find_anagrams(words, target): Finds all anagrams of the target word within the provided list of words. parameters: words (list of str): List of words to check for anagrams. target (str): Target word for which we need to find anagrams. returns: list of str: List of anagrams of the target word found in the list of words. from collections import Counter target_counter = Counter(target) anagrams = [] for word in words: if Counter(word) == target_counter: anagrams.append(word) return anagrams"},{"question":"Find Longest Increasing Path in a Matrix You are given an \`m x n\` integer matrix \`matrix\`. A path in the matrix is a sequence of cells where each move must be to one of the four cardinal directions (left, right, up, or down). Each cell must be strictly larger than the previous cell. Write a function to find the longest increasing path in \`matrix\` and return its length. Example 1: Input: matrix = [ [9,9,4], [6,6,8], [2,1,1] ] Output: 4 Explanation: The longest increasing path is \`[1, 2, 6, 9]\`. Example 2: Input: matrix = [ [3,4,5], [3,2,6], [2,2,1] ] Output: 4 Explanation: The longest increasing path is \`[3, 4, 5, 6]\`. Moving diagonally is not allowed. Note: \`1 <= m, n <= 200\` \`0 <= matrix[i][j] <= 2^31 - 1\` The problem requires finding the longest strictly increasing path in a matrix by moving only to adjacent cells in the four cardinal directions.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) memo = [[-1] * n for _ in range(m)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def dfs(x, y): if memo[x][y] != -1: return memo[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) memo[x][y] = max_length return max_length result = 0 for i in range(m): for j in range(n): result = max(result, dfs(i, j)) return result"},{"question":"Jane loves palindromic numbers and wants to generate a list of all palindromic numbers within a given range [start, end]. A palindromic number is a number that remains the same when its digits are reversed (e.g., 121, 1221). Write a function \`find_palindromes(start: int, end: int) -> List[int]\` that takes two integers, \`start\` and \`end\`, and returns a list of all palindromic numbers within that range, inclusive. Make sure your solution is efficient and performs well for large ranges. **Example:** \`\`\`python find_palindromes(100, 150) # Output: [101, 111, 121, 131, 141] find_palindromes(500, 600) # Output: [505, 515, 525, 535, 545, 555, 565, 575, 585, 595] \`\`\`","solution":"from typing import List def find_palindromes(start: int, end: int) -> List[int]: Returns a list of all palindromic numbers within the range [start, end], inclusive. palindromes = [] for number in range(start, end + 1): if str(number) == str(number)[::-1]: palindromes.append(number) return palindromes"},{"question":"A popular online game studio, \\"GameStudio\\", has released a new game where players can collect different types of resources: wood, stone, gold, and emeralds. Each resource has a different collection rate per minute: - Wood: 10 units per minute - Stone: 5 units per minute - Gold: 2 units per minute - Emeralds: 1 unit per minute Players can decide how much time to allocate to collect each type of resource within a given total time limit. Write a program that determines the possible combinations of collection times that a player can use to end up with exactly 100 units of resources. The program must meet the following constraints: 1. The total collection time must not exceed 30 minutes. 2. Collection times are measured in integer minutes (i.e., you cannot collect for 3.5 minutes). 3. Players can spend zero minutes collecting a certain type of resource. 4. The total units of resources collected must be exactly 100 units. Implement and output the possible combinations of collection times for wood, stone, gold, and emeralds that satisfy the above conditions.","solution":"def resource_collection_combinations(): results = [] for wood_minutes in range(31): for stone_minutes in range(31 - wood_minutes): for gold_minutes in range(31 - wood_minutes - stone_minutes): emerald_minutes = 30 - wood_minutes - stone_minutes - gold_minutes total_resources = (10 * wood_minutes) + (5 * stone_minutes) + (2 * gold_minutes) + emerald_minutes if total_resources == 100: results.append((wood_minutes, stone_minutes, gold_minutes, emerald_minutes)) return results # Example usage combinations = resource_collection_combinations() print(combinations)"},{"question":"Write a function to evaluate the healthiness of food choices based on a given dictionary of foods and their corresponding calorie counts. The function should accept a dictionary where keys are string names of the foods and values are integers representing the calories. It should also accept an integer 'calorie_limit' specifying the maximum allowable calories for a healthy food. The function should return a list of the names of the foods that are below the given calorie limit. Function Signature: def healthy_foods(food_calories: dict, calorie_limit: int) -> list: Args: food_calories (dict): A dictionary where keys are food names and values are integers representing the calories. calorie_limit (int): An integer representing the maximum allowable calories for a healthy food. Returns: list: A list of string names of foods with calorie counts below the calorie limit. Examples: healthy_foods({\\"Apple\\": 95, \\"Banana\\": 112, \\"Carrot\\": 41, \\"Doughnut\\": 195}, 100) => [\\"Apple\\", \\"Carrot\\"] healthy_foods({\\"Salad\\": 300, \\"Pizza\\": 600, \\"Granola Bar\\": 130, \\"Orange\\": 45}, 150) => [\\"Granola Bar\\", \\"Orange\\"] healthy_foods({\\"Burger\\": 500, \\"Fries\\": 365, \\"Milkshake\\": 360}, 400) => [\\"Fries\\", \\"Milkshake\\"]","solution":"def healthy_foods(food_calories: dict, calorie_limit: int) -> list: Returns the list of foods with calorie counts below the given calorie limit. Args: food_calories (dict): A dictionary where keys are food names and values are integers representing the calories. calorie_limit (int): An integer representing the maximum allowable calories for a healthy food. Returns: list: A list of string names of foods with calorie counts below the calorie limit. return [food for food, calories in food_calories.items() if calories < calorie_limit]"},{"question":"Write a function that takes a list of integers and an integer \`k\` as input and returns the \`k\` most frequent elements in the list. If there are multiple elements with the same frequency, return the smaller elements first. For example, given the input list \`nums = [1,1,1,2,2,3]\` and \`k = 2\`, the function should return \`[1, 2]\`. **Function Signature:** \`\`\`python def top_k_frequent(nums: List[int], k: int) -> List[int]: pass \`\`\` **Input:** - \`nums\` (List[int]): A list of integers where \`1 <= len(nums) <= 10^5\` and \`-10^4 <= nums[i] <= 10^4\`. - \`k\` (int): An integer where \`1 <= k <= len(nums)\`. **Output:** - List[int]: A list containing \`k\` most frequent elements sorted by their frequency and then by their value. **Example:** \`\`\`python nums = [4, 1, -1, 2, -1, 2, 3] k = 2 # Expected output: [-1, 2] # Explanation: -1 and 2 are the two most frequent elements. \`\`\` **Note:** - The solution must efficiently handle the constraints of the problem.","solution":"from typing import List from collections import Counter import heapq def top_k_frequent(nums: List[int], k: int) -> List[int]: Returns the k most frequent elements from the list of integers. If multiple elements have the same frequency, the smaller elements are returned first. count = Counter(nums) # Using a heap to get the k most frequent elements heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(heap) result = [] for _ in range(k): result.append(heapq.heappop(heap)[1]) result.sort() return result"},{"question":"You are given a list of integers, and your task is to find and remove duplicate elements while maintaining the order of their first appearance. Implement a function that takes a list as input and returns a new list with duplicates removed. Here is the function signature: \`\`\`python def remove_duplicates(nums): # Your code here \`\`\` # Input - A list of integers with possible duplicates. # Output - A list of integers with duplicates removed, preserving the original order of appearance. # Example Input: \`\`\`python [1, 3, 2, 3, 4, 2, 1, 5] \`\`\` Output: \`\`\`python [1, 3, 2, 4, 5] \`\`\` # Notes: - You cannot use any libraries or additional data structures that are not built-in Python. - Ensure your algorithm works efficiently even for large lists. To test your implementation, you can use the following code: \`\`\`python input_list = [1, 3, 2, 3, 4, 2, 1, 5] print(remove_duplicates(input_list)) # expected output: [1, 3, 2, 4, 5] \`\`\`","solution":"def remove_duplicates(nums): Removes duplicate elements from the list while maintaining order of first appearance. Parameters: nums (list of int): The list from which to remove duplicates. Returns: list of int: A new list with duplicates removed. seen = set() result = [] for num in nums: if num not in seen: result.append(num) seen.add(num) return result"},{"question":"Given a string containing a combination of letters and digits, write a function to return a new string where all the letters are swapped with their next letter in the alphabet and all digits remain unchanged. Ensure that 'z' or 'Z' wraps around to 'a' or 'A' respectively. The function should handle both uppercase and lowercase letters. Example: input_string = \\"a1b2c3zZ\\" The output should be \\"b1c2d3aA\\". Note: The input will always be a combination of letters and digits with no special characters.","solution":"def shift_letters(input_string): Returns a new string where all the letters are shifted to their next letter in the alphabet and all digits remain unchanged. 'z' or 'Z' wraps around to 'a' or 'A' respectively. def shift_char(c): if c.isalpha(): if c == 'z': return 'a' elif c == 'Z': return 'A' else: return chr(ord(c) + 1) else: return c return ''.join(shift_char(c) for c in input_string)"},{"question":"Design a function in Python to find the longest consecutive sequence of elements in an unsorted array of integers. The sequence must be composed of consecutive integers, and no number in the sequence should repeat. The function should return the length of this longest sequence. Ensure the solution handles all edge cases and runs in linear time (O(n)). For example, given the input [100, 4, 200, 1, 3, 2], the output should be 4, corresponding to the longest consecutive sequence [1, 2, 3, 4].","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive sequence of elements in an unsorted array of integers. The solution has a linear time complexity O(n). if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # only check for the beginning of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function that takes an array of integers and a target sum. The function should determine whether there are two distinct integers in the array that add up to the target sum. It should return a boolean value, 'true' if such a pair exists, and 'false' otherwise. Array: [4, 7, 1, 12, 5] Target Sum: 9","solution":"def has_pair_with_sum(arr, target): Determines whether there are two distinct integers in the array that add up to the target sum. :param arr: List[int] - array of integers :param target: int - target sum :return: bool - True if such a pair exists, otherwise False seen = set() for number in arr: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"Write a function in Python that takes a string as an input and returns the most frequently occurring character. If there are multiple characters with the same highest frequency, return the one that appears first in the input string. Your implementation should not utilize any external libraries and should achieve the solution with O(n) time complexity where n is the length of the string. Provide an explanation of your approach along with the function implementation.","solution":"def most_frequent_char(s): Returns the most frequently occurring character in the string 's'. If there are multiple characters with the same highest frequency, returns the one that appears first in the input string. if not s: return None char_count = {} max_count = 0 max_char = '' for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Check if this character now has the highest count if char_count[char] > max_count: max_count = char_count[char] max_char = char return max_char"},{"question":"Can you write a Python function that takes in a list of integers and returns a list of booleans indicating whether each integer is a prime number? The function should be optimized for performance for lists containing large integers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_list(int_list): Takes a list of integers and returns a list of booleans indicating whether each integer is a prime number. return [is_prime(num) for num in int_list]"},{"question":"Write a function in Python that takes a list of integers as input and recursively calculates the sum of all even numbers in the list. Your function should not use iterative constructs like loops but can make use of helper functions if necessary. Save the result in a variable named 'sum_of_evens'.","solution":"def sum_even_numbers(lst): Recursively calculates the sum of all even numbers in the input list. if not lst: return 0 first, rest = lst[0], lst[1:] if first % 2 == 0: return first + sum_even_numbers(rest) else: return sum_even_numbers(rest) # Example usage input_list = [1, 2, 3, 4, 5, 6] sum_of_evens = sum_even_numbers(input_list)"},{"question":"Construct a function that calculates the sum of all prime numbers up to a given integer \`n\`. Ensure your function handles edge cases such as \`n\` being less than 2 and efficiently computes the primes for larger values of \`n\`. Given the erroneous code below, debug it to meet the updated requirements: \`\`\`python def sum_of_primes(n): if n < 2: return 0 primes = [True] * (n + 1) p = 2 while p * p <= n: if primes[p] == True: for i in range(p * p, n + 1, p): primes[i] = False p += 1 total = 0 for p in range(2, n + 1): if primes[p]: total += p return total \`\`\` Input example: n = 10","solution":"def sum_of_primes(n): Returns the sum of all prime numbers up to and including n. If n is less than 2, returns 0. if n < 2: return 0 primes = [True] * (n + 1) p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 total = 0 for p in range(2, n + 1): if primes[p]: total += p return total"},{"question":"Write a function that takes a string representing a mathematical operation in postfix notation and evaluates it. For instance, given the input \\"3 4 + 2 * 7 /\\", your function should return the resultant value as a float. The postfix expression will contain only single-digit integers and the operators '+', '-', '*', and '/' separated by spaces.","solution":"def evaluate_postfix(expression): Evaluates a postfix (Reverse Polish) notation expression and returns the result as a float. Parameters: expression (str): The postfix expression to evaluate. Returns: float: The result of the evaluation. stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == '+': result = a + b elif token == '-': result = a - b elif token == '*': result = a * b elif token == '/': result = a / b stack.append(result) return float(stack.pop())"},{"question":"Implement a function that returns the k most frequent elements in a given list of integers. The function should be efficient in terms of time and space complexity. Example: - Input: numbers = [1, 1, 1, 2, 2, 3], k = 2 - Output: [1, 2] - Input: numbers = [4, 4, 4, 6, 6, 1, 1, 1, 1], k = 1 - Output: [1] You can assume k is always valid, 1 ≤ k ≤ number of unique elements in the list. **Constraints:** - The function should have a time complexity better than O(n^2). - You may use collections library for helper functions.","solution":"from collections import Counter import heapq def top_k_frequent_elements(numbers, k): Returns the k most frequent elements in the given list of integers, 'numbers'. count = Counter(numbers) return heapq.nlargest(k, count.keys(), key=count.get)"},{"question":"Write a Python class \`TemperatureConverter\` that can convert temperatures between Celsius, Fahrenheit, and Kelvin. The class should have methods to set and get the temperature in any of the three units, and it should automatically update the other units when one is set. Additionally, include error handling to manage invalid temperature values and provide a method to display the temperature in all units neatly formatted. Here is a starting class skeleton for you to build and expand upon: \`\`\`python class TemperatureConverter: def __init__(self): self._celsius = 0 self._fahrenheit = 0 self._kelvin = 0 def set_celsius(self, value): if value < -273.15: raise ValueError(\\"Temperature cannot be below absolute zero (-273.15°C)\\") self._celsius = value self._fahrenheit = (value * 9/5) + 32 self._kelvin = value + 273.15 def get_celsius(self): return self._celsius def set_fahrenheit(self, value): # Implement setting Fahrenheit and the necessary conversions pass def get_fahrenheit(self): return self._fahrenheit def set_kelvin(self, value): # Implement setting Kelvin and the necessary conversions pass def get_kelvin(self): return self._kelvin def display_temperatures(self): return ( f'Celsius: {self._celsius:.2f}n' f'Fahrenheit: {self._fahrenheit:.2f}n' f'Kelvin: {self._kelvin:.2f}' ) \`\`\` Implement the necessary methods to complete the class functionality provided in the skeleton, ensuring all unit conversions are accurate and error handling for invalid temperature inputs is robust.","solution":"class TemperatureConverter: def __init__(self): self._celsius = 0 self._fahrenheit = 32 self._kelvin = 273.15 def set_celsius(self, value): if value < -273.15: raise ValueError(\\"Temperature cannot be below absolute zero (-273.15°C)\\") self._celsius = value self._fahrenheit = (value * 9/5) + 32 self._kelvin = value + 273.15 def get_celsius(self): return self._celsius def set_fahrenheit(self, value): if value < -459.67: raise ValueError(\\"Temperature cannot be below absolute zero (-459.67°F)\\") self._fahrenheit = value self._celsius = (value - 32) * 5/9 self._kelvin = (value + 459.67) * 5/9 def get_fahrenheit(self): return self._fahrenheit def set_kelvin(self, value): if value < 0: raise ValueError(\\"Temperature cannot be below absolute zero (0K)\\") self._kelvin = value self._celsius = value - 273.15 self._fahrenheit = (value * 9/5) - 459.67 def get_kelvin(self): return self._kelvin def display_temperatures(self): return ( f'Temperature in Celsius: {self._celsius:.2f} °Cn' f'Temperature in Fahrenheit: {self._fahrenheit:.2f} °Fn' f'Temperature in Kelvin: {self._kelvin:.2f} K' )"},{"question":"Create a function that accepts an array of integers and a target sum. The function should identify pairs of integers in the array that add up to the given target sum. If no such pairs are found, the function should return an empty list. The result should be a list of tuples, where each tuple contains the integer pairs. Each pair should be in ascending order within the tuple (i.e., the smaller number first). The function should handle cases with duplicate pairs appropriately, meaning that each pair should appear only once in the result regardless of their positions in the array. Additionally, enhance your function to ensure that the order of the resulting list of tuples corresponds to the order of their first occurrence in the original array. Assume that the given array is non-sorted. Example: \`\`\`python arr = [2, 4, 3, 7, 1, 5, 2] target_sum = 6 \`\`\` Expected Output: \`\`\`python [(2, 4), (1, 5)] \`\`\`","solution":"def find_pairs_with_sum(arr, target_sum): Finds all unique pairs in the list that sum up to the target sum. Each pair is returned in ascending order and the result list maintains the order of first occurrence. seen = {} result = [] seen_pairs = set() for i in range(len(arr)): complement = target_sum - arr[i] if complement in seen: pair = tuple(sorted((arr[i], complement))) if pair not in seen_pairs: result.append(pair) seen_pairs.add(pair) seen[arr[i]] = i return result"},{"question":"Write a function in Python that takes a string representing a sequence of moves in a 2D plane ('U' for up, 'D' for down, 'L' for left, 'R' for right) and determines if the series of moves returns to the original starting position. For example, the input \\"UDLR\\" should return True, but \\"UUDD\\" should return False. The function should accept and return the appropriate data types, taking into consideration edge cases where the input is an empty string or contains only singular moves.","solution":"def is_origin(moves): Determines if the sequence of moves returns to the original starting position. 'U' for up, 'D' for down, 'L' for left, 'R' for right. Returns True if the moves return to the origin, False otherwise. # Initial position x, y = 0, 0 for move in moves: if move == 'U': y += 1 elif move == 'D': y -= 1 elif move == 'L': x -= 1 elif move == 'R': x += 1 # Check if returned to origin return x == 0 and y == 0"},{"question":"Write a Python function to convert a given integer to its Roman numeral representation. The function should handle numbers up to 3999 inclusively. Note that Roman numerals are represented by the following characters: I, V, X, L, C, D, and M, corresponding to the values 1, 5, 10, 50, 100, 500, and 1000. Ensure that you properly format the Roman numeral by placing smaller values before larger values appropriately (e.g., IV for 4 and IX for 9). Here is your input: integer_value = 1987 Your function should output: 'MCMLXXXVII'","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. Args: num (int): The integer value to convert. Should be in the range from 1 to 3999. Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Implement a function called 'string_compression' that takes a string as input and returns a new compressed version of the string using the following format: a character followed by the number of times it appears consecutively. If the compressed string is not smaller than the original string, the function should return the original string. The function should have the following specifications: def string_compression(s: str) -> str: Given a string 's', compress it using the counts of repeated characters. If the compressed string is not shorter than the original, return the original string. Constraints: The string will only contain uppercase and lowercase letters (a-z and A-Z). >>> string_compression(\\"aabcccccaaa\\") 'a2b1c5a3' >>> string_compression(\\"abcdef\\") 'abcdef' >>> string_compression(\\"aaAAaaaAAA\\") 'a2A2a3A3' Your task is to implement the 'string_compression' function to achieve the desired behavior while ensuring optimal performance, particularly for longer strings.","solution":"def string_compression(s: str) -> str: Given a string 's', compress it using the counts of repeated characters. If the compressed string is not shorter than the original, return the original string. Args: s (str): Input string containing only uppercase and lowercase letters. Returns: str: Compressed string or the original string if the compressed string is not shorter. if not s: return s compressed = [] count_consecutive = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count_consecutive += 1 else: compressed.append(s[i - 1]) compressed.append(str(count_consecutive)) count_consecutive = 1 compressed.append(s[-1]) compressed.append(str(count_consecutive)) compressed_string = ''.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that takes a list of integers and returns the maximum sum of a contiguous subarray. For example, for the input list \`[-2, 1, -3, 4, -1, 2, 1, -5, 4]\`, the function should return \`6\`, as the subarray \`[4, -1, 2, 1]\` has the largest sum. You are expected to implement a solution with a time complexity of O(n).","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in the given list of integers. The function implements Kadane's Algorithm to achieve a time complexity of O(n). Args: nums (list of int): The list of integers. Returns: int: The maximum sum of a contiguous subarray. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Develop a multi-threaded file processing utility that reads large text files and performs word frequency analysis. The program should be able to concurrently handle multiple files using a thread pool and combine the results to produce a consolidated word frequency count. The utility should have the following features: 1. Accept a list of file paths as input. 2. Use a fixed-size thread pool to manage multiple threads. 3. Each thread should read a part of a file or an entire file and count the frequency of each word. 4. Merge the word frequency counts from all threads into a single result. 5. Display the top N most frequent words (where N is provided as an input parameter). Ensure the program handles edge cases such as: - Empty files. - Files with very large sizes. - Files containing special characters, punctuation, and varying cases (e.g., \\"Word\\" vs. \\"word\\"). Include appropriate error handling and input validation, and ensure the program provides informative messages in case of issues such as missing files or read/write errors. Add unit tests to validate the correctness of various components, including the word counting logic and the thread handling mechanism.","solution":"import os import string from collections import Counter from concurrent.futures import ThreadPoolExecutor def word_frequency(file_path): Reads a file and returns a Counter object with the frequency of each word. if not os.path.exists(file_path): raise FileNotFoundError(f\\"File not found: {file_path}\\") word_count = Counter() try: with open(file_path, 'r') as file: for line in file: # Normalize case and remove punctuation words = line.lower().translate(str.maketrans('', '', string.punctuation)).split() word_count.update(words) except Exception as e: raise IOError(f\\"Error reading file {file_path}: {str(e)}\\") return word_count def merge_counters(counters): Merges multiple Counter objects into a single Counter. total_count = Counter() for counter in counters: total_count.update(counter) return total_count def process_files(file_paths, top_n, thread_pool_size=4): Processes multiple files to calculate word frequency and display the top N frequent words. if not file_paths or not isinstance(top_n, int) or top_n <= 0: raise ValueError(\\"Invalid input parameters.\\") with ThreadPoolExecutor(max_workers=thread_pool_size) as executor: futures = [executor.submit(word_frequency, file_path) for file_path in file_paths] counters = [future.result() for future in futures] total_count = merge_counters(counters) return total_count.most_common(top_n)"},{"question":"Write a function that takes an array of integers and a target integer, and returns all unique pairs of integers within the array that sum up to the target. Handle potential edge cases such as an empty array, arrays with a single element, and arrays with all negative or all positive numbers. nums = [1, 2, 3, 4, 5, 6, 7, 8, 9] target = 10","solution":"def find_pairs(nums, target): Returns all unique pairs of integers within the array that sum up to the target. if len(nums) < 2: return [] nums.sort() pairs = set() seen = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return list(pairs)"},{"question":"Write a function that takes two input strings and returns a merged string in which characters from the input strings are alternately taken. If one string is longer than the other, append the remaining characters from the longer string at the end of the merged string. Input: String1 = \\"abc\\", String2 = \\"defgh\\" Output: \\"adbecfgh\\"","solution":"def merge_alternately(str1, str2): Returns a merged string by alternating characters from str1 and str2. If one string is longer, append the remaining characters at the end. merged_str = [] len1, len2 = len(str1), len(str2) for i in range(max(len1, len2)): if i < len1: merged_str.append(str1[i]) if i < len2: merged_str.append(str2[i]) return ''.join(merged_str)"},{"question":"Develop a Python function that takes a list of integers and returns a new list containing only the elements that are greater than the average value of the original list. Ensure that the input list has at least one element and no more than 1000 elements. This problem helps in evaluating the ability to work with basic list operations and implement logical checks: def filter_above_average(lst): Example: filter_above_average([1, 2, 3, 4, 5]) returns [4, 5] filter_above_average([10, 20, 30]) returns [20, 30] filter_above_average([5, 5, 5, 5]) returns []","solution":"def filter_above_average(lst): Returns a new list containing only the elements that are greater than the average value of the original list. :param lst: List of integers :return: List of integers greater than the average value if not lst: raise ValueError(\\"Input list must contain at least one element.\\") average = sum(lst) / len(lst) return [x for x in lst if x > average]"},{"question":"Given a string of lowercase alphabets, write a function that checks if the string can be rearranged to form a palindrome. Return \`True\` if it is possible, otherwise return \`False\`. For example, given the string \\"carrace\\", the output should be \`True\` because it can be rearranged to form \\"racecar\\", which is a palindrome. If given the string \\"hello\\", the output should be \`False\` as it cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Returns True if the string can be rearranged to form a palindrome, otherwise returns False. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count the number of characters with odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a function that takes a string consisting of only lowercase alphabetic characters, and returns a new string where each character in the original string is shifted forward by one position in the alphabet. For example, 'a' becomes 'b', 'b' becomes 'c', and so on. The character 'z' should wrap around to become 'a'. Note that the function should preserve any spaces within the input string. Example: input_string = \\"hello world\\" output_string = \\"ifmmp xpsme\\"","solution":"def shift_string_forward(input_string): Shifts each character in the string forward by one position in the alphabet. output_string = \\"\\" for char in input_string: if char == ' ': output_string += ' ' else: output_string += chr((ord(char) - ord('a') + 1) % 26 + ord('a')) return output_string"},{"question":"You are given a function \`count_paths\` that calculates the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Here's the partially implemented function with missing parts. Complete the function to make it work as expected. # Input - The function takes two integers \`m\` and \`n\` which represent the number of rows and columns in the grid, respectively. # Output - The function should return an integer that represents the number of unique paths from the top-left corner to the bottom-right corner. # Sample Input/Output - Example 1: \`\`\`python print(count_paths(3, 7)) \`\`\` Output: \`28\` - Example 2: \`\`\`python print(count_paths(3, 2)) \`\`\` Output: \`3\` # Function Template \`\`\`python def count_paths(m, n): # Edge case when there's only one cell if m == 1 or n == 1: return 1 # Initialize a 2D array with 1s dp = [[1] * n for _ in range(m)] # Complete the rest of the function to fill dp with the number of unique paths for i in range(1, m): for j in range(1, n): # Each cell is the sum of the cell above and the cell to the left dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right cell contains the result return dp[m - 1][n - 1] # Testing the function print(count_paths(3, 7)) # Output: 28 print(count_paths(3, 2)) # Output: 3 print(count_paths(7, 3)) # Output: 28 print(count_paths(1, 1)) # Output: 1 print(count_paths(4, 4)) # Output: 20 \`\`\` Fill in the missing parts of the \`count_paths\` function to ensure it works correctly for the given test cases.","solution":"def count_paths(m, n): Calculates the number of unique paths in a grid from the top-left corner to the bottom-right corner. You can only move either down or right. :param m: Number of rows in the grid :param n: Number of columns in the grid :return: Number of unique paths # Edge case when there's only one cell if m == 1 or n == 1: return 1 # Initialize a 2D array with 1s dp = [[1] * n for _ in range(m)] # Fill dp with the number of unique paths for i in range(1, m): for j in range(1, n): # Each cell is the sum of the cell above and the cell to the left dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right cell contains the result return dp[m - 1][n - 1]"},{"question":"Write a function that receives two strings and determines if the second string is a rotated version of the first string. For example, the string \\"waterbottle\\" is a rotated version of \\"erbottlewat\\". The function should return True if the second string is a rotated version of the first string, and False otherwise. The input strings can contain any characters, and they are case-sensitive.","solution":"def is_rotated_version(s1, s2): Determines if s2 is a rotated version of s1. Args: s1 (str): the original string. s2 (str): the string to check if it is a rotated version of s1. Returns: bool: True if s2 is a rotated version of s1, False otherwise. if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"You have a unique task: Evaluating the Path Through a Grid with Obstacles. Here are the specifics: You are given a grid consisting of \`m x n\` cells, filled with non-negative integers. Each integer represents the count of obstacles in that cell. You need to determine the minimum number of obstacles you must clear to move from the top-left corner of the grid to the bottom-right corner. You can only move up, down, left, or right at any step. Your task is to return the minimum number of obstacles that should be removed to create a path from the starting position to the ending position. For example: Example 1: Input: grid = [[0,1,1], [1,1,0], [1,1,0]] Output: 2 Explanation: Remove 1 obstacle from cell (0,1) and 1 obstacle from cell (1,1) for a clear path from (0,0) to (2,2). Example 2: Input: grid = [[0,0,0], [0,0,0], [0,0,0]] Output: 0 Explanation: There are no obstacles to remove as the path is already clear. Example 3: Input: grid = [[1,1,1], [1,0,1], [1,1,1]] Output: 3 Explanation: Remove 3 obstacles from cells (0,0), (1,0), and (2,0) to create a path from (0,0) to (2,2). The constraints are as follows: \`1 <= m, n <= 100\` \`0 <= grid[i][j] <= 1\` Note: You can assume there is always at least one possible path from the top-left corner to the bottom-right corner.","solution":"import heapq def minimum_obstacles(grid): Returns the minimum number of obstacles that should be removed to create a path from the top-left corner to the bottom-right corner. m, n = len(grid), len(grid[0]) # Directions array for moving up, down, left, or right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Min-heap to keep track of cells by the number of obstacles cleared heap = [(0, 0, 0)] # (obstacles_removed, row, col) visited = [[False for _ in range(n)] for _ in range(m)] while heap: obstacles, x, y = heapq.heappop(heap) # If we reach the bottom-right corner if x == m - 1 and y == n - 1: return obstacles if visited[x][y]: continue visited[x][y] = True # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: heapq.heappush(heap, (obstacles + grid[nx][ny], nx, ny)) return -1 # Should never reach here as there is always a path"},{"question":"Design a function that takes a list of integers and returns the maximum sum of any contiguous subarray of the array. This problem is commonly referred to as the \\"Maximum Subarray Problem\\" or \\"Kadane's Algorithm\\". input_list = [-2, 1, -3, 4, -1, 2, 1, -5, 4]","solution":"def max_subarray_sum(input_list): Function to find the maximum sum of any contiguous subarray using Kadane's Algorithm. if not input_list: return 0 max_current = max_global = input_list[0] for num in input_list[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a Python function that calculates the factorial of a given non-negative integer, n. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. Moreover, ensure that your function handles an erroneous input scenario where the given input is a negative integer or a non-integer, by prompting an appropriate error message. Additionally, implement a memoization technique to optimize the calculation of the factorial for repeated calls to the function. Your solution should demonstrate the performance gain by calculating the factorial of a range of numbers (0 through 10) multiple times, and displaying the time taken for both the plain and memoized versions. Consider the below code snippet to understand the structure: \`\`\`python import time def factorial(n): if n < 0: return \\"Error: Factorial of a negative number doesn't exist.\\" elif n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result num = 5 print(f\\"Factorial of {num} is {factorial(num)}\\") # Measure performance start_time = time.time() for i in range(11): factorial(i) end_time = time.time() print(f\\"Time taken without memoization: {end_time - start_time} seconds\\") \`\`\` Build upon and correct the above code to include memoization and proper error handling in your solution.","solution":"import time from functools import lru_cache def factorial(n): if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Factorial of a negative number doesn't exist.\\" if n == 0 or n == 1: return 1 else: result = 1 for i in range(2, n + 1): result *= i return result @lru_cache(maxsize=None) def memoized_factorial(n): if not isinstance(n, int): return \\"Error: Input must be an integer.\\" if n < 0: return \\"Error: Factorial of a negative number doesn't exist.\\" if n == 0 or n == 1: return 1 return n * memoized_factorial(n - 1) # Measure performance start_time = time.time() for i in range(11): factorial(i) end_time = time.time() time_without_memoization = end_time - start_time start_time = time.time() for i in range(11): memoized_factorial(i) end_time = time.time() time_with_memoization = end_time - start_time print(f\\"Time taken without memoization: {time_without_memoization} seconds\\") print(f\\"Time taken with memoization: {time_with_memoization} seconds\\")"},{"question":"Imagine you are designing an application to manage a simple task list. A task in this application is represented by a dictionary with the following fields: \\"title\\" (a string), \\"priority\\" (an integer from 1 to 5), and \\"completed\\" (a boolean). Write a function called \`add_task\` that accepts a list of tasks and a new task. The function should add the new task to the task list only if there is no other task with the same title. The function should raise a \`ValueError\` if a task with the same title already exists. Next, write a function called \`complete_task\` that accepts a list of tasks and a task title. The function should mark the task with the given title as completed. If no such task exists, the function should raise a \`ValueError\`. Finally, write a function called \`pending_tasks\` that accepts a list of tasks and returns a list of titles of all tasks that are not completed yet, sorted by their priority in descending order. Here is the template for the functions: \`\`\`python def add_task(task_list, new_task): # Implement this function def complete_task(task_list, task_title): # Implement this function def pending_tasks(task_list): # Implement this function \`\`\` You can assume that the input to each function is correctly formatted.","solution":"def add_task(task_list, new_task): Adds a new task to the task list if no task with the same title exists. If a task with the same title already exists, raises a ValueError for task in task_list: if task['title'] == new_task['title']: raise ValueError(\\"Task with the same title already exists\\") task_list.append(new_task) def complete_task(task_list, task_title): Marks the task with the given title as completed. If no such task exists, raises a ValueError for task in task_list: if task['title'] == task_title: task['completed'] = True return raise ValueError(\\"Task with the given title does not exist\\") def pending_tasks(task_list): Returns a list of titles of all tasks that are not completed yet, sorted by their priority in descending order. pending = [task['title'] for task in task_list if not task['completed']] pending_sorted = sorted(pending, key=lambda title: next(task['priority'] for task in task_list if task['title'] == title), reverse=True) return pending_sorted"},{"question":"Analyze and Optimize String Combination You are given a list of strings, where each string is of the same length. Your task is to write a Python function that analyzes these strings to determine the most common character in each position, and then returns a new string composed of these characters. If a tie occurs (i.e., two characters are equally common at a position), choose the character that comes first alphabetically. # Function Signature \`\`\`python def most_common_combination(strings: List[str]) -> str: pass \`\`\` # Input - \`strings\` (List[str]): A list of strings of the same length. The list contains at least one string and each string only consists of lowercase alphabets (\`a\`-\`z\`). # Output - Returns a string that combines the most common characters from each position in the list of strings. # Example \`\`\`python strings = [\\"abcd\\", \\"abcf\\", \\"abef\\"] print(most_common_combination(strings)) # Output: \\"abcf\\" \`\`\` # Explanation - At the first position, 'a' is the most common character. - At the second position, 'b' is the most common character. - At the third position, both 'c' and 'e' appear equally commonly. 'c' comes first alphabetically. - At the fourth position, 'd' and 'f' appear equally commonly. 'd' comes first alphabetically. Therefore, the result is \\"abcf\\". # Constraints - The list of strings will have a length between 1 and 1000. - Each string in the list will have a length between 1 and 1000. - All strings in the list will be of the same length.","solution":"from typing import List from collections import Counter def most_common_combination(strings: List[str]) -> str: if not strings: return \\"\\" length = len(strings[0]) result = [] for i in range(length): column_chars = [s[i] for s in strings] counter = Counter(column_chars) most_common_char = min(counter.items(), key=lambda x: (-x[1], x[0]))[0] result.append(most_common_char) return ''.join(result)"},{"question":"Write a Python function that takes a list of dictionaries, each containing 'name' and 'score' keys, and returns a new dictionary where the keys are the unique names and the values are the average scores of each person, rounded to two decimal places. The resulting dictionary should be sorted by the average scores in descending order. If two people have the same average score, their names should be sorted alphabetically. \`\`\`python def average_scores(records: list): Calculate the average scores for each person and return a sorted dictionary >>> average_scores([ {'name': 'Alice', 'score': 85}, {'name': 'Bob', 'score': 90}, {'name': 'Alice', 'score': 95}, {'name': 'Bob', 'score': 85}, {'name': 'Charlie', 'score': 70} ]) {'Alice': 90.0, 'Bob': 87.5, 'Charlie': 70.0} \`\`\`","solution":"def average_scores(records): Calculate the average scores for each person and return a sorted dictionary. Args: records (list): A list of dictionaries with 'name' and 'score' keys. Returns: dict: A dictionary with names as keys and their average scores as values, sorted by average scores in descending order, and alphabetically if tied. from collections import defaultdict import statistics scores_dict = defaultdict(list) # Collect all scores for each person. for record in records: scores_dict[record['name']].append(record['score']) # Compute average scores and round to two decimal places. avg_scores = {name: round(statistics.mean(scores), 2) for name, scores in scores_dict.items()} # Sort by average scores (descending) and names (alphabetically) if tied. sorted_avg_scores = dict(sorted(avg_scores.items(), key=lambda x: (-x[1], x[0]))) return sorted_avg_scores"},{"question":"Create a function in Python to calculate the nth Fibonacci number using memoization. The Fibonacci sequence is defined as follows: [F(n) = F(n-1) + F(n-2)] with base cases: [F(0) = 0] [F(1) = 1] Your function should be both efficient and readable. Additionally, write a small test suite with at least three test cases to verify your implementation.","solution":"def fibonacci(n, memo = {}): Returns the nth Fibonacci number using memoization. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a function that takes a list of strings, each representing an item and its price in the format \\"item:price\\", and returns the item with the highest price. If two or more items have an equal highest price, return the lexicographically smallest item name. Ensure to handle edge cases such as empty lists or invalid formats gracefully. For example, given the input \`[\\"apple:3\\", \\"banana:2\\", \\"carrot:3\\", \\"date:2\\"]\`, the function should return \`\\"apple\\"\` because both \\"apple\\" and \\"carrot\\" have the highest price of 3, and \\"apple\\" comes first lexicographically.","solution":"def find_highest_priced_item(items): This function takes a list of strings, where each string represents an item and its price in the format \\"item:price\\", and returns the item with the highest price. In the case of a tie, it returns the lexicographically smallest item name. if not items: return None highest_priced_item = None highest_price = float('-inf') for item in items: try: name, price_str = item.split(':') price = int(price_str) if price > highest_price or (price == highest_price and name < highest_priced_item): highest_priced_item = name highest_price = price except (ValueError, IndexError): continue return highest_priced_item"},{"question":"Define a function \`merge_sorted_arrays(arr1, arr2)\` that takes in two non-empty arrays \`arr1\` and \`arr2\`, both containing integers sorted in non-decreasing order, and returns a single sorted array containing all the elements from \`arr1\` and \`arr2\`. Your implementation should ensure the combined array is also sorted in non-decreasing order. Consider edge cases where one of the arrays might be significantly longer than the other. Example Usage: \`\`\`python arr1 = [1, 3, 5, 7] arr2 = [2, 4, 6, 8] result = merge_sorted_arrays(arr1, arr2) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8] \`\`\`","solution":"def merge_sorted_arrays(arr1, arr2): Merge two sorted arrays into a single sorted array. result = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # Append remaining elements if any while i < len(arr1): result.append(arr1[i]) i += 1 while j < len(arr2): result.append(arr2[j]) j += 1 return result"},{"question":"You are given a list of dictionaries, each representing a transaction. Each transaction dictionary contains the keys 'customer', 'product', 'subcategory', and 'price'. Write a function \`total_expenditure\` that takes this list of transactions and a customer's name as input and returns the total amount spent by that customer across all transactions. If the customer did not make any transaction, return 0. \`\`\`python def total_expenditure(transactions, customer_name): pass # Example usage: transactions = [ {'customer': 'Alice', 'product': 'Panasonic Boombox', 'subcategory': 'Stereo Systems', 'price': 150}, {'customer': 'Bob', 'product': 'Sony Headphones', 'subcategory': 'Audio Accessories', 'price': 45}, {'customer': 'Alice', 'product': 'JBL Speaker', 'subcategory': 'Stereo Systems', 'price': 100}, {'customer': 'Bob', 'product': 'Bose Speaker', 'subcategory': 'Stereo Systems', 'price': 200}, {'customer': 'Alice', 'product': 'Apple AirPods', 'subcategory': 'Audio Accessories', 'price': 160} ] print(total_expenditure(transactions, 'Alice')) # Output: 410 print(total_expenditure(transactions, 'Bob')) # Output: 245 \`\`\`","solution":"def total_expenditure(transactions, customer_name): Calculate the total expenditure of a given customer based on the list of transactions. :param transactions: List[Dict], a list of transactions where each transaction is a dictionary :param customer_name: String, the name of the customer :return: int, total amount spent by the given customer total = 0 for transaction in transactions: if transaction.get('customer') == customer_name: total += transaction.get('price', 0) return total"},{"question":"Implement a Python program to preprocess a dataset of textual reviews, extract features using TF-IDF vectorization, and employ a grid search to optimize a Support Vector Machine (SVM) classifier for sentiment analysis. Ensure your solution includes techniques to handle overfitting, such as cross-validation and hyperparameter tuning.","solution":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import GridSearchCV, train_test_split from sklearn.svm import SVC from sklearn.pipeline import Pipeline from sklearn.metrics import classification_report def preprocess_and_train_model(reviews, sentiments): Preprocess the textual reviews, extract features using TF-IDF vectorization, and optimize an SVM classifier using grid search for sentiment analysis. Parameters: reviews (list): List of review texts. sentiments (list): List of sentiment labels corresponding to the reviews. Returns: dict: Classification report after grid search. # Split dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(reviews, sentiments, test_size=0.2, random_state=42) # Creating a pipeline with TF-IDF Vectorizer and SVM classifier pipeline = Pipeline([ ('tfidf', TfidfVectorizer()), ('svm', SVC()) ]) # Parameters for Grid Search parameters = { 'tfidf__max_df': [0.8, 0.9, 1.0], 'tfidf__min_df': [1, 2, 3], 'svm__kernel': ['linear', 'rbf'], 'svm__C': [0.1, 1, 10, 100] } # Grid Search with 5-fold cross-validation grid_search = GridSearchCV(pipeline, parameters, cv=5, n_jobs=-1, scoring='accuracy') grid_search.fit(X_train, y_train) # Evaluate the model on the test set y_pred = grid_search.predict(X_test) report = classification_report(y_test, y_pred, output_dict=True) return report"},{"question":"A company wants to distribute bonuses to its employees based on their performance scores. The performance scores are represented as a list of integers. The rules for distributing bonuses are as follows: 1. Every employee must receive at least one unit of bonus. 2. Employees with a higher performance score than their immediate neighbors should receive more bonuses than them. 3. If two employees have the same performance score, they should receive the same amount of bonus, if all of their other neighbors meet the conditions above. Write a program that calculates the minimum number of bonus units required to satisfy the above rules. The program should take as input the list of performance scores and output the list of bonuses corresponding to each employee. Example: Input: [1, 2, 2, 3, 1] Output: [1, 2, 1, 2, 1] Explanation: - The first employee has a performance score of 1 and receives 1 bonus unit. - The second employee has a performance score of 2 and receives more bonus units than the first employee. - The third employee has the same performance score as the second employee, so receives the same amount of bonus as the second employee. - The fourth employee has a performance score of 3, which is higher than the third, so receives more bonus units than the third employee. - The fifth employee has a performance score of 1, which is lower than the fourth, so receives only 1 bonus unit. Your program should be efficient and accommodate the possibility of varying list lengths.","solution":"def calculate_bonuses(scores): Calculate the minimum number of bonus units distributed to each employee based on performance scores. Parameters: scores (list of int): List of integer performance scores of employees. Returns: list of int: List of bonuses corresponding to each employee. if not scores: return [] n = len(scores) bonuses = [1] * n # Traverse from left to right for i in range(1, n): if scores[i] > scores[i-1]: bonuses[i] = bonuses[i-1] + 1 # Traverse from right to left for i in range(n-2, -1, -1): if scores[i] > scores[i+1]: bonuses[i] = max(bonuses[i], bonuses[i+1] + 1) return bonuses"},{"question":"In the context of data structures, design a class 'Deque' (Double-ended Queue) that supports the following operations: 'add_front', 'add_rear', 'remove_front', 'remove_rear', and 'is_empty'. Each of these methods should perform their corresponding operation in constant time. Ensure your implementation includes error handling to manage attempts to remove elements from an empty deque. Additionally, here is an incomplete code snippet related to the problem. Complete the implementation and fix any logical or syntax errors: \`\`\`python class Deque: def __init__(self): self.items = [] def is_empty(self): return len(self.items) == 0 def add_front(self, item): pass def add_rear(self, item): pass def remove_front(self): pass def remove_rear(self): pass \`\`\` Ensure that your methods correctly manipulate the deque and maintain its properties, along with proper error checking for operations that cannot be performed on an empty deque.","solution":"class Deque: def __init__(self): self.items = [] def is_empty(self): return len(self.items) == 0 def add_front(self, item): self.items.insert(0, item) def add_rear(self, item): self.items.append(item) def remove_front(self): if self.is_empty(): raise IndexError(\\"remove_front from empty deque\\") return self.items.pop(0) def remove_rear(self): if self.is_empty(): raise IndexError(\\"remove_rear from empty deque\\") return self.items.pop()"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the elements that are prime numbers. Ensure your solution effectively identifies prime numbers and handles edge cases such as empty lists or lists containing non-integer values.","solution":"def is_prime(num): Helper function to check if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list of integers. Parameters: numbers (list): A list of integers. Returns: list: A list containing only the prime numbers from the input list. if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"All elements in the input list must be integers\\") return [num for num in numbers if is_prime(num)]"},{"question":"Given a dataset containing information about various books in a library, write a Python function that sorts this dataset by the author's last name in alphabetical order. The dataset is a list of dictionaries, where each dictionary represents a book with the following fields: 'title', 'author' (formatted as \\"First Last\\"), and 'year_published'. Ensure your function handles case variations in the authors' names appropriately and can deal with potential missing or malformed entries in the dataset by skipping them. Also, explain the logic behind your sorting approach and any assumptions you made.","solution":"def sort_books_by_author(books): Sorts a list of book dictionaries by the author's last name in alphabetical order. Parameters: books (list of dict): The dataset containing information about books. Returns: list of dict: The sorted list of book dictionaries. valid_books = [] for book in books: author = book.get('author') if author and isinstance(author, str): name_parts = author.split() if len(name_parts) >= 2: valid_books.append(book) # Sorting valid books based on author's last name (case-insensitive) sorted_books = sorted(valid_books, key=lambda x: x['author'].split()[-1].lower()) return sorted_books"},{"question":"Design a function that takes an array of integers and a target sum as inputs. The function should find two distinct numbers in the array that add up to the target sum and return their indices. If no such pair exists, the function should return [-1, -1]. Write the function efficiently to handle large input arrays, and ensure it runs in O(n) time complexity.","solution":"def two_sum(nums, target): Finds two distinct numbers in the array that add up to the target sum. Parameters: nums (list): List of integers. target (int): Target sum. Returns: list: Indices of the two numbers that add up to the target sum. If no such pair exists, returns [-1, -1]. index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return [-1, -1]"},{"question":"Implement a Decision Tree classifier on the 'iris' dataset provided in sklearn. Ensure you include functionality for stratified k-fold cross-validation and hyperparameter tuning for the depth of the tree. Use an appropriate metric, such as Gini impurity or entropy, for measuring the quality of splits. Additionally, evaluate the classifier's performance by calculating the accuracy, precision, recall, and F1 score. Visualize the decision boundaries for the classifier and compare its performance with other classifiers such as SVM and Logistic Regression. Discuss the impact of tree depth on the performance and provide visualizations to support your discussion.","solution":"import matplotlib.pyplot as plt import numpy as np from sklearn import datasets from sklearn.model_selection import StratifiedKFold, GridSearchCV from sklearn.tree import DecisionTreeClassifier, plot_tree from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score from sklearn.svm import SVC from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler def decision_tree_iris(): iris = datasets.load_iris() X = iris.data y = iris.target param_grid = {'max_depth': np.arange(1, 11)} strat_k_fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42) dt_clf = GridSearchCV(DecisionTreeClassifier(criterion='gini'), param_grid, cv=strat_k_fold) dt_clf.fit(X, y) best_depth = dt_clf.best_params_['max_depth'] best_dt_clf = dt_clf.best_estimator_ y_pred = best_dt_clf.predict(X) accuracy = accuracy_score(y, y_pred) precision = precision_score(y, y_pred, average='macro') recall = recall_score(y, y_pred, average='macro') f1 = f1_score(y, y_pred, average='macro') plot_tree(best_dt_clf, filled=True, feature_names=iris.feature_names, class_names=iris.target_names) plt.title(f\\"Decision Tree with depth={best_depth}\\") plt.show() print(f\\"Decision Tree Classifier - Depth: {best_depth}\\") print(f\\"Accuracy: {accuracy:.4f}\\") print(f\\"Precision: {precision:.4f}\\") print(f\\"Recall: {recall:.4f}\\") print(f\\"F1 Score: {f1:.4f}\\") return best_dt_clf def compare_classifiers(): iris = datasets.load_iris() X = iris.data y = iris.target scaler = StandardScaler() X = scaler.fit_transform(X) classifiers = { 'Decision Tree': DecisionTreeClassifier(max_depth=3), 'SVM': SVC(kernel='rbf', C=1), 'Logistic Regression': LogisticRegression(max_iter=200) } results = {} for cls_name, cls in classifiers.items(): strat_k_fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=42) accuracies = [] for train_index, test_index in strat_k_fold.split(X, y): X_train, X_test = X[train_index], X[test_index] y_train, y_test = y[train_index], y[test_index] cls.fit(X_train, y_train) acc = cls.score(X_test, y_test) accuracies.append(acc) avg_accuracy = np.mean(accuracies) results[cls_name] = avg_accuracy print(f\\"{cls_name} Classifier - Average Accuracy: {avg_accuracy:.4f}\\") return results"},{"question":"Create a function that takes a list of integers and a target integer. The function should return all unique pairs of integers from the list that sum up to the target integer. Ensure that each pair is presented as a tuple, and the collection of pairs does not contain duplicate tuples. Additionally, the integers within each pair should be in non-descending order, and the pairs should be returned as a list sorted in lexicographical order. For example: \`\`\` find_pairs([2, 4, 3, 5, 7, -1, 2, -3, 0, 2], 4) \`\`\` should return: \`\`\` [(-1, 5), (0, 4), (2, 2), (-3, 7)] \`\`\` or any equivalent sorted ordering of the pairs.","solution":"def find_pairs(nums, target): Return all unique pairs of integers from the list that sum up to the target integer. Each pair (a, b) should be in non-descending order (a <= b). The set of pairs should be in lexicographical order and free of duplicates. nums = sorted(nums) pairs = set() num_dict = {} for num in nums: complement = target - num if complement in num_dict: pair = tuple(sorted((num, complement))) pairs.add(pair) num_dict[num] = True return sorted(pairs)"},{"question":"Implement a function in Python that takes in a list of integers and returns a new list containing only the prime numbers from the original list. The algorithm should be efficient in checking the primality of each number and handle large inputs effectively. Ensure you include appropriate error handling and edge cases, such as an empty list or no primes in the input list. Here's the function signature: \`\`\`python def filter_primes(numbers: List[int]) -> List[int]: pass \`\`\`","solution":"from typing import List def is_prime(n: int) -> bool: Returns True if the number n is a prime number, otherwise False. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers: List[int]) -> List[int]: Filters prime numbers from a list of integers and returns a new list containing only primes. if not isinstance(numbers, list): raise ValueError(\\"Input must be a list of integers\\") if any(not isinstance(num, int) for num in numbers): raise ValueError(\\"All elements in the input list must be integers\\") prime_numbers = [num for num in numbers if is_prime(num)] return prime_numbers"},{"question":"Create a function that takes an integer n as input and returns a list of all prime numbers less than n. Ensure that the function is optimized for performance when n is a large number.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False # 0 and 1 are not primes for i in range(2, int(n ** 0.5) + 1): if sieve[i]: for j in range(i * i, n, i): sieve[j] = False return [i for i in range(n) if sieve[i]]"},{"question":"Implement a function to rotate a matrix 90 degrees clockwise. The input will be a 2D list representing an \`n x n\` matrix. You must perform the rotation in place, meaning you cannot use any additional memory to store the matrix. def rotate_matrix_90_degrees(matrix): Your task is to rotate a given \`n x n\` matrix by 90 degrees clockwise in place. Parameters: matrix (list of list of int): 2D list representing the matrix to be rotated. Examples: >>> matrix = [ ... [1, 2, 3], ... [4, 5, 6], ... [7, 8, 9] ... ] >>> rotate_matrix_90_degrees(matrix) >>> matrix == [ ... [7, 4, 1], ... [8, 5, 2], ... [9, 6, 3] ... ] >>> matrix = [ ... [1, 2], ... [3, 4] ... ] >>> rotate_matrix_90_degrees(matrix) >>> matrix == [ ... [3, 1], ... [4, 2] ... ]","solution":"def rotate_matrix_90_degrees(matrix): n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. You should write a helper function \`is_prime()\` to check if a number is prime, and use this helper function within a list comprehension to filter the prime numbers.","solution":"def is_prime(n): Checks if a number is prime. :param n: An integer to check for primality. :return: True if n is prime, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_primes(numbers): Filters the prime numbers from a list of integers. :param numbers: A list of integers. :return: A list of prime integers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"Design a function that takes an integer n and returns a list of all prime numbers less than n. The solution should minimize computational complexity and avoid unnecessary calculations. You can use any algorithm or method you prefer, provided it adheres to these constraints. Demonstrate how your function works with an example input of your choice.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] sieve = [True] * n sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"Write a Python program that reads a text file containing a list of integers (one per line) and then finds the integer that appears most frequently in the file. If there are ties (multiple integers with the same highest frequency), the program should return the smallest integer among them. Your program should handle potential I/O errors gracefully and ensure that the file content is valid for the required operations. Here's a sample input file content: \`\`\` 3 7 3 9 2 3 2 7 7 \`\`\` Your program should output: \`\`\` 3 \`\`\` Note: Provide the complete code, including any necessary error handling mechanisms.","solution":"def most_frequent_integer(file_path): from collections import Counter try: with open(file_path, 'r') as file: numbers = file.readlines() numbers = list(map(str.strip, numbers)) numbers = list(filter(str.isnumeric, numbers)) numbers = list(map(int, numbers)) if not numbers: raise ValueError(\\"File contains no valid integers.\\") frequency = Counter(numbers) most_common = frequency.most_common() max_frequency = most_common[0][1] most_frequent_numbers = [num for num, freq in most_common if freq == max_frequency] return min(most_frequent_numbers) except IOError: print(f\\"Error: Unable to read file {file_path}.\\") except ValueError as ve: print(f\\"Error: {ve}\\") # Example usage: # Assuming \`numbers.txt\` contains the numbers from the sample input file. # most_frequent_integer('numbers.txt')"},{"question":"Write a function called \`find_longest_substring\` that, given a string, returns the length of the longest substring without repeating characters. # Constraints - The input string will contain only alphabetic characters and will have at most 1000 characters. # Examples - \`find_longest_substring(\\"abcabcbb\\")\` should return \`3\` because \\"abc\\" is the longest substring without repeating characters. - \`find_longest_substring(\\"bbbbb\\")\` should return \`1\` because \\"b\\" is the longest substring without repeating characters. - \`find_longest_substring(\\"pwwkew\\")\` should return \`3\` because \\"wke\\" is the longest substring without repeating characters. # Function Signature \`\`\`python def find_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. Args: s (str): The input string containing only alphabetic characters. Returns: int: The length of the longest substring without repeating characters. \`\`\`","solution":"def find_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. Args: s (str): The input string containing only alphabetic characters. Returns: int: The length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Rewrite the following SQL query to use a window function instead of a subquery: \`\`\`sql SELECT emp_id, salary, (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id) AS dept_avg_salary FROM employees e; \`\`\` Ensure that the window function provides the average salary of the department each employee belongs to without using a subquery.","solution":"def get_employee_salaries_with_dept_avg(): Returns a SQL query to fetch each employee's salary along with the average salary of the department they belong to using a window function. return ''' SELECT emp_id, salary, AVG(salary) OVER (PARTITION BY dept_id) AS dept_avg_salary FROM employees; '''"},{"question":"You have been given a set of points in a 2D plane, represented as tuples of coordinates (x, y). Your task is to write a function that finds the convex hull of the given set of points using the Graham scan algorithm. The convex hull of a set of points is the smallest convex polygon that contains all the points. # Function Signature \`\`\`python from typing import List, Tuple def convex_hull(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass \`\`\` # Input - \`points\` (List[Tuple[int, int]]): A list of tuples, where each tuple represents the coordinates \`(x, y)\` of a point. - Example: \`[(0, 0), (1, 1), (2, 2), (2, 0), (4, 2), (2, 4)]\` # Output - Returns a list of tuples representing the vertices of the convex hull in counter-clockwise order, starting from the vertex with the lowest y-coordinate (if there's a tie, the lowest x-coordinate). # Example \`\`\`python points = [(0, 0), (1, 1), (2, 2), (2, 0), (4, 2), (2, 4)] print(convex_hull(points)) # Output: [(0, 0), (2, 0), (4, 2), (2, 4)] \`\`\` # Notes - The points given are all distinct. - If the input list has fewer than 3 points, the convex hull cannot be formed and you should return the input list itself. # Guidelines - Implement the Graham scan algorithm to find the convex hull. - First, find the point with the lowest y-coordinate (and lowest x-coordinate if there is a tie) as the starting point. - Sort the remaining points by the angle they make with this starting point. - Traverse the sorted points and use a stack to construct the convex hull by maintaining the vertices of the polygon. - Consider edge cases such as collinear points.","solution":"from typing import List, Tuple import math def convex_hull(points: List[Tuple[int, int]]) -> List[Tuple[int, int]]: # Find the point with the lowest y-coordinate, break ties by x-coordinate start = min(points, key=lambda p: (p[1], p[0])) # Sort the points by polar angle with the start point def polar_angle(p): return math.atan2(p[1] - start[1], p[0] - start[0]) sorted_points = sorted(points, key=lambda p: (polar_angle(p), (start[0] - p[0])**2 + (start[1] - p[1])**2)) # Function to return the cross product of vectors OA and OB def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) hull = [] for p in sorted_points: while len(hull) > 1 and cross(hull[-2], hull[-1], p) <= 0: hull.pop() hull.append(p) return hull"},{"question":"Implement a function that takes a list of strings and returns a dictionary where the keys are the strings, and the values are the lengths of those strings. Ensure the function handles empty strings and duplicate strings correctly, with each string's length being accurately represented.","solution":"def strings_to_length_dict(strings): Returns a dictionary where the keys are the strings from the input list, and the values are the lengths of those strings. Parameters: strings (list): list of strings Returns: dict: dictionary with strings as keys and their lengths as values return {string: len(string) for string in strings}"},{"question":"Write a function in Python that accepts a list of integers and returns a new list containing the absolute values of the differences between each pair of neighboring elements. Ensure the function handles cases where the input list has fewer than two elements by returning an empty list in such scenarios. The function should not modify the original list. Implement any necessary error handling to account for invalid inputs, such as non-integer elements within the list. \`\`\`python def neighboring_diff(abs(lst: List[int]) -> List[int]: Calculate the absolute differences between each pair of neighboring elements in the list. Args: lst (List[int]): List of integers. Returns: List[int]: List of absolute differences. if not all(isinstance(i, int) for i in lst): raise ValueError(\\"All elements in the list must be integers.\\") if len(lst) < 2: return [] return [abs(lst[i] - lst[i + 1]) for i in range(len(lst) - 1)] \`\`\`","solution":"from typing import List def neighboring_diff(lst: List[int]) -> List[int]: Calculate the absolute differences between each pair of neighboring elements in the list. Args: lst (List[int]): List of integers. Returns: List[int]: List of absolute differences. if not all(isinstance(i, int) for i in lst): raise ValueError(\\"All elements in the list must be integers.\\") if len(lst) < 2: return [] return [abs(lst[i] - lst[i + 1]) for i in range(len(lst) - 1)]"},{"question":"You have been given an integer value \`n\`. Your task is to write a function that determines whether the integer can be represented as the sum of two or more consecutive positive integers. For example, the number \`15\` can be expressed as: - 1 + 2 + 3 + 4 + 5 - 4 + 5 + 6 - 7 + 8 On the other hand, the number \`8\` cannot be expressed as the sum of two or more consecutive positive integers. Write a function \`is_sum_of_consecutive_integers(n)\` that takes a single integer \`n\` and returns \`True\` if it can be expressed as the sum of two or more consecutive positive integers, and \`False\` otherwise. # Function Signature \`\`\`python def is_sum_of_consecutive_integers(n: int) -> bool: \`\`\` # Input - \`n (1 ≤ n ≤ 10^9)\`: an integer # Output - \`True\` if \`n\` can be expressed as the sum of two or more consecutive positive integers. - \`False\` otherwise. # Example \`\`\`python print(is_sum_of_consecutive_integers(15)) # True print(is_sum_of_consecutive_integers(8)) # False \`\`\` # Note - Consider all potential ranges and ensure the function works efficiently for large values of \`n\`.","solution":"def is_sum_of_consecutive_integers(n: int) -> bool: Determines whether the integer n can be expressed as the sum of two or more consecutive positive integers. A number can be expressed as the sum of two or more consecutive integers if and only if it is not a power of 2. # If n is a power of 2, it cannot be expressed as the sum of two or more consecutive positive integers. return (n & (n - 1)) != 0"},{"question":"A delivery company wants to optimize their delivery routes. The city is represented as an M x N grid of blocks, where each block can either be a road (represented by 1) or a building (represented by 0). The delivery truck can only travel on roads. The goal is to determine if there is a valid route from the top-left corner of the grid (start) to the bottom-right corner (end). Write a function \`is_route_available(grid)\` that takes a 2D list of integers representing the grid and returns \`True\` if there is a route available, \`False\` otherwise. The truck can move up, down, left, or right, but cannot move diagonally. # Constraints - The function should handle grids with dimensions up to 100x100. - The function should return quickly even for edge cases. - The start and end points are always roads (1). # Example \`\`\`python grid_1 = [ [1, 0, 1, 1], [1, 1, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1] ] print(is_route_available(grid_1)) # Expected output: True grid_2 = [ [1, 0, 0, 0], [0, 1, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1] ] print(is_route_available(grid_2)) # Expected output: False \`\`\` Your function implementation should ensure that the truck can find a feasible path by avoiding buildings and only traveling on roads.","solution":"def is_route_available(grid): from collections import deque if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) if grid[0][0] == 0 or grid[rows - 1][cols - 1] == 0: return False directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (rows - 1, cols - 1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny)) return False"},{"question":"Write a Python function that takes a dictionary of names (keys) and their ages (values) and returns a new dictionary with the same names, but the ages increased by one year. Also, the function should remove any entries where the original age was above 100. Example input: {'Alice': 25, 'Bob': 30, 'Catherine': 110, 'Daniel': 99} Expected output: {'Alice': 26, 'Bob': 31, 'Daniel': 100}","solution":"def increase_age_and_filter(data): Returns a new dictionary with ages increased by one year and removes entries where the original age was above 100. Parameters: data (dict): A dictionary with names as keys and ages as values. Returns: dict: A dictionary with names as keys and updated ages as values. return {name: age + 1 for name, age in data.items() if age <= 100}"},{"question":"Write a function that rotates a given NxN matrix 90 degrees clockwise. The function should take an NxN matrix as input and return a new matrix that is the result of the rotation. The input matrix can contain any integer values. Ensure your solution efficiently handles matrices of varying sizes and includes proper error handling for invalid inputs (e.g., non-square matrices or non-numeric elements). Example input: \`\`\` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \`\`\` Expected output: \`\`\` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] \`\`\`","solution":"def rotate_matrix_90_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. Args: matrix (list of list of int): NxN matrix to be rotated. Returns: list of list of int: New NxN matrix that is the result of the rotation. if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input should be a square matrix.\\") n = len(matrix) # Rotate the matrix 90 degrees clockwise rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a function that takes two strings as input and returns a new string that contains only the characters that appear in both strings, sorted in alphabetical order. Ensure that the function is case-insensitive, but the returned string should be in lower case.","solution":"def common_chars(str1, str2): Returns a new string containing only the characters that appear in both input strings, sorted in alphabetical order. The function is case-insensitive, and the returned string is in lower case. # Convert both strings to lower case str1 = str1.lower() str2 = str2.lower() # Get the intersection of both sets of characters common_set = set(str1) & set(str2) # Convert the set to a sorted list and then join into a string return ''.join(sorted(common_set))"},{"question":"Extend the range from 10 to 30, and filter out numbers that are divisible by 3. my_numbers = list(range(10))","solution":"def extend_and_filter(numbers, start, end, divisor): Extends the given list of numbers range up to a new range from \`start\` to \`end\`, and then filters out numbers that are divisible by \`divisor\`. Parameters: - numbers: A list of numbers. - start: The starting integer for the new range. - end: The ending integer for the new range. - divisor: The integer divisor used for filtering. Returns: A list of numbers where numbers divisible by \`divisor\` are filtered out. extended_numbers = numbers + list(range(start, end)) filtered_numbers = [num for num in extended_numbers if num % divisor != 0] return filtered_numbers # Example usage my_numbers = list(range(10)) extended_and_filtered_numbers = extend_and_filter(my_numbers, 10, 30, 3) print(extended_and_filtered_numbers)"},{"question":"Implement a function \`compare_lists\` in Python that compares two lists of integers and returns a list containing the difference. The difference should be defined as the elements present in the first list but not in the second list. The order of elements in the resulting list should follow the order in the first list. # Function Signature \`\`\`python def compare_lists(list1: List[int], list2: List[int]) -> List[int]: \`\`\` # Input - \`list1\`: A list of integers. - \`list2\`: A list of integers. # Output - A list of integers representing the difference between \`list1\` and \`list2\`. # Example Input \`\`\`python list1 = [1, 2, 3, 4, 5] list2 = [2, 4] \`\`\` Output \`\`\`python [1, 3, 5] \`\`\` # Constraints - The lists \`list1\` and \`list2\` can be of different lengths. - The integers in both lists can range from -10^3 to 10^3. # Note - Do not use any built-in functions that directly perform the list difference operation. - Assume that the \`List[int]\` type has been imported from \`typing\` module.","solution":"from typing import List def compare_lists(list1: List[int], list2: List[int]) -> List[int]: Returns a list containing elements present in list1 but not in list2. set2 = set(list2) return [item for item in list1 if item not in set2]"},{"question":"Write a Python function that takes a dictionary as an input, where the keys are strings representing items, and the values are integers representing the quantities of those items. The function should return a new dictionary where the keys are the items with a quantity greater than 5, and the values are their respective quantities. Example: \`\`\`python input_data = { \\"apples\\": 10, \\"bananas\\": 4, \\"oranges\\": 7, \\"pears\\": 2 } \`\`\` Expected output: \`\`\`python { \\"apples\\": 10, \\"oranges\\": 7 } \`\`\`","solution":"def filter_items_by_quantity(input_dict): Returns a dictionary with items that have a quantity greater than 5. Parameters: input_dict (dict): A dictionary where the keys are strings representing items and the values are integers representing the quantities of those items. Returns: dict: A dictionary with items that have a quantity greater than 5. return {key: value for key, value in input_dict.items() if value > 5}"},{"question":"Design a function that determines if a given string can be rearranged into a palindrome. A palindrome reads the same backward as forward. The function should return a boolean value, with \`true\` if the rearrangement is possible and \`false\` otherwise. Consider optimizing the function for both time and space complexity. Input example: \\"racecar\\".","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged into a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged into a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"Implement a function that takes a list of integers and returns the maximum product of any three integers in the list. If the list contains fewer than three integers, return None. Your solution should handle both positive and negative numbers. Example: \`\`\`python def max_product_of_three(nums): # Your code here print(max_product_of_three([1, 10, 2, 6, 5, 3])) # Output: 300 (10 * 6 * 5) print(max_product_of_three([-10, -10, 1, 3, 2])) # Output: 300 (-10 * -10 * 3) \`\`\`","solution":"def max_product_of_three(nums): Returns the maximum product of any three integers in the list nums. If the list contains fewer than three integers, return None. if len(nums) < 3: return None nums.sort() # The maximum product of three numbers could be from: # 1. The product of the three largest numbers # 2. The product of the two smallest numbers and the largest number max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product"},{"question":"# Coding Assessment Question You are given the task of creating a program to determine if a given year is a leap year. A leap year is divisible by 4, but if it is divisible by 100, it should also be divisible by 400 to be considered a leap year. Write a function \`is_leap_year(year: int) -> bool\` that takes an integer year as input and returns \`True\` if the given year is a leap year, otherwise returns \`False\`. You need to ensure the function handles a large range of input values and performs efficiently. **Constraints:** - The year provided will be a positive integer no greater than 10^9. **Input:** - An integer \`year\` which represents the year to be checked. **Output:** - A boolean value \`True\` if the year is a leap year, otherwise \`False\`. **Examples:** \`\`\` is_leap_year(2020) -> True is_leap_year(1900) -> False is_leap_year(2000) -> True is_leap_year(2021) -> False \`\`\` **Note:** You are not allowed to use any libraries or built-in functions for leap year detection; implement the logic from scratch.","solution":"def is_leap_year(year: int) -> bool: Returns True if the given year is a leap year, otherwise returns False. A leap year is divisible by 4. However, if the year is also divisible by 100, it must also be divisible by 400 to be a leap year. if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"question":"<p> You are given an array of integers and an integer target value. Your task is to find three distinct elements in the array such that the sum of the three elements is closest to the target value. Return the sum of the three integers. You may assume that each input would have exactly one solution. </p> <p> For example, given the array [1, 2, -1, 4] and the target 1, the closest sum to the target 1 is 2. </p> <p> Write a function \`closest_three_sum\` that takes two arguments \`arr\` (list of integers) and \`target\` (integer), and returns the sum of the three integers closest to the target. </p> \`\`\` def closest_three_sum(arr, target): # Your code here # Example usage: arr = [1, 2, -1, 4] target = 1 print(closest_three_sum(arr, target)) # Output: 2 \`\`\`","solution":"def closest_three_sum(arr, target): arr.sort() closest_sum = float('inf') closest_diff = float('inf') for i in range(len(arr) - 2): left, right = i + 1, len(arr) - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_sum = current_sum if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return current_sum return closest_sum"},{"question":"Develop a function that accepts a list of tuples, where each tuple contains three elements: a student's name (a string), a list of grades (floats), and a dictionary that holds the number of courses the student has taken in each subject (subject_name: course_count). The function should also accept two additional parameters: \`threshold_pass_grade\` (float) and \`required_courses\` (integer). The function's role is to determine the number of students who pass based on two criteria: 1. The average of the student's grades must be greater than or equal to the \`threshold_pass_grade\`. 2. The student must have taken at least the \`required_courses\` in each subject. The function should return a set of names of students who meet both criteria. In addition, the function should handle the following cases: - If any grade is not a numerical value, it should raise a \`ValueError\` indicating the student's name and the problem. - If the grades list is empty, skip the student silently. - If any entry in the dictionary of courses is invalid (i.e., not a number or less than zero), it should raise a \`ValueError\` indicating the student's name and the problem. - If the input list is empty, return an empty set. Furthermore, write a unit test for this function to validate its performance, covering cases such as normal input, erroneous grades, invalid courses, and an empty input list. Ensure the function is optimized for handling a large number of students and grades. Lastly, provide an example usage of the function with a sample dataset, demonstrating its capability to process and filter students effectively.","solution":"def determine_passing_students(students, threshold_pass_grade, required_courses): Determines the number of students who pass based on given criteria. Args: - students: List of tuples [(name, grades, courses_dict)]. - threshold_pass_grade: Float, the threshold average grade to pass. - required_courses: Integer, minimum courses required in each subject. Returns: - set: Names of students who meet both criteria. passing_students = set() for student in students: name, grades, courses = student # Check grades list if not grades: continue if any(not isinstance(grade, (int, float)) for grade in grades): raise ValueError(f\\"Invalid grade found for student: {name}\\") # Check courses dictionary if any(not isinstance(courses[subject], int) or courses[subject] < 0 for subject in courses): raise ValueError(f\\"Invalid course count found for student: {name}\\") # Determine if student passes based on average grade and required courses if sum(grades) / len(grades) >= threshold_pass_grade and all(courses.get(subject, 0) >= required_courses for subject in courses): passing_students.add(name) return passing_students"},{"question":"Implement a function that takes a string consisting of both alphabets and numbers, and returns a string where all the alphabetic characters are shifted by one position in the alphabet (e.g., 'a' becomes 'b', 'z' becomes 'a', 'A' becomes 'B', 'Z' becomes 'A') and numeric characters are replaced by their successive digits (e.g., '0' becomes '1', '9' becomes '0'). Ensure your solution effectively handles case-sensitive alphabetic shifts and maintains the positioning of the numbers through the use of conditional statements and looping constructs intrinsic to programming.","solution":"def shift_string(input_string): Shifts alphabet characters by one position and replaces numeric characters with their successive digits. - 'a' becomes 'b', 'z' becomes 'a' - 'A' becomes 'B', 'Z' becomes 'A' - '0' becomes '1', '9' becomes '0' result = [] for char in input_string: if 'a' <= char <= 'z': if char == 'z': result.append('a') else: result.append(chr(ord(char) + 1)) elif 'A' <= char <= 'Z': if char == 'Z': result.append('A') else: result.append(chr(ord(char) + 1)) elif '0' <= char <= '9': if char == '9': result.append('0') else: result.append(chr(ord(char) + 1)) else: result.append(char) return ''.join(result)"},{"question":"Develop a sophisticated Python application that communicates with a RESTful API to manage and visualize real-time data acquired from IoT sensors. The application should be capable of performing intricate data processing, including filtering, aggregation, and anomaly detection. Emphasize the ability to handle asynchronous data streams, ensure data consistency, and incorporate features for data plotting and customizable dashboards. Additionally, the software should be designed to address potential issues such as network latency, data synchronization, and robust error handling to maintain seamless operation.","solution":"import requests import asyncio import json import matplotlib.pyplot as plt import websockets import numpy as np # Module for managing and visualizing IoT sensor data class IoTDataManager: def __init__(self, api_url): self.api_url = api_url self.data = [] async def fetch_data(self): async with websockets.connect(f'{self.api_url}/ws/data') as websocket: async for message in websocket: self.data.append(json.loads(message)) await asyncio.sleep(0.1) # Simulating processing time def filter_data(self, start_time, end_time): filtered_data = [datum for datum in self.data if start_time <= datum['timestamp'] <= end_time] return filtered_data def aggregate_data(self): data = np.array(self.data) timestamps = [record['timestamp'] for record in data] values = [record['value'] for record in data] return { 'min': np.min(values), 'max': np.max(values), 'mean': np.mean(values) } def detect_anomalies(self, threshold): anomalies = [record for record in self.data if record['value'] > threshold] return anomalies def plot_data(self): timestamps = [record['timestamp'] for record in self.data] values = [record['value'] for record in self.data] plt.plot(timestamps, values) plt.xlabel('Timestamp') plt.ylabel('Values') plt.title('IoT Sensor Data') plt.show() # Example usage: async def main(): manager = IoTDataManager(\\"http://localhost:8000/api\\") await manager.fetch_data() print(\\"Filtered Data: \\", manager.filter_data(1622505600, 1625097600)) print(\\"Aggregate Data: \\", manager.aggregate_data()) print(\\"Anomalies: \\", manager.detect_anomalies(50)) manager.plot_data() # Uncomment the following line to run the example # asyncio.run(main())"},{"question":"Write a function that takes a list of integers and returns the sum of all the positive numbers and the sum of all the negative numbers in a dictionary. The function should ignore zeros and should give the sums for positive and negative numbers separately. For example, given the list \`[1, -2, 3, 4, -5, 0, -6]\`, the function should return \`{'positive_sum': 8, 'negative_sum': -13}\`.","solution":"def sum_positive_negative(numbers): Returns the sum of all positive numbers and the sum of all negative numbers in a dictionary. The function ignores zeros. Parameters: numbers (list): A list of integers. Returns: dict: A dictionary with the keys 'positive_sum' and 'negative_sum'. positive_sum = sum(n for n in numbers if n > 0) negative_sum = sum(n for n in numbers if n < 0) return {'positive_sum': positive_sum, 'negative_sum': negative_sum}"},{"question":"Implement a Python function \`letter_count\` that takes a string input and returns a dictionary where the keys are the unique letters in the string and the values are the counts of how often each letter appears. Ignore case and disregard any characters that are not letters. Your implementation should reflect efficient usage of data structures and control flow constructs. For example: \`\`\`python def letter_count(s: str) -> dict: pass # Example usage: result = letter_count(\\"Hello World!\\") print(result) # Output should be {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1} \`\`\`","solution":"def letter_count(s: str) -> dict: Returns a dictionary with the count of each unique letter in the input string. Ignores case and non-letter characters. from collections import Counter # Convert the string to lower case and filter out non-letter characters cleaned_str = ''.join(filter(str.isalpha, s.lower())) # Use Counter to count occurrences of each letter return dict(Counter(cleaned_str))"},{"question":"In a game development scenario, you are given a two-dimensional grid that represents a level in the game. Each cell in the grid is either empty (represented by a '.') or contains an obstacle (represented by '#'). Write a function to determine whether there is a path from the top-left corner of the grid to the bottom-right corner, moving only up, down, left, or right, and without passing through any obstacles. \`\`\`python def is_path_exist(grid: List[List[str]]) -> bool: # Your code here # Example grid = [ ['.','.','.','#'], ['#','.','#','.'], ['.','.','.','.'], ['#','#','.','.'] ] print(is_path_exist(grid)) # Output: True \`\`\` Note: The grid is guaranteed to be at least 1x1 in size, and the top-left and bottom-right cells are always empty ('.').","solution":"from typing import List def is_path_exist(grid: List[List[str]]) -> bool: def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] != '.': return False if (x, y) == (len(grid) - 1, len(grid[0]) - 1): return True grid[x][y] = '#' # mark as visited # Explore all four directions: down, up, right, left if dfs(x + 1, y) or dfs(x - 1, y) or dfs(x, y + 1) or dfs(x, y - 1): return True return False return dfs(0, 0)"},{"question":"Write a program that converts a given integer to its corresponding Roman numeral representation. Given: num = 3549 Expected Output: MMMDXLIX Additional requirement: - Implement a function to perform this conversion manually by mapping the appropriate Roman numerals. Do not use any built-in functions or libraries for numeral conversion.","solution":"def int_to_roman(num): Converts an integer to its corresponding Roman numeral representation. # Define the Roman numeral mapping for each place value val_map = [ (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman_numeral = '' for (value, symbol) in val_map: while num >= value: roman_numeral += symbol num -= value return roman_numeral"},{"question":"Write a Python function to determine if a given string is a palindrome. A palindrome is a word that reads the same backward as forward, such as \\"madam\\" or \\"racecar\\". Your function should ignore case, spaces, and non-alphanumeric characters. Provide at least three test cases including these edge cases: an empty string, a single character string, and a string with mixed alphanumeric characters and punctuations. Additionally, handle incorrect inputs gracefully and return a meaningful message if the provided input is not a string. Example erroneous function: \`\`\`python def is_palindrome_wrong(s): return s == s[::-1] \`\`\` The given code doesn't handle case insensitivity, spaces, and non-alphanumeric characters. Correct the code and add the additional functionality mentioned above. Test your function with different cases, especially edge cases.","solution":"import re def is_palindrome(s): Determines if a given string is a palindrome, ignoring case, spaces, and non-alphanumeric characters. Returns a boolean value. If the input is not a string, returns a meaningful error message. if not isinstance(s, str): return \\"Input must be a string.\\" # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r'[^a-zA-Z0-9]', '', s).lower() # Check if cleaned string is a palindrome return cleaned == cleaned[::-1]"},{"question":"Write a function that takes a list of integers representing an elevation map, where the width of each bar is 1, and computes how much water it is able to trap after raining. Example Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map [0,1,0,2,1,0,1,3,2,1,2,1] is represented as shown below: \`\`\` ___ _ ___ _|_ | _|_|_||_|_|_| 0 1 0 2 1 0 1 3 2 1 2 1 \`\`\` The amount of water trapped is represented by \`*\`: \`\`\` ___ _*___*_*|* | _|_|_|*|_|_|_| 0 1 0 2 1 0 1 3 2 1 2 1 \`\`\` So, the function should return 6. Constraints: - The length of the elevation map will be between 1 and 10^5. - Each element in the elevation map will be between 0 and 10^4. - The time complexity of the function should be O(n), where n is the length of the elevation map. - The solution should use a constant amount of extra space apart from the input and output.","solution":"def trap(height): Given a list of integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining. :param height: List[int] - A list of non-negative integers representing the elevation map. :return: int - The total amount of water that can be trapped. if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"Develop a function that processes a large text document and identifies the most frequently occurring word. Your function should ignore punctuation, be case-insensitive, and handle ties by returning the first occurring word in the document. Implement proper error handling to manage edge cases such as an empty document or a document with only punctuation marks. You can assume the input text will be provided as a single string.","solution":"import re from collections import Counter def most_frequent_word(text): Process a large text document and identify the most frequently occurring word. The function ignores punctuation, is case-insensitive, and handles ties. Args: text (str): A large text document provided as a single string. Returns: str: The most frequently occurring word or an empty string if no valid word is found. if not text: return \\"\\" # Convert to lowercase and remove punctuation text = text.lower() words = re.findall(r'bw+b', text) if not words: return \\"\\" word_counts = Counter(words) most_common_word = word_counts.most_common(1)[0][0] return most_common_word"},{"question":"Design a function in Python that takes a string consisting of a mix of characters, numbers, and special symbols and returns the string with all numbers incremented by 1 (9 should become 0), while leaving other characters unchanged. For example, given the input \\"abc123!\\", the function should return \\"abc234!\\". Implement error handling for invalid inputs that are not strings, returning a clear message for such cases.","solution":"def increment_numbers_in_string(s): Given a string s, this function returns the string with all numbers incremented by 1 (9 should become 0), while leaving other characters unchanged. If the input is not a string, it returns a message indicating invalid input. if not isinstance(s, str): return \\"Invalid input, expected a string.\\" def increment_char(c): if c.isdigit(): return str((int(c) + 1) % 10) return c return ''.join(increment_char(c) for c in s)"},{"question":"Create a function in Python that takes a list of integers and returns the sum of the squares of only the even numbers. Additionally, identify the issue in the following erroneous code snippet provided and improve the solution. Erroneous Code: \`\`\`python def sum_of_squares(lst): total = 0 for i in range(len(lst)): if lst[i] % 2 == 0: total += lst[i] * lst[i] return total numbers = [1, 2, 3, 4, 5, 6] print(sum_of_squares(numbers)) \`\`\` Example: Input: [1, 2, 3, 4, 5, 6] Output: 56","solution":"def sum_of_squares_of_even(lst): Returns the sum of the squares of only the even numbers in the list. return sum(x ** 2 for x in lst if x % 2 == 0) # Fixed version of the erroneous code def sum_of_squares(lst): Returns the sum of the squares of only the even numbers in the list. total = 0 for num in lst: if num % 2 == 0: total += num ** 2 return total # Example usage numbers = [1, 2, 3, 4, 5, 6] print(sum_of_squares(numbers)) # Output: 56"},{"question":"Explain an algorithm that identifies and returns the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. Use the array [\\"flower\\", \\"flow\\", \\"flight\\"] as an example to illustrate your logic.","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. Returns an empty string if no common prefix exists. Parameters: strs (List[str]): The list of strings. Returns: str: The longest common prefix. if not strs: return \\"\\" # Take the first string as the initial prefix prefix = strs[0] for string in strs[1:]: # Compare the current string with the prefix and reduce prefix until they match while string.find(prefix) != 0: prefix = prefix[:-1] if not prefix: return \\"\\" return prefix # Example usage: # strs = [\\"flower\\", \\"flow\\", \\"flight\\"] # print(longest_common_prefix(strs)) # Output: \\"fl\\""},{"question":"Write a function that simulates the tossing of a fair coin. The function should take an integer \`n\` as input, representing the number of times the coin will be tossed. The function should return a dictionary with two keys: \\"Heads\\" and \\"Tails\\", corresponding to the number of times each outcome was observed. Additionally, use matplotlib to create a pie chart showing the distribution of heads and tails based on the results of the simulation. Make sure the function is well-structured to handle edge cases such as \`n\` being zero or negative. Example: \`\`\` simulate_coin_toss(100) \`\`\` Output: \`\`\` {'Heads': 47, 'Tails': 53} \`\`\` Pie chart displaying the distribution of heads and tails.","solution":"import random import matplotlib.pyplot as plt def simulate_coin_toss(n): Simulates the tossing of a fair coin n times. Returns a dictionary with counts of 'Heads' and 'Tails'. Also generates a pie chart showing the distribution of heads and tails. :param n: int, number of times the coin will be tossed :return: dict with keys 'Heads' and 'Tails' if n <= 0: return {'Heads': 0, 'Tails': 0} counts = {'Heads': 0, 'Tails': 0} for _ in range(n): toss = 'Heads' if random.random() < 0.5 else 'Tails' counts[toss] += 1 # Plot pie chart labels = 'Heads', 'Tails' sizes = [counts['Heads'], counts['Tails']] colors = ['gold', 'lightcoral'] explode = (0.1, 0) # explode 1st slice (Heads) plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140) plt.axis('equal') # Equal aspect ratio ensures that pie is drawn as a circle. plt.title('Distribution of Heads and Tails') plt.show() return counts"},{"question":"In Python, design a function that takes a nested dictionary and a target key, and returns the value associated with the target key. If the target key is not found, the function should return \\"Key not found\\". Consider that the dictionary may contain other nested dictionaries as values. Ensure that your function has a time complexity of O(n), where n is the total number of keys in the dictionary.","solution":"def find_nested_key(nested_dict, target_key): Finds the value associated with the target key in a nested dictionary. If the target key is not found, returns \\"Key not found\\". Args: nested_dict (dict): The nested dictionary to search. target_key (str): The key to find in the nested dictionary. Returns: The value associated with the target key, or \\"Key not found\\" if the key is not in the dictionary. if target_key in nested_dict: return nested_dict[target_key] for key, value in nested_dict.items(): if isinstance(value, dict): result = find_nested_key(value, target_key) if result != \\"Key not found\\": return result return \\"Key not found\\""},{"question":"Write a Python function to determine whether the string 'hello' exists within another string. Your function should be named \`check_hello\` and take a single argument which is the string to be checked. It should return \`True\` if 'hello' is found within the string, and \`False\` otherwise. Additionally, ensure the check is case-insensitive.","solution":"def check_hello(s): Determine whether 'hello' exists within the given string, case-insensitive. Parameters: s (str): Input string to be checked. Returns: bool: True if 'hello' is found within the string, False otherwise. # Convert the string to lower case and check for the substring 'hello' return 'hello' in s.lower()"},{"question":"Create a function that takes an array of integers and an integer \`target\`, then returns all unique combinations of elements from the array that add up to the \`target\`. Each number in the array may only be used once in each combination. The function should not return duplicate combinations. For example, given the array \`[10, 1, 2, 7, 6, 1, 5]\` and \`target\` of \`8\`, the function should return \`[[1, 7], [1, 2, 5], [2, 6], [1, 1, 6]]\`. Note that \`[1, 2, 5]\` and \`[2, 6]\` are different combinations that both add up to \`8\`, hence the uniqueness condition is satisfied.","solution":"def combination_sum2(candidates, target): Given a list of integers and a target sum, returns all unique combinations of candidates that add up to the target. Each number in the list may only be used once in the combination. :param candidates: List[int] - list of integers :param target: int - target sum :return: List[List[int]] - list of lists of integers def backtrack(start, path, target): if target == 0: res.append(path[:]) return if target < 0: return for i in range(start, len(candidates)): if i > start and candidates[i] == candidates[i-1]: continue path.append(candidates[i]) backtrack(i + 1, path, target - candidates[i]) path.pop() candidates.sort() res = [] backtrack(0, [], target) return res"},{"question":"Design a function in Python that takes a string input consisting of lowercase alphabets and numbers and returns a new string where each alphabetical character is replaced by its succeeding character in the alphabetic sequence (e.g., 'a' becomes 'b', 'b' becomes 'c', ..., 'z' becomes 'a') and each numerical digit is replaced by the digit that follows it in the sequence (e.g., '0' becomes '1', ..., '9' becomes '0'). The function should preserve the original order of characters and handle any edge cases appropriately.","solution":"def transform_string(s): Transforms a string by replacing each letter with the next letter in the alphabet (wrapping 'z' to 'a') and each digit with the next digit (wrapping '9' to '0'). transformed = [] for char in s: if char.isalpha(): if char == 'z': transformed.append('a') else: transformed.append(chr(ord(char) + 1)) elif char.isdigit(): if char == '9': transformed.append('0') else: transformed.append(chr(ord(char) + 1)) else: # For non-alphanumeric characters, keep the same character transformed.append(char) return ''.join(transformed)"},{"question":"A common task in data science involves normalizing a list of numerical values so they fall within a specific range, e.g., [0, 1]. Write a Python function that takes a list of numerical values as input and returns a new list with the values normalized to the range [0, 1]. If the input list is empty, the function should return an empty list. The normalization should be done using the formula: [ text{normalized_value} = frac{(value - min_value)}{(max_value - min_value)} ] For simplicity, you can assume the list contains only numerical values and no \`NaN\`s or other non-numeric types. **Function Signature:** \`\`\`python def normalize(values: List[float]) -> List[float]: pass \`\`\` **Example:** \`\`\`python normalize([10, 20, 30, 40, 50]) \`\`\` **Output:** \`\`\`python [0.0, 0.25, 0.5, 0.75, 1.0] \`\`\`","solution":"from typing import List def normalize(values: List[float]) -> List[float]: Normalizes a list of numerical values to the range [0, 1]. Args: values (List[float]): A list of numerical values to be normalized. Returns: List[float]: A new list with values normalized to the range [0, 1]. if not values: return [] min_value = min(values) max_value = max(values) # If all values in list are the same, return a list with zeros if min_value == max_value: return [0.0] * len(values) normalized_values = [(value - min_value) / (max_value - min_value) for value in values] return normalized_values"},{"question":"Write a function in Python that takes a list of dictionaries as input and returns a new dictionary that merges all the dictionaries together. In case of key conflicts, the value from the dictionary that appears later in the list should overwrite the previous ones. Example dictionaries could look like this: dict1 = {\\"a\\": 1, \\"b\\": 2, \\"c\\": 3} dict2 = {\\"b\\": 3, \\"d\\": 4} dict3 = {\\"a\\": 5, \\"e\\": 6}","solution":"def merge_dictionaries(dicts): Merges a list of dictionaries into a single dictionary. In case of key conflicts, the value from the dictionary that appears later in the list will overwrite the previous ones. :param dicts: List of dictionaries to merge :return: A single merged dictionary merged_dict = {} for d in dicts: merged_dict.update(d) return merged_dict"},{"question":"Write a function called \`merge_dicts\` that takes two dictionaries as arguments and returns a new dictionary that merges them. If both dictionaries have the same key, the value from the second dictionary should overwrite the value from the first dictionary. \`\`\`python def merge_dicts(dict1, dict2): Merges two dictionaries into one. Args: dict1 (dict): The first dictionary to merge. dict2 (dict): The second dictionary to merge. Returns: dict: A new dictionary containing all keys from both input dictionaries. # Your code here pass # Example usage: dict_a = {'a': 1, 'b': 2, 'c': 3} dict_b = {'b': 4, 'c': 5, 'd': 6} merged_dict = merge_dicts(dict_a, dict_b) print(merged_dict) # Expected output: {'a': 1, 'b': 4, 'c': 5, 'd': 6} \`\`\` **Constraints:** 1. Assume keys in the dictionaries are unique. 2. Dictionaries may contain different data types for values. 3. There will be no nested dictionaries. **Note:** No helper functions are allowed; implement everything within \`merge_dicts\`.","solution":"def merge_dicts(dict1, dict2): Merges two dictionaries into one. Args: dict1 (dict): The first dictionary to merge. dict2 (dict): The second dictionary to merge. Returns: dict: A new dictionary containing all keys from both input dictionaries. merged_dict = dict1.copy() # Start with the first dictionary's contents merged_dict.update(dict2) # Update with the second dictionary's contents, which will overwrite duplicates return merged_dict"},{"question":"Create a Python function to determine if a given string is a valid IPv4 address. An IPv4 address consists of four integers (each ranging from 0 to 255) separated by periods. Validate the string to ensure it meets these criteria. Additionally, include a sample incorrect implementation, identify its flaws, and provide a corrected version with a brief explanation. **Example Incorrect Implementation:** \`\`\`python def is_valid_ipv4(ip): parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not 0 <= int(part) <= 255: return False return True \`\`\` **Flaws in Implementation:** 1. It does not handle non-numeric parts. 2. It does not handle leading zeros in each part. 3. It does not handle cases where parts contain more than three digits. **Corrected Version:** \`\`\`python def is_valid_ipv4(ip): parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if len(part) > 1 and part[0] == '0': return False if not 0 <= int(part) <= 255: return False return True \`\`\`","solution":"def is_valid_ipv4(ip): Determine if a given string is a valid IPv4 address. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if len(part) > 1 and part[0] == '0': return False if not 0 <= int(part) <= 255: return False return True"},{"question":"Create a function that takes a list of integers and returns a list of tuples where each tuple contains an element from the input list and its squared value. The returned list should not include tuples of elements that are negative or zero. \`\`\`python def square_positive_elements(arr): This function processes the given list of integers and returns a list of tuples. Each tuple contains a number from the input list and its squared value, but only includes numbers that are strictly positive. Parameters: arr (list): A list of integers to be processed. Returns: list: A list of tuples containing the positive integers and their squares. Example: >>> square_positive_elements([1, -2, 3, 0]) == [(1, 1), (3, 9)] >>> square_positive_elements([-1, -2, -3]) == [] >>> square_positive_elements([7, 8, 9]) == [(7, 49), (8, 64), (9, 81)] \`\`\`","solution":"def square_positive_elements(arr): This function processes the given list of integers and returns a list of tuples. Each tuple contains a number from the input list and its squared value, but only includes numbers that are strictly positive. Parameters: arr (list): A list of integers to be processed. Returns: list: A list of tuples containing the positive integers and their squares. Example: >>> square_positive_elements([1, -2, 3, 0]) == [(1, 1), (3, 9)] >>> square_positive_elements([-1, -2, -3]) == [] >>> square_positive_elements([7, 8, 9]) == [(7, 49), (8, 64), (9, 81)] return [(x, x*x) for x in arr if x > 0]"},{"question":"Implement a function that takes a string containing a mathematical expression without spaces and evaluates it. The expression may contain integers, the four basic arithmetic operators (+, -, *, /), and parentheses. The function should handle operator precedence correctly and support nested parentheses. Function signature: \`def evaluate_expression(expression: str) -> int:\` **Input** - \`expression\`: A string representing a valid mathematical expression. The length of the string will be between 1 and 1000 characters. **Output** - Returns the evaluation of the mathematical expression as an integer. **Examples** \`\`\`python evaluate_expression(\\"3+2*2\\") => 7 evaluate_expression(\\" 3/2 \\") => 1 evaluate_expression(\\" 3+5 / 2 \\") => 5 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") => 23 \`\`\`","solution":"def evaluate_expression(expression: str) -> int: Evaluates a string containing a mathematical expression without spaces. The expression may contain integers, the four basic arithmetic operators (+, -, *, /), and parentheses. The function handles operator precedence and supports nested parentheses. def calc(tokens): stack = [] num = 0 sign = '+' while len(tokens) > 0: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == '(': num = calc(tokens) if (not token.isdigit() and token != ' ') or len(tokens) == 0: if sign == '+': stack.append(num) elif sign == '-': stack.append(-num) elif sign == '*': stack[-1] = stack[-1] * num elif sign == '/': stack[-1] = int(stack[-1] / num) sign = token num = 0 if token == ')': break return sum(stack) tokens = list(expression.replace(' ', '')) return calc(tokens)"},{"question":"Design a Python program that reads a text file and identifies the top three most frequent words in it. Additionally, you need to ensure that the words are not case-sensitive and exclude common stop words such as 'the', 'is', 'in', 'and', etc. The goal is to test your ability to perform file I/O operations, string manipulation, and data structure utilization in Python. Here is an initial erroneous code snippet that you need to debug and optimize to handle larger text files efficiently. \`\`\`python # initial erroneous code def read_file(filename) with open(filename) as file: text = file.read().split() return text def process_words(words): stop_words = ['the', 'is', 'in', 'and'] filtered_words = [word.lower() for word in words if word not in stop_words] return filtered_words def top_three_words(text): word_count = {} for word in text: if word not in word_count: word_count[word] = 0 word_count[word] += 1 top_words = sorted(word_count.items(), key=lambda item: item[1], reverse=True)[:5] return top_words filename = 'sample.txt' words = read_file(filename) processed_words = process_words(words) print(top_three_words(processed_words)) \`\`\` Your task is to: 1. Identify and correct errors in the provided code snippet. 2. Consider edge cases, such as punctuation and very large files, to optimize your solution. 3. Modify the program to list only the top three frequent words, instead of five. Provide the corrected and optimized code with comments explaining each step.","solution":"import re from collections import Counter def read_file(filename): Reads the entire content of the file and returns it as a string. with open(filename, 'r') as file: text = file.read() return text def process_words(text): Processes the text by converting it to lower case, removing punctuation, and excluding stop words. stop_words = {'the', 'is', 'in', 'and', 'of', 'to', 'a', 'that', 'it', 'with', 'as', 'for', 'was', 'on', 'at', 'by', 'an'} # Use regex to find all words considering ignore punctuation and other non-alphabetic characters words = re.findall(r'bw+b', text.lower()) filtered_words = [word for word in words if word not in stop_words] return filtered_words def top_three_words(words): Returns the top three most frequent words in the list. word_counter = Counter(words) top_words = word_counter.most_common(3) return top_words # Example usage: # filename = 'sample.txt' # text = read_file(filename) # processed_words = process_words(text) # print(top_three_words(processed_words))"},{"question":"Implement a function in Python to analyze a text file containing paragraphs of text. Your function should count the frequency of each word, considering case insensitivity and ignoring punctuation. Additionally, it should be able to handle and report any file-related exceptions (such as file not found). Provide a summary of the top five most frequent words along with their counts in descending order of frequency. Ensure your solution is modular, employing function decomposition where appropriate.","solution":"import re from collections import Counter import string def read_file(file_path): Reads the content of a file and returns it. If the file cannot be read, an exception is raised. :param file_path: Path to the text file :return: Content of the file as a string try: with open(file_path, 'r') as f: return f.read() except FileNotFoundError: raise FileNotFoundError(f\\"The file {file_path} does not exist.\\") def preprocess_text(text): Preprocesses the text by converting to lowercase and removing punctuation. :param text: The input text to be processed :return: List of words after preprocessing text = text.lower() text = re.sub(f\\"[{string.punctuation}]\\", \\"\\", text) words = text.split() return words def get_word_frequency(words): Counts the frequency of each word in the list. :param words: List of words :return: Dictionary with words as keys and their frequencies as values return Counter(words) def get_top_n_words(word_counts, n=5): Returns the top n most frequent words and their counts. :param word_counts: Dictionary with words as keys and their frequencies as values :param n: Number of top elements to return :return: List of tuples containing top n words and their counts return word_counts.most_common(n) def analyze_text_file(file_path): Analyzes the text file to find the top five most frequent words and their counts, considering case insensitivity and ignoring punctuation. :param file_path: Path to the text file :return: List of tuples containing the top five most frequent words and their counts content = read_file(file_path) words = preprocess_text(content) word_counts = get_word_frequency(words) top_words = get_top_n_words(word_counts) return top_words"},{"question":"Write a Python function that parses and evaluates a simple mathematical expression given as a string. The expression may contain integers, the addition (+) and multiplication (*) operators, and parentheses for grouping. Your function should correctly handle operator precedence and parentheses. Additionally, provide a test case where the input expression contains nested parentheses, and outline common mistakes that might occur in such situations and how to avoid them.","solution":"def evaluate_expression(expression): Parses and evaluates a simple mathematical expression given as a string. Supports integer numbers, addition (+), and multiplication (*), with proper handling of operator precedence and parentheses. def parse_expr(tokens): def parse_term(tokens): token = tokens.pop(0) if token == '(': expr_value = parse_expr(tokens) tokens.pop(0) # Remove closing parenthesis return expr_value else: return int(token) def parse_factor(tokens): term_value = parse_term(tokens) while tokens and tokens[0] == '*': tokens.pop(0) term_value *= parse_term(tokens) return term_value expr_value = parse_factor(tokens) while tokens and tokens[0] == '+': tokens.pop(0) expr_value += parse_factor(tokens) return expr_value tokens = [] i = 0 while i < len(expression): if expression[i] in '0123456789': j = i while j < len(expression) and expression[j] in '0123456789': j += 1 tokens.append(expression[i:j]) i = j elif expression[i] in '+*()': tokens.append(expression[i]) i += 1 else: i += 1 # Ignore whitespace return parse_expr(tokens)"},{"question":"Create a Python function to simulate the roll of a pair of dice and visualize the results using a histogram. The function should roll the pair of dice 10,000 times, recording the sum of the faces after each roll. Once all rolls are complete, generate a histogram that displays the frequency distribution of the sums. Ensure the histogram has appropriate labels for the axes and a title, making it clear and easy to interpret. The function should not return any values but should display the histogram directly.","solution":"import random import matplotlib.pyplot as plt def roll_dice_and_plot_histogram(): Simulates rolling a pair of dice 10,000 times and plots a histogram of the sums. # Roll the dice 10,000 times and compute the sum of the faces for each roll rolls = [random.randint(1, 6) + random.randint(1, 6) for _ in range(10000)] # Create a histogram of the sums plt.hist(rolls, bins=range(2, 14), edgecolor='black', align='left') # Set the title and labels plt.title('Histogram of Dice Rolls (10,000 rolls)') plt.xlabel('Sum of Dice') plt.ylabel('Frequency') # Display the histogram plt.show()"},{"question":"Write a program that takes a string as input and identifies the longest substring containing distinct characters. Your program should account for edge cases such as empty strings or strings with all identical characters. Extra Challenge: To handle larger cases efficiently, optimize your solution to run in linear time, O(n).","solution":"def longest_distinct_substring(s): Finds the longest substring with all distinct characters. Args: s (str): The input string. Returns: str: The longest substring with all distinct characters. if not s: return \\"\\" start = 0 max_start = 0 max_length = 0 char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end if end - start + 1 > max_length: max_start = start max_length = end - start + 1 return s[max_start:max_start + max_length]"},{"question":"Given a list of integers, find the first two integers that sum up to a given target value. If no such pair exists, return an empty list. Assume each input would have exactly one solution. Example: \`\`\` Input: nums = [2, 7, 11, 15] target = 9 Output: [2, 7] \`\`\` Explanation: Because nums[0] + nums[1] = 2 + 7 = 9. Note: You may not use the same element twice.","solution":"def two_sum(nums, target): Given a list of integers nums and an integer target, returns the first two integers that sum up to the target value. If no such pair exists, returns an empty list. :param nums: List[int] - list of integers :param target: int - target sum value :return: List[int] - list with the first two integers that sum up to target seen = {} for num in nums: complement = target - num if complement in seen: return [complement, num] seen[num] = True return []"},{"question":"Create a decision tree classifier on the 'wine' dataset from sklearn. Split the dataset into training and testing sets with a ratio of 8:2. Implement data normalization using Min-Max scaling. Alongside the basic decision tree, apply grid search cross-validation to find the best hyperparameters such as maximum depth, minimum samples split, and minimum samples leaf. Use the optimized parameters to train the final model. Generate a detailed classification report including accuracy, precision, recall, and F1-score. Additionally, visualize the decision tree and plot the feature importance. Discuss the significance of the selected hyperparameters and feature importance in the final model performance.","solution":"from sklearn.datasets import load_wine from sklearn.model_selection import train_test_split, GridSearchCV from sklearn.preprocessing import MinMaxScaler from sklearn.tree import DecisionTreeClassifier, plot_tree from sklearn.metrics import classification_report, accuracy_score import matplotlib.pyplot as plt import pandas as pd def decision_tree_classifier(): # Load the dataset wine = load_wine() X = wine.data y = wine.target # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Normalize the dataset scaler = MinMaxScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Implement Decision Tree Classifier dt = DecisionTreeClassifier(random_state=42) # Setup GridSearchCV param_grid = { 'max_depth': [None, 10, 20, 30, 40, 50], 'min_samples_split': [2, 5, 10, 20], 'min_samples_leaf': [1, 2, 5, 10] } grid_search = GridSearchCV(dt, param_grid, cv=5, scoring='accuracy') grid_search.fit(X_train, y_train) # Get the best parameters best_params = grid_search.best_params_ best_dt = grid_search.best_estimator_ # Train the final model best_dt.fit(X_train, y_train) # Predict the test set y_pred = best_dt.predict(X_test) # Classification report class_report = classification_report(y_test, y_pred, target_names=wine.target_names) accuracy = accuracy_score(y_test, y_pred) # Print Classification report and accuracy print(\\"Classification Report:n\\", class_report) print(\\"Accuracy: \\", accuracy) print(\\"Best Parameters: \\", best_params) # Visualize the decision tree plt.figure(figsize=(20, 10)) plot_tree(best_dt, feature_names=wine.feature_names, class_names=wine.target_names, filled=True) plt.title(\\"Decision Tree Visualization\\") plt.show() # Plot feature importance feature_importances = pd.Series(best_dt.feature_importances_, index=wine.feature_names).sort_values(ascending=False) feature_importances.plot(kind='bar') plt.title(\\"Feature Importances\\") plt.show() return best_params, accuracy, class_report, best_dt # Run the decision tree classifier function decision_tree_classifier()"},{"question":"Write a function \`maximum_occurrences\` that takes a list of integers as input and returns the integer with the most occurrences in the list. If there is a tie, return the smallest one. The function should handle lists with a size of up to 10^5 elements. \`\`\`python def maximum_occurrences(arr): # Your code here pass # Example usage: # arr = [3, 2, 3, 2, 1, 2, 3, 4, 4, 4] # maximum_occurrences(arr) should return 3 \`\`\` # Constraints: - The input list will contain at least 1 and at most 10^5 integers. - Integers in the list will be between -10^9 and 10^9 inclusive.","solution":"def maximum_occurrences(arr): Returns the integer with the most occurrences in the list. If there is a tie, returns the smallest one. from collections import Counter counts = Counter(arr) # Find the maximum occurrence count max_occurrence = max(counts.values()) # Filter numbers that have the maximum occurrence count most_common_numbers = [num for num, count in counts.items() if count == max_occurrence] # Return the smallest number among them return min(most_common_numbers)"},{"question":"Using the given string, write a function in Python that checks whether the string is a palindrome, ignoring spaces, punctuation, and capitalization. The function should return \`True\` if the string is a palindrome and \`False\` otherwise. \`\`\`python def is_palindrome(s: str) -> bool: # Your code here # Example usage: # Input: \\"A man, a plan, a canal, Panama!\\" # Output: True # Input: \\"No lemon, no melon\\" # Output: True # Input: \\"Hello, World!\\" # Output: False \`\`\`","solution":"def is_palindrome(s: str) -> bool: Checks whether the string is a palindrome, ignoring spaces, punctuation, and capitalization. # Filter out non-alphanumeric characters and convert to lower case filtered_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_s == filtered_s[::-1]"},{"question":"Write a function in Python that accepts a string containing digits and returns a new string that only contains the even digits, in the same order as they appear in the input string. The provided string will only contain digits (0-9) and will not be empty. Function Signature: \`\`\`python def extract_even_digits(input_string: str) -> str: pass \`\`\` Example: \`\`\`python assert extract_even_digits(\\"1234567890\\") == \\"24680\\" assert extract_even_digits(\\"13579\\") == \\"\\" assert extract_even_digits(\\"8642\\") == \\"8642\\" \`\`\` Your function should: - Iterate through each character in the string. - Check if the character represents an even digit. - Append even digits to the result string. - Return the resulting string with only even digits.","solution":"def extract_even_digits(input_string: str) -> str: Returns a string containing only the even digits from the input string. even_digits = \\"02468\\" result = \\"\\" for char in input_string: if char in even_digits: result += char return result"},{"question":"Consider the list of strings below. Write a Python function \`check_special_chars\` that verifies if a given string contains any of the special characters \`!\`, \`@\`, \`#\`, \`\`, \`%\`, \`^\`, \`&\`, \`*\`, \`(\`, \`)\`. The function should return \`True\` if any special character is found and \`False\` otherwise. Provide a set of assert statements to test your function. list_of_strings = [\\"hello\\", \\"world!\\", \\"good@morning\\", \\"happy#day\\", \\"pythonis\\", \\"great%^\\", \\"let&us\\", \\"code*\\", \\"(together)\\", \\"make)it(happen\\"]","solution":"def check_special_chars(s): Checks if the given string contains any special characters. Special characters to check: !, @, #, , %, ^, &, *, (, ) Args: s (str): The string to check. Returns: bool: True if any special character is found, False otherwise. special_chars = \\"!@#%^&*()\\" return any(char in special_chars for char in s)"},{"question":"Write a function 'findLongestPath' that takes a 2D grid of integers and returns the length of the longest increasing path in the grid. Each cell can move to any of its four adjacent cells (up, down, left, or right) if the value in the next cell is greater. Ensure that you account for grids that may have cycles or have cells with equal values. For example: grid = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] The 'findLongestPath' should return: length = 4 In the above example, one of the longest increasing paths is [1, 2, 6, 9].","solution":"def findLongestPath(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) cache = [[-1] * cols for _ in range(rows)] def dfs(x, y): if cache[x][y] != -1: return cache[x][y] max_len = 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] > grid[x][y]: max_len = max(max_len, 1 + dfs(nx, ny)) cache[x][y] = max_len return cache[x][y] result = 0 for i in range(rows): for j in range(cols): result = max(result, dfs(i, j)) return result"},{"question":"Write a function that simulates a basic inventory management system for a warehouse. This system should accommodate adding new items with their respective quantities, removing items by decreasing their quantities, and checking the current stock level of a specific item. For simplicity, assume each item is identified by a unique string identifier. Implement the following functionalities: 1. \`add_item(item_id: str, quantity: int)\`: Adds the specified quantity of the item to the inventory. If the item does not exist, it should be added to the inventory. 2. \`remove_item(item_id: str, quantity: int)\`: Decreases the specified quantity of the item from the inventory. If the quantity to be removed exceeds the current stock, it should remove as much as possible without going into negative stock. 3. \`check_stock(item_id: str) -> int\`: Returns the current stock level of the specified item. If the item does not exist, it should return 0. Ensure that the system performs efficiently for a large number of operations and items, using an initial dataset with a mix of 100 unique items, each starting with a random quantity between 1 and 1000.","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_id: str, quantity: int): if item_id in self.items: self.items[item_id] += quantity else: self.items[item_id] = quantity def remove_item(self, item_id: str, quantity: int): if item_id in self.items: self.items[item_id] = max(0, self.items[item_id] - quantity) def check_stock(self, item_id: str) -> int: return self.items.get(item_id, 0)"},{"question":"Implement a function that takes a dictionary with employee names as keys and a list of their monthly sales as values, and calculates the average sales per month for each employee. Additionally, determine the employee with the highest average monthly sales. Example input: {'John': [2500, 3200, 2100], 'Emma': [3100, 3400, 2900], 'Liam': [2700, 2800, 2600]}.","solution":"def calculate_average_sales(sales_data): Calculate the average sales per month for each employee and determine the employee with the highest average monthly sales. Args: sales_data (dict): A dictionary where the keys are employee names and the values are lists of their monthly sales. Returns: tuple: A dictionary with the average sales per month for each employee and a tuple with the employee name and their highest average monthly sales. average_sales = {} highest_avg_sales = ('', 0) for employee, sales in sales_data.items(): avg_sales = sum(sales) / len(sales) average_sales[employee] = avg_sales if avg_sales > highest_avg_sales[1]: highest_avg_sales = (employee, avg_sales) return average_sales, highest_avg_sales"},{"question":"Create a Python function that simulates a simple shopping cart. The function should accept a list of tuples, where each tuple contains a product name and its price. The function should return the total cost of all items in the cart, applying a discount of 10% if the total cost exceeds 100. If the cart is empty, the function should return 0.","solution":"def calculate_total(cart): Calculate the total cost of items in the cart, applying a discount of 10% if the total cost exceeds 100. If the cart is empty, return 0. Parameters: cart (list of tuples): A list where each tuple contains a product name and its price. Returns: float: The total cost after applying any applicable discount. if not cart: return 0.0 total = sum(price for item, price in cart) if total > 100: total *= 0.9 return total"},{"question":"# Can You Balance the Parentheses? Given a string composed of only '(', ')', '{', '}', '[' and ']', your task is to determine if the given string is a balanced parentheses expression. A string is considered balanced if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. For instance, consider the following scenarios: Scenario 1: Input: s = \\"([]){}\\" Output: true Scenario 2: Input: s = \\"(([{]))\\" Output: false Scenario 3: Input: s = \\"(({}))\\" Output: true Scenario 4: Input: s = \\"({[)]}\\" Output: false Scenario 5: Input: s = \\"\\" Output: true **Constraints:** - The length of the string will be at most \`5000\` characters.","solution":"def is_balanced_parentheses(s): Checks if the given string s is a balanced parentheses expression. stack = [] matching_bracket = {')': '(', '}': '{', ']': '['} for char in s: if char in '({[': stack.append(char) elif char in ')}]': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return not stack"},{"question":"Create a function that calculates the Longest Common Subsequence (LCS) of two given strings. The function should return both the length of the LCS and one possible LCS string. Consider edge cases where one or both strings are empty. Add an extra challenge: Additionally, provide a piece of code that includes a typical mistake made when solving the LCS problem. The mistake should cause the code to return incorrect results for certain inputs. Analyze the error and describe how to correct it.","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence and one possible LCS string. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS string from dp table lcs_str = \\"\\" i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs_str = str1[i - 1] + lcs_str i -= 1 j -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 return dp[m][n], lcs_str # Typical mistake def longest_common_subsequence_mistake(str1, str2): Returns the length of the longest common subsequence but potentially wrong LCS string due to a mistake. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct LCS string from dp table (Mistake here) lcs_str = \\"\\" i, j = m, n while i > 0 and j > 0: if dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 if str1[i - 1] == str2[j - 1]: lcs_str = str1[i - 1] + lcs_str i -= 1 j -= 1 return dp[m][n], lcs_str"},{"question":"Write a Python function that accepts a dictionary where keys are string names of students and values are lists of integers representing their marks. The function should return a new dictionary with the same keys, where the values are tuples. Each tuple should contain the average marks, the maximum marks, and the minimum marks for each student. If any student's list of marks is empty, the function should raise a ValueError with an appropriate message. Example input for testing the function: students_marks = { 'Alice': [85, 90, 78], 'Bob': [92, 73, 66], 'Charlie': [89, 91, 94], 'David': [] } Here is an example of the expected output: { 'Alice': (84.33, 90, 78), 'Bob': (77.0, 92, 66), 'Charlie': (91.33, 94, 89) } # Code Starter Template: \`\`\`python def analyze_student_marks(students_marks): analyzed_marks = {} for student, marks in students_marks.items(): if not marks: raise ValueError(f\\"No marks available for student: {student}\\") average_marks = sum(marks) / len(marks) max_marks = max(marks) min_marks = min(marks) analyzed_marks[student] = (average_marks, max_marks, min_marks) return analyzed_marks # Example usage students_marks = { 'Alice': [85, 90, 78], 'Bob': [92, 73, 66], 'Charlie': [89, 91, 94], 'David': [] } print(analyze_student_marks(students_marks)) \`\`\`","solution":"def analyze_student_marks(students_marks): Accepts a dictionary where keys are student names and values are lists of their marks. Returns a new dictionary with the same keys, where the values are tuples containing the average marks, the maximum marks, and the minimum marks for each student. Raises ValueError if any student's list of marks is empty. analyzed_marks = {} for student, marks in students_marks.items(): if not marks: raise ValueError(f\\"No marks available for student: {student}\\") average_marks = round(sum(marks) / len(marks), 2) max_marks = max(marks) min_marks = min(marks) analyzed_marks[student] = (average_marks, max_marks, min_marks) return analyzed_marks"},{"question":"Write a function that accepts an integer array and a target integer. The function should return the indices of the two numbers such that they add up to the target. Assume that each input will have exactly one solution, and you may not use the same element twice. If no such indices exist, return \`[-1, -1]\`. For example: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Input: nums = [3, 3], target = 6 Output: [0, 1] Input: nums = [1, 2, 3, 4], target = 8 Output: [-1, -1]","solution":"def two_sum(nums, target): Returns indices of the two numbers in nums that add up to the target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return [-1, -1]"},{"question":"Write a function in Python that takes a list of dictionaries and returns a new dictionary. The new dictionary should have keys as unique values of a specified key from each dictionary in the list, and the values should be a list of dictionaries that share that key. **Input:** 1. A list of dictionaries. 2. A key. # Example \`\`\`python data = [ {\\"name\\": \\"Alice\\", \\"department\\": \\"Engineering\\", \\"age\\": 25}, {\\"name\\": \\"Bob\\", \\"department\\": \\"HR\\", \\"age\\": 30}, {\\"name\\": \\"Charlie\\", \\"department\\": \\"Engineering\\", \\"age\\": 29}, {\\"name\\": \\"David\\", \\"department\\": \\"Design\\", \\"age\\": 22}, {\\"name\\": \\"Eva\\", \\"department\\": \\"Design\\", \\"age\\": 27} ] key = \\"department\\" \`\`\` # Output \`\`\`python { \\"Engineering\\": [ {\\"name\\": \\"Alice\\", \\"department\\": \\"Engineering\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\", \\"department\\": \\"Engineering\\", \\"age\\": 29} ], \\"HR\\": [ {\\"name\\": \\"Bob\\", \\"department\\": \\"HR\\", \\"age\\": 30} ], \\"Design\\": [ {\\"name\\": \\"David\\", \\"department\\": \\"Design\\", \\"age\\": 22}, {\\"name\\": \\"Eva\\", \\"department\\": \\"Design\\", \\"age\\": 27} ] } \`\`\` # Constraints - Assume all dictionaries have the specified key. - If the list is empty, return an empty dictionary. - The specified key will always be a string. # Function Signature \`\`\`python def group_by_key(data: List[Dict[str, Any]], key: str) -> Dict[str, List[Dict[str, Any]]]: pass \`\`\` # Example Usage \`\`\`python group_by_key(data, key) \`\`\`","solution":"from typing import List, Dict, Any def group_by_key(data: List[Dict[str, Any]], key: str) -> Dict[str, List[Dict[str, Any]]]: result = {} for item in data: key_value = item[key] if key_value not in result: result[key_value] = [] result[key_value].append(item) return result"},{"question":"Given a large dataset comprised of tuples, each representing a user's activity on a platform, design a function to calculate the total time a user spent active on the platform. Each tuple contains a user ID, an activity type (either \\"login\\" or \\"logout\\"), and a timestamp. The function should return a dictionary where keys are user IDs and values are total active times in seconds. The input data guarantees that each \\"login\\" is followed by a corresponding \\"logout\\" for the same user, but the order of activities for different users may be mixed. Example input: \`\`\`python [('user1', 'login', 1609459200), ('user1', 'logout', 1609462800), ('user2', 'login', 1609459200), ('user2', 'logout', 1609466400), ('user1', 'login', 1609466400), ('user1', 'logout', 1609470000)] \`\`\` Output for the above input: \`\`\`python {'user1': 7200, 'user2': 7200} \`\`\` **Constraints**: - A user will never have overlapping login/logout periods. - The function should handle up to 10^6 activities efficiently. - The function should be implemented with a time complexity of O(n), where n is the number of activity records. Additionally, provide a piece of code that incorrectly tries to solve the problem. Highlight what the code is doing right, but also explain why it fails in certain scenarios due to wrong assumptions or logic errors like mixing activities of different users.","solution":"def calculate_active_time(activities): Calculates the total active time for each user given their login and logout activities. Parameters: activities (list of tuples): Each tuple contains a user ID, an activity type ('login'/'logout'), and a timestamp. Returns: dict: A dictionary where keys are user IDs and values are total active times in seconds. user_times = {} login_times = {} for user_id, activity_type, timestamp in activities: if activity_type == 'login': login_times[user_id] = timestamp elif activity_type == 'logout': if user_id in login_times: active_time = timestamp - login_times[user_id] if user_id in user_times: user_times[user_id] += active_time else: user_times[user_id] = active_time del login_times[user_id] return user_times"},{"question":"Develop a Python script that connects to an AWS S3 bucket to retrieve JSON data files. Using the pandas library, load these files and combine them into a single DataFrame while handling JSON-specific parsing issues. Perform exploratory data analysis to compute basic statistics and identify potential anomalies. Finally, visualize the distribution of key variables using Matplotlib. Ensure the script includes proper exception handling and logging for traceability.","solution":"import boto3 import pandas as pd import json import matplotlib.pyplot as plt import logging from botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError # Setup logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') logger = logging.getLogger() def connect_to_s3(aws_access_key_id, aws_secret_access_key): Establish a connection to S3. try: s3_client = boto3.client( 's3', aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key ) logger.info(\\"Successfully connected to S3\\") return s3_client except (NoCredentialsError, PartialCredentialsError) as e: logger.error(\\"AWS credentials not available.\\", exc_info=True) raise e except ClientError as e: logger.error(\\"Failed to connect to S3.\\", exc_info=True) raise e def retrieve_json_files(s3_client, bucket_name, prefix): Retrieve JSON files from S3 bucket. files = [] try: response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix) for obj in response.get('Contents', []): if obj['Key'].endswith('.json'): files.append(obj['Key']) except ClientError as e: logger.error(\\"Error in accessing S3 objects.\\", exc_info=True) raise e return files def load_and_combine_json_files(s3_client, bucket_name, files): Load and combine JSON files into a single DataFrame. data_frames = [] for file in files: try: response = s3_client.get_object(Bucket=bucket_name, Key=file) file_content = response['Body'].read().decode('utf-8') json_data = json.loads(file_content) data_frame = pd.json_normalize(json_data) data_frames.append(data_frame) except Exception as e: logger.error(f\\"Error in loading or parsing JSON file: {file}\\", exc_info=True) continue combined_df = pd.concat(data_frames, ignore_index=True) return combined_df def perform_eda(data_frame): Perform exploratory data analysis. statistics = data_frame.describe() print(\\"Basic Statistics:n\\", statistics) print(\\"Missing Values:n\\", data_frame.isnull().sum()) print(\\"Data Types:n\\", data_frame.dtypes) logger.info(\\"Exploratory Data Analysis performed successfully.\\") def visualize_data(data_frame, column_name): Visualize distribution of key variables. if column_name in data_frame: plt.figure(figsize=(10, 6)) data_frame[column_name].hist(bins=30) plt.title(f'Distribution of {column_name}') plt.xlabel(column_name) plt.ylabel('Frequency') plt.show() logger.info(f\\"Visualization for {column_name} done successfully.\\") else: logger.warning(f'Column {column_name} not found in DataFrame.') if __name__ == \\"__main__\\": # Example usage aws_access_key_id = \\"your_access_key_id\\" aws_secret_access_key = \\"your_secret_access_key\\" bucket_name = \\"your_bucket_name\\" prefix = \\"your_prefix\\" try: s3_client = connect_to_s3(aws_access_key_id, aws_secret_access_key) files = retrieve_json_files(s3_client, bucket_name, prefix) combined_df = load_and_combine_json_files(s3_client, bucket_name, files) perform_eda(combined_df) visualize_data(combined_df, 'key_column_name') except Exception as e: logger.error(\\"Error encountered in main execution\\", exc_info=True)"},{"question":"Develop a Python class named \`BookCollection\` to represent a collection of books. Each book should be represented as a dictionary containing keys such as \`title\`, \`author\`, \`pages\`, and \`genre\`. The class should include methods to: 1. Add a new book to the collection. 2. Remove a book given its title. 3. Find a book by its title and return its details. 4. List all books of a particular genre. 5. Calculate the total number of pages across all books in the collection. 6. Handle scenarios when the book to be removed or searched for does not exist in the collection. Ensure to include necessary error handling and validation to maintain the integrity of the collection, such as avoiding duplicate book titles and ensuring all book details are provided correctly upon adding.","solution":"class BookCollection: def __init__(self): self.books = [] def add_book(self, book): if not all (k in book for k in (\\"title\\", \\"author\\", \\"pages\\", \\"genre\\")): raise ValueError(\\"Book must have title, author, pages, and genre.\\") if any(b['title'] == book['title'] for b in self.books): raise ValueError(\\"Book with this title already exists.\\") self.books.append(book) def remove_book(self, title): for book in self.books: if book['title'] == title: self.books.remove(book) return raise ValueError(\\"Book not found.\\") def find_book_by_title(self, title): for book in self.books: if book['title'] == title: return book return None def list_books_by_genre(self, genre): return [book for book in self.books if book['genre'] == genre] def total_pages(self): return sum(book['pages'] for book in self.books)"},{"question":"Describe an algorithm and provide code to rotate a given n x n matrix by 90 degrees clockwise. The algorithm should perform the rotation in place, requiring minimal extra memory allocation. How does the algorithm ensure that the rotation is completed with the desired time complexity?","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix by 90 degrees clockwise in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"Write a program that simulates a simple banking system in Python. Your program should allow the user to perform the following operations: 1. Create a new account. 2. Check the balance of an account. 3. Deposit money into an account. 4. Withdraw money from an account. Each account should have the following attributes: - An account number: a unique identifier for each account, which can be a string. - A customer name: the name of the account holder. - A balance: the current balance of the account. The program should start by displaying a menu with the available operations (as mentioned above), and it should prompt the user to choose an operation. Based on the user’s choice, prompt the user for additional inputs required for the chosen operation. Implement the program in a class-based structure, making sure to handle cases such as insufficient funds for withdrawals and invalid account numbers gracefully. Example of expected behavior: \`\`\` Welcome to the Simple Banking System. Please choose an option: 1. Create a new account 2. Check the balance of an account 3. Deposit money into an account 4. Withdraw money from an account 5. Exit Your choice: 1 Enter customer name: Alice Account created successfully. Your account number is A123456. Welcome to the Simple Banking System. Please choose an option: 1. Create a new account 2. Check the balance of an account 3. Deposit money into an account 4. Withdraw money from an account 5. Exit Your choice: 2 Enter account number: A123456 Current balance: 0.00 Welcome to the Simple Banking System. Please choose an option: 1. Create a new account 2. Check the balance of an account 3. Deposit money into an account 4. Withdraw money from an account 5. Exit Your choice: 3 Enter account number: A123456 Enter amount to deposit: 500.00 Deposited successfully. New balance: 500.00 Welcome to the Simple Banking System. Please choose an option: 1. Create a new account 2. Check the balance of an account 3. Deposit money into an account 4. Withdraw money from an account 5. Exit Your choice: 4 Enter account number: A123456 Enter amount to withdraw: 100.00 Withdrawn successfully. New balance: 400.00 Welcome to the Simple Banking System. Please choose an option: 1. Create a new account 2. Check the balance of an account 3. Deposit money into an account 4. Withdraw money from an account 5. Exit Your choice: 5 Thank you for using the Simple Banking System. Goodbye! \`\`\`","solution":"class Account: def __init__(self, account_number, customer_name): self.account_number = account_number self.customer_name = customer_name self.balance = 0.0 class SimpleBankingSystem: def __init__(self): self.accounts = {} self.next_account_number = 1 def create_account(self, customer_name): account_number = f\\"A{self.next_account_number:06d}\\" self.accounts[account_number] = Account(account_number, customer_name) self.next_account_number += 1 return account_number def check_balance(self, account_number): account = self.accounts.get(account_number) if account: return account.balance else: raise ValueError(\\"Invalid account number\\") def deposit(self, account_number, amount): if amount <= 0: raise ValueError(\\"Deposit amount must be positive\\") account = self.accounts.get(account_number) if account: account.balance += amount return account.balance else: raise ValueError(\\"Invalid account number\\") def withdraw(self, account_number, amount): if amount <= 0: raise ValueError(\\"Withdraw amount must be positive\\") account = self.accounts.get(account_number) if account: if account.balance >= amount: account.balance -= amount return account.balance else: raise ValueError(\\"Insufficient funds\\") else: raise ValueError(\\"Invalid account number\\")"},{"question":"Given an array of integers \`nums\`, return the length of the longest strict increasing subsequence of \`nums\`. A subsequence is a sequence derived by deleting some or none of the elements of the array, without changing the order of the remaining elements. A strict increasing subsequence is a sequence where each subsequent element is strictly greater than the preceding element. Example 1: Input: nums = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Example 2: Input: nums = [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Constraints: \`1 <= nums.length <= 2500\` \`-10^4 <= nums[i] <= 10^4\` Follow up: Can you solve this problem in O(n log n) time complexity? Additionally, provide a piece of incorrect code that attempts to solve the problem but fails due to a logical error. Analyze the code inline with comments to explain why it fails and what needs to be done to correct it. Incorrect Code: \`\`\`python def lengthOfLIS(nums): n = len(nums) dp = [1] * n # Initialize the dp array with 1s for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) # Logical error: returning the value of dp[n-1] instead of the maximum value in dp array return dp[n-1] # Logical error analysis and correction: # The problem with the above code is that it incorrectly returns dp[n-1] which only provides the length of LIS ending at the last element. # Instead, we should return max(dp) which gives the length of the longest increasing subsequence found anywhere in the array. def lengthOfLIS(nums): n = len(nums) dp = [1] * n # Initialize the dp array with 1s for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Corrected: return the maximum value in the dp array \`\`\`","solution":"def lengthOfLIS(nums): Returns the length of the longest strict increasing subsequence of nums. if not nums: return 0 n = len(nums) dp = [1] * n # Initialize the dp array with 1s for i in range(1, n): for j in range(0, i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Create a function to determine all the Armstrong numbers within a specified range. An Armstrong number (also known as a narcissistic number) for a given number of digits is a number that is equal to the sum of its own digits each raised to the power of the number of digits. The function should take two integers as input: a lower bound \`low\` and an upper bound \`high\`, both inclusive. The function must validate that both inputs are positive integers with \`low\` less than or equal to \`high\`. The function should return a list of all Armstrong numbers within the specified range. Additionally, the function should handle scenarios where there are no Armstrong numbers in the given range by returning an empty list. Lastly, formulate unit tests to verify the function's accuracy. The tests should cover various cases, including: - \`low\` and \`high\` being the same value. - Standard ranges where there are multiple Armstrong numbers. - Ranges where there are no Armstrong numbers. - Edge cases such as very small and very large ranges. - Cases with invalid inputs such as negative numbers or zero and verify that appropriate exceptions or error messages are handled.","solution":"def is_armstrong(number): Checks if a number is an Armstrong number. digits = [int(d) for d in str(number)] power = len(digits) return number == sum(d ** power for d in digits) def find_armstrong_numbers(low, high): Returns a list of all Armstrong numbers between low and high (inclusive). Both low and high should be positive integers, with low <= high. if not (isinstance(low, int) and isinstance(high, int)): raise TypeError(\\"Both low and high must be integers.\\") if low <= 0 or high <= 0: raise ValueError(\\"Both low and high must be positive integers.\\") if low > high: raise ValueError(\\"Low bound must be less than or equal to high bound.\\") armstrong_numbers = [] for number in range(low, high + 1): if is_armstrong(number): armstrong_numbers.append(number) return armstrong_numbers"},{"question":"Given a list of dictionaries, where each dictionary represents a book with the keys 'title', 'author', 'year_published', and 'genres' (a list of genres the book belongs to), write a Python function called \`books_by_genre\`. The function should accept the list of books and a genre string as inputs. It should return a list of titles of books that belong to the given genre. If no books match the specified genre, the function should return an empty list. Ensure the function handles cases where the genre string is not provided by returning all book titles available in the list. The data is provided as follows: \`[{'title': 'Book1', 'author': 'Author1', 'year_published': 2020, 'genres': ['Fiction', 'Drama']}, {'title': 'Book2', 'author': 'Author2', 'year_published': 2019, 'genres': ['Non-Fiction', 'Self-Help']}, {'title': 'Book3', 'author': 'Author3', 'year_published': 2021, 'genres': ['Fiction', 'Mystery']}]\`. The function should be robust to handle any errors resulting from incorrect data formats or unavailable genres. For instance, if the 'genres' key is missing from a book entry, that book should be safely ignored.","solution":"def books_by_genre(books, genre=None): Returns a list of book titles that belong to the specified genre. If genre is not provided, returns all book titles. Args: books (list): List of dictionaries where each dictionary represents a book. genre (str, optional): The genre to filter books by. Defaults to None. Returns: list: List of book titles that match the specified genre or all titles if no genre is provided. if genre is None: return [book['title'] for book in books] titles = [] for book in books: if 'genres' in book and genre in book['genres']: titles.append(book['title']) return titles"},{"question":"Write a function in Python that takes a list of integers as input and returns the maximum sum of any contiguous subarray within the given list. If the list is empty, return 0. The function should use an efficient algorithm to solve the problem.","solution":"def max_subarray_sum(nums): Returns the maximum sum of any contiguous subarray within the given list. If the list is empty, return 0. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Consider the following piece of Python code that aims to merge two lists into a new list containing tuples of elements from the respective positions of the original lists. The code is currently failing to handle the case where the lists are of different lengths, and it should stop pairing once the end of the shortest list is reached. Additionally, if either of the lists is empty, the function should return an empty list. Identify and correct the error: #Incorrect Code#: \`\`\`python def merge_lists(list1, list2): return [(list1[i], list2[i]) for i in range(len(list1))] \`\`\` list1 = [1, 2, 3] list2 = ['a', 'b', 'c', 'd'] Enhance this function to ensure that it stops at the end of the shorter list and returns an empty list if either of the input lists is empty.","solution":"def merge_lists(list1, list2): Merges two lists into a new list containing tuples of elements from the respective positions of the original lists. Stops pairing once the end of the shortest list is reached. Returns an empty list if either of the lists is empty. if not list1 or not list2: return [] min_length = min(len(list1), len(list2)) return [(list1[i], list2[i]) for i in range(min_length)]"},{"question":"Write a program that takes an input string consisting of words separated by spaces and returns a new string where each word in the input string is replaced by its reverse. Consider punctuation directly attached to the words as part of the word itself. Example: Input: \\"Hello, World!\\" Output: \\",olleH !dlroW\\"","solution":"def reverse_words(input_string): Takes an input string consisting of words separated by spaces and returns a new string where each word in the input string is replaced by its reverse. words = input_string.split(' ') reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Write a function that takes a string representing a mathematical expression in Reverse Polish Notation (RPN) and evaluates the result. The function should support the four basic arithmetic operations: addition, subtraction, multiplication, and division. Assume the input is always a valid RPN expression. # Input - A string \`expression\` containing a space-separated sequence of tokens, where each token is either an integer or one of the four operators: \`+\`, \`-\`, \`*\`, \`/\`. # Output - An integer representing the result of evaluating the expression. # Example \`\`\`python evaluate_rpn(\\"3 4 + 2 * 7 /\\") \`\`\` Output: \`\`\` 2 \`\`\` \`\`\`python evaluate_rpn(\\"5 1 2 + 4 * + 3 -\\") \`\`\` Output: \`\`\` 14 \`\`\` # Explanation In the first example, the RPN expression \\"3 4 + 2 * 7 /\\" is equivalent to the infix expression \\"((3 + 4) * 2) / 7\\", which evaluates to 2. In the second example, the RPN expression \\"5 1 2 + 4 * + 3 -\\" is equivalent to the infix expression \\"5 + ((1 + 2) * 4) - 3\\", which evaluates to 14.","solution":"def evaluate_rpn(expression): Evaluates a given Reverse Polish Notation (RPN) expression and returns the result. tokens = expression.split() stack = [] for token in tokens: if token.isdigit() or (token.startswith('-') and token[1:].isdigit()): stack.append(int(token)) else: b = stack.pop() a = stack.pop() if token == '+': stack.append(a + b) elif token == '-': stack.append(a - b) elif token == '*': stack.append(a * b) elif token == '/': # Ensure integer division mimics Python 2's behavior of floor division for negative results stack.append(int(a / b)) return stack[0]"},{"question":"Write a function in Python that takes a list of strings and an integer k as input. The function should return a new list of strings where each string is truncated to the length k. If k is greater than the length of any string, leave it unchanged. Use list comprehensions to achieve this task.","solution":"def truncate_strings(strings, k): Truncates each string in the input list to the length k. If k is greater than the length of any string, the string is left unchanged. :param strings: List of strings to be truncated :param k: Maximum length for each string :return: List of truncated strings return [s[:k] if len(s) > k else s for s in strings]"},{"question":"Design a function that takes a list of integers and returns a new list containing only the prime numbers from the original list, in the same order. Additionally, optimize the function to handle large input sizes efficiently. Example: \`\`\` filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) -> [2, 3, 5, 7] filter_primes([15, 23, 31, 50, 37]) -> [23, 31, 37] filter_primes([1, 2, 3, 4, 9, 11, 13]) -> [2, 3, 11, 13] \`\`\`","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Returns a list containing only the prime numbers from the original list. return [x for x in lst if is_prime(x)]"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the even numbers from the original list, each increased by 5. If the input list is empty, the function should return an empty list.","solution":"def filter_and_increase_even_numbers(numbers): Takes a list of integers and returns a new list containing only the even numbers from the original list, each increased by 5. return [num + 5 for num in numbers if num % 2 == 0]"},{"question":"You have a collection of books where each book has a unique ID, title, author, year of publication, and genre. You want to implement a system that helps manage this collection efficiently. Your task is to write a program with the following functionalities: 1. Add a new book to the collection. 2. Remove a book from the collection by its unique ID. 3. Search for books by title, author, or year of publication. 4. Display the details of the entire book collection sorted by year of publication in ascending order. Write a program that provides a menu-driven interface to perform these operations. The program should handle invalid inputs gracefully, ensuring that the collection remains consistent and no unintended operations are performed.","solution":"class Book: def __init__(self, book_id, title, author, year, genre): self.book_id = book_id self.title = title self.author = author self.year = year self.genre = genre class BookCollection: def __init__(self): self.books = {} def add_book(self, book): if book.book_id in self.books: raise ValueError(\\"Book ID already exists.\\") self.books[book.book_id] = book def remove_book(self, book_id): if book_id not in self.books: raise ValueError(\\"Book ID does not exist.\\") del self.books[book_id] def search_books(self, **kwargs): result = [] for book in self.books.values(): match = True for key, value in kwargs.items(): if getattr(book, key) != value: match = False break if match: result.append(book) return result def display_books(self): sorted_books = sorted(self.books.values(), key=lambda x: x.year) return sorted_books"},{"question":"Can you describe what an \\"array\\" is in the context of programming and how it differs from other data structures? Additionally, write a program that demonstrates the use of an array to store a series of integers and find the maximum and minimum values in that array. Further, discuss any potential optimizations for performing these operations in terms of time complexity.","solution":"def find_max(arr): Returns the maximum value in the array. if not arr: raise ValueError(\\"Array is empty\\") max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val def find_min(arr): Returns the minimum value in the array. if not arr: raise ValueError(\\"Array is empty\\") min_val = arr[0] for num in arr: if num < min_val: min_val = num return min_val # Example usage: # arr = [3, 5, 1, 2, 4] # print(\\"Max:\\", find_max(arr)) # print(\\"Min:\\", find_min(arr))"},{"question":"Develop a Python function that takes a list of integers as input and returns the length of the longest contiguous subarray with an equal number of even and odd numbers. The function should efficiently handle edge cases such as empty lists or lists with no even or no odd numbers. Test the function with multiple scenarios to ensure its correctness.","solution":"def longest_subarray_equal_even_odd(nums): Returns the length of the longest contiguous subarray with an equal number of even and odd numbers. count_dict = {0: -1} even_odd_diff = 0 max_length = 0 for index, num in enumerate(nums): if num % 2 == 0: even_odd_diff += 1 else: even_odd_diff -= 1 if even_odd_diff in count_dict: max_length = max(max_length, index - count_dict[even_odd_diff]) else: count_dict[even_odd_diff] = index return max_length"},{"question":"Write a function that takes a string representing a mathematical expression and returns the result of evaluating that expression. The expressions are limited to integer numbers, addition (+), subtraction (-), multiplication (*), and division (/), following standard operator precedence rules. Your function should handle whitespace appropriately and raise an error if the given expression is invalid. Example Input: \\"3 + 2 * 2\\" \\" 3/2 \\" \\" 3 + 5 / 2 \\" Example Output: 7 1 5","solution":"def evaluate_expression(expression): Evaluates the given mathematical expression and returns the result. The expression can contain integer numbers, +, -, *, and / operators, and whitespace will be handled appropriately. try: # Using eval to directly evaluate the expression return int(eval(expression)) except (SyntaxError, NameError, ZeroDivisionError): raise ValueError(\\"Invalid input expression\\") # Example usage: # print(evaluate_expression(\\"3 + 2 * 2\\")) # Should output 7 # print(evaluate_expression(\\" 3/2 \\")) # Should output 1 # print(evaluate_expression(\\" 3 + 5 / 2 \\"))# Should output 5"},{"question":"Design the following method: def find_equilibrium_index(arr): ''' Create a function that returns the equilibrium index of an array. The equilibrium index is defined as an index such that the sum of elements at lower indices is equal to the sum of elements at higher indices. If no such index exists, return -1. If there are multiple equilibrium indices, return the first one. Example: find_equilibrium_index([1, 3, 5, 2, 2]) ➞ 2 find_equilibrium_index([1, 2, 3, 4, 5]) ➞ -1 find_equilibrium_index([2, 4, 2]) ➞ 1 ''' total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1","solution":"def find_equilibrium_index(arr): ''' Create a function that returns the equilibrium index of an array. The equilibrium index is defined as an index such that the sum of elements at lower indices is equal to the sum of elements at higher indices. If no such index exists, return -1. If there are multiple equilibrium indices, return the first one. Example: find_equilibrium_index([1, 3, 5, 2, 2]) ➞ 2 find_equilibrium_index([1, 2, 3, 4, 5]) ➞ -1 find_equilibrium_index([2, 4, 2]) ➞ 1 ''' total_sum = sum(arr) left_sum = 0 for i, num in enumerate(arr): total_sum -= num if left_sum == total_sum: return i left_sum += num return -1"},{"question":"Write a function that takes an array of positive integers and returns the smallest positive integer that is not the sum of a subset of the given array. For example, given the array [1, 2, 3, 10], the smallest positive integer that cannot be formed is 7. Function Signature: \`\`\`python def find_smallest_non_sum(arr: List[int]) -> int: pass \`\`\` **Example:** \`\`\`python assert find_smallest_non_sum([1, 2, 3, 10]) == 7 assert find_smallest_non_sum([1, 1, 1, 1]) == 5 assert find_smallest_non_sum([1, 2, 2, 5]) == 11 \`\`\`","solution":"from typing import List def find_smallest_non_sum(arr: List[int]) -> int: Returns the smallest positive integer that is not the sum of a subset of the given array. arr.sort() smallest_non_sum = 1 for num in arr: if num > smallest_non_sum: break smallest_non_sum += num return smallest_non_sum"},{"question":"Develop a Python program that reads an input file containing lines of text, then identifies and counts the occurrence of each unique word (case-insensitive) in the entire file. The program should subsequently output a list of words and their corresponding counts in descending order of frequency. Ensure your solution can handle large files efficiently and include error handling to manage file-related issues. Be sure to include appropriate comments and documentation within the code to explain the key steps and logic used.","solution":"import collections import re def count_words(filepath): Reads a file and counts the occurrence of each unique word in a case-insensitive manner. Parameters: filepath (str): The path to the input file. Returns: list of tuples: A list of tuples where each tuple contains a word and its corresponding count, sorted in descending order by count. try: with open(filepath, 'r', encoding='utf-8') as file: text = file.read().lower() words = re.findall(r'bw+b', text) word_counts = collections.Counter(words) sorted_word_counts = word_counts.most_common() return sorted_word_counts except FileNotFoundError: print(f\\"Error: The file at '{filepath}' was not found.\\") except IOError: print(f\\"Error: Cannot read the file at '{filepath}'.\\") # Example usage # result = count_words('path_to_file.txt') # for word, count in result: # print(f\\"{word}: {count}\\")"},{"question":"Develop a full-stack web application utilizing the Django framework for the backend and React.js for the frontend. The application should feature a user authentication system, allowing users to register, log in, and log out. Create a PostgreSQL database to store user information and use Django REST Framework to build the necessary API endpoints. Ensure that the frontend can seamlessly interact with these endpoints to provide a smooth user experience. Address potential challenges in handling asynchronous requests and managing state across different components, and consider strategies to secure the application against common web vulnerabilities such as CSRF and SQL Injection.","solution":"def register_user(data): Mock function to simulate user registration. username = data.get('username') email = data.get('email') password = data.get('password') if username and email and password: # Simulate user creation return {'message': 'User created successfully!'}, 201 else: return {'error': 'Missing required fields'}, 400"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a new list consisting of all integers from the original list that are divisible by the target integer. If no integers in the list are divisible by the target integer, return an empty list. For example, given the list [10, 15, 20, 25, 30] and the target integer 5, the function should return [10, 15, 20, 25, 30].","solution":"def find_divisibles(numbers, target): Returns a list of integers from the original list that are divisible by the target integer. Parameters: numbers (list): A list of integers. target (int): The target integer. Returns: list: A list of integers divisible by the target integer. if target == 0: raise ValueError(\\"Target integer cannot be zero.\\") return [num for num in numbers if num % target == 0]"},{"question":"Create a function that determines if a string is a subsequence of another string: def is_subsequence(s: str, t: str) -> bool: Check if string \`s\` is a subsequence of string \`t\`. A subsequence means all characters of \`s\` appear in \`t\` in the same order, but not necessarily consecutively. >>> is_subsequence(\\"abc\\", \\"ahbgdc\\") True >>> is_subsequence(\\"axc\\", \\"ahbgdc\\") False >>> is_subsequence(\\"\\", \\"ahbgdc\\") True >>> is_subsequence(\\"ahbgdc\\", \\"ahbgdc\\") True >>> is_subsequence(\\"abcdef\\", \\"abc\\") False # Your code here","solution":"def is_subsequence(s: str, t: str) -> bool: Check if string \`s\` is a subsequence of string \`t\`. A subsequence means all characters of \`s\` appear in \`t\` in the same order, but not necessarily consecutively. :param s: The string to check if it is a subsequence. :param t: The string to check against. :return: True if \`s\` is a subsequence of \`t\`, otherwise False. t_iter = iter(t) return all(char in t_iter for char in s)"},{"question":"**Q: Writing a Python function that takes a string of mixed characters (capital letters, lowercase letters, numbers, and special characters) and returns the longest contiguous substring that contains only digits. If there are multiple substrings of maximum length, return the first one encountered. Ensure that your function handles edge cases such as an empty string or a string with no digits. Provide comprehensive unit tests for your function.** String name: s Function name: longest_digit_substring","solution":"def longest_digit_substring(s): Returns the longest contiguous substring that contains only digits. If there are multiple substrings of maximum length, return the first one encountered. max_length = 0 current_length = 0 start_index = 0 max_start_index = -1 for i, char in enumerate(s): if char.isdigit(): current_length += 1 if current_length > max_length: max_length = current_length max_start_index = start_index else: current_length = 0 start_index = i + 1 if max_start_index == -1: return \\"\\" return s[max_start_index:max_start_index + max_length]"},{"question":"Implement Next Permutation Given an array of integers nums, find the next permutation of nums in numerical order. The next permutation is the next increment of the current array elements when they are treated as a number sequence. If there is no succeeding permutation (i.e., the array is sorted in descending order), rearrange it to the lowest possible order (i.e., sorted in ascending order). Example 1: Input: nums = [1,2,3] Output: [1,3,2] Explanation: The next permutation of [1,2,3] in numerical order is [1,3,2]. Example 2: Input: nums = [3,2,1] Output: [1,2,3] Explanation: Since [3,2,1] is already the highest permutation, rearrange it to [1,2,3]. Example 3: Input: nums = [1,1,5] Output: [1,5,1] Explanation: The next permutation of [1,1,5] is [1,5,1]. Constraints: - 1 <= nums.length <= 100 - 0 <= nums[i] <= 100 Write a function that modifies nums in-place to achieve the next permutation.","solution":"def next_permutation(nums): Modifies the list nums in-place to the next permutation in numerical order. If the list is sorted in descending order, rearrange it to ascending order. # Find the first descending element from the end i = len(nums) - 2 while i >= 0 and nums[i] >= nums[i + 1]: i -= 1 if i >= 0: # Find the element just larger than nums[i] j = len(nums) - 1 while nums[j] <= nums[i]: j -= 1 # Swap elements at indices i and j nums[i], nums[j] = nums[j], nums[i] # Reverse the elements from index i+1 to the end of the list nums[i + 1:] = reversed(nums[i + 1:])"},{"question":"Create a function that takes an integer \`n\` (1 ≤ n ≤ 10^9) as input and returns a string representing the number with commas as thousands separators. For example, given the input \`1234567890\`, the function should return the string \`1,234,567,890\`. Ensure that the function handles large numbers efficiently and correctly formats the output based on standard comma placement in large numbers.","solution":"def format_number_with_commas(n): Returns the string of the integer n with commas as thousands separators. return f\\"{n:,}\\""},{"question":"A list of integers is considered special if the sum of each pair of consecutive integers in the list is odd. Write a function \`is_special(lst)\` that takes in a list of integers and returns \`True\` if the list is special, and \`False\` otherwise. Additionally, write a function \`make_special(size)\` that generates and returns a special list of the given size. If it is impossible to create such a list, return an empty list. Here's an example of how your function should work: \`\`\`python def is_special(lst): # Your code here def make_special(size): # Your code here # Example usage: print(is_special([1, 2, 3])) # Output: True print(is_special([2, 2, 4])) # Output: False print(make_special(5)) # Output: A special list of size 5 or an empty list if impossible print(make_special(0)) # Output: [] \`\`\`","solution":"def is_special(lst): Returns True if the list is special, otherwise False. A list is special if the sum of each pair of consecutive integers is odd. for i in range(len(lst) - 1): if (lst[i] + lst[i + 1]) % 2 == 0: return False return True def make_special(size): Generates and returns a special list of the given size. If it is impossible to create such a list, returns an empty list. if size == 0: return [] if size == 1: return [1] # single element can be any odd number # For a list to be special, we need alternating odd/even numbers. # An even number count + 1 of an odd number count makes the size ==> size must be <= 2 special_list = [] for i in range(size): if i % 2 == 0: special_list.append(1) # Odd number else: special_list.append(2) # Even number return special_list"},{"question":"You are working on a Python project that needs to handle large CSV files and process them efficiently. The required task is to read a CSV file, compute the average of a particular column, and then write the results to a new CSV file. Given: - Input CSV file with multiple columns and potentially large number of rows. - The column to average is called \`value\`. Task: 1. Write a function \`compute_average(input_file, output_file)\` that: - Reads the \`value\` column from the \`input_file\`. - Computes the average value of the \`value\` column. - Writes the result to the \`output_file\` with the format: \`\`\` column,average value,<computed_average> \`\`\` Example: If \`input.csv\` contains: \`\`\` id,value 1,10 2,20 3,30 \`\`\` Calling \`compute_average(\\"input.csv\\", \\"output.csv\\")\` should create \`output.csv\` with: \`\`\` column,average value,20 \`\`\` Considerations: - Handle the possibility of very large files. - Ensure your code is efficient and readable. You are allowed to use the \`csv\` module from Python's standard library.","solution":"import csv def compute_average(input_file, output_file): Reads the 'value' column from the input CSV file, computes the average, and writes the result to the output CSV file. total = 0 count = 0 with open(input_file, mode='r', newline='') as infile: reader = csv.DictReader(infile) for row in reader: total += float(row['value']) count += 1 average = total / count if count != 0 else 0 with open(output_file, mode='w', newline='') as outfile: writer = csv.writer(outfile) writer.writerow(['column', 'average']) writer.writerow(['value', average])"},{"question":"Design a function that, given a list of integers, returns a new list containing only the elements that appear more than once in the original list. Ensure that the returned list maintains the order of the first occurrence of the duplicates in the original list. **Example:** Input: \`[4, 5, 6, 4, 7, 8, 6, 6, 9, 10, 4]\` Output: \`[4, 6]\` Input: \`[1, 2, 3, 4, 5]\` Output: \`[]\`","solution":"def find_duplicates(nums): Given a list of integers, returns a new list containing only the elements that appear more than once in the original list, maintaining the order of their first appearance. seen = set() duplicates = set() result = [] for num in nums: if num in seen: duplicates.add(num) else: seen.add(num) for num in nums: if num in duplicates and num not in result: result.append(num) return result"},{"question":"Given an array of integers and a target sum, find the pair of integers in the array that add up to the target sum. Return the pair as a tuple (a, b) such that a <= b. If multiple pairs exist, return the pair with the smallest first number, and if multiple pairs have the same first number, return the one with the smallest second number. If no such pair exists, return an empty tuple. integers = [2, 7, 11, 15, 1, 8], target_sum = 9","solution":"def find_pair_with_sum(integers, target_sum): Finds the pair of integers in the array that add up to the target sum. Returns the pair as a tuple (a, b) such that a <= b. If no such pair exists, returns an empty tuple. nums = {} result = [] # Traverse the list for num in integers: complement = target_sum - num # Check if the complement exists in the dictionary if complement in nums: result.append((min(num, complement), max(num, complement))) # Add the number to the dictionary nums[num] = True # Sort the result based on the conditions mentioned if result: result.sort() return result[0] else: return ()"},{"question":"A robot is programmed to navigate a grid and collect gems scattered across it. The grid is represented as a 2D list of integers where each element indicates the number of gems at that cell. The robot starts its journey from the top-left corner of the grid (0, 0) and aims to reach the bottom-right corner (m-1, n-1). The robot has specific movement constraints: 1. It can only move right or down. 2. At each cell, the robot collects all the gems present. Write a function that determines the maximum number of gems the robot can collect on its way to the bottom-right corner. # Input - A 2D list of integers \`grid\` where \`grid[i][j]\` represents the number of gems at cell \`(i, j)\`. - The dimensions of the grid are \`m x n\` with 1 ≤ \`m, n\` ≤ 100. # Output - An integer representing the maximum number of gems that can be collected. # Function Signature \`\`\`python def max_gems_collected(grid: List[List[int]]) -> int: \`\`\` # Example \`\`\`python grid = [ [1, 3, 1], [2, 0, 0], [4, 2, 1] ] print(max_gems_collected(grid)) # Output: 10 \`\`\` # Explanation The robot can collect a maximum of 10 gems by following the path: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) collecting gems: 1 + 3 + 0 + 2 + 1 = 7 total gems.","solution":"from typing import List def max_gems_collected(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Create a 2D dp array with the same dimensions as grid dp = [[0] * n for _ in range(m)] # Initialize the start point dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the result return dp[m-1][n-1]"},{"question":"Create a Python program that simulates an online shopping cart. Design a \`ShoppingCart\` class that includes methods for adding items, removing items, and displaying the current list of items in the cart along with their quantities and prices. Implement functionality to calculate the total cost, apply discounts, and handle sales tax. Ensure that the cart maintains its state between different modifications and includes appropriate error handling for scenarios such as attempting to remove an item that isn't in the cart or applying an invalid discount code.","solution":"class ShoppingCart: def __init__(self): self.items = {} self.total_cost = 0.0 self.discount = 0.0 self.sales_tax = 0.0 def add_item(self, name, quantity, price): if name in self.items: self.items[name]['quantity'] += quantity self.items[name]['price'] = price else: self.items[name] = {'quantity': quantity, 'price': price} self._update_total() def remove_item(self, name, quantity=None): if name not in self.items: raise ValueError(f\\"Item {name} not found in the cart.\\") if quantity is None or self.items[name]['quantity'] <= quantity: del self.items[name] else: self.items[name]['quantity'] -= quantity self._update_total() def display_cart(self): return self.items def calculate_total(self): total = self.total_cost if self.discount > 0: total -= (total * self.discount / 100) if self.sales_tax > 0: total += (total * self.sales_tax / 100) return total def apply_discount(self, discount): if not 0 <= discount <= 100: raise ValueError(\\"Invalid discount value. Must be between 0 and 100.\\") self.discount = discount def set_sales_tax(self, tax): if not 0 <= tax <= 100: raise ValueError(\\"Invalid tax value. Must be between 0 and 100.\\") self.sales_tax = tax def _update_total(self): self.total_cost = sum(v['quantity'] * v['price'] for v in self.items.values())"},{"question":"Given an unsorted array of integers, implement an in-place algorithm that moves all zeroes to the end of the array while maintaining the relative order of the non-zero elements. Analyze the time complexity and space complexity of your approach.","solution":"def move_zeroes(nums): Moves all zeroes in an unsorted array of integers to the end while maintaining the relative order of the non-zero elements. Args: nums (List[int]): The list of integers to be rearranged. Returns: None: The function modifies the list in-place. last_non_zero_found_at = 0 for current in range(len(nums)): if nums[current] != 0: nums[last_non_zero_found_at], nums[current] = nums[current], nums[last_non_zero_found_at] last_non_zero_found_at += 1 return nums"},{"question":"Write a function that accepts a list of integers and returns the list sorted in ascending order. However, if the original list contains any duplicate numbers, the function should return the string \\"Duplicate numbers found\\" instead of the sorted list. Ensure your function handles edge cases such as empty lists and single-element lists appropriately.","solution":"def sort_list_or_report_duplicates(lst): Accepts a list of integers and returns the list sorted in ascending order. If the list contains duplicate numbers, returns \\"Duplicate numbers found\\". :param lst: List of integers :return: Sorted list or string indicating duplicates if len(lst) != len(set(lst)): return \\"Duplicate numbers found\\" return sorted(lst)"},{"question":"Write a Python function that simulates a simplified version of the game of life, as originally conceived by mathematician John Conway. The game runs on a 2D grid of cells, where each cell can either be alive or dead. At each step in time (generation), the following transitions occur: - Any live cell with fewer than two live neighbors dies, as if by underpopulation. - Any live cell with two or three live neighbors lives on to the next generation. - Any live cell with more than three live neighbors dies, as if by overpopulation. - Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. The function should take an initial configuration of live and dead cells as input and compute the configuration of cells for a given number of generations. Input: - grid: A list of lists, where each sub-list represents a row in the grid and contains 0s and 1s indicating dead and alive cells respectively. - generations: An integer representing the number of generations to simulate. Output: - A list of lists representing the grid's configuration after the given number of generations. Example function signature: \`\`\`python def game_of_life(grid: List[List[int]], generations: int) -> List[List[int]]: pass \`\`\` Example Usage: \`\`\`python initial_grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] generations = 1 result_grid = game_of_life(initial_grid, generations) print(result_grid) # Output should be: # [ # [0, 0, 0], # [1, 0, 1], # [0, 1, 1], # [0, 1, 0] # ] \`\`\`","solution":"def game_of_life(grid, generations): rows = len(grid) cols = len(grid[0]) def get_live_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_neighbors = 0 for dr, dc in directions: if 0 <= r + dr < rows and 0 <= c + dc < cols: live_neighbors += grid[r + dr][c + dc] return live_neighbors def next_generation(): new_grid = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = get_live_neighbors(r, c) if grid[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[r][c] = 0 else: new_grid[r][c] = 1 else: if live_neighbors == 3: new_grid[r][c] = 1 return new_grid for _ in range(generations): grid = next_generation() return grid"},{"question":"Write a Python function to compute the nth Fibonacci number using both an iterative and a recursive approach. Ensure the recursive solution includes memoization to avoid excessive recomputation. Handle edge cases where the input might not be a positive integer by raising an appropriate exception. Additionally, compare the time complexity and space complexity of both the iterative and recursive solutions, and document the differences along with your code.","solution":"def fib_iterative(n): Compute the nth Fibonacci number using an iterative approach. if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b def fib_recursive_memo(n, memo=None): Compute the nth Fibonacci number using a recursive approach with memoization. if memo is None: memo = {} if n <= 0: raise ValueError(\\"Input must be a positive integer.\\") elif n == 1: return 0 elif n == 2: return 1 if n in memo: return memo[n] memo[n] = fib_recursive_memo(n-1, memo) + fib_recursive_memo(n-2, memo) return memo[n] # Time and Space Complexity Analysis Iterative Approach: Time Complexity: O(n) Space Complexity: O(1) Recursive Approach with Memoization: Time Complexity: O(n) Space Complexity: O(n) due to the memoization dictionary"},{"question":"<p> Given a string of lowercase English letters, you need to find the length of the shortest substring containing at least one of each unique letter present in the given string.<br> For example, given the string \\"abac\\", the shortest substring containing both 'a' and 'b' is \\"abac\\", so the answer is 4. </p> <p> Write a function <code>shortest_unique_substring_length(s: str) -> int</code> that takes a string <code>s</code> and returns an integer representing the length of the shortest substring that contains all unique characters found in <code>s</code>.<br> You may assume that the string has at least one character and is composed only of lowercase English letters. </p> <p> <strong>Examples:</strong><br> <code>shortest_unique_substring_length(\\"aabcbcdbca\\")</code> should return <code>4</code> because \\"dbca\\" is the shortest substring containing 'a', 'b', 'c', and 'd'.<br> <code>shortest_unique_substring_length(\\"aaab\\")</code> should return <code>2</code> because \\"ab\\" is the shortest substring containing 'a' and 'b'.<br> <code>shortest_unique_substring_length(\\"aba\\")</code> should return <code>2</code> because \\"ab\\" or \\"ba\\" are the shortest substrings containing 'a' and 'b'. </p>","solution":"def shortest_unique_substring_length(s: str) -> int: Returns the length of the shortest substring containing at least one of each unique letter present in the given string s. unique_chars = set(s) char_count = {} min_length = len(s) start = 0 for end, char in enumerate(s): # Add current char to the count dictionary char_count[char] = char_count.get(char, 0) + 1 # Shrink the window from the start when all unique characters are included while len(char_count) == len(unique_chars): min_length = min(min_length, end - start + 1) # Remove the start character from the count dictionary char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 return min_length"},{"question":"Design a multi-threaded chat server in Python using the socket library. The server should manage multiple client connections simultaneously and allow them to exchange messages. Clients should be able to join and leave the chat dynamically, with the server handling these events appropriately. The server must ensure that: 1. Each message sent by a client is broadcasted to all other connected clients. 2. Proper handling of client disconnections is in place to prevent server crashes. 3. The server should support at least 10 concurrent clients. Your implementation should include: - Creating the server to accept and manage client connections. - Handling client messages using threading so the server can manage multiple clients at the same time. - Detecting and managing client disconnections gracefully. - A simple client program to test the server functionality. Detailed guidance: 1. Set up the socket using the \`socket\` library for both the server and clients. 2. Implement multi-threading to handle multiple clients concurrently using the \`threading\` module. 3. Develop a protocol for client-server communication to broadcast messages and manage client states. The solution should emphasize robust handling of edge cases such as: - Sudden client disconnections. - Ensuring messages are properly received by all clients. - Flushing input/output buffers to maintain message order and integrity. Exceptional implementation may also add features like: - User authentication. - Private messaging between clients. - Logging server activities and client messages.","solution":"import socket import threading # Server code def handle_client(client_socket, clients): Handles communication with a client. addr = client_socket.getpeername() print(f\\"[NEW CONNECTION] {addr} connected.\\") while True: try: message = client_socket.recv(1024).decode('utf-8') if not message: break broadcast(message, client_socket, clients) except: break # Clean up client connection and notify other clients with clients_lock: clients.remove(client_socket) client_socket.close() broadcast(f\\"[DISCONNECTION] {addr} disconnected.\\", None, clients) print(f\\"[DISCONNECTION] {addr} disconnected.\\") def broadcast(message, client_socket, clients): Broadcasts a message to all clients except the sender. with clients_lock: for client in clients: if client != client_socket: try: client.send(message.encode('utf-8')) except: client.close() clients.remove(client) def server_program(): Sets up the server and starts accepting client connections. server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) server_socket.bind(('0.0.0.0', 12345)) server_socket.listen(10) print(\\"[SERVER STARTED] Waiting for clients to connect...\\") while True: client_socket, addr = server_socket.accept() with clients_lock: clients.add(client_socket) threading.Thread(target=handle_client, args=(client_socket, clients)).start() if __name__ == '__main__': clients = set() clients_lock = threading.Lock() server_program() # Simple client code for testing (run this in separate terminal instances) def client_program(): Connects to the server, and sends and receives messages. client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('127.0.0.1', 12345)) def receive_messages(): while True: try: message = client_socket.recv(1024).decode('utf-8') if not message: break print(message) except: break client_socket.close() recv_thread = threading.Thread(target=receive_messages) recv_thread.start() try: while True: message = input() if message.lower() == 'exit': break client_socket.send(message.encode('utf-8')) except: pass finally: client_socket.close() if __name__ == '__main__': client_program()"},{"question":"Write a function that receives a string containing a mathematical expression involving addition (+), subtraction (−), multiplication (×), and division (÷). The function should evaluate the expression and return the result as a float. The function should also handle error checking for invalid characters, division by zero, and mismatched parentheses. For example, given the input string \\"3 + 5 × (2 − 8)\\", the program should return -13.0. Ensure that the function adheres to the standard order of mathematical operations and handles whitespace correctly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression involving addition, subtraction, multiplication, and division, while considering the order of operations. try: # Replace the custom multiply and divide symbols with Python's operators expression = expression.replace('×', '*').replace('÷', '/') # Evaluate the expression safely using eval result = eval(expression) return float(result) except (SyntaxError, NameError, ZeroDivisionError): raise ValueError(\\"Invalid mathematical expression\\")"},{"question":"Write a Python function \`find_substring_anagrams(s: str, p: str) -> List[int]\` that finds all the start indices of \`p\`'s anagrams in \`s\`. The function should return a list of starting indices of the anagrams. An anagram is defined as a rearrangement of characters, so you should identify all possible permutations of \`p\` within \`s\`. # Function Signature \`\`\`python def find_substring_anagrams(s: str, p: str) -> List[int]: pass \`\`\` # Input - \`s\` (1 <= len(s) <= 10^4): A string consisting of lowercase alphabets. - \`p\` (1 <= len(p) <= 10^3): A string consisting of lowercase alphabets. # Output - A list of integers representing the starting indices of the substrings in \`s\` that are anagrams of \`p\`. # Example \`find_substring_anagrams(\\"cbaebabacd\\", \\"abc\\")\` should return \`[0, 6]\` because the substrings starting at index \`0\` (\\"cba\\") and at index \`6\` (\\"bac\\") are anagrams of \`abc\`. # Constraints - The function should be optimized for a larger input size. - Use efficient data structures to handle the substring search within the string. # Solution Outline 1. Use a sliding window approach to maintain a window of size equal to \`len(p)\` while traversing through \`s\`. 2. Use a hash map or a fixed-size array (since we're only dealing with lowercase alphabets) to count character frequencies. 3. Compare the frequency maps of the current window in \`s\` with the frequency map of \`p\`. 4. If they match, record the starting index of the window.","solution":"from typing import List def find_substring_anagrams(s: str, p: str) -> List[int]: from collections import Counter len_s, len_p = len(s), len(p) # Special case where p is longer than s, no anagram is possible if len_p > len_s: return [] p_count = Counter(p) s_count = Counter(s[:len_p-1]) result_indices = [] for i in range(len_p-1, len_s): # add the new character to the current window s_count[s[i]] += 1 # Check if we have a valid anagram if s_count == p_count: result_indices.append(i - len_p + 1) # remove the first character of the current window for next iteration s_count[s[i - len_p + 1]] -= 1 if s_count[s[i - len_p + 1]] == 0: del s_count[s[i - len_p + 1]] return result_indices"},{"question":"Design a Python function that takes a string as input and returns a new string where each character in the original string is doubled. For example, the string \\"hello\\" should be transformed into \\"hheelllloo\\". The function should ignore spaces and special characters, only doubling the alphanumeric characters.","solution":"def double_alphanumeric_characters(s): Returns a new string where each alphanumeric character in the input string s is doubled. Non-alphanumeric characters are preserved as they are. return ''.join([ch * 2 if ch.isalnum() else ch for ch in s])"},{"question":"Write a function that receives an n x n matrix consisting of positive integers and returns the sum of the diagonal elements of the matrix along with the count of prime numbers in the matrix. The function should handle matrices of various sizes efficiently. Ensure that the solution exhibits good time complexity suitable for large matrices.","solution":"import math def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_diagonal_and_count_primes(matrix): Returns the sum of the diagonal elements of the matrix and the count of prime numbers in the matrix. n = len(matrix) diagonal_sum = 0 prime_count = 0 for i in range(n): diagonal_sum += matrix[i][i] for j in range(n): if is_prime(matrix[i][j]): prime_count += 1 return diagonal_sum, prime_count"},{"question":"Write a function named \`is_prime\` that determines if a given positive integer n is a prime number. The function should return True if n is prime and False otherwise. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Additionally, provide code for testing your function on a range of values (e.g., 1 through 20), and comment your code to explain each step of the implementation. \`\`\`python def is_prime(n): # Edge case: 1 is not a prime number if n <= 1: return False # Check for factors up to the square root of n for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True # Testing the is_prime function for num in range(1, 21): print(f\\"{num} is prime: {is_prime(num)}\\") \`\`\` In your comments, explain the purpose of checking up to the square root of n, and why 1 is not considered a prime number.","solution":"def is_prime(n): Checks if a given positive integer n is a prime number. Args: n (int): The integer to check for primality. Returns: bool: True if n is a prime number, False otherwise. # Edge case: 1 is not a prime number if n <= 1: return False # Check for factors up to the square root of n # If n is divisible by any number other than 1 and itself, it's not a prime. for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"Write a Python function that takes in a string containing a Roman numeral and converts it to its integer value. The function should handle Roman numerals up to 3999 and should account for subtractive combinations (e.g., IV for 4). Additionally, provide a method to validate whether a given string is a valid Roman numeral. If the input is invalid, the function should raise an appropriate exception with a clear error message. Consider using regular expressions for validation and include several test cases to demonstrate the correctness of your implementation.","solution":"import re class InvalidRomanNumeralException(Exception): pass def validate_roman_numeral(s): Validates whether a given string is a valid Roman numeral. pattern = re.compile( \\"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})\\" ) return pattern.match(s) is not None def roman_to_int(s): Converts a valid Roman numeral string to its integer value. Raises an InvalidRomanNumeralException for invalid inputs. if not validate_roman_numeral(s): raise InvalidRomanNumeralException(f\\"Invalid Roman numeral: {s}\\") roman_to_integer = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } integer_value = 0 n = len(s) for i in range(n): if i + 1 < n and roman_to_integer[s[i]] < roman_to_integer[s[i + 1]]: integer_value -= roman_to_integer[s[i]] else: integer_value += roman_to_integer[s[i]] return integer_value"},{"question":"Can you implement a function that takes a matrix of integers and returns the sum of the elements on the border of the matrix? The borders include the first and last rows, as well as the first and last columns of the matrix. For instance, given the matrix: \`\`\` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] \`\`\` the border elements are 1, 2, 3, 4, 6, 7, 8, 9, and the function should return the sum of these elements, which is 40. Consider the following incomplete code for reference: \`\`\`python def sum_border(matrix): rows = len(matrix) cols = len(matrix[0]) # Your code here \`\`\` This code does not yet compute the sum of the border elements. Can you complete and optimize it?","solution":"def sum_border(matrix): Returns the sum of the elements on the border of the matrix. if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) border_sum = 0 # handle single row or single column case if rows == 1: return sum(matrix[0]) if cols == 1: return sum(row[0] for row in matrix) # Sum the first and last rows border_sum += sum(matrix[0]) border_sum += sum(matrix[rows - 1]) # Sum the first and last columns (excluding already added corners) for r in range(1, rows - 1): border_sum += matrix[r][0] + matrix[r][cols - 1] return border_sum"},{"question":"Write a function that takes an array of integers and a target value as input and returns the indices of the two numbers that add up to the target value. The function should assume that each input would have exactly one solution and may not reuse the same element twice. Ensure the solution has a time complexity of O(n).","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target value. Args: nums: List[int] - List of integers. target: int - The target value to find the sum. Returns: List[int] - Indices of the two numbers. num_to_index = {} for index, number in enumerate(nums): complement = target - number if complement in num_to_index: return [num_to_index[complement], index] num_to_index[number] = index"},{"question":"Design a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Additionally, if the list contains any negative numbers, the function should raise a custom exception, \\"NegativeNumberError\\". Provide the definition of the exception and write a program in a language of your choice to demonstrate the functionality of your designed function, including exception handling. Analyze the time and space complexity of your implementation.","solution":"class NegativeNumberError(Exception): Custom exception raised when a list contains negative numbers. pass def is_prime(number): Helper function to check if a number is prime. if number < 2: return False for i in range(2, int(number ** 0.5) + 1): if number % i == 0: return False return True def filter_primes(numbers): Returns a list of prime numbers from the given list. Raises NegativeNumberError if any negative number is present in the list. if any(n < 0 for n in numbers): raise NegativeNumberError(\\"The list contains negative numbers.\\") primes = [n for n in numbers if is_prime(n)] return primes"},{"question":"Write a Python function named \`find_anagrams\` that takes in two strings as input and returns a boolean indicating whether the two strings are anagrams of each other. An anagram is a rearrangement of letters to form another word. Your function should consider case-sensitivity (e.g., 'Listen' and 'Silent' should be considered non-anagrams). Additionally, write a main program that prompts the user to input two strings, calls the \`find_anagrams\` function with these inputs, and prints an appropriate message indicating whether the strings are anagrams. Include detailed comments explaining your code logic and any assumptions made. Provide a few examples demonstrating the expected output of your program.","solution":"def find_anagrams(str1, str2): Returns whether str1 and str2 are anagrams of each other. An anagram is a rearrangement of the letters of one word to form another word. This function is case-sensitive. # Convert both strings to lists of their characters list1 = list(str1) list2 = list(str2) # Sort the lists list1.sort() list2.sort() # Compare the sorted lists return list1 == list2 # Main program to prompt user for input and check for anagrams if __name__ == \\"__main__\\": str1 = input(\\"Enter the first string: \\") str2 = input(\\"Enter the second string: \\") if find_anagrams(str1, str2): print(f'\\"{str1}\\" and \\"{str2}\\" are anagrams.') else: print(f'\\"{str1}\\" and \\"{str2}\\" are not anagrams.')"},{"question":"Write a function in Python that takes an integer as input and returns True if the integer is a prime number, otherwise returns False. The input integer will be in the range of 1 to 1000000.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"Write a Python function that simulates a simple social network. Your function should create a class \`User\` with attributes \`name\` (string) and \`friends\` (list of \`User\` objects). Include methods to add and remove friends, as well as a method to return a list of friends' names. Additionally, implement a mechanism to avoid adding the same friend multiple times. Here is an example of how interactions with this class might look: \`\`\`python john = User(\\"John\\") doe = User(\\"Doe\\") jane = User(\\"Jane\\") john.add_friend(doe) john.add_friend(jane) print(john.get_friends_names()) # Output: ['Doe', 'Jane'] john.remove_friend(doe) print(john.get_friends_names()) # Output: ['Jane'] \`\`\` Ensure your code handles edge cases such as attempting to remove a friend who is not in the friends list.","solution":"class User: def __init__(self, name): self.name = name self.friends = [] def add_friend(self, friend): if friend not in self.friends: self.friends.append(friend) def remove_friend(self, friend): if friend in self.friends: self.friends.remove(friend) def get_friends_names(self): return [friend.name for friend in self.friends]"},{"question":"In the following Python code, there appears to be an issue related to the sorting logic. Analyze the code and correct any errors to ensure the list is sorted in ascending order. def sort_numbers(numbers): for i in range(len(numbers)): for j in range(1, len(numbers)): if numbers[j - 1] > numbers[j]: numbers[j - 1], numbers[j] = numbers[j], numbers[j - 1] return numbers unsorted_numbers = [34, 23, 12, 45, 9] sorted_numbers = sort_numbers(unsorted_numbers) print(f'Sorted list: {sorted_numbers}')","solution":"def sort_numbers(numbers): Sorts the list of numbers in ascending order using bubble sort algorithm. n = len(numbers) for i in range(n): for j in range(0, n - i - 1): if numbers[j] > numbers[j + 1]: numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j] return numbers unsorted_numbers = [34, 23, 12, 45, 9] sorted_numbers = sort_numbers(unsorted_numbers) print(f'Sorted list: {sorted_numbers}')"},{"question":"Create a function that generates all possible subsets of a given set of unique integers. Do not use the built-in combinations function from the itertools module. Each subset should be a list of numbers, and the function should return a list of lists, where each list is a subset. The order of subsets in the final list does not matter. Example: \`\`\`python def generate_subsets(nums): # Write your code here pass # Example usage: nums = [1, 2, 3] subsets = generate_subsets(nums) print(subsets) \`\`\` Expected output (order of subsets may vary): \`\`\` [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] \`\`\`","solution":"def generate_subsets(nums): Generates all possible subsets of a given set of unique integers. Args: nums (list of int): List of unique integers. Returns: list of lists: List of subsets, where each subset is a list of integers. def backtrack(start, path): # Append the current subset (path) to the result. result.append(path[:]) # Try adding the remaining elements to the current subset for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() # Backtrack result = [] backtrack(0, []) return result"},{"question":"Design a function that identifies the shortest subarray (contiguous elements) that needs to be sorted in ascending order such that when the identified subarray is sorted, the entire array becomes sorted in ascending order. If the array is already sorted, return an empty array. # Function Signature \`\`\`python def shortest_unsorted_subarray(arr) -> list: Identify the shortest subarray that needs to be sorted, ensuring the entire array is sorted in ascending order. Parameters: arr (list): A list of integers. Returns: list: A list representing the shortest unsorted subarray. If the array is already sorted, return an empty list. Examples: shortest_unsorted_subarray([2, 6, 4, 8, 10, 9, 15]) = [6, 4, 8, 10, 9] shortest_unsorted_subarray([1, 2, 3, 4, 5]) = [] shortest_unsorted_subarray([1, 3, 2, 2, 2]) = [3, 2, 2, 2] \`\`\` # Description: 1. Traverse the array to identify the first and last elements that are out of order relative to the overall sorted array. 2. The segment between these positions inclusively is the shortest subarray that, when sorted, results in the entire array being sorted. 3. If the array is already sorted, the function should return an empty subarray.","solution":"def shortest_unsorted_subarray(arr): Identify the shortest subarray that needs to be sorted, ensuring the entire array is sorted in ascending order. Parameters: arr (list): A list of integers. Returns: list: A list representing the shortest unsorted subarray. If the array is already sorted, return an empty list. n = len(arr) if n <= 1: return [] start, end = -1, -1 # Find the first element which is out of order from the beginning for i in range(n - 1): if arr[i] > arr[i + 1]: start = i break # If no such element is found, the array is already sorted if start == -1: return [] # Find the first element which is out of order from the end for i in range(n - 1, 0, -1): if arr[i] < arr[i - 1]: end = i break sub_max = max(arr[start:end+1]) sub_min = min(arr[start:end+1]) # Extend the start point to the left if needed while start > 0 and arr[start - 1] > sub_min: start -= 1 # Extend the end point to the right if needed while end < n - 1 and arr[end + 1] < sub_max: end += 1 return arr[start:end+1]"},{"question":"Refactor and optimize a recursive function: The provided Python function aims to recursively calculate the nth term in the Fibonacci sequence. However, it is currently inefficient for large values of n due to excessive redundant calculations. Refactor the function to optimize its performance using memoization or any other suitable technique to significantly reduce the computation time for large inputs. def fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) Hint: Fibonacci sequence is defined as: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1","solution":"def fibonacci(n, memo=None): if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: result = fibonacci(n-1, memo) + fibonacci(n-2, memo) memo[n] = result return result"},{"question":"Write a function to rotate an NxN matrix by 90 degrees clockwise. The function should take a 2D matrix as an input and return the new rotated matrix. Example Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Example Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ]","solution":"def rotate_matrix(matrix): Rotates an NxN matrix by 90 degrees clockwise. Parameters: matrix (list of list of int): The input 2D matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) return [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)]"},{"question":"Write a function that takes a list of integers and returns a dictionary with the count of each unique integer in the list. The function should be able to handle an empty list as input. The output dictionary should have the integers as keys and their respective counts as values. Example Input: [2, 3, 2, 3, 4, 2] Example Output: {2: 3, 3: 2, 4: 1}","solution":"def count_unique_integers(lst): Returns a dictionary with the count of each unique integer in the list. Args: lst (list): List of integers. Returns: dict: Dictionary with integers as keys and their counts as values. count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict"},{"question":"Design a function that takes a string as an input and returns a dictionary where the keys are the characters in the string, and the values are the number of times each character appears in the string. The function should ignore spaces and be case-insensitive. For example, given the input \\"Hello World\\", the function should return {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}. Assuming only basic ASCII letters are used. You are required to handle both upper-case and lower-case characters properly and combine their counts.","solution":"def character_count(string): Returns a dictionary with the count of each character in the string, ignoring spaces and case-insensitive. # Converting the string to lower case and removing spaces string = string.replace(\\" \\", \\"\\").lower() # Initializing an empty dictionary to hold the count of each character char_count = {} # Iterating over each character in the string for char in string: # If the character is already a key in the dictionary, increment its value by 1 if char in char_count: char_count[char] += 1 # Otherwise, add the character as a key to the dictionary and set its value to 1 else: char_count[char] = 1 return char_count"},{"question":"Implement a function in Python called \`matrix_multiplication\` that performs matrix multiplication on two given matrices. The function should accept two 2-dimensional lists (matrices) and return their product. # Specifications 1. Assume the input matrices are valid and adhere to the rules of matrix multiplication. You do not need to check for invalid inputs or dimensions mismatch. 2. Your function should handle matrices with positive, negative, and zero values. 3. The input matrices can have any dimensions as long as the number of columns in the first matrix matches the number of rows in the second matrix. 4. The output should be a 2-dimensional list (matrix) representing the product. # Constraints - The matrices can have up to 50 rows and 50 columns. - Elements of the matrices are integers and can range from -100 to 100. # Examples \`\`\`python def matrix_multiplication(matrix1, matrix2): # Your code goes here. # Example 1: matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ] assert matrix_multiplication(matrix1, matrix2) == [ [19, 22], [43, 50] ] # Example 2: matrix1 = [ [2, -1], [0, 1] ] matrix2 = [ [3, 4], [-2, 5] ] assert matrix_multiplication(matrix1, matrix2) == [ [8, 3], [-2, 5] ] \`\`\`","solution":"def matrix_multiplication(matrix1, matrix2): Performs matrix multiplication on two given matrices. Arguments: matrix1 -- A 2-dimensional list representing the first matrix. matrix2 -- A 2-dimensional list representing the second matrix. Returns: A 2-dimensional list representing the product of the two matrices. rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) cols_matrix2 = len(matrix2[0]) # Initialize the result matrix with zeros result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Write a Python script that reads a list of integers from a text file, sorts them in ascending order, and writes the sorted list back to another text file. Ensure that your script handles possible errors, such as the input file not existing or containing non-integer values.","solution":"def read_sort_write(input_file, output_file): This function reads a list of integers from the input_file, sorts them in ascending order, and writes the sorted list to the output_file. It handles errors such as the input file not existing or containing non-integer values. try: with open(input_file, 'r') as infile: numbers = infile.readlines() # Convert the list of strings to a list of integers try: numbers = [int(num.strip()) for num in numbers] except ValueError: raise ValueError(\\"Input file contains non-integer values\\") # Sort the numbers numbers.sort() # Write the sorted list to the output file with open(output_file, 'w') as outfile: for num in numbers: outfile.write(f\\"{num}n\\") except FileNotFoundError: raise FileNotFoundError(\\"Input file does not exist\\")"},{"question":"Write a Python function that takes a string and a list of words, and returns a list of all the distinct permutations of the string that match any of the words in the list. The function should ignore case and assume that the input string contains only alphabetic characters. Additionally, your function should efficiently handle cases where the length of the string and the size of the word list are both large, ensuring a time complexity that does not exceed O(k * (n + m!)), where n is the length of the string, m is the length of the longest word in the list, and k is the number of words in the list. The function signature should be: \`\`\`python def find_permutations_matching_words(s: str, words: list[str]) -> list[str]: pass \`\`\` Example: \`\`\`python s = \\"listen\\" words = [\\"enlist\\", \\"silent\\", \\"inlets\\", \\"google\\"] # Output should include \\"enlist\\", \\"silent\\", \\"inlets\\" but not \\"google\\" as it is not a permutation of \\"listen\\". print(find_permutations_matching_words(s, words)) # Expected Output: ['enlist', 'silent', 'inlets'] \`\`\`","solution":"def find_permutations_matching_words(s: str, words: list[str]) -> list[str]: Returns a list of all the distinct permutations of the string that match any of the words in the list. Ignores case and assumes input string contains only alphabetic characters. :param s: The input string :param words: The list of words to match against :return: A list of words from the given list that are permutations of the input string from collections import Counter # Convert the input string to lower case and count character frequencies s_counter = Counter(s.lower()) def is_permutation(word): # Convert the word to lower case and count character frequencies return s_counter == Counter(word.lower()) # Filter the words that are permutations of the string return [word for word in words if is_permutation(word)]"},{"question":"Design a software function that generates a random string adhering to specific constraints. The resultant string must be exactly 12 characters long, contain at least one uppercase letter, one lowercase letter, one digit, and one special character (e.g., @, #, ), without any character repeating and ensuring all characters are unique. The function should leverage a robust randomization technique to ensure string uniqueness and meet the stated constraints optimally.","solution":"import random import string def generate_random_string(): Generates a random 12-character string with at least one uppercase letter, one lowercase letter, one digit, and one special character, while ensuring all characters are unique and no character repeats. uppercase = random.choice(string.ascii_uppercase) lowercase = random.choice(string.ascii_lowercase) digit = random.choice(string.digits) special_char = random.choice(string.punctuation) # Pool of characters to choose from to fill the remaining characters all_chars = string.ascii_letters + string.digits + string.punctuation # Ensuring that chosen characters are not repeated in the string chosen_chars = set(uppercase + lowercase + digit + special_char) while len(chosen_chars) < 12: char = random.choice(all_chars) if char not in chosen_chars: chosen_chars.add(char) # Converting the set back to a list, ensuring randomness in sequence random_string_list = list(chosen_chars) random.shuffle(random_string_list) return ''.join(random_string_list)"},{"question":"Write a function that takes a list of integers and returns a new list with the square of each number, but only if the original number is positive. Negative numbers should be ignored. Additionally, provide an initial code implementation for this function with some deliberate mistakes. Rectify those errors and refactor the code to ensure it handles edge cases and potential input issues correctly and efficiently. Initial implementation: \`\`\`python def get_squares(numbers): squares = [] for num in numbers: squares.append(num * num) # error: doesn't check if num is positive return square # error: incorrect variable name print(get_squares([1, -2, 3, -4, 5])) # should return [1, 9, 25] \`\`\` Corrected and enhanced implementation: \`\`\`python def get_squares(numbers): if not isinstance(numbers, list): # validation to check if the input is a list. raise ValueError(\\"Input must be a list of integers.\\") squares = [] for num in numbers: if not isinstance(num, int): # validation to ensure each element is an integer. raise ValueError(\\"All elements in the list must be integers.\\") if num > 0: # only process positive numbers squares.append(num * num) return squares print(get_squares([1, -2, 3, -4, 5])) # should return [1, 9, 25] \`\`\`","solution":"def get_squares(numbers): if not isinstance(numbers, list): # validation to check if the input is a list. raise ValueError(\\"Input must be a list of integers.\\") squares = [] for num in numbers: if not isinstance(num, int): # validation to ensure each element is an integer. raise ValueError(\\"All elements in the list must be integers.\\") if num > 0: # only process positive numbers squares.append(num * num) return squares"},{"question":"Write a function that takes two sorted lists of integers and merges them into a single sorted list. Ensure that the final list contains all elements from both lists with duplicates removed.","solution":"def merge_and_deduplicate_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list without duplicates. :param list1: List[int] - First sorted list. :param list2: List[int] - Second sorted list. :return: List[int] - Merged and deduplicated sorted list. merged_list = sorted(set(list1) | set(list2)) return merged_list"},{"question":"Write a function that receives two strings that represent time intervals in the 'HH:MM-HH:MM' format. Each string denotes a start time and an end time for an interval within a 24-hour period. The function should determine if the intervals overlap or not. If the intervals overlap, return \`True\`, otherwise return \`False\`. You may assume that the input strings are always in the correct format and that the start times are always less than the end times. def intervals_overlap(interval1, interval2): Given two intervals in the 'HH:MM-HH:MM' format, determine if they overlap. Parameters: - interval1 (str): The first time interval in the 'HH:MM-HH:MM' format. - interval2 (str): The second time interval in the 'HH:MM-HH:MM' format. Returns: - bool: True if intervals overlap, False otherwise. Examples: >>> intervals_overlap(\\"09:00-11:00\\", \\"10:30-12:00\\") True >>> intervals_overlap(\\"13:00-14:00\\", \\"14:00-15:00\\") False >>> intervals_overlap(\\"18:30-19:30\\", \\"19:00-20:00\\") True # Include your code here","solution":"def intervals_overlap(interval1, interval2): Given two intervals in the 'HH:MM-HH:MM' format, determine if they overlap. Parameters: - interval1 (str): The first time interval in the 'HH:MM-HH:MM' format. - interval2 (str): The second time interval in the 'HH:MM-HH:MM' format. Returns: - bool: True if intervals overlap, False otherwise. def time_to_minutes(time_str): hours, minutes = map(int, time_str.split(':')) return hours * 60 + minutes start1, end1 = map(time_to_minutes, interval1.split('-')) start2, end2 = map(time_to_minutes, interval2.split('-')) return not (end1 <= start2 or end2 <= start1)"},{"question":"Implement a Python function that tests a string to verify if it is a valid identifier in the given programming language (Python). A valid identifier must adhere to the following rules: 1. It must start with an underscore or an alphabetic character (either uppercase or lowercase). 2. Characters after the first character can be alphanumeric (uppercase or lowercase) or underscores. 3. It cannot be a Python keyword (e.g., 'if', 'else', 'while'). The function should return \`True\` if the string is a valid identifier and \`False\` otherwise. Your task is to create the function using the following template: \`\`\`python def is_valid_identifier(s): ''' This function takes a string \`s\` and checks if it qualifies as a valid identifier according to the Python language rules. Examples: is_valid_identifier(\\"var_1\\") == True is_valid_identifier(\\"_var\\") == True is_valid_identifier(\\"1_var\\") == False is_valid_identifier(\\"var1\\") == True is_valid_identifier(\\"if\\") == False is_valid_identifier(\\"else\\") == False ''' # Write your implementation here \`\`\` Use the \`keyword\` module from Python's standard library to check if the string is a keyword. This module provides a list of all the reserved keywords in Python, which can be accessed via \`keyword.kwlist\`.","solution":"import keyword def is_valid_identifier(s): ''' This function takes a string \`s\` and checks if it qualifies as a valid identifier according to the Python language rules. Examples: is_valid_identifier(\\"var_1\\") == True is_valid_identifier(\\"_var\\") == True is_valid_identifier(\\"1_var\\") == False is_valid_identifier(\\"var1\\") == True is_valid_identifier(\\"if\\") == False is_valid_identifier(\\"else\\") == False ''' # Check if the string is a keyword if keyword.iskeyword(s): return False # Check if the string is a valid identifier if not s.isidentifier(): return False # If the string passes both checks, return True return True"},{"question":"Write a function that processes a list of integers and returns a dictionary with the count of each unique integer in the list. The function should handle invalid inputs by returning an error message, and log the error details into a separate list. Implement this using a try/except/finally structure. Example: \`\`\`python def count_integers(numbers): error_log = [] try: if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"List must contain only integers.\\") count_dict = {} for num in numbers: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 except ValueError as e: error_log.append(str(e)) return \\"Invalid Input\\", error_log finally: if error_log: print(\\"Errors occurred. Check error_log for details.\\") else: print(\\"Processing completed without errors.\\") return count_dict # Example usage result, log = count_integers([1, 2, 2, 3, 1, 'a']) print(result, log) result, log = count_integers([1, 2, 2, 3, 1, 4]) print(result) \`\`\`","solution":"def count_integers(numbers): Processes a list of integers and returns a dictionary with the count of each unique integer in the list. Handles invalid inputs by returning an error message, and logs the error details into a separate list. error_log = [] try: if not isinstance(numbers, list): raise ValueError(\\"Input must be a list.\\") if not all(isinstance(n, int) for n in numbers): raise ValueError(\\"List must contain only integers.\\") count_dict = {} for num in numbers: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 return count_dict, error_log except ValueError as e: error_log.append(str(e)) return \\"Invalid Input\\", error_log finally: if error_log: print(\\"Errors occurred. Check error_log for details.\\") else: print(\\"Processing completed without errors.\\")"},{"question":"Write a program that parses a given mathematical expression string containing integers and the operators +, -, * and / and evaluates the expression. The program should handle the standard order of operations, which includes parentheses for precedence. Ensure to handle edge cases such as division by zero, nested parentheses, and invalid expressions appropriately. Example: For the input string \\"3 + (2 * (7 - 3)) / 4\\", the output should be 5.0.","solution":"import operator import re def evaluate_expression(expression): def parse_expression(expression): tokens = re.findall(r'd+.?d*|[+-*/()]', expression) return shunting_yard(tokens) def shunting_yard(tokens): out_queue = [] op_stack = [] ops = {'+': (1, operator.add), '-': (1, operator.sub), '*': (2, operator.mul), '/': (2, operator.truediv)} for token in tokens: if re.match(r'd', token): out_queue.append(float(token)) # Convert numbers to float for eval elif token in ops: while (op_stack and op_stack[-1] in ops and ops[token][0] <= ops[op_stack[-1]][0]): out_queue.append(op_stack.pop()) op_stack.append(token) elif token == '(': op_stack.append(token) elif token == ')': while op_stack and op_stack[-1] != '(': out_queue.append(op_stack.pop()) op_stack.pop() # Pop the '(' while op_stack: out_queue.append(op_stack.pop()) return out_queue def evaluate_rpn(rpn_expression): stack = [] ops = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv} for token in rpn_expression: if isinstance(token, float): stack.append(token) elif token in ops: b, a = stack.pop(), stack.pop() if token == '/' and b == 0: raise ZeroDivisionError('Division by zero') stack.append(ops[token](a, b)) return stack[0] try: rpn_expression = parse_expression(expression) result = evaluate_rpn(rpn_expression) return result except Exception as e: print(f\\"Invalid expression: {e}\\") return None"},{"question":"Write a program to evaluate a postfix expression (also known as Reverse Polish Notation) and print its result. The expression will contain single-digit integers and the operators '+', '-', '*', and '/'. Each element in the expression is separated by a space. For example, given the postfix expression \\"5 3 + 8 2 / *\\", the program should print \`16\`. Note: Assume that the expressions are well-formed and no division by zero will occur.","solution":"def evaluate_postfix(expression): Evaluates a postfix expression (Reverse Polish Notation) and returns its result. Args: expression (str): A string containing the postfix expression with single-digit integers and operators, separated by spaces. Returns: int: Result of the postfix expression. stack = [] for token in expression.split(): if token.isdigit(): # If the token is an operand stack.append(int(token)) else: # If the token is an operator operand2 = stack.pop() operand1 = stack.pop() if token == '+': stack.append(operand1 + operand2) elif token == '-': stack.append(operand1 - operand2) elif token == '*': stack.append(operand1 * operand2) elif token == '/': stack.append(operand1 // operand2) # Use floor division for integer division return stack[0]"},{"question":"Write a function \`find_first_repeating_char\` that takes a string \`s\` as input and returns the first repeating character in the string. If there is no repeating character, return \`None\`. Function Signature \`\`\`python def find_first_repeating_char(s: str) -> str: \`\`\` Input - \`s\` (1 ≤ len(s) ≤ 10^5): A string consisting of lowercase and uppercase characters. Output - Returns a single character that is the first repeating character in the string. - If there is no repeating character, return \`None\`. Example \`\`\`python find_first_repeating_char(\\"hello\\") # should return 'l' find_first_repeating_char(\\"abcdef\\") # should return None find_first_repeating_char(\\"aabbcc\\") # should return 'a' \`\`\` Explanation - In the first example, 'l' is the first character that repeats. - In the second example, there is no character that repeats. - In the third example, 'a' is the first character that repeats.","solution":"def find_first_repeating_char(s: str) -> str: Returns the first repeating character in the string. If there is no repeating character, returns None. char_set = set() for char in s: if char in char_set: return char char_set.add(char) return None"},{"question":"Design a function that analyzes a collection of text documents to identify the most frequently occurring words and their respective counts. The input will be a list of strings, each representing a text document. Your function should be able to handle a large number of documents efficiently and provide the following features: 1. Return the top N most frequent words across all documents. 2. Allow excluding common stop words (such as \\"and\\", \\"the\\", \\"is\\", etc.) from the analysis. 3. Support for case-insensitive counting (i.e., \\"Word\\" and \\"word\\" should be treated as the same word). In addition, your function should include: 1. A mechanism to handle special characters and punctuation, ensuring that words are cleaned and normalized correctly. 2. An option to specify a minimum word length to include in the frequency count. 3. Error handling for cases such as empty documents or lists. Your answer should take performance into consideration and you should be ready to discuss the complexity of your solution, the data structures you used, and why they are appropriate for this problem.","solution":"import re from collections import Counter from typing import List, Tuple def analyze_documents(documents: List[str], top_n: int, stop_words: List[str] = None, min_word_length: int = 1) -> List[Tuple[str, int]]: Analyzes a collection of text documents to identify the most frequently occurring words. Parameters: - documents: List of strings, each representing a text document. - top_n: Number of top frequent words to return. - stop_words: List of words to be excluded from the analysis. - min_word_length: Minimum length of words to be included in the frequency count. Returns: - List of tuples with top N words and their respective counts. if stop_words is None: stop_words = [] # Combine all documents into one large string combined_text = ' '.join(documents) # Normalize the text: remove punctuation, special characters and convert to lower case normalized_text = re.sub(r'[^a-zA-Zs]', '', combined_text).lower() # Split the text into words words = normalized_text.split() # Filter out stop words and short words filtered_words = [word for word in words if word not in stop_words and len(word) >= min_word_length] # Count the frequency of each word word_counts = Counter(filtered_words) # Return the top N most common words return word_counts.most_common(top_n)"},{"question":"Implement a function to simulate a basic banking system. Your function will handle operations such as creating accounts, depositing money, withdrawing money, and checking balances. You will be given a list of operations to perform on the banking system. Write code to process these operations and return the final state of all accounts. Instructions: 1. Each account is represented by an account number (a unique integer) and an initial balance of 0 when created. 2. The following operations will be provided in the list: - \\"create account {account_number}\\": Creates a new account with the specified account number. - \\"deposit {account_number} {amount}\\": Deposits the specified amount into the given account. - \\"withdraw {account_number} {amount}\\": Withdraws the specified amount from the given account. If the account does not have sufficient funds, ignore the withdraw operation. - \\"balance {account_number}\\": Returns the balance of the given account. Function Signature: \`\`\`python def banking_system(operations: List[str]) -> Dict[int, int]: pass \`\`\` Example Input: \`\`\`python operations = [ \\"create account 101\\", \\"deposit 101 500\\", \\"create account 102\\", \\"deposit 102 200\\", \\"withdraw 101 100\\", \\"balance 101\\", \\"balance 102\\" ] \`\`\` Expected Output: \`\`\`python { 101: 400, 102: 200 } \`\`\`","solution":"from typing import List, Dict def banking_system(operations: List[str]) -> Dict[int, int]: accounts = {} for operation in operations: parts = operation.split() command = parts[0] if command == \\"create\\": account_number = int(parts[2]) accounts[account_number] = 0 elif command == \\"deposit\\": account_number = int(parts[1]) amount = int(parts[2]) if account_number in accounts: accounts[account_number] += amount elif command == \\"withdraw\\": account_number = int(parts[1]) amount = int(parts[2]) if account_number in accounts and accounts[account_number] >= amount: accounts[account_number] -= amount elif command == \\"balance\\": # Balance checking does not alter the account so we skip any operation here pass return accounts"},{"question":"Write a Python function that takes a string as input and returns a new string that is the reverse of the original string but maintains the positions of all spaces. For example, given the string \`\\"a b c d\\"\`, the output should be \`\\"d c b a\\"\`. Handle cases where there are multiple consecutive spaces as well.","solution":"def reverse_string_with_spaces(input_string): Returns a new string that is the reverse of the original string while maintaining the positions of all spaces. # Extract the characters which are not spaces non_space_chars = [char for char in input_string if char != ' '] # Reverse the list of non-space characters non_space_chars.reverse() # Use an iterator to track position of non-space characters char_iter = iter(non_space_chars) # Construct the result keeping spaces in their original positions result = ''.join(next(char_iter) if char != ' ' else ' ' for char in input_string) return result"},{"question":"You are required to solve a task related to partitioning arrays. The challenge is as follows: Given an array of integers \`nums\` and an integer \`k\`, determine whether the array can be divided into \`k\` consecutive subsequences. A consecutive subsequence is a sequence that can be arranged in an increasing order without gaps. For instance, consider the following examples: Example 1: Input: nums = [1,2,3,3,4,4,5,6], k = 4 Output: true Explanation: The array can be divided into four consecutive subsequences: [1,2,3], [3,4,5], [4,5], and [6]. Example 2: Input: nums = [3,3,2,2,1,1], k = 3 Output: true Explanation: The array can be divided into three consecutive subsequences: [1,2,3], [1,2,3], and [3]. Example 3: Input: nums = [1,2,3,4], k = 3 Output: false Explanation: The array cannot be divided into three consecutive subsequences such as [1,2,3] with the remaining element [4]. Limitations: - \`1 <= nums.length <= 105\` - \`1 <= nums[i] <= 104\` - \`1 <= k <= nums.length\` Your aim is to write an algorithm that efficiently determines if such a partition is possible.","solution":"from collections import Counter import heapq def can_divide_into_consecutive_subsequences(nums, k): if len(nums) % k != 0: return False count = Counter(nums) start = 0 unique_numbers = sorted(count.keys()) for num in unique_numbers: if count[num] > 0: current_count = count[num] for i in range(k): if count[num + i] < current_count: return False count[num + i] -= current_count return True"},{"question":"You are given a dictionary where the keys are integers and the values are lists of integers. Write a function that identifies all keys whose list contains at least one number that is a multiple of that key. Return a sorted list of these keys in ascending order. For example, consider the following dictionary: \`\`\`python input_dict = { 2: [3, 4, 5, 8], 3: [6, 9, 2, 3], 5: [10, 15, 20], 7: [8, 14, 21] } \`\`\` In this case, the output should be \`[2, 3, 5, 7]\` because: - The key \`2\` has \`4\` and \`8\` which are multiples of \`2\`. - The key \`3\` has \`6\` and \`9\` which are multiples of \`3\`. - The key \`5\` has \`10\`, \`15\`, and \`20\` which are multiples of \`5\`. - The key \`7\` has \`14\` and \`21\` which are multiples of \`7\`. Note that the function should not print the result but rather return the sorted list of keys that meet the criteria.","solution":"def find_keys_with_multiples(input_dict): Identifies all keys whose list contains at least one number that is a multiple of that key. Returns a sorted list of these keys in ascending order. result_keys = [] for key, values in input_dict.items(): if any(value % key == 0 for value in values): result_keys.append(key) return sorted(result_keys)"},{"question":"Design and implement a recommendation system using collaborative filtering to predict user ratings for movies. The input dataset consists of user IDs, movie IDs, and corresponding ratings. The recommendation system should address user-movie interactions, handle sparse data, and consider implicit feedback. Implement the system using matrix factorization techniques to discover latent features inherent in the user-movie interactions and optimize it using appropriate algorithms such as Alternating Least Squares (ALS) or stochastic gradient descent (SGD). Additionally, evaluate the system’s performance using metrics such as Root Mean Square Error (RMSE) and Mean Absolute Error (MAE). Provide an analysis of how different parameters, such as the number of latent factors and regularization term, impact the recommendation accuracy. Here is a snippet of code illustrating an incorrect implementation of collaborative filtering: \`\`\`python import numpy as np num_users = 5 num_movies = 6 R = np.array([ [5, 3, 0, 1, 4, 0], [4, 0, 3, 1, 2, 0], [1, 1, 0, 5, 0, 0], [1, 0, 0, 4, 0, 0], [0, 1, 5, 4, 0, 0] ]) # Wrong implementation of matrix factorization P = np.random.rand(num_users, 2) Q = np.random.rand(num_movies, 2) nP = np.dot(P, Q.T) print(nP) \`\`\` Identify the errors in the code above and discuss how they can be rectified. Your final implementation should be a fully functional recommendation system, achieving meaningful predictions and demonstrating the effectiveness of the collaborative filtering approach.","solution":"import numpy as np from sklearn.metrics import mean_squared_error, mean_absolute_error class MatrixFactorization: def __init__(self, R, K, alpha, beta, iterations): Perform matrix factorization to predict empty entries in a matrix. Arguments - R (ndarray) : user-item rating matrix - K (int) : number of latent features - alpha (float) : learning rate - beta (float) : regularization parameter - iterations (int): number of iterations self.R = R self.K = K self.alpha = alpha self.beta = beta self.iterations = iterations def train(self): # Initialize user and item latent feature matrices self.num_users, self.num_items = self.R.shape self.P = np.random.normal(scale=1./self.K, size=(self.num_users, self.K)) self.Q = np.random.normal(scale=1./self.K, size=(self.num_items, self.K)) # Initialize the biases self.b_u = np.zeros(self.num_users) self.b_i = np.zeros(self.num_items) self.b = np.mean(self.R[np.where(self.R != 0)]) # Create a list of training samples self.samples = [ (i, j, self.R[i, j]) for i in range(self.num_users) for j in range(self.num_items) if self.R[i, j] > 0 ] # Perform stochastic gradient descent for given number of iterations training_process = [] for i in range(self.iterations): np.random.shuffle(self.samples) self.sgd() rmse = self.rmse() mae = self.mae() training_process.append((rmse, mae)) print(f\\"Iteration: {i+1}; RMSE = {rmse:.4f}; MAE = {mae:.4f}\\") return training_process def sgd(self): Perform stochastic gradient descent for i, j, r in self.samples: # Compute prediction and error prediction = self.get_prediction(i, j) e = (r - prediction) # Update biases self.b_u[i] += self.alpha * (e - self.beta * self.b_u[i]) self.b_i[j] += self.alpha * (e - self.beta * self.b_i[j]) # Update user and item latent feature matrices self.P[i, :] += self.alpha * (e * self.Q[j, :] - self.beta * self.P[i, :]) self.Q[j, :] += self.alpha * (e * self.P[i, :] - self.beta * self.Q[j, :]) def get_prediction(self, i, j): Get the predicted rating of user i and item j prediction = self.b + self.b_u[i] + self.b_i[j] + self.P[i, :].dot(self.Q[j, :].T) return prediction def rmse(self): A function to compute the Root Mean Squared Error (RMSE) xs, ys = self.R.nonzero() predicted = [] actual = [] for x, y in zip(xs, ys): predicted.append(self.get_prediction(x, y)) actual.append(self.R[x, y]) return np.sqrt(mean_squared_error(predicted, actual)) def mae(self): A function to compute the Mean Absolute Error (MAE) xs, ys = self.R.nonzero() predicted = [] actual = [] for x, y in zip(xs, ys): predicted.append(self.get_prediction(x, y)) actual.append(self.R[x, y]) return mean_absolute_error(predicted, actual)"},{"question":"Write a Python function to solve a Sudoku puzzle. The function should take a 9x9 2D list representing the initial state of a Sudoku board as input, where empty cells are represented by 0s. The function should modify the list in place to contain the completed puzzle, following the rules of Sudoku.","solution":"def solve_sudoku(board): Solves a Sudoku puzzle by filling the board in place. :param board: 9x9 2D list, representing the Sudoku board with 0s indicating empty cells. :return: True if the board is solvable and solved, False otherwise. def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num or board[i][col] == num: return False if board[row//3*3 + i//3][col//3*3 + i%3] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Write a function that takes a list of integers and an integer \`k\` as inputs, and returns the \`k\` largest unique elements from the list in descending order. If the list contains fewer than \`k\` unique elements, return all the unique elements in descending order. Ensure the function can handle negative integers and large lists efficiently. Example: \`\`\` Input: [3, 1, 5, 12, 2, 11, 5, 12, 11], k = 3 Output: [12, 11, 5] Input: [4, 4, 4, 4, 4], k = 2 Output: [4] \`\`\`","solution":"def k_largest_unique_elements(lst, k): Returns the k largest unique elements from the list in descending order. If the list contains fewer than k unique elements, return all the unique elements in descending order. unique_elements = list(set(lst)) unique_elements.sort(reverse=True) return unique_elements[:k]"},{"question":"A sequence of numbers is called a Zigzag sequence if the differences between successive numbers strictly alternate between positive and negative. In other words, a sequence {a_1, a_2, ..., a_n} is Zigzag if (a_2 - a_1) times (a_3 - a_2) < 0, (a_3 - a_2) times (a_4 - a_3) < 0, and so on. Given a list of integers, write a function \`longestZigzag\` that returns the length of the longest Zigzag subsequence. # Function Signature \`\`\`python def longestZigzag(arr: List[int]) -> int: pass \`\`\` # Example \`\`\`python # Example 1 arr = [1, 7, 4, 9, 2, 5] print(longestZigzag(arr)) # Output: 6 # Example 2 arr = [1, 4, 7, 2, 5] print(longestZigzag(arr)) # Output: 4 # Example 3 arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] print(longestZigzag(arr)) # Output: 2 \`\`\` # Constraints - 1 ≤ length of list ≤ 1000 - All numbers in the list are positive integers less than 10^4.","solution":"from typing import List def longestZigzag(arr: List[int]) -> int: if len(arr) < 2: return len(arr) up = down = 1 # start with the first element being alone for i in range(1, len(arr)): if arr[i] > arr[i-1]: up = down + 1 elif arr[i] < arr[i-1]: down = up + 1 return max(up, down)"},{"question":"In Python, write a function \`merge_sorted_lists\` that takes two sorted lists of integers as input and returns a single sorted list that contains all the elements of the two input lists. Your implementation should not use any built-in sorting functions and should maintain a time complexity of O(n + m), where n and m are the lengths of the two input lists respectively.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add remaining elements from list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Add remaining elements from list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Given an array of integers 'arr' and an integer target sum 'S', create a Python function to achieve the following steps: 1. Identify all unique pairs of numbers from the array that add up to the given target sum 'S'. 2. Return these pairs in a list of tuples. Each tuple represents a pair of numbers. 3. Ensure that each pair is listed only once, disregarding the order of numbers (i.e., (a, b) is considered the same as (b, a)). 4. If no such pairs exist, return an empty list. Your function should receive the array 'arr' and target sum 'S' as input parameters. Example: Input: arr = [1, 2, 3, 4, 5, 6], S = 7 Output: [(1, 6), (2, 5), (3, 4)] Tip: You can use Python's built-in collections module for efficient lookup, and the itertools module if necessary.","solution":"def find_pairs_with_sum(arr, S): Identifies all unique pairs of numbers from the array that add up to the given target sum S. Parameters: arr (list): List of integers. S (int): Target sum. Returns: list: List of tuples where each tuple represents a unique pair of numbers adding up to S. seen = set() pairs = set() for number in arr: difference = S - number if difference in seen: pairs.add(tuple(sorted((number, difference)))) seen.add(number) return list(pairs)"},{"question":"Consider the following code that attempts to compute the factorial of a given non-negative integer n using recursion. Identify any mistakes in the code and correct them to ensure it operates as intended. Additionally, optimize the implementation for handling larger inputs. Erroneous Code Example: \`\`\`python def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n) # Test the function with an example: print(factorial(5)) # expected output: 120 \`\`\` The function should be corrected to avoid infinite recursion and include suitable optimizations to improve efficiency for larger values of n. Consider the use of memoization or iterative approaches to optimize the solution.","solution":"def factorial(n, memo={}): Returns the factorial of a non-negative integer n. if n in memo: return memo[n] if n == 0 or n == 1: return 1 else: memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Background: Create a task scheduler that efficiently schedules and executes tasks based on their priority levels. Each task has a unique identifier, description, priority level, and execution time. The scheduler should ensure that high-priority tasks are executed before lower-priority ones. If two tasks have the same priority, they should be executed in the order they were added. Task Goals \`\`\`python [ \\"Implement a scheduler that handles tasks with different priorities\\", \\"Ensure high-priority tasks are executed before lower-priority tasks\\", \\"Maintain the order of tasks with the same priority as they were added\\", \\"Provide the ability to add, remove, and execute tasks\\", \\"Ensure tasks contain a unique identifier, description, priority level, and execution time\\" ] \`\`\` User Stories \`\`\`python [ \\"As a user, I want to add tasks with different priority levels to the scheduler\\", \\"As a user, I want to remove tasks from the scheduler by their unique identifier\\", \\"As a user, I want high-priority tasks to be executed before lower-priority tasks\\", \\"As a user, I want tasks with the same priority to be executed in the order they were added\\", \\"As a user, I want to see the details of tasks in the scheduler\\" ] \`\`\` Data Structures and Interface Definitions \`\`\`mermaid classDiagram class Task{ +int id +str description +int priority +datetime execution_time +__init__(id: int, description: str, priority: int, execution_time: datetime) } class TaskScheduler{ +add_task(task: Task) +remove_task(task_id: int) +execute_tasks() +get_all_tasks(): List[Task] } TaskScheduler \\"1\\" -- \\"*\\" Task: contains \`\`\` Implementation Approach We will use a priority queue to manage the tasks efficiently based on their priority levels. We will implement the priority queue using Python's built-in \`heapq\` module. Each task will be represented by a \`Task\` class containing the unique identifier, description, priority level, and execution time. The \`TaskScheduler\` class will handle adding, removing, and executing tasks. Python package name \`\`\`python \\"task_scheduler\\" \`\`\` File list \`\`\`python [ \\"main.py\\", \\"task.py\\", \\"task_scheduler.py\\" ] \`\`\` Code: main.py \`\`\`python Module to interact with the TaskScheduler from task import Task from task_scheduler import TaskScheduler from datetime import datetime def main(): scheduler = TaskScheduler() # Adding tasks to the scheduler scheduler.add_task(Task(1, \\"Task 1\\", 2, datetime(2023, 5, 1, 10, 0))) scheduler.add_task(Task(2, \\"Task 2\\", 1, datetime(2023, 5, 1, 11, 0))) scheduler.add_task(Task(3, \\"Task 3\\", 1, datetime(2023, 5, 1, 12, 0))) # Executing tasks scheduler.execute_tasks() # Removing a task scheduler.remove_task(2) # Fetching remaining tasks remaining_tasks = scheduler.get_all_tasks() for task in remaining_tasks: print(f\\"Task ID: {task.id}, Description: {task.description}, Priority: {task.priority}, Execution Time: {task.execution_time}\\") if __name__ == \\"__main__\\": main() \`\`\` Code: task.py \`\`\`python Task class representing individual tasks from datetime import datetime class Task: def __init__(self, task_id: int, description: str, priority: int, execution_time: datetime): self.id = task_id self.description = description self.priority = priority self.execution_time = execution_time def __lt__(self, other): return self.priority < other.priority or (self.priority == other.priority and self.execution_time < other.execution_time) \`\`\` Code: task_scheduler.py \`\`\`python TaskScheduler class to manage task scheduling and execution from task import Task import heapq from typing import List class TaskScheduler: def __init__(self): self.task_queue = [] def add_task(self, task: Task): heapq.heappush(self.task_queue, (task.priority, task)) def remove_task(self, task_id: int): self.task_queue = [(priority, task) for priority, task in self.task_queue if task.id != task_id] heapq.heapify(self.task_queue) def execute_tasks(self): while self.task_queue: priority, task = heapq.heappop(self.task_queue) print(f\\"Executing Task ID: {task.id}, Description: {task.description}, Priority: {task.priority}, Execution Time: {task.execution_time}\\") def get_all_tasks(self) -> List[Task]: return [task for priority, task in self.task_queue] \`\`\`","solution":"TaskScheduler module implementing the task scheduling system from datetime import datetime import heapq from typing import List class Task: Task class representing individual tasks def __init__(self, task_id: int, description: str, priority: int, execution_time: datetime): self.id = task_id self.description = description self.priority = priority self.execution_time = execution_time def __lt__(self, other): return self.priority < other.priority or (self.priority == other.priority and self.execution_time < other.execution_time) class TaskScheduler: TaskScheduler class to manage task scheduling and execution def __init__(self): self.task_queue = [] def add_task(self, task: Task): heapq.heappush(self.task_queue, (task.priority, task)) def remove_task(self, task_id: int): self.task_queue = [(priority, task) for priority, task in self.task_queue if task.id != task_id] heapq.heapify(self.task_queue) def execute_tasks(self): while self.task_queue: priority, task = heapq.heappop(self.task_queue) print(f\\"Executing Task ID: {task.id}, Description: {task.description}, Priority: {task.priority}, Execution Time: {task.execution_time}\\") def get_all_tasks(self) -> List[Task]: return [task for priority, task in self.task_queue]"},{"question":"Write a Python function that takes a string 'input_str' and returns a dictionary with each unique character in the string as the key and the number of times it appears in the string as the value. Your function should ignore case, count all alphanumeric characters, and discard all spaces, punctuation, and other special characters. Ensure that your function handles edge cases such as an empty string or a string with no alphanumeric characters. The function should maintain an execution time complexity of O(n), where 'n' is the length of the string. Example of a string: input_str = \\"Hello, World! 123\\"","solution":"import re from collections import defaultdict def count_unique_characters(input_str): Returns a dictionary with each unique alphanumeric character in the input string as the key and the number of times it appears in the string as the value. Ignores case and discards spaces, punctuation, and other special characters. # Convert the string to lowercase input_str = input_str.lower() # Remove all non-alphanumeric characters cleaned_str = re.sub(r'[^a-z0-9]', '', input_str) # Initialize a default dictionary to store character counts char_count = defaultdict(int) # Count each character in the cleaned string for char in cleaned_str: char_count[char] += 1 # Convert defaultdict to a regular dictionary and return return dict(char_count)"},{"question":"Create a function \`closest_pairs(points)\` that takes a list of points represented as tuples of two integers (x, y) and returns a list of pairs of points (tuples of tuples) that are the closest to each other. Each point should appear in exactly one pair. If there are multiple points with the same minimum distance, choose the first pair that occurs in the sorted list of points. Write the function and provide examples demonstrating its usage. Ensure that your implementation efficiently handles input sizes typical for competitive programming.","solution":"from itertools import combinations import math def euclidean_distance(p1, p2): Calculate the Euclidean distance between two points p1 and p2. return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def closest_pairs(points): Given a list of points represented as tuples of (x, y), return a list of pairs of points (tuples of tuples) that are closest to each other. Each point must appear in exactly one pair. if len(points) < 2: return [] # Sort the points to have a deterministic order required by the task points = sorted(points) # Dictionary to store the minimum pair and their distance min_distance_pairs = [] while points: min_distance = float('inf') closest_pair = None for p1, p2 in combinations(points, 2): distance = euclidean_distance(p1, p2) if distance < min_distance: min_distance = distance closest_pair = (p1, p2) if closest_pair: min_distance_pairs.append(closest_pair) points.remove(closest_pair[0]) points.remove(closest_pair[1]) return min_distance_pairs"},{"question":"Implement a Python function that accepts two string arguments and returns a dictionary where the keys are the characters present in both strings, and the values are the number of times each character appears in both strings combined. Please ensure that the function handles case insensitivity and ignores any non-alphabetical characters.","solution":"import re from collections import defaultdict def char_frequency_combined(str1, str2): Returns a dictionary where the keys are the characters present in both strings, and the values are the number of times each character appears in both strings combined. The function is case-insensitive and ignores non-alphabetical characters. str1 = re.sub(r'[^a-zA-Z]', '', str1).lower() str2 = re.sub(r'[^a-zA-Z]', '', str2).lower() char_count = defaultdict(int) for char in str1: char_count[char] += 1 for char in str2: char_count[char] += 1 # Only retain entries that are present in both strings common_chars = set(str1) & set(str2) result = {char: count for char, count in char_count.items() if char in common_chars} return result"},{"question":"Implement a function in Python that accepts a list of integers and an integer k, and returns the k-th smallest element in the list. Ensure that your function handles edge cases such as an empty list, k being larger than the length of the list, and the list having duplicate elements. Your implementation should avoid using built-in sorting functions to directly find the k-th smallest element. Instead, explore efficient algorithms such as Quickselect to solve this problem. # Requirements: 1. Define a function \`kth_smallest(nums: List[int], k: int) -> int\` that satisfies the above criteria. 2. Incorporate error handling to address the following cases: - The input list is empty. - k is less than 1 or greater than the length of the list. 3. Implement the Quickselect algorithm or a similar efficient method to determine the k-th smallest element. 4. Write a few test cases to verify the correctness of your function. # Example Usage: \`\`\`python from typing import List def kth_smallest(nums: List[int], k: int) -> int: # Implement Quickselect algorithm or efficient method here pass # Sample test cases print(kth_smallest([3, 2, 1, 5, 4], 2)) # Output: 2 print(kth_smallest([3, 2, 1, 5, 4], 1)) # Output: 1 print(kth_smallest([3, 2, 1, 5, 4], 5)) # Output: 5 print(kth_smallest([], 1)) # Output: Error message print(kth_smallest([3, 1, 4, 2], 0)) # Output: Error message print(kth_smallest([3, 3, 3, 3], 3)) # Output: 3 \`\`\` Debug your implementation to confirm it meets all the requirements and handles edge cases appropriately.","solution":"from typing import List def kth_smallest(nums: List[int], k: int) -> int: Finds the k-th smallest element in the list nums using the Quickselect algorithm. Raises ValueError if the input is invalid. if not nums: raise ValueError(\\"Empty list provided\\") if k < 1 or k > len(nums): raise ValueError(\\"k is out of valid range\\") def quickselect(l, r, k): pivot = nums[r] p = l for j in range(l, r): if nums[j] <= pivot: nums[p], nums[j] = nums[j], nums[p] p += 1 nums[p], nums[r] = nums[r], nums[p] if p == k: return nums[p] elif p < k: return quickselect(p + 1, r, k) else: return quickselect(l, p - 1, k) return quickselect(0, len(nums) - 1, k - 1)"},{"question":"Write a Python function called \`intersect_dicts\` that takes two dictionaries as input and returns a new dictionary containing only the keys that are present in both input dictionaries, with values being the sum of the values from the two input dictionaries. For example, given \`dict1 = {'a': 1, 'b': 2, 'c': 3}\` and \`dict2 = {'b': 3, 'c': 4, 'd': 5}\`, the function should return \`{'b': 5, 'c': 7}\`. Ensure your function handles cases where the dictionaries are empty or have no common keys.","solution":"def intersect_dicts(dict1, dict2): Takes two dictionaries as input and returns a new dictionary containing only the keys that are present in both input dictionaries, with values being the sum of the values from the two input dictionaries. :param dict1: First input dictionary :param dict2: Second input dictionary :return: Dictionary with common keys and summed values result = {key: dict1[key] + dict2[key] for key in dict1 if key in dict2} return result"},{"question":"Write a Python function that, given a string, returns a dictionary mapping each unique character in the string to the number of occurrences of that character, excluding any spaces. The function should be case-sensitive, treating 'a' and 'A' as distinct characters. For example, for the input string \\"Hello World\\", the output should be {'H': 1, 'e': 1, 'l': 3, 'o': 2, 'W': 1, 'r': 1, 'd': 1}.","solution":"def count_characters(input_string): Returns a dictionary mapping each unique character in the input_string to the number of occurrences of that character, excluding spaces. The function is case-sensitive. char_counts = {} for char in input_string: if char != ' ': if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 return char_counts"},{"question":"Write a function that takes an input string and returns a string with all the vowels removed. The function should preserve the case of all characters and maintain the order of the remaining characters in the string. input_string = \\"Hello World!\\"","solution":"def remove_vowels(input_string): Returns a string with all vowels removed. :param input_string: The input string :return: A string with all vowels removed vowels = \\"aeiouAEIOU\\" return ''.join([char for char in input_string if char not in vowels]) # Example usage input_string = \\"Hello World!\\" print(remove_vowels(input_string)) # Output: \\"Hll Wrld!\\""},{"question":"Given an array of integers, write a Python function to find the length of the longest subarray that contains at most two distinct integers. The longest subarray must retain the order of appearance from the original array. # Example \`\`\`python def longest_subarray_with_two_distinct(nums): # Your code here # Example 1 nums = [1, 2, 1, 2, 3] print(longest_subarray_with_two_distinct(nums)) # Output: 4 (subarray: [1, 2, 1, 2]) # Example 2 nums = [1, 1, 1, 1, 1] print(longest_subarray_with_two_distinct(nums)) # Output: 5 (subarray: [1, 1, 1, 1, 1]) # Example 3 nums = [1, 2, 3, 4, 5] print(longest_subarray_with_two_distinct(nums)) # Output: 2 (subarray: [1, 2]) # Example 4 nums = [] print(longest_subarray_with_two_distinct(nums)) # Output: 0 (subarray: []) \`\`\` # Constraints - The input array can be empty, in which case the function should return 0. - All elements in the array are integers and can be both positive or negative.","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest subarray with at most two distinct integers. if not nums: return 0 max_len = 0 left = 0 count = {} for right in range(len(nums)): count[nums[right]] = count.get(nums[right], 0) + 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Write a function that takes a square matrix as input and returns the matrix rotated 90 degrees clockwise. The matrix is represented as a list of lists, where each inner list represents a row. You are not allowed to use any additional libraries or functions for matrix rotation. Function Signature: \`\`\`python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: \`\`\` Example: \`\`\`python Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] \`\`\` Constraints: - The input matrix will have dimensions n x n where 1 <= n <= 100. - Each element of the matrix will be an integer in the range -1000 to 1000. - Do not modify the input matrix; return a new matrix with the elements rotated.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: Rotates the given n x n matrix 90 degrees clockwise. Parameters: matrix (List[List[int]]): The matrix to rotate. Returns: List[List[int]]: New matrix rotated 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a Python function that takes a list of digits and returns the largest number possible by concatenating them. For example, given the list [3, 30, 34, 5, 9], the function should return \\"9534330\\".","solution":"from functools import cmp_to_key def largest_number(digits): Returns the largest number possible by concatenating the list of digits. Parameters: digits (list): List of integers. Returns: str: The largest number possible by concatenating the given digits. def compare(x, y): return (y + x) > (x + y) # Convert integers to strings for comparison str_digits = list(map(str, digits)) # Sort with custom comparator str_digits.sort(key=cmp_to_key(lambda x, y: 1 if compare(x, y) else -1)) # Join the sorted array largest_num = ''.join(str_digits) # Handle the case where the result is multiple zeros if largest_num[0] == '0': return '0' return largest_num"},{"question":"Given a binary tree, find the mode(s) (the most frequently occurring element(s)) in the tree. Implement a function to return a list of the mode(s) in ascending order. Additionally, implement a function to find the level of a given node value in the tree. The level of the root node is 1. Example 1: Input: root = [1,null,2,2] Output: [2] Explanation: The mode is 2. Example 2: Input: root = [3,2,2,1,2,null,3], value = 1 Output: 3 Explanation: The most frequently occurring value(s) are [2, 3], but the modes in ascending order are [2, 3]. The level of node value 1 is 3. Example 3: Input: root = [1,null,2], value = 2 Output: [1, 2], 2 Explanation: Modes are [1, 2], and the level of node value 2 is 2. Example 4: Input: root = [0], value = 0 Output: [0], 1 Explanation: The mode is 0, and the level of node value 0 is 1. Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node.val <= 10^4 - The tree can have duplicate values. Here is a piece of erroneous code for reference: \`\`\`python def findMode(root): from collections import defaultdict counts = defaultdict(int) stack = [root] while stack: node = stack.pop() if node: counts[node.val] += 1 stack.append(node.right) stack.append(node.left) max_count = max(counts.values()) return [val for val in counts if counts[val] == max_count] def findLevel(root, value, level=1): if not root: return -1 if root.val == value: return level left = findLevel(root.left, value, level + 1) if left != -1: return left return findLevel(root.right, value, level + 1) \`\`\` This code is meant to find the mode(s) of the BST and the level of a given node value, but it does not handle the case when the tree has nodes with the minimum or maximum integer values correctly. Can you spot and correct it?","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findMode(root): from collections import defaultdict def in_order(node): if node: in_order(node.left) counts[node.val] += 1 in_order(node.right) counts = defaultdict(int) in_order(root) max_count = max(counts.values()) return sorted([val for val in counts if counts[val] == max_count]) def findLevel(root, value, level=1): if not root: return -1 if root.val == value: return level left = findLevel(root.left, value, level + 1) if left != -1: return left return findLevel(root.right, value, level + 1)"},{"question":"Write a function that simulates the rolling of a pair of six-sided dice 1,000 times. Count how many times each possible outcome occurs (i.e., sum of the two dice), and display the results in a tabulated format showing the frequency and the percentage of each outcome. Ensure that the simulation and output are both optimized for performance and clarity.","solution":"import random def simulate_dice_rolls(num_rolls=1000): outcomes = {i: 0 for i in range(2, 13)} for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) outcome = die1 + die2 outcomes[outcome] += 1 results = [] for outcome, frequency in sorted(outcomes.items()): percentage = (frequency / num_rolls) * 100 results.append((outcome, frequency, percentage)) return results"},{"question":"An increasing sequence is a list of integers where each integer is greater than the one preceding it. For instance, [2, 3, 7, 10] is an increasing sequence. Given a list of integers, find the length of the longest increasing subsequence (LIS). An increasing subsequence is a sequence derived by deleting some or none of the elements in the list without changing the order of the remaining elements. You need to write a function \`longest_increasing_subsequence(arr)\` that accepts a list \`arr\` of integers as input and returns the length of the LIS. For example: - \`longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])\` returns 4. The LIS is [2, 3, 7, 101]. - \`longest_increasing_subsequence([0, 1, 0, 3, 2, 3])\` returns 4. The LIS is [0, 1, 2, 3]. - \`longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])\` returns 1. The LIS is [7]. Constraints: - The length of the list \`arr\` will be between 1 and 1,000. - Each element in the list \`arr\` will be an integer between -10^4 and 10^4.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Write a function that will parse a string containing comma-separated values representing a list of items and their prices, and return a dictionary with the items as keys and their prices as values. The input string will have the format: \`\\"item1:price1, item2:price2, item3:price3, ...\\"\`. The prices will always be numerical values (integers or floats). Ensure the function can handle variations in spacing around the commas and colons. Example input: \`\`\` \\"apple:0.99, banana:0.50, avocado:1.25, pear: 0.75 \\" \`\`\` Expected output: \`\`\` { \\"apple\\": 0.99, \\"banana\\": 0.50, \\"avocado\\": 1.25, \\"pear\\": 0.75 } \`\`\`","solution":"def parse_items_price(input_string): Parses a string containing comma-separated values representing a list of items and their prices, and returns a dictionary with the items as keys and their prices as values. Args: input_string (str): A string in the format \\"item1:price1, item2:price2, ...\\" Returns: dict: A dictionary with items as keys and their prices as values. items_prices = {} pairs = input_string.split(',') for pair in pairs: item, price = pair.strip().split(':') items_prices[item.strip()] = float(price.strip()) return items_prices"},{"question":"Design an efficient algorithm to detect and retrieve missed deadlines from a scheduler's task list. The scheduler handles multiple tasks with varied deadlines, and the goal is to identify all tasks that have not been completed within their deadlines. Implement the function missedDeadlines(tasks), where tasks is a list of dictionaries, each containing 'task_name', 'deadline' (in the format 'YYYY-MM-DD'), and 'completed' (a boolean indicating whether the task has been completed). The function should return a list of 'task_name' for tasks that missed their deadlines. Ensure your algorithm handles a large number of tasks efficiently. Example: \`\`\`python tasks = [ {'task_name': 'Project Report', 'deadline': '2023-09-10', 'completed': True}, {'task_name': 'Team Meeting', 'deadline': '2023-09-08', 'completed': False}, {'task_name': 'Code Review', 'deadline': '2023-09-07', 'completed': False}, {'task_name': 'Presentation', 'deadline': '2023-09-12', 'completed': True} ] missedDeadlines(tasks) \`\`\` Returns: \`\`\` ['Team Meeting', 'Code Review'] \`\`\`","solution":"from datetime import datetime def missedDeadlines(tasks): Returns a list of task names for tasks that missed their deadlines. Arguments: tasks -- list of dictionaries each containing 'task_name', 'deadline' (str), and 'completed' (bool) Returns: A list of task_name for tasks that have not been completed by their deadlines. current_date = datetime.now().date() missed_tasks = [] for task in tasks: deadline = datetime.strptime(task['deadline'], '%Y-%m-%d').date() if not task['completed'] and deadline < current_date: missed_tasks.append(task['task_name']) return missed_tasks"},{"question":"Write a function that takes an integer \`n\` and returns a list containing the first \`n\` numbers of the Fibonacci sequence. The Fibonacci sequence is defined such that each number is the sum of the two preceding ones, starting from 0 and 1. For example, the first 7 numbers in the Fibonacci sequence are: 0, 1, 1, 2, 3, 5, 8. **Input:** - \`n\`: An integer representing the number of Fibonacci numbers to return. (1 ≤ n ≤ 50) **Output:** - A list of integers representing the first \`n\` numbers in the Fibonacci sequence. **Example:** \`\`\` Input: 5 Output: [0, 1, 1, 2, 3] Input: 10 Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \`\`\` Ensure your solution efficiently handles the upper bound of the input size.","solution":"def fibonacci_sequence(n): Returns a list of the first n numbers in the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence[:n]"},{"question":"Write a function that accepts a list of integers and returns a new list containing only the first occurrence of unique integers, preserving their order from the original list. For instance, given the input list \`[1, 3, 3, 2, 1, 4, 5, 4, 2]\`, the function should return \`[1, 3, 2, 4, 5]\`. Implement this without using any built-in functions that directly result in the removal of duplicates. \`\`\`python def unique_elements(arr): # your code here pass # Example input list_d = [1, 3, 3, 2, 1, 4, 5, 4, 2] # Expected output # [1, 3, 2, 4, 5] \`\`\`","solution":"def unique_elements(arr): Returns a list containing only the first occurrence of unique integers, preserving their order. Parameters: arr (list): A list of integers. Returns: list: A list of unique integers in the order of their first occurrence. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Implement a recursive function to compute the nth value in a sequence where each element is the sum of its immediate predecessor (n-1) and the double of the predecessor before that (n-2). Ensure the function handles edge cases and does not exceed a recursion depth of 1000. Function prototype: \`\`\`python def compute_sequence(n): # your code here \`\`\` Constraints: * 1 <= n <= 1000 * The function should adhere to a maximum recursion depth and must avoid direct loops or iterations.","solution":"def compute_sequence(n): Given a number n, this function computes the nth value in a sequence where each element is the sum of its immediate predecessor (n-1) and the double of the predecessor before that (n-2). # Base cases if n == 1: return 1 if n == 2: return 2 # Recurrence relation of the sequence: seq(n) = seq(n-1) + 2 * seq(n-2) return compute_sequence(n-1) + 2 * compute_sequence(n-2)"},{"question":"Implement a function in Python that takes a list of dictionaries representing employees and their respective sales data and processes it using the Pandas library. The function should generate a report summarizing the total sales per employee, the average sales per employee, and identify the top performer. Finally, plot a bar chart visualizing the sales data for each employee using Matplotlib.","solution":"import pandas as pd import matplotlib.pyplot as plt def generate_sales_report(employees): Takes a list of dictionaries representing employees and their respective sales data, and generates a sales report. Parameters: employees (list): A list of dictionaries with keys 'name' and 'sales'. Returns: dict: A dictionary containing total sales per employee, average sales per employee, and top performer. df = pd.DataFrame(employees) total_sales = df.groupby('name')['sales'].sum().to_dict() average_sales = df.groupby('name')['sales'].mean().to_dict() top_performer = df.groupby('name')['sales'].sum().idxmax() # Visualization df.groupby('name')['sales'].sum().plot(kind='bar', title='Total Sales per Employee') plt.xlabel('Employee') plt.ylabel('Total Sales') plt.show() report = { 'total_sales': total_sales, 'average_sales': average_sales, 'top_performer': top_performer } return report"},{"question":"Write a Python function that takes a list of integers and returns a new list containing only the prime numbers from the original list. Use predefined functions to determine if a number is prime. Your solution should handle edge cases such as empty lists and lists with no primes. Be sure to optimize for efficiency by implementing a helper function to check for primality.","solution":"def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(lst): Returns a new list containing only the prime numbers from the original list. return [num for num in lst if is_prime(num)]"},{"question":"Given a string s and an integer k, find the length of the longest substring of s that contains at most k distinct characters. If there are multiple substrings of the same maximum length, return the first one by considering the earliest occurrence. Examples: s = \\"eceba\\" k = 2 Output: 3 (The substring is \\"ece\\" with distinct characters 'e' and 'c') s = \\"aa\\" k = 1 Output: 2 (The substring is \\"aa\\" with the distinct character 'a') s = \\"abdeefff\\" k = 3 Output: 6 (The substring is \\"deeff\\" with distinct characters 'd', 'e', and 'f') Your task is to complete the function to find and return the length of the longest substring with at most k distinct characters. You should also print the actual substring for reference. In the given examples, there are possible multiple valid substrings; you must ensure to handle the earliest occurrence for the correct output. \`\`\`python def longestKDistinctSubstring(s, k): from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0, \\"\\" char_count = defaultdict(int) left = 0 max_len = 0 max_substr = \\"\\" for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_substr = s[left:right+1] return max_len, max_substr # Testing s = \\"eceba\\" k = 2 print(longestKDistinctSubstring(s, k)) # Expected Output: (3, \\"ece\\") s = \\"aa\\" k = 1 print(longestKDistinctSubstring(s, k)) # Expected Output: (2, \\"aa\\") s = \\"abdeefff\\" k = 3 print(longestKDistinctSubstring(s, k)) # Expected Output: (6, \\"deeff\\") \`\`\`","solution":"def longestKDistinctSubstring(s, k): from collections import defaultdict n = len(s) if n == 0 or k == 0: return 0, \\"\\" char_count = defaultdict(int) left = 0 max_len = 0 max_substr = \\"\\" for right in range(n): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if right - left + 1 > max_len: max_len = right - left + 1 max_substr = s[left:right+1] return max_len, max_substr"},{"question":"Write a Python function that, given a list of words as input, returns a dictionary where the keys are the words, and the values are the counts of how many times each word appears in the list. The function should ignore case while counting occurrences.","solution":"def word_count(words): Given a list of words, returns a dictionary where the keys are the words (in lowercase), and the values are the counts of how many times each word appears in the list. Args: words (list): List of words (strings). Returns: dict: Dictionary with words as keys and their counts as values. count_dict = {} for word in words: word_lower = word.lower() if word_lower in count_dict: count_dict[word_lower] += 1 else: count_dict[word_lower] = 1 return count_dict"},{"question":"Write the following Python code: def frequency_counter(s): Develop a function to return the frequency of each character in the given string. The frequencies should be case insensitive and the result should be a dictionary sorted by the characters (keys). For example: >>> frequency_counter('Hello World') == {' ': 1, 'd': 1, 'e': 1, 'h': 1, 'l': 3, 'o': 2, 'r': 1, 'w': 1} >>> frequency_counter('') == {} # your code here","solution":"def frequency_counter(s): Returns the frequency of each character in the given string. The frequencies are case insensitive and the result is a dictionary sorted by the characters (keys). For example: >>> frequency_counter('Hello World') == {' ': 1, 'd': 1, 'e': 1, 'h': 1, 'l': 3, 'o': 2, 'r': 1, 'w': 1} >>> frequency_counter('') == {} freq_dict = {} for char in s.lower(): if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return dict(sorted(freq_dict.items()))"},{"question":"Craft a Python script leveraging the principles of recursion and dynamic programming to accurately solve the problem of calculating the minimum number of coins required to make a given amount of money based on a provided set of coin denominations. Ensure that the solution is efficient in terms of time and space complexity.","solution":"def min_coins(coins, amount): Returns the minimum number of coins required to make the given amount using the provided coin denominations. :param coins: List of coin denominations :param amount: The amount of money :return: Minimum number of coins required, or -1 if it is not possible to make the amount # Create a list to store the solution to sub-problems dp = [float('inf')] * (amount + 1) # Base case: 0 coins are needed to make the amount 0 dp[0] = 0 # Solve the problem for all amounts from 1 to amount for i in range(1, amount + 1): for coin in coins: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still infinity, it means we cannot make the amount return dp[amount] if dp[amount] != float('inf') else -1"},{"question":"Implement a function that processes a given list of customer orders, each containing multiple items with quantities. Your function should generate an invoice that aggregates the total quantities for each unique item across all orders, and sorts the items alphabetically by their names. The function should return the sorted list of items and their corresponding total quantities.","solution":"def generate_invoice(orders): Aggregates the total quantities for each unique item across all orders and sorts the items alphabetically by their names. The function returns the sorted list of items and their corresponding total quantities. Parameters: orders (list of dict): A list of dictionaries, where each dictionary represents a customer order. Each order dictionary contains items as keys and their quantities as values. Returns: list of tuple: A sorted list of tuples, each containing an item and its total quantity. from collections import defaultdict # Use a defaultdict to accumulate item quantities summary = defaultdict(int) for order in orders: for item, quantity in order.items(): summary[item] += quantity # Convert the summary dictionary to a sorted list of tuples invoice = sorted(summary.items()) return invoice"},{"question":"Design a Python function that takes a string containing a mix of uppercase and lowercase letters and returns a string where each letter is replaced by the next letter in the alphabet. If the letter is 'z' or 'Z', it wraps around to 'a' or 'A' respectively. String: \\"Hello WorldZ\\"","solution":"def shift_letters(text): Replaces each letter in the input text with the next letter in the alphabet. Wraps around if the letter is 'z' or 'Z'. shifted_text = [] for char in text: if 'a' <= char <= 'y': shifted_text.append(chr(ord(char) + 1)) elif char == 'z': shifted_text.append('a') elif 'A' <= char <= 'Y': shifted_text.append(chr(ord(char) + 1)) elif char == 'Z': shifted_text.append('A') else: shifted_text.append(char) return ''.join(shifted_text)"},{"question":"Write a function in Python to find the length of the longest substring without repeating characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A graphics software needs to implement a feature for drawing bezier curves using control points. Given four control points P0, P1, P2, and P3 in a 2D space, a bezier curve is defined by the following parametric equation for the x and y coordinates: B(t) = (1-t)^3 * P0 + 3 * (1-t)^2 * t * P1 + 3 * (1-t) * t^2 * P2 + t^3 * P3, for 0 ≤ t ≤ 1 Write a function in Python that takes as input the coordinates of the four control points and a value t, and returns the coordinates of the point on the bezier curve corresponding to t. The control points are provided as tuples in the format (x, y), and t is a float. The function should return the calculated point as a tuple (x, y). Note: Ensure the function handles cases where t is at the boundaries of its range (0 and 1) correctly.","solution":"def bezier_curve(P0, P1, P2, P3, t): Calculates the point on a Bezier curve given four control points and a parameter t. Parameters: - P0, P1, P2, P3: tuples representing the control points (x, y) - t: a float value between 0 and 1 inclusive Returns: - A tuple (x, y) representing the calculated point on the Bezier curve at parameter t x = (1-t)**3 * P0[0] + 3 * (1-t)**2 * t * P1[0] + 3 * (1-t) * t**2 * P2[0] + t**3 * P3[0] y = (1-t)**3 * P0[1] + 3 * (1-t)**2 * t * P1[1] + 3 * (1-t) * t**2 * P2[1] + t**3 * P3[1] return (x, y)"},{"question":"Write a Python script using the requests library to interact with a RESTful API. The script should include functionalities to make GET and POST requests. For the GET request, retrieve and display a list of items from the API. For the POST request, submit a new item to the API and handle potential errors. Ensure to include appropriate error checking and response handling to make the interactions with the API robust.","solution":"import requests def get_items(api_url): Fetches a list of items from the API and returns the list. try: response = requests.get(api_url) response.raise_for_status() except requests.RequestException as e: raise SystemExit(e) return response.json() def post_item(api_url, item_data): Submits a new item to the API and returns the response. try: response = requests.post(api_url, json=item_data) response.raise_for_status() except requests.RequestException as e: raise SystemExit(e) return response.json()"},{"question":"Design and implement a function that, given a list of integers and a target integer, returns the indices of the two numbers in the list that sum up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. # Function Signature \`\`\`python def two_sum(nums: List[int], target: int) -> List[int]: pass \`\`\` # Input - \`nums\`: A list of integers, e.g., \`[2, 7, 11, 15]\` - \`target\`: An integer, e.g., \`9\` # Output - A list of two indices, e.g., \`[0, 1]\`, where \`nums[0] + nums[1] == target\` # Example \`\`\`python # Example 1 nums = [2, 7, 11, 15] target = 9 # two_sum(nums, target) should return [0, 1] because nums[0] + nums[1] = 2 + 7 = 9 # Example 2 nums = [3, 2, 4] target = 6 # two_sum(nums, target) should return [1, 2] because nums[1] + nums[2] = 2 + 4 = 6 # Example 3 nums = [3, 3] target = 6 # two_sum(nums, target) should return [0, 1] because nums[0] + nums[1] = 3 + 3 = 6 \`\`\`","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Returns the indices of the two numbers from the list that add up to the target. num_map = {} for index, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], index] num_map[num] = index return []"},{"question":"A company maintains an electronic log of access records for a secure system. Each access log is represented by a string in the format \\"YYYY-MM-DD HH:MM:SS UserID Action\\", where \\"YYYY-MM-DD\\" is the date, \\"HH:MM:SS\\" is the time, \\"UserID\\" is the identifier of the user accessing the system, and \\"Action\\" is either \\"LOGIN\\" or \\"LOGOUT\\". Write a function \`find_max_concurrent_users(logs)\` that takes a list of such log strings and returns the maximum number of concurrent users logged into the system at any point in time. \`\`\`python def find_max_concurrent_users(logs): pass # Example Usage: logs = [ \\"2023-10-01 08:00:00 user1 LOGIN\\", \\"2023-10-01 08:10:00 user2 LOGIN\\", \\"2023-10-01 08:15:00 user1 LOGOUT\\", \\"2023-10-01 08:20:00 user3 LOGIN\\", \\"2023-10-01 08:30:00 user2 LOGOUT\\", \\"2023-10-01 08:40:00 user3 LOGOUT\\" ] # The max concurrent users would be: # At 08:10:00, user1 and user2 are logged in (2 users). # At 08:20:00, user2 and user3 are logged in (2 users). # So, the function should return 2. print(find_max_concurrent_users(logs)) # Output: 2 \`\`\`","solution":"def find_max_concurrent_users(logs): events = [] for log in logs: parts = log.split() timestamp = parts[0] + \\" \\" + parts[1] user = parts[2] action = parts[3] events.append((timestamp, action)) events.sort() # Sort events by timestamp max_users = 0 current_users = 0 for event in events: if event[1] == \\"LOGIN\\": current_users += 1 if current_users > max_users: max_users = current_users else: current_users -= 1 return max_users"},{"question":"Write a function that takes a list of integers and a target number. The function should find two distinct integers in the list that add up to the target number. Return the indices of these two numbers in the form of a tuple. If no such pair exists, return -1. **Example:** \`\`\`python find_pair([2, 7, 11, 15], 9) -> (0, 1) find_pair([1, 2, 3, 4, 5], 10) -> -1 find_pair([3, 2, 4], 6) -> (1, 2) \`\`\` **Constraints:** - Each input list will have at least two elements. - Each element in the list is a positive integer. **Function Signature:** \`\`\`python def find_pair(nums: list[int], target: int) -> tuple[int, int] | int: pass \`\`\`","solution":"def find_pair(nums, target): Finds two distinct integers in the list that add up to the target number. Returns their indices as a tuple. If no such pair exists, returns -1. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return -1"},{"question":"Given an array of integers, write a function to find the longest contiguous subarray that sums up to a specified target value. The function should return the length of this subarray. If no such subarray exists, the function should return 0. The input to the function will be the array of integers and the target sum. Consider both positive and negative integers in the array. Example: - Input: array = [1, -1, 5, -2, 3], target = 3 - Output: 4 (The subarray [1, -1, 5, -2] sums up to 3) - Input: array = [-2, -1, 2, 1], target = 1 - Output: 2 (The subarray [-1, 2] sums up to 1)","solution":"def longest_subarray_with_sum(array, target): Finds the longest contiguous subarray that sums up to the specified target value and returns its length. If no such subarray exists, returns 0. sum_to_index = {0: -1} current_sum = 0 max_length = 0 for i, num in enumerate(array): current_sum += num if current_sum - target in sum_to_index: max_length = max(max_length, i - sum_to_index[current_sum - target]) if current_sum not in sum_to_index: sum_to_index[current_sum] = i return max_length"},{"question":"Design and implement a RESTful API service for managing a library's catalog of books using a programming language and framework of your choice. The service should support the following operations: 1. Add a new book with details like title, author, ISBN, genre, and publication date. 2. Retrieve details of a specific book by its ISBN. 3. Update details of an existing book. 4. Delete a book from the catalog. 5. List all books, with optional filtering by genre and/or author. Additionally, provide unit tests to verify the functionality of your service. Include comprehensive documentation outlining the API endpoints, request/response formats, and how to run the service as well as the unit tests. Describe any challenges you faced during development and how you addressed them, and justify the choice of language and framework for this task. Provide source code and documentation for evaluation.","solution":"from fastapi import FastAPI, HTTPException from pydantic import BaseModel from typing import List, Optional from uuid import uuid4 app = FastAPI() class Book(BaseModel): title: str author: str ISBN: str genre: str publication_date: str class UpdateBook(BaseModel): title: Optional[str] = None author: Optional[str] = None genre: Optional[str] = None publication_date: Optional[str] = None books_db = {} @app.post(\\"/books/\\", response_model=Book) def add_book(book: Book): if book.ISBN in books_db: raise HTTPException(status_code=400, detail=\\"Book with this ISBN already exists.\\") books_db[book.ISBN] = book return book @app.get(\\"/books/{isbn}\\", response_model=Book) def get_book(isbn: str): if isbn not in books_db: raise HTTPException(status_code=404, detail=\\"Book not found.\\") return books_db[isbn] @app.put(\\"/books/{isbn}\\", response_model=Book) def update_book(isbn: str, book_update: UpdateBook): if isbn not in books_db: raise HTTPException(status_code=404, detail=\\"Book not found.\\") updated_book = books_db[isbn].copy(update=book_update.dict(exclude_unset=True)) books_db[isbn] = updated_book return updated_book @app.delete(\\"/books/{isbn}\\", response_model=dict) def delete_book(isbn: str): if isbn not in books_db: raise HTTPException(status_code=404, detail=\\"Book not found.\\") del books_db[isbn] return {\\"detail\\": \\"Book deleted successfully.\\"} @app.get(\\"/books/\\", response_model=List[Book]) def list_books(genre: Optional[str] = None, author: Optional[str] = None): results = [book for book in books_db.values()] if genre: results = [book for book in results if book.genre == genre] if author: results = [book for book in results if book.author == author] return results"},{"question":"Craft a Python function named \`find_longest_word\` that takes a single argument, a list of strings. This function should return the longest word in the list. In case of a tie (multiple words having the same maximum length), return the word that appears first in the list. Ensure your function handles the possibility of an empty list by returning an empty string.","solution":"def find_longest_word(words): Returns the longest word in the list of words. In case of a tie, returns the word that appears first. If the list is empty, returns an empty string. if not words: return \\"\\" longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Write a function that determines whether a given integer is a \\"Harshad number\\" (also known as a \\"Niven number\\"). A Harshad number is an integer that is divisible by the sum of its digits. The function should take an integer as input and return \`True\` if the number is a Harshad number, and \`False\` otherwise.","solution":"def is_harshad_number(n): Returns True if \`n\` is a Harshad number, otherwise returns False. A Harshad number is an integer that is divisible by the sum of its digits. if n == 0: return False digit_sum = sum(int(digit) for digit in str(n)) return n % digit_sum == 0"},{"question":"Devise a function that calculates the longest subsequence where every character appears at least 'k' times in a given string. The function should be efficient and avoid redundant calculations by using a divide and conquer approach. The output should be the length of this maximum subsequence. Refrain from using Python's built-in string functions that simplify this task and do not resort to external libraries. def longest_subsequence_k_times(s: str, k: int) -> int: Returns the length of the longest possible subsequence in which every character appears at least 'k' times. This function should leverage a divide and conquer strategy to achieve the result efficiently. It avoids the use of Python's built-in functions that would make this task trivial. >>> longest_subsequence_k_times(\\"aaabb\\", 3) 3 >>> longest_subsequence_k_times(\\"ababbc\\", 2) 5 pass","solution":"def longest_subsequence_k_times(s: str, k: int) -> int: Returns the length of the longest possible subsequence in which every character appears at least 'k' times. This function employs a divide and conquer strategy. def helper(start, end): if end - start < k: return 0 count = {} for i in range(start, end): if s[i] in count: count[s[i]] += 1 else: count[s[i]] = 1 for mid in range(start, end): if count[s[mid]] < k: left = helper(start, mid) right = helper(mid + 1, end) return max(left, right) return end - start return helper(0, len(s))"},{"question":"Consider you have an ordered warehouse management system where products are stored by their weights. The lightweight products are always stored towards the front and heavier ones towards the back. The system needs to allow addition of new products while maintaining the order by their weights. You are required to design the main functionality based on the provided requirements. # Instructions: 1. Implement a class called \`Warehouse\` that includes the following methods: - \`add_product(weight: int) -> None\`: This method adds a product to the warehouse by its weight. Ensure the order of the products by their weights is maintained after the addition. - \`get_products() -> List[int]\`: This method returns a list of weights of all products in the warehouse in ascending order. 2. You are restricted from using any built-in sorting functions for maintaining the order while adding a new product. # Constraints: - Each weight will be a positive integer. - The warehouse can hold multiple products with the same weight. # Example: \`\`\`python # Create an instance of the Warehouse class wh = Warehouse() # Add products with weights 4, 1, 3, and 2 wh.add_product(4) wh.add_product(1) wh.add_product(3) wh.add_product(2) # Retrieve the ordered list of products by their weights print(wh.get_products()) # Output: [1, 2, 3, 4] \`\`\` # Notes: - Ensure your solution is efficient in terms of time complexity for addition of products and retrieval of the products list. - Focus on writing clean and maintainable code, adhering to principles of object-oriented programming.","solution":"from typing import List class Warehouse: def __init__(self): self.products = [] def add_product(self, weight: int) -> None: Adds a product to the warehouse by its weight, maintaining the order of products by their weights. # Find the right position to insert the new weight if not self.products: self.products.append(weight) else: for i in range(len(self.products)): if self.products[i] > weight: self.products.insert(i, weight) break else: self.products.append(weight) def get_products(self) -> List[int]: Returns a list of weights of all products in the warehouse in ascending order. return self.products"},{"question":"Design a function that takes a string containing a mathematical expression with non-negative integers and the operators +, -, *, / and returns the result of the expression. Implement the function to handle the operator precedence correctly (multiplication and division before addition and subtraction). You may assume the expression is well-formed, and there is no need for parentheses. # Example Input \`\`\` \\"2+3*4-8/2\\" \`\`\` # Example Output \`\`\` 10 \`\`\` # Constraints - The input will be a non-empty string. - The input string will not contain any whitespace. - The input string will only contain integers (0-9) and the operators +, -, *, /. # Function Signature \`\`\`python def evaluate_expression(expression: str) -> int: pass \`\`\` # Explanation The function should parse the input string, handle the operations with the correct precedence, and return the integer result of the expression. For the given example, we evaluate 3*4 first (resulting in 12), followed by 8/2 (resulting in 4), then do 2 + 12 (resulting in 14), and finally 14 - 4 (resulting in 10).","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression string containing non-negative integers and the operators +, -, *, / and returns the result of the expression. It handles operator precedence correctly. def operate(op, second, first): if op == '+': return first + second if op == '-': return first - second if op == '*': return first * second if op == '/': return first // second # Two stacks: one for numbers and one for operators num_stack = [] op_stack = [] i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 num_stack.append(num) i -= 1 else: while (op_stack and op_stack[-1] in \\"*/\\" and expression[i] in \\"+-*/\\") or (op_stack and expression[i] in \\"+-\\" and op_stack[-1] in \\"+-\\"): num_stack.append(operate(op_stack.pop(), num_stack.pop(), num_stack.pop())) op_stack.append(expression[i]) i += 1 while op_stack: num_stack.append(operate(op_stack.pop(), num_stack.pop(), num_stack.pop())) return num_stack[0]"},{"question":"Given the following implementation of a function \`generate_fibonacci\` that generates a list of Fibonacci numbers up to a certain count, identify and correct all errors to make the code functional. The corrected code should be able to correctly generate a Fibonacci sequence up to the given number. \`\`\`python d3f generate fibonacci(n): fib_series = [0, 1] for i in ragne(2, n): next value = fib_series[-1] + fib_seriex[-2] fib_series(appand(next value)) return fib_series # Usage: print(generate_fibonacci(10)) # Expected output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] print(generate_fibonacci(0)) # Expected output: [] print(generate_fibonacci(1)) # Expected output: [0] print(generate_fibonacci(2)) # Expected output: [0, 1] \`\`\` Errors to fix: 1. Correct the function definition syntax. 2. Fix the range function's misspelling. 3. Correct the variable name and method to append the next value to the Fibonacci series list. 4. Handle edge cases where \`n\` is 0 or 1.","solution":"def generate_fibonacci(n): Generates a list of Fibonacci numbers up to the given count n. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_series = [0, 1] for i in range(2, n): next_value = fib_series[-1] + fib_series[-2] fib_series.append(next_value) return fib_series # Usage: # print(generate_fibonacci(10)) # Expected output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] # print(generate_fibonacci(0)) # Expected output: [] # print(generate_fibonacci(1)) # Expected output: [0] # print(generate_fibonacci(2)) # Expected output: [0, 1]"},{"question":"Write a Python function that takes a list of integers and returns the second largest unique number in the list. If there is no second largest unique number, or if the list is empty, the function should return None. Do not use Python’s built-in sorting functions for this task. For example, for the input [3, 5, 7, 5, 6, 7], the function should return 6 because 7 is the largest unique number and 6 is the second largest unique number. For an input like [5, 5, 5], the function should return None as there is no second largest unique number. Also, provide an erroneous version of this code snippet which incorrectly returns the largest number instead of the second largest. Correct the mistake and explain the change made.","solution":"def second_largest_unique(numbers): Returns the second largest unique number in the list. If there is no second largest unique number, or if the list is empty, return None. if not numbers: return None unique_numbers = set(numbers) if len(unique_numbers) < 2: return None max_num = float('-inf') second_max_num = float('-inf') for num in unique_numbers: if num > max_num: second_max_num = max_num max_num = num elif num > second_max_num: second_max_num = num return second_max_num"},{"question":"Develop a Python program that takes two strings as input and finds the longest common subsequence (LCS) between them. The program should then return the LCS and its length. For example, given the strings: str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB\\" The program should output: LCS: \\"GTAB\\" Length: 4","solution":"def longest_common_subsequence(str1, str2): Find and return the longest common subsequence (LCS) of two strings and its length. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: tuple: The LCS string and its length. # Create a matrix to store the lengths of LCS m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Reconstruct the LCS from the dp matrix index = dp[m][n] lcs = [\\"\\"] * index i, j = m, n while i > 0 and j > 0: if str1[i - 1] == str2[j - 1]: lcs[index - 1] = str1[i - 1] i -= 1 j -= 1 index -= 1 elif dp[i - 1][j] > dp[i][j - 1]: i -= 1 else: j -= 1 lcs_string = \\"\\".join(lcs) return lcs_string, len(lcs_string)"},{"question":"The following function attempts to find and return the most frequent element in a given list of numbers. However, as it currently stands, it contains multiple mistakes. Please debug and correct the function so that it works as intended. \`\`\`python def most_frequent_element(lst): count_dict = {} for num in lst: if num not in count_dict: count_dict[num] = 1 else: count_dict[num] += 1 max_count = -1 most_frequent = None for key in count_dict: if count_dict[key] > max_count: max_count = count_dict[key] most_frequent = key return most_frequent # Test case print(most_frequent_element([1, 3, 1, 3, 2, 1])) # Expected output: 1 \`\`\` In addition to correcting the errors, provide a brief explanation of the changes you made and why they were necessary.","solution":"def most_frequent_element(lst): count_dict = {} for num in lst: if num not in count_dict: count_dict[num] = 1 else: count_dict[num] += 1 max_count = -1 most_frequent = None for key in count_dict: if count_dict[key] > max_count: max_count = count_dict[key] most_frequent = key return most_frequent # Test case print(most_frequent_element([1, 3, 1, 3, 2, 1])) # Expected output: 1"},{"question":"Given a list of unique integers \`nums\` and an integer \`target\`, your task is to return the indices of the two numbers such that they add up to \`target\`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, we return [1, 2]. Constraints: - \`2 <= nums.length <= 10^4\` - \`-10^9 <= nums[i] <= 10^9\` - \`-10^9 <= target <= 10^9\` - Only one valid answer exists.","solution":"def two_sum(nums, target): Returns the indices of the two numbers in the list \`nums\` that add up to \`target\`. lookup = {} for i, num in enumerate(nums): complement = target - num if complement in lookup: return [lookup[complement], i] lookup[num] = i"},{"question":"Develop a Python application to create a bookstore management system. The application should provide functionalities to add new books, search for books based on various criteria (e.g., title, author, genre, ISBN), and update book information (e.g., price, stock quantity). Books should be stored with relevant details such as title, author, genre, ISBN, price, and stock quantity. Your application should also include features for tracking sales and generating sales reports. The sales reports should summarize the total number of books sold, total revenue earned, and the most popular books within a given time period. Implement the ability to handle exception scenarios such as invalid input data, book not found, and insufficient stock during sales transactions. Additionally, ensure the storage of book and sales information in a reliable way (using an appropriate database or file system) and incorporate basic security measures to prevent unauthorized access to sensitive operations. Finally, write unit tests to validate each feature of your application, and ensure your program demonstrates the use of design patterns and clean code principles.","solution":"import json from datetime import datetime # The unified in-memory storage store = { 'books': [], 'sales': [] } # Exception Classes class BookNotFoundException(Exception): pass class InsufficientStockException(Exception): pass class Book: def __init__(self, title, author, genre, isbn, price, stock_quantity): self.title = title self.author = author self.genre = genre self.isbn = isbn self.price = price self.stock_quantity = stock_quantity class Bookstore: @staticmethod def load_data(): try: with open('bookstore_data.json', 'r') as file: global store store = json.load(file) except FileNotFoundError: pass # No existing data, that's fine. @staticmethod def save_data(): with open('bookstore_data.json', 'w') as file: json.dump(store, file) @staticmethod def add_book(book): store['books'].append(book.__dict__) Bookstore.save_data() @staticmethod def search_book(criteria): results = [book for book in store['books'] if all(book[k] == v for k, v in criteria.items())] return results @staticmethod def update_book(isbn, **updates): for book in store['books']: if book['isbn'] == isbn: book.update(updates) Bookstore.save_data() return True raise BookNotFoundException(\\"Book with the given ISBN not found.\\") @staticmethod def record_sale(isbn, quantity): for book in store['books']: if book['isbn'] == isbn: if book['stock_quantity'] < quantity: raise InsufficientStockException(\\"Not enough stock available.\\") book['stock_quantity'] -= quantity sale_record = { 'isbn': isbn, 'quantity': quantity, 'revenue': quantity * book['price'], 'date': datetime.now().isoformat() } store['sales'].append(sale_record) Bookstore.save_data() return raise BookNotFoundException(\\"Book with the given ISBN not found.\\") @staticmethod def generate_sales_report(start_date, end_date): start_date = datetime.fromisoformat(start_date) end_date = datetime.fromisoformat(end_date) total_sold = 0 total_revenue = 0 popularity_tracker = {} for sale in store['sales']: sale_date = datetime.fromisoformat(sale['date']) if start_date <= sale_date <= end_date: total_sold += sale['quantity'] total_revenue += sale['revenue'] if sale['isbn'] in popularity_tracker: popularity_tracker[sale['isbn']] += sale['quantity'] else: popularity_tracker[sale['isbn']] = sale['quantity'] most_popular = max(popularity_tracker, key=popularity_tracker.get, default=None) most_popular_books = [book for book in store['books'] if book['isbn'] == most_popular][0] if most_popular else None report = { 'total_books_sold': total_sold, 'total_revenue': total_revenue, 'most_popular_books': most_popular_books } return report"},{"question":"Design and implement a class called 'CircularQueue' for a circular queue implementation with a specified fixed size. The class should support the following methods: 1. **enqueue(element)**: Adds an element to the end of the circular queue. If the queue is full, it should return properly indicating that the operation cannot be performed. 2. **dequeue()**: Removes and returns the front element from the circular queue. If the queue is empty, it should return properly indicating that the operation cannot be performed. 3. **peek()**: Returns the front element without removing it. If the queue is empty, it should return properly indicating that there are no elements to show. 4. **isFull()**: Checks if the circular queue is full and returns a boolean value. 5. **isEmpty()**: Checks if the circular queue is empty and returns a boolean value. Additionally, you need to handle the wrap-around nature of the circular queue to ensure elements are correctly added and removed in a circular fashion. Here's an example to clarify the expected behavior: \`\`\` cq = CircularQueue(3) cq.enqueue(1) cq.enqueue(2) cq.enqueue(3) print(cq.isFull()) # Output: True print(cq.dequeue()) # Output: 1 cq.enqueue(4) print(cq.peek()) # Output: 2 print(cq.isFull()) # Output: True print(cq.isEmpty()) # Output: False cq.dequeue() cq.dequeue() cq.dequeue() print(cq.isEmpty()) # Output: True \`\`\` Make sure to include edge cases, such as attempting to dequeue or peek from an empty queue and attempting to enqueue to a full queue.","solution":"class CircularQueue: def __init__(self, size: int): self.size = size self.queue = [None] * size self.front = self.rear = -1 def enqueue(self, element): if self.isFull(): return \\"Queue is full\\" if self.isEmpty(): self.front = 0 self.rear = (self.rear + 1) % self.size self.queue[self.rear] = element def dequeue(self): if self.isEmpty(): return \\"Queue is empty\\" element = self.queue[self.front] self.queue[self.front] = None if self.front == self.rear: self.front = self.rear = -1 else: self.front = (self.front + 1) % self.size return element def peek(self): if self.isEmpty(): return \\"Queue is empty\\" return self.queue[self.front] def isFull(self): return (self.rear + 1) % self.size == self.front def isEmpty(self): return self.front == -1"},{"question":"Complete the function that takes a string as input and rearranges the characters such that no two adjacent characters are the same. If it is not possible to rearrange the characters to meet this requirement, the function should return an empty string. The function should try to maintain the original character's frequency as much as possible. Example: \`\`\` Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" \`\`\`","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the input string such that no two adjacent characters are the same. If it is not possible, returns an empty string. freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, '' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 # decrement count (i.e., increase the negative counter) prev_char = char return ''.join(result) if len(result) == len(s) else ''"},{"question":"You have been given a string representing a mathematical expression involving non-negative integers and the operators +, -, * and / (without parentheses). Your task is to evaluate the expression and return the result as an integer. Note that integer division should truncate towards zero. For example: \`\`\` Input: \\"3+2*2\\" Output: 7 Input: \\" 3/2 \\" Output: 1 Input: \\" 3+5 / 2 \\" Output: 5 \`\`\` You may assume that the given input is always valid. Implement a function \`calculate(s: str) -> int\` in Python that performs this computation. Function Signature: \`\`\`python def calculate(s: str) -> int: \`\`\` # Constraints: 1. The length of the input string will not exceed 10^5. 2. The input string is valid and contains only digits, '+', '-', '*', '/' and spaces.","solution":"def calculate(s: str) -> int: Evaluate a mathematical expression string involving non-negative integers and the operators +, -, *, and / (without parentheses). Parameters: s (str): The input string representing the expression. Returns: int: The result of evaluating the expression. s = s.replace(\\" \\", \\"\\") num_stack = [] num = 0 sign = '+' i = 0 while i < len(s): char = s[i] if char.isdigit(): num = num * 10 + int(char) if char in '+-*/' or i == len(s) - 1: if sign == '+': num_stack.append(num) elif sign == '-': num_stack.append(-num) elif sign == '*': num_stack.append(num_stack.pop() * num) elif sign == '/': top = num_stack.pop() if top < 0: num_stack.append(-(-top // num)) else: num_stack.append(top // num) sign = char num = 0 i += 1 return sum(num_stack)"},{"question":"Create a function that determines if an input string is a palindrome, ignoring any non-alphanumeric characters and treating uppercase and lowercase letters as equivalent. A palindrome is a word, phrase, or sequence that reads the same backward as forward. The function must also check that the input is a valid string and not empty. def is_palindrome(input_str): if not isinstance(input_str, str) or not input_str: raise ValueError('Input must be a non-empty string') filtered_str = ''.join(char.lower() for char in input_str if char.isalnum()) return filtered_str == filtered_str[::-1]","solution":"def is_palindrome(input_str): Checks if the input string is a palindrome, ignoring non-alphanumeric characters and treating uppercase and lowercase letters as equivalent. if not isinstance(input_str, str) or not input_str: raise ValueError('Input must be a non-empty string') filtered_str = ''.join(char.lower() for char in input_str if char.isalnum()) return filtered_str == filtered_str[::-1]"},{"question":"Create a function in Python that receives an arithmetical expression as a string and evaluates its value. The function should be able to handle positive and negative integers, the four basic arithmetic operations (addition, subtraction, multiplication, and division), and respect the order of operations (parentheses and operator precedence). For elucidation, the string \\"3 + 5 * (2 - 8)\\" should return -13. If the input string contains invalid characters or syntax, the function should raise a ValueError with an appropriate message.","solution":"def evaluate_expression(expression): Evaluate an arithmetic expression given as a string and return its value. Parameters: expression (str): The arithmetic expression to evaluate. Returns: int/float: The result of the evaluated expression. Raises: ValueError: If the expression contains invalid characters or syntax. import re # Remove any whitespace expression = expression.replace(\\" \\", \\"\\") # Valid characters are digits, operators, and parentheses if not re.match(r'^[0-9+-*/()]*', expression): raise ValueError(\\"Invalid characters in expression\\") try: # Evaluate the expression safely using eval result = eval(expression) except SyntaxError: raise ValueError(\\"Invalid syntax in expression\\") return result"},{"question":"Write a program to simulate a simplified version of a library management system. The system should perform the following operations: 1. **Add Book**: Add a book's title and author to the library's collection. 2. **Borrow Book**: Borrow a book by title. The system should track who borrowed the book and change the book's status to 'borrowed'. 3. **Return Book**: Return a borrowed book by title. The system should change the book's status back to 'available'. 4. **List Books**: List all books currently in the library, showing their title, author, and whether they are borrowed or available. 5. **Search Book**: Search for a book by title or author, returning whether the book is found in the library or not and its current status. Your program should handle invalid operations gracefully, such as trying to borrow a book that is already borrowed, trying to return a book that wasn't borrowed, or trying to operate on a book that doesn't exist in the library. The program should continue to accept and process commands until a special \\"EXIT\\" command is issued. You can assume that book titles and author names are unique for simplicity.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title, author): if title in self.books: return \\"Book already exists in the collection.\\" self.books[title] = {'author': author, 'status': 'available'} return \\"Book added successfully.\\" def borrow_book(self, title, borrower): if title not in self.books: return \\"Book not found in the collection.\\" if self.books[title]['status'] == 'borrowed': return \\"Book is already borrowed.\\" self.books[title]['status'] = 'borrowed' self.books[title]['borrower'] = borrower return \\"Book borrowed successfully.\\" def return_book(self, title): if title not in self.books: return \\"Book not found in the collection.\\" if self.books[title]['status'] == 'available': return \\"Book was not borrowed.\\" self.books[title]['status'] = 'available' self.books[title].pop('borrower', None) return \\"Book returned successfully.\\" def list_books(self): return {title: {'author': book_info['author'], 'status': book_info['status']} for title, book_info in self.books.items()} def search_book(self, query): results = {title: {'author': book_info['author'], 'status': book_info['status']} for title, book_info in self.books.items() if query in title or query in book_info['author']} return results if results else \\"No books found matching the query.\\""},{"question":"Design a function in Python that takes a 2D matrix (a list of lists) representing a Sudoku puzzle and determines if it is a valid partially filled Sudoku board. A valid Sudoku board (partially filled) will not contain any duplicates within a row, a column, or any of the 3x3 sub-grids (also known as boxes). The function should return True if the board is valid, and False otherwise. The board may also contain empty cells, denoted by the character '.'. **Input:** A 2D matrix board where each element is either a digit '1'-'9' or a '.' character. **Output:** A boolean value indicating whether the board is valid. **Example:** \`\`\`python boardis_valid_sudoku(board) # Output: True \`\`\` **Requirements:** - Your solution should consider edge cases such as different board sizes and the presence of invalid characters. - Aim for an optimal solution, considering the constraints that are generally applied to Sudoku puzzles.","solution":"def is_valid_sudoku(board): def is_valid_block(block): block = [num for num in block if num != '.'] return len(block) == len(set(block)) def is_valid_row(board): for row in board: if not is_valid_block(row): return False return True def is_valid_col(board): for col in zip(*board): if not is_valid_block(col): return False return True def is_valid_subgrid(board): for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_block(block): return False return True return is_valid_row(board) and is_valid_col(board) and is_valid_subgrid(board)"},{"question":"Using the Pandas and Numpy libraries, write a Python function that reads a CSV file containing time series data of stock prices. The function should compute and return the moving average for a specified window size. Additionally, plot the original time series data and the moving average on the same graph using Matplotlib. Ensure the function handles missing data by filling gaps using forward fill method.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def compute_moving_average(file_path, column_name, window_size): Reads a CSV file, computes the moving average for the specified window size, handles missing data, and plots the original time series data and the moving average on the same graph. Parameters: file_path (str): Path to the CSV file. column_name (str): The column containing the stock prices. window_size (int): The window size for calculating the moving average. Returns: pd.Series: The moving average series. # Read the CSV file df = pd.read_csv(file_path) # Handle missing data by filling gaps using forward fill method df[column_name].ffill(inplace=True) # Compute the moving average moving_average = df[column_name].rolling(window=window_size).mean() # Plot the original time series data and the moving average plt.figure(figsize=(10, 6)) plt.plot(df[column_name], label='Original') plt.plot(moving_average, label=f'Moving Average (window={window_size})', linestyle='--') plt.xlabel('Time') plt.ylabel('Stock Prices') plt.legend() plt.title('Stock Prices and Moving Average') plt.show() return moving_average"},{"question":"Implement a K-means clustering algorithm to categorize retail customers into different segments based on their purchasing behavior from the given dataset. [Specifications of the Dataset] The dataset comprises three thousand customer records from a leading e-commerce platform. Each entry includes five principal attributes: - Customer ID - Frequency of Purchases - Average Purchase Value - Age of the Customer - Customer Rating (a score between 1 and 10 based on feedback) The goal is to identify customer segments that exhibit similar purchasing patterns to streamline marketing strategies and enhance customer experience. It's crucial to determine the optimal number of clusters (k) using the elbow method and provide a proper analysis of the resultant clusters.","solution":"import numpy as np import pandas as pd from sklearn.cluster import KMeans import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler def kmeans_clustering(file_path): Performs K-means clustering on the customer dataset to categorize retail customers into different segments. Args: file_path (str): Path to the CSV file containing the dataset. Returns: dict: A dictionary containing cluster labels and the optimal number of clusters. # Load dataset df = pd.read_csv(file_path) # Extract relevant features X = df[['Frequency of Purchases', 'Average Purchase Value', 'Age of the Customer', 'Customer Rating']] # Normalize the data scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Find the optimal number of clusters using the elbow method wcss = [] for i in range(1, 11): kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42) kmeans.fit(X_scaled) wcss.append(kmeans.inertia_) # Plot the elbow method plt.plot(range(1, 11), wcss) plt.title('Elbow Method') plt.xlabel('Number of clusters') plt.ylabel('WCSS') plt.show() # From the elbow plot, we observe the optimal number of clusters (k) # For demonstration, let's assume k=4 based on the plot optimal_k = 4 # Apply K-means to the dataset using optimal_k kmeans = KMeans(n_clusters=optimal_k, init='k-means++', max_iter=300, n_init=10, random_state=42) kmeans.fit(X_scaled) df['Cluster'] = kmeans.labels_ # Sort data by cluster df = df.sort_values('Cluster') # Return the clusters and optimal k return {'clusters': df.to_dict(orient='records'), 'optimal_k': optimal_k}"},{"question":"Implement a function to simulate a modified version of the classic Fibonacci sequence, where each number is the sum of the previous three numbers instead of the previous two. Names this sequence the \\"Tribonacci sequence.\\" Define a function that takes an integer n and returns the n-th Tribonacci number using dynamic programming to optimize the computation. Ensure the function efficiently handles larger values of n by minimizing redundant calculations. Incorporate error handling to manage invalid inputs like negative integers. def tribonacci(n: int): # Your code here","solution":"def tribonacci(n): Returns the n-th Tribonacci number. The Tribonacci sequence is a sequence of numbers where each number is the sum of the previous three numbers, starting with 0, 1, and 1. Parameters: n (int): The position in the Tribonacci sequence to retrieve. Returns: int: The n-th Tribonacci number. # Error handling for invalid inputs if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") # Base cases if n == 0: return 0 elif n == 1 or n == 2: return 1 # Initialize the base values trib = [0, 1, 1] # Use dynamic programming to build the sequence up to n for i in range(3, n + 1): next_val = trib[-1] + trib[-2] + trib[-3] trib.append(next_val) return trib[n]"},{"question":"Write a python function to determine if a given string is a valid palindrome, ignoring non-alphanumeric characters and case differences. Implement this function using recursion without using any built-in string manipulation functions. Ensure that your solution has a space complexity of O(n) using the call stack.","solution":"def is_palindrome_recursive(s): Determines if a given string is a valid palindrome, ignoring non-alphanumeric characters and case differences. This function uses recursion and has O(n) space complexity. def helper(left, right): while left < right and not s[left].isalnum(): left += 1 while left < right and not s[right].isalnum(): right -= 1 if left >= right: return True if s[left].lower() != s[right].lower(): return False return helper(left + 1, right - 1) return helper(0, len(s) - 1)"},{"question":"Create a function to normalize phone numbers into a standard format. The standard format should be \`(XXX) XXX-XXXX\`. Your function should be able to handle input phone numbers in the following formats: 1. 123-456-7890 2. (123) 456-7890 3. 123.456.7890 4. 123 456 7890 5. +1-123-456-7890 6. +1 (123) 456-7890 7. +1.123.456.7890 8. +1 123 456 7890 The function should ignore any country codes, extensions, or other additional characters and only format the 10-digit US phone number. Write a function \`normalize_phone_number(phone_number: str) -> str\` that takes a phone number as input and returns the normalized phone number. For example: - If the input is \\"123-456-7890\\", the output should be \\"(123) 456-7890\\". - If the input is \\"+1 (123) 456-7890\\", the output should be \\"(123) 456-7890\\". - If the input is \\"123.456.7890\\", the output should be \\"(123) 456-7890\\". You can assume that all phone numbers passed to your function are valid and well-formed according to the formats mentioned above. The function should only use regex and string manipulation methods and should not rely on any external libraries for phone number parsing.","solution":"import re def normalize_phone_number(phone_number: str) -> str: Normalizes phone numbers into the (XXX) XXX-XXXX format. # Remove all non-digit characters digits = re.sub(r'D', '', phone_number) # Extract the last 10 digits assuming they represent the US phone number normalized_digits = digits[-10:] # Format the digits into the (XXX) XXX-XXXX format normalized_phone_number = f\\"({normalized_digits[:3]}) {normalized_digits[3:6]}-{normalized_digits[6:]}\\" return normalized_phone_number"},{"question":"Calculate the sum of all prime numbers less than a given positive integer \`n\`. Write a function that accepts an integer \`n\` and returns this sum. For instance, if \`n\` is 10, the prime numbers less than 10 are 2, 3, 5, and 7, and their sum is 17.","solution":"def is_prime(num): Check if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while (i * i) <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_primes(n): Calculate the sum of all prime numbers less than a given number n. sum_primes = 0 for num in range(2, n): if is_prime(num): sum_primes += num return sum_primes"},{"question":"Write a function that takes in a list of strings and a list of punctuation marks. The function should return a list of strings where each string has the punctuation marks removed and is converted to lowercase. Additionally, the function should filter out any strings that contain numeric digits. string_list = [\\"Hello, World!\\", \\"Python3.0 is great\\", \\"Data-Science!\\"] punctuation_marks = [\\",\\", \\".\\", \\"-\\", \\"!\\"]","solution":"def clean_strings(string_list, punctuation_marks): Returns a list of strings where punctuation marks are removed, strings are converted to lowercase, and strings containing numeric digits are filtered out. :param string_list: List of strings to clean. :param punctuation_marks: List of punctuation marks to remove. :return: cleaned list of strings. cleaned_strings = [] for string in string_list: # Remove punctuation marks for mark in punctuation_marks: string = string.replace(mark, \\"\\") # Convert to lowercase string = string.lower() # Filter out strings containing numeric digits if not any(char.isdigit() for char in string): cleaned_strings.append(string) return cleaned_strings"},{"question":"Create a function that takes a list of integers representing the number of pages in different chapters of a book and returns the chapter number that starts on the given page number. Assume that the book starts on page 1, and pages are numbered consecutively. If the page number is out of range, return -1. Example Input: \`chapters = [10, 15, 20, 25]\` (which means there are 10 pages in chapter 1, 15 pages in chapter 2, and so on) \`page = 30\` Example Output: \`3\` (because page 30 falls within chapter 3)","solution":"def find_chapter(chapters, page): Returns the chapter number that starts on the given page number. :param chapters: List[int], representing the number of pages in each chapter :param page: int, the page number to be checked :return: int, the chapter number, or -1 if the page number is out of range if page < 1: return -1 current_page = 1 for i, chapter_length in enumerate(chapters): if current_page <= page < current_page + chapter_length: return i + 1 current_page += chapter_length return -1"},{"question":"Create a function that accepts a list of strings and returns the longest string. If there are multiple strings of the same maximum length, return the first one that appears in the list. Ensure your function handles an empty list by returning an empty string. # Function Signature \`\`\`python def find_longest_string(strings: List[str]) -> str: pass \`\`\` # Example \`\`\`python # Input: [\\"apple\\", \\"banana\\", \\"peach\\"] # Output: \\"banana\\" # Input: [\\"car\\", \\"train\\", \\"airplane\\"] # Output: \\"airplane\\" # Input: [] # Output: \\"\\" \`\`\`","solution":"from typing import List def find_longest_string(strings: List[str]) -> str: Accepts a list of strings and returns the longest string. If there are multiple strings of the same maximum length, it returns the first one that appears in the list. if not strings: return \\"\\" max_length = 0 longest_string = \\"\\" for string in strings: if len(string) > max_length: max_length = len(string) longest_string = string return longest_string"},{"question":"--- Background You are a software developer tasked with creating a small software utility that interacts with a digital archive library. The library system allows users to store and retrieve documents, such as books, research papers, and magazines. You need to implement a class called \`ArchiveLibrary\` which manages this repository, including adding new documents, fetching details of existing documents, and searching for documents based on different criteria. --- Required Python third-party packages \`\`\`python requests==2.25.1 \`\`\` Required Other language third-party packages \`\`\`python No third-party packages are required for other languages. \`\`\` Full API spec \`\`\`python openapi: 3.0.0 info: title: Archive Library API version: 1.0.0 paths: /documents: post: summary: Add a new document to the archive library requestBody: required: true content: application/json: schema: ref: '#/components/schemas/Document' responses: 201: description: Document added successfully get: summary: Fetch a list of all documents responses: 200: description: A JSON array of document objects content: application/json: schema: type: array items: ref: '#/components/schemas/Document' /documents/{document_id}: get: summary: Fetch details of a specific document by its ID parameters: - name: document_id in: path required: true schema: type: string responses: 200: description: A document object content: application/json: schema: ref: '#/components/schemas/Document' components: schemas: Document: type: object properties: id: type: string title: type: string author: type: string year: type: integer type: type: string enum: [book, research_paper, magazine] content: type: string \`\`\` Logic Analysis \`\`\`python [ (\\"archive_library.py\\", \\"Contains ArchiveLibrary class with methods to add, fetch, and search documents.\\"), (\\"document.py\\", \\"Contains Document class representing a document in the archive.\\"), ] \`\`\` Task list \`\`\`python [ \\"document.py\\", \\"archive_library.py\\", ] \`\`\` Shared Knowledge \`\`\`python - The 'Document' class in 'document.py' should have attributes like id, title, author, year, type, and content. - The 'ArchiveLibrary' class in 'archive_library.py' should have methods like 'add_document', 'get_document', 'list_documents', and 'search_documents'. \`\`\` Anything UNCLEAR Make sure to provide unique IDs for documents when adding them to the library. Don't forget to create and initialize any required data structures to store documents. --- Execute tasks mentioned above to create a fully functional ArchiveLibrary system.","solution":"import uuid class Document: Represents a document in the archive library. def __init__(self, title, author, year, document_type, content): self.id = str(uuid.uuid4()) self.title = title self.author = author self.year = year self.type = document_type self.content = content class ArchiveLibrary: Manages the archive library, including adding new documents, fetching details of existing documents, and searching for documents. def __init__(self): self.documents = {} def add_document(self, title, author, year, document_type, content): Adds a new document to the archive library. new_document = Document(title, author, year, document_type, content) self.documents[new_document.id] = new_document return new_document.id def get_document(self, document_id): Fetches details of a specific document by its ID. return self.documents.get(document_id, None) def list_documents(self): Fetches a list of all documents. return list(self.documents.values()) def search_documents(self, keyword): Searches for documents based on a keyword in the title. result = [] for document in self.documents.values(): if keyword.lower() in document.title.lower(): result.append(document) return result"},{"question":"Write a Python function that takes a string of text as input and returns the frequency of each character in the string. The function should ignore spaces and consider uppercase and lowercase versions of a character as the same character. For example, the input \\"Hello World\\" should produce the output {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}.","solution":"def character_frequency(text): Returns the frequency of each character in the given text, ignoring spaces and considering uppercase and lowercase versions of a character as the same character. frequency = {} for char in text: if char != ' ': char = char.lower() if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a Python function that manages a simple student record system. The function should be capable of the following operations: 1. Add a new student record, which includes an ID, name, and list of grades. 2. Retrieve a student's information using their ID. 3. Update a student's name and grades using their ID. 4. Calculate the average grade for a student using their ID. 5. Handle exceptions gracefully if an operation is attempted on a non-existent student ID. Ensure that your code includes thorough input validation and error handling. Use dictionaries to store student records and demonstrate good coding practices, including meaningful variable names and modularized functions.","solution":"class StudentRecordSystem: def __init__(self): self.records = {} def add_student(self, student_id, name, grades): if student_id in self.records: raise ValueError(\\"Student ID already exists.\\") self.records[student_id] = {\\"name\\": name, \\"grades\\": grades} def get_student(self, student_id): if student_id not in self.records: raise ValueError(\\"Student ID does not exist.\\") return self.records[student_id] def update_student(self, student_id, name=None, grades=None): if student_id not in self.records: raise ValueError(\\"Student ID does not exist.\\") if name is not None: self.records[student_id][\\"name\\"] = name if grades is not None: self.records[student_id][\\"grades\\"] = grades def calculate_average_grade(self, student_id): if student_id not in self.records: raise ValueError(\\"Student ID does not exist.\\") grades = self.records[student_id][\\"grades\\"] if not grades: raise ValueError(\\"No grades available for the student.\\") return sum(grades) / len(grades)"},{"question":"Write a function that takes in a list of integers and returns a new list consisting of only the even integers from the original list, sorted in non-decreasing order. Implement this function without using built-in sort functions.","solution":"def even_integers_sorted(lst): Returns a new list consisting of only the even integers from the original list, sorted in non-decreasing order. evens = [num for num in lst if num % 2 == 0] # Implementing bubble sort for educational purposes n = len(evens) for i in range(n): for j in range(0, n-i-1): if evens[j] > evens[j+1]: evens[j], evens[j+1] = evens[j+1], evens[j] return evens"},{"question":"What are the key considerations and best practices in optimizing a relational database for performance and scalability, particularly in dealing with large datasets and high transaction volumes?","solution":"def optimize_and_scale_database(): Returns key considerations and best practices in optimizing a relational database for performance and scalability, particularly when dealing with large datasets and high transaction volumes. considerations_and_best_practices = { 'Indexing': 'Create indexes on columns that are frequently used in WHERE clauses, ' 'ORDER BY clauses, and join conditions to speed up query performance.', 'Query Optimization': 'Write efficient SQL queries, avoid SELECT *, and use the ' 'EXPLAIN command to examine query execution plans.', 'Database Normalization': 'Normalize your database to reduce data redundancy and ' 'improve data integrity. However, consider denormalization ' 'for read-heavy workloads to reduce join operations.', 'Partitioning': 'Use table partitioning to divide a large table into smaller, ' 'more manageable pieces, improving query performance and maintenance.', 'Caching': 'Implement caching strategies to reduce the load on the database. Use in-memory ' 'caches such as Redis or Memcached for frequently accessed data.', 'Connection Pooling': 'Use connection pooling to manage database connections efficiently ' 'and reduce overhead from creating and destroying connections.', 'Load Balancing': 'Distribute the database load across multiple servers to improve performance ' 'and ensure high availability.', 'Database Sharding': 'Implement sharding to horizontally partition your database, distributing ' 'data across multiple shards or servers for better performance and scalability.', 'Backup and Recovery': 'Regularly backup your database and have a robust recovery plan in place ' 'to prevent data loss and ensure business continuity.', 'Monitoring and Performance Tuning': 'Constantly monitor database performance and use tools to ' 'identify and troubleshoot bottlenecks. Regularly tune database ' 'settings based on the workload.', 'Hardware and Infrastructure': 'Invest in high-performance hardware and network infrastructure, ' 'including SSDs, sufficient RAM, and high-speed network connections.' } return considerations_and_best_practices"},{"question":"Write a function that receives two lists containing integers, and returns a new list where each element is the product of the corresponding elements from the input lists. If one list is shorter than the other, append the remaining elements of the longer list as they are to the end of the output list. For example: - Given the lists [1, 2, 3] and [4, 5], the function should return [4, 10, 3]. - Given the lists [3, 4, 5] and [2, 2, 2], the function should return [6, 8, 10]. - Given the lists [1, 2, 3] and [4, 5, 6, 7], the function should return [4, 10, 18, 7]. **Constraints**: - The input lists will only contain integers. - Elements in the lists can be any integer within the range of typical integer values supported by the programming language.","solution":"def multiply_lists(list1, list2): Returns a new list where each element is the product of the corresponding elements from the input lists. If one list is shorter than the other, append the remaining elements of the longer list as they are to the end of the output list. result = [] min_length = min(len(list1), len(list2)) for i in range(min_length): result.append(list1[i] * list2[i]) # Append the rest of the longer list if len(list1) > min_length: result.extend(list1[min_length:]) elif len(list2) > min_length: result.extend(list2[min_length:]) return result"},{"question":"Develop a Python script to connect to an open weather API, and retrieve weather data for a given set of cities represented in a list. Extract specific details such as 'temperature', 'humidity', and 'weather_description' for each city. Then, create a summary report that includes these details along with any instances of severe weather alerts. Finally, store the summarized data in a CSV file for further analysis.","solution":"import requests import csv API_KEY = 'YOUR_API_KEY_HERE' BASE_URL = 'http://api.openweathermap.org/data/2.5/weather' def get_weather_data(cities): weather_data = [] for city in cities: response = requests.get(BASE_URL, params={'q': city, 'appid': API_KEY, 'units': 'metric'}) if response.status_code == 200: data = response.json() city_weather = { 'city': city, 'temperature': data['main']['temp'], 'humidity': data['main']['humidity'], 'weather_description': data['weather'][0]['description'], 'alerts': '' } # Check for severe weather alerts in the 'alerts' section if present if 'alerts' in data: city_weather['alerts'] = ', '.join(alert['event'] for alert in data['alerts']) weather_data.append(city_weather) else: print(f\\"Failed to get data for city: {city}\\") return weather_data def save_weather_data_to_csv(weather_data, filename='weather_summary.csv'): keys = weather_data[0].keys() with open(filename, mode='w', newline='') as file: dict_writer = csv.DictWriter(file, fieldnames=keys) dict_writer.writeheader() dict_writer.writerows(weather_data) # Example usage # cities = ['London', 'New York', 'Tokyo', 'Delhi'] # weather_data = get_weather_data(cities) # save_weather_data_to_csv(weather_data)"},{"question":"Write a function called \`find_peak_element\` that takes a list of integers \`arr\` and returns the index of a peak element. A peak element is defined as an element that is greater than its neighbors. Assume the list contains at least one element, and the boundaries of the list count as negative infinity (i.e., arr[-1] = arr[n] = -∞). The function should have the following signature: \`\`\`python def find_peak_element(arr: List[int]) -> int: \`\`\` **Example:** \`\`\`python find_peak_element([1, 2, 1, 3, 5, 6, 4]) \`\`\` Expected output: \`1\` or \`5\` (since \`2\` and \`6\` are peak elements) \`\`\`python find_peak_element([1, 2, 3, 1]) \`\`\` Expected output: \`2\` (since \`3\` is a peak element) **Constraints:** - The function should run in O(log n) time complexity. - You may assume that arr[-1] and arr[n] are negative infinity, where n is the length of the array. **Note:** Only the index of any one peak element needs to be returned, not necessarily all peak elements.","solution":"from typing import List def find_peak_element(arr: List[int]) -> int: Finds the index of a peak element in the list. A peak element is defined as an element that is greater than its neighbors. Boundaries of the list count as negative infinity. :param arr: List of integers :return: Index of a peak element n = len(arr) def binary_search(low: int, high: int) -> int: if low == high: return low mid = (low + high) // 2 if arr[mid] > arr[mid + 1]: return binary_search(low, mid) else: return binary_search(mid + 1, high) return binary_search(0, n - 1)"},{"question":"Implement a function \`unique_integers_sum_to_zero(n: int) -> List[int]\` that takes a single integer \`n\` and returns a list of \`n\` unique integers that sum up to zero. If \`n\` is odd, the result should include zero, otherwise, it should not. Ensure that the list maintains unique elements and handles both odd and even values of \`n\` effectively. # Examples \`\`\`python unique_integers_sum_to_zero(3) # Output: [-1, 0, 1] (or variations like [-2, 0, 2]) unique_integers_sum_to_zero(4) # Output: [-2, -1, 1, 2] (or variations) unique_integers_sum_to_zero(1) # Output: [0] unique_integers_sum_to_zero(6) # Output: [-3, -2, -1, 1, 2, 3] (or variations) unique_integers_sum_to_zero(0) # Output: [] \`\`\` # Constraints - \`n\` is a non-negative integer. - The list must contain unique integers. - The sum of all integers in the list must be exactly zero. # Notes - The function should not throw errors for edge cases like zero. - The output list can be in any order as long as it adheres to the constraints.","solution":"def unique_integers_sum_to_zero(n): Returns a list of n unique integers that sum to zero. result = [] # If n is odd, add 0 to the list if n % 2 != 0: result.append(0) n -= 1 # Add pairs of negative and positive integers for i in range(1, n // 2 + 1): result.extend([-i, i]) return result"},{"question":"Write a Python function that takes a 2D list representing a grid of characters and a string as inputs, and returns True if the string can be found in the grid moving horizontally or vertically, and False otherwise. The function should implement a depth-first search (DFS) algorithm to traverse the grid. For example: \`\`\`python def word_in_grid(grid, word): # Your code here # Example usage: grid = [ ['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E'] ] print(word_in_grid(grid, 'ABCCED')) # Output: True print(word_in_grid(grid, 'SEE')) # Output: True print(word_in_grid(grid, 'ABCB')) # Output: False \`\`\`","solution":"def word_in_grid(grid, word): if not grid or not word: return False rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != word[index]: return False # Save the character at the current position and mark it as visited temp = grid[r][c] grid[r][c] = '#' # Explore in all four directions found = (dfs(r+1, c, index+1) or # Move down dfs(r-1, c, index+1) or # Move up dfs(r, c+1, index+1) or # Move right dfs(r, c-1, index+1)) # Move left # Restore the character at the current position grid[r][c] = temp return found for i in range(rows): for j in range(cols): if dfs(i, j, 0): return True return False"},{"question":"NOTICE Role: You are a professional engineer; the main goal is to write PEP8 compliant, elegant, modular, easy to read, and maintain Python 3.9 code (but you can also use other programming language) ATTENTION: Use '' to SPLIT SECTIONS, not '#'. Output format carefully referenced \\"Format example\\". Code: cart.py Write code with triple quote, based on the following list and context. 1. Do your best to implement THIS ONLY ONE FILE. ONLY USE EXISTING API. IF NO API, IMPLEMENT IT. 2. Requirement: Based on the context, implement one following code file, note to return only in code form, your code will be part of the entire project, so please implement complete, reliable, reusable code snippets 3. Attention1: If there is any setting, ALWAYS SET A DEFAULT VALUE, ALWAYS USE STRONG TYPE AND EXPLICIT VARIABLE. 4. Attention2: YOU MUST FOLLOW \\"Data structures and interface definitions\\". DONT CHANGE ANY DESIGN. 5. Think before writing: What should be implemented and provided in this document? 6. CAREFULLY CHECK THAT YOU DONT MISS ANY NECESSARY CLASS/FUNCTION IN THIS FILE. 7. Do not use public member functions that do not exist in your design. ----- # Context [BOSS: Write a shopping cart module that supports operations such as adding items, removing items, and computing the total cost. Each item in the cart has a name, quantity, and price per unit. Customers can view the contents of their cart and the total price. The cart must allow applying discount codes that reduce the total cost by a given percentage, Product Manager: Original Requirements The boss wants a shopping cart module that supports basic operations like adding and removing items, and computing the total cost. Each item in the cart should have a name, quantity, and price per unit. Customers should be able to view the contents of their cart and the total price. The cart must support applying discount codes to reduce the total cost by a given percentage. Product Goals \`\`\`python [ \\"Create a shopping cart module that supports adding and removing items\\", \\"Ensure that each item has a name, quantity, and price per unit\\", \\"Implement functionality to compute the total cost of items in the cart\\", \\"Allow customers to view the contents of their cart\\", \\"Support applying discount codes that reduce the total cost by a given percentage\\" ] \`\`\` User Stories \`\`\`python [ \\"As a user, I want to add items to my shopping cart\\", \\"As a user, I want to remove items from my shopping cart\\", \\"As a user, I want to see the total cost of items in my cart\\", \\"As a user, I want to view the contents of my cart\\", \\"As a user, I want to apply discount codes to reduce the total cost of my cart\\" ] \`\`\` Competitive Analysis \`\`\`python [ \\"Amazon: Provides an advanced shopping cart with features like saving items for later but lacks user-friendly discount application\\", \\"eBay: Offers a simple shopping cart with basic operations but does not support applying discount codes directly\\", \\"Walmart: Has a robust shopping cart system with discount application but lacks detailed item descriptions in the cart\\", \\"Alibaba: Features a comprehensive cart with quantity adjustment options but lacks percentage-based discount code functionality\\" ] \`\`\` Competitive Quadrant Chart \`\`\`mermaid quadrantChart title Usability and feature comparison of shopping carts x-axis Low Usability --> High Usability y-axis Low Feature --> High Feature quadrant-1 Leading quadrant-2 Improving quadrant-3 Catching Up quadrant-4 Lagging \\"Amazon\\": [0.8, 0.9] \\"eBay\\": [0.6, 0.6] \\"Walmart\\": [0.7, 0.8] \\"Alibaba\\": [0.5, 0.7] \\"Our Target Product\\": [0.9, 0.9] \`\`\` Requirement Analysis The product should be a shopping cart module that supports adding and removing items, viewing the contents of the cart, computing the total cost, and applying discount codes to reduce the total cost by a given percentage. Requirement Pool \`\`\`python [ (\\"Implement the ability to add items to the cart\\", \\"P0\\"), (\\"Implement the ability to remove items from the cart\\", \\"P0\\"), (\\"Implement the ability to compute the total cost\\", \\"P0\\"), (\\"Implement the ability to view the cart contents\\", \\"P0\\"), (\\"Implement the ability to apply discount codes\\", \\"P1\\") ] \`\`\` UI Design draft The user interface should be simple and intuitive. The cart contents should be displayed clearly, showing the name, quantity, and price per unit of each item. The total cost should be displayed prominently. There should be an input field for discount codes and a button to apply them. Anything UNCLEAR There are no unclear points., Architect: Implementation approach The main challenge is to build a reliable shopping cart module that supports basic operations like adding and removing items, viewing the cart contents, computing the total cost, and applying percentage-based discount codes. We will use a simple Python class to represent the Cart. Each item in the cart will be represented by a dictionary. The module will include methods for adding items, removing items, computing the total cost, applying discount codes, and viewing the cart contents. Python package name \`\`\`python \\"shopping_cart\\" \`\`\` File list \`\`\`python [ \\"cart.py\\" ] \`\`\` Data structures and interface definitions \`\`\`mermaid classDiagram class Cart{ -items: List[Dict[str, Union[str, int, float]]] -applied_discount: float +__init__() +add_item(name: str, quantity: int, price_per_unit: float) +remove_item(name: str) +compute_total_cost(): float +apply_discount(discount_code: str) +view_cart_contents(): List[Dict[str, Union[str, int, float]]] } \`\`\` Program call flow \`\`\`mermaid sequenceDiagram participant C as Cart C->>C: __init__() C->>C: add_item(name, quantity, price_per_unit) C->>C: remove_item(name) C->>C: compute_total_cost() C->>C: apply_discount(discount_code) C->>C: view_cart_contents() \`\`\` Logic Analysis \`\`\`python [ (\\"cart.py\\", \\"Contains the Cart class which manages the shopping cart operations. It provides methods to add and remove items, compute the total cost, apply discount codes, and view the cart contents.\\") ] \`\`\` Task list \`\`\`python [ \\"cart.py\\" ] \`\`\` Shared Knowledge \`\`\`python The 'cart.py' module contains the Cart class which is responsible for managing the shopping cart operations. The Cart class has methods to add and remove items, compute the total cost, apply discount codes, and view the cart contents. Each item is represented as a dictionary with name, quantity, and price per unit. The total cost calculation considers the applied discount if any. \`\`\` Anything UNCLEAR The requirement is clear to me. However, we need to ensure that the discount codes are validated correctly before being applied., Engineer: cart.py \`\`\`python cart.py from typing import List, Dict, Union class Cart: def __init__(self): self.items: List[Dict[str, Union[str, int, float]]] = [] self.applied_discount: float = 0.0 def add_item(self, name: str, quantity: int, price_per_unit: float): self.items.append({ \\"name\\": name, \\"quantity\\": quantity, \\"price_per_unit\\": price_per_unit }) def remove_item(self, name: str): self.items = [item for item in self.items if item[\\"name\\"] != name] def compute_total_cost(self) -> float: total = sum(item[\\"quantity\\"] * item[\\"price_per_unit\\"] for item in self.items) if self.applied_discount: total *= (1 - self.applied_discount / 100) return total def apply_discount(self, discount_code: str): valid_discounts = { \\"DISCOUNT10\\": 10.0, \\"DISCOUNT20\\": 20.0, \\"DISCOUNT30\\": 30.0 } self.applied_discount = valid_discounts.get(discount_code.upper(), 0.0) def view_cart_contents(self) -> List[Dict[str, Union[str, int, float]]]: return self.items \`\`\`","solution":"from typing import List, Dict, Union class Cart: def __init__(self): self.items: List[Dict[str, Union[str, int, float]]] = [] self.applied_discount: float = 0.0 def add_item(self, name: str, quantity: int, price_per_unit: float): self.items.append({ \\"name\\": name, \\"quantity\\": quantity, \\"price_per_unit\\": price_per_unit }) def remove_item(self, name: str): self.items = [item for item in self.items if item[\\"name\\"] != name] def compute_total_cost(self) -> float: total = sum(item[\\"quantity\\"] * item[\\"price_per_unit\\"] for item in self.items) if self.applied_discount: total *= (1 - self.applied_discount / 100) return total def apply_discount(self, discount_code: str): valid_discounts = { \\"DISCOUNT10\\": 10.0, \\"DISCOUNT20\\": 20.0, \\"DISCOUNT30\\": 30.0 } self.applied_discount = valid_discounts.get(discount_code.upper(), 0.0) def view_cart_contents(self) -> List[Dict[str, Union[str, int, float]]]: return self.items"},{"question":"Using Python, write a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. You should use an auxiliary function to check if a number is prime. Demonstrate the functionality of this function with an example. Provide appropriate documentation and comments in your code.","solution":"def is_prime(n): Determines if a number is prime. Args: n (int): The number to check. Returns: bool: True if n is a prime number, else False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Filters the prime numbers from a list of integers. Args: lst (list): List of integers. Returns: list: A new list containing only the prime numbers from the original list. return [x for x in lst if is_prime(x)]"},{"question":"Write a function to compress a given string by transforming it into the form of substring and the number of its consecutive repetitions. The output string should be as short as possible. If the compressed string is not shorter than the original, return the original string. Example: Input: \\"aaabbcc\\" Output: \\"a3b2c2\\" Example: Input: \\"abcd\\" Output: \\"abcd\\"","solution":"def compress_string(s): Compress the given string by transforming it into the form of substring and the number of its consecutive repetitions. If the compressed string is not shorter than the original, return the original string. if not s: return s compressed_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed_string.append(s[i - 1] + str(count)) count = 1 compressed_string.append(s[-1] + str(count)) compressed = ''.join(compressed_string) return compressed if len(compressed) < len(s) else s"},{"question":"Implement a function that finds the shortest path between two nodes in an unweighted graph represented by an adjacency list. The function should handle disconnected graphs and return None if there is no path between the nodes. Your function should be able to handle graphs with cycles and should efficiently find the shortest path, assuming standard input size constraints for competitive programming. Function Signature: \`def find_shortest_path(graph: Dict[int, List[int]], start: int, end: int) -> Optional[List[int]]:\` Example Usage: \`\`\` graph = { 1: [2, 3], 2: [1, 3, 4], 3: [1, 2, 4, 5], 4: [2, 3], 5: [3] } start = 1 end = 5 \`\`\` Expected Output: \`[1, 3, 5]\` If no path exists between the \`start\` and \`end\` nodes, the function should return \`None\`. Ensure your function includes error handling for scenarios where the provided nodes are not present in the graph.","solution":"from typing import List, Dict, Optional from collections import deque def find_shortest_path(graph: Dict[int, List[int]], start: int, end: int) -> Optional[List[int]]: Finds the shortest path between two nodes in an unweighted graph using BFS. :param graph: A dictionary representing the adjacency list of the graph. :param start: The starting node. :param end: The target node. :return: A list of nodes representing the shortest path from start to end, or None if no path exists. if start not in graph or end not in graph: return None queue = deque([(start, [start])]) visited = set() while queue: (current, path) = queue.popleft() visited.add(current) for neighbor in graph[current]: if neighbor == end: return path + [end] if neighbor not in visited: queue.append((neighbor, path + [neighbor])) visited.add(neighbor) # To avoid adding the same node multiple times return None"},{"question":"Design a Python application that represents a digital music store capable of managing an inventory of musical albums. Ensure that your application follows an object-oriented design and incorporates multiple classes with inheritance and polymorphism. The application should categorize albums by genre, incorporating diverse structural characteristics. # Requirements: 1. **Base Class: Album** - Attributes: title, artist, release_year, price, track_list (a list of track names) - Methods: play(), description() 2. **Derived Classes for Specific Genres** - **Class: RockAlbum** - Additional Attributes: band_members (list of band member names), sub_genre - Methods: display_band_info() - **Class: JazzAlbum** - Additional Attributes: instruments (list of instruments used), live_recording (boolean) - Methods: display_live_status() - **Class: ClassicalAlbum** - Additional Attributes: composer, period (e.g., Baroque, Classical, Romantic) - Methods: display_composer_info() 3. **MusicStore Class** - Attributes: name, address, inventory (list of Album objects) - Methods: - add_album(album) - remove_album(album_title) - search_by_title(album_title) - calculate_total_inventory_value() - list_albums_by_genre(genre) # Example Functionality: 1. Implement methods to add and remove albums from the inventory. 2. Implement a search functionality to find albums by title. 3. Implement methods to calculate the total value of the inventory. 4. List all albums of a specific genre. # Additional Guidance: - Utilize inheritance to avoid code duplication and polymorphism to handle different album types seamlessly. - Use encapsulation to protect the integrity of your attributes. - Ensure your solution is modular and scalable, allowing for easy addition of new album types in the future.","solution":"class Album: def __init__(self, title, artist, release_year, price, track_list): self.title = title self.artist = artist self.release_year = release_year self.price = price self.track_list = track_list def play(self): return f\\"Playing album {self.title} by {self.artist}.\\" def description(self): return f\\"Album: {self.title}, Artist: {self.artist}, Year: {self.release_year}, Price: {self.price}, Tracks: {', '.join(self.track_list)}\\" class RockAlbum(Album): def __init__(self, title, artist, release_year, price, track_list, band_members, sub_genre): super().__init__(title, artist, release_year, price, track_list) self.band_members = band_members self.sub_genre = sub_genre def display_band_info(self): return f\\"Band Members: {', '.join(self.band_members)}, Sub-Genre: {self.sub_genre}\\" class JazzAlbum(Album): def __init__(self, title, artist, release_year, price, track_list, instruments, live_recording): super().__init__(title, artist, release_year, price, track_list) self.instruments = instruments self.live_recording = live_recording def display_live_status(self): return f\\"Live Recording: {'Yes' if self.live_recording else 'No'}, Instruments: {', '.join(self.instruments)}\\" class ClassicalAlbum(Album): def __init__(self, title, artist, release_year, price, track_list, composer, period): super().__init__(title, artist, release_year, price, track_list) self.composer = composer self.period = period def display_composer_info(self): return f\\"Composer: {self.composer}, Period: {self.period}\\" class MusicStore: def __init__(self, name, address): self.name = name self.address = address self.inventory = [] def add_album(self, album): self.inventory.append(album) def remove_album(self, album_title): self.inventory = [album for album in self.inventory if album.title != album_title] def search_by_title(self, album_title): for album in self.inventory: if album.title == album_title: return album return None def calculate_total_inventory_value(self): return sum(album.price for album in self.inventory) def list_albums_by_genre(self, genre): genre_class = {\\"Rock\\": RockAlbum, \\"Jazz\\": JazzAlbum, \\"Classical\\": ClassicalAlbum}.get(genre, Album) return [album for album in self.inventory if isinstance(album, genre_class)]"},{"question":"Write a function to implement a simple recommendation system using the collaborative filtering technique. Your function should take a user-item ratings matrix as an input, where rows represent users, columns represent items, and values represent ratings. The function should predict the rating that a user would give to an unrated item based on the similarity of other users' ratings. Use cosine similarity to measure user similarity and return a list of recommended items for a specified user.","solution":"import numpy as np from sklearn.metrics.pairwise import cosine_similarity def collaborative_filtering_recommendations(ratings_matrix, target_user, top_n=5): Uses collaborative filtering to make recommendations based on user-item ratings matrix. :param ratings_matrix: 2D numpy array, where rows represent users, columns represent items, and values represent ratings. :param target_user: Index of the user for whom recommendations are to be made. :param top_n: Number of top recommendations to return. :return: List of item indices recommended for the target user. user_similarities = cosine_similarity(ratings_matrix) target_user_ratings = ratings_matrix[target_user] unrated_items = np.where(target_user_ratings == 0)[0] if len(unrated_items) == 0: return [] score_sums = np.zeros(len(unrated_items)) sim_sums = np.zeros(len(unrated_items)) for other_user in range(ratings_matrix.shape[0]): if other_user != target_user: similarity = user_similarities[target_user, other_user] for idx, item in enumerate(unrated_items): if ratings_matrix[other_user, item] > 0: score_sums[idx] += similarity * ratings_matrix[other_user, item] sim_sums[idx] += similarity predicted_scores = score_sums / np.where(sim_sums == 0, 1, sim_sums) # Avoid division by zero top_items_idx = np.argsort(predicted_scores)[::-1][:top_n] return unrated_items[top_items_idx].tolist()"},{"question":"You are given a file containing multiple lines where each line represents a transaction in the format: \`transaction_id, customer_id, transaction_amount, transaction_date\`. Write a Python function that reads this file and returns a dictionary where the keys are customer IDs and the values are lists of transaction amounts sorted in ascending order. Additionally, write another function that computes the total transaction amount for each customer and returns a dictionary with customer IDs as keys and total transaction amounts as values. Ensure your functions handle possible file reading errors gracefully and validate the integrity of the transaction data. Here's a starting point for your reference: \`\`\`python def read_transactions(file_path): transactions = {} try: with open(file_path, 'r') as file: for line in file: try: transaction_id, customer_id, transaction_amount, transaction_date = line.strip().split(',') transaction_amount = float(transaction_amount) if customer_id not in transactions: transactions[customer_id] = [] transactions[customer_id].append(transaction_amount) except ValueError: continue # Skip lines with incorrect format for customer_id in transactions: transactions[customer_id].sort() return transactions except IOError: raise Exception(\\"Error reading the file\\") def total_transaction_amounts(transactions): totals = {} for customer_id, amounts in transactions.items(): totals[customer_id] = sum(amounts) return totals \`\`\`","solution":"def read_transactions(file_path): transactions = {} try: with open(file_path, 'r') as file: for line in file: try: transaction_id, customer_id, transaction_amount, transaction_date = line.strip().split(',') transaction_amount = float(transaction_amount) if customer_id not in transactions: transactions[customer_id] = [] transactions[customer_id].append(transaction_amount) except ValueError: continue # Skip lines with incorrect format for customer_id in transactions: transactions[customer_id].sort() return transactions except IOError: raise Exception(\\"Error reading the file\\") def total_transaction_amounts(transactions): totals = {} for customer_id, amounts in transactions.items(): totals[customer_id] = sum(amounts) return totals"},{"question":"Write a function that takes a list of integers and returns the sum of all unique even numbers. If there are no even numbers in the list, the function should return 0. Example: \`\`\`python def sum_even_unique_numbers(lst): # your code here # Test cases print(sum_even_unique_numbers([1, 2, 2, 3, 4])) # Output: 6 (since unique evens are 2 and 4) print(sum_even_unique_numbers([1, 3, 5])) # Output: 0 (no even numbers) print(sum_even_unique_numbers([2, 2, 4, 4, 6])) # Output: 12 (since unique evens are 2, 4, and 6) \`\`\`","solution":"def sum_even_unique_numbers(lst): Returns the sum of all unique even numbers in the list. If there are no even numbers, returns 0. # Find the set of unique numbers unique_numbers = set(lst) # Filter out even numbers and sum them up sum_of_evens = sum(number for number in unique_numbers if number % 2 == 0) return sum_of_evens"},{"question":"Design a Python function that takes a list of strings as input and returns a dictionary where the keys are unique strings from the list and the values are lists of indices where each string appears in the input list. Consider that the list can contain duplicates, and the order of indices in the dictionary should reflect the order of their occurrence in the original list. For example, if the input list is [\\"apple\\", \\"banana\\", \\"apple\\", \\"cherry\\", \\"banana\\", \\"apple\\"], the output should be: \`\`\`python { \\"apple\\": [0, 2, 5], \\"banana\\": [1, 4], \\"cherry\\": [3] } \`\`\` Ensure that your solution has a time complexity of O(n).","solution":"def strings_to_indices(input_list): Takes a list of strings as input and returns a dictionary where the keys are unique strings from the list and the values are lists of indices where each string appears in the input list. :param input_list: List of strings :return: Dictionary with strings as keys and lists of indices as values index_dict = {} for index, string in enumerate(input_list): if string in index_dict: index_dict[string].append(index) else: index_dict[string] = [index] return index_dict"},{"question":"Write a Python function that takes a string containing a mix of uppercase and lowercase letters, and returns a new string where each character's case is swapped (uppercase becomes lowercase, and vice versa). For example, the input \\"HeLLo WoRLD\\" should return \\"hEllO wOrld\\".","solution":"def swap_case(s): Returns a new string where each character's case is swapped (uppercase becomes lowercase, and vice versa). Parameters: s (str): The input string containing a mix of uppercase and lowercase letters. Returns: str: A new string with each character's case swapped. return s.swapcase()"},{"question":"Write a function \`find_non_repeating_element\` that takes a list of integers as input and returns the first non-repeating element from the list. If there are no non-repeating elements, return \`None\`. The function should have a linear time complexity. **Constraints:** - The input list will have at least one integer and at most (10^5) integers. - Each integer can be between (-10^9) and (10^9). **Function Signature:** \`\`\`python def find_non_repeating_element(arr: List[int]) -> Optional[int]: \`\`\` **Example:** \`\`\`python assert find_non_repeating_element([4, 5, 4, 3, 5, 6, 3]) == 6 assert find_non_repeating_element([1, 2, 2, 1, 3, 4, 3, 4, 5]) == 5 assert find_non_repeating_element([1, 1, 1, 1]) == None \`\`\`","solution":"from typing import List, Optional def find_non_repeating_element(arr: List[int]) -> Optional[int]: Returns the first non-repeating element from the list. If there are no non-repeating elements, returns None. count = {} # First pass to count occurrences of each element for num in arr: if num in count: count[num] += 1 else: count[num] = 1 # Second pass to find the first element with a count of 1 for num in arr: if count[num] == 1: return num return None"}]`),R={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:F,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},P={class:"card-container"},N={key:0,class:"empty-state"},z=["disabled"],O={key:0},L={key:1};function D(r,e,l,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",P,[(n(!0),i(b,null,v(a.displayedPoems,(o,f)=>(n(),w(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",L,"Loading...")):(n(),i("span",O,"See more"))],8,z)):u("",!0)])}const j=h(R,[["render",D],["__scopeId","data-v-69f93918"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"drive/7.md","filePath":"drive/7.md"}'),W={name:"drive/7.md"},B=Object.assign(W,{setup(r){return(e,l)=>(n(),i("div",null,[x(j)]))}});export{M as __pageData,B as default};
