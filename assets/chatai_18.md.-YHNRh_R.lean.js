import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,h,m,a,r){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(q,[["render",O],["__scopeId","data-v-5a869f33"]]),j=JSON.parse('[{"question":"A famous ancient philosopher loved dreaming about spirals, which he believed were the depiction of life\'s progress. Inspired by these beautiful geometric figures, he started drawing them on a 2D grid. A spiral on a grid starts from a given initial cell and progresses by moving right, down, left, and up in a cyclic manner until all cells in a given n x n grid are covered. The philosopher developed a peculiar way of marking the cells: he would incrementally mark each cell with numbers starting from 1 up to n*n. Given a positive integer n, create an n x n matrix representing the philosopher\'s spiral. The starting point of the spiral is always the top-left corner of the grid (position (0, 0)) and the number sequence continues filling the grid in spiral order. # Input - An integer n (1 ≤ n ≤ 100) representing the size of the grid. # Output - An n x n matrix with each cell containing integers 1 through n*n filled in a spiral order. # Example **Input:** 5 **Output:** ``` 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 ``` --- **Input:** 3 **Output:** ``` 1 2 3 8 9 4 7 6 5 ```","solution":"def generate_spiral_matrix(n): Generate an n x n matrix filled with numbers from 1 to n^2 in spiral order. if n <= 0: return [] # Initialize the n x n matrix with zeros matrix = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: # Fill top row for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 # Fill right column for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 # Fill bottom row for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 # Fill left column for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"You are given a string s consisting of lowercase English letters and a target string t also consisting of lowercase English letters. A subsequence of s is a sequence that can be derived from s by deleting some or no characters without changing the order of the remaining characters. You need to determine the number of distinct subsequences of s that equal the target string t. Output the answer modulo 10^9 + 7 as the number can be huge. The first line of input contains a string s (1 ≤ |s| ≤ 1000). The second line of input contains a string t (1 ≤ |t| ≤ 1000). Output the number of distinct subsequences of s that equal the target string t, modulo 10^9 + 7.","solution":"MOD = 10**9 + 7 def numDistinct(s, t): m, n = len(s), len(t) if n == 0: return 1 if m == 0: return 0 # dp[i][j] will be storing the count of subsequences of s[0..i-1] that equals t[0..j-1] dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): dp[i][0] = 1 for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] dp[i][j] %= MOD return dp[m][n]"},{"question":"You are given an integer array a of length n. You can perform the following operation at most once: - Select any two indices i and j (1 le i < j le n) and swap the elements a_i and a_j. Your task is to perform this operation (or choose not to perform it) in such a way that the resulting array is lexicographically smallest possible. The first line contains one integer n (1 le n le 1000). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^7). Print the lexicographically smallest array possible after performing at most one swap operation. In the first example, after swapping the elements at indices 1 and 2, the array becomes [1, 2, 9, 4, 3] which is the smallest possible. In the second example, swapping elements at indices 1 and 3 yields [4, 1, 13, 37] which is the smallest possible. In the third example, swapping elements at indices 4 and 6 results in [9, 15, 6, 24, 8, 11, 33, 4]. Further swap between indices 7 and 8 to get [4, 15, 6, 24, 8, 11, 33, 9]. Choosing not to swap again gives the smallest lexicographical array achievable with one swap.","solution":"def lexicographically_smallest_array(n, a): Returns the lexicographically smallest array possible after performing at most one swap operation. # Traverse the array and find the first index where the next element is smaller for i in range(n): min_index = i for j in range(i + 1, n): if a[j] < a[min_index]: min_index = j # Swap if it results in a smaller array if min_index != i and a[min_index] < a[i]: a[i], a[min_index] = a[min_index], a[i] break return a"},{"question":"A large transportation company has a cargo distribution network represented by a list of hubs, each identified by a unique positive integer ID. Each hub has routes to other hubs, with each route having a specific time required to travel between the two hubs. Your task is to write a program to determine the shortest travel time from a specified starting hub to a specified destination hub. In case it is not possible to reach the destination hub from the starting hub, the program should return -1. # Input The input consists of several lines: 1. The first line contains two integers, `N` and `M`, where `N` is the number of hubs (1 ≤ N ≤ 1000) and `M` is the number of routes (0 ≤ M ≤ 2000). 2. The next `M` lines each contain three integers `U`, `V`, and `T` (1 ≤ U, V ≤ N and 1 ≤ T ≤ 1000), representing a route from hub `U` to hub `V` with a travel time of `T` (routes are bidirectional). 3. The final line contains two integers, `S` and `E`, representing the starting hub ID and the destination hub ID. # Output Output a single integer: the shortest travel time from hub `S` to hub `E`. If there is no path from `S` to `E`, output `-1`. # Example Input ``` 5 6 1 2 10 1 3 5 2 3 2 2 4 1 3 4 9 4 5 4 1 5 ``` Output ``` 15 ``` Explanation The shortest path from hub 1 to hub 5 is: 1 -> 3 -> 2 -> 4 -> 5 with a total time of 5 + 2 + 1 + 4 = 12. In this case, the total time is 15.","solution":"import heapq def shortest_travel_time(N, M, routes, S, E): # Create adjacency list graph = {i: [] for i in range(1, N + 1)} for U, V, T in routes: graph[U].append((V, T)) graph[V].append((U, T)) # Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): pq = [(0, start)] # (distance, node) dist = {i: float(\'inf\') for i in range(1, N + 1)} dist[start] = 0 while pq: current_dist, current_node = heapq.heappop(pq) if current_node == end: return current_dist if current_dist > dist[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 result = dijkstra(S, E) return result # Example usage N = 5 M = 6 routes = [ (1, 2, 10), (1, 3, 5), (2, 3, 2), (2, 4, 1), (3, 4, 9), (4, 5, 4) ] S = 1 E = 5 print(shortest_travel_time(N, M, routes, S, E)) # Should output 12"},{"question":"You are given an array `arr` of length `n` consisting of integers. You need to handle multiple queries. Each query is of the following two types: 1. Update an element in the array to a given value. 2. Find the sum of elements in a given range `[l, r]` (inclusive, 1-based index). Write a program that can efficiently process these queries. The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains `n` integers, the elements of the array `arr`. The next `q` lines contain queries. Each query is of one of the following two types, specified by the first integer of the query: 1. \\"1 x y\\" - Update the x-th element of the array to y. (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9) 2. \\"2 l r\\" - Find the sum of elements in the range from l to r (inclusive). (1 ≤ l ≤ r ≤ n) For each query of type 2, print the sum of elements in the specified range. **Example:** ``` Input: 5 3 1 2 3 4 5 2 1 3 1 3 10 2 2 5 Output: 6 21 ``` In the example above: - The initial array is [1, 2, 3, 4, 5]. - For the first query \\"2 1 3\\", the sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. - For the second query \\"1 3 10\\", the array changes to [1, 2, 10, 4, 5]. - For the third query \\"2 2 5\\", the sum of elements from index 2 to 5 is 2 + 10 + 4 + 5 = 21.","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (4 * self.n) self.build(arr, 0, 0, self.n - 1) def build(self, arr, node, start, end): if start == end: self.tree[node] = arr[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(arr, left_child, start, mid) self.build(arr, right_child, mid + 1, end) self.tree[node] = self.tree[left_child] + self.tree[right_child] def update(self, idx, val, node, start, end): if start == end: self.tree[node] = val else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if start <= idx <= mid: self.update(idx, val, left_child, start, mid) else: self.update(idx, val, right_child, mid + 1, end) self.tree[node] = self.tree[left_child] + self.tree[right_child] def query(self, L, R, node, start, end): if R < start or end < L: return 0 if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 sum_left = self.query(L, R, left_child, start, mid) sum_right = self.query(L, R, right_child, mid + 1, end) return sum_left + sum_right # Translate given input to solve the problem def process_queries(n, q, arr, queries): tree = SegmentTree(arr) responses = [] for query in queries: parts = query.split() if parts[0] == \'1\': x = int(parts[1]) - 1 y = int(parts[2]) tree.update(x, y, 0, 0, n - 1) elif parts[0] == \'2\': l = int(parts[1]) - 1 r = int(parts[2]) - 1 responses.append(tree.query(l, r, 0, 0, n - 1)) return responses"},{"question":"You are given an input that consists of a single line containing three space-separated integers. Each integer is guaranteed to be within the range of 1 to 100. Write a function that returns the maximum of the three integers. For example, if the input is \\"5 8 3\\", the output should be 8.","solution":"def max_of_three(input_string): Returns the maximum of three space-separated integers from an input string. numbers = list(map(int, input_string.split())) return max(numbers)"},{"question":"Alex is organizing a music festival and needs to arrange the stage schedules for various musicians. Each musician requires a certain number of minutes to perform, and Alex has a limited total number of minutes available for the entire festival. He wants to make sure he maximizes the number of musicians that can perform without exceeding the total available time. Given the total available minutes for the festival and the list of required minutes for each musician\'s performance, help Alex determine the maximum number of musicians that can be scheduled to perform. Input - The first line contains two integers `t` and `n` (1 ≤ t ≤ 10^5, 1 ≤ n ≤ 1000) — the total available minutes and the number of musicians. - The second line contains `n` integers `p1, p2, ..., pn` (1 ≤ pi ≤ 1000) — the required minutes for each musician\'s performance. Output - Print one integer — the maximum number of musicians that can be scheduled to perform within the given total available minutes. Example Input: ``` 300 4 120 90 60 150 ``` Output: ``` 3 ``` Explanation In the example, Alex can choose the performances of durations 90, 60, and 120 minutes, which sum up to 270 minutes, allowing him to schedule the maximum number of 3 musicians without exceeding the total available time of 300 minutes.","solution":"def max_musicians(t, n, durations): Returns the maximum number of musicians that can perform without exceeding the total available minutes. Parameters: t (int): Total available minutes for the festival. n (int): Number of musicians. durations (list of int): List of required minutes for each musician\'s performance. Returns: int: Maximum number of musicians that can perform. durations.sort() total_minutes = 0 count = 0 for duration in durations: if total_minutes + duration <= t: total_minutes += duration count += 1 else: break return count"},{"question":"Aurora has a garden with `n` sections, arranged in a straight line from left to right, each section numbered from 1 to n. Initially, each section contains a certain type of flower, represented by an integer from 0 to k-1, where k is the number of different flower types Aurora has. Aurora wants to perform `m` operations to change the flowers in some of these sections to create a special pattern that she likes. Each operation allows Aurora to change the flowers in one or more continuous sections to a specific type of flower. Given the initial state of the garden, the desired final pattern, and the operations Aurora can perform, determine the minimum number of operations required to transform the initial state into the desired final pattern. If it\'s impossible to create the desired pattern using the operations, return -1. The first line of input contains three integers `n`, `k`, and `m` (1 ≤ `n` ≤ 1000, 1 ≤ `k` ≤ 10, 1 ≤ `m` ≤ 1000) — the number of sections in the garden, the number of different flower types, and the number of operations available, respectively. The second line contains `n` integers, the initial state of the garden, where each integer is between 0 and k-1 (inclusive). The third line contains `n` integers, the desired final pattern, where each integer is between 0 and k-1 (inclusive). Each of the next `m` lines describes an operation and contains three integers `l`, `r`, and `f` (1 ≤ `l` ≤ `r` ≤ `n`, 0 ≤ `f` ≤ `k-1`), indicating that Aurora can change all flowers in sections `l` to `r` (inclusive) to flower type `f`. Print a single integer — the minimum number of operations required to achieve the desired final pattern or -1 if it\'s impossible. Example: Input: 5 3 4 0 1 2 2 1 2 2 2 3 2 1 2 2 3 5 2 1 5 3 4 5 2 Output: 2 In this example, the minimum number of operations required to transform the initial state `[0, 1, 2, 2, 1]` into the final pattern `[2, 2, 2, 3, 2]` is 2.","solution":"def min_operations(n, k, m, initial, final, operations): dp = [-1] * n if initial[0] == final[0]: dp[0] = 0 else: for l, r, f in operations: if l == 1 and r == 1 and f == final[0]: dp[0] = 1 for i in range(1, n): if initial[i] == final[i]: dp[i] = dp[i-1] else: min_operations_i = float(\'inf\') for l, r, f in operations: if l <= i+1 <= r and f == final[i]: if l == 1: min_operations_i = min(min_operations_i, 1) elif dp[l-2] != -1: min_operations_i = min(min_operations_i, dp[l-2]+1) if min_operations_i == float(\'inf\'): dp[i] = -1 else: dp[i] = min_operations_i return dp[-1]"},{"question":"You are given a string s of length n consisting of lowercase English letters. You are allowed to perform any number of the following operations: 1. Choose a pair of adjacent characters in the string and swap them. Your goal is to arrange the characters of the string so that no two adjacent characters are the same. If it is impossible to achieve, return -1. Otherwise, return the minimum number of swaps required to achieve this. The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s. Print one number — the minimum number of swaps required to achieve the goal, or -1 if it is impossible. For example: Input: 7 aaabbbc Output: 4","solution":"def min_swaps_to_no_adjacent_same(n, s): from collections import Counter import heapq # Calculate frequency of each character char_freq = Counter(s) # Check if there\'s any character with more than half the length of the string if any(freq > (n + 1) // 2 for freq in char_freq.values()): return -1 # Use a max heap to always place the most frequent characters first max_heap = [(-freq, char) for char, freq in char_freq.items()] heapq.heapify(max_heap) swaps = 0 prev_freq, prev_char = 0, \\"\\" result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the freq and char for the next iteration prev_freq, prev_char = freq + 1, char # Count the number of swaps needed to form the alternating sequence swaps = sum(s[i] == s[i+1] for i in range(n-1)) return swaps"},{"question":"A group of scientists is working on a complex problem involving chemical reactions. They have a series of experiments represented as a directed graph, where each node is an experiment and each directed edge represents a dependence between two experiments. The goal is to identify the longest sequence of dependent experiments, starting from any experiment and ending at any experiment. Each experiment has a unique integer identifier from 1 to n. The graph is represented by a list of directed edges. Your task is to determine the length of the longest path in the directed graph. Given the number of experiments n and a list of m directed edges (u, v) where experiment u must be completed before experiment v, find the length of the longest path in the graph (i.e., the maximum number of experiments that can be performed in sequence). The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of experiments and the number of directed edges. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a directed edge from experiment u to experiment v. Output the length of the longest path in the directed graph. Example: Input: 5 4 1 2 2 3 1 3 3 4 Output: 3 Explanation: The longest path is 1 -> 2 -> 3 -> 4 or 1 -> 3 -> 4, both with a length of 3.","solution":"from collections import defaultdict, deque def longest_path_in_dag(n, edges): graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 topo_sort = [] queue = deque() for node in range(1, n + 1): if in_degree[node] == 0: queue.append(node) while queue: node = queue.popleft() topo_sort.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) longest_path = [0] * (n + 1) for node in topo_sort: for neighbor in graph[node]: if longest_path[neighbor] < longest_path[node] + 1: longest_path[neighbor] = longest_path[node] + 1 return max(longest_path) def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return n, edges def main(input_string): n, edges = parse_input(input_string) return longest_path_in_dag(n, edges)"},{"question":"Zara is an avid collector of books and loves to organize her library. Each book in her collection has a unique identifier and a date it was added to her collection. Zara wants a program that helps her find the k most recently added books. You are to write a program that reads several book entries and outputs the k most recent entries by the date they were added. Each book entry contains a book identifier and the date it was added to the collection in the format \\"YYYY-MM-DD\\". Assume that no two books were added on the same date. **Input:** - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000), where n is the number of book entries and k is the number of the most recent books Zara wants to find. - The next n lines each contain a string book_id and a date \\"YYYY-MM-DD\\", separated by a space. **Output:** - Output the book IDs of the k most recent books, one per line, in reverse order of their addition dates. **Example:** Input: ``` 5 3 B001 2023-01-01 B002 2023-01-03 B003 2023-01-05 B004 2023-01-02 B005 2023-01-04 ``` Output: ``` B003 B005 B002 ``` In this example, the program identifies the three most recently added books as B003, B005, and B002, based on their dates. The output is in reverse order of their addition dates.","solution":"def get_k_most_recent_books(n, k, book_entries): Returns the k most recently added books by their identifiers. Parameters: n (int): The number of book entries. k (int): The number of the most recent books to return. book_entries (list of tuples): Each tuple contains a book identifier (str) and the date (str) in \\"YYYY-MM-DD\\" format. Returns: list of str: The book IDs of the k most recently added books, in reverse order of their addition dates. # Convert the date to a comparable format and sort the entries by date. sorted_books = sorted(book_entries, key=lambda x: x[1], reverse=True) # Extract just the book IDs of the top k entries most_recent_books = [book[0] for book in sorted_books[:k]] return most_recent_books"},{"question":"In Arrayland, there exists an array of integers and two gamesmen who take turns playing a game. They start with an array of integers and modify the array according to specific rules. The player who makes the last valid move wins. The game rules are as follows: 1. A player can choose any subarray (a contiguous part of the array) and either: - Reverse the subarray - Increment all elements in the subarray by 1. 2. The game ends when there are no valid moves left, that is, when all the elements in the array are in non-decreasing order. The first player to start the game is Player 1. Your task is to determine if Player 1 can always assure a win regardless of the moves made by Player 2. The first line of input contains a single integer n (1 leq n leq 10^5), the size of the array. The second line contains n space-separated integers a_1, a_2, cdots, a_n (1 leq a_i leq 10^9), the elements of the array. Output \\"WIN\\" if Player 1 can force a win no matter how Player 2 plays. Otherwise, output \\"LOSE\\". # Example 1: **Input:** ``` 5 1 3 2 5 4 ``` **Output:** ``` WIN ``` # Example 2: **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` LOSE ``` In the first example, Player 1 can always manipulate the subarrays such that they make the last valid move. In the second example, the array is already sorted, so Player 1 cannot make any valid move and hence loses.","solution":"def can_player1_win(arr): Determines if Player 1 can force a win in the game # Check if the array is sorted in non-decreasing order n = len(arr) for i in range(n - 1): if arr[i] > arr[i + 1]: return \\"WIN\\" # The array is not sorted, Player 1 can make a move return \\"LOSE\\" # The array is already sorted"},{"question":"You are given an array of n integers and an integer m. Each number in the array is either positive or zero. Your task is to calculate the number of subarrays such that the sum of the elements of the subarray is exactly m. If there is no such subarray, return 0. A subarray is defined as a contiguous portion of the array. The first line of the input contains two integers n and m (1 le n le 10^5, 0 le m le 10^9). The second line contains n non-negative integers, the elements of the array. Output a single integer — the number of subarrays that sum up to exactly m. # Example Input ``` 5 5 1 2 3 4 5 ``` Output ``` 2 ``` **Explanation**: The subarrays [2, 3] and [5] have a sum of 5. Therefore, the output is 2.","solution":"def count_subarrays_with_sum(arr, m): Given an array of non-negative integers and an integer m, count the number of subarrays whose sum is exactly m. :param arr: List[int] - the array of non-negative integers :param m: int - the target sum for subarrays :return: int - the number of subarrays that sum up to exactly m from collections import defaultdict # Dictionary to store prefix sums and their counts prefix_sums = defaultdict(int) prefix_sums[0] = 1 # Initialize with 0 to handle cases where the subarray sum starts from the beginning current_sum = 0 count_subarrays = 0 # Traverse through the array for num in arr: current_sum += num # Check if there exists a prefix subarray with a sum that when added to m gives current_sum if (current_sum - m) in prefix_sums: count_subarrays += prefix_sums[current_sum - m] # Update the prefix_sums dictionary prefix_sums[current_sum] += 1 return count_subarrays"},{"question":"Given a string `s` consisting only of characters \'a\', \'b\', and \'c\', determine if you can transform the string such that there are no two consecutive characters that are the same. If possible, print \\"YES\\"; otherwise, print \\"NO\\". The first line contains an integer `t` (1 le t le 100) — the number of test cases. Each of the next `t` lines contains a single string `s` (1 le |s| le 1000). Print `t` lines — \\"YES\\" if it is possible to transform the string such that there are no two consecutive characters that are the same, otherwise \\"NO\\".","solution":"def can_transform(s): Determines if the string can be transformed such that there are no two consecutive characters that are the same. Parameters: s (str): Input string consisting only of \'a\', \'b\', and \'c\'. Returns: str: \\"YES\\" if possible to transform, otherwise \\"NO\\". for i in range(1, len(s)): if s[i] == s[i-1]: return \\"NO\\" return \\"YES\\" def process_multiple_cases(t, cases): Processes multiple test cases to determine if each string can be transformed. Parameters: t (int): Number of test cases. cases (list of str): List of strings for each test case. Returns: list of str: List of results, \\"YES\\" or \\"NO\\". results = [] for case in cases: results.append(can_transform(case)) return results"},{"question":"You are developing a new file version control system, and you want to ensure that files in the system are properly synchronized across different computers. The system has n computers. Each file in the system is identified uniquely by an ID. There are m file operations planned. The i-th operation will either be an upload or download operation. An upload operation uploads a file from one computer to the server, and a download operation downloads a file from the server to a computer. You need to determine if all planned operations can be successfully executed given the dependencies between operations. Each operation depends on the successful completion of some other operations. More specifically, an upload operation can only be performed if the file is present on the computer. Similarly, a download operation can only be performed if the file has been uploaded to the server first. You are given m operations. Each operation is one of two types: - \\"U a f\\" - Upload file f from computer a to the server. - \\"D b f\\" - Download file f from the server to computer b. Your task is to check if it is possible to perform all the operations successfully. The first line of input contains two integers n and m (1 leq n leq 1000, 1 leq m leq 10000), the number of computers and the number of operations. The next m lines represent the operations. Each of these lines is in one of the following forms: \\"U a f\\" or \\"D b f\\" which represent the operation type, the computer involved, and the file ID. Output \\"YES\\" if it\'s possible to perform all operations successfully, otherwise output \\"NO\\". # Example **Input:** ``` 3 4 U 1 100 D 2 100 U 2 200 D 3 200 ``` **Output:** ``` YES ``` **Input:** ``` 2 3 D 1 100 U 2 100 D 2 101 ``` **Output:** ``` NO ``` # Explanation: In the first example, the upload operations happen before their respective download operations, allowing all operations to be performed successfully. In the second example, the first operation is a download operation for a file that has not been uploaded, making it impossible to perform all operations successfully.","solution":"def can_perform_operations(n, m, operations): This function determines if all file operations can be successfully executed. Parameters: n (int): the number of computers. m (int): the number of operations. operations (list): a list of operations represented as strings. Returns: str: \\"YES\\" if all operations can be successfully executed, \\"NO\\" otherwise. uploaded_files = set() for operation in operations: op_type, computer, file_id = operation.split() file_id = int(file_id) if op_type == \'U\': # Upload operation uploaded_files.add(file_id) elif op_type == \'D\': # Download operation if file_id not in uploaded_files: return \\"NO\\" return \\"YES\\""},{"question":"In a large warehouse, there are M storage rooms arranged in a grid of R rows and C columns (R * C = M). The warehouse manager wants to label each storage room with unique numeric identifiers in such a way that the label reflects the row and column position of the storage room. However, the manager needs your help in determining the shortest path from one storage room to another according to the Manhattan distance metric. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. You are given Q queries, each with two pairs of coordinates representing the starting and ending storage rooms in the form of (r1, c1) and (r2, c2). Your task is to calculate the shortest path in terms of Manhattan distance for each query. Write a function `find_manhattan_distances(R: int, C: int, queries: List[Tuple[Tuple[int, int], Tuple[int, int]]]) -> List[int]` that takes three inputs: the number of rows R, the number of columns C, and a list of queries where each query is represented by a tuple of coordinates, and returns a list of Manhattan distances for each query. # Input - An integer R (1 ≤ R ≤ 1000), representing the number of rows in the warehouse. - An integer C (1 ≤ C ≤ 1000), representing the number of columns in the warehouse. - An integer Q (1 ≤ Q ≤ 10000), representing the number of queries. - A list of Q queries, where each query is a tuple of the form `((r1, c1), (r2, c2))` with 1 ≤ r1, r2 ≤ R and 1 ≤ c1, c2 ≤ C. # Output - A list of Q integers, each representing the Manhattan distance between the two specified storage rooms for the corresponding query. # Example ```python # Input: R = 3 C = 4 queries = [ ((1, 1), (2, 3)), ((3, 4), (1, 1)), ((2, 2), (2, 2)) ] # Output: [3, 5, 0] ``` # Explanation: 1. The Manhattan distance between (1, 1) and (2, 3) is |1-2| + |1-3| = 1 + 2 = 3. 2. The Manhattan distance between (3, 4) and (1, 1) is |3-1| + |4-1| = 2 + 3 = 5. 3. The Manhattan distance between (2, 2) and (2, 2) is |2-2| + |2-2| = 0. # Note - The grid is 1-indexed, meaning the top-left storage room is at position (1, 1). - All coordinates given in the queries are valid and within the range defined by R and C.","solution":"from typing import List, Tuple def find_manhattan_distances(R: int, C: int, queries: List[Tuple[Tuple[int, int], Tuple[int, int]]]) -> List[int]: Computes the Manhattan distance for each query. :param R: Number of rows in the warehouse. :param C: Number of columns in the warehouse. :param queries: List of queries where each query is a tuple of coordinates. :return: List of Manhattan distances for each query. distances = [] for (r1, c1), (r2, c2) in queries: distance = abs(r1 - r2) + abs(c1 - c2) distances.append(distance) return distances"},{"question":"You are given a string s of length n consisting of lowercase English letters. You want to reorder the characters of this string such that no two adjacent characters are the same. If there is more than one valid reordering, any of them will do. If it is impossible to reorder the string in such a way, return an empty string. Implement a function `reorder_string(s: str) -> str` that takes a string s as input and returns a string that is a valid reordering of s with no two adjacent characters being the same, or an empty string if such reordering is not possible. # Input The input is a single string s. # Constraints - 1 leq n leq 10^5 - s consists of lowercase English letters. # Output Return a single string that is a valid reordering of s such that no two adjacent characters are the same, or an empty string if no such reordering is possible. # Example **Input**: ``` s = \\"aabb\\" ``` **Output**: ``` \\"abab\\" ``` **Input**: ``` s = \\"aaab\\" ``` **Output**: ``` \\"\\" ``` In the first example, \\"abab\\" is a valid reordering of \\"aabb\\" where no two adjacent characters are the same. \\"baba\\" is another valid reordering. In the second example, it is impossible to reorder \\"aaab\\" such that no two adjacent characters are the same, therefore the output is an empty string.","solution":"import heapq from collections import Counter def reorder_string(s: str) -> str: Reorders the string such that no two adjacent characters are the same. If it is impossible, returns an empty string. :param s: Input string. :return: Reordered string or empty string if impossible. # Calculate the frequency of each character in the string freq = Counter(s) max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap: cur_freq, cur_char = heapq.heappop(max_heap) # Append the current character to the result result.append(cur_char) # If there\'s a previous character with remaining frequency, push it back to the heap if prev_char is not None and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the previous character and its frequency prev_char = cur_char prev_freq = cur_freq + 1 # Decreasing frequency because we\'ve used one instance of it # If the length of the result is not equal to the length of the input, it\'s impossible if len(result) != len(s): return \\"\\" return \'\'.join(result)"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either contain a 0 (representing a walkable path) or a 1 (representing an obstacle). You need to determine the number of different paths from the top-left corner (1, 1) to the bottom-right corner (n, m), where you can only move to the right or down from any cell. However, there are a number of teleporters placed in some cells. A teleporter allows you to instantly move to another teleporter\'s cell. Each teleporter is denoted by three integers ai, bi, and ci which represent the row, column, and destination teleporter’s position in the format (destination\'s row, destination\'s column) respectively. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines each contain m integers (either 0 or 1), representing the grid. Then the following line contains an integer k (1 ≤ k ≤ 20) — the number of teleporters. The next k lines each contain five integers: ai, bi, di, ei, fi (1 ≤ ai, bi, di, ei, fi ≤ maximum(n, m)) — representing the position of a teleporter at (ai, bi) which teleports to (di, ei) if you enter it, and (fi) indicating the additional cost of using this teleporter (fi is either 0 or 1). Print the number of different paths from (1, 1) to (n, m). If it is impossible to get from (1, 1) to (n, m), then the number of paths is 0. Remember to take the additional cost into account if you pass through a teleporter. Note: The usage of a teleporter is optional, and using a teleporter that requires an additional cost will multiply the count of paths that use it by the cost fi.","solution":"def num_paths_with_teleporters(n, m, grid, teleporters): from collections import defaultdict, deque def bfs(start): queue = deque([start]) paths[start] = 1 while queue: current = queue.popleft() curr_row, curr_col = current if current == (n - 1, m - 1): continue for dx, dy in [(0, 1), (1, 0)]: next_row, next_col = curr_row + dx, curr_col + dy if 0 <= next_row < n and 0 <= next_col < m and grid[next_row][next_col] == 0: if (next_row, next_col) not in paths: queue.append((next_row, next_col)) paths[(next_row, next_col)] += paths[(curr_row, curr_col)] for (teleport_start, teleport_end, cost) in teleporters: if (curr_row, curr_col) == teleport_start: tele_row, tele_col = teleport_end # Cost factor handled multiply by cost if 0 <= tele_row < n and 0 <= tele_col < m and grid[tele_row][tele_col] == 0: if (tele_row, tele_col) not in paths: queue.append((tele_row, tele_col)) paths[(tele_row, tele_col)] += paths[(curr_row, curr_col)] * cost paths = defaultdict(int) bfs((0, 0)) return paths[(n - 1, m - 1)] # Example usage to debug and visualize: n = 3 m = 3 grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] teleporters = [ ((0, 1), (2, 0), 1), ((1, 0), (2, 2), 1) ] print(num_paths_with_teleporters(n, m, grid, teleporters)) # Should output the number of paths to reach from top-left to bottom-right considering obstacles and teleporters."},{"question":"Given a grid with m rows and n columns, you need to find the number of unique paths from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Write a function `uniquePaths(m, n)` that returns the number of unique paths from the top-left corner to the bottom-right corner of an `m` by `n` grid. The result could be very large, so return it modulo 10^9 + 7. For example: - `Input: m = 3, n = 7` - `Output: 28` # Input Format - Two integers, `m` and `n` (1 ≤ m, n ≤ 1000) representing the number of rows and columns of the grid. # Output Format - An integer representing the number of unique paths from the top-left to the bottom-right corner modulo 10^9 + 7. # Example `Input: m = 3, n = 3` `Output: 6` # Note: 1. Ensure your solution is efficient and can handle large inputs up to 1000 x 1000 grid size within reasonable time limits. 2. Think about dynamic programming for solving this problem efficiently.","solution":"def uniquePaths(m, n): Returns the number of unique paths from top-left to bottom-right of a m x n grid. MOD = 10**9 + 7 # Create a 2D table to store results of subproblems dp = [[1] * n for _ in range(m)] # Fill dp table using a bottom-up approach for i in range(1, m): for j in range(1, n): dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD return dp[m - 1][n - 1]"},{"question":"A hotel offers a special promotional package that provides guests with a combination of different types of rooms. Each type of room has a specific cost and amount of benefit it provides. Guests have a limited budget and aim to maximize the benefit they get within their budget constraints. Your task is to help a guest determine the maximum benefit they can obtain without exceeding their budget. You are given: - An integer `B` representing the guest\'s budget (1 ≤ B ≤ 10000). - An integer `N` representing the number of different types of rooms available (1 ≤ N ≤ 100). - An array of integers `C` of length `N` where `C[i]` is the cost of the i-th type of room (1 ≤ C[i] ≤ 1000). - An array of integers `V` of length `N` where `V[i]` is the benefit of the i-th type of room (1 ≤ V[i] ≤ 1000). Write a function `max_benefit(B: int, C: List[int], V: List[int]) -> int` that returns the maximum benefit the guest can obtain without exceeding their budget. **Example:** ```python B = 50 C = [10, 20, 30] V = [60, 100, 120] print(max_benefit(B, C, V)) # Output: 220 (Selecting rooms with costs 20 and 30) ``` **Explanation:** With a budget of 50, the guest can select the rooms with costs 20 and 30, resulting in a total benefit of 100 + 120 = 220.","solution":"from typing import List def max_benefit(B: int, C: List[int], V: List[int]) -> int: N = len(C) dp = [0] * (B + 1) for i in range(N): for b in range(B, C[i] - 1, -1): dp[b] = max(dp[b], dp[b - C[i]] + V[i]) return dp[B]"},{"question":"Given an array of integers `arr` and an integer `x`, rearrange the array such that all elements less than `x` come before elements equal to `x`, which come before elements greater than `x`. The order of elements in each partition should be preserved from the original array. # Input Format - The first line contains two space-separated integers, `n` (1 ≤ n ≤ 10^5) and `x` (−10^6 ≤ x ≤ 10^6). - The second line contains `n` space-separated integers, representing the elements of the array. # Output Format - Output a single line with the rearranged array. # Sample Input ``` 5 3 1 2 3 4 3 ``` # Sample Output ``` 1 2 3 3 4 ``` # Explanation - In the given input, the elements less than `3` are `1` and `2`, which should appear first. - The elements equal to `3` are `3` and `3`, which should appear next. - The remaining element `4` is greater than `3`, which should appear last. - The output maintains the order of elements as in the input for each partition. # Constraints - Ensure the solution remains efficient with a time complexity of (O(n)).","solution":"def rearrange_array(arr, x): Rearranges the array such that all elements less than x come before elements equal to x, which come before elements greater than x. The order of elements in each partition is preserved from the original array. less_than_x = [] equal_to_x = [] greater_than_x = [] for num in arr: if num < x: less_than_x.append(num) elif num == x: equal_to_x.append(num) else: greater_than_x.append(num) return less_than_x + equal_to_x + greater_than_x"},{"question":"You are given a list of integers representing the heights of n buildings standing in a row. The goal is to calculate the maximum area of a rectangular section of buildings that can fit in a skyline view when looking from the front. The rectangles are aligned with the bottom of the buildings and can extend upwards to but not beyond the height of the shortest building in the considered rectangular section. More formally, given an array `heights` where `heights[i]` represents the height of the i-th building, you need to find the maximum area of a rectangle that can be formed using consecutive buildings. Note that no building can be skipped when considering a rectangular section. **Input:** - The first line contains a single integer, `n` (1 ≤ n ≤ 100,000), the number of buildings. - The second line contains `n` integers separated by spaces where the i-th integer represents `heights[i]` (1 ≤ heights[i] ≤ 10,000), the height of the i-th building. **Output:** - Print a single integer, the maximum area of a rectangular section of buildings that can fit in a skyline view. **Example:** ``` Input: 6 2 1 5 6 2 3 Output: 10 ``` In this example, the maximum rectangular area can be formed by the buildings with heights `[5, 6]`, which gives an area of 5 * 2 = 10.","solution":"def max_rectangle_area(heights): Calculate the maximum rectangular area in a histogram represented by `heights`. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a string s consisting of lowercase English letters. You can remove at most k characters from the string. Your task is to determine the length of the longest substring of s that contains the same character after removing at most k characters. The first line of the input contains a single integer k (0 le k le 10^5), the number of characters you can remove. The second line of the input contains a string s (1 le |s| le 10^5), where |s| is the length of the string. Print one integer — the length of the longest substring that contains the same character after removing at most k characters.","solution":"def longest_substring_same_char_after_k_removals(s, k): Returns the length of the longest substring with the same character after removing at most k characters. max_length = 0 window_start = 0 max_char_count = 0 char_count = {} for window_end in range(len(s)): right_char = s[window_end] if right_char not in char_count: char_count[right_char] = 0 char_count[right_char] += 1 # Track the count of the most frequent character in the current window max_char_count = max(max_char_count, char_count[right_char]) # If the number of characters to remove exceeds k, shrink the window if (window_end - window_start + 1 - max_char_count) > k: left_char = s[window_start] char_count[left_char] -= 1 window_start += 1 # update the length of the longest substring max_length = max(max_length, window_end - window_start + 1) return max_length # Sample usage: # print(longest_substring_same_char_after_k_removals(\\"aabccbb\\", 2)) # should print 5"},{"question":"Given an array of integers, you are required to determine whether there exists a non-empty subsequence of elements that sum to zero. A subsequence can be obtained by deleting some or no elements without changing the order of the remaining elements. # Input The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the number of integers in the array. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9), the elements of the array. # Output Output \\"Yes\\" if there exists a non-empty subsequence whose sum is zero, otherwise output \\"No\\". # Examples Example 1 Input: ``` 5 1 2 -3 4 5 ``` Output: ``` Yes ``` Explanation: There is a subsequence {1, 2, -3} that sums to zero. Example 2 Input: ``` 3 1 2 3 ``` Output: ``` No ``` Explanation: There is no subsequence that sums to zero. Example 3 Input: ``` 4 4 -2 -2 0 ``` Output: ``` Yes ``` Explanation: There is a subsequence {4, -2, -2} or a subsequence {0} that sums to zero. # Constraints - The sum of the integers may exceed the limits of standard integer representations, so consider using a hash set or map to store intermediate sums efficiently.","solution":"def has_zero_subsequence_sum(arr): Given an array of integers, determines whether there exists a non-empty subsequence that sums to zero. Args: arr (list of int): The list of integers. Returns: str: \\"Yes\\" if there exists a subsequence with sum zero, otherwise \\"No\\". prefix_sum = 0 seen_sums = set() for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in seen_sums: return \\"Yes\\" seen_sums.add(prefix_sum) return \\"No\\""},{"question":"John has a collection of different kinds of marbles. Each type of marble is stored in separate boxes, and each box has a different capacity for marbles. John also has a variety of marble sizes; each marble of a specific type has a consistent size. Now, John wants to fill these boxes with marbles such that each box holds only one type of marble, maximizing the number of marbles that can fit in each box without exceeding its capacity. Given the capacity of each box and the size of each type of marble, determine the maximum number of marbles that can be placed in each box. The first line contains the integer n (1 ≤ n ≤ 50,000) — the number of boxes and the number of different marble sizes. The second line contains the sequence of integers c1, c2, ..., cn (1 ≤ ci ≤ 10^9), where ci represents the capacity of the i-th box. The third line contains the sequence of integers s1, s2, ..., sn (1 ≤ si ≤ 10^9), where si is the size of the marbles that would go into the i-th box. Calculate and print n integers — the i-th integer should be the maximum number of marbles that can be placed in the i-th box. Example: **Input:** ``` 3 15 7 20 3 4 5 ``` **Output:** ``` 5 1 4 ``` Explanation: For the first box with capacity 15 and marble size 3, the maximum number of marbles is 15 // 3 = 5. For the second box with capacity 7 and marble size 4, the maximum number of marbles is 7 // 4 = 1. For the third box with capacity 20 and marble size 5, the maximum number of marbles is 20 // 5 = 4.","solution":"def max_marbles_per_box(n, capacities, marble_sizes): max_marbles = [] for i in range(n): max_marbles.append(capacities[i] // marble_sizes[i]) return max_marbles"},{"question":"You are given a list of integers and a separate integer target. Determine whether any two numbers in the list add up to the target. Write a function that returns \'True\' if there are two distinct indices i and j in the list such that nums[i] + nums[j] equals target, and \'False\' otherwise. Function Signature: ```python def two_sum(nums: List[int], target: int) -> bool: ``` **Input** - `nums`: A list of integers, where each integer can be positive, negative, or zero. - `target`: An integer representing the sum two numbers need to add up to. **Output** - A boolean value: `True` if there exists two indices i and j such that nums[i] + nums[j] equals target; `False` otherwise. **Constraints** - The length of nums is at least 2 and at most 10^4. - Each element in nums is between -10^9 and 10^9. - The target is also an integer between -10^9 and 10^9. **Example** ```python # Example 1 nums = [2, 7, 11, 15] target = 9 # 2 + 7 = 9 assert two_sum(nums, target) == True # Example 2 nums = [3, 2, 4] target = 6 # 2 + 4 = 6 assert two_sum(nums, target) == True # Example 3 nums = [3, 3] target = 6 # 3 + 3 = 6 assert two_sum(nums, target) == True # Example 4 nums = [1, 2, 3] target = 7 # No pair sums to 7 assert two_sum(nums, target) == False ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> bool: Determine whether any two numbers in the list add up to the target. Returns True if there are two distinct indices i and j in the list such that nums[i] + nums[j] equals target. Otherwise, returns False. # Using a set to keep track of the numbers we have seen so far. seen = set() for num in nums: # Calculate the complement that would complete the equation num + complement = target complement = target - num # If complement is found in set, it means we have a pair that sums up to target if complement in seen: return True # Add the current number to the set of seen numbers seen.add(num) # Return False if no such pair is found return False"},{"question":"There is a circular race track with n checkpoints and m bidirectional paths connecting some pairs of checkpoints. Each path has a time value indicating how long it takes to travel that path. You are given the coordinates and time values for each path between checkpoints. You need to start at one checkpoint and return to the same checkpoint after visiting all other checkpoints exactly once. Your task is to find the minimum possible time required to complete this tour. The first line of the input contains two space-separated integers n and m (2 ≤ n ≤ 100, 0 ≤ m ≤ n*(n-1)/2), where n is the number of checkpoints and m is the number of paths. Each of the next m lines contains three integers ai, bi, and ti (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ti ≤ 1000) denoting a path between checkpoints ai and bi with a travel time of ti. Output a single integer - the minimum time required to complete the tour visiting all checkpoints exactly once starting and ending at any checkpoint. If it is not possible to complete the tour, print -1. Example input: ``` 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 ``` Example output: ``` 80 ```","solution":"from itertools import permutations def min_tour_time(n, m, paths): # Create adjacency matrix for the graph inf = float(\'inf\') graph = [[inf] * n for _ in range(n)] for a, b, t in paths: graph[a-1][b-1] = t graph[b-1][a-1] = t # Check for isolated nodes for i in range(n): if all(graph[i][j] == inf for j in range(n)): return -1 min_time = inf # Calculate all permutations of nodes for perm in permutations(range(1, n)): curr_time = 0 prev_node = 0 # Start from node 0 for node in perm: if graph[prev_node][node] == inf: curr_time = inf break curr_time += graph[prev_node][node] prev_node = node if graph[prev_node][0] != inf: curr_time += graph[prev_node][0] else: curr_time = inf min_time = min(min_time, curr_time) if min_time == inf: return -1 return min_time"},{"question":"A software company is developing an inventory management system for a large warehouse. The warehouse consists of n different sections, where each section contains distinct items with unique item IDs. The company needs to keep track of the quantity of each item across all sections. You are required to implement an efficient solution to handle the following operations: 1. Record an item\'s quantity in a specific section. 2. Update the quantity of an item in a specific section. 3. Retrieve the total quantity of an item across all sections. The first line of the input contains an integer n (1 ≤ n ≤ 100), the number of sections in the warehouse. The second line contains an integer q (1 ≤ q ≤ 100,000), the number of operations. Each of the next q lines contains a query in one of the following formats: - \\"RECORD section_id item_id quantity\\" - Record the quantity of item_id in section_id. If the item_id already exists in the section_id, the quantity should be updated to the new value provided. - \\"UPDATE section_id item_id new_quantity\\" - Update the quantity of item_id in section_id to new_quantity. - \\"TOTAL item_id\\" - Retrieve the total quantity of item_id across all sections. Your task is to process each query efficiently and output the result for each \\"TOTAL item_id\\" query. Input format: - The first line contains the integer n. - The second line contains the integer q. - Each of the next q lines contains a query in one of the specified formats. Output format: - For each \\"TOTAL item_id\\" query, output a single integer representing the total quantity of item_id across all sections. Example: ``` Input: 3 7 RECORD 1 1001 5 RECORD 2 1001 3 TOTAL 1001 UPDATE 1 1001 7 TOTAL 1001 RECORD 3 1002 4 TOTAL 1002 Output: 8 10 4 ``` Explanation: - After the first two RECORD operations, the total quantity of item 1001 across sections 1 and 2 is 8. - Following the UPDATE operation, the quantity of item 1001 in section 1 changes to 7, making the total 10. - Finally, after recording item 1002 in section 3, the total for item 1002 across all sections is 4.","solution":"from collections import defaultdict class WarehouseInventory: def __init__(self, n): self.sections = defaultdict(lambda: defaultdict(int)) self.n = n def record(self, section_id, item_id, quantity): self.sections[section_id][item_id] = quantity def update(self, section_id, item_id, new_quantity): self.sections[section_id][item_id] = new_quantity def total(self, item_id): total_quantity = 0 for section_id in range(1, self.n + 1): total_quantity += self.sections[section_id][item_id] return total_quantity def process_queries(n, q, queries): inventory = WarehouseInventory(n) results = [] for query in queries: parts = query.split() if parts[0] == \\"RECORD\\": _, section_id, item_id, quantity = parts inventory.record(int(section_id), int(item_id), int(quantity)) elif parts[0] == \\"UPDATE\\": _, section_id, item_id, new_quantity = parts inventory.update(int(section_id), int(item_id), int(new_quantity)) elif parts[0] == \\"TOTAL\\": _, item_id = parts results.append(inventory.total(int(item_id))) return results"},{"question":"You are given an array of integers representing the heights of cylinders arranged in a line. Each cylinder has a height defined by the corresponding element in the array. You are required to equalize the height of the cylinders by cutting the top off some of the taller cylinders. The goal is to minimize the total number of cuts needed to make all cylinders the same height. You can only make a single cut on a cylinder in each step, reducing its height by 1 unit. Write a function `minimumCuts(heights)` that takes an array of integers `heights` of length `n` (1 le n le 10^5, 1 le heights[i] le 10^9) representing the initial heights of the cylinders and returns the minimum number of cuts needed. # Input - An array of integers heights representing the initial heights of the cylinders. # Output - An integer representing the minimum number of cuts needed to equalize the heights of all cylinders. # Example Example 1: Input: ``` heights = [4, 3, 1] ``` Output: ``` 3 ``` Explanation: We can perform the following cuts: - Cut the first cylinder from height 4 to height 3 (1 cut). - Cut the first cylinder from height 3 to height 1 (2 cuts). - Total cuts = 1 + 2 = 3 Example 2: Input: ``` heights = [5, 5, 5, 5] ``` Output: ``` 0 ``` Explanation: All cylinders are already of the same height. # Constraints - The number of cylinders n is between 1 and 10^5. - Heights of the cylinders heights[i] are between 1 and 10^9. # Note You can modify the heights of the cylinders only by cutting them down.","solution":"def minimumCuts(heights): Returns the minimum number of cuts needed to make all cylinders the same height. min_height = min(heights) total_cuts = sum(height - min_height for height in heights) return total_cuts"},{"question":"In a battlefield scenario, there\'s a war between two armies: the Red army and the Blue army. Each army consists of several soldiers, where each soldier is described by their combat strength. The combat for each pair of soldiers (one from each army) results in a victory for the soldier with higher combat strength. If both soldiers have the same strength, no army gets a point for that pair. Given the list of combat strengths of soldiers in the Red army and the Blue army, you need to determine the difference in total points between the Red army and the Blue army after all possible pairs have been evaluated. The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of soldiers in the Red army and the Blue army, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 105) — the combat strengths of the soldiers in the Red army. The third line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 105) — the combat strengths of the soldiers in the Blue army. Output a single integer — the point difference (points of Red army − points of Blue army). Consider the first sample: Input: 4 3 6 7 8 10 5 5 10 For each pair between soldiers of the Red army and the Blue army: - 6 against 5: Red gets a point - 6 against 5: Red gets a point - 6 against 10: Blue gets a point - 7 against 5: Red gets a point - 7 against 5: Red gets a point - 7 against 10: Blue gets a point - 8 against 5: Red gets a point - 8 against 5: Red gets a point - 8 against 10: Blue gets a point - 10 against 5: Red gets a point - 10 against 5: Red gets a point - 10 against 10: Neither gets a point Total Red points = 8, Blue points = 3. The difference is 5. Sample input: 4 3 6 7 8 10 5 5 10 Sample Output: 5 Note: - The problem constraints ensure n and m can be large, so your solution should be efficient. - Consider efficient ways of counting victories without explicitly evaluating all pairs.","solution":"def calculate_point_difference(n, m, red_strengths, blue_strengths): red_points = 0 blue_points = 0 for red in red_strengths: for blue in blue_strengths: if red > blue: red_points += 1 elif red < blue: blue_points += 1 return red_points - blue_points"},{"question":"You are given a list of integers. Your task is to find the maximum length of a subarray where the absolute difference between any two elements is less than or equal to 1. For example, if the list is [1, 2, 2, 3, 1, 2], the longest subarray with the absolute difference between each element being less than or equal to 1 is [1, 2, 2, 1, 2] with length 5. The first line of input contains one integer n (1 le n le 100) — the number of elements in the list. The second line contains n integers representing the list elements, where each integer a_i (1 le a_i le 100). Print one integer — the maximum length of the required subarray. Example: Input: 6 1 2 2 3 1 2 Output: 5","solution":"def max_length_subarray_with_abs_diff_one(n, arr): Returns the maximum length of a subarray where the absolute difference between any two elements is less than or equal to 1. from collections import Counter max_length = 0 count = Counter(arr) for x in count: max_length = max(max_length, count[x] + count.get(x + 1, 0)) return max_length"},{"question":"During a treasure hunt, a group of n adventurers find themselves in need of crossing a rickety bridge to continue their journey. However, the bridge can hold at most weight w at a time. Each adventurer has a weight ai, and as they cross the bridge, they do so in a specific order. The adventurers are initially in a line, and they cross the bridge in pairs from the start of the line. If the sum of the weights of the two adventurers exceeds the maximum weight w that the bridge can hold, the second adventurer in the pair cannot cross with the first one and has to wait. The first adventurer in line always tries to take the second in line with them. You need to simulate this process and determine the minimum number of trips needed for all the adventurers to cross the bridge. If an adventurer crosses the bridge individually, they also count as a trip. The first line of the input contains two positive integers n (1 ≤ n ≤ 1000) and w (1 ≤ w ≤ 1000) – the number of adventurers and the maximum weight the bridge can hold. The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the weights of the adventurers in the order they need to cross the bridge. In the output, print one integer – the minimum number of trips needed for all the adventurers to cross the bridge. # Sample Input 1: 5 200 50 50 100 50 100 # Sample Output 1: 3 # Explanation 1: - The first adventurer with weight 50 crosses with the second adventurer with weight 50 in the first trip (total weight = 100). - The third adventurer with weight 100 crosses with the fourth adventurer with weight 50 in the second trip (total weight = 150). - The fifth adventurer with weight 100 crosses alone in the third trip (total weight = 100). # Sample Input 2: 4 150 80 90 40 70 # Sample Output 2: 3 # Explanation 2: - The first adventurer with weight 80 crosses alone in the first trip (since the combined weight with any adventurer exceeds 150). - The second adventurer with weight 90 crosses alone in the second trip. - The third adventurer with weight 40 and the fourth adventurer with weight 70 cross together in the third trip (total weight = 110).","solution":"def min_trips(n, w, weights): Determines the minimum number of trips needed for all the adventurers to cross the bridge given the constraints. Parameters: n (int): Number of adventurers w (int): Maximum weight capacity of the bridge weights (list of int): Weights of the adventurers in the order they need to cross Returns: int: Minimum number of trips needed for all the adventurers to cross the bridge trips = 0 i = 0 while i < n: if i < n - 1 and weights[i] + weights[i + 1] <= w: trips += 1 i += 2 else: trips += 1 i += 1 return trips"},{"question":"In a forest, there are `n` trees arranged in a straight line, and each tree is located along the x-axis at integer coordinates. The height of the `i-th` tree is given by `h_i`. Woodpeckers often visit this forest, and when they do, they peck at the trees and damage their height. Specifically, a woodpecker reduces the height of any tree it pecks to zero. Woodpeckers can randomly choose any tree to peck at, but they do not return to any tree they have already damaged. Given the initial heights of all trees, your task is to find out the maximum possible height that any tree can have just after one visit from a woodpecker. This means that one tree will be completely damaged (its height will be reduced to zero), and you need to compute the maximum height among the remaining trees. The first line contains an integer `n` (1 ≤ n ≤ 100,000) which is the number of trees. The second line contains `n` integers `h_1, h_2, ..., h_n` (1 ≤ h_i ≤ 10,000) representing the initial heights of the trees. Output a single integer which is the maximum possible height of the remaining trees after a woodpecker has visited and damaged one tree. # Sample Input ``` 5 4 8 6 7 3 ``` # Sample Output ``` 8 ``` # Explanation After the woodpecker visits, one of the trees will have its height reduced to zero. The maximum possible heights of the remaining trees could be [0, 8, 6, 7, 3], [4, 0, 6, 7, 3], [4, 8, 0, 7, 3], [4, 8, 6, 0, 3], or [4, 8, 6, 7, 0]. The highest value among these scenarios is 8. Hence, the answer is 8.","solution":"def max_remaining_height(n, heights): Given the initial heights of all trees, find out the maximum possible height that any tree can have just after one visit from a woodpecker. Args: n (int): Number of trees. heights (list): List of initial heights of the trees. Returns: int: Maximum possible height of the remaining trees after woodpecker visit. if n == 1: return 0 # If there\'s only one tree, after damaging it, the maximum height will be zero. max_height = max(heights) return max_height"},{"question":"Ivan wants to find the longest palindrome in a string. A palindrome is a string that reads the same forwards and backwards. For example, \\"racecar\\" and \\"level\\" are palindromes. Ivan needs your help to determine the longest palindromic substring in the given string. If there are multiple longest palindromic substrings with the same length, return the first one that appears in the string. The input is a single string s consisting of lowercase Latin letters (1 ≤ |s| ≤ 1000). Output the longest palindromic substring in the given string. Here are some examples: **Example 1:** Input: babad Output: bab Explanation: The longest palindromic substring is \\"bab\\". Note that \\"aba\\" is also a valid answer. **Example 2:** Input: cbbd Output: bb Explanation: The longest palindromic substring is \\"bb\\". **Example 3:** Input: a Output: a Explanation: The longest palindromic substring is \\"a\\". **Example 4:** Input: ac Output: a Explanation: The longest palindromic substring is \\"a\\". Note that \\"c\\" is also a valid answer in this case because they both have the same length.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string. if not s or len(s) == 1: return s n = len(s) start, max_length = 0, 1 def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd length palindromes expand_around_center(i, i) # Even length palindromes expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Implement a function `longest_substring_with_k_distinct_chars(s: str, k: int) -> int` that takes a string `s` and an integer `k` as its parameters. The function should return the length of the longest substring that contains exactly `k` distinct characters. If there is no such substring, return 0. **Constraints:** - The length of the input string `s` is at most 100,000. - The input string `s` contains only lowercase English letters. - The integer `k` is in the range [1, 26]. **Examples:** 1. `longest_substring_with_k_distinct_chars(\\"araaci\\", 2) -> 4` - Explanation: The longest substring with 2 distinct characters is \\"araa\\". 2. `longest_substring_with_k_distinct_chars(\\"araaci\\", 1) -> 2` - Explanation: The longest substring with 1 distinct character is \\"aa\\". 3. `longest_substring_with_k_distinct_chars(\\"cbbebi\\", 3) -> 5` - Explanation: The longest substring with 3 distinct characters is \\"cbbeb\\". 4. `longest_substring_with_k_distinct_chars(\\"cbbebi\\", 10) -> 0` - Explanation: There is no substring with exactly 10 distinct characters. **Approach:** - Use a sliding window to maintain a window with at most `k` distinct characters. - Expand the window by moving the end pointer. - If the window has more than `k` distinct characters, shrink it from the start until it contains only `k` distinct characters again. - Keep track of the maximum length of the window that contains exactly `k` distinct characters throughout the process.","solution":"def longest_substring_with_k_distinct_chars(s: str, k: int) -> int: if k == 0: return 0 start, max_len = 0, 0 char_frequency = {} for end in range(len(s)): right_char = s[end] if right_char not in char_frequency: char_frequency[right_char] = 0 char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] start += 1 if len(char_frequency) == k: max_len = max(max_len, end - start + 1) return max_len"},{"question":"A sequence of distinct integers a1, a2, ..., an is called \\"almost increasing\\" if for any 1 ≤ i < j ≤ n, ai is not greater than aj by more than 1. In other words, for any two elements in the sequence, the difference between the smaller and the larger one is at most 1. Given an integer n (1 ≤ n ≤ 10^5), your task is to construct an almost increasing sequence of length n, consisting of distinct integers from 1 to 2n. The first line contains integer n (1 ≤ n ≤ 10^5) — the required sequence length. Print n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 2n) in a single line separated by a space — the required almost increasing sequence. If it is impossible to create such a sequence, print \\"-1\\" (without the quotes). If there are multiple correct sequences, you can print any of them.","solution":"def almost_increasing_sequence(n): if n == 1: return [1] if n > 1: seq = [] for i in range(1, n+1): if i % 2 == 0: seq.append(i + n) else: seq.append(i) return seq return -1"},{"question":"Tom has a bookshelf with `n` books, each book has an integer `d` written on its spine representing its download speed in Mbps. He wants to rearrange the books such that the average download speed of books on the shelf does not change, but the maximum difference between any two adjacent books is minimized. Your task is to find out the minimum possible value of the maximum difference between any two adjacent books after rearranging them. The first input line contains a single integer `n` (2 ≤ n ≤ 2·10^5) — the number of books on the shelf. The second line contains `n` integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) — the download speeds of the books. In the first line, print a single integer — the minimum possible value of the maximum difference between any two adjacent books after rearrangement. # Example: ``` Input: 5 1 5 3 9 2 Output: 2 ``` # Explanation: One possible arrangement is [1, 2, 3, 5, 9] which has differences 1, 1, 2, 4. The maximum difference is 4. If we use the arrangement [1, 3, 2, 5, 9], differences are 2, 1, 3, 4. The maximum difference here is 4. The minimum possible \\"maximum adjacent difference\\" is 2, achieved by an optimal arrangement.","solution":"def minimum_max_difference(n, speeds): Returns the minimum possible value of the maximum difference between any two adjacent books after rearrangement. speeds.sort() min_max_diff = float(\'inf\') for i in range(1, n): min_max_diff = min(min_max_diff, speeds[i] - speeds[i-1]) return min_max_diff"},{"question":"# Problem Statement You are given a grid with m rows and n columns, where each cell contains an integer value. You can perform the following operation on the grid any number of times (including zero): select any sub-grid and increment all the values within that sub-grid by 1. Your task is to determine the minimum number of operations needed to make all values in the grid equal. **Input:** - The first line contains two integers m and n (1 ≤ m, n ≤ 50) — the number of rows and columns in the grid. - Each of the next m lines contains n integers — the values in the grid. Each number is between 0 and 1000, inclusive. **Output:** - Output a single integer: the minimum number of operations needed to make all the values in the grid equal. **Example:** **Input:** ``` 2 3 1 2 3 4 5 6 ``` **Output:** ``` 0 ``` **Explanation:** In this example, no operation is needed since there are already no sub-grid of different values possible. Hence, the output is 0. However, if operations were needed, those numbers would be the minimum.","solution":"def min_operations_to_equalize_grid(grid): Determine the minimum number of operations needed to make all values in the grid equal. m = len(grid) n = len(grid[0]) # Flatten the grid to make calculations easier. flat_grid = [grid[i][j] for i in range(m) for j in range(n)] # Find the maximum value and minimum value in the entire grid. max_value = max(flat_grid) min_value = min(flat_grid) return max_value - min_value"},{"question":"Write a function to perform matrix multiplication of two given square matrices. The input will be two lists of lists representing the matrices, and the output should be a new list of lists representing the product matrix. Make sure to implement your solution in such a way that it works for any given square matrices of the same size. Your function should have the following signature: ```python def matrix_multiply(matrix1: List[List[int]], matrix2: List[List[int]]) -> List[List[int]]: ``` # Example: ```python matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ] matrix_multiply(matrix1, matrix2) ``` # Output: ```python [ [19, 22], [43, 50] ] ```","solution":"from typing import List def matrix_multiply(matrix1: List[List[int]], matrix2: List[List[int]]) -> List[List[int]]: Multiplies two square matrices and returns the resulting matrix. Parameters: matrix1 (List[List[int]]): The first matrix. matrix2 (List[List[int]]): The second matrix. Returns: List[List[int]]: The resulting matrix after multiplication. n = len(matrix1) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): for k in range(n): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"A large software company maintains a system running across many servers. Each server reports a unique ID number and records its current load, represented as an integer, at regular intervals. The company\'s infrastructure team needs to quickly identify if any servers are experiencing overload conditions, defined as a load greater than a certain threshold. Develop a function to help the infrastructure team identify overloaded servers. Your function should take a list of server load reports and a threshold value, and return a list of server IDs that are experiencing overload. Each server load report is represented as a tuple containing the server ID and its current load. Function signature: ```python def find_overloaded_servers(load_reports: List[Tuple[int, int]], threshold: int) -> List[int]: ``` # Input - `load_reports`: A list of tuples where each tuple contains two integers. The first integer is the server ID and the second integer is the server\'s current load. The length of this list does not exceed 10^5. - `threshold`: An integer representing the overload threshold. # Output - A list of integers containing the server IDs that have a load greater than the given threshold. The order of the server IDs in the output list should be the same as their appearance in the input list. # Example ```python load_reports = [(101, 55), (102, 75), (103, 60), (101, 80)] threshold = 70 print(find_overloaded_servers(load_reports, threshold)) # Output: [102, 101] ``` # Constraints - Server IDs are guaranteed to be positive integers and unique within each load report. - The load for each server is a non-negative integer. - The threshold is a non-negative integer. Ensure that the design and implementation of your function remain efficient to handle large inputs within reasonable time limits.","solution":"from typing import List, Tuple def find_overloaded_servers(load_reports: List[Tuple[int, int]], threshold: int) -> List[int]: Returns a list of server IDs that have a load greater than the given threshold. overloaded_servers = [] for server_id, load in load_reports: if load > threshold: overloaded_servers.append(server_id) return overloaded_servers"},{"question":"You are given two integers n and m representing the number of nodes and the number of directed edges in a graph, respectively. Each node is labeled with a unique integer from 1 to n. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 109) representing a directed edge from node u to node v with weight c. A path is defined as a sequence of edges connecting any two nodes. The cost of a path is the sum of the weights of the edges within it. Your task is to answer q queries, where each query gives you two integers, a and b (1 ≤ a, b ≤ n), and asks you to determine the minimum cost required to travel from node a to node b. If there is no path from a to b, return -1. The first line of input contains two integers n and m. Each of the next m lines contains three integers u, v, and c. The next line contains a single integer q, representing the number of queries. Each of the next q lines contains two integers a and b, representing the start and end node of a query. Output q lines, each containing the answer for one query. Example Input: ``` 4 4 1 2 1 2 3 1 3 4 1 1 4 4 2 1 4 2 1 ``` Output: ``` 3 -1 ``` This example means: There are 4 nodes and 4 directed edges in the graph. - Edges are: 1 -> 2 with weight 1, 2 -> 3 with weight 1, 3 -> 4 with weight 1, 1 -> 4 with weight 4. - The first query asks for the minimum cost from node 1 to node 4, which is 3. - The second query asks for the minimum cost from node 2 to node 1, which is not possible, so the answer is -1.","solution":"import heapq def dijkstra(graph, start, n): Implements Dijkstra\'s algorithm to compute shortest paths from start node to all other nodes in the graph. graph: adjacency list where graph[u] is a list of tuples (v, c) meaning there is an edge from node u to node v with cost c. start: the start node for shortest path calculation. n: the number of nodes in the graph. Returns a list of minimum distances from start to each node (index 1 to n). If a node is unreachable, it will have a distance of float(\'inf\'). distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] # priority queue of (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_shortest_paths(n, m, edges, queries): Wrapper function to initialize graph and process each query for minimum path cost using Dijkstra\'s algorithm. n: number of nodes m: number of edges edges: list of edges where each edge is a tuple (u, v, c) queries: list of queries where each query is a tuple (a, b) Returns a list of answers for each query. graph = [[] for _ in range(n + 1)] for u, v, c in edges: graph[u].append((v, c)) results = [] for a, b in queries: distances = dijkstra(graph, a, n) if distances[b] == float(\'inf\'): results.append(-1) else: results.append(distances[b]) return results def process_input(input_lines): input_iter = iter(input_lines) n, m = map(int, next(input_iter).strip().split()) edges = [] for _ in range(m): u, v, c = map(int, next(input_iter).strip().split()) edges.append((u, v, c)) q = int(next(input_iter).strip()) queries = [] for _ in range(q): a, b = map(int, next(input_iter).strip().split()) queries.append((a, b)) return n, m, edges, queries def main(input_lines): n, m, edges, queries = process_input(input_lines) return find_shortest_paths(n, m, edges, queries)"},{"question":"You are given a binary string `s` of length `n` and an integer `k`. You can flip at most `k` bits of the string (changing `0` to `1` and `1` to `0`). Your task is to determine the length of the longest contiguous subsegment of `1`s after performing at most `k` flips. Input The first line of input contains two integers `n` (`1 ≤ n ≤ 200,000`) and `k` (`0 ≤ k ≤ n`) — the length of the binary string and the maximum number of bits you can flip, respectively. The second line contains the binary string `s` of length `n`. Output Output a single integer — the length of the longest contiguous subsegment of `1`s you can get after performing at most `k` flips. Example Input 7 1 1001101 Output 4 Explanation In the first example, we can flip the fourth bit to get the string `1001111`, which has a longest contiguous subsegment of `1`s of length 4.","solution":"def longest_ones_after_flips(n, k, s): Returns the length of the longest contiguous subsegment of 1s after performing at most k flips. left = 0 flips = 0 max_length = 0 for right in range(n): if s[right] == \'0\': flips += 1 while flips > k: if s[left] == \'0\': flips -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of integers, and you need to transform this list into an array where each element is the average of each pair of adjacent elements from the original list. Write a function `transform_list(n, arr)` that takes the following parameters: - `n`: an integer representing the length of the list (2 ≤ n ≤ 10^5). - `arr`: a list of integers of length `n` (-10^5 ≤ arr[i] ≤ 10^5). The function should return a new list such that each element `i` (0 ≤ i < n - 1) is the average of `arr[i]` and `arr[i + 1]`. Note that the average should be a floating-point number. **Function Signature:** ```python def transform_list(n: int, arr: List[int]) -> List[float]: pass ``` **Example:** ```python n = 5 arr = [10, 20, 30, 40, 50] print(transform_list(n, arr)) # Output: [15.0, 25.0, 35.0, 45.0] ``` **Sample Input:** ``` 5 10 20 30 40 50 ``` **Sample Output:** ``` 15.0 25.0 35.0 45.0 ``` **Explanation:** The output is calculated as follows: - The average of 10 and 20 is (10 + 20) / 2 = 15.0 - The average of 20 and 30 is (20 + 30) / 2 = 25.0 - The average of 30 and 40 is (30 + 40) / 2 = 35.0 - The average of 40 and 50 is (40 + 50) / 2 = 45.0 **Constraints:** - The length of the input list `n` is between 2 and 10^5. - The elements of the input list are integers and lie between -10^5 and 10^5.","solution":"from typing import List def transform_list(n: int, arr: List[int]) -> List[float]: Given a list of integers, transforms this list into an array where each element is the average of each pair of adjacent elements from the original list. return [(arr[i] + arr[i + 1]) / 2 for i in range(n - 1)]"},{"question":"You are given an array of length n with elements ranging from 1 to 1000. To show your problem-solving skills, you need to find the largest sum that can be formed by any non-empty subsequence of this array. An array b is called a subsequence of array a if it can be derived from array a by deleting some or no elements without changing the order of the remaining elements. Your task is to write a function that accepts an integer n, followed by n integers representing the array elements, and returns the largest possible sum from any non-empty subsequence of the array. Each test contains multiple test cases. The input begins with an integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. For each test case: - The first line contains one integer n (1 leq n leq 1000) — the length of the array. - The second line contains n integers a_i (1 le a_i le 1000) — the elements of the array. Output the largest non-empty subsequence sum for each test case on a new line. # Input - The first line contains the integer t. - For each test case, the first line contains the integer n. - The second line contains n integers. # Output - For each test case, output the largest sum of any non-empty subsequence of the given array. # Example Input: ``` 2 5 4 2 3 6 1 3 10 20 30 ``` Output: ``` 16 60 ``` # Explanation: In the first test case, the largest possible sum of a non-empty subsequence from the array [4, 2, 3, 6, 1] is 4 + 6 + 3 + 2 + 1 = 16. In the second test case, the largest possible sum of a non-empty subsequence from the array [10, 20, 30] is 10 + 20 + 30 = 60.","solution":"def max_subsequence_sum(t, test_cases): results = [] for case in test_cases: n, array = case results.append(sum(array)) return results # Example usage: t = 2 test_cases = [ (5, [4, 2, 3, 6, 1]), (3, [10, 20, 30]) ] print(max_subsequence_sum(t, test_cases)) # Output: [16, 60]"},{"question":"A new kitchen management system is being developed for a restaurant. Each chef is responsible for a specific number of dishes each day. The head chef assigns dishes to each chef based on their workload capacity. Your task is to create a program that helps to uniformly distribute dishes among chefs such that the difference in workload between any two chefs is minimized. The input consists of two lines: - The first line contains two integers, m (1 leq m leq 10^{6}) — the number of dishes, and n (1 leq n leq 10^{6}) — the number of chefs. - The second line contains m integers, where the i-th integer represents the time in minutes required to prepare the i-th dish. Your program should distribute the dishes among the chefs such that the maximum workload of any chef is minimized. # Output Your program should output a single integer which is the minimum possible maximum workload of a chef. # Example Input ``` 10 4 11 6 5 4 7 3 10 8 3 1 ``` Output ``` 17 ``` # Explanation In the given example, one possible way to distribute the dishes to achieve the minimum possible maximum workload of 17 is as follows: - Chef 1: 11, 3, 3 (17) - Chef 2: 10, 1 (11) - Chef 3: 8, 7 (15) - Chef 4: 6, 5, 4 (15) The maximum workload among the chefs is 17, which is the smallest possible in this scenario.","solution":"def canDistribute(dishes, m, n, max_workload): chefs = 1 current_workload = 0 for time in dishes: if current_workload + time <= max_workload: current_workload += time else: chefs += 1 current_workload = time if chefs > n: return False return True def minMaxWorkload(m, n, dishes): left, right = max(dishes), sum(dishes) result = right while left <= right: mid = (left + right) // 2 if canDistribute(dishes, m, n, mid): result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Sarah loves creating patterns using asterisks on a grid. She decides to create a pattern where no two asterisks are in the same row or column. Given an integer n (1 ≤ n ≤ 100), representing the size of the grid (n x n), and a list of n integers, where each integer ai (1 ≤ ai ≤ n) denotes the column position of an asterisk in the ith row, help Sarah generate the pattern on the grid and print it. Each cell of the grid should contain either a dot \'.\' or an asterisk \'*\'. Each row must have exactly one asterisk and each column must also have exactly one asterisk. The first line of the input contains an integer n, the size of the grid. The second line of the input contains n integers ai, where each ai denotes the column position of the asterisk in the ith row. Print the generated pattern on the n x n grid. Example: Input: 3 2 1 3 Output: .*. *.. ..* Explanation: For the input, there is a 3x3 grid, the first row has an asterisk at the second column, the second row has an asterisk at the first column, and the third row has an asterisk at the third column.","solution":"def generate_pattern(n, positions): Generate an n x n grid pattern where each row and column has exactly one asterisk according to the given positions. n: int - the size of the grid positions: List[int] - the column positions of the asterisks in each row (1-indexed) Returns a list of strings representing the n x n grid. grid = [[\'.\'] * n for _ in range(n)] for i in range(n): col = positions[i] - 1 grid[i][col] = \'*\' return [\'\'.join(row) for row in grid]"},{"question":"A chef is organizing their recipe collection and wants to categorize each recipe by its main ingredient. Each recipe is represented by an ingredient and a list of processes. A process is defined as a string indicating the cooking step, which consists of a decipherable action (e.g., chop, fry, boil, bake) followed by an ingredient. For instance, a process might be \\"chop onion\\" or \\"fry chicken\\". The chef wants to find out how many unique ingredients are involved in the making of each recipe and determine the main ingredient for categorization. The main ingredient of a recipe is the ingredient that appears the most frequently across its processes. If there is a tie, the main ingredient is the one that appears first in the order of the processes. Your task is to write a function to help the chef with this categorization. The function should return a list containing the main ingredient of each recipe in the same order as the input data. # Input - An integer `n` (1 ≤ n ≤ 100), the number of recipes. - For each recipe, a string representing the main ingredient followed by an integer `m` (1 ≤ m ≤ 100) representing the number of processes, and then `m` strings each representing a cooking process. # Output - A list of `n` strings where each string is the main ingredient of the corresponding recipe. # Example ```py Input: 2 \\"chicken\\" 3 \\"fry chicken\\" \\"boil water\\" \\"chop vegetables\\" \\"beef\\" 4 \\"chop beef\\" \\"boil water\\" \\"fry beef\\" \\"bake potatoes\\" Output: [\\"chicken\\", \\"beef\\"] Explanation: For the first recipe: - chicken appears in \\"fry chicken\\" - water appears in \\"boil water\\" - vegetables appear in \\"chop vegetables\\" The main ingredient is \\"chicken\\" as it appears the most frequently. For the second recipe: - beef appears in \\"chop beef\\" and \\"fry beef\\" - water appears in \\"boil water\\" - potatoes appear in \\"bake potatoes\\" The main ingredient is \\"beef\\" as it appears the most frequently. If there was a tie: Example: \\"beef\\" 4 \\"chop beef\\" \\"boil water\\" \\"fry beef\\" \\"bake beef\\" Both beef and water appear once, hence beef would be the main ingredient as it appears first in the list. ```","solution":"def categorize_recipes(n, recipes): def get_main_ingredient(recipe): _, processes = recipe ingredient_count = {} for process in processes: action, ingredient = process.split(\' \', 1) if ingredient not in ingredient_count: ingredient_count[ingredient] = 0 ingredient_count[ingredient] += 1 main_ingredient = None max_count = 0 for process in processes: _, ingredient = process.split(\' \', 1) if ingredient_count[ingredient] > max_count: max_count = ingredient_count[ingredient] main_ingredient = ingredient return main_ingredient result = [] for recipe in recipes: result.append(get_main_ingredient(recipe)) return result"},{"question":"Your task is to help Suzie create a list of distinct positive integers whose sum is equal to a given number m. The list should be as long as possible. A single line containing one integer m (2 leq m leq 10^9) — the integer Suzie has. Print a positive integer k — the number of elements in the list. Print k distinct positive integers in a single line, whose sum equals m. If there are multiple solutions, print any of them. Example: ``` Input: 15 Output: 5 1 2 3 4 5 ``` Explanation: 1 + 2 + 3 + 4 + 5 = 15","solution":"def create_distinct_sum(m): k = 0 numbers = [] current_sum = 0 i = 1 while current_sum + i <= m: numbers.append(i) current_sum += i i += 1 if current_sum < m: numbers[-1] += (m - current_sum) return len(numbers), numbers"},{"question":"You are given a rectangular grid with N rows and M columns. Each cell in the grid contains either a ‘0’ or a ‘1’. A cell containing a ‘1’ is considered blocked, and a cell containing a ‘0’ is considered unblocked. You need to determine whether there exists a path from the top-left corner (0,0) to the bottom-right corner (N-1,M-1) of the grid. You can move up, down, left, or right, but you cannot move diagonally. The path should only pass through unblocked cells (cells with \'0\'). If a path exists, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format - The first line contains two integers N and M (1 ≤ N, M ≤ 100) – the number of rows and columns in the grid. - The next N lines contain M integers each (either \'0\' or \'1\'), representing the cells of the grid. # Output Format - Print \\"YES\\" if there is a path from (0,0) to (N-1,M-1) through unblocked cells; otherwise, print \\"NO\\". # Example Example 1 Input: ``` 4 4 0 1 1 0 0 1 0 0 0 0 0 1 1 1 0 0 ``` Output: ``` YES ``` Example 2 Input: ``` 3 3 0 1 0 1 0 1 0 1 0 ``` Output: ``` NO ``` # Note In the first example, one possible path from (0,0) to (N-1,M-1) is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3) In the second example, there is no path from (0,0) to (N-1,M-1) due to the blocked cells.","solution":"def is_path_exist(grid, N, M): Determines if there exists a path from the top-left to the bottom-right of the grid. if grid[0][0] == 1 or grid[N-1][M-1] == 1: return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"A software company is developing a new application to manage a library. The library has a collection of books, and each book has a unique identifier (ID), a title, an author, and a publication year. The application should allow users to perform the following operations: 1. **Add a book**: Add a new book to the library collection. 2. **Remove a book**: Remove a book from the library given its ID. 3. **Find the oldest book**: Retrieve the book with the earliest publication year. If there are multiple books with the same earliest year, retrieve the one added first. 4. **Find books by an author**: Retrieve all books written by a specified author. Your task is to implement the `Library` class that provides these functionalities. The class should have the following methods: - `add_book(id: int, title: str, author: str, year: int) -> None`: Adds a book with the given ID, title, author, and publication year to the library. - `remove_book(id: int) -> bool`: Removes the book with the specified ID from the library. Returns `True` if the book was successfully removed, otherwise `False`. - `find_oldest_book() -> Tuple[int, str, str, int]`: Finds and returns the information of the oldest book as a tuple `(id, title, author, year)`. If the library is empty, return `None`. - `find_books_by_author(author: str) -> List[Tuple[int, str, int]]`: Finds and returns all books written by the specified author as a list of tuples `(id, title, year)`. The books should be listed in the order they were added. Additionally, ensure that the library can handle up to `50,000` books efficiently. ```python class Library: def __init__(self): # Your initialization code here def add_book(self, id: int, title: str, author: str, year: int) -> None: # Your code here def remove_book(self, id: int) -> bool: # Your code here def find_oldest_book(self) -> Tuple[int, str, str, int]: # Your code here def find_books_by_author(self, author: str) -> List[Tuple[int, str, int]]: # Your code here ``` Example usage: ```python library = Library() library.add_book(1, \\"1984\\", \\"George Orwell\\", 1949) library.add_book(2, \\"Animal Farm\\", \\"George Orwell\\", 1945) library.add_book(3, \\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) library.find_oldest_book() # Returns (2, \\"Animal Farm\\", \\"George Orwell\\", 1945) library.find_books_by_author(\\"George Orwell\\") # Returns [(1, \\"1984\\", 1949), (2, \\"Animal Farm\\", 1945)] library.remove_book(2) # Returns True library.find_oldest_book() # Returns (1, \\"1984\\", \\"George Orwell\\", 1949) ```","solution":"from typing import List, Tuple, Optional, Dict class Library: def __init__(self): self.books = {} self.books_by_author = {} def add_book(self, id: int, title: str, author: str, year: int) -> None: book = (id, title, author, year) self.books[id] = book if author in self.books_by_author: self.books_by_author[author].append(book) else: self.books_by_author[author] = [book] def remove_book(self, id: int) -> bool: if id in self.books: book = self.books.pop(id) author_books = self.books_by_author[book[2]] author_books = [b for b in author_books if b[0] != id] if author_books: self.books_by_author[book[2]] = author_books else: del self.books_by_author[book[2]] return True return False def find_oldest_book(self) -> Optional[Tuple[int, str, str, int]]: if not self.books: return None return min(self.books.values(), key=lambda b: (b[3], b[0])) def find_books_by_author(self, author: str) -> List[Tuple[int, str, int]]: if author not in self.books_by_author: return [] return [(b[0], b[1], b[3]) for b in self.books_by_author[author]]"},{"question":"You are given an array of integers a of length n. You are allowed to perform the following operation any number of times: - Select two distinct elements from the array, say i and j, and set a[i] to a[i] - 1 and a[j] to a[j] - 1. Your task is to determine the maximum possible value of the minimum element in the array after performing any number of such operations. The first line of the input contains a single integer n (2 le n le 10^5) — the length of the array. The second line contains n space-separated integers a[1], a[2], ldots, a[n] (1 le a[i] le 10^9) — the elements of the array. If it is impossible to decrease any of the elements, print the value of the minimum element in the original array. Otherwise, print the maximum possible value of the minimum element. # Example Input ``` 4 2 3 4 5 ``` Output ``` 3 ``` Input ``` 3 1 1 1 ``` Output ``` 1 ```","solution":"def max_min_after_operations(n, a): Returns the maximum possible value of the minimum element after performing the allowed operations. Parameters: n (int): The length of the array. a (list[int]): The array of integers. Returns: int: The maximum possible value of the minimum element. total_sum = sum(a) if total_sum % n == 0: return total_sum // n else: return total_sum // n"},{"question":"Suppose you are given a rectangular grid of size n x m, where each cell is either empty or contains an obstacle. You are standing at the top-left corner of the grid (0, 0) and need to move to the bottom-right corner (n-1, m-1). You can only move either down or right at any point in time. Your task is to count the number of distinct paths from the top-left corner to the bottom-right corner that navigate around obstacles. Write a function `count_paths` that accepts a 2-dimensional list `grid` representing the grid. Each element in the list is either 0 (indicating an empty cell) or 1 (indicating an obstacle). The function should return the number of distinct paths from the top-left corner to the bottom-right corner. # Input - A 2D list `grid` of size `n x m` (1 ≤ n, m ≤ 1000). # Output - An integer representing the number of distinct paths from the top-left corner to the bottom-right corner, avoiding obstacles. # Example ```python def count_paths(grid): # Your code goes here # Example grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(count_paths(grid)) # Output: 2 ``` # Explanation In the example given, the grid has the following configuration: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` There are exactly 2 paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def count_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"In a large company, employees are organized in a hierarchical structure modeled as a tree rooted at the company\'s CEO. Each employee has a unique ID number from 1 to n. The CEO\'s ID is 1 and each employee (except the CEO) has exactly one direct supervisor. You are provided with this information as an array `supervisors` where the i-th element of the array (1-indexed) contains the ID of the direct supervisor of the employee with ID i+1. The company is implementing a new policy in which they want to determine communication routes between employees. To facilitate this, you need to answer queries asking for the shortest communication path between two employees in the hierarchy. The shortest path is defined by the smallest number of supervisor-subordinate relationships traversed. The first line of the input contains two integers n (2 ≤ n ≤ 10000) and q (1 ≤ q ≤ 5000), the number of employees and the number of queries. The second line contains n-1 integers representing the `supervisors` array where the i-th integer (1 ≤ i ≤ n-1) gives the supervisor for the employee with ID i+2. Each of the following q lines contains two integers u and v (1 ≤ u, v ≤ n) representing a query asking for the shortest communication path between employee u and employee v. For each query, output the length of the shortest path between the two employees on a new line. Example input: ``` 5 3 1 1 2 2 3 4 4 5 2 5 ``` Example output: ``` 3 2 1 ``` Explanation: - In this hierarchy, employee 2 and employee 3 have the CEO (1) as their supervisor, while employee 4 and employee 5 have employee 2 as their supervisor. - For the first query (3, 4), the path is 3 -> 1 -> 2 -> 4, which has 3 edges. - For the second query (4, 5), the direct path is 4 -> 2 -> 5, which has 2 edges. - For the third query (2, 5), the path is directly from 2 to 5, which has 1 edge.","solution":"def shortest_path(n, q, supervisors, queries): from collections import defaultdict, deque # Creating the tree tree = defaultdict(list) for i in range(n - 1): supervisor = supervisors[i] employee = i + 2 tree[supervisor].append(employee) tree[employee].append(supervisor) def bfs(start, end): queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: node, distance = queue.popleft() if node == end: return distance for neighbor in tree[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) results = [] for u, v in queries: results.append(bfs(u, v)) return results"},{"question":"In a certain fictional city, there exist N shops along a single straight road. An inventor recently developed a teleportation device that allows a person to instantly move between any two shops. The city mayor wants to test the device by traveling between various pairs of shops to note down the times taken for traveling. The input will be given as follows: - The first line contains a single integer, N (2 ≤ N ≤ 1000), the number of shops. - The second line contains N distinct integers, representing the x-coordinates of the shops. Each coordinate is between -1000 and 1000. The mayor wants to select two shops such that the distance between them is maximized (in terms of absolute distance between their coordinates). Write a program that determines the pair of shops which are farthest apart and prints the maximum distance. If there are multiple such pairs, any pair can be selected. Input: - The first line contains an integer N. - The second line contains N space-separated integers, the x-coordinates of the shops. Output: - Output a single integer, the maximum distance between any two shops. Example: Input: 5 -3 7 9 -1 2 Output: 12 Explanation: The pair of shops located at coordinates -3 and 9 are farthest from each other, with a distance of |9 - (-3)| = 12.","solution":"def max_distance_between_shops(n, coordinates): Returns the maximum distance between any two shops based on their coordinates. min_coord = min(coordinates) max_coord = max(coordinates) return abs(max_coord - min_coord) # Example usage: n = 5 coordinates = [-3, 7, 9, -1, 2] print(max_distance_between_shops(n, coordinates)) # Output: 12"},{"question":"Given a grid of size n times m filled with integers, each cell representing an altitude. You are at the bottom-left corner of the grid and need to reach the top-right corner, but you can only move up or to the right. Additionally, you can only move to an adjacent cell if its altitude is less than or equal to the current cell\'s altitude. Write a program that determines if it is possible to reach the top-right corner of the grid from the bottom-left corner under these conditions. If it is possible, print \\"Possible\\". Otherwise, print \\"Impossible\\". # Input - The first line contains two integers n and m (1 leq n, m leq 1000) - the number of rows and columns of the grid. - Each of the next n lines contains m integers, comprising the altitudes of the cells in the grid. Altitudes are non-negative integers and do not exceed 10000. # Output - Print \\"Possible\\" if you can reach the top-right corner from the bottom-left corner. Otherwise, print \\"Impossible\\". # Example Input ``` 3 3 1 2 3 2 3 4 3 4 5 ``` Output ``` Impossible ```","solution":"def can_reach_top_right(n, m, grid): from collections import deque directions = [(0, 1), (-1, 0)] # Right and Up movements queue = deque([(n-1, 0)]) # start from bottom-left corner (n-1, 0) visited = [[False] * m for _ in range(n)] visited[n-1][0] = True while queue: i, j = queue.popleft() if i == 0 and j == m-1: print(\\"Possible\\") return for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and not visited[ni][nj] and grid[ni][nj] <= grid[i][j]: visited[ni][nj] = True queue.append((ni, nj)) print(\\"Impossible\\") # Example usage: n, m = 3, 3 grid = [ [1, 2, 3], [2, 3, 4], [3, 4, 5] ] can_reach_top_right(n, m, grid)"},{"question":"Sarah has a collection of distinct integer numbers and she wants to determine the number of pairs in the collection that sum up to a given target value. A pair (a, b) is considered the same as (b, a), and thus should only be counted once. Write a function `count_pairs(nums: List[int], target: int) -> int` that returns the number of distinct pairs of integers from the list `nums` that add up to the `target`. Assume `nums` contains no duplicate integers, and each pair should only be counted once. # Input: - An integer list `nums` consisting of distinct integers where `2 <= len(nums) <= 10^5`. - An integer `target` representing the target sum. # Output: - Return an integer representing the number of unique pairs of integers that sum up to the `target`. # Examples: Example 1: Input: ```python nums = [1, 2, 3, 4, 5] target = 6 ``` Output: ```python 2 ``` Explanation: The pairs (1, 5) and (2, 4) are the only pairs that sum up to 6. Example 2: Input: ```python nums = [2, 4, 3, 5, 7, 8, 1] target = 9 ``` Output: ```python 3 ``` Explanation: The pairs (2, 7), (1, 8), and (4, 5) all sum up to 9. Example 3: Input: ```python nums = [1, 2] target = 3 ``` Output: ```python 1 ``` Explanation: The only pair is (1, 2).","solution":"from typing import List def count_pairs(nums: List[int], target: int) -> int: Returns the number of distinct pairs in nums that sum up to the target value. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"You are given an integer n and a sequence a_0, a_1, dots, a_{n-1} of length n consisting of integers. Your task is to determine the length of the longest contiguous subarray of the given sequence a which contains at most two distinct integer values. The first line contains a single integer n (1 leq n leq 10^5). The second line contains n integers a_0, a_1, dots, a_{n-1} (-10^9 leq a_i leq 10^9). Output a single integer — the length of the longest contiguous subarray containing at most two distinct integer values. For example, given the input: ``` 6 1 2 2 1 3 4 ``` The longest contiguous subarray with at most two distinct values is `1 2 2 1` with length 4. So, the output should be: ``` 4 ``` And given the input: ``` 5 5 5 5 5 5 ``` The longest contiguous subarray with at most two distinct values is the entire array with length 5. So, the output should be: ``` 5 ```","solution":"def longest_subarray_with_at_most_two_distinct_values(n, arr): Returns the length of the longest contiguous subarray containing at most two distinct integer values. left, right = 0, 0 count = {} max_length = 0 while right < n: if arr[right] not in count: count[arr[right]] = 0 count[arr[right]] += 1 while len(count) > 2: count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n. Find the length of the longest subsequence such that the difference between any two adjacent elements is at most d. A subsequence is obtained by deleting some or no elements from the original array without changing the order of the remaining elements. The first line contains integers n (1 le n le 1000) and d (1 le d le 1000). The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). Output a single integer representing the length of the longest subsequence that satisfies the condition. For example, given the input array [1, 3, 6, 7, 9] with d=2, one of the longest subsequences is [1, 3, 6], which is of length 3 because the differences between adjacent elements are within the allowed limit.","solution":"def longest_subsequence_with_diff(arr, d): n = len(arr) if n == 0: return 0 # Initialize the dp array with 1 (each element is a subsequence of length 1) dp = [1] * n # Iterate over each element for i in range(1, n): for j in range(i): if abs(arr[i] - arr[j]) <= d: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of integers representing the points scored by different players in a game. Your task is to determine the minimum number of moves needed to make all the players\' scores equal. In one move, you can increase or decrease the score of any player by 1. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of players. The second line contains n integers separated by spaces, where each integer represents the score of a player, and these scores are non-negative and do not exceed 10^9. On a single line, print a single integer — the minimum number of moves needed to make all players\' scores the same. In the first sample, you can make all players\' scores equal to 2 in 1 move. In the second sample, all players\' scores are already the same, so the answer is 0. Sample Input 1: 3 1 2 3 Sample Output 1: 2 Sample Input 2: 4 4 4 4 4 Sample Output 2: 0","solution":"def min_moves_to_equal_scores(n, scores): Returns the minimum number of moves needed to make all players\' scores the same. Parameters: n (int): Number of players. scores (list of int): List of players\' scores. Returns: int: Minimum number of moves needed. median_score = sorted(scores)[n // 2] moves = sum(abs(score - median_score) for score in scores) return moves"},{"question":"You are working on a compression algorithm that detects repeating characters in a string and replaces them by the character followed by the number of repetitions. Implement a method to achieve this. Your function should take a string as input and return the compressed version of the string. The input string contains only uppercase and lowercase Latin letters. If the length of the compressed string is not smaller than the original string, the function should return the original string. # Input: - A single string s (1 ≤ |s| ≤ 5000), the string to be compressed. # Output: - A single string representing the compressed version of the input string or the original string if the compressed version is not shorter. # Example: Input: ``` aaabbbccc ``` Output: ``` a3b3c3 ``` Input: ``` abcd ``` Output: ``` abcd ```","solution":"def compress_string(s): Compress the string `s` using the counts of repeated characters. If the compressed string is longer than or equal to the original, returns the original string. n = len(s) if n == 0: return s compressed = [] count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < n else s"},{"question":"A social media platform has implemented a new feature where users can tag certain hashtags in their posts. Each hashtag is associated with a specific score, based on its popularity. The platform wants to determine how popular certain hashtags are in a list of posts. Given a list of posts, each post containing a set of hashtags (strings), and a dictionary where each hashtag maps to its popularity score (a non-negative integer), your task is to calculate the total popularity score for each unique hashtag present in the posts. The score of a hashtag across multiple posts is the sum of its scores from each occurrence in the list of posts. If a hashtag in the posts does not exist in the dictionary, consider its score as 0. You should ignore case when comparing hashtags (i.e., \\"fun\\" and \\"FUN\\" are considered the same hashtag). Write a function `calculate_popularity(posts, hashtag_scores)` that takes in two parameters: 1. `posts`: a list of lists where each inner list contains strings representing hashtags in a post. 2. `hashtag_scores`: a dictionary with hashtag strings as keys and non-negative integers as values representing the popularity scores. The function should return a dictionary with unique hashtags (in lowercase) as keys and their total popularity score as values. # Input - `posts`: List of lists containing hashtags (strings) [1 ≤ len(posts) ≤ 1000, 1 ≤ len(hashtags in each post) ≤ 100] - `hashtag_scores`: Dictionary mapping hashtags to their popularity scores [1 ≤ len(hashtag_scores) ≤ 1000] # Output - A dictionary containing unique hashtags as keys in lowercase and their total popularity score as values. # Example ```python posts = [[\\"fun\\", \\"SunnyDay\\"], [\\"Summer\\", \\"FUN\\"], [\\"beach\\", \\"sunnyday\\", \\"travel\\"], [\\"summer\\"], [\\"Travel\\"]] hashtag_scores = {\\"fun\\": 5, \\"sunnyday\\": 10, \\"summer\\": 8, \\"beach\\": 6} calculate_popularity(posts, hashtag_scores) ``` # Output ```python { \\"fun\\": 10, \\"sunnyday\\": 20, \\"summer\\": 16, \\"beach\\": 6, \\"travel\\": 0 } ``` # Note - In the example above, the hashtag \\"FUN\\" in the first and second posts is case-insensitively matched to \\"fun\\" in the hashtag_scores dictionary. - Perform a similar case-insensitive match for all hashtags to retrieve and accumulate their scores. If a hashtag isn\'t in the scores dictionary, assume its score is 0.","solution":"def calculate_popularity(posts, hashtag_scores): result = {} for post in posts: for hashtag in post: hashtag_lower = hashtag.lower() if hashtag_lower in result: result[hashtag_lower] += hashtag_scores.get(hashtag_lower, 0) else: result[hashtag_lower] = hashtag_scores.get(hashtag_lower, 0) return result"},{"question":"A company that specializes in data analytics has a set of sensors distributed in a grid within a large industrial plant. The grid can be represented by an `n x m` matrix where each cell contains a sensor with a certain reading. Each sensor reading is represented by an integer. The company wants to determine if there is a `k x k` (k ≤ min(n, m)) submatrix that constitutes a \\"hotspot.\\" A \\"hotspot\\" is defined as a submatrix in which the sum of all sensor readings exceeds a given threshold `t`. Your task is to write a program that identifies such a `k x k` submatrix within the grid that satisfies the \\"hotspot\\" condition. If multiple such submatrices exist, you can output any one of them. # Input - The first line contains three integers `n`, `m`, and `t` (1 ≤ n, m ≤ 1000, 1 ≤ t ≤ 10^6), representing the dimensions of the matrix and the threshold. - The next `n` lines contain `m` integers each, representing the sensor readings in the grid. # Output - If a `k x k` submatrix that satisfies the \\"hotspot\\" condition exists, print \\"YES\\" followed by the top-left coordinate (i, j) of any one such submatrix (1-indexed). - If no such submatrix exists, print \\"NO\\". # Example Input ``` 4 5 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ``` Output ``` YES 3 2 ``` Explanation In the example given, the sum of the `2x2` submatrix starting at (3,2) is: ``` 12 13 17 18 ``` 12 + 13 + 17 + 18 = 60 which is greater than the threshold 20. # Note - Be mindful of the dimensions; your solution should be efficient to handle the maximum constraints.","solution":"def find_hotspot_submatrix(n, m, t, readings): def get_submatrix_sum(x, y, k): total = 0 for i in range(x, x+k): for j in range(y, y+k): total += readings[i][j] return total max_k = min(n, m) for k in range(1, max_k + 1): for i in range(n - k + 1): for j in range(m - k + 1): if get_submatrix_sum(i, j, k) > t: return \\"YES \\" + str(i+1) + \\" \\" + str(j+1) return \\"NO\\""},{"question":"You are working on a text editor, and the current task is to implement an auto-completion feature for it. The auto-completion should suggest the most frequently used words based on previous inputs. You need to implement a function that takes two inputs: 1. A list of strings `words`, where each string is a word that has been previously inputted by the user. 2. A string `prefix`, which is the current prefix that the user has typed in. The function should return the top 5 most frequently used words that start with the given prefix. If there are fewer than 5 words starting with the prefix, return all of them. If there are no words that start with the prefix, return an empty list. If multiple words have the same frequency, they should be returned in lexicographic order. # Input - `words` - a list of strings where each string is a word previously inputted by the user (1 ≤ len(words) ≤ 10^5, 1 ≤ len(word) ≤ 100). - `prefix` - a string representing the current prefix typed by the user (1 ≤ len(prefix) ≤ 100). # Output - List of up to 5 strings representing the suggested words. # Examples ```python words = [\\"apple\\", \\"app\\", \\"apricot\\", \\"banana\\", \\"app\\", \\"apple\\", \\"application\\"] prefix = \\"app\\" # The word \\"app\\" appears 2 times, \\"apple\\" appears 2 times, and \\"application\\" appears once. # The top suggestions in order of frequency and lexicographically are [\\"app\\", \\"apple\\", \\"application\\"]. # The output should be: [\\"app\\", \\"apple\\", \\"application\\"] words = [\\"hello\\", \\"high\\", \\"hill\\", \\"how\\", \\"house\\", \\"hoist\\"] prefix = \\"ho\\" # The words \\"how\\", \\"house\\", and \\"hoist\\" start with the prefix \\"ho\\". # Since there are fewer than 5 words, all of them are returned in lexicographic order. # The output should be: [\\"hoist\\", \\"house\\", \\"how\\"] ``` # Constraints - The function should run efficiently with the given constraints. - You should handle edge cases, such as when no words match the given prefix.","solution":"from collections import Counter import heapq def autocomplete(words, prefix): # Count the frequency of each word in the list word_count = Counter(words) # Find all words that start with the given prefix prefix_words = [word for word in word_count if word.startswith(prefix)] # Create a list of tuples (count, word) for the prefix words count_word_pairs = [(count, word) for word, count in word_count.items() if word in prefix_words] # Sort the list based on count descending and lexicographically ascending count_word_pairs.sort(key=lambda x: (-x[0], x[1])) # Get the top 5 words from the sorted list top_suggestions = [word for _, word in count_word_pairs[:5]] return top_suggestions"},{"question":"You are given a 2D grid `G` of size `m x n` where each cell contains an integer. You can move up, down, left, or right from a cell to another cell. Your goal is to find the length of the longest strictly increasing path in the grid. You can start from any cell and move to adjacent cells only if the value in the adjacent cell is strictly greater than the value in the current cell. For example: Given grid `G`: ``` [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` The longest increasing path is `[1, 2, 6, 9]`, the length is `4`. Another example: Given grid `G`: ``` [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] ``` The longest increasing path is `[3, 4, 5, 6]`, the length is `4`. You should write a function: ```python def longest_increasing_path(G: List[List[int]]) -> int: pass ``` # Input - A 2D list `G` of size `m x n` where `1 <= m, n <= 200` and `-10^4 <= G[i][j] <= 10^4`. # Output - An integer representing the length of the longest strictly increasing path in the given grid `G`. # Constraints - You may assume that all cells in the grid have valid integer values. - The function should handle large grids efficiently to meet the constraints. Write a function `longest_increasing_path` that returns the length of the longest strictly increasing path in a grid `G` as described.","solution":"def longest_increasing_path(G): if not G or not G[0]: return 0 m, n = len(G), len(G[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] cache = [[-1] * n for _ in range(m)] def dfs(x, y): if cache[x][y] != -1: return cache[x][y] max_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and G[nx][ny] > G[x][y]: max_length = max(max_length, 1 + dfs(nx, ny)) cache[x][y] = max_length return cache[x][y] max_path = 0 for i in range(m): for j in range(n): max_path = max(max_path, dfs(i, j)) return max_path"},{"question":"You are given an array of integers and a target sum. Determine the number of unique pairs of elements in the array that sum up to the target value. For example, given the array [1, 5, 7, -1, 5] and target sum 6, the pairs that add up to it are (1, 5) and (7, -1) with each pair being counted only once. The first line of the input contains two integers n and target (1 ≤ n ≤ 100, -10^3 ≤ target ≤ 10^3), where n is the number of integers in the array and target is the target sum. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^3) — the elements of the array. Print the number of unique pairs that add up to the target sum. Note that (a, b) and (b, a) are considered the same, and each pair should be counted only once regardless of their order. If there are no pairs that can be formed to sum up to the target value, print 0.","solution":"def count_pairs_with_sum(arr, target): Counts the unique pairs in arr that sum up to target. :param arr: List of integers. :param target: Target sum. :return: Number of unique pairs that sum to the target. pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Jamie loves organizing things, but sometimes he becomes overwhelmed with maintaining his collections. One of his favorite activities is collecting rare stamps. He stores each stamp detail, including its value representing the rarity of the stamp (higher value means rarer). He decided to write a program to help him manage his stamp collection efficiently. The program needs to support the following operations: Initially, the stamp collection is empty. In the following days, Jamie will perform one of three operations each time. If the operation is a query, you should output the result of the query immediately so that Jamie can get the information right away. The first line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of operations. The following `q` lines contain the descriptions of the operations. The `i-th` line describes an operation performed by Jamie, which can be one of the following: 1. **add** `stamp_name` `value` — adds a new stamp with the given name and value to the collection. If the `stamp_name` already exists in the collection, update its value with the new `value`. 2. **remove** `stamp_name` — removes the stamp with the given name from the collection. If no such stamp exists, this operation does nothing. 3. **query** `value` — outputs the number of stamps that have a value greater than `value`. The `stamp_name` consists of only lowercase English letters and has a length of 1 ≤ |`stamp_name`| ≤ 20. The `value` of each stamp is a positive integer (1 ≤ `value` ≤ 10^9). If the operation is a query, you should output the result of the query and flush the output stream immediately before proceeding to the next operation. Please write a program that handles Jamie\'s operations on his stamp collection efficiently. # Input ``` 5 add rare_stamp 100 add common_stamp 50 query 60 remove rare_stamp query 40 ``` # Output ``` 1 1 ```","solution":"from collections import defaultdict import bisect class StampCollection: def __init__(self): self.stamps = {} self.values = [] def add(self, stamp_name, value): if stamp_name in self.stamps: old_value = self.stamps[stamp_name] pos = bisect.bisect_left(self.values, old_value) self.values.pop(pos) self.stamps[stamp_name] = value bisect.insort(self.values, value) def remove(self, stamp_name): if stamp_name in self.stamps: value = self.stamps.pop(stamp_name) pos = bisect.bisect_left(self.values, value) self.values.pop(pos) def query(self, value): return len(self.values) - bisect.bisect_right(self.values, value) def process_operations(operations): collection = StampCollection() results = [] for operation in operations: op_parts = operation.split() cmd = op_parts[0] if cmd == \\"add\\": collection.add(op_parts[1], int(op_parts[2])) elif cmd == \\"remove\\": collection.remove(op_parts[1]) elif cmd == \\"query\\": result = collection.query(int(op_parts[1])) results.append(result) return results"},{"question":"There is an ancient kingdom with n villages connected by n-1 two-way paths in such a way that any village can be reached from any other village (i.e., they form a tree structure). Each village is numbered from 1 to n, with the village 1 being the central hub of the kingdom. The king wants to establish a robust communication network to improve trade and security. He will place exactly k communication stations in different villages. Every village must be able to communicate directly or indirectly (via other stations) with the central hub village 1. The cost to place a communication station in a village is given in an array c of length n. The goal is to minimize the total cost of placing these k communication stations while ensuring all villages have direct or indirect communication with the central hub. Write a program to determine the minimum cost to place the k stations. # Input - The first line contains two integers n and k (2 le n le 2 cdot 10^5, 1 le k < n) — the number of villages and the number of communication stations respectively. - The second line contains n integers c_1, c_2, dots, c_n (1 le c_i le 10^9), where c_i is the cost to place a station in village i. - Each of the next n-1 lines contains two integers u and v (1 le u,v le n), denoting a path between village u and village v. # Output - Output a single integer representing the minimum cost to place k communication stations while ensuring all villages can communicate with the central hub. # Example Input ``` 6 3 1 3 2 5 4 6 1 2 1 3 2 4 2 5 3 6 ``` Output ``` 6 ``` # Note In the given example, placing stations in villages 1, 3, and 6 with costs 1 + 2 + 3 = 6 is the optimal solution. All villages can communicate with the central hub village 1 either directly or through other communication stations.","solution":"import heapq from collections import defaultdict, deque def min_cost_to_place_stations(n, k, c, edges): Returns the minimum cost to place k stations while ensuring all villages can communicate directly or indirectly with the central hub (village 1). # Build the adjacency list for the tree g = defaultdict(list) for u, v in edges: g[u].append(v) g[v].append(u) # BFS to find the level of each node levels = [-1] * (n + 1) q = deque([1]) levels[1] = 0 while q: node = q.popleft() for neighbor in g[node]: if levels[neighbor] == -1: levels[neighbor] = levels[node] + 1 q.append(neighbor) # Priority queue to store the costs with respect to each level\'s communication pruning cost pq = [] for i in range(1, n + 1): heapq.heappush(pq, (c[i-1], i)) selected_stations = set() total_cost = 0 # Extract k minimum cost stations considering levels while len(selected_stations) < k: cost, node = heapq.heappop(pq) if node not in selected_stations: selected_stations.add(node) total_cost += cost return total_cost # Example usage n, k = 6, 3 c = [1, 3, 2, 5, 4, 6] edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)] print(min_cost_to_place_stations(n, k, c, edges)) # Output: 6"},{"question":"Alex is participating in a treasure hunt game. He is given a grid with R rows and C columns, where each cell of the grid contains either \'.\' indicating an open cell, \'X\' indicating a blocked cell. Alex can move up, down, left, or right to an adjacent open cell but cannot move outside the grid or into a blocked cell. The initial position of Alex is at cell (0, 0) and the treasure is located at cell (R-1, C-1). Your task is to determine the minimum number of moves required for Alex to reach the treasure. If it is impossible for Alex to reach the treasure, print -1. The first line contains two integers R and C (1 ≤ R, C ≤ 1000) — the number of rows and columns in the grid. Each of the following R lines contains a string of C characters representing the grid. Print a single integer — the minimum number of moves required for Alex to reach the treasure if possible, otherwise print -1. # Example Input ``` 3 3 ... .X. ... ``` Output ``` 4 ``` Input ``` 3 3 ... XXX ..X ``` Output ``` -1 ``` Note to the examples: * In the first example, Alex can move (down, down, right, right) to reach the treasure in 4 moves. * In the second example, all possible paths to the treasure are blocked, so it is impossible for Alex to reach the treasure.","solution":"from collections import deque def min_moves_to_treasure(R, C, grid): directions = [(-1,0), (1,0), (0,-1), (0,1)] if grid[0][0] == \'X\' or grid[R-1][C-1] == \'X\': return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == R-1 and c == C-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"There is a warehouse that serves n types of products, and each product has a corresponding demand. The warehouse can also fulfill exactly one bulk order of a certain product, which means it can ship an amount that exceeds the current stock by a certain maximum allowance k for that product. Given the initial stock, the demand for each product, and the allowance k for the bulk order, determine if the warehouse can fulfill all demands including at most one bulk order. The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of product types and the maximum allowance for the bulk order. The next n lines each contain two integers si and di (0 ≤ si, di ≤ 1000), where si is the current stock of the i-th product and di is the demand for the i-th product. Print \\"YES\\" if the warehouse can fulfill all demands using at most one bulk order, otherwise print \\"NO\\". Example: Input: 5 10 100 110 200 185 150 160 130 120 90 95 Output: YES Explanation: The warehouse can fulfill the demand for each product perfectly without needing to use the bulk order for any product.","solution":"def can_fulfill_demand(n, k, stock_demand): Determines if the warehouse can fulfill all demands using at most one bulk order. :param n: Number of product types :param k: Maximum allowance for any bulk order :param stock_demand: List of tuples where each tuple contains (stock, demand) for each product :return: \\"YES\\" if all demands can be fulfilled, \\"NO\\" otherwise deficit_count = 0 deficited_items = [] for s, d in stock_demand: if s < d: deficited_items.append(d - s) deficit_count += 1 if deficit_count == 0: return \\"YES\\" if deficit_count > 1: return \\"NO\\" return \\"YES\\" if deficited_items[0] <= k else \\"NO\\""},{"question":"You are tasked with developing a warehouse management system prototype that tracks the inventory of items stored in the warehouse. The warehouse can process three types of operations: - `Insert <item_name> <quantity>`: Adds the specified quantity of an item to the inventory. If the item already exists, increase its quantity by the specified amount. `0 < quantity <= 1000`. - `Remove <item_name> <quantity>`: Removes the specified quantity of an item from the inventory. If the remaining quantity becomes zero or less, the item should be entirely removed from the inventory. - `Check <item_name>`: Prints the quantity of the specified item. If the item is not found, print `Item not found`. An item name is a sequence of non-space characters. The input file will contain commands of the described format, each in its own line. The number of commands will not exceed 1000. Write a program that processes this sequence of operations and maintains the inventory accurately. Print the answer for each `Check` command in the order they appear in the input. Input format: - Each line is one of the three command types described. - Commands are case-sensitive. Output format: - For every `Check <item_name>` command, output the current quantity or `Item not found` for the specified item. Example: ``` Insert apples 10 Insert oranges 5 Check apples Remove apples 3 Check apples Remove apples 10 Check apples ``` Output: ``` 10 7 Item not found ```","solution":"class Warehouse: def __init__(self): self.inventory = {} def process_command(self, command): parts = command.split() cmd_type = parts[0] if cmd_type == \'Insert\': item_name, quantity = parts[1], int(parts[2]) if item_name in self.inventory: self.inventory[item_name] += quantity else: self.inventory[item_name] = quantity elif cmd_type == \'Remove\': item_name, quantity = parts[1], int(parts[2]) if item_name in self.inventory: self.inventory[item_name] -= quantity if self.inventory[item_name] <= 0: del self.inventory[item_name] elif cmd_type == \'Check\': item_name = parts[1] if item_name in self.inventory: print(self.inventory[item_name]) else: print(\'Item not found\')"},{"question":"You are given an array of integers with length n. Your task is to answer m queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n), and asks for the number of distinct elements in the subarray from index l to r (inclusive). The input consists of two integers n and m (1 ≤ n, m ≤ 100000) in the first line, representing the length of the array and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The next m lines contain two integers l and r each, representing the range for which you need to count the number of distinct elements in the subarray a[l...r]. The indices are 1-based. Output m integers, each representing the answer to the corresponding query. Example: Input: 6 3 1 2 1 3 2 1 1 3 2 4 1 6 Output: 2 3 3","solution":"def count_distinct_in_subarrays(n, m, array, queries): results = [] for l, r in queries: subarray = array[l-1:r] distinct_elements = len(set(subarray)) results.append(distinct_elements) return results"},{"question":"The input consists of a single line containing an integer n (1 ≤ n ≤ 100) followed by a space and n space-separated integers representing the array elements (each element is between 1 and 100, inclusive). Output the sum of the maximum and minimum elements in the array.","solution":"def sum_min_max(n, array): Returns the sum of the maximum and minimum elements in the array. n: int, the number of elements in the array array: list of int, the array elements returns: int, sum of the maximum and minimum elements in the array min_element = min(array) max_element = max(array) return min_element + max_element def parse_input(input_line): Parses the input line to extract n and the array elements. input_line: str, input line containing n followed by n space-separated integers returns: tuple(int, list of int), n and the array elements parts = input_line.split() n = int(parts[0]) array = list(map(int, parts[1:])) return n, array"},{"question":"You are given an array of integers and an integer k. Your task is to write a function that determines if there is a pair of distinct elements in the array that adds up to k. The function should return `True` if such a pair exists, and `False` otherwise. Function Signature: ```python def has_pair_with_sum(arr: List[int], k: int) -> bool: pass ``` # Input - An array of integers, `arr`. - Size of the array: 1 ≤ len(arr) ≤ 10^5. - Each integer in the array: -10^9 ≤ arr[i] ≤ 10^9. - An integer, `k`. - -10^9 ≤ k ≤ 10^9. # Output - Return `True` if there exists a pair of distinct elements in the array that sums up to `k`. - Return `False` otherwise. # Examples Example 1 Input: ```python arr = [10, 15, 3, 7] k = 17 ``` Output: ```python True ``` Explanation: - There is a pair (10, 7) which adds up to 17. Example 2 Input: ```python arr = [1, 2, 3, 4, 5] k = 10 ``` Output: ```python False ``` Explanation: - There is no pair that adds up to 10.","solution":"from typing import List def has_pair_with_sum(arr: List[int], k: int) -> bool: Determines if there is a pair of distinct elements in the array that adds up to k. :param arr: List of integers :param k: Target sum :return: True if such a pair exists, False otherwise seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subarray that contains at most two distinct integers. For example, given the list `[1, 2, 1, 3, 4, 2, 1, 2]`, the longest contiguous subarray containing at most two distinct integers is `[1, 2, 1]`, which has a length of 3. Another example is the list `[1, 2, 1, 2, 3, 3, 4, 4]`, where the longest contiguous subarray is `[3, 3, 4, 4]`, which has a length of 4. Input: - A single line containing a space-separated list of integers. The list can contain between 1 and 1000 integers, inclusive. Output: - A single integer representing the length of the longest contiguous subarray with at most two distinct integers. Implement the function and ensure it runs efficiently on large inputs.","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest contiguous subarray that contains at most two distinct integers. if not nums: return 0 left = 0 max_length = 0 count = {} for right in range(len(nums)): count[nums[right]] = count.get(nums[right], 0) + 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given n integer numbers that form an array a. Your task is to perform a series of operations on this array in such a way that after each operation, the resulting maximum element is minimized. In one operation, you can choose an element from the array and reduce it by x (i.e., if the element is a_i, it becomes a_i - x). You can perform the operation as many times as needed on any element, and you can choose a different value of x for each operation. Your goal is to determine the minimum possible maximum value of the array after performing any number of operations. The first line of the input contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Print a single integer — the minimum possible maximum value of the array after any number of operations. Example: Input: ``` 5 3 7 2 5 9 ``` Output: ``` 7 ``` Explanation: In the example, one possible sequence of operations is to leave the array as is, resulting in a max value of 7. Another possible approach is to reduce the ninth value by 2, resulting in an array such as [3, 7, 2, 5, 7], where the new maximum is also 7.","solution":"def min_possible_maximum(n, a): Given a list of integers, this function returns the minimum possible maximum value of the array after performing any number of operations on the elements of the array to reduce them. return max(a)"},{"question":"Anastasia is fascinated by the geometric properties of different shapes. One day, she starts exploring triangles with integer coordinates and becomes particularly interested in right-angled triangles. Given three points in a 2D plane, Anastasia wants to determine if they can form a right-angled triangle. Recall that a right-angled triangle satisfies the Pythagorean theorem: the square of the length of the hypotenuse is equal to the sum of the squares of the lengths of the other two sides. Given the coordinates of the three points, write a function to check whether these points can form a right-angled triangle. Your solution should work efficiently even for larger coordinates. # Input: - The first line contains an integer t (1 le t le 10^4) — the number of test cases. - For each test case, you will receive three lines, each containing two integers x and y (-10^9 le x, y le 10^9) — representing the coordinates of a point. # Output: For each test case, print \\"YES\\" if the three points can form a right-angled triangle, and \\"NO\\" otherwise. # Example: Input: ``` 2 0 0 3 0 0 4 1 1 2 2 3 3 ``` Output: ``` YES NO ``` # Explanation: In the first test case, the three points (0, 0), (3, 0), and (0, 4) form a right-angled triangle (a classic example with sides forming a 3-4-5 triangle). In the second test case, the three points (1, 1), (2, 2), and (3, 3) are collinear, hence they cannot form a triangle, let alone a right-angled one.","solution":"def is_right_angled_triangle(x1, y1, x2, y2, x3, y3): Check if the triangle formed by the points (x1, y1), (x2, y2), (x3, y3) is a right-angled triangle. def dist_sq(xa, ya, xb, yb): return (xa - xb) ** 2 + (ya - yb) ** 2 d1 = dist_sq(x1, y1, x2, y2) d2 = dist_sq(x2, y2, x3, y3) d3 = dist_sq(x3, y3, x1, y1) distances = sorted([d1, d2, d3]) # Check the Pythagorean theorem return distances[0] + distances[1] == distances[2] def check_right_angled_triangles(test_cases): results = [] for points in test_cases: x1, y1 = points[0] x2, y2 = points[1] x3, y3 = points[2] if is_right_angled_triangle(x1, y1, x2, y2, x3, y3): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of `n` distinct integers. You are allowed to pick the entire list except for one single element to create an almost sorted list. An almost sorted list is defined as a list where no element is smaller than the previous one. Your task is to determine if it is possible to create an almost sorted list by removing exactly one element from the given list. # Input - The first line contains an integer `n` (`2 ≤ n ≤ 10^5`), the number of distinct integers in the list. - The second line contains `n` distinct integers `a_1, a_2, ..., a_n` (`-10^9 ≤ a_i ≤ 10^9`). # Output - Print \\"YES\\" if it is possible to remove exactly one element to create an almost sorted list. Otherwise, print \\"NO\\". # Examples Example 1 Input: ``` 5 1 3 2 4 5 ``` Output: ``` YES ``` Explanation: Removing the integer `3` from the list leaves `[1, 2, 4, 5]`, which is sorted. Example 2 Input: ``` 4 4 3 2 1 ``` Output: ``` NO ``` Explanation: No matter which element you remove, the remaining list cannot be sorted. # Notes - The solution should be efficient enough to handle the upper constraint of the input size within a reasonable time frame. - Consider various cases where the unordered element could be at different positions in the list. - You may assume that there will be no duplicate elements in the list.","solution":"def can_be_almost_sorted(n, arr): def is_sorted(lst): return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) for i in range(n): if is_sorted(arr[:i] + arr[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"Write a function to simulate a simplified online auction system. The auction consists of multiple items, where each item has a unique identifier and its own list of bids represented as tuples `(bidder_id, bid_amount)`. Implement a class `AuctionSystem` with the following methods: 1. `add_item(item_id)`: Adds a new item to the auction with the given `item_id`. If the `item_id` already exists, raise a `ValueError`. 2. `place_bid(item_id, bidder_id, bid_amount)`: Places a bid on the specified item. Each bid consists of a `bidder_id` and a `bid_amount`. If the `item_id` does not exist, raise a `ValueError`. 3. `get_highest_bid(item_id)`: Returns the highest bid for the specified item as a tuple `(bidder_id, bid_amount)`. If the `item_id` does not exist or if no bids have been placed on the item, return `None`. 4. `get_winner(item_id)`: Determines the winner of the specified item, defined as the `bidder_id` with the highest bid. If there are multiple highest bids with the same amount, the bid that was placed earlier wins. If the `item_id` does not exist or if no bids have been placed, return `None`. 5. `close_auction(item_id)`: Closes the auction for the specified item. After closing, no more bids can be placed on the item. If the `item_id` does not exist, raise a `ValueError`. Ensure the implementation confirms to the following requirements: - The class should handle up to 10,000 items and 100,000 bids efficiently. - The class should use appropriate data structures to allow O(1) complexity for adding new items and average O(log n) complexity for placing bids and retrieving highest bids. The following example illustrates the expected behavior: ```python auction = AuctionSystem() auction.add_item(1) auction.add_item(2) auction.place_bid(1, \'Alice\', 100) auction.place_bid(1, \'Bob\', 150) auction.place_bid(1, \'Charlie\', 120) print(auction.get_highest_bid(1)) # Output: (\'Bob\', 150) auction.place_bid(2, \'Alice\', 200) print(auction.get_winner(2)) # Output: (\'Alice\', 200) auction.place_bid(1, \'Alice\', 160) print(auction.get_highest_bid(1)) # Output: (\'Alice\', 160) auction.close_auction(1) try: auction.place_bid(1, \'Dave\', 170) # This should raise a ValueError except ValueError: print(\'Auction is closed\') print(auction.get_winner(1)) # Output: (\'Alice\', 160) ```","solution":"class AuctionSystem: def __init__(self): self.items = {} self.closed_items = set() def add_item(self, item_id): if item_id in self.items: raise ValueError(f\\"Item {item_id} already exists.\\") self.items[item_id] = [] def place_bid(self, item_id, bidder_id, bid_amount): if item_id not in self.items: raise ValueError(f\\"Item {item_id} does not exist.\\") if item_id in self.closed_items: raise ValueError(f\\"Auction for item {item_id} is closed.\\") self.items[item_id].append((bidder_id, bid_amount)) def get_highest_bid(self, item_id): if item_id not in self.items or not self.items[item_id]: return None return max(self.items[item_id], key=lambda x: x[1]) def get_winner(self, item_id): highest_bid = self.get_highest_bid(item_id) return highest_bid[0] if highest_bid else None def close_auction(self, item_id): if item_id not in self.items: raise ValueError(f\\"Item {item_id} does not exist.\\") self.closed_items.add(item_id)"},{"question":"You are given a string consisting of English letters and digits. You want to separate the digits from the letters and sort them individually. After sorting, you should merge them back into a single string, where the sorted letters come first followed by the sorted digits. Write a program that takes a string as input and outputs a new string where letters and digits are sorted as described. # Input - A single line containing a string `s` (1 ≤ |s| ≤ 100) consisting of English letters and digits. # Output - A single line containing the transformed string. # Examples Example 1: - Input: `a1b2c3` - Output: `abc123` Example 2: - Input: `b3a1c2` - Output: `abc123` # Note In the first example, `a1b2c3` is transformed to `abc123` by sorting the letters `a, b, c` and digits `1, 2, 3` individually, then concatenating sorted letters followed by sorted digits. In the second example, `b3a1c2` is transformed to the same output `abc123` after performing the same steps.","solution":"def sort_letters_and_digits(s: str) -> str: Takes a string with letters and digits, sorts the letters and digits individually, and returns the concatenated sorted letters and digits. letters = sorted([char for char in s if char.isalpha()]) digits = sorted([char for char in s if char.isdigit()]) return \'\'.join(letters + digits)"},{"question":"You are given a string s of length n consisting of lowercase Latin letters. You can perform the following operation exactly once: choose any substring of s and rearrange its characters in non-decreasing order. After this operation, you want the string to be lexicographically smallest among all possible strings obtainable. The lexicographical order of the letters is the same as their normal order in the alphabet, i.e., \'a\' < \'b\' < \'c\' < ... < \'z\'. Output the lexicographically smallest string that you can obtain after performing the operation exactly once. # Input: - The input consists of a single line containing the string s (1 leq n leq 10^5). # Output: - Output a single string that is the lexicographically smallest possible result of the operation. # Example: **Input:** ``` bcab ``` **Output:** ``` abbc ``` In the example, one optimal way to get the smallest string is to sort the substring from the second to the fourth position resulting in the string \\"abbc\\".","solution":"def lexicographically_smallest_string(s): Finds the lexicographically smallest string obtainable by sorting any substring of s once. n = len(s) sorted_s = sorted(s) # Find the first position where the original string differs from the sorted string for i in range(n): if s[i] != sorted_s[i]: break else: # If no such position is found, the string is already fully sorted return s # Find the last position from the end where the original string differs from the sorted string for j in range(n-1, -1, -1): if s[j] != sorted_s[j]: break # Create the new string by sorting the substring s[i:j+1] return s[:i] + \'\'.join(sorted(s[i:j+1])) + s[j+1:]"},{"question":"You are given a list of integers representing the heights of consecutive buildings. The heights are given in an array `heights` where `heights[i]` represents the height of the ith building. Each building can be either painted completely or not painted at all. You can paint any number of buildings, as long as no two consecutive buildings are painted. Write a function to find the maximum sum of heights of the buildings that can be painted such that no two painted buildings are adjacent. # Input - `heights`: A list of integers (1 ≤ len(heights) ≤ 100,000, 1 ≤ heights[i] ≤ 10,000) # Output Print a single integer representing the maximum sum of heights of the buildings that can be painted without painting two consecutive buildings. # Example Input ``` heights = [3, 2, 7, 10] ``` Output ``` 13 ``` Explanation We can paint buildings with heights 3 and 10. The sum is 3 + 10 = 13. # Example Input ``` heights = [3, 2, 5, 10, 7] ``` Output ``` 15 ``` Explanation We can paint buildings with heights 3, 5, and 7. The sum is 3 + 5 + 7 = 15. # Note You are allowed to use any standard library or algorithm to achieve the solution.","solution":"def max_sum_heights(heights): Returns the maximum sum of heights of the buildings that can be painted without painting two consecutive buildings. if not heights: return 0 n = len(heights) if n == 1: return heights[0] # Initialize an array to store the maximum sum at each index dp = [0] * n dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) for i in range(2, n): # Either take the current building and the best excluding the previous building, # or skip the current building and take the best obtained so far. dp[i] = max(heights[i] + dp[i - 2], dp[i - 1]) return dp[-1]"},{"question":"A software company is designing a system to organize tasks for different employees. Each task has a start time and end time. The system needs to track and verify if any tasks assigned to the same employee overlap. Given a list of tasks for an employee, where each task is represented by a tuple `(start_time, end_time)` with `start_time` and `end_time` as integers in a 24-hour format (e.g. 0 for midnight, 10 for 10 AM, 23 for 11 PM), write a function to determine if any two tasks overlap. Implement the function `def has_overlapping_tasks(tasks: List[Tuple[int, int]]) -> bool:` that returns `True` if any two tasks overlap and `False` otherwise. # Input: - A list of tuples, where each tuple contains two integers: `(start_time, end_time)` representing the start and end times of a task. The length of the list does not exceed 1000, and 0 ≤ `start_time` < `end_time` ≤ 23. # Output: - Return a boolean value: `True` if there are overlapping tasks, otherwise `False`. # Example: ```python >>> tasks = [(1, 4), (3, 5), (5, 8)] >>> has_overlapping_tasks(tasks) True >>> tasks = [(1, 3), (4, 6), (6, 8)] >>> has_overlapping_tasks(tasks) False ``` # Note: - In the first example, the tasks (1, 4) and (3, 5) overlap. - In the second example, no tasks overlap.","solution":"from typing import List, Tuple def has_overlapping_tasks(tasks: List[Tuple[int, int]]) -> bool: # Sort tasks based on start times. If start times are the same, sort by end times tasks.sort(key=lambda x: (x[0], x[1])) for i in range(1, len(tasks)): # Compare current task\'s start time with the previous task\'s end time if tasks[i][0] < tasks[i - 1][1]: return True return False"},{"question":"You are given a string consisting of lowercase English letters and the characters \'+\', \'-\', \'*\', and \'/\'. Your task is to evaluate the mathematical expression represented by this string, following the usual order of operations: multiplication and division should be performed before addition and subtraction, from left to right. Additionally, if there are any parentheses, operations inside the parentheses should be performed first. The input string is guaranteed to be a valid expression with no spaces, and the result of the expression will be an integer within the range of a 32-bit signed integer. Write a function `evaluate_expression(expression: str) -> int` that takes a string expression as input and returns the result of the expression as an integer. **Example:** ```python >>> evaluate_expression(\\"3+5*2\\") 13 >>> evaluate_expression(\\"10+2*6\\") 22 >>> evaluate_expression(\\"100*2+12\\") 212 >>> evaluate_expression(\\"100*(2+12)/14\\") 100 ``` **Note:** 1. The function should correctly handle operator precedence and parentheses. 2. The input expression will contain only integers and the operators \'+\', \'-\', \'*\', \'/\', and \'(\' and \')\'. 3. Division is integer division, so the result should be the floor of the quotient.","solution":"def evaluate_expression(expression: str) -> int: def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a // b def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operations(operators, values): right = values.pop() left = values.pop() op = operators.pop() values.append(operate(left, right, op)) i = 0 values = [] operators = [] while i < len(expression): if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operations(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operations(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operations(operators, values) return values[-1]"},{"question":"A chef wants to bake cakes in his bakery. He has different types of ingredients in specific quantities and each type of ingredient should be enough to make a whole number of cakes. Each type of cake requires a different number of units of each ingredient. Given the quantities of available ingredients and the quantities required for making a single cake of each type, help the chef determine the maximum number of each type of cake that can be baked. **Input:** - The first line contains an integer t (1 ≤ t ≤ 50) — the number of test cases. - Each test case consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of types of ingredients. - The second line contains n integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the quantities available for each type of ingredient. - The third line contains n integers `b1, b2, ..., bn` (1 ≤ bi ≤ 10^7) — the quantities required of each type of ingredient to make one type of cake. **Output:** For each test case, print a single integer — the maximum number of cakes that can be made. **Example:** ``` Input: 2 3 15 6 9 3 2 5 2 20 30 5 10 Output: 2 2 ``` **Explanation:** - In the first test case, the quantities of ingredients are 15, 6, and 9. The cake requires 3, 2, and 5 units of each respective ingredient. The chef can make 2 cakes since: - 15 // 3 = 5 cakes can be made from the first ingredient, - 6 // 2 = 3 cakes can be made from the second ingredient, - 9 // 5 = 1 cake can be made from the third ingredient, The limiting factor here is the third ingredient, so the chef can make min(5, 3, 1) = 1 cake. - In the second test case, the chef can make min(20 // 5, 30 // 10) = min(4, 3) = 3 cakes.","solution":"def max_cakes(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] b = test_cases[i][2] min_cakes = float(\'inf\') for j in range(n): min_cakes = min(min_cakes, a[j] // b[j]) results.append(min_cakes) return results # Helper function to handle inputs and outputs def process_baking_cases(input_data): lines = input_data.split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for i in range(t): n = int(lines[index]) a = list(map(int, lines[index + 1].split())) b = list(map(int, lines[index + 2].split())) test_cases.append((n, a, b)) index += 3 return max_cakes(t, test_cases)"},{"question":"Given an array of integers, your task is to find the longest contiguous subsequence such that every element in this subsequence is a power of 2. If there are multiple subsequences with the same maximum length, return the one that appears first. # Input The first line of the input contains an integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines contains a single test case. Each test case starts with an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output For each test case, output the length of the longest contiguous subsequence where every element is a power of 2. If no such subsequence exists, output 0. # Example Input ``` 3 8 1 2 3 4 8 16 32 2 5 5 3 6 7 9 6 4 8 2 4 16 2 ``` Output ``` 5 0 6 ``` # Explanation In the first test case, the longest contiguous subsequence consisting of powers of 2 is [4, 8, 16, 32, 2]. Thus, the output is 5. In the second test case, there are no elements that are powers of 2, so the output is 0. In the third test case, the entire array [4, 8, 2, 4, 16, 2] is made up of powers of 2, hence the output is 6.","solution":"def is_power_of_2(x): Check if a number is a power of 2. return x > 0 and (x & (x - 1)) == 0 def longest_power_of_2_subsequence(test_cases): results = [] for case in test_cases: n, array = case max_length = 0 current_length = 0 for num in array: if is_power_of_2(num): current_length += 1 else: max_length = max(max_length, current_length) current_length = 0 max_length = max(max_length, current_length) results.append(max_length) return results"},{"question":"In a faraway land, there is a magical forest with n distinct trees. Each tree holds a unique integer value in its bark, known as the tree\'s magic number. The trees are connected by n-1 bidirectional roads, forming a single connected forest with exactly one path between any pair of trees. All the inhabitants of the land are curious about the properties of their magical forest. They have many questions about the paths between the trees and wish for your wisdom to answer them. You are given several questions, each asking about the sum of the magic numbers along the path between two specific trees in the forest. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of trees in the forest. The second line contains n integers, where the i-th number represents the magic number (1 ≤ mi ≤ 1,000,000,000) of the i-th tree. The next n-1 lines contain information about the roads. The i-th line contains two integers ai and bi (1 ≤ ai, bi ≤ n), which means that there is a road between trees ai and bi. It is guaranteed that it\'s possible to reach any tree from any other tree. The following line contains an integer q (1 ≤ q ≤ 100,000), the number of queries. Each of the following q lines contains two integers x and y (1 ≤ x, y ≤ n), representing a query asking for the sum of the magic numbers along the path between tree x and tree y. Output the sum of the magic numbers for each query, one per line.","solution":"def dfs(tree, node, parent, magic_numbers, subtree_sum): Perform DFS to compute subtree sum for each node. subtree_sum[node] = magic_numbers[node] for neighbor in tree[node]: if neighbor != parent: dfs(tree, neighbor, node, magic_numbers, subtree_sum) subtree_sum[node] += subtree_sum[neighbor] def solve_magic_forest(n, magic_numbers, roads, queries): from collections import defaultdict # Create an adjacency list for the tree tree = defaultdict(list) for a, b in roads: tree[a].append(b) tree[b].append(a) # Initialize the subtree sums subtree_sum = [0] * n # Perform DFS from node 0 (assuming node numbering starts from 0) dfs(tree, 0, -1, magic_numbers, subtree_sum) # To find the sum along the path between two nodes, we simply use the precomputed subtree sums result = [] for x, y in queries: if x == y: result.append(magic_numbers[x]) else: if subtree_sum[x] > subtree_sum[y]: result.append(subtree_sum[x]) else: result.append(subtree_sum[y]) return result"},{"question":"In \\"Bakery Delights,\\" customers\' preferences are tracked using a unique compression format for the different types of baked items sold. Each type\'s data is stored in pairs of the form (li, ci), where li represents the quantity of a type of baked item bought and ci represents the type of baked item identified by a single lowercase English letter. You have been tasked with analyzing customer purchase patterns to determine the longest sequence of the same type of baked item bought consecutively. Your program needs to find the maximum quantity of any single type of baked item bought in one stretch from the given input. # Input The input consists of: - A single integer n (1 ≤ n ≤ 200,000) — the number of different parts of the purchase records. - A second line containing n pairs \\"li-ci\\" (1 ≤ li ≤ 1,000,000) — the quantity of the i-th part and the corresponding lowercase English letter representing the type of baked item. # Output Output a single integer — the maximum quantity of any single type of baked item bought consecutively. # Example Input ``` 5 3-a 5-b 2-a 4-b 6-a ``` Output ``` 6 ``` Input ``` 4 2-c 7-d 1-d 3-c ``` Output ``` 7 ``` In the first example, the maximum quantity of the same type of baked item bought consecutively is \\"6\\" for type \'a\'. In the second example, the longest sequence is \\"7\\" for type \'d\'.","solution":"def longest_consecutive_baked_item_sequence(n, purchase_records): Returns the maximum quantity of any single type of baked item bought consecutively. :param n: int: Number of purchase records :param purchase_records: list of strings: List containing pairs \\"li-ci\\" :return: int: Maximum quantity of any single type of baked item bought consecutively max_quantity = 0 for record in purchase_records: quantity, item_type = record.split(\'-\') quantity = int(quantity) if quantity > max_quantity: max_quantity = quantity return max_quantity"},{"question":"You are given a list of integers representing the initial positions of different robots on a number line. Each robot can move to the left or right, and all robots move at the same speed. The goal is to find the minimum time required for all the robots to reach the same position on the number line. The first line contains an integer n (1 leq n leq 10^5), which indicates the number of robots. The second line contains n integers p_1, p_2, ldots, p_n (-10^9 leq p_i leq 10^9), which represent the initial positions of the robots. Find and print the minimum time required for all robots to align at the same position on the number line. For example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: All robots can move to position 3, and the total time taken will be the sum of the distances each robot must travel: `(|1 - 3| + |2 - 3| + |3 - 3| + |4 - 3| + |5 - 3| = 2 + 1 + 0 + 1 + 2 = 6)`.","solution":"def min_time_to_align_robots(positions): Given a list of integers representing initial positions of robots, returns the minimum time required for all robots to reach the same position. Args: positions (list): List of integers representing positions of robots. Returns: int: Minimum time required for all robots to align at the same position. # Sort the positions positions.sort() # For minimizing travel time, align all robots to the median position median_position = positions[len(positions) // 2] # Calculate the total time required for all robots to reach the median position total_time = sum(abs(pos - median_position) for pos in positions) return total_time"},{"question":"You are given an undirected, weighted graph with n nodes and m edges. Each node is labeled from 1 to n. You live at node 1 and your goal is to find the shortest path from node 1 to every other node using Breadth-First Search (BFS) algorithm. However, the edges in the graph have weights, which means you need to modify the standard BFS to handle this scenario. The input graph will ensure that each edge has a weight of either 1 or 2. The modified BFS algorithm should correctly find the shortest path from node 1 to all other nodes while taking edge weights into account. The first line contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 10^5). Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n; u ≠ v; w is either 1 or 2), meaning there is an edge between nodes u and v with weight w. Output n integers, where the i-th integer represents the shortest distance from node 1 to node i. If there is no path from node 1 to node i, output -1 for that node. Input: ``` 4 4 1 2 1 2 3 2 1 3 2 3 4 1 ``` Output: ``` 0 1 2 3 ```","solution":"from collections import deque, defaultdict def modified_bfs(n, m, edges): Find the shortest path from node 1 to every other node on a graph where edge weights are either 1 or 2. graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = [-1] * n dist[0] = 0 dq = deque([1]) while dq: node = dq.popleft() for neighbor, weight in graph[node]: new_dist = dist[node-1] + weight if dist[neighbor-1] == -1 or new_dist < dist[neighbor-1]: dist[neighbor-1] = new_dist if weight == 1: dq.appendleft(neighbor) else: dq.append(neighbor) return dist"},{"question":"You are given an array of positive integers representing the heights of students standing in a line from left to right. Each student wants to see the board in front of them. A student can see the board if there are no taller students standing between them and the board. The board is in front of the leftmost student. Your task is to determine for each student if they can see the board. Specifically, you need to output an array of booleans where each element represents whether the corresponding student can see the board. If a student can see the board, output `True`, otherwise output `False`. Input - A single integer `N` (1 le N le 50,000) representing the number of students. - An array `H` of `N` positive integers (1 le H_i le 1,000,000) representing the heights of the students in the line from left to right. Output - An array of `N` booleans where each element represents whether the corresponding student can see the board. Example **Input:** ``` 5 10 6 8 5 7 ``` **Output:** ``` [True, False, False, False, False] ``` **Explanation:** - The 1st student (height 10) can see the board as they are the first in line. - The 2nd student (height 6) cannot see the board as the 1st student (height 10) is taller. - The 3rd student (height 8) cannot see the board as the 1st student (height 10) is taller. - The 4th student (height 5) cannot see the board as the 1st student (height 10) is taller. - The 5th student (height 7) cannot see the board as the 1st student (height 10) is taller.","solution":"def can_see_board(n, heights): Determine whether each student can see the board. :param n: int - number of students :param heights: list of int - heights of the students :return: list of bool - True if the student can see the board, False otherwise result = [] max_height_so_far = 0 for height in heights: if height > max_height_so_far: result.append(True) max_height_so_far = height else: result.append(False) return result"},{"question":"You have two integers, `n` and `k`. Your task is to determine if it is possible to create `n` pairs of integers `(a1, b1), (a2, b2), ..., (an, bn)` such that for each pair `(ai, bi)`, the GCD (Greatest Common Divisor) of `ai` and `bi` is equal to `k`. The first line contains two integers `n` and `k` (1 ≤ n ≤ 100, 1 ≤ k ≤ 10^9). If it is possible to create such pairs, output \\"YES\\" on the first line and then output `2 * n` integers separated by spaces denoting the pairs `(a1, b1), (a2, b2), ..., (an, bn)`. If there are multiple solutions, print any one of them. If it is not possible to create such pairs, output \\"NO\\". Example input: ``` 3 5 ``` Example output: ``` YES 5 10 5 15 5 20 ``` Explanation: For any integer multiple of `k`, here 5, we can form pairs `(k, k*i)` such that their GCD is `k`. In this example, pairs would be `(5, 10)`, `(5, 15)`, and `(5, 20)`. Any multiples of 5 can be used to form such valid pairs. If no such pairs can be formed, \\"NO\\" would be the answer.","solution":"def gcd_pairs(n, k): Determines if it is possible to create `n` pairs of integers where the GCD of each pair is equal to `k`. Args: n (int): Number of pairs to be created. k (int): The GCD each pair must have. Returns: tuple: A result string (\\"YES\\" or \\"NO\\") and list of pairs if possible. if k == 0: return \\"NO\\", [] pairs = [] for i in range(1, n + 1): pairs.append(k) pairs.append(k * (i + 1)) return \\"YES\\", pairs"},{"question":"Sara has a peculiar grid. The grid is a rectangle consisting of n rows and m columns. Each cell in the grid can contain one of two possible values: 0 or 1. Adjacent cells can have the same or different values. Sara wants to know the largest \\"plus\\" shape she can find in the grid. A \\"plus\\" shape is defined by a center cell, and arms of the same length extending in all four orthogonal (up, down, left, right) directions. The length of a \\"plus\\" is determined by the number of cells extending from the center to the edge of the arm (not counting the center). A valid \\"plus\\" requires that all cells in each arm of the plus have the same value as the center cell. Write a program to help Sara determine the maximum arm length for any possible \\"plus\\"-shaped figure in the grid. # Input - First line: Two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid. - Next n lines: Each line contains m integers (each either 0 or 1) separated by spaces — the values in the cells of the grid. # Output - Print a single integer — the maximum arm length of any valid \\"plus\\" in the grid. If no valid \\"plus\\" can be found, return 0. # Example Input 4 5 1 0 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 0 Output 1 Input 3 3 1 0 1 0 1 0 1 0 1 Output 0 # Constraints Your program should run within 1 second for any input size within the given constraints.","solution":"def max_plus_length(grid): n = len(grid) m = len(grid[0]) up = [[0] * m for _ in range(n)] down = [[0] * m for _ in range(n)] left = [[0] * m for _ in range(n)] right = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1: up[i][j] = (up[i-1][j] + 1) if i > 0 else 1 left[i][j] = (left[i][j-1] + 1) if j > 0 else 1 for i in range(n-1, -1, -1): for j in range(m-1, -1, -1): if grid[i][j] == 1: down[i][j] = (down[i+1][j] + 1) if i < n-1 else 1 right[i][j] = (right[i][j+1] + 1) if j < m-1 else 1 max_length = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: arm_length = min(up[i][j], down[i][j], left[i][j], right[i][j]) - 1 max_length = max(max_length, arm_length) return max_length def find_max_plus_length(n, m, grid): return max_plus_length(grid)"},{"question":"Given an array of integers, your task is to determine if there exists a subset of the array whose sum is equal to a given target value. If such a subset exists, return the subset in the form of a list. If multiple subsets satisfy the condition, return any one of them. If no such subset exists, return an empty list. You need to write a function `find_subset(arr, target)` that takes two inputs: 1. `arr`: A list of integers. 2. `target`: An integer representing the target sum. The function should return a list representing a subset of `arr` whose sum is equal to `target`. If no such subset exists, return an empty list. # Input - A list `arr` which contains between 1 and 50 integer elements. - An integer `target`, where `-10^3 ≤ target ≤ 10^3`. # Output - A list representing a subset of `arr` that sums to `target`. If no such subset exists, return an empty list. # Example ```python print(find_subset([3, 34, 4, 12, 5, 2], 9)) # Output: [4, 5] or [3, 2, 4] print(find_subset([1, 2, 3], 7)) # Output: [] ```","solution":"def find_subset(arr, target): This function finds a subset of \'arr\' whose sum is equal to \'target\'. Parameters: arr (list): A list of integers. target (int): The target sum. Returns: list: A subset of arr which sums up to target. If no such subset exists, an empty list is returned. from itertools import combinations # Check all combinations of all possible lengths for r in range(1, len(arr) + 1): for subset in combinations(arr, r): if sum(subset) == target: return list(subset) return []"},{"question":"You are given a list of items available in a warehouse, each with a name and an associated quantity. Your task is to help the warehouse manager organize the items by sorting them. The first line contains an integer n (1 ≤ n ≤ 10,000) — the number of items in the warehouse. The next n lines describe each item, consisting of a string item_name (a non-empty string of uppercase and lowercase Latin letters, the length does not exceed 20) and an integer quantity (1 ≤ quantity ≤ 1,000,000). Sort the items primarily by their quantity in non-decreasing order. If two items have the same quantity, sort them alphabetically by their names. The sorting should be case-sensitive (\'apple\' and \'Apple\' are different and should be sorted accordingly). Print the sorted list of item names, each on a new line. Example Input: ``` 5 apple 50 orange 30 banana 50 Apple 30 grape 20 ``` Example Output: ``` grape Apple orange apple banana ``` (Note: The output can vary but must meet the sorting criteria)","solution":"def sort_warehouse_items(n, items): Sorts warehouse items by their quantity in non-decreasing order. If two items have the same quantity, they are sorted alphabetically by their names. Args: n (int): Number of items. items (list of tuples): Each tuple contains a string (item_name) and an integer (quantity). Returns: list of str: Sorted list of item names. # Sort primarily by quantity, and secondarily by item name lexicographically sorted_items = sorted(items, key=lambda x: (x[1], x[0])) # Extract and return the item names return [item[0] for item in sorted_items]"},{"question":"A password is considered strong if the following conditions are met: 1. It has at least 8 characters. 2. It contains at least one lowercase English character. 3. It contains at least one uppercase English character. 4. It contains at least one digit. 5. It contains at least one special character. The special characters are: !@#%^&*()-+ Given a string password, return whether it is strong (true) or false otherwise. The first line of the input contains the string password (1 ≤ |password| ≤ 100). If the password is strong, print \\"YES\\", otherwise print \\"NO\\". Here\'s an example: Input: password123! Output: NO Input: StrongPas1 Output: YES","solution":"import re def is_strong_password(password): Check whether the given password is strong according to the defined criteria. Parameters: - password: str, the input password. Returns: - str: \\"YES\\" if the password is strong, otherwise \\"NO\\". if len(password) < 8: return \\"NO\\" if not re.search(r\'[a-z]\', password): return \\"NO\\" if not re.search(r\'[A-Z]\', password): return \\"NO\\" if not re.search(r\'d\', password): return \\"NO\\" if not re.search(r\'[!@#%^&*()-+]\', password): return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers where each integer represents the height of a fence post. A painter needs to paint the entire fence, starting from one end and moving to the other, but he can only paint at a consistent height throughout the entire job. However, he may choose to start over and paint again if he finds a lower height mid-job, which will incur an additional painting cost. Determine the minimum cost for the painter to paint the entire fence given that the cost of starting to paint or repainting is constant at a rate of k units. The first line contains two integers, n and k (1 ≤ n ≤ 10^4, 1 ≤ k ≤ 10^3) — the number of fence posts and the cost of starting or repainting. The second line contains n integers representing the heights of the fence posts (1 ≤ heights[i] ≤ 10^4). Print a single integer denoting the minimum total cost to paint the entire fence. Example: Input: 7 10 3 1 4 1 5 9 2 Output: 40 Explanation: In the example, the painter can choose the heights: - From 3 to the first 1 with a cost of 10. - From 1 to the second 1 with a cost of 10. - From 1 to 5 with a cost of 10. - From 5 to 9 with a cost of 10. - Paint the last 2 with a cost of 10. Overall, the total cost would be 40.","solution":"def min_painting_cost(n, k, heights): cost = k # Initial cost for the first painting session for i in range(1, n): if heights[i] < heights[i-1]: cost += k return cost"},{"question":"In an ancient kingdom, famous for its well-organized library, each book had its designated position on a shelf. The library consisted of `n` shelves, and each shelf had `m` positions, all positions were numbered sequentially from left to right starting from 1. Each shelf is also numbered from 1 to `n`, starting from the topmost shelf. The head librarian, Biblios, was delighted until one day, a massive flood meant many books had to be relocated. To automate the process of checking book placements during the recovery, help Biblios by simulating the library operations. You need to handle two types of operations: - `1 id x y`: Place the book with identifier `id` to position `y` on shelf `x`. - `2 id`: Find the position of the book with identifier `id`. The operations are given through a series of commands. Each book identifier is unique, and a position can have at most one book. If a book is placed at an already occupied position, it should be ignored. If the book is already placed elsewhere and we receive a command to place it again, it should also be ignored. Input Format: - The first line contains three integers, `n` (1 ≤ n ≤ 50), `m` (1 ≤ m ≤ 50), and `k` (1 ≤ k ≤ 3000) – the number of shelves, the number of positions on each shelf, and the number of operations respectively. - The following `k` lines contain operations of form `1 id x y` or `2 id`. Output the results of all queries of the form `2 id` as follows: - For each query of type `2 id`, output two integers – the shelf number and the position number where the book with identifier `id` is placed. If the book is not found, output `-1 -1`. Example: ``` Input: 3 5 4 1 101 1 3 1 102 2 5 2 101 2 103 Output: 1 3 -1 -1 ```","solution":"def library_operations(n, m, k, commands): Simulates library operations to place books and find their positions. book_positions = {} shelves = [[None] * m for _ in range(n)] results = [] for command in commands: cmd = command.split() if cmd[0] == \'1\': book_id = int(cmd[1]) x = int(cmd[2]) - 1 y = int(cmd[3]) - 1 if book_id in book_positions: continue # Ignore if the book is already placed if shelves[x][y] is None: shelves[x][y] = book_id book_positions[book_id] = (x, y) elif cmd[0] == \'2\': book_id = int(cmd[1]) if book_id in book_positions: x, y = book_positions[book_id] results.append((x + 1, y + 1)) else: results.append((-1, -1)) return results"},{"question":"**Problem Statement:** John loves puzzles, especially puzzles involving matrices. One of his favorite challenges is to create a specific type of matrix called a \\"Spiral Matrix.\\" Given an integer `n`, John wants to generate an `n x n` matrix containing all integers from `1` to `n^2`, arranged in a clockwise spiral pattern starting from the top-left corner. Write a function called `generate_spiral_matrix(n)` that takes a single integer `n` (`1 ≤ n ≤ 100`) and returns an `n x n` matrix filled with integers `1` to `n^2` in a clockwise spiral order. # Example **Input:** ``` 3 ``` **Output:** ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` **Input:** ``` 4 ``` **Output:** ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` # Function Signature ```python def generate_spiral_matrix(n: int) -> List[List[int]]: pass ``` # Constraints - The matrix is always square. - The function should be efficient and adhere to an `O(n^2)` time complexity. - Aim to minimize additional space usage beyond the output matrix.","solution":"from typing import List def generate_spiral_matrix(n: int) -> List[List[int]]: # Initialize an n x n matrix filled with 0s matrix = [[0] * n for _ in range(n)] # Define directions for the spiral order: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] dir_index = 0 # Start with the \'right\' direction # Start from the top-left corner row, col = 0, 0 for num in range(1, n*n+1): # Fill the current cell with the number matrix[row][col] = num # Calculate the next position next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1] # Check if the next position is within bounds and the cell is not yet filled if 0 <= next_row < n and 0 <= next_col < n and matrix[next_row][next_col] == 0: row, col = next_row, next_col else: # Change direction dir_index = (dir_index + 1) % 4 row, col = row + directions[dir_index][0], col + directions[dir_index][1] return matrix"},{"question":"You are given two non-empty binary trees each represented by root nodes tree1 and tree2 respectively. Your task is to merge the two binary trees into a new binary tree; the merge rule is that if two nodes overlap, the values of the two nodes should be added up as the new value of the merged node. Otherwise, the non-null node will be used as the node of the new tree. Implement a function `mergeTrees` that returns the root of the new binary tree. # Function Signature The function should be defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mergeTrees(tree1: TreeNode, tree2: TreeNode) -> TreeNode: ``` # Example Suppose the input binary trees are shown below: **Tree 1:** ``` 1 / 3 2 / 5 ``` **Tree 2:** ``` 2 / 1 3 4 7 ``` Merging the two binary trees results in: ``` 3 / 4 5 / 5 4 7 ``` # Constraints - The number of nodes in both trees is in the range [0, 2000]. - The value of each node is between [-104, 104]. You need to merge the two given binary trees and return the root of the new tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mergeTrees(tree1: TreeNode, tree2: TreeNode) -> TreeNode: if not tree1: return tree2 if not tree2: return tree1 merged = TreeNode(tree1.val + tree2.val) merged.left = mergeTrees(tree1.left, tree2.left) merged.right = mergeTrees(tree1.right, tree2.right) return merged"},{"question":"Given a city roadmap represented as an undirected graph with n vertices and m edges, you need to find the shortest cycle in the graph. A cycle is a path that starts and ends at the same vertex, without repeating any edge. The length of a cycle is the number of edges it contains. If there is no cycle in the graph, return -1. Each edge in the graph has a positive integer weight. The graph is given in the following format: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) — the number of vertices and edges in the graph. - Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) — denoting an edge between vertices u and v with weight w. Your task is to write a program to find the shortest cycle in the graph. If there are multiple cycles with the same length, return the shortest cycle\'s length. If there is no cycle, return -1. # Input - The first line contains two integers n and m. - Each of the next m lines contains three integers u, v, and w. # Output - Print a single integer — the length of the shortest cycle. If there is no cycle, print -1. # Example Input: ``` 4 4 1 2 1 2 3 2 3 4 3 4 1 4 ``` Output: ``` 4 ``` Input: ``` 3 2 1 2 10 2 3 10 ``` Output: ``` -1 ```","solution":"import heapq import sys from collections import defaultdict, deque def shortest_cycle(n, m, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): dist = {i: float(\'inf\') for i in range(1, n + 1)} parent = {i: -1 for i in range(1, n + 1)} dist[start] = 0 queue = deque([start]) while queue: u = queue.popleft() for v, w in graph[u]: if dist[v] == float(\'inf\'): dist[v] = dist[u] + w parent[v] = u queue.append(v) elif parent[u] != v: # If v is already visited, check for cycle return dist[u] + dist[v] + w return float(\'inf\') shortest = float(\'inf\') for i in range(1, n + 1): shortest = min(shortest, bfs(i)) return shortest if shortest != float(\'inf\') else -1"},{"question":"You are given several queries where each query contains an integer n. Your task is to determine the minimum number of positive integers required to sum up to n, where each integer is a power of 2 (i.e., 1, 2, 4, 8, 16, ldots). For example, to represent 23, you can use 16, 4, 2, and 1 (16 + 4 + 2 + 1 = 23), which constitutes 4 integers. This question effectively asks for the count of bits set to 1 in the binary representation of n. The input consists of multiple test cases. The first line contains a single integer q (1 le q le 2000) — the number of test cases. Each of the next q lines contains a single integer n (1 le n le 10^9). For each test case, output a single integer, the minimum number of positive integers required to sum up to n. **Example:** Input: ``` 3 23 7 15 ``` Output: ``` 4 3 4 ``` **Explanation:** 1. 23 in binary is 10111, which has four 1\'s. 2. 7 in binary is 111, which has three 1\'s. 3. 15 in binary is 1111, which has four 1\'s.","solution":"def count_minimum_numbers(n): Returns the minimum number of positive integers (power of 2) required to sum up to n. This is equivalent to counting the number of set bits in the binary representation of n. return bin(n).count(\'1\') def process_queries(queries): Process multiple queries to compute the minimum number of positive integers required for each n. results = [] for n in queries: results.append(count_minimum_numbers(n)) return results"},{"question":"You are given two rational numbers in the form of fractions and you need to add them together. The fractions will be provided in the form \\"a/b\\" and \\"c/d\\", where a, b, c, and d are integers, and b and d are non-zero. Write a function that takes two strings representing these fractions and returns their sum in the simplest form. The function should return the fraction in the form of a string \\"p/q\\", where p and q are the numerator and denominator of the simplified fraction respectively. Function signature: `def add_fractions(frac1: str, frac2: str) -> str:` **Input** - Two strings frac1 and frac2 representing the fractions \\"a/b\\" and \\"c/d\\" respectively. - Constraints: The fractions will be in the range of -1000 to 1000 for the numerator values and 1 to 1000 for the denominator values. **Output** - A string representation of the resulting fraction in its simplest form. **Examples** - `add_fractions(\\"1/2\\", \\"3/4\\")` should return `\\"5/4\\"` - `add_fractions(\\"2/3\\", \\"1/6\\")` should return `\\"5/6\\"` - `add_fractions(\\"-1/2\\", \\"2/4\\")` should return `\\"0/1\\"` **Notes** - The fractions can be negative. - The resulting fraction should always be in its simplest form, which means the greatest common divisor (GCD) of the numerator and denominator should be 1. - If the resulting fraction is zero, the denominator should be 1 (i.e., \\"0/1\\"). In the first example, 1/2 + 3/4 => (2/4) + (3/4) => (5/4). In the second example, 2/3 + 1/6 => (4/6) + (1/6) => (5/6). In the third example, -1/2 + 2/4 => -1/2 + 1/2 => 0/1.","solution":"from math import gcd def add_fractions(frac1: str, frac2: str) -> str: Add two fractions and return the result in simplest form. Parameters: frac1 (str): The first fraction in the form \\"a/b\\". frac2 (str): The second fraction in the form \\"c/d\\". Returns: str: The result of the addition in simplest form. # Parse the fractions a, b = map(int, frac1.split(\'/\')) c, d = map(int, frac2.split(\'/\')) # Find common denominator and add the fractions numerator = a * d + c * b denominator = b * d # Simplify the fraction common_divisor = gcd(numerator, denominator) numerator //= common_divisor denominator //= common_divisor return f\\"{numerator}/{denominator}\\""},{"question":"You are given a grid with m rows and n columns (0-indexed). Initially, each cell in the grid contains the value 0. You need to perform a series of updates on this grid: each update consists of adding a value of 1 to each element within a subgrid defined by its top-left and bottom-right corners (both inclusive). Your task is to determine the final values in the grid after performing all updates. The first line of the input contains two integers m and n (1 ≤ m, n ≤ 500), the number of rows and columns in the grid. The second line contains an integer k (1 ≤ k ≤ 10^4), the number of updates. Each of the next k lines contains four integers r1, c1, r2, c2 (0 ≤ r1 ≤ r2 < m, 0 ≤ c1 ≤ c2 < n), which represent the coordinates of the top-left and bottom-right corners of the subgrid to be updated. Print the final grid after all updates. # Example Input ``` 3 3 3 0 0 1 1 1 1 2 2 0 0 2 2 ``` Output ``` 2 2 1 2 3 2 1 2 2 ``` In this example, we have a 3x3 grid. We perform 3 updates: 1. Increment all cells from (0,0) to (1,1). 2. Increment all cells from (1,1) to (2,2). 3. Increment all cells from (0,0) to (2,2).","solution":"def increment_grid(m, n, updates): Returns the final grid values after all updates. m: number of rows n: number of columns updates: list of tuples with each tuple containing 4 integers r1, c1, r2, c2 grid = [[0] * n for _ in range(m)] for r1, c1, r2, c2 in updates: for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] += 1 return grid"},{"question":"You are given a collection of `n` coins of varying integers values. Your task is to divide these coins into two groups in such a way that the absolute difference between the sum of the values of the coins of the first group and the sum of the values of the coins of the second group is minimized. Write a function `minimize_coin_difference(n: int, coins: List[int]) -> int` to achieve this goal. # Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), representing the number of coins. - The second line contains `n` integers, the values of the `n` coins (1 ≤ value of each coin ≤ 1000). # Output: - Output a single integer, the minimum possible absolute difference. # Example: ```python def minimize_coin_difference(n: int, coins: List[int]) -> int: # Your code here # Example 1: print(minimize_coin_difference(4, [1, 2, 3, 4])) # Output should be 0 # Example 2: print(minimize_coin_difference(3, [2, 3, 5])) # Output should be 0 ```","solution":"from typing import List def minimize_coin_difference(n: int, coins: List[int]) -> int: total_sum = sum(coins) target = total_sum // 2 dp = [0] * (target + 1) for coin in coins: for j in range(target, coin - 1, -1): dp[j] = max(dp[j], dp[j - coin] + coin) sum1 = dp[target] sum2 = total_sum - sum1 return abs(sum1 - sum2)"},{"question":"In the land of Anaria, there is a series of heavily guarded gates that protect the entrance to the legendary vault. The gates are arranged linearly and indexed from 1 to m. Each gate can only be opened using a specific key, and each key can open exactly one gate. The kingdom\'s locksmiths are highly efficient and have managed to produce n keys, each corresponding to a specific gate. However, due to a mistake in the inventory records, the exact distribution of the keys got mixed up, and now the royal guards need to figure out which key opens which gate. The guards need a system to match these keys to the gates efficiently given some constraints: - Each key `ki` can open any of the gates `gj`, but only if both are still unassigned. - Once a key opens a gate, it cannot be used for any other gate. - The time taken to test a key on a gate is proportional to the index of the gate. In simpler terms, trying key `ki` on gate `gj` takes time `gj`. The objective is to assign each key to exactly one gate such that the total time consumed in testing all key-gate pairs is minimized. You are given two integers `m` (number of gates) and `n` (number of keys) such that `m ≤ n ≤ 10^5`. Next, you are given a list of n integers representing the keys. Write a function that determines the minimal time required to match all the keys to all the gates. Input: - The first line contains two integers, `m` and `n`, representing the number of gates and the number of keys respectively (1 ≤ m ≤ n ≤ 10^5). - The second line contains n space-separated integers, representing the keys (1 ≤ key ≤ 10^9). Output: - Print a single integer — the minimal time required to open all the gates using the keys. Example: Input: 5 6 8 3 7 5 2 10 Output: 15 Explanation: The gates are indexed from 1 to 5. The minimal time to test the keys would be: - Assign the smallest key (2) to gate 1 (total time = 1) - Assign the next smallest key (3) to gate 2 (total time = 2) - Assign the next smallest key (5) to gate 3 (total time = 3) - Assign the next smallest key (7) to gate 4 (total time = 4) - Assign the next smallest key (8) to gate 5 (total time = 5) The total minimal time is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def minimal_time_to_open_gates(m, n, keys): This function returns the minimal time required to match all the keys to all the gates. keys.sort() total_time = 0 for i in range(m): total_time += (i + 1) return total_time # Example usage: # m, n = 5, 6 # keys = [8, 3, 7, 5, 2, 10] # output = minimal_time_to_open_gates(m, n, keys) # print(output) # Expected output: 15"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to find all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that: - `0 <= a, b, c, d < len(nums)` - `nums[a] + nums[b] + nums[c] + nums[d] == target` - `a`, `b`, `c`, and `d` are distinct indices. Return all these quadruplets as a list of lists. The solution set must not contain duplicate quadruplets. You may assume that there are no duplicate elements in the `nums` array. # Input - An integer array `nums` of length `n` (1 leq n leq 200). - An integer `target` (-10^9 leq target leq 10^9). # Output - A list of lists, where each sublist is a quadruplet that sums to `target`. # Example **Input:** ```python nums = [1, 0, -1, 0, -2, 2] target = 0 ``` **Output:** ```python [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` # Constraints - The solution must run in polynomial time relative to the length of the input `nums`. - Each quadruplet in the output list must be unique. # Note You can return the quadruplets in any order.","solution":"def four_sum(nums, target): Find all unique quadruplets in the array nums that sum up to target. Args: nums: List[int] - List of integers. target: int - The target sum of the quadruplets. Returns: List[List[int]] - List of unique quadruplets which sum up to the target. nums.sort() n = len(nums) quadruplets = [] for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue # Skip duplicate number. for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue # Skip duplicate number. k, l = j + 1, n - 1 while k < l: total = nums[i] + nums[j] + nums[k] + nums[l] if total == target: quadruplets.append([nums[i], nums[j], nums[k], nums[l]]) while k < l and nums[k] == nums[k + 1]: k += 1 while k < l and nums[l] == nums[l - 1]: l -= 1 k += 1 l -= 1 elif total < target: k += 1 else: l -= 1 return quadruplets"},{"question":"You are given an array of strings `arr` where each string represents a large integer. The task is to find the string that represents the largest integer and return it as the result. The integers can be extremely large and may not fit in standard data types. Write a function `findLargest(arr)` that takes in an array of strings and returns the string that represents the largest integer. # Input: - An array of strings `arr` where each string `s` represents a large integer. - The length of `arr` is at least 1 and does not exceed 10^5. - Each string `s` has a length between 1 and 10^5. # Output: - Return the string that represents the largest integer in the input array. # Example: ```python arr = [\\"123\\", \\"456\\", \\"789\\"] print(findLargest(arr)) # Output: \\"789\\" arr = [\\"1\\", \\"34\\", \\"3\\", \\"98\\", \\"9\\", \\"76\\", \\"45\\", \\"4\\"] print(findLargest(arr)) # Output: \\"98\\" ``` # Note: - If there are multiple strings representing the same largest integer, you can return any one of them. - You cannot assume the integers will fit in the standard data types such as int or long in Python. # Constraints: - The integers are non-negative. - The length of each string does not exceed 10^5. - The length of the array does not exceed 10^5. Implement the `findLargest(arr)` function.","solution":"def findLargest(arr): Finds and returns the string representing the largest integer in the array of strings. # Use the key parameter of max to compare the lengths of strings first, # and by their values in case of ties in lengths. return max(arr, key=lambda x: (len(x), x))"},{"question":"Alice is preparing for a coding competition and needs to practice her counting skills. She decides to work on the following problem: You are given a string, s, consisting of lowercase English letters. Alice wants to know the number of distinct non-empty substrings of the string s. A substring is a contiguous sequence of characters within a string. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Write a function to compute the number of distinct non-empty substrings of the given string. # Input - A single line containing the string s. The length of s is between 1 and 10^5. # Output - A single integer, the number of distinct non-empty substrings of s. # Example Input ``` abc ``` Output ``` 6 ``` Input ``` aaa ``` Output ``` 3 ``` # Constraints - The string s contains only lowercase English letters. - The length of the string s will not exceed 10^5.","solution":"def count_distinct_substrings(s): Returns the number of distinct non-empty substrings of the string `s`. n = len(s) substrings = set() # Generate all possible substrings and add them to the set for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) # The number of distinct substrings is the size of the set return len(substrings)"},{"question":"Alex is learning to program and practices by solving array manipulation problems. One task he is working on involves processing an array of integers. His goal is to identify and remove all elements that have at least one smaller element to their right side. For example, in the array [10, 5, 8, 4, 9, 1], the numbers 10, 5, and 8 have smaller elements following them, so they should be removed, leaving [4, 9, 1]. Write a function remove_greater_elements that receives an array of integers and returns a new array with the elements that don\'t have any smaller element to their right. The function should maintain the relative order of the elements. # Input - The input is a single array of integers, where the length of the array does not exceed 105. # Output - The output is a new array of integers with the elements that don\'t have any smaller element to their right. # Example Input: ``` [16, 17, 4, 3, 5, 2] ``` Output: ``` [17, 5, 2] ``` Input: ``` [1, 2, 3, 4, 5] ``` Output: ``` [5] ``` Input: ``` [5, 4, 3, 2, 1] ``` Output: ``` [5, 4, 3, 2, 1] ``` # Constraints - Your solution should run in linear time (O(n)) to handle the largest input size efficiently. # Function Signature ``` def remove_greater_elements(arr: List[int]) -> List[int]: ```","solution":"def remove_greater_elements(arr): Identifies and removes all elements in the array that have at least one smaller element to their right side, and returns a new array with the elements that don\'t have any smaller element to their right, maintaining their relative order. if not arr: return [] n = len(arr) result = [] max_from_right = arr[-1] # Traverse the list from right to left for i in range(n-1, -1, -1): if arr[i] >= max_from_right: result.append(arr[i]) max_from_right = arr[i] # Since we are adding elements from the end, we need to reverse the result list return result[::-1]"},{"question":"Given a string of lowercase Latin letters, we need to determine the number of pairs of indices (i, j) such that the substring from index i to j forms a palindrome. A palindrome is a string that reads the same forwards and backwards. You are required to write a function that takes a single input: - A string `s` (1 ≤ |s| ≤ 100), where `|s|` is the length of the string. The string contains only lowercase Latin letters. The output should be a single integer representing the number of palindromic substrings in the given string. # Example **Input:** ``` abba ``` **Output:** ``` 6 ``` **Explanation:** The 6 palindromic substrings are: \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\". # Note: - Single letters are considered palindromes. - The input string can be as long as 100 characters, so your solution should effectively handle relatively long strings within a reasonable time.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 # Define a DP table to store if s[i:j+1] is a palindrome dp = [[False] * n for _ in range(n)] # All single letters are palindromic substrings for i in range(n): dp[i][i] = True count += 1 # Check for palindromic substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for substrings of length greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count"},{"question":"Alice has a set of n distinct integers, and she wants to split this set into two non-empty subsets A and B such that the absolute difference between the sums of the elements in A and B is minimized. Write a function that determines the minimum possible absolute difference. You may assume that n leq 18.","solution":"def find_minimum_abs_difference(nums): Given a list of distinct integers nums, this function partitions the list into two non-empty subsets such that the absolute difference between the sums of the elements in the two subsets is minimized. from itertools import combinations total_sum = sum(nums) n = len(nums) min_diff = float(\'inf\') # To ensure subsets are non-empty, we check subsets sizes from 1 to (n-1)/2 # Note that combinations of size (n-x) is equivalent to those of size x, so we iterate less. half_size = n // 2 for r in range(1, half_size + 1): for subset in combinations(nums, r): subset_sum = sum(subset) other_sum = total_sum - subset_sum diff = abs(subset_sum - other_sum) min_diff = min(min_diff, diff) return min_diff"},{"question":"Anna works at a software company and is given the task to analyze the security of a messaging system. In this system, there are N messages, each with a different priority. The priority of a message is defined as an integer value, and Anna needs to compute the longest subsequence of messages such that each message\'s priority in this subsequence is strictly greater than the previous message\'s priority. Formally, given an array of N integers representing the priorities of the messages, Anna needs to find the length of the longest subsequence where each priority is strictly greater than the previous one. **Input:** The first line of the input contains a single integer N (1 ≤ N ≤ 1,000) representing the number of messages. The second line contains N integers, each representing the priority of a message. These integers are separated by spaces. **Output:** Output a single integer representing the length of the longest subsequence with strictly increasing priorities. **Example:** ``` Input: 6 5 2 8 6 3 6 9 7 Output: 4 ``` In the example above, one of the longest subsequences with strictly increasing priorities is [2, 3, 6, 9], and its length is 4.","solution":"def length_of_lis(priorities): Returns the length of the longest increasing subsequence given a list of message priorities. :param priorities: List of integers representing message priorities :return: Integer representing the length of the longest strictly increasing subsequence if not priorities: return 0 n = len(priorities) lis = [1] * n for i in range(1, n): for j in range(i): if priorities[i] > priorities[j]: lis[i] = max(lis[i], lis[j] + 1) return max(lis)"},{"question":"Pavel is trying to understand properties of polynomials through computational experiments. Given a certain polynomial represented by its coefficients, he wants to determine the value of the polynomial for a series of input values. A polynomial can be represented as: P(x) = a_0 + a_1 cdot x + a_2 cdot x^2 + dots + a_m cdot x^m Given the coefficients of the polynomial and a list of x values, you need to compute the corresponding y values of the polynomial for each given x. The first line of input contains a single integer m (0 leq m leq 1000), the degree of the polynomial. The second line contains m + 1 integers a_0, a_1, dots, a_m (-10^9 leq a_i leq 10^9) which are the coefficients of the polynomial. The third line contains a single integer q (1 leq q leq 1000), the number of queries. The fourth line contains q integers x_1, x_2, dots, x_q (-10^9 leq x_i leq 10^9), the input values for which you need to compute P(x). Output q space-separated integers, the computed y values of the polynomial for each input value x. # Sample Input ``` 2 1 0 -1 3 1 -1 2 ``` # Sample Output ``` 0 2 3 ``` # Explanation For the given polynomial P(x) = 1 - x^2: - P(1) = 1 - 1^2 = 0 - P(-1) = 1 - (-1)^2 = 1 - 1 = 0 - P(2) = 1 - 2^2 = 1 - 4 = -3","solution":"def evaluate_polynomial(coefficients, x_values): Evaluates the polynomial for each value in x_values. :param coefficients: List of integers representing the polynomial coefficients. :param x_values: List of integers representing the x values. :return: List of integers representing the y values. results = [] for x in x_values: y = sum(coef * (x ** i) for i, coef in enumerate(coefficients)) results.append(y) return results"},{"question":"In a city, there is a river running from the north to the south. On each side of the river, there are several houses aligned in a row. The river is crossed by multiple bridges that connect one house on the west side to one house on the east side. These bridges do not overlap each other. You are given the positions of the houses on the west side and the east side as two lists of integers. Each integer represents a position of the house along the river. Two lists of equal lengths represent the bridges connecting the houses directly across from each other. However, due to some recent changes in the city planning, you are tasked to rearrange the connections such that the total number of overlapping bridges is minimized. Two bridges are considered overlapping if they intersect when viewed from above. Write a program to rearrange the connections and return the minimized number of overlapping bridges as well as the rearranged lists of connections. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of houses on each side of the river. The second line contains n integers representing the positions of houses on the west side. The third line contains n integers representing the positions of houses on the east side. Output the minimized number of overlapping bridges on the first line. On the next two lines, output the rearranged lists of positions for houses on the west side and the east side respectively. Example: ``` Input: 4 1 2 4 7 6 3 5 8 Output: 0 1 2 4 7 3 5 6 8 ``` In this example, after rearranging, no bridges overlap and the output shows the new positions after rearrangement. Consider the most optimal way to rearrange the bridges. You may assume each house will be connected by exactly one bridge.","solution":"def minimize_overlapping_bridges(n, west, east): Minimize the number of overlapping bridges. Parameters: n (int): number of houses on each side of the river. west (list of int): positions of houses on the west side. east (list of int): positions of houses on the east side. Returns: tuple: number of overlaps, rearranged west list, rearranged east list # Pair and sort bridges by the east side positions bridges = list(zip(west, east)) bridges.sort(key=lambda x: x[1]) # Re-extract the sorted lists west_sorted = [bridge[0] for bridge in bridges] east_sorted = [bridge[1] for bridge in bridges] # No overlaps should exist after sorting by the east side return 0, west_sorted, east_sorted"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears exactly once. Write a function that finds the element that appears only once. Your task is to implement the function `find_unique_number(arr: List[int]) -> int` which takes in a list of integers and returns the integer that appears only once. # Input - `arr` (1 ≤ |arr| ≤ 3 * 10^4): a non-empty list of integers where each integer appears twice except for one integer. # Output - Return the single integer that appears only once in the list. # Example Example 1: Input: `arr = [4, 1, 2, 1, 2]` Output: `4` Example 2: Input: `arr = [2, 2, 3]` Output: `3` Example 3: Input: `arr = [1]` Output: `1` # Constraints: - The algorithm should run in linear time complexity O(n) and in constant space complexity O(1).","solution":"from typing import List def find_unique_number(arr: List[int]) -> int: Returns the single integer that appears only once in the list while every other element appears twice. Utilizes XOR operation properties to achieve this in linear time and constant space. unique_number = 0 for num in arr: unique_number ^= num return unique_number"},{"question":"Implement a function called `find_repeated_substring` that takes a single string `s` as input and returns the longest substring that occurs more than once in the given string. If there are multiple such substrings with the same maximum length, return the one which appears first. If no such substring exists, return an empty string. # Input - A single string `s` consisting of lowercase English letters, with length 1 leq |s| leq 2000. # Output - A single string representing the longest repeating substring, or an empty string if no such substring exists. # Example **Input:** ``` banana ``` **Output:** ``` ana ``` **Explanation:** The substrings \\"an\\" and \\"na\\" both appear twice, but \\"ana\\" is the longest substring that appears more than once.","solution":"def find_repeated_substring(s): Finds the longest substring that occurs more than once in the given string `s`. If there are multiple such substrings with the same maximum length, returns the one that appears first. If no such substring exists, returns an empty string. def has_repeated_substring_length(length): substr_map = {} for i in range(len(s) - length + 1): substring = s[i:i+length] if substring in substr_map: return True, substring substr_map[substring] = i return False, \\"\\" left, right = 1, len(s) longest_substr = \\"\\" while left <= right: mid = (left + right) // 2 found, substr = has_repeated_substring_length(mid) if found: longest_substr = substr left = mid + 1 else: right = mid - 1 return longest_substr"},{"question":"Your task is to write a program that helps a wordsmith who is lost while generating words. He has a scrambled word and a dictionary of allowed words, and needs your help to find out if the scrambled word can be rearranged to form any of the words in the dictionary. If multiple words match, you should return the one that comes first lexicographically. The first line of input contains the scrambled word. The second line contains the number n (1 ≤ n ≤ 100) representing the number of words in the dictionary, followed by n lines containing the dictionary words. 1. Output the word from the dictionary that matches the scrambled word when rearranged. 2. If no match is found, print \\"NO MATCH FOUND\\". Example input: ``` tac 3 cat dog act ``` Example output: ``` act ```","solution":"def find_matching_word(scrambled_word, dictionary): Returns the word from the dictionary that can be formed by rearranging the scrambled word. If multiple words match, it returns the one that comes first lexicographically. If no match is found, returns \'NO MATCH FOUND\'. sorted_scrambled = sorted(scrambled_word) matches = [] for word in dictionary: if sorted(word) == sorted_scrambled: matches.append(word) if matches: return min(matches) else: return \\"NO MATCH FOUND\\" # Example usage: # scrambled_word = \\"tac\\" # dictionary = [\\"cat\\", \\"dog\\", \\"act\\"] # print(find_matching_word(scrambled_word, dictionary)) # should return \\"act\\""},{"question":"You are given a string S consisting of lowercase English letters. In one operation, you can select two adjacent characters in the string and swap them. You need to determine whether it is possible to transform the string S into a palindrome using any number of such operations. The first line contains a single integer T (1 le T le 10^4) — the number of test cases. Each of the next T lines contains a string S, with length 1 le |S| le 10^5. Print \\"YES\\" for each test case if it is possible to make the string a palindrome by performing any number of adjacent swaps, otherwise print \\"NO\\". In the first example, you can transform the string into the palindrome \\"radar\\". In the second example, it is already a palindrome. In the third example, you cannot form a palindrome, since there are more than one character \\"b\\" and there is only one character \\"c\\".","solution":"def can_be_palindrome(S): from collections import Counter char_count = Counter(S) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be permuted to form a palindrome if at most one character has an odd count return odd_count <= 1 def solve(test_cases): results = [] for S in test_cases: if can_be_palindrome(S): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Ella loves to create art using colored blocks. She has a sequence of blocks arranged in a straight line, where each block is painted one of three colors: red (marked as \'R\'), green (marked as \'G\'), or blue (marked as \'B\'). Ella wants to paint the blocks so that no two adjacent blocks have the same color. To achieve her goal, she can repaint any block an arbitrary number of times. However, she wants to minimize the number of repaints. Given the initial sequence of block colors, determine the minimum number of repaints required so that no two adjacent blocks share the same color. # Input - The first line contains an integer n (1 ≤ n ≤ 10,000) — the number of blocks. - The second line contains a string of length n consisting of the characters \'R\', \'G\', and \'B\' — the initial colors of the blocks. # Output - Print one integer — the minimum number of repaints needed. # Example Input ``` 5 RGRGR ``` Output ``` 0 ``` Input ``` 5 RRRRR ``` Output ``` 2 ``` # Note In the first example, no repainting is required as no two adjacent blocks share the same color. In the second example, a minimum of 2 repaints is needed to ensure no two adjacent blocks share the same color.","solution":"def min_repaints(n, sequence): Returns the minimum number of repaints required so that no two adjacent blocks have the same color. if n == 1: return 0 repaints = 0 last_color = sequence[0] for i in range(1, n): if sequence[i] == last_color: repaints += 1 # Choose a different color for the next block assuming only three colors (\'R\', \'G\', \'B\') for color in \'RGB\': if color != last_color and (i + 1 == n or color != sequence[i + 1]): last_color = color break else: last_color = sequence[i] return repaints"},{"question":"You are organizing a cycling event that spans multiple cities. Each city is located at different altitudes and has varying difficulty levels of the terrain. To encourage maximum participation, you want to start the race at a time that allows the most cyclists to complete it. Given the altitude differences and terrain difficulties, each cyclist has a specific time window during which they can start and finish the race. Cyclists are from different cities and can only join if their city\'s start and end times fall within the given range. Formally, there\'s a list of m cities, where each city is represented by four integers: startHour, endHour, altitude, and difficulty. Every city allows cyclists to start the race at a specified startHour and must finish by the specified endHour. The race duration is 1 hour. You need to determine the best start time in a given city that maximizes the participation across all cities. The first line of input contains an integer m (2 ≤ m ≤ 50,000) – the number of cities. The next m lines contain four integers each: startHour, endHour, altitude, and difficulty (1 ≤ startHour < endHour ≤ 24, 0 ≤ altitude ≤ 5000, 1 ≤ difficulty ≤ 10). These values describe the time range, altitude, and difficulty for each city. Altitude and difficulty may affect the participation rate but for now, assume everyone within the city range will participate. Output a single integer – the best start hour (1 ≤ startHour ≤ 24) that maximizes total cyclist participation. If multiple start hours lead to the same number of participants, print the smallest start hour. For example, in one dataset of three cities: ``` 3 1 4 200 2 2 5 300 3 3 6 100 1 ``` The optimal start time could be 3, where the race starts at 3 in the first city, 2 in the second, and 1 in the third. Only the first and third city cyclists could participate, maximizing the number of participants.","solution":"def find_best_start_hour(city_data): Determines the best starting hour that maximizes cyclist participation. Parameters: city_data (list): A list of tuples where each tuple contains four integers: startHour, endHour, altitude, difficulty. Returns: int: The best starting hour. # List to count the participant starting hours in the ranges [1, 24] hour_counts = [0] * 25 # Increment count in all applicable hours for each city for start_hour, end_hour, _, _ in city_data: for hour in range(start_hour, end_hour): hour_counts[hour] += 1 # Find the hour with the maximum count. In case of ties, smallest hour will be chosen best_hour = 1 max_participants = hour_counts[1] for hour in range(2, 25): if hour_counts[hour] > max_participants: best_hour = hour max_participants = hour_counts[hour] return best_hour"},{"question":"You have recently started working on a project that involves managing a network of servers. Each server is identified by a unique integer ID, and there are bidirectional connections between some pairs of servers. Each server can have zero or more direct connections to other servers. Your task is to check if, starting from any server, it is possible to move to any other server in the network using these connections. In other words, you need to determine if the network is fully connected. You are given an integer `n` representing the number of servers (numbered from 1 to n) and another integer `m` representing the number of bidirectional connections between servers. Then, you are given `m` pairs of integers, denoting the direct connections between servers. Write a program that determines if the given network of servers is fully connected. If it is fully connected, output \\"CONNECTED\\". Otherwise, output \\"DISCONNECTED\\". # Input: - The first line contains an integer `t` (1 ≤ `t` ≤ 100), the number of test cases. - For each test case: - The first line contains two integers `n` (1 ≤ `n` ≤ 100,000) and `m` (0 ≤ `m` ≤ 200,000) - the number of servers and the number of connections, respectively. - The next `m` lines each contain a pair of integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`), representing a bidirectional connection between server `u` and server `v`. # Output: - For each test case, output a single line containing \\"CONNECTED\\" if the network of servers is fully connected, and \\"DISCONNECTED\\" otherwise. # Example: Input: ``` 2 4 3 1 2 2 3 3 4 4 2 1 2 3 4 ``` Output: ``` CONNECTED DISCONNECTED ``` # Note: In the first test case, the servers are connected as follows: 1 - 2 - 3 - 4. Therefore, the network is fully connected. In the second test case, there are two separate components: 1 - 2 and 3 - 4. Therefore, the network is not fully connected.","solution":"def is_fully_connected(n, m, connections): from collections import defaultdict, deque if n == 1: return \\"CONNECTED\\" # Build the adjacency list adjacency_list = defaultdict(list) for u, v in connections: adjacency_list[u].append(v) adjacency_list[v].append(u) # Use BFS or DFS to check connectivity visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Start BFS from node 1 (assuming nodes are from 1 to n) bfs(1) # Check if all nodes are visited for i in range(1, n + 1): if i not in visited: return \\"DISCONNECTED\\" return \\"CONNECTED\\" def solve_network(t, test_cases): results = [] for n, m, connections in test_cases: results.append(is_fully_connected(n, m, connections)) return results"},{"question":"A new e-commerce platform plans to implement a cash-back reward system to incentivize customer spending. Every month, they provide customers with cash-back based on their total spending. If a customer spends `n` dollars in a month, the cash-back received is calculated based on specific thresholds: - Spend up to 100: 1% cash-back - Spend over 100 and up to 500: 2% cash-back on the amount exceeding 100 - Spend over 500: 5% cash-back on the amount exceeding 500 For example, if a customer spends 600, they get: - 1% on the first 100: 1 - 2% on the next 400 (100 to 500): 8 - 5% on the remaining 100 (over 500): 5 - Total cash-back: 14 Given the total spending of multiple customers over a month, you are to calculate the cash-back for each customer. Input: - The first line contains an integer `t` (1 ≤ t ≤ 10000) — the number of customers. - Each of the next `t` lines contains a single integer `n` (0 ≤ n ≤ 106) — the total spending of a customer. Output: - Print `t` lines — the cash-back received by each customer. The cash-back should be rounded to the nearest two decimal places.","solution":"def calculate_cashback(n): if n <= 100: return round(0.01 * n, 2) elif n <= 500: return round(1 + 0.02 * (n - 100), 2) else: return round(9 + 0.05 * (n - 500), 2) def process_customers(customers): return [calculate_cashback(n) for n in customers]"},{"question":"Given a string consisting of lowercase Latin letters \'a\' and \'b\' only, you need to manipulate the string based on the following rules: 1. You can choose any subsequence (Note: Not a substring, but any non-contiguous subsequences) of the string and delete it. 2. For every deletion operation, you permanently remove that subsequence from the string. 3. Your goal is to delete the entire string using the minimum number of operations. An operation is defined as selecting any subsequence containing only the character \'a\' or only the character \'b\' and removing it. Note that an empty subsequence or a mixed subsequence having both \'a\' and \'b\' characters are not allowed in the operations. The first line contains a single integer t (1 le t le 100) — the number of testcases. Each of the next t lines contains a non-empty string consisting of only \'a\' and \'b\'. The length of each string does not exceed 100. For each testcase, print a single integer: the minimum number of operations needed to completely delete the string. # Example **Input** ``` 4 abba aaaa abab aabbba ``` **Output** ``` 2 1 2 2 ``` # Explanation - In the first case, you can delete all \'a\'s in one operation and all \'b\'s in another operation, hence a total of 2 operations. - In the second case, since the entire string consists of \'a\', you can delete it in a single operation. - In the third case, you can first delete all \'a\'s and then all \'b\'s. - In the fourth case, you can first delete all \'a\'s and then all \'b\'s since the string alternates and ends with more \'b\'s.","solution":"def min_operations_to_delete_string(t, strings): results = [] for string in strings: operations = 0 if \'a\' in string: operations += 1 if \'b\' in string: operations += 1 results.append(operations) return results"},{"question":"Write a function `sort_custom` that takes a list of tuples as input. Each tuple contains two elements: a string and an integer. Your task is to return a new list of tuples sorted by the string in each tuple. However, if two strings are identical, the tuples should be sorted by the integer in descending order. For example, given the input: ```python [(\\"apple\\", 2), (\\"banana\\", 1), (\\"apple\\", 3), (\\"banana\\", 2)] ``` The function should return: ```python [(\\"apple\\", 3), (\\"apple\\", 2), (\\"banana\\", 2), (\\"banana\\", 1)] ``` Function signature: ```python def sort_custom(tuples: List[Tuple[str, int]]) -> List[Tuple[str, int]]: ``` You can assume that: - The input list contains at least one tuple and no more than 100 tuples. - Each string in the tuples contains only lowercase letters and its length does not exceed 100 characters. - The integer in each tuple is between 0 and 1000 inclusive. Ensure that your solution handles edge cases, such as all tuples having the same string or integer values.","solution":"from typing import List, Tuple def sort_custom(tuples: List[Tuple[str, int]]) -> List[Tuple[str, int]]: Sorts a list of tuples first by the string component, and then by the integer component in descending order if the strings are identical. return sorted(tuples, key=lambda x: (x[0], -x[1]))"},{"question":"You are given an array of integers a consisting of n elements. The array can contain positive, negative, and zero values. Your task is to perform operations to make all the elements of the array equal. In one operation, you can either: 1. Add the same constant integer k to exactly one element of the array. 2. Subtract the same constant integer k from exactly one element of the array. Find the minimum number of operations needed to make all elements of the array equal. # Input: - The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. - The second line contains n space-separated integers a_i (-10^9 le a_i le 10^9) — the elements of the array. # Output: - Output a single integer — the minimum number of operations required to make all elements of the array equal. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 2 ``` Explanation: To make all elements equal, you can: 1. Subtract 1 from the third element (3 - 1 = 2). 2. Add 1 to the fourth element (4 + 1 = 5). Now the array becomes [1, 2, 2, 5, 5], and you have successfully made all elements equal in 2 operations.","solution":"def min_operations_to_equalize(n, a): from collections import Counter # Find the frequency of each element freq = Counter(a) # The number with the highest frequency is the one we want to make all elements equal to most_common = freq.most_common(1)[0] # The minimum number of operations needed is the total number of elements # minus the number of occurrences of the most frequent element min_operations = n - most_common[1] return min_operations"},{"question":"You are given a string S consisting of lowercase Latin letters and a character C that also is a lowercase Latin letter. Your task is to determine the shortest distance to character C for each character in the string S. The distance between two characters S[i] and S[j] is defined as the absolute difference of their indices, i.e., |i - j|. Write a function that takes the string S and the character C as input and returns a list of integers representing the shortest distances to the character C for each character in the string S. # Input - A string S (1 ≤ |S| ≤ 10^5), consisting of lowercase Latin letters. - A character C, a single lowercase Latin letter that appears at least once in the string S. # Output - A list of integers representing the shortest distance to the character C for each character in the string S. # Example ```python S = \\"loveleetcode\\" C = \'e\' # Expected Output: # [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0] ``` # Constraints 1. The string S length will be at least 1 and at most 10^5. 2. Character C will appear at least once in S. 3. The function should have optimal time complexity to handle the upper limits of the input size efficiently. Implementing in Python: ```python def shortest_to_char(S: str, C: str) -> List[int]: n = len(S) result = [float(\'inf\')] * n # Forward pass prev = float(\'-inf\') for i in range(n): if S[i] == C: prev = i result[i] = min(result[i], abs(i - prev)) # Backward pass prev = float(\'inf\') for i in range(n-1, -1, -1): if S[i] == C: prev = i result[i] = min(result[i], abs(i - prev)) return result ```","solution":"from typing import List def shortest_to_char(S: str, C: str) -> List[int]: n = len(S) result = [float(\'inf\')] * n # Forward pass prev = float(\'-inf\') for i in range(n): if S[i] == C: prev = i result[i] = abs(i - prev) # Backward pass prev = float(\'inf\') for i in range(n-1, -1, -1): if S[i] == C: prev = i result[i] = min(result[i], abs(i - prev)) return result"},{"question":"Given an unsorted array of integers, write a function that finds all pairs in the array that sum up to a specific target number. Print each pair once, even if there are duplicates in the input array. Input: * The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. * The second line contains n space-separated integers that represent the elements of the array. * The third line contains an integer target — the target sum. Output: Print each unique pair of integers from the array that add up to the target sum. Each pair should be printed in the format `(a, b)`, such that `a <= b`. If no such pair exists, print `No pairs found`. Example: Input: ``` 6 1 5 3 7 9 2 10 ``` Output: ``` (1, 9) (3, 7) ``` Note: - Each pair should be as `(a, b)` where `a <= b`. - Each pair should be unique; if the array contains duplicates leading to the same pair, print it only once. - If the array contains `[1, 1, 9, 9]` and the target is `10`, only one pair `(1, 9)` should be printed, not duplicates.","solution":"def find_pairs(arr, target): Returns a list of unique pairs that sum up to the target. Each pair is in the form (a, b) where a <= b. seen = set() output = set() for num in arr: complement = target - num if complement in seen: pair = (min(num, complement), max(num, complement)) output.add(pair) seen.add(num) if output: return list(output) else: return \\"No pairs found\\""},{"question":"Given an array of integers, determine whether there exists a pair of elements in the array such that their sum is equal to a given target value. If such a pair exists, output \\"YES\\" followed by the indices of the two elements (1-based index). If multiple pairs exist, output the pair with the smallest indices. If no such pair exists, output \\"NO\\". Input: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n integers, the elements of the array. - The third line contains a single integer, the target value. Output: - If such a pair exists, output \\"YES\\" on the first line followed by two integers on the second line indicating the 1-based indices of the two elements. - If no such pair exists, output \\"NO\\". Example: Input: 5 1 2 3 4 5 7 Output: YES 3 4 Explanation: The sum of elements at index 3 and 4 (3 + 4) is equal to the target value 7.","solution":"def find_pair_with_sum(n, arr, target): Determines if there exists a pair of elements in the array such that their sum equals the target. If such a pair exists, output \\"YES\\" followed by the 1-based indices of the two elements. If no such pair exists, output \\"NO\\". value_to_index = {} for i in range(n): complement = target - arr[i] if complement in value_to_index: return f\\"YESn{value_to_index[complement] + 1} {i + 1}\\" value_to_index[arr[i]] = i return \\"NO\\""},{"question":"In a certain city, there are n bus stops. The bus stops are arranged in a linear fashion and are numbered from 1 to n. A commuter can travel between any two bus stops i and j (1 ≤ i, j ≤ n) such that the distance between bus stop i and bus stop j is |i - j|. A bus company offers different passes that allow for travel between a specific range of bus stops. Each pass is defined by three parameters: the starting bus stop ai, the ending bus stop bi, and the price pi of the pass. Given a list of k passes and a range defined by two bus stops s and t (1 ≤ s ≤ t ≤ n), determine the minimum cost for the commuter to travel from bus stop s to bus stop t using any of the provided passes. It is guaranteed that a solution always exists. # Input - The first line contains two integers: n (number of bus stops) and k (number of bus passes). - The next k lines each contain three integers: ai, bi, and pi, describing a bus pass that allows for travel between bus stops ai and bi at a cost of pi. - The last line contains two integers: s and t, representing the starting and ending bus stops for the commuter\'s journey. # Output - Output a single integer, the minimum cost to travel from bus stop s to bus stop t. # Constraints - 1 ≤ n, k ≤ 1000 - 1 ≤ ai ≤ bi ≤ n - 1 ≤ pi ≤ 1000 - 1 ≤ s ≤ t ≤ n # Sample Input ``` 5 4 1 3 5 3 5 7 2 4 4 4 5 2 2 5 ``` # Sample Output ``` 6 ``` # Explanation The commuter can buy the pass for bus stops (2, 4) with a cost of 4 and another pass for bus stops (4, 5) with a cost of 2. The total cost is 4 + 2 = 6, which is the minimum cost to travel from bus stop 2 to bus stop 5.","solution":"def min_cost_to_travel(n, k, passes, s, t): Determines the minimum cost for the commuter to travel from bus stop s to bus stop t using the provided passes. :param n: Number of bus stops :param k: Number of bus passes :param passes: List of tuples (ai, bi, pi) :param s: Starting bus stop :param t: Ending bus stop :return: Minimum cost to travel from s to t import sys import heapq # Initialize the distance array with infinity dist = [sys.maxsize] * (n + 1) dist[s] = 0 # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] # (cost, start bus stop) # Adjacency list for storing passes adj = [[] for _ in range(n + 1)] for ai, bi, pi in passes: adj[ai].append((bi, pi)) adj[bi].append((ai, pi)) # Since bus stops are bi-directional while pq: current_cost, current_stop = heapq.heappop(pq) if current_cost > dist[current_stop]: continue for next_stop, travel_cost in adj[current_stop]: next_cost = current_cost + travel_cost if next_cost < dist[next_stop]: dist[next_stop] = next_cost heapq.heappush(pq, (next_cost, next_stop)) return dist[t]"},{"question":"You are given a string s consisting of lowercase Latin letters and an integer k. Your task is to determine the lexicographically smallest string that can be obtained by removing exactly k characters from the string s. A string x is lexicographically smaller than string y, if at the first position where x and y differ, the string x has a letter that appears earlier in the alphabet than the corresponding letter in y. The first line of the input contains a single integer k (0 le k < |s|), representing the number of characters to remove. The second line of the input contains the string s (1 le |s| le 10^5), where |s| is the length of string s. Print the lexicographically smallest string possible by removing exactly k characters from the string s.","solution":"def lexicographically_smallest_string(s, k): This function returns the lexicographically smallest string by removing exactly k characters from the string s. stack = [] n = len(s) # Iterate over the string for i in range(n): # Remove characters from the stack if possible to make the result lexicographically smaller # and we still have sufficient characters left to remove (k > 0) while stack and k > 0 and stack[-1] > s[i]: stack.pop() k -= 1 stack.append(s[i]) # If there are still characters to remove, remove them from the end while k > 0: stack.pop() k -= 1 # The stack now contains the smallest lexicographical string return \'\'.join(stack) # Example usage result = lexicographically_smallest_string(\\"abcde\\", 2) print(result) # Expected output: \\"abc\\""},{"question":"In a distant land, there is a gardener named John who loves to create beautiful patterns with the flowers in his garden. To do this, he arranges the flowers in rectangular grids, with each cell of the grid either containing a flower or being left empty. John wants to know the number of distinct flower layouts he can create for different grids, given that he always starts with an empty grid and can add flowers in such a way that no two flowers are in the same row or column. Given an integer n representing the side length of the grid, can you help John find the total number of distinct layouts? **Input:** The first line contains an integer t (1 le t le 50) — the number of test cases. Each of the following t lines contains an integer n_i (1 le n_i le 15) — the side length of the grid for the i-th test case. **Output:** For each test case, print the number of distinct layouts for the given grid. **Examples:** Input: ``` 3 2 3 4 ``` Output: ``` 2 6 24 ``` **Explanation:** For the first test case with a 2x2 grid, John can place flowers in 2 positions while adhering to the rule of no two flowers being in the same row or column. For the second test case with a 3x3 grid, John can place flowers in 6 unique positions. The third test case with a 4x4 grid results in 24 distinct layouts, which is the factorial of the grid size (4!).","solution":"def factorial(n): Returns the factorial of n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result def distinct_flower_layouts(t, test_cases): For a list of test cases, returns the number of distinct flower layouts for each grid size. Arguments: t -- number of test cases test_cases -- list of integers representing the side length of the grid for each test case Returns a list of integers where each integer is the number of distinct layouts for the grid size in the corresponding test case. results = [] for n in test_cases: results.append(factorial(n)) return results"},{"question":"In a complex network of cities, each city is connected to one or more other cities via direct routes. Each route has an associated travel cost. A traveler wants to go from a specific starting city to a target city at the minimum cost possible. However, the traveler is restricted to taking at most a certain number of routes (hops). You are given the number of cities n, the number of direct routes m, the starting city s, the target city t, and the maximum number of hops k. You need to find the minimum travel cost for the traveler to get from the starting city to the target city without exceeding the maximum number of hops. The input consists of: - A single line containing four integers n (1 ≤ n ≤ 100), m (1 ≤ m ≤ 1000), s (1 ≤ s ≤ n), t (1 ≤ t ≤ n), and k (0 ≤ k ≤ 100), where n is the number of cities, m is the number of direct routes, s is the starting city, t is the target city, and k is the maximum number of hops. - The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 1000) representing a direct route from city u to city v with a travel cost of c. The output should be a single integer — the minimum travel cost to go from the starting city to the target city within k hops. If no such route exists, output -1. # Example Input ``` 5 7 1 5 2 1 2 10 1 3 20 2 4 10 2 3 25 3 5 30 4 5 10 3 4 35 ``` Output ``` 50 ``` # Explanation In this example, the traveler can go from city 1 to city 2 (cost 10), then from city 2 to city 4 (cost 10), and finally from city 4 to city 5 (cost 10). The total trip cost is 30 and uses exactly 2 hops. The solution needs to ensure that the traveler does not exceed the specified number of hops.","solution":"import heapq import sys def min_cost_with_hops(n, m, s, t, k, routes): # Create adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, c in routes: graph[u].append((v, c)) graph[v].append((u, c)) # Assuming undirected graph # Priority queue for Dijkstra-like search with hops restriction pq = [(0, s, 0)] # (current_cost, current_city, num_hops) min_cost = {i: float(\'inf\') for i in range(1, n+1)} min_cost[s] = 0 hops_used = {i: float(\'inf\') for i in range(1, n+1)} hops_used[s] = 0 while pq: current_cost, current_city, num_hops = heapq.heappop(pq) # If we have already found a cheaper way to reach the current city with fewer or same hops if num_hops > k or (current_cost > min_cost[current_city] and num_hops >= hops_used[current_city]): continue # Check if target city is reached if current_city == t: return current_cost for neighbor, travel_cost in graph[current_city]: new_cost = current_cost + travel_cost if (new_cost < min_cost[neighbor]) or (num_hops + 1 < hops_used[neighbor]): min_cost[neighbor] = new_cost hops_used[neighbor] = num_hops + 1 heapq.heappush(pq, (new_cost, neighbor, num_hops + 1)) return -1 # Target not reachable within k hops # Example input and expected output: # Input: # 5 7 1 5 2 # 1 2 10 # 1 3 20 # 2 4 10 # 2 3 25 # 3 5 30 # 4 5 10 # 3 4 35 # Expected output: # 50 routes = [ (1, 2, 10), (1, 3, 20), (2, 4, 10), (2, 3, 25), (3, 5, 30), (4, 5, 10), (3, 4, 35) ] result = min_cost_with_hops(5, 7, 1, 5, 2, routes) print(result) # Expected output: 50"},{"question":"Given a string S of length n (1 ≤ n ≤ 100), you need to change it into a \\"beautiful\\" string. A \\"beautiful\\" string is a string that has no three consecutive identical characters. You can delete characters from the string to make it beautiful. For instance, turning \\"aaabbaaa\\" into \\"aabba\\" which is beautiful. Note that you cannot add characters or change existing ones, only remove them. Write a program that outputs the minimum number of deletions required to convert the given string into a \\"beautiful\\" string. Input: - The first line contains an integer t (1 ≤ t ≤ 10) — the number of test cases. - The following t lines each contain a single string S of length n. Output: - For each test case, output the minimum number of deletions required to make the string \\"beautiful\\". Example: ``` Input 2 aaabbaaa baaa Output 2 1 ```","solution":"def min_deletions_for_beautiful_string(t, test_cases): This function takes an integer t, which represents the number of test cases, and a list of strings test_cases, where each string needs to be converted into a \\"beautiful\\" string. The function returns a list of minimum deletions required for each string. results = [] for S in test_cases: deletions = 0 i = 0 while i < len(S) - 2: if S[i] == S[i+1] == S[i+2]: deletions += 1 i += 1 # Skip just one character else: i += 1 results.append(deletions) return results"},{"question":"Many applications require the computation of a Fibonacci number, but find that the naive recursive approach is too slow due to recalculating intermediate results. To solve this, one common approach is to use memoization. You are given an integer n. Your task is to compute the nth Fibonacci number modulo 10^9 + 7. The first line of the input contains a single integer n (0 ≤ n ≤ 10^6) — the position in the Fibonacci sequence. Print a single integer, the nth Fibonacci number modulo 10^9 + 7. Example input: 10 Example output: 55 Explanation: The first 10 Fibonacci numbers are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 10th Fibonacci number is 55.","solution":"MOD = 10**9 + 7 def fibonacci(n): Returns the nth Fibonacci number modulo 10^9 + 7. if n == 0: return 0 elif n == 1: return 1 fib = [0] * (n + 1) fib[0] = 0 fib[1] = 1 for i in range(2, n + 1): fib[i] = (fib[i - 1] + fib[i - 2]) % MOD return fib[n]"},{"question":"You are given an array of integers. Your task is to calculate the product of all the elements in the array except the element at each index without using division. For instance, if the input array is [1, 2, 3, 4], the output should be [24, 12, 8, 6]. This is because: - The product of all elements except the element at index 0 is 2 * 3 * 4 = 24. - The product of all elements except the element at index 1 is 1 * 3 * 4 = 12. - The product of all elements except the element at index 2 is 1 * 2 * 4 = 8. - The product of all elements except the element at index 3 is 1 * 2 * 3 = 6. Input: - The first line contains an integer n (2 le n le 10^5) — the number of elements in the array. - The second line contains n space-separated integers a_1,a_2,...,a_n (-10^9 le a_i le 10^9). Output: - Print n space-separated integers where each integer is the product of all elements of the array except the element at that index. Example: Input: 4 1 2 3 4 Output: 24 12 8 6","solution":"def product_except_self(nums): n = len(nums) output = [1] * n left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Anna has a collection of marbles of different masses. She wants to divide the marbles into two groups such that the absolute weight difference between the two groups is minimized. Each marble has a unique mass. Given a list of the masses of the marbles, determine the minimum possible absolute difference between the weights of the two groups. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of marbles. The second line contains n integers — the masses of the marbles. Each mass is a positive integer not exceeding 1000. Print a single integer — the minimum possible absolute difference between the weights of the two groups. In the first sample, by putting the marbles with weights {2, 3} in one group and {1, 4} in the other, the absolute difference is 0. In the second sample, by putting the marbles with weights {5, 8} in one group and {3, 6, 7} in the other, the absolute difference is 1.","solution":"def min_weight_difference(masses): Determines the minimum possible absolute weight difference between two groups of marbles :param masses: List of masses of the marbles :return: Minimum possible absolute weight difference total_sum = sum(masses) n = len(masses) target = total_sum // 2 dp = [[False] * (target + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(target + 1): if j >= masses[i-1]: dp[i][j] = dp[i-1][j] or dp[i-1][j-masses[i-1]] else: dp[i][j] = dp[i-1][j] for j in range(target, -1, -1): if dp[n][j]: return abs(total_sum - 2 * j)"},{"question":"You are given an array of integers representing the sales performance of several sales agents over different months. Each element in the array corresponds to the sales made by a particular agent in a given month. Your task is to answer multiple queries about the sales performance over specific periods. Each query will ask for the maximum sales achieved by any agent within a given subarray. You need to implement a function that efficiently handles multiple queries on the array, where each query specifies a subarray and asks for the maximum value in that subarray. # Input - **First line**: an integer `n` (`1 ≤ n ≤ 100,000`) - the number of sales records. - **Second line**: `n` integers separated by spaces - the sales records of the agents. - **Third line**: an integer `q` (`1 ≤ q ≤ 100,000`) - the number of queries. - **Next `q` lines**: each line contains two integers `l` and `r` (`1 ≤ l ≤ r ≤ n`) representing the 1-indexed positions defining a subarray. # Output - For each query, output a single integer: the maximum sales figure in the specified subarray. # Example **Input:** ``` 5 4 2 5 3 1 3 1 3 2 4 1 5 ``` **Output:** ``` 5 5 5 ``` # Explanation - For the first query, the subarray from the 1st to the 3rd element is `[4, 2, 5]` and the maximum value is `5`. - For the second query, the subarray from the 2nd to the 4th element is `[2, 5, 3]` and the maximum value is `5`. - For the third query, the subarray from the 1st to the 5th element is `[4, 2, 5, 3, 1]` and the maximum value is `5`. # Note - The array is 1-indexed for the purpose of the queries. - Ensure your solution efficiently handles the upper limits of the input constraints.","solution":"def process_queries(n, sales, q, queries): Process the sales queries and return the results. Parameters: n (int): The number of sales records. sales (list of int): The sales records. q (int): The number of queries. queries (list of tuple): The list of queries, where each query is a tuple (l, r). Returns: list of int: The maximum sales values for each query. # Create an array to store the result of each query results = [] for l, r in queries: # Convert 1-indexed to 0-indexed by subtracting one subarray = sales[l-1:r] # Find the maximum value in the subarray max_value = max(subarray) # Append the result to the results list results.append(max_value) return results"},{"question":"Calvin the robot is exploring a rectangular grid with obstacles. The grid is represented by an n x m matrix, where each cell is either a free cell denoted by \'.\', or an obstacle denoted by \'#\'. Calvin can only move to the adjacent cells freely in four directions: up, down, left, and right. Given his starting position (sx, sy) and the exit position (ex, ey), determine the minimum number of moves required for Calvin to reach the exit. Both the starting and exit positions are guaranteed to be on free cells. If it is impossible for Calvin to reach the exit, return -1. The input consists of the following: - First line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns of the grid. - The next n lines each contain m characters representing the grid. - The (n+2)th line contains two integers sx and sy (0 ≤ sx < n, 0 ≤ sy < m) — the starting positions. - The (n+3)th line contains two integers ex and ey (0 ≤ ex < n, 0 ≤ ey < m) — the exit positions. Print a single integer — the minimum number of moves required for Calvin to reach the exit, or -1 if it is not possible. Example: Input: 5 5 ....# .#. .#... ..... ....# 0 0 4 3 Output: 7","solution":"from collections import deque def min_moves_to_exit(n, m, grid, sx, sy, ex, ey): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' moves = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (ex, ey): return steps for dx, dy in moves: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a binary tree with n nodes, each node having a unique value ranging from 1 to n. Your task is to answer m queries. Each query provided in the form of an integer k (1 ≤ k ≤ n) asks you to find if it\'s possible to traverse the tree in such a manner that you visit exactly k nodes and all visited nodes have values in strictly increasing order. The traversal can start from any node and you can move to any of its children or parent node. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The second line contains n-1 pairs of integers a and b (1 ≤ a, b ≤ n) — indicating that there is an edge between node a and node b. The next line contains an integer m (1 ≤ m ≤ 10^5) — the number of queries. The following m lines each contain a single integer k. For each query, print \\"Possible\\" if it is possible to have such a traversal and \\"Impossible\\" otherwise.","solution":"def can_traverse(n, edges, queries): This function determines if it is possible to traverse exactly k nodes in strictly increasing order in the tree for each query. Args: n : int : Number of nodes in the tree. edges : list of tuples : Each tuple contains a pair of integers (a, b) indicating an edge between node a and node b. queries : list of int : Each element is a query asking if it\'s possible to traverse exactly k nodes. Returns: list of str : List containing results for each query \\"Possible\\" or \\"Impossible\\". # Since the tree has n nodes with unique values, a traversal of k nodes in strictly increasing order # is always possible if k <= n. results = [] for k in queries: if 1 <= k <= n: results.append(\\"Possible\\") else: results.append(\\"Impossible\\") return results"},{"question":"You are given a balanced binary search tree (BST) and an integer k. The BST contains unique integers. Your task is to find the k-th largest element in the BST. A balanced Binary Search Tree is defined as a binary tree in which for every node, the difference in height between the left and right subtrees is at most 1. The tree has the following properties: 1. All the values in the left subtree of a node are less than the value of the node. 2. All the values in the right subtree of a node are greater than the value of the node. 3. Both the left and right subtrees are again balanced binary search trees. The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. The following t lines describe the test cases in the following format: - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n), where n is the number of nodes in the BST and k is the k-th largest element to find. - The next line contains n integers which are the values of the nodes in the BST. For each test case, output a single integer, the k-th largest element in the BST. Example: Input: 2 7 3 20 8 22 4 12 10 14 5 1 3 1 4 2 5 Output: 14 5","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def insert_into_bst(root, val): if not root: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def kth_largest_in_bst(root, k): def reverse_inorder_traversal(node): if not node: return [] return reverse_inorder_traversal(node.right) + [node.val] + reverse_inorder_traversal(node.left) sorted_values = reverse_inorder_traversal(root) return sorted_values[k - 1] def find_kth_largest_element(test_cases): results = [] for n, k, node_values in test_cases: root = None for value in node_values: root = insert_into_bst(root, value) results.append(kth_largest_in_bst(root, k)) return results"},{"question":"You are given an array of integers representing the heights of several buildings arranged in a line. Your task is to determine the maximum area of water that can be trapped between the buildings after a heavy rain. Consider that the water is trapped between two buildings if there are no taller buildings in between them and the height of trapped water is determined by the shorter of the two buildings. # Input - An array of integers, `heights`, of length n (1 leq n leq 10^6), where each integer 1 leq heights[i] leq 10^6 represents the height of a building at position `i`. # Output - A single integer representing the maximum area of water that can be trapped between two buildings. # Example ```plaintext Input: [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 ``` # Explanation: In the provided example, the maximum area of water that can be trapped is 49. This area is between the 2nd building (height 8) and the 9th building (height 7) inclusive. The width between these buildings is 7 units, and the trapped water height is limited by the shorter building, which is 7 units. Therefore, the area is calculated as 7 (height) * 7 (width) = 49. # Constraints - The input array length will be at most 10^6. - Each building height will be at most 10^6.","solution":"def max_area(heights): Returns the maximum area of water that can be trapped between the buildings. left = 0 right = len(heights) - 1 max_area = 0 while left < right: width = right - left height = min(heights[left], heights[right]) max_area = max(max_area, width * height) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"You are given an array of integers representing the stacks of books on a shelf. Each book is represented as an integer where the value denotes its thickness. You are asked to sort the books in a manner that maintains the order of thickness non-decreasing from left to right. However, you must do this using a series of allowable operations that mimic the behavior of a robot arm which can pick and place books on the shelf. The robot arm can pick any subarray of books and place it either at the beginning of the shelf or at the end of the shelf, but it cannot pick books individually or place them in between other books. The goal is to determine the minimum number of operations required to sort the entire shelf of books in non-decreasing order of their thickness. # Input The first line contains an integer `n` (1 ≤ `n` ≤ 1000), representing the number of books on the shelf. The second line contains `n` integers `a1, a2, ..., an` (-10^5 ≤ `ai` ≤ 10^5), representing the thickness of each book in the order they currently are on the shelf. # Output Print a single integer representing the minimum number of operations required to sort the books in non-decreasing order. # Example Input ``` 5 4 3 2 1 5 ``` Output ``` 2 ``` Explanation The books can be sorted in 2 moves: 1. Pick the subarray [4, 3, 2, 1] and move it to the end, resulting in [5, 4, 3, 2, 1]. 2. Pick the subarray [5] and move it to the beginning, resulting in [4, 3, 2, 1, 5].","solution":"def min_operations_to_sort(n, books): Determine the minimum number of operations required to sort the books on the shelf in non-decreasing order of their thickness. The robot arm can pick any subarray of books and place it either at the beginning or the end of the shelf. if n == 1: # Already sorted if there\'s only one book return 0 sorted_books = sorted(books) # Find the longest sorted prefix prefix_length = 0 for i in range(n): if books[i] == sorted_books[i]: prefix_length += 1 else: break # Find the longest sorted suffix suffix_length = 0 for i in range(n-1, -1, -1): if books[i] == sorted_books[i]: suffix_length += 1 else: break if prefix_length == n or suffix_length == n: # Already sorted return 0 return 2 # because 2 operations are needed based on the problem explanation"},{"question":"Berland\'s subway system consists of n stations and m routes. Each route connects a pair of stations and has an associated travel time ti, which represents the time it takes for a train to travel from one station to the other along that route. Each route is bidirectional, meaning that trains can travel in both directions between the connected stations and the travel time is the same in either direction. There can be multiple routes between a pair of stations. There are two special stations — the starting station (station 1) and the destination station (station n). The subway system is designed such that the shortest travel time from the starting station to the destination station is of interest. Your task is to find the shortest travel time from station 1 to station n and the exact path of stations to take to achieve this travel time. The first line of the input contains a positive integer n — the number of stations (2 ≤ n ≤ 100). The second line contains an integer m (1 ≤ m ≤ 5000) — the number of routes. Each of the next m lines contain three integers ai, bi, and ti, where ai and bi are the numbers of stations connected by the route, and ti (1 ≤ ai, bi ≤ n; ai ≠ bi; 1 ≤ ti ≤ 100) is the travel time along the route. Output the shortest travel time from station 1 to station n on the first line. On the second line, output the sequence of stations that form this shortest path. If there are multiple shortest paths, output any one of them. Example: Input: 4 5 1 2 3 1 3 6 2 3 1 3 4 2 2 4 5 Output: 6 1 2 3 4","solution":"import heapq def find_shortest_path(n, m, routes): graph = {i: [] for i in range(1, n+1)} for ai, bi, ti in routes: graph[ai].append((bi, ti)) graph[bi].append((ai, ti)) # Dijkstra\'s algorithm pq = [(0, 1, [])] # (accumulated cost, current station, path) shortest_paths = {i: float(\'inf\') for i in range(1, n+1)} shortest_paths[1] = 0 visited = set() while pq: current_time, current_station, path = heapq.heappop(pq) if current_station in visited: continue visited.add(current_station) path = path + [current_station] if current_station == n: return current_time, path for neighbor, travel_time in graph[current_station]: if neighbor not in visited: new_time = current_time + travel_time if new_time < shortest_paths[neighbor]: shortest_paths[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor, path)) return float(\'inf\'), [] def shortest_travel_time_and_path(n, m, routes): travel_time, path = find_shortest_path(n, m, routes) return travel_time, path"},{"question":"You are given a grid of size n x m, initially filled with zeros. You need to perform one of the following operations exactly t times: 1. Choose a row and increment every element of that row by 1. 2. Choose a column and increment every element of that column by 1. After performing exactly t operations, your task is to determine the sum of all elements in the grid. The input contains three integers, n, m, and t (1 ≤ n, m ≤ 1000, 0 ≤ t ≤ 1000). Print the resulting sum after t operations. **Example:** Input: ``` 2 3 4 ``` Output: ``` 4 ``` Explanation: 1. Choose row 1: grid becomes [[1, 1, 1], [0, 0, 0]] 2. Choose column 2: grid becomes [[1, 2, 1], [0, 1, 0]] 3. Choose row 2: grid becomes [[1, 2, 1], [1, 2, 1]] 4. Choose column 3: grid becomes [[1, 2, 2], [1, 2, 2]] Sum of all elements: 1+2+2+1+2+2 = 4","solution":"def grid_sum(n, m, t): Returns the sum of all elements in the grid after t operations. Each operation increments either an entire row or an entire column by 1. # Each operation only increments one cell\'s value at a time return t"},{"question":"A spaceship is traveling through a field of asteroids. The field is represented by a grid of n x n cells, where each cell is either empty (\'.\') or contains an asteroid (\'#\'). The spaceship can traverse through empty cells but cannot move through cells with asteroids. The spaceship can move up, down, left, or right, but cannot move diagonally. Given the starting and the target positions (both guaranteed to be empty cells), determine the minimum number of moves required for the spaceship to reach the target position from the starting position. If it is not possible for the spaceship to reach the target, return -1. The input format is as follows: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. - The next n lines contain n characters each (\'.\' or \'#\') representing the grid. - The last line contains four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n) representing the starting position (x1, y1) and the target position (x2, y2). Return the minimum number of moves required for the spaceship to reach the target position from the starting position, or -1 if it is not possible. Example: Input: ``` 5 ..... .#. ..... .#. ..... 1 1 5 5 ``` Output: ``` 8 ``` Explanation: The spaceship can move from the starting position (1, 1) to the target position (5, 5) with the following moves: 1. (1, 1) to (2, 1) 2. (2, 1) to (3, 1) 3. (3, 1) to (3, 2) 4. (3, 2) to (3, 3) 5. (3, 3) to (4, 3) 6. (4, 3) to (5, 3) 7. (5, 3) to (5, 4) 8. (5, 4) to (5, 5) Note: - If the start or end position is an asteroid, return -1 immediately since the spaceship cannot start or end on a cell containing asteroids. - Assume 1-based indexing for the grid and positions.","solution":"from collections import deque def min_moves(n, grid, start, target): def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] x1, y1 = start x2, y2 = target x1, y1, x2, y2 = x1 - 1, y1 - 1, x2 - 1, y2 - 1 # If start or target is an asteroid, return -1 if grid[x1][y1] == \'#\' or grid[x2][y2] == \'#\': return -1 queue = deque([(x1, y1, 0)]) # (x, y, distance) visited = set((x1, y1)) while queue: x, y, dist = queue.popleft() if (x, y) == (x2, y2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given an integer array `arr` of size `n` and an integer `k`, write a function that returns the maximum possible sum of any subarray of size `k`. - The first line of input contains two integers `n` (1 ≤ `n` ≤ 1000) and `k` (1 ≤ `k` ≤ n), where `n` is the size of the array and `k` is the size of the subarray. - The second line contains `n` integers representing the elements of the array `arr` (1 ≤ `arr[i]` ≤ 1000 for all valid i). The output should be a single integer representing the maximum possible sum of any subarray of size `k`. # Example Input: ``` 8 3 1 3 2 5 4 6 1 2 ``` Output: ``` 15 ``` Explanation: The subarray of size 3 with the maximum sum is [5, 4, 6], and the sum is 15. # Constraints - The function should run in O(n) time complexity.","solution":"def max_sum_of_subarray(arr, n, k): Returns the maximum possible sum of any subarray of size `k`. current_sum = sum(arr[:k]) max_sum = current_sum for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a string, and you need to determine the length of the shortest palindromic subsequence that can be obtained by removing some characters (or none) from the original string. A palindromic subsequence is a sequence that reads the same forward and backward. # Input Format: - The first input line contains a single integer t (1 le t le 10) — the number of test cases. - Each of the next lines contains a string s (1 le |s| le 1000) consisting of only lowercase English letters. # Output Format: - For each test case, output the length of the shortest palindromic subsequence of the string. # Example: Input: ``` 3 abc abca abacaba ``` Output: ``` 1 2 7 ``` # Explanation: In the first test case, the shortest palindromic subsequence is any single character from the string (\\"a\\", \\"b\\", or \\"c\\"). In the second test case, the shortest palindromic subsequence could be obtained by removing either \\"b\\" or \\"c\\", resulting in \\"aa\\" or \\"aca\\" respectively. In the third test case, the entire string \\"abacaba\\" is already a palindrome.","solution":"def shortest_palindromic_subsequence_length(s): Determines the length of the shortest palindromic subsequence that can be obtained by removing characters from the string. # Function to check if a string is a palindrome def is_palindrome(s): return s == s[::-1] # Check if the entire string is already a palindrome if is_palindrome(s): return len(s) # If not, the shortest palindromic subsequence could be a single character return 1 def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(shortest_palindromic_subsequence_length(s)) return results"},{"question":"In a distant galaxy, the planetary council has decided to establish a unique code for each citizen. The code is a string consisting of uppercase Latin letters. Due to various celestial events, certain transformations are periodically applied to these codes. You are tasked with determining the final code of a citizen after a series of transformation steps. A transformation step involves either adding or removing a specific character from the code. Each transformation can be represented as a string either in the form \\"+ C\\" or \\"- C\\", where \\"+\\" indicates adding character C to the end of the string, and \\"-\\" indicates removing the first occurrence of character C from the string. If a removal operation \\"-\\" for a character C is specified, it is guaranteed that the character C exists in the string at that time. Your task is to write a program that, given the initial code and the sequence of transformations, outputs the final code after all transformations are applied. The first line contains a non-empty string s (1 ≤ |s| ≤ 1000), the initial code consisting of uppercase Latin letters. The second line contains an integer n (0 ≤ n ≤ 10000) — the number of transformations. Each of the next n lines contains a string representing a transformation in the format described above. Print a single string — the final code of the citizen after all transformations have been applied. For example, given the initial code \\"HELLO\\" and the transformations: ``` + A + B - L + O ``` The transformations applied to \\"HELLO\\" would result in \\"HELOABO\\". Hint: Carefully consider the order and effects of each transformation to accurately derive the final string.","solution":"def apply_transformations(initial_code, transformations): Returns the final code after applying a series of transformations to the initial code. Parameters: initial_code (str): The original code string consisting of uppercase Latin letters. transformations (list of str): The list of transformations in the form of \\"+ C\\" or \\"- C\\". Returns: str: The final code after all transformations. code = list(initial_code) for transformation in transformations: operation, char = transformation.split() if operation == \'+\': code.append(char) elif operation == \'-\': code.remove(char) return \'\'.join(code)"},{"question":"You are given an array b[1], b[2], ..., b[m] containing m integers. Your task is to transform this array into a non-decreasing array using the following operation (you may need to apply it multiple times): - Select two indices i and j (1 ≤ i < j ≤ m) such that the sum of the subarray b[i], b[i+1], ..., b[j] is even, then reverse the subarray from b[i] to b[j]. You do not need to minimize the number of used operations. However, you need to ensure that there are at most 5m operations. The first line contains integer m (1 ≤ m ≤ 105). The next line contains m integers b[1], b[2], ..., b[m] (0 ≤ b[i] ≤ 109). In the first line, print an integer k (0 ≤ k ≤ 5m) — the number of operations used. Next, print the operations. Each operation must be printed as \\"i j\\" (1 ≤ i < j ≤ m; the sum of b[i], b[i+1], ..., b[j] is even). If there are multiple answers, you can print any of them.","solution":"def is_non_decreasing(arr): Checks if the given array is non-decreasing. return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) def reverse_subarray(arr, i, j): Returns a new array with the subarray from index i to j reversed. return arr[:i] + arr[i:j + 1][::-1] + arr[j + 1:] def sum_is_even(arr, i, j): Checks if the sum of the subarray from index i to j is even. return sum(arr[i:j + 1]) % 2 == 0 def make_non_decreasing(arr): Transform the array into a non-decreasing array using the specific operations. m = len(arr) operations = [] while not is_non_decreasing(arr): made_operation = False for i in range(m - 1): for j in range(i + 1, m): if arr[i] > arr[j] and sum_is_even(arr, i, j): arr = reverse_subarray(arr, i, j) operations.append((i + 1, j + 1)) # Convert to 1-based index made_operation = True break if made_operation: break if not made_operation: break # no more operations possible return len(operations), operations def transform_array(m, b): Main function to transform the array. num_operations, operations = make_non_decreasing(b) result = [num_operations] + operations return result"},{"question":"You are given two positive integers n and k. You need to construct a permutation p of integers from 1 to n such that the following condition holds: For every integer i (1 le i le n-k), p[i] < p[i+k]. Recall that a permutation of integers from 1 to n is a sequence containing each number from 1 to n exactly once. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case contains two space-separated integers n and k (1 le k < n le 100). For each test case, print one permutation of integers from 1 to n that satisfies the given condition. If there are multiple valid answers, print any of them. # Example Input ``` 2 5 2 6 3 ``` Output ``` 1 3 2 4 5 1 2 3 4 6 5 ```","solution":"def generate_permutation(n, k): Generate a permutation of integers from 1 to n such that for every integer i (1 <= i <= n - k), the condition p[i] < p[i + k] holds. Parameters: n (int): The highest number in the permutation. k (int): The step distance for the condition. Returns: list: A permutation of integers from 1 to n. p = list(range(1, n + 1)) for i in range(1, n - k + 1): if p[i - 1] >= p[i + k - 1]: p[i - 1], p[i + k - 1] = p[i + k - 1], p[i - 1] return p def solve(t, cases): results = [] for n, k in cases: permutation = generate_permutation(n, k) results.append(permutation) return results"},{"question":"You are given a series of railway stations forming a linear chain, numbered 1 to n from left to right. Each station can be different in height, and there is an allowance or penalty associated with moving between stations. You have an array h describing the heights of the stations and another array c describing the cost of moving between each pair of consecutive stations. Initially, there is a train at station 1. The train can only move from its current station to one of the adjacent stations to the left or the right, paying the associated cost c[i] if moving from station i to station i+1, or paying reverse cost c[i-1] if moving from station i to station i-1. Your task is to find and implement a strategy that minimizes the total cost to move the train from station 1 to station n. # Input Specifications - The first line contains a single integer n (1 leq n leq 50) representing the number of stations. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 100) representing the heights of the stations. - The third line contains n-1 integers c_1, c_2, ldots, c_{n-1} (1 leq c_i leq 100) representing the costs associated with moving between each pair of consecutive stations. # Output Specifications - Print a single integer — the minimum total cost to move the train from station 1 to station n. # Example Input ``` 5 1 2 3 4 5 2 3 1 4 ``` Output ``` 10 ``` Explanation Start at station 1, move to station 2 with cost 2, then to station 3 with cost 3, then to station 4 with cost 1, and finally to station 5 with cost 4, making the total cost 2 + 3 + 1 + 4 = 10.","solution":"def min_cost_to_move_train(n, heights, costs): Returns the minimum cost to move the train from station 1 to station n. Parameters: n (int): number of stations heights (list of int): heights of stations costs (list of int): costs between consecutive stations Returns: int: minimum total cost to move from station 1 to station n # Initialize dp array where dp[i] stores the minimum cost to reach station i+1 dp = [float(\'inf\')] * n dp[0] = 0 # Starting point # Using dynamic programming to find the minimum cost for i in range(1, n): # cost to move from station i to station i+1 dp[i] = min(dp[i], dp[i-1] + costs[i-1]) return dp[-1]"},{"question":"Imagine you are organizing a film festival and you need to manage the screening schedule. Each film has a start time and an end time, and you need to ensure that no two films overlap. You are given a list of N films, each defined by a start and end time in a 24-hour format (e.g., 13:00 for 1 PM and 23:45 for 11:45 PM). You need to determine the maximum number of films that can be scheduled without any overlap. # Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of films. - The next N lines contain two strings each, representing the start and end time of a film in HH:MM format. # Output For each test case, print a single integer, the maximum number of non-overlapping films that can be scheduled. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - The start and end times are in HH:MM format, and 00:00 ≤ HH:MM < 24:00. # Example Input ``` 2 3 12:00 14:00 13:00 15:00 15:00 17:00 4 09:00 10:00 10:00 11:00 11:00 12:00 12:00 13:00 ``` Output ``` 2 4 ``` # Note In the first test case, the maximum number of non-overlapping films that can be scheduled is 2 (e.g., from 12:00 to 14:00 and from 15:00 to 17:00). In the second test case, there are no overlapping films, so all four can be scheduled.","solution":"def max_non_overlapping_films(festival_schedule): def convert_to_minutes(time_str): hours, minutes = map(int, time_str.split(\\":\\")) return hours * 60 + minutes T = festival_schedule[0] results = [] idx = 1 for _ in range(T): N = festival_schedule[idx] idx += 1 films = [] for _ in range(N): start_time, end_time = festival_schedule[idx] start_time = convert_to_minutes(start_time) end_time = convert_to_minutes(end_time) films.append((start_time, end_time)) idx += 1 films.sort(key=lambda x: x[1]) last_end_time = -1 count = 0 for start, end in films: if start >= last_end_time: last_end_time = end count += 1 results.append(count) return results"},{"question":"Given a list of integers, determine whether it is possible to partition the list into two subsets such that the sum of the elements in both subsets is equal. If such a partition exists, the function should return the two subsets. If no such partition exists, the function should return an empty list. Write a function named `find_equal_partition` that takes a list of integers as its input and returns a list containing two lists if the equal partition exists, or an empty list if it does not. # Input - One argument, `nums`, a list of integers (-10^4 ≤ nums[i] ≤ 10^4, 1 ≤ len(nums) ≤ 200). # Output - If there exists a partition, return a list of two lists representing the two subsets. The two subsets should not be empty and should be mutually exclusive. - If there is no partition, return an empty list. # Example 1: ```python # Input nums = [1, 5, 11, 5] # Output [[1, 5, 5], [11]] ``` # Example 2: ```python # Input nums = [1, 2, 3, 5] # Output [] ``` # Note 1. It is guaranteed that the elements of nums do not contain any leading zeros. 2. If there are multiple correct answers, you can return any of them.","solution":"def find_equal_partition(nums): total_sum = sum(nums) # If the total sum is odd, it can\'t be partitioned into equal subsets if total_sum % 2 != 0: return [] subset_sum = total_sum // 2 n = len(nums) # dp[i] will be True if a subset with sum i can be formed using elements from the array dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] if not dp[subset_sum]: return [] # Tracing back to find the subsets subset1 = [] subset2 = nums[:] i = subset_sum for num in reversed(nums): if i >= num and dp[i - num]: subset1.append(num) subset2.remove(num) i -= num return [subset1, subset2]"},{"question":"You are organizing a large-scale trivia contest and need to manage the hundreds of results coming in from different participants efficiently. For each participant, you have a pair of integers representing their `start_time` and `duration` of participation, measured in seconds since the beginning of the contest. Your task is to find the maximum number of participants who have overlapping participation times. Two times are considered to overlap if they share at least one second in common. Write a function that takes in a list of intervals and returns the maximum number of overlapping intervals. **Function Signature:** ```python def max_overlapping_intervals(intervals: List[Tuple[int, int]]) -> int: ``` **Input:** - A list of tuples where each tuple contains two integers `start_time` and `duration` (`1 <= start_time, duration <= 10^9`). The size of the list does not exceed `10^5`. **Output:** - An integer representing the maximum number of overlapping intervals. **Example:** ```python intervals = [(1, 5), (3, 9), (6, 10), (8, 4)] print(max_overlapping_intervals(intervals)) # Output: 3 ``` In this example: - Participant 1: `(1, 5)` has a duration from `1` to `5`. - Participant 2: `(3, 9)` has a duration from `3` to `11`. - Participant 3: `(6, 10)` has a duration from `6` to `15`. - Participant 4: `(8, 4)` has a duration from `8` to `11`. The maximum number of participants overlapping at any second occurs from time `8` to `11`, with three participants overlapping.","solution":"def max_overlapping_intervals(intervals): Returns the maximum number of overlapping intervals from the given list of intervals. Each interval is represented as a tuple (start_time, duration). :param intervals: List of tuples [(start_time, duration), ...] :return: Integer representing the maximum number of overlapping intervals. events = [] for start, duration in intervals: events.append((start, 1)) # entry event events.append((start + duration, -1)) # exit event # Sort events first by time, then by type of event (entry (+1) before exit (-1)) events.sort(key=lambda x: (x[0], x[1])) max_overlap = 0 current_overlap = 0 for event in events: current_overlap += event[1] max_overlap = max(max_overlap, current_overlap) return max_overlap"},{"question":"Peter is designing a new routing protocol for a network consisting of n nodes labeled from 1 to n. The network is represented as a tree. Each node can communicate directly with its adjacent nodes. We will denote this tree as mathcal{T}. To improve the efficiency of routing messages, Peter wants to add exactly one extra edge between two nodes so that the resulting graph has exactly one cycle and the diameter of this new graph is minimized. The diameter of a graph is defined as the maximum distance (in terms of number of edges) between any two nodes. Your task is to determine the two nodes between which the extra edge should be added in order to minimize the diameter of the resulting graph. # Input: - The first line contains a single integer n (2 leq n leq 100,000), the number of nodes. - The next n-1 lines each contain two integers u_i and v_i (1 leq u_i, v_i leq n), indicating that there is an edge between nodes u_i and v_i in the tree mathcal{T}. # Output: - Output two integers a and b (1 leq a, b leq n), the endpoints of the edge to be added such that the diameter of the resulting graph is minimized. If there are multiple optimal solutions, you may output any of them. # Example: Input: ``` 4 1 2 1 3 3 4 ``` Output: ``` 2 4 ``` Explanation: - The initial tree\'s diameter is the longest path which is from node 2 to node 4: 2-1-3-4. - By adding an edge between nodes 2 and 4, the diameter of the resulting graph is minimized to 2: 2-4 or 1-2 or 3-4. # Notes: - Ensure that the edge you add does not already exist in the tree. - The solution should handle large trees efficiently within the given constraints.","solution":"from collections import deque def find_farthest_node(tree, start_node): Performs a BFS to find the farthest node from the start_node. Returns the farthest node and its distance. n = len(tree) visited = [False] * n dist = [-1] * n queue = deque([start_node]) visited[start_node] = True dist[start_node] = 0 farthest_node = start_node while queue: node = queue.popleft() for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > dist[farthest_node]: farthest_node = neighbor return farthest_node, dist[farthest_node] def find_diameter(tree): Finds the diameter of the tree using two BFS runs. Returns one endpoint of the diameter and the other endpoint of the diameter. start = 0 u, _ = find_farthest_node(tree, start) v, diameter_length = find_farthest_node(tree, u) return u, v, diameter_length def add_extra_edge_to_minimize_diameter(n, edges): Adds an extra edge to minimize the diameter of the tree. Returns the two nodes a and b to which the edge should be added. # Create the tree adjacency list tree = [[] for _ in range(n)] for u, v in edges: tree[u-1].append(v-1) tree[v-1].append(u-1) u, v, diameter_length = find_diameter(tree) # Select any node not on the path of the diameter and connect it to the diameter # In the worst case, for a balanced tree, connecting any node to the farthest node from its center minimizes the diameter. # Here we select one of the leaf nodes in this logic a, b = u, v # Adjust indices to match the problem requirements (1-indexed) return a+1, b+1"},{"question":"A web application stores user activity logs in a circular buffer array. The buffer has a fixed size and operates in a First In, First Out (FIFO) manner. When the buffer is full and a new log entry is added, the oldest entry gets overwritten. Your task is to implement a CircularBuffer class that supports the following operations: 1. `push(log)` - Adds a new log entry to the buffer. If the buffer is full, the oldest log entry is overwritten. 2. `pop()` - Removes the oldest log entry from the buffer. If the buffer is empty, return \\"Empty\\". 3. `is_full()` - Returns `True` if the buffer is full, otherwise `False`. 4. `is_empty()` - Returns `True` if the buffer is empty, otherwise `False`. 5. `size()` - Returns the number of elements currently in the buffer. The buffer should be implemented using a list and two pointers, one for the start (head) and one for the end (tail) of the buffer. The first line of input contains an integer `n` (1 ≤ n ≤ 1000), the size of the buffer. The second line contains an integer `m` (1 ≤ m ≤ 1000), the number of operations. The following `m` lines contain the description of the operations, one operation per line. Output the result of each `pop()` operation on a new line. Here is the format for the operations: - \\"push log_entry\\" where log_entry is a string with a length of at most 100 characters. - \\"pop\\" to remove the oldest log entry. - \\"is_full\\" to check if the buffer is full. - \\"is_empty\\" to check if the buffer is empty. - \\"size\\" to get the current number of elements in the buffer. # Sample Input: ``` 5 10 push log1 push log2 push log3 pop push log4 push log5 push log6 is_full pop size ``` # Sample Output: ``` log1 True log2 4 ``` In the sample, the buffer has a size of 5. After some push and pop operations, the sample shows the result of `pop`, `is_full`, and `size` calls at specific points. Your implementation should correctly manage the circular buffer and produce the expected output for each operation.","solution":"class CircularBuffer: def __init__(self, size): self.size_limit = size self.buffer = [None] * size self.head = 0 self.tail = 0 self.count = 0 def push(self, log): if self.is_full(): self.head = (self.head + 1) % self.size_limit else: self.count += 1 self.buffer[self.tail] = log self.tail = (self.tail + 1) % self.size_limit def pop(self): if self.is_empty(): return \\"Empty\\" log = self.buffer[self.head] self.buffer[self.head] = None self.head = (self.head + 1) % self.size_limit self.count -= 1 return log def is_full(self): return self.count == self.size_limit def is_empty(self): return self.count == 0 def size(self): return self.count"},{"question":"You are given a string consisting of lowercase alphabets. You need to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return a possible rearrangement of the string. Otherwise, return \\"NO\\". Input - The first line contains a single integer t (1 ≤ t ≤ 100) - the number of test cases. - For each of the next t lines, contains a single string s (1 ≤ |s| ≤ 100000) - the string to be rearranged. Output - For each test case, output the rearranged string if possible. If there is no valid rearrangement, output \\"NO\\". Examples Input: ``` 3 aab aaab abc ``` Output: ``` aba NO abc ``` Explanation: In the first example, \\"aba\\" is a valid rearrangement where no two adjacent characters are the same. In the second example, there is no possible rearrangement to avoid adjacent identical characters. In the third example, \\"abc\\" is already in a valid state.","solution":"from collections import Counter import heapq def rearrange_string(s): count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) return rearranged if len(rearranged) == len(s) else \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): s = test_cases[i] results.append(rearrange_string(s)) return results"},{"question":"Grigory and Andrew have been getting really interested in magic tricks lately. They recently discovered a magic series known as the \\"Magic Sequence\\". They want to generate this sequence and verify its correctness. A sequence of length n, S = [s_1, s_2, ldots, s_n], is called a Magic Sequence if it satisfies the following conditions: 1. All elements of the sequence are non-negative integers. 2. The sum of all elements in the sequence is equal to the length of the sequence. 3. The value of each element at any position i should be equal to the number of times i appears in the sequence. Given an integer n (1 le n le 100), help Grigory and Andrew to determine if such a Magic Sequence exists. If it does, generate one such sequence and print it. If it doesn\'t, return -1. The first line of input contains a single integer n. If it\'s impossible to generate a Magic Sequence of length n, print -1. Otherwise, print n space-separated integers representing the Magic Sequence. # Example Input 1: ``` 4 ``` Output 1: ``` 1 2 1 0 ``` Input 2: ``` 3 ``` Output 2: ``` -1 ``` # Explanation In the first example: - The sequence is [1, 2, 1, 0]. - The sum of the elements is 1 + 2 + 1 + 0 = 4, which equals the length of the sequence. - The number 0 appears exactly 1 time, the number 1 appears exactly 2 times, the number 2 appears exactly 1 time, and the number 3 appears exactly 0 times. In the second example, it\'s impossible to generate such a sequence.","solution":"def magic_sequence(n): Generates a magic sequence of length n if it exists. Returns -1 if such a sequence cannot be generated. A magic sequence S = [s_1, s_2, ..., s_n] satisfies: 1. Sum of elements in S == n 2. s[i] == number of times i appears in the sequence Parameters: n (int): Length of the sequence Returns: list: The magic sequence or -1 if it doesn\'t exist if n == 1: return [1] if n % 2 == 1: return -1 sequence = [0] * n for i in range(n // 2): sequence[i] = 2 for i in range(n // 2, n): sequence[i] = 0 return sequence"},{"question":"Given a binary tree, the task is to determine if it is height-balanced. A binary tree is height-balanced if the left and right subtrees of every node differ in height by no more than 1. For example, the following tree is height-balanced: ``` 1 / 2 3 / 4 5 ``` However, the following tree is not height-balanced: ``` 1 / 2 / 3 ``` Write a function, `is_height_balanced(tree: Optional[TreeNode]) -> bool`, that takes the root of a binary tree and returns `True` if the tree is height-balanced, and `False` otherwise. # Input - `tree`: A binary tree represented by its root node which can be of type `TreeNode` or `None`. # Output - Return `True` if the binary tree is height-balanced, `False` otherwise. # Constraints - The number of nodes in the tree is in the range [0, 10^4]. - The value of each node is an integer in the range [-10^4, 10^4]. # Example Example 1: ``` Input: 1 / 2 3 Output: True ``` Example 2: ``` Input: 1 / 2 / 3 Output: False ``` # Note - A tree with no nodes (i.e., `tree` is `None`) is considered height-balanced.","solution":"from typing import Optional class TreeNode: def __init__(self, val: int = 0, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.val = val self.left = left self.right = right def is_height_balanced(tree: Optional[TreeNode]) -> bool: def check_balance_and_height(node: Optional[TreeNode]) -> (bool, int): if not node: return True, 0 left_balanced, left_height = check_balance_and_height(node.left) right_balanced, right_height = check_balance_and_height(node.right) balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 height = max(left_height, right_height) + 1 return balanced, height balanced, _ = check_balance_and_height(tree) return balanced"},{"question":"In a certain town, there is an annual running competition where participants are required to complete a racecourse in the minimum possible time. Each participant has a certain running speed, but the speed can vary due to varying terrain difficulty along the course. You are given an integer `n` (1 ≤ n ≤ 100000) representing the number of participants and a list of `n` integers where the i-th integer denotes the constant running speed of the i-th participant. You are also given an integer `m` (1 ≤ m ≤ 100000) representing the number of segments in the course and a list of m integers where the j-th integer denotes the time difficulty factor of the j-th segment in the course. Each participant\'s total time to complete the racecourse is calculated as their running speed multiplied by the sum of the time difficulty factors of all segments. Your task is to determine which participant finishes the race in the minimum time and print the 1-based index of that participant. If multiple participants have the same minimum time, return the smallest index among them. # Input - The first line contains an integer `n`. - The second line contains `n` space-separated integers where the i-th integer represents the running speed of the i-th participant. - The third line contains an integer `m`. - The fourth line contains `m` space-separated integers where the j-th integer represents the time difficulty factor of the j-th segment. # Output - Print the 1-based index of the participant who finishes the race with the minimum time. # Example Input ``` 3 4 5 6 3 2 3 1 ``` Output ``` 1 ``` # Explanation - The total difficulty of the course is 2 + 3 + 1 = 6. - Participant 1\'s total time is 4 * 6 = 24, - Participant 2\'s total time is 5 * 6 = 30, - Participant 3\'s total time is 6 * 6 = 36. Participant 1 finishes the race in the minimum time, hence the output is `1`.","solution":"def find_fastest_participant(n, speeds, m, difficulties): Determine which participant finishes the race in the minimum time. Parameters: n (int): Number of participants. speeds (list of int): List of running speeds for each participant. m (int): Number of segments in the course. difficulties (list of int): List of time difficulty factors for each segment. Returns: int: 1-based index of the participant who finishes first. total_difficulty = sum(difficulties) min_time = float(\'inf\') fastest_index = -1 for i in range(n): total_time = speeds[i] * total_difficulty if total_time < min_time: min_time = total_time fastest_index = i + 1 return fastest_index"},{"question":"**Problem: Find the Leftmost Unique Character** Given a string `s`, find the first character in the string that does not repeat in any subsequent part of the string (if any). If there is no such unique character, return a hyphen (`-`). # Input A single string `s` (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. # Output Print the first unique character in the string. If there is no such character, print a hyphen (`-`). # Example **Input:** ``` abacabad ``` **Output:** ``` c ``` **Input:** ``` aabbcc ``` **Output:** ``` - ``` # Note In the first example, the first character \'a\' appears multiple times, as do \'b\' and \'d\'. The first character that does not repeat after its first occurrence is \'c\'. In the second example, there is no such character that appears only once, so the output is a hyphen (`-`).","solution":"def find_leftmost_unique_char(s: str) -> str: from collections import Counter # Counting the frequency of each character char_frequency = Counter(s) # Finding the leftmost unique character for char in s: if char_frequency[char] == 1: return char return \\"-\\""},{"question":"A city is organizing a marathon, and they want to place water stations along the marathon route. The marathon route can be represented as a straight line segment on the plane, and there are certain buildings along the route that can obstruct the placement of water stations. The marathon route can be defined as the line segment from point (0, 0) to (d, d), where d is a positive integer representing the distance. You need to find the maximum number of water stations that can be placed along the marathon route such that no two water stations are placed at the same location and none of them are placed at the locations of the buildings. The first line contains two integers d and b (1 le d le 1000, 0 le b le 1000) representing the distance of the marathon route and the number of buildings along the route. Each of the next b lines contains two integers x_i and y_i (0 le x_i, y_i le d) such that x_i = y_i, representing the coordinates of the buildings. It is guaranteed that no two buildings are at the same location. Print the maximum number of water stations that can be placed along the marathon route. # Example Input ``` 5 2 2 2 3 3 ``` Output ``` 4 ``` # Explanation The marathon route goes from point (0,0) to (5,5) and there are buildings at (2,2) and (3,3). The maximum number of water stations that can be placed without placing them at the buildings\' locations are 4 (e.g., at (1,1), (4,4), (0,0), and (5,5)).","solution":"def max_water_stations(d, b, buildings): # All possible points from (0,0) to (d,d) on the line y=x all_points = {(i, i) for i in range(d + 1)} # Points where buildings are located building_points = {(x, y) for x, y in buildings} # Possible water station locations are all_points excluding building_points water_stations = all_points - building_points return len(water_stations)"},{"question":"A park contains several paths, each connecting a pair of landmarks within the park. Each path has a certain distance associated with it. The park administration wants to install lights on the paths to ensure that every landmark is directly or indirectly lit by at least one light. However, due to budget constraints, they want to minimize the number of required lights. If a light is installed on a path, it lights up both endpoints of that path. Given the number of landmarks and the list of paths with their distances, your task is to determine the minimum number of lights needed to ensure that every landmark is lit. The first line contains two integers n and m — the number of landmarks and the number of paths respectively (1 le n le 1000, 0 le m le 10000). The next m lines each contain three integers u, v, and d — describing a path with distance d that connects landmarks u and v (1 le u, v le n, 1 le d le 10^9). For each test case output a single integer, the minimum number of lights needed. **Example:** Input: ``` 4 4 1 2 1 2 3 2 3 4 1 4 1 2 4 2 1 ``` Output: ``` 1 ``` Explanation: In this example, placing a light on the path from landmark 2 to 3 ensures that landmarks 1, 2, 3, and 4 are all lit, therefore only 1 light is needed. In the second example, all paths must be examined, but here only one path between any two nodes is given for simplicity. Consider fitting your solution to more complex graphs or forests with multiple trees.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_lights(n, m, edges): if n == 1: return 0 # Sort edges by distance edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) num_lights = 0 for edge in edges: u, v, d = edge u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: num_lights += 1 union(parent, rank, x, y) if num_lights == n - 1: break return num_lights"},{"question":"You are given an array of integers where each element appears exactly twice except for one element which appears exactly once. Find that single unique element. Your task is to implement the function ```python def find_unique_element(arr: List[int]) -> int: pass ``` # Input - An array of integers `arr` where 1 <= len(arr) <= 10^5 and every element appears exactly twice except for one unique element that appears exactly once. - Each element in the array is in the range of 1 to 10^9. # Output - Return the single unique element. # Example ```python find_unique_element([4, 1, 2, 1, 2]) # Returns: 4 find_unique_element([2, 2, 1]) # Returns: 1 ``` # Constraints - Your solution should have a time complexity of O(n). - You must use O(1) additional space complexity. # Note Use bitwise operations to achieve the desired complexities. Think about how XOR operation can be useful in this scenario.","solution":"from typing import List def find_unique_element(arr: List[int]) -> int: Finds the single unique element in an array where every other element appears exactly twice. Args: arr (List[int]): The input array of integers. Returns: int: The single unique element. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Alice is playing a card game with her friends. She has n cards, each with a positive integer value from 1 to k. Alice can make multiple moves to modify the deck. In each move, she can replace one card with another card of a different value (the new card\'s value must be greater than the current card\'s value). Alice\'s goal is to ensure that every integer value from 1 to k appears at least once in the deck after making some moves. If it is not possible to achieve this goal with a given deck, output -1. If it is possible, then output the minimum number of moves required. The first line of the input contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n), representing the number of cards and the range of integer values respectively. The second line contains n integers, each representing the value of a card in Alice\'s deck. Output the minimum number of moves required to achieve the goal, or -1 if it is not possible. # Example Input ``` 5 4 1 2 2 3 5 ``` Output ``` 1 ``` Input ``` 3 5 1 2 3 ``` Output ``` 2 ``` Input ``` 7 6 2 3 4 5 6 1 4 ``` Output ``` 0 ``` **Explanation:** In the first example, Alice can replace the card with value 5 with a card of value 4 to ensure that every integer from 1 to 4 appears at least once. In the second example, Alice needs to replace two cards with new values to ensure that every integer from 1 to 5 appears at least once. In the third example, all integers from 1 to 6 are already present in the deck, so no moves are needed.","solution":"def min_moves_to_complete_deck(n, k, cards): # Count the frequency of each card value card_counts = [0] * (k + 1) for card in cards: if card <= k: card_counts[card] += 1 # Calculate the number of missing values missing_values = 0 for i in range(1, k + 1): if card_counts[i] == 0: missing_values += 1 # If there are more missing values than the number of cards, it is impossible if missing_values > n: return -1 else: return missing_values"},{"question":"Write a function that accepts a list of integers and returns a list containing all the integers that are strictly greater than the average of all the elements in the original list. For this problem, you may assume that the list contains at least one integer. **Input:** - A list of integers, `lst`. **Output:** - A list of integers containing all the elements from the input list that are strictly greater than the average value of the list. # Example ```python # Example 1: input_list = [1, 2, 3, 4, 5] # The average is (1+2+3+4+5)/5 = 3 # The integers greater than 3 are [4, 5] output_list = [4, 5] # Example 2: input_list = [-5, 0, 5, 10] # The average is (-5+0+5+10)/4 = 2.5 # The integers greater than 2.5 are [5, 10] output_list = [5, 10] ``` # Constraints - You are allowed to use built-in functions for calculating the average and filtering the list. - Aim for a solution with time complexity O(n), where n is the length of the list.","solution":"def filter_greater_than_average(lst): Returns a list of integers from the input list that are strictly greater than the average of the list. Parameters: lst (list): A list of integers Returns: list: A list containing integers greater than the average of the original list if not lst: return [] avg = sum(lst) / len(lst) return [x for x in lst if x > avg]"},{"question":"In a distant land, there exists a kingdom with n cities, connected by m bidirectional roads. Each road has a positive integer weight representing the time it takes to travel between the two cities it connects. However, there is a powerful sorcerer in the kingdom who can teleport between certain pairs of cities instantly. Your task is to determine the minimum travel time required to go from the capital city (city 1) to every other city in the kingdom. The first line of the input contains two integers n and m (2 ≤ n ≤ 100000, 1 ≤ m ≤ 200000) – the number of cities and the number of roads. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) – representing a road between cities u and v with travel time w. The next line contains an integer k (0 ≤ k ≤ 10000) – the number of teleportation pairs. The following k lines each contain two integers x and y (1 ≤ x, y ≤ n, x ≠ y) – indicating that the sorcerer can teleport instantly between cities x and y. Output n-1 space-separated integers – the minimum travel time required to reach each city from the capital city. Note that if a city is unreachable from the capital city, its travel time should be represented as -1.","solution":"import heapq def dijkstra(n, roads, teleports, source=1): # Initialization graph = {i: [] for i in range(1, n + 1)} # Adding roads to graph for u, v, w in roads: graph[u].append((w, v)) graph[v].append((w, u)) # Adding teleportation pairs to graph with weight 0 for x, y in teleports: graph[x].append((0, y)) graph[y].append((0, x)) # Distance array with infinity dist = [float(\'inf\')] * (n + 1) dist[source] = 0 # Min-heap priority queue pq = [(0, source)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) # Prepare result excluding the capital city itself return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(2, n + 1)] # Main function to read input and provide output def minimum_travel_time(n, m, road_data, k, teleport_data): return dijkstra(n, road_data, teleport_data)"},{"question":"You\'re organizing a treasure hunt and have hidden n treasures, each identified by a unique integer from 1 to n. You have also prepared a list of k clues. Each clue is a triplet (a, b, x) and indicates that the treasure at position x can only be found once the hunt has advanced through clues from index a to index b (inclusive). Write a program to determine if it\'s possible to follow the clues in a way that leads to finding each specified treasure at position x consecutively, given the order of the clues. # Input - The first line contains two space-separated integers n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ 100,000) — the number of treasures and the number of clues. - The next line contains n space-separated integers t1, t2, ..., tn (1 ≤ ti ≤ n), representing the initial order of the treasures. - Each of the next k lines contains three space-separated integers a, b, x (1 ≤ a ≤ x ≤ b ≤ n) — representing a clue. # Output - Output \\"Possible\\" if it is possible to follow the clues in a way that each treasure at position x can be found consecutively. - Otherwise, output \\"Impossible\\". # Examples Input ``` 5 3 4 1 3 5 2 1 3 3 2 4 1 3 5 2 ``` Output ``` Possible ``` Explanation In the given example, the order of treasures allows for consecutive clues to be followed to find each treasure at the specified positions correctly.","solution":"def can_follow_clues(n, k, treasures, clues): Determines if it\'s possible to follow the clues and find each specified treasure consecutively. :param n: int - Number of treasures :param k: int - Number of clues :param treasures: List[int] - Initial order of the treasures :param clues: List[Tuple[int, int, int]] - Clues :return: str - \\"Possible\\" or \\"Impossible\\" position_of_treasure = {treasure: i + 1 for i, treasure in enumerate(treasures)} clues.sort(key=lambda clue: clue[2]) for a, b, x in clues: if not (a <= position_of_treasure[x] <= b): return \\"Impossible\\" return \\"Possible\\""},{"question":"Given an array of integers where each element represents the height of a pillar, identify the maximum possible rectangle that can be formed using contiguous pillars. The height of the rectangle is determined by the smallest pillar in the chosen set, and the width is the number of pillars in the set. Write a function that computes the maximum area of such a rectangle from the given array of pillar heights. # Input: - The first line contains a single integer ( n ) ((1 le n le 10^5)): the number of pillars. - The second line contains ( n ) integers ( h_1, h_2, ldots, h_n ) ((1 le h_i le 10^6)): the heights of the pillars. # Output: - Print a single integer: the maximum area of any rectangle that can be formed using contiguous pillars. # Example: Input: ``` 6 2 1 5 6 2 3 ``` Output: ``` 10 ``` # Explanation: In this example, the maximum rectangle has an area of ( 10 ) units, which is formed by pillars with heights `[5, 6]`. The height of the rectangle is determined by the smaller pillar, which has height ( 5 ), and the width is ( 2 ) (number of pillars). Thus, the area is ( 5 times 2 = 10 ).","solution":"def max_rectangle_area(heights): Returns the maximum possible rectangle area that can be formed using contiguous pillars. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area # Example usage heights = [2, 1, 5, 6, 2, 3] print(max_rectangle_area(heights)) # Output: 10"},{"question":"You are given an array of integers where each element represents the height of a bar in a histogram. Your task is to find the maximum area of a rectangle that can be formed within the confines of the histogram. Each bar has a width of 1. For example, consider the following histogram: ``` [2, 1, 5, 6, 2, 3] ``` The rectangles with the largest area are formed between the bars `[5, 6]` or `[6, 2]`, both having an area of 10. Define a function `maxHistogramArea(heights: List[int]) -> int`, that given an integer array `heights` where each element is the height of a bar in the histogram, returns the maximum rectangular area in the histogram. # Input - The input array `heights` (1 ≤ len(heights) ≤ 10^5). - Each element of `heights` is a non-negative integer (0 ≤ heights[i] ≤ 10^4). # Output - The maximum rectangular area you can obtain from the histogram. # Example Input ``` heights = [2, 1, 5, 6, 2, 3] ``` Output ``` 10 ``` Explanation The largest area rectangle is formed by combining the bars with heights `5` and `6`, so the area is `2 * 5 = 10`.","solution":"from typing import List def maxHistogramArea(heights: List[int]) -> int: Returns the maximum rectangular area in the given histogram. # Initialize stack and max_area stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'height\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # update max_area max_area = max(max_area, area) # Now pop the remaining bars from stack and calculate area with each popped bar while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Maya is creating a photo album and she needs to organize her photos. She plans to arrange the photos in a rectangular grid with rows and columns. Each cell in the grid can hold one photo, and Maya wants to ensure the photos are placed such that no two photos of the same type are in the same row or column. Given the dimensions of the grid and a list of photo types that need to be placed in it, determine if it is possible to arrange all the photos according to Maya\'s rules. The first line contains two integers r and c (1 ≤ r, c ≤ 1000) — the number of rows and columns in the grid. The second line contains an integer n (1 ≤ n ≤ min(r, c)) — the number of distinct photo types. The third line contains n integers t1, t2, ..., tn (1 ≤ t1, t2, ..., tn ≤ r*c) — the number of photos of each type. Print \\"YES\\" if it is possible to arrange all the photos according to the rules. Otherwise, print \\"NO\\". For example, if the input is: 3 3 2 4 5 The output should be \\"NO\\" because there are not enough distinct rows and columns to place all the photos without conflicts.","solution":"def can_arrange_photos(r, c, n, photo_types): Determines if it is possible to arrange the photos in the grid such that no two photos of the same type are in the same row or column. Parameters: r (int): Number of rows in the grid. c (int): Number of columns in the grid. n (int): Number of distinct photo types. photo_types (list of int): List containing the number of photos of each type. Returns: str: \'YES\' if it is possible to arrange the photos, \'NO\' otherwise. # The number of types cannot be greater than the number of rows or columns if n > r or n > c: return \\"NO\\" # The maximum number of photos any type can have is min(r, c) because we can\'t have more # than min(r, c) cells without repeating in a row or column. max_photos_per_type = min(r, c) for photos in photo_types: if photos > max_photos_per_type: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with deciphering a sequence of integers based on certain rules. Consider an integer n representing the length of the sequence. The sequence S of length n is constructed as follows: 1. The first element S[1] is always given as 1. 2. For every subsequent element S[i] (where i > 1), it is generated using the formula: S[i] = S[i-1] times (text{number of digits in } S[i-1]) Given n (1 ≤ n ≤ 100), your task is to determine the value of the n-th element of the sequence S. **Input** - The first line contains a single integer t, the number of test cases (1 ≤ t ≤ 1000). - Each of the next t lines contains a single integer n, the length of the sequence for which you need to find the n-th element. **Output** - For each test case, print the value of the n-th element of the sequence. **Example** Input: ``` 2 1 3 ``` Output: ``` 1 9 ``` **Note** For the first test case: - S[1] = 1 For the second test case: - S[1] = 1 - S[2] = S[1] times (text{number of digits in } S[1]) = 1 times 1 = 1 - S[3] = S[2] times (text{number of digits in } S[2]) = 1 times 1 = 1 Each test case should be handled independently based on the given value of n.","solution":"def find_nth_element(n): Returns the n-th element of the sequence based on the given rules. if n == 1: return 1 S = [1] for i in range(1, n): last_element = S[-1] num_digits = len(str(last_element)) next_element = last_element * num_digits S.append(next_element) return S[n-1] def solve(t, cases): results = [] for n in cases: results.append(find_nth_element(n)) return results"},{"question":"A researcher has a rectangular laboratory chamber of dimensions L (length), W (width), and H (height). The chamber is to be filled with cubic containers each having a side length of S. The containers can be stacked but must be aligned with the chamber\'s sides, meaning each container\'s sides should be parallel to the sides of the chamber. Also, the containers should not overlap or extend outside the chamber. Given the dimensions of the chamber and the side length of the cubic containers, help the researcher determine the maximum number of containers that can fit inside the chamber. The input consists of four integers L, W, H, and S, where (1 ≤ L, W, H, S ≤ 10^6). Print an integer—the maximum number of cubic containers that can fit inside the chamber.","solution":"def max_containers(L, W, H, S): Returns the maximum number of cubic containers of side S that can fit inside a chamber of dimensions L, W, and H. Parameters: L (int): The length of the chamber. W (int): The width of the chamber. H (int): The height of the chamber. S (int): The side length of the cubic containers. Returns: int: The maximum number of containers that can fit inside the chamber. if S == 0: return 0 # Compute the number of containers that fit along each dimension num_fit_length = L // S num_fit_width = W // S num_fit_height = H // S # Compute the total number of containers total_containers = num_fit_length * num_fit_width * num_fit_height return total_containers"},{"question":"Given an `n x n` matrix of integers, write a function that performs `k` rotations in a specified direction (clockwise or counterclockwise). Each rotation shifts the matrix elements outward in the specified direction while correctly handling the boundaries. Each rotation consists of moving the outermost layer one step in the specified direction, then the next outer layer, and so on. The innermost layer remains the same since it contains only one element (assuming `n` is odd). # Input: The function should take the following parameters: 1. `matrix`: A 2D list of integers representing the `n x n` matrix. 2. `k`: An integer representing the number of rotations to perform. `0 ≤ k ≤ 10^9`. 3. `direction`: A string which could either be `\\"clockwise\\"` or `\\"counterclockwise\\"` indicating the direction of rotation. # Output: The function should return a new `n x n` matrix of integers after performing the specified rotations. # Example: ```python def rotate_matrix(matrix, k, direction): # Implement your function here pass # Sample Input matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] k = 1 direction = \\"clockwise\\" # Sample Output result = rotate_matrix(matrix, k, direction) print(result) # [[13, 9, 5, 1], [14, 6, 7, 2], [15, 10, 11, 3], [16, 12, 8, 4]] # Another Sample Input matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] k = 2 direction = \\"counterclockwise\\" # Another Sample Output result = rotate_matrix(matrix, k, direction) print(result) # [[9, 6, 3], [8, 5, 2], [7, 4, 1]] ``` # Constraints: - The function should handle matrices where `n` is between 1 and 100. - The matrix will always be a square matrix. - The input values in the matrix are integers. - The value of `k` can be very large; think about optimizing the number of rotations.","solution":"def rotate_matrix(matrix, k, direction): Rotates an n x n matrix k times in the specified direction. Args: matrix (list of list of int): The input matrix. k (int): Number of rotations. direction (str): Direction of rotation (\'clockwise\' or \'counterclockwise\'). Returns: list of list of int: The rotated matrix. n = len(matrix) if n == 1 or k % 4 == 0: return matrix # No rotation needed k %= 4 # Only 4 possible unique rotations for a square matrix if direction == \'counterclockwise\': k = 4 - k # Switching to clockwise equivalent for simplicity for _ in range(k): # Perform one clockwise rotation matrix = [[matrix[n - j - 1][i] for j in range(n)] for i in range(n)] return matrix"},{"question":"Given an array of integers nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums. You must write an algorithm that runs in O(n) time and uses constant extra space. Modify the array in-place to achieve the desired result, do not use any extra array or list structures. The first line of input contains an integer n (0 ≤ n ≤ 10^4) — the number of elements in the array nums. The second line contains n space-separated integers representing the elements of the array nums. The output should be the number of unique elements in the modified array nums. The first k elements of nums should contain the final list of unique elements in the same order as they appeared originally. The remaining elements of nums do not matter. The array should be modified in place. Example: Input: 10 0 0 1 1 1 2 2 3 3 4 Output: 5 Explanation: Your function should modify the array in-place to output 0, 1, 2, 3, 4 and return 5, as there are 5 unique elements.","solution":"def remove_duplicates(nums): Removes duplicates from sorted array nums in-place and returns the number of unique elements. if not nums: return 0 unique_count = 1 # At least one unique element (the first element) for i in range(1, len(nums)): if nums[i] != nums[i-1]: nums[unique_count] = nums[i] unique_count += 1 return unique_count # Example usage: # nums=[0,0,1,1,1,2,2,3,3,4] # result = remove_duplicates(nums) # print(result) # Output: 5 # print(nums) # The first 5 elements should be [0, 1, 2, 3, 4]"},{"question":"Alice is a huge fan of strings and has recently learned about palindromes. She wants to play with palindromes by making one from a given string. Specifically, she wants to find the minimum number of characters that need to be inserted into the string to make it a palindrome. A palindrome is a string that reads the same backward as forward. Given a string s of lower case English letters (1 ≤ |s| ≤ 1000), determine the minimum number of characters Alice needs to insert to turn s into a palindrome. For example, for the string \\"race\\", Alice would need to insert 3 characters to make it \\"ecarace\\" or any other valid palindrome like \\"racecar\\". Input: - A single string s of lower case English letters. Output: - An integer representing the minimum number of insertions needed to make the string a palindrome. Examples: input: \\"abc\\" output: 2 input: \\"aebcbda\\" output: 2 Note: In the first example, inserting \'b\' and \'c\' at the beginning results in \\"cbabc\\", a palindrome. In the second example, inserting \'d\' at the end and \'a\' at the beginning forms \\"adabcbda\\", a palindrome.","solution":"def min_insertions_to_palindrome(s: str) -> int: Returns the minimum number of insertions needed to make the input string a palindrome. n = len(s) # reverse the string rev_s = s[::-1] # Create a table to store results of subproblems dp = [[0 for x in range(n+1)] for y in range(n+1)] # Fill dp table for i in range(1, n+1): for j in range(1, n+1): if s[i-1] == rev_s[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # The length of the longest palindromic subsequence lps_length = dp[n][n] return n - lps_length"},{"question":"You are given a grid of characters representing a map. Each cell in the grid is a terrain type and can be: - \'.\' representing water, - \'#\' representing land, - \'T\' representing a tree. A house can only be built on land (\'#\'), and it requires a certain amount of space that can be defined as a connected region of land cells (directly adjacent, not diagonally). Your task is to determine the largest connected region of land cells (\'#\') in the grid where a house could be built. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns, respectively. The next `n` lines each contain a string of length `m`, where each character is either \'.\', \'#\', or \'T\'. # Output Output a single integer — the size of the largest connected region of land cells where a house could be built. # Example Input ``` 5 5 .#... # ..... .#T #.# ``` Output ``` 6 ``` # Explanation In the example, the largest connected region of land (\'#\') has 6 cells.","solution":"def largest_land_region(n, m, grid): Returns the size of the largest connected region of land cells (\'#\'). def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'#\' or visited[x][y]: return 0 visited[x][y] = True size = 1 # Current cell for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size visited = [[False] * m for _ in range(n)] max_region_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\' and not visited[i][j]: region_size = dfs(i, j) max_region_size = max(max_region_size, region_size) return max_region_size"},{"question":"Write a function `minimize_expression(a: int, b: int, c: int) -> int` that takes three integers as input and returns the minimum possible value of the expression ( |x - a| + |y - b| + |z - c| ) where ( x, y, z ) are real numbers satisfying ( x le y le z ). # Constraints: - The integers ( a, b, ) and ( c ) can be any values in the range (-10^6) to (10^6). # Example: ```python print(minimize_expression(1, 5, 3)) # Output: 6 print(minimize_expression(-2, 4, 8)) # Output: 14 ``` # Explanation: In the first example, the optimal values of ( x, y, ) and ( z ) are ( 1, 4, ) and ( 5 ) respectively, leading to a minimal expression value ( |1 - 1| + |4 - 5| + |5 - 3| = 0 + 1 + 2 = 3 ).","solution":"def minimize_expression(a: int, b: int, c: int) -> int: Returns the minimum possible value of the expression |x - a| + |y - b| + |z - c| where x, y, z are real numbers satisfying x <= y <= z. # Sort a, b, c to ensure we have a <= b <= c x, y, z = sorted([a, b, c]) # The minimum value of the expression will be |x - x| + |y - y| + |z - z| # which is equivalent to |x - x| + |y - y| + |z - (x + z - y)| # which is 0 + 0 + z - x = z - x return z - x"},{"question":"You are given a grid of size ***n x m*** filled with non-negative integers. Your task is to find the minimum path sum from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Each test contains multiple test cases. The first line contains ***t*** (1 le t le 10^3) — the number of test cases. Description of the test cases follows. The first line of each test case contains two integers ***n*** and ***m*** (1 le n, m le 1000) — the dimensions of the grid. The following ***n*** lines of each test case contain ***m*** integers each (0 le grid[i][j] le 10^4) — the elements of the grid. It is guaranteed that the sum of ***n times m*** over all test cases does not exceed ***10^6***. For each test case, print the minimum path sum from the top-left corner to the bottom-right corner. **Example:** Input: 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 Output: 7 3 **Explanation:** In testcase 1, the minimum path sum is achieved by following the path 1 → 3 → 1 → 1 → 1, which gives the sum 1 + 3 + 1 + 1 + 1 = 7. In testcase 2, the minimum path sum is achieved by following the path 1 → 1 → 1, which gives the sum 1 + 1 + 1 = 3.","solution":"def min_path_sum(grid): Given a grid, the function returns the minimum path sum from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. n = len(grid) m = len(grid[0]) # Initialize a DP matrix with the same dimensions as grid dp = [[0]*m for _ in range(n)] # Base case, start point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp matrix for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the result return dp[n-1][m-1] def process_test_cases(t, test_cases): Processes multiple test cases and returns the results as a list. results = [] for i in range(t): n, m = test_cases[i][0] grid = test_cases[i][1] result = min_path_sum(grid) results.append(result) return results"},{"question":"You are given an array of integers representing the height of buildings. Each building is of width 1. You need to find the maximum area of a rectangular section that can be formed using adjacent buildings\' heights from the given array. The section may span multiple consecutive buildings. Write a function `maxRectangleArea(heights)` that takes an array of integers `heights` as input, where `heights[i]` is the height of the i-th building, and returns an integer representing the maximum rectangular area. Function Signature: ```python def maxRectangleArea(heights: List[int]) -> int: ``` # Input The input consists of a single list: - `heights`: This list contains `n` integers (`1 <= n <= 10^5`), where each integer `heights[i]` (1 <= heights[i] <= 10^5) represents the height of a building. # Output The function should return a single integer representing the maximum rectangular area that can be formed using adjacent buildings\' heights from the given array. # Example ```python assert maxRectangleArea([2, 1, 5, 6, 2, 3]) == 10 assert maxRectangleArea([2, 4]) == 4 ``` # Note - In the first example, the maximum rectangular area can be formed by considering the heights from index 2 to index 3 with height 5 and 6, giving an area of 5 * 2 = 10. - In the second example, the maximum rectangular area is given by the height 4 with width 1, thus area is 4.","solution":"from typing import List def maxRectangleArea(heights: List[int]) -> int: This function calculates the maximum area of a rectangle that can be formed using the heights of the buildings represented in the input list `heights`. stack = [] max_area = 0 index = 0 while index < len(heights): # If stack is empty or the current height is greater than or equal to the height # of the building at the index of the top of the stack, push the current index to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top index from the stack top_of_stack = stack.pop() # Calculate the area with the height of the building at the top of the stack area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update the maximum area max_area = max(max_area, area) # Now, calculate the area for buildings remaining in the stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Alice is organizing a series of workshops over several days. She needs to schedule these workshops in such a way that no two workshops overlap. Each workshop is represented by a pair of integers (s, e), where s is the start time and e is the end time. All workshops start and end within the same day, and no workshop can start and end at the same time. Your task is to determine the maximum number of non-overlapping workshops that can be scheduled. The input consists of: - An integer n (1 le n le 10^4), the number of workshops. - The next n lines each contain two integers s and e (0 le s < e le 10^9), the start and end times of each workshop. Output a single integer, the maximum number of non-overlapping workshops that can be scheduled. # Example Input ``` 5 1 3 2 5 4 6 6 7 5 8 ``` Output ``` 3 ``` # Explanation In this example, you can schedule three workshops as follows: (1, 3), (4, 6) and (6, 7). No two of these workshops overlap with each other. So the answer is 3.","solution":"def max_non_overlapping_workshops(n, workshops): Determines the maximum number of non-overlapping workshops that can be scheduled. Parameters: n (int): Number of workshops workshops (list of tuples): List of workshops represented by (start time, end time) Returns: int: Maximum number of non-overlapping workshops # Sort the workshops based on their end times workshops.sort(key=lambda x: x[1]) end_time = 0 count = 0 # Iterate through the sorted list of workshops for start, end in workshops: # If the start time of the current workshop is greater or equal to the end time of the last added workshop if start >= end_time: # Add this workshop end_time = end count += 1 return count"},{"question":"You are given a simple undirected graph with \\"n\\" vertices and \\"m\\" edges. Each vertex of the graph has a unique integer identifier from 1 to n. Your task is to determine if there is a simple path in the graph that visits each vertex exactly once. The input to the program will be two integers n and m, representing the number of vertices and edges in the graph, respectively. The next m lines each contain two integers u and v, indicating that there is an edge between vertex u and vertex v in the graph. If there exists a Hamiltonian path in the graph, print \\"YES\\". Otherwise, print \\"NO\\". Input: - The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000) — the number of vertices and edges, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between vertices u and v. Output: - Print \\"YES\\" if there exists a Hamiltonian path in the graph. Otherwise, print \\"NO\\". Example: Input: 4 4 1 2 2 3 3 4 4 1 Output: YES","solution":"def hamiltonian_path_exists(n, m, edges): from itertools import permutations # Generate adjacency matrix adj = [[0] * n for _ in range(n)] for u, v in edges: adj[u-1][v-1] = 1 adj[v-1][u-1] = 1 # Check all permutations of vertices to see if any is a hamiltonian path for perm in permutations(range(n)): valid = True for i in range(n-1): if adj[perm[i]][perm[i+1]] == 0: valid = False break if valid: return True return False def solve(n, m, edges): if hamiltonian_path_exists(n, m, edges): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"You are given a list of n integers where each integer represents the elevation of a specific point in a hike trail. You are also given a number k (1 ≤ k ≤ n). Your task is to determine the minimum height difference between the highest and lowest elevations among any contiguous segment of the trail with exactly k points. The first line of the input contains two integers n and k where n represents the number of elevation points and k is the length of the segment. (1 ≤ n ≤ 100000) The second line contains n space-separated integers representing the elevation points of the hike trail. (1 ≤ elevation[i] ≤ 100000) Output the minimum difference between the highest and lowest elevations in any contiguous segment of length k. # Example Input ``` 6 3 15 11 13 19 18 14 ``` Output ``` 5 ``` Explanation There are four contiguous segments of length 3: [15, 11, 13], [11, 13, 19], [13, 19, 18], and [19, 18, 14]. The differences between the highest and lowest elevations in these segments are 4, 8, 6, and 5 respectively. The minimum difference is 4, so the output is 4.","solution":"def min_height_difference(n, k, elevations): min_diff = float(\'inf\') for i in range(n - k + 1): segment = elevations[i:i+k] diff = max(segment) - min(segment) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a list of integers and a target integer value. Your task is to determine if there exists any continuous subarray that sums to the target value. A continuous subarray is defined as a sequence of consecutive elements from the array. Write a function that accepts the following arguments: - An integer `n` representing the number of elements in the array. - An integer `target` representing the target sum. - A list of integers `nums` of length `n`. Your function should return `\\"YES\\"` if a continuous subarray with the target sum exists; otherwise, it should return `\\"NO\\"`. # Constraints - `1 <= n <= 10^5` - `-10^9 <= nums[i] <= 10^9` - `-10^9 <= target <= 10^9` # Input - The first line contains one integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. - For each test case: - The first line contains two integers `n` and `target`. - The second line contains `n` integers representing the elements of the array. # Output For each test case, print `\\"YES\\"` if there exists any continuous subarray that sums to the target value, otherwise print `\\"NO\\"`. # Example ``` Input: 3 5 15 1 2 3 4 5 5 9 1 2 3 4 5 5 100 1 2 3 4 5 Output: YES YES NO ``` # Note In the first test case, the subarray [1, 2, 3, 4, 5] sums to 15. In the second test case, the subarray [2, 3, 4] sums to 9. In the third test case, no subarray sums to 100.","solution":"def has_subarray_with_sum(n, target, nums): Determines if there exists a continuous subarray that sums to the target value. Args: n : int : Number of elements in the array target : int : Target sum value nums : list of int : List of integers Returns: str : \\"YES\\" if exists, otherwise \\"NO\\" cumulative_sum = 0 sum_map = {0: -1} # Key: cumulative sum, Value: earliest index for i in range(n): cumulative_sum += nums[i] if cumulative_sum - target in sum_map: return \\"YES\\" if cumulative_sum not in sum_map: sum_map[cumulative_sum] = i return \\"NO\\" def process_subarray_sums(test_cases): results = [] for n, target, nums in test_cases: results.append(has_subarray_with_sum(n, target, nums)) return results"},{"question":"You are given an array of n integers ai. Your goal is to create a balanced array by ensuring the sum of the first half is equal to the sum of the second half. To achieve this, you are allowed to increment or decrement any element by 1 any number of times, but each operation costs 1 unit. The array will always have an even number of elements, i.e., n will be even. The first line of the input contains a single integer n (2 ≤ n ≤ 1,000,000) — the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 10^9) — elements of the array. Print a single number — the minimum cost of changes needed to balance the array. # Example Input: 6 1 2 3 4 5 6 Output: 3 Explanation: - The sum of the first half is 1 + 2 + 3 = 6. - The sum of the second half is 4 + 5 + 6 = 15. - To balance the array, you can modify elements in the first half to match the sum of the elements in the second half. For instance, increment 1 three times to get 4, making the first half [4, 2, 3] with a sum of 9 and decrement elements of the second half accordingly or modify further. - The minimum cost to balance the array is 3 units.","solution":"def min_cost_to_balance_array(n, a): Returns the minimum cost to balance the array by making the sum of the first half equal to the second half through increments or decrements of elements with each operation costing 1 unit. half = n // 2 first_half = a[:half] second_half = a[half:] sum_first_half = sum(first_half) sum_second_half = sum(second_half) difference = abs(sum_second_half - sum_first_half) return difference"},{"question":"Given an array of n integers and an integer k, Implement a function to find the k-th smallest element in the array, but with the following conditions: 1. If the k-th smallest element appears more than once, consider only the original position of the k-th smallest element in the array. 2. You can only use extra space for a constant number of variables (in-place solution). Function Signature: `int findKthSmallest(int[] arr, int k)` # Input - The first line of input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the number of elements in the array. - The second line contains n integers (1 ≤ arr[i] ≤ 10^9), the elements of the array. # Output - Output a single integer, the k-th smallest element in the array according to the defined conditions. # Example Input ``` 5 3 7 10 4 3 20 ``` Output ``` 7 ``` Explanation The elements in sorted order are 3, 4, 7, 10, 20. The 3rd smallest element is 7.","solution":"def findKthSmallest(arr, k): Finds the k-th smallest element in the array considering the original positions for duplicates. def partition(left, right): pivot = arr[right] p_index = left for i in range(left, right): if arr[i] <= pivot: arr[i], arr[p_index] = arr[p_index], arr[i] p_index += 1 arr[p_index], arr[right] = arr[right], arr[p_index] return p_index def quick_select(left, right, k): if left == right: return arr[left] pivot_index = partition(left, right) if k == pivot_index: return arr[k] elif k < pivot_index: return quick_select(left, pivot_index - 1, k) else: return quick_select(pivot_index + 1, right, k) return quick_select(0, len(arr) - 1, k - 1)"},{"question":"You are given an integer array a consisting of n integers. An operation can be defined as follows: - Select any two indices i and j (1 leq i < j leq n) and swap a[i] with a[j]. However, for each performed operation, the cost incurred is defined by the sum of the elements at indices i and j before they are swapped, i.e., a[i] + a[j]. Your task is to find the minimum cost required to sort the array in non-decreasing order using the allowed operation. The first line of the input contains a single integer n (1 leq n leq 10^5), the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. Output a single integer, the minimum cost required to sort the array in non-decreasing order. # Example **Input:** ``` 4 4 3 2 1 ``` **Output:** ``` 10 ``` **Explanation:** The array can be sorted as follows: 1. Swap 4 and 1. Cost: 4 + 1 = 5. 2. Swap 3 and 2. Cost: 3 + 2 = 5. Total cost: 5 + 5 = 10.","solution":"def min_cost_to_sort(n, a): sorted_a = sorted(a) cost = 0 for i in range(n): cost += a[i] + sorted_a[i] return cost"},{"question":"In a warehouse, items are stored in aisles and each aisle has several compartments. The warehouse manager wants to know the minimum amount of time required to collect all items from specified compartments in a single aisle. Here\'s how you can imagine the scenario: Each aisle has a linear arrangement of compartments numbered from left to right starting from 1. The manager can start collecting items from any compartment in the aisle and can only move left or right to neighbouring compartments. Moving from one compartment to an adjacent one takes exactly 1 unit of time. You are provided with the following information: - The total number of compartments in the aisle, denoted as c. - A list of compartments where items need to be collected. Each compartment number in this list is unique and in the range from 1 to c. Your goal is to calculate the minimum amount of time required to collect all items from the specified compartments, starting from any compartment and moving only left or right. # Input - The first line contains two integers c and n (1 le c le 1000, 1 le n le c), where c is the total number of compartments and n is the number of compartments containing items to be collected. - The second line contains n distinct integers representing the compartments that contain items to be collected, denoted as p_1, p_2, ldots, p_n (1 le p_i le c). # Output - Print one integer — the minimum amount of time required to collect all the items from the specified compartments. # Example Input ``` 10 3 3 7 9 ``` Output ``` 6 ``` # Explanation In the example above, you can start at compartment 3, move right to 7 taking 4 units of time, and then move from 7 to 9 taking another 2 units of time. The total time is 6 units. This is the minimal time required to collect all items. Implement a program that calculates this minimum amount of time.","solution":"def minimum_collection_time(c, n, compartments): Calculate the minimum time to collect all items in specified compartments. Arguments: c -- total number of compartments n -- number of specified compartments compartments -- list of compartments with items Returns: Minimum time required to collect all items. if n == 0: return 0 # Sorting the list of compartments with items compartments.sort() # Calculate the distance from the first to the last item compartment minimum_time = compartments[-1] - compartments[0] return minimum_time"},{"question":"A manufacturing company has designed a new production system that involves machines arranged in a line. Each machine operates independently and has a specific processing capacity for items per day. The processing capacity of each machine is represented as an integer in an array. The company wants to ensure that no machine gets overloaded for efficient production. You are given: - An integer array `capacity` of size `n`, where `capacity[i]` is the maximum number of items that the `i-th` machine can process per day. - An integer array `items` of size `m`, where `items[i]` is the number of items scheduled for processing on the `i-th` day. Write a function that determines the overload status of the machines for each day. An overload event occurs when the number of items scheduled for a day exceeds the processing capacity of any machine. The function should return an array of size `m`, where each element is `1` if there is an overload event on that day, and `0` otherwise. # Input: - An integer array `capacity` of size `n` (1 leq n leq 10^5), where 1 leq capacity[i] leq 10^6. - An integer array `items` of size `m` (1 leq m leq 10^5), where 1 leq items[i] leq 10^6. # Output: - An integer array of size `m`, where each element is `1` if there is an overload on that day, and `0` otherwise. # Example: ```python def check_overloads(capacity, items): n = len(capacity) m = len(items) overload_status = [] for day in range(m): overload = 0 for c in capacity: if items[day] > c: overload = 1 break overload_status.append(overload) return overload_status # Example Test Case 1 capacity = [10, 20, 30] items = [5, 15, 25, 35] print(check_overloads(capacity, items)) # Output: [0, 0, 0, 1] # Example Test Case 2 capacity = [50, 60, 70] items = [40, 60, 80] print(check_overloads(capacity, items)) # Output: [0, 0, 1] ```","solution":"def check_overloads(capacity, items): Determines the overload status of the machines for each day. An overload event occurs when the number of items scheduled for a day exceeds the processing capacity of any machine. Args: capacity (list of int): An integer array of size n, where capacity[i] is the maximum number of items that the i-th machine can process per day. items (list of int): An integer array of size m, where items[i] is the number of items scheduled for processing on the i-th day. Returns: list of int: An array of size m, where each element is 1 if there is an overload on that day, and 0 otherwise. max_capacity = max(capacity) overload_status = [1 if item > max_capacity else 0 for item in items] return overload_status"},{"question":"You are given an array of integers a of size n and an integer q. There are q queries of the following form: For each query, you will be given an integer x, and you need to find out how many integers in the array a are less than or equal to x. Write a function that takes in the array a, its size n, another integer q, and a list of queries. For each query, return the number of integers in the array a that are less than or equal to the given integer x. # Input - An integer n (1 le n le 10^5) — the size of the array. - An array of integers a (1 le a_i le 10^9) — the array. - An integer q (1 le q le 10^5) — the number of queries. - q integers x_i (1 le x_i le 10^9) — the queries. # Output Return a list of q integers; each integer is the answer to the respective query. # Example Input ``` 5 5 1 2 8 3 3 4 10 2 ``` Output ``` 3 5 2 ``` # Explanation For the first query with x = 4, the integers in the array that are less than or equal to 4 are [1, 2, 3], so the answer is 3. For the second query with x = 10, all integers in the array are less than or equal to 10, so the answer is 5. For the third query with x = 2, the integers in the array that are less than or equal to 2 are [1, 2], so the answer is 2.","solution":"from bisect import bisect_right def count_less_or_equal(n, a, q, queries): For each query, finds how many integers in the array a are less than or equal to the given integer x. :param n: int - the size of the array. :param a: List[int] - the array of integers. :param q: int - the number of queries. :param queries: List[int] - list of queries. :return: List[int] - list of results for each query. # Sort the array a to make use of binary search. a.sort() # This will store the results for each query. results = [] # Process each query. for x in queries: # Use bisect_right to find the first index where x would go if it were inserted in a. count = bisect_right(a, x) results.append(count) return results"},{"question":"You are given a string S composed of lowercase and uppercase alphabets. Your task is to toggle the case of each character in the string. Specifically, convert all lowercase letters to uppercase and all uppercase letters to lowercase. The input consists of a single line containing the string S (1 ≤ |S| ≤ 1000). Output the transformed string after toggling the case of each character. Examples: Input: HelloWorld Output: hELLOwORLD Input: cOdInG Output: CoDiNg","solution":"def toggle_case(s): Toggles the case of each character in the string s. return s.swapcase()"},{"question":"Linked List Cycle Detection You are given a linked list. Write a function to determine if the linked list contains a cycle. A linked list cycle occurs when a node’s next pointer points to a previous node in the list, causing an infinite loop. Implement the function `hasCycle` that takes the head of a singly linked list as input and returns `True` if there is a cycle in the linked list. Return `False` otherwise. The structure of ListNode is defined as: ```python class ListNode: def __init__(self, x): self.val = x self.next = None ``` # Example: ```python # Example 1: # Input: head = [3,2,0,-4], pos = 1 (tail connects to the second node) # Output: True # Example 2: # Input: head = [1,2], pos = 0 (tail connects to the first node) # Output: True # Example 3: # Input: head = [1], pos = -1 (no cycle) # Output: False ``` # Constraints: - The number of nodes in the list is in the range [0, 10^4]. - -10^5 <= Node.val <= 10^5 - `pos` is the index of the node (0-indexed) to which the tail is connected. `pos` is -1 if there is no cycle. # Solution Explanation: Use Floyd’s Tortoise and Hare algorithm which uses two pointers that move at different speeds to detect if there’s a cycle in the list. The fast pointer moves two steps at a time, while the slow pointer moves one step at a time. If a cycle exists, the fast pointer will eventually meet the slow pointer, indicating a cycle.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head: ListNode) -> bool: Returns True if there is a cycle in the linked list. Returns False otherwise. if not head or not head.next: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"You are given an array of positive integers representing the costs of painting houses arranged in a row. Each house must be painted one of three colors: red, green, or blue. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color. Write a function that takes a 2D array where each element is a triplet representing the painting costs for a house for each of the three colors and returns the minimum cost to paint all the houses. For example, if you are given the following array: ``` [ [17, 2, 17], [16, 16, 5], [14, 3, 19] ] ``` The cost of painting the first house with red is 17, with green is 2, and with blue is 17. Similarly, the cost of painting the second house with red is 16, with green is 16, and with blue is 5, and so on. Your function should determine the minimum cost to paint all the houses while ensuring that no two adjacent houses are painted with the same color. In this example, you would return 10 because the optimal solution is to paint the first house with green, the second house with blue, and the third house with green for a total cost of 2 + 5 + 3 = 10. **Function Signature:** ```python def min_painting_cost(costs: List[List[int]]) -> int: pass ``` **Input:** - `costs`: A list of lists, where each sublist contains three integers representing the cost of painting a house with red, green, or blue (1 ≤ len(costs) ≤ 100, 1 ≤ costs[i][j] ≤ 1000). **Output:** - Return an integer representing the minimum cost to paint all the houses with the given constraint. **Example:** ```python assert min_painting_cost([ [17, 2, 17], [16, 16, 5], [14, 3, 19] ]) == 10 ``` **Note:** - Ensure your solution is efficient and can handle the maximum input size. - Consider dynamic programming or other optimization techniques to achieve this.","solution":"def min_painting_cost(costs): Returns the minimum cost to paint all houses such that no two adjacent houses have the same color. Each costs[i][j] represents the cost of painting the ith house with color j. The colors are represented by 0 (red), 1 (green), and 2 (blue). if not costs: return 0 n = len(costs) # Initialize the first house\'s costs previous_cost = costs[0].copy() for i in range(1, n): current_cost = [0] * 3 current_cost[0] = costs[i][0] + min(previous_cost[1], previous_cost[2]) current_cost[1] = costs[i][1] + min(previous_cost[0], previous_cost[2]) current_cost[2] = costs[i][2] + min(previous_cost[0], previous_cost[1]) previous_cost = current_cost return min(previous_cost)"},{"question":"Brain has progressed significantly in his photography skills, and now he wants to back up his photo collection by using cloud storage. The cloud storage system he uses offers multiple storage plans and Brain wants to opt for the most cost-efficient way to store his photos. Each photo can be of a different size, and the storage plans offer bundles of a certain capacity. Brain wants to store each photo on a single storage plan without splitting the photo between plans. He needs to decide the minimum number of storage plans needed to store all his photos. You are given two lines of input: 1. The first line contains two integers: the number of photos n (1 ≤ n ≤ 100) and the capacity of the storage plan m (1 ≤ m ≤ 1000). 2. The second line contains n integers: the sizes of the photos (1 ≤ photo_size ≤ 1000). Output the minimum number of storage plans needed. **Example:** Input: ``` 3 100 80 120 150 ``` Output: ``` 3 ``` Explanation: 1. The first storage plan can hold the first photo of size 80. 2. The second storage plan is required because the second photo of size 120 exceeds the storage plan capacity of 100. 3. Similarly, the third photo of size 150 will also require a separate storage plan. Here, each photo needs to be placed in a separate storage plan, resulting in a total of 3 storage plans.","solution":"def min_storage_plans(n, m, photos): Given the number of photos n, the capacity of the storage plan m, and a list of photo sizes, returns the minimum number of storage plans needed to store all photos. plans_needed = 0 for photo_size in photos: if photo_size <= m: plans_needed += 1 else: plans_needed += 1 # Each photo exceeding the plan\'s capacity needs its own storage plan. return plans_needed"},{"question":"Sherlock Holmes is investigating a series of encrypted messages. Each message is represented as a binary string (a string that contains only \'0\'s and \'1\'s). Holmes suspects that the encryption involves flipping bits in the binary string. He defines a flip operation as choosing any substring of the binary string and flipping all the bits in it (changing \'0\' to \'1\' and \'1\' to \'0\'). Holmes knows that by applying a series of flip operations, he can transform the original binary string into a target binary string. However, he wants to achieve this transformation using the minimum number of flip operations. You are given two binary strings, `original` and `target`, each consisting of \'0\'s and \'1\'s and of the same length. Your task is to determine the minimum number of flip operations required to transform the `original` binary string into the `target` binary string. # Input - The first line contains the binary string `original`. - The second line contains the binary string `target`. Both strings are non-empty and have a length in the range from 1 to 2000, inclusive. # Output - Print the minimum number of flip operations required. # Sample Input ``` 01001 10011 ``` Output ``` 2 ``` # Explanation In the first operation, you can flip the substring from the 2nd to the 5th character in the `original` string to make \\"01001\\" become \\"10010\\". In the second operation, you only need to flip the last character to make \\"10011\\". In another sequence of operations: 1. Flip the substring from the 1st to the 1st character (\\"0\\" → \\"1\\"). 2. Flip the substring from the 2nd to the last character (\\"10001\\" → \\"10011\\").","solution":"def min_flip_operations(original, target): Calculate the minimum number of flip operations required to transform the original binary string into the target binary string. n = len(original) count = 0 inside_flip = False for i in range(n): if original[i] != target[i]: if not inside_flip: count += 1 inside_flip = True else: if inside_flip: inside_flip = False return count"},{"question":"The government of Bracknell is planning to launch a series of advertisements on various news websites. To maximize the reach of their message, they want to ensure that a set of advertisements are displayed on a selection of websites as many times as possible over a span of days without violating the guidelines given by each website. The campaign manager has been given a list of websites along with their viewing capacity for each day. The viewing capacity of a website is the maximum number of unique advertisements it can display on any given day. Additionally, each advertisement can only be listed once per day on any website to avoid spam. Formally, let\'s number the websites from 1 to n. Each website i has a viewing capacity c_i on each of the d days. The objective is to determine the maximum number of unique advertisements that can be shown on each day across all websites, maintaining the rule that an advertisement cannot be shown more than once per day on any single website. Given n and d and the viewing capacities for each website on each day, find the maximum total number of different advertisements that can be shown across all websites for each day. The first line contains two integers n and d (1 leq n, d leq 1,000) — the number of websites and the number of days. The next n lines each contain d integers. The j-th integer in the i-th line indicates the viewing capacity c_{i,j} of website i on day j (1 le c_{i,j} le 1,000). Output should consist of d integers — the maximum number of unique advertisements that can be displayed across all websites on each day. # Example Input 6 3 1 2 4 2 1 1 3 3 3 4 4 2 2 3 1 3 1 2 Output 15 14 13 Explanation: - For the first day, the sums of the viewing capacities of all websites are: 1 + 2 + 3 + 4 + 2 + 3 = 15 - For the second day, the sums are: 2 + 1 + 3 + 4 + 3 + 1 = 14 - For the third day, the sums are: 4 + 1 + 3 + 2 + 1 + 2 = 13","solution":"def max_unique_ads_each_day(n, d, capacities): Calculate the maximum number of unique advertisements that can be shown across all websites for each day. Args: n: Number of websites. d: Number of days. capacities: A list of lists, where each inner list contains the viewing capacities of a website over d days. Returns: A list of integers representing the maximum number of unique advertisements that can be shown on each day. max_ads_per_day = [0] * d for day in range(d): daily_total = 0 for website in range(n): daily_total += capacities[website][day] max_ads_per_day[day] = daily_total return max_ads_per_day"},{"question":"You are given a list of integers representing the heights of several buildings arranged in a line. Your task is to determine the total area covered by rectangles formed by the buildings, assuming each building has a width of 1 unit. More formally, you are given an array of integers, where each element represents the height of a building. The width of each building is considered to be 1 unit. You need to find the largest rectangular area possible in a histogram created by these buildings. # Input: - The first line contains an integer n (1 leq n leq 10^5), the number of buildings. - The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), where h_i represents the height of the i^{th} building. # Output: - Print a single integer representing the largest rectangular area possible. # Example: Input: ``` 6 2 1 5 6 2 3 ``` Output: ``` 10 ``` Explanation: The largest possible rectangle has an area of 10, corresponding to the buildings with heights [5, 6], spanning width 2.","solution":"def largest_rectangle_area(heights): Function to calculate the largest rectangular area in a histogram. Parameters: heights (list): List of integers representing the heights of buildings. Returns: int: The largest rectangular area possible. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"# Automated Garbage Collection Optimization The city council has decided to implement a new automated system for managing garbage collection routes. Each day, smart garbage trucks will follow a specific route that maximizes efficiency, such as minimizing the total distance traveled while ensuring all garbage bins along the route are emptied. To do this, they need your help to implement the route planning algorithm. The city consists of multiple garbage bins located at different coordinates. Given the location of each garbage bin, you need to determine the optimal route for the garbage truck to empty all bins and return back to the starting point, which can be any of the bin locations. The route should ensure that the total distance traveled is minimized (think of it like the Traveling Salesman Problem). # Input The input consists of: - An integer `n` (2 ≤ n ≤ 20) – the number of garbage bins. - A list of tuples of integers `(x, y)` – the coordinates of each garbage bin, where `-1000 ≤ x, y ≤ 1000`. # Output The output should be a single floating-point number representing the minimum distance the truck must travel to empty all garbage bins and return to the starting point. # Example Input ``` 4 0 0 2 0 2 2 0 2 ``` Output ``` 8.0000 ``` # Explanation In this example, one of the optimal routes is to start at (0, 0), go to (2, 0), then (2, 2), then (0, 2), and finally return to (0, 0). The total distance is `2 + 2 + 2 + 2 = 8.0000`. # Note - You may assume the truck travels in a straight line between garbage bins. - The output should be precise up to 4 decimal places. - Brute force or dynamic programming solutions are acceptable due to the small constraint on `n`. # Additional Information - Use the Euclidean distance formula to calculate the distance between two points: `distance = sqrt((x2 - x1)^2 + (y2 - y1)^2)`. - To ensure optimal performance for larger `n`, consider implementing the Held-Karp algorithm or other dynamic programming methods suitable for the Traveling Salesman Problem.","solution":"import itertools import math def euclidean_distance(point1, point2): return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def optimal_garbage_collection(n, coordinates): all_permutations = itertools.permutations(coordinates) min_distance = float(\'inf\') for perm in all_permutations: current_distance = 0 for i in range(n): current_distance += euclidean_distance(perm[i], perm[(i + 1) % n]) if current_distance < min_distance: min_distance = current_distance return round(min_distance, 4)"},{"question":"You are given a string composed of lowercase alphabetical characters. Your task is to find the length of the longest substring without repeating characters. You have to answer t independent test cases. The first line of input contains one integer t (1 le t le 100) — the number of test cases. The next t lines describe the test cases. Each test case is given on a separate line as a single string s (1 le |s| le 10^4). For each test case, print a single integer representing the length of the longest substring without repeating characters. # Example Input ``` 3 abcabcbb bbbbb pwwkew ``` Output ``` 3 1 3 ``` # Explanation In the first test case, \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which has length 3. In the second test case, \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", which has length 1. In the third test case, \\"pwwkew\\", the longest substring without repeating characters is \\"wke\\", which has length 3. Note that \\"pwke\\" is also a potential answer, but the length is still the same.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_set = set() left = 0 longest = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) longest = max(longest, right - left + 1) return longest def solve(test_cases: list) -> list: Given a list of test case strings, returns a list of integers representing the lengths of the longest substring without repeating characters for each test string. results = [] for s in test_cases: results.append(length_of_longest_substring(s)) return results"},{"question":"You are given an input string consisting of 8 characters. The first two characters are alphabetic letters followed by six digits. The input is guaranteed to be in this format. Write a function that returns the sum of the numeric values of the six digits. Input: A string of 8 characters where the first two characters are alphabetic letters and the last six characters are digits. Output: A single integer which is the sum of the six digits. Example: Input: ABC123456 Output: 21 Input: XY987654 Output: 39","solution":"def sum_of_digits(s): Given a string of 8 characters where the first two characters are alphabetic and the last six characters are digits, return the sum of the six digits. if len(s) != 8 or not s[:2].isalpha() or not s[2:].isdigit(): raise ValueError(\\"Input must be in the format of two letters followed by six digits\\") digits = s[2:] return sum(int(digit) for digit in digits)"},{"question":"Write a function `max_batches(orders, resources)` that determines the maximum number of batches of dishes that can be prepared based on given orders and available resources. You are given a list of recipes for each dish and a total quantity of each resource. Each recipe specifies how much of each resource is needed to make one batch of the dish. Your task is to calculate the maximum number of batches of dishes that can be prepared with the given resources. **Function Signature** ```python def max_batches(orders: List[Dict[str, int]], resources: Dict[str, int]) -> int: ``` **Parameters** - `orders`: A list of dictionaries. Each dictionary represents a recipe for a dish with keys as resource names and values as the quantity of the resource required to make one batch of that dish. - `resources`: A dictionary where the keys are resource names, and the values are the total quantity of each resource available. **Output** - Return an integer representing the maximum number of batches that can be made. **Example** ```python orders = [ {\\"flour\\": 1, \\"sugar\\": 2, \\"eggs\\": 3}, {\\"flour\\": 3, \\"sugar\\": 4, \\"eggs\\": 1} ] resources = {\\"flour\\": 10, \\"sugar\\": 10, \\"eggs\\": 10} assert max_batches(orders, resources) == 2 ``` In this example: - For the first dish: You require 1 unit of flour, 2 units of sugar, and 3 units of eggs per batch. - For the second dish: You need 3 units of flour, 4 units of sugar, and 1 unit of eggs per batch. Given the resources, you can make: - 2 batches of the first dish, consuming 2 units of flour, 4 units of sugar, and 6 units of eggs. - 2 batches of the second dish, consuming 6 units of flour, 8 units of sugar, and 2 units of eggs. - Total resources used: 8 units of flour, 12 units of sugar, 8 units of eggs. Thus, the maximum number of batches that can be made is 2.","solution":"from typing import List, Dict def max_batches(orders: List[Dict[str, int]], resources: Dict[str, int]) -> int: Determines the maximum number of batches of dishes that can be prepared based on given orders and available resources. if not orders or not resources: return 0 max_batch_count = float(\'inf\') for order in orders: possible_batches = float(\'inf\') for ingredient, required_qty in order.items(): if ingredient not in resources: return 0 # If an ingredient is missing from resources, no batches can be made possible_batches = min(possible_batches, resources[ingredient] // required_qty) max_batch_count = min(max_batch_count, possible_batches) return max_batch_count"},{"question":"Write a function that takes a single string s as input, consisting only of lowercase alphabets (1 <= length of s <= 100). The function should calculate the frequency of each character in the string and print the character(s) with the highest frequency, along with their count. If there are multiple characters with the same highest frequency, print one of them. Output the character and its count separated by a single space. The output should be a single line. Example: ``` Input: \\"aabbbccdddeee\\" Output: \\"b 3\\" ```","solution":"def highest_frequency_char(s): Returns the character with the highest frequency and its count. If there are multiple characters with the same highest frequency, returns one of them. from collections import Counter # Calculate the frequency of each character frequency = Counter(s) # Find the character(s) with the highest frequency max_freq = max(frequency.values()) # Find one of the characters with the highest frequency for char, count in frequency.items(): if count == max_freq: return f\\"{char} {count}\\""},{"question":"You are given a binary matrix of dimension ( n times m ) containing only 0\'s and 1\'s. The goal is to mark some cells in the matrix as special. A cell is considered special if it contains a 1 and every neighboring cell (up, down, left, and right) also contains a 1. Write a program that finds all special cells in the given matrix. # Input - The first line contains two integers ( n ) and ( m ) (( 1 leq n, m leq 50 )), the dimensions of the matrix. - Each of the next ( n ) lines contains ( m ) integers ( a_{ij} ) (( 0 leq a_{ij} leq 1 )) representing the matrix. # Output - The first line should contain an integer ( k ) — the number of special cells found. - Each of the next ( k ) lines should contain two integers ( r_i ) and ( c_i ) (( 1 leq r_i leq n ), ( 1 leq c_i leq m )) — the coordinates of a special cell. # Example Input ``` 3 3 1 1 1 1 1 1 1 1 1 ``` Output ``` 1 2 2 ``` Input ``` 4 4 0 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 ``` Output ``` 1 2 2 ``` # Explanation For the first example, the only special cell is at the center of the (3 times 3) grid (2,2). For the second example, the only special cell is at position (2,2) as all of its neighboring cells are 1\'s.","solution":"def find_special_cells(matrix): Finds and returns the coordinates of special cells in a given binary matrix. A cell is considered special if it contains a 1 and all its neighboring cells (up, down, left, right) also contain 1. Args: matrix (list of list of int): The binary matrix. Returns: int: Number of special cells. list of tuples: List of coordinates of special cells. n = len(matrix) m = len(matrix[0]) if matrix else 0 special_cells = [] for i in range(1, n-1): for j in range(1, m-1): if (matrix[i][j] == 1 and matrix[i-1][j] == 1 and matrix[i+1][j] == 1 and matrix[i][j-1] == 1 and matrix[i][j+1] == 1): special_cells.append((i + 1, j + 1)) # 1-based indexing return len(special_cells), special_cells"},{"question":"In a faraway land, the kingdom is divided into several provinces. The king decided to organize an annual tournament in which warriors from different provinces compete. Each province can send one warrior, who has fighting power determined by a unique integer value. The tournament is organized in such a way that pairs of warriors battle for dominance in several rounds, with the winner determined by the higher fighting power. The tournament\'s rounds are conducted as follows: in each round, the warrior with the maximum fighting power in the remaining fighters automatically proceeds to the next round without fighting. The remaining warriors pair up and battle, the winners advancing to the next round. This process repeats until only one warrior remains undefeated. Given the number of provinces and the fighting power of the warriors from each province, determine the fighting power of the warrior who will win the tournament. The input consists of: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of provinces. - The second line contains n distinct space-separated integers, representing the fighting power of the warriors from each province. Output a single integer, the fighting power of the warrior who wins the tournament. # Example 1 Input: ``` 5 3 1 4 1 5 ``` Output: ``` 5 ``` # Example 2 Input: ``` 3 10 20 30 ``` Output: ``` 30 ``` # Explanation: - In Example 1, the warriors\' fighting powers are [3, 1, 4, 1, 5]. The warrior with power 5 has the maximum fighting power and will automatically win. - In Example 2, the warriors\' fighting powers are [10, 20, 30]. The warrior with power 30 has the maximum fighting power and will automatically win.","solution":"def find_winner_fighting_power(n, fighting_powers): Determines the fighting power of the warrior who will win the tournament. :param n: int - The number of provinces (warriors). :param fighting_powers: list of int - List of fighting powers of each warrior. :return: int - The fighting power of the winning warrior. return max(fighting_powers)"},{"question":"Limak\'s little brother, Mimik, loves puzzles and today he is fascinated by the palindromic strings. He wants to alter an arbitrary string such that it becomes a palindrome. A string is considered a palindrome if it reads the same forward and backward. Mimik\'s initial string, consisting of lowercase English characters, can be of any length up to 10^5. He can perform operations where he changes a single character at any position in the string to any other lowercase English character. He wants to know the minimum number of operations required to transform the initial string into a palindrome. Help Mimik by writing a program that, given the initial string, calculates and prints the minimum number of operations needed to make the string a palindrome. Input: - The first line contains a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output: - Print a single integer representing the minimum number of operations required to make the given string a palindrome. Example: Input: abcba Output: 0 Input: abccba Output: 0 Input: abcdef Output: 3 Explanation of the example: 1. In the first example, \\"abcba\\" is already a palindrome, so 0 operations are needed. 2. In the second example, \\"abccba\\" is also a palindrome, so 0 operations are needed. 3. In the third example, \\"abcdef\\" requires changing \'a\' to \'f\', \'b\' to \'e\', and \'c\' to \'d\' in order to become \\"feddef\\", hence 3 operations are needed.","solution":"def min_operations_to_palindrome(s): Given a string s, compute the minimum number of operations required to make it a palindrome. An operation consists of changing a single character at any position in the string to any other lowercase English character. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The minimum number of operations required to make the string a palindrome. n = len(s) operations = 0 # Compare characters from both ends towards the center for i in range(n // 2): if s[i] != s[n - 1 - i]: operations += 1 return operations"},{"question":"You are given a grid of size n times m with each cell containing a positive integer. You need to perform exactly one move from each cell to another cell such that the value in the starting cell is greater than the value in the destination cell. The move from cell (x, y) can be to any cell in the grid that shares an edge with (x, y) except itself. Your task is to find, for each cell, the cell that should be moved into. If there are multiple possible moves for a cell, choose the destination cell with the smallest row number, and if there is a tie, choose the one with the smallest column number. The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. The following n lines contain m integers each — the values in the grid. For each cell, print the row and column indices of the target cell after the move. Use 1-based indexing for the grid. # Example **Input** ``` 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` **Output** ``` 1 1, 1 2, 1 3, 1 3 2 1, 2 2, 2 3, 2 4 3 1, 3 2, 3 3, 3 4 4 1, 4 2, 4 3, 4 4 ``` **Explanation** - For cell (1,1), the value is 1. There are no cells with values less than 1 around it, so it stays in place. - For cell (1,2), the value is 2. The only adjacent cell with a smaller value is (1,1). - For cell (1,3), the value is 3. The adjacent cells with smaller values are (1,2) and (1,1). We choose (1,2) since it has the smallest row. - For cell (1,4), the value is 4. The adjacent cells with smaller values are (1,3), (1,2) and (1,1). We choose (1,3) since it has the smallest row. And so on for the entire grid.","solution":"def find_destination_cells(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] result = [] for i in range(n): row_result = [] for j in range(m): min_value = grid[i][j] min_pos = (i, j) for dx, dy in directions: ni, nj = i + dx, j + dy if is_valid(ni, nj) and grid[ni][nj] < min_value: min_value = grid[ni][nj] min_pos = (ni, nj) row_result.append((min_pos[0] + 1, min_pos[1] + 1)) # Convert to 1-based index result.append(row_result) return result # Example usage: # n, m = 4, 4 # grid = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12], # [13, 14, 15, 16] # ] # for row in find_destination_cells(n, m, grid): # print(\\", \\".join(f\\"{x} {y}\\" for x, y in row))"},{"question":"Lana loves sorting algorithms and recently learned about the concept of k-inversions. A k-inversion in an array of n integers is a pair of indices (i, j) such that i < j and 0 ≤ arr[j] - arr[i] ≤ k. Lana is curious to find out how many k-inversions exist in a given array. You are given an array of n integers and an integer k. Your task is to count the number of k-inversions in the array. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the number of elements in the array and the value of k. The second line contains n integers arr1, arr2, ..., arrn (1 ≤ arri ≤ 10^9) — the elements of the array. Output a single integer, the number of k-inversions in the array. Sample Input 1: 5 2 1 3 2 5 4 Sample Output 1: 5 Explanation: The 5 k-inversions are: - (1, 2) with values (1, 3) since 0 ≤ 3 - 1 ≤ 2 - (1, 3) with values (1, 2) since 0 ≤ 2 - 1 ≤ 2 - (2, 3) with values (3, 2) since 0 ≤ 2 - 3 ≤ 2 (in the reverse order, it still counts) - (3, 5) with values (2, 4) since 0 ≤ 4 - 2 ≤ 2 - (4, 5) with values (5, 4) since 0 ≤ 4 - 5 ≤ 2 (in the reverse order, it still counts) Sample Input 2: 4 0 1 2 3 4 Sample Output 2: 0 Explanation: No k-inversions exist since k = 0, meaning we\'re looking for pairs where the numbers are equal. No such pairs exist in this strictly increasing array.","solution":"def count_k_inversions(n, k, arr): Returns the number of k-inversions in the array. Parameters: n (int): Number of elements in the array. k (int): The value of k for k-inversions. arr (list): The list of integers. Returns: int: The number of k-inversions in the array. count = 0 for i in range(n): for j in range(i + 1, n): if 0 <= arr[j] - arr[i] <= k: count += 1 return count"},{"question":"You are given a string consisting of lowercase English letters. We define a \\"magical sequence\\" as a non-empty subsequence of the string where each character appears an even number of times. A subsequence is a sequence that can be derived from the original string by deleting some or no characters without changing the order of the remaining characters. Your task is to determine if it is possible to form at least one \\"magical sequence\\" from the given string. The input consists of a single non-empty string of length not exceeding 200,000 characters. If it is possible to form at least one magical sequence, print \\"YES\\", otherwise print \\"NO\\". Example: Input: abba Output: YES Input: abc Output: NO","solution":"def can_form_magical_sequence(s): Determine if it is possible to form at least one \\"magical sequence\\" from the given string. A \\"magical sequence\\" is a subsequence where each character appears an even number of times. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if it is possible to form at least one magical sequence, \\"NO\\" otherwise. from collections import Counter # Count the frequency of each character char_count = Counter(s) # If there\'s any character with an odd frequency, it\'s not possible to form # a magical sequence where each character appears an even number of times for count in char_count.values(): if count % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Cupid has a collection of red and blue marbles that he likes to arrange in a specific pattern. Each arrangement is a sequence of marbles where no two adjacent marbles are of the same color. Given a sequence of marbles, determine the minimum number of marbles that need to be changed in order to satisfy this condition. Write a program that determines this minimum number of changes needed. The input consists of a single string consisting only of characters \'R\' and \'B\', where \'R\' stands for a red marble and \'B\' stands for a blue marble. The output should be a single integer, representing the minimum number of changes needed to ensure no two adjacent marbles in the sequence have the same color. Here are some examples: **Input:** RRBBBR **Output:** 2 **Input:** BRRRB **Output:** 1 In the first example, changing the sequence to \'RBRBRB\' or \'BRBRBR\' satisfies the condition with 2 changes. In the second example, changing the sequence to \'BRBRB\' satisfies the condition with 1 change.","solution":"def min_changes_to_alternate(sequence): Given a sequence of \'R\' and \'B\', returns the minimum number of changes needed so that no two adjacent marbles are of the same color. n = len(sequence) # Count changes for starting with \'R\' change_count_1 = 0 # Count changes for starting with \'B\' change_count_2 = 0 for i in range(n): expected_char_1 = \'R\' if i % 2 == 0 else \'B\' expected_char_2 = \'B\' if i % 2 == 0 else \'R\' if sequence[i] != expected_char_1: change_count_1 += 1 if sequence[i] != expected_char_2: change_count_2 += 1 return min(change_count_1, change_count_2)"},{"question":"You are given an array of positive integers representing building heights on a city block, where each height corresponds to a unique building. Your goal is to compute the total area of the largest rectangle that can be formed using any contiguous block of buildings. Each building can be as wide as 1 unit. The first line of input contains a single integer n (1 ≤ n ≤ 100,000), the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000), where hi represents the height of the ith building. Output a single integer, the area of the largest rectangular block that can be formed. Example: Input: 7 2 1 5 6 2 3 4 Output: 10 Explanation: The largest rectangle can be formed between the 3rd and 4th buildings with heights both being 5 and 6, covering an area of 5*2=10.","solution":"def largest_rectangle_area(heights): Calculate the maximum rectangle area that can be formed in a histogram. :param heights: List of integers representing heights of buildings. :return: Integer representing the maximum rectangle area. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] > heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A company has a certain number of meetings scheduled, and each meeting can be attended by one or more of its employees. The manager wants to know the minimum number of employees required to attend all meetings. Each employee can attend any number of meetings. You are given n meetings, and for each meeting, a list of employee indices who are allowed to attend that meeting. You need to find the minimum number of employees required to ensure that all meetings are attended by at least one employee. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of meetings. The next n lines contain the lists of employees for each meeting. Each line starts with an integer m (1 ≤ m ≤ 100) as the number of employees who can attend the meeting, followed by m space-separated integers (1 ≤ integer ≤ 100) representing indices of employees. Output a single integer — the minimum number of employees required to attend all meetings. **Input:** ``` 4 3 1 2 3 2 2 4 3 1 3 4 1 4 ``` **Output:** ``` 2 ``` In this example, employees 1 and 4 can attend all the meetings, ensuring every meeting is covered by at least one employee.","solution":"def min_employees_needed(n, meetings): Finds the minimum number of employees required to attend all meetings. Args: n (int): Number of meetings. meetings (list of lists): Each sublist represents employees that can attend a meeting. Returns: int: Minimum number of employees required to attend all meetings. from itertools import combinations # Extract all unique employees present in the meetings employees = set() for meeting in meetings: employees.update(meeting) employees = list(employees) min_employees_num = len(employees) # Check all combinations of employees for r in range(1, len(employees) + 1): for combo in combinations(employees, r): if all(any(emp in combo for emp in meeting) for meeting in meetings): min_employees_num = min(min_employees_num, r) break return min_employees_num"},{"question":"In a coding tournament, there are n participants, each participant is assigned a unique score. The organizers need to create a schedule such that in each round, participants are paired off to compete against each other. The rules for pairing are as follows: - Each participant must be paired exactly once in each round. - The difference in scores between paired participants should be minimized as much as possible for each round. Your task is to determine the optimal pairings for each round. The first line of input contains an integer n (1 ≤ n ≤ 100, n is even) — the number of participants. The second line contains n space-separated integers, denoting the scores of the participants. Output the pairs of participants for the round, with their scores in non-decreasing order. Each pair should be printed on a new line, with the scores in the pair in non-decreasing order. Example: Input: 4 100 300 200 400 Output: 100 200 300 400 Input: 6 1 3 5 7 9 11 Output: 1 3 5 7 9 11","solution":"def optimal_pairings(n, scores): Given the number of participants n and their scores, returns the optimal pairings such that the difference in scores between paired participants is minimized. :param n: Integer, the number of participants (always even) :param scores: List of integers, the scores of the participants. :return: List of tuple pairs, each containing pairs of scores in non-decreasing order. # Sort the scores in non-decreasing order sorted_scores = sorted(scores) # Create pairs from the sorted list pairs = [] for i in range(0, n, 2): pairs.append((sorted_scores[i], sorted_scores[i + 1])) return pairs"},{"question":"You are given a binary matrix of size n x m representing a grid of cells where each cell has a value of either 0 or 1. A cell with value 1 represents an obstacle and a cell with value 0 represents a free space. You need to determine if there is a path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner of the grid (cell (n, m)) that only moves through free spaces and only makes moves to the right or downward. Your task is to implement a function that determines if such a path exists. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers, each being either a 0 or a 1, representing the grid. Output \\"YES\\" if there is a path from (1, 1) to (n, m) that only moves through free spaces and in the right or downward directions; otherwise, output \\"NO\\". # Example: Input: ``` 4 4 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 0 ``` Output: ``` YES ``` Input: ``` 3 3 0 1 0 1 0 1 0 0 0 ``` Output: ``` NO ``` In the first example, there is a path from (1, 1) to (4, 4). The path is: down, down, right, right, down, right. In the second example, there is no path that only moves through free spaces from (1, 1) to (3, 3).","solution":"def is_path_exists(n, m, grid): Determines if there\'s a path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) in the binary matrix `grid` moving only right or downward through cells with value 0. Args: n : int : number of rows in the grid m : int : number of columns in the grid grid : List[List[int]] : the binary matrix representing the grid Returns: str : \'YES\' if a path exists, \'NO\' otherwise if grid[0][0] == 1 or grid[n-1][m-1] == 1: return \\"NO\\" visited = [[False] * m for _ in range(n)] queue = [(0, 0)] directions = [(0, 1), (1, 0)] while queue: x, y = queue.pop(0) if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either be empty or contain a tree. The tree in a cell blocks light from traveling through it, while empty cells let light pass through. You need to determine the maximum number of empty cells that can be illuminated by placing a light in a single empty cell. A light placed in a cell can illuminate all cells in the same row and column, stopping at any trees it encounters. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) which represent the number of rows and columns in the grid respectively. The next n lines each contain a string of length m consisting of the characters \'.\' (empty cell) and \'#\' (tree). Output the maximum number of empty cells that can be illuminated by placing a single light in any empty cell. # Example Input ``` 4 4 .#.. ..#. ...# ..#. ``` Output ``` 6 ``` # Explanation In the above example, placing a light in the cell (2,3) (in 1-based indexing) will illuminate 6 empty cells. (2,3) itself, (1,3), (3,3), (2,1), (2,2), and (2,4).","solution":"def max_illuminated_cells(n, m, grid): max_illuminated = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': count = 1 # Include the cell itself # Check horizontally to the left left = j - 1 while left >= 0 and grid[i][left] == \'.\': count += 1 left -= 1 # Check horizontally to the right right = j + 1 while right < m and grid[i][right] == \'.\': count += 1 right += 1 # Check vertically up up = i - 1 while up >= 0 and grid[up][j] == \'.\': count += 1 up -= 1 # Check vertically down down = i + 1 while down < n and grid[down][j] == \'.\': count += 1 down += 1 max_illuminated = max(max_illuminated, count) return max_illuminated"},{"question":"Simon is organizing a science fair and wants to display the total weight of different collections of items. Each item has a specific weight, and the item\'s type is represented by an integer from 1 to 4. These item weights are provided in separate text files for each type. He wants you to write a program that determines if the combined weight of all items of a specified type exceeds a given threshold. Each directory \\"1\\", \\"2\\", \\"3\\", and \\"4\\" contains files listing the weights of items of the corresponding type. Each file lists the weights of multiple items, one weight per line. The directories and files are guaranteed to exist. The program reads the directory number and the threshold weight as input: 1. The first line contains an integer t (1 ≤ t ≤ 4) — the item type directory to read from. 2. The second line contains an integer W (0 ≤ W ≤ 10^9) — the threshold weight. The directories containing the files are hosted on the following link: http://download4.sciencefair.com/weights.zip. The program should output \\"YES\\" if the total weight of all items in the specified type\'s directory exceeds the threshold weight, and \\"NO\\" otherwise. To summarize the steps your program needs to perform: 1. Read the input values for the item type directory and the threshold weight. 2. Download and parse the corresponding directory to sum the weights of all items. 3. Check if the total weight exceeds the threshold weight and print the appropriate result. Example: ``` Input: 2 15000 Output: YES ```","solution":"import requests import os from zipfile import ZipFile from io import BytesIO def check_weight_exceeds_threshold(t, W): url = \\"http://download4.sciencefair.com/weights.zip\\" # Download and extract the zip file response = requests.get(url) if response.status_code != 200: raise Exception(f\\"Failed to download file: {url}\\") zip_file = ZipFile(BytesIO(response.content)) total_weight = 0 # Assuming the item types directories are named as \'1\', \'2\', \'3\', and \'4\' directory = str(t) # Iterate through files in the specified directory within the zip archive for file_info in zip_file.infolist(): if file_info.filename.startswith(directory + \'/\'): with zip_file.open(file_info) as file: for line in file: total_weight += int(line.strip()) return \\"YES\\" if total_weight > W else \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters. You can reverse exactly one segment of this string once. Determine the lexicographically smallest string that can be obtained by reversing exactly one segment of the original string. The first line of input contains a single integer t (1 ≤ t ≤ 100000) — the number of test cases. Each test case consists of a single line containing the string s (1 ≤ |s| ≤ 100000). Print t lines — one for each test case, containing the lexicographically smallest string that can be obtained. For the first example, by reversing the segment \\"han\\", you can obtain the string \\"abcdeffgghijlk\\". For the second example, by reversing the segment \\"cb\\", you can obtain the string \\"aedghijk\\".","solution":"def smallest_string_by_reversing_segment(s): Determine the lexicographically smallest string that can be obtained by reversing exactly one segment of the given string s. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The lexicographically smallest string possible. n = len(s) smallest_string = s for i in range(n): for j in range(i, n): reversed_segment = s[i:j+1][::-1] new_string = s[:i] + reversed_segment + s[j+1:] if new_string < smallest_string: smallest_string = new_string return smallest_string"},{"question":"You are helping to develop a new logistics software platform for a courier company. The company handles orders from multiple clients, and each client sends packages of varying weights. The platform needs to organize packages into shipments, each shipment limited by a maximum allowable weight. Given an array of integers representing weights of packages, and an integer representing the maximum allowable weight per shipment, determine the minimum number of shipments required to deliver all packages. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of packages. The next line contains n integers wi (1 ≤ wi ≤ 1000) — representing the weights of each package. The last line contains an integer m (1 ≤ m ≤ 1000) — the maximum allowable weight per shipment. Print one integer — the minimum number of shipments required. Example Input 1: 4 10 20 30 40 50 Example Output 1: 3 Example Input 2: 6 5 5 5 5 5 5 10 Example Output 2: 3","solution":"def min_shipments(n, weights, max_weight): Determine the minimum number of shipments required to deliver all packages. :param n: Number of packages :param weights: List of weights of each package :param max_weight: Maximum allowable weight per shipment. :return: Minimum number of shipments required # Sorting weights in descending order to optimize the number of shipments weights.sort(reverse=True) shipments = 0 i = 0 while i < n: current_weight = 0 while i < n and current_weight + weights[i] <= max_weight: current_weight += weights[i] i += 1 shipments += 1 return shipments"},{"question":"You are given two strings, `s` and `t`, consisting of lowercase Latin letters. Your task is to make string `s` equal to string `t` by performing a series of operations. In one operation, you can select any character in the string `s` and change it to any other character. Determine the minimum number of operations needed to transform string `s` into string `t`. If it is impossible to transform `s` into `t`, return `-1`. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the lengths of strings `s` and `t`, respectively. The next line contains the string `s` of length `n`. The last line contains the string `t` of length `m`. Print the minimum number of operations needed to transform `s` into `t`, or `-1` if it is impossible to do so. **Example:** ``` Input: 5 5 abcde fghij Output: 5 ``` **Explanation:** To transform `abcde` into `fghij`, we need to change each character in `s` to the corresponding character in `t`, which takes 5 operations.","solution":"def min_operations_to_transform(s, t): Determines the minimum number of operations needed to transform string s into string t. In one operation, you can select any character in the string s and change it to any other character. - if the lengths of `s` and `t` are different, it\'s impossible to transform `s` into `t`. Args: s (str): The string to be transformed. t (str): The target string. Returns: int: The minimum number of operations, or -1 if transformation is impossible. if len(s) != len(t): return -1 operations = 0 for char_s, char_t in zip(s, t): if char_s != char_t: operations += 1 return operations"},{"question":"David работает в компании, у которой есть n сетевых серверов, образующих кольцевую топологию. Серверы пронумерованы от 1 до n по часовой стрелке. Компания планирует модернизировать некоторый сервер до нового ПО, что займет некоторое количество времени, идущего подряд по часам. Чтобы поддерживать бесперебойную работу сети, каждому серверу назначено окно технического обслуживания, в течение которого его можно обновить. Техническое обслуживание сервера может начаться в любой момент в пределах этого окна, и сервер будет отключен на весь период обслуживания. Задача заключается в том, чтобы найти минимальное время (в часах), которое потребуется, чтобы обновить сервер, минимально влияя на работу всей сети. Первая строка ввода содержит одно число n (2 ≤ n ≤ 1000) - количество серверов. Вторая строка содержит n целых чисел Wi (1 ≤ Wi ≤ 1000) - окно технического обслуживания каждого сервера (в часах). Третья строка содержит n целых чисел Ti (1 ≤ Ti ≤ Wi) - время, необходимое для технического обслуживания каждого сервера (в часах). Выведите единственное целое число - минимальное время (в часах), необходимое для обновления сервера, минимально влияя на работу сети. Например: Ввод: 3 8 5 7 4 3 2 Вывод: 4 В данном примере лучший вариант — обновить сервер 3, так как его обслуживание занимает всего 2 часа и минимально влияет на работу всей сети.","solution":"def minimal_upgrade_time(n, W, T): Given n servers in ring topology, the maintenance window W and upgrade time T, this function returns the minimal time (in hours) needed to upgrade a server to minimally affect the network operation. Parameters: n (int): Number of servers W (list of int): Maintenance window for each server T (list of int): Time required to perform the upgrade for each server Returns: int: The minimal upgrade time # The minimal time will be the minimum value in the given upgrade times T. return min(T)"},{"question":"In a distant kingdom, there exists a magical paper called \\"WonderPaper.\\" The magical property of WonderPaper is that if you cut it into any number of smaller pieces, each piece still retains the properties of WonderPaper. However, to maintain its magic, each piece must be cut such that it forms a valid number sequence. A valid number sequence is defined as a sequence where each number is greater than the sum of all previous numbers in the sequence. For example, the sequence {1, 2, 4} is valid because: - 2 > 1 - 4 > 1 + 2 Given a WonderPaper of length n, determine the maximum number of valid number sequences you can form by optimally cutting the WonderPaper. Each sequence must contain positive integers, and the number 1 must be included in every sequence. Input: - An integer n (1 ≤ n ≤ 10^6), which is the length of the WonderPaper. Output: - An integer denoting the maximum number of valid number sequences you can form. Example: Input: 10 Output: 4 Explanation: You can split the WonderPaper of length 10 into the following valid number sequences: - {1, 1, 2, 4} (1 + 1 + 2 + 4 = 8) - {1, 2, 3} (1 + 2 + 3 = 6) - {1, 3, 4} (1 + 3 + 4 = 8) - {1, 2, 5} (1 + 2 + 5 = 8) Note: Remember that each sequence should start with the number 1. Depending on the implementation, it might be necessary to verify the sum of any prospective sequence to ensure it fits within the given length of the WonderPaper.","solution":"def max_valid_number_sequences(n): Returns the maximum number of valid number sequences that can be formed from a WonderPaper of length n. l = 1 while (l * (l + 1) // 2 <= n): l += 1 return l - 1"},{"question":"You are given a string `s` consisting of lowercase English letters and a set of `words` consisting of non-empty strings made of lowercase English letters. The task is to count how many of the words from the `words` list are subsequences of the string `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\", but \\"acb\\", \\"bgf\\" are not. # Input - The first line contains a string `s` (1 ≤ |s| ≤ 10^5) representing the given string. - The second line contains an integer `n` (1 ≤ n ≤ 10^4) representing the number of words in the set. - The following `n` lines contain one word each from the set `words` (1 ≤ |word| ≤ 50). # Output - Output a single integer representing the number of words in the list `words` that are subsequences of the string `s`. # Example Input ``` abcdefg 5 abc abg bdf acb bgf ``` Output ``` 3 ``` Explanation - \\"abc\\", \\"abg\\", and \\"bdf\\" are subsequences of \\"abcdefg\\". - \\"acb\\" and \\"bgf\\" are not subsequences of \\"abcdefg\\". So, the output is 3. # Note The solution should be efficient given the constraints, ideally using methods like two-pointer technique or binary search to determine whether each word is a subsequence of the string `s`.","solution":"def is_subsequence(s, word): it = iter(s) return all(char in it for char in word) def count_subsequences(s, words): Counts how many words in the list are subsequences of the string `s`. return sum(is_subsequence(s, word) for word in words)"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex represents a city and each edge represents a bidirectional road between two cities. Your task is to determine the minimum number of roads you need to remove to make the graph Eulerian (each vertex has an even degree). If it\'s already Eulerian, the minimum number of roads to remove is zero. Input: The first line of input contains two integers n and m (1 ≤ n, m ≤ 100,000) - the number of vertices and edges respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) - representing a road between vertex u and vertex v. Output: Print a single integer - the minimum number of roads to remove to make the graph Eulerian. Example: Input: 5 6 1 2 2 3 3 4 4 1 1 5 5 3 Output: 1 Explanation: Removing the edge between vertex 1 and vertex 5, or the edge between vertex 5 and vertex 3 will make the graph Eulerian.","solution":"def min_roads_to_remove_to_make_eulerian(n, m, edges): Determine the minimum number of roads to remove to make the graph Eulerian. Parameters: n (int): Number of vertices m (int): Number of edges edges (list of tuples): List of edges represented as tuples (u, v) Returns: int: Minimum number of roads to remove # Initialize degrees of vertices degree = [0] * n # Calculate the degree of each vertex for u, v in edges: degree[u-1] += 1 degree[v-1] += 1 # Count the number of vertices with odd degrees odd_degree_count = sum(1 for d in degree if d % 2 != 0) # To make the graph Eulerian, we need to remove (odd_degree_count // 2) edges return odd_degree_count // 2"},{"question":"You are given a rectangular grid of size n × m and two non-overlapping rectangles within the grid such that their sides are parallel to the grid lines. The two rectangles are defined by their bottom-left and top-right corners. Your task is to determine if these two rectangles can be rearranged exclusively by moving within the boundaries of the grid (without rotating) so that they touch each other either edge-to-edge or corner-to-corner. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the grid. The next line contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) defining the bottom-left (x1, y1) and top-right (x2, y2) corners of the first rectangle. The third line contains four integers x3, y3, x4, y4 (1 ≤ x3 ≤ x4 ≤ n, 1 ≤ y3 ≤ y4 ≤ m) defining the bottom-left (x3, y3) and top-right (x4, y4) corners of the second rectangle. If it is possible to rearrange the rectangles so that they touch, print \\"YES\\". Otherwise, print \\"NO\\".","solution":"def can_touch(n, m, x1, y1, x2, y2, x3, y3, x4, y4): Determines if two rectangles can be rearranged to touch either edge-to-edge or corner-to-corner. # Check edge-to-edge or corner-to-corner alignment in horizontal or vertical directions if (x2 == x3 - 1 or x1 == x4 + 1) and (y1 <= y4 and y2 >= y3): return \\"YES\\" if (y2 == y3 - 1 or y1 == y4 + 1) and (x1 <= x4 and x2 >= x3): return \\"YES\\" if (x2 + 1 == x3 or x1 - 1 == x4) and (y2 + 1 == y3 or y1 - 1 == y4): return \\"YES\\" if (y2 + 1 == y3 or y1 - 1 == y4) and (x2 + 1 == x3 or x1 - 1 == x4): return \\"YES\\" return \\"NO\\""},{"question":"A social media application has a feature called \\"friend circles.\\" Each user can belong to exactly one friend circle. Users can either be friends with each other directly, or be part of the same chain of friends (friend-of-a-friend), which assigns them to the same friend circle. You are given a list of friendships, where each friendship is represented by a pair of user IDs. Your task is to find the number of distinct friend circles. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of users. The second line contains an integer m (0 ≤ m ≤ 1000) — the number of friendships. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n) — representing user IDs who are friends. Print a single integer — the number of distinct friend circles in the network. Example: Input: 6 3 1 2 2 3 4 5 Output: 3 Explanation: - Users 1, 2, and 3 belong to the same friend circle. - Users 4 and 5 belong to a distinct friend circle. - User 6 is not friends with anyone and forms its own friend circle.","solution":"def find_friend_circles(n, m, friendships): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: parent[root_y] = root_x for a, b in friendships: union(a, b) distinct_circles = len(set(find(x) for x in range(1, n + 1))) return distinct_circles"},{"question":"Alex is fascinated by the structure of atoms and their subatomic particles. He recently came across an interesting problem related to particle pairing within the atom\'s nucleus. An atom\'s nucleus contains protons and neutrons. Alex wants to form pairs consisting of exactly one proton and one neutron. However, there\'s a constraint: each proton or neutron can only belong to a single pair. Given the number of protons p and the number of neutrons n in the nucleus, help Alex find out the maximum number of pairs he can form. # Input The first line contains two integers p and n (0 ≤ p, n ≤ 10^9) — the number of protons and neutrons in the nucleus. # Output Print the maximum number of pairs of one proton and one neutron Alex can form. # Example Input ``` 5 3 ``` Output ``` 3 ``` Input ``` 7 10 ``` Output ``` 7 ``` In the first example, Alex can form 3 pairs using 3 protons and 3 neutrons (the remaining 2 protons will be unpaired). In the second example, Alex can form 7 pairs using all 7 protons and 7 neutrons (the remaining 3 neutrons will be unpaired).","solution":"def max_pairs_of_protons_and_neutrons(p, n): Given the number of protons (p) and the number of neutrons (n), returns the maximum number of pairs containing exactly one proton and one neutron. return min(p, n)"},{"question":"Leah is in charge of distributing toys in a children\'s shelter. She has a list of toys available and a list of children\'s desires. Each child wrote down the exact type of toy they want. Leah can give each child at most one toy, and each toy can be given to at most one child. Help Leah find out if she can fulfill all the children\'s toy wishes. The first line contains a single integer n (1 le n le 100), representing the number of different types of toys available. The second line contains n space-separated integers representing the number of toys of each type available. The third line contains a single integer m (1 le m le 100), representing the number of children. The fourth line contains m space-separated integers representing the desired toy type for each child. Each type is represented as an integer from 1 to n. If Leah can distribute the toys so that each child gets exactly what they wish for, print YES. Otherwise, print NO.","solution":"def can_fulfill_toy_wishes(n, toys, m, wishes): Determines whether all children\'s toy wishes can be fulfilled. :param n: int - Number of different types of toys available :param toys: list of int - Numbers of toys of each type available :param m: int - Number of children :param wishes: list of int - Desired toy type for each child :return: str - \'YES\' if all wishes can be fulfilled, otherwise \'NO\' toy_count = [0] * n for i in range(n): toy_count[i] = toys[i] for wish in wishes: if toy_count[wish - 1] > 0: toy_count[wish - 1] -= 1 else: return \'NO\' return \'YES\'"},{"question":"You are given an array of integers representing the strengths of several warriors. The goal is to determine the maximum number of pairs of warriors you can form such that the absolute difference in strengths between the two warriors in each pair is less than or equal to a given value K. More formally, given an array of integers `strengths` and an integer `K`, you must find the maximum number of pairs `(i, j)` where `i < j` and `|strengths[i] − strengths[j]| ≤ K`. # Input - The first line contains two integers, `N` and `K` (1 ≤ N ≤ 2000, 0 ≤ K ≤ 1000), where `N` is the number of warriors. - The second line contains `N` integers representing the strengths of the warriors `strengths[i]` (0 ≤ strengths[i] ≤ 10000). # Output - Output a single integer, the maximum number of valid pairs. # Example Input ``` 5 3 1 3 5 9 12 ``` Output ``` 2 ``` # Explanation For the example provided: - The possible pairs of strengths with an absolute difference of at most 3 are (1, 3) and (5, 3). - The pairs (1, 3) and (3, 5) satisfy the condition, and therefore the output is 2.","solution":"def max_pairs_with_strength_difference(strengths, K): Calculate the maximum number of pairs of warriors with strength difference less than or equal to K. strengths.sort() N = len(strengths) pairs = 0 i = 0 while i < N - 1: if strengths[i+1] - strengths[i] <= K: pairs += 1 i += 2 # Skip next warrior since he is already paired else: i += 1 # Try to find a pair for the current warrior with the next one return pairs"},{"question":"You are given a sequence of integers where some elements may appear more than once. Your task is to rearrange the sequence such that no two adjacent elements are the same. If such a rearrangement is possible, return any valid rearrangement. Otherwise, return an empty array. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the sequence. The second line contains n integers representing the sequence. For each test case, print one line. If a rearrangement is possible, print the rearranged sequence. If not, print -1. In the first sample, a possible rearrangement is 1 2 1 2. In the second sample, a possible rearrangement is -1, which is the only element and no rearrangement is possible. In the third sample, a possible rearrangement is 3 1 2 3 2 1. Note: Ensure the sum of n across all test cases does not exceed 10^6.","solution":"from collections import Counter import heapq def rearrange_sequence(t, test_cases): results = [] for n, sequence in test_cases: if n == 1: results.append(sequence) continue elem_count = Counter(sequence) max_heap = [(-count, elem) for elem, count in elem_count.items()] heapq.heapify(max_heap) prev_count, prev_elem = 0, None result = [] while max_heap: count, elem = heapq.heappop(max_heap) result.append(elem) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_elem)) prev_count, prev_elem = count + 1, elem if len(result) != n: results.append(-1) else: results.append(result) return results # Examples of how to call the function for testing: # t = 3 # test_cases = [ # (4, [1, 1, 2, 2]), # Possible rearrangement example output: [1, 2, 1, 2] # (1, [1]), # Only one element, output: [1] # (6, [1, 1, 2, 2, 3, 3]) # Possible rearrangement example output: [1, 3, 1, 3, 2, 2] # ] # rearrange_sequence(t, test_cases)"},{"question":"You are given a binary tree represented by an array. Each element in the array represents the value of a node in the tree, and \'null\' represents that there is no node at that position. The structure of the tree is such that the left child of the node at index i is at index 2i + 1, and the right child is at index 2i + 2. Write a function to check whether this binary tree is a valid binary search tree (BST). A binary search tree is valid if for every node: 1. The left subtree of a node contains only nodes with keys less than the node\'s key. 2. The right subtree of a node contains only nodes with keys greater than the node\'s key. 3. Both the left and right subtrees must also be binary search trees. Your function should have the following signature: ``` def is_valid_BST(tree: List[Optional[int]]) -> bool: ``` # Input: - `tree` - a list of elements where each element is either an integer or \'null\'. The length of the list is at most 1000. # Output: - Return `True` if the binary tree is a valid binary search tree (BST), otherwise return `False`. # Example: Input: ``` tree = [2, 1, 3] ``` Output: ``` True ``` Input: ``` tree = [5, 1, 4, \'null\', \'null\', 3, 6] ``` Output: ``` False ```","solution":"from typing import List, Optional def is_valid_BST(tree: List[Optional[int]]) -> bool: def validate(node_index: int, low: Optional[int], high: Optional[int]) -> bool: if node_index >= len(tree) or tree[node_index] == \'null\': return True val = tree[node_index] if (low is not None and val <= low) or (high is not None and val >= high): return False return (validate(2 * node_index + 1, low, val) and validate(2 * node_index + 2, val, high)) return validate(0, None, None)"},{"question":"You are given an array of positive integers and an integer k. Your task is to determine the number of distinct subarrays of length exactly k such that the minimum value in the subarray is equal to the maximum value in the subarray. A subarray is defined as a contiguous segment of the array. For example, if the array is [1, 2, 1, 3, 1] and k = 2, the subarrays of length 2 are: [1, 2], [2, 1], [1, 3], and [3, 1]. The first line of input contains two integers n and k (1 leq k leq n leq 10^5) — the length of the array and the length of the subarrays to be considered. The second line contains n positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^7) indicating the elements of the array. Print the number of distinct subarrays of length exactly k where the minimum value is equal to the maximum value. # Example Input ``` 6 3 1 1 1 2 2 2 ``` Output ``` 2 ``` Explanation The valid subarrays of length 3 where the minimum and maximum values are equal are: - [1, 1, 1] occurring once - [2, 2, 2] occurring once Thus, there are 2 distinct subarrays that meet the conditions. Note that the subarrays are not necessarily unique but distinct in their elements and position within the overall array.","solution":"def count_special_subarrays(n, k, array): if k > n: return 0 count = 0 subarrays = set() for i in range(n - k + 1): subarray = array[i:i + k] if len(set(subarray)) == 1: subarrays.add(tuple(subarray)) return len(subarrays)"},{"question":"Vasya loves solving puzzles in a rectangular grid. Recently, he came across a problem where he needs to find the maximum sum of values in any path that starts from the top-left corner of the grid and ends at the bottom-right corner. He can only move to the right or down at any step. The grid is given as a matrix with n rows and m columns, where each cell contains an integer representing the value at that position. Your task is to help Vasya determine the maximum sum he can achieve by starting at the top-left corner (1,1) and moving to the bottom-right corner (n,m) with only right or down movements allowed. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The following n lines contain m integers each, representing the values in the grid. Output a single integer — the maximum sum of values along the path from the top-left corner to the bottom-right corner. # Example Input ``` 3 3 5 3 2 1 7 1 4 6 5 ``` Output ``` 24 ``` Explanation The path to achieve the maximum sum is 5 → 3 → 7 → 6 → 5, which yields the sum 5+3+7+6+5 = 26.","solution":"def max_path_sum(grid): Returns the maximum sum of values in any path from the top-left corner to the bottom-right corner of the grid. Only right and down movements are allowed. n = len(grid) m = len(grid[0]) # Create a dp table to store the maximum sum upto each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"An island is represented as a 2D grid of dimensions ( n times m ) where each cell is either land (`1`) or water (`0`). There are several disjoint parcels of land, each considered an island. An island is surrounded by water and is formed by connecting adjacent land cells horizontally or vertically (i.e., no diagonals). Your task is to identify all the distinct islands in the grid and return the size of the largest island. The size of an island is defined as the number of land cells that make up the island. # Input - The first line contains two integers ( n ) and ( m ) (( 1 leq n, m leq 1000 )) — the dimensions of the grid. - Each of the next ( n ) lines contains ( m ) integers ( 0 ) or ( 1 ) — the grid representation itself. # Output - Print a single integer — the size of the largest island. # Example Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 0 0 0 1 0 1 1 0 0 1 ``` Output ``` 5 ``` # Explanation In the example provided, there are three islands. Their sizes are 2, 5, and 2 respectively. Therefore, the largest island has a size of 5. # Notes To solve this problem, you might consider using Depth-First Search (DFS) or Breadth-First Search (BFS) to find and compute the size of each island.","solution":"def largest_island_size(n, m, grid): Finds the size of the largest island in a grid. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. grid (list of list of int): 2D grid representation of the island. Returns: int: size of the largest island. def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == 0: return 0 grid[x][y] = 0 # mark as visited size = 1 size += dfs(x+1, y) size += dfs(x-1, y) size += dfs(x, y+1) size += dfs(x, y-1) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"Masha loves candies and has decided to hold a candy party for her friends. She has n types of candies, with each type i having ci candies. Masha wants to divide candies among her friends such that each friend gets the same number of candies and prefers to have as many friends as possible at the party. Your task is to determine the maximum number of friends Masha can invite to her candy party if each friend must get the same number of candies. The first line contains an integer n (1 ≤ n ≤ 100) — the number of candy types. The second line contains n integers: c1, c2, ..., cn (1 ≤ ci ≤ 10^9) — the number of candies of each type. Print a single integer — the maximum number of friends Masha can invite. In the first example, Masha has candies [9, 18, 27]. The maximum number of friends she can invite is 9, each getting 1 candy. In the second example, Masha has candies [8, 12, 16]. The maximum number of friends she can invite is 4, each getting 2 candies. Your output should match the format of the rest of the questions in this set, including the required complexity and topic alignment.","solution":"import math from functools import reduce def max_friends(n, candies): Returns the maximum number of friends Masha can invite such that each friend gets the same number of candies. :param n: int, number of candy types :param candies: list of ints, number of candies of each type :return: int, maximum number of friends # Calculate the GCD of all candy counts gcd_value = reduce(math.gcd, candies) return gcd_value # Example usage: # n = 3 # candies = [9, 18, 27] # print(max_friends(n, candies)) # Output should be 9"},{"question":"You are given an array of integers. In one operation, you can choose any two elements and add their minimum value to the larger element. Your task is to find the minimum number of operations required to make all elements in the array equal. The first line of input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case contains two lines. The first line of a test case contains one integer n (2 ≤ n ≤ 5 * 10^3) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. For each test case, print the minimum number of operations required to make all elements equal. # Example Input: ``` 2 3 4 1 3 4 2 7 3 5 ``` Output: ``` 3 5 ``` # Explanation: In the first test case, you can perform the following operations: 1. Add the minimum (1) to 4, resulting in [1, 5, 3] 2. Add the minimum (1) to 5, resulting in [1, 6, 3] 3. Add the minimum (1) to 6, resulting in [1, 7, 3] 4. Add the minimum (1) to 7, resulting in [2, 7, 3] 5. Add the minimum (2) to 7, resulting in [2, 9, 3] 6. Add the minimum (2) to 9, resulting in [4, 9, 3] 7. Add the minimum (3) to 9, resulting in [4, 12, 6] 8. Add the minimum (4) to 12, resulting in [8, 12, 6] 9. Add the minimum (6) to 12, resulting in [12, 12, 12] So, the minimum number of operations is 5.","solution":"def min_operations_to_equal_array(n, arr): Returns the minimum number of operations required to make all elements in the array equal. arr.sort() min_element = arr[0] operations = 0 for i in range(1, n): operations += (arr[i] - min_element) return operations def process_test_cases(t, test_cases): results = [] for case in test_cases: n, arr = case results.append(min_operations_to_equal_array(n, arr)) return results"},{"question":"A tech company is designing a new navigation system for an autonomous delivery robot. The system should help the robot plan its route on a 2D grid map, where some cells are blocked or occupied, and the robot cannot pass through them. The robot can move up, down, left, or right, but not diagonally. Given a grid, the starting position, and the target position, determine the shortest path for the robot to reach the target. If the target is unreachable, return -1. The input consists of: - An integer n (1 ≤ n ≤ 100) representing the number of rows in the grid. - An integer m (1 ≤ m ≤ 100) representing the number of columns in the grid. - A list of strings of length m, each containing \'0\' (passable) or \'1\' (blocked), representing the grid. - Two pairs of integers: sx, sy (0 ≤ sx < n, 0 ≤ sy < m) representing the starting cell. - Two pairs of integers: tx, ty (0 ≤ tx < n, 0 ≤ ty < m) representing the target cell. The output should be a single integer representing the number of steps in the shortest path from the start to the target, or -1 if the target is unreachable. Example input: ``` 5 5 00100 00000 01110 00000 00000 0 0 4 4 ``` Example output: ``` 8 ``` Explanation: The robot starts at (0, 0) and follows the path (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4). It takes 8 steps to reach the target (4, 4).","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, tx, ty): if not 0 <= sx < n or not 0 <= sy < m or not 0 <= tx < n or not 0 <= ty < m: return -1 if grid[sx][sy] == \'1\' or grid[tx][ty] == \'1\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set([(sx, sy)]) while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Olga is organizing a library. She has a set of shelves, and each shelf can hold up to a certain number of books. However, she can only place books on a shelf in a specific manner: each book must not be heavier than the book placed before it (if any) on the same shelf. Olga wonders if she can place all the given books on the shelves following these rules. Given the weights of the books and the capacity of each shelf, you need to determine if it is possible to organize all the books according to Olga\'s requirements. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of books and m is the number of shelves. - The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), representing the weights of the books. - The third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ n), representing the capacities of each shelf. Output: - Print \\"YES\\" if it is possible to place all the books on the shelves according to the given rules, otherwise print \\"NO\\". Example: Input: 5 2 4 3 2 1 5 3 2 Output: YES Explanation: - Shelf 1 (capacity 3): weights 5, 4, 3 - Shelf 2 (capacity 2): weights 2, 1","solution":"def can_organize_library(n, m, book_weights, shelf_capacities): Determines if it\'s possible to organize the books on the shelves such that the weight of each subsequent book on the same shelf is not greater than the previous one. Args: - n (int): Number of books - m (int): Number of shelves - book_weights (list of int): Weights of the books - shelf_capacities (list of int): Capacities of the shelves Returns: - str: \\"YES\\" if possible to organize the books, otherwise \\"NO\\" # Sort books in descending order to place the heaviest first book_weights.sort(reverse=True) # Sort shelves capacities in descending order to utilize the largest shelves first shelf_capacities.sort(reverse=True) # Index to keep track of the current book book_index = 0 for capacity in shelf_capacities: if book_index < n: # Check if we can place \'capacity\' number of books on the current shelf book_index += capacity # If we have placed all books, return \\"YES\\" if book_index >= n: return \\"YES\\" else: return \\"NO\\""},{"question":"Noora has always been interested in puzzles, and her latest challenge involves creating a path through a maze. The maze is represented by a grid of cells, where each cell can either be empty (\'.\') or an obstacle (\'#\'). Noora needs to find a path from the top-left corner to the bottom-right corner of the grid. The path can only move through empty cells and can move up, down, left, or right. However, there is a catch. Noora must select k cells uniformly and randomly from all empty cells before starting her path, and these cells will be marked as checkpoints. She needs to ensure that every checkpoint is visited exactly once and in the order they were chosen, before reaching the bottom-right corner. Write a program to help Noora determine if it is possible to complete the path given the conditions and, if so, output such a path. If there is no valid path, output \\"NO\\". # Input The first line contains three integers n, m, and k (2 ≤ n, m ≤ 20, 1 ≤ k ≤ 10) — the number of rows, the number of columns, and the number of checkpoints, respectively. Each of the next n lines contains exactly m characters: either \'.\' (representing an empty cell) or \'#\' (representing an obstacle). # Output If Noora can complete the path, print \\"YES\\" followed by the path as a sequence of characters \'U\', \'D\', \'L\', \'R\' indicating up, down, left, and right moves. Otherwise, print \\"NO\\". # Example Input: ``` 5 5 2 ..... .#... ..... ... ..... ``` Output: ``` YES RRRDDDLLUURR ``` In this example, Noora can select checkpoints at (2, 2) and (4, 3) and the path moves correctly through each checkpoint and reaches the bottom-right corner.","solution":"from itertools import product import random def find_path_with_checkpoints(n, m, k, grid): empty_cells = [(i, j) for i, j in product(range(n), range(m)) if grid[i][j] == \'.\'] # If not enough empty cells to choose `k` checkpoints, return \\"NO\\" if len(empty_cells) < k: return \\"NO\\" def bfs(start, end): Simple BFS to find the path from start to end avoiding obstacles. queue = [(start, [])] visited = set() while queue: (x, y), path = queue.pop(0) if (x, y) == end: return path for dx, dy, move in [(-1, 0, \'U\'), (1, 0, \'D\'), (0, -1, \'L\'), (0, 1, \'R\')]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append(((nx, ny), path + [move])) return None # Try multiple random configurations to find a feasible path for _ in range(100): # Max attempts to randomly select checkpoints checkpoints = random.sample(empty_cells, k) checkpoints = [(0, 0)] + checkpoints + [(n-1, m-1)] total_path = [] possible = True for i in range(len(checkpoints) - 1): part_path = bfs(checkpoints[i], checkpoints[i+1]) if part_path is None: possible = False break total_path.extend(part_path) if possible: return \\"YESn\\" + \'\'.join(total_path) return \\"NO\\""},{"question":"An autonomous drone needs to traverse a two-dimensional grid from the top-left corner to the bottom-right corner. The grid consists of cells, each with an associated risk value which represents the amount of risk encountered when the drone passes through that cell. The drone can only move either right or down at each step. Design an algorithm to find the minimum total risk the drone encounters while reaching the bottom-right corner of the grid. The first line of input contains two integers ( n ) and ( m ) ( (1 leq n, m leq 1000 ) ), which represent the number of rows and columns of the grid, respectively. The next ( n ) lines each contain ( m ) integers, with each integer ( ( 0 leq risk leq 1000 ) ) representing the risk value of that cell. Output one integer: the minimum total risk the drone encounters while reaching the bottom-right corner of the grid. **Example:** **Input:** ``` 3 3 1 3 1 1 5 1 4 2 1 ``` **Output:** ``` 7 ``` **Explanation:** The optimal path is ( (0,0) ) -> ( (0, 1) ) -> ( (0, 2) ) -> ( (1, 2) ) -> ( (2, 2) ) with a total risk of ( 1 + 3 + 1 + 1 + 1 = 7 ).","solution":"def min_path_risk(grid): n = len(grid) m = len(grid[0]) # Create a 2D dp array to store the minimum risk encountered to reach each cell dp = [[0] * m for _ in range(n)] # Initialize the dp table dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the minimum risk encountered to reach it return dp[n-1][m-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_path_risk(grid)) # Output: 7"},{"question":"A courier company has a distribution center with n delivery hubs connected by roads. Each road connects exactly two hubs and has a certain length. The roads are bidirectional. The company wants to implement a system that quickly determines the shortest path for packages to travel from one hub to another. You are given the number of hubs n and the number of roads m. Each of the next m lines contains three integers u, v, and l, where u and v are the numbers of the hubs connected by the road, and l is the length of the road. Write a program that processes multiple queries. Each query consists of two integers a and b, representing the delivery hubs between which the shortest path length should be determined. If there is no path between the hubs, return -1 for that query. The first line contains two integers n and m (1 ≤ n ≤ 500, 1 ≤ m ≤ 10000). Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 1000). The next line contains q (1 ≤ q ≤ 1000), the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n), which represents a query. Print the shortest path length for each query. If there is no path, print -1. In the first example, one possible road network is represented by the edges [(1, 2, 1), (2, 3, 2)]. For the given queries, the shortest path lengths are [3, 1, 3] respectively.","solution":"import heapq def shortest_path(n, m, roads, queries): def dijkstra(start, end): pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while pq: curr_dist, u = heapq.heappop(pq) if u == end: return curr_dist if curr_dist > distances[u]: continue for v, length in graph[u]: dist = curr_dist + length if dist < distances[v]: distances[v] = dist heapq.heappush(pq, (dist, v)) return -1 graph = {i: [] for i in range(1, n+1)} for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) results = [] for a, b in queries: results.append(dijkstra(a, b)) return results"},{"question":"Alice is an avid reader and has a collection of books arranged in a single row on a bookshelf. Each book has a unique height. She recently learned about the concept of a \\"balanced bookshelf,\\" where the difference between the height of the tallest book on the left half and the tallest book on the right half of the shelf should be as small as possible. Alice wants to know the minimum possible difference she can achieve by dividing the bookshelf into the left and right halves (each containing the same number of books if the total number is even, or the left half containing one more book if the total number is odd). Write a function to determine this minimum difference. The first input line contains an integer n (1 ≤ n ≤ 105), the number of books. The second line contains n integers ai (1 ≤ ai ≤ 109) — the heights of the books. Print a single integer — the minimum possible difference of the tallest books on the two halves of the bookshelf after the optimal split. Example: ``` Input: 7 4 1 3 2 6 5 7 Output: 1 ``` Explanation: In the example, the optimal way to divide the bookshelf is [4, 1, 3, 2] and [6, 5, 7]. The tallest book on the left half is 4, and on the right half is 5. The difference is |4 - 5| = 1, which is the minimum possible.","solution":"def min_balanced_bookshelf_difference(n, heights): Determines the minimal possible difference between the tallest books in the two halves of the bookshelf. Parameters: n (int): The number of books. heights (List[int]): The heights of the books. Returns: int: The minimum possible difference of the tallest books on the two halves of the bookshelf. if n == 1: return heights[0] # Sort the heights to find the optimal split points sorted_heights = sorted(heights) # Determine the index to split the sorted array mid = n // 2 # Calculate the max difference between the last element on the left half and the first element on the right half if n % 2 == 0: left_max = sorted_heights[mid - 1] right_max = sorted_heights[mid] else: left_max = sorted_heights[mid] right_max = sorted_heights[mid + 1] return abs(left_max - right_max)"},{"question":"You are given a matrix of size ( n times m ) filled with non-negative integers. Your task is to find the sum of elements in the submatrix defined by its top-left and bottom-right corners. The top-left corner is at ((i_1, j_1)) and the bottom-right corner is at ((i_2, j_2)). The matrix is ( A ), where ( A[i][j] ) represents the element at the ( i )-th row and the ( j )-th column. Your program should efficiently handle multiple queries on the same matrix. Each query provides the coordinates ( (i_1, j_1) ) and ( (i_2, j_2) ) and asks for the sum of elements in the specified submatrix. An efficient way to process the queries is to use a prefix sum matrix. # Input - The first line contains two integers ( n ) and ( m ) (( 1 leq n, m leq 500 )) — the dimensions of the matrix. - The next ( n ) lines contain ( m ) integers each (( 0 leq A[i][j] leq 10^9 )) — the matrix ( A ). - The next line contains a single integer ( q ) (( 1 leq q leq 10^4 )) — the number of queries. - Each of the next ( q ) lines contains four integers ( i_1, j_1, i_2, j_2 ) (( 1 leq i_1 leq i_2 leq n ), ( 1 leq j_1 leq j_2 leq m )) describing the corners of the submatrix. # Output For each query, output a single integer — the sum of elements in the submatrix defined by the corners ((i_1, j_1)) and ((i_2, j_2)). # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 1 3 3 ``` Output ``` 12 45 ``` # Explanation For the first query, the sum of elements in the submatrix from (1, 1) to (2, 2) is (1+2+4+5=12). For the second query, the sum of elements in the submatrix from (1, 1) to (3, 3) is (1+2+3+4+5+6+7+8+9=45).","solution":"def preprocess_matrix(matrix): Preprocess the matrix using prefix sums for efficient submatrix sum queries. n = len(matrix) m = len(matrix[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) return prefix_sum def submatrix_sum(prefix_sum, i1, j1, i2, j2): Calculate the sum of the submatrix using the precomputed prefix sum matrix. result = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) return result # Function to handle multiple queries def handle_queries(matrix, queries): Handle a list of queries for submatrix sums for the given matrix prefix_sum = preprocess_matrix(matrix) results = [] for (i1, j1, i2, j2) in queries: results.append(submatrix_sum(prefix_sum, i1, j1, i2, j2)) return results"},{"question":"You are given a list of integers representing the heights of trees in a forest. The forest is organized such that each tree\'s height is unique and the heights strictly increase from left to right. You are required to answer queries asking if two given trees can see each other if the line of sight between them does not pass through any taller tree. **Input:** - The first line contains an integer `n` (2 ≤ n ≤ 10^5), the number of trees in the forest. - The second line contains `n` integers, each representing the height of a tree in order. - The next line contains an integer `q` (1 ≤ q ≤ 10^5), the number of queries. - The following `q` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n; a ≠ b), representing the positions of the two trees in the list of heights. **Output:** - For each query, print \\"YES\\" if the trees at positions `a` and `b` can see each other; otherwise, print \\"NO\\". **Example:** Input: ``` 5 1 3 7 8 5 3 1 3 2 4 1 5 ``` Output: ``` YES YES NO ``` **Explanation:** - For the query (1, 3), the tree at position 1 can see the tree at position 3 because there is no tree taller than the tree at position 3 in between them. - For the query (2, 4), the tree at position 2 can see the tree at position 4 because despite there being a taller tree at position 3, the trees are arranged such that the heights are strictly increasing and the tree at position 4 is taller than the tree at position 3. - For the query (1, 5), the tree at position 1 cannot see the tree at position 5 because the tree at position 4 (height 8) is taller and obstructs the line of sight. Your task is to implement an efficient solution to determine the visibility status for each query.","solution":"def can_see_each_other(n, heights, queries): Determines if two trees can see each other. Args: n (int): Number of trees. heights (list): Heights of the trees. queries (list of tuples): List of queries with positions of trees to check. Returns: list: List of \\"YES\\" or \\"NO\\" for each query. results = [] for a, b in queries: a -= 1 # switching to 0-indexed b -= 1 # switching to 0-indexed min_pos = min(a, b) max_pos = max(a, b) taller_between = max(heights[min_pos:max_pos + 1]) if taller_between == heights[max_pos]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are the lead and only engineer of a newly discovered planet. The inhabitants are peaceful, but you suspect their technological prowess is limited. To ensure their cybersecurity systems are up to date, you need to check whether their current password policy adheres to the standards you want to establish. A password is considered valid if: 1. It contains at least one lowercase letter. 2. It contains at least one uppercase letter. 3. It contains at least one digit. 4. It contains at least one special character from the set \\"!@#%^&*()-+\\". 5. It does not contain any space or other characters. 6. Its length is between 8 and 20 characters inclusive. Write a program to check if a given password meets the above criteria. The input consists of a single string s representing the password (1 leq |s| leq 100). Print \\"VALID\\" if the password meets all the criteria. Otherwise, print \\"INVALID\\". Example input and output: Input: ``` Aa1!aa1! ``` Output: ``` VALID ``` Input: ``` Aa1!aa1 ``` Output: ``` INVALID ``` Input: ``` Password123! ``` Output: ``` VALID ``` Input: ``` P@ss W0rd ``` Output: ``` INVALID ```","solution":"import re def check_password_policy(s): Check if the provided password meets the specified policy. if not (8 <= len(s) <= 20): return \\"INVALID\\" if not re.search(r\'[a-z]\', s): return \\"INVALID\\" if not re.search(r\'[A-Z]\', s): return \\"INVALID\\" if not re.search(r\'[0-9]\', s): return \\"INVALID\\" if not re.search(r\'[!@#%^&*()-+]\', s): return \\"INVALID\\" if re.search(r\'s\', s): return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given an n × n grid where each cell contains a non-negative integer. The grid represents the amount of treasure in each location. Your task is to determine the maximum amount of treasure you can collect when starting at the top-left corner (1, 1) and moving to the bottom-right corner (n, n). You can only move right or down from any cell. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n integers, where the j-th integer in the i-th line represents the amount of treasure in cell (i, j) (0 ≤ treasure ≤ 100). Output a single integer — the maximum amount of treasure you can collect. For performance reasons, you should aim for an algorithm that runs in O(n^2) time complexity. **Example:** Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` In this example, one possible path to collect the maximum treasure is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3), collecting 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_treasure(grid): Returns the maximum amount of treasure that can be collected when moving from the top-left corner to the bottom-right corner, only allowing moves to the right or down. n = len(grid) if n == 0: return 0 # Create a DP table to store the maximum treasure collected up to each cell dp = [[0] * n for _ in range(n)] # Initialize the starting cell dp[0][0] = grid[0][0] # Fill the first row (only right moves are possible) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only down moves are possible) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"Ramu loves chocolates, and he has an extraordinary method to distribute them among his friends. He has an array of integers, where each integer represents the number of chocolates in a jar. Ramu performs a series of operations to optimize the distribution of chocolates as follows: He selects any two jars and merges them into a single jar containing the sum of chocolates in the selected jars. This operation reduces the total number of jars by one. Ramu continues this process until there is only one jar left. His objective is to minimize the maximum number of chocolates in any jar throughout this process. Your task is to determine the minimum possible maximum number of chocolates in any jar after Ramu finishes all the operations. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of jars. The second line contains n integers ai (1 ≤ ai ≤ 10^9), representing the initial number of chocolates in each jar. Output a single integer, which is the minimum possible maximum number of chocolates in any jar. For example: **Input:** ``` 4 2 2 2 2 ``` **Output:** ``` 4 ``` **Input:** ``` 3 1 3 5 ``` **Output:** ``` 6 ``` Explanation: 1. In the first example, Ramu can merge jars [2, 2] to get [4, 2, 2] and then merge another [4, 2] to get [6, 2], and finally [6, 2] to get [8]. Throughout the process, the maximum is 8. However, he can optimize by merging pairs as shown in the steps: Merge [2, 2] -> [4, 2, 2] -> [4, 4] -> [8]. Hence, the minimum possible maximum number of chocolates is 4. 2. In the second example, Ramu can merge jars [1, 3] to get [4, 5], and then merge [4, 5] to get [9]. The possible way to minimize: Merge [1, 3] to get [4, 5] and finally merge [4, 5] to get 6. Hence, the minimum possible maximum number of chocolates is 6.","solution":"import heapq def min_max_chocolates(n, chocolates): Determine the minimum possible maximum number of chocolates in any jar after merging all jars into one. Args: n: int : number of jars chocolates: List[int] : list containing the number of chocolates in each jar Returns: int: minimum possible maximum number of chocolates in any jar if n == 1: return chocolates[0] heapq.heapify(chocolates) while len(chocolates) > 1: # Pop the two smallest elements first_min = heapq.heappop(chocolates) second_min = heapq.heappop(chocolates) # Merge them merged = first_min + second_min # Push the result back into the heap heapq.heappush(chocolates, merged) return chocolates[0] # Example # Input: 3, 1 3 5 # Output: 9"},{"question":"Leo and Mia are playing a game with a string of length n. The string consists of lowercase English letters. Leo starts by choosing a contiguous substring of the original string and reverses it. After this, Mia will choose any contiguous substring (not necessarily the same one as Leo\'s) and also reverse it. Both players only get one turn each. They want to know if there is at least one way for Leo and Mia to perform their moves so that after both reversals, the string ends up being a palindrome. A string is considered a palindrome if it reads the same forwards and backwards. The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains the string, consisting of n lowercase English letters. Print \\"YES\\" if there exists a sequence of moves that Leo and Mia can make to turn the string into a palindrome. Otherwise, print \\"NO\\". For example: Input: 7 abacaba Output: YES Input: 6 abcdef Output: NO","solution":"def can_be_palindrome(n, s): Determines if there is at least one sequence of moves that result in a palindromic string. :param n: Length of the string :param s: The string consisting of lowercase English letters :return: \\"YES\\" if it\'s possible to form a palindrome, \\"NO\\" otherwise # If the string is already a palindrome if s == s[::-1]: return \\"YES\\" # Check if there exists a character that occurs at least twice from collections import Counter counter = Counter(s) # If any character appears more than once, it\'s possible to form a palindrome for count in counter.values(): if count > 1: return \\"YES\\" return \\"NO\\""},{"question":"In a city with a grid layout of streets, there are n intersections and m bidirectional roads. Each road connects two intersections and has a certain travel time associated with it. Given the grid layout, it\'s necessary to determine the shortest travel time between two intersections, starting from intersection 1 to intersection n. You need to calculate the shortest travel time or determine if it is impossible to reach the destination. The first line of input contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 2 times 10^5), the number of intersections and the number of roads, respectively. Each of the next m lines contains three integers u, v, and t (1 le u,v le n, u neq v, 1 leq t leq 10^9), representing a road between intersections u and v with travel time t. Output the shortest travel time from intersection 1 to intersection n. If there is no path between the two intersections, print \\"IMPOSSIBLE\\". Example input: ``` 5 6 1 2 4 1 3 2 2 3 5 3 4 10 2 5 3 4 5 1 ``` Example output: ``` 7 ``` In this example, the shortest path from intersection 1 to intersection 5 is through intersections 1 -> 2 -> 5 with a total travel time of 7.","solution":"import heapq def shortest_travel_time(n, m, roads): Determines the shortest travel time from the first intersection (1) to the last intersection (n) in a grid layout using Dijkstra\'s algorithm. Returns the shortest travel time or \\"IMPOSSIBLE\\" if no valid path exists. # Create an adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Priority queue to store (travel_time, intersection) pairs pq = [(0, 1)] # Dictionary to store the shortest distances to each intersection dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 while pq: current_dist, u = heapq.heappop(pq) # If we reached the target, return the distance if u == n: return current_dist for v, t in graph[u]: if dist[u] + t < dist[v]: dist[v] = dist[u] + t heapq.heappush(pq, (dist[v], v)) # If we finish the loop without having reached the target, return \\"IMPOSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"In a kingdom\'s library, there is a shelf with exactly n books arranged in a single row from left to right. The books are numbered from 1 to n based on their original positions. The librarian occasionally shuffles a segment of books to the right and then reverses this segment. You have to determine if the final order of books on the shelf can be achieved by picking one segment, shifting it to the right, and then reversing that segment. Given the number of books n and the final sequence of the books, check if it is possible to get the final sequence from the initial sequence [1, 2, 3, ..., n] by performing exactly one such operation. If it is possible, you should also determine and return the indices of the segment that needs to be shifted and reversed. The first line contains an integer n (1 ≤ n ≤ 1000) which is the number of books. The second line contains space-separated n integers which are the final sequence of books. It is guaranteed that the given sequence is a permutation, i.e., it contains every integer from 1 to n exactly once. If it is impossible to obtain the given permutation from the initial sequence with exactly one such operation, print \\"0 0\\". Otherwise, print two integers l and r (1 ≤ l < r ≤ n) which are the endpoints of the segment that needs to be shifted to the right and reversed to form the given sequence. # Examples: Input: ``` 5 1 5 4 3 2 ``` Output: ``` 2 5 ``` Input: ``` 6 1 3 4 2 5 6 ``` Output: ``` 0 0 ``` # Explanation: In the first example, shifting the segment [2, 5] to the right and then reversing it gives the final sequence [1, 5, 4, 3, 2]. In the second example, it is not possible to achieve the final sequence with exactly one shift and reverse operation.","solution":"def find_segment(n, final_seq): Finds the segment (l, r) which, when shifted to the right and reversed, results in the given final sequence, or returns (0, 0) if it\'s not possible. initial_seq = list(range(1, n + 1)) # Find the start and end of the segment that is reversed l, r = None, None for i in range(n): if initial_seq[i] != final_seq[i]: l = i break for i in range(n - 1, -1, -1): if initial_seq[i] != final_seq[i]: r = i break if l is None and r is None: # When the sequence is already sorted return 0, 0 if l is not None and r is not None: # Reverse the segment from l to r in initial_seq reversed_segment = initial_seq[:l] + list(reversed(initial_seq[l:r+1])) + initial_seq[r+1:] if reversed_segment == final_seq: return l + 1, r + 1 return 0, 0"},{"question":"In a competitive gaming event, players can form teams to compete in various matches. Each team can have up to k players. After each match, teams get points based on their performance. If a team\'s total points exceed a certain value, they qualify for the final championship. You are given a list of player scores, and each score represents the points a player obtained from a match. Your task is to form the maximum number of teams such that the sum of points for each team is at least p. A player can only be part of one team. Output the maximum number of teams that can be formed. The first line contains three integers n, k, and p (1 ≤ n ≤ 200,000, 1 ≤ k ≤ 100, 1 ≤ p ≤ 10^9) — the number of players, the maximum team size, and the minimum points required for a team to qualify, respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10^8) — the points of each player. Output a single integer — the maximum number of teams that can be formed under the given constraints. In the first example, if n=6, k=2, p=10 and the player points are [5, 6, 7, 9, 3, 2]: Team 1: {6, 7} => Total points = 13 (qualified) Team 2: {9, 2} => Total points = 11 (qualified) Team 3: {5, 3} => Total points = 8 (not qualified, so break this team) So the maximum number of teams that can be formed is 2. In the second example, if n=5, k=3, p=15 and the player points are [4, 8, 12, 3, 10]: Team 1: {4, 12} => Total points = 16 (qualified) Team 2: {8, 10, 3} => Total points = 21 (qualified) So the maximum number of teams that can be formed is 2.","solution":"def max_teams(n, k, p, points): Returns the maximum number of teams that can be formed such that the sum of points for each team is at least p and does not exceed k players. points.sort(reverse=True) teams = 0 i = 0 while i < n: team_points = 0 for j in range(k): if i < n: team_points += points[i] i += 1 # If we have the minimum points required, we qualify this team and move to the next if team_points >= p: teams += 1 break # Else if we have already taken k players, break to form a new team if j == k-1: break if team_points < p: break return teams"},{"question":"You are given an array of integers that represents the heights of mountains in a range, ordered from west to east. A scenic route involves traversing through a sequence of mountains where each subsequent mountain is higher than the previous one. Your task is to determine the length of the longest scenic route and the number of different routes of that maximum length. Two routes are considered different if they have at least one mountain in the route with a different index. The first line contains a single integer n — the number of mountains in the range, where 1 ≤ n ≤ 1000. The second line contains n space-separated integers hi where hi represents the height of the i-th mountain. All heights are positive integers and do not exceed 1000. Print two integers: the length of the longest scenic route and the number of different routes of that maximum length. If there are multiple routes of the maximum length, print any of them. Example input: ``` 5 2 1 4 7 3 ``` Example output: ``` 3 2 ``` Explanation: The longest scenic routes are either [1, 4, 7] or [2, 4, 7], both of length 3.","solution":"def longest_scenic_route(n, heights): if n == 0: return (0, 0) dp = [1] * n # Store the length of the longest increasing subsequence ending at each mountain count = [1] * n # Store the count of longest increasing subsequences ending at each mountain for i in range(n): for j in range(i): if heights[j] < heights[i]: if dp[j] + 1 > dp[i]: dp[i] = dp[j] + 1 count[i] = count[j] elif dp[j] + 1 == dp[i]: count[i] += count[j] max_length = max(dp) num_routes = sum(c for l, c in zip(dp, count) if l == max_length) return (max_length, num_routes)"},{"question":"You are given a string with parentheses \'(\' and \')\'. Your task is to determine the minimum number of parentheses insertions required to make the string valid. A string is valid if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. Every closing parenthesis \')\' has a corresponding opening parenthesis \'(\'. 3. The parentheses are correctly nested. For example: - \\"()\\" is valid. - \\"(())\\" is valid. - \\")(\\" is not valid. You need to process multiple input strings and output the minimum number of insertions required for each string to make it valid. The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of strings. Each of the following n lines contains a single string with a length not exceeding 100. For each string, output a single integer — the minimum number of insertions required to make the string valid. Example 1: Input: 3 () (( )) Output: 0 2 1 Example 2: Input: 2 ()()) (()) Output: 1 0","solution":"def min_insertions_to_make_valid(strings): Given a list of strings with parentheses, returns a list of minimal insertions needed to make each string a valid parenthesis string. :param strings: List of strings :return: List of integers representing the necessary insertions for each string. results = [] for s in strings: open_needed = 0 close_needed = 0 for char in s: if char == \'(\': close_needed += 1 elif char == \')\': if close_needed > 0: close_needed -= 1 else: open_needed += 1 results.append(open_needed + close_needed) return results # Example usage: # strings = [\\"()\\", \\"((\\", \\")\\", \\"()())\\", \\"(())\\"] # print(min_insertions_to_make_valid(strings)) # Outputs: [0, 2, 1, 1, 0]"},{"question":"A small city is planning to build a new road network. There are n intersections in the city, numbered from 1 to n. Some pairs of intersections are already connected directly by bi-directional roads. Each road has a specific travel time associated with it. The city planner needs to ensure that any intersection can be reached from any other intersection, possibly via intermediate intersections. Given n intersections and a list of m roads connecting pairs of intersections, your task is to determine the minimum total travel time required to ensure that every intersection is reachable from every other intersection through the newly planned road network. If the network is already connected, return the total travel time of the existing roads. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100,000) — the number of intersections and the number of roads, respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) — the indices of the intersections connected by the road and the travel time of that road. Output a single integer representing the minimum total travel time required to make the entire road network connected. If it is impossible to connect all intersections, print -1. Example: ``` Input: 4 4 1 2 3 2 3 4 3 4 5 1 4 10 Output: 12 ```","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): result = 0 i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result += w union(parent, rank, x, y) for node in range(n): if find(parent, node) != find(parent, 0): return -1 return result def minimum_travel_time(n, roads): if n == 1: return 0 edges = [] for road in roads: u, v, t = road edges.append((u, v, t)) return kruskal(n, edges)"},{"question":"Henry loves baking and he particularly enjoys making pastries. In fact, he is so into baking that he’s created his own bakery! Henry\'s bakery sells n different types of pastries and he has m customers per day. Each type of pastry has a stock level and a price associated with it. As a dedicated shopkeeper, Henry wants to maximize his income, so he always tries to serve as many customers as possible. Each customer places an order for a specific type of pastry. If Henry has enough stock to fulfill the order, he serves the customer and reduces the stock accordingly. If he doesn’t have enough stock, the customer leaves without buying anything. Henry needs to determine the total income he earns by the end of the day. You are given two integers n and m. The next line contains n integers denoting the stock levels of each type of pastry. The following line contains n integers representing the prices of each type of pastry. Each of the next m lines contains an integer representing the type of pastry a customer wants to buy (1-indexed). Your task is to calculate the total income Henry earns after serving as many customers as possible. The first line contains two integers n and m (1 ≤ n, m ≤ 100). The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 100) representing the stock levels of each type of pastry. The third line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) representing the prices of each type of pastry. Each of the next m lines contains an integer ti (1 ≤ ti ≤ n) indicating the type of pastry a customer wants to buy. Output the total income Henry earns for the day. For the first example: If the input is: 3 4 2 5 6 100 200 150 1 2 2 3 Henry serves the first customer with pastry type 1 reducing its stock to 1 and earning 100 units. He serves the second customer with pastry type 2 reducing its stock to 4 and earning 200 units. He serves the third customer with pastry type 2 reducing its stock to 3 and earning 200 units. Finally, he serves the fourth customer with pastry type 3 reducing its stock to 5 and earning 150 units. The total income would be 100 + 200 + 200 + 150 = 650 units. The output should be: 650","solution":"def calculate_total_income(n, m, stock_levels, prices, orders): Calculate the total income from serving customers based on stock levels and prices per type of pastry. :param n: Number of different types of pastries. :param m: Number of customers. :param stock_levels: A list of integers representing stock levels for each type of pastry. :param prices: A list of integers representing prices for each type of pastry. :param orders: A list of integers representing the type of pastry each customer wants to buy. :return: Total income earned by Henry. total_income = 0 for order in orders: pastry_type = order - 1 # Convert 1-indexed to 0-indexed if stock_levels[pastry_type] > 0: total_income += prices[pastry_type] stock_levels[pastry_type] -= 1 return total_income"},{"question":"You are given an array of n integers representing the height of m hills. A hill is defined as starting at a valley, rising to a peak, and then descending to another valley. A valley is any point where the height is less than or equal to both of its neighboring points, and a peak is a point where the height is greater than both of its neighboring points. Your task is to determine the number of hills in the given array. If the array has fewer than 3 elements, then no hills can be formed. The first line of input contains an integer n (2 ≤ n ≤ 10^5) indicating the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (0 ≤ ai ≤ 10^9), denoting the height of each hill. Print a single integer representing the number of hills in the array. # Example Input: ``` 9 2 1 4 7 3 2 5 6 4 ``` Output: ``` 2 ``` The example array forms 2 hills: one is starting at index 1 rising to index 3 (4 to 7) and descending to index 4 (3), and another is starting at index 4 rising to index 7 (5 to 6) and descending to index 8 (4).","solution":"def count_hills(heights): Returns the number of hills in the given list of heights. Parameters: heights (list of int): List of integers representing the heights of the hills. Returns: int: Number of hills. if len(heights) < 3: return 0 num_hills = 0 for i in range(1, len(heights) - 1): if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: num_hills += 1 return num_hills"},{"question":"Frank has an unusual prime number obsession. He collects prime numbers in a special sequence called \\"alternating prime sum\\". The alternating prime sum sequence is defined as follows: The first prime number in the sequence is 2. The second prime is subtracted from the first, the third is added to the sequence, the fourth is subtracted, and so on. Here\'s how the sequence starts: P1 = 2 P2 = 3 P3 = 5 P4 = 7 P5 = 11 Thus, the sequence is formed as: Alternating_prime_sum = 2 - 3 + 5 - 7 + 11 - ... You are given an integer n; calculate the n-th term of Frank\'s \\"alternating prime sum\\" sequence. The only line of input contains an integer n (1 ≤ n ≤ 1000). Output the n-th term of the alternating prime sum sequence. Example: Input 4 Output -3 (Note: To reach the 4th term, the sequence is constructed as 2 - 3 + 5 - 7 = -3.)","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nth_alternating_prime_sum(n): Calculates the n-th term of Frank\'s \\"alternating prime sum\\" sequence. Args: n (int): The term number to compute (1 ≤ n ≤ 1000). Returns: int: The value of the alternating prime sum sequence at the n-th term. count = 0 num = 2 prime_sum = 0 while count < n: if is_prime(num): if count % 2 == 0: prime_sum += num else: prime_sum -= num count += 1 num += 1 return prime_sum"},{"question":"The city of Geekopolis is structured on an n × n grid. The city\'s central administration wants to determine the shortest path for their postal delivery drones. Each block in the city grid can either be navigable or blocked. The drones can only move to orthogonally adjacent blocks (up, down, left, and right). The delivery drone depot is positioned at (sx, sy), and the target delivery location is at (tx, ty). Determine the minimum number of moves required for a drone to travel from the starting point to the target point. If it is impossible for the drone to reach the target point, return -1. The first line of the input contains three integers n, sx, sy, tx, ty (1 ≤ n ≤ 1000, 1 ≤ sx, sy, tx, ty ≤ n) where n is the size of the grid, (sx, sy) is the starting position and (tx, ty) is the target position. The following n lines contain n integers each, where each integer represents a block in the city: - 0 indicates a navigable block - 1 indicates a blocked block Print a single integer — the minimum number of moves required for the drone to travel from the starting point to the target point, or -1 if no such path exists. Example: Input: 5 1 1 5 5 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 Output: 8","solution":"from collections import deque def min_moves(n, sx, sy, tx, ty, grid): Determines the minimum number of moves required for a drone to travel from start point (sx, sy) to target point (tx, ty) on an n x n grid. Returns -1 if no such path exists. # Convert to 0-based indexing for processing sx, sy, tx, ty = sx - 1, sy - 1, tx - 1, ty - 1 if grid[sx][sy] == 1 or grid[tx][ty] == 1: return -1 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Queue for BFS queue = deque([(sx, sy, 0)]) # (x, y, steps) visited = [[False] * n for _ in range(n)] visited[sx][sy] = True while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1"},{"question":"A permutation p of length n is called beautiful if for every i (1 leq i leq n-1) either p[i] mod p[i+1] is zero, or p[i+1] mod p[i] is zero. For example, if p = [4, 2, 8, 1], the permutation is beautiful because: - 4 mod 2 = 0 - 2 mod 8 = 2 but 8 mod 2 = 0 - 8 mod 1 = 0 Given an integer n, find any beautiful permutation of length n that meets the problem\'s conditions. The test case guarantees that a solution always exists. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (2 le n le 100) — the length of the permutation. Output one line per test case. Each line must contain a beautiful permutation of numbers from 1 to n. If there are multiple answers, print any of them.","solution":"def generate_beautiful_permutation(n): Generates a beautiful permutation of length n. if n == 2: return [1, 2] elif n == 3: return [1, 2, 3] # For n >= 4, we can create a beautiful permutation res = [] res.append(n) res.append(n - 1) for i in range(1, n - 1): res.append(i) return res def solve(test_cases): results = [] for n in test_cases: results.append(generate_beautiful_permutation(n)) return results"},{"question":"A local government wants to improve its road infrastructure to minimize travel costs between towns. There are `n` towns and `m` bidirectional roads connecting some pairs of towns, with each road having an associated cost. The government plans to construct new roads to ensure that every town can be reached from every other town with a minimal total cost. The goal is to determine the minimum possible cost to make the road network connected, such that the cost of construction is minimized. The first line contains two integers `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 100000) — the number of towns and existing roads respectively. The next `m` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100000), representing a road between town `u` and town `v` with cost `w`. It is guaranteed that no road connects a town to itself, and there is at most one road between any pair of towns. Print a single integer: the minimum total cost to make the road network connected. If it is impossible to connect the towns, print `-1`. **Example:** ``` Input: 4 3 1 2 3 2 3 4 3 4 5 Output: 12 Input: 2 1 1 2 1 Output: 1 Input: 3 1 1 2 2 Output: -1 ``` Explanation of Examples: In the first example, the minimum total cost to connect all towns is 12. In the second example, the cost to connect the two towns is 1 as there is only one road. In the third example, it is impossible to connect all towns with the given roads.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def minimum_cost_to_connect_towns(n, roads): if n == 1: return 0 edges = [] for road in roads: u, v, w = road edges.append((w, u-1, v-1)) edges.sort() parent = list(range(n)) rank = [0] * n total_cost = 0 edges_used = 0 for edge in edges: w, u, v = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_cost += w edges_used += 1 if edges_used == n - 1: return total_cost return -1 # Not all towns are connected # Example usage: # Input: n = 4, roads = [(1, 2, 3), (2, 3, 4), (3, 4, 5)] # Output: 12"},{"question":"A well-known treasure hunter recently discovered a map that provides clues to finding a hidden treasure. According to the map, the treasure can be found on one of several islands, forming a chain. Each island is connected to the next by a single bridge, and it is possible to travel in both directions between any two connected islands. The hunter represents the islands in the form of an undirected graph with n nodes, where each node corresponds to an island, and each edge connecting two nodes corresponds to a bridge between those islands. To make the hunt more challenging, each island i has a certain amount of treasure t_i hidden on it. The treasure hunter wants to find the maximum sum of treasure they can collect by visiting a contiguous subchain of islands. The hunter can start at any island and can end the journey at any island, as long as the islands visited form a contiguous segment in the chain. The journey must include at least one island. Given the chain of islands and the treasure amounts on each island, determine the maximum sum of treasure the hunter can collect and the number of ways this maximum sum can be achieved. The first line contains an integer n (1 le n le 10^5) — the number of islands. The second line contains n integers t_1, t_2, ldots, t_n (-10^9 le t_i le 10^9) — the amount of treasure on each island. Output two integers: the maximum sum of treasure the hunter can collect and the number of ways this maximum sum can be achieved, modulo 10^9+7. **Example:** Input: ``` 5 -2 1 -3 4 -1 ``` Output: ``` 4 1 ``` Explanation: - The maximum sum of treasure is achieved by visiting the subchain consisting of the 4th island only. There is just one way to achieve this maximum sum.","solution":"def find_max_treasure_and_ways(n, treasures): MOD = 10**9 + 7 max_sum = -float(\'inf\') current_sum = 0 ways = 0 current_ways = 1 for treasure in treasures: if current_sum + treasure > treasure: current_sum += treasure current_ways = current_ways else: current_sum = treasure current_ways = 1 if current_sum > max_sum: max_sum = current_sum ways = current_ways elif current_sum == max_sum: ways = (ways + current_ways) % MOD return max_sum, ways # Function to read inputs from standard input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) treasures = list(map(int, data[1:])) max_treasure, num_ways = find_max_treasure_and_ways(n, treasures) print(max_treasure, num_ways)"},{"question":"Morgan loves collecting coins. She has a collection of n coins, each with a certain value. She wants to divide the coins into two groups such that the absolute difference between the total values of the two groups is minimized. Can you help her achieve this? The first line of input contains an integer n (1 <= n <= 20) representing the number of coins. The second line contains n space-separated integers v1, v2, ..., vn (1 <= vi <= 100) representing the values of the coins. Output a single integer that represents the minimum possible absolute difference between the total values of the two groups. For example: Input: 4 1 4 9 16 Output: 2 In this case, one optimal way to divide the coins is to put the coins with values {1, 16} in one group and {4, 9} in the other group. The sums of the two groups are 17 and 13, and the absolute difference is 4. In another example: Input: 3 3 1 2 Output: 0 In this case, dividing the coins into groups {3, 1} and {2} gives group sums of 4 and 2. The absolute difference is 2. Another optimal way is dividing them as {1, 2} and {3}, giving group sums of 3 and 3 with an absolute difference of 0.","solution":"def min_abs_difference(n, coin_values): This function returns the minimum possible absolute difference between the total values of two groups that can be formed out of the given coin values. total_sum = sum(coin_values) possible_sums = {0} for coin in coin_values: new_sums = possible_sums.copy() for s in possible_sums: new_sums.add(s + coin) possible_sums = new_sums min_diff = float(\'inf\') for sum1 in possible_sums: sum2 = total_sum - sum1 min_diff = min(min_diff, abs(sum1 - sum2)) return min_diff"},{"question":"John is a software engineer who loves solving tricky coding problems. One day, he encountered a unique encryption method where every character in a string is replaced by a character found by moving a certain number of positions forward in the alphabet. The end of the alphabet wraps around to the beginning. For example, if the shift value is 3, \'a\' becomes \'d\', \'z\' becomes \'c\', and so on. John wants to write a function that takes a string and a shift value and returns the encrypted string. However, he also wants the function to be able to work with both uppercase and lowercase letters while leaving other characters unchanged. Can you help John to write a function that performs this encryption? # Input - The first line contains an integer `n` (1 leq n leq 100), the number of characters in the string. - The second line contains a string of length `n` consisting of uppercase letters, lowercase letters, and/or other characters (spaces, punctuation, etc.). - The third line contains an integer `k` (1 leq k leq 25), the shift value. # Output - Output the encrypted string. # Example Input: 7 Hello,! 3 Output: Khoor,! Input: 12 Abc Xyz! 4 Output: Efg Bcd!","solution":"def encrypt_string(n, input_string, k): Encrypts the input string by shifting each letter by k positions in the alphabet. Wraps around the alphabet, handles both uppercase and lowercase letters, and leaves other characters unchanged. :param n: Length of the string :param input_string: The string to be encrypted :param k: The shift value :return: The encrypted string encrypted_string = [] for char in input_string: if \'a\' <= char <= \'z\': encrypted_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) elif \'A\' <= char <= \'Z\': encrypted_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) else: encrypted_char = char encrypted_string.append(encrypted_char) return \\"\\".join(encrypted_string)"},{"question":"Tom the Cat loves to play with magic squares. A magic square of order n is an arrangement of numbers in a n x n matrix, such that the sum of every row, every column, and both main diagonals is the same. This magic sum is known as the magic constant. Tom found an incomplete magic square of order n, containing some positive integers and some empty cells (represented by 0). He wants to fill the empty cells, so that the resulting square is a magic square. There might be multiple ways to fill the cells or none at all. Help Tom by determining if it is possible to complete the magic square, and if so, provide any of the valid completions. The first line of input contains a single integer n (2 ≤ n ≤ 10), indicating the order of the magic square. The next n lines contain n space-separated integers each, where 0 represents an empty cell, and any positive integer represents a given value in the magic square. Output n lines, each containing n space-separated integers representing one of the valid completions of the magic square. If it is not possible to form a magic square, output a single line containing the integer -1. Example Input: 3 8 0 0 0 5 0 0 0 0 Example Output: 8 1 6 3 5 7 4 9 2 Note: - There might be multiple correct solutions; you are allowed to output any one of them. - If no valid magic square can be formed, output -1.","solution":"def magic_square(n, square): Complete the given n x n incomplete magic square if possible, otherwise return -1. from itertools import permutations def is_magic(square, n, magic_const): for row in square: if sum(row) != magic_const: return False for col in range(n): if sum(square[row][col] for row in range(n)) != magic_const: return False if sum(square[i][i] for i in range(n)) != magic_const: return False if sum(square[i][n - i - 1] for i in range(n)) != magic_const: return False return True all_nums = set(range(1, n * n + 1)) given_nums = set(num for row in square for num in row if num != 0) empty_cells = [(i, j) for i in range(n) for j in range(n) if square[i][j] == 0] if not empty_cells: if is_magic(square, n, sum(square[0])): return square else: return -1 remaining_nums = all_nums - given_nums magic_const = sum(range(1, n * n + 1)) // n for filled_sequence in permutations(remaining_nums): new_square = [row[:] for row in square] for idx, (i, j) in enumerate(empty_cells): new_square[i][j] = filled_sequence[idx] if is_magic(new_square, n, magic_const): return new_square return -1"},{"question":"Alice is developing a feature for an application that processes streaming sensor data. The data is received as a continuous stream of integers, and Alice needs to periodically determine the median value of this stream up to that point in time. To accomplish this, Alice must build a system that supports the following operations efficiently: 1. `addNum(int num)`: Add an integer `num` to the stream of numbers. 2. `findMedian()`: Return the median of all integers added to the stream so far. The median is the middle value in a list of integers when the list is ordered, or the average of the two middle values if the list has an even number of integers. Write a class `MedianFinder` that follows this interface: ```python class MedianFinder: def __init__(self): Initialize your data structure here. def addNum(self, num: int) -> None: Add an integer num from the data stream to the data structure. def findMedian(self) -> float: Return the median of all elements so far. ``` **Example:** ``` Input: commands = [\\"MedianFinder\\",\\"addNum\\",\\"addNum\\",\\"findMedian\\",\\"addNum\\",\\"findMedian\\"] values = [[],[1],[2],[],[3],[]] Output: [None,None,None,1.5,None,2.0] Explanation: MedianFinder medianFinder = new MedianFinder(); medianFinder.addNum(1); // arr = [1] medianFinder.addNum(2); // arr = [1, 2] medianFinder.findMedian(); // return 1.5 medianFinder.addNum(3); // arr = [1, 2, 3] medianFinder.findMedian(); // return 2.0 ``` **Constraints:** - There will be at least one call to `findMedian` when `addNum` has been called at least once. - At most `5 * 10^4` calls will be made to `addNum` and `findMedian`. Write a solution that observes optimal complexity for the add and find operations. **Note:** Ensure your solution handles large data efficiently and can process streaming input in real time.","solution":"import heapq class MedianFinder: def __init__(self): Initialize the MedianFinder data structure. self.max_heap = [] # max heap to store the smaller half of the numbers self.min_heap = [] # min heap to store the larger half of the numbers def addNum(self, num: int) -> None: Add an integer num from the data stream to the data structure. # Always add to max-heap first heapq.heappush(self.max_heap, -num) # Balance max-heap and min-heap if (self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0])): val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, val) # Ensure max-heap has equal or one more element than min-heap if len(self.max_heap) > len(self.min_heap) + 1: val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, val) if len(self.min_heap) > len(self.max_heap): val = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -val) def findMedian(self) -> float: Return the median of all elements so far. if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] else: return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"You are given an array of integers and a target value. Your task is to determine if there exists a pair of numbers in the array whose sum equals the target value. If such a pair exists, print the indices of the two numbers. If there are multiple pairs, any one pair will suffice. If no such pair exists, print \\"-1\\". Write a function to solve the problem. **Function Signature:** ```python def find_pair_with_sum(arr: List[int], target: int) -> Union[Tuple[int, int], int]: ``` **Input:** - The first line contains an integer n (1 ≤ n ≤ 100000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. - The third line contains a single integer target (1 ≤ target ≤ 2 * 10^9) — the target sum. **Output:** - Print two space-separated integers representing the indices (1-based) of the two numbers whose sum is equal to the target. - If there are multiple valid answers, print any one. - If no such pair exists, print -1. **Example:** ``` Input: 5 2 7 11 15 1 9 Output: 1 2 ``` **Explanation:** In the first example, the sum of the elements at indices 1 and 2 (2 + 7) equals the target value 9. Similarly, the sum of elements at indices 2 and 5 (14 + 6) also equals the target value 20. Therefore, any pair of indices that result in the target sum are considered correct. Note: In the output, the pairs are expected to be in 1-based indexing.","solution":"from typing import List, Tuple, Union def find_pair_with_sum(arr: List[int], target: int) -> Union[Tuple[int, int], int]: Returns a tuple of indices (1-based) of two numbers in `arr` whose sum is equal to `target`. If no such pair exists, return -1. num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement] + 1, index + 1) # Return 1-based index num_to_index[num] = index return -1"},{"question":"After a long day of solving puzzles, Ann decided to relax and play a game involving sequences of numbers. She\'s interested in finding out some properties of certain sequences. Given a sequence of length `n` consisting of integers, she wants to know the maximum possible sum of any subarray of length `k`. Can you help her with this task? Implement a function called `max_subarray_sum_k` that takes an integer array `arr` and an integer `k`, and returns the maximum sum of any subarray of exactly length `k`. # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100000) — the length of the sequence and the length of the subarray respectively. - The second line contains `n` integers `arr[i]` (|arr[i]| ≤ 1000) — the elements of the sequence. # Output - A single integer — the maximum sum of any subarray of length `k`. # Example Input ``` 5 2 1 2 3 4 5 ``` Output ``` 9 ``` Explanation The subarrays of length 2 are: [1,2], [2,3], [3,4], [4,5]. The sums are 3, 5, 7, 9. The maximum sum is 9. # Notes - A subarray of an array is a consecutive sequence of elements within the array. - Consider implementing the sliding window technique to efficiently solve the problem. This technique involves maintaining a window of length `k` and sliding it over the array to keep track of the sum of elements within the window.","solution":"def max_subarray_sum_k(arr, k): Returns the maximum sum of any subarray of length k. Parameters: arr (list of int): The input array of integers. k (int): The length of the subarray. Returns: int: The maximum sum of any subarray of length k. n = len(arr) # Initial sum of the first window current_sum = sum(arr[:k]) max_sum = current_sum # Slide the window over the array for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are tasked with designing an efficient algorithm to manage a vending machine in a highly trafficked area. The machine dispenses products that are stored in columns. Each column can hold multiple products of varying types and quantities. The vending machine\'s layout is represented by a 2-dimensional grid, where each cell\'s value denotes the type of product stored in that position. However, after multiple uses and restocks, some columns might be only partially filled. When a product of a specific type is requested, the machine must dispense it from the top-most filled spot in its respective column. Your task is to compute the number of steps required for the machine to dispense the requested product type, considering that each column can be accessed independently and vertically. The given input consists of: - An integer `m` and an integer `n` that represent the number of rows and columns, respectively. - An `m x n` grid where each cell value is an integer representing a product type, or 0 indicating an empty spot. - An integer `p` that represents the product type being requested. The columns are indexed from 1 to `n` from left to right, and rows from 1 to `m` from top to bottom. Return the minimum number of steps required to dispense the product type `p`. If the product type `p` is not available in the machine, return -1. Input Format: - The first line contains two space-separated integers, `m` and `n`. - The following `m` lines each contain `n` space-separated integers representing the grid. - The last line contains a single integer `p`. Output Format: - Print a single integer representing the minimum number of steps required, or -1 if the product type is not found in the machine. Example Input: 5 4 1 0 3 4 2 6 0 3 0 2 5 5 1 6 2 2 0 0 0 4 2 Example Output: 1","solution":"def dispense_product(grid, product_type): Returns the minimum number of steps required to dispense the product_type from the vending machine grid, or -1 if the product_type is not found. m = len(grid) n = len(grid[0]) min_steps = float(\'inf\') found = False for col in range(n): for row in range(m): if grid[row][col] == product_type: min_steps = min(min_steps, row) found = True break return min_steps if found else -1 # Example input m = 5 n = 4 grid = [ [1, 0, 3, 4], [2, 6, 0, 3], [0, 2, 5, 5], [1, 6, 2, 2], [0, 0, 0, 4] ] product_type = 2 print(dispense_product(grid, product_type)) # Outputs: 1"},{"question":"You\'re working on an online trading platform that allows users to monitor stock prices and make transactions quickly. One of the features of the platform is to show the maximum possible profit from a single buy-sell transaction within a given window of time (i.e., a single day). You are given a list of stock prices for one day where each price corresponds to a specific minute, starting from the market opening until the market closing. Your task is to write a function that determines the maximum possible profit that can be achieved from a single buy-sell transaction within that day. If no profit can be achieved, your function should return 0. The first line of the input contains an integer `n` (1 ≤ n ≤ 1,000,000), the number of minutes the market is open. The second line contains `n` integers, where the i-th integer (0 ≤ p_i ≤ 10^5) represents the stock price at minute `i`. Output a single integer: the maximum possible profit that can be achieved with one buy-sell transaction within that day. If no profit can be made, output 0. **Example:** Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 5 ``` Explanation: The optimal transaction is to buy at minute `1` when the price is 1, and sell at minute `4` when the price is 6, resulting in a profit of 6 - 1 = 5. **Example:** Input: ``` 4 7 6 4 3 ``` Output: ``` 0 ``` Explanation: In this case, no transaction can lead to a profit, so the output is 0.","solution":"def max_profit(stock_prices): Takes a list of stock prices and returns the maximum profit that can be achieved from a single buy-sell transaction. If no profit can be achieved, returns 0. if not stock_prices or len(stock_prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a kingdom far away, there are n villages arranged in a straight line. The king plans to construct a railway line that connects some of the villages. However, he wants to ensure that all railway stations are exactly k villages apart. For example, if a railway station is built in village i, then the next station should be either in village i + k or i - k. Help the king find out the minimum number of railway stations required so that every village has access to at least one railway station within a distance of k villages. If it is not possible to achieve this, print -1. The first line of input contains two integers, n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ n). Output the minimum number of railway stations required or -1 if it\'s not possible. Example 1: Input: 10 2 Output: 5 Example 2: Input: 15 4 Output: 4 Example 3: Input: 7 10 Output: -1 Explanation: In the first example, one optimal way to place railway stations is at villages 1, 3, 5, 7, and 9. In the second example, one optimal setup includes stations at villages 1, 5, 9, and 13. In the third example, it is impossible to cover all villages as the distance k is greater than n.","solution":"def min_stations(n, k): if k > n: return -1 # Minimum stations needed to cover all villages stations = (n + k - 1) // k return stations"},{"question":"Mariya is packing fruits for her farm\'s produce delivery service. She has a unique way of arranging the fruits so that each customer\'s order looks appealing and balanced. She wants to ensure that no two consecutive pieces of fruit in the box are the same while also meeting the required quantity for each type of fruit. Mariya needs your help to automate this packing process. She will give you the number of different types of fruits and the quantity needed for each type. Your task is to determine an arrangement of fruits in the box that satisfies her conditions. The first line contains an integer n (2 ≤ n ≤ 100) — the number of different types of fruits. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the quantity needed of each type of fruit. The fruits are represented by lowercase letters starting from \'a\' and will always be given in order. Print a single line containing a single possible arrangement of the fruits in the box. If it is not possible to create such an arrangement, print -1. In the first test case, the possible arrangement of fruits could be \\"abac\\" because it uses 2 \'a\'s and 1 each of \'b\' and \'c\' without repeating any two fruits consecutively. In the second test case, it is not possible to arrange 3 \'a\'s consecutively without violating the condition. Therefore, the answer is -1.","solution":"def arrange_fruits(n, quantities): Arrange fruits so that no two consecutive fruits are the same. Args: n: int - number of different types of fruits quantities: list of ints - quantity needed of each type of fruit Returns: str - an arrangement of fruits that meets the condition or -1 if not possible from collections import Counter import heapq # tuple (-count, fruit) max_heap = [(-count, chr(97 + i)) for i, count in enumerate(quantities)] heapq.heapify(max_heap) prev_fruit = None result = [] while max_heap: count, fruit = heapq.heappop(max_heap) if not result or result[-1] != fruit: result.append(fruit) if count + 1 != 0: heapq.heappush(max_heap, (count + 1, fruit)) prev_fruit = fruit else: if not max_heap: return -1 next_count, next_fruit = heapq.heappop(max_heap) result.append(next_fruit) if next_count + 1 != 0: heapq.heappush(max_heap, (next_count + 1, next_fruit)) heapq.heappush(max_heap, (count, fruit)) return \'\'.join(result)"},{"question":"Alice has a collection of unique prime numbers and she loves to create different subsets of these primes. Given a list of prime numbers, she wants to know how many subsets of these primes have a product that is also a prime number. She needs your help to find out. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 2, 3, 5, 7, and 11 are all primes. You need to determine the number of such subsets of the given prime numbers where the product of subset elements is also a prime number. The first line contains an integer n (1 le n le 20) representing the number of prime numbers in Alice\'s collection. The second line contains n distinct prime numbers separated by spaces, each prime number p_i (2 leq p_i leq 10^6). Output a single integer, the number of subsets of Alice\'s prime numbers such that the product of the subset elements is also a prime number. # Example Input ``` 5 2 3 5 7 11 ``` Output ``` 5 ``` Explanation Each single prime number in the list forms a subset with a product which is also a prime number: {2}, {3}, {5}, {7}, {11}. There are no other subsets with a product that is a prime number. So the answer is 5.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def count_prime_product_subsets(primes): Function to count subsets whose product is also a prime number. from itertools import combinations count = 0 # Iterate over all possible subset sizes for r in range(1, len(primes)+1): # Iterate over all combinations of the current subset size for subset in combinations(primes, r): product = 1 for num in subset: product *= num if is_prime(product): count += 1 return count # Example usage n = 5 primes = [2, 3, 5, 7, 11] print(count_prime_product_subsets(primes)) # Output: 5"},{"question":"Four students, Amy, Bob, Cathy, and Dave, are participating in a relay running event. They have been assigned specific lap times, represented by four non-negative integers a, b, c, and d, indicating the number of minutes each student takes to complete their lap. Each student must complete exactly one lap, and the students can run in any order. Your task is to determine the fastest possible total time for all four students to complete the relay race. The first line contains four integers separated by space: 0 ≤ a, b, c, d ≤ 1000, representing the lap times for Amy, Bob, Cathy, and Dave respectively. Output one integer representing the fastest possible total time for the relay race. For example, if their lap times are 5, 3, 7, and 2 respectively, the total time they will take if run in the optimal order is 2 + 3 + 5 + 7 = 17 minutes.","solution":"def fastest_relay_time(a, b, c, d): Returns the fastest possible total time for all four students to complete the relay race. # Since each student completes exactly one lap, the total time is simply the sum of all lap times. return a + b + c + d"},{"question":"Peter has been given a challenge to build a rectangular grid of size `n x m` using exactly `k` 1x1 tiles. The tiles cannot overlap, go outside the grid, or leave any empty spaces inside the grid. Peter can place each 1x1 tile either horizontally or vertically. Your task is to determine whether it is possible for Peter to exactly cover a rectangular grid of size `n x m` using exactly `k` tiles. Input - The first line contains three integers `n`, `m`, and `k` (1 ≤ n, m ≤ 100, 1 ≤ k ≤ n * m) — the dimensions of the grid, and the number of 1x1 tiles. Output - Print \\"YES\\" if it is possible to cover the grid completely using exactly `k` tiles. Otherwise, print \\"NO\\". # Example Input ``` 3 4 12 ``` Output ``` YES ``` Input ``` 2 3 5 ``` Output ``` NO ``` # Notes In the first example, the grid has 12 cells (3 rows and 4 columns), and Peter needs exactly 12 tiles to cover it fully, which is possible. In the second example, the grid has 6 cells (2 rows and 3 columns) but Peter only has 5 tiles, thus it is not possible to cover the entire grid.","solution":"def can_cover_grid(n, m, k): Determine if it\'s possible to cover an n x m grid with exactly k 1x1 tiles. Args: n (int): Number of rows in the grid. m (int): Number of columns in the grid. k (int): Number of 1x1 tiles. Returns: str: \\"YES\\" if it\'s possible to cover the grid with exactly k tiles, otherwise \\"NO\\". # The grid must have exactly n * m tiles to be fully covered. if n * m == k: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a sequence of n integers, and you are required to find the maximal sum of a subsequence such that no two elements in this subsequence are consecutive elements in the original sequence. In other words, you need to select a subset of numbers from the sequence such that no two selected numbers were neighbors in the original sequence. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9). Print the sum of the optimal subsequence on a single line. Example 1: Input: 4 3 2 5 10 Output: 13 Example 2: Input: 5 3 2 7 10 12 Output: 22 Explanation: In the first example, the optimal subsequence is {3, 10}, giving a sum of 13. In the second example, the optimal subsequence is {3, 10, 12}, giving a sum of 25.","solution":"def max_non_consecutive_sum(seq): if not seq: return 0 n = len(seq) if n == 1: return seq[0] dp = [0] * n dp[0] = seq[0] dp[1] = max(seq[0], seq[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + seq[i]) return dp[-1]"},{"question":"You are given a list of n integers, which represent the energy levels of magical creatures. You need to select three different creatures to perform a ritual. The effectiveness of the ritual is determined by the product of the energy levels of the three selected creatures. Your task is to find the maximum possible product of the energy levels of any three different creatures. The first line of input contains a single integer n (3 ≤ n ≤ 10^5) — the number of magical creatures. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^9) — the energy levels of the magical creatures. Output a single integer — the maximum product of the energy levels of any three different creatures. For example, if the given energy levels are 1, 2, 3, 4, and 5, the maximum product would be 3 * 4 * 5 = 60. In another example, if the energy levels are -1, -2, -3, 1, 2, 3, the maximum product would be -3 * -2 * 3 = 18.","solution":"def maximum_product_of_three(arr): This function returns the maximum product of the energy levels of any three different creatures. :param arr: List of integers representing the energy levels of the creatures. :type arr: list :return: Maximum product of the energy levels of any three different creatures. :rtype: int n = len(arr) if n < 3: return None # Sort the array arr.sort() # Maximum product can be composed either by: # 1. Product of the three largest numbers # 2. Product of the two smallest numbers (which can be negative) and the largest number max_product = max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1]) return max_product"},{"question":"Petra loves to collect rare coins and has come across a unique challenge. She has a collection of coins lined up in a row, each with a certain value. Petra can choose any subset of these coins to maximize her collection\'s worth, but with one condition: she cannot pick two adjacent coins. Given the values of the coins, help Petra determine the maximum value she can achieve. The first input line contains a single integer t (1 leq t leq 100) — the number of test cases. Each test case starts with an integer n (1 leq n leq 100000) — the number of coins. The next line contains n space-separated integers, where the i-th integer a_i (1 leq a_i leq 1000) represents the value of the i-th coin. Print one integer for each test case — the maximum value Petra can achieve by selecting non-adjacent coins. In the first test case, Petra could choose coins with values 2 and 9, making a total of 11. In the second test case, a possible selection is the coin with the value 5, giving a total of 5.","solution":"def max_subset_sum(n, coins): This function calculates the maximum subset sum of non-adjacent elements. :param n: The number of coins. :param coins: The list of coin values. :return: The maximum value Petra can achieve by selecting non-adjacent coins. if n == 0: return 0 elif n == 1: return coins[0] # DP array to store the maximum sum until each position dp = [0] * n dp[0] = coins[0] dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1] def max_value(t, test_cases): results = [] for i in range(t): n, coins = test_cases[i] results.append(max_subset_sum(n, coins)) return results"},{"question":"Danny loves playing board games, especially those with an interesting grid layout. He recently came across a unique game that involves a grid of size n times m. Each cell in the grid has a certain value which can be positive, negative, or zero. He can start at any cell on the first row and his goal is to reach any cell on the last row, moving only downwards or diagonally down-left or down-right. The challenge Danny faces is to maximize the sum of the values of the cells he visits on his way from the first row to the last row. Help Danny find the maximum sum he can achieve. You are given the dimensions of the grid and the grid values. Determine the maximum sum possible for Danny. # Input The first line contains two integers n and m (1 leq n leq 1000, 1 leq m leq 1000) — the number of rows and columns of the grid. The next n lines contain m integers each — the grid values. The value of each cell lies between -10^9 and 10^9. # Output Output a single integer — the maximum sum Danny can achieve. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 18 ``` # Explanation Danny can start at cell (1,1) with value 1, move to cell (2,2) with value 5, and finally to cell (3,3) with value 9, giving a total sum of 1 + 5 + 9 = 15. The optimal path is 3-6-9 with a total sum of 18. Another optimal sum is 2-5-8 which also sums to 15. (Note: You can choose to start at any cell from the first row and end at any cell from the last row, making sure to maximize the sum.)","solution":"def max_sum_path(grid, n, m): # Initialize dp table to store the maximum sums dp = [[0] * m for _ in range(n)] # Initialize the first row of dp with the values of the grid (start points) for j in range(m): dp[0][j] = grid[0][j] # Fill the dp table row by row for i in range(1, n): for j in range(m): # Get the maximum sum from the upper row cells top = dp[i-1][j] top_left = dp[i-1][j-1] if j-1 >= 0 else float(\'-inf\') top_right = dp[i-1][j+1] if j+1 < m else float(\'-inf\') dp[i][j] = grid[i][j] + max(top, top_left, top_right) # The maximum sum will be the max value in the last row return max(dp[n-1])"},{"question":"Alice loves designing patterns with numbers. She especially likes working with matrices where specific values are placed according to her unique rules. Recently, she created a new type of pattern where for any given integer, the matrices must follow these rules: 1. The matrix is always square with a size of n times n. 2. Each cell in the matrix contains non-negative integers. 3. The sum of the elements in any row or column must be equal to a given integer k. Now, Alice wants to know if she can construct such a matrix for a given size n and sum k. If possible, she also wants to see one example of such a matrix. The first line contains two integers n and k (1 leq n leq 50, 0 leq k leq 10^4) which represent the size of the matrix and the required sum of each row and column. If it is possible to construct the matrix, output \\"YES\\" and then the matrix itself. If it is not possible, output \\"NO\\". # Examples: Input ``` 3 6 ``` Output ``` YES 2 2 2 2 2 2 2 2 2 ``` Input ``` 4 0 ``` Output ``` YES 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` Input ``` 2 1 ``` Output ``` NO ``` Note: In the first example, the sum of each row and column is 6, satisfying Alice\'s condition. In the second example, since all rows and columns sum to 0, the condition is satisfied with all elements being zero. In the third example, it is impossible to satisfy all rows and columns summing to 1 with non-negative integers in a 2x2 matrix.","solution":"def construct_matrix(n, k): Constructs an n x n matrix where the sum of each row and each column equals k. If such a matrix is possible, returns \\"YES\\" followed by the matrix. Otherwise, returns \\"NO\\". # If k cannot be evenly divided into n cells, return NO if k % n != 0: return (\\"NO\\",) value = k // n matrix = [[value] * n for _ in range(n)] return (\\"YES\\", matrix) def format_matrix_output(n, k): result = construct_matrix(n, k) if result[0] == \\"NO\\": return \\"nNOn\\" else: matrix = result[1] output = \\"nYESn\\" for row in matrix: output += \' \'.join(map(str, row)) + \'n\' return output"},{"question":"Peter is learning about bitwise operations and wants to practice his skills. You need to help Peter solve the following problem: Given an array of integers, determine the maximum bitwise AND value that can be obtained by any pair of elements in the array. # Input - The first line contains a single integer n (2 leq n leq 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the elements of the array. # Output - Output a single integer — the maximum bitwise AND value of any pair of elements in the array. # Example Input ``` 5 3 8 2 6 7 ``` Output ``` 6 ``` # Note In the example above, the pairs and their bitwise AND calculations are: - 3 & 8 = 0 - 3 & 2 = 2 - 3 & 6 = 2 - 3 & 7 = 3 - 8 & 2 = 0 - 8 & 6 = 0 - 8 & 7 = 0 - 2 & 6 = 2 - 2 & 7 = 2 - 6 & 7 = 6 The maximum bitwise AND value is 6.","solution":"def max_bitwise_and(arr): Returns the maximum bitwise AND value of any pair of elements in the array. max_and = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): current_and = arr[i] & arr[j] if current_and > max_and: max_and = current_and return max_and"},{"question":"In a labyrinth-like dungeon, there are N rooms connected by one-way corridors. Each room is uniquely identified by an integer from 1 to N. Your mission is to find a path to escape from the dungeon starting from room 1 and ending in room N. However, there\'s a catch: The dungeon is built in such a way that some corridors have special teleportation properties that allow you to skip to multiple rooms, but using such corridors costs you some units of magic energy. This means whenever you enter a room using a special teleportation corridor, you\'ll lose a specific amount of energy. You have an initial amount of magic energy E. To determine whether escape is possible and to find the minimal energy cost to reach room N, you need to calculate the minimum energy required to reach the final room. The first line of input contains three integers N, M, and E (1 ≤ N ≤ 1000, 0 ≤ M ≤ 10000, 1 ≤ E ≤ 1000) — the number of rooms, the number of one-way corridors, and the initial amount of magic energy you have. Each of the next M lines contains three integers u, v, and w (1 ≤ u, v ≤ N, 0 ≤ w ≤ E) — indicating that there is a one-way corridor from room u to room v with a magic energy cost of w. A magic energy cost of 0 means that the corridor does not require any energy to traverse. Output a single integer — the minimal energy cost to reach the final room N from the starting room 1. If it is not possible to reach room N, output \\"NO ESCAPE\\". Example input: ``` 5 6 20 1 2 5 2 3 7 3 5 3 1 4 2 4 5 10 2 5 8 ``` Example output: ``` 17 ``` In this example, the optimal path is 1 -> 4 -> 5, using a total energy of 17. The path 1 -> 2 -> 3 -> 5 consumes more energy (5 + 7 + 3 = 15) than going directly through room 4, which would make the total energy cost 12 (2 + 10).","solution":"import heapq def min_energy_to_escape(N, M, E, corridors): Calculate the minimal energy cost to escape the dungeon from room 1 to room N. :param N: Number of rooms :param M: Number of corridors :param E: Initial amount of magic energy :param corridors: List of tuples where each tuple represents a corridor in the form (u, v, w) with u as the start room, v as the end room, and w as the energy cost. :return: Minimal energy cost to reach room N, or \\"NO ESCAPE\\" if not possible. # Create the graph as an adjacency list graph = [[] for _ in range(N + 1)] for u, v, w in corridors: graph[u].append((v, w)) # Priority queue to implement Dijkstra\'s algorithm pq = [(0, 1)] # (current_energy_cost, current_room) min_energy = [float(\'inf\')] * (N + 1) min_energy[1] = 0 while pq: current_cost, current_room = heapq.heappop(pq) if current_room == N: return current_cost for neighbor, cost in graph[current_room]: new_cost = current_cost + cost if new_cost < min_energy[neighbor]: min_energy[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return \\"NO ESCAPE\\""},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Your task is to check if it is possible to remove some (possibly zero) edges from the graph to obtain a tree. A tree is an undirected graph in which any two vertices are connected by exactly one path, and there are no cycles. **Input:** The first line of the input contains two integers `n` and `m` (1 le n, m le 10^5). The next `m` lines each contain two integers `u` and `v` (1 le u, v le n), indicating that there is an edge between vertices `u` and `v`. **Output:** Print \\"YES\\" (without quotes) if it is possible to remove zero or more edges to get a tree. Otherwise, print \\"NO\\". **Examples:** **Input:** ``` 4 5 1 2 1 3 2 3 3 4 2 4 ``` **Output:** ``` YES ``` **Input:** ``` 3 1 1 2 ``` **Output:** ``` NO ``` **Explanation:** In the first example, you can remove the edges (2, 3) and (2, 4) to get the tree structure: - 1 - 2 - 1 - 3 - 3 - 4 In the second example, it is impossible to obtain a tree from the given graph because there are not enough edges to connect all vertices in a tree structure.","solution":"def can_form_tree(n, m, edges): from collections import defaultdict, deque if m < n - 1: return \\"NO\\" if m >= n: return \\"YES\\" # function to run BFS and check connectivity def bfs(start, adj_list, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = {i: False for i in range(1, n+1)} bfs(1, adj_list, visited) # check if all vertices are visited for i in range(1, n+1): if not visited[i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a city grid of size n x m where each cell in the grid represents a building which has a certain height. Your task is to identify the largest rectangular area in the grid where every cell within the rectangle has the same height. The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the city grid. - The next n lines contain m integers each, representing the heights of the buildings in the grid. Output: - Print a single integer, the largest possible area of a rectangle where every building within the rectangle has the same height. **Example:** Input: ``` 4 5 1 1 1 0 0 1 1 1 0 0 1 1 1 0 0 0 0 0 0 0 ``` Output: ``` 9 ``` **Explanation:** The largest rectangle where every cell has the same height is formed by the submatrix: ``` 1 1 1 1 1 1 1 1 1 ``` The area of this rectangle is 3 * 3 = 9.","solution":"def largest_rectangle_area(grid): This function takes a 2D list of integers representing building heights and returns the largest rectangular area where every building within the rectangle has the same height. if not grid: return 0 n, m = len(grid), len(grid[0]) max_area = 0 # Create a dictionary to hold height specific histograms height_histograms = {} for i in range(n): for j in range(m): if grid[i][j] not in height_histograms: height_histograms[grid[i][j]] = [[0] * m for _ in range(n)] if i == 0: height_histograms[grid[i][j]][i][j] = 1 else: height_histograms[grid[i][j]][i][j] = (height_histograms[grid[i][j]][i - 1][j] + 1) if grid[i][j] == grid[i - 1][j] else 1 for height in height_histograms: max_area = max(max_area, max_histogram_area(height_histograms[height])) return max_area def max_histogram_area(histogram): This helper function calculates the maximum rectangular area in a histogram. max_area = 0 for row in histogram: stack = [] index = 0 while index < len(row): if not stack or row[stack[-1]] <= row[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (row[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (row[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are organizing a chess tournament with n players. Each player will play exactly one game against each other player. Some players have certain restrictions and cannot play against specific other players. You are asked to determine whether it is possible to organize the tournament in such a way that all games are played, obeying the given restrictions. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000) — the number of players and the number of restrictions, respectively. Each of the next m lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ n, a_i ≠ b_i), indicating that player a_i cannot play against player b_i. Each pair (a_i, b_i) is unique. Print a single line with \\"YES\\" if it\'s possible to organize the tournament under the given restrictions, and \\"NO\\" otherwise.","solution":"def can_organize_tournament(n, m, restrictions): # Adjacency list to represent the restrictions graph from collections import defaultdict restrictions_map = defaultdict(set) # Populate the restriction map for a, b in restrictions: restrictions_map[a].add(b) restrictions_map[b].add(a) # Union-Find data structure to detect connected components parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Attempt to process the restrictions to see if forming a connected set is possible for a, b in restrictions: if find(a) == find(b): return \\"NO\\" union(a, b) return \\"YES\\" # Example Usage n = 4 m = 2 restrictions = [(1, 2), (3, 4)] print(can_organize_tournament(n, m, restrictions)) # Output should be \\"YES\\""},{"question":"You are given a binary tree rooted at node containing the integer value 1. Each node in the binary tree contains a unique integer value. Your task is to determine the shortest path between any two given nodes in the tree. The path length between two nodes is defined as the number of edges on the path between them. The input consists of multiple queries; each query provides two nodes, and for each query, you need to compute the shortest path length between the two given nodes. # Input The first line contains an integer n (2 le n le 10^5) — the number of nodes in the tree. The next n-1 lines describe the edges of the tree, each containing two integers u and v (1 le u, v le n, u neq v) indicating an edge between nodes u and v. The next line contains an integer q (1 le q le 10^5) — the number of queries. Each of the next q lines contains two integers a and b (1 le a, b le n) — the nodes between which you need to find the shortest path. # Output For each query, output a single integer — the shortest path length between nodes a and b. # Example Input: ``` 5 1 2 1 3 2 4 2 5 3 4 5 4 3 3 5 ``` Output: ``` 2 3 3 ```","solution":"from collections import defaultdict, deque def build_tree(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def bfs_distance(tree, start): distances = {start: 0} queue = deque([start]) while queue: node = queue.popleft() for neighbor in tree[node]: if neighbor not in distances: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances def shortest_path_length(n, edges, queries): tree = build_tree(n, edges) # Precompute distances from every node to every other node using BFS all_distances = {} for node in range(1, n + 1): all_distances[node] = bfs_distance(tree, node) results = [] for a, b in queries: results.append(all_distances[a][b]) return results # Example input n = 5 edges = [(1, 2), (1, 3), (2, 4), (2, 5)] queries = [(4, 5), (4, 3), (3, 5)] # Running Example print(shortest_path_length(n, edges, queries)) # Output: [2, 3, 3]"},{"question":"Anya is organizing a competition in which she wants to reward participants with unique ID badges. Each participant has a score ‘p_i’ between 0 and 100. Anya wants to ensure that participants are awarded badges based on their rank. The badges are made such that: - The participant with the highest score gets the badge with rank 1, the second-highest gets the badge with rank 2, and so on. - If two or more participants have the same score, they should be given the same badge rank and the next ranks should be skipped accordingly. For example, if the top two participants have the same score, both should receive the badge with rank 1, and the next rank available should be 3. Write a program to determine the badge rank for each participant. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 100) — the scores of the participants. Output a single line containing n integers — the rank of the badge each participant will receive, in the same order as their scores are given in the input. Example: Input: ``` 5 100 90 90 85 70 ``` Output: ``` 1 2 2 4 5 ``` (Explanation: The first participant has the highest score and is ranked 1. The second and third participants have equal scores and are both ranked 2. The fourth participant has the next unique score and is ranked 4. The fifth participant has the next unique score and is ranked 5.)","solution":"def assign_badge_ranks(n, scores): Assign badge ranks based on participants\' scores. Args: n : int : number of participants scores : list of int : participants\' scores Returns: list of int : ranks for each participant in the order of their scores in the input # Create a sorted list of (score, index) tuples sorted_scores = sorted([(score, i) for i, score in enumerate(scores)], reverse=True, key=lambda x: x[0]) # Initialize the result array for ranks ranks = [0] * n # Start ranking current_rank = 1 for i in range(n): # If it\'s not the first score and the current score is different from the previous one, # update the current rank if i > 0 and sorted_scores[i][0] != sorted_scores[i-1][0]: current_rank = i + 1 ranks[sorted_scores[i][1]] = current_rank return ranks"},{"question":"You are given an array of integers that represents the number of pages in different books. You have k students, and you want to allocate all the books to these students such that each student gets at least one book and the maximum number of pages assigned to a student is minimized. The task is to find the minimum possible value of the maximum number of pages assigned to any student. The function should receive: 1. An array of n integers where each integer represents the number of pages in a book. (1 leq n leq 10^5) 2. An integer k which represents the number of students. (1 leq k leq n) The output should be a single integer: the minimum possible value of the maximum number of pages assigned to any student. Example input: ``` n = 4 books = [12, 34, 67, 90] k = 2 ``` Output: ``` 113 ``` Explanation: - One optimal way to allocate the books is [12, 34, 67] and [90], where the maximum number of pages assigned is 113.","solution":"def is_possible(books, n, k, max_pages): students_required = 1 current_pages = 0 for pages in books: if current_pages + pages > max_pages: students_required += 1 current_pages = pages if students_required > k: return False else: current_pages += pages return True def find_min_max_pages(books, n, k): if n < k: return -1 low, high = max(books), sum(books) result = high while low <= high: mid = (low + high) // 2 if is_possible(books, n, k, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are given a grid with n rows and n columns, and each cell contains an integer value. The task is to answer multiple queries, each asking for the sum of elements in a subgrid defined by a given set of boundaries. Specifically, each query specifies a rectangular subgrid by the top-left cell (r1, c1) and the bottom-right cell (r2, c2), and you need to calculate the sum of all the elements located within this subgrid. The first line of the input contains two integers, n (1 ≤ n ≤ 500) — the size of the grid, and q (1 ≤ q ≤ 10^4) — the number of queries. The next n lines each contain n integers, representing the elements of the grid. Each of the next q lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n) — describing the boundaries of the subgrid for which the sum of elements is to be calculated. Print q integers, each of which is the sum of the elements in the corresponding subgrid defined by its query. Example: Input: 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 Output: 12 28","solution":"def preprocess_grid(grid): Preprocess the grid to create a prefix sum matrix for quick area sum lookup. n = len(grid) prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def subgrid_sum(prefix_sum, r1, c1, r2, c2): Calculate the sum of the subgrid using the prefix sum matrix. return prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] def solve(n, q, grid, queries): Process each query and return the results as a list of sums for each subgrid. prefix_sum = preprocess_grid(grid) results = [] for r1, c1, r2, c2 in queries: results.append(subgrid_sum(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"In a country called Algorithmia, there is a beautiful park with n statues standing in a row. Each statue is assigned a unique beauty value. A group of tourists wants to form a subsection of the park that consists of multiple consecutive statues where the sum of their beauty values is as high as possible. However, to promote eco-tourism, they want this subsection to be of exactly k consecutive statues. Your task is to help the tourists find this optimal subsection of the park. Given the beauty values of the statues and the required length of the subsection (k), write a program to determine the maximum possible sum of the beauty values for any k consecutive statues. # Input - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5). - The second line contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 10^4), where bi denotes the beauty value of the i-th statue. # Output - Print a single integer: the maximum sum of beauty values for any k consecutive statues. # Example Input ``` 8 3 1 2 6 4 8 3 2 7 ``` Output ``` 18 ``` # Explanation In the sample input, the optimal subsection is the three consecutive statues with beauty values [6, 4, 8] having the maximum sum 18.","solution":"def max_sum_of_consecutive_statues(n, k, beauty_values): max_sum = current_sum = sum(beauty_values[:k]) for i in range(k, n): current_sum += beauty_values[i] - beauty_values[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a grid with `n` rows and `m` columns, representing a game board. Each cell in the grid can either contain a treasure, represented by \'T\', or be empty, represented by \'.\'. Your task is to help the treasure hunter find the maximum number of treasures that can be collected by making exactly one move, following these rules: 1. The move can be from one cell to any other cell directly, either horizontally, vertically, or diagonally. 2. The move can only be made if the ending cell contains a treasure. Given the grid, you need to determine the maximum number of treasures that can be collected. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - Each of the next `n` lines contains a string of length `m` consisting of characters \'T\' and \'.\'. # Output - Print a single integer, the maximum number of treasures that can be collected with exactly one move. # Example Input ``` 3 3 .T. .TT ... ``` Output ``` 2 ``` Explanation: From the example: - Hunter starts from (1, 1) and can go to (1, 2) but collects only 1 treasure. - Starting from (2, 1) and moving to (2, 2) or (2, 3) collects 2 treasures. - Thus, the maximum number of treasures that can be collected with exactly one move is 2.","solution":"def max_treasures(n, m, grid): def count_treasures(x, y): count = 0 directions = [ (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'T\': count += 1 return count max_treasures = 0 for i in range(n): for j in range(m): if grid[i][j] == \'T\': max_treasures = max(max_treasures, count_treasures(i, j)) return max_treasures"},{"question":"Vanya loves playing a game with arrays. One day, he decided to challenge himself with a new game where he has to modify an array based on specific rules. You are given an array **a** of length **n** consisting of non-negative integers. Your task is to make all elements of the array equal using the minimum number of operations. In one operation, you can choose any subsequence of the array and increase each element of this subsequence by 1. A subsequence is any sequence derived from the array by deleting some or none of the elements without changing the order of the remaining elements. For example, given the array **a = [1, 2, 3]**, you can perform the following operations: 1. Increase the first two elements: **a = [2, 3, 3]** 2. Increase the first element: **a = [3, 3, 3]** In the above examples, the array becomes `[3, 3, 3]` in 2 operations. Write a program to determine the minimum number of operations required to make all elements of the array equal. # Input - The first line contains an integer **t** (1 ≤ t ≤ 10^4), the number of test cases. - Each test case consists of two lines: - The first line contains an integer **n** (1 ≤ n ≤ 2 * 10^5), the length of the array. - The second line contains **n** space-separated integers **a1, a2, ..., an** (0 ≤ ai ≤ 10^6), the elements of the array. # Output - For each test case, print a single integer — the minimum number of operations required. # Example Input ``` 3 3 1 2 3 4 1 1 1 1 5 1 3 2 1 2 ``` Output ``` 2 0 2 ``` In the first case, the minimum operations are 2 as described above. In the second case, no operations are needed as all elements are already equal. In the third case, it takes 2 operations to make all elements equal: increase the subsequence `[1, 2]` to `[3, 3]`, and then increase the subsequence `[1, 2]` to `[3, 3]`.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for case in test_cases: n, arr = case max_value = max(arr) results.append(max_value - min(arr)) return results # Function to parse input and call the main function def process_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return min_operations_to_equal_elements(t, test_cases)"},{"question":"Valera likes to listen to music while coding. He has a playlist of n songs and wants to decide the order in which to listen to them. However, he doesn\'t want to listen to any song more than once. To make it more interesting, he wants to reorder the songs using a special rule. Specifically, he wants the absolute difference between the lengths of any two consecutive songs in the reordered playlist to be greater than or equal to d. Given the lengths of the songs, help Valera find such a playlist order if possible. The input contains two lines: - The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000) — the number of songs and the minimum absolute difference between lengths of any two consecutive songs. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the songs. Output \\"NO\\" without quotes if it is impossible to reorder the songs to satisfy the condition. Otherwise, output \\"YES\\" (without quotes) in the first line, followed by a second line containing the reordered playlist of n integers. Example Input: 5 3 1 7 4 9 12 Example Output: YES 1 4 9 7 12","solution":"def find_playlist(n, d, lengths): Reorders the songs such that the absolute difference between the lengths of any two consecutive songs is greater than or equal to d if possible. Parameters: - n (int): The number of songs. - d (int): Minimum absolute difference between lengths of consecutive songs. - lengths (list of int): The lengths of the songs. Returns: - (str, list): A tuple containing \\"YES\\" or \\"NO\\" and the reordered list of lengths if possible. lengths.sort() playlist = [lengths.pop(0)] while lengths: for i in range(len(lengths)): if abs(lengths[i] - playlist[-1]) >= d: playlist.append(lengths.pop(i)) break else: return \\"NO\\", [] return \\"YES\\", playlist"},{"question":"Nicole is a graphic designer who frequently works with grids of pixels. She wants to create a mosaic, which is an m x n grid, where each cell contains an integer representing a color. Given the grid and a sequence of swap operations, where each operation consists of swapping the content of two specified cells, help Nicole determine the final state of the grid. Additionally, ensure that each operation is performed in the given order. The first line of input contains three integers m, n, and k (1 ≤ m, n ≤ 1000, 1 ≤ k ≤ 100000), where m and n are the dimensions of the grid, and k is the number of swap operations. The next m lines each contain n integers, representing the initial state of the grid. Each integer represents a pixel color. The next k lines contain four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ m, 1 ≤ y1, y2 ≤ n), describing a swap operation that exchanges the content of cell (x1, y1) with the content of cell (x2, y2). Output the final state of the grid after performing all operations. # Sample Input ``` 3 3 2 1 2 3 4 5 6 7 8 9 1 1 3 3 2 2 3 1 ``` # Sample Output ``` 9 2 3 4 7 6 5 8 1 ```","solution":"def perform_swaps(grid, operations): Perform the given swap operations on the grid and return the final state of the grid. :param grid: List of lists representing the initial state of the grid. :param operations: List of tuples representing swap operations. :return: List of lists representing the final state of the grid after all operations. for x1, y1, x2, y2 in operations: # Convert to 0-based indices x1 -= 1 y1 -= 1 x2 -= 1 y2 -= 1 # Perform the swap grid[x1][y1], grid[x2][y2] = grid[x2][y2], grid[x1][y1] return grid def read_input_and_process_operations(m, n, k, grid, operations): return perform_swaps(grid, operations)"},{"question":"Alice and Bob are playing a game with a sequence of `n` positive integers. They take turns; Alice always goes first. On each turn, the player can choose any two integers `a` and `b` from the sequence (where `a != b`), and replace both integers with their difference `|a - b|`. The game stops when all integers in the sequence are the same. The player who is unable to make a move (because all numbers are already the same) loses. Your task is to determine which player will win if both play optimally. # Input: - The first line contains a single integer `n` (2 ≤ n ≤ 100,000) — the length of the sequence. - The second line contains `n` space-separated positive integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the initial sequence. # Output: - Print \\"Alice\\" if Alice will win, otherwise print \\"Bob\\". # Explanation: - If `n` is even, Alice always wins if she plays optimally. - If `n` is odd, Bob always wins if he plays optimally. Example: # Input: 4 4 8 16 32 # Output: Alice # Input: 3 7 5 9 # Output: Bob","solution":"def determine_winner(n, sequence): Determine the winner between Alice and Bob. Parameters: n (int): Length of the sequence. sequence (list of int): The initial sequence of positive integers. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. if n % 2 == 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each edge has a weight that can range from 1 to 1000. Your task is to find the minimum spanning tree (MST) of this graph and report its total weight. The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of nodes and the number of edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) describing an edge between nodes `u` and `v` with a weight of `w`. If there are multiple MSTs with the same total weight, report any one of them. Output a single integer, the total weight of the MST. Consider the first sample test. The graph has nodes and edges. By applying Kruskal\'s or Prim\'s algorithm, we can determine the edges that form the minimum spanning tree and calculate its total weight. In the first example, the graph with 4 nodes and 5 edges will have the following edges in its MST: `(1, 2) with weight 1`, `(2, 3) with weight 2`, and `(3, 4) with weight 3`. The total weight of the MST is `1 + 2 + 3 = 6`. Input: ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ``` Output: ``` 6 ``` In the second example, since there are no edges, the output is `0`. Input: ``` 3 0 ``` Output: ``` 0 ```","solution":"class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) # Path compression return self.parent[node] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda edge: edge[2]) uf = UnionFind(n) mst_weight = 0 mst_edges = 0 for u, v, w in edges: u -= 1 v -= 1 if uf.find(u) != uf.find(v): uf.union(u, v) mst_weight += w mst_edges += 1 if mst_edges == n - 1: break return mst_weight # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) edges = [] index = 2 for i in range(m): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 if m == 0: print(0) else: result = kruskal_mst(n, edges) print(result)"},{"question":"Given an array of integers, your task is to create a function that reorganizes the array such that no two adjacent elements are the same. If it is not possible to rearrange the array in such a way, return an empty array. Describe the algorithm and implement the function to solve this problem. Function Signature: ```python def reorganize_array(arr: List[int]) -> List[int]: ``` **Input:** - An integer array arr of length n where 1 ≤ n ≤ 1000, and arr[i] is an integer where -1000 ≤ arr[i] ≤ 1000. **Output:** - Return an array that is a rearrangement of arr such that no two adjacent elements are the same. If it\'s impossible, return an empty array. Examples: **Example 1:** ```python input: arr = [1, 1, 2, 2, 2] output: [2, 1, 2, 1, 2] ``` Explanation: The array [2, 1, 2, 1, 2] is a valid rearrangement as no two adjacent elements are the same. **Example 2:** ```python input: arr = [3, 3, 3, 3] output: [] ``` Explanation: There is no way to rearrange the array such that no two adjacent elements are the same. **Example 3:** ```python input: arr = [1, 2, 3, 4, 4] output: [4, 1, 4, 2, 3] ``` Explanation: The array [4, 1, 4, 2, 3] is a valid rearrangement as no two adjacent elements are the same. Note: - If there are multiple possible answers, any of them will be accepted.","solution":"from typing import List from collections import Counter import heapq def reorganize_array(arr: List[int]) -> List[int]: count = Counter(arr) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_element = None result = [] while max_heap or prev_element: if prev_element and not max_heap: return [] value, key = heapq.heappop(max_heap) result.append(key) if prev_element: heapq.heappush(max_heap, prev_element) prev_element = None if value + 1 < 0: prev_element = (value + 1, key) return result"},{"question":"On a wooden board, there are n nails, numbered from 1 to n, hammered into it. The position of each nail on the board is given by an integer array p, where p[i] is the position of the i-th nail on the board. Additionally, each nail i is associated with a color, given by an integer array c, where c[i] represents the color of the i-th nail. Two nails form a pair (i, j) if and only if they have the same color, i.e., c[i] = c[j]. You need to find the maximum number of pairs of nails such that no two pairs intersect on the board. Two pairs (a, b) and (c, d) are said to intersect if their positions on the board are such that a < c < b < d or c < a < d < b. Input: - The first line contains a single integer n (2 ≤ n ≤ 10^5). - The second line contains n space-separated integers p[1], p[2], ..., p[n] (1 ≤ p[i] ≤ 10^9) – the positions of the nails. - The third line contains n space-separated integers c[1], c[2], ..., c[n] (1 ≤ c[i] ≤ 10^9) – the colors of the nails. Output: - Print a single integer – the maximum number of non-intersecting pairs of nails. Examples: Input: 6 1 3 5 2 4 6 1 2 1 2 1 2 Output: 2 Input: 4 1 2 3 4 2 2 2 2 Output: 2 In the first example, the pairs (1, 5) and (3, 4) are both valid and do not intersect. In the second example, the pairs (1, 2) and (3, 4) are valid and do not intersect.","solution":"def max_non_intersecting_pairs(n, p, c): from collections import defaultdict import heapq color_positions = defaultdict(list) for i in range(n): color_positions[c[i]].append(p[i]) max_pairs = 0 for positions in color_positions.values(): positions.sort() intervals = [(-float(\'inf\'), float(\'inf\'))] for pos in positions: new_intervals = [] for start, end in intervals: if start <= pos <= end: new_intervals.append((start, pos)) new_intervals.append((pos, end)) intervals = new_intervals max_pairs += len(positions) // 2 return max_pairs"},{"question":"Problem Statement: Ada is training to become a potion master. Her latest challenge involves mixing ingredients in specific quantities to create a powerful potion. She has a list of ingredients, each with a required quantity. To simplify the mixing process, Ada wants to convert these quantities into a special format: she will sum up the ingredients by combining same quantities together in any adjacent positions. For instance, if she has ingredient quantities `[3, 4, 5, 5, 6]`, she can combine the two `5`s to get a list `[3, 4, 10, 6]`. Ada wants to know the minimum number of operations needed to possibly reduce this list to a single ingredient. For this task: 1. Ada can only combine two adjacent ingredients at a time. 2. Combining two ingredients with quantities `a` and `b` results in a new quantity `a + b`. Your task is to help Ada determine the minimum number of operations required to combine all the quantities into one single ingredient. If it\'s not possible to combine them all into one ingredient, return `-1`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of ingredients. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the quantities of each ingredient. # Output - Print a single integer — the minimum number of operations required to combine all quantities into one ingredient, or `-1` if it\'s impossible. # Examples Example 1 ``` Input: 5 3 4 5 5 6 Output: 4 Explanation: Combine 5 and 5 -> [3, 4, 10, 6] Combine 10 and 6 -> [3, 4, 16] Combine 3 and 4 -> [7, 16] Combine 7 and 16 -> [23] ``` Example 2 ``` Input: 3 1 1 1 Output: 2 Explanation: Combine 1 and 1 -> [2, 1] Combine 2 and 1 -> [3] ``` Example 3 ``` Input: 4 10 20 30 40 Output: 3 Explanation: Combine 10 and 20 -> [30, 30, 40] Combine 30 and 30 -> [60, 40] Combine 60 and 40 -> [100] ``` Example 4 ``` Input: 1 5 Output: 0 Explanation: Only one ingredient, no need to combine. ``` # Note If there\'s only one ingredient, no operations are needed. If there are multiple ingredients, you should attempt to combine them iteratively until you achieve a single ingredient, keeping track of the number of operations. If it is clear that combinations cannot reduce the number of ingredients to one, output `-1`.","solution":"def minimum_operations_to_combine(n, ingredients): if n == 1: return 0 from heapq import heappop, heappush, heapify # Create a min-heap with the ingredient quantities heapify(ingredients) operations = 0 while len(ingredients) > 1: # Pop the two smallest elements first = heappop(ingredients) second = heappop(ingredients) # Combine them and push the combined quantity back into the heap combined = first + second heappush(ingredients, combined) # Count this as one operation operations += 1 return operations"},{"question":"A delivery company is organizing a competition between its delivery drones. Each drone has a unique identifier and a battery that can last for several minutes. The challenge is to deliver as many packages as possible within the battery life of the drone. Each delivery distance is given in kilometers, and the time it takes to make a delivery is directly proportional to the distance with a conversion factor of 1 minute per kilometer (i.e., a delivery of 10 km will take 10 minutes). You are given a list of delivery distances and the maximum battery life (in minutes) of a specific drone. Your task is to determine the maximum number of deliveries the drone can complete without running out of battery. Write a function `max_deliveries(battery_life, distances)` that takes in the following inputs: - `battery_life`: an integer representing the total battery life in minutes. - `distances`: a list of integers where each integer represents the distance of a delivery in kilometers. The function should return the maximum number of deliveries that the drone can complete. # Input format - An integer `battery_life` ( 1 le text{battery_life} le 1000 ): the maximum battery life of the drone in minutes. - A list `distances` of length `n` ( 1 le n le 100 ) where each element is an integer ( 1 le text{distance_i} le 100 ): the distances in kilometers for each delivery. # Output format - Return a single integer: the maximum number of deliveries that can be completed without exceeding the drone\'s battery life. # Example ```python print(max_deliveries(100, [20, 30, 10, 50])) # Output: 3 ``` In this example, the drone can complete 20 km, 30 km, and 10 km deliveries (total 60 km) within the 100 minutes of battery life. It can\'t complete the delivery of 50 km as it would exceed the battery limit.","solution":"def max_deliveries(battery_life, distances): Returns the maximum number of deliveries that can be completed within the given battery life. # Sort distances to try shorter deliveries first distances.sort() # Initialize counters total_time = 0 delivery_count = 0 # Iterate through distances and count deliveries for distance in distances: if total_time + distance <= battery_life: total_time += distance delivery_count += 1 else: break return delivery_count"},{"question":"You are working on a small robot that can move on a grid. The robot starts at position (0, 0) and can be given a series of commands to move. The commands are represented by a string of characters, where each character represents a move: - \'L\' for moving one step to the left (decreasing the x coordinate), - \'R\' for moving one step to the right (increasing the x coordinate), - \'U\' for moving one step up (increasing the y coordinate), - \'D\' for moving one step down (decreasing the y coordinate). However, your robot has a limited battery life and will stop moving once the battery runs out. You need to determine the robot\'s final position after executing a given sequence of moves, but only if the battery does not run out. The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains an integer `m` (0 ≤ m ≤ 1000), representing the battery life (number of moves the robot can make). The second line contains a string of moves (1 ≤ length of the string ≤ 1000). If `m` is less than the length of the move string, the robot will only perform the first `m` moves in the string. For each test case, print two integers separated by a space, which are the final x and y coordinates of the robot. Example input: ``` 3 5 LLUDR 3 RRUUDD 0 UDLR ``` Example output: ``` -1 0 2 1 0 0 ```","solution":"def final_position(t, test_cases): results = [] for i in range(t): m = test_cases[i][0] moves = test_cases[i][1] x, y = 0, 0 effective_moves = moves[:m] for move in effective_moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 results.append(f\\"{x} {y}\\") return results"},{"question":"A tree is a connected acyclic undirected graph. A vertex cover of a graph is a set of vertices such that each edge of the graph is incident to at least one vertex of the set. The minimum vertex cover problem aims to find the smallest possible vertex cover. You are given a tree with n vertices. Your task is to find the minimum size of a vertex cover in the given tree. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of vertices in the tree. - Each of the following n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing an edge between vertices u and v. Output: - Print a single integer, the size of the minimum vertex cover for the tree. Example: Input: 5 1 2 1 3 2 4 3 5 Output: 2 Explanation: In the given example, one of the possible minimum vertex covers would be the set of vertices {1, 2} or {1, 3}, both of which have size 2. Each edge is incident to at least one of these vertices.","solution":"from collections import defaultdict, deque def min_vertex_cover(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # DP table where dp[u][0] -> min cover excluding u, dp[u][1] -> min cover including u dp = [[0, 0] for _ in range(n + 1)] visited = [False] * (n + 1) def dfs(node): visited[node] = True dp[node][0] = 0 dp[node][1] = 1 # Including the node in the vertex cover for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor) dp[node][0] += dp[neighbor][1] # If we exclude node, we must include the neighbor dp[node][1] += min(dp[neighbor][0], dp[neighbor][1]) # We can include or exclude the neighbor root = 1 dfs(root) # The answer is the minimum of including or excluding the root node return min(dp[root][0], dp[root][1])"},{"question":"Alice is participating in a programming competition. She has n distinct tasks to complete with different difficulties. Each task i has a difficulty level di (1 ≤ di ≤ 10^9). Alice can choose to solve the tasks in any order but wants to minimize the total difficulty by solving them in a specific sequence. To do this, she decides to follow a unique strategy: Starting from any task, she can only move to a task k if the absolute difference in difficulty between the current task and k is at most t (0 ≤ t ≤ 10^9). The total difficulty she needs to solve the tasks is the sum of the difficulty levels, but she can only move through the tasks following the rule. Your task is to determine the minimum total difficulty Alice must solve to complete all tasks, or return -1 if it\'s impossible based on the given movement rule. The first line of input contains two integers n and t (1 ≤ n ≤ 100, 0 ≤ t ≤ 10^9) — the number of tasks and the maximum difference in difficulty between consecutive tasks, respectively. The second line of input contains n integers d1, d2, ..., dn — the difficulty levels of each task. Output a single integer — the minimum total difficulty Alice must complete, or -1 if it is impossible. # Example Input: ``` 5 2 4 2 6 8 10 ``` Output: ``` 20 ``` Explanation: Alice can solve the tasks in the order [2, 4, 6, 8, 10]. The sequence maintains the movement rule with t = 2 and the total difficulty is 20. Input: ``` 3 1 1 4 7 ``` Output: ``` -1 ``` Explanation: It is impossible for Alice to solve all the tasks as no task pairs have an absolute difficulty difference less than or equal to t.","solution":"def minimum_total_difficulty(n, t, difficulties): Determines the minimum total difficulty Alice must solve to complete all tasks, or return -1 if it\'s impossible based on the given movement rule. Parameters: n (int): the number of tasks t (int): the maximum difference in difficulty between consecutive tasks difficulties (list): a list of integers representing the difficulty levels of each task Returns: int: the minimum total difficulty or -1 if it is impossible to complete all tasks difficulties.sort() for i in range(1, n): if difficulties[i] - difficulties[i-1] > t: return -1 return sum(difficulties)"},{"question":"Jasmine is a botanist who is growing several types of plants that require differing amounts of sunlight to thrive. She has n plants, each with its own sunlight requirement. Jasmine wants to plant them in her rectangular garden, which is divided into a grid of m rows and k columns (each cell in the grid can hold one plant). The total sunlight that each cell in the garden receives is described by an m x k matrix. The value at the i-th row and j-th column indicates the amount of sunlight that cell receives. Jasmine wants to place each plant such that it gets at least the minimum amount of sunlight it needs. Help Jasmine determine the number of plants that she can plant in the garden such that they all receive their required amount of sunlight. First line contains three integers n, m, and k (1 ≤ n ≤ 100; 1 ≤ m, k ≤ 100) — the number of plants, and the dimensions of the garden grid, respectively. Next line contains n integers — the minimum sunlight requirement for each plant. Next m lines each contain k integers — the amount of sunlight for each cell in the garden grid. Output a single integer — the maximum number of plants that Jasmine can plant in the garden. Example input: 3 3 3 5 10 15 2 8 6 3 11 7 12 4 5 Example output: 2","solution":"def max_plants(n, m, k, plant_reqs, garden_grid): Determines the maximum number of plants Jasmine can plant in her garden such that each plant gets at least the minimum amount of sunlight it needs. # Flatten garden grid for easier traversal sunlight_values = [sunlight for row in garden_grid for sunlight in row] # Sort plant sunlight requirements and garden sunlight values plant_reqs.sort() sunlight_values.sort() # Initialize plant count plant_count = 0 # Try to place each plant in the garden for req in plant_reqs: for i, sunlight in enumerate(sunlight_values): if sunlight >= req: plant_count += 1 sunlight_values.pop(i) break return plant_count"},{"question":"You are tasked with developing a new software feature that integrates a form of automated text prediction into a messaging app. The goal is to suggest possible completion words in real-time as the user types their message. Each word suggestion should be based on a predefined dictionary of words. Given: - A dictionary (set of valid words). - An incomplete word (prefix) input by the user. Write a function `suggest_words` that takes in two parameters: 1. A list of strings representing the dictionary of valid words. 2. A string representing the current incomplete word (prefix) input by the user. The function should return a list of all words in the dictionary that start with the given prefix, sorted in lexicographical order. If no words match the prefix, return an empty list. # Input - The first input line contains an integer `n` (1 ≤ n ≤ 1000) representing the number of words in the dictionary. - The next `n` lines contain one word each consisting only of lowercase English letters. - The last input line contains the prefix string which consists of only lowercase English letters and has length at most 100. # Output - Output a list of strings where each string is a valid word from the dictionary that starts with the given prefix, sorted in lexicographical order. If no words match the prefix, print an empty list. # Example Input: ``` 6 apple application bee appetite ban applesauce app ``` `app` Output: ``` [\\"app\\", \\"appetite\\", \\"apple\\", \\"applesauce\\", \\"application\\"] ``` # Note For the example above, the words that start with the prefix \\"app\\" are [\\"app\\", \\"appetite\\", \\"apple\\", \\"applesauce\\", \\"application\\"], which are already sorted in lexicographical order.","solution":"def suggest_words(dictionary, prefix): Returns a list of words from the dictionary that start with the given prefix, sorted lexicographically. return sorted([word for word in dictionary if word.startswith(prefix)])"},{"question":"You are tasked with analyzing a series of operations on an array of integers. The initial array is empty, and you need to process a series of queries. Each query is one of the following types: 1. Add an integer x to the end of the array. 2. Remove the last element of the array. 3. Check if there exists a pair of elements in the array that sum up to a given integer y. Implement a function that processes these queries and returns the results for all Type 3 queries. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of queries. Each of the next n lines contains an integer t (1 ≤ t ≤ 3) — the type of the query, followed by an integer x (1 ≤ x ≤ 10^9) in case of Type 1 and Type 3 queries. For each Type 3 query, output \\"YES\\" if there exists a pair of array elements that sum up to y, otherwise output \\"NO\\". If the array is empty, output \\"NO\\". **Example:** Input: ``` 8 1 1 1 2 1 3 3 4 2 3 5 1 2 3 4 ``` Output: ``` YES NO YES ``` Explanation: 1. Add 1 to the array → [1] 2. Add 2 to the array → [1, 2] 3. Add 3 to the array → [1, 2, 3] 4. Check if there exists a pair that sums up to 4 → \\"YES\\" (1 + 3 = 4) 5. Remove the last element → [1, 2] 6. Check if there exists a pair that sums up to 5 → \\"NO\\" (Only 1 and 2 left) 7. Add 2 to the array → [1, 2, 2] 8. Check if there exists a pair that sums up to 4 → \\"YES\\" (2 + 2 = 4)","solution":"def process_queries(n, queries): from collections import defaultdict def has_pair_with_sum(arr, target): seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False arr = [] results = [] for query in queries: t, x = query if t == 1: arr.append(x) elif t == 2: if arr: arr.pop() elif t == 3: if has_pair_with_sum(arr, x): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John the Barber wants to offer a promotional discount to his customers. He has a list of prices for different services, but he can only apply a discount to a subset of these services such that the total discounted amount does not exceed a specified budget. His goal is to maximize the number of services he can offer under the discount while staying within the budget. You are given an array of integers representing the prices of different services and an integer representing the discount budget. Your task is to determine the maximum number of services John can offer under the discount without exceeding the budget. The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 10000), where n is the number of services and k is the discount budget. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000), where pi is the price of the i-th service. Output a single integer — the maximum number of services John can offer under the discount. Example: Input: 5 100 20 30 50 70 10 Output: 3 Explanation: John can choose the services with prices 20, 30, and 10, making a total of 60 which does not exceed the budget of 100. This allows him to offer the maximum number of services, which is 3.","solution":"def max_services_within_budget(n, k, prices): Determine the maximum number of services that can be offered under the discount budget. :param n: Number of services :param k: Discount budget :param prices: List of prices for the services :return: Maximum number of services that can be offered without exceeding the budget prices.sort() total_cost = 0 count = 0 for price in prices: if total_cost + price <= k: total_cost += price count += 1 else: break return count"},{"question":"Polycarp has recently developed a new game to test his luck. The game consists of spinning a wheel that is divided into several sectors, each sector containing a single integer value. When the wheel stops, the player earns the value of the sector where the wheel stopped. Polycarp noticed that sometimes the wheel stops, for example, at value 4 and then immediately stops at the same value on the next spin. To make the game more interesting, he decided to filter out any consecutive spins where the wheel stops on the same value and only count unique consecutive spins. Polycarp has collected data from n spins represented by an array a of n integers. He wants to calculate the sum of values from the wheel spins considering only consecutive distinct values. Write a program that takes in the number of spins and the array of spin values and outputs the sum of values considering only consecutive distinct spins. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of spins. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the values on which the wheel stopped in each spin. # Output - Print the sum of the values considering only consecutive distinct spins. # Example Input 7 4 4 5 5 6 6 6 Output 15 Input 5 1 2 2 3 2 Output 8 Explanation In the first example, the filtered sequence is [4, 5, 6], which sums to 15. In the second example, the filtered sequence is [1, 2, 3, 2], which sums to 8.","solution":"def sum_distinct_spins(n, spins): if n == 0: return 0 sum_unique_spins = spins[0] for i in range(1, n): if spins[i] != spins[i-1]: sum_unique_spins += spins[i] return sum_unique_spins"},{"question":"Monica is organizing an art exhibition in a huge gallery with multiple rooms. She has `n` paintings, each painted by one of `k` artists. Monica wants to hang exactly one painting in each room, ensuring that no room contains paintings by more than one artist. Monica wants to minimize the number of rooms required to display all the paintings. The first line of input contains an integer `t` (`1 <= t <= 1000`) — the number of test cases. For each test case, the first line contains two integers `n` and `k` (`1 <= k <= n <= 100000`) — the number of paintings and the number of artists. The second line contains `n` integers `a1, a2, ..., an` (`1 <= ai <= k`), where `ai` represents the artist of the `i-th` painting. Output one integer for each test case representing the minimum number of rooms needed for Monica to hang all the paintings without violating the constraint. # Example **Input:** ``` 2 5 3 1 2 2 3 1 6 4 2 2 3 3 4 4 ``` **Output:** ``` 3 3 ``` # Explanation: In the first test case, Monica can use 3 rooms to hang the paintings like this: - Room 1: Painting 1 by Artist 1 and Painting 2 by Artist 2 - Room 2: Painting 3 by Artist 2 - Room 3: Painting 4 by Artist 3 and Painting 5 by Artist 1 In the second test case, Monica can use 3 rooms to hang the paintings like this: - Room 1: Painting 1 by Artist 2 and Painting 2 by Artist 2 - Room 2: Painting 3 by Artist 3 and Painting 4 by Artist 3 - Room 3: Painting 5 by Artist 4 and Painting 6 by Artist 4","solution":"def min_rooms_for_paintings(test_cases): results = [] for n, k, artists in test_cases: from collections import Counter artist_count = Counter(artists).values() max_paintings_by_artist = max(artist_count) results.append(max_paintings_by_artist) return results"},{"question":"Alex is preparing for a mission to Mars and needs to efficiently pack his backpack with supplies. The backpack has a maximum weight capacity of W. Alex has n types of items, each with a specific weight and value. He wants to maximize the total value of the items in his backpack without exceeding the weight capacity. Given the weight capacity W and descriptions of n items, help Alex determine the maximum total value he can achieve by selecting a subset of these items whose combined weight does not exceed W. The first line contains two integers n and W (1 <= n <= 100, 1 <= W <= 1000) — the number of items and the maximum weight capacity of the backpack. The next n lines each contain two integers wi and vi (1 <= wi <= 100, 0 <= vi <= 1000) — the weight and value of the i-th item. Print a single integer — the maximum total value of the items that Alex can fit in his backpack. Example: Input: 3 50 10 60 20 100 30 120 Output: 220","solution":"def knapsack(n, W, items): Returns the maximum total value of items that can be put in a knapsack of capacity W. :param n: Number of items :param W: Maximum weight capacity of the knapsack :param items: List of (weight, value) tuples :return: Maximum value that can be achieved # Initialize the DP table dp = [[0] * (W + 1) for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): wi, vi = items[i-1] for w in range(W + 1): if w >= wi: dp[i][w] = max(dp[i-1][w], dp[i-1][w-wi] + vi) else: dp[i][w] = dp[i-1][w] return dp[n][W] # Parse input def parse_input(input_str): lines = input_str.strip().split(\'n\') n, W = map(int, lines[0].split()) items = [tuple(map(int, line.split())) for line in lines[1:]] return n, W, items # Function to be called with input def solve_knapsack(input_str): n, W, items = parse_input(input_str) return knapsack(n, W, items) # Example usage input_data = \\"3 50n10 60n20 100n30 120\\" print(solve_knapsack(input_data)) # Output should be 220"},{"question":"Polycarp is a manager at a busy restaurant and he is responsible for assigning tables to customers. There are n tables in the restaurant, where each table can accommodate a certain number of people. The i-th table can accommodate si people. Throughout the day, m groups of customers enter the restaurant. Each group j has zj people. A group can only be assigned to a table if the table has enough capacity to accommodate all the people in the group. If a group cannot be seated, they will leave the restaurant. Each table can only be assigned to one group at a time and once a table is assigned to a group, it remains occupied for the rest of the day. Given the capacities of the tables and the sizes of the incoming groups, write a program that assigns as many groups as possible to the available tables and prints the number of groups that were successfully seated. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of tables and the number of groups. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000) — the capacities of the tables. The third line contains m integers z1, z2, ..., zm (1 ≤ zj ≤ 1000) — the sizes of the groups. Print a single integer — the number of groups that were successfully seated. # Example Input ``` 5 8 5 10 5 20 15 5 10 15 3 3 2 2 8 ``` Output ``` 5 ``` Explanation The seating arrangement for the example input might be as follows: - Group of 5 is seated at a table of capacity 5. - Group of 10 is seated at a table of capacity 10. - Group of 15 is seated at a table of capacity 15. - Group of 3 is seated at a table of capacity 20. - Group of 2 is seated at a table of capacity 5. So, a total of 5 groups were successfully seated.","solution":"def max_seated_groups(n, m, table_capacities, group_sizes): This function assigns as many groups to tables as possible based on their capacities. :param n: Number of tables (int) :param m: Number of groups (int) :param table_capacities: List of table capacities (list of int) :param group_sizes: List of group sizes (list of int) :return: Number of groups successfully seated (int) # Sort table capacities and group sizes in ascending order table_capacities.sort() group_sizes.sort() table_index = 0 seated_count = 0 # Iterate over each group size for group in group_sizes: # Find the smallest table that can accommodate the group while table_index < n and table_capacities[table_index] < group: table_index += 1 if table_index < n: # If a table is found, seat the group and move to next table seated_count += 1 table_index += 1 else: break return seated_count"},{"question":"Given an integer array `arr` of length `n`, your task is to find the two elements in the array such that the absolute difference between their values is minimized. The array contains unique integers. More formally, you need to find and print the minimum value of `|arr[i] - arr[j]|` for `1 ≤ i < j ≤ n`. The first line of input contains an integer `n` (`2 ≤ n ≤ 10^5`) — the length of the array. The second line contains `n` distinct integers `arr[1], arr[2], ..., arr[n]` (`1 ≤ arr[i] ≤ 10^9`). Output a single integer — the minimum absolute difference between any two elements in the array. For example, given the array `[3, 8, 1, 5]`, the minimum absolute difference between any two elements is `2` (between `3` and `5`). **Example:** **Input:** ``` 5 4 9 1 3 7 ``` **Output:** ``` 1 ``` Explanation: The pair with the smallest absolute difference is `3` and `4`, with a difference of `1`.","solution":"def minimum_absolute_difference(arr): Finds the minimum absolute difference between any two elements in the array. arr.sort() min_diff = float(\'inf\') for i in range(1, len(arr)): diff = abs(arr[i] - arr[i - 1]) if diff < min_diff: min_diff = diff return min_diff def parse_input_and_find_minimum_absolute_difference(input): lines = input.strip().split(\'n\') n = int(lines[0].strip()) arr = list(map(int, lines[1].strip().split())) return minimum_absolute_difference(arr)"},{"question":"Alice and Bob are playing a game on a grid filled with numbers. The grid has `n` rows and `m` columns, and each cell of the grid contains a unique integer. Alice and Bob take turns to pick one number from the grid. Alice starts first and picks any number from the grid. After Alice picks a number, Bob has to pick a number from the remaining numbers that are adjacent vertically or horizontally to the last picked number. Alice and Bob continue picking numbers this way until all numbers are exhausted or no legal moves remain. The player who picks the last number wins. You are given the initial configuration of the grid. Determine whether Alice will guarantee a win if she plays optimally, or if Bob will guarantee a win if he plays optimally. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 100) — the dimensions of the grid. Each of the next `n` lines contains `m` integers describing the grid. The integers are between 1 and `n * m` inclusive and are unique. Output \\"Alice\\" if Alice can guarantee a win with optimal play, or \\"Bob\\" otherwise. For example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: Bob Explanation: With the given grid, no matter what number Alice picks first, Bob can always respond with an adjacent number and eventually force a win.","solution":"def find_winner(n, m, grid): Returns the winner, Alice or Bob, given the grid dimensions and values. # Since we assume a 1-based grid, the nature of grid, and adjacency, # Winner calculation boils down to understanding blocking moves for each other. if n % 2 == 1 and m % 2 == 1: # In odd dimension grids with Alice starting: Bob can always maneuver return \\"Bob\\" # otherwise Alice always has an alternating-edge advantage. return \\"Alice\\""},{"question":"A database system hosts multiple tables, each with a unique table identifier and several fields. Each table can be represented by a set of fields. Queries are run on the database to find common fields between pairs of tables. Your task is to implement a function that, given a number of tables and their fields, can efficiently answer multiple queries about the common fields between any two tables. **Input** The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tables. Each of the next n lines describes a table. The description contains a non-negative integer k_i (0 ≤ k_i ≤ 1000) — the number of fields in the i-th table, followed by k_i distinct strings representing field names. Field names only consist of lowercase letters and are at most 20 characters long. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains two integers t1 and t2 (1 ≤ t1, t2 ≤ n) — the identifiers of the tables to be queried. **Output** For each query, print a single integer — the number of common fields between the tables t1 and t2. **Example** **Input:** ``` 3 2 name age 3 name age address 1 name 2 1 2 1 3 ``` **Output:** ``` 2 1 ``` **Explanation:** - The tables have the following fields: - Table 1 has fields: name, age - Table 2 has fields: name, age, address - Table 3 has fields: name - The first query asks for the common fields between Table 1 and Table 2, which are \\"name\\" and \\"age\\" (2 common fields). - The second query asks for the common fields between Table 1 and Table 3, which is only \\"name\\" (1 common field).","solution":"def common_fields(tables, queries): Returns the number of common fields for each pair of tables in the given queries. Parameters: tables (list of list of str): A list where each element is a list containing the fields of a table. queries (list of tuple of int): A list of queries where each query is a tuple with two integers representing table indices. Returns: list of int: A list containing the number of common fields for each query. results = [] for t1, t2 in queries: fields_t1 = set(tables[t1 - 1]) fields_t2 = set(tables[t2 - 1]) common_fields = fields_t1.intersection(fields_t2) results.append(len(common_fields)) return results"},{"question":"You are given a binary tree with n nodes. The nodes are numbered from 1 to n, and each node can have at most one left child and one right child. Your task is to determine if the given tree is a complete binary tree. A complete binary tree is defined as a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the binary tree. Each of the next n lines describes a node in the tree using three integers, where the i-th line contains the integers li, ri (0 ≤ li, ri ≤ n) representing the left and right child of the i-th node respectively. If li or ri is 0, it means that the i-th node does not have a left or right child, respectively. Print \\"Yes\\" if the binary tree is a complete binary tree, otherwise print \\"No\\". Example input: ``` 5 2 3 4 5 0 0 0 0 0 0 ``` Example output: ``` Yes ``` In this example, node 1 has left child 2 and right child 3, node 2 has left child 4 and right child 5, and nodes 3, 4, and 5 have no children. All levels of the binary tree are fully filled, and all nodes are as far left as possible, hence it is a complete binary tree.","solution":"def is_complete_binary_tree(n, nodes): Determines if a binary tree is a complete binary tree. Args: n (int): The number of nodes in the binary tree. nodes (list of tuple of int): The left and right children of each node. Returns: str: \\"Yes\\" if the binary tree is complete, \\"No\\" otherwise. if n == 0: return \\"Yes\\" tree = [(0, 0)] + nodes # Append a dummy node at index 0 for ease # To check completeness, perform level order traversal queue = [1] # Start with the root node (index 1) index = 0 found_gap = False while index < len(queue): current = queue[index] index += 1 left, right = tree[current] if left != 0: if found_gap: return \\"No\\" queue.append(left) else: found_gap = True if right != 0: if found_gap: return \\"No\\" queue.append(right) else: found_gap = True return \\"Yes\\""},{"question":"Anna has recently started practicing coding problems. She came across a problem that involves strings and their lexicographical order, which she finds quite intriguing. Given a string of lowercase English letters, Anna needs to determine the shortest substring within it that, when rearranged in any order, contains exactly k distinct characters. If no such substring exists, the output should be -1. The first line of the input contains an integer k (1 ≤ k ≤ 26) — the number of distinct characters required in the substring. The second line contains a string s (1 ≤ |s| ≤ 100,000) — the string from which the shortest substring should be identified. Print the length of the shortest substring that can be rearranged to contain exactly k distinct characters. If it is not possible, print -1. In the first sample input \\"abcabcabc\\" with k=3, the shortest substring that contains exactly 3 distinct characters is \\"abc\\", which has a length of 3. In the second sample input \\"aaabbcc\\" with k=2, the shortest substring that contains exactly 2 distinct characters is \\"aa\\" or \\"bb\\" or \\"cc\\", each having a length of 2. In the third sample input \\"abcd\\" with k=5, there are not enough distinct characters in the string to meet the requirement, so the output is -1.","solution":"def shortest_substring_with_k_distinct(k, s): Returns the length of the shortest substring that can be rearranged to contain exactly k distinct characters. If no such substring exists, returns -1. from collections import defaultdict n = len(s) if len(set(s)) < k: return -1 min_length = n + 1 left = 0 char_count = defaultdict(int) for right in range(n): char_count[s[right]] += 1 while len(char_count) == k: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 return min_length if min_length <= n else -1"},{"question":"A scientist is working on a powerful oscillator that can only be tuned precisely by entering a specific configuration code into its control interface. The device displays an integer N, which the scientist believes to be a crucial clue to determine the correct configuration. To find the correct configuration code, the scientist needs to identify the length of the longest arithmetic subsequence within the digits of N. An arithmetic subsequence is a sequence of numbers where the difference between consecutive elements is constant. For example, in the number 12345, \\"135\\" is an arithmetic subsequence with a common difference of 2. The input consists of a single integer N (1 ≤ N ≤ 10^18). Print the length of the longest arithmetic subsequence found in the digits of N. In the first sample, for N = 12345, the longest arithmetic subsequence is \\"12345\\" itself, with length 5. In the second sample, for N = 5471, the longest arithmetic subsequence is \\"57\\" or \\"41\\", both with a length of 2.","solution":"def longest_arith_seq_length(n): Given an integer n, returns the length of the longest arithmetic subsequence found in its digits. digits = list(map(int, str(n))) length = len(digits) if length <= 1: return length # Dictionary dp to store the longest length of arithmetic subsequence ending at each pair dp = [{} for _ in range(length)] max_length = 1 for i in range(length): for j in range(i): diff = digits[i] - digits[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Given an unsorted array of integers of size `n`, some of which might be zero, we need to sort the array such that all zeros are moved to the end while preserving the relative order of the other elements. For this task, you are required to implement an algorithm with a time complexity of `O(n)` and space complexity of `O(1)`. # Input The first line contains an integer `n` (1 leq n leq 10^6) — the number of integers in the array. The next line contains `n` integers which can be negative, positive or zero, separated by spaces. # Output Output the array after ordering such that all zeros are moved to the end, while keeping the relative order of the non-zero elements. # Example Input ``` 10 4 0 5 0 3 0 7 8 9 0 ``` Output ``` 4 5 3 7 8 9 0 0 0 0 ```","solution":"def move_zeros_to_end(arr): Moves all zeros in the given list to the end while preserving the order of non-zero elements. :param arr: List[int] - The input list of integers (can be negative, positive, or zero) :return: List[int] - The list after all zeros are moved to the end n = len(arr) insert_pos = 0 # Traverse through the list and move non-zero elements to the front for i in range(n): if arr[i] != 0: arr[insert_pos] = arr[i] insert_pos += 1 # Fill the remaining positions with zeros for i in range(insert_pos, n): arr[i] = 0 return arr # Example usage: # arr = [4, 0, 5, 0, 3, 0, 7, 8, 9, 0] # print(move_zeros_to_end(arr)) # Output should be: [4, 5, 3, 7, 8, 9, 0, 0, 0, 0]"},{"question":"Zoya, Lily, and Ethan are participating in a coding contest. In one of the problems, they have to work with strings. The problem is as follows: You are given a string `s` of length n (1 ≤ n ≤ 10^5) consisting of lowercase English letters. The string may have multiple distinct substrings. Your task is to find the length of the longest substring of `s` that appears more than once. Note that the substrings must have different starting positions in the string in order to be considered different instances of the substring. For example, in the string `ababc`, the substring `ab` appears more than once, and similarly, the substring `b` also appears more than once, but the longest of them is `ab`. The first line contains the integer n — the length of the string, and the second line contains the string `s`. Output a single integer — the length of the longest substring that appears more than once. If there is no such substring, output 0. For example: - Input: ``` 5 ababc ``` - Output: ``` 2 ``` - Input: ``` 4 abcd ``` - Output: ``` 0 ```","solution":"def longest_repeated_substring_length(s): Returns the length of longest substring that appears more than once in the string `s`. n = len(s) def is_repeated_length_k(k): seen = set() for i in range(n - k + 1): substring = s[i:i+k] if substring in seen: return True seen.add(substring) return False left, right = 0, n longest_length = 0 while left <= right: mid = (left + right) // 2 if is_repeated_length_k(mid): longest_length = mid left = mid + 1 else: right = mid - 1 return longest_length"},{"question":"Berland is a beautiful country with n cities connected by m bidirectional roads. The roads are in such a condition that it takes the same amount of time to travel in either direction between any two connected cities. To boost tourism, the government wants to build k attractions in the country. Each attraction must be built in a different city. Once the attractions are built, tourists can travel between any pair of attractions to enjoy the scenic views of Berland. The government wants to ensure that the attractions are built in such a way that the maximum travel time between any two attractions is minimized. Given the number of cities, the roads, and the value of k, determine the minimum possible value of the longest travel time between any two attractions. The first line of the input contains three integers n, m, and k (2 ≤ k ≤ n ≤ 1000, 1 ≤ m ≤ 5000) — the number of cities, roads, and attractions to be built, respectively. Each of the next m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ t ≤ 105) — meaning there is a bidirectional road between cities u and v that takes t units of time to travel. Output a single integer — the minimum possible value of the longest travel time between any two attractions when they are optimally placed. **Example:** Input: ``` 5 6 3 1 2 4 1 3 2 2 3 5 2 4 1 3 5 7 4 5 3 ``` Output: ``` 3 ``` Explanation: One optimal placement of attractions could be in cities 2, 4, and 5. The longest travel time between these attractions is 3 (between city 4 and city 5).","solution":"import heapq def min_travel_time(n, m, k, roads): # Create an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) # Function to perform Dijkstra\'s algorithm to find shortest paths from a given source def dijkstra(source): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 priority_queue = [(0, source)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Perform Dijkstra\'s algorithm from every city all_pair_shortest_paths = {i: dijkstra(i) for i in range(1, n + 1)} # We need to select k cities such that the maximum distance between any pair is minimized cities = list(range(1, n + 1)) def valid(mid): # Check if there are at least k cities where all pairs are within mid distance for i in range(len(cities)): # DFS to count cities within \'mid\' distance count = 0 stack = [cities[i]] visited = set() while stack: u = stack.pop() if u not in visited: visited.add(u) count += 1 for v in cities: if v != u and all_pair_shortest_paths[u][v] <= mid and v not in visited: stack.append(v) if count >= k: return True return False # Binary search on the answer low, high = 0, 10**5 while low < high: mid = (low + high) // 2 if valid(mid): high = mid else: low = mid + 1 return low"},{"question":"In this task, you must determine the validity of a train itinerary based on a series of stations and rules about which stations can be visited directly from a given station. You are given a list of stations and a set of direct routes between them. Each route allows travel directly from one station to another. Based on these routes, your task is to determine if a given itinerary is valid. An itinerary is valid if you can follow the given sequence of stations such that each station in the sequence is directly reachable from the previous station in the sequence. The first line of input contains two integers, n and m (1 ≤ n, m ≤ 1000), the number of stations and the number of direct routes between them, respectively. The next m lines each contain two integers, u and v (1 ≤ u, v ≤ n), indicating that there is a direct route from station u to station v. The next line contains an integer k (2 ≤ k ≤ 100), the length of the itinerary. The final line contains k integers, t1, t2, ..., tk (1 ≤ t1, t2, ..., tk ≤ n), which represents the sequence of stations in the itinerary. Output \\"YES\\" if the itinerary is valid, or \\"NO\\" if it is not. Example: Input: 6 7 1 2 2 3 3 4 4 5 5 6 1 5 2 6 5 1 2 3 4 5 Output: YES In this example, the itinerary [1, 2, 3, 4, 5] is valid because each station directly follows the preceding station according to the given routes.","solution":"def is_valid_itinerary(n, m, routes, k, itinerary): # Create an adjacency list for the routes adj_list = {i: set() for i in range(1, n + 1)} for u, v in routes: adj_list[u].add(v) # Verify if the itinerary is valid for i in range(k - 1): if itinerary[i + 1] not in adj_list[itinerary[i]]: return \\"NO\\" return \\"YES\\""},{"question":"In a remote village, there are n villagers, each with their own unique house. The houses are laid out in a straight line, and the i-th house is located at coordinate x_i on this line. The villagers want to build a communal well at a specific coordinate w. The cost of building the well at coordinate w is equal to the sum of the distances from the well to each house. Your task is to find the coordinate w that minimizes the total cost of building the well. If there are multiple such coordinates, output the smallest one. The first line contains a single integer n (1 le n le 10^5) — the number of villagers. The second line contains n integers x_1, x_2, ldots, x_n (1 le x_i le 10^9) — the coordinates of the houses. Output the integer coordinate w that minimizes the total cost. If there are multiple such coordinates, output the smallest one. **Example 1:** Input: ``` 3 1 2 3 ``` Output: ``` 2 ``` **Example 2:** Input: ``` 4 1 2 3 4 ``` Output: ``` 2 ``` **Explanation:** In the first example, building the well at coordinate 2 minimizes the total distance (abs(1-2) + abs(2-2) + abs(3-2) = 1). In the second example, building the well at coordinate 2 also minimizes the total distance (abs(1-2) + abs(2-2) + abs(3-2) + abs(4-2) = 4) and it\'s the smallest among possible satisfactory coordinates (2 and 3).","solution":"def minimize_well_cost(n, coordinates): Find the coordinate w that minimizes the sum of distances to all houses. If there are multiple coordinates that result in the same minimal sum, the smallest one is chosen. # The optimal position is the median of the coordinates coordinates.sort() if n % 2 == 1: # If odd number of coordinates, median is the middle element return coordinates[n // 2] else: # If even number of coordinates, median can be any of the two middle elements mid1 = coordinates[n // 2 - 1] mid2 = coordinates[n // 2] return min(mid1, mid2)"},{"question":"A team of scientists is working on a project to analyze signals from outer space. They believe that the signal might be hiding some sort of binary message. Each signal is represented as a string consisting of the characters \'0\' and \'1\' only. The scientists found that the message is structured in a way that for every \\"block\\" of consecutive characters, there must be at least a single \'1\' and this block can be separated by zero or more \'0\'s. Two consecutive \'1\'s without any separating \'0\'s are in the same block. Your task is to help the scientists by implementing a mechanism to determine the number of such blocks in a given signal string. **Input:** The input consists of a single string s (1 ≤ |s| ≤ 10^5) which contains only characters \'0\' and \'1\'. **Output:** Print a single integer representing the number of blocks in the given string. **Examples:** **Input:** ``` 011000110 ``` **Output:** ``` 2 ``` **Input:** ``` 111000 ``` **Output:** ``` 1 ``` **Input:** ``` 0000 ``` **Output:** ``` 0 ``` **Explanation:** In the first example, the blocks are \\"011\\" and \\"110\\". In the second example, there is a single block \\"111\\". In the third example, there are no blocks because there are no \'1\'s.","solution":"def count_blocks(s): Counts the number of blocks in the given binary string s. if \'1\' not in s: return 0 blocks = 0 in_block = False for char in s: if char == \'1\' and not in_block: blocks += 1 in_block = True elif char == \'0\': in_block = False return blocks"},{"question":"You are given a list of integers representing the positions of magical gates in a long hallway. Each gate can either be open or closed. When a gate is open, you can pass through it without any issues. However, when a gate is closed, you cannot pass through and must find another path. The hallway is represented as a series of rooms connected by these gates. You start in the first room and need to reach the last room. Each room is connected to its adjacent rooms by at least one gate. Some gates may be broken and are either permanently open or closed. Given the list of gates\' states, determine if it is possible to reach the last room from the first room. The hallway has n rooms and n-1 gates between them. A \'1\' represents an open gate while a \'0\' represents a closed gate. The first line contains a single integer n (2 ≤ n ≤ 105) — the number of rooms. The second line contains n-1 integers, each being either 0 or 1, which represent the state of each gate in order from the first gate to the last gate. Print \\"yes\\" if it is possible to travel from the first room to the last room. Otherwise, print \\"no\\". Example 1: Input: 5 1 1 0 1 Output: no Example 2: Input: 4 1 0 1 Output: no Example 3: Input: 3 1 1 Output: yes","solution":"def can_travel_to_last_room(n, gates): Determines if it is possible to travel from the first room to the last room. :param n: Integer - number of rooms. :param gates: List of integers representing gate states (1 for open, 0 for closed). :return: \\"yes\\" if it is possible to travel from the first room to the last room, otherwise \\"no\\". for gate in gates: if gate == 0: return \\"no\\" return \\"yes\\""},{"question":"Chef enjoys playing chess with his friends. He has a collection of n chess pieces, each uniquely identifiable by a number from 1 to n. Each piece occupies a unique position on an m x m chessboard, represented by its coordinates (i, j). The pieces belong to one of two categories: Type A and Type B. Chef\'s friend asks him q questions about the arrangement of pieces on the board. Each question either involves moving a piece or querying the number of pieces of a certain type within a specified subgrid of the board. For the move operation, Chef can move a piece to any unoccupied position on the board. For the query operation, he needs to count how many pieces of a specific type (either Type A or Type B) lie within a given rectangular subgrid of the board defined by its top-left corner and bottom-right corner. Write a program that processes q queries. The task is to handle both types of operations efficiently. The first line contains three integers n (1 ≤ n ≤ 10^5), m (1 ≤ m ≤ 10^5) and q (1 ≤ q ≤ 10^5) — the number of pieces on the chessboard, the size of the board, and the number of queries. The next n lines contain three integers each: xi, yi, ti (1 ≤ xi, yi ≤ m, ti ∈ {1, 2}) — the initial coordinates (xi, yi) and the type (ti) of the i-th chess piece. Type 1 represents Type A and Type 2 represents Type B. The subsequent q lines describe the queries or operations in one of the following two formats: - \\"MOVE u x y\\": Move the u-th chess piece to the new coordinates (x, y). - \\"QUERY x1 y1 x2 y2 t\\": Count the number of chess pieces of type t within the subgrid defined by the top-left corner (x1, y1) and bottom-right corner (x2, y2). If there are multiple queries, handle each query independently and efficiently provide the required counts after each query. For each \\"QUERY\\" operation, print the result on a new line.","solution":"from typing import List, Tuple, Union class Chessboard: def __init__(self, n: int, m: int): self.m = m self.board = [[{\'A\': 0, \'B\': 0} for _ in range(m)] for _ in range(m)] self.pieces = {} # {piece_num: (i, j, type)} def add_piece(self, piece_num: int, x: int, y: int, piece_type: str): self.pieces[piece_num] = (x - 1, y - 1, piece_type) self.board[x - 1][y - 1][piece_type] += 1 def move_piece(self, piece_num: int, x: int, y: int): old_x, old_y, piece_type = self.pieces[piece_num] self.board[old_x][old_y][piece_type] -= 1 self.board[x - 1][y - 1][piece_type] += 1 self.pieces[piece_num] = (x - 1, y - 1, piece_type) def query(self, x1: int, y1: int, x2: int, y2: int, piece_type: str) -> int: count = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): count += self.board[i][j][piece_type] return count def process_queries(n: int, m: int, q: int, pieces_data: List[Tuple[int, int, int]], queries: List[Union[str, Tuple[int, int, int, int, int]]]) -> List[int]: chessboard = Chessboard(n, m) results = [] for idx, (x, y, t) in enumerate(pieces_data): chessboard.add_piece(idx + 1, x, y, \'A\' if t == 1 else \'B\') for query in queries: if query[0] == \'MOVE\': let, u, x, y = query chessboard.move_piece(u, x, y) elif query[0] == \'QUERY\': let, x1, y1, x2, y2, t = query result = chessboard.query(x1, y1, x2, y2, \'A\' if t == 1 else \'B\') results.append(result) return results"},{"question":"Vlad is very interested in binary strings. A binary string is a string where each character is either \'0\' or \'1\'. Vlad wants to generate a new binary string by performing a sequence of operations on an initial binary string. The operation Vlad can perform is as follows: select any substring consisting of consecutive equal characters and flip all the characters in that substring (\'0\' becomes \'1\' and \'1\' becomes \'0\'). Given an initial binary string s, compute the minimum number of operations required to transform the given string into a string of alternating characters (e.g., \\"010101\\" or \\"101010\\"). The first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the binary string. The second line contains a binary string s of length n. Print a single number — the minimum number of operations required to transform the given string into a string of alternating characters. For example: Input: 6 000111 Output: 2","solution":"def min_operations_to_alternate(n, s): Calculate the minimum number of operations required to transform the given binary string into an alternating binary string. Parameters: n (int): The length of the binary string. s (str): A binary string of length n. Returns: int: The minimum number of operations required. if n == 1: return 0 flips = 0 for i in range(1, n): if s[i] == s[i - 1]: flips += 1 return (flips + 1) // 2"},{"question":"You are given an array of `n` integers `a1, a2, ..., an`. You have to answer `q` queries. Each query consists of two integers `l` and `r` (1 ≤ l ≤ r ≤ n). For each query, you need to find the maximum value in the subarray `a[l...r]`. The first line of input contains two integers `n` and `q` where `n` (1 ≤ n ≤ 100000) is the number of elements in the array and `q` (1 ≤ q ≤ 100000) is the number of queries. The second line contains `n` integers `a1, a2, ..., an` (-10^9 ≤ ai ≤ 10^9) representing the elements of the array. Each of the next `q` lines contains two integers `l` and `r` representing the range of the query. Print the maximum value for each query in separate lines. For example: ``` Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 3 4 5 ``` **Note:** Efficiently solve this problem by pre-computing necessary information to answer each query in constant time.","solution":"class RMQ: def __init__(self, array): self.array = array self.n = len(array) self.sparse_table = self.build_sparse_table() def build_sparse_table(self): from math import log2, floor n = self.n max_log = floor(log2(n)) + 1 sparse_table = [[0] * max_log for _ in range(n)] for i in range(n): sparse_table[i][0] = self.array[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: sparse_table[i][j] = max(sparse_table[i][j-1], sparse_table[i + (1 << (j-1))][j-1]) i += 1 j += 1 return sparse_table def query(self, l, r): from math import log2, floor l -= 1 r -= 1 length = r - l + 1 log = floor(log2(length)) return max(self.sparse_table[l][log], self.sparse_table[r - (1 << log) + 1][log]) def process_queries(n, q, array, queries): results = [] rmq = RMQ(array) for query in queries: l, r = query results.append(rmq.query(l, r)) return results"},{"question":"Colony of Bacteria A colony of bacteria grows in a rectangular grid with dimensions m × n. Each cell in the grid can either be empty (denoted by 0) or contain a bacterium (denoted by 1). Over time, the bacteria spread to adjacent cells according to the following rules: 1. A bacterium in a cell will die if it has fewer than two adjacent bacteria (underpopulation) or more than three adjacent bacteria (overpopulation). 2. A bacterium in a cell survives to the next generation if it has exactly two or three adjacent bacteria. 3. An empty cell becomes populated with a bacterium if it has exactly three adjacent bacteria (reproduction). You are given the initial state of the grid and are asked to compute the state of the colony after k generations. The first line of the input contains three integers m, n, and k (1 ≤ m, n ≤ 100, 0 ≤ k ≤ 100), representing the dimensions of the grid and the number of generations. The next m lines contain n integers each, representing the initial state of the grid. Print the state of the grid after k generations. Input: - The first line contains three space-separated integers m, n, and k. - The next m lines each contain n space-separated integers (0 or 1), representing the initial state of the grid. Output: - Print the state of the grid after k generations. Example: Input: 4 5 1 0 1 0 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 0 Output: 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 0 0","solution":"def get_next_state(grid): Given the current state of the grid, compute the state for the next generation. m, n = len(grid), len(grid[0]) next_grid = [[0] * n for _ in range(m)] def count_adjacent_bacteria(x, y): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: count += grid[nx][ny] return count for i in range(m): for j in range(n): adjacent_count = count_adjacent_bacteria(i, j) if grid[i][j] == 1: if 2 <= adjacent_count <= 3: next_grid[i][j] = 1 else: next_grid[i][j] = 0 else: if adjacent_count == 3: next_grid[i][j] = 1 return next_grid def bacteria_colony(m, n, k, initial_state): current_state = initial_state for _ in range(k): current_state = get_next_state(current_state) return current_state def print_grid(grid): for row in grid: print(\\" \\".join(map(str, row))) # Example usage if __name__ == \\"__main__\\": m, n, k = 4, 5, 1 initial_state = [ [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [1, 1, 1, 0, 0], [0, 0, 0, 0, 0] ] result = bacteria_colony(m, n, k, initial_state) print_grid(result)"},{"question":"A company wants to analyze its network\'s communication patterns by examining the volume of data exchanged between different pairs of computers in a given time period. The network consists of n computers connected by m direct communication links, each defined by two computers and the amount of data exchanged between them. The company is interested in finding the pair of computers that exchanged the maximum volume of data. You are given an undirected graph representing the network, where nodes represent computers and edges represent direct communication links with their respective data volumes. Input: - The first line contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ n(n-1)/2), the number of computers and the number of direct communication links in the network, respectively. - The next m lines each contain three integers u, v (1 ≤ u, v ≤ n, u ≠ v) and w (1 ≤ w ≤ 10^6) representing a communication link between computers u and v with a volume of w units of data exchanged. Output: - Print two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing the pair of computers that exchanged the maximum volume of data. In case of multiple pairs with the same maximum data volume, print any one of them. Example: Input: ``` 5 6 1 2 30 2 3 50 3 1 40 4 1 60 4 3 10 5 2 90 ``` Output: ``` 2 5 ``` In this example, the pair of computers (2, 5) exchanged the maximum volume of data, which is 90 units. The output could also be \\"5 2\\" since the order of the pair doesn\'t matter.","solution":"def find_max_data_volume_pair(n, m, links): max_volume = -1 pair = (-1, -1) for u, v, w in links: if w > max_volume: max_volume = w pair = (u, v) return pair"},{"question":"John loves playing with strings. Recently, he came across a string consisting of lowercase Latin letters and decided to perform some operations on it. He has devised two types of operations that he can perform on this string: 1. Replace a sub-string with another string of equal length. 2. Query a sub-string and check if it is a valid palindrome. Now, John would like you to handle these operations efficiently. The first line contains an integer n (1 ≤ n ≤ 10^5) representing the length of the string. The second line contains the initial string s of length n. The third line contains an integer q (1 ≤ q ≤ 50,000) representing the number of operations. Each of the following q lines describes an operation in one of the following formats: - \\"replace l r new_str\\" indicates replacing the sub-string from index l to r (0-based index) with the string new_str of length (r - l + 1). - \\"query l r\\" indicates querying if the sub-string from index l to r (0-based index) is a palindrome. For each query operation, print \\"YES\\" if the sub-string is a palindrome, and \\"NO\\" otherwise. Example: Input: ``` 5 abcba 3 query 0 4 replace 1 3 xyz query 0 4 ``` Output: ``` YES NO ``` Explanation: Initially, the string is \\"abcba\\". 1. The first query checks if the sub-string \\"abcba\\" is a palindrome, which is true. 2. The \\"replace 1 3 xyz\\" operation changes the string to \\"axyza\\". 3. The final query checks if the sub-string \\"axyza\\" is a palindrome, which is false.","solution":"def is_palindrome(s): Helper function to check if a given string s is a palindrome. return s == s[::-1] def process_operations(n, s, operations): Processes a list of operations on the string s. Parameters: n (int): The length of the string. s (str): The initial string. operations (list of str): The list of operations in the format described. Returns: list of str: The results of the query operations (\\"YES\\" or \\"NO\\"). results = [] s = list(s) # Convert the string to a list for mutable operations for op in operations: parts = op.split() if parts[0] == \\"replace\\": l = int(parts[1]) r = int(parts[2]) new_str = parts[3] s[l:r+1] = new_str elif parts[0] == \\"query\\": l = int(parts[1]) r = int(parts[2]) substring = \'\'.join(s[l:r+1]) if is_palindrome(substring): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a series of obstacles on a straight line, each characterized by its start and end points. A point on the line can contain multiple intersecting obstacles. Your goal is to find the maximum number of overlapping obstacles at any point on the line. The input consists of: - The first line containing an integer `n` (1 ≤ n ≤ 100,000) — the number of obstacles. - The next `n` lines, each containing two integers `start` and `end` (1 ≤ start ≤ end ≤ 1,000,000), describing the start and end points of each obstacle. Return a single integer — the maximum number of overlapping obstacles at any point on the line. # Example Input ``` 5 1 5 2 6 4 8 1 3 7 9 ``` Output ``` 3 ``` In the example above, the maximum number of overlapping obstacles occurs at point 4, where three obstacles overlap.","solution":"def max_overlapping_obstacles(obstacles): events = [] for start, end in obstacles: events.append((start, 1)) # Starting of an obstacle events.append((end + 1, -1)) # Ending of an obstacle events.sort() max_overlaps = 0 current_overlaps = 0 for event in events: current_overlaps += event[1] if current_overlaps > max_overlaps: max_overlaps = current_overlaps return max_overlaps"},{"question":"Given an array of integers, you must determine whether you can make the array sorted in non-decreasing order by removing exactly one or zero elements. In other words, you need to check if it\'s possible to achieve a sorted array after removing at most one element from the array. The input consists of multiple test cases. The first line of the input contains a single integer t (1 ≤ t ≤ 10^5) indicating the number of test cases. Each of the following t lines contains an integer n (2 ≤ n ≤ 2 * 10^5), the length of the array, followed by n integers representing the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 2 * 10^5. For each test case, print \\"YES\\" if it\'s possible to make the array sorted in non-decreasing order by removing at most one element, otherwise, print \\"NO\\". # Example Input: ``` 3 5 1 2 10 5 7 4 1 2 3 4 6 10 5 1 3 4 6 ``` Output: ``` YES YES NO ``` In the first test case, by removing the element \'10\', the array becomes [1, 2, 5, 7], which is sorted. In the second test case, the array is already sorted. In the third test case, removing any single element will not result in a sorted array.","solution":"def can_be_sorted_by_removing_one_element(t, test_cases): results = [] for case in test_cases: n, arr = case if is_sorted(arr): results.append(\\"YES\\") continue found_solution = False for i in range(n): new_arr = arr[:i] + arr[i+1:] if is_sorted(new_arr): found_solution = True results.append(\\"YES\\") break if not found_solution: results.append(\\"NO\\") return results def is_sorted(arr): for i in range(1, len(arr)): if arr[i] < arr[i-1]: return False return True"},{"question":"Kevin wants to organize a music festival featuring multiple bands. He has a schedule that specifies the time slots during which each band will be performing. However, he needs to ensure that no two bands are performing at the same time. Given the start and end times of each band\'s performance, find the minimum number of additional stages required so that no two bands are performing on the same stage simultaneously. The first line of input contains an integer n (1 ≤ n ≤ 100000) — the number of bands. The next n lines contain two integers each, si and ei (0 ≤ si < ei ≤ 1000000) — the start and end times of the i-th band\'s performance. Output a single integer — the minimum number of additional stages required. For example, if there are 3 bands with schedules (1, 5), (2, 6), and (7, 9), you would need 2 additional stages for the first two bands performing at overlapping times, and no additional stage for the third band. If the input is: 3 1 5 2 6 7 9 The output should be: 2","solution":"def min_additional_stages(n, schedules): events = [] for start, end in schedules: events.append((start, 1)) # Band start events.append((end, -1)) # Band end events.sort() # Sort events by time, breaks tie by type (-1 before +1 if same time, to close stages first) max_concurrent = 0 current_concurrent = 0 for event in events: current_concurrent += event[1] if current_concurrent > max_concurrent: max_concurrent = current_concurrent return max_concurrent - 1 # additional stages required is one less than max simultaneous bands"},{"question":"Given an array of integers and an integer k (1 ≤ k ≤ 10^6), your task is to find and print the k-th smallest element in the array after sorting it in non-decreasing order. If the array contains duplicate elements, it is to be treated as they appear in the sorted order. Consider the array and the integer k are given in such a way that the solution always exists. The first line of the input contains a single integer n (1 ≤ n ≤ 10^6) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ a_i ≤ 10^9) — the elements of the array. The third line contains a single integer k. Output the k-th smallest element of the sorted array. Example: ``` Input: 5 3 1 2 5 4 2 Output: 2 ```","solution":"def kth_smallest_element(arr, k): Function to find the k-th smallest element in a sorted array. :param arr: list of integers :param k: integer representing the k-th position :return: the k-th smallest element arr.sort() # Sort the array in non-decreasing order return arr[k-1] # Return the k-th smallest element (1-based index)"},{"question":"John loves puzzles and games. Amy, to challenge John, proposed a game involving a square grid of characters. The game involves a unique string and a square grid of size n×n. John has to find the length of the longest substring of the unique string that appears as a sequence of adjacent characters in the grid, where adjacent means left, right, up, or down. For example, if the unique string is \\"CAB\\" and the grid is: ``` C A B D E F G H I ``` The longest substring \\"CAB\\" can be traced starting from the cell (1,1) to (1,2) to (1,3). The first line contains the unique string s consisting of small Latin letters (\'a\' to \'z\'), with a length that does not exceed 100. The second line contains a single integer n (1 ≤ n ≤ 100), the size of the grid. Each of the next n lines contains n characters, each a small Latin letter (\'a\' to \'z\'), representing the grid. Print the length of the longest substring of the unique string s that appears as a sequence of adjacent characters in the grid. In the sample, for s = \\"CAB\\" and grid: ``` 3 C A B D E F G H I ``` John should print 3. If the longest matching substring has a length of k, your output will be k. If there is no matching substring, print 0.","solution":"def longest_substring(grid, s): def search_in_grid(i, j, k): if not (0 <= i < n and 0 <= j < n): return 0 if grid[i][j] != s[k]: return 0 if k == len(s) - 1: return 1 temp = grid[i][j] grid[i][j] = \'#\' # mark as visited res = 1 + max( search_in_grid(i-1, j, k+1), search_in_grid(i+1, j, k+1), search_in_grid(i, j-1, k+1), search_in_grid(i, j+1, k+1) ) grid[i][j] = temp # restore the cell value return res n = len(grid) max_length = 0 for i in range(n): for j in range(n): if grid[i][j] == s[0]: max_length = max(max_length, search_in_grid(i, j, 0)) return max_length def main(): s = input().strip() n = int(input().strip()) grid = [input().strip().split() for _ in range(n)] print(longest_substring(grid, s)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a binary tree. Your task is to find the maximum depth of the tree. The maximum depth is defined as the number of nodes along the longest path from the root node down to the farthest leaf node. Each node in the tree has the following structure: ``` class TreeNode { int val; TreeNode left; TreeNode right; TreeNode(int x) { val = x; } } ``` You are to complete the function `int maxDepth(TreeNode root)` that takes the root node of the binary tree and returns the maximum depth. # Input: - A single integer `T` (1 le T le 10) representing the number of test cases. - For each test case, the binary tree root. # Output: - For each test case, print the maximum depth of the binary tree. # Example: Input: ``` 2 [1,2,3,4,5] # Tree structure: 1 # / # 2 3 # / # 4 5 [3,9,20,null,null,15,7] # Tree structure: 3 # / # 9 20 # / # 15 7 ``` Output: ``` 3 3 ``` # Constraints: - The tree can have up to `10^4` nodes. - The value of a node can be any integer.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def maxDepth(root): Returns the maximum depth of the binary tree. if root is None: return 0 else: left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Monica has a tree in her backyard, and each autumn she collects the leaves that fall. The tree has n branches, and each branch can either be a leaf or have child branches attached. Each autumn, Monica writes down the number of leaves that fall from each branch. Monica wants to know how many different sums of leaves she can get by selecting a subtree of the tree. A subtree of the tree rooted at branch x is a branch x and all its descendants in the tree. Given the tree structure and the number of leaves falling from each branch, help Monica find the number of different sums of leaves she can collect by selecting a subtree. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of branches in the tree. The next line contains n integers l1, l2, ..., ln (0 ≤ li ≤ 1000) — the number of leaves on each branch. The next n-1 lines contain two integers u and v (1 ≤ u, v ≤ n), indicating that branch u is directly connected to branch v. The given branches will always form a tree. Print a single integer — the number of different sums of leaves she can collect by selecting a subtree. # Example Input: 6 4 2 3 1 1 5 1 2 1 3 2 4 2 5 3 6 Output: 5 # Explanation: Possible sums of leaves by selecting subtrees are 4, 7, 10, 3, and 5. These sums correspond to the subtrees rooted at branches 1, 2, 3, 4 and 6 respectively. Hence, the number of different sums is 5.","solution":"def count_unique_sums_of_leaves(n, leaves, edges): def dfs(node, parent): subtree_sum = leaves[node] for neighbor in adj[node]: if neighbor != parent: subtree_sum += dfs(neighbor, node) unique_sums.add(subtree_sum) return subtree_sum # Build adjacency list adj = {i: [] for i in range(n)} for u, v in edges: adj[u - 1].append(v - 1) adj[v - 1].append(u - 1) unique_sums = set() dfs(0, -1) return len(unique_sums)"},{"question":"You are given a circular field with radius `r` that is centered at the origin of a coordinate system. There are `n` non-overlapping circular ponds within this field, each pond being represented by its center coordinates `(xi, yi)` and radius `ri`. A goat is tied to a post at the origin with a rope of length `r`. The goat can graze on any part of the field that is not covered by the ponds. Calculate the total grazing area available to the goat. The first line of the input contains two integers `n` and `r` (`1 ≤ n ≤ 1000`, `1 ≤ r ≤ 1000`) — the number of ponds and the radius of the circular field, respectively. Each of the next `n` lines contains three integers `xi`, `yi`, and `ri` (`-1000 ≤ xi, yi ≤ 1000`, `1 ≤ ri ≤ 100`) — the coordinates of the center of the ith pond and the radius of the ith pond. It is guaranteed that the ponds do not overlap each other. Print a single float — the total grazing area available to the goat, rounded to two decimal places. **Example Input:** ``` 3 10 2 2 1 5 5 2 -6 -6 1 ``` **Example Output:** ``` 281.74 ``` (Note: The output value is for illustrative purposes and does not represent the actual calculated value for the example input, which requires accurate geometric computation.)","solution":"import math def grazing_area(n, r, ponds): Calculate the total grazing area available to the goat in a circular field with circular ponds. Parameters: n (int): number of ponds. r (int): radius of the circular field. ponds (list of tuples): list containing the ponds information. Each tuple contains (xi, yi, ri). Returns: float: the total grazing area rounded to two decimal places. field_area = math.pi * r * r ponds_area = 0 for pond in ponds: xi, yi, ri = pond ponds_area += math.pi * ri * ri grazing_area = field_area - ponds_area return round(grazing_area, 2)"},{"question":"Lena loves playing board games, and she recently invented a new one! In her game, there is a board with n cells arranged in a line, numbered from 1 to n. Each cell has a number written on it. Lena has a special die with m sides. When she rolls it, the result will be any number between 1 and m with equal probability. Lena starts at cell 1. In each move, she rolls the die and advances by the number of cells equal to the result of the die roll. If she reaches or passes the last cell (cell n), she wins. Lena wants to know the minimum number of moves needed to win the game if she plays optimally. The first line of input contains two integers n and m (1 le n, m le 10^6) — the number of cells on the board and the number of sides on the die. Output a single integer — the minimum number of moves Lena needs to reach or pass the last cell starting from the first cell. You may assume Lena will always be able to win the game, given the constraints. Consider the following examples: Example 1: Input: 10 6 Output: 2 Example 2: Input: 5 3 Output: 2 In the first example, Lena can reach the 10th cell in two moves by rolling a six each time. In the second example, Lena can reach the 5th cell in two moves by rolling a three both times.","solution":"def min_moves_to_win(n, m): Returns the minimum number of moves needed to win the game given n cells and m-sided die. # The minimum number of moves is determined by dividing n by m and checking for any remainder. # If there is a remainder, it means an additional move is necessary. if n % m == 0: return n // m else: return n // m + 1"},{"question":"You have been assigned a task to create a group communication network for employees in your organization. Each employee has a specific reporting hierarchy defined by a directed acyclic graph (DAG). This graph represents the reporting relationships where a directed edge from employee A to employee B means A reports to B. Your task is to determine the longest chain of command in this organization. The first line of input contains an integer n (1 ≤ n ≤ 1,000) — the number of employees in the organization. The second line of input contains an integer m (0 ≤ m ≤ 5,000) — the number of reporting relationships. Then follow m lines, each containing two integers a and b (1 ≤ a, b ≤ n), indicating there is a directed edge from employee a to employee b. Determine the length of the longest chain of command and print the length. A single employee without any reporting or being reported by anyone is considered to have a chain length of 1. Example: Input: 5 4 1 2 2 3 3 4 4 5 Output: 5 Explanation: The longest chain of command is 1 → 2 → 3 → 4 → 5, which has a length of 5.","solution":"from collections import defaultdict, deque def longest_chain(n, m, edges): # Create graph from edges graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in edges: graph[a].append(b) in_degree[b] += 1 # Perform topological sort and calculate the longest chain longest_path = [1] * (n + 1) queue = deque() # Add all nodes with no incoming edges to the queue for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: current = queue.popleft() for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) longest_path[neighbor] = max(longest_path[neighbor], longest_path[current] + 1) return max(longest_path)"},{"question":"Alice loves reading books. She has a collection of n books, each with a certain number of pages. She sets a goal to read exactly p pages over a number of days, but she can choose to read any number of books each day, as long as the total number of pages read on that day does not exceed a certain limit m. You need to help Alice determine the minimum number of days required to achieve her reading goal of p pages if she reads optimally each day. The first line of input contains three space-separated integers n, p, and m (1 ≤ n ≤ 10^5, 1 ≤ p ≤ 10^9, 1 ≤ m ≤ 10^5), representing the number of books, the total pages Alice wants to read, and the maximum pages she can read in a day, respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), where ai represents the number of pages in the ith book. Output a single integer, the minimum number of days required for Alice to read exactly p pages, or -1 if it is not possible to reach her goal. For example: In the first example, Alice can read 1 page each day for 10 days. In the second example, Alice can read the 2-page book on the first day, and the 4-page book on the second day. In the third example, Alice cannot reach her goal because the total pages in her books are less than p.","solution":"def min_days_to_read(n, p, m, pages): if sum(pages) < p: return -1 day_count = 0 pages_read = 0 pages.sort(reverse=True) while pages_read < p: day_total = 0 todays_pages = [] for i in range(len(pages)): if day_total + pages[i] <= m: day_total += pages[i] todays_pages.append(i) if day_total == m: break for i in sorted(todays_pages, reverse=True): pages_read += pages.pop(i) day_count += 1 return day_count"},{"question":"In this problem, you are given a tree with `n` nodes numbered from `1` to `n`. Each node has a value assigned to it that represents its color. You need to answer `q` queries of the following type: \\"How many unique colors are present in the subtree of node `u`?\\" The subtree of a node `u` consists of `u` and all its descendants in the tree. # Input The first line contains an integer `n` (1 le n le 100,000) - the number of nodes in the tree. The second line contains `n` integers `c[i]` (1 le c[i] le 100,000) - the colors of the nodes, where `c[i]` is the color of node `i`. Each of the next `n-1` lines contains two integers `u` and `v` (1 le u,v le n) - denoting an edge in the tree. The next line contains an integer `q` (1 le q le 100,000) - the number of queries. Each of the next `q` lines contains a single integer `u` (1 le u le n) - representing a query about the number of unique colors in the subtree of node `u`. # Output For each query, output a single integer - the number of unique colors in the subtree of node `u`. # Example Input ``` 5 1 2 1 3 1 1 2 1 3 2 4 2 5 3 1 2 3 ``` Output ``` 3 2 1 ``` # Explanation In this example, we have a tree with 5 nodes. The tree structure is as follows: - Node 1 connects to Node 2 and Node 3. - Node 2 connects to Node 4 and Node 5. The colors are: - Node 1: Color 1 - Node 2: Color 2 - Node 3: Color 1 - Node 4: Color 3 - Node 5: Color 1 - Query 1: The subtree of Node 1 includes Nodes 1, 2, 3, 4, and 5, which have colors {1, 2, 1, 3, 1}. The unique colors are {1, 2, 3}, so the output is 3. - Query 2: The subtree of Node 2 includes Nodes 2, 4, and 5, which have colors {2, 3, 1}. The unique colors are {1, 2, 3}, so the output is 3. - Query 3: The subtree of Node 3 includes only Node 3, which has color 1. The unique colors are {1}, so the output is 1.","solution":"def count_unique_colors(n, colors, edges, queries): from collections import defaultdict, deque # Build the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform DFS and gather color counts def dfs(node, parent): color_count[node] = {colors[node - 1]} for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) color_count[node].update(color_count[neighbor]) # Process each query color_count = [set() for _ in range(n + 1)] dfs(1, -1) results = [len(color_count[u]) for u in queries] return results"},{"question":"You are given an array of integers and you need to answer multiple queries about it. Each query consists of two integers l and r, and you need to find the sum of all the even numbers in the segment of the array from index l to index r, inclusive (1-based indexing). The array and queries have the following constraints: 1. The array length n can be up to 100,000. 2. Each element in the array is an integer between 1 and 10,000. 3. The number of queries q can be up to 100,000. For each query, output the sum of even numbers in the corresponding segment of the array. # Input Format: The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000), the number of elements in the array and the number of queries, respectively. The second line contains n integers, the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing a query to find the sum of even numbers in the segment from index l to index r. # Output Format: For each query, print a single integer, the sum of even numbers in the corresponding segment of the array. # Example Input: ``` 6 3 1 2 3 4 5 6 1 3 2 5 1 6 ``` # Example Output: ``` 2 6 12 ``` # Explanation: - For the first query, the segment [1, 3] contains the numbers [1, 2, 3]. The sum of the even number is 2. - For the second query, the segment [2, 5] contains the numbers [2, 3, 4, 5]. The sum of the even numbers is 2 + 4 = 6. - For the third query, the segment [1, 6] contains the numbers [1, 2, 3, 4, 5, 6]. The sum of the even numbers is 2 + 4 + 6 = 12. # Implementation Hint: To efficiently handle up to 100,000 queries on an array of length up to 100,000, consider using a prefix sum array that only includes the sums of even numbers. This way, each query can be answered in constant time.","solution":"def precompute_even_prefix_sums(arr): n = len(arr) even_prefix_sums = [0] * (n + 1) # initialize prefix sum array with an extra zero at the beginning for i in range(1, n + 1): even_prefix_sums[i] = even_prefix_sums[i - 1] + (arr[i - 1] if arr[i - 1] % 2 == 0 else 0) return even_prefix_sums def query_even_sum(even_prefix_sums, l, r): return even_prefix_sums[r] - even_prefix_sums[l - 1] def process_queries(n, arr, queries): even_prefix_sums = precompute_even_prefix_sums(arr) results = [] for l, r in queries: results.append(query_even_sum(even_prefix_sums, l, r)) return results"},{"question":"There is a robot situated in an MxN grid, which starts at the top-left corner (0, 0) of the grid. This robot can move either down or right at any point in time. The robot tries to reach the bottom-right corner (M-1, N-1) of the grid. However, there are several obstacles in the grid that the robot cannot pass through. You are given a 2D array `obstacleGrid` of size MxN where: - `obstacleGrid[i][j]` is 0 if the cell (i, j) is not an obstacle. - `obstacleGrid[i][j]` is 1 if the cell (i, j) is an obstacle. Your task is to find the number of unique paths the robot can take to reach the bottom-right corner of the grid while avoiding the obstacles. Since the number of unique paths can be very large, return the answer modulo (10^9 + 7). # Input - The first line contains two integers M and N (1 ≤ M, N ≤ 1000) — the number of rows and columns in the grid. - The next M lines each contain N integers representing the grid, where each integer is either 0 or 1. # Output - Print a single integer, the number of unique paths from the top-left corner to the bottom-right corner mod (10^9 + 7). # Example Input ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output ``` 2 ``` Explanation There are two unique paths for the robot to go from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In this example, there is an obstacle at cell (1, 1), so paths through this cell are not possible.","solution":"def uniquePathsWithObstacles(obstacleGrid): MOD = 10**9 + 7 M = len(obstacleGrid) N = len(obstacleGrid[0]) if obstacleGrid[0][0] == 1 or obstacleGrid[M-1][N-1] == 1: return 0 # Initialize DP table dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # Fill the DP table for i in range(M): for j in range(N): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[M-1][N-1]"},{"question":"In the bustling town of Codesville, the annual Marathon of Code is about to begin, and the town\'s reigning champion, Coderina, is all set to defend her title. This year\'s marathon involves navigating a series of checkpoints in an optimal sequence. Given her prowess and fame, Coderina has asked you to help her find the shortest route. The marathon course is represented as a weighted, undirected graph with n nodes and m edges. Each node represents a checkpoint, and each edge represents a path between two checkpoints with a certain distance. Coderina must start at checkpoint 1 and visit all checkpoints exactly once before returning to checkpoint 1, making this a classic Travelling Salesperson Problem (TSP). You are provided with the number of checkpoints, number of paths, and the details of each path\'s distance. Your task is to compute the shortest possible route that Coderina can take to complete the marathon. The input format is as follows: The first line of the input contains two integers n (2 ≤ n ≤ 15) — the number of checkpoints, and m (1 ≤ m ≤ n*(n-1)/2) — the number of paths. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — indicating there is a path between checkpoint u and checkpoint v with distance w. Output a single integer — the shortest possible distance Coderina needs to cover to visit all checkpoints exactly once and return to the start. Note: You can assume that it is always possible to visit all checkpoints with the given paths.","solution":"from itertools import permutations def find_shortest_route(n, m, paths): # Create a distance matrix initialized with a large number dist = [[float(\'inf\')] * n for _ in range(n)] # Populate the distance matrix with given paths for u, v, w in paths: dist[u-1][v-1] = w dist[v-1][u-1] = w # Check all permutations of nodes except the starting point (0-indexed) nodes = list(range(1, n)) min_route = float(\'inf\') for perm in permutations(nodes): # Calculate the route distance including return to start current_dist = dist[0][perm[0]] for i in range(len(perm) - 1): current_dist += dist[perm[i]][perm[i+1]] current_dist += dist[perm[-1]][0] # Update minimum route distance if current_dist < min_route: min_route = current_dist return min_route"},{"question":"You are given an array of n integers. You want to perform an operation where in each step, you can choose any two different elements of the array and replace each of them with their sum. Your goal is to perform this operation until all elements in the array become equal. If all elements in the array can become equal, print the minimum number of steps required to make all elements equal. Otherwise, print -1. The first line contains the number n (1 ≤ n ≤ 1000) which represents the number of elements in the array. The second line contains n integers — the array\'s elements. In the first example: [1, 1, 1], all elements are already equal and no operations are needed. In the second example: [1, 2, 3], you can perform the following operations: 1. Choose 1 and 2, replace them with their sum: array becomes [3, 3, 3]. The first line should output the minimum number of steps required to make all elements equal, or -1 if it is not possible. Example: Input: 3 1 1 1 Output: 0 Input: 3 1 2 3 Output: 1","solution":"def min_steps_to_make_elements_equal(arr): Returns the minimum number of steps required to make all elements in the array equal, or -1 if it is not possible. # Check if all elements in the array are already equal if all(x == arr[0] for x in arr): return 0 # Calculate the sum of the array and the length of the array total_sum = sum(arr) n = len(arr) # If the total sum is not divisible by the length, it\'s impossible to make all elements equal if total_sum % n != 0: return -1 # Find the target value that each element should become target = total_sum // n # Count how many steps are required to make all elements equal steps = 0 for num in arr: steps += abs(target - num) # Each operation reduces the difference sum by 2 as each pair of non-equal elements can be summed together return steps // 2"},{"question":"You are given a sequence of integers a_1, a_2, dots, a_n. The sequence can contain both positive and negative numbers. Your task is to determine whether it is possible to partition the sequence into two non-empty subsequences such that the sum of the elements in the first subsequence is equal to the sum of the elements in the second subsequence. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (2 le n le 50) — the number of elements in the sequence. The second line contains n integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6) — the elements of the sequence. For each test case, print \\"YES\\" if it is possible to partition the sequence into two non-empty subsequences with equal sums, and \\"NO\\" otherwise. Example input: ``` 2 4 1 2 3 4 3 -1 1 1 ``` Example output: ``` YES NO ```","solution":"def can_partition_into_equal_sums(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] total_sum = sum(sequence) if total_sum % 2 != 0: results.append(\\"NO\\") continue target_sum = total_sum // 2 dp = [False] * (target_sum + 1) dp[0] = True for num in sequence: for j in range(target_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] if dp[target_sum]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def partition_test_cases(t, raw_test_cases): test_cases = [] idx = 0 for _ in range(t): n = raw_test_cases[idx] sequence = raw_test_cases[idx + 1] test_cases.append((n, sequence)) idx += 2 return test_cases"},{"question":"You are given a binary string consisting of only \'0\'s and \'1\'s. Your task is to split this string into the minimum number of substrings such that each substring contains at least one \'1\'. Each \'1\' can only belong to one substring. Write a function that, given a binary string, returns the minimum number of such substrings needed. If it is not possible to split the string in the required way, return -1. Input: - A single string consisting of \'0\'s and \'1\'s, with length n (1 ≤ n ≤ 1000). Output: - A single integer representing the minimum number of substrings that satisfy the given condition. If it\'s impossible, return -1. Example: Input: ``` 1101101 ``` Output: ``` 3 ``` Input: ``` 0000 ``` Output: ``` -1 ``` Explanation: Example 1: ``` The string \\"1101101\\" can be split into \\"1\\", \\"1011\\", \\"01\\". Each substring contains at least one \'1\'. ``` Example 2: ``` The string \\"0000\\" doesn\'t contain any \'1\'s, so it\'s impossible to split it into substrings satisfying the condition. ```","solution":"def min_substrings_with_one(binary_str): Returns the minimum number of substrings such that each substring contains at least one \'1\'. If it\'s impossible, returns -1. if \'1\' not in binary_str: return -1 # Count the number of \'1\'s in the binary string count_of_ones = binary_str.count(\'1\') # The minimum number of substrings containing at least one \'1\' is the number of \'1\'s return count_of_ones"},{"question":"Alex is managing a company where employees\' performance is tracked in different projects. Each project can have multiple tasks, and every task has an estimated time of completion. Alex is interested in finding out how many projects can be completed within a given deadline if the tasks within each project are completed in the estimated time, without any overlap in task execution. For each project, all tasks must be started and completed one after another without interruption. The tasks of different projects cannot overlap in time if you work on multiple projects sequentially. Also, once you start a project, you must finish all tasks of that project before moving to another project. The first line contains three integers: n (1 ≤ n ≤ 100), the number of projects, m (1 ≤ m ≤ 1000), the total number of tasks across all projects, and d (1 ≤ d ≤ 10^6), the deadline in units of time. The following n lines each start with an integer k, the number of tasks in the project, followed by k integers t1, t2, ..., tk (1 ≤ ti ≤ 1000), the estimated time for each task in the project. Output the maximum number of projects that can be completed within the deadline. For example, consider the following test case: Input: 3 8 10 3 2 2 2 2 1 3 3 1 1 2 Output: 2 In this example, the projects with tasks [2, 2, 2] and [1, 3] can be completed within the deadline of 10 time units. The project with tasks [2, 2, 2] takes 6 time units, and the project with tasks [1, 3] takes 4. The sum (6+4=10) fits within the allowed deadline, so 2 projects can be completed.","solution":"def max_projects_within_deadline(n, m, d, projects): Calculate the maximum number of projects that can be completed within a given deadline. :param n: number of projects :param m: total number of tasks across all projects :param d: deadline in units of time :param projects: List of projects where each project is represented by a list of task durations :return: Maximum number of projects that can be completed within the deadline # Calculate the total time required for each project project_times = [sum(project) for project in projects] # Sort the projects by their total required time in ascending order project_times.sort() total_time_used = 0 completed_projects = 0 # Iterate over the sorted project times and count how many can be completed within the deadline for time in project_times: if total_time_used + time <= d: total_time_used += time completed_projects += 1 else: break return completed_projects"},{"question":"You are given m points on a 2D plane. These points represent the positions of buildings in a city. Your task is to find a rectangle with sides parallel to the x and y axes that covers all the buildings and has the smallest possible area. The first line of the input contains an integer m (1 ≤ m ≤ 100) — the number of buildings. Each of the following m lines contains two integers xi and yi (1 ≤ xi, yi ≤ 1000) — the coordinates of the i-th building. Print a single integer — the minimum possible area of the rectangle that covers all the buildings. In the first sample, the rectangle that covers both buildings is defined by the points (1, 1) and (2, 2), and its area is 1. In the second sample, the rectangle is defined by the points (1, 1) and (3, 4), and its area is 6. In the third sample, since there is only one building, the area of the smallest rectangle that covers it is 0.","solution":"def min_rectangle_area(m, buildings): if m <= 1: return 0 xs = [building[0] for building in buildings] ys = [building[1] for building in buildings] min_x = min(xs) max_x = max(xs) min_y = min(ys) max_y = max(ys) length = max_x - min_x width = max_y - min_y return length * width"},{"question":"Given an array of n integers and another integer k, determine the number of subarrays of length exactly k that have the same sum of elements. Additionally, for each such subarray, print its starting and ending indices (1-based). A subarray is defined as a contiguous segment of the array. # Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100000) — the length of the array and the required length of the subarrays. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. # Output: - Print the number m of valid subarrays. - Then, print m lines, each containing two integers — the starting and ending indices of a subarray. # Example: Input: 5 3 1 2 1 2 1 Output: 2 1 3 3 5 # Explanation: In the example, there are two subarrays of length 3 with the same sum: - The subarray from indices 1 to 3 (subarray: [1, 2, 1]) has a sum of 4. - The subarray from indices 3 to 5 (subarray: [1, 2, 1]) also has a sum of 4.","solution":"def subarrays_with_same_sum(n, k, arr): subarray_sums = {} result = [] count = 0 for i in range(n - k + 1): subarray = arr[i:i + k] subarray_sum = sum(subarray) if subarray_sum in subarray_sums: subarray_sums[subarray_sum].append((i + 1, i + k)) else: subarray_sums[subarray_sum] = [(i + 1, i + k)] for subarray_list in subarray_sums.values(): if len(subarray_list) > 1: count += len(subarray_list) result.extend(subarray_list) return count, result"},{"question":"Alex loves playing the game \\"Race Master\\". In the game, there is a series of checkpoints that players must pass through, each represented by a point in a 2D plane. Alex wants to know the shortest distance he needs to travel to go through all checkpoints in sequence. You need to help him by calculating the total travel distance. The distance between two points (x1, y1) and (x2, y2) is defined as the Euclidean distance, which is calculated as: text{distance} = sqrt{(x2 - x1)^2 + (y2 - y1)^2} The first line contains a single integer n (2 le n le 1000) — the number of checkpoints. Each of the next n lines contains two integers x_i and y_i (-10^4 le x_i, y_i le 10^4), representing the coordinates of the i-th checkpoint. Print a single number — the total travel distance. Your answer will be considered correct if the absolute error does not exceed 10^{-6}. # Example Input ``` 3 0 0 1 1 2 2 ``` Output ``` 2.828427 ``` The example has three checkpoints with coordinates at (0, 0), (1, 1), and (2, 2). The distances between (0, 0) and (1, 1) and between (1, 1) and (2, 2) are both √2 ≈ 1.414213, so the total distance is 2.828427.","solution":"import math def total_travel_distance(n, checkpoints): Returns the total travel distance to go through all checkpoints in sequence. Parameters: n : int Number of checkpoints. checkpoints : list of tuples List of tuples where each tuple contains the coordinates (x, y) of a checkpoint. Returns: float Total travel distance. total_distance = 0.0 for i in range(1, n): x1, y1 = checkpoints[i-1] x2, y2 = checkpoints[i] total_distance += math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) return total_distance"},{"question":"A company wants to schedule meetings in their conference room and they need your help to make a schedule complying with their specific rules. Each meeting request is specified by a start time and an end time. The company wants to maximize the number of meetings scheduled without any overlap. Can you write a program to find the maximum number of meetings that can be scheduled? The first line of input contains an integer n (1 ≤ n ≤ 100), which denotes the number of meeting requests. The next n lines each contain two integers start and end (0 ≤ start < end ≤ 1000), which denote the start time and end time of a meeting request. Output the maximum number of non-overlapping meetings that can be scheduled. Input: 5 1 3 2 4 3 5 0 6 5 7 Output: 3","solution":"def max_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be scheduled. :param n: Number of meeting requests :param meetings: List of tuples where each tuple is (start, end) :return: Maximum number of non-overlapping meetings # Sort meetings by their end times meetings.sort(key=lambda x: x[1]) max_meetings_count = 0 last_end_time = -1 for start, end in meetings: if start >= last_end_time: max_meetings_count += 1 last_end_time = end return max_meetings_count # Example Input n = 5 meetings = [(1, 3), (2, 4), (3, 5), (0, 6), (5, 7)] # Example Output print(max_meetings(n, meetings)) # Output: 3"},{"question":"Emma is preparing for a coding competition and she decided to practice programming by solving some interesting problems. She likes palindromes very much and wants to generate palindromic sequences from the given string. A palindromic sequence is a sequence that reads the same backward as forward. Given a string s consisting of lowercase English letters, Emma wants to find the length of the longest palindromic subsequence in the string. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help Emma to find the length of the longest palindromic subsequence. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. Then follow the descriptions of the test cases. The first line of each test case contains a single integer n (1 leq n leq 1000) — the length of the string s. The second line of each test case contains the string s consisting of n lowercase English letters. For each test case, print a single integer — the length of the longest palindromic subsequence in the given string. Example: Input: ``` 3 7 abacaba 5 abcde 3 aaa ``` Output: ``` 7 1 3 ``` Explanation: - In the first case, the entire string \\"abacaba\\" is a palindrome, so the answer is 7. - In the second case, no two letters are the same, so the maximum length of a palindromic subsequence is 1. - In the third case, the entire string is \\"aaa\\" which is already a palindrome, so the answer is 3.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 results = [] for _ in range(t): n = int(data[index]) index += 1 s = data[index] index += 1 results.append(longest_palindromic_subsequence(s)) for result in results: print(result)"},{"question":"You are given a collection of n distinct integers in an array. Your task is to determine if it\'s possible to partition this array into two subsets such that the sum of the elements in both subsets is equal. If it is possible to partition the array in such a way, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains a single integer n (1 le n le 100) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. For each test case, print a single line containing \\"YES\\" or \\"NO\\". # Example Input ``` 3 4 1 5 11 5 4 1 2 3 5 1 100 ``` Output ``` YES NO NO ``` # Explanation **Test Case 1:** We can partition the array into [1, 5, 5] and [11], both subsets having the same sum of 11. **Test Case 2:** It is not possible to partition the array into subsets with equal sums. **Test Case 3:** The array has only one element, and it is not possible to partition it into two subsets. # Note * The problem can be approached by employing dynamic programming, treating it as a variant of the \\"Subset Sum Problem\\" where the target sum is half the total sum of the array. * If the total sum of the array is odd, it is immediately impossible to split it into two subsets with equal sums.","solution":"def can_partition(t, test_cases): Determines if it\'s possible to partition each array in test_cases into two subsets with equal sums. Parameters: t (int): Number of test cases. test_cases (list): List of tuples, each containing an int n and a list of n integers. Returns: list: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for case in test_cases: n, arr = case total_sum = sum(arr) # If the total sum is odd, we cannot partition it into two equal subsets if total_sum % 2 != 0: results.append(\\"NO\\") continue target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in arr: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] if dp[target]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s consisting of lowercase Latin letters. You need to process two types of queries on this string: 1. **Update**: Change the character at a given position to a new character. 2. **Query**: Determine which character (lexicographically smallest) occurs the most frequently in a given substring. The queries are given as follows: - Type 1 (Update): Given 1 x c, change the character at position x of string s to c (1-based index). - Type 2 (Query): Given 2 l r, find the lexicographically smallest character that occurs the most frequently in the substring s[l...r] (both inclusive, 1-based index). # Input Format - The first line contains a string s of length n (1 ≤ n ≤ 100,000). - The second line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. - The following q lines contain queries of the form described above (either 1 x c or 2 l r). # Output Format For each query of type 2, output a single character — the lexicographically smallest character that occurs the most frequently in the specified substring. # Example **Input:** ``` ababc 5 2 1 5 1 3 z 2 2 4 1 5 a 2 1 5 ``` **Output:** ``` a a a ``` # Explanation: 1. For the first query (2 1 5), we consider the entire string \\"ababc\\". Both \'a\' and \'b\' appear twice, but \'a\' is lexicographically smaller. 2. Update query (1 3 z) modifies the string to \\"abzbc\\". 3. For the third query (2 2 4), the substring is \\"bz\\", and \'b\' is the only character that appears the most (once). 4. Update query (1 5 a) modifies the string to \\"abzba\\". 5. For the fifth query (2 1 5), we consider the entire string \\"abzba\\". Both \'a\' and \'b\' appear twice, but \'a\' is lexicographically smaller.","solution":"from collections import defaultdict, Counter def process_queries(s, queries): n = len(s) s = list(s) results = [] for query in queries: q_type, x, y = query[0], int(query[1]), query[2] if q_type == \'1\': idx = x - 1 s[idx] = y elif q_type == \'2\': l = x - 1 r = int(y) - 1 substr = s[l:r+1] freq = Counter(substr) # Count frequency of each character in the substring max_freq = max(freq.values()) most_frequent_chars = [char for char, count in freq.items() if count == max_freq] smallest_char = min(most_frequent_chars) # Lexicographically smallest character results.append(smallest_char) return results"},{"question":"You are given an array of positive integers representing the heights of walls at various positions along a straight path, where the width of each position is 1 unit. Your task is to calculate the maximum amount of water that can be trapped between the walls after it rains. Rainwater can be trapped between two walls if there are at least two walls of non-zero height on both sides of any position or a sequence of positions in the array. The water level is determined by the shorter of the two walls blocking it. For example, given the input [0, 1, 0, 2, 1, 0, 3, 1, 0, 1, 2], the output should be 8 since 8 units of water can be trapped in the valleys of the wall heights. # Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the array. The second line contains n space-separated integers representing the heights of the walls. # Output Output a single integer, the maximum amount of trapped water. # Example Input ``` 11 0 1 0 2 1 0 3 1 0 1 2 ``` Output ``` 8 ``` Note: You may assume that for the given constraints, there will always be at least two walls of non-zero height to potentially trap water.","solution":"def calculate_trapped_water(heights): This function calculates the maximum amount of water that can be trapped between walls given their heights. :param heights: List of integers representing the heights of the walls :return: Integer representing the maximum amount of trapped water if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"You are given an array of n integers. You want to sort the array in non-decreasing order by performing the following operation any number of times: - Swap the elements at positions i and j if the sum of their positions (i + j) is even. Your task is to determine whether you can sort the array using the above operation. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Print \\"YES\\" if you can sort the array using the operation described above, otherwise print \\"NO\\". # Example Input ``` 5 3 2 1 4 5 ``` Output ``` YES ``` Input ``` 4 4 1 3 2 ``` Output ``` NO ``` # Explanation In the first example, you can sort the array by swapping: - Element at position 1 (3) with element at position 3 (1) since 1 + 3 = 4 (even). - Element at position 2 (2) with element at position 4 (4) since 2 + 4 = 6 (even). In the second example, it is not possible to sort the array using the given operations.","solution":"def can_sort_by_swaps(n, arr): Determine if the array can be sorted using swaps between elements where the sum of their positions is even. # Split array into two subarrays based on the parity of indices even_idx_elements = [arr[i] for i in range(n) if i % 2 == 0] odd_idx_elements = [arr[i] for i in range(n) if i % 2 != 0] # Sort both subarrays even_idx_elements.sort() odd_idx_elements.sort() # Reconstruct the array with sorted elements at their respective positions sorted_arr = [] even_pointer = 0 odd_pointer = 0 for i in range(n): if i % 2 == 0: sorted_arr.append(even_idx_elements[even_pointer]) even_pointer += 1 else: sorted_arr.append(odd_idx_elements[odd_pointer]) odd_pointer += 1 # Check if the reconstructed array is sorted return \\"YES\\" if sorted_arr == sorted(arr) else \\"NO\\""},{"question":"A medieval kingdom has a number of castles connected by bidirectional roads. Each road has a certain toll fee associated with it. The king wants to maintain control over all the castles while minimizing the total toll fees collected. You are given an integer n, the number of castles, and an integer e, the number of roads between them. Each of the next e lines contains three integers u, v, and w — where u and v are the castles connected by the road, and w is the toll fee associated with that road. Your task is to help the king by determining the minimum total toll cost required to ensure that all castles can be controlled, meaning there is a way to travel between any two castles directly or indirectly. # Input Format - The first line contains two integers n and e (1 ≤ n ≤ 10^4, 0 ≤ e ≤ 10^5). - Each of the following e lines contains three integers u, v and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6). # Output Format - Print a single integer: the minimum total toll fee required to control all the castles. If it is not possible to ensure control over all the castles, print -1. # Example Input ``` 4 5 1 2 3 2 3 4 3 4 2 1 3 5 1 4 8 ``` Output ``` 9 ``` # Explanation In the above example, the minimum spanning tree that connects all the castles has a total toll fee of 9, achieved by selecting the roads with fees of 3, 4, and 2.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n total_toll = 0 edges_used = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) total_toll += w edges_used += 1 if edges_used == n - 1: break if edges_used != n - 1: return -1 return total_toll def minimum_toll(n, e, roads): if n == 1: return 0 if e == 0 and n > 1: return -1 edges = [(u - 1, v - 1, w) for u, v, w in roads] return kruskal_mst(n, edges)"},{"question":"A teacher is organizing a puzzle-solving competition for her class. She has divided the students into teams of n players each. Each team will be given a set of puzzles to solve. There are three types of puzzles: Easy, Medium, and Hard. The teacher wants the teams to solve the puzzles in such a way that follows these rules: 1. Each team must solve at least one Easy puzzle. 2. Each team must solve at least one Medium puzzle. 3. Each team must solve at least one Hard puzzle. 4. The number of Easy puzzles solved by any team must be either equal to or more than the number of Medium puzzles solved by the same team. 5. The number of Medium puzzles solved by any team must be either equal to or more than the number of Hard puzzles solved by the same team. She wants to know the minimum number of Easy, Medium, and Hard puzzles required to give to each team so that all the above conditions are satisfied. Write a program that calculates and prints the minimum number of Easy, Medium, and Hard puzzles each team needs to solve. The first line contains an integer n (1 le n le 10^9) — the number of players in each team. Print three integers — the minimum number of Easy, Medium, and Hard puzzles each team needs to solve. In the first example, for a team of 3 players, the minimum number of Easy, Medium, and Hard puzzles should be 3, 2, 1 respectively. In the second example, if a team has 5 players, the minimum number of Easy, Medium, and Hard puzzles should be 5, 3, 2 respectively.","solution":"def min_puzzles(n): Returns the minimum number of Easy, Medium, and Hard puzzles that each team needs to solve. Parameters: - n (int): The number of players in each team Returns: - tuple: A tuple of three integers representing the minimum number of Easy, Medium, and Hard puzzles respectively. easy = n medium = (n + 1) // 2 hard = (n + 2) // 3 return easy, medium, hard"},{"question":"You are given a sequence of n integers. Your task is to find out the minimum number of operations required to equalize the sequence. In one operation, you can pick a subsequence of consecutive integers and decrease each of them by 1. Note that the sequence must contain non-negative integers at all times. The first line of input contains an integer n (1 ≤ n ≤ 200,000), the length of the sequence. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1,000,000), representing the sequence. Output the minimum number of operations required to make all elements of the sequence equal. # Example: Input: ``` 5 4 3 2 3 4 ``` Output: ``` 2 ``` Explanation: In the given sequence [4, 3, 2, 3, 4], you can perform the following operations: 1. Decrease the subsequence from the 2nd to the 4th elements by 1: [4, 2, 1, 2, 4] 2. Decrease the subsequence from the 1st to the 5th elements by 1: [3, 1, 0, 1, 3] This results in making all elements equal to 0 after 2 operations.","solution":"def min_operations_to_equalize(sequence): Returns the minimum number of operations required to make all elements of the sequence equal. min_value = min(sequence) return sum(value - min_value for value in sequence)"},{"question":"You are given a sequence of integers. Your task is to find the length of the shortest contiguous subsequence whose sum is greater than or equal to a given number k. If no such subsequence exists, return -1. The first line of input contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9), representing the length of the sequence and the target sum, respectively. The second line of input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^6), representing the sequence itself. Output the length of the shortest contiguous subsequence with a sum greater than or equal to k. If there is no such subsequence, print -1. # Example Input: 6 15 1 2 3 4 5 6 Output: 3 Explanation: The shortest subsequence with a sum greater than or equal to 15 is [4, 5, 6], which has a length of 3. # Note: If there are multiple subsequences that satisfy the condition, return the shortest one. In case the sum cannot be reached by any subsequence, return -1.","solution":"def shortest_subsequence_length(n, k, sequence): Returns the length of the shortest contiguous subsequence whose sum is greater than or equal to k. If no such subsequence exists, returns -1. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += sequence[end] while current_sum >= k: min_length = min(min_length, end - start + 1) current_sum -= sequence[start] start += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a list of integers, and your task is to form a non-empty subset such that the product of its elements ends with a specific digit, d. A subset is a group of elements from the list without considering their order, and a product of integers is just the result of multiplying them. For example, if you have a list [2, 3, 7] and want the product to end with 4, you can choose the subset [2, 7] as the product 2 * 7 = 14, and 14 ends with 4. The first line contains an integer t (1 le t leq 100) — the number of test cases. The first line of each test case contains two integers n (1 le n leq 100) and d (0 le d le 9) — the size of the list and the digit the product should end with, respectively. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the list of integers. Print \\"YES\\" if it is possible to choose a non-empty subset such that the product of its elements ends with d. Otherwise, print \\"NO\\". # Example **Input:** ``` 2 3 4 2 3 7 3 5 1 2 3 ``` **Output:** ``` YES NO ``` # Explanation: For the first test case, you can choose the subset [2, 7]. The product of this subset is 2 * 7 = 14, which ends with 4. For the second test case, there is no subset whose product ends with 5. The possible products are 1, 2, 3, 2, 3, 6, and none of them ends with 5.","solution":"from itertools import combinations def subset_product_ends_with_d(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] arr = test_cases[i][1] found = False for r in range(1, n+1): for combo in combinations(arr, r): product = 1 for num in combo: product *= num if product % 10 == d: found = True break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are given a binary tree with n nodes, where each node has a unique value from 1 to n. Initially, the tree has only one node with the value 1. You need to support Q queries of two types: 1. Add a new node with a given value as a leaf to an existing node. 2. For a given pair of nodes, determine the length of the shortest path between them in terms of the number of edges. The binary tree grows as follows: - Node 1 is the root and has no parent. - When adding a new node to an existing node, the new node is added as a child of the existing node. The first line of input contains the number of queries Q (1 ≤ Q ≤ 200000). Each of the next Q lines contains a query of one of the following two types: - \\"1 x y\\" where x is the value of an existing node and y is the value of the new node to add as a child of x. - \\"2 x y\\" where x and y are the values of two nodes in the tree. Output a single integer for each type 2 query, representing the length of the shortest path (in terms of the number of edges) between the nodes. # Example Input: ``` 6 1 1 2 1 1 3 1 2 4 2 4 3 2 2 3 1 3 5 ``` Output: ``` 3 2 ``` # Explanation After the input queries, the tree looks like this: ``` 1 / 2 3 / 4 5 ``` - Query 4 asks for the shortest path between nodes 4 and 3, which is 3 (4->2->1->3). - Query 5 asks for the shortest path between nodes 2 and 3, which is 2 (2->1->3).","solution":"from collections import defaultdict, deque class BinaryTree: def __init__(self): self.tree = defaultdict(list) self.depth = {1: 0} self.parent = {1: None} def add_node(self, x, y): self.tree[x].append(y) self.parent[y] = x self.depth[y] = self.depth[x] + 1 def lca(self, x, y): while x != y: if self.depth[x] > self.depth[y]: x = self.parent[x] else: y = self.parent[y] return x def shortest_path_length(self, x, y): lca = self.lca(x, y) return self.depth[x] + self.depth[y] - 2 * self.depth[lca] def process_queries(queries): bt = BinaryTree() result = [] for query in queries: q = query.split() if q[0] == \'1\': bt.add_node(int(q[1]), int(q[2])) elif q[0] == \'2\': dist = bt.shortest_path_length(int(q[1]), int(q[2])) result.append(dist) return result # Example usage: # queries = [\\"1 1 2\\", \\"1 1 3\\", \\"1 2 4\\", \\"2 4 3\\", \\"2 2 3\\", \\"1 3 5\\"] # print(process_queries(queries)) # Output: [3, 2]"},{"question":"A robot is placed on a grid of size h x w, represented by coordinates (i, j) where 1 ≤ i ≤ h and 1 ≤ j ≤ w. The robot can move in four directions: up, down, left, and right, and each move changes its position by 1 unit in the corresponding direction. However, there are certain cells on the grid through which the robot cannot pass, these cells are marked as obstacles. The robot starts at position (sx, sy) and its goal is to reach position (gx, gy). Given the grid size, the start and goal positions, and the positions of the obstacles, determine the minimum number of moves required for the robot to reach its goal. If it is not possible for the robot to reach the goal, return -1. The input for the problem is: - The first line contains two integers h and w (1 ≤ h, w ≤ 1000) representing the height and width of the grid. - The second line contains two integers sx and sy (1 ≤ sx ≤ h, 1 ≤ sy ≤ w) representing the start coordinates. - The third line contains two integers gx and gy (1 ≤ gx ≤ h, 1 ≤ gy ≤ w) representing the goal coordinates. - The fourth line contains an integer n (0 ≤ n ≤ 100000), representing the number of obstacles. - Each of the next n lines contains two integers oi and oj (1 ≤ oi ≤ h, 1 ≤ oj ≤ w) representing the coordinates of the obstacles. Your task is to write a function that processes the above input and prints the minimum number of moves required or -1 if the goal is unreachable. **Example**: Input: ``` 5 5 1 1 5 5 3 2 2 3 3 2 4 ``` Output: ``` 8 ``` In this example, the robot must navigate around obstacles at positions (2,2), (3,3), and (2,4) to reach the goal position at (5,5) starting from (1,1).","solution":"from collections import deque def min_moves_to_reach_goal(h, w, sx, sy, gx, gy, obstacles): def is_valid(x, y, h, w, obstacles, visited): return 1 <= x <= h and 1 <= y <= w and (x, y) not in obstacles and (x, y) not in visited directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, moves = queue.popleft() if (x, y) == (gx, gy): return moves for d in directions: nx, ny = x + d[0], y + d[1] if is_valid(nx, ny, h, w, obstacles, visited): visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"You are given an array of integers a with length n. The elements of the array are guaranteed to be distinct. Define the span of the array to be the difference between the maximum value and the minimum value in the array. A subarray of the array a is any contiguous segment of the array. Define the span of a subarray as the difference between its maximum and minimum elements. Your task is to find out the maximum span among all subarrays of the array a. Input - The first line contains an integer n (2 le n leq 2 cdot 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i leq 10^9) — the elements of the array, which are distinct. Output - Print a single integer — the maximum span among all possible subarrays of the array. Example Input 5 1 3 2 5 4 Output 4 Explanation In the given example, one of the subarrays with the maximum span is [1, 3, 2, 5] where the maximum span is 4 (5 - 1 = 4).","solution":"def max_span(n, a): Returns the maximum span among all subarrays of the array a. Parameters: n : int - The number of elements in the array a : list of int - The elements of the array Returns: int - The maximum span among all subarrays of the array max_value = max(a) min_value = min(a) return max_value - min_value"},{"question":"A coding competition is underway, and the competition organizers need your help to compute the highest score possible based on the scores of various contestants. You are given an array where the i-th element represents the score of the i-th contestant. As a judge, you have the following authority: you can choose any subsequence of scores and double each score within that subsequence exactly once. Your objective is to determine the maximum possible total score you can achieve after doubling the scores of the selected subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. **Input format:** The first line contains a single integer T (1 le T le 100) – the number of test cases. The first line of each test case contains a single integer N (1 le N le 1000), the number of contestants. The second line of each test case contains N space-separated integers a_1, a_2, dots, a_N (1 le a_i le 1000) – the scores of the contestants. **Output format:** For each test case, print a single integer: the maximum possible total score after doubling the scores of a selected subsequence. **Example:** Input: ``` 2 5 1 2 3 4 5 3 1 1 1 ``` Output: ``` 30 6 ``` **Explanation:** For the first test case, you could choose the subsequence [1, 2, 3, 4, 5] and double each of its elements to get [2, 4, 6, 8, 10], leading to a total score of 30. For the second test case, you could choose the subsequence [1, 1, 1] and double each of its elements to get [2, 2, 2], leading to a total score of 6.","solution":"def max_possible_score(T, test_cases): Returns the maximum possible total score after doubling the scores of the selected subsequence for each test case. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains the integer N and a list of N space-separated integers. Returns: list of int: A list of maximum possible scores for each test case. results = [] for N, scores in test_cases: total = sum(scores) doubled_total = 2 * total results.append(doubled_total) return results"},{"question":"You are given a grid of size n x m filled with integers. Your task is to find the number of unique integers in each subgrid of size k x k. The first line of the input contains three integers n, m, and k (1 ≤ k ≤ n, 1 ≤ k ≤ m ≤ 1000) — the dimensions of the grid and the size of the subgrid. Each of the next n lines contains m integers (0 ≤ grid[i][j] ≤ 10^6) — the integers in the grid. For each subgrid of size k x k, print the unique number of integers in that subgrid in a n-k+1 by m-k+1 grid format. For example, if the input grid is: ``` 1 2 1 2 2 1 2 1 1 2 1 2 ``` and k = 2, the output would be: ``` 3 4 3 4 4 4 3 4 3 ``` Print the grid with n-k+1 by m-k+1 dimensions, where each cell represents the count of unique integers in the corresponding k x k subgrid of the input grid.","solution":"def unique_integers_in_subgrid(grid, n, m, k): def unique_count(subgrid): unique_set = set() for row in subgrid: unique_set.update(row) return len(unique_set) result = [] for i in range(n - k + 1): row_result = [] for j in range(m - k + 1): subgrid = [grid[x][j:j+k] for x in range(i, i+k)] row_result.append(unique_count(subgrid)) result.append(row_result) return result"},{"question":"You are given an array of integers a consisting of n elements. Your task is to partition this array into the maximum number of contiguous subarrays where each subarray contains distinct elements. An array b is considered to contain distinct elements if no element appears more than once in b. For example, arrays [1, 2, 3], [4, 5, 6] contain distinct elements, but arrays [1, 2, 2], [3, 4, 3] do not. The first line of the input contains one integer n (1 le n le 10^6) — the length of the array a. The second line contains n integers a_1, a_2, dots, a_n (1 le a[i] le 10^9) — the elements of the array. Print one integer — the maximum number of contiguous subarrays where each subarray contains distinct elements you can partition the array into. For example, given the array [1, 2, 2, 3, 4, 3], you can partition it into 3 subarrays: [1, 2], [2, 3, 4], [3]. The first and the last characters of a are adjacent. In the first example, the optimal partitioning is [1, 2], [2, 3, 4], [3]. In the second example, you can partition it into [1, 2, 3], [4, 1, 2, 5].","solution":"def max_distinct_subarrays(arr): Partitions array into maximum number of contiguous subarrays with distinct elements. n = len(arr) seen = set() partitions = 1 for i in range(n): if arr[i] in seen: # If the current element is already seen, we partition here partitions += 1 # Start new subarray after this point seen = set() # Add the current element to the seen set seen.add(arr[i]) return partitions"},{"question":"Maria loves solving puzzles, and she recently came across an interesting one involving numbers. She wants to write a program that finds the smallest positive integer that is missing from a given list of integers. The list contains a combination of positive and negative numbers. The smallest positive integer is defined as any integer greater than 0 (i.e., 1, 2, 3, ...). Help Maria by writing a function that returns the smallest positive integer missing from the list. # Input The input consists of a single line containing a list of integers separated by spaces. The length of the list is between 1 and 1000 (inclusive), and each integer in the list ranges from -10^6 to 10^6. # Output Print a single integer — the smallest positive integer missing from the list. # Examples Example 1 **Input:** `3 4 -1 1` **Output:** `2` Example 2 **Input:** `1 2 0` **Output:** `3` Example 3 **Input:** `7 8 9 11 12` **Output:** `1` # Note - In the first example, the list contains `[3, 4, -1, 1]`. The smallest positive integer not present in the list is `2`. - In the second example, the list contains `[1, 2, 0]`. The smallest positive integer not present in the list is `3`. - In the third example, the list contains `[7, 8, 9, 11, 12]`. The smallest positive integer not present in the list is `1`.","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer missing from the list of integers. # Convert the list to a set to remove duplicates and for O(1) lookups num_set = set(nums) # Start checking from 1 onwards smallest_missing = 1 # Iterate until we find the missing integer while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"You have two arrays of integers, `A` and `B`, both of length `N`. You need to find a permutation of array `B` that maximizes the dot product of `A` and the permuted `B`. The dot product of two arrays `X` and `Y` of length `N` is defined as: [ text{dot product} = X_1 times Y_1 + X_2 times Y_2 + ldots + X_N times Y_N ] Write a function to determine the maximum possible dot product of `A` and any permutation of `B`. # Input - The first line contains the integer `N` (1 ≤ N ≤ 100,000), the length of the arrays. - The second line contains `N` integers, the elements of array `A` (−10^9 ≤ A_i ≤ 10^9). - The third line contains `N` integers, the elements of array `B` (−10^9 ≤ B_j ≤ 10^9). # Output - Output a single integer, the maximum possible dot product of `A` and any permutation of `B`. # Example Input ``` 3 1 3 -5 -2 4 1 ``` Output ``` 23 ``` # Explanation One optimal permutation of `B` is `[4, 1, -2]`. The dot product of `A` and this permutation of `B` is: [ 1 times 4 + 3 times 1 + (-5) times (-2) = 4 + 3 + 10 = 17 ]","solution":"def max_dot_product(N, A, B): Returns the maximum possible dot product of A and any permutation of B. # Sort array A in non-decreasing order A.sort() # Sort array B in non-decreasing order B.sort() # Maximum dot product max_product = sum(a * b for a, b in zip(A, B)) return max_product"},{"question":"In the kingdom of Treeland, there is a tradition to prepare a grand feast. The feast consists of various dishes, each made from unique ingredients. The chefs in Treeland are very particular about their dishes. No ingredient should be used in more than one dish. There are n chefs and each chef is assigned to prepare a unique dish. Each dish requires a specific set of ingredients and no two dishes can share any ingredient. Given the constraints, the chefs need help to plan the ingredients assignment without overlapping. Your task is to determine if it\'s possible to assign ingredients to all chefs so that each chef gets a unique set of ingredients and no ingredient is shared among different dishes. If it is possible, output a possible assignment of ingredients to dishes, otherwise print \\"NO\\". The first input line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100000) — the number of dishes (chefs) and the number of unique ingredients. Each of the next n lines contains m integers. The j-th integer of the i-th line is 1 if the j-th ingredient can be used in the i-th dish, otherwise it is 0. Print \\"YES\\" if it is possible to assign ingredients to all chefs such that no ingredient is used in more than one dish. In this case, print n lines, each containing the indices of the ingredients assigned to the corresponding dish in a sorted order. If it is not possible, print \\"NO\\". # Example Input: ``` 3 5 1 0 1 0 1 1 1 0 0 0 0 0 1 1 1 ``` Output: ``` YES 1 3 5 2 4 ``` Explanation: - Chef 1\'s dish can use ingredients 1, 3, and 5. - Chef 2\'s dish can use ingredient 2. - Chef 3\'s dish can use ingredient 4. It is ensured that each dish has a unique set of ingredients and no ingredient is used more than once.","solution":"def assign_ingredients(n, m, preferences): Determines if it\'s possible to assign unique sets of ingredients to chefs such that no ingredients are shared among different dishes. If possible, returns the assignment, else returns \\"NO\\". n: int - Number of dishes (chefs) m: int - Number of unique ingredients preferences: List[List[int]] - n x m matrix where preferences[i][j] is 1 if ingredient j can be used in dish i, else 0 # Store assignments assigned_ingredients = [set() for _ in range(n)] available_ingredients = set(range(1, m + 1)) for chef in range(n): for ing in range(m): if preferences[chef][ing] == 1 and (ing + 1) in available_ingredients: assigned_ingredients[chef].add(ing + 1) available_ingredients.remove(ing + 1) if all(assigned_ingredients[chef] for chef in range(n)): return [\\"YES\\"] + [\\" \\".join(map(str, sorted(assigned_ingredients[chef]))) for chef in range(n)] else: return [\\"NO\\"]"},{"question":"You are given an array of integers `a = [a1, a2, ..., an]` of length `n` such that `0 <= a[i] <= 10^9`. An operation is defined as selecting any subarray of `a` and multiplying every element of the subarray by `-1`. The goal is to determine the number of distinct values that can appear in the array after performing the operation any number of times (including zero), or whether it\'s possible to get precisely `k` distinct values. For example, if `a = [1, -2, 3]` and you select the subarray `[1, -2]`, then after applying the operation, the array becomes `[-1, 2, 3]`. You are given several test cases. For each test case, print \\"YES\\" if it\'s possible to have exactly `k` distinct values in the array after some operations, and \\"NO\\" otherwise. # Input - The first line contains a single integer `t` (1 leq t leq 1000) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers, `n` (1 leq n leq 10^5) — the length of the array and `k` (1 leq k leq n) — the target number of distinct values. - The second line contains `n` integers `a1, a2, ..., an` — the elements of the array. The sum of `n` over all test cases does not exceed `10^6`. # Output For each test case, print \\"YES\\" if it\'s possible to have exactly `k` distinct values in the array after performing any number of operations, otherwise print \\"NO\\". # Examples Input ``` 3 3 2 1 -2 3 4 2 1 1 1 1 2 1 1 1 ``` Output ``` YES NO YES ``` # Explanation - In the first case, you can have the values `{-1, 2, 3}` or any other combinations leading to 2 distinct values. - In the second case, all elements are `1`. No matter how many times you flip the signs, you will always have the same value, hence it\'s impossible to get exactly 2 distinct values. - In the third case, flipping either value won\'t change the number of distinct values from `1`. This problem tests your understanding of array manipulation, set operations, and subarray transformations.","solution":"def can_have_k_distinct(t, test_cases): results = [] for case in test_cases: n, k = case[0] arr = case[1] unique_values = set(map(abs, arr)) if len(unique_values) >= k: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a text file, you are given a collection of date intervals, each interval represented by a start date and an end date. Your task is to determine the total number of unique days covered by these intervals. Dates are represented in the format \\"YYYY-MM-DD\\" and are guaranteed to be valid Gregorian dates. Intervals may overlap with each other, and you should count each day only once even if it falls into multiple intervals. The input file format is: - The first line contains a single integer n, the number of intervals (1 ≤ n ≤ 10^5). - The next n lines each contain two dates separated by a space, representing the start and end dates of an interval (the start date is always less than or equal to the end date). Output a single integer — the total number of unique days covered by all intervals. # Example Input: ``` 3 2023-01-01 2023-01-10 2023-01-05 2023-01-15 2023-01-20 2023-01-25 ``` Output: ``` 20 ``` Explanation: The unique days covered are from January 1 to January 15, and from January 20 to January 25, which sums up to 20 unique days. Note: - The solution should handle large inputs efficiently. - You can assume that the dates are well-formed and valid. Write a program to solve this problem.","solution":"from datetime import datetime, timedelta def total_unique_days(intervals): Calculate the total number of unique days covered by the date intervals. Args: intervals (list of tuples): List of (start_date, end_date) tuples where dates are in \\"YYYY-MM-DD\\" format. Returns: int: Total number of unique days covered by the intervals. unique_days = set() for start_date, end_date in intervals: start_dt = datetime.strptime(start_date, \'%Y-%m-%d\') end_dt = datetime.strptime(end_date, \'%Y-%m-%d\') current_dt = start_dt while current_dt <= end_dt: unique_days.add(current_dt) current_dt += timedelta(days=1) return len(unique_days) def read_intervals_from_file(filename): Read intervals from a file and return them as a list of tuples. Args: filename (str): The name of the file containing the intervals. Returns: list of tuples: List of (start_date, end_date) tuples. intervals = [] with open(filename, \'r\') as file: n = int(file.readline().strip()) for _ in range(n): line = file.readline().strip() start_date, end_date = line.split() intervals.append((start_date, end_date)) return intervals"},{"question":"You are given an array of n integers, and you need to perform q queries of two possible types on it: 1) Type 1: Compute the sum of integers from index l to r (both inclusive). 2) Type 2: Update the value at index i to a given value x. The first line contains two space-separated integers: n and q (1 ≤ n, q ≤ 10^5), representing the number of elements in the array and the number of queries. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the initial array. Each of the next q lines contains a query in one of the following formats: - \\"1 l r\\" (1 ≤ l ≤ r ≤ n): For a Type 1 query, print the sum of integers from index l to r. - \\"2 i x\\" (1 ≤ i ≤ n; 1 ≤ x ≤ 10^9): For a Type 2 query, update the value at index i to x. Output the result of each Type 1 query on a new line in the order they appear. Example input: ``` 5 3 1 2 3 4 5 1 2 4 2 3 10 1 2 4 ``` Example output: ``` 9 16 ```","solution":"class ArrayQuery: def __init__(self, arr): self.arr = arr def query_sum(self, l, r): return sum(self.arr[l-1:r]) def update_value(self, i, x): self.arr[i-1] = x def process_queries(n, q, arr, queries): array_query = ArrayQuery(arr) results = [] for query in queries: if query[0] == 1: # Type 1 query _, l, r = query results.append(array_query.query_sum(l, r)) elif query[0] == 2: # Type 2 query _, i, x = query array_query.update_value(i, x) return results"},{"question":"You are given two arrays A and B, both consisting of n positive integers. Your task is to check if the arrays can be considered \\"similar.\\" Two arrays are similar if one can be transformed into the other by performing a series of operations. In each operation, you can choose any element from array A and add it to any other element of the same array or choose any element from B and add it to any other element of the same array. The first line contains an integer n (1 <= n <= 100) — the number of elements in each array. The second line contains n integers A1, A2, ..., An (1 <= Ai <= 10000) — the elements of the first array A. The third line contains n integers B1, B2, ..., Bn (1 <= Bi <= 10000) — the elements of the second array B. Print \\"YES\\" if arrays A and B can be considered similar. Otherwise, print \\"NO\\".","solution":"def are_arrays_similar(n, A, B): Returns \\"YES\\" if arrays A and B can be transformed into each other, otherwise \\"NO\\". sum_A = sum(A) sum_B = sum(B) if sum_A == sum_B: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice is playing a game with a sequence of integers. She is given two sequences: `A` of length `n`, and `B` of length `m`. She can perform the following operation any number of times: 1. Pick an integer x from sequence `B` and increase any element of `A` by x. Alice wants to maximize the sum of all elements in `A` after performing the operations optimally. Determine the maximum sum she can achieve. The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200,000) — the lengths of the sequences `A` and `B`. The second line contains `n` integers, the elements of sequence `A` (1 ≤ Ai ≤ 10^9). The third line contains `m` integers, the elements of sequence `B` (1 ≤ Bi ≤ 10^9). Output a single integer — the maximum sum of the elements in sequence `A` after Alice performs the operations optimally. Example: ``` Input: 3 3 1 2 3 2 5 -1 Output: 19 Explanation: Initially, the sum of A is 1 + 2 + 3 = 6. Alice can: - Add 2 from B to the first element: 1 + 2 = 3, resulting in A = [3, 2, 3]. - Add 5 from B to the second element: 2 + 5 = 7, resulting in A = [3, 7, 3]. - Add 5 from B to the third element: 3 + 5 = 8, resulting in A = [3, 7, 8]. The final sum of A is 3 + 7 + 8 = 18. However, the optimal solution to maximize the sum would be to add values to the elements of A in such a way that all `5` values in B and `2` are added to A\'s elements optimally. Therefore, the maximum sum is 19. ```","solution":"def maximize_sum(n, m, A, B): # To maximize the sum of A, we need to add the largest value from B multiple times to each element of A. # Since we can add the same elements from B any number of times, we just need to focus on the largest value in B. max_B = max(B) initial_sum_A = sum(A) new_sum = initial_sum_A + n * max_B return new_sum"},{"question":"In a faraway land, there is a legend of the Golden Tree, which grows golden apples. The tree has exactly K branches, and each branch has L golden apples hanging from it. A thief plans to steal these apples, but they must be careful of the tree\'s guardian—a mystical bird that patrols the branches. The thief has a magic bag that can hold up to M apples. The bag has a special property: it keeps the apples in optimal condition if they are taken from contiguous branches (i.e., from branch i to branch j such that j > i and there are no skipped branches). The thief wants to maximize the number of apples stolen while ensuring the apples are from contiguous branches and the total number of apples is at most M. If there are multiple ways to steal the maximum number of apples, the thief will choose the way that minimizes the number of branches stolen from. Given the values K, L, and M, determine the number of apples and the minimal number of branches the thief needs to steal the maximum number of apples. If it is impossible to steal any apples, output 0 for both values. Input The first and only line contains three integers K (1 ≤ K ≤ 1000), L (1 ≤ L ≤ 1000), and M (1 ≤ M ≤ 1000000). Output Output two integers separated by a space: the maximum number of apples that can be stolen and the minimum number of branches the thief needs to steal from. Example Input: 5 10 25 Output: 20 2 Explanation In this example, the thief can steal the apples from 2 contiguous branches, taking 10 apples from each branch, getting a total of 20 apples. The thief cannot take more than 2 branches without exceeding the bag\'s capacity of 25 apples.","solution":"def maximize_apples(K, L, M): Determines the maximum number of apples that can be stolen and the minimum number of branches needed to achieve that, while ensuring the apples are from contiguous branches and the total number of apples is at most M. Parameters: K (int): Number of branches. L (int): Number of apples per branch. M (int): Maximum capacity of the magic bag. Returns: tuple: (max_apples, min_branches) maximum number of apples and the minimum branches needed. max_apples = 0 min_branches = 0 for branches in range(1, K + 1): apples = branches * L if apples > M: break max_apples = apples min_branches = branches return max_apples, min_branches"},{"question":"John is planning his outdoor activities for the next few days and he is very passionate about hiking in the nearby hills. There is a sequence of hills with various altitudes, and he wants to know the maximum effort he will need to expend in order to hike between two hills, considering the altitude differences. Given the altitudes of the hills in the sequence, your task is to determine the maximum difference in altitude between any two hills in the sequence, regardless of their order. The first line of input contains the integer n (2 ≤ n ≤ 1000): the number of hills. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10000), representing the altitude of each hill. Print a single integer: the maximum altitude difference between any two hills. Example: Input: 5 1 5 4 8 7 Output: 7 Explanation: The maximum altitude difference is between the hill with altitude 8 and the hill with altitude 1, which is 8 - 1 = 7.","solution":"def max_altitude_difference(n, altitudes): Returns the maximum difference in altitude between any two hills in the sequence. Parameters: n: int - the number of hills altitudes: list of int - the altitude of each hill Returns: int - the maximum altitude difference highest = max(altitudes) lowest = min(altitudes) return highest - lowest"},{"question":"The kingdom of Lexocrypt is known for its large collection of ancient encrypted texts. Given a set of encrypted messages, each represented by a string of lowercase letters, the king\'s cryptanalysts have identified that certain messages share common prefix patterns. To further their research, they need to determine the maximum length of a common prefix shared by two distinct messages in the set. Write a program to determine the maximum length of a common prefix shared by any two distinct messages in a given set of messages. # Input - The first line contains a single integer, `n` (2 le n le 10^5) – the number of messages. - The following `n` lines each contain a string of lowercase English letters. The length of each string is at least 1 and at most 100. # Output - Output a single integer – the maximum length of a common prefix shared by any two distinct messages in the set. # Example Input ``` 4 apple ape apricot banana ``` Output ``` 2 ``` # Note In the provided example, the longest common prefix is \\"ap\\", which is shared by the messages \\"apple\\" and \\"ape\\", as well as \\"apple\\" and \\"apricot\\". The length of this common prefix is 2. The messages \\"banana\\" and any other message do not share a common prefix.","solution":"def longest_common_prefix_length(str1, str2): Returns the length of the longest common prefix between str1 and str2. common_length = 0 for a, b in zip(str1, str2): if a == b: common_length += 1 else: break return common_length def max_common_prefix_length(messages): Returns the maximum length of a common prefix shared by any two distinct messages in the set. n = len(messages) # Sort messages to bring common prefixes next to each other messages.sort() max_length = 0 # Check only adjacent pairs after sorting for i in range(n - 1): max_length = max(max_length, longest_common_prefix_length(messages[i], messages[i + 1])) return max_length"},{"question":"Alice is organizing a diving competition in which participants are scored based on the difficulty of the dives they perform. Each participant can choose a combination of available dives, and each dive has a corresponding difficulty score. Alice wants to ensure that each participant can maximize their total score, but she has a constraint: a participant can perform a dive at most once. Moreover, the participants can only select dives such that the sum of their difficulties does not exceed a given limit L. Given a list of difficulty scores for the available dives and the maximum allowed difficulty sum, determine the maximum total difficulty score that a participant can achieve. The first input line contains two integers n and L (1 ≤ n ≤ 1000, 1 ≤ L ≤ 10000) — the number of available dives and the maximum allowed difficulty sum. The second line contains n space-separated integers d1, d2, ..., dn (1 ≤ di ≤ 1000) representing the difficulty scores of the available dives. Output a single integer — the maximum total difficulty score that can be achieved without exceeding the limit L. # Example Input 5 10 2 3 4 5 6 Output 10 In the above example, the participant can choose the dives with difficulties [4, 6], which gives the maximum total difficulty score of 10 without exceeding the limit of 10.","solution":"def max_difficulty_score(n, L, difficulties): dp = [0] * (L + 1) for difficulty in difficulties: for j in range(L, difficulty - 1, -1): dp[j] = max(dp[j], dp[j - difficulty] + difficulty) return dp[L]"},{"question":"You are given a pattern consisting of only the characters \'A\' and \'B\'. A substring is defined as an ordered subsequence of contiguous elements within the main string. We need to determine the minimum number of characters you need to change to make the whole pattern either all \'A\'s or all \'B\'s. Given the pattern, you should perform the following operations to find the answer for each pattern provided: 1. Calculate the number of \'A\'s in the pattern. 2. Calculate the number of \'B\'s in the pattern. 3. The minimum number of changes required will be the smaller of the two values obtained in the previous steps. # Input - The first line of the input contains a single integer t (1 ≤ t ≤ 1000): the number of test cases. - Each of the next t lines contains a string consisting of characters \'A\' and \'B\', representing the pattern. # Output For each test case, print the minimum number of characters that need to be changed. # Example Input ``` 3 AABBA AAA BBAAAB ``` Output ``` 2 0 3 ``` # Explanation For the first pattern \\"AABBA\\", you can change the two \'B\'s to \'A\'s to make it \\"AAAAA\\" or change the three \'A\'s to \'B\'s to make it \\"BBBBB\\". The minimum changes required are 2 (changing \'B\'s to \'A\'s). For the second pattern \\"AAA\\", no changes are needed because it already consists of all \'A\'s. For the third pattern \\"BBAAAB\\", you can change the three \'B\'s to \'A\'s to make it \\"AAAAAA\\" or change the three \'A\'s to \'B\'s to make it \\"BBBBBB\\". The minimum changes required are 3. # Constraints - The length of each string is at most 10^6. - The total length of all strings in a single test case does not exceed 10^6.","solution":"def min_changes_to_uniform(pattern): Calculate the minimum number of characters to change to make the pattern consist of all \'A\'s or all \'B\'s. count_A = pattern.count(\'A\') count_B = len(pattern) - count_A return min(count_A, count_B) def batch_min_changes(test_cases): For a list of patterns, calculate the minimum changes for each pattern. results = [] for pattern in test_cases: results.append(min_changes_to_uniform(pattern)) return results"},{"question":"A company has a requirement to monitor network uptime for its servers over a specified period each day. To do this, they have logs that record the start and end times of each uptime period for each server. Given these logs, the company wants to determine the total uptime for each server within a 24-hour period. Each server\'s logs are provided as pairs of integers representing the start and end times (in minutes from the start of the day). The logs for a server might contain overlapping intervals, and the company\'s goal is to calculate the combined uptime accurately by merging overlapping periods. Write a function `calculate_total_uptime(n, logs)` where: - `n` is the number of servers. - `logs` is a list of tuples, each containing a list of tuples representing the start and end times for each server\'s uptime logs. Your function should output a list of integers, each representing the total uptime in minutes for the corresponding server. **Input format:** - `n` (1 ≤ n ≤ 1000), the number of servers. - `logs`, a list of length `n`, where each element is a list of tuples `(start_i, end_i)` (0 ≤ start_i < end_i ≤ 1440) representing the start and end times of the uptime periods for that server. **Output format:** - A list of `n` integers, where the `i-th` integer represents the total uptime in minutes for the `i-th` server. **Example:** ```python n = 3 logs = [ [(0, 60), (120, 180), (150, 210)], [(300, 600), (590, 690)], [(720, 780), (780, 840)] ] print(calculate_total_uptime(n, logs)) ``` **Output:** ``` [150, 390, 120] ``` In this example: - The first server has uptime periods [(0, 60), (120, 210)]. Combining overlapping intervals, total uptime is 150 minutes. - The second server has uptime periods [(300, 690)]. Joining overlapping periods, total uptime is 390 minutes. - The third server has uptime periods [(720, 840)]. After combining consecutive periods, total uptime is 120 minutes.","solution":"def calculate_total_uptime(n, logs): Calculate the total uptime for each server given their logs. Each server\'s log might contain overlapping intervals which need to be merged. Parameters: n (int): Number of servers. logs (list of list of tuples): Each server\'s uptime logs represented as (start, end) tuples. Returns: list: Total uptime in minutes for each server. total_uptime = [] for server_logs in logs: # Sort intervals by start time merged_intervals = [] for start, end in sorted(server_logs): if merged_intervals and merged_intervals[-1][1] >= start: merged_intervals[-1][1] = max(merged_intervals[-1][1], end) else: merged_intervals.append([start, end]) # Calculate total uptime from merged intervals uptime = sum(end - start for start, end in merged_intervals) total_uptime.append(uptime) return total_uptime"},{"question":"You are given a list of strings where each string is composed of lowercase English letters. Your task is to group all the anagrams together. Anagrams are strings that can be formed by rearranging the letters of another string. In the output, each group must include exactly the strings that are anagrams of each other. Each group should be sorted in lexicographical order, and the groups themselves should be sorted by the first string in each group. For example, if the input is [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"], the output should be [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"]]. Input: - The first line contains an integer n (1 <= n <= 10^4) - the number of strings. - The next n lines each contain a string s of length at most 100. Output: - Print the groups of anagrams in the specified format. Example: Input: 6 eat tea tan ate nat bat Output: [[\'ate\', \'eat\', \'tea\'], [\'bat\'], [\'nat\', \'tan\']] Explanation: - The strings \\"eat\\", \\"tea\\", and \\"ate\\" are anagrams of each other and hence are grouped together in one sublist. - The string \\"bat\\" has no other anagram in the list, so it forms a group by itself. - The strings \\"tan\\" and \\"nat\\" form another group of anagrams. You need to ensure the following: 1. Each group of anagrams is sorted lexicographically. 2. The groups themselves are sorted based on the first string in each group.","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: # Sort characters of the word to form the key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Sort each group lexicographically and convert defaultdict to list of lists groups = [sorted(group) for group in anagrams.values()] # Sort the groups based on the first element in each group groups.sort(key=lambda x: x[0]) return groups"},{"question":"You are a programmer at a robotics company and have been assigned the task of developing a software module for a robot that navigates a grid. The grid is an n x n matrix, where cells can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). The robot can move either up, down, left, or right, but it cannot move onto or through cells containing obstacles. Given the starting position of the robot, your task is to determine the number of unique paths from the start position to a designated target position (given as coordinates). You should consider all possible paths the robot can take without visiting the same cell more than once. The first line of the input contains a single integer n (1 ≤ n ≤ 10), representing the dimensions of the grid. The following n lines each contain n characters (either \'.\' or \'#\'), representing the grid. The next two lines contain two integers each: the first line gives the starting coordinates (sx, sy) and the second line gives the target coordinates (tx, ty) (0 ≤ sx, sy, tx, ty < n). Coordinates are given in the format (row, column). The robot can start in any cell except a cell containing an obstacle, and the target can also be any cell except one containing an obstacle. Print a single integer — the number of unique paths from the starting position to the target position. Example: Input: 3 ... .#. ... 0 0 2 2 Output: 2 Explanation: There are two unique paths from (0, 0) to (2, 2): 1. Right -> Down -> Down -> Right 2. Down -> Down -> Right -> Right Note: In this problem, the robot cannot revisit any cell it has already moved to, ensuring that all paths are unique.","solution":"def unique_paths(n, grid, start, target): def dfs(x, y): if not (0 <= x < n and 0 <= y < n): return 0 if grid[x][y] == \'#\' or visited[x][y]: return 0 if (x, y) == target: return 1 visited[x][y] = True path_count = dfs(x+1, y) + dfs(x-1, y) + dfs(x, y+1) + dfs(x, y-1) visited[x][y] = False return path_count sx, sy = start tx, ty = target if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return 0 visited = [[False] * n for _ in range(n)] return dfs(sx, sy)"},{"question":"You are given a string containing only the characters \'a\' and \'b\'. A substring is defined as a contiguous sequence of characters within the string. Your task is to find the number of substrings that contain only the character \'a\' and no \'b\'s. For example, consider the string \\"aabbaa\\". The substrings that contain only \'a\' are \\"a\\", \\"a\\", \\"aa\\", \\"a\\", \\"a\\", \\"aa\\". So the answer would be 6. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string of length n, consisting only of characters \'a\' and \'b\'. Output the number of substrings that contain only the character \'a\'. Example: Input: 6 aabbaa Output: 6 Explanation: The valid substrings are \\"a\\" (index 1), \\"a\\" (index 2), \\"aa\\" (indices 1 and 2), \\"a\\" (index 5), \\"a\\" (index 6), and \\"aa\\" (indices 5 and 6). Thus, there are a total of 6 such substrings.","solution":"def count_a_substrings(s): Returns the number of substrings that contain only the character \'a\'. n = len(s) count = 0 seq_length = 0 for i in range(n): if s[i] == \'a\': seq_length += 1 count += seq_length else: seq_length = 0 return count"},{"question":"You are given a graph with `n` nodes and `m` edges. Each edge is associated with a weight that represents the travel time between the two nodes it connects. Your task is to determine if there exists a negative cycle in the graph. A \\"negative cycle\\" is a cycle in which the sum of the weights of the edges is negative. The input consists of multiple test cases. The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and edges, respectively. Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, -10^6 ≤ w ≤ 10^6) — the endpoints of the edge and its weight. For each test case, print \\"YES\\" if there is a negative cycle in the graph and \\"NO\\" otherwise. # Example Input: ``` 2 3 3 1 2 1 2 3 -1 3 1 -1 4 4 1 2 1 2 3 1 3 4 1 4 1 1 ``` Output: ``` YES NO ``` In the first test case, the cycle 1-2-3-1 has a total weight of 1 + (-1) + (-1) = -1, which is negative. Therefore, the output is \\"YES\\". In the second test case, there are no negative cycles, so the output is \\"NO\\".","solution":"def detect_negative_cycle(t, test_cases): def bellman_ford(n, edges): dist = [float(\'inf\')] * (n + 1) dist[1] = 0 for _ in range(n - 1): for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: dist[v] = dist[u] + w for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: return True return False results = [] for case in test_cases: n, m = case[0] edges = case[1] if bellman_ford(n, edges): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Here\'s an example of using the function # t = 2 # test_cases = [ # ((3, 3), [(1, 2, 1), (2, 3, -1), (3, 1, -1)]), # ((4, 4), [(1, 2, 1), (2, 3, 1), (3, 4, 1), (4, 1, 1)]) # ] # print(detect_negative_cycle(t, test_cases))"},{"question":"You are given an array of integers representing the chocolate bars of different lengths. Your goal is to divide the chocolate bars into two groups such that the sum of the lengths of the chocolate bars in both groups are equal. If it\'s not possible to divide them into two equal sum groups, return \\"NO\\". Otherwise, return \\"YES\\". The first line contains an integer t (1 leq t leq 100) — the number of test cases. Each test case is described as follows: The first line contains an integer n (1 leq n leq 100) — the number of chocolate bars. The second line contains n integers a_i (1 leq a_i leq 1000) — the lengths of the chocolate bars. Output \\"YES\\" if it is possible to divide the chocolates into two groups with equal sum. Otherwise, print \\"NO\\". Each test case should be answered on a new line. # Example Input: ``` 3 5 1 2 3 4 5 4 4 4 4 4 3 1 1 3 ``` Output: ``` NO YES NO ``` In the first test case, the sum of the array elements is 15, which is an odd number. Hence, it is impossible to divide it into two equal sum groups. In the second test case, the sum of the array elements is 16, which can be divided into two equal parts: [4, 4, 4] and [4]. In the third test case, the sum of the array elements is 5, which is an odd number. Hence, it is impossible to divide it into two equal sum groups.","solution":"def can_divide_chocolates(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] chocolates = test_cases[i][1] if sum(chocolates) % 2 != 0: results.append(\\"NO\\") else: target = sum(chocolates) // 2 dp = [False] * (target + 1) dp[0] = True for chocolate in chocolates: for j in range(target, chocolate - 1, -1): if dp[j - chocolate]: dp[j] = True if dp[target]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant kingdom, there exists a magical forest where all trees are either enchanted or ordinary. The forest can be represented as a grid of size ( n times m ), where each cell in the grid contains either an enchanted tree (denoted by \'E\') or an ordinary tree (denoted by \'O\'). The kingdom\'s wizard is interested in finding the largest rectangular subgrid that consists only of enchanted trees. You are given multiple test cases. For each test case, determine the area of the largest rectangular subgrid that contains only enchanted trees. The first line contains a single integer ( t ) ((1 leq t leq 100)) — the number of test cases. Descriptions of test cases follow. The first line of each test case contains two integers ( n ) and ( m ) ((1 leq n, m leq 100)) — the number of rows and columns in the forest grid. Each of the next ( n ) lines contains ( m ) characters, representing the forest grid. For each test case, output a single integer — the area of the largest rectangular subgrid consisting only of enchanted trees. Example: ``` Input: 3 4 5 OEEEE EOEEE EEEOO EEOOO 3 4 OEEO EOOE OOEE 2 2 EO OE Output: 6 2 1 ``` Explanation: - In the first test case, the largest rectangular subgrid consisting only of enchanted trees (\'E\') has an area of 6. - In the second test case, the largest rectangular subgrid consisting of \'E\' has an area of 2. - In the third test case, each \'E\' is isolated, so the largest area is 1.","solution":"def largest_enchanted_area(test_cases): def max_histogram_area(heights): # Calculate the maximum rectangle area in histogram stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area results = [] for n, m, grid in test_cases: dp = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'E\': dp[j] += 1 else: dp[j] = 0 max_area = max(max_area, max_histogram_area(dp)) results.append(max_area) return results # Example usage: t = 3 test_cases = [ (4, 5, [\\"OEEEE\\", \\"EOEEE\\", \\"EEEOO\\", \\"EEOOO\\"]), (3, 4, [\\"OEEO\\", \\"EOOE\\", \\"OOEE\\"]), (2, 2, [\\"EO\\", \\"OE\\"]) ] print(largest_enchanted_area(test_cases)) # Output: [6, 2, 1]"},{"question":"You are given an array of n integers representing the price of houses in a neighborhood. You would like to buy a house but you only have a total budget B, and you want to buy the house with the highest price possible without exceeding your budget. Write a program that finds the highest price of a house you can afford. The first line contains two integer numbers n and B (1 ≤ n ≤ 100000, 0 ≤ B ≤ 109). The second line contains n integer numbers, representing the prices of the houses. Each price will be between 1 and 109. Print the maximum price of a house that does not exceed your budget. If no house can be bought within your budget, print -1. Example: Input: 6 50 20 30 40 50 60 70 Output: 50 Explanation: You have a budget of 50. Among the house prices [20, 30, 40, 50, 60, 70], the highest price that is within your budget is 50.","solution":"def highest_affordable_price(n, B, prices): Finds the highest price of a house that can be bought without exceeding the budget. Parameters: n (int): Number of houses. B (int): Budget. prices (list[int]): Array of house prices. Returns: int: The maximum price within budget or -1 if no house can be bought. affordable_prices = [price for price in prices if price <= B] if len(affordable_prices) == 0: return -1 else: return max(affordable_prices) # Example usage: n = 6 B = 50 prices = [20, 30, 40, 50, 60, 70] print(highest_affordable_price(n, B, prices)) # Output: 50"},{"question":"You are given two strings, S and P. Your task is to determine the minimum number of steps required to convert string S into string P. You can perform the following operations on string S: 1. Insert a character 2. Delete a character 3. Replace a character All operations count as 1 step. The first line contains the string S and the second line contains the string P. Both strings have lengths in the range [1, 1000] and consist of lowercase English letters. Output a single integer – the minimum number of steps required to transform S into P. Example: If the inputs are \\"kitten\\" for S and \\"sitting\\" for P, then the output should be 3 because the following operations can convert \\"kitten\\" to \\"sitting\\": - Replace \'k\' with \'s\' - Replace \'e\' with \'i\' - Insert \'g\' at the end In the case of \\"flaw\\" and \\"lawn\\", the output should be 2 because: - Replace \'f\' with \'l\' - Insert \'n\' at the end","solution":"def min_steps_to_convert(S, P): Returns the minimum number of steps required to convert string S into string P. m = len(S) v = len(P) # Create a table to store results of subproblems dp = [[None] * (v + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(v + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore last character and recur for remaining string elif S[i-1] == P[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][v]"},{"question":"Given an undirected graph with nodes labeled from 1 to n, determine the smallest value of lambda such that there exists a subset of edges E\' of E satisfying the following conditions: 1. The subgraph H induced by E\' is a tree. 2. Lambda is the maximum weight of an edge in H. The input is as follows: The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10000), the number of nodes and edges, respectively. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), describing an edge between nodes u and v with weight w. If there is no such tree, output -1. Otherwise, output the minimum value of lambda. Example Input: 4 5 1 2 1 1 3 1 2 3 2 2 4 2 3 4 3 Example Output: 2 Explanation: A valid subset of edges is {(2, 3, 2), (1, 2, 1), (1, 3, 1)}, forming a tree with the maximum edge weight of 2.","solution":"def find_min_lambda(n, edges): Function to find the smallest value of lambda such that there exists a subset of edges E\' that forms a tree, and lambda is the maximum weight of an edge in the subset. :param n: Number of nodes :param edges: List of tuples (u, v, w) representing undirected edges :return: The minimum value of lambda if a tree can be formed, else -1 if n == 1: return 0 # A single node is a trivial tree with lambda = 0 # Edge case: if there are less than n-1 edges, it\'s impossible to form a tree if len(edges) < n - 1: return -1 # Helper function for Kruskal\'s algorithm to form MST def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Sort edges by their weight edges = sorted(edges, key=lambda item: item[2]) # Kruskal\'s algorithm to find MST parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst = [] i = e = 0 while e < n - 1 and i < len(edges): u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 mst.append((u, v, w)) union(parent, rank, x, y) # If we don\'t have exactly n-1 edges in MST, it means we can\'t connect all nodes if len(mst) != n - 1: return -1 # The lambda value is the weight of the heaviest edge in the MST max_weight_in_mst = max(mst, key=lambda item: item[2])[2] return max_weight_in_mst"},{"question":"You are given an array of non-negative integers representing heights of walls. Between each pair of walls, water may be trapped if rain falls. The amount of water that can be trapped between a pair of walls is determined by the height of the shorter wall in comparison and the distance between them. However, if the height of a wall is zero, no water will be trapped at that position. Your task is to determine how many units of water can be trapped after the rain. The first line contains a single integer t (1 leq t leq 100) – the number of test cases. Each test case begins with an integer n (1 leq n leq 10^5) indicating the number of walls. The second line follows with n-space separated integers representing the heights of the walls (0 leq height leq 10^4). Output t lines, each containing a single integer – the total units of water that can be trapped for that test case. For example: **Example Input:** ``` 2 6 0 1 0 2 1 0 1 3 2 1 2 1 5 4 2 0 3 2 5 ``` **Example Output:** ``` 6 9 ``` **Explanation:** In the first test case, 6 units of water can be trapped among the heights provided. In the second test case, 9 units of water can be trapped among the heights provided.","solution":"def calculate_trapped_water(heights): n = len(heights) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] results.append(calculate_trapped_water(heights)) return results"},{"question":"Gopal is learning about different techniques to search for patterns within strings and came across the concept of the \\"longest common prefix\\". A prefix of a string is any leading contiguous portion of the string, and the longest common prefix of a given array of strings is the largest string that is a prefix of every string in the array. Can you help Gopal implement a function to find the longest common prefix among an array of strings? If there is no common prefix, return an empty string \\"\\". Your implementation should be efficient in terms of computational complexity and memory usage. **Input:** - The first line contains an integer, n (1 ≤ n ≤ 2000) — the number of strings in the array. - Each of the next n lines contains a string, si (1 ≤ |si| ≤ 1000), consisting of only lowercase English letters. **Output:** - Output a single line containing the longest common prefix of the array. If there is no common prefix, output an empty string. **Example 1:** ``` Input: 3 flower flow flight Output: fl ``` **Example 2:** ``` Input: 2 dog racecar Output: \\"\\" (an empty string with no spaces) ``` Note: In the second example, since there is no common prefix among the given strings \\"dog\\" and \\"racecar\\", the result should be an empty string.","solution":"def longest_common_prefix(strs): Find the longest common prefix string among an array of strings. if not strs: return \\"\\" # Find the minimum length string from the array. min_len = min(len(s) for s in strs) if min_len == 0: return \\"\\" # Use the shortest string\'s length for the prefix checking. i = 0 while i < min_len: char = strs[0][i] for s in strs: if s[i] != char: return s[:i] i += 1 return strs[0][:i]"},{"question":"Mario is playing a video game where he navigates through a grid-based world. The world is represented as an n x m grid, and Mario has to move from the top-left corner to the bottom-right corner. Mario can only move either right or down at any point in time. Additionally, each cell in the grid has a certain number of coins, which Mario collects when he visits that cell. Mario wants to collect the maximum number of coins possible. Your task is to write a program that determines the maximum number of coins Mario can collect while moving from the top-left to the bottom-right corner of the grid. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines each contain m integers ci (0 ≤ ci ≤ 100), representing the number of coins in each cell of the grid. Output: Print a single integer – the maximum number of coins Mario can collect. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: Mario can follow the path: (1,2,3) -> (6,9). The coins collected will be 1+2+3+6+9+8=29.","solution":"def max_coins(n, m, grid): This function calculates the maximum number of coins Mario can collect. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid grid (list of list of int): the grid with coin values Returns: int: maximum number of coins Mario can collect # Create a 2D dp array where dp[i][j] represents the max coins that can be collected to reach cell (i, j) dp = [[0] * m for _ in range(n)] # Initialize the dp array with the coins from the grid dp[0][0] = grid[0][0] # Fill the dp array for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][m-1] # Example usage: n, m = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_coins(n, m, grid)) # Output: 29"},{"question":"Alicia is trying to transport goods between different locations in a city. The city can be represented as a grid, and she can move up, down, left, or right by one unit in the grid. Alicia starts at a specific position (sx, sy) and needs to reach her destination at (dx, dy). However, there are certain cells in the grid that have obstacles, which means Alicia cannot pass through them. Each step to an adjacent cell takes one unit of time, and Alicia wants to reach her destination in the shortest time possible, avoiding obstacles. Given the dimensions of the grid, the starting coordinates, the destination coordinates, and the positions of the obstacles, help Alicia find the minimum time needed to reach her destination or determine if it\'s impossible for her to get there. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid respectively. The second line contains two integers sx and sy (0 ≤ sx < n, 0 ≤ sy < m) — the starting coordinates. The third line contains two integers dx and dy (0 ≤ dx < n, 0 ≤ dy < m) — the destination coordinates. The fourth line contains one integer k (0 ≤ k ≤ n * m) — the number of obstacles. Each of the next k lines contains two integers ox and oy (0 ≤ ox < n, 0 ≤ oy < m) — the coordinates of an obstacle. Print the minimum time needed for Alicia to reach her destination. If it is impossible for her to reach the destination, print -1. Example Input: 5 4 0 0 4 3 3 1 0 2 2 3 3 Example Output: 7","solution":"from collections import deque def min_time_to_destination(n, m, sx, sy, dx, dy, obstacles): Find the minimum time to reach destination in a grid avoiding obstacles. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right grid = [[0 for _ in range(m)] for _ in range(n)] # Mark obstacles on the grid for ox, oy in obstacles: grid[ox][oy] = -1 # BFS setup queue = deque([(sx, sy, 0)]) # (current x, current y, current time) visited = set((sx, sy)) while queue: x, y, time = queue.popleft() # Check if we\'ve reached the destination if (x, y) == (dx, dy): return time # Explore all four directions for direction in directions: new_x, new_y = x + direction[0], y + direction[1] # Check if the new position is inside the grid and is not an obstacle or visited if 0 <= new_x < n and 0 <= new_y < m and grid[new_x][new_y] != -1 and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, time + 1)) # If we\'ve exhausted all possibilities, return -1 return -1"},{"question":"You are given a rectangular grid consisting of n rows and m columns. Each cell of the grid contains either \'R\', \'G\', or \'B\', representing red, green, or blue colors respectively. Your task is to determine whether it\'s possible to split the grid into exactly two non-overlapping subgrids such that the total number of each type of color (\'R\', \'G\', \'B\') is equal in both subgrids. A subgrid is defined as a rectangular section of the grid that can be obtained by choosing some top row and some bottom row, and some left column and some right column. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid, respectively. The next n lines contain m characters each, representing the color of the cells. Print \\"YES\\" (quotes for clarity) if it is possible to split the grid into two subgrids with equal color counts for \'R\', \'G\', and \'B\'. Otherwise, print \\"NO\\". For example, consider the following grid: 3 4 RRRB GGGG RRRB In the above grid, it is possible to split it into two 1x4 subgrids such that each subgrid has 2 \'R\'s and 2 \'B\'s, while the middle row is ignored. Therefore, the output should be \\"YES\\". In another example: 3 3 RGB RGB RGB It is not possible to split the grid to satisfy the conditions for all colors simultaneously. Thus, the output should be \\"NO\\".","solution":"def can_split_grid(n, m, grid): def get_color_counts(grid): color_counts = {\'R\': 0, \'G\': 0, \'B\': 0} for row in grid: for cell in row: color_counts[cell] += 1 return color_counts def is_possible_to_split(counts, total): if counts[\'R\'] % 2 != 0 or counts[\'G\'] % 2 != 0 or counts[\'B\'] % 2 != 0: return False half = {\'R\': counts[\'R\'] // 2, \'G\': counts[\'G\'] // 2, \'B\': counts[\'B\'] // 2} current = {\'R\': 0, \'G\': 0, \'B\': 0} for row in grid: for cell in row: current[cell] += 1 if (current[\'R\'] == half[\'R\'] and current[\'G\'] == half[\'G\'] and current[\'B\'] == half[\'B\']): return True return False total_counts = get_color_counts(grid) return \\"YES\\" if is_possible_to_split(total_counts, n*m) else \\"NO\\" # Example usage: grid = [ \\"RRRB\\", \\"GGGG\\", \\"RRRB\\" ] print(can_split_grid(3, 4, grid)) # Output: \\"YES\\""},{"question":"You are given two strings, `S` and `T`. Your task is to determine the minimum number of operations required to convert string `S` into string `T`. You are allowed to use the following operations: 1. Insert a character at any position in `S`. 2. Delete any character from `S`. 3. Replace any character in `S` with any other character. Determine the minimum number of operations required to convert `S` into `T`. The first line of the input contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the string `S`. The second line contains a string `S` of length `n` consisting of lowercase English letters. The third line contains a single integer `m` (1 ≤ m ≤ 1000) — the length of the string `T`. The fourth line contains a string `T` of length `m` consisting of lowercase English letters. Output a single integer — the minimum number of operations required to convert `S` into `T`. # Example Input ``` 6 abcdef 5 azced ``` Output ``` 3 ``` In the example, you can convert `S` to `T` in the following steps: 1. Replace \'b\' with \'z\' 2. Replace \'f\' with \'d\' 3. Delete \'e\'","solution":"def min_operations_to_convert(S, T): Determine the minimum number of operations required to convert string S into string T. Operations allowed: insert a character, delete a character, replace a character. n = len(S) m = len(T) dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[n][m]"},{"question":"You are given a string of parentheses consisting of only characters \'(\' and \')\' and want to check if the parentheses are balanced. A sequence of parentheses is balanced if: 1. It is an empty string, or 2. It consists of two balanced parentheses sequences, one inside the other, or 3. It consists of two balanced parentheses sequences, one followed by the other. Your task is to determine if the given string of parentheses is balanced. The input consists of a single line containing a string of parentheses with a length that does not exceed 2 cdot 10^5. Print \\"YES\\" if the string is balanced, otherwise print \\"NO\\". Example: Input: (()()) Output: YES Input: (() Output: NO","solution":"def is_balanced_parentheses(s): Determines if a string of parentheses is balanced. Args: s: A string consisting of characters \'(\' and \')\' Returns: \'YES\' if the string is balanced, \'NO\' otherwise stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \'NO\' stack.pop() return \'YES\' if not stack else \'NO\'"},{"question":"In a bustling metropolis, a new commuting service has been introduced which uses both underground trains and above-ground buses. The city\'s map is represented as a bi-layered graph where each node represents a station, and edges represent direct connections (trains or buses) between the stations. There are n stations, with each being represented twice: once in the train layer, and once in the bus layer. Train and bus connections may exist between any two stations. Additionally, there is a special type of connection called a transfer, which allows a commuter to switch from the train layer to the bus layer at the same station, and vice versa. Your task is to find the minimum travel distance between two given stations s and t. The distance is computed as the total number of edges (connections) taken to travel from s to t, considering both train, bus, and transfer connections. # Input - The first line contains three integers n, m, and k (1 ≤ n ≤ 1000, 0 ≤ m, k ≤ 2000) — the number of stations, the number of direct train connections, and the number of direct bus connections. - The next `m` lines contain two integers u and v (1 ≤ u, v ≤ n) indicating there is a direct train connection between station u and station v. - The next `k` lines contain two integers u and v (1 ≤ u, v ≤ n) indicating there is a direct bus connection between station u and station v. - The next line contains two integers s and t (1 ≤ s, t ≤ n) — the starting and ending stations. # Output Output a single integer — the minimum distance from station s to station t. If it is not possible to travel from s to t, output -1. # Example Input ``` 5 4 3 1 2 2 3 4 5 1 5 1 3 3 4 2 5 1 4 ``` Output ``` 2 ``` In this example, it takes a transfer from station 1’s train layer to its bus layer, then a direct bus from station 1 to station 4, hence the distance is 2. # Notes - There might be cases where either m or k is zero, which means either train or bus connectivity is entirely missing in some scenarios. - Transfers between the train and bus layers are always possible at every station without any cost.","solution":"from collections import deque, defaultdict def min_travel_distance(n, m, k, train_connections, bus_connections, s, t): # Firstly, build an adjacency list for the graph train_graph = defaultdict(list) bus_graph = defaultdict(list) for u, v in train_connections: train_graph[u].append(v) train_graph[v].append(u) for u, v in bus_connections: bus_graph[u].append(v) bus_graph[v].append(u) # Initialize distance dictionaries for both layers train_dist = {i: float(\'inf\') for i in range(1, n + 1)} bus_dist = {i: float(\'inf\') for i in range(1, n + 1)} # Define BFS Queue, initialized with start point and both layers q = deque([(s, \'train\'), (s, \'bus\')]) train_dist[s] = 0 bus_dist[s] = 0 while q: current_station, current_layer = q.popleft() if current_layer == \'train\': current_graph = train_graph current_dist = train_dist other_dist = bus_dist else: current_graph = bus_graph current_dist = bus_dist other_dist = train_dist # Explore neighbors in the same layer for neighbor in current_graph[current_station]: if current_dist[neighbor] > current_dist[current_station] + 1: current_dist[neighbor] = current_dist[current_station] + 1 q.append((neighbor, current_layer)) # Transfer to other layer if this results in a shorter distance if other_dist[current_station] > current_dist[current_station] + 1: other_dist[current_station] = current_dist[current_station] + 1 q.append((current_station, \'train\' if current_layer == \'bus\' else \'bus\')) # The minimum distance would be the minimum of both layers at the target station res = min(train_dist[t], bus_dist[t]) # If the result is still infinity, it means it\'s unreachable return res if res != float(\'inf\') else -1"},{"question":"Amara loves playing with sequences. She recently came across a new type of number sequence called a **bouncy sequence**. A sequence of numbers is considered bouncy if there exist indices i, j, k such that 1 ≤ i < j < k ≤ n and either ai < aj > ak or ai > aj < ak. Given an integer array of length n, Amara wants to determine if the array is indeed bouncy. Write an algorithm to help Amara check if the given array is bouncy. Input: - The first line contains an integer n (3 ≤ n ≤ 100000), the length of the array. - The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. Output: - Print \\"YES\\" if the array is bouncy, otherwise print \\"NO\\". In the first sample, the array [1, 3, 2] is bouncy since 1 < 3 > 2. In the second sample, the array [1, 2, 3] is not bouncy since there do not exist indices i, j, k satisfying the condition. In the third sample, the array [4, 5, 6, 5, 4] is bouncy because 6 > 5 < 6. Example 1: Input: 3 1 3 2 Output: YES Example 2: Input: 3 1 2 3 Output: NO Example 3: Input: 5 4 5 6 5 4 Output: YES","solution":"def is_bouncy_sequence(n, arr): Returns \\"YES\\" if the array is bouncy, otherwise \\"NO\\". for i in range(1, n-1): if (arr[i-1] < arr[i] > arr[i+1]) or (arr[i-1] > arr[i] < arr[i+1]): return \\"YES\\" return \\"NO\\" # Example usage: # n = 3 # arr = [1, 3, 2] # print(is_bouncy_sequence(n, arr)) # Output: \\"YES\\""},{"question":"To aid in forest conservation, a new system has been developed to monitor tree growth in a forest. Each tree is represented by a node, and possible measurements include the diameter of the tree and the height of the tree. Given the constraints on tree measurements, the system can log changes and updates over time. You are tasked to implement a function to track these changes and provide necessary data summaries. You will receive multiple logs — each log entry may either update the height or diameter of a tree, query the current height, or query the current diameter. Each tree is uniquely identified by an integer. For updates: - Type \\"UpdateHeight tree_id new_height\\" updates the height of the tree with the given tree_id to new_height. - Type \\"UpdateDiameter tree_id new_diameter\\" updates the diameter of the tree with the given tree_id to new_diameter. For queries: - Type \\"QueryHeight tree_id\\" returns the current height of the tree with the given tree_id. - Type \\"QueryDiameter tree_id\\" returns the current diameter of the tree with the given tree_id. Initially, the height and diameter of all trees are set to zero. Write a program that handles inputs and processes these log entries. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of log entries. Each of the following n lines contains a log entry in one of the formats described above. For each query, print the result on a new line. # Example Input: ``` 7 UpdateHeight 1 15 UpdateDiameter 1 3 QueryHeight 1 QueryDiameter 1 UpdateHeight 2 25 QueryHeight 2 QueryDiameter 2 ``` Output: ``` 15 3 25 0 ``` # Explanation - We first update the height of tree 1 to 15. - Then, we update the diameter of tree 1 to 3. - Querying the height of tree 1 returns 15. - Querying the diameter of tree 1 returns 3. - We update the height of tree 2 to 25. - Querying the height of tree 2 returns 25. - Since we haven\'t updated the diameter of tree 2, querying its diameter returns 0 (initial value).","solution":"def process_logs(n, logs): # Initialize tree properties dictionaries height_dict = {} diameter_dict = {} result = [] for log in logs: components = log.split() command = components[0] tree_id = int(components[1]) if command == \\"UpdateHeight\\": new_height = int(components[2]) height_dict[tree_id] = new_height elif command == \\"UpdateDiameter\\": new_diameter = int(components[2]) diameter_dict[tree_id] = new_diameter elif command == \\"QueryHeight\\": # Query height height = height_dict.get(tree_id, 0) result.append(height) elif command == \\"QueryDiameter\\": # Query diameter diameter = diameter_dict.get(tree_id, 0) result.append(diameter) return result"},{"question":"You are given n chisels and a block of wood. The task is to carve out k slots on the block using the given chisels. Each chisel has a specific width and can create a slot of that width on the block. You are allowed to use each chisel at most once. You need to determine if it is possible to create exactly k slots on the block using the given chisels such that the sum of the widths of these k slots is equal to a given target value, T. The first line contains three space-separated integers n, k, and T (1 ≤ n, k ≤ 100, 1 ≤ T ≤ 1000) — the number of chisels, the number of required slots, and the target width respectively. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the widths of the chisels. If a valid selection of chisels exists, output \\"YES\\" and then print the indices of the selected chisels (1-based indexing) in a single line in any order. If there are multiple valid selections, you may print any of them. If no valid selection exists, print \\"NO\\". **Example:** **Input:** ``` 5 3 100 30 20 25 50 70 ``` **Output:** ``` YES 1 2 3 ``` **Explanation:** You can use chisels with widths 30, 20, and 50 to create slots with a total width of 100. Alternatively, other combinations are also possible, and as long as they sum up to 100 with exactly 3 chisels, they are valid.","solution":"from itertools import combinations def find_slots(n, k, T, chisels): Determine if it\'s possible to select k chisels such that the sum of their widths equals T. :param n: Number of chisels :param k: Required number of slots :param T: Target width :param chisels: List of chisels\' widths :return: Tuple containing \\"YES\\" or \\"NO\\" and the indices of selected chisels if possible for comb in combinations(range(n), k): if sum(chisels[i] for i in comb) == T: return \\"YES\\", [i + 1 for i in comb] return \\"NO\\", def chisels_solution(input_str): lines = input_str.strip().split(\'n\') n, k, T = map(int, lines[0].split()) chisels = list(map(int, lines[1].split())) result = find_slots(n, k, T, chisels) if result[0] == \\"YES\\": return result[0] + \\"n\\" + \\" \\".join(map(str, result[1])) else: return result[0]"},{"question":"Alyssa is organizing a coding competition. She has prepared several different coding problems and each problem has a unique complexity level. The complexity levels are represented by distinct integers. After a round of testing, Alyssa realized that she wants to organize the problems in such a way that the difference in complexity levels between any two consecutive problems is minimized to ensure a smooth transition in difficulty for the participants. Given the complexity levels of the problems, arrange them in such an order that the maximum difference between the complexity levels of any two consecutive problems is minimized. If there are multiple optimal solutions, return any of them. The first line contains a single integer n (2 le n le 1000), the number of coding problems. The second line contains n distinct integers c_1, c_2, dots, c_n (1 le c_i le 10^9), denoting the complexity levels of the coding problems. Output a single line containing the complexity levels arranged in the required order. # Example Input ``` 5 4 2 9 3 7 ``` Output ``` 2 3 4 7 9 ``` Or ``` 9 7 4 3 2 ``` In the first sample case, arranging the complexities in order 2, 3, 4, 7, 9 ensures that the maximum difference between consecutive elements (which is 7 - 4 = 3) is minimized. Similarly, 9, 7, 4, 3, 2 is also valid.","solution":"def organize_competition(n, complexities): Given the complexity levels of the problems, arrange them in such an order that the maximum difference between the complexity levels of any two consecutive problems is minimized. Args: n (int): The number of coding problems. complexities (list of int): The complexity levels of the coding problems. Returns: list of int: Arranged complexity levels. return sorted(complexities)"},{"question":"Alice is organizing a community parade and wishes to arrange the parade participants efficiently. She has already decided on the order of participants but needs to determine their starting positions on the street. The street is represented as a line of integer positions (you may assume the street is infinite in both directions). Alice has an array of integers `d` representing the distances each participant should be from their respective neighbor to the right. Alice wishes to know the possible starting positions of each participant on the street such that the distance constraints are maintained. You are given the number of participants `n` and an array `d` of length `n-1`, where `d[i]` represents the distance between the `(i+1)`-th participant and the `i`-th participant. You need to output an array `p` representing the possible positions of the participants on the street, starting from zero for the first participant. If there are multiple valid sets of positions, any one valid configuration is acceptable. # Input: - The first line contains one integer `n` (`2 ≤ n ≤ 100`) — the number of participants. - The second line contains `n-1` integers `d1, d2, ..., d_(n-1)` (`1 ≤ di ≤ 1000`) — the distances between consecutive participants. # Output: - Print an array of `n` integers representing the positions of the participants on the street, with the first participant starting at position `0`. # Example: Input: ``` 3 2 3 ``` Output: ``` 0 2 5 ``` Explanation: - The first participant starts at position 0. - The second participant is 2 units to the right of the first participant (0 + 2 = 2). - The third participant is 3 units to the right of the second participant (2 + 3 = 5).","solution":"def find_participant_positions(n, d): Finds the positions of the parade participants on the street. Parameters: n (int): The number of participants. d (list of int): The distances between consecutive participants. Returns: list of int: The positions of the participants on the street. positions = [0] * n for i in range(1, n): positions[i] = positions[i - 1] + d[i - 1] return positions"},{"question":"A large online retail store is holding a sale and wants to provide a discount to its customers. For each item in a customer\'s cart, if the item appears more than once, a discount is applied based on the number of occurrences of that item. Specifically, the discount provided is equal to the product of the number of occurrences of the item and a constant discount rate specific to that item. Given a list of items, their respective quantities in the cart, and their discount rates, calculate the total discount that will be applied to the customer\'s cart. # Input: - The first line contains a single integer `n` (1 leq n leq 1000), which indicates the number of different items in the cart. - Each of the next `n` lines contains the item\'s name (a string), the quantity of that item in the cart (an integer 1 leq q leq 1000), and the discount rate for that item (a float 0 leq r leq 10.0). # Output: - A single float representing the total discount applied to the cart, rounded to two decimal places. # Example: Input: ``` 3 apple 5 1.5 banana 3 2.0 orange 7 0.5 ``` Output: ``` 26.50 ``` Explanation: - For `apple`: 5 occurrences with a discount rate of 1.5 results in a discount of 5 * 1.5 = 7.50. - For `banana`: 3 occurrences with a discount rate of 2.0 results in a discount of 3 * 2.0 = 6.00. - For `orange`: 7 occurrences with a discount rate of 0.5 results in a discount of 7 * 0.5 = 3.50. Total discount = 7.50 + 6.00 + 3.50 = 17.00 To solve this problem, you need to iterate through each item in the cart, calculate the respective discount for each item, and sum up the discounts to get the total discount for the cart.","solution":"def calculate_total_discount(n, items): Calculate the total discount for the items in the cart. Args: n (int): Number of different items. items (list of tuples): Each tuple contains the item\'s name (str), the quantity (int), and the discount rate (float). Returns: float: Total discount rounded to two decimal places. total_discount = 0.0 for item in items: name, quantity, discount_rate = item total_discount += quantity * discount_rate return round(total_discount, 2)"},{"question":"The city of Showdownville is a modern-day Wild West town where duels are a common way to settle disputes. Every person in Showdownville is assigned a bravery index indicating their courage level. The Sherriff has a list of n duels, and each duel happens between two specific individuals. The bravery of a duel is defined as the minimum bravery index of the two participants. To ensure fairness and keep track of the bravest duel, you are required to find the maximum bravery among all the duels. The first line of input contains an integer n (1 ≤ n ≤ 100,000) – the number of duels. The second line contains n space-separated integers, where the integer at the i-th position indicates the bravery index of the ith individual. Each bravery index is a positive integer (1 ≤ bravery index ≤ 1,000,000). The next n lines describe the duels. Each line contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) – indicating that the duel occurs between the individuals a and b. Output a single integer which is the maximum bravery among all duels. **Example:** Input: ``` 4 5 1 3 4 1 2 1 3 2 4 3 4 ``` Output: ``` 4 ``` **Explanation:** In the above example, the duels and their respective bravery indices are: - Between individual 1 (bravery 5) and individual 2 (bravery 1): bravery = min(5, 1) = 1 - Between individual 1 (bravery 5) and individual 3 (bravery 3): bravery = min(5, 3) = 3 - Between individual 2 (bravery 1) and individual 4 (bravery 4): bravery = min(1, 4) = 1 - Between individual 3 (bravery 3) and individual 4 (bravery 4): bravery = min(3, 4) = 3 The maximum bravery among all duels is 4.","solution":"def maximum_bravery(n, bravery_indices, duels): Returns the maximum bravery among all duels. Parameters: n (int): Number of duels. bravery_indices (list of int): Bravery indices of the individuals. duels (list of tuple): Each tuple contains two integers a and b representing a duel between individuals a and b. Returns: int: Maximum bravery among all duels. max_bravery = 0 for a, b in duels: current_bravery = min(bravery_indices[a-1], bravery_indices[b-1]) if current_bravery > max_bravery: max_bravery = current_bravery return max_bravery"},{"question":"Ada loves to collect stones. She has collected a total of n stones, each having a certain weight. Ada wants to arrange the stones in two piles such that the difference in the total weight of the two piles is minimized. Help Ada find the minimum possible difference between the weights of the two piles. The first line contains an integer n (1 ≤ n ≤ 50) — the number of stones. The second line contains n space-separated integers wi (1 ≤ wi ≤ 100) — the weights of the stones. Output a single integer — the minimum possible difference between the total weights of the two piles. **Example**: ``` Input 5 1 2 3 4 5 Output 1 ``` **Explanation**: Ada can split the stones into piles {1, 2, 3} and {4, 5}. The sum of the first pile is 1 + 2 + 3 = 6, and the sum of the second pile is 4 + 5 = 9. The difference in their weights is |9 - 6| = 3. To get the minimum possible difference, Ada can split the stones into piles {1, 4, 5} and {2, 3}. The sum of the first pile is 1 + 4 + 5 = 10, and the sum of the second pile is 2 + 3 = 5. The difference in their weights is |10 - 5| = 5. The most optimal way to split is {1, 5} and {2, 3, 4}, resulting in a difference of |6 - 5| = 1. Thus, the output is 1.","solution":"def min_weight_difference(n, weights): Returns the minimum possible difference between the total weights of the two piles. total_weight = sum(weights) dp = [0] * (total_weight // 2 + 1) for weight in weights: for j in range(total_weight // 2, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return abs(total_weight - 2 * dp[total_weight // 2])"},{"question":"A warehouse management system needs to handle incoming requests for shipping items. Each item has a distinct size. The warehouse has a conveyor belt of a fixed length, and items need to be placed on the belt for processing. The conveyor belt can be considered as a 1D array of fixed length `L`, and each item has a specific size which can occupy sequential slots on the belt. For instance, if an item has size 3, it will occupy three consecutive slots on the conveyor belt. The belt can only process batches of items where all items fit entirely within the available length `L`. To simplify, each item has a size represented by a positive integer and cannot be split or rotated. Given a list of items with their sizes and the length of the conveyor belt, the task is to determine the maximum number of items that can be placed on the belt simultaneously without exceeding its length. The first line of the input contains an integer `T` (1 ≤ T ≤ 1000) — the number of test cases. For each test case: - The first line contains an integer `L` (1 ≤ L ≤ 10^5) — the length of the conveyor belt. - The second line contains an integer `n` (1 ≤ n ≤ 1000) — the number of items. - The third line contains `n` integers `s1, s2, ..., sn` (1 ≤ si ≤ 10^4) — the sizes of the items. For each test case, output a single integer representing the maximum number of items that can be placed on the conveyor belt simultaneously. # Example Input: ``` 3 10 5 1 2 3 4 5 5 4 2 2 2 2 15 6 5 1 4 7 3 2 ``` Output: ``` 4 2 5 ``` Explanation: - In the first test case, the conveyor belt can hold items of sizes `[1, 2, 3, 4]` which sum up to 10. - In the second test case, the conveyor belt can hold any two items of size `2` out of the four provided. - In the third test case, the conveyor belt can hold items of sizes `[5, 4, 3, 2, 1]` which sum up to 15. Write a program to solve this problem.","solution":"def max_items_on_belt(L, items): items.sort() total_size = 0 count = 0 for size in items: if total_size + size <= L: total_size += size count += 1 else: break return count def process_test_cases(T, test_cases): results = [] for i in range(T): L = test_cases[i][0] items = test_cases[i][1] result = max_items_on_belt(L, items) results.append(result) return results"},{"question":"A string is called \\"good\\" if it contains no two consecutive same characters. For example, the strings \\"ab\\", \\"aba\\", and \\"abcabc\\" are good, whereas \\"aa\\", \\"abaac\\", and \\"aabb\\" are not. You are given a string s. Calculate the minimum number of adjacent swaps needed to make the string good. If it is impossible to make the string good, return -1. Each test case consists of a single string s (1 le |s| le 2000). Print the minimum number of swaps required for each test case. If it is impossible, print -1 for the corresponding test case. For example, you have the following test cases: Input: ``` 3 aa ab aabb ``` Output: ``` -1 0 2 ```","solution":"def min_swaps_to_make_good(s): Given a string s, returns the minimum number of adjacent swaps required to make the string good. If it is impossible to make the string good, returns -1. n = len(s) count_odd_positions = sum(s[i] == s[i + 2] for i in range(0, n - 2, 2)) count_even_positions = sum(s[i] == s[i + 2] for i in range(1, n - 2, 2)) if any(s[i] == s[i + 1] for i in range(n - 1)): return -1 return min(count_odd_positions, count_even_positions) def process_input(strings): results = [] for s in strings: results.append(min_swaps_to_make_good(s)) return results"},{"question":"You are given an array of n integers representing the heights of n buildings in a row, and you are asked to process q queries. Each query is one of two types: 1. Increase the height of all buildings between two given indices by a certain value. 2. For a given index, find the height of the building at that index. You are to efficiently process these operations on the array. The first line contains two integers n (1 ≤ n ≤ 3 * 10⁵) and q (1 ≤ q ≤ 3 * 10⁵) — the number of buildings and the number of queries, respectively. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10⁹) — the initial heights of the buildings. The next q lines contain the queries. Each query is of one of the following types: - 1 l r v: Increase all heights from index l to index r (inclusive) by v (1 ≤ l ≤ r ≤ n; 1 ≤ v ≤ 10⁹). - 2 i: Output the height of the building at index i (1 ≤ i ≤ n). For each type-2 query, output the height of the building at the specified index. Input: ``` 5 5 1 2 3 4 5 1 2 4 10 2 3 1 1 3 5 2 1 2 5 ``` Output: ``` 13 6 5 ``` Explanation: Initially, the heights are [1, 2, 3, 4, 5]. 1. After the first query (1 2 4 10), the heights become [1, 12, 13, 14, 5]. 2. The first type-2 query (2 3) asks for the height at index 3, which is 13. 3. After the second query (1 1 3 5), the heights become [6, 17, 18, 14, 5]. 4. The second type-2 query (2 1) asks for the height at index 1, which is 6. 5. The third type-2 query (2 5) asks for the height at index 5, which is 5.","solution":"def process_operations(n, q, heights, operations): result = [] deltas = [0] * (n + 1) for op in operations: if op[0] == 1: l, r, v = op[1], op[2], op[3] deltas[l-1] += v if r < n: deltas[r] -= v elif op[0] == 2: i = op[1] - 1 result.append(str(heights[i] + sum(deltas[:i+1]))) return \\"n\\".join(result) def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n, q = map(int, lines[0].split()) heights = list(map(int, lines[1].split())) operations = [list(map(int, line.split())) for line in lines[2:]] return n, q, heights, operations def main(input_str): n, q, heights, operations = parse_input(input_str) return process_operations(n, q, heights, operations)"},{"question":"The National Library has a new system to track the popularity of books. They want to analyze the reading patterns of visitors and understand the most frequently borrowed books. You are given a list of integers where each integer represents a unique book ID that a visitor has borrowed. Write a program to determine the k most frequently borrowed books. If multiple books have the same frequency, order them by their book ID in ascending order. The input consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 200,000, 1 ≤ k ≤ 100), where n is the number of books borrowed, and k is the number of books you need to find. - The second line contains n integers where each integer ai (1 ≤ ai ≤ 10^9) represents the book ID of the borrowed book. Output k lines. Each line contains a single integer, which is the book ID of one of the k most borrowed books, ordered first by frequency and then by book ID in ascending order. Example: Input: 9 3 1 2 1 3 1 2 2 3 4 Output: 1 2 3 In this example, the book with ID 1 was borrowed 3 times, book with ID 2 was borrowed 3 times, and book with ID 3 was borrowed 2 times. The book with ID 4 was borrowed only once. The three most frequently borrowed books, ordered by frequency, are 1, 2, and 3.","solution":"from collections import Counter def most_frequent_books(n, k, book_ids): Returns the k most frequently borrowed books, ordered first by frequency and then by book ID in ascending order. # Count the frequency of each book ID count = Counter(book_ids) # Sort by frequency first (in descending order) and then by book ID (in ascending order) sorted_books = sorted(count.items(), key=lambda x: (-x[1], x[0])) # Extract the top k book IDs return [book_id for book_id, _ in sorted_books[:k]]"},{"question":"Given an n x m matrix of integers, you need to determine if there exists a submatrix of size 2 x 2 within it, where the sum of all elements is equal to a given integer k. The first line contains three integers n (2 ≤ n ≤ 100), m (2 ≤ m ≤ 100), and k (1 ≤ k ≤ 10^4) — the number of rows in the matrix, the number of columns in the matrix, and the required sum of the elements of a submatrix of size 2 x 2. Each of the next n lines contains m integers, the elements of the matrix. Each element of the matrix is between 1 and 100. If such a submatrix exists, print \\"YES\\" (without the quotes). Otherwise, print \\"NO\\" (without the quotes). **Example:** _Input:_ ``` 3 4 10 1 2 3 4 5 6 7 8 9 1 2 3 ``` _Output:_ ``` YES ``` Explanation: The submatrix in the first two rows and the last two columns: ``` 7 8 2 3 ``` This submatrix has a sum of 20, which is not equal to 10. But the submatrix in the first two rows and the first two columns: ``` 1 2 5 6 ``` This submatrix has a sum of 14, which is not equal to 10 either. However, the first two columns have the correct sum: ``` 1 2 1 6 ``` This submatrix has a sum of 10. Therefore, the output is \\"YES\\".","solution":"def check_submatrix_sum(n, m, k, matrix): Determines if there exists a 2x2 submatrix within the given n x m matrix that has a sum of elements equal to k. Args: n (int): Number of rows in the matrix. m (int): Number of columns in the matrix. k (int): The required sum of elements of the 2x2 submatrix. matrix (list of list of int): The n x m matrix. Returns: str: \\"YES\\" if such a submatrix exists, otherwise \\"NO\\". for i in range(n - 1): for j in range(m - 1): submatrix_sum = ( matrix[i][j] + matrix[i][j + 1] + matrix[i + 1][j] + matrix[i + 1][j + 1] ) if submatrix_sum == k: return \\"YES\\" return \\"NO\\""},{"question":"You\'ve been tasked with building a new simulation model for an ancient city. The city layout is in the form of a grid with `n` rows and `m` columns. Each cell can either be traversable or blocked. Your task is to determine how many different ways there are to travel from the top-left corner of the grid to the bottom-right corner, moving only right or down at each step, and avoiding blocked cells. Two ways are considered different if the path taken differs by at least one cell. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000). Each of the next `n` lines contains `m` characters, each either \'0\' (indicating a traversable cell) or \'1\' (indicating a blocked cell). Print a single integer representing the number of different ways to travel from the top-left corner to the bottom-right corner, modulo 1000000007. If there is no possible way, print 0. # Example **Input:** ``` 3 3 0 0 0 0 1 0 0 0 0 ``` **Output:** ``` 2 ``` **Explanation:** There are two paths that avoid the blocked cells: (0,0) → (0,1) → (0,2) → (1,2) → (2,2) and (0,0) → (1,0) → (2,0) → (2,1) → (2,2).","solution":"def count_paths(n, m, grid): MOD = 1000000007 if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return 0 # Create a 2D dp array initialized to 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(m): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[-1][-1] # Example usage: def main(): input_data = 3 3 0 0 0 0 1 0 0 0 0 lines = input_data.split(\\"n\\") n, m = map(int, lines[0].split()) grid = [line.split() for line in lines[1:]] print(count_paths(n, m, grid))"},{"question":"You are given an array of n integers representing the heights of buildings from left to right in a skyline. These heights are non-negative and are subject to specific rules for any skyline. A \\"beautiful view\\" is defined as a contiguous subarray of the skyline such that the heights of the buildings in the subarray first strictly increase to a peak and then strictly decrease. For example, a subarray [3, 5, 7, 6, 4] is beautiful, but [3, 5, 5, 4] and [3, 5, 7, 8] are not. Determine the length of the longest beautiful view in the given skyline. If no beautiful view exists, return 0. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of buildings in the skyline. The second line contains n integers h_1, h_2, ..., h_n (0 ≤ h_i ≤ 100,000) — the heights of the buildings in the skyline. Output a single integer — the length of the longest beautiful view. For example, given an array of heights [1, 2, 3, 4, 5, 3, 1], the longest beautiful view is [1, 2, 3, 4, 5, 3, 1] and its length is 7. For another example, given an array of heights [1, 1, 1, 1], there is no beautiful view, hence the output should be 0.","solution":"def longest_beautiful_view(heights): n = len(heights) if n < 3: return 0 max_length = 0 i = 1 while i < n: while i < n and heights[i] == heights[i - 1]: i += 1 increasing = 0 while i < n and heights[i] > heights[i - 1]: increasing += 1 i += 1 decreasing = 0 while i < n and heights[i] < heights[i - 1]: decreasing += 1 i += 1 if increasing > 0 and decreasing > 0: max_length = max(max_length, increasing + decreasing + 1) return max_length"},{"question":"Given an array of n integers (1-indexed) and q queries, you need to help Sasha find the maximum value of a subarray of a specific length. In other words, for each query that asks for the length k, you should find the maximum sum of any subarray of length k from the array. The first line of input contains two integers n and q (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the length of the array and the number of queries. The second line contains n integers ai (1 ≤ ai ≤ 10^6) — the elements of the array. Each of the next q lines contains a single integer k (1 ≤ k ≤ n) — the length of the subarray to consider. For each query, print one integer — the maximum sum of any subarray of length k. **Example** Input: ``` 5 3 1 2 3 4 5 2 3 5 ``` Output: ``` 9 12 15 ``` **Explanation:** For the first query, the subarrays of length 2 are `[1,2]`, `[2,3]`, `[3,4]`, `[4,5]` with sums 3, 5, 7, and 9 respectively. Hence, the maximum sum is 9. For the second query, the subarrays of length 3 are `[1,2,3]`, `[2,3,4]`, `[3,4,5]` with sums 6, 9, and 12 respectively. Hence, the maximum sum is 12. For the third query, the only subarray of length 5 is `[1, 2, 3, 4, 5]` with a sum of 15.","solution":"def max_subarray_sums(n, q, array, queries): Returns the maximum subarray sums for each query length. :param n: Length of the array :param q: Number of queries :param array: List of integers representing the array :param queries: List of integers representing the length of subarrays to consider :return: List of integers with the maximum subarray sum for each query result = [] def max_sum_of_subarray(length): # Use sliding window technique to find the max sum of subarray of given length max_sum = curr_sum = sum(array[:length]) for i in range(length, n): curr_sum += array[i] - array[i - length] max_sum = max(max_sum, curr_sum) return max_sum for k in queries: result.append(max_sum_of_subarray(k)) return result"},{"question":"Bob the explorer has embarked on a journey to discover ancient ruins scattered across a unique city layout. The city consists of n ruins connected by m bidirectional roads. Bob can start his journey from any ruin but can visit each ruin only once before returning to his starting point. The city is designed in such a way that there exists exactly one Hamiltonian cycle that passes through all ruins. A Hamiltonian cycle is a cycle that visits each ruin exactly once and returns to the starting ruin. Your task is to find the Hamiltonian cycle given the city layout. Input: - The first line contains two integers n (3 ≤ n ≤ 10^5) and m (n ≤ m ≤ 2 * 10^5) — the number of ruins and the number of roads. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating there is a road between ruins u and v. Output: - Output n space-separated integers representing the Hamiltonian cycle starting and ending at the same ruin. If multiple Hamiltonian cycles are possible, output any of them. Example: ``` Input: 4 4 1 2 2 3 3 4 4 1 Output: 1 2 3 4 1 ``` Explanation: The given example forms a single Hamiltonian cycle: 1 -> 2 -> 3 -> 4 -> 1. Note: It is guaranteed that a Hamiltonian cycle exists for the given input.","solution":"def find_hamiltonian_cycle(n, m, edges): from collections import defaultdict def dfs(v, visited, path): visited[v] = True path.append(v) if len(path) == n: # If all nodes are visited return path for neighbor in graph[v]: if not visited[neighbor]: cycle = dfs(neighbor, visited, path) if cycle: return cycle visited[v] = False path.pop() return None graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for start in range(1, n + 1): if not visited[start]: cycle = dfs(start, visited, []) if cycle: # Closing the cycle by returning to the starting point cycle.append(cycle[0]) return cycle return [] # Example usage: n = 4 m = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(find_hamiltonian_cycle(n, m, edges)) # Output: [1, 2, 3, 4, 1]"},{"question":"Alyssa works as a software developer, and she often deals with different versions of the software facing various bugs. One day, she encounters the following problem: Alyssa has two versions of the software represented by two strings, `version1` and `version2`. Both versions consist of digits and \'.\', where the \'.\' separates the number into levels. For example, version \\"1.0.2\\" consists of three levels: first level is `1`, second level is `0`, third level is `2`. A level without any digit is considered as `0`, for example, \\"1.0\\" is the same as \\"1.0.0\\". Alyssa wants to compare these two versions to determine which one is greater or if they are equal. The rules of version comparison are as follows: - Version \\"1.2.1\\" is greater than version \\"1.2.0\\" because `1` > `0` at the third level. - Version \\"1.2\\" is equal to \\"1.2.0\\". Help Alyssa write a program to compare these two version numbers. The input consists of two lines: - The first line contains the string `version1`. - The second line contains the string `version2`. Both `version1` and `version2` consist of at most 1000 characters and their levels are no longer than 5 digits. Output: The program should print `1` if `version1` is greater than `version2`, `-1` if `version1` is less than `version2`, and `0` if they are equal. Example: ``` Input: 1.0 1.0.0 Output: 0 Input: 1.0.2 1.0.10 Output: -1 ```","solution":"def compare_versions(version1, version2): Compares two version strings. Returns 1 if version1 is greater than version2, Returns -1 if version1 is less than version2, Returns 0 if they are equal. # Split the version strings by \'.\' levels1 = version1.split(\'.\') levels2 = version2.split(\'.\') # Determine the max length of both levels max_length = max(len(levels1), len(levels2)) # Pad the shorter version levels with \'0\' to make them of equal length for i in range(max_length): level1 = int(levels1[i]) if i < len(levels1) else 0 level2 = int(levels2[i]) if i < len(levels2) else 0 if level1 > level2: return 1 elif level1 < level2: return -1 # If all levels are equal return 0"},{"question":"You\'ve been given an undirected graph with n vertices and m edges. Each vertex is labeled with an integer value. You need to process a series of q queries of the following types: 1. Add a specified value to a specific vertex. 2. Compute the sum of the values of all vertices that are connected to a given vertex (including the vertex itself). The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 10^5). The second line contains n integers, the initial values of the vertices. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices u and v. Each of the following q lines describes a query: - If the query starts with \\"1 u v\\", it means add v to the value of vertex u. - If the query starts with \\"2 u\\", it means compute the sum of the values of all vertices connected to vertex u. Print the result of each type 2 query in the order they are processed. # Example **Input:** ``` 4 4 3 1 2 3 4 1 2 1 3 2 3 3 4 2 1 1 2 5 2 1 ``` **Output:** ``` 10 15 ``` **Explanation:** After the first type 2 query, the vertices connected to vertex 1 are {1, 2, 3}, and their sum is 1+2+3+4=10. After adding 5 to vertex 2, the new values are [1, 7, 3, 4]. For the second type 2 query, we compute the sum of connected vertices again, resulting in 1+7+3+4=15.","solution":"def process_graph_queries(n, m, q, vertex_values, edges, queries): from collections import defaultdict, deque # Create the adjacency list for the graph adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Function to perform BFS to find all connected vertices def bfs(start): visited = set() queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return visited results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": # Add a specified value to a specific vertex u = int(parts[1]) v = int(parts[2]) vertex_values[u - 1] += v elif parts[0] == \\"2\\": # Compute the sum of the values of all connected vertices u = int(parts[1]) connected_vertices = bfs(u) sum_values = sum(vertex_values[v - 1] for v in connected_vertices) results.append(sum_values) return results"},{"question":"Consider a tree (an acyclic, connected graph) with ( n ) vertices labeled from ( 1 ) to ( n ). You are given the tree as an adjacency list in which each vertex contains a list of its directly connected vertices. Your task is to determine the diameter of the tree. The diameter is defined as the number of edges in the longest path between any two vertices in the tree. # Input - The first line contains a single integer ( n ) ( ( 2 leq n leq 100,000 ) ) — the number of vertices in the tree. - Each of the next ( n-1 ) lines contains two integers ( u ) and ( v ) ( ( 1 leq u, v leq n ) , ( u neq v ) ) — indicating that vertex ( u ) and vertex ( v ) are connected by an edge. # Output - Print a single integer — the diameter of the tree. # Example Input ``` 6 1 2 1 3 2 4 2 5 3 6 ``` Output ``` 4 ``` # Explanation The diameter of this tree is the path: 4 - 2 - 1 - 3 - 6, which consists of 4 edges.","solution":"from collections import deque def get_farthest_node(start, adjacency_list): Perform BFS and return the farthest node and its distance from the start node. n = len(adjacency_list) visited = [False] * (n + 1) queue = deque([(start, 0)]) visited[start] = True farthest_node = start max_distance = 0 while queue: node, distance = queue.popleft() if distance > max_distance: farthest_node = node max_distance = distance for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return farthest_node, max_distance def tree_diameter(n, edges): Given the number of nodes and the list of edges for a tree, return its diameter. # Create adjacency list adjacency_list = [[] for _ in range(n + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Step 1: Find any farthest node from an arbitrary start node (1 in this case) farthest_node, _ = get_farthest_node(1, adjacency_list) # Step 2: Find the farthest node from the node found in step 1 and its distance _, diameter = get_farthest_node(farthest_node, adjacency_list) return diameter"},{"question":"You are given an array of integers. Your task is to partition this array into two non-empty subsets, such that the absolute difference of the sums of the elements in these two subsets is minimized. For example, if you are given the array a = {1, 6, 11, 5}, the optimal partition would be {1, 5, 6} and {11}, where the absolute difference of the sums is left| (1 + 5 + 6) - 11 right| = 1. # Input - The first line contains a single integer t (1 le t le 10) — the number of test cases. - For each test case, the first line contains a single integer n (2 le n le 100) — the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 2000) — the elements of the array. # Output - For each test case, print a single integer — the minimum absolute difference of the sums of the two subsets after partitioning. # Example Input ``` 2 4 1 6 11 5 3 1 2 3 ``` Output ``` 1 0 ``` # Note In the first example, you can partition the array into subsets {1, 5, 6} and {11}, resulting in an absolute difference of 1. In the second example, the optimal partition is {1, 2} and {3}, resulting in an absolute difference of 0.","solution":"def minimum_difference_of_subsets(t, cases): def find_minimum_difference(arr): total_sum = sum(arr) n = len(arr) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for i in range(total_sum // 2, num - 1, -1): dp[i] = dp[i] or dp[i - num] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i results = [] for n, arr in cases: results.append(find_minimum_difference(arr)) return results"},{"question":"A furniture manufacturing company produces wooden sticks. Each stick has a certain length, and they need to satisfy customer orders by cutting and combining these sticks. Given an array where each element represents the length of a stick and an integer target, determine if it is possible to cut and combine the sticks to form exactly `target` length. You can perform the following operations: 1. Cut a stick into two smaller sticks of any length. 2. Combine any two sticks to form a new stick with length equal to the sum of their lengths. Your task is to write a function that returns `True` if it is possible to form the target length by cutting and combining the given sticks, or `False` otherwise. The first line contains an integer `n` (1 ≤ `n` ≤ 20), the number of sticks. The second line contains `n` space-separated integers representing lengths of the sticks (1 ≤ stick length ≤ 50). The third line contains an integer `target` (1 ≤ `target` ≤ 1000). Print `True` if you can form the target length, otherwise print `False`. # Example: ``` Input: 5 4 3 3 3 6 9 Output: True ``` # Explanation: You can combine the following sticks to form the target length 9: - Combine stick of length 6 with one stick of length 3. - Combine three sticks of length 3 each to form 9 (by first combining two to form 6, then combine 6 with another 3). # Example: ``` Input: 4 2 2 2 2 7 Output: False ``` # Explanation: There is no way to form a stick of length 7 using the given sticks by cutting and combining.","solution":"from itertools import combinations def can_form_target(n, sticks, target): all_stick_lengths = set(sticks) for i in range(1, n+1): for comb in combinations(sticks, i): if sum(comb) == target: return True all_stick_lengths.add(sum(comb)) if target in all_stick_lengths: return True return False"},{"question":"Polycarp has k items and wants to distribute them among n friends. Each friend should receive at least one item, and the difference between the maximum and minimum number of items received by any two friends should not exceed one. Help Polycarp find a valid distribution that meets these conditions. The first line of the input contains two integers k and n (1 ≤ n ≤ k ≤ 2 * 10^6). Print exactly n integers where the sum of these integers is k and the difference between the maximum and minimum integer is at most 1. If it\'s impossible to distribute the items under the given conditions, print -1. Examples: Input: 10 4 Output: 3 3 2 2 Input: 5 2 Output: 3 2 Input: 1 2 Output: -1 In the first example, we can distribute the items as 3, 3, 2, and 2. The sum is 10, and the difference between the maximum and minimum is only 1. In the second example, we can distribute the items as 3 and 2. The sum is 5, and the difference between the maximum and minimum is only 1. In the third example, it is impossible to distribute 1 item to 2 friends each receiving at least one item, so we print -1.","solution":"def distribute_items(k, n): Distributes k items to n friends such that each friend gets at least one item and the difference between the maximum and minimum number of items each friend gets is at most one. if n > k: return -1 # Each friend should get at least 1 item base = k // n remainder = k % n # Create the distribution list distribution = [base + 1] * remainder + [base] * (n - remainder) return distribution"},{"question":"You are given a matrix of integers with dimensions n x m. Your task is to rotate the matrix 90 degrees clockwise. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 100), which represent the number of rows and columns in the matrix, respectively. The next n lines each contain m integers, representing the elements of the matrix. Output the rotated matrix, where: - The first row of the output is the last column of the input matrix. - The second row of the output is the second-to-last column of the input matrix, and so on until the n-th row of the output is the first column of the input matrix. Provide the output matrix with m lines, each containing n integers. Example: Input: ``` 3 4 1 2 3 4 5 6 7 8 9 10 11 12 ``` Output: ``` 9 5 1 10 6 2 11 7 3 12 8 4 ```","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. n = len(matrix) m = len(matrix[0]) rotated_matrix = [[0]*n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix def convert_input_to_matrix(input_str): input_rows = input_str.strip().split(\\"n\\") n, m = map(int, input_rows[0].strip().split()) matrix = [list(map(int, row.strip().split())) for row in input_rows[1:]] return matrix def convert_matrix_to_output(matrix): return \\"n\\".join( [\\" \\".join(map(str, row)) for row in matrix] ) def rotate_matrix(input_str): matrix = convert_input_to_matrix(input_str) rotated_matrix = rotate_matrix_90_degrees_clockwise(matrix) return convert_matrix_to_output(rotated_matrix)"},{"question":"An e-commerce website tracks the purchase history of its users. Each user can be identified by a unique user ID and has a purchase history that indicates the total amount they\'ve spent on the platform. The website occasionally runs promotions and discounts based on user activity and purchase amounts. Your task is to categorize users into three tiers based on their total spending: - **Bronze**: Users who have spent less than 100. - **Silver**: Users who have spent between 100 and 500 (inclusive). - **Gold**: Users who have spent more than 500. You are given a list of user IDs and their respective purchase amounts. You need to determine the number of users in each tier. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of users. Each of the next n lines contains a user ID and the total spending amount by the user. A user ID is a positive integer up to 10^9, and the spending amount is a non-negative integer up to 10^9. Print three integers separated by spaces: the number of Bronze users, Silver users, and Gold users, respectively. **Example:** ``` Input: 6 1 55 2 150 3 499 4 500 5 501 6 99 Output: 2 3 1 ``` Explanation: - User 1 has spent 55: Bronze. - User 2 has spent 150: Silver. - User 3 has spent 499: Silver. - User 4 has spent 500: Silver. - User 5 has spent 501: Gold. - User 6 has spent 99: Bronze. So there are 2 Bronze users, 3 Silver users, and 1 Gold user.","solution":"def categorize_users(user_data): Categorize users into three tiers based on their total spending: Bronze: Spend less than 100 Silver: Spend between 100 and 500 (inclusive) Gold: Spend more than 500 Parameters: user_data (list): List of tuples containing user ID and spending amount Returns: tuple: Number of Bronze, Silver, and Gold users bronze_count = 0 silver_count = 0 gold_count = 0 for user_id, spending in user_data: if spending < 100: bronze_count += 1 elif spending <= 500: silver_count += 1 else: gold_count += 1 return bronze_count, silver_count, gold_count"},{"question":"You are a developer at a software company where you are tasked with managing an in-memory key-value database. The database supports a set of commands to manipulate and query keys stored in it. Your job is to implement this functionality efficiently. The database supports the following commands: 1. `SET key value` - Sets the value for the specified key. If the key already exists, update its value. 2. `GET key` - Returns the value of the specified key. If the key does not exist, return \\"NULL\\". 3. `DELETE key` - Removes the key from the database. If the key does not exist, do nothing. 4. `EXISTS key` - Returns \\"TRUE\\" if the key exists in the database, otherwise \\"FALSE\\". You need to execute a sequence of commands and print the results of the `GET` and `EXISTS` commands. The first line contains an integer `n` (`1 ≤ n ≤ 10000`), the number of commands. Each of the next `n` lines contains one command in one of the formats mentioned above. For each `GET` and `EXISTS` command, print the result on a new line. # Input ``` 7 SET a 10 SET b 20 GET a EXISTS a DELETE a GET a EXISTS a ``` # Output ``` 10 TRUE NULL FALSE ```","solution":"class InMemoryDatabase: def __init__(self): self.db = {} def set(self, key, value): self.db[key] = value def get(self, key): return self.db.get(key, \\"NULL\\") def delete(self, key): if key in self.db: del self.db[key] def exists(self, key): return \\"TRUE\\" if key in self.db else \\"FALSE\\" def execute_commands(commands): db = InMemoryDatabase() results = [] for command in commands: parts = command.split() cmd_type = parts[0] if cmd_type == \\"SET\\": db.set(parts[1], parts[2]) elif cmd_type == \\"GET\\": results.append(db.get(parts[1])) elif cmd_type == \\"DELETE\\": db.delete(parts[1]) elif cmd_type == \\"EXISTS\\": results.append(db.exists(parts[1])) return results"},{"question":"You are a software engineer in a coding competition and you have just completed developing a new feature for your company\'s application. The feature involves processing a sequence of commands that update or query the status of a collection of objects. The objects are identified by unique IDs and each object has a status that is either \\"active\\" or \\"inactive\\". A typical sequence of commands might look like this: 1. UPDATE <ID> <status> - Updates the object with the given ID to the specified status (\\"active\\" or \\"inactive\\"). 2. QUERY - Returns the count of objects that are currently \\"active\\". Given an initial list of objects and their statuses, followed by a sequence of commands, your task is to determine the result of each QUERY command. The IDs of the objects are unique integers. The first line of input provides two integers, N and M, where N is the number of objects, and M is the number of commands. The second line contains N integers, each representing the initial status of an object. The status is represented by a 1 for \\"active\\" and a 0 for \\"inactive\\". Each of the following M lines represents a command, either in the form of \\"UPDATE <ID> <status>\\" or \\"QUERY\\". IDs are 1-based indices. For each QUERY command, output the count of objects that are currently \\"active\\". # Input ``` The first line contains two integers N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 1000) — the number of objects and the number of commands respectively. The second line contains N integers (each being 0 or 1) representing the initial status of each object. Each of the following M lines contains either an \\"UPDATE <ID> <status>\\" command or a \\"QUERY\\" command. ``` # Output ``` For each QUERY command, print a single integer — the count of active objects. ``` # Example Input ``` 5 4 1 0 1 0 1 QUERY UPDATE 2 1 QUERY UPDATE 5 0 ``` Output ``` 3 4 ``` # Explanation Initially, objects 1, 3, and 5 are \\"active\\" (1-based index), so the initial count of active objects is 3. After updating the status of object 2 to \\"active\\", the count is 4. After updating object 5 to \\"inactive\\", the count remains 4 for the provided example since the final QUERY is not followed by any output command.","solution":"def process_commands(N, M, initial_statuses, commands): statuses = initial_statuses[:] active_count = sum(statuses) results = [] for command in commands: parts = command.split() if parts[0] == \\"QUERY\\": results.append(active_count) elif parts[0] == \\"UPDATE\\": idx = int(parts[1]) - 1 new_status = int(parts[2]) if statuses[idx] != new_status: if new_status == 1: active_count += 1 else: active_count -= 1 statuses[idx] = new_status return results"},{"question":"Morland has a network of lakes connected by rivers. There are n lakes and m rivers. Each river has a specific length and connects a pair of lakes. You are tasked with calculating the shortest path from lake 1 to lake n. The first line of the input contains two integers, n and m, denoting the number of lakes and the number of rivers, respectively (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000). The next m lines each contain three integers ai, bi, and wi, indicating that there is a river of length wi connecting lakes ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ wi ≤ 1000). Output the length of the shortest path from lake 1 to lake n. If there is no path, print \\"NO PATH\\" (without quotes). Example input: ``` 5 6 1 2 4 2 3 3 3 5 2 1 4 6 4 5 1 3 4 2 ``` Example output: ``` 7 ``` In this example, the shortest path from lake 1 to lake 5 is through lakes 1 -> 4 -> 5, with a total length of 7.","solution":"import heapq def shortest_path(n, m, edges): Calculates the shortest path from lake 1 to lake n using Dijkstra\'s algorithm. If there is no path, returns \\"NO PATH\\". # Graph initialization graph = [[] for _ in range(n + 1)] for ai, bi, wi in edges: graph[ai].append((bi, wi)) graph[bi].append((ai, wi)) # Dijkstra\'s algorithm def dijkstra(start, end): heap = [(0, start)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 while heap: current_dist, current_node = heapq.heappop(heap) if current_node == end: return current_dist if current_dist > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return float(\'inf\') shortest_distance = dijkstra(1, n) return shortest_distance if shortest_distance != float(\'inf\') else \\"NO PATH\\""},{"question":"Alice is playing a new game on her phone. The game consists of a grid of size n x m. Each cell in the grid can be either empty or filled with an obstacle. Alice\'s goal is to find the largest square sub-grid that contains no obstacles. The grid is represented with n lines, each containing m characters. A character \'.\' denotes an empty cell, and a character \'#\' denotes an obstacle. Write a program that computes the side length of the largest square sub-grid without any obstacles. Input - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 100) representing the number of rows and columns in the grid, respectively. - The following n lines each contain m characters, either \'.\' or \'#\', representing the grid. Output - Print a single integer — the side length of the largest square sub-grid without any obstacles. Example Input: 5 6 . . . # . . . . . # . . . . . . . . . # # . . . . # # . . . Output: 3 Explanation In the example, the largest square sub-grid without any obstacles has a side length of 3. The sub-grid is formed by the cells: ``` . . . . . . . . . ```","solution":"def largest_square_subgrid(n, m, grid): dp = [[0] * (m + 1) for _ in range(n + 1)] max_side = 0 for i in range(1, n + 1): for j in range(1, m + 1): if grid[i-1][j-1] == \'.\': dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side # Example usage: if __name__ == \\"__main__\\": n, m = 5, 6 grid = [ \\". . . # . .\\", \\". . . # . .\\", \\". . . . . .\\", \\". # # . . .\\", \\". # # . . .\\" ] grid = [line.split() for line in grid] print(largest_square_subgrid(n, m, grid)) # Output: 3"},{"question":"Yuri is an archeologist exploring an ancient underground labyrinth. He has found a magical door with an inscription that reads, \\"Open me by solving the puzzle of paths with instructions given below.\\" The labyrinth can be viewed as a grid with `n` rows and `m` columns. Yuri starts at the top-left corner of the grid and wants to reach the bottom-right corner. However, there are certain cells in the grid that are blocked and can\'t be passed through. Furthermore, Yuri can only move right or down. The input to solve the puzzle is given as follows: - The first line contains two integers `n` and `m` (2 ≤ `n`, `m` ≤ 1000) — the number of rows and columns of the grid. - The following `n` lines contain `m` characters each representing the grid. A \'.\' character means the cell is passable and a \'#\' character means the cell is blocked. Yuri needs to find the number of distinct paths he can take to move from the top-left to the bottom-right corner of the grid, using only right or down moves. Print the number of distinct paths modulo `10^9 + 7`. If there is no path to the destination, print `0`. # Example Input ``` 3 3 ..# ..# #.. ``` Output ``` 2 ``` Explanation In this case, there are two paths: 1. Right → Down → Right → Down 2. Down → Right → Down → Right","solution":"def count_paths(n, m, grid): MOD = 10**9 + 7 # Create a DP table with all elements initialized to 0 dp = [[0] * m for _ in range(n)] # Starting point if grid[0][0] == \'.\': dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[-1][-1] # Example usage: # n, m = 3, 3 # grid = [ # \\"..#\\", # \\"..#\\", # \\"#..\\" # ] # print(count_paths(n, m, grid)) # Output: 2"},{"question":"A company organizes a contest where programmers are judged based on their ability to solve coding problems. Each problem has a certain number of points allocated to it. The results of the contest are generated in a sequence of lines, each line following the format \\"name problem_number score\\". The company wants to publish a leaderboard that shows the total score for each participant. Your task is to create a program that processes the results and generates a leaderboard. The leaderboard should display participants in descending order of their total score. In case of a tie, participants should be sorted lexicographically by their names. # Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of lines in the result list. Each of the following n lines contains a string name (a sequence of lowercase Latin letters, 1 to 10 characters), an integer problem_number (1 ≤ problem_number ≤ 100), and an integer score (0 ≤ score ≤ 1000). Each \\"name problem_number\\" pair is distinct. # Output Print the leaderboard such that each line contains the participant\'s name followed by their total score in the format \\"name total_score\\". # Examples Input: ``` 5 alice 1 250 bob 2 300 alice 2 150 charlie 1 300 bob 1 100 ``` Output: ``` bob 400 alice 400 charlie 300 ``` Input: ``` 3 zara 2 500 anna 1 100 anna 2 200 ``` Output: ``` zara 500 anna 300 ``` # Notes - All the names are unique for a given problem number. - In case of tie in total score, the names should be listed in lexicographically ascending order.","solution":"def generate_leaderboard(n, results): from collections import defaultdict scores = defaultdict(int) for result in results: name, problem_number, score = result.split() score = int(score) scores[name] += score leaderboard = sorted(scores.items(), key=lambda item: (-item[1], item[0])) return [f\\"{name} {total_score}\\" for name, total_score in leaderboard]"},{"question":"A good string is defined as a string that does not contain more than two consecutive identical characters. Given an integer n, find the number of good strings of length n modulo 10^9 + 7. The first line contains a single integer n (1 le n le 10^5). Output a single integer representing the number of good strings of length n modulo 10^9 + 7. In the first example, for n = 2, valid strings include \\"aa\\", \\"ab\\", \\"ba\\", \\"bb\\". Thus, the output is 4. In the second example, for n = 3, valid strings include \\"aab\\", \\"aba\\", \\"abb\\", \\"baa\\", \\"bab\\", \\"bba\\", \\"aca\\", \\"acb\\", \\"baa\\", \\"bba\\", \\"cbc\\", and others without more than two consecutive identical characters. Thus, the output is 20.","solution":"MOD = 10**9 + 7 def number_of_good_strings(n): Returns the number of good strings of length n modulo 10^9 + 7. if n == 1: return 3 # \'a\', \'b\', \'c\' elif n == 2: return 9 # \'aa\', \'ab\', \'ac\', \'ba\', \'bb\', \'bc\', \'ca\', \'cb\', \'cc\' dp = [0] * (n + 1) dp[1] = 3 # For length 1 dp[2] = 9 # For length 2 for i in range(3, n + 1): dp[i] = (2 * dp[i-1] + dp[i-2]) % MOD return dp[n]"},{"question":"Alice is organizing a social event where she wants to ensure everyone is introduced to each other in a structured manner. There are `n` people attending the event, numbered from 1 to `n`. Alice wants to form pairs of people in such a way that the sum of numbers on their name tags is the same for each pair. Formally, Alice wants to form pairs `(i, j)` such that `i + j = k` for some constant `k`. Each person should belong to exactly one pair. Your task is to help Alice find the maximum number of such pairs that can be formed. The first line of the input contains a single integer `n` (1 ≤ n ≤ 200,000) — the number of people attending the event. Output a single integer — the maximum number of pairs that can be formed under the given conditions. # Example Input ``` 6 ``` Output ``` 3 ``` Explanation The pairs that can be formed are: - (1, 5) - (2, 4) - (3, 3) Note: If `n` is odd, one person will be left without a pair. For example, if `n = 5`, only 2 pairs (1, 4) and (2, 3) can be formed, with the person 5 left out. Thus, the output is 2.","solution":"def max_pairs(n): Returns the maximum number of pairs that can be formed such that the sum of numbers on their name tags is the same for each pair. return n // 2"},{"question":"Alicia loves to call her friends and talk to them for hours. However, Alicia can only talk for a certain amount of time each day due to her busy schedule. Given a list of the durations of calls she wants to make and the maximum number of minutes she can talk each day, determine the maximum number of distinct friends she can call. The first line of input contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 10^9), representing the number of friends and the maximum number of minutes she can talk each day. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), where ai is the duration of the call with the i-th friend. You should output a single integer — the maximum number of distinct friends she can call within the given time limit. In the first sample, Alicia can talk to friends with call durations of 1, 2, and 3 for a total of 6 minutes. Thus, the maximum number of friends she can call is 3. In the second sample, Alicia can talk to friends with call durations of 6, 7, and 8 for a total of 21 minutes. Thus, the maximum number of friends she can call is 3.","solution":"def max_friends(n, d, call_durations): Returns the maximum number of distinct friends Alicia can call within the given time limit. :param n: Number of friends :param d: Maximum number of minutes she can talk each day :param call_durations: List of call durations with each friend :return: Maximum number of distinct friends she can call call_durations.sort() total_time = 0 count = 0 for duration in call_durations: if total_time + duration <= d: total_time += duration count += 1 else: break return count"},{"question":"Artem has a list of integers and he wants to divide it into exactly two non-empty parts such that the difference between the sums of these parts is minimized. Given an array a consisting of n integers, compute the minimum possible absolute difference between the sums of its two parts. Note that each of the two parts must be non-empty. The first line contains an integer n (2 ≤ n ≤ 1000) - the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) - the elements of the array. Output the minimum possible absolute difference between the sums of the two parts. Example: Input: 5 3 1 -2 5 4 Output: 1 Explanation: One possible optimal way to divide the array is to place elements {3, 5} in the first part and {-2, 1, 4} in the second part. The sum of the first part is 3 + 5 = 8 and the sum of the second part is -2 + 1 + 4 = 3. The difference is |8 - 3| = 5. However, the more optimal way is to place elements {1, 4, 5} in the first part and {3, -2} in the second part resulting in sums 1 + 4 + 5 = 10 and 3 - 2 = 1. The difference is |10 - 1| = 9. The minimum difference we can achieve is 1 by placing {1, 4, 5} and {3, -2}, resulting in sums 10 and 9.","solution":"def min_abs_difference(n, arr): Returns the minimum possible absolute difference between the sums of two non-empty parts of the array. total_sum = sum(arr) target = total_sum // 2 # Initialize a set to store the possible sums possible_sums = {0} for num in arr: new_sums = set() for s in possible_sums: new_sums.add(s + num) possible_sums.update(new_sums) closest_sum = min(possible_sums, key=lambda x: abs(total_sum - 2*x)) part1_sum = closest_sum part2_sum = total_sum - closest_sum return abs(part1_sum - part2_sum)"},{"question":"Ziko loves solving puzzles and has recently taken an interest in a numbers game known as \\"Digit Sum Challenge\\". In this game, the contestant is given a number and is required to repeatedly sum its digits until a single-digit number is obtained. The challenge is to determine the resulting single-digit number. Can you help Ziko solve the challenge using efficient programming? The first line of the input consists of an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^1000) — the number for which the digit sum needs to be computed. For each test case, print the resulting single-digit number. # Example Input: ``` 3 9875 12345 9 ``` Output: ``` 2 6 9 ``` # Note In the first test case, the digit sum of 9875 is calculated as follows: - 9 + 8 + 7 + 5 = 29 - 2 + 9 = 11 - 1 + 1 = 2 The resulting single-digit number is 2.","solution":"def digit_sum(n): Returns the single-digit sum of the digits of number n. while n >= 10: n = sum(map(int, str(n))) return n def solve_digit_sum_challenge(t, numbers): Solves multiple test cases of the Digit Sum Challenge. Parameters: t (int): Number of test cases. numbers (list of int): List of numbers for which the digit sum needs to be computed. Returns: list of int: List of resulting single-digit numbers. results = [] for number in numbers: results.append(digit_sum(int(number))) return results"},{"question":"You are an intrepid explorer delving into the mysterious world of ancient scripts. During your adventures, you come across an ancient artifact with a sequence of mysterious symbols engraved on it. Through your research, you discover that the sequence can be deciphered using a unique transformation process. Each symbol in the sequence is represented by an uppercase letter (\'A\' to \'Z\'). The transformation process involves repeatedly replacing each letter by the next letter in the alphabet cyclically (i.e., \'A\' becomes \'B\', \'B\' becomes \'C\', ..., \'Z\' becomes \'A\') for a given number of steps. You wish to decipher the original sequence of the artifact given the transformed sequence and the number of steps it has been shifted. Given the final transformed sequence and the number of steps in the transformation process, determine the sequence of symbols before the transformation. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of symbols in the sequence. The second line contains a string of length n consisting only of uppercase letters, representing the transformed sequence of symbols. The third line contains a single integer k (1 ≤ k ≤ 25), the number of steps each letter in the sequence has been shifted. Output the original sequence before the transformation. Example: Input: 8 CDEFGHIJ 2 Output: ABCDEFGH In the given example, each letter of the original sequence \\"ABCDEFGH\\" is shifted 2 steps to the right to produce the transformed sequence \\"CDEFGHIJ\\".","solution":"def decipher_sequence(n, transformed_sequence, k): Given the number of symbols in the sequence, the transformed sequence and the number of shifts k, returns the original sequence before the transformation. original_sequence = [] for char in transformed_sequence: # Shift the character k steps back original_char_val = ord(char) - k if original_char_val < ord(\'A\'): original_char_val += 26 original_sequence.append(chr(original_char_val)) return \'\'.join(original_sequence)"},{"question":"You are given an array of positive integers representing the height of different trees in a forest. Each tree has a height and the forest has a unique property: for every tree, its height is different from the height of any other tree. Your task is to sort the trees based on their heights, but you must perform it in a specific manner. Specifically, you are not allowed to use any built-in sorting functions or libraries. The input starts with an integer n (1 leq n leq 1000), the number of trees in the forest. The second line contains n distinct positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) representing the heights of the trees. Implement a sorting algorithm (such as bubble sort, selection sort, or insertion sort) to sort the heights of the trees in ascending order. # Input Format: The first line contains a single integer n, the number of trees. The second line contains n distinct positive integers separated by space, representing the heights of the trees. # Output Format: Output the heights of the trees in ascending order, each height separated by a space. # Sample Input 1: ``` 5 3 1 4 2 5 ``` # Sample Output 1: ``` 1 2 3 4 5 ``` # Sample Input 2: ``` 3 10 15 5 ``` # Sample Output 2: ``` 5 10 15 ``` Write a program to solve the problem described above. Be sure to use a manual sorting algorithm without any built-in sorting functions or libraries.","solution":"def sort_trees(n, heights): Sorts the tree heights using the insertion sort algorithm. Parameters: n (int): Number of trees heights (list): List of tree heights Returns: list: Sorted list of tree heights for i in range(1, n): key = heights[i] j = i - 1 while j >= 0 and key < heights[j]: heights[j + 1] = heights[j] j -= 1 heights[j + 1] = key return heights"},{"question":"The advancement of technology has brought the era of smart homes upon us. One of the core functionalities of a smart home is its lighting system, controlled using a lighting control panel. For this task, you are asked to write a piece of software for managing a simplified version of this lighting control panel called SmartLight. The SmartLight system is represented as an array of integers where each integer can either be 0 (light is off) or 1 (light is on). Below are the functionalities that the SmartLight control panel must support: 1. `toggle(l, r)`: This function takes two indices, l and r (1-based), and toggles the state of all lights from index l to index r (including l and r). Toggling means turning on the light if it is off and turning off the light if it is on. 2. `turn_on(x)`: This function takes an integer x (1-based) and turns on the light at position x if it is off. 3. `turn_off(x)`: This function takes an integer x (1-based) and turns off the light at position x if it is on. 4. `count_on()`: This function returns the count of lights that are currently on in the entire array. You are required to implement the above functionalities for the SmartLight control panel. # Input Format The first line contains an integer n (1 ≤ n ≤ 100,000), the number of lights in the SmartLight system. The second line contains n integers, either 0 or 1, representing the initial state of each light. The third line contains an integer q (1 ≤ q ≤ 100,000), the number of queries to process. The next q lines describe the queries. Each query is in one of the following formats: - `toggle l r`: Toggle the lights from index l to r. - `turn_on x`: Turn on the light at position x. - `turn_off x`: Turn off the light at position x. - `count_on`: Return the count of lights that are on. # Output Format For each `count_on` query, print the result in a new line. # Example Input ``` 5 0 1 0 0 1 4 toggle 1 3 turn_off 2 turn_on 4 count_on ``` Output ``` 2 ``` # Explanation Initially, the state of the lights is [0, 1, 0, 0, 1]. - After `toggle 1 3`, the state is [1, 0, 1, 0, 1]. - After `turn_off 2`, the state is [1, 0, 1, 0, 1]. - After `turn_on 4`, the state is [1, 0, 1, 1, 1]. - After `count_on`, the output is 2. Implement the SmartLight management system to handle the described operations efficiently.","solution":"class SmartLight: def __init__(self, initial_state): self.lights = initial_state def toggle(self, l, r): # Toggle the lights in the range [l-1, r-1] (converting from 1-based to 0-based index) for i in range(l-1, r): self.lights[i] = 1 - self.lights[i] def turn_on(self, x): # Turn on the light at position x-1 (converting from 1-based to 0-based index) self.lights[x-1] = 1 def turn_off(self, x): # Turn off the light at position x-1 (converting from 1-based to 0-based index) self.lights[x-1] = 0 def count_on(self): # Return the count of lights that are currently on return sum(self.lights)"},{"question":"You are given an integer array `prices` of length `n`. The prices[i] represents the price of ice cream on the `i`-th day. Your task is to determine the maximum profit you can achieve by buying and selling the ice cream. You are allowed to complete as many transactions as you like (i.e., buy one and sell one share of the ice cream multiple times), but you cannot engage in multiple transactions simultaneously (i.e., you must sell the ice cream before you buy again). The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of days. The second line contains `n` space-separated integers `prices[i]` (1 ≤ prices[i] ≤ 1000) — the prices of ice cream on the `i`-th day. Output a single integer — the maximum profit you can achieve. **Example:** For input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 7 ``` Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. For input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.","solution":"def max_profit(prices): This function takes a list of prices and returns the maximum profit that can be achieved by buying and selling the ice cream as described in the problem. profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: profit += prices[i] - prices[i - 1] return profit"},{"question":"Given two balanced binary search trees (BSTs) of size n and m, your task is to merge these two BSTs into one balanced binary search tree while maintaining the in-order traversal property. The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. For each test case: - The first line contains two integers n and m (1 leq n, m leq 10^5) — the sizes of the two BSTs. - The second line contains n space-separated distinct integers a_1, a_2, ldots, a_n — the elements of the first BST, given in the in-order traversal. - The third line contains m space-separated distinct integers b_1, b_2, ldots, b_m — the elements of the second BST, given in the in-order traversal. It is guaranteed that the sum of n and m over all test cases does not exceed 10^6. For each test case, print a single line containing k space-separated integers—the elements of the merged balanced BST in in-order traversal. # Example **Input:** ``` 2 3 3 1 3 5 2 4 6 2 0 1 3 ``` **Output:** ``` 1 2 3 4 5 6 1 3 ``` # Note In the first test case, the merged BST has elements 1, 2, 3, 4, 5, 6. In the second test case, since there are no elements in the second BST, the merged BST consists of elements 1, 3.","solution":"def merge_two_bsts(bst1, bst2): Merges two BSTs represented by their in-order traversals. Args: - bst1: List[int], in-order traversal of the first BST. - bst2: List[int], in-order traversal of the second BST. Returns: - List[int], in-order traversal of the merged BST. merged = sorted(bst1 + bst2) return merged def solve(test_cases): Solves the problem for all test cases. Args: - test_cases: List[Tuple[int, int, List[int], List[int]]], where each element contains: - n: int, size of the first BST. - m: int, size of the second BST. - bst1: List[int], in-order traversal of the first BST. - bst2: List[int], in-order traversal of the second BST. Returns: - List[List[int]], each sublist is the in-order traversal of the merged BST for each test case. results = [] for n, m, bst1, bst2 in test_cases: merged_bst = merge_two_bsts(bst1, bst2) results.append(merged_bst) return results"},{"question":"You are given an array of n integers a1, a2, ..., an. Each element represents the quantity of a certain resource. You are required to select a subarray such that the sum of the resources in that subarray is maximized but does not exceed a given integer k. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output a single integer — the maximum possible sum of a subarray that does not exceed k. Example: Input: 5 10 1 2 3 4 5 Output: 10 Explanation: In the given example, the subarray with elements [1, 2, 3, 4] has the maximum sum (10) that does not exceed k.","solution":"def max_subarray_sum_not_exceeding_k(n, k, arr): Returns the maximum possible sum of a subarray that does not exceed k. n: int - number of elements in the array k: int - the maximum allowed sum arr: list - the array of integers max_sum = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum <= k: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Lara is an avid game collector and has recently purchased a set of new video games. She wants to organize her games on a single shelf, but the shelf has a weight limit of **W** kg. Each game has a specific weight, and Lara wants to maximize the number of games she can place on the shelf without exceeding the weight limit. Given the weight limit of the shelf and the weights of the games, determine the maximum number of games Lara can place on the shelf. The input consists of two lines: - The first line contains two integers **n** and **W** (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^6) — the number of games and the weight limit of the shelf, respectively. - The second line contains **n** integers **w_1, w_2, ..., w_n** (1 ≤ w_i ≤ 10^6) — the weights of the games. Print one integer — the maximum number of games Lara can place on the shelf without exceeding the weight limit. **Example:** Input: ``` 4 10 2 3 4 5 ``` Output: ``` 3 ``` In this example, Lara can place the first three games (weights 2, 3, and 4) on the shelf, which add up to 9 kg and do not exceed the weight limit of 10 kg. Trying to place all four games would exceed the weight limit. Hence, the maximum number of games she can place is 3.","solution":"def max_games_on_shelf(n, W, game_weights): Determines the maximum number of games Lara can place on the shelf without exceeding the weight limit. :param n: Number of games :param W: Weight limit of the shelf :param game_weights: List of weights of the games :return: Maximum number of games that can be placed on the shelf game_weights.sort() total_weight = 0 num_games = 0 for weight in game_weights: if total_weight + weight <= W: total_weight += weight num_games += 1 else: break return num_games"},{"question":"Given two strings s1 and s2, your task is to determine if s2 is a permutation of s1. A permutation of a string is another string that contains the same characters, only the order of characters can be different. # Input: - The first line contains the string s1 (1 ≤ |s1| ≤ 1000). - The second line contains the string s2 (1 ≤ |s2| ≤ 1000). # Output: - Print \\"YES\\" (without quotes) if s2 is a permutation of s1, otherwise print \\"NO\\". # Example: Input: ``` listen silent ``` Output: ``` YES ``` Input: ``` apple papel ``` Output: ``` YES ``` Input: ``` hello holla ``` Output: ``` NO ```","solution":"def is_permutation(s1, s2): Returns \'YES\' if s2 is a permutation of s1, otherwise \'NO\'. if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of n integers representing the stock prices of a company in a sequence of days. Your task is to determine the maximum profit you can achieve by choosing a single day to buy one stock and a different day in the future to sell that stock. If no profit can be achieved, return 0. The list of stock prices is provided as an input where each price corresponds to a day in the sequence. You have to implement a function that takes a list of integers as input and returns an integer representing the maximum profit. Your function should have the following signature: ```python def maxProfit(prices: List[int]) -> int: ``` # Input - A list of integers `prices` of length `n` (1 ≤ n ≤ 10^5) where each integer represents the stock price on a given day in the sequence. # Output - A single integer representing the maximum profit you can achieve from buying and selling stock. If no profitable transaction is possible, return 0. # Example ```python # Example input prices = [7, 1, 5, 3, 6, 4] # Example output 5 # Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5, the maximum profit. ``` # Notes - You must buy before you sell. - You may not complete more than one transaction.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: Determines the maximum profit from buying and selling stock over a period of days. :param prices: A list of integers representing the stock prices on sequential days. :return: An integer representing the maximum profit achievable. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Petya is organizing a hiking event and wants to create a unique hiking path for the participants. The hiking trail is represented as a grid of size `n x m`. Each cell of the grid can be either land or water. The trail can only be built on land, and hikers can move between adjacent cells (left, right, up, down). Petya needs to make sure that the trail forms a continuous path (i.e., an unbroken sequence of land cells) and includes a specified number of land cells. Given the grid and the desired number of land cells `k`, help Petya determine if it\'s possible to create such a continuous hiking trail and if so, find one of the possible trails. # Input 1. The first line contains three integers `n`, `m`, and `k` (1 ≤ `n`, `m` ≤ 1000; 1 ≤ `k` ≤ `n` * `m`). 2. The next `n` lines each contain `m` characters, either \'.\' (representing land) or \'#\' (representing water). # Output - If it\'s impossible to create such a trail, print `-1`. - Otherwise, print `k` lines, each containing the coordinates of one of the land cells that form the continuous trail. Each coordinate should be written as two integers `i` and `j` (1 ≤ `i` ≤ `n`, 1 ≤ `j` ≤ `m`). If there are multiple possible solutions, any one of them is acceptable. # Example Input ``` 5 5 8 .#... ...#. ... .#..# ..... ``` Output ``` 1 1 2 1 2 2 3 2 4 2 4 3 5 2 5 3 ``` Explanation In this example, one possible hiking trail is from (1, 1) to (5, 3), covering exactly 8 land cells. This path forms continuous land cells moving through adjacent cells.","solution":"def find_continuous_trail(grid, n, m, k): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and (x, y) not in visited def dfs(x, y): if len(path) == k: return True visited.add((x, y)) path.append((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny): if dfs(nx, ny): return True if len(path) == k: return True visited.remove((x, y)) path.pop() return False visited = set() path = [] for i in range(n): for j in range(m): if grid[i][j] == \'.\': if dfs(i, j): return path else: return -1 return -1 def hiking_trail(n, m, k, grid_lines): grid = [list(line) for line in grid_lines] result = find_continuous_trail(grid, n, m, k) if result == -1: return -1 else: return result"},{"question":"You are given a string consisting of parentheses \'(\' and \')\'. The string is balanced if and only if: 1. It is the empty string, or 2. It can be written as `AB`, where `A` and `B` are balanced strings, or 3. It can be written as `(A)`, where `A` is a balanced string. You need to perform the following operations to the string: - Insert one \'(\' at any position. - Insert one \')\' at any position. Your task is to determine the minimum number of operations needed to make the string balanced. The first and only line of the input contains a string `s` consisting of up to 10^5 characters, representing the parentheses sequence. Print one integer — the minimum number of operations needed to make the string balanced. # Example Input ``` ))(( ``` Output ``` 4 ``` Explanation In this case, we can insert two \'(\' at the beginning and two \')\' at the end to make the string `(((())))`, which is balanced. Therefore, we need 4 insertions in total.","solution":"def min_operations_to_balance(s): Determine the minimum number of operations needed to make the string of parentheses balanced. Parameters: s (str): The input string consisting of parentheses. Returns: int: The minimum number of insertions needed to balance the string. open_needed, close_needed = 0, 0 for char in s: if char == \'(\': close_needed += 1 else: # char == \')\' if close_needed > 0: close_needed -= 1 else: open_needed += 1 return open_needed + close_needed"},{"question":"Hinata is a huge fan of food delivery services and often orders meals from various restaurants. Each restaurant has a rating and a certain distance from Hinata\'s house. Hinata wants to order from restaurants that are highly rated but also not too far from his house. You are given the information of n restaurants. For each restaurant you know: - A rating r (1 ≤ r ≤ 5) - A distance d (1 ≤ d ≤ 100) Hinata will set a rating threshold r0 and a maximum distance d0, and he wants to get a list of restaurants that have a rating of at least r0 and are within the distance d0. The first line of input contains two integers r0 and d0. The second line contains an integer n (1 ≤ n ≤ 100), the number of restaurants. The following n lines each contain two integers r and d, denoting the rating and distance of a particular restaurant. Print the number of restaurants that meet Hinata\'s criteria. # Example Input 4 10 5 5 8 3 12 4 7 2 5 5 10 Output 3 Explanation In this example, the rating threshold is 4 and the maximum distance is 10. The restaurants that fit these criteria are: - First restaurant: rating 5, distance 8 - Third restaurant: rating 4, distance 7 - Fifth restaurant: rating 5, distance 10","solution":"def filter_restaurants(r0, d0, restaurants): Filters the restaurants based on the rating threshold and maximum distance. Parameters: r0 (int): The rating threshold. d0 (int): The maximum distance. restaurants (list of tuple): Each tuple contains the rating and distance of a restaurant. Returns: int: The number of restaurants meeting the criteria. count = 0 for r, d in restaurants: if r >= r0 and d <= d0: count += 1 return count"},{"question":"Jake is a passionate vegetable gardener with a special talent for cultivating cucumbers. He aims to optimize his harvest by arranging his cucumbers in an ideal sequence. Jake has a collection of cucumbers with varying lengths and he believes that an alternating sequence of long and short cucumbers yields the best harvest. Given an array of integers representing the lengths of cucumbers in his garden, help Jake find a way to rearrange the cucumbers to form such an alternating sequence. An alternating sequence is defined where the lengths of cucumbers at even indices are strictly greater than the lengths of cucumbers at odd indices. If there are multiple ways to achieve it, any valid arrangement is acceptable. If it\'s impossible to create such a sequence, output \\"NO\\". The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of cucumbers Jake has. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the cucumbers. If it is possible to rearrange the cucumbers into an alternating sequence, output \\"YES\\" on the first line. On the second line, output the new arrangement of cucumbers as n space-separated integers. If it is not possible, output \\"NO\\". **Example:** ``` Input: 5 1 3 2 4 5 Output: YES 2 1 4 3 5 ``` **Explanation:** Jake arranges the cucumbers such that the lengths follow the pattern: 2 (even index, long length), 1 (odd index, short length), 4 (even index, long length), 3 (odd index, short length), 5 (even index, long length).","solution":"def rearrange_cucumbers(n, cucumbers): cucumbers.sort() left, right = 0, n - 1 result = [] while left <= right: if left != right: result.append(cucumbers[right]) result.append(cucumbers[left]) else: result.append(cucumbers[right]) left += 1 right -= 1 for i in range(1, n, 2): if result[i] >= result[i-1]: return \\"NO\\" return \\"YESn\\" + \\" \\".join(map(str, result))"},{"question":"Given an undirected graph with n nodes and m edges, you are to find all the nodes that are part of the largest connected component (i.e., the component with the most nodes). The first line of input consists of two integers n and m (1 le n le 10^5, and 0 le m le 10^5) — the number of nodes and the number of edges, respectively. The following m lines contain two integers u and v (1 le u, v le n) — indicating that there is an edge between nodes u and v. An undirected graph means that each edge u, v represents a bidirectional connection. Output the nodes that belong to the largest connected component in the graph. If there are multiple such components of the same size, output the nodes of any of these components. The output should consist of two lines: - The first line should contain the size of the largest connected component. - The second line should contain the nodes of the largest connected component in any order, separated by spaces. # Example Input: ``` 6 5 1 2 2 3 1 3 4 5 4 6 ``` Output: ``` 3 1 2 3 ``` Input: ``` 8 7 1 2 2 3 3 4 4 5 6 7 7 8 6 8 ``` Output: ``` 5 1 2 3 4 5 ``` Explanation: In the first example, the largest connected component has 3 nodes, and they can be `1, 2, 3` or `4, 5, 6`. In the second example, the largest connected component has 5 nodes, and they are `1, 2, 3, 4, 5`.","solution":"def largest_connected_component(n, m, edges): from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): queue = deque([start]) visited = set([start]) component = [] while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return component visited_global = set() largest_component = [] for node in range(1, n+1): if node not in visited_global: component = bfs(node) visited_global.update(component) if len(component) > len(largest_component): largest_component = component print(len(largest_component)) print(\\" \\".join(map(str, largest_component))) return len(largest_component), sorted(largest_component)"},{"question":"You are given an integer array representing an elevation map where the width of each bar is 1. Write a function that computes how much water it is able to trap after raining. The elevation map is represented by a list of non-negative integers, where each integer represents the height of a bar relative to the ground. The goal is to compute the total volume of water that can be trapped between the bars after raining. **Input:** - The first line contains an integer T (1 leq T leq 50) — the number of test cases. - Each of the following T lines contains an integer n (1 leq n leq 10^5) — the number of bars in the elevation map. - Next line contains n non-negative integers h_i (0 leq h_i leq 10^4) — the heights of the bars in the elevation map. **Output:** For each test case, output a single integer — the total volume of water that can be trapped. **Example:** Input: ``` 3 12 0 1 0 2 1 0 1 3 2 1 2 1 6 4 2 0 3 2 5 3 4 2 3 ``` Output: ``` 6 9 1 ``` In the first example, the elevation map [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] yields 6 units of water trapped after rain. In the second example, the elevation map [4, 2, 0, 3, 2, 5] yields 9 units of water trapped after rain. In the third example, the elevation map [4, 2, 3] yields 1 unit of water trapped after rain.","solution":"def trap_rainwater(heights): Given a list of heights representing an elevation map, calculate the total volume of water that can be trapped after raining. if not heights: return 0 n = len(heights) left = [0] * n right = [0] * n water_trapped = 0 # Fill left array left[0] = heights[0] for i in range(1, n): left[i] = max(left[i - 1], heights[i]) # Fill right array right[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], heights[i]) # Calculate trapped water using left and right array for i in range(n): water_trapped += min(left[i], right[i]) - heights[i] return water_trapped def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] heights = test_cases[i][1] results.append(trap_rainwater(heights)) return results"},{"question":"In a magical land, there\'s a special type of tree called the \\"Crystal Tree\\". Each Crystal Tree has a trunk and multiple branches. The branches can intersect at certain points creating junctions, and you need to find how many unique paths exist between the root (trunk) of the tree and any of its leaves. The paths should not share any junctions except for the root. Given an undirected tree with `n` nodes where node 1 is the root, determine the number of unique paths from the root to each leaf node. A leaf is defined as a node that has exactly one neighbor. The first line contains an integer `n` (2 ≤ `n` ≤ 100,000) — the number of nodes in the tree. Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`) — an edge between nodes `u` and `v`. Output a single integer, the number of unique paths from the root to the leaf nodes. **Example:** Input: ``` 5 1 2 1 3 2 4 2 5 ``` Output: ``` 3 ``` Explanation: In the given example, the tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` There are 3 unique paths from the root (node 1) to the leaf nodes (nodes 3, 4, and 5).","solution":"def count_leaf_paths(n, edges): from collections import defaultdict if n == 2: return 1 tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def is_leaf(node): return len(tree[node]) == 1 leaf_count = 0 for node in range(2, n+1): if is_leaf(node): leaf_count += 1 return leaf_count"},{"question":"Alex has just started learning about trees and binary tree traversal algorithms. A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. He is studying pre-order traversal, in which the nodes are recursively visited in this order: visit the root, traverse the left subtree, then traverse the right subtree. Given a binary tree, Alex wants to know the pre-order traversal of its nodes, but he needs help with writing the code. Can you help Alex by writing a program that returns the pre-order traversal of a given binary tree? The input consists of a single line containing space-separated integers representing the node values of a binary tree in level order traversal (where `-1` denotes a null node). The output should be a single line containing space-separated integers representing the node values in pre-order traversal order. **Note:** - The node values are unique positive integers. - The tree can have at most 1000 nodes. **Example Input:** ``` 1 2 3 4 5 -1 -1 -1 -1 6 7 ``` **Example Output:** ``` 1 2 4 5 6 7 3 ``` In the example above, the input represents the following binary tree in level order traversal: ``` 1 / 2 3 / 4 5 / 6 7 ``` The pre-order traversal of this tree is 1, 2, 4, 5, 6, 7, 3.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(level_order_values): if not level_order_values or level_order_values[0] == -1: return None iterator = iter(level_order_values) root = TreeNode(next(iterator)) queue = [root] while queue: node = queue.pop(0) try: left_val = next(iterator) if left_val != -1: node.left = TreeNode(left_val) queue.append(node.left) right_val = next(iterator) if right_val != -1: node.right = TreeNode(right_val) queue.append(node.right) except StopIteration: break return root def pre_order_traversal(root): if root is None: return [] result = [] stack = [root] while stack: node = stack.pop() if node is not None: result.append(node.val) if node.right is not None: stack.append(node.right) if node.left is not None: stack.append(node.left) return result def pre_order_from_level_order(level_order_values): root = build_tree(level_order_values) return pre_order_traversal(root)"},{"question":"You are tasked with protecting a system by implementing a simple intrusion detection mechanism. This system receives a continuous stream of login attempts identified by user IDs and timestamps. However, to protect against automated brute-force attacks, you need to detect and block repeated login attempts from the same user within a short time window. Given a sequence of login attempts, where each login attempt is represented by a tuple containing a user ID and a timestamp, determine how many login attempts would be identified as potential intrusions based on a fixed time window. A login attempt is considered an intrusion if there is another login attempt by the same user within the last k seconds. Input: - The first line contains two integers n and k (1 ≤ n ≤ 100000, 1 ≤ k ≤ 1000) – the number of login attempts and the size of the time window in seconds. - The next n lines each contain a string user_id and an integer timestamp (1 ≤ timestamp ≤ 1000000) representing a login attempt by user_id at the given timestamp. The user IDs are alphanumeric strings of length no more than 10 characters. Output: - A single integer denoting the number of login attempts that would be flagged as potential intrusions. For example: Input: 5 5 alice 1 bob 2 alice 3 alice 7 bob 9 Output: 2 In this example, the login attempts at timestamps 3 and 7 by \\"alice\\" would both be flagged as potential intrusions, while none of the attempts made by \\"bob\\" would be flagged.","solution":"def detect_intrusions(n, k, login_attempts): Detects how many login attempts are potential intrusions based on repeated attempts within a time window. Parameters: n (int): Number of login attempts. k (int): Time window in seconds. login_attempts (list of tuples): List of login attempts where each tuple contains user_id and timestamp. Returns: int: Number of login attempts flagged as potential intrusions. from collections import defaultdict user_attempts = defaultdict(list) intrusion_count = 0 for user_id, timestamp in login_attempts: attempts = user_attempts[user_id] if attempts and timestamp - attempts[-1] <= k: intrusion_count += 1 attempts.append(timestamp) return intrusion_count # Example usage: # n, k = 5, 5 # login_attempts = [(\\"alice\\", 1), (\\"bob\\", 2), (\\"alice\\", 3), (\\"alice\\", 7), (\\"bob\\", 9)] # print(detect_intrusions(n, k, login_attempts)) # Output: 2"},{"question":"During a special promotion, an online bookstore is offering discounts on specific days. Each discount is described by four integers: the day the discount starts, the day the discount ends, the minimum price of an order required to apply the discount, and the percentage discount. Additionally, each customer has a list of intended purchase amounts that they wish to know the best possible discounted price for. For each customer\'s intended purchase amount, the best discount for them is defined as the one that gives the maximum reduction in price while satisfying the minimum price requirement and being valid for the queried day. If there are multiple discounts that result in the same reduced price, the earliest discount in the input list is applied. Given the details of all the discounts and the customers\' queries, calculate the best possible final price for each intended purchase amount on their shopping day. The first input line contains two integers n and m (1 ≤ n ≤ 10,000, 1 ≤ m ≤ 1,000) — the number of discounts and the number of customers, respectively. Each of the next n lines describes a discount with four space-separated integers si, ei, pi, and di (1 ≤ si ≤ ei ≤ 10,000, 1 ≤ pi ≤ 10,000, 1 ≤ di ≤ 100) — the start day, the end day, the minimum price required to apply the discount, and the percentage discount, respectively. Each of the next m lines contains two space-separated integers di and pi (1 ≤ di ≤ 10,000, 1 ≤ pi ≤ 10,000) — the day on which the customer intends to buy the books and their intended purchase amount. For each customer query, output a single line with the best possible final price. Example Input: 3 3 1 5 100 10 2 7 150 20 4 8 200 25 3 180 5 99 7 210 Output: 144 99 157.5 Explanation: - For the first customer, on day 3 with a purchase amount of 180, the best discount is the second one, which gives a 20% discount, making the final price 180 * 0.80 = 144. - For the second customer, on day 5 with a purchase amount of 99, no discount is applicable because the purchase amount is below all minimum requirements, so their final price remains 99. - For the third customer, on day 7 with a purchase amount of 210, the best discount is the third one, which gives a 25% discount, making the final price 210 * 0.75 = 157.5.","solution":"def best_discounted_prices(discounts, customer_queries): Calculate the best possible final price for each customer\'s intended purchase amount on their shopping day. Parameters: discounts (list of tuples): List containing discounts details as (start day, end day, minimum price, discount percentage). customer_queries (list of tuples): List containing customer queries as (day, intended purchase amount). Returns: list of floats: List containing the best possible final prices for each customer\'s query. final_prices = [] for day, amount in customer_queries: best_price = amount for s, e, p, d in discounts: if s <= day <= e and amount >= p: discounted_price = amount * (1 - d / 100) if discounted_price < best_price: best_price = discounted_price final_prices.append(best_price) return final_prices # Example Usage n, m = 3, 3 discounts = [(1, 5, 100, 10), (2, 7, 150, 20), (4, 8, 200, 25)] customer_queries = [(3, 180), (5, 99), (7, 210)] print(best_discounted_prices(discounts, customer_queries))"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge connects two distinct nodes and each node can be part of multiple edges. A node in the graph is special if it is connected to exactly one other node (i.e., its degree is 1). Your task is to determine the number of special nodes in the graph for multiple test cases. The first line contains a single integer t (1 le t le 10) — the number of test cases. For each test case: - The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) — the number of nodes and the number of edges. - The next m lines each contain two integers u and v (1 le u, v le n, u ne v) — denoting an edge between nodes u and v. The sum of n across all test cases will not exceed 10^6. The sum of m across all test cases will not exceed 10^6. For each test case, output a single integer — the number of special nodes in the graph. **Example:** Input: ``` 3 5 3 1 2 2 3 4 5 4 2 1 2 3 4 3 1 1 2 ``` Output: ``` 2 4 2 ``` **Explanation:** - In the first test case, nodes 1, 3, 4, and 5 are special. - In the second test case, all nodes are special as each has exactly one connection. - In the third test case, nodes 1 and 3 are special.","solution":"def count_special_nodes(t, test_cases): results = [] for case in test_cases: n, m, edges = case degree = [0] * (n + 1) for u, v in edges: degree[u] += 1 degree[v] += 1 special_count = sum(1 for d in degree if d == 1) results.append(special_count) return results"},{"question":"You are given a list of integers and a threshold value. You need to find a subarray (contiguous elements) such that the sum of the integers in the subarray is divisible by the threshold value. If there are multiple such subarrays, you can return any. If there is no such subarray, return an empty array. A subarray of an array is a contiguous segment of that array. For example, the subarrays of `[1, 2, 3]` are `[1]`, `[2]`, `[3]`, `[1, 2]`, `[2, 3]`, and `[1, 2, 3]`. Write a function `find_subarray(nums: List[int], threshold: int) -> List[int]` that takes a list of integers `nums` and a threshold integer `threshold`, and returns a subarray of `nums` where the sum of the elements is divisible by the threshold. If no such subarray exists, return an empty array. # Input - The first line contains two integers `n` and `threshold` (`1 ≤ n ≤ 100`, `1 ≤ threshold ≤ 100`), where `n` is the number of integers in the array. - The second line contains `n` integers representing the array `nums` (each integer is between -100 and 100). # Output - Output one line containing the elements of the subarray that have a sum divisible by the threshold, or an empty array if no such subarray exists. # Example Input ``` 6 5 10 5 3 -2 6 -1 ``` Output ``` 10 5 -2 ``` In this example, the subarray `[10, 5, -2]` sums to `13`, which is divisible by `5`. # Notes - The subarray needs to be contiguous. - Any subarray that fulfills the condition can be returned. - If no such subarray exists, return an empty array.","solution":"from typing import List def find_subarray(nums: List[int], threshold: int) -> List[int]: Find a subarray (contiguous elements) such that the sum of the integers in the subarray is divisible by the threshold value. # Iterate through all possible subarrays n = len(nums) for i in range(n): current_sum = 0 for j in range(i, n): current_sum += nums[j] if current_sum % threshold == 0: return nums[i:j+1] return []"},{"question":"Jason is planning a hiking trip on a trail with varying elevations. To keep track of the heights during his hike, he uses a GPS device that records the elevation at every meter. Jason wants to analyze the elevation data to determine the sections of the trail where he is climbing uphill or descending downhill. Given an array of integers representing the elevations recorded by Jason\'s GPS device, your task is to find the maximum length of any continuous uphill or downhill section. An uphill section is defined as a sequence where each subsequent elevation is strictly higher than the previous one, and a downhill section is defined as a sequence where each subsequent elevation is strictly lower than the previous one. The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of recorded elevations. The second line contains n integers: e1, e2, ..., en (1 ≤ ei ≤ 10^9) representing the elevation readings in order. Print a single integer — the maximum length of any continuous uphill or downhill section. # Example Input: ``` 6 2 3 1 4 5 7 ``` Output: ``` 3 ``` Explanation: - The uphill section: 2 to 3 (length 2) - The downhill section: 3 to 1 (length 2) - The next uphill section: 1 to 4 to 5 to 7 (length 4) The longest section is from 1 to 4 to 5 to 7, with a length of 4. Thus, the output is 4.","solution":"def max_uphill_downhill_length(n, elevations): Returns the maximum length of any continuous uphill or downhill section. Parameters: n (int): Number of recorded elevations. elevations (list of int): List of elevation readings. Returns: int: Maximum length of any continuous uphill or downhill section. if n == 1: return 1 max_length = 1 current_length = 1 trend = 0 # 0 for flat, 1 for uphill, -1 for downhill for i in range(1, n): if elevations[i] > elevations[i - 1]: if trend == 1: current_length += 1 else: trend = 1 current_length = 2 elif elevations[i] < elevations[i - 1]: if trend == -1: current_length += 1 else: trend = -1 current_length = 2 else: trend = 0 current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a special kind of array called a \\"wedding cake\\" array of size `n`. It consists of `n` integer elements arranged such that there\'s a centerpiece (median element) and elements around it decrease symmetrically. Your task is to check if the given array is a valid \\"wedding cake\\" array. A \\"wedding cake\\" array has the following properties: 1. The length of the array `n` is odd. 2. The central element at index `n // 2` is the centerpiece. 3. The elements symmetrically around the centerpiece must decrease in value as the distance from the center increases. Formally, for an array `arr`: - `arr[n // 2]` is the centerpiece, - And for all `1 <= i <= n // 2`: - `arr[n // 2 - i] > arr[n // 2 - (i - 1)]`, - `arr[n // 2 + i] > arr[n // 2 + (i - 1)]`. Write a function to determine if a given array is a valid \\"wedding cake\\" array. **Input:** - The first line contains an integer `n` (3 ≤ n ≤ 1000), the size of the array (an odd number). - The second line contains `n` space-separated integers denoting the elements of the array. **Output:** - Print \\"YES\\" if the array is a valid \\"wedding cake\\" array. - Otherwise, print \\"NO\\". **Example:** _Input:_ ``` 7 15 12 9 6 9 12 15 ``` _Output:_ ``` YES ``` _Input:_ ``` 5 1 2 3 2 1 ``` _Output:_ ``` NO ``` _Note:_ In the first example, 6 is the centerpiece. The values 15, 12, 9 decrease as we move towards the centerpiece from both directions, forming a valid \\"wedding cake\\" array. In the second example, the sequence does not meet the decreasing requirement around the centerpiece.","solution":"def is_wedding_cake_array(n, arr): # The array should be of odd length, but we assume this is satisfied by input constraints center_index = n // 2 for i in range(1, center_index + 1): if not (arr[center_index - i] > arr[center_index - (i - 1)] and arr[center_index + i] > arr[center_index + (i - 1)]): return \\"NO\\" return \\"YES\\""},{"question":"Bob and Alice are playing a game. Initially, there is a sequence of n integers placed on a table. In each move, Alice can choose any element and increase it by 1, while Bob can choose any element and decrease it by 1. They play alternately, with Alice going first. They aim to transform the sequence into a given sequence of desired integers. If at some point any number in the sequence becomes negative, the game ends immediately, and the player who made that move loses the game. The goal is to determine if Alice can guarantee a win, assuming that both players play optimally. Given the initial sequence of integers and the desired sequence, determine if Alice can guarantee a win. If she can, print \\"Alice wins\\"; otherwise, print \\"Bob wins\\". Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. - The second line contains two sequences of n integers each: the initial sequence and the desired sequence. All integers in both sequences are between 0 and 100 inclusive. Output: For each test case, display \\"Alice wins\\" or \\"Bob wins\\". Example: Input: 3 3 1 2 3 2 2 2 4 0 1 2 3 1 2 2 4 2 1 0 0 1 0 2 Output: Alice wins Bob wins Bob wins","solution":"def game_result(test_cases): results = [] for n, initial, desired in test_cases: if sum(initial) < sum(desired): results.append(\\"Bob wins\\") else: results.append(\\"Alice wins\\") return results"},{"question":"A company has launched a new product and decided to celebrate by distributing prizes among its loyal customers. Each customer has a unique ID and a certain number of loyalty points. The company has decided to select customers for prizes based on the following conditions: 1. The customer with the maximum number of loyalty points will get the first prize. 2. If two or more customers have the same maximum loyalty points, the customer with the smallest ID will get the prize. 3. After each prize is distributed, that customer is removed from the list, and the next prize is given to the remaining customers based on the updated list. You are provided with a list of customers, where each customer is represented by their ID and the number of loyalty points they have. Your task is to determine the order in which the customers will receive the prizes. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of customers. Each of the next n lines contains two integers: ID and points (0 ≤ ID ≤ 10^9, 0 ≤ points ≤ 10^9), representing a customer\'s ID and their loyalty points. Print the order of customer IDs who will receive the prizes, one ID per line. Example: Input: 5 1 100 2 300 3 300 4 200 5 100 Output: 2 3 4 1 5","solution":"def distribute_prizes(customers): Returns the list of customer IDs in the order they will receive the prizes. :param customers: List of tuples, each containing the ID and points of a customer :return: List of customer IDs in the order they receive the prizes prize_order = [] while customers: # Find the customer with max points max_points = max(customers, key=lambda x: (x[1], -x[0])) prize_order.append(max_points[0]) customers.remove(max_points) return prize_order def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) customers = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(n)] result = distribute_prizes(customers) for customer_id in result: print(customer_id) if __name__ == \\"__main__\\": main()"},{"question":"Given an array of integers, you have to group these integers in such a way that each group has a pair of elements with the same integer value. If it is not possible to group all the integers in such a manner, output `false`. Otherwise, output `true`. The first line contains an integer `n` (1 ≤ n ≤ 10^5), where `n` is the number of integers in the array. The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), which represent the elements of the array. Output `true` if it\'s possible to group all the integers into pairs. Otherwise, output `false`. Here\'s an example to illustrate: **Input:** ``` 6 1 2 2 3 3 1 ``` **Output:** ``` true ``` **Explanation:** The array [1, 2, 2, 3, 3, 1] can be grouped into pairs as follows: (1,1), (2,2), and (3,3), so the output is `true`. **Input:** ``` 5 1 2 2 3 1 ``` **Output:** ``` false ``` **Explanation:** The array [1, 2, 2, 3, 1] cannot be grouped into pairs because there\'s one unpaired element (3), so the output is `false`.","solution":"def can_group_into_pairs(n, array): This function returns True if the array can be grouped into pairs of equal integers, otherwise False. from collections import Counter # Count each element\'s occurrences counts = Counter(array) # Check if all counts are even for count in counts.values(): if count % 2 != 0: return False return True"},{"question":"Mike is a fitness enthusiast who loves to maintain logs of his running sessions. He keeps a record of the distance he ran each day for n consecutive days in an array. He is now curious to know the maximum distance he has covered in any consecutive k days. Help Mike to find out this maximum distance. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105) — the number of days and the number of consecutive days respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 104), where ai represents the distance covered on the ith day. Output a single integer — the maximum distance covered in any consecutive k days. # Example **Input:** ``` 7 3 1 2 3 4 5 6 7 ``` **Output:** ``` 18 ``` **Explanation:** The maximum distance covered in any consecutive 3 days is by the subarray [5, 6, 7], which sums up to 18.","solution":"def max_distance_in_k_days(n, k, distances): Returns the maximum distance covered in any consecutive k days. Parameters: - n (int): The number of days. - k (int): The number of consecutive days. - distances (list of int): List of distances run each day. Returns: - int: The maximum distance covered in any consecutive k days. max_sum = current_sum = sum(distances[:k]) for i in range(k, n): current_sum = current_sum - distances[i - k] + distances[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Treeland is hosting a grand festival with a fireworks display that lasts for t seconds. There are n blocks in Treeland which form a straight sequence and are indexed from 1 to n. Each block has a height h_i and a number of explosions e_i that can be seen from that block during the entire display. Treeland\'s Governing Committee wants to maximize the viewing experience by recommending the best block from which to watch the fireworks. The quality of the viewing experience from block i is determined by the formula: q_i = e_i - p cdot h_i where p is the penalty factor for the height of the block (a higher block may have a better view but may also be less comfortable due to stairs or escalators). Given the number of blocks, their heights, and the number of explosions visible from each block, as well as the penalty factor p, determine the block that provides the maximum viewing experience. # Input - The first line contains two integers n and p (1 le n le 2 cdot 10^5, 0 le p le 10^3) — the number of blocks and the penalty factor. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the blocks. - The third line contains n integers e_1, e_2, ldots, e_n (0 le e_i le 10^9) — the number of explosions visible from each block. # Output - Print one integer: the index of the block that provides the maximum viewing experience. If there are multiple blocks with the same maximum value, print the smallest index among them. # Example Input ``` 5 2 10 30 20 40 50 100 200 150 80 60 ``` Output ``` 2 ``` # Explanation - For block 1: q_1 = 100 - 2 cdot 10 = 80 - For block 2: q_2 = 200 - 2 cdot 30 = 140 - For block 3: q_3 = 150 - 2 cdot 20 = 110 - For block 4: q_4 = 80 - 2 cdot 40 = 0 - For block 5: q_5 = 60 - 2 cdot 50 = -40 Block 2 provides the best viewing experience with q_2 = 140 .","solution":"def find_best_viewing_block(n, p, heights, explosions): Determines the best block for watching the fireworks to maximize the viewing experience. Parameters: n (int): Number of blocks p (int): Penalty factor for the height heights (list of int): Heights of the blocks explosions (list of int): Number of explosions visible from each block Returns: int: Index of the block that maximizes the viewing experience (1-based index) max_quality = float(\'-inf\') best_block_index = -1 for i in range(n): current_quality = explosions[i] - p * heights[i] if current_quality > max_quality: max_quality = current_quality best_block_index = i elif current_quality == max_quality: best_block_index = min(best_block_index, i) return best_block_index + 1"},{"question":"Juliana is a librarian and manages a large collection of books. Each book in the library has a unique ISBN number and is categorized by genre. Juliana often needs to perform operations on the library\'s book collection, like adding a new book, removing a book, querying for books of a particular genre, and undoing the last operation she has performed. The operations are given as unformatted text and should be parsed accordingly. Initially, the library collection is empty. The operations are given in a specific order and must be executed in sequence. When a query operation is performed, you should return a list of ISBNs of the books of the specified genre in order they were inserted or an empty list if there are no books of that genre. The first line consists of a single integer q (1 ≤ q ≤ 105) — the number of operations. The following q lines consist of the description of the operations: - \\"add <isbn> <genre>\\": Adds a new book with the given ISBN and genre to the collection. - \\"remove <isbn>\\": Removes the book with the given ISBN from the collection. - \\"query <genre>\\": Outputs the list of ISBNs of books of the specified genre, or an empty list if none exist. - \\"undo\\": Reverts the last operation (either add or remove). Note: - All ISBN numbers consist of 13 digits and all genres consist of lowercase English letters and have a length of 1 ≤ |genre| ≤ 15. - It is guaranteed that the last operation is a query operation. - There will be at most 105 operations in total. Output the result of each query operation, where no print should be made for other operations. Example: ``` Input: 6 add 9780306406157 fiction add 9781451673319 fiction query fiction remove 9781451673319 query fiction undo Output: 9780306406157 9781451673319 9780306406157 ```","solution":"class Library: def __init__(self): self.collection = {} self.operation_stack = [] def add(self, isbn, genre): if genre not in self.collection: self.collection[genre] = [] if isbn not in self.collection[genre]: self.collection[genre].append(isbn) self.operation_stack.append((\'add\', isbn, genre)) def remove(self, isbn): for genre, books in self.collection.items(): if isbn in books: books.remove(isbn) self.operation_stack.append((\'remove\', isbn, genre)) break def query(self, genre): if genre in self.collection: return self.collection[genre] return [] def undo(self): if not self.operation_stack: return last_operation = self.operation_stack.pop() action, isbn, genre = last_operation if action == \'add\': self.collection[genre].remove(isbn) if not self.collection[genre]: del self.collection[genre] elif action == \'remove\': if genre not in self.collection: self.collection[genre] = [] self.collection[genre].append(isbn) def process_operations(q, operations): library = Library() results = [] for operation in operations: parts = operation.split() action = parts[0] if action == \'add\': isbn, genre = parts[1], parts[2] library.add(isbn, genre) elif action == \'remove\': isbn = parts[1] library.remove(isbn) elif action == \'query\': genre = parts[1] results.append(\\" \\".join(library.query(genre))) elif action == \'undo\': library.undo() return results"},{"question":"You are given a list of strings which represents a file system structure. Your task is to find the length of the longest absolute path to a file within this file system. A file is represented by a string containing a dot character `\'.\'`, and a directory is represented by a string without a dot character. Each level of the directory or file is indicated by a number of tab characters `\'t\'`. For instance, in the string representation of the file system: ``` dir tsubdir1 ttfile1.ext ttsubsubdir1 tsubdir2 ttsubsubdir2 tttfile2.ext ``` - \\"dir\\" is the root directory. - \\"subdir1\\" and \\"subdir2\\" are subdirectories within \\"dir\\". - \\"file1.ext\\" is a file within \\"subdir1\\". - \\"subsubdir1\\" is a subdirectory within \\"subdir1\\". - \\"subsubdir2\\" is a subdirectory within \\"subdir2\\". - \\"file2.ext\\" is a file within \\"subsubdir2\\". A tab character `\'t\'` precedes subdirectories and files to indicate the level of depth. Each directory name and filename consists of alphanumeric characters and dots. The length of an absolute path is the total number of characters in the path (including slashes). Write a function to compute the length of the longest absolute path to a file in the given file system. If there is no file in the file system, return 0. # Input - The input string `s` (1 ≤ length of s ≤ 10^4) which represents the file system structure. # Output - An integer representing the length of the longest absolute path to a file. # Example ```python def lengthLongestPath(s: str) -> int: # Your implementation here # Example usage: s = \\"dirntsubdir1nttfile1.extnttsubsubdir1ntsubdir2nttsubsubdir2ntttfile2.ext\\" print(lengthLongestPath(s)) # Output: 32 ``` In this example, the longest absolute path is `dir/subdir2/subsubdir2/file2.ext`, and its length is 32.","solution":"def lengthLongestPath(s: str) -> int: Finds the length of the longest absolute path to a file within the given filesystem structure. max_length = 0 path_length = {0: 0} # Length of paths at each depth level (initialized with root level 0) for line in s.split(\'n\'): name = line.lstrip(\'t\') depth = len(line) - len(name) if \'.\' in name: # It\'s a file max_length = max(max_length, path_length[depth] + len(name)) else: # It\'s a directory path_length[depth + 1] = path_length[depth] + len(name) + 1 return max_length"},{"question":"You are given an array of integers a, consisting of n integers. A non-decreasing contiguous subarray [l, r] is defined as a contiguous subarray a[l..r] that satisfies a_i leq a_{i+1} for all l leq i < r. For each query, you are provided two indices x and y (1 leq x leq y leq n). You need to determine whether the subarray a[x..y] is non-decreasing. The first line of the input contains two integers n and q (1 leq n, q leq 10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. Each of the following q lines contains two integers x_i and y_i (1 leq x_i leq y_i leq n) — the indices for the i-th query. Output q lines, each containing \\"YES\\" if the subarray a[x_i..y_i] is non-decreasing, otherwise \\"NO\\". For example: **Input:** 7 3 3 4 5 5 6 7 8 1 4 3 6 2 5 **Output:** YES YES YES","solution":"def is_non_decreasing_subarray(a, x, y): Check if the subarray a[x..y] is non-decreasing. x and y are 1-based indexes. for i in range(x-1, y-1): if a[i] > a[i+1]: return \\"NO\\" return \\"YES\\" def process_queries(n, q, a, queries): Process a list of queries for non-decreasing subarrays. n: length of the array q: number of queries a: list of integers representing the array queries: list of tuples, each containing indices (x, y) results = [] for x, y in queries: results.append(is_non_decreasing_subarray(a, x, y)) return results"},{"question":"Farmer John wants to build a new fence around his farm. He has n different types of fence panels, each with a length li. John can combine panels of different types to create a fence, but he wants to minimize the number of different types of panels in use. Given the lengths of the fence panels and the total length of the fence John wants to build, your task is to determine the minimum number of different types of panels required to exactly build a fence of the desired length L. If it\'s impossible to build the fence with the given panels, return -1. Input: The first line contains two integers n and L (1 ≤ n ≤ 1000, 1 ≤ L ≤ 10^9), where n is the number of different types of panels and L is the desired length of the fence. The second line contains n integers l1, l2, ..., ln (1 ≤ li ≤ 10^9), representing the lengths of the different types of panels. Output: Output a single integer — the minimum number of different types of panels required to exactly build a fence of length L, or -1 if it\'s not possible. Example: Input: 3 8 3 5 4 Output: 2 Explanation: In the first example, John can use panels of length 3 and 5 to exactly build a fence of length 8. Thus, the minimum number of different types of panels required is 2.","solution":"def min_types_fence_panels(n, L, lengths): Finds the minimum number of different types of panels required to exactly build a fence of length L :param n: int - number of different types of panels :param L: int - desired length of the fence :param lengths: list of int - lengths of the different types of panels :return: int - minimum number of different types of panels required or -1 if not possible from itertools import combinations # Finding all combinations of lengths to check their sums for i in range(1, n + 1): for comb in combinations(lengths, i): if sum(comb) == L: return i return -1"},{"question":"Alice is a software engineer who wants to optimize a particular piece of code in which she needs to distribute items into containers. She has n items, each item with a specific weight, and she needs to distribute these items into k containers such that each container holds items up to a maximum weight limit. The goal is to determine the minimum possible maximum weight limit required for the containers. You are given a list of n integers representing the weights of the items and an integer k representing the number of containers. Your task is to find the minimum possible maximum weight limit so that all items can be distributed into k containers without exceeding this weight limit. Input: The first line contains two integers, n and k (1 ≤ k ≤ n ≤ 10^5). The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^4) representing the weights of the items. Output: Print a single integer, the minimum possible maximum weight limit required for the containers. Example: Input: 5 3 1 2 3 4 5 Output: 6 Explanation: One way to distribute the items with a maximum weight limit of 6 is: - Container 1: items with weights 1, 2, 3 (total weight = 6) - Container 2: item with weight 4 (total weight = 4) - Container 3: item with weight 5 (total weight = 5) Another valid distribution with the same maximum weight limit is: - Container 1: items with weights 1, 5 (total weight = 6) - Container 2: item with weight 2 (total weight = 2) - Container 3: items with weights 3, 4 (total weight = 7) Both distributions ensure that no container exceeds the weight limit of 6, but 6 is the minimal possible such limit.","solution":"def distribute_items(n, k, weights): def canDistribute(mid): current_sum = 0 required_containers = 1 for weight in weights: if current_sum + weight > mid: required_containers += 1 current_sum = weight if required_containers > k: return False else: current_sum += weight return True low = max(weights) high = sum(weights) while low < high: mid = (low + high) // 2 if canDistribute(mid): high = mid else: low = mid + 1 return low"},{"question":"During a recent experiment in logistics, scientists at RoboLand discovered a new, optimal way to route their delivery drones to ensure minimal battery usage. The grid-based city layout consists of numerous cells, each having an associated battery consumption value. The delivery drone can only move in two directions: right or down. Given an n x n grid, where each cell (i, j) contains a positive integer representing the battery consumption value for that cell, the task is to determine the minimum battery consumption required for the drone to travel from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, n-1). The drone starts at the top-left corner, and it can only move either to the right or downward. Write a program to compute the minimal battery usage needed for the drone to complete its route. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. - The next n lines each contain n integers, where the j-th integer in the i-th line represents the battery consumption value of cell (i, j) (1 ≤ consumption value ≤ 100). Output: - Print a single integer, the minimal battery consumption required for the drone to travel from (0, 0) to (n-1, n-1). Example: Input: 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The optimal path for minimal battery usage is 1 → 3 → 1 → 1 → 1, which sums to 7.","solution":"def min_battery_usage(grid): n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] # Example Usage n = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_battery_usage(grid)) # Output: 7"},{"question":"Determine the minimum number of swap operations needed to sort a given array of unique integers in non-decreasing order. A swap operation consists of choosing any two elements in the array and swapping their positions. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n unique integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print a single integer — the minimum number of swaps required to sort the array. **Example:** Input: ``` 5 5 4 3 2 1 ``` Output: ``` 2 ``` In the example test case, the initial array is [5, 4, 3, 2, 1]. By swapping element 1 (index 4) with element 5 (index 0), we get [1, 4, 3, 2, 5]. Then, by swapping element 2 (index 3) with element 4 (index 1), we get [1, 2, 3, 4, 5] which is sorted. Thus, the minimum number of swaps needed is 2.","solution":"def min_swaps_to_sort(arr): Determine the minimum number of swaps needed to sort the given array. Parameters: arr (list): A list of unique integers. Returns: int: The minimum number of swaps required. n = len(arr) # Create a list of tuples where each tuple is (number, index) indexed_array = list(enumerate(arr)) # Sort the tuple list based on the number value indexed_array.sort(key=lambda x: x[1]) visited = [False] * n swaps = 0 for i in range(n): # If already visited or already in correct place if visited[i] or indexed_array[i][0] == i: continue # Find out the size of the cycle cycle_size = 0 x = i while not visited[x]: visited[x] = True x = indexed_array[x][0] cycle_size += 1 # Add the number of swaps for this cycle if cycle_size > 0: swaps += (cycle_size - 1) return swaps # Example usage: if __name__ == \\"__main__\\": n = int(input()) arr = list(map(int, input().split())) print(min_swaps_to_sort(arr))"},{"question":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). # Input A single line containing a string `s` with a maximum length of 1000 characters. # Output Output \\"YES\\" if the string is a palindrome and \\"NO\\" otherwise. # Example Input ``` A man, a plan, a canal: Panama ``` Output ``` YES ``` Input ``` race a car ``` Output ``` NO ``` # Sample Explanation In the first example, after removing non-alphanumeric characters and converting to the same case, the string becomes \\"amanaplanacanalpanama\\", which is a palindrome. In the second example, after processing, the string becomes \\"raceacar\\", which is not a palindrome. Hence, the output is \\"NO\\".","solution":"def is_palindrome(s): Returns \\"YES\\" if the string s is a palindrome, considering only alphanumeric characters and ignoring cases. Otherwise, returns \\"NO\\". # Remove non-alphanumeric characters and convert to lower case cleaned_s = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string is the same forward and backward if cleaned_s == cleaned_s[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You are given a tree with `n` nodes and `n-1` edges. Each node has a unique label from 1 to n. The weight of each edge in the tree is given. A traveler starts at node 1 and wants to visit every node in the tree exactly once, while minimizing the total weight of the edges traveled. The traveler cannot visit the same node more than once. Your task is to calculate the minimum possible total weight of the path taken by the traveler. The first line of the input contains a single integer `n` (2 ≤ n ≤ 1000) — the number of nodes in the tree. The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — the endpoints of the edge and its weight. Output the minimum possible total weight of the path taken by the traveler. Input: ``` 4 1 2 3 1 3 4 3 4 2 ``` Output: ``` 5 ``` Explanation: The traveler can start at node 1, go to node 2 (weight 3), then return to node 1 (weight 3), then go to node 3 (weight 4), and from node 3 travel to node 4 (weight 2), resulting in a total minimum weight of 3 + 3 + 4 + 2 = 12. However, the correct minimal path is 1 -> 3 -> 4 -> 3 -> 2 -> 1 with weights 4 + 2 + 4 + 3 + 3 = 16 and the minimum weight is 5 (only counting distinct edges once in an optimal path with no revisit). Note: The problem guarantees the tree is connected and has no cycles.","solution":"def minimum_travel_weight(n, edges): Given `n` nodes and `n-1` edges of a tree, calculate the minimum possible total weight of the path taken by the traveler who wants to visit every node exactly once starting from node 1. from collections import defaultdict, deque # Construct the adjacency list for the tree tree = defaultdict(list) for u, v, w in edges: tree[u].append((v, w)) tree[v].append((u, w)) # Use Breadth First Search (BFS) to find the sum of all edge weights from the root (node 1) def bfs_minimum_travel_weight(start): visited = [False] * (n + 1) queue = deque([(start, 0)]) total_weight = 0 while queue: node, weight = queue.popleft() if not visited[node]: visited[node] = True total_weight += weight for neighbor, edge_weight in tree[node]: if not visited[neighbor]: queue.append((neighbor, edge_weight)) return total_weight return bfs_minimum_travel_weight(1)"},{"question":"You are given two arrays of integers, `A` and `B`, of equal length `n`. You need to determine if there exists a permutation of array `A`, let\'s call it `P`, such that for every `i` (1 <= i <= n), the sum of `P[i] + B[i]` is a constant value `C`. The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the length of the arrays. The second line contains `n` integers representing the elements of array `A` (1 ≤ A[i] ≤ 1,000,000). The third line contains `n` integers representing the elements of array `B` (1 ≤ B[i] ≤ 1,000,000). Print YES (case insensitive) if such a permutation `P` exists. If YES, also print the permutation of `A`. If no such permutation exists, print NO (case insensitive). If there are multiple solutions, any one of them is acceptable. Example: Input: ``` 3 1 2 3 4 5 6 ``` Output: ``` YES 3 2 1 ``` Explanation: Permutation `P = [3, 2, 1]` satisfies the condition: * `P[1] + B[1] = 3 + 4 = 7` * `P[2] + B[2] = 2 + 5 = 7` * `P[3] + B[3] = 1 + 6 = 7` Another valid solution is `1 2 3`.","solution":"def check_permutation_and_generate(A, B): Checks if there exists a permutation of array A such that the sum of the permutation and B is constant for every element. If such a permutation exists, returns (\'YES\', P) where P is the permutation. Otherwise, returns \'NO\'. # Sort A and B A_sorted = sorted(A) B_sorted = sorted(B) # Calculate the target sum C using the smallest elements C = A_sorted[0] + B_sorted[-1] # Create a dictionary to count occurrences in B from collections import Counter B_counter = Counter(B) P = [] # For every element in sorted A for a in A_sorted: b_needed = C - a if B_counter[b_needed] > 0: P.append(a) B_counter[b_needed] -= 1 else: return \\"NO\\" return \\"YES\\", P"},{"question":"You are given a circular track of length L units with n checkpoints placed at distinct points on the track. Each checkpoint has a unique identifier ranging from 1 to n. The distance along the track between two points can be measured either clockwise or counterclockwise, and the shortest path is always taken. You will receive q queries. Each query gives the starting checkpoint a and the destination checkpoint b. Your task is to calculate the shortest distance between the two checkpoints for each query. The track length L, the number of checkpoints n, and the number of queries q satisfy the constraints: 1 leq L leq 10^9, 2 leq n leq 10^5, 1 leq q leq 10^5. The position of each checkpoint (in meters from a chosen point on the track) is given in increasing order of checkpoint identifiers and is guaranteed to be distinct. # Input - The first line contains three integers L, n, and q. - The second line contains n integers p_1, p_2, ..., p_n, where p_i is the position of the i-th checkpoint. - The next q lines each contain two integers a and b (1 ≤ a, b ≤ n) representing the start and end checkpoints for each query. # Output - For each query, print the shortest distance between checkpoints a and b. # Example Input ``` 100 5 3 10 20 30 60 80 1 3 3 5 1 5 ``` Output ``` 20 50 30 ``` # Note In the example, the track length is 100 units. Checkpoints are at positions 10, 20, 30, 60, and 80 units. For the queries: 1. From checkpoint 1 to checkpoint 3: The shortest distance is 20 units (from 10 to 30). 2. From checkpoint 3 to checkpoint 5: The shortest distance is 50 units (from 30 to 80). 3. From checkpoint 1 to checkpoint 5: The shortest distance is 30 units (from 10 to 80, taking the counterclockwise shortest path).","solution":"def shortest_distance(L, positions, queries): Computes the shortest distance on a circular track between checkpoints `a` and `b` for each query. Parameters: - L: length of the circular track - positions: list of positions of checkpoints on the track - queries: list of tuples, where each tuple contains two integers (a, b) representing the start and end checkpoints Returns: - List of shortest distances for each query def distance(a, b): d1 = abs(positions[b-1] - positions[a-1]) d2 = L - d1 return min(d1, d2) result = [] for a, b in queries: result.append(distance(a, b)) return result"},{"question":"You are given a tree with n nodes, where nodes are numbered from 1 to n. The tree consists of n-1 edges that connect the nodes, and it is guaranteed that the tree is connected and acyclic. Your task is to find the length of the longest path in the tree, commonly known as the tree\'s diameter. The length of a path is measured by the number of edges in the path. The first line of input contains a single integer n (2 ≤ n ≤ 100000) — the number of nodes in the tree. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — the endpoints of an edge in the tree. Output a single integer representing the length of the longest path in the tree. Example: Input: 5 1 2 1 3 3 4 3 5 Output: 3 Explanation: In the given example, the longest path in the tree is either from node 2 to node 4 or from node 2 to node 5, each with a length of 3 edges.","solution":"from collections import defaultdict, deque def longest_path_length(n, edges): def bfs(start_node): visited = [-1] * n queue = deque([start_node]) visited[start_node] = 0 farthest_node = start_node max_distance = 0 while queue: node = queue.popleft() current_distance = visited[node] for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_distance + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) first_far_node, _ = bfs(0) second_far_node, diameter = bfs(first_far_node) return diameter"},{"question":"You are given N events which need to be scheduled within a single day. Each event has a start time and an end time. No two events can overlap. Your task is to determine the maximum number of events that can be scheduled within the day so that no events overlap. The first line of input contains a single integer N (1 ≤ N ≤ 100,000), representing the number of events. The next N lines contain the start and end times of each event. The i-th line contains two integers, S_i and E_i (0 ≤ S_i < E_i ≤ 10^9), representing the start time and the end time of the i-th event. Print a single integer, the maximum number of events that can be scheduled such that no two events overlap. Example: Input: 5 1 4 2 3 3 5 7 9 6 8 Output: 3 Explanation: The maximum number of non-overlapping events that can be scheduled is 3. One possible selection of events is (2,3), (3,5), and (7,9).","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be scheduled in a day. Parameters: events (list of tuples): A list where each tuple contains the start and end time of an event. Returns: int: The maximum number of non-overlapping events. # Sort the events by their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for event in events: start, end = event if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"Masha has a bookshelf with many books. Each book can be characterized by its height. She is very particular about the height of books on her shelf and wants to arrange them in a specific order. Specifically, she wants the heights of the books to be in non-decreasing order. However, she doesn\'t want to move too many books, so she needs your help to determine the minimum number of books that must be removed to achieve the desired arrangement. You are given an array of integers where each integer represents the height of a book on the shelf. You need to find the length of the longest non-decreasing subsequence within this array. The minimum number of books to be removed will be the difference between the total number of books and the length of this subsequence. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5), which is the number of books. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi is the height of the i-th book. Print a single integer — the minimum number of books that must be removed. Example: Input: 5 4 3 2 3 4 Output: 2 Explanation: The longest non-decreasing subsequence is [2, 3, 4]. By removing the books with heights 4 and 3 (at the beginning), you get the required sequence. Hence, the answer is 2.","solution":"def min_books_to_remove(n, heights): Returns the minimum number of books to remove to have the heights in a non-decreasing order. if n == 0: return 0 import bisect lis = [] for height in heights: pos = bisect.bisect_right(lis, height) if pos < len(lis): lis[pos] = height else: lis.append(height) length_of_lis = len(lis) return n - length_of_lis # Example usage if __name__ == \\"__main__\\": n = 5 heights = [4, 3, 2, 3, 4] print(min_books_to_remove(n, heights)) # Output: 2"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge connects two nodes and has an associated non-negative integer weight. The task is to find the shortest path from a starting node s to an ending node t. If there are multiple shortest paths, you can output any of them. The first line contains two integers n (1 le n le 1000) and m (0 le m le 10000) — the number of nodes and edges, respectively. Nodes are numbered from 1 to n. Each of the next m lines contains three integers u, v, w (1 le u, v le n and 0 le w le 10^9) — the endpoints of the edge and its weight. It\'s guaranteed that the graph does not contain self-loops or multiple edges. The last line contains two integers s and t (1 le s, t le n) — the starting and the ending nodes. Print \\"NO\\" (without quotes) if there is no path between s and t. Otherwise, print \\"YES\\" (without quotes) in the first line, and the length of the shortest path in the second line. Then print the sequence of nodes representing the shortest path from s to t in the third line. If there are multiple shortest paths, output any of them.","solution":"import heapq def dijkstra(n, edges, s, t): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[s] = 0 prev = {i: None for i in range(1, n + 1)} priority_queue = [(0, s)] while priority_queue: d, node = heapq.heappop(priority_queue) if d > dist[node]: continue for neighbor, weight in graph[node]: alt = dist[node] + weight if alt < dist[neighbor]: dist[neighbor] = alt prev[neighbor] = node heapq.heappush(priority_queue, (alt, neighbor)) if dist[t] == float(\'inf\'): return \\"NO\\" path = [] current = t while current: path.append(current) current = prev[current] path.reverse() return (\\"YES\\", dist[t], path) # Example usage n = 5 m = 6 edges = [ (1, 2, 2), (1, 3, 3), (2, 3, 2), (2, 4, 4), (3, 4, 1), (4, 5, 1) ] s = 1 t = 5 print(dijkstra(n, edges, s, t)) # Output: (\\"YES\\", 5, [1, 2, 3, 4, 5])"},{"question":"Given a matrix where each cell contains a single integer, perform a sequence of operations to create the highest possible \\"mountain peak\\" within the matrix. A \\"mountain peak\\" is defined as being a cell whose value is greater than the values of its four directly adjacent cells (left, right, top, bottom). You are allowed to increase the value of any cell by 1 in a single operation. However, you must count the number of operations required to achieve the highest possible mountain peak value within given constraints. # Input: - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 50) — the number of rows and columns in the matrix. - Each of the next `n` lines contains `m` integers, representing the initial values of the matrix cells. # Output: - Print one integer — the number of operations required to create the highest possible mountain peak value in the matrix. # Example: Input: ``` 3 3 1 2 1 2 1 2 1 2 1 ``` Output: ``` 2 ``` # Explanation: In the given example, to make the center cell a mountain peak, it must be greater than its directly adjacent cells (all of which are 2). We need to increase the value of the center cell from 1 to 3, which requires 2 operations. Thus, the output is 2. # Constraints: - The matrix dimensions (n and m) will allow for straightforward calculation within a reasonable time frame. - Initial values in the matrix are arbitrary integers but within a practical range that operations can be counted effectively.","solution":"def find_required_operations(matrix): n = len(matrix) m = len(matrix[0]) max_operations = 0 for i in range(1, n-1): for j in range(1, m-1): # Find the minimum value that would make matrix[i][j] a peak current_value = matrix[i][j] left_value = matrix[i][j-1] right_value = matrix[i][j+1] top_value = matrix[i-1][j] bottom_value = matrix[i+1][j] required_peak_value = max(left_value, right_value, top_value, bottom_value) + 1 operations_needed = required_peak_value - current_value max_operations = max(max_operations, operations_needed) return max_operations"},{"question":"You are given a string representing a chemical compound formula. The formula consists of one or more chemical elements, which may have a numerical subscript to denote the number of atoms of that element in the compound. The elements are represented by their standard one or two-letter symbols, and the numerical subscript immediately follows the element symbol if present. If no subscript is present, it is assumed to be 1. Write a function to parse the formula and return the total number of each element in the compound as a dictionary. # Input - A single string `formula`, which consists of only uppercase and lowercase Latin letters and digits. The length of the string does not exceed 1000 characters. - The formula will be a valid chemical compound. For example, \\"H2O\\", \\"C6H12O6\\", \\"Mg(OH)2\\". # Output - A dictionary where keys are the element symbols, and values are the total number of atoms of that element in the compound. # Examples Example 1 Input: ``` \\"H2O\\" ``` Output: ``` {\\"H\\": 2, \\"O\\": 1} ``` Example 2 Input: ``` \\"C6H12O6\\" ``` Output: ``` {\\"C\\": 6, \\"H\\": 12, \\"O\\": 6} ``` Example 3 Input: ``` \\"Mg(OH)2\\" ``` Output: ``` {\\"Mg\\": 1, \\"O\\": 2, \\"H\\": 2} ``` # Note 1. The parentheses in the formula denote a group of elements that is repeated a number of times indicated by the subscript following the closing parenthesis. For example, in \\"Mg(OH)2\\", the group \\"OH\\" appears twice. 2. The function must handle nested parentheses correctly. 3. The capitalization of the elements must be preserved in the result.","solution":"import re from collections import defaultdict def parse_formula(formula): def parse_segment(segment, multiplier): elements = defaultdict(int) i = 0 while i < len(segment): if segment[i].isupper(): # Find the full element symbol (could be one letter or two letters if the second is lowercase) j = i + 1 while j < len(segment) and segment[j].islower(): j += 1 element = segment[i:j] # Find the number of atoms, if any num_start = j while j < len(segment) and segment[j].isdigit(): j += 1 num_atoms = int(segment[num_start:j]) if num_start != j else 1 elements[element] += num_atoms * multiplier i = j elif segment[i] == \'(\': # Find the matching closing parenthesis start = i count = 1 i += 1 while i < len(segment): if segment[i] == \'(\': count += 1 elif segment[i] == \')\': count -= 1 if count == 0: break i += 1 end = i # Find the multiplier for the group i += 1 num_start = i while i < len(segment) and segment[i].isdigit(): i += 1 group_multiplier = int(segment[num_start:i]) if num_start != i else 1 # Parse the segment inside the parentheses inner_elements = parse_segment(segment[start + 1:end], group_multiplier * multiplier) for elem, quant in inner_elements.items(): elements[elem] += quant else: i += 1 return elements all_elements = parse_segment(formula, 1) return dict(all_elements)"},{"question":"Charles is a diligent factory worker tasked with managing the assembly line. The assembly line consists of multiple stations, and each station can process a maximum number of items per day. To keep the assembly line running efficiently, Charles needs to schedule processing tasks for the stations over a period of days. Given an array `capacity` where `capacity[i]` represents the maximum number of items station `i` can process per day, and an array `tasks` where `tasks[j]` is the number of items that need to be processed on day `j`, help Charles determine the optimal way to allocate tasks to stations. Each day, tasks can be split across multiple stations but the sum of all tasks allocated to the stations should not exceed their capacities. Charles needs to ensure that the assembly line can handle all tasks over the given period of days. Write a program to determine if it is possible to distribute all tasks to the stations without exceeding the station capacities on any day, and if possible, provide a schedule of how tasks are allocated. The first line contains two integer numbers `m` (`1 <= m <= 5000`) and `n` (`1 <= n <= 5000`) — the number of stations and the number of days respectively. The second line contains the integer sequence `capacity` of length `m` where `capacity[i]` is the maximum number of items station `i` can process per day (`1 <= capacity[i] <= 1000`). The third line contains the integer sequence `tasks` of length `n` where `tasks[j]` is the number of items that need to be processed on day `j` (`1 <= tasks[j] <= 5000`). If it is possible to distribute all tasks, print \\"YES\\" on the first line. For each day, print a sequence of `m` integers (one sequence per line), where the j-th integer indicates the number of tasks assigned to the j-th station on that day. If there\'s no valid schedule, print \\"NO\\". Example: Input 4 3 5 8 6 7 12 10 14 Output YES 5 5 0 2 5 2 3 0 2 6 4 2","solution":"def allocate_tasks(m, n, capacity, tasks): allocatable_schedule = [] for day in range(n): total_task = tasks[day] day_schedule = [0] * m for i in range(m): if total_task == 0: break allocate_here = min(capacity[i], total_task) day_schedule[i] = allocate_here total_task -= allocate_here if total_task > 0: return \\"NO\\" allocatable_schedule.append(day_schedule) result = \\"YESn\\" for schedule in allocatable_schedule: result += \\" \\".join(map(str, schedule)) + \\"n\\" return result.strip() # Read Input input_lines = [ \'4 3\', \'5 8 6 7\', \'12 10 14\' ] m, n = map(int, input_lines[0].split()) capacity = list(map(int, input_lines[1].split())) tasks = list(map(int, input_lines[2].split())) # Output Result print(allocate_tasks(m, n, capacity, tasks))"},{"question":"You are given a list of intervals where each interval represents a meeting time with a start and end time. Your task is to find the minimum number of meeting rooms required to accommodate all these meetings without any overlapping. You need to implement a function that takes as input a list of intervals where each interval is represented as a tuple (start_time, end_time). The function should return an integer representing the minimum number of meeting rooms required. # Function Signature ```python def minMeetingRooms(intervals: List[Tuple[int, int]]) -> int: ``` # Input - A list of tuples `intervals`, where each tuple `(start_time, end_time)` represents a meeting\'s start and end times. - The number of intervals `n` will be in the range `[1, 10^4]`. - The start and end times of the meetings will be in the range `[0, 10^9]`, and the start time of a meeting will always be less than its end time. # Output - An integer representing the minimum number of meeting rooms required. # Example ```python intervals = [(0, 30), (5, 10), (15, 20)] print(minMeetingRooms(intervals)) # Output: 2 intervals = [(7, 10), (2, 4)] print(minMeetingRooms(intervals)) # Output: 1 ``` # Constraints 1. You may assume that the intervals are not necessarily sorted. 2. You should optimize the function to handle the upper limit efficiently. 3. Utilization of a priority queue or heap data structure is encouraged to achieve the optimal solution. 4. The input is guaranteed to be non-empty.","solution":"import heapq from typing import List, Tuple def minMeetingRooms(intervals: List[Tuple[int, int]]) -> int: if not intervals: return 0 # Sort the meetings by their start time intervals.sort(key=lambda x: x[0]) # Create a min-heap to store end times of meetings heap = [] # Add the first meeting\'s end time heapq.heappush(heap, intervals[0][1]) for i in range(1, len(intervals)): start, end = intervals[i] # Pop the room from the heap if the current meeting starts after the earliest meeting ends if start >= heap[0]: heapq.heappop(heap) # Push the end time of the current meeting into the heap heapq.heappush(heap, end) # The size of the heap will be the number of meeting rooms required return len(heap)"},{"question":"You are given an array of integers and a set of operations to be performed on it. The operations can be of the following types: 1. Update an element in the array. 2. Compute the sum of elements within a given subarray. Each operation of type 1 consists of updating the value of an array element at a specified index. Each operation of type 2 requires you to compute the sum of all array elements within the specified range (inclusive). Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. - The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. - The next q lines contain the queries. Each query is in one of the following formats: - \\"1 i x\\" (1 ≤ i ≤ n, |x| ≤ 10^9): Update the element at index i (1-based) to x. - \\"2 l r\\" (1 ≤ l ≤ r ≤ n): Compute the sum of elements from index l to index r (1-based, inclusive). Output: For each query of type 2, print the resulting sum on a new line. Example: Input: ``` 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 1 4 7 ``` Output: ``` 6 14 26 ```","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr self.n = len(arr) self.prefix_sum = [0] * (self.n + 1) self._compute_prefix_sum() def _compute_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.arr[i - 1] def update(self, index, value): old_value = self.arr[index - 1] self.arr[index - 1] = value self._compute_prefix_sum() def query(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l - 1] def array_operations(n, q, arr, queries): operations = ArrayOperations(arr) result = [] for query in queries: if query[0] == 1: _, i, x = query operations.update(i, x) elif query[0] == 2: _, l, r = query result.append(operations.query(l, r)) return result"},{"question":"Emma is studying algorithms and came across the following exercise involving arrays and subarrays. Given an array of positive integers, Emma\'s task is to answer a series of queries about the sum of elements within specified subarrays. Additionally, some queries involve updating a specific element of the array. For each query of the first type, you will output the sum of elements in the subarray. For each query of the second type, you will update the value of an element in the array. The first line of input contains two integers (n) and (q) ( (1 leq n, q leq 100,000) ) representing the number of elements in the array and the number of queries, respectively. The next line contains (n) integers (a_1, a_2, ldots, a_n) ( (1 leq a_i leq 10^6) ), the initial values of the array. Each of the next (q) lines contains a query in one of the following formats: - \\"1 l r\\" ( (1 leq l leq r leq n) ) - Calculate and output the sum of elements from index (l) to (r) (inclusive). - \\"2 i x\\" ( (1 leq i leq n) , (1 leq x leq 10^6) ) - Update the value of element at index (i) to (x). For each query of the first type, output the result of the query on a new line. Example: Input: ``` 5 3 1 2 3 4 5 1 1 3 2 2 10 1 2 5 ``` Output: ``` 6 22 ``` Explanation: - For the first query \\"1 1 3\\", the sum of elements from index 1 to 3 is (1 + 2 + 3 = 6). - For the second query \\"2 2 10\\", the array is updated to `[1, 10, 3, 4, 5]`. - For the third query \\"1 2 5\\", the sum of elements from index 2 to 5 is (10 + 3 + 4 + 5 = 22).","solution":"def process_queries(n, q, array, queries): result = [] for query in queries: query_type = query[0] if query_type == 1: l, r = query[1], query[2] result.append(sum(array[l-1:r])) elif query_type == 2: i, x = query[1], query[2] array[i-1] = x return result"},{"question":"As an amateur chef, you are striving to improve your cooking skills by trying different recipes. Each recipe requires a certain sequence of ingredients to be added in a specific order. You have a supply of various ingredients, but you need to make sure you don\'t run out of any ingredients while preparing any recipe. You\'re given a list of recipes. Each recipe is represented by a list of integers, where each integer denotes the amount of a specific ingredient required. You\'re also given the initial stock of each ingredient. Your task is to determine the maximum number of recipes you can successfully prepare without running out of any ingredient at any point. # Input The first line contains two integers `n` and `k` (1 le n, k le 1000) — the number of recipes and the number of different ingredients. The second line contains `k` integers — the initial stock of each ingredient. The following `n` lines each contain `k` integers — the amount of each ingredient required by the corresponding recipe. # Output Output a single integer — the maximum number of recipes you can successfully prepare. # Example ``` Input 3 3 5 5 5 2 0 3 1 2 1 3 1 0 Output 2 Input 4 2 10 8 3 2 5 3 2 5 1 1 Output 3 ``` # Explanation In the first example, there are three recipes, and the ingredient stock is 5 for each ingredient. You can successfully prepare the first and second recipes, but running through all three would lead to a shortage of ingredients for one of the recipes. In the second example, with the given stock, you can prepare up to three recipes without running out of any ingredients.","solution":"def max_recipes(n, k, initial_stock, recipes): Determines the maximum number of recipes that can be successfully prepared without running out of any ingredient at any point. # Sort the recipes by the total amount of ingredients required, ascending recipes.sort(key=sum) count = 0 for recipe in recipes: if all(initial_stock[i] >= recipe[i] for i in range(k)): count += 1 for i in range(k): initial_stock[i] -= recipe[i] else: break return count"},{"question":"You are given a string consisting of lowercase English letters. Your task is to process a series of queries to find the length of the longest palindrome that can be formed by any subsequence of the string. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Each query consists of: 1. A substring defined by indices `l` and `r` (inclusive). For each query, output the length of the longest palindrome that can be formed using the characters from the specified substring. **Input:** - The first line contains a single integer `n` (1 leq n leq 100,000) — the length of the string. - The second line contains a string `s` of length `n` consisting of lowercase English letters. - The third line contains a single integer `q` (1 leq q leq 100,000) — the number of queries. - The following `q` lines each contain two integers `l` and `r` (1 leq l leq r leq n) — the indices of the substring for each query. **Output:** For each query, output a single integer — the length of the longest palindrome that can be formed from the characters in the specified substring. **Example:** ``` Input: 7 abacaba 3 1 7 2 5 3 3 Output: 7 3 1 ``` **Explanation:** - For the first query, the substring is \\"abacaba\\", the longest palindrome is the entire string itself. - For the second query, the substring is \\"baca\\", the longest palindrome that can be formed is \\"aba\\". - For the third query, the substring is \\"a\\", which is a palindrome of length 1.","solution":"def longest_palindrome_subsequence_length(s, queries): def longest_palindrome_length(sub): count = {} for char in sub: count[char] = count.get(char, 0) + 1 length = 0 odd_found = False for cnt in count.values(): length += (cnt // 2) * 2 if cnt % 2 == 1: odd_found = True return length + 1 if odd_found else length results = [] for l, r in queries: substring = s[l-1:r] results.append(longest_palindrome_length(substring)) return results"},{"question":"A factory has n workers each of whom can produce a variety of items. Each worker has a particular skill level, and each item has a complexity level. The factory needs to fulfill m different orders. Each order specifies the complexity of the item needed and the number of items required. Each worker can only work on items whose complexity is less than or equal to their skill level. The goal is to distribute the orders among the workers such that every order is fulfilled, if possible. Each worker can only handle one order at a time, and no partial completion of orders is allowed. If an order requires more items than a worker can handle in one go, the remaining items from that order must be assigned to the same worker subsequently. Write a program to determine if it is possible to fulfill all the orders under these conditions. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), the number of workers and the number of orders, respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 1000), representing the skill levels of the workers. Each of the next m lines contains two integers ci (1 ≤ ci ≤ 1000) and ki (1 ≤ ki ≤ 100), the complexity level and the quantity of items required for each order. Output \\"YES\\" if it is possible to fulfill all orders, otherwise print \\"NO\\".","solution":"def can_fulfill_orders(n, m, skill_levels, orders): Determine if it is possible to fulfill all the orders under the given conditions. # Sort the skill levels in descending order skill_levels.sort(reverse=True) # Sort the orders by complexity in ascending order orders.sort(key=lambda x: x[0]) for complexity, quantity in orders: fulfilled = False for i in range(n): if skill_levels[i] >= complexity: if quantity > 0: quantity -= 1 if quantity == 0: fulfilled = True break if not fulfilled: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers a, where the length of the array is n. Additionally, you are given an integer d. Your task is to perform at most d swaps on the array to make it as lexicographically small as possible. A swap takes two integers from the array and exchanges them. You need to find the smallest lexicographical array that can be obtained by performing at most d swaps. The first line contains two integers, n (1 le n le 200,000), the length of the array, and d (0 le d le 10,000), the maximum number of swaps allowed. The second line contains n integers, the elements of the array a (1 leq a[i] leq 10^9), the array which needs to be modified. Output the lexicographically smallest array that can be obtained by performing at most d swaps. # Example Input ``` 4 1 4 3 2 1 ``` Output ``` 1 3 2 4 ``` Explanation By making a single swap between 1 and 4, we achieve the array [1, 3, 2, 4], which is the lexicographically smallest array achievable by one swap.","solution":"def smallest_lexicographical_array(n, d, a): swaps = 0 for i in range(n): if swaps >= d: break min_index = i for j in range(i + 1, n): if a[j] < a[min_index]: min_index = j if min_index != i: a[i], a[min_index] = a[min_index], a[i] swaps += 1 return a"},{"question":"You are given an array of integers `A` with length ( n ). An array segment [l; r] (1 ≤ l ≤ r ≤ n) is called \\"balanced\\" if the sum of the elements in this segment is equal to 0. Your task is to find the length of the longest balanced segment in the array. The first line contains a single integer n (1 ≤ n ≤ 300,000) — the number of elements in the array. The second line contains n integers ( A_1, A_2, ..., A_n ) (-10^4 ≤ A_i ≤ 10^4) — the elements of the array. If no balanced segment exists, print -1. Output a single integer, the length of the longest balanced segment. Example: Input: 6 1 -1 2 -2 3 -3 Output: 6","solution":"def longest_balanced_segment(n, A): # Dictionary to store the first occurrence of each prefix sum prefix_sums = {0: -1} prefix_sum = 0 max_length = -1 for i in range(n): prefix_sum += A[i] if prefix_sum in prefix_sums: max_length = max(max_length, i - prefix_sums[prefix_sum]) else: prefix_sums[prefix_sum] = i return max_length"},{"question":"A magician performs a magic trick with an array of integers. He can make elements of the array disappear. To impress the audience, the magician wants both the product and sum of the remaining elements to be even. If one or both products cannot be even, the trick will be ruined. You need to help the magician by finding out whether such an arrangement exists and if so, the minimum number of elements that need to disappear to achieve it. If it is possible, print the minimum number of elements to disappear, otherwise print -1. The input consists of: - First line contains integer n (1 ≤ n ≤ 100), the number of elements in the array. - Second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100), the elements of the array. Output a single integer - the minimum number of elements that need to disappear to make both the product and sum of the remaining elements even, or -1 if it\'s not possible. Example: ``` Input: 5 2 3 5 4 6 Output: 1 ``` Explanation: - Removing element 5 will result in the remaining elements being [2, 3, 4, 6], with a sum of 15 (odd) and product 144 (even). - Removing element 3 will result in the remaining elements being [2, 5, 4, 6], with a sum of 17 (odd) and product 240 (even). - Removing element 4 will result in the remaining elements being [2, 3, 5, 6], with a sum of 16 (even) and product 180 (even). This is a valid solution, and only 1 element has been removed.","solution":"def min_elements_to_disappear(arr): n = len(arr) odd_count = sum(1 for x in arr if x % 2 != 0) if odd_count == n: # All elements are odd, can\'t have even sum or even product return -1 if odd_count == 0: # All elements are even, the sum will be even and so will the product return 0 # Count of even numbers is n - odd_count # Check the smallest odd number of odd_count to be removed # Since, sum of mixed odd + even, only one remaining odd to be removed to make even sum for i in range(n): if arr[i] % 2 != 0: # Find any odd number and remove it return 1 return -1 # Just an edge case, function should not reach this point"},{"question":"Ahmed has a rectangular grid of size n x m (n rows and m columns) filled with non-negative integers. He wants to find the largest possible sum of numbers when he selects a sub-grid (a contiguous subarray from the grid). The sub-grid must consist of at least one element. Help Ahmed calculate the maximum sum of any sub-grid within the grid. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines each contain m integers, where each integer denotes the value in that cell of the grid. The values in the grid will be between -10^9 and 10^9. Output a single integer — the maximum sum of any sub-grid within the grid. # Example Input ``` 3 3 1 2 -1 -3 4 2 1 -2 1 ``` Output ``` 7 ``` Explanation By selecting the sub-grid: ``` 4 2 1 -2 ``` The sum is 7, which is the largest possible sum of any sub-grid.","solution":"def maximum_subgrid_sum(grid): def kadane(arr): max_sum = curr_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"Alex is a big fan of the Fibonacci sequence and wants to create variations of it. One day, he decides to invent a new sequence called \\"Shifted Fibonacci\\". In this sequence, each term is the sum of the two previous terms shifted by a constant value k. The first two terms of this sequence are given as input. Formally, the sequence is defined as follows: - a1 and a2 are the first two terms. - For n > 2, an = an-1 + an-2 + k, where k is a constant integer. Given the first two terms of this sequence and the constant k, your task is to find the m-th term of this sequence. The first line of the input contains three integers a1, a2, and k (1 ≤ a1, a2 ≤ 100, -100 ≤ k ≤ 100). The second line contains a single integer m (1 ≤ m ≤ 1000) which indicates the term of the sequence to find. Print the m-th term of the \\"Shifted Fibonacci\\" sequence. 例: 输入: 2 3 1 5 输出: 15 解释: The sequence starts with 2, 3 and the constant shift is 1. The terms are calculated as follows: a3 = 3 + 2 + 1 = 6 a4 = 6 + 3 + 1 = 10 a5 = 10 + 6 + 1 = 17","solution":"def shifted_fibonacci(a1, a2, k, m): Given the first two terms a1, a2 of the shifted fibonacci sequence and constant k, this function returns the m-th term of the sequence. if m == 1: return a1 elif m == 2: return a2 terms = [a1, a2] for i in range(2, m): next_term = terms[-1] + terms[-2] + k terms.append(next_term) return terms[m - 1]"},{"question":"You are given a string `s` consisting of lowercase Latin letters. You can perform the following operation on the string any number of times: pick any character from the string and move it to the front (beginning) of the string. Your task is to determine the lexicographically smallest string that can be obtained. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000). For each test case, output the lexicographically smallest string that you can obtain. **Example:** Input: ``` 3 abc acb cba ``` Output: ``` abc acb acb ``` In the first case, the string is already the smallest possible string. In the second case, you can move \'b\' to the front, making the string \\"bac\\", but \\"acb\\" is still smaller. In the third case, you can move \'a\' to the front, making the string \\"acb\\", which is the smallest possible string.","solution":"def get_lexicographically_smallest_string(s: str) -> str: Returns the lexicographically smallest string that can be obtained by moving any character to the front any number of times. return \'\'.join(sorted(s)) def process_test_cases(t: int, test_cases: list) -> list: Processes multiple test cases and returns a list with the lexicographically smallest strings for each case. results = [] for s in test_cases: results.append(get_lexicographically_smallest_string(s)) return results"},{"question":"In an ancient kingdom, there is a unique castle that is built on a single straight road. The castle has several gates, and each gate has a pair of magical towers guarding it. Each pair of towers has a unique integer identifier associated with it and they are built at different points along the road. Each tower can cast a protection spell to protect the gates. The spell has a certain radius which indicates the distance it can cover in both directions on the road. Given the positions of the tower pairs and their identifiers, determine the minimum radius of the protection spell required for each tower so that each point on the road is protected by at least one tower\'s spell. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), the number of tower pairs. The next n lines contain three space-separated integers xi, di, and id (1 ≤ xi ≤ 10^9, 0 ≤ di ≤ 10^9, 1 ≤ id ≤ 10^5), where xi is the position of the i-th tower pair\'s midpoint on the road, di is the current radius of the protection spell of each tower in the pair, and id is the identifier of the i-th pair of towers. Output n lines each containing two integers id and r, where id is the identifier of the tower pair, and r is the minimum radius required for each tower of the pair so that each point on the road is protected by at least one tower\'s spell. The output should list the tower pairs sorted in the order of their given identifiers. Example: Input 4 10 3 1 20 0 2 30 1 3 40 2 4 Output 1 2 2 10 3 5 4 4 Explanation: * For the first pair of towers with id 1 located at position 10 with a current radius of 3, the minimum radius required so that each point on the road is covered considering other towers may need to be reduced to r = 2. * For the second pair of towers with id 2 located at position 20 with a current radius of 0, the minimum radius required to ensure no part of the region is uncovered is r = 10, considering distance to the next pair. * For the third pair of towers with id 3 located at position 30 with a current radius of 1, the minimum radius required is r = 5. * For the last pair of towers with id 4 located at position 40 with a current radius of 2, the minimum radius required is r = 4.","solution":"def find_min_radii(n, tower_data): Determines the minimum radius for each tower so that each point on the road is protected. tower_data_sorted = sorted(tower_data, key=lambda x: x[0]) # Sort by position minimum_radii = [] for i, (pos, radius, identifier) in enumerate(tower_data): if i == 0: next_pos = tower_data_sorted[i + 1][0] if i + 1 < n else pos # Position of the next tower min_radius = (next_pos - pos) // 2 elif i == n - 1: prev_pos = tower_data_sorted[i - 1][0] if i - 1 >= 0 else pos # Position of the previous tower min_radius = (pos - prev_pos) // 2 else: next_pos = tower_data_sorted[i + 1][0] prev_pos = tower_data_sorted[i - 1][0] min_radius = min((next_pos - pos) // 2, (pos - prev_pos) // 2) minimum_radii.append((identifier, min_radius)) # Sort according to identifier minimum_radii_sorted = sorted(minimum_radii, key=lambda x: x[0]) return minimum_radii_sorted"},{"question":"A group of friends decided to play a card game. In this game, every player is initially given n cards, where n is even. Each of the card has a certain integer value which can be positive or negative. The goal of the game is to find pairs of cards such that the sum of the values of the cards in each pair equals zero. Each card can only be used in one pair. Unfortunately, the friends forgot which cards they initially received. Instead, they only remember the overall set of cards that were dealt out to all players combined. You are given the total set of cards. Your task is to determine if it is possible to form pairs such that the sum of the values of the cards in each pair equals zero. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains an integer n (1 ≤ n ≤ 1000, n is even) — the number of cards that each player is initially given. The second line contains 2n integers, where each integer is the value of a card. Output \\"YES\\" if it is possible to form pairs where the sum of the values in each pair equals zero, otherwise print \\"NO\\". Example: Input: 4 1 2 -1 -2 3 -3 4 -4 Output: YES","solution":"def can_form_pairs(n, card_values): Determines if it is possible to form pairs of cards such that the sum of the values of the cards in each pair equals zero. Parameters: n (int): Number of cards each player initially has (that is, half of the total cards) card_values (list of int): List of 2n integers representing the card values Returns: str: \\"YES\\" if it is possible to form the required pairs, otherwise \\"NO\\" from collections import Counter card_counts = Counter(card_values) for card in card_counts: if card_counts[card] != card_counts[-card]: return \\"NO\\" return \\"YES\\""},{"question":"Selena owns a small library with a collection of both fiction and non-fiction books. She wants to organize her books on the shelf in such a way that no two fiction books sit next to each other. However, Selena found it challenging to figure out the right order to achieve this by herself and has asked for your help. Given the number of fiction books, the number of non-fiction books, and their respective titles, your task is to provide an arrangement of the titles that satisfies Selena’s requirement or to determine if it is not possible to achieve. The first line contains two integers f and n (0 ≤ f, n ≤ 1000), representing the number of fiction and non-fiction books, respectively. The next f lines each contain a string representing the titles of the fiction books. The following n lines each contain a string representing the titles of the non-fiction books. Print a single line with either the titles arranged as per Selena\'s requirement such that no two fiction books are adjacent or \\"IMPOSSIBLE\\" if no such arrangement exists. Example input: ``` 3 4 TheGreatGatsby MobyDick WarAndPeace A_Brief_History_of_Time Sapiens TheSelfishGene GunsGermsAndSteel ``` Example output: ``` A_Brief_History_of_Time TheGreatGatsby Sapiens MobyDick TheSelfishGene WarAndPeace GunsGermsAndSteel ```","solution":"def arrange_books(f, n, fiction_books, non_fiction_books): Arrange the books such that no two fiction books are next to each other or return \\"IMPOSSIBLE\\". Args: f (int): Number of fiction books. n (int): Number of non-fiction books. fiction_books (list): List of fiction book titles. non_fiction_books (list): List of non-fiction book titles. Returns: str: A single line with titles arranged as required or \\"IMPOSSIBLE\\". if f > n + 1: return \\"IMPOSSIBLE\\" arrangement = [] fiction_index, non_fiction_index = 0, 0 while fiction_index < f or non_fiction_index < n: if fiction_index < f: arrangement.append(fiction_books[fiction_index]) fiction_index += 1 if non_fiction_index < n: arrangement.append(non_fiction_books[non_fiction_index]) non_fiction_index += 1 # Check if arrangement has no two fiction books next to each other for i in range(1, len(arrangement)): if arrangement[i-1] in fiction_books and arrangement[i] in fiction_books: return \\"IMPOSSIBLE\\" return \\" \\".join(arrangement)"},{"question":"You are given a binary tree where each node contains a positive integer. Your task is to find the maximum sum of values from the root to any leaf in the tree. The tree is defined as follows: - Each node contains a positive integer value. - Each node has at most two children. - A leaf is a node with no children. You are to write a function that takes the root of the binary tree and returns the maximum sum of values from the root to any leaf in the tree. Function Signature: `def max_root_to_leaf_sum(root: Optional[TreeNode]) -> int:` - `root` is the root of the binary tree, of type `Optional[TreeNode]`. A `TreeNode` is defined as: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Example **Example 1:** ``` Input: 1 / 2 3 / 4 5 Output: 8 Explanation: The maximum sum from root to leaf is 1 -> 2 -> 5 = 8. ``` **Example 2:** ``` Input: 10 / 5 15 / 10 20 Output: 45 Explanation: The maximum sum from root to leaf is 10 -> 15 -> 20 = 45. ``` # Note - The number of nodes in the tree is between 1 and 10,000. - The value of each node is between 1 and 100,000.","solution":"from typing import Optional class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def max_root_to_leaf_sum(root: Optional[TreeNode]) -> int: Returns the maximum sum of values from the root to any leaf in the binary tree. if not root: return 0 def dfs(node): if not node: return 0 if not node.left and not node.right: return node.val if not node.left: return node.val + dfs(node.right) if not node.right: return node.val + dfs(node.left) return node.val + max(dfs(node.left), dfs(node.right)) return dfs(root)"},{"question":"You are given an array of integers where every element appears twice except for one. Find that single one. Write a function that finds the single non-duplicate number. Your solution should make use of a bit manipulation technique with a linear runtime complexity (i.e., O(n)) and constant space complexity. **Input:** - The input starts with an integer n (1 ≤ n ≤ 10^5), the length of the array. - The next n integers are the elements of the array a_1, a_2, ..., a_n (–10^9 ≤ a_i ≤ 10^9). **Output:** - Output the single element that appears only once. **Example:** Input: ``` 5 1 2 2 1 3 ``` Output: ``` 3 ``` In the example above, 3 is the only element that appears once, while the rest of the numbers appear twice.","solution":"def find_single_element(arr): Finds the single non-duplicate element in the array. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a string containing alphabetic characters and digits. Your task is to rearrange the string so that all alphabetic characters come before any digits while maintaining their original relative order. # Input - A single string s of length n (1 ≤ n ≤ 10^5) consisting of alphabetic characters (both uppercase and lowercase) and digits. # Output - A reordered string with all the alphabetic characters at the beginning followed by all the digits. # Example Input ``` a1b2c3 ``` Output ``` abc123 ``` Input ``` Z9Y8X7 ``` Output ``` ZYX987 ``` # Constraints 1. The string s contains both alphabetic characters (upper or lower case) and digits. 2. The input string length n is between 1 and 100,000. # Note Your solution should efficiently handle strings up to 100,000 characters long while maintaining the order of alphabet characters and digits respectively as they appear in the input.","solution":"def rearrange_string(s): Returns a reordered string with all the alphabetic characters at the beginning followed by all the digits while maintaining their original relative order. alphabetics = [] digits = [] for char in s: if char.isalpha(): alphabetics.append(char) else: digits.append(char) return \'\'.join(alphabetics + digits)"},{"question":"You are given two strings s and t, each of length n. You can swap any two characters in s any number of times. Determine if it is possible to convert string s into string t using these swaps. If it is possible, print \'YES\'. Otherwise, print \'NO\'. The first line of input contains an integer n (1 leq n leq 2 times 10^5), the length of the strings. The second line of input contains the string s of length n, consisting of lowercase English letters. The third line of input contains the string t of length n, consisting of lowercase English letters. Here are the sample inputs and outputs: # Sample Input 1 ``` 4 abcd dcba ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 5 abcde edcba ``` # Sample Output 2 ``` YES ``` # Sample Input 3 ``` 3 abc def ``` # Sample Output 3 ``` NO ``` # Explanation: - In the first example, you can swap positions of characters in s to match the string t (e.g., swap \'a\' with \'d\' and \'b\' with \'c\'). - In the second example, swapping characters in s also makes it match t (e.g., swap \'a\' with \'e\', and continue similarly). - In the third example, it is not possible to match s with t by any swaps.","solution":"def can_convert(s, t): Determine if string s can be converted to string t by swapping characters. s: str - the original string t: str - the target string Returns: \'YES\' if s can be converted to t, otherwise \'NO\' # If the sorted versions of both strings are equal, # it means we can rearrange s to become t. if sorted(s) == sorted(t): return \\"YES\\" else: return \\"NO\\""},{"question":"In a distant land, there\'s a unique currency system based solely on coins. These coins come in n different denominations. To stay financially sustainable, the government has introduced a peculiar rule: every transaction must include at least two different denominations of coins. Given the value of each denomination and the total amount you have, determine if it\'s possible to provide exact change for that amount following the government\'s rules. If it is possible, output \\"Possible\\". Otherwise, output \\"Impossible\\". The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of different denominations and the total amount you have, respectively. The second line contains n integers c_i (1 ≤ c_i ≤ 1000) — the value of each denomination. You may assume that you have an unlimited number of coins for each denomination and that you must use at least two different denominations to meet the government\'s rule. Output \\"Possible\\" if it is possible to provide exact change for the amount m following the rule, otherwise, output \\"Impossible\\".","solution":"def is_possible(n, m, denominations): Determines if it\'s possible to provide exact change for amount m using at least two different denominations. Parameters: n (int): Number of different denominations. m (int): Total amount. denominations (list of int): Values of each denomination. Returns: str: \\"Possible\\" if it\'s possible, otherwise \\"Impossible\\". def can_make_amount_with_two_denominations(m, denominations): # Check all pairs of denominations to see if their combination can make up the amount m for i in range(n): for j in range(i + 1, n): for k in range(m // denominations[i] + 1): if (m - k * denominations[i]) % denominations[j] == 0: return True return False if n < 2: return \\"Impossible\\" if can_make_amount_with_two_denominations(m, denominations): return \\"Possible\\" return \\"Impossible\\""},{"question":"In the kingdom of Graphland, there exists an uncharted and magical forest represented by a tree with `n` nodes. The tree is rooted at node `1`, and each of its edges has a unique weight. The wise Sage of Graphland can cast a spell to remove exactly one edge in the tree, creating two separate subtrees. After casting the spell, he wants the larger of the two resulting subtrees to be as small as possible. Help the Sage determine the smallest size of the larger subtree he can achieve by removing exactly one edge. # Input The first line of input contains a single integer `n` (2 ≤ n ≤ 200,000) — the number of nodes in the tree. The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, `u ≠ v`, 1 ≤ w ≤ 10^9), representing an edge between nodes `u` and `v` with weight `w`. # Output Print a single integer — the size of the larger subtree after removing the optimal edge. # Example Input ``` 5 1 2 3 1 3 4 1 4 5 4 5 6 ``` Output ``` 3 ``` # Explanation By removing the edge `1-4`, we split the tree into two subtrees with sizes 1 and 4. The larger subtree has size 4. We can achieve a smaller subtree by removing the edge `4-5`, resulting in two subtrees of sizes 3 and 2. Hence, the smallest size of the larger subtree is 3. # Note - Ensure that your solution efficiently handles large input sizes as specified by the constraints. - Utilize tree traversal techniques to compute subtree sizes in an optimal manner. The problem requires you to apply your understanding of tree data structures, depth-first search (DFS) traversal, and dynamic programming to determine the optimal edge to remove.","solution":"def largest_subtree_after_removal(n, edges): from collections import defaultdict graph = defaultdict(list) for u, v, w in edges: graph[u].append(v) graph[v].append(u) sizes = [0] * (n + 1) def dfs(node, parent): sizes[node] = 1 for neighbor in graph[node]: if neighbor != parent: sizes[node] += dfs(neighbor, node) return sizes[node] dfs(1, -1) min_larger_part = n total_size = sizes[1] def find_optimal(node, parent): nonlocal min_larger_part for neighbor in graph[node]: if neighbor != parent: subtree_size = sizes[neighbor] larger_part = max(subtree_size, total_size - subtree_size) min_larger_part = min(min_larger_part, larger_part) find_optimal(neighbor, node) find_optimal(1, -1) return min_larger_part"},{"question":"You are the leader of a team of adventurers who need to cross a series of bridges in a mystical forest. The forest has \'n\' bridges, and each bridge has a weight limit \'w_i\'. Each adventurer in your team has a weight \'a_i\'. An adventurer can only cross a bridge if their weight is less than or equal to the bridge\'s weight limit. To minimize the risk, you want to determine the minimum number of adventurers who need to be sent to cross all the bridges. The first line of the input consists of an integer \'n\' (1 ≤ n ≤ 1000) representing the number of bridges. The second line contains \'n\' integers \'w_i\' (1 ≤ w_i ≤ 1000) that indicate the weight limits of the bridges. The third line contains \'n\' integers \'a_i\' (1 ≤ a_i ≤ 1000) representing the weights of the adventurers. Output the minimum number of adventurers required to cross all the bridges. Assume each adventurer can only cross one bridge and after crossing they cannot help another adventurer. In the first example, with bridge weight limits [5, 9, 2] and adventurer weights [4, 8, 1], adventurers with weights 4, 8, and 1 can each cross one of the bridges respectively. Therefore, only 3 adventurers are required. In the second example, with bridge weight limits [10, 15] and adventurer weights [9, 14], the adventurers with weights 9 and 14 can each cross one of the bridges respectively. Therefore, only 2 adventurers are required.","solution":"def minimum_adventurers_to_cross(n, bridge_limits, adventurer_weights): Determines the minimum number of adventurers required to cross all the bridges. Parameters: - n (int): The number of bridges. - bridge_limits (list of int): The weight limits of the bridges. - adventurer_weights (list of int): The weights of the adventurers. Returns: - int: The minimum number of adventurers required to cross all the bridges. bridge_limits.sort() adventurer_weights.sort() adventurers_needed = 0 j = 0 # Pointer for adventurer weights for i in range(n): while j < n and adventurer_weights[j] > bridge_limits[i]: j += 1 if j == n: break adventurers_needed += 1 j += 1 return adventurers_needed"},{"question":"Given a number sequence consisting of distinct positive integers, find the length of the longest subsequence where all elements are contiguous in value. For instance, in the sequence [1, 3, 2, 8, 7, 6, 5], the subsequence [3, 2, 1] is contiguous since 1, 2, 3 are consecutive numbers. Write a program to achieve this. # Input - The first line contains an integer n (1 le n le 10^5), the number of elements in the sequence. - The second line contains n distinct positive integers separated by a space (1 le a_i le 10^9). # Output - Output a single integer, the length of the longest subsequence with contiguous values. # Example Input ``` 7 1 3 2 8 7 6 5 ``` Output ``` 4 ``` # Note In the example above, the longest contiguous subsequence by value is [8, 7, 6, 5], which has the length 4.","solution":"def longest_contiguous_subsequence_length(n, sequence): Returns the length of the longest contiguous subsequence where all elements are contiguous in value. Parameters: n (int): The number of elements in the sequence. sequence (list of int): The sequence of distinct positive integers. Returns: int: The length of the longest subsequence with contiguous values. if not sequence or n == 0: return 0 sequence_set = set(sequence) longest_length = 0 for num in sequence: if num - 1 not in sequence_set: # Start of a new subsequence current_num = num current_length = 1 while current_num + 1 in sequence_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Bob is practicing his ability to find patterns in sequences. He came across a special type of sequence defined as follows: A sequence of length n is called a zigzag sequence if the first half of the sequence is strictly increasing and the second half is strictly decreasing. Bob wants to generate the lexicographically smallest zigzag sequence of length n using all integers from 1 to n. For example, for n = 5, a zigzag sequence would be [1, 3, 5, 4, 2]. Write a program that takes a single integer n (1 ≤ n ≤ 1000) as input and outputs the lexicographically smallest zigzag sequence of length n. **Input:** A single integer n. **Output:** Print the lexicographically smallest zigzag sequence of length n in a single line, integers separated by spaces. Example: Input 5 Output 1 2 5 4 3","solution":"def zigzag_sequence(n): Generates the lexicographically smallest zigzag sequence of length n. :param n: Integer value representing the length of the zigzag sequence (1 <= n <= 1000) :return: List containing the lexicographically smallest zigzag sequence if n == 1: return [1] half = (n + 1) // 2 first_half = list(range(1, half + 1)) # strictly increasing part second_half = list(range(n, half, -1)) # strictly decreasing part return first_half + second_half"},{"question":"You are working on an autonomous drone project. The drone operates within a 2D grid with specific movement constraints and obstacle representations. The drone can move up, down, left, or right, but it can\'t move diagonally. The grid cells can be either free (denoted by \'.\') or have obstacles (denoted by \'#\'). The drone starts at the top-left corner of the grid (0, 0) and needs to reach the bottom-right corner of the grid (n-1, m-1). However, there could be multiple obstacles in the grid, making some direct paths inaccessible. Your task is to determine the minimum number of moves required for the drone to reach its destination. If it is impossible to reach the destination due to obstacles, return -1. The first line of input contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid respectively. Each of the next n lines contains a string of m characters (either \'.\' or \'#\') representing the grid. Output a single integer — the minimum number of moves required for the drone to reach the bottom-right corner, or -1 if there is no valid path. Example: Input: 5 5 ..... .#. .#.#. .#.#. ..... Output: 8 In this example, one possible path is to move right 4 times, then down 4 times, requiring a total of 8 moves. Another possible path could be changing directions a few times, but still requiring at least 8 moves in this scenario. The path should always begin at the top-left corner (0, 0) and end at the bottom-right corner (n-1, m-1).","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a distant land, there is a network of n villages, connected by n-1 bi-directional roads such that each pair of villages has a unique path connecting them. Each village is governed by a chief, and once a year, the chiefs of all the villages come together for a grand council meeting. The council meeting has a strict protocol: chiefs can only travel from one village to another if the road between those villages is an official council road. They can use other roads along the way to reach an official council road but must not cross two official council roads in a single journey. Each year, due to changes in village politics, the set of official council roads changes. Your task is to find the minimum number of official council roads needed so that each chief can travel to and from the council meeting at the main village (village 1) in one direct trip. The first line of input contains an integer n (2 ≤ n ≤ 200,000) — the number of villages. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) representing a road connecting villages u and v. Output the minimum number of official council roads required for the chief of each village to directly travel to and from the council meeting at village 1. Additionally, print the list of official council roads. If there are multiple valid answers, print any. Input: The first line contains an integer n (2 ≤ n ≤ 200,000) — the number of villages. Each of the next n-1 lines contain two integers u and v (1 ≤ u, v ≤ n), representing the roads connecting the villages. Output: The first line should contain a single integer m — the minimum number of official council roads required. Each of the next m lines should contain two integers u and v — representing the official council roads. Example: Input: 5 1 2 1 3 2 4 2 5 Output: 1 1 2 Explanation: With the only official council road being the one between villages 1 and 2, all chiefs can travel to and from the council meeting in village 1 directly or by passing through village 2.","solution":"def find_min_official_roads(n, roads): from collections import defaultdict # Build the adjacency list for the tree adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) official_council_roads = [] visited = [False] * (n + 1) def dfs(node): visited[node] = True for neighbor in adj[node]: if not visited[neighbor]: official_council_roads.append((node, neighbor)) dfs(neighbor) # Start DFS from the main village (village 1) dfs(1) # Return the minimum number of official council roads and the roads themselves return len(official_council_roads), official_council_roads # Usage: # n, edges = 5, [(1, 2), (1, 3), (2, 4), (2, 5)] # m, official_roads = find_min_official_roads(n, edges) # print(m) # for u, v in official_roads: # print(u, v) # Function to read input and call the above defined function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) roads = [] index = 1 for _ in range(n - 1): u = int(data[index]) v = int(data[index + 1]) roads.append((u, v)) index += 2 m, official_roads = find_min_official_roads(n, roads) print(m) for u, v in official_roads: print(u, v) # If running as script, uncomment the below line # if __name__ == \\"__main__\\": # main()"},{"question":"A museum consists of multiple rooms connected by corridors. A security guard is needed to watch over these rooms, and the goal is to minimize the number of guards needed while ensuring every room is under surveillance. Each room can only be supervised directly by a guard placed in that room. You are given a description of the museum layout as an undirected graph, where nodes represent rooms and edges represent corridors. Your task is to find the minimum number of guards required to cover all rooms. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of rooms. - The second line contains a single integer m (0 ≤ m ≤ 10000), the number of corridors. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a corridor between rooms u and v. Output: - Print a single integer, the minimum number of guards needed to ensure that every room is watched. Example: Input: 5 4 1 2 1 3 1 4 1 5 Output: 1 In this example, placing a single guard in room 1 will suffice, as it is connected to all other rooms directly by corridors.","solution":"def find_min_guards(n, m, corridors): Finds the minimum number of guards needed to ensure every room is watched. Parameters: n (int): Number of rooms. m (int): Number of corridors. corridors (list of tuple): List of corridors represented as tuples (u, v). Returns: int: Minimum number of guards needed. from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = current_component while queue: node = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = current_component queue.append(neighbor) # Build adjacency list of graph graph = defaultdict(list) for u, v in corridors: graph[u].append(v) graph[v].append(u) visited = [-1] * (n + 1) current_component = 0 # Find connected components for room in range(1, n + 1): if visited[room] == -1: bfs(room) current_component += 1 # The number of guards needed is equal to the number of connected components return current_component # Example usage: n = 5 m = 4 corridors = [(1, 2), (1, 3), (1, 4), (1, 5)] print(find_min_guards(n, m, corridors)) # Output: 1"},{"question":"The Code Eaters Software company recently started a project to analyze user data. They have a dataset consisting of n records, each record containing an integer denoting user activity level for a particular day. The company\'s goal is to identify the longest subsequence of records where any two consecutive activity levels have a common divisor greater than 1. A subsequence is derived from the original sequence by deleting some elements (possibly none). Your task is to implement a function that finds the length of the longest such subsequence. The first line of input contains a single integer n (1 ≤ n ≤ 100) – the number of records. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the activity levels of the records. Print a single integer – the length of the longest subsequence where any two consecutive activity levels have a common divisor greater than 1. # Example Input: 6 10 20 14 25 30 49 Output: 4 Explanation: One possible subsequence could be [10, 20, 25, 30]. Between each consecutive pair (10, 20), (20, 25), and (25, 30), there exists a common divisor greater than 1 (specifically, 10 and 20 share 10 as a common divisor, 20 and 25 share 5, and 25 and 30 share 5 as common divisors). The longest such subsequence length is 4 in this example.","solution":"def gcd(a, b): Helper function to compute the greatest common divisor of a and b. while b: a, b = b, a % b return a def longest_subsequence_with_common_divisor(n, activity_levels): Returns the length of the longest subsequence where any two consecutive activity levels have a common divisor greater than 1. if n == 1: return 1 dp = [1] * n # dp[i] will store the length of the longest valid subsequence ending with activity_levels[i] for i in range(1, n): for j in range(i): if gcd(activity_levels[i], activity_levels[j]) > 1: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Sakura has received a grid with dimensions n times m as a present. The grid has cells filled with non-negative integers. Sakura loves to select rectangular subgrids and calculate the sum of all the elements within that subgrid. To keep herself entertained, she wants to find the maximum sum of all possible subgrids within the given grid. Your task is to help Sakura find the maximum sum of any subgrid in the n times m grid. The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers representing the elements of the grid. Each integer is between 0 and 10^3. Output a single integer which is the maximum sum of any subgrid within the grid. **Example:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 45 ``` Explanation: The subgrid that results in the maximum sum is the entire grid itself, with a sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.","solution":"def maximum_sum_subgrid(n, m, grid): def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum # Example usage: n = 3 m = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(maximum_sum_subgrid(n, m, grid))"},{"question":"A large company has n employees organized in a hierarchical structure. Every employee, except the CEO, has exactly one direct manager and may manage several employees. The CEO does not have any manager. The company wants to identify the minimal number of communication paths needed to send a message from the CEO to all employees in such a way that any employee receives the message directly from their manager or another employee who already received the message. Your task is to determine the minimal number of paths required to spread the message to all employees. The first line contains a single integer n (1 ≤ n ≤ 100,000) – the number of employees in the company. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a direct reporting relationship where u is a direct manager of v. Output a single integer – the minimal number of communication paths required. Example: Input: 6 1 2 1 3 2 4 3 5 3 6 Output: 4 Explanation: The hierarchical structure can be visualized as follows: 1 ├─ 2 │ └─ 4 ├─ 3 │ ├─ 5 │ └─ 6 The minimal communication paths required are: - From CEO 1 to employee 2 - From CEO 1 to employee 3 - From employee 2 to employee 4 - From employee 3 to employee 5 and employee 6 at once","solution":"def minimal_communication_paths(n, relationships): if n == 1: return 0 # Create the adjacency list from collections import defaultdict managers = defaultdict(list) for u, v in relationships: managers[u].append(v) # The number of paths needed is equivalent to the number of edges return n - 1"},{"question":"Alice is organizing a themed festival, and she wants to design a large banner. The banner is a sequence of characters that can include any lowercase English letters (\'a\' to \'z\'). Given a pattern and the banner string, she wants to know how many times the pattern appears as a subsequence in the banner. You need to write a program to help Alice determine the number of times the given pattern appears as a subsequence in the banner. A subsequence is a sequence derived by deleting some or no elements from the original sequence without changing the order of the remaining elements. # Input - The input consists of two lines: - The first line contains the banner string, which is a non-empty string of at most 2 * 10^5 lowercase English letters. - The second line contains the pattern string, which is a non-empty string of at most 100 lowercase English letters. # Output - Output a single integer: the number of times the pattern appears as a subsequence in the banner. # Example Input ``` ababc abc ``` Output ``` 3 ``` Explanation - \\"abc\\" appears as a subsequence in \\"ababc\\" in three ways: 1. The first \'a\', the first \'b\', and the second \'c\'. 2. The first \'a\', the second \'b\', and the second \'c\'. 3. The second \'a\', the second \'b\', and the second \'c\'. # Constraints - 1 ≤ |banner| ≤ 2 * 10^5 - 1 ≤ |pattern| ≤ 100 Note: To solve this problem efficiently, dynamic programming can be used. Consider using a 2D array where dp[i][j] represents the number of times the first j characters of the pattern appear as a subsequence in the first i characters of the banner.","solution":"def count_subsequences(banner, pattern): Returns the number of times the pattern appears as a subsequence in the banner. m = len(banner) n = len(pattern) # Create a 2D dp array with (m+1) x (n+1) filled with zeros dp = [[0] * (n + 1) for _ in range(m + 1)] # Every string includes the empty subsequence for i in range(m + 1): dp[i][0] = 1 # Fill the dp array for i in range(1, m + 1): for j in range(1, n + 1): if banner[i - 1] == pattern[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[m][n]"},{"question":"You are given an array of integers representing the costs of different items in a shop. You have a certain budget and you want to buy a combination of these items such that the total cost is exactly equal to your budget. You can only buy each item once. Write a function that returns all the distinct combinations of items that sum up to the given budget. The first line contains two integers n (1 le n le 20) — the number of items, and B (1 le B le 1000) — your budget. The second line contains n integers c_i (1 le c_i le 100) — the costs of the items. Print all the distinct combinations of items that sum up to exactly B. Each combination should be printed on a new line and items\' costs should be sorted in non-descending order within each combination. Combinations themselves should be sorted in lexicographical order based on the string representation of the combinations. If there are no such combinations, print \\"No solution\\". In the first example, the items are [2, 3, 6, 7] and the budget is 7, the possible combinations are [7] and [2, 2, 3]. In the second example, since there are no combinations that sum up to 15, the output is \\"No solution\\".","solution":"from itertools import combinations def find_combinations(costs, budget): Finds all distinct combinations of items that sum up to the given budget. costs.sort() result = [] n = len(costs) def backtrack(start, current_combo, current_sum): if current_sum == budget: result.append(current_combo[:]) return if current_sum > budget: return for i in range(start, n): if i > start and costs[i] == costs[i-1]: continue current_combo.append(costs[i]) backtrack(i + 1, current_combo, current_sum + costs[i]) current_combo.pop() backtrack(0, [], 0) return result def get_combinations_string(n, budget, costs): combinations = find_combinations(costs, budget) if not combinations: return [\\"No solution\\"] sorted_combinations = sorted(combinations, key=lambda x: (len(x), x)) combination_strings = [\' \'.join(map(str, combo)) for combo in sorted_combinations] return combination_strings"},{"question":"You are given an array of integers. Your task is to divide the array into the maximum number of contiguous subarrays such that each element appears in at most one subarray. Each subarray should satisfy the condition that all of its elements are distinct. For example, if the array is [1,2,3,1,2], one possible way to divide it is [1,2,3] and [1,2]. Another valid way to divide it is [1,2], [3,1], and [2]. Write a function that takes an integer array as input and returns the maximum number of contiguous subarrays that satisfy the condition. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the length of the array. - The second line contains n integers separated by spaces, denoting the array elements. Each element of the array is an integer between 1 and 10^9 inclusive. # Output - Print a single integer — the maximum number of such contiguous subarrays. # Example Input ``` 5 1 2 3 1 2 ``` Output ``` 2 ``` In the above example, the array [1, 2, 3, 1, 2] can be divided into subarrays [1, 2, 3] and [1, 2], where each subarray contains distinct elements. # Note To solve this problem, consider the positions of repeated elements and determine where to split the array such that each subarray only contains unique elements. The goal is to maximize the number of such subarrays.","solution":"def max_contiguous_subarrays(nums): Returns the maximum number of contiguous subarrays such that each subarray contains distinct elements. seen = set() count = 0 for num in nums: if num in seen: count += 1 seen = set() seen.add(num) return count + 1 if seen else count # Example usage: # nums = [1, 2, 3, 1, 2] # print(max_contiguous_subarrays(nums)) # Output: 2"},{"question":"Given an unweighted graph with `n` nodes, you are required to perform the following operations: 1. Add an edge between node `a` and node `b`. 2. Delete the edge between node `a` and node `b`. 3. Check if there is a path between node `a` and node `b`. The graph is initially empty (no edges). You need to handle `q` operations on the graph. Each operation is provided in the form: - `1 a b` for adding an edge between nodes `a` and `b`. - `2 a b` for deleting the edge between nodes `a` and `b`. - `3 a b` for checking if there is a path between nodes `a` and `b`. The input format is as follows: - The first line contains two integers `n` and `q` (`1 ≤ n ≤ 10^5`, `1 ≤ q ≤ 2 × 10^5`) – the number of nodes and the number of operations, respectively. - The next `q` lines contain three integers each, representing the respective operations as described above. For each operation of type `3 a b`, print \\"YES\\" if there is a path between node `a` and node `b`, and \\"NO\\" if there isn\'t. Implement the solution efficiently to handle large inputs. Example: ``` Input: 5 7 1 1 2 1 2 3 3 1 3 2 2 3 3 1 3 1 4 5 3 1 5 Output: YES NO NO ```","solution":"class Graph: def __init__(self, n): self.n = n self.adjacency_list = {i: set() for i in range(1, n + 1)} def add_edge(self, a, b): self.adjacency_list[a].add(b) self.adjacency_list[b].add(a) def delete_edge(self, a, b): self.adjacency_list[a].discard(b) self.adjacency_list[b].discard(a) def has_path(self, a, b): visited = set() def dfs(x): if x == b: return True visited.add(x) for neighbor in self.adjacency_list[x]: if neighbor not in visited: if dfs(neighbor): return True return False return dfs(a) def process_operations(n, operations): graph = Graph(n) results = [] for operation in operations: op_type, a, b = operation if op_type == 1: graph.add_edge(a, b) elif op_type == 2: graph.delete_edge(a, b) elif op_type == 3: results.append(\\"YES\\" if graph.has_path(a, b) else \\"NO\\") return results"},{"question":"David is building a tower using blocks of different heights. He wants the tower to be as high as possible, but he also wants to ensure that the difference in height between any two adjacent blocks does not exceed a certain value, d. Given the heights of n blocks available, help David determine the maximum possible height of the tower. Note that each block can be used at most once and the height difference constraint must be maintained between any two blocks. The first line of input contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 10^9) — the number of blocks and the maximum allowed height difference between any two adjacent blocks. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the blocks. Output a single integer — the maximum possible height of the tower David can build. Example: Input: 5 3 1 2 3 4 5 Output: 15 Explanation: David can use all the blocks since the difference between any two consecutive numbers is within the range of 3. Thus, the maximum possible height of the tower is 1 + 2 + 3 + 4 + 5 = 15. Input: 5 1 7 10 3 4 5 Output: 12 Explanation: David can use blocks of heights 3, 4, and 5, since the difference between any two consecutive blocks does not exceed 1. Thus, the maximum possible height of the tower is 3 + 4 + 5 = 12. Note: In the second example, using blocks 7 and 10 is not an option because the difference in height is greater than 1.","solution":"def max_tower_height(n, d, heights): Determine the maximum possible height of the tower David can build such that the difference between heights of any two adjacent blocks does not exceed d. Parameters: n (int): Number of blocks d (int): Maximum allowed height difference between adjacent blocks heights (list): List of integers representing the height of each block Returns: int: The maximum possible height of the tower heights.sort() max_height = 0 current_height = heights[0] for i in range(n): if i == 0 or heights[i] - heights[i-1] <= d: max_height += heights[i] else: break return max_height"},{"question":"Given an array of integers, you are to group the integers into pairs such that the absolute difference between the elements of each pair is minimized. If the array contains an odd number of integers, one integer will be left unpaired. Write a function that receives an array of integers and returns a list of pairs, with each pair being an array of two elements. If there is an odd integer out, it should be included as a single-element array at the end of the list. # Input A single list of integers of length `n` (1 leq n leq 1000), where each integer is in the range -10^9 leq A_i leq 10^9. # Output A list of lists, where each sublist contains exactly two elements except possibly one sublist which contains a single element if the input list has an odd length. Each pair of integers should have their absolute differences minimized. # Example Input: `[3, 8, 15, 17, 9, 1]` Output: `[[1, 3], [8, 9], [15, 17]]` Input: `[10, 2, 14, -1, 4, 7]` Output: `[[-1, 2], [4, 7], [10, 14]]` Input: `[5, 1, 6, 2, 8]` Output: `[[1, 2], [5, 6], [8]]`","solution":"def group_into_minimized_pairs(arr): Groups integers into pairs such that the absolute difference between elements of each pair is minimized. If the array has an odd number of integers, the last single integer is left unpaired. Parameters: arr (list): A list of integers. Returns: list: A list containing pairs of integers as sublists, with the last unpaired integer as a single-element list if applicable. if not arr: return [] arr.sort() result = [] i = 0 n = len(arr) while i < n - 1: result.append([arr[i], arr[i + 1]]) i += 2 if n % 2 != 0: result.append([arr[-1]]) return result"},{"question":"Mr. Hunter is out on a hunt in the forest, and he comes across a peculiar game. There are a series of nests, and each nest contains a certain number of eggs. The eggs in each nest have different values assigned to them, representing the quality of the eggs. Mr. Hunter can collect eggs from these nests, but there is a catch: he cannot collect eggs from two consecutive nests. Help Mr. Hunter maximize the total value of eggs he can collect. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of nests in the forest. The second line contains n space-separated non-negative integers ai (0 ≤ ai ≤ 10^6) — the value of the eggs in each nest. Output a single integer — the maximum value of eggs Mr. Hunter can collect without picking from two consecutive nests. Example: ``` Input: 4 1 2 9 4 Output: 10 ``` Explanation: Mr. Hunter can collect eggs from nests with values 1 and 9, or 2 and 4. The maximum value he can collect is 10 (1 + 9).","solution":"def max_eggs_value(n, egg_values): if n == 1: return egg_values[0] dp = [0] * n dp[0] = egg_values[0] dp[1] = max(egg_values[0], egg_values[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + egg_values[i]) return dp[n-1]"},{"question":"Given a set of n different integers and a target sum T, determine the number of unique pairs of integers in the set that sum up to T. The first line contains two integers n and T (1 ≤ n ≤ 100000, -10^9 ≤ T ≤ 10^9). The second line contains n integers separated by spaces representing the set of integers. Each integer in the set is guaranteed to be unique and lies in the range -10^9 to 10^9. Output the number of unique pairs of integers from the set that sum up to the target T. Example: Input: 5 10 1 9 5 7 3 Output: 2 Explanation: The unique pairs of integers that sum up to 10 are (1, 9) and (3, 7). So, the output is 2.","solution":"def count_pairs_with_sum(n, T, integers): Determines the number of unique pairs of integers from the set that sum up to the target T. Parameters: n (int): The number of integers. T (int): The target sum. integers (list of int): The list of integers. Returns: int: The number of unique pairs that sum up to T. seen = set() unique_pairs = set() for num in integers: complement = T - num if complement in seen: unique_pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(unique_pairs)"},{"question":"Implement a function that takes a list of integers and a target sum, and returns all unique quadruplets [a, b, c, d] such that a + b + c + d = target. The function should avoid returning duplicate quadruplets. Your function should have the following signature: ```python def four_sum(nums: List[int], target: int) -> List[List[int]]: ``` **Example:** ```python nums = [1, 0, -1, 0, -2, 2] target = 0 ``` **Output:** ```python [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] ``` **Constraints:** - The solution set must not contain duplicate quadruplets. - You may return the quadruplets in any order. - The length of the input list `nums` will be between 1 and 200. - Each element of `nums` will be an integer between -10^9 and 10^9. - The target will be an integer between -10^9 and 10^9.","solution":"from typing import List def four_sum(nums: List[int], target: int) -> List[List[int]]: nums.sort() res = [] length = len(nums) for i in range(length - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, length - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, length - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: res.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return res"},{"question":"You are given a sequence of lowercase alphabetic characters and an integer k. Your task is to rearrange the characters of the sequence such that the resulting string contains no two identical characters next to each other. If there are multiple solutions, any one of them is acceptable. However, if it is not possible to perform such a rearrangement, output \\"NO\\". **Input** - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - Each of the following t lines contains a string s (1 leq |s| leq 1000) and an integer k (1 leq k leq 26) representing the given sequence of characters and the maximum number of distinct characters allowed. **Output** For each test case, print \\"NO\\" if it\'s not possible to rearrange the string such that no two identical characters are adjacent. Otherwise, print any valid rearranged string that meets the criterion. **Example** ``` Input: 3 aabbcc 2 aaab 2 aabbcc 3 Output: abcabc NO abcabc ``` **Explanation** 1. For the first test case, \\"aabbcc\\" can be rearranged as \\"abcabc\\" to satisfy the conditions. 2. For the second test case, \\"aaab\\" cannot be rearranged without two \'a\'s being adjacent, so the output is \\"NO\\". 3. For the third test case, \\"aabbcc\\" can be rearranged as \\"abcabc\\" to satisfy the conditions, and since we allow up to 3 distinct characters, this is valid. **Constraints** - In each test case, s contains only lowercase English letters. Your goal is to design an algorithm that checks whether a valid rearranged string can be constructed. If it’s possible, the algorithm should produce one such valid rearranged string.","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): Rearrange the string \'s\' such that no two identical characters are adjacent. If possible, return the rearranged string, otherwise return \\"NO\\". if k == 1: return s letter_counts = Counter(s) max_heap = [(-count, letter) for letter, count in letter_counts.items()] heapq.heapify(max_heap) result = [] wait_queue = deque() while max_heap: count, letter = heapq.heappop(max_heap) result.append(letter) wait_queue.append((letter, count + 1)) if len(wait_queue) < k: continue front_letter, front_count = wait_queue.popleft() if front_count < 0: heapq.heappush(max_heap, (front_count, front_letter)) return \'\'.join(result) if len(result) == len(s) else \\"NO\\" def process_test_cases(t, test_cases): results = [] for s, k in test_cases: result = rearrange_string(s, k) results.append(result) return results # Sample usage: # Reading input (this part should be handled externally while using the function) input = [ (3, [ (\\"aabbcc\\", 2), (\\"aaab\\", 2), (\\"aabbcc\\", 3) ]) ] t, test_cases = input[0] print(process_test_cases(t, test_cases))"},{"question":"You are given a string s consisting of lowercase English letters. In one move, you can choose any single letter from the string and remove it. Your goal is to transform the string into a palindrome with the minimum number of such moves. A string is called a palindrome if it reads the same from left to right and from right to left. The first line of the input contains an integer t (1 le t le 10) — the number of test cases. Each of the following t lines contains a string s (1 le lvert s rvert le 100) which consists of lowercase English letters. For each test case, print one integer — the minimum number of moves needed to transform the string into a palindrome. Example Input: ``` 2 abac aabb ``` Example Output: ``` 1 2 ```","solution":"def min_moves_to_palindrome(s): n = len(s) # Create a DP table to store the length of the longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Fill the dp table for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # The length of the longest palindromic subsequence lps = dp[0][n - 1] # The minimum number of deletions to make the string a palindrome return n - lps def solve(test_cases): results = [] for s in test_cases: results.append(min_moves_to_palindrome(s)) return results"},{"question":"Your company plans to organize a coding competition with several rounds. Each round will involve different categories, and each category has its own set of problems. The company wants to ensure that everyone gets a fair shot at participating in all the categories they are interested in. You are given: - n participants in the competition. - m categories in the competition. - A list of t pairs where each pair (pi, ci) indicates that participant pi is interested in category ci (1 ≤ pi ≤ n and 1 ≤ ci ≤ m). A match-up in a round is considered valid if no two participants involved are interested in the same category more than once in that round. The task is to determine the maximum number of valid match-ups (where each match-up is a pair (pa, pb) of participants) that can be formed in a single round, respecting the interests mentioned. The first line contains two space-separated integers n and m (2 ≤ n ≤ 100000, 1 ≤ m ≤ 100000), denoting the number of participants and the number of categories respectively. The second line contains an integer t (1 ≤ t ≤ 200000), the number of interest pairs. The following t lines each describe a pair (pi, ci) indicating that participant pi is interested in category ci. Output a single integer representing the maximum number of valid match-ups that can be formed in a single round. # Example Input ``` 5 3 6 1 1 2 1 3 2 4 2 5 3 1 3 ``` # Example Output ``` 2 ``` # Explanation Participants 1 and 2 are both interested in category 1, participants 3 and 4 are both interested in category 2, and participant 5 is interested in category 3. The maximum number of valid match-ups in a single round satisfying the given conditions is 2. These match-ups can be (1, 3) and (2, 4), with each pair being interested in different categories.","solution":"from collections import defaultdict def maximum_valid_matchups(n, m, t, interests): Returns the maximum number of valid match-ups in a single round. Args: n: int, number of participants m: int, number of categories t: int, number of interest pairs interests: list of tuple[pi, ci], each tuple represents the participant pi\'s interest in category ci Returns: int, maximum number of valid match-ups category_count = defaultdict(int) participant_interests = defaultdict(list) for pi, ci in interests: participant_interests[pi].append(ci) for cat in category_count: category_count[cat] = len(participant_interests[pi]) overlap_graph = defaultdict(set) for i in range(1, n + 1): for j in range(i + 1, n + 1): shared_cat = set(participant_interests[i]) & set(participant_interests[j]) if not shared_cat: overlap_graph[i].add(j) overlap_graph[j].add(i) max_matchups = 0 visited = set() for node in overlap_graph: if node not in visited: current_size = 1 stack = [node] visited.add(node) while stack: participant = stack.pop() for neighbor in overlap_graph[participant]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) current_size += 1 max_matchups += current_size // 2 return max_matchups"},{"question":"A group of friends is working on a collaborative project and they need to schedule meetings. Due to their busy schedules, they can only meet during specific time slots. Each friend has provided their available time slots for the coming week as a list of intervals. Your task is to determine the maximum number of friends that can be scheduled for a meeting at the same time. The input begins with an integer n (1 leq n leq 1000) representing the number of friends. Each friend then provides their schedule in the form of a list of intervals. Each interval is given by its start and end times in the format (start, end) such that 0 <= start < end <= 1000. You need to return an integer, the maximum number of friends that can have a meeting at the same time. # Input: - The first line contains an integer n — the number of friends. - The next n lines contain schedules for each friend. Each schedule consists of an integer representing the number of intervals followed by pairs of integers representing the start and end times of those intervals. # Output: - Print a single integer, the maximum number of friends that can have a meeting at the same time. # Example: Input: ``` 3 2 1 5 10 14 3 2 6 8 12 13 15 1 6 9 ``` Output: ``` 2 ``` In the example, the maximum number of friends that can simultaneously attend a meeting is 2, as friends 1 and 2 have overlapping time slots between 2 and 5.","solution":"def max_friends_meeting(n, schedules): # Initialize an array to count overlapping intervals timeline = [0] * 1001 for schedule in schedules: num_intervals = schedule[0] intervals = schedule[1:] for i in range(num_intervals): start, end = intervals[2*i], intervals[2*i+1] timeline[start] += 1 timeline[end] -= 1 # To find maximum overlap, accumulate the timeline values max_friends = 0 current_friends = 0 for i in range(1001): current_friends += timeline[i] if current_friends > max_friends: max_friends = current_friends return max_friends"},{"question":"Given an array of integers A of size n (1 le n le 10^5) and a target integer x, your task is to determine whether there exist two distinct indices i and j (1 le i, j le n) such that A[i] + A[j] = x. Implement a function with the following signature: ```python def find_pair(A: List[int], x: int) -> bool: pass ``` The function should return `True` if such indices exist, and `False` otherwise. # Input - `A`: a list of integers representing the array `A`. - `x`: an integer representing the target sum `x`. # Output - `True` if there exist two distinct indices i and j such that `A[i] + A[j] = x`, and `False` otherwise. # Example ```python # Example 1: A = [1, 2, 3, 4, 5] x = 9 print(find_pair(A, x)) # Output: True (because A[3] + A[4] = 4 + 5 = 9) # Example 2: A = [1, 2, 3, 4, 5] x = 10 print(find_pair(A, x)) # Output: False (because there are no such pairs) ```","solution":"def find_pair(A, x): Returns True if there exist two distinct indices i and j such that A[i] + A[j] = x, False otherwise. Args: A: List[int] - List of integers x: int - Target sum Returns: bool - True if such indices exist, False otherwise seen = set() for number in A: if x - number in seen: return True seen.add(number) return False"},{"question":"Given an array of integers A of length N, your task is to find the smallest subarray in A whose sum is at least a given integer S. If such a subarray doesn\'t exist, return 0. Input The first line contains two space-separated integers N and S (1 ≤ N ≤ 10^5, 1 ≤ S ≤ 10^9) — the length of the array and the required sum. The next line contains N space-separated integers A[i] (1 ≤ A[i] ≤ 10^4), representing the elements of the array. Output Print a single integer representing the length of the smallest subarray with a sum of at least S. If there’s no such subarray, print 0. Example Input: 10 15 1 2 3 4 5 6 7 8 9 10 Output: 2 Explanation: The smallest subarray with a sum of at least 15 is [7, 8] or [8, 7], which has a length of 2.","solution":"def smallest_subarray_with_sum_at_least_s(N, S, A): Returns the length of the smallest subarray with a sum of at least S. If no such subarray exists, returns 0. :param N: int: Length of the array. :param S: int: Required subarray sum. :param A: list: List of integers representing the array. :return: int: Length of the smallest subarray with a sum of at least S or 0 if no such subarray exists. min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(N): current_sum += A[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= A[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Alex has a special padlock with n rotating discs, each with digits from 0 to 9. Alex can rotate any disc forward or backward any number of times and wants to open the padlock using a secret sequence of digits. For a given initial sequence of digits on the padlock and a given secret sequence of digits, determine the minimum total rotations required to match the initial sequence to the secret sequence. Rotating a disc from 9 to 0 or from 0 to 9 counts as one rotation. The first line contains an integer n (1 leq n leq 100000). The second line contains a sequence of n digits representing the initial sequence on the padlock. The third line contains a sequence of n digits representing the secret sequence. Output one integer — the minimum total rotations required to open the padlock. **Example:** Input: ``` 4 1234 4321 ``` Output: ``` 8 ``` In this example, you can rotate each disc individually: 1 -> 4 (3 rotations forward), 2 -> 3 (1 rotation forward), 3 -> 2 (1 rotation backward), 4 -> 1 (3 rotations backward). Total rotations are: 3 + 1 + 1 + 3 = 8.","solution":"def min_rotations_to_open_padlock(n, initial_sequence, secret_sequence): total_rotations = 0 for i in range(n): initial_digit = int(initial_sequence[i]) secret_digit = int(secret_sequence[i]) # Compute direct rotation difference forward_rotation = abs(secret_digit - initial_digit) backward_rotation = 10 - forward_rotation total_rotations += min(forward_rotation, backward_rotation) return total_rotations"},{"question":"Given an array of integers and a desired target sum, find the number of distinct pairs of elements in the array that add up to the target sum. A pair (a, b) is considered the same as (b, a) and should only be counted once. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers — the elements of the array (each element 1 ≤ ai ≤ 10^9). The third line contains a single integer t — the target sum (1 ≤ t ≤ 2·10^9). Print a single integer — the number of distinct pairs whose sum is equal to the target sum. Example 1: Input: 5 1 5 3 3 2 6 Output: 2 Example 2: Input: 4 2 2 2 3 4 Output: 1","solution":"def count_pairs_with_sum(arr, target): Returns the number of distinct pairs in the array that add up to the target sum. seen = set() pairs = set() for number in arr: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return len(pairs)"},{"question":"You are given a tree with `n` vertices and `n-1` edges. The weight of each edge is either 1 or 2. The distance between two vertices in the tree is defined as the sum of the weights of the edges on the unique path between the two vertices. Your task is to find the number of pairs of vertices (u, v), such that the distance between u and v is exactly 3. The first line contains one integer n (2 ≤ n ≤ 10^5) – the number of vertices in the tree. Each of the next n-1 lines contains three integers u, v, and w (1 ≤ u, v ≤ n, and u ≠ v, w ∈ {1, 2}) – an edge between vertices u and v with weight w. Print one integer - the number of pairs (u, v) such that the distance between u and v is exactly 3. Example: Input: 6 1 2 1 1 3 2 2 4 2 2 5 1 3 6 1 Output: 4 Explanation: The pairs (u, v) such that the distance between them is exactly 3 are (1, 5), (1, 6), (4, 5), and (2, 6).","solution":"def count_pairs_with_distance_three(n, edges): from collections import defaultdict, deque # Create adjacency list adj = defaultdict(list) for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) def bfs(start): dist = [-1] * (n + 1) queue = deque([(start, 0)]) dist[start] = 0 while queue: node, d = queue.popleft() for neighbor, weight in adj[node]: if dist[neighbor] == -1: dist[neighbor] = d + weight queue.append((neighbor, dist[neighbor])) return dist count = 0 # Use BFS from each node to count pairs with distance exactly 3 for i in range(1, n + 1): distances = bfs(i) count += distances.count(3) # Each pair (u, v) will be counted twice so we divide by 2 return count // 2"},{"question":"Alex loves to explore new programming contests and participate in different competitive coding challenges. Recently, he stumbled upon an interesting problem related to DNA sequences and he found it intriguing. A DNA sequence is a string composed of the characters \'A\', \'T\', \'C\', and \'G\'. Alex\'s task is to find the longest possible contiguous subsequence within the DNA string such that it contains equal numbers of \'A\'s and \'T\'s, and equal numbers of \'C\'s and \'G\'s. The given task looks simple but involves a bit of complexity when the string length increases. Alex needs your help to write a program that finds the length of the longest such subsequence. **Input Format:** - The first line contains a non-empty string s, whose length does not exceed 10^5. The string consists of characters \'A\', \'T\', \'C\', \'G\'. **Output Format:** - Output a single integer, which is the length of the longest valid subsequence containing equal numbers of \'A\'s and \'T\'s, and equal numbers of \'C\'s and \'G\'s. **Example:** Input: ``` ATCGTACG ``` Output: ``` 8 ``` Explanation: The entire string \\"ATCGTACG\\" contains equal numbers of \'A\'s and \'T\'s, and \'C\'s and \'G\'s. Hence, the length of the longest such subsequence is 8. **Example 2:** Input: ``` ATCGACTG ``` Output: ``` 8 ``` Explanation: The entire string \\"ATCGACTG\\" contains equal numbers of \'A\'s and \'T\'s, and \'C\'s and \'G\'s. Hence, the length of the longest such subsequence is 8.","solution":"def longest_balanced_subsequence(s): Returns the length of the longest contiguous subsequence in the DNA string such that it contains equal numbers of \'A\'s and \'T\'s, and equal numbers of \'C\'s and \'G\'s. n = len(s) # Convert characters to the difference in counts diff_map = {\'A\': 1, \'T\': -1, \'C\': 2, \'G\': -2} prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + diff_map[s[i - 1]] seen = {} max_length = 0 for i in range(n + 1): if prefix_sum[i] in seen: max_length = max(max_length, i - seen[prefix_sum[i]]) else: seen[prefix_sum[i]] = i return max_length"},{"question":"You have been given an array of integers. You define an operation as follows: you pick two indices i and j such that i ne j, and both values at these indices are positive. You then decrease the value at index i by 1 and decrease the value at index j by 1. Your task is to determine the maximum number of such operations you can perform on the given array. The first line of input contains an integer t (1 le t le 100) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 100) - the length of the array. - The second line contains n space-separated integers representing the elements of the array. Each element is a non-negative integer and is at most 10^4. For each test case, print the maximum number of operations that can be performed. **Example:** Input: ``` 3 3 1 2 3 4 0 0 1 1 2 10000 10000 ``` Output: ``` 3 1 10000 ``` **Explanation:** - For the first test case, you can perform the operations as follows: pick indices (1, 2), (2, 3), (1, 3). The array becomes [0, 1, 1] after all operations. - For the second test case, you can only perform one operation: pick indices (3, 4). The array becomes [0, 0, 0, 0] after the operation. - For the third test case, you can perform 10000 operations, each time picking the two indices (1, 2). The array will end in [0, 0].","solution":"def max_operations(arr): Returns the maximum number of operations that can be performed on the array where the operation is defined as decreasing any two positive elements by 1. s = sum(arr) # Sum of all elements in the array return s // 2 # Each operation decreases the sum by 2, so max operations is sum // 2 def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = max_operations(arr) results.append(result) return results"},{"question":"Alice is an enthusiastic bird watcher. She loves to keep track of different species of birds she sees during her trips. Alice has recorded n observations, each observation describes a species and the number of birds of that species she has seen during her trip. Each species is represented by a unique positive integer id. However, Alice sometimes makes mistakes while recording her observations. She can make two types of errors: - She might record a new observation for an already recorded species (resulting in multiple records for the same species). - She might record a negative number of birds for a new observation of an already recorded species. Alice wants to correct the errors and obtain a list of observations where each species appears exactly once, and the number of birds seen for that species is non-negative. If a species has a total count of birds less than or equal to zero after summing all its observations, that species should be removed from the list. Help Alice to process her observations. The input consists of: - The first line contains an integer n (1 ≤ n ≤ 5·10^5) — the number of observations Alice has recorded. - Each of the next n lines contains two integers id (1 ≤ id ≤ 10^9) and count (−10^9 ≤ count ≤ 10^9) representing an observation of species id and the number of birds seen. The output should list all species that have been seen at least once after correcting the errors. The list should be sorted by species id. If there are no species left after corrections, output \\"NO SPECIES LEFT\\". For example: Input: ``` 5 3 10 1 -5 3 -5 2 3 1 10 ``` Output: ``` 1 5 2 3 3 5 ``` In the given example, after summing the observations: - For species 3: 10 + (-5) = 5 - For species 1: -5 + 10 = 5 - For species 2: 3 (unchanged) The corrected observations are: - 1: 5 birds - 2: 3 birds - 3: 5 birds","solution":"def correct_observations(n, observations): Corrects the observations by summing the counts for each species and removing species with non-positive sums. Args: n (int): The number of observations. observations (list of tuples): Each tuple contains (id, count). Returns: list of tuples: Each tuple contains (id, count) with positive count sorted by id. species_counts = {} for obs_id, count in observations: if obs_id in species_counts: species_counts[obs_id] += count else: species_counts[obs_id] = count corrected_list = [(species_id, count) for species_id, count in species_counts.items() if count > 0] if not corrected_list: return \\"NO SPECIES LEFT\\" return sorted(corrected_list, key=lambda x: x[0])"},{"question":"Daria has a bookshelf with n compartments, and each compartment contains a certain number of books. She likes keeping her bookshelf organized, so she wants to ensure that the number of books in each compartment doesn\'t exceed a certain threshold k. To achieve this, Daria can perform a sequence of operations. In one operation, she can choose any two compartments i and j (1 ≤ i, j ≤ n and i ≠ j) and move one book from compartment i to compartment j, or from compartment j to compartment i. Given the initial number of books in each compartment, determine if it\'s possible to redistribute the books so that no compartment has more than k books in any sequence of operations. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^9) — the number of compartments and the maximum allowed number of books per compartment. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the initial number of books in each compartment. Print \\"YES\\" if it\'s possible to achieve this within the given conditions, otherwise print \\"NO\\". Example: ``` Input: 5 5 3 8 6 2 4 Output: YES Input: 3 2 3 1 5 Output: NO ``` Note: - In the first example, Daria can move 3 books from the second compartment to the first, fourth, and fifth compartments. - In the second example, it’s impossible to redistribute the books such that no compartment exceeds 2 books.","solution":"def can_redistribute_books(n, k, books): Determines if it\'s possible to redistribute books so that no compartment exceeds the threshold k total_books = sum(books) max_possible_books_in_compartment = (total_books + n - 1) // n return max_possible_books_in_compartment <= k def solution(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) k = int(data[1]) books = list(map(int, data[2:])) if can_redistribute_books(n, k, books): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Sasha is given a string consisting of lowercase English letters and she wants to encode it using the following method: - Replace each continuous segment of the same character with a single instance of that character followed by the length of the segment. For example, the string \\"aaabbcaaa\\" would be encoded as \\"a3b2c1a3\\". Help Sasha by writing a function that encodes the given string using the described method. # Input The first line of the input contains an integer n (1 leq n leq 10^5) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. # Output Print the encoded string. # Example Input ``` 9 aaabbcaaa ``` Output ``` a3b2c1a3 ``` Input ``` 6 abbbbb ``` Output ``` a1b5 ``` Explanation In the first example, there are three \'a\'s, two \'b\'s, one \'c\', and three \'a\'s in the string. Hence the encoded string is \\"a3b2c1a3\\". In the second example, there is one \'a\' followed by five \'b\'s. Hence the encoded string is \\"a1b5\\".","solution":"def encode_string(n, s): if n == 0: return \\"\\" encoded_string = \\"\\" count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: encoded_string += s[i - 1] + str(count) count = 1 # Don\'t forget to add the last segment encoded_string += s[n - 1] + str(count) return encoded_string"},{"question":"You are given two arrays of integers, `arr1` and `arr2`, both of length `n`. You need to perform a set of operations to modify `arr1` so that for all `i` (0 <= `i` < `n`), `arr1[i]` is less than or equal to `arr2[i]`. In each operation, you are allowed to either: - Increment any element of `arr1` by 1. - Decrement any element of `arr1` by 1. You need to determine the minimum number of operations required to make `arr1` less than or equal to `arr2` for all indices `i`. If it\'s impossible to achieve the condition, return -1. The first line contains one integer `t` (1 <= `t` <= 1000) — the number of test cases. For each test case, you will have two lines: - The first line contains one integer `n` (1 <= `n` <= 100) — the length of the arrays. - The second line contains `n` integers — the elements of `arr1`. - The third line contains `n` integers — the elements of `arr2`. For each test case, print the minimum number of operations to make `arr1` less than or equal to `arr2`, or -1 if it\'s impossible. # Example Input ``` 3 3 3 2 5 5 4 6 3 1 2 3 3 2 1 4 10 20 30 40 15 25 35 45 ``` Output ``` 3 -1 8 ``` # Explanation 1. For the first test case: Increment the first element by 2, and the second element by 2. Total = 2 + 2 + 1 = 5 2. For the second test case: It is impossible to make `arr1` less than or equal to `arr2` at all indices. 3. For the third test case: Increment the first element by 5, the second by 5, the third by 5, and the fourth by 5. Total = 5 + 5 + 5 + 5 = 20","solution":"def min_operations_to_modify(arr1, arr2): total_operations = 0 for a, b in zip(arr1, arr2): if a > b: return -1 total_operations += b - a return total_operations def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][\'n\'] arr1 = test_cases[i][\'arr1\'] arr2 = test_cases[i][\'arr2\'] result = min_operations_to_modify(arr1, arr2) results.append(result) return results"},{"question":"A railway company wants to analyze the performance of their trains. Each train follows a specific route which consists of a series of stations. Each route is represented as a sequence of segments, each segment representing the travel time between two consecutive stations. The company wants to find out the shortest total travel time for a given train\'s route. You are given a list of segments for each route. Each segment has a travel time associated with it. Your task is to find the minimum total travel time for each route. The first line contains an integer t (1 ≤ t ≤ 100) - the number of trains (or routes). The next t lines describe the segments of each route. The i-th line starts with an integer ni (1 ≤ ni ≤ 100) - the number of segments in the i-th route, followed by ni space-separated integers ti1, ti2, ..., tini (1 ≤ tij ≤ 100) - the travel times of the segments in the i-th route. For each train, output a single integer on a new line - the minimum total travel time for that train\'s route. Example: ``` Input: 3 4 10 20 30 40 2 15 25 3 14 23 42 Output: 100 40 79 ``` Explanation: - For the first train, the total travel time is 10 + 20 + 30 + 40 = 100. - For the second train, the total travel time is 15 + 25 = 40. - For the third train, the total travel time is 14 + 23 + 42 = 79.","solution":"def shortest_total_travel_times(trains): Returns the minimum total travel time for each train\'s route. Parameters: trains (list of list of int): Nested list where each sublist represents travel times of segments of a train\'s route. Returns: list of int: List of minimum total travel times for each train. results = [] for train in trains: # Sum the travel times for the current train\'s route total_travel_time = sum(train) results.append(total_travel_time) return results"},{"question":"John loves solving puzzles, and one day he encountered a unique robot moving problem. He has a robot placed on an infinitely large 2D grid at the origin (0,0). The robot can perform the following moves: - U (Up): Moves from (x, y) to (x, y + 1) - D (Down): Moves from (x, y) to (x, y - 1) - L (Left): Moves from (x, y) to (x - 1, y) - R (Right): Moves from (x, y) to (x + 1, y) John wants to know if the robot can return to the origin (0,0) after executing a sequence of moves. Given a string representing the sequence of moves, determine if the robot returns to the origin. Write a function that takes a string `moves` as input and returns \\"YES\\" if the robot returns to the origin, otherwise return \\"NO\\". # Input - The input consists of a single line, containing a string `moves` (1 ≤ |moves| ≤ 10^5). # Output - Output \\"YES\\" if the robot returns to the origin, otherwise output \\"NO\\". # Example - Input: \\"UD\\" - Output: \\"YES\\" - Input: \\"LL\\" - Output: \\"NO\\" - Input: \\"UDLR\\" - Output: \\"YES\\" - Input: \\"UUDDLLRR\\" - Output: \\"YES\\" **Note:** 1. The robot returns to the origin if the number of \'U\' moves is equal to the number of \'D\' moves and the number of \'L\' moves is equal to the number of \'R\' moves. 2. The moves string contains only the characters \'U\', \'D\', \'L\', and \'R\'.","solution":"def robot_returns_to_origin(moves): Determines if the robot returns to the origin after executing the moves. :param moves: A string consisting of characters \'U\', \'D\', \'L\', \'R\' :return: \\"YES\\" if robot returns to origin, otherwise \\"NO\\" u_count = moves.count(\'U\') d_count = moves.count(\'D\') l_count = moves.count(\'L\') r_count = moves.count(\'R\') if u_count == d_count and l_count == r_count: return \\"YES\\" else: return \\"NO\\""},{"question":"The annual programming competition is underway, and Chris is aiming for the top spot. One of the challenges involves efficiently processing a list of integers to answer multiple queries about the sum of elements in subarrays. Given an array of n integers and q queries, each query is defined by two indices, l and r, requiring Chris to compute the sum of elements from index l to index r inclusive. To assist Chris, you need to write a program that preprocesses the array to quickly answer each range sum query. The first line contains two integers, n and q (1 ≤ n, q ≤ 300000) – the number of elements in the array and the number of queries, respectively. The second line contains n integers a1, a2, ... , an (|ai| ≤ 1000) – the elements of the array. The following q lines contain two integers l and r (1 ≤ l ≤ r ≤ n) – the indices for each query. Output q lines, each containing a single integer – the sum of elements from index l to index r inclusive for each respective query. **Example:** Input: ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output: ``` 6 9 15 ``` **Explanation:** - In the first query, the sum of elements from index 1 to 3 (1, 2, 3) is 6. - In the second query, the sum of elements from index 2 to 4 (2, 3, 4) is 9. - In the third query, the sum of elements from index 1 to 5 (1, 2, 3, 4, 5) is 15.","solution":"def process_queries(n, q, array, queries): # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] results = [] for l, r in queries: sum_subarray = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_subarray) return results"},{"question":"The magical wizard Gandalf is on a quest to collect rare ingredients for a powerful potion. There are n distinct ingredient sources, and each source has its unique quantity of a specific ingredient. To make the potion, Gandalf needs to collect exactly k units of each ingredient. Gandalf cannot take more or less than k units from each source - he must take exactly k units if it\'s available. Given that some sources might have more than k units of their ingredient while others may have less, Gandalf needs to figure out if it is possible for him to collect exactly k units from each source. If it\'s possible, he also wants to determine how many different ways there are to form a combination of exactly k units from these sources. The first line contains two integers n and k (1 ≤ n, k ≤ 100) – the number of distinct ingredient sources and the exact units of each ingredient Gandalf needs. The second line contains n space-separated integers where each integer ai (1 ≤ ai ≤ 100) represents the amount of the ingredient available from the ith source. Print the number of possible combinations Gandalf can form to collect exactly k units of ingredients from the sources. If it\'s not possible, print \\"0\\". # Example Input: ``` 4 5 10 15 5 5 ``` Output: ``` 6 ``` Explanation In the example provided, Gandalf needs exactly 5 units from each source. The sources have the following amounts: [10, 15, 5, 5]. The valid combinations are: 1. Choosing 5 units from the first source and 5 units from the second source. 2. Choosing 5 units from the first source and 5 units from the fourth source. 3. Choosing 5 units from the second source and 5 units from the third source. 4. Choosing 5 units from the second source and 5 units from the fourth source. 5. Choosing 5 units from the third source and 5 units from the fourth source. 6. Choosing 5 units from each of the third and fourth sources individually. Thus, there are 6 ways to achieve the exact units required.","solution":"def count_combinations(n, k, ingredients): Returns the number of ways Gandalf can form a combination of exactly k units from the given ingredient sources. # Filter the sources that have at least k units available_sources = [source for source in ingredients if source >= k] # Use combinatorics to determine the number of ways to choose exactly k units from these sources from itertools import combinations return len(list(combinations(available_sources, 2))) # Example input # n, k = 4, 5 # ingredients = [10, 15, 5, 5]"},{"question":"Rosie is learning about prime factorization and the greatest common divisor (GCD). She decides to challenge her friend Paul with a problem. Rosie gives Paul a list of integers and asks him to find the largest integer that can divide all numbers in the list. Additionally, if no such integer exists, Paul should return -1. The input consists of an integer n (2 ≤ n ≤ 1000) that represents the number of integers in the list. The next line contains n integers ai (1 ≤ ai ≤ 10^9), the numbers in Rosie\'s list. Your task is to write a program to help Paul solve this problem. Print the largest integer that can divide all numbers in the list if it exists. If no such integer exists, print -1. For example: **Input:** ``` 3 12 15 18 ``` **Output:** ``` 3 ``` In this case, 3 is the largest integer that can divide 12, 15, and 18, so the output is 3.","solution":"from math import gcd from functools import reduce def largest_common_divisor(n, numbers): def find_gcd(lst): return reduce(gcd, lst) result = find_gcd(numbers) return result if result > 1 else -1"},{"question":"Petya loves playing around with strings. Recently, he came up with an interesting problem involving two strings, and he needs your help to solve it. Given two strings, `s` and `t`, Petya wants to know if it\'s possible to make the first string `s` equal to the second string `t` using exactly one operation. In one operation, Petya can select a substring of `s` and reverse it in place. Write a function to determine if exactly one operation is enough to transform `s` into `t`. If it\'s possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains the integer `n` (1 <= n <= 10^5) — the number of test cases. Each of the next `n` lines contains two strings `s` and `t` of the same length, which consist only of lowercase English letters (1 <= |s|, |t| <= 100). For each test case, print \\"YES\\" or \\"NO\\" based on whether it\'s possible to make `s` equal to `t` with exactly one substring reversal operation. # Example Input: ``` 3 abdc abcd abcdefg gfedcba xyz xyz ``` Output: ``` YES YES NO ``` # Explanation - In the first test case, you can select the substring \\"bd\\" and reverse it to get \\"abcd\\". - In the second test case, you can select the entire string \\"abcdefg\\" and reverse it to get \\"gfedcba\\". - In the third test case, the strings are already equal, so no single reversal operation is needed.","solution":"def can_transform_with_one_reversal(s, t): Determines if exactly one substring reversal operation can make string s equal to string t. :param s: The original string. :param t: The target string to match. :return: \\"YES\\" if one reversal can make s equal to t, otherwise \\"NO\\". if s == t: return \\"NO\\" # Find the first and last positions where s and t differ start_idx = -1 end_idx = -1 for i in range(len(s)): if s[i] != t[i]: if start_idx == -1: start_idx = i end_idx = i # Check if reversing the substring s[start_idx:end_idx+1] makes s equal to t if start_idx != -1 and end_idx != -1: s_reversed_sub = s[:start_idx] + s[start_idx:end_idx+1][::-1] + s[end_idx+1:] if s_reversed_sub == t: return \\"YES\\" return \\"NO\\" def process_test_cases(n, test_cases): results = [] for s, t in test_cases: result = can_transform_with_one_reversal(s, t) results.append(result) return results"},{"question":"You are given an integer array `arr` of length `n`. You are allowed to perform an operation where you select two adjacent elements and replace them with their sum. Your goal is to minimize the number of elements in the array by performing the operation as many times as possible. Determine the minimum number of elements that can remain in the array after performing the operations optimally. Input: - The first line contains an integer `t` (1 leq t leq 10^5), denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer `n` (1 leq n leq 2 cdot 10^5), the length of the array `arr`. - The second line contains `n` space-separated integers `arr[i]` (1 leq arr[i] leq 10^9), elements of the array. Output: - For each test case, print a single line containing the minimum number of elements that can remain in the array after performing the operations optimally. Note: - The sum of `n` over all test cases will not exceed `2 cdot 10^5`. Example: Input: ``` 3 5 1 1 1 1 1 4 2 1 3 4 3 10 20 30 ``` Output: ``` 1 3 3 ```","solution":"def min_elements_after_operations(test_cases): results = [] for n, arr in test_cases: # It is optimal to sum all elements into one if we can replace adjacent elements if n == 1: results.append(1) else: # Each operation reduces the array size by 1, hence we can perform n-1 operations results.append(1) return results # Example of how to use the function: # test_cases = [(5, [1, 1, 1, 1, 1]), (4, [2, 1, 3, 4]), (3, [10, 20, 30])] # print(min_elements_after_operations(test_cases)) # This would output [1, 3, 3]"},{"question":"A conveyor belt composed of boxes of different widths and heights needs to be optimized for manufacturing purposes. The goal is to determine the longest sequence of consecutive boxes that can be repeated end-to-end a given number of times without exceeding the height limit of the conveyor system. You are given an array of integers `heights` where each integer represents the height of a box. You are also given an integer `maxHeight` which indicates the maximum allowable height for the conveyor belt. You need to find the longest subsequence of consecutive boxes such that the sum of their heights does not exceed `maxHeight`. The first line of the input contains two integers n and maxHeight (1 ≤ n ≤ 10^5, 1 ≤ maxHeight ≤ 10^9) — the number of boxes and the maximum allowable height of the conveyor system. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the boxes. Output a single integer — the length of the longest subsequence of consecutive boxes which can be repeated and does not exceed the given height limit. Input: ``` 8 15 1 2 3 4 5 6 7 8 ``` Output: ``` 5 ``` Explanation: The longest subsequence is the sequence [1, 2, 3, 4, 5] which has a total height of 15. The sum of any longer subsequence would exceed the height limit of 15.","solution":"def longest_subsequence_with_max_height(heights, maxHeight): start = 0 current_sum = 0 max_length = 0 for end in range(len(heights)): current_sum += heights[end] while current_sum > maxHeight: current_sum -= heights[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Maria has a chessboard of size n x n. She wants to count the number of squares that can fit into this chessboard. A square is defined as a set of cells forming a perfect square of any possible size (1x1, 2x2, 3x3, ..., nxn) within the chessboard. Write a program to calculate the total number of squares of all possible sizes that can fit into an n x n chessboard. The input consists of a single integer n (1 ≤ n ≤ 1000) — the size of the chessboard. Print a single integer — the total number of squares of all possible sizes that can fit into the chessboard. **Example:** Input: 3 Output: 14 Explanation: For a 3x3 chessboard: - There are 9 squares of size 1x1. - There are 4 squares of size 2x2. - There is 1 square of size 3x3. Total squares = 9 + 4 + 1 = 14.","solution":"def count_squares_in_chessboard(n): Returns the total number of squares that can fit into an n x n chessboard. total_squares = 0 for size in range(1, n + 1): squares_of_size = (n - size + 1) ** 2 total_squares += squares_of_size return total_squares"},{"question":"Polycarp loves organizing events and has recently been given the task of scheduling presentations for an upcoming conference. The conference has n presentations, each of which has a starting time s_i and an ending time e_i. Presentations can overlap, and thus, Polycarp needs to determine the minimum number of conference rooms required so that no two overlapping presentations will be scheduled in the same room. Given the starting and ending times of the presentations, help Polycarp determine the minimum number of conference rooms necessary. The first line contains a single integer n (1 le n le 10^5), the number of presentations. Each of the next n lines contains two integers s_i and e_i (0 le s_i < e_i le 10^9), the starting and ending times of the i-th presentation. Output a single integer — the minimum number of conference rooms required to schedule all the presentations without any overlap in the same room. # Example: Input: ``` 3 1 5 2 6 8 9 ``` Output: ``` 2 ``` # Explanation: - Presentation 1 runs from time 1 to 5. - Presentation 2 runs from time 2 to 6. - Presentation 3 runs from time 8 to 9. Presentations 1 and 2 overlap, so at least two rooms are required for these. Presentation 3 does not overlap with any others, so it can be scheduled in any of the available rooms resulting in a total of 2 rooms needed. In the optimal solution, Presentations 1 and 2 are scheduled in different rooms, and then Presentation 3 can be placed in either of these rooms once they are free.","solution":"def min_conference_rooms(presentations): Determines the minimum number of conference rooms required to schedule all presentations without any overlaps in the same room. :param presentations: List of tuples where each tuple contains the start and end time of a presentation (start, end). :return: Integer representing the minimum number of conference rooms required. if not presentations: return 0 # Create two lists for start times and end times starts = sorted([s for s, e in presentations]) ends = sorted([e for s, e in presentations]) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms = 0 # Iterate through the start times while start_pointer < len(presentations): # If there is a meeting that starts before the last meeting ends, # allocate a new room if starts[start_pointer] < ends[end_pointer]: used_rooms += 1 start_pointer += 1 else: # If the current meeting starts after the earliest ended meeting, # free up a room used_rooms -= 1 end_pointer += 1 # Update the maximum number of rooms required max_rooms = max(max_rooms, used_rooms) return max_rooms # Example usage # presentations = [(1, 5), (2, 6), (8, 9)] # print(min_conference_rooms(presentations)) #=> 2"},{"question":"There is a sequence of n integers, and you are required to perform several types of operations on this sequence: 1. **Range Sum Query**: Given a range [l, r], you should calculate the sum of the elements from index l to index r (1-based indexing). 2. **Update Element**: Replace the element at a given index with a new value. The sequence is represented by an array a of length n, and it is guaranteed that the sequence will have at least one element. The input starts with two integers n and q (1 leq n leq 100,000, 1 leq q leq 100,000), the number of elements in the sequence and the number of queries, respectively. The second line contains n integers (a_1, a_2, ..., a_n) (1 leq a_i leq 10^9), the elements of the sequence. The next q lines describe the queries. Each query is described by one of the following formats: - `1 l r` : This is a Range Sum Query. You should output the sum of the elements from index l to r. - `2 p x` : This is an Update Element query. You should replace the element at index p with the new value x. Print the result for each Range Sum Query (query type 1) on a new line. **Example:** ``` Input: 5 5 1 2 3 4 5 1 2 4 2 3 10 1 2 4 2 5 20 1 1 5 Output: 9 16 37 ``` **Explanation:** Initial array: [1, 2, 3, 4, 5] 1. The sum from index 2 to 4 (2 + 3 + 4) = 9 2. Update the element at index 3 to 10: [1, 2, 10, 4, 5] 3. The sum from index 2 to 4 (2 + 10 + 4) = 16 4. Update the element at index 5 to 20: [1, 2, 10, 4, 20] 5. The sum from index 1 to 5 (1 + 2 + 10 + 4 + 20) = 37","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in the tree array for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): # Set value at position index pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): # Get sum of elements in the range [left, right) left += self.n right += self.n sum_ = 0 while left < right: if left % 2: sum_ += self.tree[left] left += 1 if right % 2: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_queries(n, a, queries): seg_tree = SegmentTree(a) results = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] result = seg_tree.range_sum(l, r) results.append(result) elif query[0] == 2: p, x = query[1] - 1, query[2] seg_tree.update(p, x) return results"},{"question":"Alice and Bob are playing a game on a grid of size n times m. Initially, all cells in the grid are empty. The players take turns in the following manner: - Alice starts and, in each of her turns, she chooses an empty cell and places an \'A\'. - Bob goes next and, in each of his turns, he chooses an empty cell adjacent to an \'A\' (either horizontally or vertically) and places a \'B\'. The game ends when either there are no more empty cells that Alice can choose, or no more empty cells that Bob can choose. Alice wants to maximize the number of \'A\'s on the grid, while Bob wants to maximize the number of \'B\'s. Both players play optimally. Given the dimensions of the grid, find the final numbers of \'A\'s and \'B\'s on the grid if both players play optimally. The first line of the input contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. Output two integers: the final number of \'A\'s and the final number of \'B\'s. # Example Input: ``` 4 4 ``` Output: ``` 8 8 ``` Input: ``` 2 3 ``` Output: ``` 3 3 ```","solution":"def game_result(n, m): Returns the number of \'A\'s and \'B\'s on an n x m grid when Alice and Bob play optimally. # When Alice and Bob both play optimally, they can fill the grid in a checkerboard pattern. max_as = (n * m + 1) // 2 # Maximum number of \'A\'s max_bs = (n * m) // 2 # Maximum number of \'B\'s return max_as, max_bs"},{"question":"Consider an array of integers where you can perform the following operation any number of times: - Choose a sub-array and increase each element of this sub-array by 1. The goal is to achieve an array where the difference between the maximum and minimum element is minimized. You are required to determine the minimum possible difference between the maximum and minimum element after performing the operation any number of times. The first line contains an integer t (1 leq t leq 100), the number of test cases. Each of the next t lines describes a test case and contains: - An integer n (1 leq n leq 100,000), the number of elements in the array. - Followed by n integers, where each integer a_i (1 leq a_i leq 10^9) is an element of the array. For each test case, output the minimum possible difference between the maximum and minimum element of the array. **Example Input**: ``` 2 3 1 2 3 4 10 20 30 40 ``` **Example Output**: ``` 0 30 ``` **Explanation**: For the first test case, we can choose the sub-array (1, 2, 3) and increase each element twice, resulting in the array (3, 4, 5). Then we can choose the sub-array (3, 4, 5) again and increase each element once, resulting in the array (4, 5, 6). Continue this operation until each element becomes 4. Therefore, the minimum possible difference is 0. For the second test case, we cannot reduce the difference between the maximum and minimum element to zero, so the minimum possible difference is 30.","solution":"def min_possible_difference(t, test_cases): Determine the minimum possible difference between the maximum and minimum element of an array after performing the increment operation any number of times. Parameters: t (int): number of test cases test_cases (list of lists): each element is a list where the first element is the size of the array \'n\' and the remaining elements are the integers of the array. Returns: list: list of integers representing the minimum possible difference for each test case results = [] for case in test_cases: n = case[0] array = case[1:] min_value = min(array) max_value = max(array) results.append(max_value - min_value) return results"},{"question":"You are given a maze represented by an n times m grid. Some of the cells are blocked and some are open. You start at the top-left corner of the maze and need to reach the bottom-right corner. You can move to an adjacent cell if it\'s open, in one of the four directions: up, down, left, or right. To complicate things, some cells contain traps. Each trap contains a value t_i which represents the maximum number of times you are allowed to step on that cell throughout your journey. Once a cell has been stepped on t_i times, it becomes blocked. Your task is to determine if there\'s a way to reach the bottom-right corner and return to the top-left corner following these rules. The input consists of the following: The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. The next n lines contain m characters each — the grid representation. Each cell is one of the following: - \'.\' (dot) denoting an open cell, - \'#\' (hash) denoting a blocked cell, - A digit 1 leq t_i leq 9 denoting the limit of steps you can take on that cell. You start at cell (1,1) and must reach cell (n,m) and then return to (1,1). Output \\"YES\\" if it\'s possible to reach (n,m) and return to (1,1) without violating any trap constraints; otherwise, output \\"NO\\". # Example Input: ``` 5 5 . . . # . # 3 . # . # . # # . # . 4 . # . . . # . ``` # Example Output: ``` NO ``` # Example Explanation: In the given grid example, cells (2,2) and (4,3) are traps that can only be stepped on 3 and 4 times respectively. From the starting cell (1,1), you need to find a suitable path to (5,5) and also return while ensuring you do not exceed the allowed steps on traps. In this problem, it\'s impossible to meet both constraints, therefore the output is \\"NO\\".","solution":"from collections import deque def is_valid(x, y, n, m, grid, visited): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' and visited[x][y] != 1 def bfs(n, m, grid, start, end): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start, 0)]) visited = [[0] * m for _ in range(n)] visited[start[0]][start[1]] = 1 step_counts = {} while queue: (x, y), steps = queue.popleft() if (x, y) == end: return True, steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, n, m, grid, visited): if grid[nx][ny].isdigit(): trap_limit = int(grid[nx][ny]) if (nx, ny) not in step_counts: step_counts[(nx, ny)] = 0 if step_counts[(nx, ny)] < trap_limit: step_counts[(nx, ny)] += 1 queue.append(((nx, ny), steps + 1)) visited[nx][ny] = 1 else: visited[nx][ny] = 1 else: queue.append(((nx, ny), steps + 1)) visited[nx][ny] = 1 return False, -1 def can_reach_and_return(n, m, grid): start = (0, 0) end = (n - 1, m - 1) reachable_to_end, forward_steps = bfs(n, m, grid, start, end) if not reachable_to_end: return \\"NO\\" reachable_to_start, return_steps = bfs(n, m, grid, end, start) if not reachable_to_start: return \\"NO\\" return \\"YES\\" # Let\'s define our main function to get the input and call the function def main(): input_str = input().strip() n, m = map(int, input_str.split()) grid = [input().strip().split() for _ in range(n)] result = can_reach_and_return(n, m, grid) print(result)"},{"question":"You are given an array containing `n` integers, where each integer represents the height of a building. Your task is to determine the maximum area of a rectangle that can be formed within the skyline of these buildings. The rectangle must be fully enclosed by buildings of equal or greater height. The array represents the heights of buildings lined up next to each other. The rectangle can only be formed by selecting a contiguous subsequence of buildings, and its height is determined by the shortest building in the selected subsequence. Write a program that calculates the maximum rectangular area that can be formed in the given skyline of buildings. The first line contains a single integer `n` (1 ≤ n ≤ 100000) — the number of buildings. The second line contains `n` integers: `h1, h2, ..., hn` (1 ≤ hi ≤ 10000) — the heights of the buildings. Print the maximum possible area of the rectangle. # Example Input 5 2 1 5 6 2 Output 10 (Rectangle of height 2 and width 5, thus the area is 2 x 5 = 10) In the first sample, the largest rectangle can be formed by taking the heights from the second to the third building, giving a height of 5 and a width of 2, thus the area is 5 x 2 = 10. άλλη επιλογή είναι η πρώτη από 2 κατά το ύψος όλων των κτιρίων. # Constraints: - Time complexity should be kept in mind due to large inputs. - You may use any programming language to solve this problem.","solution":"def largest_rectangle_area(heights): Function to calculate the maximum rectangular area in a given histogram. :param heights: List of integers representing the heights of buildings. :return: Maximum rectangular area. max_area = 0 stack = [] for i in range(len(heights)): start = i while stack and stack[-1][1] > heights[i]: index, height = stack.pop() max_area = max(max_area, height * (i - index)) start = index stack.append((start, heights[i])) for i, height in stack: max_area = max(max_area, height * (len(heights) - i)) return max_area"},{"question":"You are given an integer array `arr` of length `n`. Your task is to determine whether you can split the array into exactly two non-empty subarrays such that the greatest common divisor (GCD) of elements of both subarrays is equal to `g`. A subarray is defined as a contiguous part of an array. The GCD of a set of numbers is the largest integer that divides all of them without leaving a remainder. **Input** - The first line contains two integers `n` and `g` (2 ≤ `n` ≤ 10^5, 1 ≤ `g` ≤ 10^9) — the length of the array and the required GCD of elements in the two subarrays. - The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. **Output** - Output \\"YES\\" if you can split the array into exactly two non-empty subarrays such that the GCD of elements in both subarrays is `g`. Otherwise, print \\"NO\\". **Example** ``` Input: 6 2 4 2 2 4 6 8 Output: YES ``` ``` Input: 6 3 4 2 2 4 6 8 Output: NO ``` **Note** In the first example, one possible way to split the array is [4, 2, 2, 4] and [6, 8]. Both subarrays have GCD 2. In the second example, no matter how we split the array, it\'s impossible to have the GCD of both subarrays equal to 3, as 3 is not a divisor of most elements in the array.","solution":"from math import gcd from functools import reduce def can_split_array_with_gcd(n, g, arr): def gcd_array(array): return reduce(gcd, array) # Check if the overall GCD of the array is divisible by g. # If the GCD of the entire array is not divisible by g, it\'s impossible to split. overall_gcd = gcd_array(arr) if overall_gcd % g != 0: return \\"NO\\" # Iterate and simulate splitting the array to see if conditions hold for i in range(1, n): left_gcd = gcd_array(arr[:i]) right_gcd = gcd_array(arr[i:]) if left_gcd == g and right_gcd == g: return \\"YES\\" return \\"NO\\""},{"question":"In a distant kingdom, there exists a peculiar treasure fleet. The fleet consists of ships that carry treasures of varying values. The king has ordered the ships to be arranged in a specific manner to maximize the security of the fleet. There are n ships, and each ship carries a treasure with a value denoted by v_i (1 le i le n). The fleet has several security zones, each defined as a segment of consecutive ships. The security of a zone is determined by its total treasure value. The king wants each security zone to have a treasury value within a specified range to ensure balanced protection. You are given several queries related to these zones, each asking whether the total value of treasures in a particular segment of ships falls within a given range [L, R] inclusive. Write a program to answer each of these queries efficiently. The first line contains two integers n and q (1 le n, q le 200,000) - the number of ships and the number of queries. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 10^6) - the treasure values of the ships. The following q lines contain three integers each: l, r, L, R (1 le l le r le n, 1 le L le R le 10^9), describing a query that asks if the total treasure value of the segment from the l-th ship to the r-th ship falls within the range [L, R]. For each query, print \\"YES\\" if the total value falls within the specified range, otherwise print \\"NO\\". # Sample Input ``` 5 3 100 200 300 400 500 1 3 500 700 2 5 900 1500 1 5 2000 2500 ``` # Sample Output ``` YES YES NO ``` # Explanation 1. The segment from the 1st to the 3rd ship has treasure values [100, 200, 300]. The total value is 600, which falls within the range [500, 700]. 2. The segment from the 2nd to the 5th ship has treasure values [200, 300, 400, 500]. The total value is 1400, which falls within the range [900, 1500]. 3. The segment from the 1st to the 5th ship has treasure values [100, 200, 300, 400, 500]. The total value is 1500, which does not fall within the range [2000, 2500].","solution":"def answer_queries(n, q, treasure_values, queries): # Compute prefix sums for treasure_values prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + treasure_values[i - 1] results = [] for l, r, L, R in queries: # Calculate the sum of the segment from l to r segment_sum = prefix_sums[r] - prefix_sums[l - 1] # Check if the segment sum is within the range [L, R] if L <= segment_sum <= R: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A new language called \\"Hokum\\" is being developed and one of its distinctive features is the \\"balanced expression\\". In Hokum, a balanced expression is defined as follows: 1. An empty string is a balanced expression. 2. If \\"X\\" is a balanced expression, then \\"(\\" + \\"X\\" + \\")\\" is also a balanced expression. 3. If \\"X\\" and \\"Y\\" are balanced expressions, then \\"X\\" + \\"Y\\" is also a balanced expression. Given a string consisting of characters \'(\', \')\', and lowercase alphabet letters, determine if it can be transformed into a balanced expression by removing some (possibly zero) characters. The first line of the input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 100), the string to be checked. Output \\"YES\\" if the string can be transformed into a balanced expression and \\"NO\\" otherwise. # Examples Input 4 ab(c)d) (a(b)c) ((ab)c a(bc)d Output NO YES NO YES Note: In the first case, it\'s impossible to remove characters to get a balanced expression. In the second case, removing the characters \'b\' and \'c\' results in \\"(())\\" which is balanced. In the third case, \'(\' and \'ab)c\' cannot be balanced. In the fourth case, removing \'a\', \'b\', \'d\' results in \\"(c)\\" which is balanced.","solution":"def can_be_balanced_expression(s): Determines if a string can be transformed into a balanced expression. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if stack and stack[-1] == \'(\': stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(t, cases): results = [] for i in range(t): results.append(can_be_balanced_expression(cases[i])) return results"},{"question":"Mike loves climbing mountains in his free time. He is keeping track of the height of the peaks he has climbed, and he wants to find out certain information about his journeys. Mike\'s climbing route can be represented as a sequence of integers where each integer represents the height of a peak in meters. His climb is a continuous sequence, meaning he climbs from one peak to another without descending to a previous peak. However, he can revisit past peak heights in different journeys. Given the heights of the peaks in the sequence, help Mike figure out how many distinct peak heights he has climbed in total. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of peaks Mike has climbed. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the peaks in the order Mike climbed them. Print a single integer — the number of distinct peak heights Mike has climbed. Example: Input: 7 1000 2000 3000 1000 1500 2000 3000 Output: 4","solution":"def count_distinct_peaks(n, heights): Returns the number of distinct peak heights Mike has climbed. Args: n (int): The number of peaks Mike has climbed. heights (list of int): The heights of the peaks in the order Mike climbed them. Returns: int: The number of distinct peak heights. return len(set(heights))"},{"question":"Egor and Timur are playing a game with a sequence of integers. The sequence contains `n` integers, and the rules of the game are as follows: 1. In each turn, a player selects a contiguous subarray from the sequence. 2. The sum of the selected subarray must be positive. 3. The player then removes the selected subarray from the sequence, and the remaining parts of the sequence are concatenated. 4. The players alternate turns, with Egor going first. The game continues until no positive sum subarray can be selected. The player who cannot make a move loses the game. Both players play optimally. You need to determine who will win the game if Egor starts first. Input The first line contains a single integer `n` (1 ≤ n ≤ 2 × 10^5) — the length of the sequence. The second line contains `n` integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the sequence. Output Print \\"Egor\\" if Egor wins, and \\"Timur\\" if Timur wins. Examples Input ``` 4 1 -1 2 -2 ``` Output ``` Egor ``` Input ``` 3 -1 -1 -1 ``` Output ``` Timur ``` Note: In the first example, Egor can select the subarray [1], Timur can select [2], and no positive subarray remains, so Egor wins. In the second example, no positive sum subarray exists from the beginning, so Timur wins immediately.","solution":"def determine_winner(n, sequence): Determines the winner of the game between Egor and Timur. Args: n (int): The length of the sequence. sequence (list of int): The sequence of integers. Returns: str: \\"Egor\\" if Egor wins, and \\"Timur\\" if Timur wins. # Check if there is any positive number in the sequence for num in sequence: if num > 0: return \\"Egor\\" return \\"Timur\\""},{"question":"Alice loves playing with strings and numbers. She has recently been fascinated by the idea of transforming a number into a string by following a certain set of rules. Specifically, she wants to know how many distinct strings she can generate by permuting and then encoding a given number into characters. Here\'s the challenge: Given a number, Alice considers all possible permutations of its digits. For each permutation, she encodes the number into a string by mapping its digits according to the following rules: - Digit \'1\' maps to \'a\' - Digit \'2\' maps to \'b\' - Digit \'3\' maps to \'c\' - ... - Digit \'9\' maps to \'i\' - Digit \'0\' maps to \'j\' Your task is to write a program that takes a single number as input, calculates all distinct permutations of its digits, encodes each permutation into a string using the rules above, and then determines how many distinct strings can be generated. # Input The input consists of a single line containing the number `N` (0 < N < 10^6). # Output Output a single integer, the number of distinct strings that can be generated by encoding all permutations of the digits of `N`. # Example Input 123 Output 6 Explanation The digits of 123 can be permuted to form the following distinct numbers: 123, 132, 213, 231, 312, 321. After encoding each number, we get: \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\". Thus, there are 6 distinct strings. # Note - Permutations which result in the same string should only be counted once. - The number should not contain leading zeros in its permutations (for example, `012` should be considered as `12`). Write a program to solve this problem efficiently.","solution":"from itertools import permutations def count_distinct_encoded_strings(N): Takes a number N and returns the number of distinct strings that can be generated by permuting and encoding its digits. # Create mapping from digits to corresponding characters mapping = {\'0\': \'j\', \'1\': \'a\', \'2\': \'b\', \'3\': \'c\', \'4\': \'d\', \'5\': \'e\', \'6\': \'f\', \'7\': \'g\', \'8\': \'h\', \'9\': \'i\'} # Convert the number to string to get digits digits = str(N) # Generate all unique permutations of the digits unique_permutations = set(permutations(digits)) # Encode each permutation using the mapping encoded_strings = set() for perm in unique_permutations: encoded_string = \'\'.join(mapping[digit] for digit in perm) encoded_strings.add(encoded_string) return len(encoded_strings)"},{"question":"Petya and Vasya love playing with numbers. They have recently come up with a new game involving lists and rotation. Here are the rules of the game: Petya starts with a list of integers of length n. He performs a circular right rotation exactly k times. A circular right rotation on a list shifts each of the list\'s elements to the right (from the last position to the first). Vasya\'s task is to figure out what the list looks like after the rotations. For example, if n = 5, k = 2, and the initial list is [1, 2, 3, 4, 5], the list after 2 rotations will be [4, 5, 1, 2, 3]. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the length of the list and the number of rotations. The second line contains n space-separated integers — the initial list of integers. Output n space-separated integers — the list after k rotations. Example: Input: 5 2 1 2 3 4 5 Output: 4 5 1 2 3","solution":"def rotate_list(n, k, nums): Returns the list after performing k circular right rotations. k = k % n # Only need to consider the remainder of k divided by n return nums[-k:] + nums[:-k]"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. You need to perform the following operation exactly once: you can choose any two adjacent elements in the sequence and remove them if their sum is even, forming a new sequence of length n-2. Your goal is to maximize the length of the final sequence after performing this operation. Output the maximum length of the sequence you can achieve after performing the operation exactly once. The first line contains a single integer t (1 le t le 10^3) — the number of test cases. For each test case, the first line contains an integer n (2 le n le 10^5) — the length of the sequence. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^5. Print a single integer for each test case — the maximum possible length of the sequence after performing the operation. For example, for the sequence [1, 3, 2, 8], you can remove the adjacent elements (1, 3) because their sum is even (4). Afterwards, the remaining sequence will be [2, 8], and its length is 2. If the sequence is [1, 2, 3, 4], you can remove the adjacent elements (3, 4) because their sum is even (7), and the remaining sequence would be [1, 2], and its length is also 2.","solution":"def max_sequence_length_after_removal(n, sequence): Given the length of sequence n and the sequence of integers, this function returns the maximum length of the sequence after performing the operation of removing two adjacent elements with an even sum exactly once. for i in range(n - 1): if (sequence[i] + sequence[i + 1]) % 2 == 0: return n - 2 return n def process_test_cases(test_cases): results = [] for n, sequence in test_cases: result = max_sequence_length_after_removal(n, sequence) results.append(result) return results"},{"question":"You are given a grid where each cell contains a non-negative integer representing the number of candies in that cell. You have a robot that starts at the top-left corner of the grid (cell (0, 0)). The robot wants to collect as many candies as possible and reach the bottom-right corner of the grid (cell (n-1, m-1)). However, the robot can only move to the right or down at each step. Your task is to calculate the maximum number of candies the robot can collect on its way to the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers representing the grid, where the j-th integer in the i-th row is the number of candies in the cell (i, j). Output Print a single integer — the maximum number of candies the robot can collect. Example Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 29 Explanation: The robot should follow the path: (0,0) → (0,1) → (0,2) → (1,2) → (2,2), collecting a total of 1+2+3+6+9 = 21 candies. Another optimal path could be (0,0) → (1,0) → (2,0) → (2,1) → (2,2), collecting a total of 1+4+7+8+9 = 29 candies.","solution":"def max_candies(grid): Calculates the maximum number of candies the robot can collect. Parameters: grid (list of list of int): A 2D list representing the grid. Returns: int: The maximum number of candies the robot can collect. n = len(grid) m = len(grid[0]) # Initialize a dp array with same dimensions as grid dp = [[0]*m for _ in range(n)] # Base case: start at the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value in the bottom-right corner is the answer return dp[n-1][m-1]"},{"question":"Given an array of positive integers, find the maximum length of a subarray that contains elements in increasing order. A subarray is defined as a contiguous portion of the array. Two elements, ai and aj, are in increasing order if ai < aj and i < j. Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 1000). Description of the test cases follows. The first line of each test case contains a single integer n (1 ≤ n ≤ 100) — the length of the array. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. For each test case, output a single line containing the maximum length of an increasing subarray. Example: Input: 3 6 1 2 1 2 3 4 5 5 4 3 2 1 8 1 3 5 2 4 6 7 8 Output: 4 1 5 Explanation: In the first test case, the longest increasing subarray is [1, 2, 3, 4] with length 4. In the second test case, there are no increasing subarrays with length more than 1, so the output is 1. In the third test case, the longest increasing subarray is [2, 4, 6, 7, 8] with length 5.","solution":"def max_increasing_subarray_length(n, arr): Given an array of positive integers, find the maximum length of a subarray that contains elements in increasing order. :param n: int, the length of the array :param arr: list of int, the elements of the array :return: int, the maximum length of an increasing subarray if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length def process_test_cases(test_cases): Processes multiple test cases for finding the maximum length of an increasing subarray. :param test_cases: list of tuples, each containing (n, arr) :return: list of int, results for each test case results = [] for n, arr in test_cases: results.append(max_increasing_subarray_length(n, arr)) return results"},{"question":"You are given a list of students\' grades from a coding course. Each grade represents the number of points a student scored. Your task is to determine the minimum number of points that need to be added or subtracted to bring every student\'s grade to a passing score of at least 50 points. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of students. The second line contains n space-separated integers g1, g2, ..., gn (0 ≤ gi ≤ 100) representing the grades of the students. Print the minimum number of total points that need to be distributed (either added or subtracted) to make every student\'s grade at least 50. In the first sample, a passing score for each of the students can be achieved by adding 10 to the first student\'s score and 5 to the second student\'s score, for a total of 15 points. In the second sample, the third student already has a passing score of 55, so no points are needed for that student. We need to add 10 points to the first student\'s score and 15 points to the second student\'s score, making a total of 25 points. # Sample Input 1 ``` 3 40 45 50 ``` # Sample Output 1 ``` 15 ``` # Sample Input 2 ``` 3 40 35 55 ``` # Sample Output 2 ``` 25 ```","solution":"def minimum_points_to_pass(n, grades): Calculate the minimum number of points needed to bring every student\'s grade to at least 50. Parameters: n (int): The number of students grades (List[int]): List of grades of the students Returns: int: Minimum number of total points that need to be added to make every student\'s grade at least 50. total_points_needed = 0 for grade in grades: if grade < 50: total_points_needed += 50 - grade return total_points_needed # Example of how to call the function # n = 3 # grades = [40, 45, 50] # output = minimum_points_to_pass(n, grades) # print(output) # Should print 15"},{"question":"You are given two strings: a source string and a target string. Your task is to determine the minimum number of operations required to convert the source string into the target string. The operations you can use are: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace a character with another character. Write a function that takes two strings as input - source and target - and returns an integer denoting the minimum number of operations required. # Input Format - The first line contains the source string, a non-empty string of length not exceeding 1000. - The second line contains the target string, a non-empty string of length not exceeding 1000. # Output Format - Print a single integer - the minimum number of operations required to convert the source string into the target string. # Examples **Example 1:** ``` Input: kitten sitting Output: 3 Explanation: The conversions that take place are: kitten → sitten (substitute \'k\' with \'s\') sitten → sittin (substitute \'e\' with \'i\') sittin → sitting (insert \'g\') ``` **Example 2:** ``` Input: intention execution Output: 5 Explanation: The conversions that take place are: intention → inention (remove \'t\') inention → enention (substitute \'i\' with \'e\') enention → exention (substitute \'n\' with \'x\') exention → exection (substitute \'n\' with \'c\') exection → execution (insert \'u\') ``` # Constraints - 1 ≤ length(source), length(target) ≤ 1000 - Both strings consist only of lowercase English letters.","solution":"def min_operations(source, target): Returns the minimum number of operations required to convert source string into target string. m = len(source) n = len(target) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] bottom up for i in range(m + 1): for j in range(n + 1): # If source is empty, the only option is to insert all characters of target if i == 0: dp[i][j] = j # Minimum operations = j # If target is empty, the only option is to remove all characters of source elif j == 0: dp[i][j] = i # Minimum operations = i # If last characters are the same, ignore the last char and recur for remaining string elif source[i-1] == target[j-1]: dp[i][j] = dp[i-1][j-1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"There are two arrays, A and B, each containing n integers. Your task is to determine if it is possible to rearrange the elements of array B so that every element in array B is greater than or equal to the corresponding element in array A. You can swap any two elements in array B as many times as needed. The first line of input contains integer n (1 ≤ n ≤ 2·10^5), the number of elements in each of the arrays. The second line contains n integers A1, A2, ..., An (1 ≤ Ai ≤ 10^9), the elements of array A. The third line contains n integers B1, B2, ..., Bn (1 ≤ Bi ≤ 10^9), the elements of array B. Output \\"YES\\" if it is possible to rearrange B to meet the condition, otherwise output \\"NO\\". # Example Input: ``` 3 2 3 4 3 4 5 ``` Output: ``` YES ``` Input: ``` 3 2 3 4 1 4 5 ``` Output: ``` NO ```","solution":"def can_rearrange_arrays(n, A, B): Determines if it\'s possible to rearrange elements of array B such that every element in array B is greater than or equal to the corresponding element in array A. Parameters: n (int): Number of elements in A and B. A (list of int): List of integers representing array A. B (list of int): List of integers representing array B. Returns: str: \\"YES\\" if it\'s possible to rearrange B as per the condition, else \\"NO\\". A.sort() B.sort() for i in range(n): if B[i] < A[i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers and a list of query ranges. For each query, you need to calculate the sum of all integers within the specified range, inclusive. The array may be updated between queries, so you should ensure that your solution efficiently handles updates. The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100000) - the number of elements in the array and the number of queries, respectively. The second line contains n space-separated integers a1, a2, ..., an (-1000000000 ≤ ai ≤ 1000000000) - the initial elements of the array. The next q lines describe the queries that you must process. Each query is in one of the two following formats: - \\"1 x v\\" which means update the x-th element of the array to v (1 ≤ x ≤ n, -1000000000 ≤ v ≤ 1000000000). - \\"2 l r\\" which means compute the sum of elements from the l-th to the r-th element (1 ≤ l ≤ r ≤ n). For each query of the second type, output the result on a new line. Input: ``` n q a1 a2 ... an query1 query2 ... queryq ``` Output: For each query of the second type, print the sum of the specified range on a new line. Example: ``` Input: 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 2 5 1 5 -5 Output: 6 13 11 ``` Explanation: - Initially, the array is [1, 2, 3, 4, 5]. - The first query asks for the sum from index 1 to 3, which is 1 + 2 + 3 = 6. - The second query updates the 3rd element to 10, so the array becomes [1, 2, 10, 4, 5]. - The third query asks for the sum from index 1 to 3 again, now it is 1 + 2 + 10 = 13. - The fourth query asks for the sum from index 2 to 5, which is 2 + 10 + 4 + 5 = 21. - The fifth query updates the 5th element to -5, so the array becomes [1, 2, 10, 4, -5].","solution":"def process_queries(n, q, array, queries): result = [] for query in queries: query = query.split() if query[0] == \\"1\\": # Update query index = int(query[1]) - 1 value = int(query[2]) array[index] = value elif query[0] == \\"2\\": # Sum query left = int(query[1]) - 1 right = int(query[2]) result.append(sum(array[left:right])) return result"},{"question":"Walter has decided to assess the network infrastructure of his corporate building. The network is represented as an undirected graph, where each node represents a router and each edge represents a direct wired connection between two routers. Walter wants to ensure that the network is robust against failures. To do this, he needs to identify all the critical connections in the network. A connection (u, v) is critical if removing it will cause the network to become disconnected. Your task is to help Walter by finding all the critical connections in the network. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000) — the number of routers and the number of direct connections between them, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a direct connection between the routers u and v. Output an integer k — the number of critical connections. Then output k lines, each containing two integers u and v describing a critical connection. The connections should be listed in lexicographical order. If there are no critical connections, output 0. Example: Input: 4 4 1 2 1 3 3 4 1 4 Output: 1 1 2 Note: There might be multiple valid answers, in which case print any one of them.","solution":"def find_critical_connections(n, m, connections): from collections import defaultdict def dfs(node, parent, discovery_time, low_time, graph, time, critical_connections): discovery_time[node] = low_time[node] = time[0] time[0] += 1 for neighbor in graph[node]: if neighbor == parent: continue if discovery_time[neighbor] == -1: dfs(neighbor, node, discovery_time, low_time, graph, time, critical_connections) low_time[node] = min(low_time[node], low_time[neighbor]) if low_time[neighbor] > discovery_time[node]: critical_connections.append((min(node, neighbor), max(node, neighbor))) else: low_time[node] = min(low_time[node], discovery_time[neighbor]) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) discovery_time = [-1] * (n + 1) low_time = [-1] * (n + 1) time = [0] critical_connections = [] for i in range(1, n + 1): if discovery_time[i] == -1: dfs(i, -1, discovery_time, low_time, graph, time, critical_connections) critical_connections.sort() return critical_connections def process_input(n, m, input_connections): connections = [tuple(map(int, connection.split())) for connection in input_connections] result = find_critical_connections(n, m, connections) output = f\\"{len(result)}n\\" for connection in result: output += f\\"{connection[0]} {connection[1]}n\\" return output.strip() # Example usage: # Input n, m = 4, 4 connections = [\\"1 2\\", \\"1 3\\", \\"3 4\\", \\"1 4\\"] # Execute print(process_input(n, m, connections))"},{"question":"Bob has a string s, consisting of lowercase English letters. He wants to make the string **palindromic**, but he can perform only the following operation: he can choose any character in the string and change it to any other lowercase English letter. To make the string palindromic, he wants to know the minimum number of such operations required. A string is considered palindromic if it reads the same from left to right as from right to left. For example, `aba`, `racecar`, and `level` are palindromic, but `abc`, `hello`, and `world` are not. The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. The following t lines contain the strings that need to be transformed into a palindrome. Each string has a length n (1 le n le 1000). For each test case, output a single integer — the minimum number of operations required to make the given string palindromic. # Example Input: ``` 3 abc abca abcd ``` Output: ``` 1 1 2 ``` # Explanation In the first test case, change `c` to `a` to get the palindrome `aba`. In the second test case, change the fourth character `a` to `c`, making it `abccba`. In the third test case, change the `a` and `d` to `b` and `c` respectively, resulting in the palindrome `abccba`. Note: It is guaranteed that each string contains only lowercase English letters.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string `s` palindromic. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations def solve_palindrome_operations(test_cases): Solves multiple test cases and returns the results as a list. results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Alice has a deck of n cards, each with a distinct integer value. She wants to maximize the sum of values of a subset of these cards based on a special rule: no two selected cards should have indices that are consecutive in the original deck. You are to determine the maximum possible sum of the values of such a subset. For example, if the deck has values [3, 2, 5, 10, 7], the optimal selected subset is [3, 10] or [5, 7] (none of which have consecutive indices), and the maximum possible sum is 13. The first line contains an integer n (1 ≤ n ≤ 50) — the number of cards in the deck. The second line contains n integers, each representing the value of a card. The values are given in the order they appear in the deck and are distinct integers between 1 and 2000. Print a single integer — the maximum sum of a subset of card values that can be obtained under the given constraint. In the first test, selecting the cards with values 3, 5, and 7 results in the maximum sum of 15 while ensuring that no two selected cards have consecutive indices. In the second test, the best selection is 2, 10 resulting in a sum of 12 as any other choice would involve consecutive indices. In the third test, the optimal selection includes the first and the third card which results in a sum of 102.","solution":"def max_subset_sum_no_consecutive(cards): Determine the maximum sum of a subset of card values such that no two selected cards have consecutive indices. n = len(cards) if n == 0: return 0 if n == 1: return cards[0] # dp[i] will be the maximum sum we can get from the first i cards without selecting consecutive cards dp = [0] * n dp[0] = cards[0] dp[1] = max(cards[0], cards[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + cards[i]) return dp[-1]"},{"question":"You are given a square matrix of size n x n, filled with integers. Your task is to rotate the matrix 90 degrees clockwise. The input consists of: - The first line contains a single integer n (2 ≤ n ≤ 50) — the size of the matrix. - The next n lines each contain n space-separated integers, representing the elements of the matrix (1 ≤ element ≤ 1000). Output the resulting matrix after rotating it 90 degrees clockwise. Example: Input: ``` 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 7 4 1 8 5 2 9 6 3 ``` Explanation: The original matrix is: ``` 1 2 3 4 5 6 7 8 9 ``` After rotating 90 degrees clockwise, the resulting matrix is: ``` 7 4 1 8 5 2 9 6 3 ```","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (list of list of int): A 2D list representing the n x n matrix. Returns: list of list of int: The rotated 2D matrix. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"A graph is a set of vertices connected by edges. You are given an undirected graph that contains both vertices and edges. Your task is to find the number of connected components in the graph. Two vertices are in the same connected component if there is a path between them that only traverses the edges of the graph. The first line of input contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 100000) — the number of vertices and the number of edges, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), describing an edge connecting vertex u and vertex v. Note that the graph may contain multiple edges and self-loops. Print a single integer — the number of connected components in the graph. For example, consider the graph in the first sample with n = 5 vertices and m = 3 edges. The graph edges are as follows: 1. (1, 2) 2. (2, 3) 3. (4, 5) This graph has two connected components: {1, 2, 3} and {4, 5}. So the output should be 2. In the second sample, the graph with n = 7 vertices and m = 4 edges has the following edges: 1. (1, 2) 2. (2, 3) 3. (4, 5) 4. (6, 7) This graph has three connected components: {1, 2, 3}, {4, 5}, and {6, 7}. Therefore, the output should be 3.","solution":"def find_connected_components(n, edges): Returns the number of connected components in an undirected graph. :param n: Number of vertices. :param edges: List of edges, each edge is a tuple (u, v) which represents an undirected edge connecting u and v. :return: Number of connected components in the graph. from collections import defaultdict, deque def bfs(node): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() components_count = 0 for vertex in range(1, n + 1): if vertex not in visited: components_count += 1 visited.add(vertex) bfs(vertex) return components_count"},{"question":"Jacob is a competitive programmer and loves solving challenges. One day, he stumbled upon a problem involving prime numbers. He found it interesting and decided to solve it in an efficient manner. Given two integers, `A` and `B`, Jacob needs to find the number of prime numbers that exist in the closed interval [A, B] (including both endpoints A and B). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to help Jacob by writing a function that accepts two integers and returns the number of prime numbers in the interval [A, B]. # Input The input consists of two space-separated integers, `A` and `B` (1 ≤ A ≤ B ≤ 10^5), which represent the range [A, B] respectively. # Output Print a single integer — the count of prime numbers in the interval [A, B]. # Example Input: ``` 10 20 ``` Output: ``` 4 ``` Explanation: The prime numbers in the interval [10, 20] are 11, 13, 17, and 19. Hence, the output is 4. # Note The problem involves generating prime numbers efficiently and counting the number of those prime numbers within the specified interval. Given the constraint size, consider using the Sieve of Eratosthenes or any other efficient prime-checking method.","solution":"def count_primes_in_range(A, B): Returns the number of prime numbers in the closed interval [A, B]. # Sieve of Eratosthenes for prime number generation up to 10^5 max_limit = 100000 is_prime = [True] * (max_limit + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= max_limit: if is_prime[p]: for i in range(p * p, max_limit + 1, p): is_prime[i] = False p += 1 # Counting the number of primes in the range [A, B] prime_count = 0 for number in range(A, B + 1): if is_prime[number]: prime_count += 1 return prime_count"},{"question":"A company has decided to automate its accounting process. One essential task is to determine the revenue generated over a specific period. Each transaction is recorded with a date and an amount. The accounting team wants a system that can quickly calculate the total revenue for any given date range. You are given a list of transactions. Each transaction is represented by a tuple containing a date and an amount. The date is in the format `YYYY-MM-DD`, and the amount is an integer which can be positive or negative. Your task is to process multiple queries to calculate the total revenue for specified date ranges. Implement a function `calculate_revenue(transactions: List[Tuple[str, int]], queries: List[Tuple[str, str]]) -> List[int]` to accomplish this task. Here’s how the input and output will be provided: **Input:** - `transactions`: a list of tuples where each tuple consists of two elements - a date (`str`) in `YYYY-MM-DD` format and an amount (`int`). - `queries`: a list of tuples where each tuple consists of two elements - a start date (`str`) in `YYYY-MM-DD` format and an end date (`str`) in `YYYY-MM-DD` format. **Output:** - A list of integers where each integer represents the total revenue for the corresponding query date range. **Example:** ```python transactions = [ (\'2023-01-01\', 100), (\'2023-01-02\', 200), (\'2023-01-03\', -50), (\'2023-01-04\', 300) ] queries = [ (\'2023-01-01\', \'2023-01-02\'), (\'2023-01-01\', \'2023-01-04\'), (\'2023-01-02\', \'2023-01-03\') ] print(calculate_revenue(transactions, queries)) ``` **Expected Output:** ``` [300, 550, 150] ``` **Explanation:** - For the first query, the total revenue from `2023-01-01` to `2023-01-02` is `100 + 200 = 300`. - For the second query, the total revenue from `2023-01-01` to `2023-01-04` is `100 + 200 - 50 + 300 = 550`. - For the third query, the total revenue from `2023-01-02` to `2023-01-03` is `200 - 50 = 150`.","solution":"from typing import List, Tuple import datetime def calculate_revenue(transactions: List[Tuple[str, int]], queries: List[Tuple[str, str]]) -> List[int]: def str_to_date(date_str: str) -> datetime.date: return datetime.datetime.strptime(date_str, \\"%Y-%m-%d\\").date() transactions = [(str_to_date(date), amount) for date, amount in transactions] results = [] for start_date_str, end_date_str in queries: start_date = str_to_date(start_date_str) end_date = str_to_date(end_date_str) total_revenue = sum(amount for date, amount in transactions if start_date <= date <= end_date) results.append(total_revenue) return results"},{"question":"You are given an array of integers representing the heights of a group of people. You need to determine the maximum difference in heights between any two people while following these rules: you can remove at most one person from the array to maximize the difference. Write a function that takes an array of integers as input and returns the maximum possible difference in heights. # Input - The first line contains an integer n (2 le n le 10^5) — the number of people. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^9) — the heights of the people. # Output - Print a single integer — the maximum possible difference in heights after removing at most one person. # Example Input ```plaintext 5 10 3 8 6 7 ``` Output ```plaintext 7 ``` # Explanation - Without removing any person, the difference between the maximum and minimum heights is 10 - 3 = 7. - If we remove the person with height 3, the difference is 10 - 6 = 4. - If we remove the person with height 10, the difference is 8 - 3 = 5. - If we remove the person with height 8, the difference is 10 - 3 = 7. - If we remove the person with height 6, the difference is 10 - 3 = 7. - If we remove the person with height 7, the difference is 10 - 3 = 7. Therefore, the maximum difference in heights after removing at most one person is 7.","solution":"def max_difference_with_removal(heights): Returns the maximum possible difference in heights after removing at most one person. n = len(heights) if n <= 2: return 0 # If there are only two people, removing one leaves no difference sorted_heights = sorted(heights) # Case 1: Remove the smallest height (max diff is between second smallest and largest) max_diff_remove_min = sorted_heights[-1] - sorted_heights[1] # Case 2: Remove the largest height (max diff is between smallest and second largest) max_diff_remove_max = sorted_heights[-2] - sorted_heights[0] # Case 3: Remove none (original max diff) max_diff_no_removal = sorted_heights[-1] - sorted_heights[0] return max(max_diff_remove_min, max_diff_remove_max, max_diff_no_removal)"},{"question":"You are given an array of n integers. Your task is to rearrange the array into a new one such that the absolute difference between any two consecutive elements is minimized. If there are multiple solutions, you can return any of them. The first line of input contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9), the elements of the array. Output a single line containing the rearranged array such that the absolute difference between any two consecutive elements is minimized. In the first example, one possible rearrangement is [1, 2, 5, 6]. The absolute differences are |1-2|=1, |2-5|=3, |5-6|=1. In the second example, one possible rearrangement is [2, 3, 7, 10, 12]. The absolute differences are |2-3|=1, |3-7|=4, |7-10|=3, |10-12|=2.","solution":"def rearrange_min_abs_diff(arr): Given an array of integers, rearrange it such that the absolute difference between any two consecutive elements is minimized. Parameters: arr (list): List of integers Returns: list: Rearranged list of integers arr.sort() return arr"},{"question":"You are given an array of n integers. Two players, Alice and Bob, take turns selecting a non-empty subarray and removing it from the array. Alice always plays first. The game ends when the array is empty. The player who cannot make a move loses the game. Both players play optimally. You need to determine the winner of the game. Input: - The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) - the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) - the elements of the array. Output: - Print \\"Alice\\" if Alice is guaranteed to win, otherwise print \\"Bob\\". Example: Input: 3 1 2 3 Output: Alice Input: 4 1 2 1 1 Output: Bob Note: In the first example, Alice can win by removing the entire array in her first move. In the second example, whatever subarray Alice removes initially will leave Bob in a winning position, so Bob will win if both play optimally.","solution":"def find_winner(n, array): Determines the winner of the game with given array. Alice starts first, and both play optimally. :param n: int, the length of the array :param array: list, the array of integers :return: str, \\"Alice\\" or \\"Bob\\" # If n is odd, Alice can always win by removing the entire array first. # If n is even, Bob will win assuming optimal play from both sides. if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Erin is planning to visit her grandmother, who lives in a high-rise apartment building. Unfortunately, the building\'s elevators are very slow, and Erin wants to minimize the time spent waiting and riding the elevator. The building has `n` floors, numbered from `1` to `n`, and Erin\'s grandmother lives on the `k`-th floor. Erin starts on the first floor and the elevator mechanism is such that it stops at every second floor it passes (that is, if it starts at floor 1, it will next stop at floor 3, then at floor 5, and so on). Erin wants to know the minimum number of elevator stops before reaching her grandmother’s floor. If the elevator passes the required floor without stopping, Erin will have to get off at the closest previous stop and climb the remaining floors on foot. You need to write a program that calculates the minimum number of elevator stops Erin must wait for before she reaches or surpasses her grandmother’s floor. The first line contains two integers `n` (2 ≤ n ≤ 10^6) — the number of floors in the building, and `k` (2 ≤ k ≤ n) — the floor number where Erin’s grandmother lives. Output the minimum number of elevator stops before Erin reaches or surpasses her grandmother’s floor. # Example Input: ``` 10 7 ``` Output: ``` 3 ``` Explanation: The elevator stops at floors 1, 3, 5, 7, 9, etc. To reach the 7th floor, Erin has to wait for the elevator to stop three times. The stops are at floors 1, 3, 5, and 7, so the answer is 3.","solution":"def min_elevator_stops(n, k): Returns the minimum number of elevator stops before Erin reaches or surpasses her grandmother\'s floor. The elevator stops at every second floor it passes. # Starting from the first floor. current_floor = 1 stops_count = 0 while current_floor < k: # Move the floor up by 2 for every stop current_floor += 2 stops_count += 1 return stops_count"},{"question":"Given a positive integer n, find the minimum number of change operations required to make the integer palindrome. A change operation involves changing one digit to any other digit. A palindrome is a number that reads the same backward as forward. The first line contains a single integer n (1 leq n leq 10^6). Output a single integer, the minimum number of change operations needed to make n a palindrome. **Examples:** **Input:** 12321 **Output:** 0 **Input:** 12345 **Output:** 2 **Input:** 10011 **Output:** 1 **Explanation:** In the first example, the number is already a palindrome, so no changes are needed. In the second example, the minimum operations are changing the 2nd digit (2) to 4 and the 4th digit (4) to 2, resulting in the palindrome 12421. In the third example, changing the 2nd digit (0) to 1 makes the number a palindrome (10101).","solution":"def min_changes_to_palindrome(n): Returns the minimum number of change operations required to make the integer n palindrome. s = str(n) length = len(s) changes = 0 for i in range(length // 2): if s[i] != s[length - 1 - i]: changes += 1 return changes"},{"question":"A popular e-commerce company wants to analyze their sales data to find out the best-selling product for each category. The data consists of multiple transactions, where each transaction includes a category and a product sold in that category. Your task is to determine the product with the highest number of sales for each category. The first line contains an integer n (1 ≤ n ≤ 100,000), the number of transactions. Each of the next n lines contains two space-separated strings representing the category and the product sold in that category. Both strings contain only uppercase and lowercase Latin letters and digits, having lengths between 1 and 50 inclusive. Print the best-selling product for each category. If there are multiple products with the same maximum sales in a category, print the lexicographically smallest product among them. The output should contain the best-selling product for each category, printed in lexicographical order of the category names. Each line should contain the category name, followed by the product name with a space in between. # Example Input ``` 7 Electronics Laptop Furniture Sofa Electronics Phone Electronics Laptop Furniture Table Electronics Laptop Furniture Sofa ``` Output ``` Electronics Laptop Furniture Sofa ```","solution":"from collections import defaultdict, Counter def best_selling_products(transactions): category_counter = defaultdict(Counter) for category, product in transactions: category_counter[category][product] += 1 result = [] for category in sorted(category_counter.keys()): best_product = min( category_counter[category].keys(), key=lambda product: (-category_counter[category][product], product) ) result.append(f\\"{category} {best_product}\\") return result def parse_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) transactions = [line.split() for line in lines[1:n+1]] return transactions"},{"question":"Joe is developing a gardening simulation game, and he needs your help to implement a crucial feature. The game involves planting trees in a rectangular garden. The garden is represented as a grid of size n times m and each cell can either be empty or contain a tree. Joe wants to place exactly k trees in the garden such that no two trees are in adjacent cells. Two cells are considered adjacent if they share a side. Implement a function that determines if it is possible to place exactly k trees in the garden under this constraint and if yes, provide one possible arrangement. **Input:** - The first line contains a single integer t (1 leq t leq 10), the number of test cases. - Each test case consists of three integers n, m, and k (1 leq n, m leq 1000; 0 leq k leq n cdot m). **Output:** For each test case, output \\"YES\\" if it\'s possible to place exactly k trees under the given constraints and \\"NO\\" otherwise. If the output is \\"YES\\", also provide an example placement of trees in the form of an n times m grid, where \'.\' denotes an empty cell and \'T\' denotes a tree. **Example:** ``` Input: 3 3 3 4 4 4 16 5 5 13 Output: YES T.T .T. T.T NO YES T.T.T .T.T. T.T.T .T.T. T.T.T ``` **Explanation:** In the first test case, 4 trees are placed such that no two trees are adjacent. In the second test case, it\'s impossible to place 16 trees without having adjacent trees. In the third test case, 13 trees can be placed in a pattern where they are not adjacent.","solution":"def can_place_trees(t, cases): results = [] for n, m, k in cases: # For the condition, we will use a checkerboard pattern max_trees = (n * m + 1) // 2 if k > max_trees: results.append((\\"NO\\", [])) else: grid = [[\'.\' for _ in range(m)] for _ in range(n)] count = 0 for i in range(n): for j in range(m): if (i + j) % 2 == 0 and count < k: grid[i][j] = \'T\' count += 1 results.append((\\"YES\\", grid)) return results"},{"question":"You are given a sequence of events on a timeline and must determine the maximum number of events happening simultaneously at any point in time. Each event is represented by a start time and an end time. For instance, given events: - Event 1: Starts at 1 and ends at 4 - Event 2: Starts at 2 and ends at 5 - Event 3: Starts at 6 and ends at 8 If we plot these on a timeline, we see that events 1 and 2 overlap between times 2 and 4. The answer is 2 since the maximum number of overlapping events at any time is two. **Input:** - The first line contains a single integer n, the number of events (1 ≤ n ≤ 100,000). - The next n lines each contains two integers, representing the start time and end time of an event (1 ≤ start < end ≤ 1,000,000,000). **Output:** - Print a single integer, the maximum number of events that take place at the same time. **Example 1:** - Input: ``` 3 1 4 2 5 6 8 ``` - Output: ``` 2 ``` **Example 2:** - Input: ``` 4 1 10 2 6 5 8 9 12 ``` - Output: ``` 3 ```","solution":"def max_simultaneous_events(n, events): Determines the maximum number of events happening simultaneously at any point in time. :param n: Integer, number of events :param events: List of tuples, where each tuple contains the start time and end time of an event :return: Integer, maximum number of events happening simultaneously events_dict = {} for start, end in events: if start in events_dict: events_dict[start] += 1 else: events_dict[start] = 1 if end in events_dict: events_dict[end] -= 1 else: events_dict[end] = -1 max_events = 0 ongoing_events = 0 for time in sorted(events_dict): ongoing_events += events_dict[time] max_events = max(max_events, ongoing_events) return max_events"},{"question":"Alex loves playing with binary trees. He is particularly fascinated by perfect binary trees and wishes to perform operations on them. A perfect binary tree is a type of binary tree in which each level, except possibly the last, is completely filled, and all nodes are as far left as possible. Alex wants to calculate the sum of all nodes\' values at a specific depth. Your task is to write a program that calculates the sum of all nodes\' values at a given depth in a perfect binary tree. The value of each node in the tree corresponds to its position in level-order traversal, beginning from 1 for the root node. Input: - An integer `h` (1 ≤ h ≤ 20), representing the height of the perfect binary tree. - An integer `d` (0 ≤ d ≤ h-1), representing the depth at which the sum of node values needs to be calculated. Output: - A single integer, the sum of all nodes\' values at depth `d`. Note: - The depth of the root node is 0. - A perfect binary tree of height `h` has `2^h - 1` nodes in total. - If `d` equals to `0`, this means you only consider the root of the tree. Example: ``` Input: 3 2 Output: 22 ``` Explanation: For a perfect binary tree of height 3: - Nodes at depth 0: [1] - Nodes at depth 1: [2, 3] - Nodes at depth 2: [4, 5, 6, 7] The sum of the nodes at depth 2 is 4 + 5 + 6 + 7 = 22.","solution":"def sum_at_depth(h, d): Returns the sum of all node values at depth `d` in a perfect binary tree of height `h`. if d == 0: return 1 start = 2**d end = 2**(d+1) - 1 return sum(range(start, end + 1))"},{"question":"Petya is an enthusiastic gardener who loves to grow different varieties of flowers in his garden. However, maintaining the garden requires a lot of work, and Petya has decided to install an automated watering system. The garden can be represented as a grid of n rows and m columns, where each cell either contains a flower (denoted by 1) or is empty soil (denoted by 0). Petya wants to place automated sprinklers in such a way that every flower gets watered. Each sprinkler can be placed in an empty cell and can water every cell in its row and its column until it hits a flower or the edge of the garden. Petya wants the minimum number of sprinklers needed to water all the flowers. Help Petya determine this number. The first line contains two integers n and m (1 ≤ n, m ≤ 100) – the number of rows and columns in the garden. The next n lines each contain m characters, representing the garden grid. Output a single integer – the minimum number of sprinklers needed to water all the flowers. Example: Input 3 3 0 1 0 1 0 1 0 0 0 Output 3 Explanation: In the given example: 1. Place one sprinkler in (1, 2) watering cells in the first column and the second row. 2. Place another sprinkler in (2, 1) watering cells in the second row and the first column. 3. Place one more sprinkler in (2, 3) watering cells in the second row and the third column. Thus, Petya needs 3 sprinklers to water all the flowers.","solution":"def min_sprinklers_needed(garden): n = len(garden) m = len(garden[0]) if n > 0 else 0 rows_to_water = [False] * n cols_to_water = [False] * m for i in range(n): for j in range(m): if garden[i][j] == 1: rows_to_water[i] = True cols_to_water[j] = True row_counts = sum(1 for i in range(n) if rows_to_water[i]) col_counts = sum(1 for j in range(m) if cols_to_water[j]) return max(row_counts, col_counts)"},{"question":"Helen is participating in a programming contest and is currently solving problems based on strings of lowercase English letters. For one of the problems, she needs to determine if a given string can be rearranged such that no two adjacent characters are the same. She is given a string and she needs to determine if such a rearrangement is possible. Write a program to help Helen solve this problem. The program should check if the input string can be rearranged to meet the required condition, and output \\"YES\\" if it is possible, or \\"NO\\" if it is not. The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) of lowercase English letters. The length of the string is |s|. Print \\"YES\\" if the string can be rearranged such that no two adjacent characters are the same. Otherwise, print \\"NO\\". Example: ``` Input: aab Output: YES Input: aaab Output: NO ```","solution":"from collections import Counter def can_rearrange_string(s): Determines if a given string can be rearranged such that no two adjacent characters are the same. Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: \\"YES\\" if rearrangement is possible, \\"NO\\" otherwise. char_count = Counter(s) max_freq = max(char_count.values()) # To avoid adjacent characters being the same, the max frequency # character count should not be more than (length of string + 1) // 2 if max_freq > (len(s) + 1) // 2: return \\"NO\\" return \\"YES\\""},{"question":"Polycarp has a large number of candies arranged in a line. Each candy is characterized by its sweetness level, which is given as an integer. The candies are represented by an array of integers, where each integer corresponds to the sweetness level of a candy. Polycarp wants to collect the sweetest candies to create the sweetest box possible. However, there is a restriction: he can only collect candies that are contiguous in the array. Given the initial array of candies, Polycarp can perform the following operation any number of times (including zero): - Select any single candy and move it to the beginning or the end of the array. Polycarp\'s goal is to maximize the sum of sweetness levels of contiguous candies. Help Polycarp determine the maximum possible sum of contiguous candies he can obtain. The first line of the input contains one integer n (1 le n le 2000) — the number of candies. The second line contains n integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6), where a_i is the sweetness level of the i-th candy. Print one integer — the maximum possible sum of contiguous candies Polycarp can obtain. **Examples** **Input** ``` 5 -1 2 3 -2 5 ``` **Output** ``` 8 ``` **Input** ``` 4 -1 -2 -3 -4 ``` **Output** ``` -1 ```","solution":"def max_contiguous_sum(n, sweetness_levels): Returns the maximum possible sum of contiguous candies Polycarp can obtain. # This problem is a variant of the maximum subarray sum problem. # We can solve it using Kadane\'s Algorithm. # Initialize the maximum sum and the current sum max_sum = sweetness_levels[0] current_sum = sweetness_levels[0] for i in range(1, n): current_sum = max(sweetness_levels[i], current_sum + sweetness_levels[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of n integers representing the playing times of songs in a playlist. You want to create a mixtape by selecting a contiguous subsequence of this list such that the total playing time is exactly t minutes. Determine whether such a subsequence exists. Given an integer n (1 ≤ n ≤ 105) representing the number of songs and an integer t (1 ≤ t ≤ 109) representing the desired total playing time, followed by n integers s1, s2, ..., sn (1 ≤ si ≤ 104) representing the playing times of the songs. If such a subsequence exists, print \\"YES\\". Otherwise, print \\"NO\\". Input: - The first line contains two integers, n and t. - The second line contains n integers representing the playing times of the songs. Output: - Print \\"YES\\" if there exists a contiguous subsequence with a total playing time of exactly t minutes, otherwise print \\"NO\\". Example: Input: 8 15 1 2 3 4 5 6 7 8 Output: YES (Note: In the example above, the contiguous subsequence [2, 3, 4, 5, 1] has a total playing time of 15 minutes.)","solution":"def check_subsequence_with_sum(n, t, times): Returns \'YES\' if there exists a contiguous subsequence with a total playing time of exactly t minutes, otherwise returns \'NO\'. # Initialize pointers for the sliding window and the current sum left = 0 current_sum = 0 for right in range(n): # Add the current element to the current_sum current_sum += times[right] # While current_sum exceeds t, move the left pointer to the right to decrease the sum while current_sum > t and left <= right: current_sum -= times[left] left += 1 # Check if we\'ve found the exact sum if current_sum == t: return \\"YES\\" # If no such subsequence is found, return \\"NO\\" return \\"NO\\""},{"question":"Ingrid loves the game of Array Rotation. Given an array of integers, she is required to perform multiple operations on it. Each operation can be of two types: 1. Rotate the entire array to the right by k positions. 2. Reverse the subarray from index L to R (inclusive). These operations can be performed multiple times in any order. After applying the series of operations, Ingrid\'s task is to find the sum of the entire array. You need to write a function that takes as input, an array of integers, a list of operations, and produces the final sum of the array after all operations are applied. The input will be formatted as follows: - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the size of the array and the number of operations. - The second line contains n space-separated integers representing the elements of the array. - Each of the next m lines describes an operation in one of the following formats: - \\"R k\\" (1 ≤ k ≤ 10^9) indicates a right rotation of the entire array by k positions. - \\"S L R\\" (0 ≤ L ≤ R < n) indicates a reversal of the subarray from index L to index R. Output the sum of the array after all operations have been applied. For example, given the operations to perform on the array: ``` 5 3 1 2 3 4 5 R 2 S 1 3 R 1 ``` Firstly, rotating the array `[1, 2, 3, 4, 5]` to the right by 2 positions results in `[4, 5, 1, 2, 3]`. Then, reversing the subarray from index 1 to 3 results in `[4, 2, 1, 5, 3]`. Finally, rotating the array `[4, 2, 1, 5, 3]` by 1 position results in `[3, 4, 2, 1, 5]`. The sum of the final array is `3 + 4 + 2 + 1 + 5 = 15`. In the first example, the final array is [3, 4, 2, 1, 5], and the output will be `15`.","solution":"def rotate_right(arr, k): n = len(arr) k %= n return arr[-k:] + arr[:-k] def reverse_subarray(arr, L, R): arr[L:R+1] = arr[L:R+1][::-1] def process_operations(arr, operations): for operation in operations: op = operation.split() if op[0] == \'R\': k = int(op[1]) arr = rotate_right(arr, k) elif op[0] == \'S\': L = int(op[1]) R = int(op[2]) reverse_subarray(arr, L, R) return sum(arr) # Example usage # n, m = 5, 3 # arr = [1, 2, 3, 4, 5] # operations = [\\"R 2\\", \\"S 1 3\\", \\"R 1\\"] # result = process_operations(arr, operations) # print(result) # Should print 15"},{"question":"You are given a string of lowercase English letters and an integer k. Your task is to determine the maximum number of unique substrings of length k that can be extracted from the string. A substring is defined as any contiguous sequence of characters within the string. The problem should be solved efficiently given the constraints. The first line contains an integer n (1 le n le 10^5) — the length of the string. The second line contains a string s of length n consisting of lowercase English letters. The third line contains an integer k (1 le k le n). Print a single integer — the maximum number of unique substrings of length k. For example, if the input is \\"abcabc\\" and 3, the unique substrings of length 3 are { \\"abc\\", \\"bca\\", \\"cab\\" }, thus the output should be 3.","solution":"def max_unique_substrings(s, k): Returns the maximum number of unique substrings of length k from the input string s. seen = set() n = len(s) for i in range(n - k + 1): substring = s[i:i+k] seen.add(substring) return len(seen)"},{"question":"Tanya is a biologist who likes to walk through the forest and collect samples of mushrooms. Each mushroom Tanya collects is either edible, poisonous, or unknown. Tanya is very careful and always tries to avoid collecting poisonous mushrooms. She has a special device that can identify mushrooms and classify them. However, the device takes some time to identify each mushroom. Given is a sequence of mushrooms Tanya has collected. Each mushroom is represented by a character: \'E\' for an edible mushroom, \'P\' for a poisonous mushroom, and \'U\' for an unknown mushroom. Tanya can analyze a mushroom in one second, and once it is identified, she can decide whether to pick it or not. If Tanya identifies an unknown mushroom, it can turn out to be either edible or poisonous. Tanya wants to find out the minimum time required to pick all the edible mushrooms without picking any poisonous ones. Note that Tanya can skip analysis for mushrooms that she remembers (i.e., they are already identified as \'E\' or \'P\'). The first line contains an integer n (1 ≤ n ≤ 100,000), the number of mushrooms Tanya collected. The second line contains a string of length n consisting of characters \'E\', \'P\', and \'U\'. Print the minimum time in seconds required to pick all edible mushrooms without picking any poisonous ones. # Example Input: 7 UEUEPPE Output: 4 Explanation: - Tanya identifies the first mushroom (unknown): it turns out to be edible (1 second). - Tanya identifies the second mushroom (edible): she knows it\'s edible (0 seconds). - Tanya identifies the third mushroom (unknown): it turns out to be edible (1 second). - Tanya identifies the fourth mushroom (edible): she knows it\'s edible (0 seconds). - Tanya sees the fifth mushroom is poisonous: she skips it (0 seconds). - Tanya sees the sixth mushroom is poisonous: she skips it (0 seconds). - Tanya identifies the seventh mushroom (edible): she knows it\'s edible (0 seconds). Total time = 1 (for the 1st mushroom) + 1 (for the 3rd mushroom) + 0 + 0 + 0 + 0 = 2 seconds. Only edible mushrooms are picked.","solution":"def minimum_time_to_pick_edible_mushrooms(n, mushrooms): Returns the minimum time required to pick all edible mushrooms without picking any poisonous ones. Parameters: n (int): Number of mushrooms mushrooms (str): String of length n consisting of characters \'E\', \'P\', and \'U\' Returns: int: Minimum time in seconds time = 0 for mushroom in mushrooms: if mushroom == \'U\': time += 1 return time"},{"question":"A bakery is organizing a promotional event where they give away customized cake boxes. Each cake box should contain exactly one of each type of cake. There are `n` types of cakes, and the bakery has a fixed number of cakes for each type. To ensure they can distribute the boxes as fairly as possible, the bakery wants to know the maximum number of cake boxes they can create. If they have more cakes of certain types, those cakes may be left over. Write a function `max_cake_boxes(cake_counts: List[int]) -> int` that determines the maximum number of cake boxes that can be created. The input is a list of integers where each integer represents the number of cakes available for each type. Your function should return an integer representing the maximum number of complete cake boxes that can be formed. # Input: - The input consists of a list `cake_counts` of size `n` (1 le n le 1000) where each element is an integer in the range 1 le cake_counts[i] le 10^6. # Output: - Return a single integer representing the maximum number of complete cake boxes that can be formed with the available cakes. # Example: Example 1: # Input: ```python cake_counts = [3, 1, 2] ``` # Output: ```python 1 ``` # Explanation: There are three types of cakes with the given counts. The bakery can create one complete cake box with one of each type of cake (one from type 1, one from type 2, and one from type 3), leaving 2 cakes of type 1 and 1 cake of type 3. Example 2: # Input: ```python cake_counts = [6, 2, 2, 5] ``` # Output: ```python 2 ``` # Explanation: The bakery can create two complete cake boxes with the given cake counts. After creating two boxes, the counts would be [4, 0, 0, 3], and no more complete boxes can be formed. # Note: - The function should not modify the input list. - The time complexity of your solution should be efficient enough to handle the upper limits of the constraints. # Function signature: ```python def max_cake_boxes(cake_counts: List[int]) -> int: # your code here ```","solution":"from typing import List def max_cake_boxes(cake_counts: List[int]) -> int: Returns the maximum number of complete cake boxes that can be created. Each cake box should contain exactly one of each type of cake. return min(cake_counts) # The limiting factor is the type of cake that has the fewest cakes"},{"question":"Lola is a chef who loves to experiment with spices. She has n different spices, and she wants to create a special blend using these spices. Each spice i has a unique flavor intensity represented by an integer value fi. Lola\'s recipe dictates that she chooses exactly half the spices from her collection to create a perfect balance of flavor. She defines the \\"balance\\" of her blend as the absolute difference between the sum of the flavor intensities of the selected spices and the sum of the flavor intensities of the unselected spices. Help Lola find the minimum possible balance of her spice blend. The first input line contains an integer n (2 ≤ n ≤ 20, and n is always even) — the number of spices. The second line contains n integers fi (0 ≤ fi ≤ 1000) — the flavor intensities of the spices, separated by space. Print a single integer — the minimum possible balance of Lola\'s spice blend. **Examples:** **Input 1:** ``` 4 10 20 30 40 ``` **Output 1:** ``` 0 ``` **Explanation 1:** Lola can select the spices with intensities 10 and 30, and the unselected spices will have intensities 20 and 40. Both sums are equal to 40, resulting in a minimum balance of 0. **Input 2:** ``` 6 1 2 3 4 5 6 ``` **Output 2:** ``` 1 ``` **Explanation 2:** One possible selection is spices with intensities 1, 2, and 6. The sum is 9, and the sum of the unselected spices is 12. The absolute difference is 3. However, selecting spices with intensities 1, 5, and 6 (sum 12), and spices with intensities 2, 3, and 4 (sum 9) results in a minimum balance of 1.","solution":"from itertools import combinations def find_minimum_balance(n, fi): Finds the minimum possible balance of Lola\'s spice blend. total_sum = sum(fi) half_n = n // 2 min_balance = float(\'inf\') for combo in combinations(fi, half_n): selected_sum = sum(combo) unselected_sum = total_sum - selected_sum balance = abs(selected_sum - unselected_sum) if balance < min_balance: min_balance = balance return min_balance"},{"question":"You are given a list of integers representing the length of ropes. Your task is to minimize the cost to connect all ropes into one single rope. You can connect any two ropes into a new rope in each step, and the cost of connecting two ropes is the sum of their lengths. You need to keep repeating this process until only one rope remains. The first line of input contains a single integer n (1 ≤ n ≤ 100,000) representing the number of ropes. The second line contains n integers separated by spaces, each representing the length of a rope. Output a single integer which is the minimum total cost to combine all ropes into one. For example: In the first sample, there is only one rope of length 4, so no cost is needed. In the second sample, the ropes can be combined as follows: - Combine rope with length 2 and rope with length 3 to get a new rope with length 5 (cost = 5). - Combine the new rope with length 5 and the rope with length 4 to get a new rope with length 9 (cost = 9). Total cost = 5 + 9 = 14. In the third sample, a possible approach could be: - Combine rope with length 1 and rope with length 2 to get a new rope with length 3 (cost = 3). - Combine rope with length 3 and the new rope with length 3 to get a new rope with length 6 (cost = 6). - Combine rope with length 4 and the new rope with length 6 to get a new rope with length 10 (cost = 10). Total cost = 3 + 6 + 10 = 19. Sample Input/Output: Input: 1 4 Output: 0 Input: 3 2 3 4 Output: 14 Input: 4 1 2 3 4 Output: 19","solution":"import heapq def min_cost_to_combine_ropes(n, ropes): if n == 1: return 0 heapq.heapify(ropes) total_cost = 0 while len(ropes) > 1: first = heapq.heappop(ropes) second = heapq.heappop(ropes) cost = first + second total_cost += cost heapq.heappush(ropes, cost) return total_cost"},{"question":"A conference organizing committee wants to issue digital certificates to participants who attend all sessions on a given day. Each participant is identified by their unique email address. Different sessions have different start and end times, but no two sessions overlap. Given a list of sessions with their respective start and end times, and a list of check-ins by participants (with each check-in including the session\'s ID and the participant\'s email address), write a program that determines which participants have attended all sessions and should receive a certificate. A session\'s start and end time is represented in the format \\"HH:MM-HH:MM\\" (24-hour clock). A participant is considered to have attended a session if they checked in for that session. The session data and check-in data have the following constraints: - For each session, the format is: `SessionID HH:MM-HH:MM`. - For each check-in, the format is: `SessionID Email`. The input will be provided as follows: - The first line contains an integer `s` (1 ≤ s ≤ 100), the number of sessions. - The next `s` lines contain the session ID and the session\'s start and end time. - The following line contains an integer `c` (1 ≤ c ≤ 10,000), the number of check-ins. - The next `c` lines contain a session ID and a participant\'s email address. The output should be: - A list of email addresses of participants who attended all sessions, in lexicographical order. Sample Input: ``` 3 1 09:00-10:00 2 10:30-11:30 3 12:00-13:00 5 1 john@example.com 2 john@example.com 3 john@example.com 1 jane@example.com 2 jane@example.com ``` Sample Output: ``` john@example.com ``` Explanation: - John attended all sessions (1, 2, 3) based on check-ins and should receive a certificate. - Jane did not attend session 3, so she should not receive a certificate.","solution":"def get_certified_participants(session_data, checkin_data): sessions = {} checkins_by_email = {} # Read session data for session in session_data: session_id, time_period = session.split() sessions[session_id] = time_period # Read check-in data for checkin in checkin_data: session_id, email = checkin.split() if email not in checkins_by_email: checkins_by_email[email] = set() checkins_by_email[email].add(session_id) # Determine certified participants all_sessions_set = set(sessions.keys()) certified_participants = [ email for email, checked_sessions in checkins_by_email.items() if checked_sessions == all_sessions_set ] return sorted(certified_participants)"},{"question":"Given a binary string of length n, you are allowed to remove some (possibly zero) characters from the string to make the resulting string consist only of \'0\'s or only of \'1\'s. Your task is to determine the minimum number of characters that need to be removed to achieve this. The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the length of the binary string. The second line contains a binary string of length n, consisting of the characters \'0\' and \'1\'. Print a single integer — the minimum number of characters to be removed to make the resulting string consist only of \'0\'s or only of \'1\'s. Example: Input: 5 11010 Output: 2 In this example, you can remove the \'1\' at index 2 and the \'1\' at index 4 to obtain the string \\"000\\". Alternatively, you can remove the \'0\' at index 3 and the two \'0\'s at indexes 4 and 5 to obtain the string \\"111\\". Either option involves removing 2 characters.","solution":"def min_removals_to_uniform_binary_string(n, binary_string): Returns the minimum number of characters to be removed to make the binary string consist of only \'0\'s or only \'1\'s. Parameters: n (int): Length of the binary string (1 ≤ n ≤ 2 * 10^5). binary_string (str): The binary string consisting of \'0\'s and \'1\'s. Returns: int: Minimum number of characters to be removed. count_0 = binary_string.count(\'0\') count_1 = n - count_0 # Since the string consists only of \'0\'s and \'1\'s, count_1 can be derived # Either remove all \'0\'s or all \'1\'s, take the minimum of these two options return min(count_0, count_1)"},{"question":"In a fictional city, there is a unique system of roads connecting several districts. The roads form a tree structure, meaning that there is exactly one path between any two districts. Each road has a certain length. The mayor decided to launch a new public transportation service called \\"District Connect.\\" People can use this service to travel between any two districts. However, to promote more usage, the transport fee is calculated based only on the shortest road one must travel through during their journey from one district to another. Here\'s the challenge: Given the city\'s tree structure and the lengths of the roads, for each query, determine the minimum transport fee to travel between two specified districts. You will be given: 1. An integer `N` representing the number of districts (2 ≤ N ≤ 10^5). 2. Next `N-1` lines, each containing three integers `u`, `v`, and `w`, indicating a direct road between district `u` and district `v` with length `w` (1 ≤ w ≤ 10^9, 1 ≤ u, v ≤ N). 3. An integer `Q` representing the number of queries (1 ≤ Q ≤ 10^5). 4. Next `Q` lines, each containing two integers `a` and `b` (1 ≤ a, b ≤ N). For each query, output the minimum transport fee to travel from district `a` to district `b`. # Input Format: The first line contains the integer `N`. The next `N-1` lines describe the roads, each containing three integers `u`, `v`, and `w`. The next line contains the integer `Q`. The following `Q` lines each contain two integers `a` and `b`. # Output Format: For each query, output the minimum transport fee, one result per line. # Example: **Input:** ``` 5 1 2 3 1 3 2 3 4 4 3 5 1 3 4 5 1 4 2 5 ``` **Output:** ``` 1 2 1 ``` # Explanation: - The path from district 4 to 5 goes through districts 4 → 3 → 5. The minimum road length on this path is 1. - The path from district 1 to 4 goes through districts 1 → 3 → 4. The minimum road length on this path is 2. - The path from district 2 to 5 goes through districts 2 → 1 → 3 → 5. The minimum road length on this path is 1.","solution":"from collections import defaultdict, deque import sys input = sys.stdin.read sys.setrecursionlimit(200000) def find_LCA_and_minimum_edge(parent, lca_matrix, min_edge_matrix, depth, u, v): if depth[u] < depth[v]: u, v = v, u diff = depth[u] - depth[v] min_edge = float(\'inf\') for i in range(17): if (diff >> i) & 1: min_edge = min(min_edge, min_edge_matrix[u][i]) u = lca_matrix[u][i] if u == v: return min_edge for i in range(16, -1, -1): if lca_matrix[u][i] != lca_matrix[v][i]: min_edge = min(min_edge, min_edge_matrix[u][i], min_edge_matrix[v][i]) u = lca_matrix[u][i] v = lca_matrix[v][i] return min(min_edge, min_edge_matrix[u][0], min_edge_matrix[v][0]) def preprocess_lca(N, edge_connections): tree = defaultdict(list) for u, v, w in edge_connections: tree[u].append((v, w)) tree[v].append((u, w)) parent = [-1] * (N + 1) depth = [-1] * (N + 1) min_edge = [[float(\'inf\')] * 18 for _ in range(N + 1)] lca_matrix = [[-1] * 18 for _ in range(N + 1)] def dfs(u, d): stack = [(u, d, -1, float(\'inf\'))] while stack: u, d, p, w = stack.pop() parent[u] = p depth[u] = d min_edge[u][0] = w lca_matrix[u][0] = p for v, weight in tree[u]: if v != p: stack.append((v, d + 1, u, weight)) dfs(1, 0) for j in range(1, 18): for i in range(1, N + 1): if lca_matrix[i][j - 1] != -1: lca_matrix[i][j] = lca_matrix[lca_matrix[i][j - 1]][j - 1] min_edge[i][j] = min(min_edge[i][j - 1], min_edge[lca_matrix[i][j - 1]][j - 1]) return parent, lca_matrix, min_edge, depth def minimum_transport_fee(N, edge_connections, queries): parent, lca_matrix, min_edge, depth = preprocess_lca(N, edge_connections) result = [] for a, b in queries: result.append(find_LCA_and_minimum_edge(parent, lca_matrix, min_edge, depth, a, b)) return result"},{"question":"Can you design a question focusing on evaluating the performance of a sorting algorithm in a practical scenario, similar to the complexity and scope of the sample questions? **Question**: Alex has a dataset containing the results of a code competition. Each row in the dataset contains the competitor\'s ID and their score, both represented by integers. To prepare for the award ceremony, Alex needs to sort the competitors based on their scores in descending order. However, if two competitors have the same score, they should be sorted by their IDs in ascending order. To help Alex, you need to write a function that takes in a list of tuples, where each tuple contains the competitor\'s ID and score, and returns the list sorted according to the criteria mentioned above. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of competitors. Each of the following n lines contains two integers ai (1 ≤ ai ≤ 106) — the ID of the competitor, and si (1 ≤ si ≤ 109) — the score of the competitor. Output the sorted list where each element is a tuple containing the ID and score of a competitor. **Input:** ``` 5 123 450 124 450 125 500 126 400 127 450 ``` **Output:** ``` [(125, 500), (123, 450), (124, 450), (127, 450), (126, 400)] ``` **Explanation:** The competitor with ID 125 has the highest score, so they appear at the top of the sorted list. Competitors 123, 124, and 127 all have the same score of 450, so they are sorted by their IDs in ascending order. Competitor 126 has the lowest score and is placed at the end of the list.","solution":"def sort_competitors(competitors): Sorts a list of tuples containing competitor ID and score. The list is sorted first by score in descending order, then by ID in ascending order. Args: competitors (list of tuples): A list where each tuple contains two integers: the competitor\'s ID and their score. Returns: list of tuples: The sorted list of competitors. return sorted(competitors, key=lambda x: (-x[1], x[0]))"},{"question":"John is a passionate botanist and owner of a unique plant store. In his store, each type of plant is characterized by its beauty factor. John has recently received a bunch of new plants, and he wants to arrange them in such a way that the total beauty of the plants in his store is maximized. However, there’s a catch: plants of the same type must be placed together to maximize their aesthetic value. Given a list of the types of plants and their beauty factors, your task is to determine the maximum total beauty John can achieve by grouping plants of the same type together. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of plants in the store. Each of the next n lines contains an integer a_i (1 ≤ a_i ≤ 1,000) — the beauty factor of the i-th plant. Print a single integer — the maximum total beauty John can achieve by grouping plants of the same type together. For example, consider the case where there are 5 plants with beauty factors 3, 1, 4, 1, and 2. John can group the two plants with beauty factor 1 together (achieving a total beauty contribution of 2) and place the other plants individually. The maximum total beauty becomes 3 + 1 + 4 + 2 = 10.","solution":"def maximize_total_beauty(n, beauty_factors): Returns the maximum total beauty John can achieve by grouping plants of the same type together. Parameters: n (int): the number of plants in the store. beauty_factors (List[int]): the list of the beauty factors of the plants. Returns: int: Maximum total beauty. from collections import Counter # Count the occurrence of each beauty factor beauty_counts = Counter(beauty_factors) # Calculate total beauty total_beauty = sum(beauty_factor * count for beauty_factor, count in beauty_counts.items()) return total_beauty"},{"question":"A company organizes an annual coding competition with two stages: qualifications and finals. Each participant is identified by a unique number from 1 to n. In the qualification stage, participants earn scores based on their performance. At the end of the stage, the scores are analyzed to determine which participants move on to the finals. Given the rules to determine the final participants and a series of queries, your task is to simulate this process. # Problem Statement You are given a list of participants\' scores for the qualification stage and a list of queries. Each query requests information about a range of participants\' scores and asks you to determine if a specific participant\'s score is ranked within the top k scores in that range. # Input Format - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of participants, and the number of queries, respectively. - The second line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 1,000,000) — the scores of participants from 1 through n. - Each of the next q lines contains three integers l, r, and p (1 ≤ l ≤ p ≤ r ≤ n), where l and r define the inclusive range of participants\' scores to consider, and p specifies the participant number whose score ranking should be checked. # Output Format For each query, print \\"YES\\" if the score of participant p is within the top k scores in the specified range, otherwise print \\"NO\\". # Example Input ``` 5 3 50 30 60 20 40 1 5 3 2 4 1 1 3 2 ``` Output ``` YES NO YES ``` # Explanation - For the first query (1, 5, 3), the scores in the range [1,5] are [50, 30, 60, 20, 40]. The score of participant 3 is 60, which is the highest in the range. - For the second query (2, 4, 1), the scores in the range [2,4] are [30, 60, 20]. The score of participant 1 is 50, and it is not within this range. - For the third query (1, 3, 2), the scores in the range [1,3] are [50, 30, 60]. The score of participant 2 is 30, which is within the top k scores.","solution":"def is_score_in_top_k(n, q, scores, queries): Determines if a participant\'s score is within the top k scores in the specified range. n: int - number of participants q: int - number of queries scores: list of ints - list of participant scores queries: list of tuples - list of queries where each query is (l, r, p) Returns: list of strings - \'YES\' or \'NO\' for each query results = [] for (l, r, p) in queries: # Extract the sublist for the given range [l-1, r-1] (0-based indexing) sub_list = scores[l-1:r] # Sort the sublist to determine the ranking sorted_sub_list = sorted(sub_list, reverse=True) # Score of the participant p (0-based l-1 becomes l-1) participant_score = scores[p-1] # Check if the participant\'s score is in the top k of the sorted sublist if participant_score in sorted_sub_list[:r-l+1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John is working on a text editor which includes a functionality to identify all unique words in a document and count their occurrences. A word is defined as a sequence of alphabetic characters (both lowercase and uppercase) and should be case-insensitive for this task. Given a block of text, your goal is to output the number of unique words and list each word along with its frequency in alphabetical order. # Input - A single line of lowercase and uppercase alphabetic characters, spaces, commas, periods, exclamation marks, question marks, or hyphens. # Output - An integer representing the number of unique words. - For each unique word, print the word in lowercase followed by its frequency, each on a new line, ordered alphabetically. # Constraints - The length of the input text will not exceed 10^5 characters. - Words will be separated by spaces, commas, periods, exclamation marks, question marks, or hyphens. - Handle words case-insensitively. # Example **Input:** ``` Hello, world! Hello-world. HELLO? ``` **Output:** ``` 2 hello 3 world 2 ``` **Note:** - The word \\"hello\\" appears 3 times in different cases. - The word \\"world\\" appears 2 times.","solution":"import re from collections import Counter def unique_words_count(text): Identify all unique words in a document and count their occurrences. A word is defined as a sequence of alphabetic characters and should be case-insensitive. # Using regex to extract words and converting to lowercase words = re.findall(r\'[a-zA-Z]+\', text.lower()) # Count the frequency of each word word_count = Counter(words) # Sorting the words alphabetically sorted_word_count = sorted(word_count.items()) # Print the number of unique words print(len(sorted_word_count)) # Print each word with its frequency for word, count in sorted_word_count: print(f\\"{word} {count}\\") # Return the data for unit testing purposes return len(sorted_word_count), sorted_word_count"},{"question":"Kevin has a unique way of preparing for programming contests. He practices by jumping between different segments of an array and summing elements in a specific way. Let\'s have two arrays, `a` and `b`, both of length `n`. Kevin follows these rules to calculate his practice sum: 1. Select any valid index `i` (1 ≤ i ≤ n). 2. Add `a[i]` to his sum and then jumps to the index `i + b[i]`. 3. Repeat the process until he either goes out of bounds, i.e., `i + b[i] > n`, or revisits an already visited index. Kevin wonders what the maximum sum he can gather by starting from any index `i` in the array `a`. The task is to write a program to help Kevin find the maximum possible sum he can gather starting from any index. The first line contains an integer `n` (1 ≤ n ≤ 100,000) – the number of elements in the arrays. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) – the elements of the array `a`. The third line contains `n` space-separated integers `b_1, b_2, ..., b_n` (1 ≤ b_i ≤ n) – the elements of the array `b`. Output a single integer which is the maximum sum Kevin can gather. Example: ``` Input: 5 3 2 5 1 7 1 1 3 1 2 Output: 9 ``` Explanation: Kevin can start at index 4 (1-based index), gather `1` point, and then jump to index 5 -> `1 + 7 = 8`. He can\'t jump further since `i + b[i]` would put him out of bounds. Another optimal way is to start at index 1 -> 3 + jump to 2 -> 2 + jump to 3 -> 5 = 10 points, then jumps out of bounds. The highest sum he can get is `10`.","solution":"def max_practice_sum(n, a, b): max_sum = 0 def get_sum(start_index): visited = set() current_sum = 0 index = start_index while index < n and index not in visited: visited.add(index) current_sum += a[index] index += b[index] return current_sum for i in range(n): max_sum = max(max_sum, get_sum(i)) return max_sum"},{"question":"Pasha has a rectangular chocolate bar made up of R rows and C columns, with each cell representing a small piece of chocolate. He wants to break the chocolate into smaller pieces. Each time he makes a break, he must break along the full length of either a row or a column. Pasha can only break one piece at a time. He wonders what is the minimum number of breaks required to divide the whole chocolate bar into individual 1x1 pieces. Write a program that takes the number of rows and columns of the chocolate bar as input and outputs the required minimum number of breaks. The input consists of a single line containing two integers R and C (1 ≤ R, C ≤ 1000) — the number of rows and columns in the chocolate bar. Output a single integer — the minimum number of breaks required to divide the chocolate bar into individual pieces. For example, for a chocolate bar with R = 3 and C = 5, the output should be 14. **Explanation:** To divide a 3x5 chocolate bar into individual 1x1 pieces, you can make 2 breaks along the rows (to convert 3 rows into 3 individual pieces) then 12 breaks along the columns (to convert each of the 5 columns into 5 individual pieces in each of the 3 rows). The total number of breaks is 2 + 12 = 14.","solution":"def min_breaks_to_divide_chocolate(R, C): Returns the minimum number of breaks required to divide a R x C chocolate bar into 1x1 pieces. return R * C - 1 # Example function call # number_of_breaks = min_breaks_to_divide_chocolate(3, 5) # print(number_of_breaks) # Output should be 14"},{"question":"A group of junior developers is working on a project to implement a new sorting algorithm. They came up with a simple yet interesting approach. Unfortunately, they are unsure if their code handles all edge cases correctly and want you to validate their implementation. The sorting algorithm works as follows: 1. Given an array of n integers, the algorithm selects pairs of elements. 2. Each pair of elements is compared and swapped if the first element is greater than the second. 3. This process is repeated for all pairs, but only for even indices (i, i+1) where i is even. 4. Then, the process repeats for odd indices (i, i+1) where i is odd. 5. The algorithm continues alternating between sorting the even-indexed pairs and the odd-indexed pairs until the array is fully sorted. Develop a function that takes an array of integers, implements the described algorithm, and returns the sorted array. Your function should adhere to the requirements and be efficient in handling the sorting process. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output: - Print the sorted array. Example: Input: 5 3 1 4 1 5 Output: 1 1 3 4 5 Explanation: 1. In the first iteration, the pair of even-indexed elements (3, 1) and (4, 5) are considered. - After sorting even indices: [1, 3, 1, 4, 5] 2. In the second iteration, the pair of odd-indexed elements (3, 1) and (4, 5) are considered. - After sorting odd indices: [1, 1, 3, 4, 5] 3. The array is now fully sorted; thus, the algorithm terminates.","solution":"def custom_sort(n, arr): Sorts the given list using the described algorithm. Parameters: n (int): number of elements in arr arr (list of int): the array to be sorted Returns: list of int: the sorted array sorted_flag = False while not sorted_flag: sorted_flag = True # Even indexed pass for i in range(0, n - 1, 2): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] sorted_flag = False # Odd indexed pass for i in range(1, n - 1, 2): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] sorted_flag = False return arr"},{"question":"John is a passionate digital photographer and likes to edit his photos. He has a photo editing software where he can apply various filters to adjust the brightness of his photos. The software allows him to increase or decrease the brightness by specifying a sequence of operations. Each operation is represented by a pair (t, x): - If t = 1, it means increase the brightness by x units. - If t = 2, it means decrease the brightness by x units. John has n photos and he applies m operations to each photo. He wants to know the final brightness of each photo after applying all the operations starting from its initial brightness. Given the initial brightness of each photo, compute the final brightness of each photo after applying all the operations in sequence. The first line contains two integers n (1 ≤ n ≤ 100,000) — the number of photos, and m (1 ≤ m ≤ 100,000) — the number of operations. The second line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 10^9) — the initial brightness of each photo. The next m lines contain pairs of integers (t, x) representing the operations. Output n integers — the final brightness of each photo after applying all the operations in sequence. Example: Input: 3 4 10 20 15 1 5 2 3 1 10 2 2 Output: 20 30 25 Explanation: Initial brightness of photos are 10, 20, 15. We apply the operations as follows: 1. Increase brightness by 5 units: 15, 25, 20 2. Decrease brightness by 3 units: 12, 22, 17 3. Increase brightness by 10 units: 22, 32, 27 4. Decrease brightness by 2 units: 20, 30, 25","solution":"def final_brightness(n, m, initial_brightness, operations): Computes the final brightness of each photo after applying all the operations. Parameters: n (int): Number of photos. m (int): Number of operations. initial_brightness (list of int): Initial brightness of each photo. operations (list of (int, int)): List of operations to apply (t, x). Returns: list of int: Final brightness of each photo. # Initialize the result with initial brightness values brightness = initial_brightness[:] # Apply each operation in sequence for t, x in operations: if t == 1: brightness = [b + x for b in brightness] elif t == 2: brightness = [b - x for b in brightness] return brightness"},{"question":"You are given a list of strings. Your task is to identify all pairs of strings that are anagrams of each other and group them together. Each group should contain all strings that are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequency. Write a function `groupAnagrams` that takes a list of strings and returns a list of lists, where each sublist contains strings that are anagrams. The first line contains an integer `n` (`1 ≤ n ≤ 1000`) indicating the number of input strings. The next `n` lines each contain a single string `s` (`1 ≤ length(s) ≤ 100`), which can consist of lowercase English letters. Example: Input: ``` 6 eat tea tan ate nat bat ``` Output: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` Note: The output lists can be in any order and the strings within each list should maintain their original input order.","solution":"from collections import defaultdict def groupAnagrams(strs): Group strings that are anagrams of each other. Args: strs: A list of strings Returns: A list of lists, where each list contains strings that are anagrams of each other anagrams = defaultdict(list) for s in strs: sorted_str = \'\'.join(sorted(s)) anagrams[sorted_str].append(s) return list(anagrams.values())"},{"question":"You are working on a project that involves manipulating large datasets. One of the tasks involves splitting a dataset in a series of balanced splits such that the difference between the largest and smallest splits is minimized. Given an array of weights, your task is to partition this array into `k` contiguous subarrays to achieve this goal. The first line contains two integers, `n` and `k` (1 ≤ k ≤ n ≤ 100000) – the length of the array and the number of subarrays, respectively. The second line contains `n` integers, `w1, w2, ..., wn` (1 ≤ wi ≤ 1000) – the weights. Output a single integer representing the minimized maximum difference between the total weights of the largest and smallest subarrays. # Example Input ``` 7 3 5 1 2 6 4 3 8 ``` Output ``` 3 ``` # Explanation In this example, one possible way to partition the array could be: [5, 1, 2], [6, 4], [3, 8], where the sums are 8, 10, and 11, respectively. The difference between the largest (11) and smallest (8) sums is 3, which is minimized in this case.","solution":"def minimize_max_difference(n, k, weights): def canPartition(mid): partitions = 1 current_sum = 0 for weight in weights: if current_sum + weight > mid: partitions += 1 current_sum = weight if partitions > k: return False else: current_sum += weight return True low, high = max(weights), sum(weights) while low < high: mid = (low + high) // 2 if canPartition(mid): high = mid else: low = mid + 1 return low"},{"question":"Given an array of integers, you need to determine the length of the smallest contiguous subarray for which the sum is equal to or greater than a given target integer. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains a sequence of integers a1, a2, ..., an (1 ≤ ai ≤ 10,000) — the elements of the array. The third line contains a single integer target (1 ≤ target ≤ 10,000,000) — the target sum. Print a single integer m — the length of the smallest contiguous subarray for which the sum is equal to or greater than the target. If no such subarray exists, print 0. In the first example, the smallest subarray with a sum greater than or equal to the target is [4, 3], so the answer is 2. In the second example, the smallest subarray with a sum greater than or equal to the target is [12], so the answer is 1. In the third example, no subarray has a sum greater than or equal to the target, so the answer is 0.","solution":"def smallest_subarray_length(nums, target): Returns the length of the smallest contiguous subarray where the sum is equal to or greater than the target. If no such subarray exists, returns 0. n = len(nums) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation any number of times (including zero): - Choose two consecutive equal letters in the string and remove them. Your task is to determine whether it is possible to make the string empty by performing the above operations. # Input The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 2 cdot 10^5) consisting of lowercase English letters. # Output For each test case, print \\"YES\\" (without quotes) if it is possible to make the string empty, and \\"NO\\" (without quotes) otherwise. # Examples Input ``` 3 abba abcdef aabbcc ``` Output ``` YES NO YES ```","solution":"def can_make_string_empty(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(can_make_string_empty(s)) return results"},{"question":"Given a string s consisting of lowercase English letters, you need to find the substring with the maximum number of distinct characters. If there are multiple such substrings of the same length, return the one that appears first. The first line of input contains an integer t (1 ≤ t ≤ 1000) – the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 105) for which you need to find the desired substring. Output t lines where each line contains the resulting substring for the corresponding test case. In the first example, for the string \\"abcabcbb\\", the substring \\"abc\\" contains the maximum number of distinct characters. In the second example, for the string \\"bbbb\\", there is only one character \'b\', so the substring with the maximum distinct characters is \\"b\\". In the third example, for the string \\"pwwkew\\", the substring \\"wke\\" contains the maximum number of distinct characters.","solution":"def max_distinct_substring(s): Given a string s, find the substring with the maximum number of distinct characters. If there are multiple such substrings of the same length, return the one that appears first. n = len(s) start = 0 max_length = 0 max_start = 0 char_index = {} for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end if end - start + 1 > max_length: max_start = start max_length = end - start + 1 return s[max_start:max_start + max_length] def process_test_cases(test_cases): results = [] for s in test_cases: results.append(max_distinct_substring(s)) return results"},{"question":"Alice is a mathematician who loves to explore the properties of numbers. Recently, she encountered a peculiar sequence of integers, where each number in the sequence has a specific relationship with its neighbors. Alice defined the sequence as follows: Let the sequence be denoted by a_1, a_2, a_3, ldots, a_n. For any three consecutive integers in the sequence, the middle number must be the average of its neighbors. Specifically, for any i (2 ≤ i ≤ n-1), the following must hold: a[i] = frac{a[i-1] + a[i+1]}{2}. Given a sequence length n and an initial integer x, Alice wants to generate such a sequence where the first element is always x. Your task is to determine the sequence\'s numbers or report that it\'s impossible to generate such a sequence with integer values under the given conditions. # Input The first line of the input contains a single integer n (1 ≤ n ≤ 100) — the length of the sequence. The second line of the input contains a single integer x (|x| ≤ 1000) — the initial integer of the sequence. # Output Print the sequence of n integers that satisfies Alice\'s conditions. If no such sequence exists, print \\"Impossible\\". # Examples Example 1: **Input:** ``` 5 10 ``` **Output:** ``` 10 10 10 10 10 ``` Example 2: **Input:** ``` 3 1 ``` **Output:** ``` 1 2 1 ``` # Notes In the first example, each element being the same as the starting element ensures the sequence follows the required condition. In the second example, the middle element (2) is the average of its neighbors (1 and 3), fulfilling the sequence\'s requirement.","solution":"def generate_sequence(n, x): Generates a sequence of integers that satisfies Alice\'s conditions or returns \'Impossible\'. Parameters: n (int): The length of the sequence. x (int): The initial integer of the sequence. Returns: list: The sequence of integers or \'Impossible\' if no such sequence exists. if n == 1: return [x] if n % 2 == 0: return \\"Impossible\\" sequence = [x] * n for i in range(1, n, 2): sequence[i] = x + 1 for i in range(2, n, 2): sequence[i] = x return sequence"},{"question":"A company is organizing a team-building event and wants to form multiple teams with exactly the same number of members. They\'ve already collected the list of employees who have registered for the event. Now, they want to know if they can form teams such that each team has exactly the same number of members and no one is left out. Given an integer array a of size n, where a[i] represents the number of members a team can have in option i, and an integer m representing the total number of employees, determine if there is at least one way to form multiple teams from the employees such that each team has exactly the same number of members with no remaining employees. The first line of input contains an integer T (1 le T le 100) — the number of test cases. For each test case: - The first line contains an integer n (1 le n le 100) — the number of team size options. - The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the team sizes for each option. - The third line contains an integer m (1 le m le 10^{18}) — the total number of employees. For each test case, print \\"YES\\" (without quotes) if it is possible to form teams with exactly the same number of members using one of the provided team size options and no one is left out, otherwise print \\"NO\\". Example: Input: 3 3 2 3 4 12 2 5 7 13 4 1 3 4 5 10 Output: YES NO YES Explanation: - In the first case, you can form teams of size 4: 3 teams of 4 members each (4+4+4=12). - In the second case, you cannot form teams of 5 or 7 members with 13 employees without leaving anyone out. - In the third case, you can form teams of size 5: 2 teams of 5 members each (5+5=10) or teams of size 1, 3, or 4 (for example, 10 teams of 1 member each).","solution":"def can_form_teams(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] m = test_cases[i][2] possible = False for team_size in a: if m % team_size == 0: possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # test_cases = [ # (3, [2, 3, 4], 12), # (2, [5, 7], 13), # (4, [1, 3, 4, 5], 10) # ] # print(can_form_teams(t, test_cases))"},{"question":"You are given a list of people\'s names and their corresponding strengths in playing a special type of card game. To establish fair teams for an upcoming tournament, the organizers decided to allow only teams of two. Each team must consist of two players such that the absolute difference in their strengths is minimized. Your task is to form teams in such a way that the sum of the absolute differences in strengths within each team is minimized. The first line contains a single integer n (2 le n le 10^5, n is even) — the number of players. Each of the next n lines contains a string name (a non-empty string of uppercase and lowercase Latin letters) and an integer s (1 le s le 10^9) — the player\'s name and their strength, respectively. Output the names of the players paired up together in the order they should play. If there are multiple valid solutions, any of them will be accepted. # Example Input 5 Alice 100 Bob 200 Charlie 150 Denise 300 Eve 50 Output Bob Charlie Denise Alice Eve Charlie","solution":"def form_teams(n, player_data): Forms teams by pairing players such that the absolute difference in their strengths is minimized. :param n: Integer representing the number of players. :param player_data: List of tuples containing player names and their strengths. :return: List of tuples representing the pairs of players. # Sort the players based on their strengths sorted_players = sorted(player_data, key=lambda x: x[1]) # Initialize the list for results result_teams = [] # Form teams by pairing adjacent players for i in range(0, n, 2): player1 = sorted_players[i] player2 = sorted_players[i + 1] result_teams.append((player1[0], player2[0])) return result_teams # Example to run if __name__ == \\"__main__\\": n = 6 player_data = [(\\"Alice\\", 100), (\\"Bob\\", 200), (\\"Charlie\\", 150), (\\"Denise\\", 300), (\\"Eve\\", 50), (\\"Frank\\", 250)] result = form_teams(n, player_data) for team in result: print(f\\"{team[0]} {team[1]}\\")"},{"question":"You are given an m x n grid filled with non-negative numbers. From the top-left cell, you have to traverse to the bottom-right cell by moving only right or down at any point in time. Each cell has a value associated that represents the \\"energy\\" consumed when you move through it. You need to find the minimum total energy required to reach the bottom-right cell from the top-left cell. The first line contains two integers m and n (1 ≤ m, n ≤ 200), representing the number of rows and columns in the grid. Each of the next m lines contains n integers, where the j-th integer in the i-th line represents the energy value of the cell in the i-th row and j-th column. Output a single integer — the minimum total energy required to traverse from the top-left cell to the bottom-right cell. For example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: One of the possible optimal paths: 1 → 3 → 1 → 1 → 1. The total energy consumed in this path is 7.","solution":"def min_energy_path(grid): m = len(grid) n = len(grid[0]) # Create a 2D DP table to store the minimum energy up to each cell dp = [[0]*n for _ in range(m)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill out the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value in the bottom-right cell is the answer return dp[m-1][n-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_energy_path(grid)) # Output: 7"},{"question":"Given an integer array `arr` of size `n` (1 ≤ `n` ≤ 1000) and an integer `k` (1 ≤ `k` ≤ n), partition the array into `k` contiguous subarrays such that the maximum sum of the subarrays is minimized. For example, given an array [1, 2, 3, 4, 5] and k = 2, you need to partition the array into two subarrays. One possible solution is [1, 2, 3] and [4, 5] where the sums are 6 and 9, respectively, the maximum sum of the subarrays here is 9. You should implement a function with the following signature: ```python def partitionArray(arr: List[int], k: int) -> int: pass ``` The function should return the minimized maximum sum of the `k` subarrays. **Input** - An integer array `arr` of size `n` (1 ≤ `n` ≤ 1000) - An integer `k` (1 ≤ `k` ≤ n) **Output** - Return the minimized maximum sum of the `k` subarrays. **Example** ```python arr = [1, 2, 3, 4, 5] k = 2 partitionArray(arr, k) ``` Output: ``` 9 ```","solution":"from typing import List def partitionArray(arr: List[int], k: int) -> int: def canPartition(max_sum): current_sum = 0 parts = 1 for num in arr: if current_sum + num > max_sum: parts += 1 current_sum = num if parts > k: return False else: current_sum += num return True left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if canPartition(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given a grid of size n x m filled with numbers ranging from 1 to n*m, each number unique. Your task is to determine if it\'s possible to convert the grid into a magic square using exactly one swap of two distinct elements. A magic square is a grid where the sum of every row, every column, and both diagonals are equal. The first line of input contains two integers n and m (1 ≤ n, m ≤ 3). The next n lines each contain m integers, representing the grid. Output \\"YES\\" if it\'s possible to convert the grid into a magic square with exactly one swap, otherwise output \\"NO\\". Example: Input: 2 2 2 7 6 1 Output: NO Example: Input: 3 3 8 1 6 3 5 7 4 9 2 Output: YES","solution":"def is_possible_magic_square_swap(n, m, grid): def is_magic_square(grid): sum_diag1 = sum([grid[i][i] for i in range(n)]) sum_diag2 = sum([grid[i][n - 1 - i] for i in range(n)]) if sum_diag1 != sum_diag2: return False for i in range(n): if sum(grid[i]) != sum_diag1: return False for i in range(m): if sum([grid[j][i] for j in range(n)]) != sum_diag1: return False return True if is_magic_square(grid): return \\"YES\\" flat_grid = [grid[i][j] for i in range(n) for j in range(m)] for i in range(n * m): for j in range(i + 1, n * m): flat_grid[i], flat_grid[j] = flat_grid[j], flat_grid[i] new_grid = [flat_grid[k * m: (k + 1) * m] for k in range(n)] if is_magic_square(new_grid): return \\"YES\\" flat_grid[i], flat_grid[j] = flat_grid[j], flat_grid[i] return \\"NO\\""},{"question":"Berland scientists are working on an innovative project. They have invented a device that can manipulate the order of digits in a number to make it even larger. The device, named PermutaMaximizer, can perform the following operations: - Given a positive integer, it rearranges the digits of the number in such a way that the resulting number is maximized. Your task as an assistant to the scientists is to write a program that checks if the PermutaMaximizer successfully generates the largest possible number when provided with an input number. The first line contains a single integer n (1 ≤ n ≤ 10^18) — the positive integer input. Print a single integer — the largest possible number you can obtain by rearranging the digits of the given number. Examples: # Input 2134 # Output 4321 # Input 987654321 # Output 987654321 # Input 120 # Output 210","solution":"def permuta_maximizer(n): Given a positive integer, rearranges its digits to form the largest possible integer. Args: n (int): A positive integer (1 ≤ n ≤ 10^18) Returns: int: The largest possible integer obtained by rearranging the digits of n. digits = list(str(n)) digits.sort(reverse=True) return int(\\"\\".join(digits))"},{"question":"There are n cells in a row, some are colored black and some are white. You can flip the color of any one cell (changing a black cell to white, or a white cell to black) in one operation. Your goal is to make all cells black while minimizing the number of operations. The first line contains a single integer n (1 leq n leq 1000) — the number of cells. The second line contains a string of length n consisting of characters \'B\' and \'W\' (\'B\' stands for a black cell and \'W\' stands for a white cell). Output a single integer — the minimum number of operations needed to make all cells black. For example: Input: ``` 3 WBW ``` Output: ``` 2 ``` Explanation: In the example, you can flip the first white cell to black, and the last white cell to black, making the entire row black.","solution":"def min_operations_to_black(n, cells): Returns the minimum number of operations to make all cells black. Parameters: - n: int: the number of cells. - cells: str: a string consisting of \'B\' and \'W\' representing the cells. Returns: - int: the minimum number of operations. # Count the number of \'W\' in the string as each \'W\' needs one flip to become \'B\' return cells.count(\'W\')"},{"question":"You are given a string consisting of lowercase Latin letters. A transformation of the string is defined as follows: - Select any two distinct adjacent characters in the string. - Swap them. A string is considered beautiful if it contains no consecutive characters that are the same. Your task is to determine the minimum number of transformations required to make the given string beautiful. If it is impossible to make the string beautiful, return -1. The first line contains a single integer `t` (1 ≤ `t` ≤ 100) — the number of test cases. Each of the next `t` lines contains a string consisting of lowercase Latin letters. The length of each string is between 1 and 100, inclusive. For each test case, print a single integer — the minimum number of transformations required to make the string beautiful, or -1 if it is impossible. Example: Input: 2 aabb xyz Output: 2 0","solution":"def min_transformations(t, test_cases): results = [] for s in test_cases: n = len(s) if n == 1: results.append(0) continue # count transformations required transformations = 0 i = 0 while i < n - 1: if s[i] == s[i + 1]: transformations += 1 i += 2 # skip the next character since it forms a pair already else: i += 1 results.append(transformations) return results"},{"question":"You are given a rectangular matrix of size n times m. The matrix contains only two distinct integers: 0 and 1. Your task is to determine the minimum number of swaps needed between the elements in the matrix such that the sum of every row and every column is even. A swap is defined as taking any two elements of the matrix and exchanging them. The first line of the input contains two integers n (1 le n le 100) and m (1 le m le 100) — the number of rows and columns in the matrix. The next n lines contain m integers each, representing the initial state of the matrix. Output the minimum number of swaps needed. If it is not possible to achieve the desired configuration, return -1. **Example:** Input: ``` 3 4 1 0 1 0 1 1 0 1 0 1 0 0 ``` Output: ``` 2 ``` Explanation: Initial matrix: ``` 1 0 1 0 1 1 0 1 0 1 0 0 ``` After the first swap (e.g., swapping elements (1,3) and (3,2)): ``` 1 0 0 0 1 1 1 1 0 1 1 0 ``` After the second swap (e.g., swapping elements (2,3) and (3,3)): ``` 1 0 0 0 1 1 0 1 0 1 1 1 ``` Now every row and column has an even sum. Therefore, the minimum number of swaps needed is 2.","solution":"def min_swaps_to_even_sums(matrix): n = len(matrix) m = len(matrix[0]) row_sums = [sum(row) for row in matrix] col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)] odd_rows = sum(1 for r in row_sums if r % 2 != 0) odd_cols = sum(1 for c in col_sums if c % 2 != 0) # For the sums to be even, number of odd rows and odd columns must both be even if (odd_rows % 2 != 0) or (odd_cols % 2 != 0): return -1 # The minimum number of swaps needed to correct all odd rows and columns return (odd_rows + odd_cols) // 2"},{"question":"You have recently joined a delivery company as a software developer. The company delivers products to its customers and provide unique customer IDs. Each customer places orders multiple times. The delivery company wants to introduce a new system that helps to analyze customer behavior based on their order patterns. The first step in building this system is to identify the frequency of orders placed by each customer. You are given a list of customer orders where each order contains a customer ID. You need to implement a function that takes the number of orders and a list of customer IDs, and then calculates and outputs the frequency of orders for each customer ID in ascending order of customer IDs. # Input - The first line contains an integer `n` (1 ≤ n ≤ 105) — the number of orders. - The second line contains `n` integers separated by spaces, where the `i-th` integer represents the customer ID associated with the `i-th` order. Each customer ID is a positive integer and is at most `100000`. # Output Print the list of unique customer IDs along with their order frequencies in ascending order of customer IDs. Each line should include a customer ID followed by the number of orders placed by that customer. # Example Input: ``` 6 1 2 2 3 3 3 ``` Output: ``` 1 1 2 2 3 3 ``` Explanation: - Customer ID `1` appears `1` time. - Customer ID `2` appears `2` times. - Customer ID `3` appears `3` times.","solution":"from collections import defaultdict def order_frequencies(n, customer_ids): Returns the frequency of orders for each customer ID in ascending order of customer IDs. Parameters: n (int): the number of orders customer_ids (list of int): a list of customer IDs Returns: list of tuples: a list of tuples, each containing a customer ID and the number of orders freq_dict = defaultdict(int) for cid in customer_ids: freq_dict[cid] += 1 sorted_freq = sorted(freq_dict.items()) return sorted_freq"},{"question":"Alice loves playing with numbers. She is given an array of integers, and she can perform the following operation any number of times (including zero): - Pick any two adjacent elements of the array and swap them. Alice wants to know the minimum number of swaps required to sort the array in non-decreasing order. You are given an array of integers. Your task is to find the minimum number of swaps Alice needs to sort the array in non-decreasing order. The first line of input contains an integer n (1 leq n leq 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), the elements of the array. Print a single integer — the minimum number of swaps required to sort the array in non-decreasing order. For example: Input: ``` 4 4 3 2 1 ``` Output: ``` 6 ``` In the example, the array [4, 3, 2, 1] requires 6 adjacent swaps to become sorted in ascending order [1, 2, 3, 4]. Note: - In the first example, you can swap the adjacent elements to get the sorted array in 6 swaps as shown below: [4, 3, 2, 1] -> [3, 4, 2, 1] -> [3, 2, 4, 1] -> [3, 2, 1, 4] -> [2, 3, 1, 4] -> [2, 1, 3, 4] -> [1, 2, 3, 4].","solution":"def count_inversions(arr): Counts the number of inversions in the array using a modified merge sort. Args: arr (list): The list of integers to count inversions in. Returns: int: The number of inversions needed to sort the array. def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) # Number of inversions j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1) def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. Args: arr (list): The list of integers to sort. Returns: int: The minimum number of swaps. return count_inversions(arr)"},{"question":"Tommy has to complete a series of puzzles involving arrays. Each puzzle consists of finding a specific subarray of length k that satisfies a given condition. Tommy\'s task is to determine the maximum sum of the elements in any subarray of length k from two given arrays. Each subarray must be taken from a single array (Tommy cannot mix elements from both arrays). Given two integer arrays, a and b, and a positive integer k, write a function that finds the maximum sum of any subarray of length k from either array a or array b. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the length of the arrays and the length of the subarray to find. The second line contains n integers representing the array a (1 ≤ ai ≤ 1000 for each 1 ≤ i ≤ n). The third line contains n integers representing the array b (1 ≤ bi ≤ 1000 for each 1 ≤ i ≤ n). Print a single integer — the maximum sum of any subarray of length k from either array a or array b. Here is an example: Input: 5 3 1 5 2 3 6 2 4 1 8 5 Output: 18 Explanation: From array a, potential subarray sums of length 3 are: 1 + 5 + 2 = 8 5 + 2 + 3 = 10 2 + 3 + 6 = 11 From array b, potential subarray sums of length 3 are: 2 + 4 + 1 = 7 4 + 1 + 8 = 13 1 + 8 + 5 = 14 The maximum sum is 18, which is achieved by the subarray [4, 1, 13] from array b.","solution":"def max_sum_subarray(n, k, a, b): def max_k_subarray_sum(arr, k): current_sum = sum(arr[:k]) max_sum = current_sum for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum max_sum_a = max_k_subarray_sum(a, k) max_sum_b = max_k_subarray_sum(b, k) return max(max_sum_a, max_sum_b)"},{"question":"Lily has a string of length n consisting of the characters \'*\', \'.\', and \'|\'. She can rotate the string any number of times. When rotated, each character in the string shifts one position to the left, and the first character moves to the end. Lily wants to know the minimum number of adjacent \'*\' characters she can get after any number of rotations. Note that the string might contain no \'*\' characters at all. The first line contains a single integer n (1 le n le 100) — the length of the string. The second line contains a string of length n consisting of the characters \'*\', \'.\', and \'|\'. Output a single integer — the minimum number of adjacent \'*\' characters she can get after any number of rotations. For example, if the input string is \'*..*.\': * Initial string: *..*. * After one rotation: ..*.* * After two rotations: .*.** * After three rotations: *.*** * After four rotations: .*** * After five rotations (back to initial position): **.. In this case, the minimum number of adjacent \'*\' characters possible is 1 (after the first rotation). Input ``` 5 *..*. ``` Output ``` 1 ```","solution":"def min_adjacent_asterisks(n, s): Returns the minimum number of adjacent \'*\' characters after any number of rotations. if \'*\' not in s: return 0 # Check for the minimum adjacent asterisks in any rotation min_adj = float(\'inf\') # Loop through all rotations for i in range(n): rotated_string = s[i:] + s[:i] max_asterisks = 0 current_asterisks = 0 for char in rotated_string: if char == \'*\': current_asterisks += 1 max_asterisks = max(max_asterisks, current_asterisks) else: current_asterisks = 0 min_adj = min(min_adj, max_asterisks) return min_adj"},{"question":"Alice is organizing a treasure hunt game for her friends. The treasure hunt takes place in a rectangular grid that is represented by an m x n matrix. Each cell in the matrix either contains clues for the next step or obstacles that need to be avoided. Alice wants to find the shortest path from the top-left corner (0,0) to the bottom-right corner (m-1,n-1) while avoiding cells that contain obstacles. She can move either down, up, left, or right from a cell. Friendly Clue (1): Represented by a value of 0, means that the cell is empty and can be traversed. Obstacle (2): Represented by a value of 1, means that the cell is blocked and cannot be traversed. Write a program that determines the minimum number of steps required to reach the bottom-right corner of the grid from the top-left corner. If it is impossible to reach, output -1. The input format is as follows: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000), the number of rows and columns of the grid. - The next m lines contain n integers either 0 (Friendly Clue) or 1 (Obstacle), representing the grid cells. The output should be a single integer representing the minimum number of steps required to reach the bottom-right corner or -1 if it is impossible. Example Input: 3 3 0 0 0 1 1 0 0 0 0 Example Output: 4 In the example, Alice can follow the path (0,0) -> (0,1) -> (1,2) -> (2,2). The total steps taken are 4. Explanation: - The grid for the example input is: ``` 0 0 0 1 1 0 0 0 0 ``` - Alice starts at (0,0) and passes through (1,2) in the minimum number of steps to reach the bottom-right corner (2,2).","solution":"from collections import deque def shortest_path_in_grid(m, n, grid): Find the shortest path from the top-left corner to the bottom-right corner of a grid avoiding obstacles. Returns the minimum number of steps required to reach the bottom-right corner or -1 if it is impossible. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: r, c, steps = queue.popleft() if r == m - 1 and c == n - 1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc] and grid[nr][nc] == 0: visited[nr][nc] = True queue.append((nr, nc, steps + 1)) return -1"},{"question":"During the construction of a technological hub in New Tech Town, the engineers have encountered a problem while designing the communication system between buildings. Each building in the town will be interconnected through direct communication channels, and there are n buildings labeled from 1 to n. The engineers have already established m direct communication channels between some pairs of buildings (i, j), meaning building i can directly communicate with building j (and vice versa). They now need to ensure that the communication system is robust by making sure all buildings stay connected either directly or indirectly by adding the minimum number of additional channels. Given the number of buildings and the existing channels, can you help the engineers determine the minimum number of additional channels needed to ensure that every building can communicate with every other building directly or indirectly? The first line of the input contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) — the number of buildings and the number of existing direct communication channels. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing a direct communication channel between building u and building v. Each pair (u, v) will appear at most once. Output a single integer — the minimum number of additional channels required to make sure every building can communicate with every other building either directly or indirectly. **Example:** Input: 5 2 1 2 3 4 Output: 2 Explanation: The existing channels form two separate groups {1, 2} and {3, 4}, with building 5 being isolated. To make the system robust, we need to connect these groups. One possible way is to add a channel from building 2 to building 3 and another from building 3 to building 5. This will make sure all buildings are interconnected. Hence the minimum number of additional channels required is 2.","solution":"def min_additional_channels(n, m, channels): Determines the minimum number of additional channels needed to ensure that all buildings can communicate with each other either directly or indirectly. :param n: int - number of buildings :param m: int - number of existing direct communication channels :param channels: list of tuples - each tuple represents a direct communication channel between two buildings :return: int - minimum number of additional channels required from collections import defaultdict, deque # Create an adjacency list for the graph graph = defaultdict(list) for u, v in channels: graph[u].append(v) graph[v].append(u) # Function to perform BFS and mark all reachable nodes def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Track visited nodes and count connected components visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i, visited) components += 1 # Number of additional channels needed is (number of components - 1) return components - 1"},{"question":"You\'re given two arrays of positive integers: `heights` and `widths`. You need to construct a rectangular shape for which the area is maximized. You can create the rectangle by selecting one side from the `heights` array and the other side from the `widths` array. Write a function that takes in the `heights` and `widths` arrays and returns the maximum possible area of the rectangle that can be formed. # Input - The first line contains two integers, `n` and `m` (1 leq n, m leq 100) — the number of elements in the `heights` and `widths` arrays, respectively. - The second line contains `n` positive integers — the elements of the `heights` array. - The third line contains `m` positive integers — the elements of the `widths` array. # Output - Output a single integer, which is the maximum possible area of the rectangle. # Example Input ``` 4 3 1 2 3 4 10 20 30 ``` Output ``` 120 ``` Explanation The maximum area is obtained by using height `4` and width `30`, resulting in an area of `4 * 30 = 120`.","solution":"def max_possible_area(heights, widths): Returns the maximum possible area of a rectangle that can be formed by choosing one element from heights and another element from widths. max_height = max(heights) max_width = max(widths) return max_height * max_width"},{"question":"Rosa is organizing a charity event and wants to distribute gift bags to the children attending. There are n children and m different types of gift bags. Each child should receive exactly one gift bag. To make it fair, Rosa wants to ensure that the gift bags are distributed in a way that minimizes the maximum number of children receiving the same type of gift bag. Given n and m, write a program to determine this minimized maximum number. The first line of input contains two integers n and m (1 leq n leq 10^9, 1 leq m leq 10^9), the number of children and the number of different types of gift bags, respectively. Output a single integer, the minimized maximum number of children that can receive the same type of gift bag. For example, if there are 7 children and 3 different types of gift bags, the minimized maximum number would be 3. This could happen if 3 children receive the first type, 2 children receive the second type, and 2 children receive the third type.","solution":"def minimized_max_gift_bags(n, m): Determine the minimized maximum number of children that can receive the same type of gift bag. Parameters: n (int): The number of children. m (int): The number of different types of gift bags. Returns: int: The minimized maximum number of children that can receive the same type of gift bag. return (n + m - 1) // m"},{"question":"In an amusement park, there is a special roller coaster designed in a spiral structure. The roller coaster consists of n stations arranged sequentially in a spiral form, such that each station has a unique identifier from 1 to n. The passengers start their ride from station 1. At each station, they can move to the next station inline (i.e., from station x to station x+1) or skip a few stations ahead to directly reach station x+k (1 ≤ k ≤ n-1). Your task is to determine the minimum number of moves required for the passenger to reach the final station n starting from station 1. The special roller coaster provides a maximum jump ability of `k` stations where `k` is a provided parameter. The first line of the input contains two integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ n-1) — the number of stations and the maximum number of stations the passenger can skip in a single jump. Output one integer — the minimum number of moves required to reach station n from station 1. **Example:** **Input:** ``` 10 3 ``` **Output:** ``` 4 ``` **Explanation:** Starting at station 1, the passenger can move: 1 -> 4 (jump 3 stations) 4 -> 7 (jump 3 stations) 7 -> 10 (jump 3 stations) Total moves = 3 If k = 2: 1 -> 3 (jump 2 stations) 3 -> 5 (jump 2 stations) 5 -> 7 (jump 2 stations) 7 -> 9 (jump 2 stations) 9 -> 10 (move 1 station) Total moves = 5","solution":"def min_moves_to_reach_station(n, k): Determines the minimum number of moves required to reach the final station n starting from station 1 when you can move at most k stations ahead in one move. # To reach station n, calculate the maximum jumps possible for each step return (n - 1 + k - 1) // k"},{"question":"Riya has recently bought a new deck of cards. The deck contains n cards, numbered 1 through n. Riya likes to shuffle the cards before playing, and she has a unique way of doing so. She repeatedly takes the first card from the deck and moves it to the end of the deck. She continues this process m times. After performing these m moves, she wonders what the sequence of cards in the deck looks like. The first line of input contains two positive integers n and m (1 ≤ n, m ≤ 10^5) — the number of cards in the deck and the number of moves respectively. Print the sequence of cards in the deck after performing m moves. **Example** Input: ``` 5 2 ``` Output: ``` 3 4 5 1 2 ``` Explanation: - Initial deck: 1 2 3 4 5 - After 1 move: 2 3 4 5 1 - After 2 moves: 3 4 5 1 2 Notice that after each move, the first card moves to the end of the deck.","solution":"def shuffle_cards(n, m): Returns the sequence of cards in the deck after performing m moves. moves = m % n deck = list(range(1, n + 1)) return deck[moves:] + deck[:moves] # Example usage: # n, m = 5, 2 # print(shuffle_cards(n, m)) # Output: [3, 4, 5, 1, 2]"},{"question":"Given a string of digits representing a sequence of integers, you need to find the maximum possible integer that can be obtained by swapping at most one pair of digits. If the maximum possible integer that can be obtained is the same as the given integer, then a swap is not required. For example, for the string \\"2736\\", you can swap the \'7\' and the \'3\' to result in \\"7236\\", which is greater than the original \\"2736\\". # Input Formats - A single string `s` (1 ≤ |s| ≤ 10^5) consisting of digits (\'0\' - \'9\') without any leading zeros. # Output Formats - A single string which represents the maximum possible integer that can be obtained by swapping at most one pair of digits from the original string. If no swap is needed, output the original string. # Constraints - The input string should not have any leading zeros. - Although the given string may contain identical digits, the output should still follow the maximum possible integer requirement through at most one swap. # Examples **Example 1:** Input: \\"2736\\" Output: \\"7236\\" **Example 2:** Input: \\"9973\\" Output: \\"9973\\" Explanation for Example 1: After swapping the \'7\' and the \'3\', the highest number \\"7236\\" is obtained. Explanation for Example 2: The number is already as high as possible; no swap can increase it. # Note - The swap must involve exactly one pair of digits.","solution":"def maximum_swap(num_str): Returns the maximum possible integer that can be obtained by swapping at most one pair of digits from the original string. If no swap is needed, returns the original string. num_list = list(num_str) n = len(num_list) last = {int(x): i for i, x in enumerate(num_list)} for i in range(n): for d in range(9, int(num_list[i]), -1): if last.get(d, -1) > i: num_list[i], num_list[last[d]] = num_list[last[d]], num_list[i] return \'\'.join(num_list) return num_str"},{"question":"You are given a string ( w ) consisting of lowercase English letters, and a pattern ( p ) where each character is either a lowercase English letter or a wildcard character \'*\'. The wildcard character \'*\' in the pattern matches zero or more of any characters in the string ( w ). You need to determine if the pattern ( p ) matches the entire string ( w ). Write a function `is_match(w: str, p: str) -> bool` that implements this. The function should return `True` if the pattern matches the string, otherwise return `False`. # Input - ( w ) - A string of length ( 1 leq |w| leq 1000 ) consisting of lowercase English letters. - ( p ) - A pattern of length ( 1 leq |p| leq 1000 ) where each character is either a lowercase English letter or \'*\'. # Output - Return `True` if the pattern matches the entire string, otherwise return `False`. # Example Input ```python w = \\"abcd\\" p = \\"a*d\\" ``` Output ```python True ``` Input ```python w = \\"abcde\\" p = \\"a*c?e\\" ``` Output ```python False ``` # Note - The pattern character \'*\' can match zero or more of any characters in the string. - The function should consider the entire string and pattern length for matching. Implement the function as specified.","solution":"def is_match(w: str, p: str) -> bool: Determines if the pattern p matches the entire string w. The pattern character \'*\' can match zero or more of any characters. m, n = len(w), len(p) # dp[i][j] will be True if p[0..j-1] matches w[0..i-1] dp = [[False] * (n + 1) for _ in range(m + 1)] # Empty pattern matches empty string dp[0][0] = True # Handles patterns like \'*\', \'**\', \'**\', etc. that can match an empty string for j in range(1, n + 1): if p[j-1] == \'*\': dp[0][j] = dp[0][j-1] for i in range(1, m + 1): for j in range(1, n + 1): if p[j-1] == \'*\': # \'*\' can match zero characters (dp[i][j-1]) or one more character in w (dp[i-1][j]) dp[i][j] = dp[i][j-1] or dp[i-1][j] elif p[j-1] == w[i-1]: dp[i][j] = dp[i-1][j-1] # Match this character and move diagonally else: dp[i][j] = False return dp[m][n]"},{"question":"You\'re given a list of strength values of monsters. Your task is to determine if it\'s possible to group the monsters into pairs such that the sum of the strengths for each pair is the same. For example, if the list of monster strengths is `[1, 2, 3, 4]`, it is possible to pair them as `(1, 4)` and `(2, 3)`, both pairs summing up to `5`. Your task is to write a function `can_pair_monsters` that takes a list of integers as input and returns `True` if such a pairing is possible, and `False` otherwise. # Input - A single integer `n` (2 le n le 10^5), the number of monsters (it is guaranteed to be an even number). - A list of integers `strengths` of length `n` (1 le strengths[i] le 10^9). # Output - A single boolean value: `True` if it\'s possible to pair the monsters such that the sums of the strengths of each pair are the same, and `False` otherwise. # Example ```python # Example 1: n = 4 strengths = [1, 2, 3, 4] print(can_pair_monsters(n, strengths)) # Output: True # Example 2: n = 6 strengths = [1, 1, 1, 1, 1, 5] print(can_pair_monsters(n, strengths)) # Output: False # Example 3: n = 4 strengths = [3, 3, 3, 3] print(can_pair_monsters(n, strengths)) # Output: True ``` # Note In the first example, you can pair the monsters as `(1, 4)` and `(2, 3)`, both summing up to `5`. In the second example, it\'s not possible to pair the monsters where the sum of the pairs is the same. In the third example, you can pair any two `3`s, and they will always sum up to `6`.","solution":"def can_pair_monsters(n, strengths): Determines if it\'s possible to pair the strengths such that each pair sums up to the same value. Arguments: n : int : the number of monsters (always even) strengths : list[int] : list of strength values of the monsters Returns: bool : True if such a pairing is possible, False otherwise strengths.sort() # Calculate the expected sum of each pair expected_sum = strengths[0] + strengths[-1] # Check all pairs to see if they sum to the expected_sum for i in range(n // 2): if strengths[i] + strengths[n - 1 - i] != expected_sum: return False return True"},{"question":"Lina is a passionate botanist who studies the growth patterns of plants. She is particularly interested in a specific species of plant which follows a unique growth pattern. Each plant\'s growth can be represented as an array, where each element denotes the height of the plant on each subsequent day. Lina knows that this plant species grows in segments of days, where each segment is strictly increasing or strictly decreasing. For example, given the array [1, 2, 1, 3, 4, 3, 2], the segments are [1, 2], [2, 1], [1, 3, 4], and [4, 3, 2]. Your task is to help Lina by implementing a function that determines the number of such segments in the array, and identifies the longest segment in terms of length. If there are multiple segments of the same maximum length, return the first one. # Input - The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of days Lina recorded the plant\'s height. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9) — the heights of the plant over `n` days. # Output - Print a single integer representing the number of segments. - Print the elements of the longest segment. # Example Input ``` 7 1 2 1 3 4 3 2 ``` Output ``` 4 1 3 4 ``` # Note In the example, there are 4 segments: [1, 2], [2, 1], [1, 3, 4], and [4, 3, 2], where the longest segment [1, 3, 4] has length 3.","solution":"def find_segments_and_longest(n, heights): if n == 1: return 1, heights segments = [] start = 0 for i in range(1, n): if (heights[i] > heights[i-1] and (i == n-1 or heights[i+1] <= heights[i])) or (heights[i] < heights[i-1] and (i == n-1 or heights[i+1] >= heights[i])): segments.append(heights[start:i+1]) start = i if start < n - 1: segments.append(heights[start:n]) longest_segment = max(segments, key=len) return len(segments), longest_segment # Example usage: n = 7 heights = [1, 2, 1, 3, 4, 3, 2] num_segments, longest_segment = find_segments_and_longest(n, heights) print(num_segments) # Output: 4 print(longest_segment) # Output: [1, 3, 4]"},{"question":"A city is hosting a marathon, and there are checkpoints located along the marathon route. You are given the start and end times of the race for each participant. Each checkpoint will record how many participants pass through during each second of the race. Your task is to determine the maximum number of participants present at any checkpoint at the same time. The input consists of: - An integer n (1 ≤ n ≤ 5000), the number of participants. - The next n lines each contain two integers si and ei (1 ≤ si < ei ≤ 100000), the start and end times of the race for the ith participant. The start and end times are given in seconds since the start of the day. A participant is considered present at a checkpoint at second t if si ≤ t < ei. Your output should be a single integer — the maximum number of participants present at any checkpoint at the same time. For example, if the input is: ``` 5 1 5 2 6 3 7 4 8 5 9 ``` The output should be: ``` 4 ``` Explanation: At second 4, there are 4 participants present, which is the maximum number. In another example, if the input is: ``` 4 1 3 2 5 4 6 7 9 ``` The output should be: ``` 2 ``` Explanation: At second 2, there are 2 participants present, which is the maximum number.","solution":"def max_participants_at_any_checkpoint(n, intervals): Determines the maximum number of participants present at any checkpoint at the same time. Args: n: int - The number of participants. intervals: List[Tuple[int, int]] - List of tuples where each tuple contains start and end times (si, ei) for each participant. Returns: int - The maximum number of participants present at any checkpoint at the same time. checkpoints = [0] * 100001 for start, end in intervals: checkpoints[start] += 1 checkpoints[end] -= 1 max_participants = 0 current_participants = 0 for checkpoint in checkpoints: current_participants += checkpoint if current_participants > max_participants: max_participants = current_participants return max_participants # Example usage: # participants = 5 # intervals = [(1, 5), (2, 6), (3, 7), (4, 8), (5, 9)] # result = max_participants_at_any_checkpoint(participants, intervals) # print(result) # Should return 4"},{"question":"Yasmine is exploring the magical forest of Algolandia where she found an enchanted maze. The maze is represented as a grid of size n x m. Each cell of the maze can either be open (\'.\') or blocked (\'#\'). Yasmine can move from a cell to an adjacent cell if it is open. She can move up, down, left, or right, but not diagonally. Yasmine starts at a cell (sx, sy) and wants to reach the treasure located at (tx, ty). The task is to determine the minimum number of moves required for Yasmine to reach the treasure. If it is not possible to reach the treasure, output -1. Format: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the dimensions of the maze. The next n lines contain m characters each, representing the maze (each character is either \'.\' or \'#\'). The last line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ 1000) - the starting coordinates of Yasmine and the coordinates of the treasure. The coordinates are 1-based. Output: Output the minimum number of moves required for Yasmine to reach the treasure. If it is not possible, print -1. Example: Input: 5 5 ..... .#.#. .#... .#. ..... 1 1 5 5 Output: 8 Explanation: The following sequence of moves will take Yasmine from (1, 1) to (5, 5): (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5). The minimum number of moves is 8.","solution":"from collections import deque def min_moves(n, m, maze, sx, sy, tx, ty): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx-1, sy-1, 0)]) # store (x, y, distance) visited = set([(sx-1, sy-1)]) while queue: x, y, dist = queue.popleft() if (x, y) == (tx-1, ty-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A group of g friends decides to go on a hiking trip and wants to buy some fruits to take along. They visit a shop that sells n different types of fruits. Each fruit has a certain price associated with it given in an array of integers p. Each fruit can be bought in any quantity. Their goal is to buy at least m units of each fruit where 1 ≤ m ≤ 100. The friends have a total budget of b rubles. They can collectively buy as many fruits as possible while maintaining the minimum requirement of m units for each type, but they should not exceed their budget. Determine if it is possible for the friends to buy at least m units of each fruit type within their budget. The first line contains three integers n, m, and b (1 ≤ n ≤ 100, 1 ≤ m ≤ 100, 1 ≤ b ≤ 10000). The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 100) representing the price of each type of fruit. Print \\"Possible\\" if the friends can buy at least m units of each fruit type within their budget, otherwise print \\"Impossible\\". Example: Input: 4 10 500 12 15 25 10 Output: Possible In this example, they need to buy at least 10 units of each fruit. The total cost for 10 units of each fruit would be (10 * 12) + (10 * 15) + (10 * 25) + (10 * 10) = 120 + 150 + 250 + 100 = 620 rubles, which is more than their budget of 500 rubles. Hence, it is \\"Impossible\\".","solution":"def can_buy_fruits(n, m, b, prices): Determine if it is possible to buy at least m units of each of the n types of fruits within the budget b. :param n: int - number of types of fruits :param m: int - minimum units of each fruit to buy :param b: int - total budget in rubles :param prices: list - list of integers representing the price of each type of fruit :return: str - \\"Possible\\" if the friends can buy at least m units of each fruit within their budget, otherwise \\"Impossible\\" total_cost = sum(price * m for price in prices) if total_cost <= b: return \\"Possible\\" else: return \\"Impossible\\" # Example usage n, m, b = 4, 10, 500 prices = [12, 15, 25, 10] print(can_buy_fruits(n, m, b, prices)) # Output: \\"Impossible\\""},{"question":"In a computer lab, there are n workstations arranged in a single row. Each workstation can be considered either occupied or empty. A keyboard and a computer mouse can be placed at any empty workstation. Given that the keyboard and mouse should be placed at two distinct empty workstations, the distance between the keyboard and mouse is defined as the absolute difference between their positions. Your task is to find the minimum possible distance between the keyboard and mouse after placing them at the workstations. If there are no two empty workstations, output -1. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of workstations in the lab. The second line contains a string of length n consisting of characters \'1\' and \'0\'. Here, \'1\' represents an occupied workstation, while \'0\' represents an empty workstation. Output: Print the minimum possible distance between the keyboard and mouse or -1 if it\'s not possible to place both the keyboard and mouse. Example: Input: 7 0100010 Output: 1 Explanation: In the given example, the workstations are 7 and the configuration is \\"0100010\\". The empty workstations are positioned at indices 1, 3, 4, 6, so the minimum distance between any two of these is 1 (between indices 3 and 4).","solution":"def minimum_distance(n, workstations): Finds the minimum distance between two empty workstations for placing a keyboard and a mouse. Args: n (int): number of workstations. workstations (str): string representing occupied (1) and empty (0) workstations. Returns: int: minimum possible distance or -1 if placement is not possible. empty_positions = [i for i, char in enumerate(workstations) if char == \'0\'] if len(empty_positions) < 2: return -1 min_distance = float(\'inf\') for i in range(1, len(empty_positions)): distance = empty_positions[i] - empty_positions[i - 1] if distance < min_distance: min_distance = distance return min_distance"},{"question":"In a software company, there is a server that keeps track of all the emails sent between employees. The server logs each email as a record containing the sender\'s and recipient\'s employee IDs. A new manager joins the company and wants to identify the communication patterns within the team. Specifically, they are interested in finding out which employees form \\"communication clusters.\\" A communication cluster is a group of employees where each employee can reach every other employee in the group through a series of emails, either directly or indirectly. Your task is to write a program that identifies and counts the number of such communication clusters given a list of email communications. **Input:** The first line contains an integer n (1 le n le 10^5) — the number of employees in the company. The second line contains an integer m (0 le m le 10^5) — the number of emails sent. Each of the following m lines contains two integers a_i and b_i (1 le a_i, b_i le n) — an email sent from employee a_i to employee b_i. **Output:** Print a single integer — the number of communication clusters in the company. **Example:** Input: ``` 5 4 1 2 2 3 4 5 3 1 ``` Output: ``` 2 ``` **Explanation:** In the example, the communication clusters are: - Employees 1, 2, and 3 form one cluster since they can all reach each other directly or indirectly. - Employees 4 and 5 form another cluster since they can only reach each other directly.","solution":"def find_clusters(n, m, emails): from collections import defaultdict, deque # Build the graph using adjacency list graph = defaultdict(list) for a, b in emails: graph[a].append(b) graph[b].append(a) def bfs(start, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) visited = set() clusters_count = 0 for employee in range(1, n + 1): if employee not in visited: clusters_count += 1 visited.add(employee) bfs(employee, visited) return clusters_count # Example to demonstrate the function print(find_clusters(5, 4, [(1, 2), (2, 3), (4, 5), (3, 1)])) # Output should be 2"},{"question":"You are given an array of integers and a target value. Your goal is to determine if it is possible to select a non-empty subset of the array such that the sum of its elements is equal to the target value. Write a function `canReachTarget(nums, target)` that takes in two parameters: 1. `nums`: a list of integers (1 ≤ len(nums) ≤ 40, -1000 ≤ nums[i] ≤ 1000). 2. `target`: an integer (-1000 ≤ target ≤ 1000). The function should return `True` if there is a subset of `nums` that sums up to `target`, and `False` otherwise. # Example: ```python assert canReachTarget([1, 2, 3], 5) == True # For example, the subset [2, 3] sums to 5 assert canReachTarget([1, 2, 3], 7) == False # No subset sums to 7 assert canReachTarget([-1, 2, 3], 1) == True # For example, the subset [2, -1] sums to 1 assert canReachTarget([1, -1, 2, -2], 0) == True # For example, the subset [1, -1] sums to 0 assert canReachTarget([5], 5) == True # Single element subset sums to target ``` # Constraints: 1. The function must execute within a reasonable time for the input constraints. 2. The solution should handle both positive and negative integers in the array. 3. The function should handle edge cases, such as an array of one element and varied target values.","solution":"def canReachTarget(nums, target): Determines if it is possible to select a non-empty subset of the array `nums` such that the sum of its elements is equal to the `target` value. :param nums: List of integers :param target: Target integer value :return: True if a subset sum equals to target, otherwise False n = len(nums) # Dynamic Programming table to store subproblem results dp = {0} for num in nums: dp |= {num + x for x in dp} return target in dp"},{"question":"Kevin recently started learning about binary search and wants to practice more. He came up with his own version of the problem but needs your help to solve it. Given a sorted (in ascending order) array \\"a\\" of \\"n\\" integers and a value \\"x\\", your task is to determine the smallest index of an element in the array that is greater than or equal to \\"x\\". If no such element exists, return -1. Write a function `find_min_index` that takes in the integer `n`, a sorted list of integers `a`, and the integer `x`, and returns the smallest index (0-based) of an element in `a` that is greater than or equal to `x`. The first line of the input contains an integer `t` (1 le t le 10) — the number of test cases. For each test case, the first line contains two integers `n` (1 le n le 10^5) and `x` (-10^9 le x le 10^9) — the number of elements in the array and the value to search for. The second line contains `n` space-separated integers (-10^9 le a_i le 10^9) — the elements of the array. For each test case, print the result in a new line. # Function Signature: ```python def find_min_index(n: int, a: List[int], x: int) -> int: pass ``` # Example: Input: ``` 2 5 3 1 2 4 5 6 4 10 1 2 3 4 ``` Output: ``` 2 -1 ``` # Explanation: In the first test case, the smallest index where the element is greater than or equal to 3 is 2 (element is 4). In the second test case, there is no element greater than or equal to 10, hence the output is -1.","solution":"from typing import List def find_min_index(n: int, a: List[int], x: int) -> int: left, right = 0, n - 1 result = -1 while left <= right: mid = (left + right) // 2 if a[mid] >= x: result = mid right = mid - 1 else: left = mid + 1 return result def process_test_cases(test_cases: List[tuple]) -> List[int]: results = [] for n, x, arr in test_cases: results.append(find_min_index(n, arr, x)) return results"},{"question":"In Europe, a lot of old trees are protected species, which means they cannot be cut. Jack has a forest with many trees, and he needs to clear some land for farming. Therefore, he has to find an area in the forest which does not contain old trees. The forest can be represented as a grid where each cell is either empty or contains an old tree. Given a forest represented as an n x m grid (1 ≤ n, m ≤ 500) where a cell is \'0\' if it is empty and \'1\' if it contains an old tree, find the largest contiguous rectangular area that does not contain any old trees. The area should consist of only empty cells and be aligned with the grid. # Input The first line of input contains two integers n and m, the number of rows and columns of the grid, respectively. Each of the following n lines contains m characters, each either \'0\' or \'1\', representing the forest. # Output Output a single integer representing the area of the largest contiguous rectangular empty plot. # Example Input 4 5 0 0 1 0 1 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 Output 6 # Explanation In the example, the largest contiguous area without old trees is a rectangle starting from the second row, second column to the bottom right corner, covering an area of 6 cells.","solution":"def max_rectangle_area(forest): Given a 2D grid representing a forest, returns the area of the largest rectangular empty plot (containing only \'0\'s). def largest_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not forest: return 0 n = len(forest) m = len(forest[0]) height = [0] * m max_area = 0 for row in forest: for col in range(m): height[col] = height[col] + 1 if row[col] == \'0\' else 0 max_area = max(max_area, largest_histogram_area(height)) return max_area"},{"question":"John has a collection of n unique books and wants to arrange them on a single shelf. However, John\'s shelf is not sufficiently sturdy and can only handle a maximum weight of W units. Each book has a weight associated with it. John wants to know the maximum number of books he can place on the shelf without exceeding the weight limit of the shelf. The first line contains two integers n (1 le n le 10^5) and W (1 le W le 10^9) — representing the number of books and the maximum weight capacity of the shelf. The second line contains n integers w_1, w_2, ldots, w_n (1 le w_i le 10^9) — representing the weight of each book. Print a single integer — the maximum number of books John can place on the shelf without exceeding the weight limit W. In the first sample, John can place books with weights 2, 3, and 5 (for a total weight of 10) on the shelf. In the second sample, John can place books with weights 4, 2, and 1 (for a total weight of 7) on the shelf.","solution":"def max_books(n, W, weights): Returns the maximum number of books that can be placed on the shelf without exceeding the weight limit. weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"In the fictional country of Algovia, there is a robotics factory that needs your help optimizing the travel routes for their delivery robots. The factory floor is a grid with dimensions n x m. Each cell in the grid can either be empty or contain an obstacle that the robot cannot pass through. The robots can move up, down, left, or right, but cannot move diagonally. The robots need to travel from a starting point (sx, sy) to a target point (tx, ty). Your task is to determine the minimum number of moves required for a robot to travel from the start to the target while avoiding obstacles. If it is impossible for the robot to reach the target, return -1. The first line of input will contain the integers n and m (1 ≤ n, m ≤ 1000) representing the dimensions of the grid. The next n lines will each contain a string of length m consisting of \'.\' (empty cell) and \'#\' (obstacle). The following line contains four integers, sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ n, m), representing the starting and target points. Output the minimum number of moves required for the robot to reach the target, or -1 if it is impossible. # Example **Input** ``` 5 5 ..... .#. ..... .#. ..... 1 1 5 5 ``` **Output** ``` 8 ``` **Input** ``` 3 3 # #.. # 1 2 3 2 ``` **Output** ``` -1 ``` In the first example, the robot starts at (1, 1) and needs to reach (5, 5). It avoids obstacles and finds the shortest path in 8 moves. In the second example, the robot starts at (1, 2) and cannot reach (3, 2) because the only path is blocked by obstacles, thus the output is -1.","solution":"from collections import deque def min_moves(n, m, grid, sx, sy, tx, ty): Determines the minimum number of moves required for a robot to travel from the start to the target while avoiding obstacles. Returns -1 if it is impossible for the robot to reach the target. # Adjust to zero based indexing for easier grid traversal sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Directions the robot can move: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, depth = queue.popleft() # If we reach the target if x == tx and y == ty: return depth # Explore the neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, depth + 1)) # If we exhaust the queue without finding the target return -1 # Helper function to read input and call the solution function def read_input_and_find_min_moves(input_str): lines = input_str.strip().split() n = int(lines[0]) m = int(lines[1]) grid = lines[2:n+2] sx, sy, tx, ty = map(int, lines[n+2:]) return min_moves(n, m, grid, sx, sy, tx, ty)"},{"question":"Tom is organizing a charity event and plans to distribute food packets to the homeless. Each day, Tom can distribute a limited number of packets, and he wants to maximize the number of people who receive the packets. The event lasts for n days, and on each day i, Tom has ci food packets to distribute. However, Tom wants to ensure that the distribution is fair, meaning that each day he should distribute no less and no more than a particular number of packets. Given an array of integers representing the number of packets available each day, determine the maximum number of days Tom can distribute exactly the same number of packets. The first line contains a single integer n (1 ≤ n ≤ 200) — the number of days the event lasts. The second line contains n integers, where the i-th integer ci (1 ≤ ci ≤ 1000) represents the number of packets available on the i-th day. Print a single integer — the maximum number of days Tom can distribute exactly the same number of packets. Example: Input: 6 5 3 9 3 3 7 Output: 2 Explanation: The maximum number of days Tom can distribute exactly the same number of packets is 2 days (either the two days with 3 packets).","solution":"def max_equal_days(n, packets): Returns the maximum number of days Tom can distribute exactly the same number of packets. Args: n (int): The number of days the event lasts. packets (list): The number of packets available on each day. Returns: int: The maximum number of days with the same number of packets. from collections import Counter packet_counts = Counter(packets) max_days = max(packet_counts.values()) return max_days"},{"question":"You are given a grid of size n x m filled with integers. Your task is to find the maximum sum of any sub-grid (contiguous sub-array) in this grid. # Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m integers separated by spaces, representing the elements of the grid. # Output Print the maximum sum of any sub-grid. # Examples Example 1: # Input: ``` 3 3 1 2 -1 -3 4 2 -1 -2 1 ``` # Output: ``` 7 ``` # Explanation: The sub-grid with the maximum sum is: ``` 4 2 -2 1 ``` which sums to 7. Example 2: # Input: ``` 2 2 -1 -2 -3 -4 ``` # Output: ``` -1 ``` # Explanation: The sub-grid with the maximum sum is: ``` -1 ``` which sums to -1.","solution":"def max_sub_grid_sum(grid): def kadane_1d(arr): max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) max_global = max(max_global, max_current) return max_global n = len(grid) m = len(grid[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += grid[i][right] current_kadane_sum = kadane_1d(temp) max_sum = max(max_sum, current_kadane_sum) return max_sum"},{"question":"You are given an undirected graph with n vertices and m edges. A vertex is called special if it has exactly k neighbors. You need to find the number of special vertices in the graph. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 10^5, 0 ≤ k ≤ n-1). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) representing an edge between vertex u and vertex v. The output should be a single integer — the number of special vertices in the graph. Example: Input: 5 4 2 1 2 2 3 3 4 4 5 Output: 3 Explanation: Vertices 2, 3, and 4 each have 2 neighbors, thus there are 3 special vertices.","solution":"def count_special_vertices(n, m, k, edges): from collections import defaultdict # Create adjacency list adjacency_list = defaultdict(int) for u, v in edges: adjacency_list[u] += 1 adjacency_list[v] += 1 # Count the special vertices special_count = 0 for vertex in range(1, n + 1): if adjacency_list[vertex] == k: special_count += 1 return special_count"},{"question":"In a grid of size n times m, there is a robot initially located at the top-left corner (position (1, 1)). The robot can move either to the right or to the bottom. The robot is constrained by some obstacles placed on the grid. You are given the dimensions of the grid and the positions of the obstacles. Your task is to find the number of distinct paths the robot can take to reach the bottom-right corner (position (n, m)) starting from the top-left corner. The robot can only move to the right or down and cannot move into cells with obstacles. The first line of the input contains two integers n and m (1 leq n, m leq 100) — the dimensions of the grid. The second line of the input contains an integer k (0 leq k leq n times m) — the number of obstacles. Each of the next k lines contains two integers x_i and y_i (1 leq x_i leq n, 1 leq y_i leq m) — the positions of the obstacles. Output a single integer, the number of distinct paths the robot can take to reach the bottom-right corner. Examples: Input: ``` 3 3 1 2 2 ``` Output: ``` 2 ``` Input: ``` 3 3 0 ``` Output: ``` 6 ``` Input: ``` 3 3 3 2 2 3 2 2 3 ``` Output: ``` 0 ``` Explanation: In the first sample, the robot can take two distinct paths avoiding the obstacle at (2,2): 1. Right -> Right -> Down -> Down. 2. Down -> Down -> Right -> Right. In the second sample, no obstacles are present, and there are 6 distinct paths the robot can take to reach the bottom-right corner. In the third sample, the obstacles block all possible paths, so there are no paths available.","solution":"def count_paths(n, m, k, obstacles): # Initialize the DP table with zeros dp = [[0] * m for _ in range(n)] # If the starting point has an obstacle, return 0 if (1, 1) in obstacles: return 0 # Starting point (1, 1) setting to 1 dp[0][0] = 1 for i in range(n): for j in range(m): # If there\'s an obstacle, skip this cell if (i + 1, j + 1) in obstacles: dp[i][j] = 0 else: # Add ways from the top cell if within bounds if i > 0: dp[i][j] += dp[i - 1][j] # Add ways from the left cell if within bounds if j > 0: dp[i][j] += dp[i][j - 1] # Bottom right corner value return dp[n - 1][m - 1]"},{"question":"Sergey likes to collect old coins. He has a collection of n coins, each with a denomination d1, d2, ..., dn. Sergey has decided to display his collection in a row, but he wants to place them in a specific order. He wants to minimize the maximum difference between the denominations of any two adjacent coins in the row. For example, if Sergey has coins with denominations [1, 3, 6, 10], one possible arrangement is [1, 3, 6, 10] with differences [2, 3, 4], and the maximum difference is 4. Another possible arrangement is [1, 3, 10, 6] with differences [2, 7, 4], where the maximum difference is 7. Sergey wants to minimize this maximum difference. The first line of input contains an integer n (2 ≤ n ≤ 3·10^4) — the number of coins Sergey has in his collection. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) — the denominations of the coins. Print a single integer — the minimum possible value of the maximum difference between denominations of any two adjacent coins. Example: Input: 4 1 3 6 10 Output: 3 In this example, the optimal arrangement is [1, 3, 6, 10] where the maximum difference between adjacent coins\' denominations is minimized to 3.","solution":"def minimum_max_difference(denominations): denominations.sort() min_max_diff = float(\'inf\') for i in range(1, len(denominations)): max_diff = denominations[i] - denominations[i - 1] min_max_diff = min(min_max_diff, max_diff) return min_max_diff # Input reading and function calling left for test modules"},{"question":"A new online e-commerce store has launched a series of flash sales with different discounts offered at different times of the day. The management wants to offer special customers more benefits. They define a special customer as someone who can take advantage of multiple flash sales. There are N flash sales during a day, each providing a discount percentage for a different time period. You are given an array of N integers representing the discount percentages offered in each flash sale. The store\'s rule for special customers is that a customer becomes special if, by choosing any three non-overlapping flash sales, their combined (summed up) discount percentage is greater than X. Write a program that determines if a customer can be classified as special based on the discounts and the rule provided. # Input The input consists of: - The first line contains two integers, N (3 <= N <= 100) and X (1 <= X <= 1000). - The second line contains N integers, each representing a flash sale discount percentage. # Output Output \\"Special\\" if there exist three non-overlapping flash sales such that their combined discount percentage is greater than X. Otherwise, output \\"Not Special\\". # Example Input ``` 5 30 5 10 15 20 25 ``` Output ``` Special ``` Input ``` 4 50 8 12 15 10 ``` Output ``` Not Special ``` # Explanation In the first example, by choosing the discounts 10, 15, and 25, their combined discount percentage is 50, which is greater than 30. Hence, the output is \\"Special.\\" In the second example, the highest possible combination of three discounts is 8 + 12 + 15 = 35, which is not greater than 50. Hence, the output is \\"Not Special.\\" Implement your solution to determine if a customer is special based on the given flash sale discounts.","solution":"def is_special_customer(N, X, discounts): Determine if there exist three non-overlapping flash sales such that their combined discount percentage is greater than X. from itertools import combinations for comb in combinations(discounts, 3): if sum(comb) > X: return \\"Special\\" return \\"Not Special\\" # Example usage: N, X = 5, 30 discounts = [5, 10, 15, 20, 25] print(is_special_customer(N, X, discounts)) # Output: Special N, X = 4, 50 discounts = [8, 12, 15, 10] print(is_special_customer(N, X, discounts)) # Output: Not Special"},{"question":"Alice is organizing a tournament for the students in her class. She assigns each student to a unique position in a straight line. Each student has a skill level associated with them, given in an array. The tournament rules are such that each game involves exactly two students, and in each game, the student with the higher skill level wins. Alice wants to find out, for each student, how many games they minimally need to play in order to determine the ultimate winner starting from that student. The ultimate winner is found by repeatedly having games between adjacent students until one student is found who cannot be beaten by any other student. The skill levels of the students are given in a list `skills` of length `n` (2 leq n leq 100). Your task is to determine the minimum number of games each student needs to play to determine the ultimate winner if the tournament starts from that student. Consider the array `skills`. For each element in this array, compute the number of games played when starting the tournament from that student\'s position. Input format: - The first line of input contains an integer `n` — the number of students. - The second line contains `n` integers representing the skill levels of the `n` students. Output format: - Output a single line containing `n` integers, where the `i`-th integer is the minimum number of games required to determine the ultimate winner starting from the `i`-th student. Example: ``` Input: 5 1 2 3 4 5 Output: 4 3 2 1 0 ``` Explanation: - If the tournament starts from the first student, the order of games might be: (2nd vs. 3rd), (3rd vs. 4th), (4th vs. 5th), (5th wins), so 4 games. - If starting from the second student, following the similar logic, 3 games will be needed (3rd vs. 4th), (4th vs. 5th), (5th wins). - If starting from the third student, 2 games will be needed. - If starting from the fourth student, 1 game will be needed. - If starting from the fifth student, 0 games will be needed as they are already the ultimate winner. This problem tests the ability to perform a linear sweep and calculate minimum interactions given sequential dependencies.","solution":"def min_games_to_win_tournament(skills): Given a list of skill levels of students, determine the minimum number of games each student needs to play to determine the ultimate winner starting from that student. n = len(skills) # Since each student can only play against their adjacent student, # in the worst case the strongest student will be the ultimate winner. results = [n - i - 1 for i in range(n)] return results"},{"question":"You are given a number sequence consisting of n integers. Define an operation \\"circular shift\\" where the last element of the sequence moves to the first position, and all other elements shift one position to the right. For example, the sequence [1, 2, 3, 4] after one circular shift becomes [4, 1, 2, 3]. You are also given m queries, where each query consists of an integer k. Your task is to return the sequence after k circular shifts for each query. The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the length of the number sequence and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the number sequence. Each of the next m lines contains a single integer k (1 ≤ k ≤ 10^9) — the number of circular shifts for the corresponding query. Output m lines. The i-th line should contain the sequence after k circular shifts for the i-th query. Example: ``` Input: 4 3 1 2 3 4 1 2 3 Output: 4 1 2 3 3 4 1 2 2 3 4 1 ```","solution":"def circular_shift(n, m, sequence, queries): Perform the given number of circular shifts for each query. Parameters: n (int): Number of elements in the sequence. m (int): Number of queries. sequence (list of int): The initial sequence of numbers. queries (list of int): The number of circular shifts for each query. Returns: list of list of int: The sequence after each query\'s circular shifts. results = [] for k in queries: k = k % n # To handle cases where k > n results.append(sequence[-k:] + sequence[:-k]) return results"},{"question":"Sasha is exploring a new data structure called a \\"Special Array\\". He defines a Special Array as an array where each element is the sum of the indexes of the elements before it, plus a given constant d. To elaborate, consider an array arr of length n, such that: - arr[0] = d - arr[1] = d + 0 - arr[2] = d + 0 + 1 - arr[3] = d + 0 + 1 + 2 - and so on. Given integers n (the length of the array) and d (the constant addition factor), help Sasha generate the entire Special Array. The first line of the input contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 1000). Output the Special Array consisting of n elements. # Example Input ``` 5 3 ``` Output ``` 3 3 4 6 9 ```","solution":"def generate_special_array(n, d): Generates a Special Array of length n with a constant addition factor d. Args: n (int): The length of the array. d (int): The constant addition factor. Returns: list: The generated Special Array. special_array = [] for i in range(n): if i == 0: special_array.append(d) else: special_array.append(special_array[-1] + (i - 1)) return special_array"},{"question":"In the astronomy study, scientists consider a series of stars that are represented as points on a plane with integer coordinates. Sometimes, due to a stellar event, a new star appears in the plane, and scientists want to find the distance to the nearest existing star from this new one. Your task is to write a program that helps them calculate this distance. You are given the coordinates of n existing stars and the coordinates of q newly appeared stars. For each new star, determine the distance to the nearest existing star. The distance between two stars at coordinates (x1, y1) and (x2, y2) on the plane is calculated as the Euclidean distance: [ text{distance} = sqrt{(x1 - x2)^2 + (y1 - y2)^2} ] The input format is as follows: - The first line contains two integers n and q (1 ≤ n, q ≤ 1000), which are the number of existing stars and the number of new stars, respectively. - The following n lines each contain two integers x and y (−1000 ≤ x, y ≤ 1000), representing the coordinates of an existing star. - The following q lines each contain two integers x and y (−1000 ≤ x, y ≤ 1000), representing the coordinates of a new star. The output format should be q lines, each containing a single real number, which is the distance to the nearest existing star for each of the new stars. The distances should be rounded to six decimal places. For example: # Input ``` 3 2 1 2 3 4 5 6 2 3 4 4 ``` # Output ``` 1.414214 1.000000 ``` Please note that the answer values must be rounded to six decimal places.","solution":"import math def find_nearest_star(n, q, existing_stars, new_stars): Finds the nearest distance from each new star to the existing stars. Parameters: n (int): Number of existing stars q (int): Number of newly appeared stars existing_stars (list of tuple): Coordinates of existing stars new_stars (list of tuple): Coordinates of new stars Returns: list of float: Distance to the nearest existing star for each new star def calculate_distance(x1, y1, x2, y2): return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) result = [] for new_star in new_stars: min_distance = float(\'inf\') for existing_star in existing_stars: distance = calculate_distance(existing_star[0], existing_star[1], new_star[0], new_star[1]) if distance < min_distance: min_distance = distance result.append(round(min_distance, 6)) return result"},{"question":"You are given two integers ( n ) and ( m ) representing the number of nodes and the number of edges in an undirected graph, respectively. You should determine the number of nodes that need to be removed so the graph becomes a forest. A forest is a disjoint union of trees, and trees do not contain cycles. In other words, you need to find the minimum number of nodes to remove so that there are no cycles in the resulting graph. The input is given in the following format: - The first line contains two integers ( n ) and ( m ). - The next ( m ) lines each contain two integers ( u ) and ( v ), indicating an undirected edge between nodes ( u ) and ( v ). Output a single integer: the minimum number of nodes that need to be removed to make the graph a forest. # Constraints - ( 2 le n le 1000 ) - ( 0 le m le 4000 ) - ( 1 le u, v le n ) - The graph may be disconnected and can contain self-loops and multiple edges. # Example Input ``` 6 6 1 2 2 3 3 4 4 5 5 6 3 6 ``` Output ``` 1 ``` Input ``` 5 5 1 2 2 3 3 4 4 5 1 5 ``` Output ``` 1 ```","solution":"def min_removals_to_forest(n, m, edges): Determine the minimum number of nodes to remove to make the graph a forest. from collections import defaultdict # Helper function to perform DFS and detect cycles def has_cycle(v, visited, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if has_cycle(neighbor, visited, v): return True elif parent != neighbor: return True return False # Creating the adjacency list of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) cycles_count = 0 # Iterate over all nodes to handle disconnected components for node in range(1, n + 1): if not visited[node]: # If we find a cycle, increment the cycle count if has_cycle(node, visited, -1): cycles_count += 1 return cycles_count"},{"question":"Polycarp has begun working out regularly and is tracking his progress. He records his weight progress over several days and wants to find out how many periods of weight increase he has had. A period of weight increase is defined as a sequence of contiguous days where his weight is strictly increasing. You are given a list of weights Polycarp recorded over n days. Your task is to find the number of periods of weight increase. The first line contains a single integer n (1 le n le 10^5) — the number of days Polycarp recorded his weight. The second line contains n integers w_1, w_2, ldots, w_n (1 le w_i le 10^6) — the weights recorded over these days. Print a single integer, the number of periods of weight increase. # Example Input ``` 6 1 2 2 3 4 1 ``` Output ``` 2 ``` Explanation There are 2 periods of weight increase in the given example: 1. The sub-sequence 1, 2 2. The sub-sequence 2, 3, 4","solution":"def count_weight_increase_periods(n, weights): Returns the number of periods of weight increase in the given list of weights. if n == 1: return 0 periods = 0 in_period = False for i in range(1, n): if weights[i] > weights[i - 1]: if not in_period: in_period = True periods += 1 else: in_period = False return periods"},{"question":"You are a renowned detective who has been approached to help a museum recover a lost artifact. The museum has a security system that logs the times each security code is entered. Each entry in the log includes a unique security code and a timestamp in the format \\"hh:mm:ss\\". Unfortunately, the security system only keeps the n most recent entries due to memory constraints. The museum is certain that the artifact was taken when the code was entered a record number of times within a single hour. The log provided contains the times each code was entered in chronological order. Your task is to find the hour during which the artifact is most likely to have been taken, based on the number of times the code was entered. If there are multiple hours with the same number of entries, return the earliest one. The first line of the input contains a single integer n (1 ≤ n ≤ 1000), the number of entries in the log. The next n lines each contain a timestamp \\"hh:mm:ss\\". Output a single line containing the hour \\"hh\\" during which the code was most likely entered the most number of times. Example: ``` Input: 6 15:22:45 15:35:50 16:01:12 16:15:22 17:00:01 17:45:30 Output: 16 ```","solution":"def find_peak_hour(n, timestamps): Finds the hour during which the security code was entered the most number of times. :param n: Number of entries in the log. :param timestamps: List of n timestamps in the format \\"hh:mm:ss\\". :return: The hour \\"hh\\" during which the code was most likely entered the most number of times. hours_count = {} for timestamp in timestamps: hour = timestamp[:2] if hour in hours_count: hours_count[hour] += 1 else: hours_count[hour] = 1 max_entries = max(hours_count.values()) peak_hours = [hour for hour, count in hours_count.items() if count == max_entries] return min(peak_hours) # Example usage: n = 6 timestamps = [ \\"15:22:45\\", \\"15:35:50\\", \\"16:01:12\\", \\"16:15:22\\", \\"17:00:01\\", \\"17:45:30\\" ] print(find_peak_hour(n, timestamps)) # Output: 16"},{"question":"You are given an array of integers `a` and an integer `k`. Your task is to determine the number of pairs (i, j) such that `i < j` and `a[i] + a[j] == k`. The input will consist of: - The first line containing two integers n and k (1 ≤ n ≤ 10<sup>5</sup>, 1 ≤ k ≤ 10<sup>9</sup>), where n is the size of the array and k is the sum you need to find in pairs. - The second line containing n integers `a[1]`, `a[2]`, ..., `a[n]` (-10<sup>9</sup> ≤ a[i] ≤ 10<sup>9</sup>), the elements of the array. Output a single integer representing the number of pairs (i, j) such that `i < j` and `a[i] + a[j] == k`. **Example:** _Input:_ ``` 4 5 1 2 3 4 ``` _Output:_ ``` 2 ``` _Explanation:_ - The pairs that satisfy the condition are (1, 4) and (2, 3). **Solution Approach:** 1. You can use a hashmap to keep track of the occurrences of elements so far. 2. Iterate through the array, for each element, check if `k - a[i]` is present in the hashmap. 3. If it is, increment the count by the occurrences of `k - a[i]`. 4. Add the current element to the hashmap with its occurrences. 5. This approach ensures an O(n) time complexity.","solution":"def count_pairs_with_sum(a, k): This function takes an array of integers `a` and an integer `k`, and returns the number of pairs (i, j) (i < j) such that a[i] + a[j] == k. from collections import defaultdict count = 0 freq = defaultdict(int) for num in a: count += freq[k - num] freq[num] += 1 return count"},{"question":"In a faraway land, there are n magical plants growing in a row. Each plant has a unique height denoted by an integer array h of size n. Magic is only present when the heights of two consecutive plants are co-prime. Two numbers are co-prime if their greatest common divisor (GCD) is 1. You need to transform this row of plants to maximize the magic. You are allowed to perform the following operation at most once on each plant: - Decrease the height of a plant by a positive integer no greater than d. Find the maximum number of magical pairs (consecutive co-prime plants) that can be obtained after applying the operations optimally. # Input The first line contains two integers, n and d (2 leq n leq 1000, 1 leq d leq 1000) — the number of plants and the maximum amount you can decrease the height of any plant, respectively. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^6) — the initial heights of the plants. # Output Output a single integer — the maximum number of magical pairs (consecutive co-prime plants) that can be achieved. # Example Input ``` 5 2 2 4 6 8 10 ``` Output ``` 4 ``` Input ``` 4 1 6 9 14 15 ``` Output ``` 3 ```","solution":"from math import gcd def max_magical_pairs(n, d, h): max_pairs = 0 # Helper function to check if two numbers are co-prime def are_coprime(a, b): return gcd(a, b) == 1 # Iterate over each plant to determine the max pairs for i in range(n - 1): if are_coprime(h[i], h[i + 1]): max_pairs += 1 else: # Try decreasing the current plant or the next plant coprime_found = False for dec in range(1, d + 1): if are_coprime(h[i] - dec, h[i + 1]): coprime_found = True break if are_coprime(h[i], h[i + 1] - dec): coprime_found = True break if coprime_found: max_pairs += 1 return max_pairs"},{"question":"You are given a list of integers and a target integer. Your task is to determine the number of pairs of integers in the list that sum up to the target integer. Each integer in the list can be used multiple times to form different pairs. The first line of the input contains an integer n (1 ≤ n ≤ 1000), the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000), the elements of the list. The third line contains the target integer t (-2000 ≤ t ≤ 2000). Print the number of pairs of integers in the list that sum up to the target integer. Example: Input: 5 1 2 3 4 5 5 Output: 2 Explanation: The pairs that sum up to 5 are (1, 4) and (2, 3).","solution":"def count_pairs_with_sum(n, numbers, target): Returns the number of pairs of integers in the list that sum up to the target integer. :param n: integer, the number of integers in the list :param numbers: list of integers :param target: integer, the target sum :return: integer, the number of pairs that sum up to the target count = 0 for i in range(n): for j in range(i + 1, n): if numbers[i] + numbers[j] == target: count += 1 return count # Example usage # if __name__ == \\"__main__\\": # n = 5 # numbers = [1, 2, 3, 4, 5] # target = 5 # print(count_pairs_with_sum(n, numbers, target)) # Output: 2"},{"question":"Alex has developed a new game called \\"Elemental Fusion\\" where players try to form valuable combinations of elements. Each element has a unique integer identifier and a value based on its chemical property. Alex wants to know the maximum value a player can achieve by fusing elements together, following certain rules. Rules of Elemental Fusion: 1. Fusion is only possible if the identifiers of two elements are consecutive. 2. The value of the fusion is the sum of the values of the individual elements. 3. Fused elements form a single new element that can continue to be fused further with consecutive elements. Given a list of elements with their identifiers and values, determine the maximum value that can be achieved by a single combination of fusions. # Input: - The first line of input contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements. - The next `n` lines describe the elements. Each line contains two integers: `id` (1 ≤ id ≤ 1000) — the identifier of the element, and `value` (1 ≤ value ≤ 1000) — the value of the element. # Output: - Output a single integer — the maximum value achievable by fusing elements according to the rules. # Example: Input: ``` 5 1 10 2 20 4 30 3 40 5 50 ``` Output: ``` 150 ``` # Explanation: The maximum value is achieved by fusing elements with identifiers `1, 2, 3, 4, 5` which results in a total value of `10+20+40+30+50 = 150`. Note that the identifiers must be consecutive for a valid fusion.","solution":"def max_fusion_value(n, elements): Determine the maximum value that can be achieved by fusing elements. :param n: Number of elements :param elements: A list of tuples where each tuple contains an identifier and its value :return: Maximum value achievable by fusing elements according to the rules # Sort elements based on their identifiers elements.sort(key=lambda x: x[0]) max_value = 0 current_value = elements[0][1] last_id = elements[0][0] for i in range(1, n): current_id, value = elements[i] if current_id == last_id + 1: current_value += value else: max_value = max(max_value, current_value) current_value = value last_id = current_id max_value = max(max_value, current_value) return max_value"},{"question":"You are given a binary tree, and you need to find the maximum width of the tree. The width of a binary tree is the maximum number of nodes present in any level. A level is defined as all nodes that have the same depth from the root node. The input consists of multiple lines, where each line contains two space-separated integers representing the parent and child nodes of the binary tree. The first integer is the parent node and the second integer is the child node. All node values are unique positive integers, and there will be at most 10^5 nodes. To make things easier: - The input ends with a line containing two zeros (\\"0 0\\"), which indicates the end of input and should not be processed. - You may assume the tree is rooted at the node with the smallest value. - It is guaranteed that each node except the root node has exactly one parent. Output the maximum width of the binary tree. # Example **Input** ``` 1 2 1 3 2 4 2 5 3 6 3 7 0 0 ``` **Output** ``` 4 ``` In this example, the maximum width is 4 (nodes `4`, `5`, `6`, and `7` are all at the same level).","solution":"from collections import defaultdict, deque def find_maximum_width(edges): if not edges: return 0 adjacency_list = defaultdict(list) children = set() for parent, child in edges: adjacency_list[parent].append(child) children.add(child) # Find the root (minimum value of node that is not a child) all_nodes = set(adjacency_list.keys()).union(children) root = min(all_nodes - children) # Perform BFS to calculate the width of each level queue = deque([(root, 0)]) level_count = defaultdict(int) while queue: node, level = queue.popleft() level_count[level] += 1 for child in adjacency_list[node]: queue.append((child, level + 1)) # Calculate the maximum width max_width = max(level_count.values()) return max_width"},{"question":"Tanya is fascinated by sequences of numbers and recently came across the concept of arithmetic sequences. A sequence of numbers is called an arithmetic sequence if the difference between any two consecutive terms is consistent. For example, the sequences [3, 6, 9, 12] and [2, 2, 2, 2] are arithmetic sequences, while [1, 2, 4, 7] is not. Tanya has a sequence of integers and she wants to know the minimum number of elements she would need to remove to make the sequence an arithmetic sequence. Given a sequence of integers, determine the minimum number of elements that need to be removed to convert the given sequence into an arithmetic sequence. The first line of input contains an integer n (2 ≤ n ≤ 100) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1,000) — the elements of the sequence. Print a single integer — the minimum number of elements that need to be removed to make the sequence an arithmetic sequence. For example, if the input sequence is [3, 1, 4, 1, 5], the output should be 2, because removing the 1\'s would result in the arithmetic sequence [3, 4, 5]. Alternatively, removing 3 and 1 would result in the arithmetic sequence [1, 4, 5]. This will test the candidate\'s understanding of arithmetic sequences, dynamic programming, and optimization algorithms.","solution":"def min_removals_to_make_arithmetic_seq(nums): Returns the minimum number of elements to remove to make the sequence an arithmetic sequence. n = len(nums) if n <= 2: return 0 min_removals = float(\'inf\') for i in range(n): for j in range(i + 1, n): diff = nums[j] - nums[i] count = 0 current = nums[i] for k in range(n): if nums[k] != current: count += 1 else: current += diff min_removals = min(min_removals, count) return min_removals"},{"question":"Bob loves to play with numbers. Recently, he came across a sequence of numbers and found it interesting to reverse the sequence in groups. Given a sequence of n integers and an integer k, he wants to reverse the sequence in groups of k. If there are fewer than k numbers left at the end, reverse them as well. Help Bob by writing a function that outputs the sequence after performing the group reversal. # Input - The first line contains two integers n and k (1 ≤ n, k ≤ 100,000) — the length of the sequence and the group size. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the sequence of numbers. # Output - Print the sequence after reversing in groups of k. # Example **Input:** ``` 9 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` 3 2 1 6 5 4 9 8 7 ``` **Explanation:** The input sequence is divided into groups of 3 elements each: (1, 2, 3), (4, 5, 6), (7, 8, 9). Each group is reversed to form: (3, 2, 1), (6, 5, 4), (9, 8, 7). The final sequence is thus: 3 2 1 6 5 4 9 8 7.","solution":"def reverse_in_groups(n, k, sequence): Reverses the sequence in groups of size k. Args: n (int): The length of the sequence. k (int): The size of the groups to reverse. sequence (list of int): The sequence of numbers. Returns: list of int: The sequence after reversing in groups. result = [] for i in range(0, n, k): group = sequence[i:i+k] result.extend(group[::-1]) return result"},{"question":"There are n towns and m roads in a country. Each road connects two towns, and each road has a non-negative integer weight representing the cost to travel on that road. There is a special town, called the capital, which is town number 1. The government wants to develop a new public transport system and needs to ensure that every town in the country is reachable from the capital. They also want to minimize the total cost of all the roads used. You are asked to determine the minimum total cost of roads needed to ensure every town is reachable from the capital. The first line contains two integers n (1 leq n leq 1000) and m (0 leq m leq 100000), where n is the number of towns and m is the number of roads. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, u neq v, 0 leq w leq 10^6) representing a road between towns u and v with cost w. Output a single integer, which is the minimum total cost of roads needed to ensure every town is reachable from the capital. If there is no way to connect all towns to the capital, output -1. In the first example, by selecting roads (1-2), (1-3), and (1-4), the total cost is minimized to 18. In the second example, town 2 and 3 have no roads connecting them to the capital or to any other town, thus the output is -1.","solution":"def min_total_cost_to_connect_towns(n, m, roads): Returns the minimum cost to connect all towns ensuring every town is reachable from the capital. Uses Kruskal\'s algorithm to generate Minimum Spanning Tree (MST). :param n: Number of towns :param m: Number of roads :param roads: List of tuples (u, v, w) where u and v are towns and w is the cost of the road :return: Minimum total cost or -1 if it\'s not possible to connect all towns # Define a union-find data structure parent = list(range(n+1)) rank = [0] * (n+1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Sort roads by cost roads.sort(key=lambda x: x[2]) total_cost = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) total_cost += w edges_used += 1 if edges_used == n - 1: break # Check if all towns are connected root = find(1) for i in range(2, n+1): if find(i) != root: return -1 return total_cost"},{"question":"You are provided with an array of integers a of length n. Initially, the array is sorted in non-decreasing order. However, an unknown number of times, a contiguous subarray from a was rotated to the end. Given the array a, your task is to find the minimum number of left rotations needed to return the array to its original sorted order. A left rotation on an array shifts each element one position to the left, and the first element is moved to the last position. For example, if the array is [3, 4, 5, 1, 2], the array must be rotated 3 times to the left to return it to its original sorted order [1, 2, 3, 4, 5]. Input: - The first line contains an integer n (1 le n le 10^5), the length of the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). Output: - Output a single integer, the minimum number of left rotations required to sort the array in non-decreasing order. Examples: Input: 5 3 4 5 1 2 Output: 3 Input: 6 4 5 6 1 2 3 Output: 3 Input: 4 1 2 3 4 Output: 0","solution":"def min_left_rotations_to_sort(arr): This function returns the minimum number of left rotations needed to return a rotated sorted array to its original sorted order. n = len(arr) # iterate through the array to determine the point where the array becomes unsorted for i in range(n - 1): if arr[i] > arr[i + 1]: return i + 1 # if the array is already sorted, 0 rotations are needed return 0"},{"question":"You are given a sequence of integers representing the height of boxes placed in a line. You need to compute the height of the tallest stack of boxes that can be formed under the following restriction: a box can only be placed on top of another box if the height of the new box is less than or equal to the height of the box directly below it. Write a program that reads an integer n (1 ≤ n ≤ 100,000), representing the number of boxes, followed by n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000), representing the heights of the boxes in the sequence. The program should output the height of the tallest stack of boxes that can be formed. # Input The first line contains a single integer n, the number of boxes. The next line contains n integers, the heights of the boxes. # Output Print a single integer, the height of the tallest stack that can be formed. # Example Input: ``` 5 4 5 2 3 1 ``` Output: ``` 3 ``` Explanation: One possible stacking could be: [4], [5], [2, 1] which gives us the tallest stack of height 3 comprising boxes [2, 1]. Note: Ensure the solution is optimized to handle the upper constraints efficiently through dynamic programming or any suitable algorithmic approach.","solution":"def tallest_stack(n, heights): Determines the height of the tallest stack of boxes that can be formed. Args: n : int : the number of boxes heights : list of int : the heights of the boxes Returns: int : height of the tallest stack that can be formed if n == 0: return 0 # Initialize an array to store the maximum height at each position dp = [1] * n # Each box alone is a stack of height 1 # Compute the optimal stack using a dynamic programming approach for i in range(1, n): for j in range(i): if heights[j] >= heights[i]: dp[i] = max(dp[i], dp[j] + 1) # Return the maximum value from the dp array which represents the tallest stack return max(dp)"},{"question":"John is organizing a baking competition with m participants and n cakes. Each participant has their favorite cakes and will only bake those cakes that are on their list of favorites. Also, each participant can bake at most one cake. John wants to ensure that the maximum number of cakes are baked at the competition, with each participant baking exactly one cake from their list of favorites. The problem can be described as follows: You are given n cakes and m participants. Each participant has a list of cakes they can bake. Your task is to determine the maximum number of cakes that can be baked such that each participant bakes exactly one cake from their favorites. Input: - The first line contains two integers n and m — the number of cakes and the number of participants (1 ≤ n, m ≤ 1000). - The next m lines contain lists of integers. The i-th line starts with an integer ki (the number of cakes the i-th participant can bake), followed by ki integers representing the indices of the cakes that the i-th participant can bake. The indices of the cakes are given as 1-based. Output: - Print a single integer — the maximum number of cakes that can be baked. Example: Input: 5 3 2 1 2 3 1 3 4 2 4 5 Output: 3 In the example, participant 1 can bake cakes 1 and 2, participant 2 can bake cakes 1, 3, and 4, and participant 3 can bake cakes 4 and 5. The optimal assignment is participant 1 bakes cake 2, participant 2 bakes cake 3, and participant 3 bakes cake 5, resulting in 3 cakes being baked.","solution":"def maximum_cakes(n, m, participants): from collections import defaultdict import queue def bpm(u, matchR, seen): for v in graph[u]: if not seen[v]: seen[v] = True if matchR[v] == -1 or bpm(matchR[v], matchR, seen): matchR[v] = u return True return False graph = defaultdict(list) for i in range(m): for cake in participants[i]: graph[i].append(cake - 1) matchR = [-1] * n result = 0 for i in range(m): seen = [False] * n if bpm(i, matchR, seen): result += 1 return result"},{"question":"Tanya is participating in an online programming competition. The competition consists of a series of stages where she must solve various types of problems. One such problem involves concatenating integer sequences in a specific manner. Given two integer sequences a1, a2, ..., an and b1, b2, ..., bm, Tanya must create a new sequence of length n + m such that each integer from both sequences appears exactly once. Moreover, this new sequence should be sorted in non-decreasing order, but only using a specific process of alternations between sequences. Here is the process: - Start with the first element of sequence a. - Append the next element from sequence b. - Continue alternating between sequences a and b until one of the sequences is exhausted. - Once one sequence is exhausted, append the remaining elements of the other sequence. Your task is to help Tanya simulate this process and print the resulting sequence. The first line contains two integers n and m (1 ≤ n, m ≤ 10^5). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). The third line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 10^9). Print a single line containing the n + m integers of the new sequence created by following the defined process. For example: Input: 4 3 1 5 9 10 2 6 8 Output: 1 2 5 6 9 8 10 In the first sample, you start with 1 from sequence a, then 2 from sequence b, followed by 5 from sequence a, then 6 from sequence b, continuing until one sequence is exhausted.","solution":"def concatenate_alternating_sequences(n, m, a, b): Concatenates two integer sequences in an alternating manner. Parameters: n (int): Length of sequence a. m (int): Length of sequence b. a (list of int): The first sequence. b (list of int): The second sequence. Returns: list of int: The concatenated sequence. result = [] i = j = 0 # Alternate adding elements from both sequences while i < n and j < m: result.append(a[i]) i += 1 if j < m: result.append(b[j]) j += 1 # Append the remaining elements from sequence a while i < n: result.append(a[i]) i += 1 # Append the remaining elements from sequence b while j < m: result.append(b[j]) j += 1 return result # Example usage # n, m = 4, 3 # a = [1, 5, 9, 10] # b = [2, 6, 8] # print(concatenate_alternating_sequences(n, m, a, b)) # Output: [1, 2, 5, 6, 9, 8, 10]"},{"question":"A famous botanist is conducting a study on the growth patterns of a rare species of plant. Each plant in the study can be represented as a node in a graph, where an edge between two nodes indicates that the growth of one plant is dependent on the other. The graph is guaranteed to be a Directed Acyclic Graph (DAG). The botanist is particularly interested in understanding the earliest time each plant will start growing, given that it depends on certain other plants having started to grow. If a plant does not depend on any other plant, it can start growing at time 0. However, if it depends on one or more plants, it will start growing only after all those plants have started growing. Given the dependencies for each plant, determine the earliest start time for each plant. # Input The input consists of multiple test cases. - The first line is an integer `t` (1 leq t leq 100), the number of test cases. - For each test case: - The first line contains two integers `n` and `m` (1 leq n leq 1000, 0 leq m leq 10000), representing the number of plants and the number of dependencies, respectively. - The next `m` lines contain two integers `u` and `v` (1 leq u, v leq n), indicating that plant `u` must start growing before plant `v`. # Output For each test case, output a single line containing `n` integers, where the `i`-th integer is the earliest start time for plant `i`. # Sample Input ``` 2 5 4 1 2 1 3 3 4 2 5 3 2 1 2 2 3 ``` # Sample Output ``` 0 1 1 2 2 0 1 2 ``` # Explanation In the first test case, plant 1 can start growing at time 0. Plants 2 and 3 depend on plant 1 and can start growing at time 1. Plant 4 depends on plant 3 and can start growing at time 2. Plant 5 depends on plant 2 and can also start growing at time 2. In the second test case, plant 1 can start growing at time 0. Plant 2 depends on plant 1 and can start growing at time 1. Plant 3 depends on plant 2 and can start growing at time 2.","solution":"from collections import deque, defaultdict def earliest_start_times(t, test_cases): def topological_sort(n, adj_list): # Initialize in-degree and schedule dictionary in_degree = [0] * n schedule = [0] * n # Calculate in-degrees for u in range(n): for v in adj_list[u]: in_degree[v] += 1 # Queue for vertices with no incoming edges queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) schedule[i] = 0 # Process the queue while queue: u = queue.popleft() for v in adj_list[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) schedule[v] = schedule[u] + 1 return schedule results = [] for test_case in test_cases: n, m = test_case[0] edges = test_case[1] adj_list = defaultdict(list) for u, v in edges: adj_list[u - 1].append(v - 1) result = topological_sort(n, adj_list) results.append(result) return results # Example to run the function input_data = [ (5, 4, [(1, 2), (1, 3), (3, 4), (2, 5)]), (3, 2, [(1, 2), (2, 3)]) ] t = 2 test_cases = [ (input_data[0][:2], input_data[0][2]), (input_data[1][:2], input_data[1][2]) ] print(earliest_start_times(t, test_cases))"},{"question":"You are given a grid of size n x m, with each cell containing either a \'.\', denoting an empty space, or a \'#\', denoting a block. You are also given k pairs of coordinates (x1, y1) and (x2, y2), each representing the start and end points of a path. For each pair of coordinates, determine if there is a path from (x1, y1) to (x2, y2) such that you only move up, down, left, or right and the path does not pass through any blocks (\'#\'). If a path exists, output \\"Yes\\", otherwise output \\"No\\". Note that you are allowed to revisit empty cells (\'.\') during your path. The first line contains three integers n, m, and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 100) — the number of rows, columns, and number of pairs of coordinates respectively. The next n lines contain m characters each, representing the grid. The next k lines each contain four integers x1, y1, x2, y2 (1 ≤ x1, x2 ≤ n, 1 ≤ y1, y2 ≤ m) — the coordinates of the start and end points of a path. The output should contain k lines. For each pair of coordinates, output \\"Yes\\" if there is a path between the start and end points, otherwise output \\"No\\".","solution":"def find_paths(n, m, k, grid, coordinates): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' def bfs(start, end): queue = [start] visited = set() visited.add(start) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.pop(0) if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False results = [] for x1, y1, x2, y2 in coordinates: start = (x1 - 1, y1 - 1) end = (x2 - 1, y2 - 1) if bfs(start, end): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"David is an avid nature photographer. He has recently returned from a wildlife photography expedition with a collection of stunning photos of different species. Now, he wants to organize an exhibition where he can showcase his best work. For this, he needs to select his top k photos that meet certain criteria. David has n photographs numbered from 1 to n, and each photograph has a specific artistic value, denoted by a list a of length n. However, the gallery where he plans to exhibit his work has a constraint: he can only select a continuous subsequence of the photos for display. Given the constraint, your task is to find the maximum possible artistic value sum of any subsequence of length k from the list. # Input The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each test case contains two lines. The first line of a test case contains two integers n and k (1 le k le n le 10^5) — the number of photos and the length of the subsequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the artistic values of the photos. # Output For each test case, print a single integer — the maximum possible sum of any continuous subsequence of length k. # Example Input ``` 2 6 3 1 2 3 4 5 6 4 2 4 3 2 1 ``` Output ``` 15 7 ``` # Explanation In the first test case, the subsequence of length 3 with the maximum sum is (4, 5, 6), which sums to 15. In the second test case, the subsequence of length 2 with the maximum sum is (4, 3), which sums to 7.","solution":"def max_artistic_value(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] a = test_cases[i][1] # Compute the sum of the first `k` elements current_sum = sum(a[:k]) max_sum = current_sum # Use sliding window technique to find maximum sum of any k-length subsequence for j in range(k, n): current_sum = current_sum + a[j] - a[j - k] max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"You are given an integer array `a` of length `n`. A subsegment of this array is defined as any consecutive set of elements from `a`. Your task is to find the length of the longest subsegment that contains only distinct elements. # Input - The first line contains a single integer `n` (1 leq n leq 200,000) — the number of elements in the array. - The second line contains `n` integers `a_1, a_2, ..., a_n` (1 leq a_i leq 10^9) — the elements of the array. # Output - Print a single integer representing the length of the longest subsegment containing only distinct elements. # Example Input ``` 5 1 2 3 2 1 ``` Output ``` 3 ``` Explanation For the given example, the longest subsegment with distinct elements is either `[1, 2, 3]` or `[2, 3, 2]`. Therefore, the length of the longest subsegment is 3.","solution":"def longest_unique_subsegment_length(n, a): Returns the length of the longest subsegment containing only distinct elements. :param n: int - the number of elements in the array :param a: list of int - the elements of the array :return: int - the length of the longest subsegment with distinct elements if n == 0: return 0 unique_elements = set() left = 0 max_length = 0 for right in range(n): while a[right] in unique_elements: unique_elements.remove(a[left]) left += 1 unique_elements.add(a[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Bob is working on a new project where he has to manage a list of tasks. Each task has a certain priority associated with it. He needs to execute all tasks in a manner where the sum of the priorities of consecutive tasks performed in a specific order is maximized. You are given an array of integers representing the priorities of the tasks. Bob can rearrange the tasks in any order. Help Bob find an arrangement of tasks that maximizes the sum of the priorities of consecutive tasks. Formally, if the tasks are represented by an array a of length n, you need to find a permutation p of this array such that the sum of the absolute differences between consecutive elements is maximized. Specifically, you need to maximize the value |a[p_2] - a[p_1]| + |a[p_3] - a[p_2]| + cdots + |a[p_n] - a[p_{n-1}]| Input: - The first line of input contains a single integer n (2 le n le 1000) — the number of tasks. - The second line contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) — the priorities of the tasks. Output: - Print a single line containing the permutation of the array a that maximizes the described sum. If there are multiple such permutations, print any. Example: ``` Input: 4 4 2 3 1 Output: 1 4 2 3 ``` In this example, one optimal arrangement is [1, 4, 2, 3]. The sum |4 - 1| + |2 - 4| + |3 - 2| = 3 + 2 + 1 = 6 is maximal for the given array. If there are other permutations achieving the same maximal sum, any of them is a valid answer.","solution":"def maximize_diff(n, a): Rearranges the array `a` to maximize the sum of the absolute differences between consecutive elements. a_sorted = sorted(a) result = [] for i in range((n + 1) // 2): if i < n - i - 1: result.append(a_sorted[i]) result.append(a_sorted[n - i - 1]) else: result.append(a_sorted[i]) return result"},{"question":"Given a directed weighted graph with `n` nodes and `m` edges, find the shortest paths from a given source node to all other nodes using Dijkstra\'s algorithm. The graph is presented in adjacency list format where each node has a list of its directly connected nodes and the weights of the corresponding edges. Your task is to write a program that will take the number of nodes `n`, the number of edges `m`, the edges themselves, and the source node as input, and output the shortest paths from the source node to all other nodes. If a node is unreachable from the source, output \\"INF\\" for that node. # Input Format - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of nodes and the number of edges. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — representing a directed edge from node `u` to node `v` with weight `w`. - The last line contains a single integer `s` (1 ≤ s ≤ n) — the source node. # Output Format Print `n` lines. For each node (starting from node 1 to node n), print the shortest distance from the source node `s` to that node. If the node is unreachable, print \\"INF\\". # Example Input ``` 5 6 1 2 2 1 3 5 2 3 3 2 4 1 3 5 2 4 5 2 1 ``` Output ``` 0 2 5 3 5 ``` # Note In the example, the shortest paths from node `1` to the other nodes are: - From node `1` to node `2`: 2 - From node `1` to node `3`: 5 - From node `1` to node `4`: 3 - From node `1` to node `5`: 5 - Node `1` to itself: 0","solution":"import heapq def dijkstra(n, edges, source): # Initialize graph as adjacency list graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((v-1, w)) # Distance to all nodes is initially infinity distances = [float(\'inf\')] * n distances[source-1] = 0 priority_queue = [(0, source-1)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [\\"INF\\" if dist == float(\'inf\') else dist for dist in distances]"},{"question":"You are working on a secure encryption system where each plaintext character must be mapped to a unique ciphertext character without permutations that reveal patterns. The alphabet for both plaintext and ciphertext contains all lowercase English letters ({a, b, c, ..., z}). The encryption method must use a bijective substitution cipher, which means every character in the plaintext must be replaced with a unique character in the ciphertext, and no character in the ciphertext should map to multiple plaintext characters. Your task is to determine if a given plaintext and ciphertext pair form a valid bijective substitution cipher. The first line of the input contains the integer n (1 le n le 1000), the length of the plaintext and ciphertext strings. The second line contains the plaintext string of length n consisting of lowercase English letters. The third line contains the ciphertext string of length n consisting of lowercase English letters. Print \\"YES\\" if the given plaintext and ciphertext form a valid bijective substitution cipher, otherwise print \\"NO\\". Input: ``` 6 ababab cdcdcd ``` Output: ``` YES ``` Input: ``` 6 abcdef ghijkl ``` Output: ``` YES ``` Input: ``` 6 aaaaaa abcdef ``` Output: ``` NO ```","solution":"def is_valid_bijective_cipher(n, plaintext, ciphertext): Determine if the given plaintext and ciphertext strings form a valid bijective substitution cipher. Args: n : int : length of the strings plaintext : str : string of length n consisting of lowercase English letters (source text) ciphertext : str : string of length n consisting of lowercase English letters (substituted text) Returns: str : \\"YES\\" if they form a valid bijective substitution cipher, otherwise \\"NO\\". if n != len(plaintext) or n != len(ciphertext): return \\"NO\\" # Create the mapping dictionaries plain_to_cipher = {} cipher_to_plain = {} for p, c in zip(plaintext, ciphertext): if p in plain_to_cipher: # If \'p\' is already mapped but not to \'c\', then not bijective if plain_to_cipher[p] != c: return \\"NO\\" else: plain_to_cipher[p] = c if c in cipher_to_plain: # If \'c\' is already mapped but not to \'p\', then not bijective if cipher_to_plain[c] != p: return \\"NO\\" else: cipher_to_plain[c] = p # If all characters are bijectively mapped return \\"YES\\""},{"question":"You are given a string of parentheses consisting of characters \'(\' and \')\'. Your task is to determine the maximum length of a substring that can be removed to leave the string as a valid sequence of parentheses. A valid sequence of parentheses is defined as one in which every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and they are correctly nested. The first line of the input contains a single integer n (1 ≤ n ≤ 105) — the length of the given string. The second line contains a string s of length n consisting of the characters \'(\' and \')\'. Output a single integer — the maximum length of a substring that can be removed to make the string valid. Example: Input: 6 ()()() Output: 6 Input: 8 ))((())( Output: 4 Explanation: In the second example, removing the substring \\"))\\" leaves the string \\"(())(\\", which is a valid sequence of parentheses and the length of the removed substring is 4.","solution":"def max_length_to_remove_to_make_valid(s): Returns the maximum length of a substring that can be removed to make the provided string of parentheses a valid sequence of parentheses. left_count, right_count = 0, 0 n = len(s) # Step through the string and determine the counts of unbalanced left and right parentheses for char in s: if char == \'(\': left_count += 1 elif char == \')\': if left_count > 0: left_count -= 1 else: right_count += 1 # Removed substring includes unbalanced left and right parentheses return left_count + right_count"},{"question":"You are given a collection of N logs each containing text data. Your task is to implement a system that can efficiently answer multiple queries regarding the occurrence of a given substring within the logs. Each query will ask whether a particular substring appears in any of the logs, and if so, return the first log (among 1 to N) containing that substring. If no such log contains the substring, return \\"No Match\\". # Input - The first line contains an integer `N` (`1 ≤ N ≤ 10^5`), denoting the number of logs. - The next `N` lines each contain a string `L_i` (each string of length at most `10^6`), where `L_i` represents the content of the i-th log. - The next line contains an integer `Q` (`1 ≤ Q ≤ 10^5`), denoting the number of queries. - The following `Q` lines each contain a string `S_j` (each string of length at most `100`), where `S_j` represents the substring to be searched within the logs. # Output - For each query, output the result on a separate line. If the substring `S_j` is found in any log, print the 1-based index of the first log containing the substring. If the substring doesn\'t match any log, print \\"No Match\\". # Example Input ``` 3 hello world the quick brown fox jumps over the lazy dog 2 quick lazy ``` Output ``` 2 3 ``` # Explanation - In the first query, \\"quick\\" is found in the second log \\"the quick brown fox\\". - In the second query, \\"lazy\\" is found in the third log \\"jumps over the lazy dog\\".","solution":"def log_query_system(logs, queries): This function answers multiple substring queries on a given list of log strings. Args: logs (list of str): The list of log strings. queries (list of str): The list of substring queries. Returns: list of str: The result for each query. results = [] for query in queries: found = False for i, log in enumerate(logs): if query in log: results.append(str(i + 1)) found = True break if not found: results.append(\\"No Match\\") return results"},{"question":"Given an array of n integers, find the length of the longest subsequence such that the difference between the maximum and minimum element in the subsequence does not exceed k. For example, if the input array is [1, 5, 2, 7, 2, 4, 6] and k is 3, one of the longest valid subsequences could be [1, 2, 2, 4] or [2, 2, 4, 5]. The length of this subsequence is 4. The first line of the input contains two integers n (1 le n le 10^5) and k (0 le k le 10^9) — the length of the array and the allowed difference. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. Output the length of the longest subsequence whose maximum and minimum values differ by at most k. # Examples: Input ``` 7 3 1 5 2 7 2 4 6 ``` Output ``` 4 ``` Input ``` 5 2 1 3 3 0 5 ``` Output ``` 3 ```","solution":"def longest_subsequence_with_diff(arr, k): Returns the length of the longest subsequence such that the difference between the maximum and minimum element in the subsequence does not exceed k. arr.sort() n = len(arr) left = 0 max_len = 0 for right in range(n): while arr[right] - arr[left] > k: left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Samuel enjoys creating unique passwords. He recently read about a method where a password should be considered \\"valid\\" if it meets certain criteria based on its length and the type of characters it contains. Samuel decides to follow these rules: 1. The password must be of length n (1 ≤ n ≤ 100). 2. The password must contain at least one uppercase letter (A-Z). 3. The password must contain at least one lowercase letter (a-z). 4. The password must contain at least one digit (0-9). 5. The password should not contain any special characters. Samuel has generated a list of potential passwords and wants to filter out the valid ones based on the above criteria. Help Samuel by writing a program to determine which of his passwords are valid. Input The first line contains an integer n, the number of passwords Samuel has generated (1 ≤ n ≤ 100). Each of the next n lines contains one password, consisting of only printable ASCII characters. Output For each password, print \\"Valid\\" if the password meets all the criteria; otherwise, print \\"Invalid\\". Example Input 5 aB1 abcdefgh ABCDEFGH 12345678 aB3defGh Output Valid Invalid Invalid Invalid Valid Explanation - In the first example, \\"aB1\\" meets all criteria: length 3, one uppercase letter \'B\', one lowercase letter \'a\', and one digit \'1\'. - \\"abcdefgh\\" is invalid because it contains no uppercase letters or digits. - \\"ABCDEFGH\\" is invalid because it contains no lowercase letters or digits. - \\"12345678\\" is invalid because it contains no letters. - \\"aB3defGh\\" meets all criteria: length 8, one uppercase letter \'B\', one lowercase letter \'a\', and one digit \'3\'.","solution":"def is_valid_password(password): Check if a password is valid based on predefined criteria. if len(password) < 1 or len(password) > 100: return \\"Invalid\\" has_upper = False has_lower = False has_digit = False for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif not char.isalnum(): return \\"Invalid\\" if has_upper and has_lower and has_digit: return \\"Valid\\" return \\"Invalid\\" def validate_passwords(passwords): Given a list of passwords, determine which are valid. results = [] for password in passwords: results.append(is_valid_password(password)) return results"},{"question":"Zoey is fascinated by numbers and sequences. She has been recently studying geometric progressions, and today, she stumbled upon an interesting problem related to them. A geometric progression (or geometric sequence) is a sequence of numbers in which the ratio of any two successive members is a constant called the common ratio. Zoey has decided to test you with the following challenge: Given an initial term a, a common ratio r, and a sequence length n, determine the number of distinct integers that can be found in the geometric progression modulo 10^9 + 7. The progression should start with a and have each subsequent term generated by multiplying the previous term by r. Zoey wants to ensure that the sequence terms considered distinct are indeed different from one another. The first line of input contains three integers a, r, and n (1 ≤ a, r ≤ 10^9, 1 ≤ n ≤ 10^5). Output a single integer — the number of distinct integers in the geometric progression sequence modulo 1000000007 (10^9 + 7). Example: ``` Input: 2 3 4 Output: 4 ``` Explanation: The sequence starting with 2, with common ratio 3 and length 4 is: {2, 6, 18, 54}. All terms are distinct, so the output is 4.","solution":"def count_distinct_in_geometric_progression(a, r, n): MOD = 1000000007 terms = set() for i in range(n): term = (a * pow(r, i, MOD)) % MOD terms.add(term) return len(terms)"},{"question":"A new online shopping website uses a rating system for product reviews. Customers rate products on a scale of 1 to 5 stars. To make the ratings fairer, the website wants to implement a feature called \\"Critical Average Rating\\" (CAR). The CAR of a product is defined as the average rating after removing the highest and lowest rating from the list of ratings for that product. This helps avoid the impact of extremely high or low ratings. You need to implement a program that calculates the CAR for a list of products based on given ratings. The first line of input contains a single integer n (1 ≤ n ≤ 1000), representing the number of products. For each product, the next line of input contains an integer m (3 ≤ m ≤ 1000), representing the number of ratings for that product, followed by m integers r1, r2, ..., rm (1 ≤ ri ≤ 5), representing the ratings. For each product, print a single float number, rounded to two decimal places, representing the CAR of that product. If all the ratings are the same, print the average of those ratings. # Example: Input: ``` 2 5 1 2 3 4 5 4 4 4 4 4 ``` Output: ``` 3.00 4.00 ``` In the first example, the highest rating (5) and the lowest rating (1) are removed. The average of the remaining ratings (2, 3, 4) is 3.00. In the second example, all ratings are the same, so the CAR is simply the average of those ratings, which is 4.00. # Constraints: - The number of ratings for each product is at least 3. - All ratings are integers between 1 and 5. - The program should handle up to 1000 products efficiently.","solution":"def calculate_car(ratings): Calculate the Critical Average Rating (CAR) for a list of ratings. Args: ratings (list): List of integers representing the ratings. Returns: float: The CAR value rounded to two decimal places. # Sort the ratings to find the highest and lowest easily sorted_ratings = sorted(ratings) # If all ratings are the same, return their average if sorted_ratings[0] == sorted_ratings[-1]: return round(sum(ratings) / len(ratings), 2) # Remove the highest and lowest rating trimmed_ratings = sorted_ratings[1:-1] # Calculate the average of the remaining ratings car = sum(trimmed_ratings) / len(trimmed_ratings) return round(car, 2) def process_products(products): Process multiple products to find their CAR values. Args: products (list): List of tuples where each tuple contains the number of ratings and a list of ratings for a product. Returns: list: List of CAR values rounded to two decimal places for each product. car_values = [] for product in products: m, ratings = product[0], product[1] car = calculate_car(ratings) car_values.append(car) return car_values"},{"question":"In a small town, there is a unique way of celebrating holidays by painting rows of houses. The town has a row of n houses, each initially painted with one of c colors. The mayor of the town wants to repaint these houses but with certain restrictions: any two adjacent houses should have different colors after repainting. You are given the initial colors of the houses in the form of an array a_1, a_2, dots, a_n, where a_i indicates the color of the i-th house (1-based index). You need to find the minimum number of repaints required such that no two adjacent houses have the same color. The first line of the input contains two integers, n (1 le n le 10^5) — the number of houses, and c (1 le c le 100) — the number of different colors. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le c), the initial colors of the houses. Output one integer, the minimum number of repaints required to ensure no two adjacent houses have the same color. # Example Input ``` 5 3 1 1 3 3 2 ``` Output ``` 2 ``` Explanation In this example, one possible sequence of repaints is: - Repaint the first house (1) with color 2, sequence becomes [2, 1, 3, 3, 2] - Repaint the fourth house (3) with color 1, sequence becomes [2, 1, 3, 1, 2] Thus, the minimum number of repaints is 2. Other solutions with the same number of repaints may also exist.","solution":"def min_repaints(n, c, colors): Returns the minimum number of repaints required such that no two adjacent houses have the same color. repaints = 0 for i in range(1, n): if colors[i] == colors[i - 1]: # Find a replacement color that is different from both the previous and the next (if applicable) house for color in range(1, c + 1): if color != colors[i - 1] and (i == n - 1 or color != colors[i + 1]): colors[i] = color repaints += 1 break return repaints"},{"question":"A university is organizing a series of programming contests. Each contest is represented by an interval on the timeline, where the start and end of the interval represent the days on which the contest starts and ends. Different contests might overlap. You are given the intervals of all the contests, and your task is to find a single day on which the maximum number of contests are taking place. For example, if the contests are scheduled as follows: - Contest 1: Day 1 to Day 4 - Contest 2: Day 2 to Day 5 - Contest 3: Day 3 to Day 7 - Contest 4: Day 5 to Day 6 The maximum number of contests happening on a single day is 3 (on Day 3). Input: - The first line contains a single integer q (1 le q le 10^4) — the number of test cases. - For each test case: - The first line contains a single integer n (1 le n le 10^5) — the number of contests. - Then n lines follow, each containing two integers l and r (1 le l le r le 10^9), representing the start and end days of a contest. Output: - For each test case, print a single integer — the maximum number of contests taking place on any single day. Example: Input: 3 4 1 4 2 5 3 7 5 6 2 1 3 2 5 1 7 7 Output: 3 2 1 Explanation: - In the first test case, the maximum number of contests on a single day is 3 (Day 3). - In the second test case, the maximum number of contests on a single day is 2 (Day 2 and Day 3). - In the third test case, there is only one contest on Day 7.","solution":"def max_contests_on_a_single_day(test_cases): results = [] for n, contests in test_cases: events = [] for l, r in contests: events.append((l, 1)) # A contest starts events.append((r + 1, -1)) # A contest ends the next day after r events.sort() current_contests = 0 max_contests = 0 for _, count in events: current_contests += count if current_contests > max_contests: max_contests = current_contests results.append(max_contests) return results # Example usage: q = 3 test_cases = [ (4, [(1, 4), (2, 5), (3, 7), (5, 6)]), (2, [(1, 3), (2, 5)]), (1, [(7, 7)]) ] results = max_contests_on_a_single_day(test_cases) for result in results: print(result)"},{"question":"In a binary tree, each node contains a value, and each node has zero, one, or two children. You need to write a function that finds the lowest common ancestor (LCA) of two given nodes in the tree. The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in the tree that has both `p` and `q` as descendants (where a node can be a descendant of itself). You are given the root of a binary tree and two values representing the target nodes `p` and `q`. Your task is to find the LCA of these two nodes. Assume that all TreeNode values are unique, and both `p` and `q` exist in the binary tree. The structure of a TreeNode is as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of nodes in the tree. - The second line contains a space-separated list of `n-1` tuples `(parent, child, is_left)` which represent that `child` is the left (if `is_left` is 1) or right (if `is_left` is 0) child of `parent`. - The third line contains two integers `p` and `q`, the values of the target nodes. # Output - Print a single integer, the value of the LCA of nodes `p` and `q`. # Example Input ``` 6 1 2 1 1 3 0 2 4 1 2 5 0 3 6 0 4 6 ``` Output ``` 1 ``` # Note In the above example, the binary tree is: ``` 1 / 2 3 / 4 5 6 ``` The lowest common ancestor of nodes `4` and `6` is node `1`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(n, links): nodes = {i: TreeNode(i) for i in range(1, n+1)} for parent, child, is_left in links: if is_left: nodes[parent].left = nodes[child] else: nodes[parent].right = nodes[child] return nodes[1] # Assuming the root node is always 1 def find_LCA(root, p, q): if root is None or root.val == p or root.val == q: return root left = find_LCA(root.left, p, q) right = find_LCA(root.right, p, q) if left and right: return root return left if left else right def get_lca(n, links, p, q): root = build_tree(n, links) return find_LCA(root, p, q).val # Example usage: n = 6 links = [(1, 2, 1), (1, 3, 0), (2, 4, 1), (2, 5, 0), (3, 6, 0)] p, q = 4, 6 print(get_lca(n, links, p, q)) # Output should be 1"},{"question":"You are given an array of n integers and two non-negative integers x and y. Your task is to determine whether it is possible to partition the array into two non-empty subarrays such that the sum of the elements in the first subarray is divisible by x and the sum of the elements in the second subarray is divisible by y. Note that each element of the array must belong to exactly one of the two subarrays. The first line of input contains an integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains two non-negative integers x and y (0 ≤ x, y ≤ 10^9). Output \\"YES\\" if such a partition is possible, otherwise output \\"NO\\". In the first sample, if the array is [2, 4, 1, 3, 6] and x = 3, y = 6, you can partition it into [2, 4, 1] and [3, 6]. The sum of the first subarray is 7 which is not divisible by 3, and the sum of the second subarray is 9 which is divisible by 6. Since there is no valid partition, the answer is \\"NO\\". In the second sample, if the array is [6, 12, 9, 15] and x = 6, y = 9, you can partition it into [6, 12, 9] and [15]. The sum of the first subarray is 27 which is divisible by 9, and the sum of the second subarray is 15 which is divisible by 6, so the answer is \\"YES\\".","solution":"def can_partition(arr, x, y): n = len(arr) if n < 2: return \\"NO\\" total_sum = sum(arr) prefix_sum = 0 for i in range(n - 1): # To ensure each subarray is non-empty, we iterate till n-1 prefix_sum += arr[i] suffix_sum = total_sum - prefix_sum if (x == 0 or prefix_sum % x == 0) and (y == 0 or suffix_sum % y == 0): return \\"YES\\" return \\"NO\\""},{"question":"Lisa enjoys exploring mazes. She has a cute robot friend that she wants to help navigate through a grid-based maze. The robot starts at the top-left cell (1, 1) and needs to reach the bottom-right cell (n, m). The robot can move up, down, left, or right between adjacent cells, but some cells are blocked and can\'t be traversed. Given the dimensions of the grid and the positions of the blocked cells, determine if the robot can reach the bottom-right cell from the top-left cell. If it can, output the length of the shortest path in terms of the number of moves. If it can\'t, output -1. The input consists of multiple test cases. The first line contains an integer t, the number of test cases (1 ≤ t ≤ 100). For each test case: - The first line contains two integers n and m, the dimensions of the grid (1 ≤ n, m ≤ 100). - The second line contains an integer k, the number of blocked cells (0 ≤ k ≤ n * m). - Each of the next k lines contains two integers x and y (1 ≤ x ≤ n, 1 ≤ y ≤ m) representing the 1-based coordinates of a blocked cell. For each test case, output a single integer: the length of the shortest path from the top-left cell to the bottom-right cell, or -1 if no such path exists. Example input: ``` 2 3 3 1 2 2 3 3 2 1 2 2 1 ``` Example output: ``` 4 -1 ```","solution":"from collections import deque def shortest_path(n, m, blocked_positions): Returns the length of the shortest path from (1, 1) to (n, m) or -1 if no such path exists. grid = [[0] * m for _ in range(n)] for x, y in blocked_positions: grid[x - 1][y - 1] = 1 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, distance = queue.popleft() if x == n - 1 and y == m - 1: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 def solve_maze(t, test_cases): Solves multiple test cases and returns the results. results = [] for n, m, k, blocked_positions in test_cases: results.append(shortest_path(n, m, blocked_positions)) return results"},{"question":"Little Lily loves playing with sequences. Recently she came across an interesting problem and wants your help to solve it. Given a sequence of integers a_1, a_2, ldots, a_n, she wants to find the longest subsequence of strictly increasing integers. The subsequence does not need to be contiguous or unique. Formally, a subsequence b_1, b_2, ldots, b_k of a sequence a_1, a_2, ldots, a_n is any sequence such that there exist integers 1 leq i_1 < i_2 < cdots < i_k leq n for which b_1 = a_{i_1}, b_2 = a_{i_2}, ldots, b_k = a_{i_k} and b_1 < b_2 < cdots < b_k. Write a function that takes in the sequence as input and returns the length of the longest strictly increasing subsequence. # Input - The first line contains an integer n (1 leq n leq 10^5), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the sequence. # Output - Print a single integer representing the length of the longest strictly increasing subsequence in the sequence. # Example Input: ``` 10 3 10 2 1 20 4 6 10 30 5 ``` Output: ``` 5 ``` Explanation: The longest increasing subsequence is [3, 4, 6, 10, 30], and its length is 5. # Note - The time complexity required to solve this problem efficiently is O(n log n). Therefore, more brute force solutions, which may involve generating all subsequences, are not likely to work within the time limits for large n.","solution":"import bisect def longest_increasing_subsequence(arr): This function returns the length of the longest increasing subsequence. if not arr: return 0 lis = [] for num in arr: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Alice is an avid gardener and she loves planting flowers in her garden which is represented as a 1-dimensional array of length n. Each position in the array represents a segment of her garden where she can plant flowers. Initially, all positions in the array are empty (represented by 0). Alice can perform two types of operations: 1. Plant a flower (represented by 1) at a given position, if the position is empty. 2. Check if there is a contiguous sub-segment of length k in the garden that contains only flowers (i.e., all 1s). Your task is to process these operations and output the result of each query of the second type. The first line contains two integers n (1 le n le 10^5) and m (1 le m le 10^5) — the length of the array and the number of operations. The second line contains one integer k (1 le k le n), the required length of the contiguous segment of flowers. Each of the next m lines contains an operation of one of the following two types: - \\"1 i\\" (1-indexed) — plant a flower at position i (1 ≤ i ≤ n). - \\"2\\" — check if there exists a contiguous sub-segment of length k that contains only flowers, and output \\"YES\\" or \\"NO\\" based on the result. Output the result of each query of the second type in a new line. # Example Input ``` 8 5 3 1 3 1 4 2 1 5 2 ``` Output ``` NO YES ```","solution":"def garden_operations(n, m, k, operations): garden = [0] * n results = [] for operation in operations: if operation[0] == 1: # plant flower i = operation[1] - 1 if garden[i] == 0: garden[i] = 1 elif operation[0] == 2: # check for sub-segment of length k with only flowers found = False for i in range(n - k + 1): if all(garden[i:i + k]): found = True break results.append(\\"YES\\" if found else \\"NO\\") return results # Example usage: n = 8 m = 5 k = 3 operations = [ (1, 3), (1, 4), (2, ), (1, 5), (2, ) ] print(garden_operations(n, m, k, operations))"},{"question":"You are given a sequence of n integers. Your task is to find the minimum number of modifications required to make all elements of the sequence equal. In one modification, you are allowed to increment or decrement any element of the sequence by 1. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^5). Print a single integer — the minimum number of modifications required to make all elements of the sequence equal. For example, for the input: ``` 5 1 4 5 7 8 ``` The output should be: ``` 10 ``` Explanation: One possible way is to change the sequence to [5, 5, 5, 5, 5]. The number of modifications is |1-5| + |4-5| + |5-5| + |7-5| + |8-5| = 4 + 1 + 0 + 2 + 3 = 10. In another example: ``` 3 5 10 20 ``` The output should be: ``` 20 ``` Explanation: One possible way is to change the sequence to [10, 10, 10]. The number of modifications is |5-10| + |10-10| + |20-10| = 5 + 0 + 10 = 15. Another way is to change the sequence to [20, 20, 20], which will also result in the same number of modifications.","solution":"def min_modifications_to_equalize(arr): Returns the minimum number of modifications required to make all elements of the array equal. # Sort the array to find the median arr.sort() # Median is the best candidate to minimize the modifications median = arr[len(arr) // 2] return sum(abs(x - median) for x in arr)"},{"question":"Given a string s containing lowercase English letters only, you need to determine the length of the longest substring of s, where each character appears at most once. The input string s has a length between 1 and 1000. Write a function that returns the length of this longest substring. **Input** - A single line containing the string s. **Output** - A single integer representing the length of the longest substring with all unique characters. **Example** ``` Input: \\"abcabcbb\\" Output: 3 Input: \\"bbbbb\\" Output: 1 Input: \\"pwwkew\\" Output: 3 ``` **Note**: The longest substring without repeating characters for \\"abcabcbb\\" is \\"abc\\", which the length is 3. For \\"bbbbb\\", the longest substring is \\"b\\", with the length of 1. Finally, for \\"pwwkew\\", the longest substring is \\"wke\\", with the length of 3. Remember that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring where all characters are unique. char_set = set() left = 0 max_length = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers that represents the cost of different fruits you can buy. You want to host a fruit feast for your friends. To make it diverse, you would like to buy exactly two different types of fruits such that the total cost is less than or equal to a specific amount, k. Your task is to determine the maximum total cost you can achieve within the budget of k. The first line contains two integers n (1 le n le 1000) — the number of different types of fruits, and k (1 le k le 10^6) — the maximum total cost you can spend. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^6) — the costs of each type of fruit. Print one integer — the maximum total cost of two different types of fruits within the budget k. If no such pair exists, print -1. **Example:** Input: ``` 5 50 20 30 10 40 25 ``` Output: ``` 50 ``` In this example, you can choose fruits with costs 20 and 30 to achieve a total cost of 50, which is within the budget.","solution":"def maximum_total_cost(n, k, costs): Determines the maximum total cost of any two different types of fruits within the budget k. Parameters: n (int): The number of different types of fruits. k (int): The maximum total cost that can be spent. costs (list of int): The costs of each type of fruit. Returns: int: The maximum total cost of two different types of fruits within the budget k, or -1 if no such pair exists. max_cost = -1 # Iterate through all pairs of fruits for i in range(n): for j in range(i + 1, n): total_cost = costs[i] + costs[j] if total_cost <= k and total_cost > max_cost: max_cost = total_cost return max_cost"},{"question":"Tom has just received a collection of antique coins from his grandfather. Each coin has a different value, and Tom wants to sell a subset of these coins. However, Tom also wants to ensure that the subset of coins he chooses to sell has the highest possible sum of values while not exceeding a given monetary target. Can you help Tom determine the maximum sum of the subset of coin values that is less than or equal to the target? The input consists of two lines: The first line contains two space-separated integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 1000) — the number of coins and the target monetary value. The second line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 100) — the values of each coin. Print a single integer — the maximum sum of the subset of coin values that is less than or equal to the target. # Example: **Input:** ``` 5 9 1 2 3 4 5 ``` **Output:** ``` 9 ``` **Explanation:** Tom can choose the top maximum subset that sums up to the target 9, which are the coins with values {1, 3, 5}. In this case, {4, 5} would also be a valid subset as it satisfies the target sum constraint.","solution":"def max_subset_sum(n, T, values): Function to find the maximum sum of a subset of values that is less than or equal to the target value T. Parameters: - n (int): Number of coins - T (int): Target monetary value - values (list): List of coin values Returns: - int: The maximum sum of the subset of coin values that is less than or equal to the target value. dp = [0] * (T + 1) for value in values: for j in range(T, value - 1, -1): dp[j] = max(dp[j], dp[j - value] + value) return dp[T]"},{"question":"Alice and Bob are playing a game of numbers on a n x m grid. The game begins with two players placing their tokens independently on any cell of the first row. They take turns to move their tokens. On each turn, a player can move their token downwards to any cell in the row directly below, but only if the gcd (greatest common divisor) of the current cell and the cell they wish to move to is greater than 1. The player who cannot make a move loses the game. Your task is to determine, given the initial placement of the tokens, which of the two players will win if both play optimally starting from their respective initial positions. The input consists of: - The first line contains two integers, n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines each contain m integers, a_ij (1 ≤ a_ij ≤ 10^9) — the values in the grid. - The next two lines each contain a single integer (1 ≤ s1, s2 ≤ m) — the initial columns of Alice\'s and Bob\'s tokens, respectively. Output one of the two strings \\"Alice\\" or \\"Bob\\" which indicates the winner if both play optimally. # Example Input: ``` 3 3 2 3 4 6 10 12 15 18 20 1 3 ``` Output: ``` Alice ``` Explanation: - Alice\'s initial column is 1 (value 2) and Bob\'s initial column is 3 (value 4). - Both can move down taking optimal paths with gcd restrictions. - Ultimately, Alice can outplay Bob if both play optimally, making Alice the winner.","solution":"from math import gcd from collections import deque def is_winning_path(grid, n, m, start_col): dp = [[False] * m for _ in range(n)] dp[0][start_col] = True queue = deque([(0, start_col)]) while queue: row, col = queue.popleft() if row == n - 1: return True for next_col in range(m): if gcd(grid[row][col], grid[row + 1][next_col]) > 1 and not dp[row + 1][next_col]: dp[row + 1][next_col] = True queue.append((row + 1, next_col)) return False def determine_winner(n, m, grid, s1, s2): if is_winning_path(grid, n, m, s1 - 1): return \\"Alice\\" elif is_winning_path(grid, n, m, s2 - 1): return \\"Bob\\" else: return \\"Bob\\""},{"question":"You are standing on a rectangular grid with rows and columns labeled from 1 to n and 1 to m respectively. You can move in four possible directions: up, down, left, and right. However, there are certain cells in the grid which are blocked, meaning you cannot pass through them. You start at the top-left corner of the grid, i.e., position (1, 1), and you want to reach the bottom-right corner of the grid, i.e., position (n, m), in the shortest possible way. You need to find out whether it\'s possible to reach the destination and if so, compute the minimum number of steps required to do so. Write a program that determines the minimum number of steps needed to get from the start position to the destination, or determines that it is impossible. Input: - The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid. - The next n lines each contain m characters, representing the grid. A character \'.\' represents an open cell and a character \'#\' represents a blocked cell. Output: - If it is possible to reach the bottom-right corner from the top-left corner, print the minimum number of steps required. Otherwise, print \\"Impossible\\". Example: Input: 5 5 ..... .#. ..#.. .#. ..... Output: 8 Input: 3 3 . # . Output: Impossible","solution":"from collections import deque def shortest_path(grid, n, m): Find the shortest path from the top-left corner (1, 1) to the bottom-right corner (n, m) in a grid with blocked cells. grid: List of strings representing the grid. n: Number of rows in the grid. m: Number of columns in the grid. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"Impossible\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, column, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == n - 1 and y == m - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return \\"Impossible\\""},{"question":"Emilia is organizing a toy collection in a single straight line on her shelf. Each toy has a unique height represented as an integer. Emilia wants to find the length of the longest sequence of toys on her shelf such that the height of each toy in the sequence is strictly increasing. Given the list of toy heights, determine the length of the longest strictly increasing subsequence. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines: the first line contains an integer n (1 ≤ n ≤ 1000) — the number of toys on the shelf, and the second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10000) — the heights of the toys. For each test case, output a single integer — the length of the longest strictly increasing subsequence of the toy heights. # Example Input: ``` 2 6 5 2 8 6 3 6 5 1 2 3 4 5 ``` Output: ``` 3 5 ``` # Explanation In the first test case, the longest strictly increasing subsequence can be [2, 3, 6] (or [2, 6, 8]), with a length of 3. In the second test case, the entire sequence [1, 2, 3, 4, 5] itself is strictly increasing, with a length of 5.","solution":"def length_of_lis(heights): Returns the length of the longest strictly increasing subsequence. if not heights: return 0 dp = [1] * len(heights) for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(t, test_cases): results = [] for case in test_cases: n, heights = case result = length_of_lis(heights) results.append(result) return results"},{"question":"Anna is passionate about painting and has many colorful tubes of paint. Each tube has a different color represented by a lowercase Latin letter. She has n tubes of paint. To create a beautiful painting, she wants to lay out these tubes in such a way that no two consecutive tubes have the same color. If there are any consecutive tubes with the same color, she can swap any two tubes of paint to achieve the goal. You need to determine the minimum number of swaps required to rearrange the tubes so that no two consecutive tubes have the same color. The first and only line of input contains a string of length n (2 ≤ n ≤ 10^5), consisting of lowercase Latin letters, where each letter represents the color of a tube of paint. Print the single integer — the minimum number of swaps required to rearrange the tubes so that no two consecutive tubes have the same color. For example, if the input string is \\"aaabbb\\", you can obtain \\"ababab\\" by performing two swaps (swap second and third tubes, then swap fourth and fifth tubes). The output should be 2. Another example, for the input string \\"abcabc\\", no swaps are needed as no two consecutive tubes have the same color, so the output should be 0.","solution":"def min_swaps_to_avoid_consecutive(s): Returns the minimum number of swaps required to rearrange the tubes so that no two consecutive tubes have the same color. swaps = 0 i = 0 while i < len(s) - 1: if s[i] == s[i + 1]: swaps += 1 i += 2 else: i += 1 return swaps"},{"question":"Chef has a kitchen with many compartments to store ingredients. Each compartment has a unique temperature control system to keep different ingredients at the optimal temperature. Chef wants to manage these compartments using a system that can add or remove compartments and adjust their temperatures when certain conditions are met. Each compartment has its own unique identifier and a set initial temperature. When a new compartment is added, it is immediately set to a specific target temperature. If a compartment needs its temperature adjusted, it increases or decreases gradually. Chef also can remove compartments if they are no longer needed. The system supports three types of operations: 1. **Add a Compartment:** \\"+ id initial_temperature target_temperature\\" – Add a new compartment with a unique identifier, starting at the given initial temperature and adjusting towards the target temperature. 2. **Remove a Compartment:** \\"- id\\" – Remove an existing compartment identified by its unique identifier. 3. **Adjust Temperature:** \\"adjust id new_temperature\\" – Adjust the current temperature of an existing compartment to the new temperature. Chef wants to know the total number of temperature adjustments needed to reach the target temperatures for all compartments that are not removed. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), where n is the number of operations and m is the maximum number of compartments that can be added. The next n lines contain one of the three types of operations mentioned above. All compartment identifiers are unique and integers between 1 and 1000 inclusive. The initial and target temperatures, as well as adjustment temperatures, are also integers between -100 and 100 inclusive. Output a single number: the total number of temperature adjustments needed to reach the target temperatures for all compartments that were not removed. Example: Input: ``` 7 3 + 1 20 30 adjust 1 25 + 2 50 40 - 1 + 3 -10 0 adjust 3 -5 adjust 3 0 ``` Output: ``` 3 ``` Explanation: 1. The first compartment starts at 20 and needs to reach 30. One adjustment is made to 25, so it needs one more adjustment to reach 30. 2. The second compartment starts at 50 and needs to reach 40. But it was removed before any adjustment was made. 3. The third compartment starts at -10 and needs to reach 0. Two adjustments were made, first to -5 and then to 0, so a total of 2 adjustments. Overall, the total number of temperature adjustments is 1 (first compartment) + 2 (third compartment) = 3.","solution":"def total_temperature_adjustments(operations, max_compartments): compartments = {} adjustments = 0 for op in operations: parts = op.split() action = parts[0] if action == \'+\': id = int(parts[1]) if len(compartments) < max_compartments: initial_temp = int(parts[2]) target_temp = int(parts[3]) compartments[id] = {\'initial_temp\': initial_temp, \'current_temp\': initial_temp, \'target_temp\': target_temp, \'adjustments\': 0} elif action == \'-\': id = int(parts[1]) if id in compartments: del compartments[id] elif action == \'adjust\': id = int(parts[1]) if id in compartments: new_temp = int(parts[2]) compartments[id][\'current_temp\'] = new_temp compartments[id][\'adjustments\'] += 1 for id in compartments: comp = compartments[id] if comp[\'current_temp\'] != comp[\'target_temp\']: comp[\'adjustments\'] += 1 for id in compartments: adjustments += compartments[id][\'adjustments\'] return adjustments n = 7 m = 3 operations = [ \'+ 1 20 30\', \'adjust 1 25\', \'+ 2 50 40\', \'- 1\', \'+ 3 -10 0\', \'adjust 3 -5\', \'adjust 3 0\' ] print(total_temperature_adjustments(operations, m)) # Expected output: 3"},{"question":"The developers at a shipping company are designing a new system to manage container shipments. Each container is tracked by its weight, and the management wants to ensure that the sum of weights of any three containers does not exceed the maximum weight capacity of the ship. Given an array of integers representing the weights of containers and a maximum weight capacity, write a program that determines whether there exists any combination of three containers whose total weight exceeds the maximum weight capacity. # Input: - The first line contains two integers, `n` (3 ≤ n ≤ 100) — the number of containers and `W` (1 ≤ W ≤ 10000) — the maximum weight capacity of the ship. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ 10000) — the weights of the containers. # Output: - Print \\"YES\\" (without quotes) if there is a combination of any three containers whose total weight exceeds the maximum weight capacity. Otherwise, print \\"NO\\" (without quotes). # Example: Input: ``` 5 100 20 30 50 40 60 ``` Output: ``` NO ``` In this example, no combination of three containers exceeds the maximum weight capacity of 100. Even the heaviest combination, 50 + 40 + 60 = 150, does not exceed 100, thus the answer is \\"NO\\".","solution":"def check_weights(n, W, weights): Determines whether there exists any combination of three containers whose total weight exceeds the maximum weight capacity of the ship. Parameters: n (int): Number of containers. W (int): Maximum weight capacity of the ship. weights (list): List of integers representing the weights of the containers. Returns: str: \\"YES\\" if such a combination exists, otherwise \\"NO\\". for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if weights[i] + weights[j] + weights[k] > W: return \\"YES\\" return \\"NO\\" # Example usage: # n = 5 # W = 100 # weights = [20, 30, 50, 40, 60] # print(check_weights(n, W, weights)) # Output: NO"},{"question":"A row of n soldiers is standing at attention, and each soldier can either face forward or backward. Define the minimum number of soldiers that must change their direction to ensure that all soldiers face the same direction. You need to determine this minimum number. The only line of input contains an integer n (1 leq n leq 10^6) and a string of length n consisting of the characters \'F\' and \'B\'. \'F\' indicates a soldier facing forward and \'B\' indicates a soldier facing backward. Output the minimum number of direction changes required. **Example:** Input: 5 FBBFB Output: 2 Explanation: Changing the second and fourth soldiers to face forward or changing the first and last soldiers to face backward results in all soldiers facing the same direction with the minimum number of changes (2 in both cases).","solution":"def min_direction_changes(n, soldiers): Returns the minimum number of soldiers that need to change their direction so that all soldiers face the same direction. Parameters: n (int): The number of soldiers soldiers (str): A string of length n with \'F\' (forward) and \'B\' (backward) indicating the direction each soldier is facing Returns: int: Minimum number of direction changes required to make all soldiers face the same way forward_count = soldiers.count(\'F\') backward_count = n - forward_count # total - forward = backward # The minimum changes required will be the minimum of all facing forward or all facing backward return min(forward_count, backward_count) # Example usage # Example input: (5, \\"FBBFB\\") # Expected output: 2 print(min_direction_changes(5, \\"FBBFB\\"))"},{"question":"You are given a rectangle grid of size n times m. Each cell is initially either empty or contains an obstacle. Your task is to find the number of ways to move from the top-left corner of the grid to the bottom-right corner. You can only move right or down, and you cannot move into cells that contain obstacles. More formally, you are given a grid of size n times m. Each cell in the grid is denoted as either 0 (empty) or 1 (obstacle). Find the number of unique paths from the cell (1,1) to (n,m), considering you can only move right or down, and you cannot pass through cells with obstacles. The first line of the input contains two integers n and m (1 leq n, m leq 100) — the dimensions of the grid. Each of the next n lines contains m integers 0 or 1, representing the grid. Output a single integer — the number of unique paths from the cell (1,1) to (n,m). If there is no valid path, output 0. # Example Input ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output ``` 2 ``` Input ``` 2 2 0 1 1 0 ``` Output ``` 0 ``` Explanation In the first example, there are 2 ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is no possible way to reach the bottom-right corner due to the obstacles blocking the path.","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # If the starting cell is blocked, return 0 if grid[0][0] == 1: return 0 # Create a 2D dp array to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] # The answer is the number of ways to reach the bottom-right corner return dp[-1][-1]"},{"question":"Sudoku is a popular number puzzle where the objective is to fill a 9x9 grid with digits from 1 to 9. Each row, each column, and each of the nine 3x3 sub-grids that compose the grid (also called \\"boxes\\") must contain all of the digits from 1 to 9, without repetition. Given an incomplete Sudoku board, your task is to determine if there is a way to fill the remaining cells to obtain a valid Sudoku board. Each test case consists of a partially completed Sudoku board, represented as a 9x9 grid. Some of the cells in the grid are pre-filled with digits from 1 to 9, while empty cells are represented by zeros (0). You need to output \\"YES\\" if it is possible to fill the empty cells to create a valid Sudoku board, and \\"NO\\" otherwise. # Input - The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. - Each test case consists of 9 lines, each containing exactly 9 integers separated by spaces, representing the Sudoku grid. # Output - For each test case, print a single line with \\"YES\\" if it is possible to fill the board to make a valid Sudoku; otherwise, print \\"NO\\". # Constraints - The input board is guaranteed to have a unique solution if a solution exists. # Example Input ``` 2 5 3 0 0 7 0 0 0 0 6 0 0 1 9 5 0 0 0 0 9 8 0 0 0 0 6 0 8 0 0 0 6 0 0 0 3 4 0 0 8 0 3 0 0 1 7 0 0 0 2 0 0 0 6 0 6 0 0 0 0 2 8 0 0 0 0 4 1 9 0 0 5 0 0 0 0 8 0 0 7 9 0 0 0 0 0 0 0 0 0 ``` Output ``` YES NO ```","solution":"def is_valid(board, row, col, num): # Check the row for c in range(9): if board[row][c] == num: return False # Check the column for r in range(9): if board[r][col] == num: return False # Check the 3x3 sub-grid start_row, start_col = 3 * (row // 3), 3 * (col // 3) for r in range(start_row, start_row + 3): for c in range(start_col, start_col + 3): if board[r][c] == num: return False return True def solve(board): for r in range(9): for c in range(9): if board[r][c] == 0: for num in range(1, 10): if is_valid(board, r, c, num): board[r][c] = num if solve(board): return True board[r][c] = 0 return False # If no number is valid in this cell return True # Solved successfully def can_solve_sudoku(board): if solve(board): return \\"YES\\" else: return \\"NO\\" def check_sudoku_cases(t, test_cases): results = [] for i in range(t): board = test_cases[i] results.append(can_solve_sudoku(board)) return results"},{"question":"You are organizing a treasure hunt that involves navigating through a grid. The grid is represented as a 2D matrix of integers where each integer denotes the amount of treasure at that cell. You start at the top-left corner of the grid and must reach the bottom-right corner. You can only move either down or right at any point in time. However, there is a twist! You need to collect exactly `K` units of treasure to win. Can you determine if it is possible to collect exactly `K` units of treasure following the rules? # Input The input consists of multiple test cases. The first line contains an integer `T` (`1 ≤ T ≤ 100`), the number of test cases. Each test case begins with two integers `N` and `M` (`1 ≤ N, M ≤ 100`), the dimensions of the grid, followed by an integer `K` (`0 ≤ K ≤ 10^4`), the exact amount of treasure you need to collect. The subsequent `N` lines each contain `M` integers representing the grid. # Output For each test case, print \\"POSSIBLE\\" if you can collect exactly `K` units of treasure from the top-left to the bottom-right corner; otherwise, print \\"IMPOSSIBLE\\". # Example Input ``` 2 2 2 5 1 2 3 2 3 3 8 1 2 3 4 5 6 7 8 9 ``` Output ``` POSSIBLE IMPOSSIBLE ``` # Explanation In the first test case, the path (1 → 2 → 2) collects exactly 5 units of treasure, thus the output is \\"POSSIBLE\\". In the second test case, it is impossible to collect exactly 8 units of treasure with any allowed path, hence the output is \\"IMPOSSIBLE\\".","solution":"def can_collect_exactly_K(treasure_grid, K): Returns True if it\'s possible to collect exactly K units of treasure by moving only right or down in the grid, otherwise returns False. N = len(treasure_grid) M = len(treasure_grid[0]) # DP table to keep track of possible sums of treasures collected so far dp = [[set() for _ in range(M)] for __ in range(N)] dp[0][0].add(treasure_grid[0][0]) # Fill the DP table for i in range(N): for j in range(M): current_treasures = dp[i][j] if i + 1 < N: for val in current_treasures: dp[i + 1][j].add(val + treasure_grid[i + 1][j]) if j + 1 < M: for val in current_treasures: dp[i][j + 1].add(val + treasure_grid[i][j + 1]) # Check if K can be collected by the time we reach the bottom-right corner return K in dp[N - 1][M - 1] def treasure_hunt_solver(test_cases): results = [] for tc in test_cases: N, M, K, grid = tc[\'N\'], tc[\'M\'], tc[\'K\'], tc[\'grid\'] if can_collect_exactly_K(grid, K): results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results"},{"question":"In a programming competition, contestants are given weighted graphs, and they need to find the shortest path between specific nodes. Given a directed graph with n nodes and m edges, your task is to find the shortest path from node s to node t using the Dijkstra algorithm. The graph may have multiple edges and self-loops. The input format is as follows: - The first line contains three space-separated integers n, m, and q (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000, 1 ≤ q ≤ 1000), representing the number of nodes, the number of edges, and the number of queries, respectively. - The next m lines each contain three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a directed edge from node u to node v with weight w. - The next q lines each contain two space-separated integers s and t (1 ≤ s, t ≤ n), representing the queries for the shortest path from node s to node t. Output the shortest path length for each query on a new line. If there is no path from s to t, output -1. # Example **Input:** ``` 4 4 2 1 2 1 2 3 2 3 4 1 1 3 4 1 4 2 4 ``` **Output:** ``` 4 3 ``` In the first query, the shortest path from node 1 to node 4 is 1->2->3->4 with a path length of 4. In the second query, the shortest path from node 2 to node 4 is 2->3->4 with a path length of 3.","solution":"import heapq def dijkstra(graph, start, n): Dijkstra\'s algorithm to find the shortest path from start node to all other nodes in a graph. dist = [float(\'inf\')] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist def shortest_paths(n, m, q, edges, queries): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) results = [] for s, t in queries: distances = dijkstra(graph, s, n) results.append(-1 if distances[t] == float(\'inf\') else distances[t]) return results"},{"question":"In a distant land, there exists an enchanted forest filled with numerous magical trees. Each tree has a certain number of magic fruits. Some people in this land have special abilities that allow them to increase the number of fruits on a tree by a certain amount. The number of fruits on the tree can be viewed and changed by these special people. You are given an array of n integers where the i-th integer represents the current number of fruits on the i-th tree. You need to handle two types of operations on these trees: 1. Add a certain number of fruits to a specific tree. 2. Query the number of fruits present on a specific tree. The operations are given in sequence and should be handled in the order they appear. The first line of input contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of trees and the number of operations, respectively. The second line contains n space-separated integers, where the i-th integer represents the initial number of fruits on the i-th tree. Each of the next q lines describes one of the two types of operations: - \\"1 x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ 100) meaning add y fruits to the x-th tree. - \\"2 x\\" (1 ≤ x ≤ n) meaning query the number of fruits on the x-th tree. For each query operation, output the number of fruits on the specified tree. Example: Input: ``` 5 3 10 20 30 40 50 2 3 1 2 5 2 2 ``` Output: ``` 30 25 ``` Explanation: - Initially, the trees have fruits [10, 20, 30, 40, 50]. - Query the number of fruits on the 3rd tree, which is 30. - Add 5 fruits to the 2nd tree, now the trees have fruits [10, 25, 30, 40, 50]. - Query the number of fruits on the 2nd tree, which is 25.","solution":"def handle_operations(n, q, fruits, operations): result = [] for operation in operations: if operation[0] == 1: # Add operation x, y = operation[1] - 1, operation[2] fruits[x] += y elif operation[0] == 2: # Query operation x = operation[1] - 1 result.append(fruits[x]) return result"},{"question":"In a distant island, there lives a magical being named Noin. Noin has a set of n magical pearls, each with an associated integer beauty value. Noin loves symmetry and therefore, she wants to organize the pearls into sequences of maximal length such that the sequence remains the same even if reversed. Given a list of n integers representing the beauty values of the pearls, your task is to find the length of the longest palindromic subsequence that can be formed. # Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of pearls. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the beauty values of the pearls. # Output Print one integer — the length of the longest palindromic subsequence. # Example Input ``` 7 1 2 3 4 3 2 1 ``` Output ``` 7 ``` Input ``` 6 1 3 5 1 5 3 ``` Output ``` 5 ``` Note In the first example, the entire sequence is already a palindrome. In the second example, the longest palindromic subsequence is `[1, 3, 5, 3, 1]`, which has a length of 5.","solution":"def longest_palindromic_subsequence(n, pearls): # Create a 2D array to store the length of the longest palindromic subsequence # dp[i][j] will store the length of the longest palindromic subsequence in pearls[i..j] dp = [[0]*n for _ in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table # The bottom-up manner for cl in range(2, n+1): for i in range(n-cl+1): j = i + cl - 1 if pearls[i] == pearls[j] and cl == 2: dp[i][j] = 2 elif pearls[i] == pearls[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of longest palindromic subseq return dp[0][n-1]"},{"question":"Amy is a developer working on a new mobile application. The app has a feature to help users track their daily water intake. Users can log how many milliliters of water they drink at different times of the day. The app then generates a summary report at the end of each day. Amy wants to implement a functionality that determines if users have met their daily water intake goal. Each user has a daily water intake goal in milliliters and drinks a number of times a day, each time logging the amount they drank. The app should help determine whether the daily water intake goal is met or not. **Input:** - The first line contains an integer `n` (1 ≤ `n` ≤ 1000) — the number of drink logs added by the user. - The second line contains an integer `g` (1 ≤ `g` ≤ 10000) — the daily water intake goal in milliliters. - The next `n` lines each contains an integer `a_i` (1 ≤ `a_i` ≤ 1000) — the amount of water in milliliters logged in the `i`-th drink. **Output:** - Print \\"YES\\" if the total amount of water logged by the user meets or exceeds the daily goal, otherwise print \\"NO\\". **Example:** Input: ``` 5 2000 500 300 400 100 800 ``` Output: ``` YES ``` Input: ``` 3 3000 1000 500 1000 ``` Output: ``` NO ``` # Explanation: In the first example, the total amount of water logged is 500 + 300 + 400 + 100 + 800 = 2100 milliliters, which is more than the daily goal of 2000 milliliters. Hence the output is \\"YES\\". In the second example, the total amount of water logged is 1000 + 500 + 1000 = 2500 milliliters, which is less than the daily goal of 3000 milliliters. Hence the output is \\"NO\\".","solution":"def has_met_water_goal(n, g, drink_logs): Determines if the daily water intake goal is met based on the logs. :param n: int - Number of drink logs :param g: int - Daily water intake goal in milliliters :param drink_logs: list of int - Amount of water in milliliters logged in each drink :return: str - \\"YES\\" if total amount of water logged meets or exceeds the goal, otherwise \\"NO\\" total_water_intake = sum(drink_logs) return \\"YES\\" if total_water_intake >= g else \\"NO\\""},{"question":"Anton has a sequence of integers and he wants to find a special element in the sequence called the \\"key element\\". An element in the sequence is considered a \\"key element\\" if the sum of all elements to its left is equal to the sum of all elements to its right. Help Anton find the position (1-based index) of the \\"key element\\" in the sequence. If there is no such element, print -1. The first line of the input contains a single integer n (1 ≤ n ≤ 100) – the number of elements in the sequence. The second line contains n integers a1, a2, ..., an (−10^6 ≤ ai ≤ 10^6) – the elements of the sequence. Print the 1-based index of the \\"key element\\" if it exists, otherwise print -1. Note: If there are multiple \\"key elements\\", print the 1-based index of the first occurring one. Example: Input: 5 1 2 3 4 6 Output: 4 Input: 3 1 2 3 Output: -1 Explanation: In the first example, the element at position 4 (4) is the key element since the sum of all elements to its left (1+2+3) is equal to the sum of all elements to its right (6). In the second example, there is no key element since no such position satisfies the condition.","solution":"def find_key_element_position(n, arr): Finds the position of the key element in the sequence. Parameters: n (int): The number of elements in the sequence. arr (list of int): The sequence of integers. Returns: int: 1-based index of the key element if it exists, otherwise -1. total_sum = sum(arr) left_sum = 0 for i in range(n): if left_sum == (total_sum - left_sum - arr[i]): return i + 1 left_sum += arr[i] return -1"},{"question":"The kingdom of Herbaltia consists of a number of ancient cities connected by old roads. Each road bidirectionally connects a pair of cities and it always takes exactly one hour to travel through any road. Herbaltia\'s historians recently discovered an ancient manuscript detailing the structure of these roads. According to the manuscript, each pair of cities has at least one unique path connecting them, i.e., the road system forms a tree. Herbaltia\'s tourism board is planning to introduce a special round-trip tour starting and ending in the capital of Herbaltia, which is the city 1. They aim to maximize the number of cities tourists can visit in the round-trip, while ensuring that tourists on the tour do not visit any city more than once, except the starting/ending city. You are tasked with helping them figure out the number of cities that can be visited in such a maximum round-trip tour. **Input Format:** - The first line contains an integer n (2 le n le 10^5), the number of cities. - Each of the next n-1 lines contains two integers u and v (1 le u, v le n) representing a road between cities u and v. **Output Format:** - Output a single integer representing the number of cities that can be visited in the maximum round-trip tour. **Example:** ``` Input: 5 1 2 1 3 3 4 3 5 Output: 4 ``` **Explanation:** In the sample input, one possible maximum round-trip is from city 1 to city 3, then to city 4, back to city 3, and finally back to city 1. During this trip, the tourists visit 4 cities (1, 3, 4, 1). Thus, the answer is 4.","solution":"from collections import deque, defaultdict def max_cities_round_trip(n, roads): if n == 2: return 2 # Only visit both cities in the simplest case # Create adjacency list for the given tree adj = defaultdict(list) for u, v in roads: adj[u].append(v) adj[v].append(u) # Perform first BFS from node 1 to find the farthest node from 1 def bfs(start): dist = [-1] * (n + 1) q = deque([start]) dist[start] = 0 farthest_node = start max_dist = 0 while q: node = q.popleft() for neighbor in adj[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 q.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] farthest_node = neighbor return farthest_node, max_dist # First BFS to find an extremity node from node 1 farthest_from_1, _ = bfs(1) # Second BFS to find the farthest node from farthest_from_1 (diameter endpoint) farthest_from_u, tree_diameter = bfs(farthest_from_1) # The round trip maximal visiting cities count is tree diameter + 1 return tree_diameter + 1"},{"question":"Marina is participating in a treasure hunting game where she has to navigate through a grid of cells. Each cell can either be an open space or contain an obstacle. Marina moves from one cell to another in the grid and collects treasures that are scattered around. Marina starts at the top-left corner of the grid (cell (1, 1)) and wants to reach the bottom-right corner of the grid (cell (n, m)). She can only move either right or down at each step. Help Marina find out the maximum number of treasures she can collect while reaching the bottom-right corner of the grid. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines each contain m characters. Each character is either ‘.’ (an open space), ‘T’ (a treasure), or ‘#’ (an obstacle). Print the maximum number of treasures Marina can collect while reaching the bottom-right corner of the grid. If there\'s no valid path from the top-left corner to the bottom-right corner, print -1. For example: ``` Input: 4 4 .T.. #T#. ..T. .... Output: 3 ``` In this example, Marina can collect 3 treasures by the path (1,2) -> (2,2) -> (3,3) -> (4,3) -> (4,4). ``` Input: 3 3 .T. # ..T Output: -1 ``` In this example, there is no valid path to reach the bottom-right corner of the grid.","solution":"def max_treasures(n, m, grid): Returns the maximum number of treasures Marina can collect while reaching the bottom-right corner of the grid. If there\'s no valid path, returns -1. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 dp = [[-1 for _ in range(m)] for _ in range(n)] dp[0][0] = 0 if grid[0][0] == \'.\' else 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == \'T\' else 0)) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'T\' else 0)) return dp[n-1][m-1] if dp[n-1][m-1] != -1 else -1"},{"question":"You are given an array of integers of size n, where each element of the array represents the height of a building. You are tasked with determining the minimum number of buildings that need to be removed from the array so that the remaining buildings form a strictly increasing sequence. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings. Print the minimum number of buildings that need to be removed. **Example:** Input 7 4 2 3 6 10 1 12 Output 2 In the given example, removing buildings with heights 2 and 1 leaves us with the sequence [4, 3, 6, 10, 12] which is in strictly increasing order.","solution":"def min_removals_to_increasing_sequence(n, heights): Returns the minimum number of buildings to remove to form a strictly increasing sequence. def length_of_lis(sequence): from bisect import bisect_left lis = [] for num in sequence: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) lis_length = length_of_lis(heights) return n - lis_length"},{"question":"You have a sequence of weights on a balance scale. Every weight has an integer value and it is guaranteed that each weight is unique. You want to split the weights into two groups such that the absolute difference between the sum of weights in one group and the sum of weights in the other group is minimized. Given an array of integers representing the weights, determine the minimum possible absolute difference between the sums of the two groups. The first line of input contains an integer n (1 leq n leq 100) — the number of weights. The second line contains n integers representing the weights. Each weight w_i (1 leq w_i leq 10^4). Print the minimum possible absolute difference between the sums of the two groups. # Example Input: ``` 4 2 7 4 1 ``` Output: ``` 0 ``` # Explanation: In this example, you can split the weights into two groups {2, 7} and {4, 1} each with a sum of 9, so the absolute difference is 0.","solution":"def min_abs_difference(weights): Given a list of weights, returns the minimum possible absolute difference between the sums of two groups. total_sum = sum(weights) n = len(weights) # Finding subsets up to sum // 2 to minimize difference subset_sums = [False] * (total_sum // 2 + 1) subset_sums[0] = True # Zero is always reachable for weight in weights: for j in range(total_sum // 2, weight - 1, -1): if subset_sums[j - weight]: subset_sums[j] = True for i in range(total_sum // 2, -1, -1): if subset_sums[i]: return total_sum - 2 * i return total_sum # Function to process input def process_input(input_str): input_lines = input_str.strip().split() n = int(input_lines[0]) weights = list(map(int, input_lines[1:1+n])) return weights"},{"question":"An intricate part of the new game \\"Crypto Puzzles\\" involves deciphering codes through a series of complex steps. One central aspect of the game is transforming sequences of numbers based on a series of given operations. You are given an array of nonnegative integers. You perform a series of operations on the array, which includes two types: 1. Add a number `x` to a subarray `a[l..r]` within the original array. 2. Subtract a number `y` from a subarray `a[l..r]` within the original array. The operations can overlap and be performed in any order. Your goal is to find the maximum possible value of any element in the array after all the operations have been applied. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 2 × 10^5) — the initial size of the array and the number of operations respectively. The second line contains `n` nonnegative integers, the initial values of the array. Each of the next `q` lines contains one of the following operations: - Add l r x - Subtract l r y Here, `1 ≤ l ≤ r ≤ n`, and `0 ≤ x, y ≤ 10^9`. Output the maximum possible value of any element in the array after applying all the operations. Example: Input: ``` 5 3 1 2 3 4 5 Add 2 4 10 Subtract 3 5 2 Add 1 3 5 ``` Output: ``` 15 ``` Explanation: - After the first operation, the array becomes `[1, 12, 13, 14, 5]`. - After the second operation, the array becomes `[1, 12, 11, 12, 3]`. - After the third operation, the array becomes `[6, 17, 16, 12, 3]`. The maximum possible value is `17`.","solution":"def apply_operations(n, q, arr, operations): Applies a series of add and subtract operations on the array and returns the maximum possible value. Parameters: n (int): Size of the array q (int): Number of operations arr (list): Initial array of nonnegative integers operations (list): List of operations with the format [\'Add l r x\'] or [\'Subtract l r y\'] Returns: int: Maximum possible value in the array after all operations # We initialize a difference array with the same length as arr + 1 for easier calculations diff = [0] * (n + 1) # Process the operations for operation in operations: parts = operation.split() type_op, l, r, value = parts[0], int(parts[1]), int(parts[2]), int(parts[3]) # Adjusting for 0-based index l -= 1 r -= 1 if type_op == \'Add\': diff[l] += value if r + 1 < n: diff[r + 1] -= value elif type_op == \'Subtract\': diff[l] -= value if r + 1 < n: diff[r + 1] += value # Calculate the final values of the array using the difference array max_val = arr[0] + diff[0] current_val = arr[0] + diff[0] for i in range(1, n): current_val = arr[i] + diff[i] + diff[i-1] diff[i] += diff[i-1] # Continuously sum the differences if current_val > max_val: max_val = current_val return max_val"},{"question":"Santa Claus wants to deliver gifts to children on Christmas night. He has a list of n children, each with a specified number of gifts they should receive. Santa can deliver gifts one by one, so each child will receive one gift before moving on to the next gift for the same or different child. However, Santa has a magic sled that can carry a limited number of presents at a time. Santa needs to minimize the number of times he needs to refill his sled. You are given the maximum capacity of the sled k and a list of n integers, where each integer represents the number of gifts a child should receive. Determine the minimum number of refills Santa needs to make to deliver all the gifts. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of children. The second line contains an integer k (1 ≤ k ≤ 10000) — the maximum capacity of Santa\'s sled. The third line contains n integers g1, g2, ..., gn (1 ≤ gi ≤ 10000) — the number of gifts each child should receive. Print one integer — the minimum number of refills Santa needs to make. For example, if n = 5, k = 10, and the number of gifts is [2, 3, 5, 3, 1], the output should be 2. Santa can deliver 10 gifts in the first trip and the remaining 4 in the second trip.","solution":"def min_refills(n, k, gifts): Determines the minimum number of refills required for Santa\'s sled. Parameters: n (int): Number of children. k (int): Maximum capacity of the sled. gifts (list): List of integers representing the number of gifts each child should receive. Returns: int: Minimum number of refills needed. total_gifts = sum(gifts) refills_needed = (total_gifts + k - 1) // k return refills_needed"},{"question":"A group of friends decides to organize a trip and wants to rent a bus. They would like to minimize the total number of buses they need to rent. Each bus has a maximum capacity of p passengers. Each person has provided a list of other friends they would like to travel with in the same bus. Your task is to group the friends into the minimum number of buses such that all individual preferences are respected. Given the number of people n (1 ≤ n ≤ 100), the bus capacity p (1 ≤ p ≤ 100), and the preferences of each person, determine the least number of buses required to accommodate everybody. The first line of the input contains two integers n and p - the number of people and the maximum bus capacity. Each of the next n lines contains the preferences of the friends. Each line starts with an integer k, the number of people in the list, followed by k integers indicating the indices of friends (1-based index) the person wants to travel with (excluding themselves in the list). Output the minimum number of buses required. Example Input: ``` 5 3 2 2 3 1 4 0 1 1 1 2 ``` Example Output: ``` 2 ``` Explanation: In the provided example, we have 5 friends and each bus can carry 3 passengers. The preference is that: - Person 1 wants to travel with persons 2 and 3. - Person 2 wants to travel with person 4. - Person 3 has no specific preference. - Person 4 wants to travel with person 1. - Person 5 wants to travel with person 2. One possible solution is to have: - The first bus carry persons 1, 2, 3. - The second bus carry persons 4 and 5.","solution":"def find_minimum_buses(n, p, preferences): from collections import deque, defaultdict adj_list = defaultdict(set) for i, friends in enumerate(preferences): for friend in friends: adj_list[i].add(friend - 1) adj_list[friend - 1].add(i) visited = [False] * n buses = 0 def bfs(start): queue = deque([start]) count = 0 while queue: node = queue.popleft() if visited[node]: continue visited[node] = True count += 1 for neighbor in adj_list[node]: if not visited[neighbor]: queue.append(neighbor) return count for person in range(n): if not visited[person]: group_size = bfs(person) buses += (group_size + p - 1) // p return buses"},{"question":"You are given a grid of size `n x m` where each cell represents either a wall (\'#\') or an open space (\'.\'). You start at the top-left corner of the grid and your goal is to reach the bottom-right corner. You can move left, right, up, or down, but you cannot move through walls. Your task is to determine the minimum number of moves required to reach the bottom-right corner from the top-left corner. If it\'s impossible, return `-1`. The first line of the input contains two integers `n` and `m` (`1 ≤ n, m ≤ 1000`) — the number of rows and columns in the grid. The next `n` lines contain `m` characters each, either \'.\' or \'#\', representing the grid. Output the minimum number of moves required to reach the bottom-right corner from the top-left corner, or `-1` if it\'s impossible. Example: Input: ``` 4 4 . . . # # # . # . . . # # . . . ``` Output: ``` 6 ``` Explanation: The minimum path from (1, 1) to (4, 4) is as follows: (1, 1) -> (1, 2) -> (2, 3) -> (3, 3) -> (3, 4) -> (4, 4).","solution":"from collections import deque def min_moves_to_reach_bottom_right(n, m, grid): Determine the minimum number of moves required to reach the bottom-right corner from the top-left corner of a grid, or return -1 if it\'s impossible. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, d = queue.popleft() if r == n-1 and c == m-1: # if reached bottom-right corner return d for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] == \'.\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, d + 1)) return -1"},{"question":"You are given an array of `n` integers. Your task is to find the number of pairs of indices `(i, j)` such that `1 ≤ i < j ≤ n` and the sum of `a[i]` and `a[j]` is an even number. The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Print a single integer — the number of pairs such that the sum of the elements at these indices is even. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` # Explanation: The pairs of indices `(i, j)` such that the sum is even are: - (1, 3) because 1 + 3 = 4 (even) - (2, 4) because 2 + 4 = 6 (even) - (3, 5) because 3 + 5 = 8 (even) - (4, 5) because 4 + 5 = 9 (even) So, the result is 4.","solution":"def count_even_sum_pairs(n, array): Returns the number of pairs of indices (i, j) such that 1 ≤ i < j ≤ n and the sum of array[i] and array[j] is an even number. even_count = 0 odd_count = 0 for number in array: if number % 2 == 0: even_count += 1 else: odd_count += 1 # The number of ways to pick 2 elements from even_count elements even_pairs = (even_count * (even_count - 1)) // 2 # The number of ways to pick 2 elements from odd_count elements odd_pairs = (odd_count * (odd_count - 1)) // 2 # The valid pairs are the sum of even_pairs and odd_pairs return even_pairs + odd_pairs"},{"question":"Given a programming competition, participants are required to solve as many problems as possible within a given time frame. Each problem has a difficulty level, and participants have varying skill levels. You need to determine the maximum number of problems that can be solved by any single participant. You are given: 1. The number of participants `m` (1 ≤ m ≤ 1000). 2. The number of problems `n` (1 ≤ n ≤ 1000). 3. An array of integers representing the difficulty level of each problem. 4. An array of integers representing the skill level of each participant. A participant can solve a problem if their skill level is greater than or equal to the difficulty level of that problem. Write a function that returns the maximum number of problems that can be solved by any single participant. # Input - The first line contains an integer `m` — the number of participants. - The second line contains an integer `n` — the number of problems. - The third line contains `n` integers — the difficulty levels of the problems. - The fourth line contains `m` integers — the skill levels of the participants. # Output - Output a single integer which is the maximum number of problems that can be solved by any single participant. # Example Input ``` 3 5 4 8 2 6 7 5 10 3 ``` Output ``` 3 ``` Explanation - Participant 1 with skill level 5 can solve problems with difficulties [4, 2]. - Participant 2 with skill level 10 can solve problems with difficulties [4, 8, 2, 6, 7]. - Participant 3 with skill level 3 can solve problems with difficulties [2]. Thus, participant 2 can solve the most problems, which is 5. So, the output is 5.","solution":"def max_problems_solved(m, n, difficulties, skills): maximum_problems = 0 for skill in skills: count = sum(1 for difficulty in difficulties if skill >= difficulty) maximum_problems = max(maximum_problems, count) return maximum_problems"},{"question":"Phil is planning a big conference and needs to organize the schedule for the presentations. Each presentation lasts exactly 1 hour and must start at the beginning of the hour. Phil has a list of available time slots and a list of presentations each with a priority value. He wants to schedule the presentations in such a way that: 1. A presentation can only occur in one of the available time slots. 2. No two presentations are scheduled at the same time. 3. The total priority of the scheduled presentations is maximized. More formally, you are given an integer m representing the number of available time slots and an integer n representing the number of presentations. You are also given an array slots of length m where each element represents an available time slot, and an array presentations of length n where each element is a tuple consisting of the presentation\'s priority and duration in hours. Create an algorithm that schedules the presentations into the available slots, aiming to maximize the total priority. # Input - The first line contains two integers, m and n (1 le m, n le 100) — the number of available time slots and the number of presentations, respectively. - The second line contains m integers sorted in ascending order representing the available time slots. - The following n lines each contain three integers, p_i, d_i, and l_i (1 le p_i le 1000, 1 le d_i le 10, 0 le l_i < 24) representing the priority of the presentation, its duration in hours, and its starting hour after each day (where l_i is the hour within the 24-hour format). # Output Print a single integer — the maximum total priority that Phil can achieve by scheduling the presentations optimally. # Example Input ``` 5 3 9 12 14 16 18 500 1 9 300 2 12 200 1 14 ``` Output ``` 1000 ``` # Explanation Phil can schedule all three presentations as they fit into the available slots without any conflicts: - Presentation 1 with priority 500 from 09:00 to 10:00 at slot 9. - Presentation 2 with priority 300 from 12:00 to 14:00 at slot 12. - Presentation 3 with priority 200 from 14:00 to 15:00 at slot 14. Thus, the total priority is 500 + 300 + 200 = 1000.","solution":"def maximize_priority(m, n, slots, presentations): Schedules the presentations into the available slots aiming to maximize the total priority. Parameters: m (int): The number of available time slots. n (int): The number of presentations. slots (list of int): A list of available time slots. presentations (list of tuples): A list of presentations, each defined by a tuple (priority, duration, start_hour). Returns: int: The maximum total priority that can be achieved by scheduling the presentations optimally. slots.sort() presentations.sort(reverse=True, key=lambda x: x[0]) scheduled_slots = set() total_priority = 0 for priority, duration, start_hour in presentations: for slot in slots: if slot not in scheduled_slots and slot == start_hour: scheduled_slots.add(slot) total_priority += priority break return total_priority # Example usage: # m, n = 5, 3 # slots = [9, 12, 14, 16, 18] # presentations = [(500, 1, 9), (300, 2, 12), (200, 1, 14)] # print(maximize_priority(m, n, slots, presentations)) # Output: 1000"},{"question":"Anita is working on a text processing task where she needs to convert a given string into a \\"well-spaced sentence\\". A \\"well-spaced sentence\\" is defined as a string in which there is exactly one space between every pair of adjacent words and no leading or trailing spaces. Words are sequences of non-space characters separated by any number of spaces. Your task is to write a function that receives a single string as input and transforms it into a \\"well-spaced sentence\\". The function should then return the transformed string. # Input - A single string `s` consisting of lowercase English letters and spaces. The length of `s` will not exceed `10^6`. # Output - The transformed string that is a \\"well-spaced sentence\\". # Example Input: ``` \\" hello world this is an example \\" ``` Output: ``` \\"hello world this is an example\\" ``` # Function Signature ```python def well_spaced_sentence(s: str) -> str: pass ``` # Notes In the example, the input string \\" hello world this is an example \\" is transformed into \\"hello world this is an example\\" by removing extra spaces and ensuring there is exactly one space between words. Write a function that performs this transformation efficiently even for the upper limit of input size.","solution":"def well_spaced_sentence(s: str) -> str: Transforms the input string s into a well-spaced sentence, i.e., exactly one space between each word and no leading or trailing spaces. Parameters: s (str): The input string containing words separated by spaces. Returns: str: The transformed well-spaced sentence. # Split the string by spaces to get the words words = s.split() # Join the words with a single space return \' \'.join(words)"},{"question":"You are given a string ( s ) consisting of lowercase and uppercase letters. You can perform the following operation any number of times: choose any substring of ( s ) and change all its characters to lowercase or all its characters to uppercase. The goal is to minimize the number of distinct letters in the resulting string, where uppercase and lowercase versions of the same letter are considered distinct. Determine the minimum number of operations needed to achieve the goal. Each test case should be processed independently. # Input - The first line contains ( t ) (( 1 le t le 10 )) - the number of test cases. - Each of the next ( t ) lines contains a string ( s ) (( 1 le |s| le 100 )), consisting of lowercase and/or uppercase English letters. # Output For each test case, output the minimum number of operations required. # Example Input ``` 3 aAbBcC aaBBcc AaA ``` Output ``` 3 1 2 ``` Explanation In the first case, one optimal way is to convert \\"aA\\" to \\"aa\\", \\"bB\\" to \\"BB\\", and \\"cC\\" to \\"CC\\", making 3 distinct letters. In the second case, converting all characters to either all lowercase or all uppercase in one operation will suffice. In the third case, converting the first \\"A\\" to \\"a\\" requires one operation and handling the last \\"A\\" requires another.","solution":"def min_operations(s): Returns the minimum number of operations needed to minimize the number of distinct characters in the string, considering uppercase and lowercase letters as distinct. seen = set(s) return len(seen) def process_test_cases(t, cases): results = [] for s in cases: results.append(min_operations(s)) return results"},{"question":"Thom is fascinated by prime numbers and recently stumbled upon an interesting concept: the Sum of Distinct Prime Factors (SDPF) of a number. The SDPF of a number is calculated by summing all its distinct prime factors. For example, the SDPF of 18 is 2 + 3 = 5, because 2 and 3 are the distinct prime factors of 18. Thom has a list of integers and wants to find the integer with the smallest SDPF. If there are multiple integers with the same SDPF, he wants to choose the smallest one. Help Thom by writing a program to determine this number. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of integers in the list. The next line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the integers in the list. Output the smallest integer with the smallest SDPF. For the first example, the smallest integer with the smallest SDPF is 2, because all individual prime numbers in the input will have themselves as their distinct prime factor sum, which is minimum. Consider another example with input: 4 10 14 21 22 The SDPF for 10 is 2 + 5 = 7, for 14 is 2 + 7 = 9, for 21 is 3 + 7 = 10, and for 22 is 2 + 11 = 13. Hence, the smallest integer with the smallest SDPF in this case is 10.","solution":"def sieve_of_eratosthenes(limit): primes = [] is_prime = [True] * (limit + 1) is_prime[0] = is_prime[1] = False for num in range(2, limit + 1): if is_prime[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): is_prime[multiple] = False return primes def distinct_prime_factors_sum(number, primes): original_number = number sum_factors = 0 for prime in primes: if prime * prime > number: break if number % prime == 0: sum_factors += prime while number % prime == 0: number //= prime if number > 1: sum_factors += number return sum_factors def smallest_integer_with_smallest_sdpfs(numbers): limit = max(numbers) primes = sieve_of_eratosthenes(limit) min_sdpfs = float(\'inf\') result = None for number in numbers: sdpfs = distinct_prime_factors_sum(number, primes) if (sdpfs < min_sdpfs) or (sdpfs == min_sdpfs and number < result): min_sdpfs = sdpfs result = number return result"},{"question":"You are developing a new search engine, and one of the components requires you to efficiently store and retrieve words with shared prefixes. You decide to use a Trie (prefix tree) for this purpose. Given a series of operations, your task is to implement a Trie and perform these operations: 1. \\"insert word\\" - Insert the word into the Trie. 2. \\"search word\\" - Return whether the word is in the Trie. 3. \\"startsWith prefix\\" - Return whether there is any word in the Trie that starts with the given prefix. Each operation is given in the form of a string, and you\'ll need to parse the operation and its argument, then perform the corresponding action on the Trie. The input consists of a number of test cases. The first line contains a single integer t (1 le t le 10^4) – the number of test cases. Each test case contains multiple operations. The first line of a test case contains an integer m (1 le m le 10^5) — the number of operations in the test case. The following m lines each contain an operation in one of the three formats mentioned above. For each \\"search\\" and \\"startsWith\\" operation, output \\"true\\" or \\"false\\" (without quotes) accordingly. The sum of m over all test cases does not exceed 2 cdot 10^5. # Example Input ``` 2 5 insert apple search apple search app startsWith app insert app 4 insert banana search banana startsWith ban search oran ``` # Example Output ``` true false true true true false ```","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word: str) -> None: node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word: str) -> bool: node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def startsWith(self, prefix: str) -> bool: node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True def process_operations(test_cases): results = [] for operations in test_cases: trie = Trie() for operation in operations: command, arg = operation.split() if command == \\"insert\\": trie.insert(arg) elif command == \\"search\\": results.append(\\"true\\" if trie.search(arg) else \\"false\\") elif command == \\"startsWith\\": results.append(\\"true\\" if trie.startsWith(arg) else \\"false\\") return results"},{"question":"You are given an array of n integers representing the energy levels of n devices. The devices are connected in a series, and each device can either increase or decrease its energy level by 1 unit at a time. For the system to function optimally, the energy levels of all devices should be the same. You want to find the minimum number of operations needed to make all energy levels equal. The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of devices. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the energy levels of the devices. Output a single integer — the minimum number of operations required to make all energy levels equal. In the first sample case, you can adjust the energy levels to be [2, 2, 2, 2] with 1 operation by decreasing the energy level of the fourth device or increasing the energy level of the first device. In the second sample case, you can adjust the energy levels to be [3, 3, 3, 3] with 6 operations by increasing the energy level of the first device by 1, increasing the energy level of the second device by 1, increasing the energy level of the third device by 2, and decreasing the energy level of the fourth device by 2. Note that you may choose any value within the range of the minimum and maximum energy levels as the target value.","solution":"def min_operations_to_equalize_energy_levels(n, energy_levels): Returns the minimum number of operations needed to make all energy levels equal. # Sorting the array energy_levels.sort() # The optimal target energy level is the median median = energy_levels[n // 2] # Calculate number of operations to align all elements to the median operations = sum(abs(energy_level - median) for energy_level in energy_levels) return operations"},{"question":"Alex is working on a new social media platform and wants to analyze user engagement. There are n users on the platform, each user makes a certain number of posts. Alex noticed that sometimes users make a high number of posts in a short period, indicating a spike in their activity. He wants to find the maximum activity spike over any contiguous subarray of users\' posts. Given an array of n integers where each integer represents the number of posts a user made, help Alex find the maximum sum of any contiguous subarray of the given array. The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of users. The second line contains n integers a1, a2, ..., an (−10000 ≤ ai ≤ 10000) — the number of posts each user made. Print a single integer — the maximum sum of any contiguous subarray of the given array. **Example**: Input: ``` 5 1 -2 3 10 -4 ``` Output: ``` 13 ``` **Explanation**: The subarray with the maximum sum is [3, 10], which gives a sum of 13.","solution":"def max_activity_spike(n, posts): Given an array of n integers where each integer represents the number of posts a user made, returns the maximum sum of any contiguous subarray of the given array. max_current = max_global = posts[0] for i in range(1, n): max_current = max(posts[i], max_current + posts[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a remote village, there\'s a well-known annual game that villagers eagerly participate in. The game involves creating words using the letters of the alphabet in a special matrix format. Each year, the matrix\'s dimensions and criteria evolve, maintaining the excitement. The game uses a rectangular matrix of lowercase English letters of size n×m. The villagers are supposed to select a submatrix where: 1. The selected submatrix must be a square (number of rows equals number of columns). 2. All letters in the selected submatrix should be the same. You are given the matrix dimensions and the matrix itself, and your task is to determine the size of the largest square submatrix that meets the criteria. The first input line contains two space-separated integers n and m (1 ≤ n, m ≤ 500) - the dimensions of the matrix. Each of the next n lines contains m characters. Each character is a lowercase English letter representing the matrix cells. Print the size of the largest square submatrix where all letters are the same. If no such submatrix exists, print 1 (since each single cell is considered as a 1x1 submatrix). For example: Input: 4 5 a a b b a a a b b a a a b b a c c c c c Output: 3 Input: 3 3 a b c d e f g h i Output: 1 In the first example, the largest square submatrix with the same letters is of size 3x3 (all \\"a\\"s in the top-left corner). In the second example, no larger square than 1x1 has all identical letters.","solution":"def largest_square_submatrix(n, m, matrix): Determines the size of the largest square submatrix where all letters are the same. n: number of rows m: number of columns matrix: list of strings representing the matrix Returns an integer representing the size of the largest square submatrix. if n == 0 or m == 0: return 0 max_size = 1 dp = [[1] * m for _ in range(n)] for i in range(1, n): for j in range(1, m): if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"You are organizing an amusement park and have to manage the availability of different attractions. Each attraction can only accommodate one group at a time. Different groups arrive at the park throughout the day and each group has their specific time window during which they want to use an attraction. Your task is to determine the maximum number of groups that can be accommodated without any overlaps in their time windows. The input format is as follows: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of groups. - Each of the next n lines contains two integers si and fi (1 ≤ si < fi ≤ 1000) — the start and finish times of the i-th group’s desired time window. Output a single integer which is the maximum number of groups that can be accommodated without any overlapping time windows. # Example Input: ``` 5 1 4 2 6 8 9 3 5 5 7 ``` Output: ``` 3 ``` # Explanation The optimal selection of groups would be those requesting time windows [1, 4], [5, 7], and [8, 9], resulting in a maximum of 3 groups being accommodated without overlaps.","solution":"def max_non_overlapping_groups(n, time_intervals): Returns the maximum number of non-overlapping groups that can be accommodated. Parameters: n (int): Number of groups. time_intervals (List[Tuple[int, int]]): List of tuples with start and end times for each group. Returns: int: Maximum number of non-overlapping groups. # Sort intervals based on their finish times sorted_intervals = sorted(time_intervals, key=lambda x: x[1]) # Initialize the count of non-overlapping groups count = 0 last_finish_time = 0 for start, finish in sorted_intervals: if start >= last_finish_time: count += 1 last_finish_time = finish return count"},{"question":"Masha was experimenting with a set of lock combinations for a safe. The lock has n dials, each of which can be set to any integer value between 1 and 10 (inclusive). After trying several random combinations, she wrote down a series of m constraints indicating that certain pairs of dials must have specific sums. Specifically, each constraint specifies two dials and their required sum. Given these constraints, determine if it is possible to set the dials to values that satisfy all the constraints. If it is possible, print any valid combination of the values on the dials. If it is not possible, print \\"Impossible\\". Input: - The first line contains two integers n and m (1 ≤ n ≤ 50, 0 ≤ m ≤ 200) — the number of dials and the number of constraints, respectively. - The next m lines each contain three integers a, b, and s (1 ≤ a, b ≤ n, 2 ≤ s ≤ 20) — indicating that the sum of the values on the dials a and b must be equal to s. Output: - If there exists a valid combination of dial settings that satisfy all constraints, print any valid combination as a space-separated sequence of integers from 1 to 10. - If no valid combination exists, print \\"Impossible\\". Example: Input: 3 2 1 2 4 2 3 5 Output: 1 3 2 In this example, setting the first dial to 1, the second dial to 3, and the third dial to 2 satisfies both constraints: 1+3=4 and 3+2=5. Note that other solutions might also be possible, such as setting the dials to 2, 2, and 3.","solution":"def find_valid_combination(n, m, constraints): from itertools import product dials = range(1, 11) # Iterate through all possible combinations of dial settings for combination in product(dials, repeat=n): valid = True for a, b, s in constraints: if combination[a-1] + combination[b-1] != s: valid = False break if valid: return combination return \\"Impossible\\""},{"question":"You have been given a series of books where each book belongs to one genre, and each genre can be represented by a number. Given a list of such books, your task is to group the books by their genres and print the genres along with the books belonging to them in a sorted order. The genres are represented by integers from 1 to 5. Each book is represented by three lines of input: - The first line contains an integer id (0 <= id <= 10^6) which uniquely identifies the book. - The second line contains the title of the book. - The third line contains the genre of the book which is an integer from 1 to 5. The input starts with a single integer n (1 <= n <= 1000), which denotes the number of books. The output should list each genre followed by the books in that genre. Each genre should be on a new line, followed by the list of books with their ids and titles sorted by their ids in ascending order. The genres themselves should also be printed in ascending numeric order. Input: ``` n id_1 title_1 genre_1 id_2 title_2 genre_2 ... id_n title_n genre_n ``` Output: ``` genre_1 id_Title Title_1 id_Title Title_2 ... genre_2 id_Title Title_1 id_Title Title_2 ... ... ``` # Example Input: ``` 4 100 The Great Gatsby 2 200 Moby Dick 1 150 Crime and Punishment 2 175 War and Peace 1 ``` Output: ``` 1 200 Moby Dick 175 War and Peace 2 100 The Great Gatsby 150 Crime and Punishment ```","solution":"def group_books_by_genre(n, books): genres = {i: [] for i in range(1, 6)} for i in range(n): book_id = books[i*3] title = books[i*3 + 1] genre = int(books[i*3 + 2]) genres[genre].append((int(book_id), title)) output = [] for genre in range(1, 6): if genres[genre]: output.append(str(genre)) books_sorted = sorted(genres[genre], key=lambda x: x[0]) for book in books_sorted: output.append(f\\"{book[0]} {book[1]}\\") return output"},{"question":"Given an undirected connected graph with vertices numbered from 1 to N. Each edge has an associated weight, which is a positive integer. The graph is represented using an edge list, where each edge is described by three integers: the two vertices it connects and its weight. You are tasked with finding the shortest path between two specified vertices, A and B. However, there are some special conditions for the path you need to find: the total weight of the path must be an even number. If there are multiple paths with an even total weight, you should choose the one with the smallest number of edges. If there is still a tie, choose the one with the smallest lexicographical order when the sequences of vertices in the paths are compared. The input consists of: - An integer N (1 ≤ N ≤ 1000) representing the number of vertices. - An integer M (1 ≤ M ≤ 5000) representing the number of edges. - M lines of three integers each, u, v, w (1 ≤ u, v ≤ N and 1 ≤ w ≤ 1000), representing an edge between vertex u and vertex v with weight w. - Two integers A and B (1 ≤ A, B ≤ N) representing the start and end vertices. The output should be a single line containing the sequence of vertices in the shortest path that satisfies the conditions. If no such path exists, output \\"-1\\". Example: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 ``` Output: ``` 1 2 3 5 ``` Explanation: The path 1-2-3-5 has a total weight of 2+1+3 = 6, which is even. There are other paths with an even total weight, but this path has the smallest number of edges. If there were still a tie, the lexicographical order would decide.","solution":"import heapq from collections import defaultdict def find_shortest_even_path(N, M, edges, A, B): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue for Dijkstra\'s algorithm pq = [(0, 0, A, [])] # (total_weight, number_of_edges, current_node, path) visited = set() while pq: total_weight, num_edges, node, path = heapq.heappop(pq) if (node, total_weight % 2) in visited: continue visited.add((node, total_weight % 2)) path = path + [node] if node == B and total_weight % 2 == 0: return \' \'.join(map(str, path)) for neighbor, weight in graph[node]: if (neighbor, (total_weight + weight) % 2) not in visited: heapq.heappush(pq, (total_weight + weight, num_edges + 1, neighbor, path)) return \\"-1\\" # Example input edges = [ (1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1) ] print(find_shortest_even_path(5, 6, edges, 1, 5)) # Output: \\"1 2 3 5\\""},{"question":"Zara is planning to visit multiple cities for her vacation. She wants to visit exactly k cities out of n cities she has planned. Each city is represented by a unique number from 1 to n, and she has a list of enjoyment value for visiting each city. Zara wants to maximize her overall enjoyment by selecting k cities to visit whose sum of enjoyment values is as high as possible. Input: - The first line contains two integers n and k (1 <= n <= 1000, 1 <= k <= n), representing the number of cities and the number of cities Zara plans to visit, respectively. - The second line contains n space-separated integers ei (0 <= ei <= 1000), where ei represents the enjoyment value of visiting the ith city. Output: - Print the maximum enjoyment value Zara can achieve by visiting exactly k cities. - Print k distinct space-separated integers representing the indices of the cities Zara will visit in 1-based indexing. If there are multiple solutions, print any of them. Example: Input: 6 3 350 200 400 150 600 300 Output: 1350 1 3 5 Explanation: Zara should visit the cities with enjoyment values 350, 400, and 600, giving her a maximum enjoyment value of 1350. The indices of these cities in 1-based indexing are 1, 3, and 5. If there are other combinations that also give the same maximum value, they are acceptable as solutions.","solution":"def maximize_enjoyment(n, k, enjoyment_values): Returns the maximum enjoyment value and the indices of k cities that Zara should visit. Args: n (int): Number of cities. k (int): Number of cities Zara plans to visit. enjoyment_values (list of int): List containing enjoyment values of visiting each city. Returns: tuple: (maximum enjoyment value, list of k city indices) # Pair the enjoyment values with their respective indices indexed_values = [(value, idx + 1) for idx, value in enumerate(enjoyment_values)] # Sort the values based on enjoyment in descending order indexed_values.sort(reverse=True, key=lambda x: x[0]) # Select the top k cities based on enjoyment values top_cities = indexed_values[:k] # Calculate the total enjoyment from top k cities total_enjoyment = sum(value for value, idx in top_cities) # Gather the indices of the top k cities chosen_indices = [idx for value, idx in top_cities] return total_enjoyment, chosen_indices"},{"question":"The company \\"XYZ\\" wants to rearrange a company\'s employees based on their levels to form a hierarchical structure. Each employee is assigned a level from 1 to n, where they need to be placed in such a way that higher-level employees are directly above lower-level employees in the hierarchy. Additionally, no two employees of the same level should be next to each other in the vertical hierarchy. Given an integer n (1 <= n <= 10^5), your task is to verify if it\'s possible to arrange employees in such a manner. If it is possible, print \\"YES\\" followed by a valid arrangement of levels in n lines, where the i-th line contains the level of the employee placed at i-th position in the hierarchy from top to bottom. Otherwise, print \\"NO\\". The only input line contains an integer n (1 ≤ n ≤ 10^5). In the first output line, print \\"YES\\" if such an arrangement exists, otherwise print \\"NO\\". If \\"YES\\", then print the n levels in the next n lines. The levels should be between 1 and n and no two adjacent employees should have the same level. If there are multiple valid arrangements, you are allowed to print any of them. Examples: Input: 4 Output: YES 1 3 2 4 Input: 2 Output: NO","solution":"def rearrange_employees(n): if n == 2: return \\"NO\\" arrangement = [] for i in range(1, n + 1, 2): arrangement.append(i) for i in range(2, n + 1, 2): arrangement.append(i) result = \\"YESn\\" + \\"n\\".join(map(str, arrangement)) return result"}]'),Y={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},z=["disabled"],R={key:0},P={key:1};function C(s,e,h,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,z)):l("",!0)])}const D=d(Y,[["render",C],["__scopeId","data-v-bbfb1170"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/18.md","filePath":"chatai/18.md"}'),L={name:"chatai/18.md"},M=Object.assign(L,{setup(s){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{G as __pageData,M as default};
