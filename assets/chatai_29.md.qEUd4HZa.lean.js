import{_ as c,o as n,c as i,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as w,p as b,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},A={class:"review-title"},S={class:"review-content"};function C(a,e,l,m,r,s){return n(),i("div",T,[t("div",q,[t("div",A,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const E=c(k,[["render",C],["__scopeId","data-v-e9dbfaa6"]]),I=JSON.parse('[{"question":"You are given a DataFrame containing information about bike rentals in a city. The DataFrame includes columns for the rental start time, the rental end time, and the duration of the rental in minutes. Your task is to write a function that analyzes this data to provide insights into the rental duration trends based on different criteria. The function should: 1. Convert the \'start_time\' and \'end_time\' columns to datetime format using the `pandas.to_datetime` function. 2. Compute the average rental duration for each month. 3. Compute the average rental duration for each day of the week. 4. Print the average rental duration for the specified month and day of the week based on user input. 5. Print these statistics along with the rental data filtering information provided as input parameters. Write a function named `rental_duration_stats` with the following signature: ```python def rental_duration_stats(df: pd.DataFrame, month: str, day_of_week: str) -> None: ``` **Input:** - `df` (DataFrame): A pandas DataFrame with \'start_time\', \'end_time\', and \'duration_min\' columns. - `month` (str): The month filter applied to the data, or \'all\' to indicate no filter. - `day_of_week` (str): The day of the week filter applied to the data, or \'all\' to indicate no filter. **Output:** - The function should print the computed average rental durations and the filtering information. **Example DataFrame:** ``` start_time end_time duration_min 0 2021-01-01 10:00:00 2021-01-01 10:30:00 30 1 2021-02-15 12:00:00 2021-02-15 12:45:00 45 2 2021-03-20 14:30:00 2021-03-20 14:50:00 20 ... ``` **Example Usage:** ```python import pandas as pd data = { \'start_time\': [\'2021-01-01 10:00:00\', \'2021-02-15 12:00:00\', \'2021-03-20 14:30:00\'], \'end_time\': [\'2021-01-01 10:30:00\', \'2021-02-15 12:45:00\', \'2021-03-20 14:50:00\'], \'duration_min\': [30, 45, 20] } df = pd.DataFrame(data) rental_duration_stats(df, \'all\', \'all\') ```","solution":"import pandas as pd def rental_duration_stats(df: pd.DataFrame, month: str, day_of_week: str) -> None: Computes and prints rental duration statistics based on the given DataFrame. Parameters: - df (pd.DataFrame): DataFrame containing \'start_time\', \'end_time\', and \'duration_min\' columns. - month (str): The month filter for the data, or \'all\' for no filter. - day_of_week (str): The day of the week filter for the data, or \'all\' for no filter. # Convert \'start_time\' and \'end_time\' to datetime df[\'start_time\'] = pd.to_datetime(df[\'start_time\']) df[\'end_time\'] = pd.to_datetime(df[\'end_time\']) # Extract month and day of week from \'start_time\' df[\'month\'] = df[\'start_time\'].dt.strftime(\'%B\') df[\'day_of_week\'] = df[\'start_time\'].dt.strftime(\'%A\') # Compute average rental duration for each month avg_duration_per_month = df.groupby(\'month\')[\'duration_min\'].mean() # Compute average rental duration for each day of the week avg_duration_per_day = df.groupby(\'day_of_week\')[\'duration_min\'].mean() # Filter the dataframe based on user input if month != \'all\': df = df[df[\'month\'] == month] if day_of_week != \'all\': df = df[df[\'day_of_week\'] == day_of_week] # Compute overall average after applying filters overall_avg_duration = df[\'duration_min\'].mean() if not df.empty else 0 # Print the statistics print(f\\"Average rental duration for the specified month ({month}) and day of the week ({day_of_week}): {overall_avg_duration:.2f} minutes\\") print(\\"Average rental duration per month:\\") print(avg_duration_per_month) print(\\"Average rental duration per day of the week:\\") print(avg_duration_per_day)"},{"question":"You are required to implement a function that sorts an array of integers based on the frequency of values. More frequent numbers should appear earlier in the sorted array. If two values have the same frequency, they should appear in ascending numerical order. Here are the detailed requirements: 1. **Function Name**: `frequency_sort` 2. **Parameter**: - `arr`: A list of integers. 3. **Output**: - The function should return a list of integers sorted based on their frequency as described. **Instructions**: - Use the `collections.Counter` class to count the frequency of each integer in the input list. - Sort the array first by the frequency of the values in descending order, and then by the values themselves in ascending order. **Example**: Suppose `arr = [1, 1, 2, 2, 2, 3, 3, 4]`. Calling `frequency_sort(arr)` should return `[2, 2, 2, 1, 1, 3, 3, 4]`. Write the function `frequency_sort` to accomplish this task.","solution":"from collections import Counter def frequency_sort(arr): Sorts an array of integers based on the frequency of values. More frequent numbers appear earlier. If frequencies are equal, the numbers appear in ascending order. # Count frequency of each number in the array frequency = Counter(arr) # Sort the array first by frequency (descending), then by the number (ascending) sorted_arr = sorted(arr, key=lambda x: (-frequency[x], x)) return sorted_arr"},{"question":"You are tasked to implement a function, `path_finder`, which determines the shortest path from a start node to a target node in an undirected graph using Dijkstra’s algorithm. This function will assist in navigating a route based on minimal travel cost in terms of distance between nodes. Function Specification **Function Name:** `path_finder` **Parameters:** - `graph` (dict): A dictionary representing the graph where keys are node identifiers (strings) and values are lists of tuples. Each tuple has a neighbor node and the distance to that neighbor (a positive integer). - `start` (str): The starting node identifier. - `target` (str): The target node identifier. **Returns:** - `path` (list): A list of node identifiers representing the shortest path from the start node to the target. If no path exists, return an empty list. - `total_distance` (int): The total distance of the shortest path. If no path exists, return -1. **Requirements:** - Validate the input graph to ensure all distances are positive. - Implement Dijkstra’s algorithm to find the shortest path. - Handle cases where the start or target node is not in the graph. **Steps:** 1. Validate the input parameters and raise appropriate exceptions for invalid values. 2. Initialize data structures for Dijkstra’s algorithm such as a priority queue (min-heap), distances dictionary, and path tracking. 3. Use the priority queue to explore nodes, updating the shortest known distances and paths. 4. Construct the shortest path and calculate the total distance. 5. Return the path and total distance. #","solution":"import heapq def path_finder(graph, start, target): Finds the shortest path from start to target using Dijkstra\'s algorithm. :param graph: Dict representing the graph where keys are nodes and values are lists of tuples (neighbor, distance) :param start: Starting node identifier (str) :param target: Target node identifier (str) :return: Tuple containing a list of node identifiers for the shortest path and the total distance # Validate input graph for node, neighbors in graph.items(): for neighbor, distance in neighbors: if distance <= 0: raise ValueError(\\"Graph cannot have non-positive distances.\\") if start not in graph: return [], -1 if target not in graph: return [], -1 # Initialize Dijkstra\'s algorithm data structures distance = {node: float(\'inf\') for node in graph} previous = {node: None for node in graph} distance[start] = 0 priority_queue = [(0, start)] heapq.heapify(priority_queue) while priority_queue: current_dist, current_node = heapq.heappop(priority_queue) if current_node == target: break if current_dist > distance[current_node]: continue for neighbor, weight in graph[current_node]: new_dist = current_dist + weight if new_dist < distance[neighbor]: distance[neighbor] = new_dist previous[neighbor] = current_node heapq.heappush(priority_queue, (new_dist, neighbor)) # Reconstruct the path from start to target path = [] total_distance = distance[target] if total_distance == float(\'inf\'): return [], -1 current = target while current: path.append(current) current = previous[current] path.reverse() return path, total_distance"},{"question":"You are provided with a skeleton of a program that helps manage employee records in a company. Each employee has a unique ID, name, and salary. The goal is to add functionality to calculate the average salary of all employees and to identify the employee with the highest salary. Your task is to write a function `calculate_statistics` that takes a list of employee records and returns a dictionary containing the `average_salary` and the `highest_salary_employee`. Each employee record is a dictionary with keys `id`, `name`, and `salary`. **Function Signature:** ```python def calculate_statistics(employees): pass ``` **Details:** 1. The function should accept a list of dictionaries, where each dictionary represents an employee record. 2. Calculate the average salary of all employees. 3. Identify the employee with the highest salary. 4. Return a dictionary with two entries: `average_salary` (rounded to 2 decimal places) and `highest_salary_employee` (the name of the employee with the highest salary). **Example Usage:** ```python employees = [ {\\"id\\": 1, \\"name\\": \\"Alice\\", \\"salary\\": 70000}, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"salary\\": 100000}, {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"salary\\": 60000}, ] result = calculate_statistics(employees) print(result) # Output: {\\"average_salary\\": 76666.67, \\"highest_salary_employee\\": \\"Bob\\"} ``` **Edge Cases:** - If the list of employees is empty, the function should return `{\\"average_salary\\": 0, \\"highest_salary_employee\\": None}`. - Ensure your solution handles cases where there are multiple employees with the highest salary appropriately.","solution":"def calculate_statistics(employees): if not employees: return {\\"average_salary\\": 0, \\"highest_salary_employee\\": None} total_salary = sum(employee[\'salary\'] for employee in employees) average_salary = round(total_salary / len(employees), 2) highest_salary_employee = max(employees, key=lambda x: x[\'salary\'])[\'name\'] return {\\"average_salary\\": average_salary, \\"highest_salary_employee\\": highest_salary_employee}"},{"question":"You need to create a function in Python that takes a string containing multiple words separated by spaces, and returns a new string with each word reversed while maintaining the original order and spaces. The function is named `reverse_words`, and it follows these specifications: 1. The function `reverse_words` will take a single parameter, `sentence`, which is a string of words separated by spaces. 2. Each word in the resultant string should be reversed, but the order of the words should remain the same. 3. Handle edge cases such as multiple spaces between words and leading or trailing spaces. Here\'s the function signature you should implement: ```python def reverse_words(sentence): Reverses each word in the string while keeping the word order and spaces intact. # Your implementation here ``` # Examples ```python assert reverse_words(\\"hello world\\") == \\"olleh dlrow\\" assert reverse_words(\\" example string \\") == \\" elpmaxe gnirts \\" assert reverse_words(\\"a b c\\") == \\"a b c\\" assert reverse_words(\\"reverse words\\") == \\"esrever sdrow\\" ``` # Requirements - You must handle strings with multiple spaces and edge cases. - The implementation should efficiently handle strings of varying lengths. # Constraints - The input string will have a maximum length of 10,000 characters. - Each word in the input string will have a maximum length of 100 characters.","solution":"def reverse_words(sentence): Reverses each word in the string while keeping the word order and spaces intact. Args: sentence (str): The input sentence consisting of words separated by spaces. Returns: str: The sentence with each word reversed while maintaining the original order and spaces. return \' \'.join(word[::-1] for word in sentence.split(\' \'))"},{"question":"Write a function `get_github_user_data` that retrieves and prints information about a GitHub user based on their username. The function should perform the following tasks: 1. Make an HTTP GET request to the GitHub API to retrieve the user\'s data (URL format: `https://api.github.com/users/{username}`). 2. Parse the JSON response to extract the following details: - Full name (`name`) - Bio (`bio`) - Public repositories count (`public_repos`) - Followers count (`followers`) - Following count (`following`) 3. Print the extracted information in a formatted manner. Handle the following cases: - If the user does not exist, print a message indicating that the user was not found. - If the request limit of the GitHub API is exceeded, print a message indicating that the rate limit has been reached. Use the `requests` library for making HTTP requests.","solution":"import requests def get_github_user_data(username): Retrieves and prints information about a GitHub user based on their username. Args: - username (str): GitHub username Prints: - Full name, Bio, Public repositories count, Followers count, Following count or an error message if the user is not found or if the rate limit is exceeded. url = f\\"https://api.github.com/users/{username}\\" response = requests.get(url) if response.status_code == 404: print(\\"User not found.\\") elif response.status_code == 403: print(\\"Rate limit exceeded.\\") else: user_data = response.json() full_name = user_data.get(\\"name\\", \\"N/A\\") bio = user_data.get(\\"bio\\", \\"N/A\\") public_repos = user_data.get(\\"public_repos\\", \\"N/A\\") followers = user_data.get(\\"followers\\", \\"N/A\\") following = user_data.get(\\"following\\", \\"N/A\\") print(f\\"Full Name: {full_name}\\") print(f\\"Bio: {bio}\\") print(f\\"Public Repositories: {public_repos}\\") print(f\\"Followers: {followers}\\") print(f\\"Following: {following}\\")"},{"question":"You are required to write a function named `data_aggregator` which sorts, filters, and aggregates data from a list of dictionaries. Each dictionary in the list represents an entry with certain attributes. The function should be capable of executing these operations based on the provided parameters. **Function Signature**: ```python def data_aggregator(data, sort_by=None, filter_by=None, aggregate_by=None): \'\'\' :param data: list of dictionaries representing the entries. :param sort_by: key name to sort the data by (default is None). :param filter_by: dictionary where keys are the attribute names and values are the criteria to filter (default is None). :param aggregate_by: key name to aggregate the data by summing up its values (default is None). :return: sorted, filtered, and aggregated data based on the parameters. \'\'\' ``` # Requirements: 1. **Sorting**: If `sort_by` is specified, the function should sort the list of dictionaries by the value of the `sort_by` key in ascending order. 2. **Filtering**: If `filter_by` is specified, the function should filter the list of dictionaries to include only those entries that match the criteria specified in `filter_by`. `filter_by` will be a dictionary where the key is the attribute name and the value is the criterion. 3. **Aggregation**: If `aggregate_by` is specified, the function should compute the sum of the values for the `aggregate_by` key for the filtered results and return this sum. - The function should raise an appropriate exception if `data` is not a list of dictionaries or if `filter_by` contains a key that does not exist in the dictionaries. - The function should ensure proper handling of empty lists and respect the default values for the optional parameters. # Example Usage: ```python data = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"salary\\": 55000}, {\\"name\\": \\"Charlie\\", \\"age\\": 30, \\"salary\\": 60000}, {\\"name\\": \\"David\\", \\"age\\": 35, \\"salary\\": 80000}, {\\"name\\": \\"Eve\\", \\"age\\": 25, \\"salary\\": 72000} ] # Sort by age print(data_aggregator(data, sort_by=\\"age\\")) # Filter by age = 30 print(data_aggregator(data, filter_by={\\"age\\": 30})) # Aggregate by salary for people aged 30 print(data_aggregator(data, filter_by={\\"age\\": 30}, aggregate_by=\\"salary\\")) ``` # Notes: - Strings and other non-numeric criteria in `filter_by` should be matched exactly. - Sorting should be stable and in ascending order.","solution":"def data_aggregator(data, sort_by=None, filter_by=None, aggregate_by=None): Sorts, filters, and aggregates data from a list of dictionaries based on the provided parameters. :param data: list of dictionaries representing the entries. :param sort_by: key name to sort the data by (default is None). :param filter_by: dictionary where keys are the attribute names and values are the criteria to filter (default is None). :param aggregate_by: key name to aggregate the data by summing up its values (default is None). :return: sorted, filtered, and aggregated data based on the parameters. if not isinstance(data, list) or any(not isinstance(d, dict) for d in data): raise ValueError(\\"Data must be a list of dictionaries.\\") if filter_by: for key in filter_by: if not all(key in d for d in data): raise KeyError(f\\"Key \'{key}\' not found in all dictionaries.\\") data = [d for d in data if all(d.get(key) == value for key, value in filter_by.items())] if sort_by: if not all(sort_by in d for d in data): raise KeyError(f\\"Key \'{sort_by}\' not found in all dictionaries.\\") data = sorted(data, key=lambda d: d[sort_by]) if aggregate_by: if not all(aggregate_by in d for d in data): raise KeyError(f\\"Key \'{aggregate_by}\' not found in all dictionaries.\\") return sum(d[aggregate_by] for d in data) return data"},{"question":"You are requested to implement a function that takes a list of transactions, each represented by a tuple (customer_id, product_id, timestamp), and generates a summary report of the total number of purchases made by each customer, sorted by the total number of purchases in descending order. # Requirements: - **Function Name:** `customer_purchase_summary` - **Function Inputs:** - `transactions`: A list of tuples, where each tuple contains `customer_id` (string), `product_id` (string), and `timestamp` (string in ISO 8601 format, e.g., \'2023-10-12T07:20:50.52Z\') - **Function Outputs:** - A list of tuples, each containing `customer_id` and `total_purchases`, sorted by `total_purchases` in descending order. If two customers have the same number of purchases, they should appear in ascending order of `customer_id`. # Example Usage: ```python transactions = [ (\\"cust_1\\", \\"prod_1\\", \\"2023-10-10T14:48:00.000Z\\"), (\\"cust_2\\", \\"prod_2\\", \\"2023-10-11T10:17:00.000Z\\"), (\\"cust_1\\", \\"prod_3\\", \\"2023-10-12T09:45:00.000Z\\"), (\\"cust_3\\", \\"prod_2\\", \\"2023-10-13T11:11:00.000Z\\"), (\\"cust_2\\", \\"prod_4\\", \\"2023-10-14T08:23:00.000Z\\"), (\\"cust_1\\", \\"prod_2\\", \\"2023-10-15T05:19:00.000Z\\"), ] result = customer_purchase_summary(transactions) print(result) # Output: [(\'cust_1\', 3), (\'cust_2\', 2), (\'cust_3\', 1)] ``` # Hints: - Use dictionaries to count the number of purchases for each customer. - Remember to sort the results by the number of purchases in descending order and by `customer_id` in ascending order if counts are the same.","solution":"def customer_purchase_summary(transactions): Generate a summary report of the total number of purchases made by each customer, sorted by the total number of purchases in descending order. Args: transactions (list): A list of tuples, where each tuple contains customer_id (str), product_id (str), and timestamp (str). Returns: list: A list of tuples, each containing customer_id and total_purchases, sorted by total_purchases in descending order. # Dictionary to hold the count of purchases for each customer purchase_count = {} for customer_id, product_id, timestamp in transactions: if customer_id in purchase_count: purchase_count[customer_id] += 1 else: purchase_count[customer_id] = 1 # Convert dictionary to list of tuples summary_list = [(customer_id, total_purchases) for customer_id, total_purchases in purchase_count.items()] # Sort the list by total_purchases in descending order, and by customer_id in ascending order if counts are the same summary_list.sort(key=lambda x: (-x[1], x[0])) return summary_list"},{"question":"In this problem, you will work with Python\'s dictionary data structure to perform data manipulation based on word occurrences. The objective is to practice using Python dictionaries for counting frequencies and finding the most common elements, an essential skill for data analysis tasks. You are required to implement the function `most_common_word(sentence: str) -> str` that takes a string `sentence` as input and returns the most common word in the sentence. In case of a tie, return the word that appears first in the sentence. The function should ignore punctuation and be case-insensitive. **Function Signature:** ```python def most_common_word(sentence: str) -> str: pass ``` # Requirements: 1. Utilize Python dictionaries to count word occurrences, treating words in a case-insensitive manner. 2. Remove any punctuation from the sentence and split the sentence into words based on spaces. 3. Identify the word with the highest frequency, using dictionary operations. 4. Handle ties by returning the first occurring most common word in the sentence. # Example: ```python print(most_common_word(\\"This is a test. This test is easy.\\")) # Expected Output: \\"this\\" print(most_common_word(\\"Hello! Hello; HELLO? Hi there, Hi.\\")) # Expected Output: \\"hello\\" print(most_common_word(\\"Apple banana: apple Banana.\\")) # Expected Output: \\"apple\\" ``` Use this problem to familiarize yourself with Python\'s dictionary manipulations, string processing, and word frequency analysis. # Constraints: - The input string will be non-empty and contain only printable ASCII characters. - The sentence will contain at least one word after removing punctuation. #","solution":"import string def most_common_word(sentence: str) -> str: Returns the most common word in the sentence. In case of a tie, returns the word that appears first in the sentence. The comparison is case-insensitive, and punctuation is ignored. # Converting all the characters to lower case and removing punctuation translator = str.maketrans(\'\', \'\', string.punctuation) sentence = sentence.translate(translator).lower() words = sentence.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = 0 most_common_word = \\"\\" for word in words: if word_count[word] > max_count: max_count = word_count[word] most_common_word = word return most_common_word"},{"question":"You have been provided with a dataset representing different classification models\' performance on various metrics. Each model contains its Precision, Recall, and F1-Score values for a binary classification task. Your task is to visualize these metrics using matplotlib in a 3-bar plot layout for each model. Each plot should contain three bars representing Precision, Recall, and F1-Score for the given model. Write a function `plot_classification_metrics(metrics)` that takes a list of tuples `metrics` (each tuple contains `[Precision, Recall, F1-Score]`), where: - `Precision` is a float representing the precision of the model. - `Recall` is a float representing the recall of the model. - `F1-Score` is a float representing the F1-Score of the model. The function should: 1. Create a figure with individual subplots for each model, arranged in a 2x3 grid (assuming there are at most six models). 2. Plot three bars in each subplot representing Precision, Recall, and F1-Score for the given model. 3. Use appropriate colors for the bars: [\'blue\', \'orange\', \'green\'] for Precision, Recall, and F1-Score respectively. 4. Add appropriate titles and labels: - Title should be `Model {i+1}` where `i` is the index of the model. - The x-axis should be labeled `Metrics`. - The y-axis should be labeled `Score`. 5. Adjust the layout to ensure that plots and labels are properly visible. **Example** ```python metrics = [ (0.85, 0.80, 0.82), (0.78, 0.74, 0.76), (0.92, 0.88, 0.90), (0.67, 0.65, 0.66), (0.80, 0.85, 0.82) ] plot_classification_metrics(metrics) ```","solution":"import matplotlib.pyplot as plt def plot_classification_metrics(metrics): Plots the Precision, Recall, and F1-Score for each model. Parameters: - metrics: A list of tuples, where each tuple contains three floats: Precision, Recall, and F1-Score. The function creates a 2x3 grid of plots if there are at most six models. num_models = len(metrics) fig, axs = plt.subplots(2, 3, figsize=(15, 10)) axs = axs.flatten() for i, (precision, recall, f1_score) in enumerate(metrics): axs[i].bar([\'Precision\', \'Recall\', \'F1-Score\'], [precision, recall, f1_score], color=[\'blue\', \'orange\', \'green\']) axs[i].set_title(f\'Model {i+1}\') axs[i].set_xlabel(\'Metrics\') axs[i].set_ylabel(\'Score\') axs[i].set_ylim(0, 1) # Assuming the scores are between 0 and 1 # If there are less than 6 models, turn off the unused subplots for j in range(num_models, len(axs)): axs[j].axis(\'off\') plt.tight_layout() plt.show()"},{"question":"You are required to create a Python function named `rotate_matrix` that rotates a given matrix by 90 degrees clockwise. This function should handle both square and rectangular matrices and leverage the `numpy` library for efficient manipulation of matrix elements. # Function Signature: ```python import numpy as np def rotate_matrix(matrix: np.ndarray) -> np.ndarray: pass ``` # Input: - `matrix`: A two-dimensional `numpy` array representing the matrix to rotate. # Output: - The function should return a new two-dimensional `numpy` array that is the rotated version of the input matrix. # Instructions: 1. Implement the function by first transposing the matrix to swap rows and columns. 2. Reverse the order of elements in each row of the transposed matrix to achieve the clockwise rotation. 3. Use `numpy` functionalities to handle the operations efficiently. 4. Ensure your function can correctly process matrices of any shape, whether they are square or rectangular. *Note: This problem is designed to help you practice manipulating multi-dimensional arrays and utilizing `numpy` operations for transformations.*","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray) -> np.ndarray: Rotates the given matrix by 90 degrees clockwise. Parameters: matrix (np.ndarray): The matrix to rotate. Returns: np.ndarray: The rotated matrix. # Transpose the matrix transposed_matrix = np.transpose(matrix) # Reverse the order of elements in each row of the transposed matrix rotated_matrix = np.flip(transposed_matrix, axis=1) return rotated_matrix"},{"question":"You are asked to implement a function named `kth_largest_element` that finds the k-th largest element in an unsorted list. Your task is to return the k-th largest element, where k is guaranteed to be a valid positive integer less than or equal to the length of the list. The function signature should be: ```python def kth_largest_element(lst: list, k: int) -> int: ... ``` **Constraints:** 1. The input list `lst` contains integers, which can include negative numbers as well. 2. You may not use the built-in `sorted` function or any other sorting mechanism that sorts the entire list directly. 3. The function must run in O(n log n) time complexity or better. **Requirements:** - Use the `heapq.nlargest` from the `heapq` library to find the k-th largest element efficiently. The function should efficiently find the k-th largest element without sorting the entire list, leveraging heap data structures for partially sorting the required number of largest elements. # Example: ```python kth_largest_element([3, 2, 1, 5, 6, 4], 2) ``` Should return: ```python 5 ``` # Library API References: 1. `heapq.nlargest`: ```python import heapq heapq.nlargest(n, iterable) ``` Return a list with the n largest elements from the dataset defined by `iterable`. # Note: This question tests the ability to use heap-based algorithms for efficient selection tasks and requires knowledge of partial sorting mechanisms while adhering to constraints on time complexity.","solution":"import heapq def kth_largest_element(lst: list, k: int) -> int: Finds the k-th largest element in an unsorted list. Parameters: lst (list): The input list containing integers. k (int): The k-th position to find its largest element (1-based index). Returns: int: The k-th largest element in the list. return heapq.nlargest(k, lst)[-1]"},{"question":"In this problem, you are required to implement a class named `SparseMatrix` that represents a two-dimensional sparse matrix. A sparse matrix is a matrix in which most of the elements are zero. Your task is to efficiently store and manipulate this matrix. The class should provide the following functionalities: 1. **Initialization**: Initialize the matrix with a given number of rows and columns. 2. **Set Element**: A method `set_element(row, col, value)` to set the value at the specified row and column. 3. **Get Element**: A method `get_element(row, col)` to get the value at a specific position. If the position has not been set, it should return 0. 4. **Representation**: A method `__str__()` to return a string representation of the matrix in a traditional two-dimensional format, where unset elements are represented as 0. Constraints: - The number of rows and columns will not exceed 10^4. - You should use an efficient storage technique to handle sparsity (e.g., dictionaries or other appropriate data structures). Example usage: ```python matrix = SparseMatrix(3, 3) matrix.set_element(0, 0, 1) matrix.set_element(1, 2, 5) print(matrix.get_element(0, 0)) # Outputs: 1 print(matrix.get_element(2, 2)) # Outputs: 0 print(matrix) # Outputs: # 1 0 0 # 0 0 5 # 0 0 0 ```","solution":"class SparseMatrix: def __init__(self, rows, cols): Initialize the matrix with a given number of rows and columns. self.rows = rows self.cols = cols self.data = {} def set_element(self, row, col, value): Set the value at the specified row and column. if row >= self.rows or col >= self.cols: raise IndexError(\\"Row or Column index out of bounds\\") if value != 0: self.data[(row, col)] = value elif (row, col) in self.data: del self.data[(row, col)] def get_element(self, row, col): Get the value at a specific position. If the position has not been set, return 0. if row >= self.rows or col >= self.cols: raise IndexError(\\"Row or Column index out of bounds\\") return self.data.get((row, col), 0) def __str__(self): Return a string representation of the matrix in a traditional two-dimensional format. result = [] for r in range(self.rows): row = [] for c in range(self.cols): row.append(str(self.get_element(r, c))) result.append(\\" \\".join(row)) return \\"n\\".join(result)"},{"question":"In this problem, you are asked to implement a system to help a bookstore manage its inventory of books and handle customer requests for book recommendations. The goal is to implement a class named `BookStore` that performs the following functionalities: 1. Initialize a bookstore inventory with a specified list of books, each represented by a dictionary containing `title`, `author`, and `year_published`. 2. Add a new book to the inventory. 3. Remove a book from the inventory based on its title. 4. Retrieve a list of all books by a specified author. 5. Recommend books published after a specified year. Here is the class definition and method signatures you should follow: ```python class BookStore: def __init__(self, books): Initialize the bookstore with a list of books. Args: books (list): List of dictionaries where each dictionary represents a book with keys \'title\', \'author\', and \'year_published\'. pass def add_book(self, book): Add a new book to the inventory. Args: book (dict): A dictionary representing a book with keys \'title\', \'author\', and \'year_published\'. pass def remove_book(self, title): Remove a book from the inventory by its title. Args: title (str): The title of the book to be removed. pass def find_books_by_author(self, author): Retrieve a list of all books by a given author. Args: author (str): The author whose books to retrieve. Returns: list: A list of dictionaries representing the books by the specified author. pass def recommend_books(self, year): Recommend books that were published after the specified year. Args: year (int): The year to filter books. Returns: list: A list of dictionaries representing the recommended books. pass ``` Implement the `BookStore` class according to the provided specifications. Ensure that the methods handle edge cases appropriately, such as attempting to remove a non-existent book or querying for an author that does not exist in the inventory.","solution":"class BookStore: def __init__(self, books): Initialize the bookstore with a list of books. Args: books (list): List of dictionaries where each dictionary represents a book with keys \'title\', \'author\', and \'year_published\'. self.books = books def add_book(self, book): Add a new book to the inventory. Args: book (dict): A dictionary representing a book with keys \'title\', \'author\', and \'year_published\'. self.books.append(book) def remove_book(self, title): Remove a book from the inventory by its title. Args: title (str): The title of the book to be removed. self.books = [book for book in self.books if book[\'title\'] != title] def find_books_by_author(self, author): Retrieve a list of all books by a given author. Args: author (str): The author whose books to retrieve. Returns: list: A list of dictionaries representing the books by the specified author. return [book for book in self.books if book[\'author\'] == author] def recommend_books(self, year): Recommend books that were published after the specified year. Args: year (int): The year to filter books. Returns: list: A list of dictionaries representing the recommended books. return [book for book in self.books if book[\'year_published\'] > year]"},{"question":"You are given a 2D grid (a list of lists) representing a map where `1` indicates land and `0` indicates water. The task is to write a function `number_of_islands` to count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. # Function Signature: ```python def number_of_islands(grid: List[List[int]]) -> int: ``` # Input: - `grid` (List[List[int]]): A 2D list representing the map, where `1` represents land and `0` represents water. # Output: - (int): The number of distinct islands. # Steps: 1. Traverse each cell in the grid. 2. If a cell contains land (`1`), initiate a Depth-First Search (DFS) or Breadth-First Search (BFS) to mark all the connected land cells. 3. Each time a new DFS/BFS is initiated, increment the island count. 4. Continue until all cells have been processed. # Example: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 1, 0, 1], [0, 0, 0, 1, 1] ] print(number_of_islands(grid)) # Output: 3 ``` # Note: - Ensure that your function handles edge cases, such as an empty grid or a grid with no land. - Handle grids with various dimensions in a memory-efficient and time-efficient manner.","solution":"from typing import List def number_of_islands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if 0 <= cx < len(grid) and 0 <= cy < len(grid[0]) and grid[cx][cy] == 1: grid[cx][cy] = -1 # Mark as visited stack.extend([(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: count += 1 dfs(i, j) return count"},{"question":"You are provided with a file containing several lines of text. Write a Python function to count the occurrences of each word in the file and return the words that occur the most frequently. In the case of ties, return all words with the highest frequency in alphabetical order. Implement the function `most_frequent_words(file_path: str) -> List[str]` which takes a single argument: - `file_path` (str): The path to the file containing the text to be analyzed. Inside the function, follow these steps: 1. Open and read the file\'s content. 2. Normalize the text by converting it to lowercase and removing any punctuation. 3. Split the text into individual words. 4. Count the occurrences of each word. 5. Identify the word(s) with the highest frequency. 6. Return a list of the word(s) with the highest frequency in alphabetical order. Example: ```python # Given a file with the following content: # \\"Hello world! Hello everyone. This world is beautiful. Everyone loves this beautiful world.\\" # most_frequent_words(\'path/to/file.txt\') -> [\'beautiful\', \'everyone\', \'hello\', \'world\'] ``` Key Requirement: - You should use the `collections.Counter` from the `collections` module to count word frequencies.","solution":"import collections import string def most_frequent_words(file_path: str): Returns a list of the most frequently occurring words in the given file. In case of a tie, the words are returned in alphabetical order. # Initialize a counter to count word frequencies word_counter = collections.Counter() # Read the file and process its content with open(file_path, \'r\') as file: for line in file: # Normalize text by converting it to lowercase line = line.lower() # Remove punctuation line = line.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the line into words words = line.split() # Update the counter with words word_counter.update(words) # Find the maximum frequency if not word_counter: # If no words were found in the file, return an empty list return [] max_frequency = max(word_counter.values()) # Get all words with the maximum frequency and sort them alphabetically most_frequent_words = [word for word, count in word_counter.items() if count == max_frequency] most_frequent_words.sort() return most_frequent_words"},{"question":"In this problem, you will work with basic data structures and string manipulation in Python. Your task is to write a function `check_palindrome_permutation()` that determines if any permutation of the input string can form a palindrome. # Function Description ```python def check_palindrome_permutation(s: str) -> bool: pass ``` # Parameters - `s`: A string containing the input sequence of characters (case insensitive). # Requirements 1. Ignore spaces and consider letters case insensitively. 2. Return `True` if any permutation of the string can form a palindrome, otherwise return `False`. # Explanation A permutation of a string can form a palindrome if at most one character has an odd count and all other characters have even counts. # Example Usage ```python check_palindrome_permutation(\\"Tact Coa\\") ``` This example should return `True` because permutations like \\"taco cat\\", \\"atco cta\\", etc., form a palindrome. ```python check_palindrome_permutation(\\"Hello World\\") ``` This example should return `False` because no permutation of \\"Hello World\\" can form a palindrome.","solution":"def check_palindrome_permutation(s: str) -> bool: from collections import Counter # Clean up string: remove spaces and convert to lower case s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character char_count = Counter(s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be able to form a palindrome, it can have at most one character with an odd count return odd_count <= 1"},{"question":"# Problem: Implementing a Simple Genetic Algorithm for Optimization You are tasked with implementing a simple genetic algorithm (GA) to solve an optimization problem using Python. This exercise will help you understand how genetic algorithms can be used for optimization solutions. # Context A genetic algorithm is a search heuristic that mimics the process of natural selection. It uses techniques such as selection, crossover, and mutation to optimize a given fitness function. For this problem, assume we have a function ( f(x) = -x^2 + 10x ). The goal is to find the value of ( x ) that maximizes this function using a genetic algorithm. # Task Write a function named `genetic_algorithm` with the following signature: ```python def genetic_algorithm(pop_size, generations, mutation_rate): # Implementation details ``` # Requirements 1. **Initialization** - Create an initial population of `pop_size` individuals. Each individual is represented by an integer ( x ) in the range [0, 10]. 2. **Fitness Function** - Define a fitness function `fitness(x)` that calculates the value of the function ( f(x) ). 3. **Selection** - Implement a selection mechanism to choose individuals for reproduction. Use roulette wheel selection based on fitness values. 4. **Crossover** - Implement a crossover function to produce new offspring. Use single-point crossover for simplicity. 5. **Mutation** - Implement a mutation function to introduce variations. Each offspring has a `mutation_rate` probability of undergoing mutation, which changes ( x ) to a random integer in the range [0, 10]. 6. **GA Loop** - Run the genetic algorithm for `generations` number of iterations. - For each generation, create a new population using the selection, crossover, and mutation functions. - Retain the best individual from the current generation. 7. **Result** - Return the best individual\'s ( x ) value found by the genetic algorithm. # Example Input and Output ```python best_x = genetic_algorithm(pop_size=20, generations=100, mutation_rate=0.01) print(\\"Best x:\\", best_x) ``` Expected output is around `x = 5` because the function ( f(x) = -x^2 + 10x ) has its maximum value at ( x = 5 ). # Note Ensure that your implementation correctly simulates the genetic algorithm process and considers elitism (retaining the best individual of each generation).","solution":"import random def fitness(x): return -x**2 + 10*x def roulette_wheel_selection(population, fitnesses): total_fitness = sum(fitnesses) pick = random.uniform(0, total_fitness) current = 0 for i, individual in enumerate(population): current += fitnesses[i] if current > pick: return individual def crossover(parent1, parent2): return (parent1 + parent2) // 2 def mutate(individual, mutation_rate): if random.random() < mutation_rate: return random.randint(0, 10) return individual def genetic_algorithm(pop_size, generations, mutation_rate): # Initialize population population = [random.randint(0, 10) for _ in range(pop_size)] best_individual = max(population, key=fitness) best_fitness = fitness(best_individual) for generation in range(generations): # Calculate fitnesses fitnesses = [fitness(ind) for ind in population] new_population = [] for _ in range(pop_size): # Selection parent1 = roulette_wheel_selection(population, fitnesses) parent2 = roulette_wheel_selection(population, fitnesses) # Crossover child = crossover(parent1, parent2) # Mutation child = mutate(child, mutation_rate) new_population.append(child) population = new_population current_best = max(population, key=fitness) current_fitness = fitness(current_best) if current_fitness > best_fitness: best_individual = current_best best_fitness = current_fitness return best_individual"},{"question":"Create a function that takes a list of dictionaries, each representing a student\'s grades for different subjects, and calculates the average grade for each student. The function should return a dictionary where the key is the student\'s name and the value is their average grade. The input list contains student records in the form: ``` [ {\\"name\\": \\"John\\", \\"Math\\": 80, \\"Science\\": 90, \\"English\\": 70}, {\\"name\\": \\"Jane\\", \\"Math\\": 85, \\"Science\\": 95, \\"English\\": 80}, # more student records... ] ``` Your function should handle cases with multiple subjects and handle any number of students. If a student has no grades, their average should be None. The function signature is: ```python def calculate_average_grades(student_records): ```","solution":"def calculate_average_grades(student_records): Calculates the average grades for each student. Args: student_records (list of dict): A list of dictionaries, each representing a student\'s grades. Returns: dict: A dictionary with the student\'s name as the key and their average grade as the value. average_grades = {} for record in student_records: student_name = record[\\"name\\"] grades = [value for key, value in record.items() if key != \\"name\\"] if grades: average_grades[student_name] = sum(grades) / len(grades) else: average_grades[student_name] = None return average_grades"},{"question":"You\'re asked to write a Python function that simulates an inventory management system for a retail store. The function will keep track of item quantities, handle orders, and generate inventory reports based on a specified action. **Function Name:** `manage_inventory` # Function Signature ```python def manage_inventory(inventory: dict, action: str, item: str = None, quantity: int = 0) -> dict: Manages inventory for a retail store based on the specified action: - \'add\': Adds a specified quantity of an item to the inventory. - \'remove\': Removes a specified quantity of an item from the inventory. - \'report\': Generates a report of the current inventory. - \'clear\': Clears the entire inventory. Parameters: - inventory (dict): A dictionary representing the inventory where keys are item names and values are quantities. - action (str): Specifies the action to take (\'add\', \'remove\', \'report\', \'clear\'). - item (str): The name of the item to add or remove. Default is None. - quantity (int): The quantity of the item to add or remove. Default is 0. Returns: - dict: The updated inventory dictionary after the specified action. ``` # Details 1. **Add Item**: - If `action` is `\'add\'`, increase the quantity of `item` in the `inventory` by the specified `quantity`. - If the `item` does not exist in the `inventory`, add it with the initial quantity. - Always return the updated `inventory`. 2. **Remove Item**: - If `action` is `\'remove\'`, decrease the quantity of `item` in the `inventory` by the specified `quantity`. - If removing the specified quantity would result in negative quantity, set the quantity of the `item` to zero. - If the `item` does not exist in the `inventory`, no action is taken. - Always return the updated `inventory`. 3. **Generate Report**: - If `action` is `\'report\'`, return the current `inventory` dictionary as it is. - Do not modify the `inventory`. 4. **Clear Inventory**: - If `action` is `\'clear\'`, reset the `inventory` to an empty dictionary. - Always return the updated `inventory`. **Constraints**: - The function should handle the case where `quantity` is zero or negative appropriately. - The function should be able to handle a large number of items and quantities efficiently. - Ensure the function does not modify the inventory when inappropriate actions or invalid item names are given. **Example Usage**: ```python inventory = {\'apple\': 10, \'banana\': 5} # Add 5 apples to the inventory manage_inventory(inventory, \'add\', \'apple\', 5) # {\'apple\': 15, \'banana\': 5} # Remove 3 bananas from the inventory manage_inventory(inventory, \'remove\', \'banana\', 3) # {\'apple\': 15, \'banana\': 2} # Generate a report of the current inventory manage_inventory(inventory, \'report\') # {\'apple\': 15, \'banana\': 2} # Clear the entire inventory manage_inventory(inventory, \'clear\') # {} ```","solution":"def manage_inventory(inventory: dict, action: str, item: str = None, quantity: int = 0) -> dict: if action == \'add\': if item is not None and quantity > 0: inventory[item] = inventory.get(item, 0) + quantity elif action == \'remove\': if item in inventory and quantity > 0: inventory[item] = max(0, inventory[item] - quantity) elif action == \'report\': return inventory elif action == \'clear\': inventory.clear() return inventory"},{"question":"You are required to write a function `get_even_odd_sums` that calculates the sum of even-indexed and odd-indexed elements from a given list of integers. The function should return a tuple containing the two sums. The function signature should be: ```python def get_even_odd_sums(numbers: list) -> tuple: ``` # Parameters - `numbers` (list): A list of integers from which the sums need to be calculated. # Returns - A tuple containing two elements: the sum of even-indexed elements and the sum of odd-indexed elements. # Function Description: 1. **Initialization**: Initialize two variables to store the sums of even-indexed and odd-indexed elements. 2. **Calculating Sums**: - Iterate over the list using an index. - If the index is even, add the corresponding element to the even-indexed sum. - If the index is odd, add the corresponding element to the odd-indexed sum. 3. **Return Result**: Return the sums in a tuple format. **Constraints**: - Assume the list contains at least one integer. Example: Suppose you have the list `[10, 20, 30, 40, 50, 60]`: ```python sums = get_even_odd_sums([10, 20, 30, 40, 50, 60]) print(sums) # Output should be (90, 120) ``` Here, the sum of even-indexed elements (indexes 0, 2, 4) is 10 + 30 + 50 = 90, and the sum of odd-indexed elements (indexes 1, 3, 5) is 20 + 40 + 60 = 120.","solution":"def get_even_odd_sums(numbers: list) -> tuple: Calculates the sum of even-indexed and odd-indexed elements from a given list of integers. Parameters: numbers (list): A list of integers. Returns: tuple: A tuple containing two elements: the sum of even-indexed elements and the sum of odd-indexed elements. even_sum = 0 odd_sum = 0 for index, value in enumerate(numbers): if index % 2 == 0: even_sum += value else: odd_sum += value return (even_sum, odd_sum)"},{"question":"Create a problem where the user must implement a function called `process_sales_data` that reads a CSV file containing sales data, processes the data to calculate the total sales for each product, and writes the output to a new CSV file. The input file contains the following columns: `Date`, `Product`, `Units Sold`, and `Unit Price`. The output file should contain columns `Product` and `Total Sales`, where `Total Sales` is calculated as the sum of `Units Sold * Unit Price` for each product. Context: 1. `process_sales_data(input_file, output_file)` - This function will take: - `input_file`: A string representing the path to the input CSV file. - `output_file`: A string representing the path where the output CSV file should be saved. Your function should read the data from the input file, calculate the total sales for each product, and write the results to the output file in the required format. # Function Definition: ```python def process_sales_data(input_file, output_file): # Reads the sales data, processes it to find the total sales for each product, # and writes the results to the output file. ``` # Example Usage: ```python process_sales_data(\'sales_data.csv\', \'total_sales.csv\') ``` # Input File Format (`sales_data.csv`): ```csv Date,Product,Units Sold,Unit Price 2023-01-01,Product A,10,15.00 2023-01-01,Product B,5,20.00 2023-01-02,Product A,7,15.00 ``` # Expected Output File (`total_sales.csv`): ```csv Product,Total Sales Product A,255.00 Product B,100.00 ``` # Requirements: 1. Use Python\'s `csv` module to handle file reading and writing. 2. Ensure that the output CSV file is correctly formatted with columns `Product` and `Total Sales`. 3. Handle potential issues such as missing data or incorrect formats gracefully. # Notes: - Make sure to handle both relative and absolute file paths for input and output files. - Ensure that the function is efficient and can handle large CSV files without performance degradation. - Add appropriate error handling for file operations and data processing.","solution":"import csv from collections import defaultdict def process_sales_data(input_file, output_file): product_sales = defaultdict(float) try: with open(input_file, \'r\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: product = row[\'Product\'] units_sold = float(row[\'Units Sold\']) unit_price = float(row[\'Unit Price\']) product_sales[product] += units_sold * unit_price with open(output_file, \'w\', newline=\'\') as csvfile: csvwriter = csv.writer(csvfile) csvwriter.writerow([\'Product\', \'Total Sales\']) for product, total_sales in product_sales.items(): csvwriter.writerow([product, total_sales]) except FileNotFoundError: print(f\\"Error: The file {input_file} does not exist.\\") except KeyError as e: print(f\\"Error: Missing column {e} in the input file.\\") except ValueError as e: print(f\\"Error: Invalid data format. {e}\\")"},{"question":"You are tasked with creating a function called `evaluate_expression_tree` that evaluates a binary expression tree. Each node in the binary expression tree can either be an operand (integer value) or an operator (+, -, *, /). Your function should traverse the tree and compute the result based on the operators and operands. Here\'s what you need to do: 1. Define a `TreeNode` class to represent nodes in the expression tree. Each node should have attributes for storing a value (either an operator or an operand) and references to left and right children. 2. Implement a function `evaluate_expression_tree` that takes the root of the expression tree as input and returns the computed result. 3. If the current node is an operand (integer value), simply return its value. 4. If the current node is an operator, recursively evaluate the left and right subtrees and apply the operator to their results. 5. Ensure proper handling of division by zero if the operator is `/`. Here\'s a sample prototype and a helper class definition you might need to get started: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def evaluate_expression_tree(root): # Your code here ``` # Example: Consider the following expression tree representation for (3 + ((2 * (1 + 1)) / 1)): ``` + / 3 / / * 1 / 2 + / 1 1 ``` The construction of this tree using `TreeNode` class will be: ```python root = TreeNode(\'+\', TreeNode(3), TreeNode(\'/\', TreeNode(\'*\', TreeNode(2), TreeNode(\'+\', TreeNode(1), TreeNode(1)) ), TreeNode(1) ) ) ``` Calling `evaluate_expression_tree(root)` should return `5.0`. Feel free to add additional helper functions as needed, but ensure that `evaluate_expression_tree` is the primary function called to perform the computation.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def evaluate_expression_tree(root): if not root: return 0 # If it\'s a leaf node (operand), return its value if not root.left and not root.right: return root.value # Recursively evaluate left and right subtrees left_value = evaluate_expression_tree(root.left) right_value = evaluate_expression_tree(root.right) # Apply the operator at the current node if root.value == \'+\': return left_value + right_value elif root.value == \'-\': return left_value - right_value elif root.value == \'*\': return left_value * right_value elif root.value == \'/\': if right_value == 0: raise ValueError(\\"Division by zero\\") return left_value / right_value # Example usage # Construct the expression tree for (3 + ((2 * (1 + 1)) / 1)) root = TreeNode(\'+\', TreeNode(3), TreeNode(\'/\', TreeNode(\'*\', TreeNode(2), TreeNode(\'+\', TreeNode(1), TreeNode(1)) ), TreeNode(1) ) )"},{"question":"Implement a function that reads a CSV file containing purchase transactions and groups the data by a specified column, such as date or product category. The function should compute the total sales amount for each group and then generate a pie chart illustrating the distribution of sales across these groups. The function should raise an exception for: FileNotFoundError: If the provided CSV file cannot be found. ValueError: If the specified column does not exist in the CSV file or contains non-numeric data for sales amount. The function should output with: tuple: The matplotlib Axes object showing the pie chart of sales distribution, and a pandas DataFrame containing the grouped sales amounts. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(csv_file, group_by_column, sales_column=\'sales_amount\'): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(csv_file, group_by_column, sales_column=\'sales_amount\'): Reads a CSV file, groups transactions by a specified column, computes total sales amounts, and generates a pie chart illustrating the distribution of sales across the groups. Parameters: csv_file (str): The path to the CSV file. group_by_column (str): The column by which to group the data. sales_column (str): The column containing sales amounts. Default is \'sales_amount\'. Returns: tuple: A tuple containing the matplotlib Axes object and the pandas DataFrame. # Read the CSV file into a DataFrame try: df = pd.read_csv(csv_file) except FileNotFoundError: raise FileNotFoundError(f\\"The file {csv_file} does not exist.\\") # Check if the specified columns exist in the DataFrame if group_by_column not in df.columns: raise ValueError(f\\"The specified column \'{group_by_column}\' does not exist in the CSV file.\\") if sales_column not in df.columns or not pd.api.types.is_numeric_dtype(df[sales_column]): raise ValueError(f\\"The sales column \'{sales_column}\' does not exist or contains non-numeric data.\\") # Group by the specified column and calculate total sales amounts grouped_sales = df.groupby(group_by_column)[sales_column].sum().reset_index() # Create a pie chart fig, ax = plt.subplots() ax.pie(grouped_sales[sales_column], labels=grouped_sales[group_by_column], autopct=\'%1.1f%%\') ax.axis(\'equal\') plt.title(\'Sales Distribution\') return ax, grouped_sales"},{"question":"You are tasked with writing a function that generates all possible permutations of a given list and returns them sorted in lexicographical order. **Function Name:** `generate_sorted_permutations` **Function Parameters:** - `input_list` (list): A list of distinct integers. **Function Output:** - Returns a list of lists, where each inner list represents a permutation of `input_list` sorted in lexicographical order. **Function Behavior:** 1. Generate all possible permutations of the `input_list`. 2. Sort these permutations in lexicographical order. 3. Return the sorted list of permutations. **Requirements:** - Use the following functions from the itertools library: - `itertools.permutations` Below is the function signature and a usage example: ```python def generate_sorted_permutations(input_list): # Your implementation here # Example usage: # input_list = [1, 2, 3] # result = generate_sorted_permutations(input_list) # Expected output: # [ # [1, 2, 3], # [1, 3, 2], # [2, 1, 3], # [2, 3, 1], # [3, 1, 2], # [3, 2, 1] # ] ```","solution":"import itertools def generate_sorted_permutations(input_list): Generates all possible permutations of the input list and returns them sorted in lexicographical order. Parameters: input_list (list of int): A list of distinct integers. Returns: list of list of int: A list of permutations sorted in lexicographical order. # Generate all permutations permutations = list(itertools.permutations(input_list)) # Sort permutations in lexicographical order sorted_permutations = sorted(permutations) # Convert tuples to lists sorted_permutations = [list(perm) for perm in sorted_permutations] return sorted_permutations"},{"question":"You are given a list of students\' scores in different subjects and you need to determine the students who have improved their scores in each subsequent subject. Write a function that identifies students whose scores improve consistently from the first subject to the last subject. The function `find_improving_students` should follow these requirements: 1. **Parameters**: - `scores`: A dictionary where keys are student names (strings) and values are lists of integers representing their scores in consecutive subjects. 2. **Returns**: - A list of strings representing the names of students whose scores are strictly increasing across all subjects. **Requirements**: - Ensure to check each student\'s scores to confirm they are consistently improving. - The function should be named `find_improving_students`. **Example**: ```python def find_improving_students(scores): improving_students = [] for student, grades in scores.items(): if all(earlier < later for earlier, later in zip(grades, grades[1:])): improving_students.append(student) return improving_students scores = { \'Alice\': [85, 87, 90, 92], \'Bob\': [78, 82, 78, 80], \'Charlie\': [65, 70, 75, 80], \'David\': [90, 91, 91, 92] } result = find_improving_students(scores) print(result) ``` **Expected Output**: A list of students with strictly increasing scores. ```python [\'Alice\', \'Charlie\'] ```","solution":"def find_improving_students(scores): Identifies students whose scores are strictly increasing across all subjects. Parameters: scores (dict): A dictionary where keys are student names (strings) and values are lists of integers representing their scores in consecutive subjects. Returns: list: A list of strings representing the names of students whose scores are strictly increasing across all subjects. improving_students = [] for student, grades in scores.items(): if all(earlier < later for earlier, later in zip(grades, grades[1:])): improving_students.append(student) return improving_students"},{"question":"**Problem Statement:** You are provided with a Pandas DataFrame `df_temperature` that contains the daily temperatures (in Celsius) of several cities across a particular region. Each column in the DataFrame represents a different city, and each row represents the temperature of these cities on a specific day. Your task is to create a function named `plot_average_temperature` that generates a plot showing the average daily temperature across all cities with a moving average line to smooth the data. To implement the solution, you should: 1. Calculate the average daily temperature across all cities. 2. Compute the moving average of the average daily temperature using a window size of 7 days. 3. Plot both the average daily temperature and the moving average curve on the same plot. 4. Use appropriate labels and titles in the plot for clarity. **Function Signature:** ```python def plot_average_temperature(df_temperature, window_size=7, title=\\"Average Daily Temperature\\"): :param df_temperature: DataFrame containing daily temperatures (in Celsius) for several cities. :param window_size: Window size for computing the moving average, default is 7. :param title: Title of the plot, default is \\"Average Daily Temperature\\". :returns: None. The function should display the plot directly. ``` **Requirements:** 1. The DataFrame `df_temperature` has daily temperature data for each city in separate columns. 2. Compute the average of all city temperatures for each day (i.e., across rows). 3. Calculate the moving average using the provided window size. 4. Display the plot with the average temperature and its moving average using distinct styles. **Example Usage:** ```python import pandas as pd import numpy as np import matplotlib.pyplot as plt # Sample DataFrame dates = pd.date_range(\'20230101\', periods=10) data = np.random.rand(10, 3) * 15 + 5 # Generating random temperature data df_temperature = pd.DataFrame(data, index=dates, columns=[\'City_A\', \'City_B\', \'City_C\']) # Plotting plot_average_temperature(df_temperature, window_size=3, title=\\"Region\'s Average Daily Temperature\\") ```","solution":"import pandas as pd import matplotlib.pyplot as plt def plot_average_temperature(df_temperature, window_size=7, title=\\"Average Daily Temperature\\"): Plot the average daily temperature across several cities with a moving average line. :param df_temperature: DataFrame containing daily temperatures (in Celsius) for several cities. :param window_size: Window size for computing the moving average, default is 7. :param title: Title of the plot, default is \\"Average Daily Temperature\\". :returns: None. The function should display the plot directly. # Calculate the average daily temperature across all cities. avg_daily_temp = df_temperature.mean(axis=1) # Compute the moving average of the average daily temperature. moving_avg_temp = avg_daily_temp.rolling(window=window_size).mean() # Plot the average daily temperature and the moving average. plt.figure(figsize=(12, 6)) plt.plot(avg_daily_temp, label=\'Average Daily Temperature\', color=\'blue\') plt.plot(moving_avg_temp, label=f\'{window_size}-day Moving Average\', color=\'red\', linestyle=\'--\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (Celsius)\') plt.title(title) plt.legend() plt.grid(True) plt.show()"},{"question":"You are tasked with designing a function that will find the shortest path in a grid, represented as a 2D list of integers, where each cell contains a non-negative integer indicating the cost to enter that cell. The objective is to determine the minimum cost to travel from the top-left corner `(0, 0)` to the bottom-right corner `(n-1, m-1)` of the grid. Movement is allowed only in four directions: up, down, left, or right. Implement the function `min_cost_path(grid)` that returns the minimum cost required to travel from the top-left to the bottom-right corner of the grid. # Function Signature: ```python def min_cost_path(grid: List[List[int]]) -> int: pass ``` # Input: - `grid`: A 2D list of integers where `grid[i][j]` represents the cost to enter the cell at row `i` and column `j`. The dimensions of the grid are at most 100x100. # Output: - Return the minimum cost to travel from the top-left to the bottom-right corner of the grid. # Example Usage: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_cost_path(grid)) # Output: 7 ``` # Explanation: Starting at the top-left corner `(0,0)` with cost `1`, you can move to `(0,1)` with an additional cost of `3`, then to `(1,1)` with additional cost of `5`, and finally to the bottom-right corner `(2,2)` with an additional cost of `1`. The total minimum cost is `1 + 3 + 1 + 1 + 1 = 7`. # Libraries to Use: - `heapq` for priority queue operations to efficiently determine the next cell with the least cost. # Constraints: - It is guaranteed that a path from the top-left to the bottom-right corner always exists. Implement the function with an appropriate algorithm, such as Dijkstra\'s shortest path, to ensure the solution is optimized for performance. Implement the function `min_cost_path` correctly utilizing the given guidelines on the function signature, usage examples, explanation, and constraints.","solution":"import heapq from typing import List def min_cost_path(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) # Initializing the costs array with infinity costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] # Priority queue for Dijkstra\'s algorithm pq = [(grid[0][0], 0, 0)] # Directions for moving in the grid up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while pq: current_cost, x, y = heapq.heappop(pq) # If we reached the bottom-right corner if x == n - 1 and y == m - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return -1 # If there\'s no path which shouldn\'t happen as per problem constraints"},{"question":"In a logistics company, you are required to design a system that tracks packages and their delivery statuses. Your task is to write a function named `track_packages` which assigns and updates the status of packages based on their tracking information. This function will help you practice dictionary manipulation and updating nested structures. **Function Signature:** ```python def track_packages(packages, updates): ``` **Parameters:** - `packages` (dict): A dictionary where each key is a unique package ID (str) and the value is another dictionary containing the package\'s current status and location. The inner dictionary has the following structure: - `\'status\'` (str): Current status of the package (e.g., \'in transit\', \'delivered\', \'lost\'). - `\'location\'` (str): Current location of the package (e.g., \'New York\', \'Los Angeles\'). - `updates` (list of dict): A list of updates where each update is a dictionary containing: - `\'package_id\'` (str): ID of the package to be updated. - `\'new_status\'` (str): New status to be assigned to the package. - `\'new_location\'` (str): New location to be recorded for the package. **Functionality:** 1. Iterate through the list of updates. 2. For each update, check if the `package_id` exists in the `packages` dictionary. 3. If the `package_id` exists, update its status and location in the `packages` dictionary. 4. If the `package_id` does not exist, create a new entry in the `packages` dictionary with the given status and location. 5. Return the updated `packages` dictionary. **Example Usage:** ```python packages = { \'pkg1\': {\'status\': \'in transit\', \'location\': \'New York\'}, \'pkg2\': {\'status\': \'delivered\', \'location\': \'San Francisco\'}, } updates = [ {\'package_id\': \'pkg1\', \'new_status\': \'delivered\', \'new_location\': \'Los Angeles\'}, {\'package_id\': \'pkg3\', \'new_status\': \'in transit\', \'new_location\': \'Chicago\'}, ] # Using the function updated_packages = track_packages(packages, updates) print(updated_packages) # Expected Output: # { # \'pkg1\': {\'status\': \'delivered\', \'location\': \'Los Angeles\'}, # \'pkg2\': {\'status\': \'delivered\', \'location\': \'San Francisco\'}, # \'pkg3\': {\'status\': \'in transit\', \'location\': \'Chicago\'}, # } ``` **Notes:** - Ensure that the function handles updates for both existing and new package IDs. - Make sure the function efficiently updates the dictionary without recreating it each time.","solution":"def track_packages(packages, updates): Update the status and location of packages based on the given tracking updates. Parameters: packages (dict): A dictionary where each key is a unique package ID and the value is another dictionary containing status and location. updates (list of dict): A list of updates where each update contains package_id, new_status, and new_location. Returns: dict: The updated packages dictionary. for update in updates: package_id = update[\'package_id\'] new_status = update[\'new_status\'] new_location = update[\'new_location\'] # Update existing package or add a new package if package_id in packages: packages[package_id][\'status\'] = new_status packages[package_id][\'location\'] = new_location else: packages[package_id] = {\'status\': new_status, \'location\': new_location} return packages"},{"question":"# Context You are building a color mixer application using the color values in the RGB (Red, Green, and Blue) format. The aim is to mix two given colors and come up with a resulting color. This exercise will focus on manipulating tuples to handle color values properly. # Task Write a function `mix_colors(color1, color2)` that takes in two color tuples and produces the resultant color tuple after mixing. The mixing process involves averaging the RGB values of the two input colors. 1. **Input Validation**: - Ensure that each input color is a tuple with exactly three integers representing the RGB values. - Each RGB value should be between 0 and 255 (inclusive). - If any of the conditions are not met, raise a `ValueError` with an appropriate message. 2. **Color Mixing**: - For each of the RGB channels (Red, Green, Blue), calculate the average of the respective values from the two input colors. - The averaged value should be rounded to the nearest integer. 3. **Resultant Color**: - Return a tuple with the three averaged and rounded RGB values representing the resultant color. # Inputs - `color1 (tuple of three ints)`: The first color in RGB format (e.g., (255, 0, 0) for red). - `color2 (tuple of three ints)`: The second color in RGB format (e.g., (0, 0, 255) for blue). # Output A single tuple representing the resultant color after mixing, with averaged and rounded RGB values. # Examples 1. **Example 1**: ``` >>> mix_colors((255, 0, 0), (0, 0, 255)) (128, 0, 128) ``` - Mixing red (255, 0, 0) and blue (0, 0, 255) results in purple (128, 0, 128). 2. **Example 2**: ``` >>> mix_colors((100, 150, 200), (50, 100, 50)) (75, 125, 125) ``` - Mixing the colors (100, 150, 200) and (50, 100, 50) results in (75, 125, 125) after averaging the RGB values.","solution":"def mix_colors(color1, color2): Given two color tuples in RGB format, returns a new color tuple that is the average of the two input colors. :param color1: tuple of three integers (R, G, B) with values from 0 to 255 :param color2: tuple of three integers (R, G, B) with values from 0 to 255 :return: tuple of three integers (R, G, B) which is the averaged color :raises ValueError: if inputs are not valid tuples of RGB values # Input validation if not (isinstance(color1, tuple) and isinstance(color2, tuple)): raise ValueError(\\"Inputs must be tuples.\\") if not (len(color1) == 3 and len(color2) == 3): raise ValueError(\\"Each tuple must contain exactly three elements.\\") if not (all(isinstance(c, int) for c in color1) and all(isinstance(c, int) for c in color2)): raise ValueError(\\"All elements of the tuples must be integers.\\") if not (all(0 <= c <= 255 for c in color1) and all(0 <= c <= 255 for c in color2)): raise ValueError(\\"RGB values must be between 0 and 255, inclusive.\\") # Color mixing mixed_color = tuple(round((c1 + c2) / 2) for c1, c2 in zip(color1, color2)) return mixed_color"},{"question":"Write a Python function named `countSubstringOccurrences` that counts the number of non-overlapping occurrences of a given substring in a string. The function signature should be: ```python def countSubstringOccurrences(s, sub): ``` # Input 1. `s`: A string in which you want to count the occurrences of the substring. 2. `sub`: The substring whose occurrences you want to count in `s`. # Output The function should return an integer representing the number of non-overlapping occurrences of `sub` in `s`. # Example ```python s = \\"abcabcabc\\" sub = \\"abc\\" count = countSubstringOccurrences(s, sub) print(count) # Output: 3 ``` # Constraints - The length of the string `s` will be in the range [0, 10^6]. - The length of the substring `sub` will be in the range [1, 10^5]. - The function should efficiently handle large inputs. # Educational Goal This problem will help you learn to: 1. Efficiently count non-overlapping occurrences of a substring within a string. 2. Handle edge cases, such as an empty string or when the substring is longer than the main string.","solution":"def countSubstringOccurrences(s, sub): This function returns the number of non-overlapping occurrences of a given substring `sub` in the string `s`. count = start = 0 while True: start = s.find(sub, start) if start == -1: break count += 1 start += len(sub) return count"},{"question":"You are given a list of transactions represented as a JSON string. Each transaction includes details such as `transaction_id`, `amount`, `currency`, `user_id`, and `timestamp`. Your task is to write a function named `process_transactions` which takes this JSON string as input and returns a pandas DataFrame summarizing the transactions. The DataFrame should provide a summary of transactions for each user with the following columns: - `user_id`: The unique identifier for each user. - `total_amount`: The total transaction amount for each user, converted to the same currency (`USD`). Assume the input JSON string contains a conversion_rates dictionary for this purpose: ```json \\"conversion_rates\\": { \\"EUR\\": 1.1, \\"GBP\\": 1.3, \\"USD\\": 1.0 } ``` - `transaction_count`: The number of transactions made by each user. You\'ll need to deserialize the JSON string using the `json.loads` function and process it accordingly. Use the pandas library to create and manipulate the DataFrame. Here is an example input JSON string: ```json { \\"transactions\\": [ {\\"transaction_id\\": \\"t1\\", \\"amount\\": 100, \\"currency\\": \\"USD\\", \\"user_id\\": \\"u1\\", \\"timestamp\\": \\"2023-01-01T12:00:00Z\\"}, {\\"transaction_id\\": \\"t2\\", \\"amount\\": 200, \\"currency\\": \\"EUR\\", \\"user_id\\": \\"u1\\", \\"timestamp\\": \\"2023-01-02T12:00:00Z\\"}, {\\"transaction_id\\": \\"t3\\", \\"amount\\": 150, \\"currency\\": \\"GBP\\", \\"user_id\\": \\"u2\\", \\"timestamp\\": \\"2023-01-03T12:00:00Z\\"}, {\\"transaction_id\\": \\"t4\\", \\"amount\\": 50, \\"currency\\": \\"USD\\", \\"user_id\\": \\"u2\\", \\"timestamp\\": \\"2023-01-04T12:00:00Z\\"} ], \\"conversion_rates\\": { \\"EUR\\": 1.1, \\"GBP\\": 1.3, \\"USD\\": 1.0 } } ``` **Function Signature:** ```python def process_transactions(json_string: str) -> pd.DataFrame: pass ``` **Requirements:** - Use the `json.loads` function to deserialize the input JSON string. - Use the pandas library to manage the DataFrame. - Ensure all amounts are converted to USD using the provided conversion rates before summarizing. - Summarize the transactions by user.","solution":"import json import pandas as pd def process_transactions(json_string: str) -> pd.DataFrame: # Deserialize the JSON string into a dictionary data = json.loads(json_string) # Extract transactions and conversion rates transactions = data[\'transactions\'] conversion_rates = data[\'conversion_rates\'] # Convert transactions to DataFrame df = pd.DataFrame(transactions) # Convert all amounts to USD df[\'usd_amount\'] = df.apply(lambda row: row[\'amount\'] / conversion_rates[row[\'currency\']], axis=1) # Group by user_id and summarize summary_df = df.groupby(\'user_id\').agg( total_amount=(\'usd_amount\', \'sum\'), transaction_count=(\'transaction_id\', \'count\') ).reset_index() return summary_df"},{"question":"You work at a software company that needs to analyze a list of projects completed by different employees. Each project is represented as a dictionary containing the project name, an employee\'s name, and the hours spent on the project. Your task is to write a function that takes a list of such project dictionaries and calculates the total number of hours each employee has logged across all projects. The function should return a dictionary where the keys are employee names and the values are their respective total hours. Function Name: `calculate_total_hours` - **Input**: A list of dictionaries where each dictionary contains: - \'project\': A string representing the project\'s name. - \'employee\': A string representing the employee\'s name. - \'hours\': An integer representing the hours spent on the project. - **Output**: A dictionary where the keys are employee names and the values are the total hours they have logged. Here is an example to illustrate the functionality: **Example Use Case:** ```python projects = [ {\'project\': \'Website Redesign\', \'employee\': \'Alice\', \'hours\': 5}, {\'project\': \'Database Optimization\', \'employee\': \'Alice\', \'hours\': 3}, {\'project\': \'API Development\', \'employee\': \'Bob\', \'hours\': 7}, {\'project\': \'UI Improvements\', \'employee\': \'Alice\', \'hours\': 2}, {\'project\': \'Cyber Security\', \'employee\': \'Bob\', \'hours\': 4} ] calculate_total_hours(projects) ``` **Output:** ```python { \'Alice\': 10, \'Bob\': 11 } ``` Use the following approach to solve the problem: 1. Initialize an empty dictionary to keep track of the total hours per employee. 2. Iterate through the list of projects. 3. For each project, update the corresponding employee\'s total hours in the dictionary. 4. Return the resulting dictionary.","solution":"def calculate_total_hours(projects): total_hours = {} for project in projects: employee = project[\'employee\'] hours = project[\'hours\'] if employee in total_hours: total_hours[employee] += hours else: total_hours[employee] = hours return total_hours"},{"question":"You need to implement a function that simulates a simplified version of the classic game \\"Snake\\", where the goal is for the snake to move on a grid and grow in length when it \\"eats\\" a piece of food. 1. **Function Name**: `play_snake` 2. **Input Parameters**: - `n`: An integer representing the size of the grid (n x n). - `moves`: A list of strings where each string is either \\"up\\", \\"down\\", \\"left\\", or \\"right\\", representing the direction in which the snake moves. - `food`: A list of tuples, each representing the row and column position of food in the grid (row, col). 3. **Behavior**: - The function should start with the snake\'s initial position at the top-left corner of the grid (0, 0). - The snake has an initial length of 1. - For each move in `moves`, the snake should move one step in the specified direction. - If the snake eats a piece of food (moves to the same position as a piece of food), the snake\'s length increases by 1, and that piece of food is consumed (i.e., removed from the list of available food). - The function should return the final length of the snake after all moves have been executed. **Constraints**: - The snake cannot move outside the bounds of the grid. - If a move would cause the snake to move outside the grid, ignore that move and the snake remains in its current position. - Assume no two pieces of food are placed in the same grid position. **Example Usage**: ```python play_snake(5, [\'right\', \'down\', \'down\', \'left\', \'up\'], [(1, 0), (2, 2), (3, 0)]) ``` This call should simulate the snake moving on a 5x5 grid with the specified moves and food positions, and return the final length of the snake after all moves have been processed.","solution":"def play_snake(n, moves, food): Simulate a simplified version of the Snake game. Parameters: n (int): The size of the grid (n x n). moves (list): A list of moves (\'up\', \'down\', \'left\', \'right\'). food (list): A list of tuples representing positions of food (row, col). Returns: int: The final length of the snake. # Initial position of the snake head row, col = 0, 0 snake_length = 1 # Converting list of food positions to a set for O(1) lookups food_set = set(food) # Dictionary to map moves to coordinate changes directions = { \'up\': (-1, 0), \'down\': (1, 0), \'left\': (0, -1), \'right\': (0, 1) } for move in moves: if move in directions: # Calculate the new position of the snake head new_row = row + directions[move][0] new_col = col + directions[move][1] # Check if the new position is within the grid boundaries if 0 <= new_row < n and 0 <= new_col < n: row, col = new_row, new_col # Check if we\'ve found food if (row, col) in food_set: snake_length += 1 food_set.remove((row, col)) return snake_length"},{"question":"You are tasked with writing a Python function named `reverse_words` which takes the name of a text file as input. The function should read the contents of the file and for each line, it should reverse the order of the words while maintaining the words themselves in their original form. The result should be written back to the same file. You are not allowed to use additional temporary files or strings to store the entire file content. Instead, read and write each line one by one. The approach should follow these steps: 1. Open the file for reading and another temporary file for writing. 2. Read each line from the original file. 3. Split the line into words, reverse the order of words, and join them back into a line. 4. Write the reversed line into the temporary file. 5. Close both files. 6. Replace the original file with the temporary file using `os.replace`. Here are the specific API functions from the `os` module that must be used: - `os.remove`: This function removes (deletes) a file. - `os.replace`: This function atomically replaces a specified destination with a source file. The function signature you need to implement is: ```python def reverse_words(filename: str) -> None: # Your code goes here ```","solution":"import os def reverse_words(filename: str) -> None: temp_filename = filename + \'.tmp\' with open(filename, \'r\') as file, open(temp_filename, \'w\') as temp_file: for line in file: words = line.strip().split() reversed_line = \' \'.join(reversed(words)) temp_file.write(reversed_line + \'n\') os.replace(temp_filename, filename)"},{"question":"In this problem, you will create a function named `most_occuring_word` that reads a specified text file and returns the word that appears most frequently in the file. In the case of a tie, return all words that have the highest frequency, sorted lexicographically. The function should adhere to the following specifications: **Function Signature:** ```python def most_occuring_word(filepath: str) -> list: ``` **Input:** - `filepath` (string): The path to the file containing the text. **Output:** - A list of strings containing the most frequently occurring word(s) in the file, sorted lexicographically in case of a tie. **Libraries to Use:** - `io` for file operations. - `collections` for counting word occurrences. **Task:** 1. Read the content of the file specified by `filepath`. 2. Split the content into words based on whitespace and punctuation, converting all words to lowercase for uniformity. 3. Calculate the frequency of each word in the text. 4. Determine the word(s) with the highest frequency. 5. Return the word(s) sorted in lexicographical order if there is a tie. **Example Usage:** ```python words = most_occuring_word(\'path/to/textfile.txt\') print(words) ``` **Constraints:** - The function should ignore case while counting words (e.g., \\"The\\" and \\"the\\" should be considered the same word). - Handle punctuation appropriately to ensure words are counted correctly. - The function should handle large texts efficiently. Here is a snippet of how your function might be used: ```python import re from collections import Counter def most_occuring_word(filepath: str) -> list: # Your implementation here # Example call words = most_occuring_word(\\"sample.txt\\") print(words) ```","solution":"import re from collections import Counter def most_occuring_word(filepath: str) -> list: with open(filepath, \'r\') as file: content = file.read().lower() # Use regex to find words only words = re.findall(r\'bw+b\', content) word_counts = Counter(words) if not word_counts: return [] max_count = max(word_counts.values()) most_common_words = [word for word, count in word_counts.items() if count == max_count] return sorted(most_common_words)"},{"question":"You are required to write a function that takes a list of strings and an integer `n` as input, and returns a new list where each string from the original list is repeated `n` times. The function should be named `repeat_strings`. The function must follow these steps: 1. Iterate through each string in the input list. 2. Repeat each string `n` times. 3. Collect the repeated strings into a new list. 4. Return the new list of repeated strings. Parameters: - `strings` (List[str]): A list of strings to be processed. - `n` (int): The number of times each string should be repeated. An example usage of the function would be: ```python input_strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] repeated_strings = repeat_strings(input_strings, 3) print(repeated_strings) # should output [\\"appleappleapple\\", \\"bananabananabanana\\", \\"cherrycherrycherry\\"] ```","solution":"def repeat_strings(strings, n): Returns a new list where each string in the input list is repeated `n` times. Parameters: strings (List[str]): A list of strings to be processed. n (int): The number of times each string should be repeated. Returns: List[str]: A new list of strings with each string repeated `n` times. return [s * n for s in strings]"},{"question":"You are required to implement a function named `normalize_vector` that normalizes a given vector. Normalization in this context means scaling the vector so that its magnitude (Euclidean norm) is 1 while preserving its direction. The Euclidean norm (or magnitude) of a vector `v` is defined as: [ |v| = sqrt{sum_{i=1}^{n} v_i^2} ] The normalized vector `u` is obtained by dividing each element of `v` by the magnitude ( |v| ): [ u = frac{v}{|v|} ] Your task is to implement the `normalize_vector(v)` function using the numpy library: ```python def normalize_vector(v): norm = np.linalg.norm(v) # Compute the Euclidean norm of the vector if norm == 0: return v return v / norm ``` # Input - `v`: A 1D numpy array representing the vector to be normalized. # Output - The function should return a 1D numpy array that is the normalized version of the input vector. # Requirements - Explicitly use `numpy.linalg.norm` to compute the Euclidean norm of the vector. - Handle the edge case where the input vector is a zero vector (all elements are zeros) by returning the original vector. # Example ```python import numpy as np # Example inputs v1 = np.array([1, 2, 2]) v2 = np.array([0, 0, 0]) # Call the function normalized_v1 = normalize_vector(v1) print(normalized_v1) # Expected output: [0.33333333 0.66666667 0.66666667] normalized_v2 = normalize_vector(v2) print(normalized_v2) # Expected output: [0. 0. 0.] ``` Make sure to test your function with different input vectors to ensure its correctness. For instance, try with vectors containing negative values, zeros, and very large values.","solution":"import numpy as np def normalize_vector(v): norm = np.linalg.norm(v) if norm == 0: return v return v / norm"},{"question":"You have been given a task to process a set of user-generated posts and extract key information from them using Python. The goal is to create a function named `extract_hashtags_and_mentions` that processes a list of strings (posts) and extracts hashtags and mentions separately for each post. The function should return a dictionary where each key is the index of the post, and the value is another dictionary with two keys: `hashtags` and `mentions`, holding lists of hashtags and mentions found in the post, respectively. The function signature should be: ```python def extract_hashtags_and_mentions(posts): pass ``` # Parameters - `posts` (list of str): List of user-generated posts (strings). # Requirements 1. Each hashtag in a post starts with the `#` symbol followed by alphanumeric characters and underscores. 2. Each mention in a post starts with the `@` symbol followed by alphanumeric characters and underscores. 3. Use regular expressions to identify and extract hashtags and mentions. 4. Ensure that hashtags and mentions are case-sensitive. 5. Any hashtag or mention must be part of a word, and should not include any punctuation directly adjacent to the `#` or `@` symbols. # Example For example, calling the function with the following input: ```python posts = [ \\"Loving the new features in the #Python3.8 update! Thanks @guido\\", \\"Exploring #DataScience with @data_guru in NYC. #BigData\\", \\"Just attended a great session on #MachineLearning hosted by @ai_leader! #AI\\" ] ``` Should return: ```python { 0: {\'hashtags\': [\'#Python3\'], \'mentions\': [\'@guido\']}, 1: {\'hashtags\': [\'#DataScience\', \'#BigData\'], \'mentions\': [\'@data_guru\']}, 2: {\'hashtags\': [\'#MachineLearning\', \'#AI\'], \'mentions\': [\'@ai_leader\']} } ``` # Expected Functionality The function should go through each post, extract the hashtags and mentions using regular expressions, and store them in a dictionary with the required structure. Make sure to follow best coding practices by writing clean, readable, and well-documented code.","solution":"import re def extract_hashtags_and_mentions(posts): result = {} hashtag_pattern = re.compile(r\'#w+\') mention_pattern = re.compile(r\'@w+\') for index, post in enumerate(posts): hashtags = hashtag_pattern.findall(post) mentions = mention_pattern.findall(post) result[index] = { \'hashtags\': hashtags, \'mentions\': mentions } return result"},{"question":"Implement a function that takes a string representing a date in the format \'YYYY-MM-DD\' and returns the day of the week for that date. Use Python\'s `datetime` module to achieve this. The function should handle leap years and ensure error-free operation for any valid date input. The function should output: str: The day of the week for the provided date (e.g., \'Monday\'). You should write self-contained code starting with: ``` import datetime def get_day_of_week(date_str): ```","solution":"import datetime def get_day_of_week(date_str): Returns the day of the week for the given date string in \'YYYY-MM-DD\' format. Args: date_str (str): The date in \'YYYY-MM-DD\' format. Returns: str: The day of the week (e.g., \'Monday\'). date_obj = datetime.datetime.strptime(date_str, \'%Y-%m-%d\') return date_obj.strftime(\'%A\')"},{"question":"You are tasked with implementing a function that performs K-Means clustering on a dataset and evaluates the clustering performance using silhouette score. The function will preprocess the input data, perform K-Means clustering, and calculate the silhouette score to measure the quality of the clustering. The function `performKMeansClustering` should accomplish the following steps: 1. Normalize the input data. 2. Perform K-Means clustering on the normalized data. 3. Calculate and print the silhouette score for the clustering result. **Function Signature:** ```python def performKMeansClustering(data, n_clusters): # Your code here ``` **Parameters:** - `data`: A 2D list or numpy array containing the feature data. - `n_clusters`: An integer specifying the number of clusters to form. **Return Value:** - The function should not return any value. Instead, it should print the silhouette score of the clustering result. **Requirements:** 1. Use `StandardScaler` from `sklearn.preprocessing` to normalize the data. 2. Use `KMeans` from `sklearn.cluster` to perform K-Means clustering. 3. Use `silhouette_score` from `sklearn.metrics` to calculate the silhouette score. 4. The function should handle exceptions gracefully and print appropriate error messages. Example Usage: ```python data = [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]] n_clusters = 2 performKMeansClustering(data, n_clusters) # Expected to print the silhouette score for n_clusters=2 ```","solution":"from sklearn.preprocessing import StandardScaler from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score import numpy as np def performKMeansClustering(data, n_clusters): try: # Convert data to numpy array if it\'s not already if not isinstance(data, np.ndarray): data = np.array(data) # Normalize the data scaler = StandardScaler() normalized_data = scaler.fit_transform(data) # Perform K-Means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=42) cluster_labels = kmeans.fit_predict(normalized_data) # Calculate the silhouette score score = silhouette_score(normalized_data, cluster_labels) # Print the silhouette score print(f\'Silhouette Score: {score}\') except Exception as e: print(f\'An error occurred: {e}\')"},{"question":"In this task, you will work with Python\'s datetime module to manipulate and format date objects. This will help you better understand how dates and times can be handled in Python. You are required to write a function named `date_manipulation`, which will construct various date objects and format them as specified. Specifically, this function should perform the following tasks: 1. Create a date object for the current date using `datetime.now()` of the `datetime` module. 2. Format this date into a string of the format \\"YYYY-MM-DD\\" and print it. 3. Calculate the date exactly 30 days from this current date and print it in the format \\"MM/DD/YYYY\\". 4. Determine the day of the week (e.g., Monday, Tuesday) for the date 30 days from the current date and print it. Here are the requirements: 1. Use the `datetime` module to create and manipulate date objects. 2. Use appropriate formatting to meet the specified output formats. 3. Ensure your function exhibits clear and readable output for each step. The function signature should look as follows: ```python def date_manipulation(): pass ```","solution":"from datetime import datetime, timedelta def date_manipulation(): # Task 1: Create a date object for the current date current_date = datetime.now() # Task 2: Format this date into a string of the format \\"YYYY-MM-DD\\" and return it formatted_current_date = current_date.strftime(\\"%Y-%m-%d\\") # Task 3: Calculate the date exactly 30 days from this current date and format it as \\"MM/DD/YYYY\\" future_date = current_date + timedelta(days=30) formatted_future_date = future_date.strftime(\\"%m/%d/%Y\\") # Task 4: Determine the day of the week for the date 30 days from the current date and return it day_of_week = future_date.strftime(\\"%A\\") return formatted_current_date, formatted_future_date, day_of_week"},{"question":"You are required to implement a function that reads temperature data from a file and plots a line graph to visualize the change in temperature over time. This task will help you practice file handling and data visualization using the `matplotlib` library. Create a function named `plot_temperature_changes` that takes the following parameters: - `filename`: A string representing the name of the file containing the temperature data. - `color`: A string representing the color of the line in the graph (default is \\"blue\\"). - `figsize`: A tuple of two floats indicating the width and height of the figure in inches (default is `(12, 8)`). The file will have the following format: - Each line contains a date and a temperature separated by a comma. - Example: ``` 2023-01-01,5 2023-01-02,7 2023-01-03,4 ``` The line graph should have: - Dates on the x-axis. - Temperature on the y-axis. - A title \\"Temperature Changes Over Time\\". - An x-axis label \\"Date\\". - A y-axis label \\"Temperature (°C)\\". You should use the `matplotlib.pyplot.figure` function to create the figure and `matplotlib.pyplot.show` to display it. Use the following documentation excerpts for these functions as a guide: - `matplotlib.pyplot.figure`: Create a new figure or activate an existing one. - `matplotlib.pyplot.show`: Display all open figures.","solution":"import matplotlib.pyplot as plt def plot_temperature_changes(filename, color=\'blue\', figsize=(12, 8)): dates = [] temperatures = [] # Read the file and process each line with open(filename, \'r\') as file: for line in file: date, temp = line.strip().split(\',\') dates.append(date) temperatures.append(float(temp)) # Plot the temperature changes plt.figure(figsize=figsize) plt.plot(dates, temperatures, color=color) plt.title(\'Temperature Changes Over Time\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (°C)\') plt.grid(True) plt.xticks(rotation=45) plt.tight_layout() plt.show()"},{"question":"Create a function to simulate and plot the movement track of a robot within a 10x10 grid for a specified number of steps. The robot starts at the center of the grid (5,5) and moves in random directions (up, down, left, or right) at each step. Ensure that the robot does not move outside the grid boundaries. The plot should trace the path taken by the robot over the course of the movements. The function should output: pandas.DataFrame: A DataFrame containing the x and y coordinates of the robot\'s position at each step. matplotlib.figure.Figure: A figure object showing the movement track of the robot on the grid. You should write self-contained code starting with: ``` import pandas as pd import random import matplotlib.pyplot as plt def task_func(num_steps, random_seed=0): ```","solution":"import pandas as pd import random import matplotlib.pyplot as plt def task_func(num_steps, random_seed=0): Simulate and plot the movement track of a robot within a 10x10 grid for a specified number of steps. Parameters: - num_steps (int): The number of steps for the robot to take. - random_seed (int): The seed value for random number generation to ensure reproducibility (default is 0). Returns: - pd.DataFrame: A DataFrame containing the x and y coordinates of the robot\'s position at each step. - matplotlib.figure.Figure: A figure object showing the movement track of the robot on the grid. # Define the boundaries of the grid grid_size = 10 center = grid_size // 2 # Initialize the starting position x, y = center, center # Set the random seed for reproducibility random.seed(random_seed) # List to store the coordinates positions = [(x, y)] # Define possible movements (up, down, left, right) movements = {\'up\': (0, 1), \'down\': (0, -1), \'left\': (-1, 0), \'right\': (1, 0)} # Simulate the movements for _ in range(num_steps): direction = random.choice(list(movements.keys())) dx, dy = movements[direction] # Calculate new position new_x = x + dx new_y = y + dy # Ensure the robot stays within the boundaries of the grid new_x = max(0, min(new_x, grid_size - 1)) new_y = max(0, min(new_y, grid_size - 1)) # Update position x, y = new_x, new_y positions.append((x, y)) # Create a DataFrame from the positions df = pd.DataFrame(positions, columns=[\'x\', \'y\']) # Plot the movement track fig, ax = plt.subplots() ax.grid(True) ax.set_xlim([-0.5, grid_size - 0.5]) ax.set_ylim([-0.5, grid_size - 0.5]) ax.set_xticks(range(grid_size)) ax.set_yticks(range(grid_size)) ax.plot(df[\'x\'], df[\'y\'], marker=\'o\') ax.plot(df[\'x\'], df[\'y\'], linestyle=\'-\', marker=\'o\') # Mark the start position ax.plot(df[\'x\'].iloc[0], df[\'y\'].iloc[0], \'go\') # start # Mark the end position ax.plot(df[\'x\'].iloc[-1], df[\'y\'].iloc[-1], \'ro\') # end return df, fig"},{"question":"Implement a function `spiral_order` that takes a 2D list (matrix) and returns a list of its elements in spiral order. The function should traverse the matrix in a spiral (clockwise) direction starting from the element in the top-left corner, continuing to the right, then down, then left, and finally up, repeating this pattern until all elements have been added to the result list. **Function Signature:** ```python def spiral_order(matrix: List[List[int]]) -> List[int]: ... ``` **Requirements:** 1. You should handle matrices of variable sizes, including non-square matrices. 2. If the input matrix is empty, return an empty list. 3. Ensure that the function correctly handles edge cases like single row or single column matrices. **Example:** ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(spiral_order(matrix1)) # Output should be: [1, 2, 3, 6, 9, 8, 7, 4, 5] matrix2 = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] print(spiral_order(matrix2)) # Output should be: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ``` **Notes:** 1. The input list `matrix` should not be modified. 2. Use index manipulation to traverse through the matrix elements in spiral order. 3. The function should be efficient in terms of both time and space complexity. By implementing `spiral_order`, you will gain a better understanding of matrix manipulation and traversal techniques which are commonly used in various algorithmic problems.","solution":"from typing import List def spiral_order(matrix: List[List[int]]) -> List[int]: if not matrix or not matrix[0]: return [] result = [] rows = len(matrix) columns = len(matrix[0]) left = 0 right = columns - 1 top = 0 bottom = rows - 1 while left <= right and top <= bottom: # Traverse from left to right along the top row for col in range(left, right + 1): result.append(matrix[top][col]) top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): result.append(matrix[row][right]) right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for col in range(right, left - 1, -1): result.append(matrix[bottom][col]) bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for row in range(bottom, top - 1, -1): result.append(matrix[row][left]) left += 1 return result"},{"question":"Write a function that takes a list of integers as input and returns a dictionary where the keys are the integers from the input list, and the values are the number of times each integer occurs in the list. Additionally, find the integer that occurs the maximum number of times and include it in the output dictionary with the key \'max_occurrence\'. If there is a tie, return any one of the integers with the maximum occurrence. The function should output a dictionary. You should write self-contained code starting with: ``` def count_occurrences_and_max(nums): ```","solution":"def count_occurrences_and_max(nums): Returns a dictionary with the count of each integer in the input list and the integer with the maximum occurrences. if not nums: return {\'max_occurrence\': None} occurrence_dict = {} for num in nums: if num in occurrence_dict: occurrence_dict[num] += 1 else: occurrence_dict[num] = 1 max_occurrence = max(occurrence_dict, key=occurrence_dict.get) occurrence_dict[\'max_occurrence\'] = max_occurrence return occurrence_dict"},{"question":"You are required to write a Python function named `word_frequency_analyzer` that reads a text file and computes the frequency of each word in the file. Use the `Counter` class from the `collections` module to achieve this. The function should: 1. Read the content of the given text file. 2. Use regular expressions (`re` module) to split the text into words. 3. Convert all words to lowercase to ensure case-insensitivity. 4. Compute the frequency of each word using `Counter` from the `collections` module. 5. Print the 5 most common words along with their frequencies. Specifically, the function should: 1. **Read the file content**: - The function should take the file path as an input argument. - Open and read the content of the file. 2. **Process the text**: - Use `re.findall(r\'bw+b\', text)` to split the text into words. - Convert each word to lowercase. 3. **Compute word frequencies**: - Utilize `Counter` from the `collections` module to compute word frequencies. - Print out the 5 most common words and their frequencies. Requirements: - You must use `re` to split the text into words. - You must use `Counter` to tally word frequencies. - Handle the case when the file does not exist or cannot be read. Example usage: ```python word_frequency_analyzer(\'sample_text.txt\') ``` Example output: ``` Word: \'the\' Frequency: 50 Word: \'and\' Frequency: 45 Word: \'to\' Frequency: 30 Word: \'of\' Frequency: 25 Word: \'a\' Frequency: 20 ``` Make sure the function handles file errors gracefully and prints an appropriate message if the file cannot be read.","solution":"import re from collections import Counter def word_frequency_analyzer(file_path): Analyzes the word frequency in a given text file and prints the 5 most common words. try: # Read the file content with open(file_path, \'r\') as file: text = file.read() # Process the text to extract words and convert them to lowercase words = re.findall(r\'bw+b\', text.lower()) # Compute word frequencies word_counts = Counter(words) # Print the 5 most common words with their frequencies for word, freq in word_counts.most_common(5): print(f\\"Word: \'{word}\' Frequency: {freq}\\") except FileNotFoundError: print(f\\"Error: The file {file_path} does not exist.\\") except IOError: print(f\\"Error: An I/O error occurred while reading the file {file_path}.\\")"},{"question":"You are tasked with creating a function called `custom_sort` that takes in a list of dictionaries and sorts it based on a specific key. Each dictionary in the list represents a student with two keys: \\"name\\" and \\"score\\". The function should accept two arguments: the list of dictionaries and the key by which to sort (\\"name\\" or \\"score\\"). Your function should: 1. Sort the list of dictionaries either alphabetically by \\"name\\" or numerically by \\"score\\". 2. Return the sorted list. For example: ```python students = [ {\\"name\\": \\"Alice\\", \\"score\\": 88}, {\\"name\\": \\"Bob\\", \\"score\\": 95}, {\\"name\\": \\"Charlie\\", \\"score\\": 70} ] print(custom_sort(students, \\"name\\")) # Output: [{\'name\': \'Alice\', \'score\': 88}, {\'name\': \'Bob\', \'score\': 95}, {\'name\': \'Charlie\', \'score\': 70}] print(custom_sort(students, \\"score\\")) # Output: [{\'name\': \'Charlie\', \'score\': 70}, {\'name\': \'Alice\', \'score\': 88}, {\'name\': \'Bob\', \'score\': 95}] ``` Here\'s the function signature you should use: ```python def custom_sort(students, key): pass ```","solution":"def custom_sort(students, key): Sorts a list of dictionaries based on a specific key. Parameters: students (list): A list of dictionaries, each containing \'name\' and \'score\' keys. key (str): The key by which to sort the list of dictionaries (\'name\' or \'score\'). Returns: list: The sorted list of dictionaries. if key not in [\'name\', \'score\']: raise ValueError(\\"Key must be either \'name\' or \'score\'\\") return sorted(students, key=lambda x: x[key])"},{"question":"You are given a list of integers representing the heights of buildings along a street. Each building is one unit wide. Your task is to calculate how much rainwater can be trapped between the buildings after a rainstorm. Implement a function `calculate_trapped_water(heights: List[int]) -> int` to solve this problem. The water trapped between two buildings is determined by the heights of those buildings and the heights of any buildings between them. The water level at each point is the minimum of the maximum heights to the left and right of that point, minus the height at that point, provided the value is non-negative. # Example ```python # Heights of buildings heights = [3, 0, 2, 0, 4] # Visual representation: # __ # __ | | # | | | | __ # | | | | | | # | |__| |_| | # |__|__|__|__|__| # Water trapped: # __ # __ | | # | |~~|~~| __ # | |~~|~~| | | # | |__|~~|_| | # |__|__|__|__|__| # Water trapped = 7 units assert calculate_trapped_water(heights) == 7 ``` # Requirements * Implement the function `calculate_trapped_water` in Python. * The function should have a time complexity of O(n) and a space complexity of O(1) (excluding the input list). # Function Signature ```python from typing import List def calculate_trapped_water(heights: List[int]) -> int: Args: heights: A list of integers representing the heights of the buildings. Returns: int: The total amount of trapped rainwater in units. # Your implementation goes here. ```","solution":"from typing import List def calculate_trapped_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = 0 right_max = 0 left = 0 right = n - 1 trapped_water = 0 while left <= right: if heights[left] <= heights[right]: if heights[left] >= left_max: left_max = heights[left] else: trapped_water += left_max - heights[left] left += 1 else: if heights[right] >= right_max: right_max = heights[right] else: trapped_water += right_max - heights[right] right -= 1 return trapped_water"},{"question":"In this problem, you are tasked with creating a function `convert_to_fahrenheit` that reads a CSV file containing temperature readings in Celsius and converts them to Fahrenheit. The goal is to read the data using the `pandas.read_csv` function, perform the conversion, and save the result in a new CSV file. Your task is to create a function with the following signature: ```python def convert_to_fahrenheit(csv_file: str, output_csv: str, col_name: str = \'Temperature\'): ... ``` Parameters: - **csv_file**: The name of the CSV file from which to read the data. - **output_csv**: The name of the CSV file where the converted data will be saved. - **col_name**: The name of the column containing temperature readings in Celsius. Default is `\'Temperature\'`. Steps to Follow: 1. **Read the CSV File**: Use `pandas.read_csv` to read the CSV file into a DataFrame. 2. **Convert Temperatures**: Write a function that converts Celsius to Fahrenheit using the formula `F = C * 9/5 + 32`. 3. **Apply Conversion**: Apply the function to the specified column in the DataFrame. 4. **Save the Data**: Save the DataFrame with the new Fahrenheit values to a new CSV file using `pandas.to_csv`. Requirements: - Use the `pandas.read_csv` function to read the CSV file. - Use the `pandas.to_csv` function to save the new CSV file. - Ensure the function appropriately handles missing or non-existent columns by raising a meaningful error. Here is an example CSV file named `temperatures.csv`: ```plaintext Date,Temperature,Location 2023-01-01,20,New York 2023-01-02,18,Los Angeles 2023-01-03,25,Chicago ... ``` # Example Usage: ```python convert_to_fahrenheit(\'temperatures.csv\', \'temperatures_fahrenheit.csv\') ``` This call should read the `Temperature` column from `temperatures.csv`, convert its values to Fahrenheit, and save the result in `temperatures_fahrenheit.csv`. # Constraints: - Ensure you handle cases where the CSV file or the specified column do not exist. - The function should retain all original columns and only modify the specified column with converted values. You are required to implement the `convert_to_fahrenheit` function as described above.","solution":"import pandas as pd def celsius_to_fahrenheit(celsius): Convert Celsius to Fahrenheit. Parameters: celsius (float): Temperature in Celsius. Returns: float: Temperature in Fahrenheit. return celsius * 9/5 + 32 def convert_to_fahrenheit(csv_file: str, output_csv: str, col_name: str = \'Temperature\'): Convert temperatures from Celsius to Fahrenheit in a CSV file and save the result to a new CSV file. Parameters: csv_file (str): The name of the CSV file from which to read the data. output_csv (str): The name of the CSV file where the converted data will be saved. col_name (str): The name of the column containing temperature readings in Celsius. Default is \'Temperature\'. try: # Read the CSV file into a DataFrame df = pd.read_csv(csv_file) # Check if the specified column exists in the DataFrame if col_name not in df.columns: raise ValueError(f\\"Column \'{col_name}\' does not exist in the input CSV file.\\") # Convert the specified column from Celsius to Fahrenheit df[col_name] = df[col_name].apply(celsius_to_fahrenheit) # Save the updated DataFrame to a new CSV file df.to_csv(output_csv, index=False) except FileNotFoundError: raise FileNotFoundError(f\\"The file \'{csv_file}\' does not exist.\\") except pd.errors.EmptyDataError: raise ValueError(\\"The CSV file is empty.\\")"},{"question":"In this exercise, you will create a function that interacts with a file containing a list of user profiles. Each user profile contains essential information about different users in JSON format. The goal is to filter user profiles based on a specific criterion and return the filtered results. # Function Specification - **Function Name**: `filter_user_profiles` - **Parameters**: `filename` (string representing the name of the file containing user profiles), `age_threshold` (integer representing the age to filter the user profiles) # Steps 1. **Load User Profiles**: Read the JSON file which contains a list of user profiles. Each profile includes the user\'s `name`, `age`, `email`, and `address`. 2. **Filter Profiles**: Filter out the user profiles where the user\'s age is greater than `age_threshold`. 3. **Return Filtered Profiles**: Return the list of filtered user profiles. # Input The function will take the following inputs: - `filename` (str): The name of the JSON file containing user profiles. - `age_threshold` (int): The age threshold value for filtering user profiles. # Output The function should return a list of dictionaries, where each dictionary corresponds to a user profile that matches the filtering criteria. # Requirements - You must use the `json` library to read and parse the JSON file. # Example Assume the file `profiles.json` contains the following data: ```json [ { \\"name\\": \\"Alice\\", \\"age\\": 30, \\"email\\": \\"alice@example.com\\", \\"address\\": \\"123 Maple Street\\" }, { \\"name\\": \\"Bob\\", \\"age\\": 25, \\"email\\": \\"bob@example.com\\", \\"address\\": \\"456 Elm Street\\" }, { \\"name\\": \\"Charlie\\", \\"age\\": 35, \\"email\\": \\"charlie@example.com\\", \\"address\\": \\"789 Oak Street\\" } ] ``` If the `age_threshold` input is `28`, the function should return: ```python [ { \\"name\\": \\"Alice\\", \\"age\\": 30, \\"email\\": \\"alice@example.com\\", \\"address\\": \\"123 Maple Street\\" }, { \\"name\\": \\"Charlie\\", \\"age\\": 35, \\"email\\": \\"charlie@example.com\\", \\"address\\": \\"789 Oak Street\\" } ] ```","solution":"import json def filter_user_profiles(filename, age_threshold): Reads a JSON file containing user profiles, filters out the profiles where the user\'s age is greater than the specified age_threshold, and returns the filtered user profiles. Parameters: filename (str): The name of the file containing user profiles in JSON format. age_threshold (int): The age threshold for filtering user profiles. Returns: list: A list of dictionaries representing the filtered user profiles. # Read the JSON file with open(filename, \'r\') as file: profiles = json.load(file) # Filter profiles based on age_threshold filtered_profiles = [profile for profile in profiles if profile[\'age\'] > age_threshold] return filtered_profiles"},{"question":"** You are required to implement a function called `sort_file_directory` that sorts files in a given directory according to their file extensions. The function should organize the files by moving them into folders named after their respective extensions. Here\'s how to proceed: 1. Write a function `sort_file_directory(directory: str) -> None`. 2. Inside this function, check if the directory specified by the `directory` parameter exists. 3. If the directory exists: - Scan the directory for all files. - For each file, determine its extension. - Create a new folder named after the extension (if it does not already exist). - Move the file into the corresponding folder. - Print a message listing the files organized under each extension. 4. If the directory does not exist, print \\"Directory does not exist\\". You need to use the following library functions: - `os.listdir(path)` to get a list of files in the directory. - `os.path.isfile(path)` to check if an item is a file. - `os.path.splitext(filename)` to split a file name into the base name and the extension. - `os.mkdir(path)` to create a new folder. - `shutil.move(src, dst)` to move files. **Example:** ```python sort_file_directory(\'/path/to/directory\') ``` Assuming the directory contains the following files: ``` document1.txt picture1.jpg script1.py document2.txt picture2.png script2.py ``` After executing the function, the specified directory structure should be: ``` /path/to/directory ├── txt │ ├── document1.txt │ └── document2.txt ├── jpg │ └── picture1.jpg ├── png │ └── picture2.png └── py ├── script1.py └── script2.py ``` And the output should be: ``` Organized files: txt: [\'document1.txt\', \'document2.txt\'] jpg: [\'picture1.jpg\'] png: [\'picture2.png\'] py: [\'script1.py\', \'script2.py\'] ``` If the directory does not exist: ``` Directory does not exist ```","solution":"import os import shutil def sort_file_directory(directory: str) -> None: if not os.path.exists(directory): print(\\"Directory does not exist\\") return files_by_extension = {} for filename in os.listdir(directory): file_path = os.path.join(directory, filename) if os.path.isfile(file_path): _, extension = os.path.splitext(filename) extension = extension.lstrip(\'.\').lower() if extension: if extension not in files_by_extension: files_by_extension[extension] = [] files_by_extension[extension].append(filename) for extension, files in files_by_extension.items(): extension_dir = os.path.join(directory, extension) if not os.path.exists(extension_dir): os.mkdir(extension_dir) for file in files: src = os.path.join(directory, file) dst = os.path.join(extension_dir, file) shutil.move(src, dst) print(f\\"{extension}: {files}\\")"},{"question":"You are given a list of customer purchase records. Each record in the list is a dictionary containing \'customer_id\', \'date\', and \'amount\'. Your task is to create a function called `average_monthly_spend` that calculates the average monthly spend for each customer over the period covered by the data. The function should return a dictionary where the keys are the customer IDs and the values are the corresponding average monthly expenditures. The function should follow these guidelines: 1. Parse the \'date\' field (which is in the format \'YYYY-MM-DD\') to determine the month and year of each purchase. 2. Aggregate the total spending per month for each customer. 3. Compute the average monthly spend for each customer by dividing the total spending by the number of months they made purchases. 4. Return a dictionary where each key is a customer ID and the corresponding value is their average monthly spend. Here’s a function signature to get you started: ```python from collections import defaultdict from datetime import datetime def average_monthly_spend(purchase_records): This function calculates the average monthly spend for each customer. Parameters: - purchase_records: A list of dictionaries where each dictionary represents a purchase record with \'customer_id\', \'date\', and \'amount\' keys. Returns: - avg_monthly_spend: A dictionary where keys are customer IDs and values are their average monthly spend. ```","solution":"from collections import defaultdict from datetime import datetime from math import isclose def average_monthly_spend(purchase_records): This function calculates the average monthly spend for each customer. Parameters: - purchase_records: A list of dictionaries where each dictionary represents a purchase record with \'customer_id\', \'date\', and \'amount\' keys. Returns: - avg_monthly_spend: A dictionary where keys are customer IDs and values are their average monthly spend. customer_monthly_spend = defaultdict(lambda: defaultdict(float)) total_spend_per_customer = defaultdict(float) unique_months_per_customer = defaultdict(set) for record in purchase_records: customer_id = record[\'customer_id\'] date = datetime.strptime(record[\'date\'], \'%Y-%m-%d\') amount = record[\'amount\'] year_month = (date.year, date.month) customer_monthly_spend[customer_id][year_month] += amount total_spend_per_customer[customer_id] += amount unique_months_per_customer[customer_id].add(year_month) avg_monthly_spend = {} for customer_id in customer_monthly_spend: total_spend = total_spend_per_customer[customer_id] num_months = len(unique_months_per_customer[customer_id]) avg_monthly_spend[customer_id] = total_spend / num_months return avg_monthly_spend"},{"question":"You are tasked with writing a function called `find_missing_number` that takes in a list of unique integers from 1 to `n` (where `n` is the length of the list plus one), with one number missing in the sequence. The function should find and return the missing number. To solve this, your function should utilize the sum of the first `n` natural numbers formula: [ text{Sum} = frac{n times (n + 1)}{2} ] By calculating the expected sum of numbers from 1 to `n` and subtracting the sum of the given list, you can determine the missing number. The signature of the function should be: ```python def find_missing_number(nums: list) -> int: ``` Where: - `nums` is a list of unique integers from 1 to `n` with exactly one missing number. Here is an example usage for your guidance: ```python # Example usage nums = [1, 2, 4, 5, 6] print(find_missing_number(nums)) # Output: 3 ``` Assume you have imported all necessary libraries: ```python import typing ```","solution":"def find_missing_number(nums: list) -> int: Finds the missing number in the list of unique integers from 1 to n. :param nums: List[int] - A list of unique integers from 1 to n with one missing number. :return: int - The missing integer. n = len(nums) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(nums) return total_sum - actual_sum"},{"question":"You are tasked with creating a Python function that reads and processes a CSV file containing sales data, then generates a summary report. The function should be named `summarize_sales_data(file_path)`, where `file_path` is the path to the CSV file. The CSV file will have the following columns: - `date`: The date of the sale (format: YYYY-MM-DD). - `item`: The name of the item sold. - `quantity`: The number of items sold. - `price_per_unit`: The price of a single unit. The function should: 1. Read the CSV file. 2. Calculate the total sales amount per item (quantity * price per unit). 3. Calculate the total number of items sold. 4. Determine the item with the highest sales amount. 5. Print a summary report with the following format: ``` Total Sales Amount: <total_sales_amount> Total Units Sold: <total_units_sold> Best Selling Item: <item_name> (<sales_amount>) ``` 6. Handle any file I/O errors gracefully, printing appropriate error messages. Your task is to implement the function `summarize_sales_data(file_path)` exactly as described, making use of standard libraries such as `csv` and `os`.","solution":"import csv import os def summarize_sales_data(file_path): Reads sales data from a CSV file and prints a summary report. :param file_path: The path to the CSV file containing sales data. if not os.path.exists(file_path): print(\\"Error: The file does not exist.\\") return total_sales_amount = 0.0 total_units_sold = 0 sales_data = {} try: with open(file_path, mode=\'r\', newline=\'\') as file: reader = csv.DictReader(file) for row in reader: item = row[\'item\'] quantity = int(row[\'quantity\']) price_per_unit = float(row[\'price_per_unit\']) sales_amount = quantity * price_per_unit total_sales_amount += sales_amount total_units_sold += quantity if item not in sales_data: sales_data[item] = 0.0 sales_data[item] += sales_amount if not sales_data: print(\\"Error: The CSV file is empty or improperly formatted.\\") return # Find the best selling item. best_selling_item = max(sales_data, key=sales_data.get) best_selling_amount = sales_data[best_selling_item] print(f\\"Total Sales Amount: {total_sales_amount}\\") print(f\\"Total Units Sold: {total_units_sold}\\") print(f\\"Best Selling Item: {best_selling_item} ({best_selling_amount})\\") except Exception as e: print(f\\"Error: An error occurred while reading the file - {e}\\")"},{"question":"# Context You are working on a data processing project where you need to clean up and standardize user data from a JSON file. The JSON file contains an array of user objects, each with the fields `id`, `name`, `email`, and `signup_date`. Your task is to write a function to read this JSON file, correct the user data format, and then save the cleaned data back into a new JSON file. Specifically, you need to: 1. Ensure all `name` fields are capitalized (i.e., the first letter of each name is uppercase). 2. Standardize the `email` fields to lowercase. 3. Convert all `signup_date` fields to ISO 8601 format (YYYY-MM-DD). # Task Write a function `clean_user_data(input_file: str, output_file: str) -> None` which achieves the following: 1. Reads the JSON data from `input_file`. 2. Processes each user record to capitalize the `name`, lowercase the `email`, and convert the `signup_date` to the specified format. 3. Writes the cleaned data to `output_file` in JSON format. # Function Signature ```python def clean_user_data(input_file: str, output_file: str) -> None: pass ``` # Example Assume `users.json` contains the following data: ```json [ {\\"id\\": 1, \\"name\\": \\"john doe\\", \\"email\\": \\"JOHN.DOE@EMAIL.com\\", \\"signup_date\\": \\"12/25/2021\\"}, {\\"id\\": 2, \\"name\\": \\"jane SMITH\\", \\"email\\": \\"Jane.Smith@Email.Com\\", \\"signup_date\\": \\"01-01-2022\\"} ] ``` On calling the function: ```python clean_user_data(\'users.json\', \'cleaned_users.json\') ``` The `cleaned_users.json` file should contain: ```json [ {\\"id\\": 1, \\"name\\": \\"John Doe\\", \\"email\\": \\"john.doe@email.com\\", \\"signup_date\\": \\"2021-12-25\\"}, {\\"id\\": 2, \\"name\\": \\"Jane Smith\\", \\"email\\": \\"jane.smith@email.com\\", \\"signup_date\\": \\"2022-01-01\\"} ] ``` # Note - Use the `json` module to read and write JSON data. - Handle potential exceptions gracefully, such as file read/write errors or date format inconsistencies.","solution":"import json from datetime import datetime def clean_user_data(input_file: str, output_file: str) -> None: Cleans user data in the input JSON file and saves it to the output JSON file. Parameters: input_file (str): The path to the input JSON file. output_file (str): The path to the output JSON file. try: with open(input_file, \'r\') as infile: users = json.load(infile) for user in users: # Capitalize the first letter of each word in the name user[\'name\'] = user[\'name\'].title() # Lowercase the email user[\'email\'] = user[\'email\'].lower() # Convert the signup_date to ISO 8601 format (YYYY-MM-DD) try: # We try to accommodate various date formats parsed_date = datetime.strptime(user[\'signup_date\'], \'%m/%d/%Y\') except ValueError: parsed_date = datetime.strptime(user[\'signup_date\'], \'%m-%d-%Y\') user[\'signup_date\'] = parsed_date.strftime(\'%Y-%m-%d\') with open(output_file, \'w\') as outfile: json.dump(users, outfile, indent=4) except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"Create a function that simulates a vending machine inventory system. Each item in the vending machine is represented by its name, price, and stock quantity. Implement functionalities to display the current inventory, purchase an item (which decreases its stock), and restock an item. The system should handle cases where an item is out of stock or the specified item does not exist. You should write self-contained code starting with: ``` class VendingMachine: def __init__(self, items): Initialize the vending machine with a dictionary of items. The keys are item names, and the values are dictionaries with \'price\' and \'stock\' keys. :param items: Dictionary of items (name, price, and stock) self.inventory = items def display_inventory(self): Display the current inventory of the vending machine. for item, info in self.inventory.items(): print(f\\"Item: {item}, Price: {info[\'price\']}, Stock: {info[\'stock\']}\\") def purchase_item(self, item_name): Purchase an item from the vending machine. :param item_name: Name of the item to purchase :return: A message indicating the result of the purchase if item_name not in self.inventory: return \\"Item not found.\\" if self.inventory[item_name][\'stock\'] <= 0: return \\"Item is out of stock.\\" self.inventory[item_name][\'stock\'] -= 1 return f\\"Purchased {item_name} for {self.inventory[item_name][\'price\']}.\\" def restock_item(self, item_name, quantity): Restock an item in the vending machine. :param item_name: Name of the item to restock :param quantity: Quantity to add to the stock :return: A message indicating the result of the restock if item_name not in self.inventory: return \\"Item not found.\\" self.inventory[item_name][\'stock\'] += quantity return f\\"Restocked {item_name} with {quantity} units.\\" # Example Usage: items = { \'Soda\': {\'price\': 1.50, \'stock\': 10}, \'Chips\': {\'price\': 1.00, \'stock\': 5}, \'Candy\': {\'price\': 0.50, \'stock\': 15} } vm = VendingMachine(items) vm.display_inventory() print(vm.purchase_item(\'Soda\')) print(vm.restock_item(\'Chips\', 10)) ``` Output: - Multiple sampes of `VendingMachine` class usage. Note: You can adjust the quantity and item details as per your requirement.","solution":"class VendingMachine: def __init__(self, items): Initialize the vending machine with a dictionary of items. The keys are item names, and the values are dictionaries with \'price\' and \'stock\' keys. :param items: Dictionary of items (name, price, and stock) self.inventory = items def display_inventory(self): Display the current inventory of the vending machine. for item, info in self.inventory.items(): print(f\\"Item: {item}, Price: {info[\'price\']}, Stock: {info[\'stock\']}\\") def purchase_item(self, item_name): Purchase an item from the vending machine. :param item_name: Name of the item to purchase :return: A message indicating the result of the purchase if item_name not in self.inventory: return \\"Item not found.\\" if self.inventory[item_name][\'stock\'] <= 0: return \\"Item is out of stock.\\" self.inventory[item_name][\'stock\'] -= 1 return f\\"Purchased {item_name} for {self.inventory[item_name][\'price\']}.\\" def restock_item(self, item_name, quantity): Restock an item in the vending machine. :param item_name: Name of the item to restock :param quantity: Quantity to add to the stock :return: A message indicating the result of the restock if item_name not in self.inventory: return \\"Item not found.\\" self.inventory[item_name][\'stock\'] += quantity return f\\"Restocked {item_name} with {quantity} units.\\""},{"question":"You are tasked with writing a class that simulates a simple banking system. This class should be able to handle basic transactions such as deposits, withdrawals, and balance inquiries. Additionally, you need to implement functionality to log all transactions. Your class should be named `BankAccount` with the following methods: 1. **`__init__` method**: Initializes the account with the account holder\'s name and initial balance. The initial balance should default to zero if not provided. 2. **`deposit` method**: Accepts an amount to be added to the account balance. It should log this transaction. 3. **`withdraw` method**: Accepts an amount to be subtracted from the account balance if there are sufficient funds. Otherwise, it should print an error message. It should log this transaction. 4. **`check_balance` method**: Returns the current account balance. 5. **`transaction_history` method**: Returns a list of all transactions that occurred on the account with details. Each transaction log should store the type of transaction (\\"Deposit\\" or \\"Withdrawal\\"), the amount, and the resulting balance after the transaction. # Requirements: 1. Implement the `BankAccount` class with the methods described. 2. Ensure that the `withdraw` method only allows withdrawals if there are sufficient funds. 3. Maintain a list of transactions that records each deposit and withdrawal. 4. Provide clear output for each transaction and error handling for insufficient funds during withdrawal. **Example Usage:** ```python # Creating a new bank account for Alice with an initial balance of 100 alice_account = BankAccount(\\"Alice\\", 100) # Deposit 50 into Alice\'s account alice_account.deposit(50) # Attempt to withdraw 30 from Alice\'s account alice_account.withdraw(30) # Attempt to withdraw 150 from Alice\'s account (should result in error due to insufficient funds) alice_account.withdraw(150) # Check the current balance current_balance = alice_account.check_balance() print(\\"Current Balance:\\", current_balance) # Retrieve and print the transaction history transaction_logs = alice_account.transaction_history() print(\\"Transaction History:\\") for log in transaction_logs: print(log) ``` Expected Output: ``` Deposit of 50 completed successfully. New Balance: 150 Withdrawal of 30 completed successfully. New Balance: 120 Error: Insufficient funds for withdrawal of 150 Current Balance: 120 Transaction History: {\'type\': \'Deposit\', \'amount\': 50, \'balance\': 150} {\'type\': \'Withdrawal\', \'amount\': 30, \'balance\': 120} ```","solution":"class BankAccount: def __init__(self, account_holder: str, initial_balance: float = 0.0): self.account_holder = account_holder self.balance = initial_balance self.transactions = [] def deposit(self, amount: float): self.balance += amount self.transactions.append({\\"type\\": \\"Deposit\\", \\"amount\\": amount, \\"balance\\": self.balance}) print(f\\"Deposit of {amount} completed successfully. New Balance: {self.balance}\\") def withdraw(self, amount: float): if amount > self.balance: print(f\\"Error: Insufficient funds for withdrawal of {amount}\\") else: self.balance -= amount self.transactions.append({\\"type\\": \\"Withdrawal\\", \\"amount\\": amount, \\"balance\\": self.balance}) print(f\\"Withdrawal of {amount} completed successfully. New Balance: {self.balance}\\") def check_balance(self): return self.balance def transaction_history(self): return self.transactions"},{"question":"You are required to write a Python function called `draw_regular_pentagon` that uses the `turtle` module to draw a regular pentagon. The function should set up a `turtle.Screen` object with a yellow background and use a turtle to draw the pentagon with each side of 100 units in length. The turtle should be red and should move at a slow speed. In this problem, you will need to employ the `turtle.Screen` library API as explained in the documentation below: ``` Python Library Documentation: function Screen in turtle turtle.Screen = Screen() Return the singleton screen object. If none exists at the moment, create a new one and return it, else return the existing one. ``` Ensure your function properly configures the screen, initializes the turtle, and performs the necessary steps to draw a regular pentagon.","solution":"import turtle def draw_regular_pentagon(): # Set up the screen screen = turtle.Screen() screen.bgcolor(\\"yellow\\") # Set up the turtle pen = turtle.Turtle() pen.color(\\"red\\") pen.speed(1) # Slow speed # Drawing a regular pentagon side_length = 100 for _ in range(5): pen.forward(side_length) pen.right(72) # Keep the window open screen.mainloop()"},{"question":"You are given a text file parsed as an argument to a function `analyze_text(file_path: str) -> Dict[str, Union[int, List[str]]]`. Your task is to analyze the text file and return a summary dictionary containing the following information: 1. The total number of words. 2. The total number of lines. 3. A list of unique words, sorted in alphabetical order. 4. The frequency of each word in the text, stored as a dictionary where the key is the word and the value is its count. Ensure that words are considered case-insensitively (for example, \\"Hello\\" and \\"hello\\" should be treated as the same word). Use Python\'s built-in libraries to perform the file operations. **Function Signature:** ```python from typing import Dict, Union, List def analyze_text(file_path: str) -> Dict[str, Union[int, List[str]]]: pass ``` **Example Usage:** ```python # Assume \'sample.txt\' is a valid text file path with appropriate text data result = analyze_text(\'sample.txt\') ``` **Example Output:** ```python { \'total_words\': 200, \'total_lines\': 15, \'unique_words\': [\'a\', \'an\', \'example\', \'file\', \'hello\', \'is\', \'sample\', \'text\', \'this\', \'world\'], \'word_frequencies\': {\'hello\': 10, \'world\': 5, \'this\': 3, \'is\': 8, \'an\': 2, \'example\': 1, \'file\': 1, \'sample\': 2, \'text\': 3, \'a\': 5} } ```","solution":"import re from typing import Dict, Union, List def analyze_text(file_path: str) -> Dict[str, Union[int, List[str]]]: total_words = 0 total_lines = 0 word_frequencies = {} with open(file_path, \'r\') as file: for line in file: total_lines += 1 words = re.findall(r\'bw+b\', line.lower()) total_words += len(words) for word in words: if word in word_frequencies: word_frequencies[word] += 1 else: word_frequencies[word] = 1 unique_words = sorted(word_frequencies.keys()) return { \'total_words\': total_words, \'total_lines\': total_lines, \'unique_words\': unique_words, \'word_frequencies\': word_frequencies }"},{"question":"You are required to implement a simplified version of a social media posting system where a user can create posts and specify keywords associated with each post. You will create a Python class to handle the creation, storage, and keyword-based retrieval of posts. Implement the following class: ```python class SocialMedia: def __init__(self): Initializes the SocialMedia class, which stores posts and their keywords. self.posts = [] def create_post(self, content: str, keywords: list): Creates a new post with the provided content and keywords. Parameters: content (str): The content of the post. keywords (list): A list of keywords associated with the post. post = {\'content\': content, \'keywords\': keywords} self.posts.append(post) def get_posts_by_keyword(self, keyword: str) -> list: Retrieves all posts that contain the specified keyword. Parameters: keyword (str): The keyword to search for in the posts. Returns: list: A list of posts (dict) that contain the specified keyword. result = [post for post in self.posts if keyword in post[\'keywords\']] return result ``` **Requirements:** 1. The `create_post` method should add a new post to the internal storage with its content and associated keywords. 2. The `get_posts_by_keyword` method should return a list of all posts that contain the specified keyword. 3. Handle cases where there are no posts or no posts contain the specified keyword by returning an empty list. # Example Usage: ```python sm = SocialMedia() sm.create_post(\\"Hello World!\\", [\\"greeting\\", \\"world\\"]) sm.create_post(\\"Python is awesome!\\", [\\"python\\", \\"programming\\"]) sm.create_post(\\"Good morning, everyone!\\", [\\"morning\\", \\"greeting\\"]) print(sm.get_posts_by_keyword(\\"greeting\\")) print(sm.get_posts_by_keyword(\\"python\\")) print(sm.get_posts_by_keyword(\\"evening\\")) ``` # Expected Output: For the provided inputs, the output should look similar to: ``` [{\'content\': \'Hello World!\', \'keywords\': [\'greeting\', \'world\']}, {\'content\': \'Good morning, everyone!\', \'keywords\': [\'morning\', \'greeting\']}] [{\'content\': \'Python is awesome!\', \'keywords\': [\'python\', \'programming\']}] [] ``` In this example, the first call to `get_posts_by_keyword` retrieves posts that contain the keyword \'greeting\'.","solution":"class SocialMedia: def __init__(self): Initializes the SocialMedia class, which stores posts and their keywords. self.posts = [] def create_post(self, content: str, keywords: list): Creates a new post with the provided content and keywords. Parameters: content (str): The content of the post. keywords (list): A list of keywords associated with the post. post = {\'content\': content, \'keywords\': keywords} self.posts.append(post) def get_posts_by_keyword(self, keyword: str) -> list: Retrieves all posts that contain the specified keyword. Parameters: keyword (str): The keyword to search for in the posts. Returns: list: A list of posts (dict) that contain the specified keyword. result = [post for post in self.posts if keyword in post[\'keywords\']] return result"},{"question":"You are required to write a function in Python that simulates a ticket booking system for a series of events. The function should process a series of booking requests and return the status of each booking. Each event has a limited number of available tickets. Here are the detailed steps: 1. **Event and Ticket Initialization**: - You are given a dictionary `events` where keys represent event names and values represent the total number of tickets available for that event. - You are given a list of booking requests, each represented as a dictionary containing: - `event`: The event name for which the booking is requested. - `name`: The name of the individual requesting the booking. - `number`: The number of tickets requested. 2. **Processing Booking Requests**: - For each booking request, check if the event exists in the `events` dictionary. - If the event does not exist, mark the booking request as invalid. - If the event exists, check if the requested number of tickets is less than or equal to the available number of tickets for that event. - If the requested number of tickets is available, deduct the requested number from the available tickets and mark the booking request as successful. - If the requested number of tickets exceeds the available number, mark the booking request as failed due to insufficient tickets. 3. **Result Compilation**: - Compile the results of each booking request into a list of dictionaries, where each dictionary has: - `event`: The event name. - `name`: The name of the individual requesting the booking. - `status`: The status of the booking which can be `success`, `failed`, or `invalid`. The function you have to implement should be named `process_booking_requests`. Function Signature: ```python def process_booking_requests(events: dict, bookings: list) -> list: ``` Parameters: - `events`: A dictionary where keys are event names (strings) and values are integers representing the total number of tickets available for each event. - `bookings`: A list of dictionaries, each representing a booking request containing: - `event`: The event name (string). - `name`: The name of the individual (string). - `number`: The number of tickets requested (integer). Returns: - A list of dictionaries, each containing: - `event`: The event name. - `name`: The name of the individual. - `status`: The status of the booking (either `success`, `failed`, or `invalid`). # Example: ```python events = { \\"Concert\\": 100, \\"Sports\\": 200, \\"Theater\\": 50 } bookings = [ {\\"event\\": \\"Concert\\", \\"name\\": \\"Alice\\", \\"number\\": 10}, {\\"event\\": \\"Concert\\", \\"name\\": \\"Bob\\", \\"number\\": 95}, {\\"event\\": \\"Sports\\", \\"name\\": \\"Cara\\", \\"number\\": 200}, {\\"event\\": \\"Theater\\", \\"name\\": \\"Dave\\", \\"number\\": 51}, {\\"event\\": \\"Movie\\", \\"name\\": \\"Eve\\", \\"number\\": 5} ] print(process_booking_requests(events, bookings)) ``` # Expected Output: ```python [ {\\"event\\": \\"Concert\\", \\"name\\": \\"Alice\\", \\"status\\": \\"success\\"}, {\\"event\\": \\"Concert\\", \\"name\\": \\"Bob\\", \\"status\\": \\"failed\\"}, {\\"event\\": \\"Sports\\", \\"name\\": \\"Cara\\", \\"status\\": \\"success\\"}, {\\"event\\": \\"Theater\\", \\"name\\": \\"Dave\\", \\"status\\": \\"failed\\"}, {\\"event\\": \\"Movie\\", \\"name\\": \\"Eve\\", \\"status\\": \\"invalid\\"} ] ``` # Constraints: - Assume all input strings are case-sensitive. - The number of booking requests will not exceed 1000. - The number of different events will not exceed 100.","solution":"def process_booking_requests(events: dict, bookings: list) -> list: results = [] for booking in bookings: event = booking[\'event\'] name = booking[\'name\'] number = booking[\'number\'] if event not in events: results.append({ \'event\': event, \'name\': name, \'status\': \'invalid\' }) elif events[event] >= number: events[event] -= number results.append({ \'event\': event, \'name\': name, \'status\': \'success\' }) else: results.append({ \'event\': event, \'name\': name, \'status\': \'failed\' }) return results"},{"question":"You are given a CSV file containing the recorded visits of patients to a clinic over several years. The data is structured with the following columns: `VisitDate`, `PatientID`, `ClinicID`, `Symptoms`, where `VisitDate` is the date of the visit, `PatientID` is the unique identifier for each patient, `ClinicID` is the unique identifier for each clinic, and `Symptoms` is a string describing the symptoms reported by the patient during the visit. Your task is to write a function `frequent_visitors(filepath)` that identifies patients who visited the same clinic 10 or more times in any given year. The function should: 1. Load the data from the CSV file. 2. Parse the `VisitDate` to extract the year and month. 3. Group the data by year, clinic, and patient. 4. Count the number of visits each patient made to each clinic in each year. 5. Identify patients with 10 or more visits to the same clinic in any given year. 6. Return a dictionary where the keys are tuples consisting of `(ClinicID, Year)` and the values are lists of `PatientID`s who visited the clinic 10 or more times that year. Use the `pandas` library for data manipulation. Ensure that the function respects the following format: ```python def frequent_visitors(filepath: str) -> Dict[Tuple[int, int], List[int]]: pass ``` **Example:** Assume the dataset looks like the following: ``` VisitDate,PatientID,ClinicID,Symptoms 2018-01-01,1001,2001,cough 2018-01-15,1001,2001,fever 2018-01-30,1001,2001,headache ... ``` Calling `frequent_visitors(\'path/to/visit_data.csv\')` should return a dictionary where each key is a tuple indicating a clinic and a year, and each value is a list of patients who met the criteria of visiting that clinic 10 or more times in that year.","solution":"import pandas as pd from collections import defaultdict from typing import Dict, Tuple, List def frequent_visitors(filepath: str) -> Dict[Tuple[int, int], List[int]]: # Load the data from the CSV file df = pd.read_csv(filepath) # Parse the VisitDate to extract the year df[\'VisitDate\'] = pd.to_datetime(df[\'VisitDate\']) df[\'Year\'] = df[\'VisitDate\'].dt.year # Group by Year, ClinicID, PatientID and count the visits grouped = df.groupby([\'Year\', \'ClinicID\', \'PatientID\']).size().reset_index(name=\'Visits\') # Filter the data to find patients with 10 or more visits in any year to the same clinic frequent_patients = grouped[grouped[\'Visits\'] >= 10] # Generate the result dictionary result = defaultdict(list) for _, row in frequent_patients.iterrows(): result[(row[\'ClinicID\'], row[\'Year\'])].append(row[\'PatientID\']) return dict(result)"},{"question":"You are tasked with creating a function that calculates the running median of a sequence of integers received from user input. The running or moving median is the median of the sequence up to the current number as new numbers are added. Use the `heapq` library to maintain the order of elements efficiently while calculating the median. Function Signature ```python def runningMedian() -> None: ``` Parameters The function does not take any parameters but continuously accepts integer inputs from the user. Instructions 1. **Initialize two heaps**: Use two heaps (`min-heap` and `max-heap`) to maintain the lower and upper halves of the data stream. 2. **Prompt for input**: Continuously prompt the user to input integers. The user input will stop when the keyword \\"exit\\" is entered. 3. **Maintain heaps**: - Add the new integer to the max-heap if it is smaller than the current median, otherwise to the min-heap. - Balance the heaps such that the max-heap has equal or one more element than the min-heap. 4. **Calculate the median**: - If the max-heap contains more elements, the median is the maximum element of the max-heap. - If both heaps are of the same size, the median is the average of the maximum of the max-heap and the minimum of the min-heap. 5. **Output the median**: After each integer input, output the current running median of the sequence. Example Interaction Consider the user inputs the following sequence of integers: `1`, `3`, `5`, `7`, `exit` ```python runningMedian() ``` The function might prompt for inputs like this: ``` Enter a number: 1 Current median: 1.0 Enter a number: 3 Current median: 2.0 Enter a number: 5 Current median: 3.0 Enter a number: 7 Current median: 4.0 Enter a number: exit ``` Note: Ensure to handle the input \\"exit\\" gracefully and terminate the function without errors.","solution":"import heapq def runningMedian(): max_heap = [] # To store the smaller half of the numbers min_heap = [] # To store the larger half of the numbers def add_number(num): if len(max_heap) == 0 or num <= -max_heap[0]: heapq.heappush(max_heap, -num) else: heapq.heappush(min_heap, num) balance_heaps() def balance_heaps(): if len(max_heap) > len(min_heap) + 1: heapq.heappush(min_heap, -heapq.heappop(max_heap)) elif len(min_heap) > len(max_heap): heapq.heappush(max_heap, -heapq.heappop(min_heap)) def get_median(): if len(max_heap) > len(min_heap): return float(-max_heap[0]) else: return (-max_heap[0] + min_heap[0]) / 2.0 while True: inp = input(\\"Enter a number: \\") if inp == \\"exit\\": break try: num = int(inp) add_number(num) print(f\\"Current median: {get_median()}\\") except ValueError: print(\\"Please enter a valid number or \'exit\' to stop.\\") # Note: The code will work interactively with user inputs when run locally. # For testing purposes in a non-interactive environment, we\'ll need to mock the input/output."},{"question":"Write a function that takes a string and returns the counts of each vowel (a, e, i, o, u) in the string. The function should be case-insensitive and ignore any character that is not a vowel. Additionally, the function should return a bar chart displaying the frequency of each vowel in the string. The function should output: vowel_counts (dict): A dictionary where each key is a vowel (\'a\', \'e\', \'i\', \'o\', \'u\') and the value is the count of that vowel in the string. ax (matplotlib.axes._axes.Axes): The Axes object for the bar chart plot of the frequency of each vowel. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def task_func(input_string): ```","solution":"import matplotlib.pyplot as plt from collections import Counter def task_func(input_string): Returns the counts of each vowel (a, e, i, o, u) in the string and a bar chart displaying the frequency of each vowel. vowels = \\"aeiou\\" input_string = input_string.lower() vowel_counts = {vowel: input_string.count(vowel) for vowel in vowels} # Plotting the bar chart fig, ax = plt.subplots() ax.bar(vowel_counts.keys(), vowel_counts.values(), color=\'blue\') ax.set_xlabel(\'Vowels\') ax.set_ylabel(\'Frequency\') ax.set_title(\'Frequency of Vowels in Given String\') return vowel_counts, ax"},{"question":"Implement a function `most_frequent_elements` that finds the most frequent elements in an array. The function should return a list of the elements that appear the most frequently in the array. The function signature should be: ```python def most_frequent_elements(arr): # your implementation here ``` **Parameters:** - `arr` (list): A list of integers. **Returns:** - `list`: A list of integers representing the most frequent elements. If there are multiple elements with the same highest frequency, return them in ascending order. **Constraints:** - The input list can be empty. In this case, return an empty list. - The elements of the list can be any integer value (positive, negative, or zero). **Instructions:** 1. Count the frequency of each element in the array. 2. Identify the maximum frequency. 3. Collect all elements with this maximum frequency and sort them in ascending order. **Example:** ```python arr = [1, 3, 2, 3, 1, 1, 2, 2, 4] print(most_frequent_elements(arr)) # Output: [1, 2] arr = [4, 4, 4, 8, 8, 8, 2] print(most_frequent_elements(arr)) # Output: [4, 8] arr = [] print(most_frequent_elements(arr)) # Output: [] ```","solution":"def most_frequent_elements(arr): Returns a list of the most frequent elements in the array. If there are multiple elements with the same highest frequency, they are returned in ascending order. if not arr: return [] from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Find the maximum frequency max_freq = max(frequency.values()) # Collect all elements with the maximum frequency and sort them most_frequent = sorted([key for key, value in frequency.items() if value == max_freq]) return most_frequent"},{"question":"Suppose you are given a list of tuples where each tuple contains two integers representing the start and end times of a meeting. Your goal is to determine the minimum number of meeting rooms required to accommodate all meetings. Write a function `find_min_meeting_rooms(intervals)` that takes a list of tuples `intervals` and returns an integer representing the minimum number of meeting rooms needed. Your task includes: 1. Defining the function `find_min_meeting_rooms(intervals)`. 2. Sorting the intervals based on their start times. 3. Using a min-heap to keep track of the end times of meetings currently using a room. 4. Iterating through the sorted intervals and allocating rooms as necessary. 5. Returning the minimum number of meeting rooms required to accommodate all meetings. Here\'s the outline of the function: ```python def find_min_meeting_rooms(intervals): # Handle edge cases if intervals are empty # Sort the intervals based on start times # Initialize a min-heap to keep track of end times # Iterate through the intervals to allocate rooms # Keep track of the maximum rooms used at any time # Return the maximum number of rooms used ``` Additionally, make sure to handle proper import of necessary library: - `heapq` for the min-heap operations For example: ```python print(find_min_meeting_rooms([(0, 30), (5, 10), (15, 20)])) # Output: 2 print(find_min_meeting_rooms([(2, 4), (7, 10)])) # Output: 1 ```","solution":"import heapq def find_min_meeting_rooms(intervals): if not intervals: return 0 # Sort the intervals based on start times intervals.sort(key=lambda x: x[0]) # Initialize a min-heap min_heap = [] # Add the first meeting end time to the min-heap heapq.heappush(min_heap, intervals[0][1]) for interval in intervals[1:]: # If the room with the earliest end time is free, remove it from the heap if min_heap[0] <= interval[0]: heapq.heappop(min_heap) # Add the current meeting\'s end time to the heap heapq.heappush(min_heap, interval[1]) # The size of the heap is the number of rooms required return len(min_heap)"},{"question":"You need to write a function that computes the k-th smallest element in a list of integers. The function should be named `kth_smallest_element` and should take two parameters: 1. `arr` - a list of integers. 2. `k` - an integer representing the position of the smallest element to find (1-based index). The function should return the k-th smallest element in the list. You may assume that the list has no duplicate elements and that `k` is a valid index, i.e., `1 <= k <= len(arr)`. To implement this function efficiently, you should use a sorting algorithm and then directly access the k-th element in the sorted list. You are not allowed to use built-in sorting functions or any libraries that provide direct sorting utilities. **Function signature:** ```python def kth_smallest_element(arr: list, k: int) -> int: ``` **Examples:** 1. Suppose the list `[7, 10, 4, 3, 20, 15]` and `k = 3` are provided as inputs. Your function should return `7` as it is the 3rd smallest element in the list. 2. Given the list `[1, 2, 3, 4, 5, 6]` and `k = 6`, the function should return `6`. **Note:** You must implement your own sorting mechanism without using Python\'s built-in `sort` method. For example, you could use a sorting algorithm such as quicksort, mergesort, or heapsort.","solution":"def kth_smallest_element(arr: list, k: int) -> int: Return the k-th smallest element in the list arr. def quicksort(lst): if len(lst) <= 1: return lst pivot = lst[len(lst) // 2] left = [x for x in lst if x < pivot] middle = [x for x in lst if x == pivot] right = [x for x in lst if x > pivot] return quicksort(left) + middle + quicksort(right) sorted_arr = quicksort(arr) return sorted_arr[k - 1]"},{"question":"You are required to create a function called `calculate_correlation` that demonstrates the use of the `pandas` and `numpy` libraries to calculate the Pearson correlation coefficient between two columns in a given DataFrame. The function should: 1. **Accept the following parameters**: - `df`: A Pandas DataFrame that includes at least two columns of numeric data. - `col1`: A string representing the name of the first column. - `col2`: A string representing the name of the second column. 2. **Validate the input parameters** to ensure that `col1` and `col2` exist in the DataFrame and both columns contain numeric data. 3. **Calculate the Pearson correlation coefficient** between the two specified columns using the appropriate function from either `pandas` or `numpy`. 4. Return the computed Pearson correlation coefficient. 5. **Handle any potential errors gracefully**, such as missing columns or non-numeric data, and provide an appropriate error message. **Detailed Steps and Requirements**: - Make sure to check if the provided column names exist in the DataFrame. - Validate that the data in the specified columns is numeric. - Use the `pandas.DataFrame.corr` method with the `method=\'pearson\'` parameter or `numpy.corrcoef` function to calculate the Pearson correlation coefficient. - The function should be robust and handle unexpected input gracefully, providing meaningful error messages when invalid input is detected. Here is a template to get you started: ```python import pandas as pd import numpy as np def calculate_correlation(df, col1, col2): # Check if columns exist if col1 not in df.columns or col2 not in df.columns: raise ValueError(f\\"Columns {col1} and/or {col2} not found in DataFrame.\\") # Check if columns are numeric if not (pd.api.types.is_numeric_dtype(df[col1]) and pd.api.types.is_numeric_dtype(df[col2])): raise TypeError(f\\"Columns {col1} and/or {col2} must contain numeric data.\\") # Calculate Pearson correlation coefficient correlation = df[[col1, col2]].corr(method=\'pearson\').iloc[0, 1] return correlation # Example usage: data = { \'A\': [1, 2, 3, 4, 5], \'B\': [2, 3, 4, 5, 6], \'C\': [\'a\', \'b\', \'c\', \'d\', \'e\'] } df = pd.DataFrame(data) try: corr = calculate_correlation(df, \'A\', \'B\') print(f\\"The Pearson correlation coefficient between column \'A\' and \'B\' is: {corr}\\") except (ValueError, TypeError) as e: print(e) ```","solution":"import pandas as pd import numpy as np def calculate_correlation(df, col1, col2): Calculate the Pearson correlation coefficient between two columns in a DataFrame. Parameters: df (pd.DataFrame): A Pandas DataFrame containing the data. col1 (str): The name of the first column. col2 (str): The name of the second column. Returns: float: The Pearson correlation coefficient between the two specified columns. Raises: ValueError: If the specified columns do not exist in the DataFrame. TypeError: If the specified columns do not contain numeric data. # Check if columns exist if col1 not in df.columns or col2 not in df.columns: raise ValueError(f\\"Columns {col1} and/or {col2} not found in DataFrame.\\") # Check if columns are numeric if not (pd.api.types.is_numeric_dtype(df[col1]) and pd.api.types.is_numeric_dtype(df[col2])): raise TypeError(f\\"Columns {col1} and/or {col2} must contain numeric data.\\") # Calculate Pearson correlation coefficient correlation = df[[col1, col2]].corr(method=\'pearson\').iloc[0, 1] return correlation"},{"question":"You are given a list of dictionaries representing transactions carried out by customers in a store. Each dictionary contains three keys: `customer_id` (string), `product_id` (string), and `price` (float). You need to implement the function `calculate_total_spent(transactions: List[Dict[str, Any]]) -> Dict[str, float]`. This function will calculate the total amount spent by each customer and return a dictionary where keys are `customer_id` and values are the total amounts spent by those customers. # Example: Given the `transactions` list: ```python transactions = [ {\'customer_id\': \'C1\', \'product_id\': \'P1\', \'price\': 100.0}, {\'customer_id\': \'C1\', \'product_id\': \'P2\', \'price\': 150.0}, {\'customer_id\': \'C2\', \'product_id\': \'P1\', \'price\': 200.0}, {\'customer_id\': \'C2\', \'product_id\': \'P3\', \'price\': 300.0}, {\'customer_id\': \'C1\', \'product_id\': \'P3\', \'price\': 50.0}, ] ``` Calling `calculate_total_spent(transactions)` should return: ```python {\'C1\': 300.0, \'C2\': 500.0} ``` # Function Signature: ```python def calculate_total_spent(transactions: List[Dict[str, Any]]) -> Dict[str, float]: ``` To implement this function, you can use the following hints: - Use a dictionary to keep track of the aggregate amounts for each `customer_id`. Your implementation should return the results as described above.","solution":"from typing import List, Dict, Any def calculate_total_spent(transactions: List[Dict[str, Any]]) -> Dict[str, float]: Calculate the total amount spent by each customer. Args: transactions (List[Dict[str, Any]]): A list of transaction dictionaries. Each dictionary contains: - \'customer_id\': str - \'product_id\': str - \'price\': float Returns: Dict[str, float]: A dictionary where keys are customer_ids and values are total amounts spent by those customers. total_spent = {} for transaction in transactions: customer_id = transaction[\'customer_id\'] price = transaction[\'price\'] if customer_id in total_spent: total_spent[customer_id] += price else: total_spent[customer_id] = price return total_spent"},{"question":"You are working on a program that includes more advanced graphical representation using the turtle graphics library in Python. Your task is to implement a function that draws a star with a specified number of points and color. The function `draw_star(points, size, color)` should: 1. Use the `turtle` module to set the pen color using the given `color` argument. 2. Draw a star with the number of points specified by the `points` argument, where each point is connected such that the star is drawn symmetrically. 3. The length of each side of the star is defined by the `size` argument. Specific requirements: - You must use the `turtle.pencolor` function to set the pen color. - You must use the `turtle.forward` and `turtle.left` functions to draw the star. Parameters: - `points` (int): The number of points the star should have. - `size` (int): The length of each side of the star. - `color` (str): The color of the pen to be used for drawing the star. This should be a string representing the color name (e.g., \\"red\\", \\"blue\\"). Make sure to import the `turtle` module within your function to enable these graphical operations. Example: ```python import turtle def draw_star(points, size, color): angle = 180 - (180 / points) turtle.pencolor(color) for _ in range(points): turtle.forward(size) turtle.left(angle) # Function call example draw_star(5, 100, \\"red\\") turtle.done() ``` Expected behavior: - The function sets the pen color to \\"red\\". - The function draws a star with 5 points, where each side has a length of 100 units.","solution":"import turtle def draw_star(points, size, color): Draws a star with a given number of points, size, and color using turtle graphics. Parameters: points (int): The number of points the star should have. size (int): The length of each side of the star. color (str): The color of the pen to be used for drawing the star. angle = 180 - (180 / points) turtle.pencolor(color) for _ in range(points): turtle.forward(size) turtle.left(angle)"},{"question":"**Context:** In many programming scenarios, you may encounter the need to work with nested lists. These nested structures help represent hierarchical or multi-dimensional data, but they can often lead to challenges when processing or flattening them. For this problem, we will focus on flattening a nested list structure into a single, one-dimensional list. **Objective:** You are required to write a function named `flatten_list` that takes a single argument which is a list, possibly nested at various levels, and returns a one-dimensional list containing all the elements in the nested list, preserving the order of elements as they appear in the original structure. **Constraints:** - The depth of nesting is not limited. - Elements in the list can be integers, floats, strings, or other lists. **Function Signature:** ```python def flatten_list(nested_list: list) -> list: ``` **Examples:** 1. `flatten_list([1, [2, 3, [4]], 5])` should return `[1, 2, 3, 4, 5]`. 2. `flatten_list([[1, \'a\', [2.5]], \'b\', []])` should return `[1, \'a\', 2.5, \'b\']`. 3. `flatten_list([[[[1]]], 2])` should return `[1, 2]`. 4. `flatten_list([\'a\', [[]], \'b\'])` should return `[\'a\', \'b\']`. 5. `flatten_list([])` should return `[]`.","solution":"def flatten_list(nested_list: list) -> list: Flattens a nested list into a single, one-dimensional list. Args: nested_list (list): A list that may contain nested lists at various levels. Returns: list: A one-dimensional list containing all the elements of the nested list, in order. flattened = [] def _flatten(sublist): for item in sublist: if isinstance(item, list): _flatten(item) else: flattened.append(item) _flatten(nested_list) return flattened"},{"question":"You are given a SQLite database file, `products.db`, containing tables related to product information and sales. Your objective is to create a function that extracts data about products whose sales revenue exceeds a specific threshold (10000). The tables of interest are: - `product_info`: Contains columns like `ProductID`, `ProductName`, `Category`, `Price`. - `sales`: Contains columns like `ProductID`, `QuantitySold`, `SaleDate`. You need to write a function `get_top_selling_products()` that performs the following tasks: 1. Connects to the SQLite database using the `sqlite3` library. 2. Executes an SQL query using the `pandas.read_sql_query` function to fetch products whose total sales revenue (calculated by multiplying `Price` from `product_info` with `QuantitySold` from `sales`) exceeds 10000. 3. Returns this data as a Pandas DataFrame. Here’s what the function signature should look like: ```python def get_top_selling_products() -> pd.DataFrame: ```","solution":"import sqlite3 import pandas as pd def get_top_selling_products() -> pd.DataFrame: Connects to the SQLite database and fetches products whose total sales revenue exceeds 10000. Returns the data as a Pandas DataFrame. # Connect to the SQLite database conn = sqlite3.connect(\'products.db\') # SQL query to calculate total sales revenue for each product and filter by revenue > 10000 query = SELECT pi.ProductID, pi.ProductName, pi.Category, pi.Price, SUM(s.QuantitySold) AS TotalQuantitySold, (pi.Price * SUM(s.QuantitySold)) AS TotalRevenue FROM product_info pi JOIN sales s ON pi.ProductID = s.ProductID GROUP BY pi.ProductID HAVING TotalRevenue > 10000; # Execute the query and fetch the data into a Pandas DataFrame df = pd.read_sql_query(query, conn) # Close the database connection conn.close() return df"},{"question":"You are given two strings, `s1` and `s2`, and you need to determine if they are anagrams of each other. Two strings are considered anagrams if they contain the same characters with the same frequencies. However, for this problem, the comparison should be case-insensitive. You need to implement the function `are_anagrams(s1, s2)` which takes two strings `s1` and `s2` as input and returns `True` if they are anagrams of each other, and `False` otherwise. Steps to solve the problem: 1. Convert both strings to lowercase to ensure the comparison is case-insensitive. 2. Create a frequency count of characters for each string. 3. Compare the frequency counts of both strings to determine if they are anagrams. The implementation must strictly follow these steps to ensure the correct and efficient solution. **Additional Constraints:** - The strings will contain only alphabets and spaces. Here is the definition of the function to be implemented: ```python def are_anagrams(s1, s2): # Your implementation here pass ``` You need to ensure that the function returns the correct result based on the description above, considering a broad set of test cases, including edge cases with different character frequencies and case scenarios.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams of each other, ignoring case and spaces, False otherwise. # Remove spaces and convert to lowercase s1 = s1.replace(\' \', \'\').lower() s2 = s2.replace(\' \', \'\').lower() # Create frequency counts and compare from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"# Context: You are building a simulated environment where a cashier in a grocery store checks out customers. The cashier can handle only one customer at a time and needs to synchronize the process to avoid checking out multiple customers concurrently, using a mutex lock. # Your Task: Implement a function named `Cashier(store, mutex)` using `time.sleep` to simulate the time it takes for the cashier to check out a customer. # Function Description: - `Cashier(store: StoreClass, mutex: threading.Lock) -> None`: This function runs indefinitely to handle customers in the store. - If the cashier is free and customers are in the queue, the cashier starts checking out the first customer. - Each checkout process takes 5 seconds. - After finishing with one customer, the cashier moves on to the next one. # StoreClass Structure: Assume `StoreClass` has the following methods: - `getQueue() -> list` - returns a list of customers currently in the store queue. - `removeCustomer() -> None` - removes the customer who is currently being checked out. # Constraints: - Proper use of `mutex` for thread synchronization must be ensured to handle the queue safely. - Utilize `time.sleep` to simulate the time taken for each customer checkout. # Example Scenario: Given a `StoreClass` instance with an initial queue of customers, the function should correctly and safely simulate the cashier\'s behavior, handling one customer at a time and ensuring proper queue management. Your task is to complete the `Cashier` function while ensuring synchronization and correct timing as outlined in the problem.","solution":"import threading import time def Cashier(store, mutex): Simulate the behavior of a cashier handling customers in a store. Args: store (StoreClass): The store instance containing the customer queue. mutex (threading.Lock): The mutex lock for synchronizing queue access. Returns: None while True: with mutex: queue = store.getQueue() if queue: store.removeCustomer() print(\\"Customer is being checked out.\\") time.sleep(5) # Simulate 5 seconds checkout time for each customer with mutex: if not queue: print(\\"No customers to checkout.\\")"},{"question":"You are given a function `rotate_matrix_90_degrees(matrix)` that takes a 2D NumPy array `matrix` of shape ((m, n)) and rotates it 90 degrees clockwise. The function should output a new 2D array of shape ((n, m)) that represents the rotated matrix. Your task is to implement the `rotate_matrix_90_degrees(matrix)` function. This function should create a new array of the appropriate shape and populate it by rotating the elements of the input matrix. You are required to use array slicing or other NumPy functions to accomplish this rotation efficiently. Specifically, you need to: 1. Create a new 2D NumPy array of shape ((n, m)). 2. Populate the new array by correctly mapping the elements from the input matrix to their new positions after a 90 degree clockwise rotation. **Function Signature:** ```python def rotate_matrix_90_degrees(matrix: np.ndarray) -> np.ndarray: ... ``` **Input:** - `matrix`: a 2D numpy array of shape ((m, n)). **Output:** - A 2D numpy array of shape ((n, m)), representing the input matrix rotated 90 degrees clockwise. **Constraints:** - The input and output arrays are non-empty and contain only integers. - Minimize the use of loops and use NumPy slicing or methods where possible. **Example:** ```python import numpy as np matrix = np.array([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) result = rotate_matrix_90_degrees(matrix) print(result) # Output: # array([ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ]) ``` In this example, the matrix is rotated 90 degrees clockwise, and the output array reflects this transformation.","solution":"import numpy as np def rotate_matrix_90_degrees(matrix: np.ndarray) -> np.ndarray: Rotates the given 2D matrix by 90 degrees clockwise. Parameters: matrix (np.ndarray): a 2D numpy array of shape (m, n). Returns: np.ndarray: A 2D numpy array of shape (n, m), rotated 90 degrees clockwise. return np.rot90(matrix, -1)"},{"question":"In this problem, you will practice working with binary trees and recursion. You are provided with a class definition for a binary tree node. Your task is to write a function named `find_sum_of_depths` that calculates the sum of the depths of all the nodes in a given binary tree. The depth of a node is defined as the number of edges from the root to that node. Function Signature ```python def find_sum_of_depths(root): pass ``` Parameters - `root`: TreeNode - The root node of the binary tree. This node is an instance of a class `TreeNode` that has been defined with the following attributes: - `val`: int - The value of the node. - `left`: TreeNode - The left child node. - `right`: TreeNode - The right child node. Requirements 1. Define a recursive helper function within `find_sum_of_depths` to compute the sum of depths. 2. Traverse the binary tree to calculate the depth of each node. 3. Sum up the depths of all nodes and return that sum. # Example Usage ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right # Example Binary Tree # 1 # / # 2 3 # / # 4 5 root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) print(find_sum_of_depths(root)) # Output: 6 ``` In this example, the tree has the sum of depths calculated as follows: - Node 1 (root) has depth 0. - Node 2 and Node 3 are at depth 1 (0 + 1 + 1). - Node 4 and Node 5 are at depth 2 (0 + 1 + 1 + 2 + 2). Thus, the sum of all depths is 0 + 1 + 1 + 2 + 2 = 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_sum_of_depths(root): Computes the sum of depths of all nodes in a binary tree. Args: root (TreeNode): The root node of the binary tree. Returns: int: The sum of depths of all the nodes. def helper(node, depth): if node is None: return 0 return depth + helper(node.left, depth + 1) + helper(node.right, depth + 1) return helper(root, 0)"},{"question":"In this problem, you will write a function named `calculate_average_precipitation` that processes weather data to compute the average precipitation for each month over a specified range of years. The primary tasks the function needs to perform are: 1. **Read and parse the CSV weather file**: - The function should accept a file path to a CSV file containing daily weather records. - Each record includes the following fields: `date`, `precipitation`. - The `date` field is formatted as `YYYY-MM-DD`. 2. **Aggregate the precipitation data by month and year**: - Extract the year and month from the date and group the data accordingly. - Sum the daily precipitation values for each month. 3. **Calculate the average monthly precipitation over the specified year range**: - For each month (from January to December), compute the total precipitation and the average over the given range of years. Implement the `calculate_average_precipitation` function using the following parameters: ```python def calculate_average_precipitation(file_path, start_year, end_year): ... ``` Parameters: - `file_path` (str): Path to the CSV file containing the weather data. - `start_year` (int): The start year of the range (inclusive). - `end_year` (int): The end year of the range (inclusive). The CSV file example structure is as follows: ``` date,precipitation 2019-01-01,5.0 2019-01-02,2.5 ... ``` The function should return a dictionary with the average monthly precipitation for each month across the specified range of years. The dictionary keys should be the month names as strings (e.g., \\"January\\", \\"February\\", ...), and the values should be the average precipitation for that month as floats. Example: ```python { \\"January\\": 122.5, \\"February\\": 98.6, ... } ``` **Note:** - Ensure that months with no data in the specified years are included in the output with an average precipitation of 0.0. - You may use the `csv` and `datetime` libraries in Python to help with the implementation. **Hint:** Consider how to handle leap years and missing data gracefully.","solution":"import csv from datetime import datetime from collections import defaultdict def calculate_average_precipitation(file_path, start_year, end_year): monthly_data = defaultdict(list) with open(file_path, \'r\') as file: reader = csv.DictReader(file) for row in reader: date = datetime.strptime(row[\'date\'], \'%Y-%m-%d\') precipitation = float(row[\'precipitation\']) year = date.year if start_year <= year <= end_year: month = date.strftime(\'%B\') monthly_data[month].append(precipitation) monthly_average_precipitation = {} months = [datetime(2000, m, 1).strftime(\'%B\') for m in range(1, 13)] for month in months: precipitations = monthly_data.get(month, []) if precipitations: monthly_average_precipitation[month] = sum(precipitations) / len(precipitations) else: monthly_average_precipitation[month] = 0.0 return monthly_average_precipitation"},{"question":"Suppose you are a software engineer working on a project that requires you to manipulate and summarize sales data for an ecommerce platform. Your task involves analyzing the sales performance of different product categories and calculating various metrics such as total sales and average sales price. You are required to write a function named `analyze_sales_data`. The function should perform the following tasks: 1. Load the sales data from a CSV file. 2. Convert the \'Sale Date\' column to datetime format. 3. Group the data by the \'Product Category\' column. 4. Calculate the total sales and average sales price for each product category. 5. Return a DataFrame containing these aggregated metrics. The function should take the following arguments: - `filename` (str): The path to the CSV file containing the sales data. The function should return: - `result_df` (Pandas DataFrame): A DataFrame with columns \'Product Category\', \'Total Sales\', and \'Average Sale Price\', containing the aggregated metrics for each product category. Ensure that your solution uses the `pandas` library for handling CSV files and data manipulation. Here\'s an example of the function signature: ```python def analyze_sales_data(filename): pass ```","solution":"import pandas as pd def analyze_sales_data(filename): Loads sales data from a CSV file, performs various aggregations, and returns a summarized DataFrame. Args: filename (str): The path to the CSV file containing the sales data. Returns: result_df (pandas.DataFrame): DataFrame with columns \'Product Category\', \'Total Sales\', and \'Average Sale Price\'. # Load the sales data from the CSV file sales_data = pd.read_csv(filename) # Convert the \'Sale Date\' column to datetime format sales_data[\'Sale Date\'] = pd.to_datetime(sales_data[\'Sale Date\']) # Group the data by the \'Product Category\' column grouped_data = sales_data.groupby(\'Product Category\') # Calculate the total sales and average sales price for each product category total_sales = grouped_data[\'Sales Amount\'].sum() average_sales_price = grouped_data[\'Sales Amount\'].mean() # Create a DataFrame with the aggregated metrics result_df = pd.DataFrame({ \'Product Category\': total_sales.index, \'Total Sales\': total_sales.values, \'Average Sale Price\': average_sales_price.values }).reset_index(drop=True) return result_df"},{"question":"Given a list of integers, write a function that finds the smallest subarray with a sum greater than or equal to a specified number. The function should return the length of this subarray. The function should output an integer representing the length of the smallest subarray with a sum that is greater than or equal to the specified number, or 0 if no such subarray exists. You should write self-contained code starting with: ``` def find_min_subarray_length(arr, target): ```","solution":"def find_min_subarray_length(arr, target): Finds the length of the smallest subarray with a sum greater than or equal to the specified target. Returns 0 if no such subarray exists. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= target: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are working on a string manipulation problem. You need to implement a function that will reverse the words in a string but keep the characters within each word in the same order. Words are separated by spaces, and there can be multiple spaces between words. Specifically, you need to implement a function named `reverse_words(s)` that: - Takes one parameter: - `s`: the input string (a string) - The function should return a new string with the words in reverse order and the characters within each word unchanged. - The function should also ensure that multiple spaces between words are reduced to a single space in the returned string. To solve this problem, you will: 1. Split the input string into words using spaces as separators. 2. Reverse the list of words. 3. Join the reversed list of words with a single space between them. 4. Return the resulting string. # Test Cases - `reverse_words(\\"the sky is blue\\")` should return `\\"blue is sky the\\"`. - `reverse_words(\\" hello world! \\")` should return `\\"world! hello\\"`. - `reverse_words(\\"a good example\\")` should return `\\"example good a\\"`.","solution":"def reverse_words(s): Reverses the words in a string but keeps the characters within each word in the same order. Ensures that multiple spaces between words are reduced to a single space. Parameters: s (str): The input string Returns: str: The string with words in reverse order and characters within each word unchanged. # Split the input string by spaces to get individual words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space and return return \' \'.join(reversed_words)"},{"question":"You are asked to write a function that takes in a string containing only lowercase letters, and returns the first non-repeating character in it. If there is no such character, return an empty string. Function Signature ```python def firstNonRepeatingChar(s: str) -> str: ``` Inputs - `s`: A string (`str`) containing only lowercase English letters. Output - Returns a single character (`str`) that is the first non-repeating character in the string. If there is no non-repeating character, return an empty string. Example ```python print(firstNonRepeatingChar(\\"leetcode\\")) # Output: \\"l\\" print(firstNonRepeatingChar(\\"loveleetcode\\")) # Output: \\"v\\" print(firstNonRepeatingChar(\\"aabb\\")) # Output: \\"\\" ``` Requirements 1. Implement this function without using the `collections` library. 2. The function should have a linear runtime complexity, i.e., `O(n)`. Explanation To solve the problem in linear time, you can use a fixed-size array (size 26) to count the frequency of each character and another fixed-size array to store the first index of each character seen in the string. Iterate through the string twice: first to fill these arrays, and second to determine the first non-repeating character based on the frequency counts and indices.","solution":"def firstNonRepeatingChar(s: str) -> str: # Initialize array to store frequency of each character freq = [0] * 26 # Initialize array to store the first appearance index of each character first_index = [-1] * 26 # Calculate frequency and first appearance index for i in range(len(s)): idx = ord(s[i]) - ord(\'a\') freq[idx] += 1 if first_index[idx] == -1: first_index[idx] = i # Find the first non-repeating character using the stored arrays min_index = len(s) for i in range(26): if freq[i] == 1: min_index = min(min_index, first_index[i]) # Return the first non-repeating character or empty string if none exists return s[min_index] if min_index < len(s) else \\"\\""},{"question":"Write a function to find the first non-repeating character in a given string. The function should take a string as input and return the first non-repeating character. If there is no such character, return an empty string. The function should: string: A string of characters. return: A single character that is the first non-repeating character or an empty string if every character repeats. You should write self-contained code starting with: ``` def task_func(input_string): ```","solution":"def task_func(input_string): Returns the first non-repeating character in the given string. If all characters are repeating, returns an empty string. char_count = {} # First pass to count the occurrences of each character for char in input_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first non-repeating character for char in input_string: if char_count[char] == 1: return char return \\"\\""},{"question":"** You are to manage a library of books using a class structure, allowing for basic operations such as adding new books, removing old ones, and searching for books by title or author. Each book is identified by its ISBN, which is a unique identifier. Your task is to implement a class `Library` with the following methods: 1. `add_book(isbn, title, author)`: Adds a new book to the library. 2. `remove_book(isbn)`: Removes a book from the library by its ISBN. 3. `find_by_title(title)`: Finds all books that match the given title. 4. `find_by_author(author)`: Finds all books written by the given author. 5. `list_books()`: Lists all the books currently in the library, sorted by title. Classes to implement: - `Book`: Represents a book with attributes `isbn`, `title`, and `author`. - `Library`: Manages a collection of `Book` objects and implements the requested functionality. Here is a skeleton you can start with: ```python class Book: def __init__(self, isbn, title, author): self.isbn = isbn self.title = title self.author = author class Library: def __init__(self): self.books = [] def add_book(self, isbn, title, author): # Add your code here def remove_book(self, isbn): # Add your code here def find_by_title(self, title): # Add your code here def find_by_author(self, author): # Add your code here def list_books(self): # Add your code here # Example usage: # library = Library() # library.add_book(\'123\', \'Python Programming\', \'John Doe\') # library.add_book(\'456\', \'Learn Algorithms\', \'Jane Smith\') # print(library.find_by_title(\'Python Programming\')) # print(library.find_by_author(\'Jane Smith\')) # library.remove_book(\'123\') # print(library.list_books()) ```","solution":"class Book: def __init__(self, isbn, title, author): self.isbn = isbn self.title = title self.author = author class Library: def __init__(self): self.books = [] def add_book(self, isbn, title, author): new_book = Book(isbn, title, author) self.books.append(new_book) def remove_book(self, isbn): self.books = [book for book in self.books if book.isbn != isbn] def find_by_title(self, title): return [book for book in self.books if book.title == title] def find_by_author(self, author): return [book for book in self.books if book.author == author] def list_books(self): sorted_books = sorted(self.books, key=lambda book: book.title) return sorted_books"},{"question":"Generate a class `CashRegister` that simulates a simple cash register. The class should support the following operations: `add_item(self, name, price)` to add an item to the register, `remove_item(self, name)` to remove an item, and `total(self)` which returns the total price of all items added. Ensure that you handle the case where an item that does not exist is attempted to be removed by raising a `ValueError`. The method signatures are as follows: - `add_item(self, name: str, price: float) -> None` - `remove_item(self, name: str) -> None` - `total(self) -> float` You should write the complete class with all necessary methods and member variables. The following code snippet provides a start: ``` class CashRegister: def __init__(self): self.items = {} def add_item(self, name, price): # code to add item def remove_item(self, name): # code to remove item def total(self): # code to calculate total ```","solution":"class CashRegister: def __init__(self): self.items = {} def add_item(self, name, price): if name in self.items: self.items[name] += price else: self.items[name] = price def remove_item(self, name): if name in self.items: del self.items[name] else: raise ValueError(f\\"Item \'{name}\' not found in the register\\") def total(self): return sum(self.items.values())"},{"question":"Write a function named `compare_means(data1, data2, alpha=0.05)` that conducts an independent two-sample t-test to compare the means of two datasets and returns the result of the hypothesis test. Your function should take in the following parameters: - `data1`: A list or numpy array of numerical values representing the first dataset. - `data2`: A list or numpy array of numerical values representing the second dataset. - `alpha`: A float representing the significance level, alpha (default is `0.05`). The goal of this function is to determine whether there is a statistically significant difference between the means of the two datasets. You must use the `scipy.stats.ttest_ind` function to perform the t-test. Here are the detailed steps your function should perform: 1. Import the necessary functions from `scipy.stats`. 2. Conduct an independent two-sample t-test using `ttest_ind`. 3. Determine if the p-value of the test is less than or equal to the significance level, `alpha`. 4. Return a dictionary containing the t-statistic, p-value, and a boolean indicating whether the null hypothesis (that the means are equal) is rejected. Ensure that your function is well-documented, includes error handling for input types, and adheres to best practices.","solution":"from scipy.stats import ttest_ind import numpy as np def compare_means(data1, data2, alpha=0.05): Conducts an independent two-sample t-test to compare the means of two datasets. Parameters: data1: list or numpy array of numerical values representing the first dataset data2: list or numpy array of numerical values representing the second dataset alpha: float, significance level (default is 0.05) Returns: dict: A dictionary containing the t-statistic, p-value, and a boolean indicating whether the null hypothesis (that the means are equal) is rejected. if not isinstance(data1, (list, np.ndarray)) or not isinstance(data2, (list, np.ndarray)): raise TypeError(\'data1 and data2 should be lists or numpy arrays of numerical values\') # Perform the t-test t_stat, p_value = ttest_ind(data1, data2) # Determine if the null hypothesis is rejected reject_null = p_value <= alpha return { \'t_statistic\': t_stat, \'p_value\': p_value, \'reject_null\': reject_null }"},{"question":"You are required to implement a function `find_most_frequent_words(text: str, k: int) -> List[str]` that receives a string `text` containing multiple words and an integer `k`. The function should return a list of the `k` most frequent words in the text, sorted by their frequency in descending order. In case two words have the same frequency, they should be sorted lexicographically (alphabetical order). Assume that the input text will be non-empty and consists of words separated by spaces. The words are case-sensitive (\\"Apple\\" and \\"apple\\" are considered different words). Here are the input parameters for the function: 1. `text` (str): A string containing the input text from which the most frequent words are to be found. 2. `k` (int): The number of top frequent words to return. **Constraints:** - The length of `text` will not exceed 10^6 characters. - The value of `k` will be a positive integer and will not exceed the number of unique words in the `text`. **Example Usage:** ```python text = \\"apple banana apple orange apple banana banana\\" k = 2 find_most_frequent_words(text, k) # Returns [\\"apple\\", \\"banana\\"] text = \\"a b a b c d e e e d c\\" k = 3 find_most_frequent_words(text, k) # Returns [\\"e\\", \\"a\\", \\"b\\"] ``` **Explanation:** In the first example, \\"apple\\" appears 3 times and \\"banana\\" appears 3 times, so they are the two most frequent words. In the second example, \\"e\\" appears 3 times, \\"a\\" and \\"b\\" appear 2 times each, making them the three most frequent words. In case of a tie in frequency, lexicographical order is considered for sorting.","solution":"from typing import List from collections import Counter def find_most_frequent_words(text: str, k: int) -> List[str]: Returns a list of the `k` most frequent words in the text, sorted by their frequency in descending order. In case of ties, words are sorted lexicographically. Parameters: - text (str): A string containing the input text from which the most frequent words are to be found. - k (int): The number of top frequent words to return. Returns: - List[str]: A list containing the `k` most frequent words in the text. # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Get the words sorted by frequency and then lexicographically sorted_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Extract the first `k` words most_frequent_words = [word for word, _ in sorted_words[:k]] return most_frequent_words"},{"question":"You are tasked with writing a function named `find_duplicate_substrings` that identifies duplicate substrings of a given length `k` in a string `s`. The function should return a list of all unique substrings of length `k` that appear more than once in `s`. Duplicate substrings contribute to DNA sequence research where recurring patterns might indicate significant biological markers or features. The problem requires you to handle cases where the string length is less than `k` and ensure the implementation is efficient for long strings up to length 10^4. Function Signature ```python def find_duplicate_substrings(s: str, k: int) -> List[str]: pass ``` Parameters 1. **s**: string, representing the sequence of characters. 2. **k**: integer, representing the length of substrings to look for. Returns - **List[str]**: a list of unique substrings of length `k` that appear more than once in the string `s`. # Requirements - Return an empty list if no substring of length `k` appears more than once. - Implement the function so it efficiently handles edge cases such as very short strings or very short/long `k` values. - Clearly comment on each step of your implementation to explain the logic. # Example Usage ```python s = \\"banana\\" k = 3 # Use the function result = find_duplicate_substrings(s, k) print(result) ``` # Expected Output ```python [\'ana\'] ``` # Constraints - The length of the string `s` should be up to 10^4. - The value of `k` should be between 1 and the length of the string `s`. # Approach - Use a sliding window to track all substrings of length `k` and a dictionary to count occurrences. - Consider using a set to keep track of duplicates for efficient lookup and unique results.","solution":"from typing import List def find_duplicate_substrings(s: str, k: int) -> List[str]: if k > len(s): return [] # If k is larger than the string, no substrings of length k can exist substring_count = {} duplicates = set() # Iterate over the string with a sliding window of size k for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in substring_count: substring_count[substring] += 1 else: substring_count[substring] = 1 if substring_count[substring] > 1: duplicates.add(substring) return list(duplicates)"},{"question":"Create a program that reads a text file containing a list of student names and their respective scores in CSV format. The program should then calculate the average score for each student and identify the top three students with the highest averages. It should output the names and average scores of these top three students. Notes: - Assume the input file is named \'students_scores.csv\' and follows the format: `Name,Score1,Score2,...,ScoreN` - The program should handle a varying number of scores for each student. - You should include error handling for cases where the file might not exist or data might be malformed. The function should output with: Names and average scores of the top three students. You should write self-contained code starting with: ``` import csv def calculate_averages(filename): try: students_scores = {} with open(filename, mode=\'r\') as file: reader = csv.reader(file) for row in reader: name = row[0] scores = list(map(float, row[1:])) average_score = sum(scores) / len(scores) if scores else 0 students_scores[name] = average_score top_students = sorted(students_scores.items(), key=lambda x: x[1], reverse=True)[:3] for student in top_students: print(f\'{student[0]}: {student[1]:.2f}\') except FileNotFoundError: print(f\\"The file {filename} does not exist.\\") except Exception as e: print(f\\"An error occurred: {e}\\") ```","solution":"import csv def calculate_averages(filename): try: students_scores = {} with open(filename, mode=\'r\') as file: reader = csv.reader(file) for row in reader: name = row[0] scores = list(map(float, row[1:])) average_score = sum(scores) / len(scores) if scores else 0 students_scores[name] = average_score top_students = sorted(students_scores.items(), key=lambda x: x[1], reverse=True)[:3] return [(student[0], round(student[1], 2)) for student in top_students] except FileNotFoundError: print(f\\"The file {filename} does not exist.\\") return [] except Exception as e: print(f\\"An error occurred: {e}\\") return []"},{"question":"In this exercise, you will implement a function called `sort_even_numbers` that processes a list of integers to sort only the even numbers, while leaving the odd numbers in their original positions. Specifically, the function will: 1. Identify all the even numbers in the list. 2. Sort the even numbers in ascending order. 3. Place the sorted even numbers back in their original positions in the list. # Function Signature: ```python def sort_even_numbers(numbers: list) -> list: ``` # Input: - `numbers: list` - A list of integers. # Output: - A list of integers where the even numbers are sorted in ascending order, and the odd numbers remain in their original positions. # Example: ```python numbers = [5, 3, 2, 8, 1, 4] # Expected Output: [5, 3, 2, 4, 1, 8] ``` # Constraints: - The input list will contain at least one integer. - The list may contain both positive and negative integers. - You should not use any additional list to store the original order of the odd numbers. # Instructions: - Implement the `sort_even_numbers` function to address the requirements detailed above. - Ensure the sorted even numbers are placed back in their original positions correctly. - Take care to handle edge cases, such as an empty list or a list with no even numbers.","solution":"def sort_even_numbers(numbers: list) -> list: Sorts only the even numbers in the list, leaving odd numbers in their original positions. # Extract even numbers and their indices even_numbers = [(index, num) for index, num in enumerate(numbers) if num % 2 == 0] # Sort the even numbers based on their values even_numbers_sorted = sorted(even_numbers, key=lambda x: x[1]) # Create a copy of the original list to modify result = numbers[:] # Replace the even numbers in the original list with the sorted ones for (original_index, _), (sorted_index, sorted_even) in zip(even_numbers, even_numbers_sorted): result[original_index] = sorted_even return result # Example usage numbers = [5, 3, 2, 8, 1, 4] print(sort_even_numbers(numbers)) # Expected output: [5, 3, 2, 4, 1, 8]"},{"question":"Given a text file containing a list of employee records, write a function named `get_average_salary_by_department` that reads the file and calculates the average salary of employees in each department. The function should be able to filter the records based on the provided department and job title. The filtering will be applied based on the parameters given: - **department**: A string representing the name of the department to filter the data by, or \\"all\\" to apply no department filter. - **job_title**: A string representing the job title to filter the data by, or \\"all\\" to apply no job title filter. Function signature: ```python def get_average_salary_by_department(file_path: str, department: str, job_title: str) -> dict: ``` **Input:** - The function takes three arguments: - `file_path` (type: str): the path to the employee records text file. - `department` (type: str): name of the department to filter by, or \\"all\\" to apply no department filter. - `job_title` (type: str): name of the job title to filter by, or \\"all\\" to apply no job title filter. **Output:** - The function returns a dictionary where the keys are department names and the values are the average salaries of employees in those departments. **Details:** 1. Use the `pandas.read_csv` function to load data from the text file into a DataFrame. 2. Convert the \'Salary\' column to numerical values. 3. Implement filtering based on the \'department\' and \'job_title\' parameters. 4. Calculate the average salary for each department after applying the necessary filters. Below is a sample text file structure that corresponds to the employee data (comma-separated values): ``` Name,Department,Job Title,Salary John Doe,Engineering,Senior Developer,120000 Jane Smith,Marketing,SEO Specialist,75000 Bob Johnson,Engineering,Junior Developer,80000 Alice Brown,HR,HR Manager,95000 Rebecca Davis,Marketing,Marketing Manager,100000 ``` **Requirements:** - Use the `pandas.read_csv` function to load the data from the text file. - Ensure correct handling of the \'Salary\' conversion to numerical values. - Apply appropriate filtering based on the department and job title. - Calculate and return the average salary by department as a dictionary. **Example Usage:** ```python average_salary = get_average_salary_by_department(\'employee_records.txt\', \'Engineering\', \'Senior Developer\') print(average_salary) # Output might be {\'Engineering\': 120000.0} ```","solution":"import pandas as pd def get_average_salary_by_department(file_path: str, department: str, job_title: str) -> dict: # Read data from the text file df = pd.read_csv(file_path) # Convert \'Salary\' column to numeric values df[\'Salary\'] = pd.to_numeric(df[\'Salary\']) # Apply filtering based on department if department != \\"all\\": df = df[df[\'Department\'] == department] # Apply filtering based on job_title if job_title != \\"all\\": df = df[df[\'Job Title\'] == job_title] # Calculate the average salary by department result = df.groupby(\'Department\')[\'Salary\'].mean().to_dict() return result"},{"question":"You are given a directory containing multiple text files. Each file contains records of sales data for a different store, formatted as comma-separated values with two columns: `product_id` and `units_sold`. Your task is to implement a function `aggregate_sales` that takes the path to this directory as input, reads all the text files, aggregates the sales data by `product_id`, and writes the results to a new CSV file named `total_sales.csv` with columns `product_id` and `total_units_sold`. Specifically, your function should: 1. Read all the text files in the specified directory. 2. Aggregate the total number of units sold for each product across all files. 3. Write the aggregated sales data to `total_sales.csv`, sorted by `product_id`. The function should be named `aggregate_sales` and accept one parameter: `directory_path`. Example: ```python def aggregate_sales(directory_path): # Your code here ``` Ensure you handle errors such as missing files, empty directories, or improperly formatted data gracefully, logging appropriate error messages without stopping the execution of the program.","solution":"import os import csv from collections import defaultdict def aggregate_sales(directory_path): sales_data = defaultdict(int) try: # Read all text files in the specified directory for filename in os.listdir(directory_path): if filename.endswith(\'.txt\'): filepath = os.path.join(directory_path, filename) with open(filepath, newline=\'\') as csvfile: reader = csv.reader(csvfile) for row in reader: try: product_id, units_sold = row sales_data[product_id] += int(units_sold) except ValueError: print(f\\"Skipping improperly formatted row in file {filename}: {row}\\") except FileNotFoundError: print(f\\"The directory {directory_path} does not exist.\\") return except PermissionError: print(f\\"Permission denied for accessing the directory {directory_path}.\\") return # Write the aggregated sales data to total_sales.csv with open(\'total_sales.csv\', mode=\'w\', newline=\'\') as csvfile: writer = csv.writer(csvfile) writer.writerow([\'product_id\', \'total_units_sold\']) for product_id in sorted(sales_data.keys()): writer.writerow([product_id, sales_data[product_id]])"},{"question":"In graph theory, a connected component is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. Write a function named `find_connected_components` that: - Takes a single argument `graph` (a dictionary), representing an undirected graph where keys are node labels and values are sets of labels of adjacent nodes. - Returns a list of sets, where each set contains the nodes in one connected component of the graph. The function should use depth-first search (DFS) or breadth-first search (BFS) to explore the graph and identify the connected components. **Function signature:** ```python def find_connected_components(graph: dict) -> list: pass ``` **Example:** ```python graph = { \'A\': {\'B\', \'C\'}, \'B\': {\'A\', \'D\'}, \'C\': {\'A\'}, \'D\': {\'B\'}, \'E\': {\'F\'}, \'F\': {\'E\'} } connected_components = find_connected_components(graph) print(connected_components) # Output: [{\'A\', \'B\', \'C\', \'D\'}, {\'E\', \'F\'}] ```","solution":"def find_connected_components(graph): Finds all connected components in an undirected graph. Parameters: graph (dict): A dictionary representing an undirected graph where keys are node labels and values are sets of labels of adjacent nodes. Returns: list: A list of sets, each containing nodes of one connected component. def dfs(node, visited, component): Helper function to perform depth-first search. visited.add(node) component.add(node) for neighbor in graph[node]: if neighbor not in visited: dfs(neighbor, visited, component) visited = set() components = [] for node in graph: if node not in visited: component = set() dfs(node, visited, component) components.append(component) return components"},{"question":"You are given a dataset containing information about various movies such as their titles, genres, and ratings. Your task is to write a function to determine the top N highest-rated movies for each genre. The function will take in a list of dictionaries, where each dictionary represents a movie with keys: \'title\', \'genre\', and \'rating\'. Create a function called `top_movies_by_genre` which takes in a list of dictionaries (`movies`) and an integer (`N`), and returns a new dictionary with genres as the keys and a list of the top N movies (represented as their titles) as the values. The movies\' dataset might have multiple genres associated with each movie, separated by commas. You should consider each genre independently to compute the top N movies for each genre. Function Signature: ```python def top_movies_by_genre(movies: list, N: int) -> dict: ``` Example: ```python movies = [ {\\"title\\": \\"Movie A\\", \\"genre\\": \\"Action, Thriller\\", \\"rating\\": 8.2}, {\\"title\\": \\"Movie B\\", \\"genre\\": \\"Action, Drama\\", \\"rating\\": 7.9}, {\\"title\\": \\"Movie C\\", \\"genre\\": \\"Drama\\", \\"rating\\": 9.1}, {\\"title\\": \\"Movie D\\", \\"genre\\": \\"Thriller\\", \\"rating\\": 7.5}, {\\"title\\": \\"Movie E\\", \\"genre\\": \\"Comedy\\", \\"rating\\": 6.3}, {\\"title\\": \\"Movie F\\", \\"genre\\": \\"Action\\", \\"rating\\": 8.5}, {\\"title\\": \\"Movie G\\", \\"genre\\": \\"Comedy, Drama\\", \\"rating\\": 7.8} ] result = top_movies_by_genre(movies, 2) print(result) ``` Expected Output: ``` { \\"Action\\": [\\"Movie F\\", \\"Movie A\\"], \\"Thriller\\": [\\"Movie A\\", \\"Movie D\\"], \\"Drama\\": [\\"Movie C\\", \\"Movie B\\"], \\"Comedy\\": [\\"Movie G\\", \\"Movie E\\"] } ``` In this task, you will apply the following concepts: - Data manipulation and sorting. - Parsing and handling multi-genre information. - Efficient data structure usage for quick lookups and organization based on specified criteria.","solution":"def top_movies_by_genre(movies: list, N: int) -> dict: from collections import defaultdict from heapq import nlargest genre_to_movies = defaultdict(list) # Split the genres and populate the genre_to_movies dictionary for movie in movies: title = movie[\'title\'] rating = movie[\'rating\'] genres = movie[\'genre\'].split(\', \') for genre in genres: genre_to_movies[genre].append({\'title\': title, \'rating\': rating}) # For each genre, get the top N highest-rated movies top_movies = {} for genre, movies_list in genre_to_movies.items(): top_n_movies = nlargest(N, movies_list, key=lambda x: x[\'rating\']) top_n_titles = [movie[\'title\'] for movie in top_n_movies] top_movies[genre] = top_n_titles return top_movies"},{"question":"# Background This problem involves transforming data from one format to another. Specifically, you will read data from a nested JSON format and convert it into a nested dictionary format that facilitates fast lookups. # Objective You are required to implement a function `transform_data(json_data)` which takes in a JSON data structure and converts it to a nested dictionary format. The JSON data represents a hierarchical structure of categories and subcategories. The nested dictionary format should allow quick access to any category or subcategory and its corresponding information. # Details Example JSON Data The JSON data looks like this: ```json { \\"categories\\": [ { \\"name\\": \\"Electronics\\", \\"id\\": 1, \\"subcategories\\": [ {\\"name\\": \\"Computers\\", \\"id\\": 10}, {\\"name\\": \\"Mobile Phones\\", \\"id\\": 11} ] }, { \\"name\\": \\"Home Appliances\\", \\"id\\": 2, \\"subcategories\\": [ {\\"name\\": \\"Refrigerators\\", \\"id\\": 20}, {\\"name\\": \\"Washing Machines\\", \\"id\\": 21} ] } ] } ``` Expected Nested Dictionary Format The transformed nested dictionary should look like this: ```python { 1: { \\"name\\": \\"Electronics\\", \\"subcategories\\": { 10: {\\"name\\": \\"Computers\\"}, 11: {\\"name\\": \\"Mobile Phones\\"} } }, 2: { \\"name\\": \\"Home Appliances\\", \\"subcategories\\": { 20: {\\"name\\": \\"Refrigerators\\"}, 21: {\\"name\\": \\"Washing Machines\\"} } } } ``` # Function Specifications **Function Name:** `transform_data` **Parameter:** - `json_data`: A dictionary representing the JSON data that contains a list of categories, where each category includes a name, an id, and a list of subcategories (each having a name and an id). **Returns:** - A nested dictionary with the id as the key for categories and subcategories, as described above. # Example Usage: ```python json_data = { \\"categories\\": [ { \\"name\\": \\"Electronics\\", \\"id\\": 1, \\"subcategories\\": [ {\\"name\\": \\"Computers\\", \\"id\\": 10}, {\\"name\\": \\"Mobile Phones\\", \\"id\\": 11} ] }, { \\"name\\": \\"Home Appliances\\", \\"id\\": 2, \\"subcategories\\": [ {\\"name\\": \\"Refrigerators\\", \\"id\\": 20}, {\\"name\\": \\"Washing Machines\\", \\"id\\": 21} ] } ] } result = transform_data(json_data) ``` # Additional Notes: - Ensure that the `transform_data` function handles cases where subcategories might be absent. - Assume the input JSON data structure is always valid and follows the given format.","solution":"def transform_data(json_data): Transform the JSON data into a nested dictionary with fast lookups. Args: - json_data: Dictionary representing JSON data with hierarchical categories and subcategories. Returns: - A nested dictionary with ids as keys for categories and subcategories. result = {} for category in json_data[\'categories\']: cat_id = category[\'id\'] cat_name = category[\'name\'] subcategories = category.get(\'subcategories\', []) transformed_subcategories = {} for subcategory in subcategories: sub_id = subcategory[\'id\'] sub_name = subcategory[\'name\'] transformed_subcategories[sub_id] = {\'name\': sub_name} result[cat_id] = {\'name\': cat_name, \'subcategories\': transformed_subcategories} return result"},{"question":"Write a function `is_palindromic_permutation(s: str) -> bool` that determines if any permutation of the input string `s` forms a palindrome. A palindrome is a word or phrase that is the same forwards and backwards (ignoring spaces, punctuation, and case). For instance, \\"racecar\\" is a palindrome, while \\"hello\\" is not. Your function should perform the following tasks: 1. **Ignore Non-alphanumeric Characters:** Remove all characters from the string that are not letters or digits. 2. **Case Insensitivity:** Treat uppercase and lowercase letters as the same. 3. **Check for Palindromic Permutation:** Determine if there is any permutation of the string that can form a palindrome. A string can be permuted to form a palindrome if at most one character has an odd count. You may only use standard libraries such as `collections.Counter` for counting characters. # Example: ```python print(is_palindromic_permutation(\\"civic\\")) # Output: True (civic is already a palindrome) print(is_palindromic_permutation(\\"ivicc\\")) # Output: True (can be rearranged to civic) print(is_palindromic_permutation(\\"hello\\")) # Output: False (no permutation forms a palindrome) print(is_palindromic_permutation(\\"\\")) # Output: True (an empty string is trivially a palindrome) print(is_palindromic_permutation(\\"A man, a plan, a canal, Panama\\")) # Output: True (can be rearranged ignoring non alphanumerics) ``` # Constraints: - The input string `s` will have a length between `0` and `1000`. - The input string `s` may contain punctuation and special characters, and spaces. # Function Signature: ```python def is_palindromic_permutation(s: str) -> bool: pass ```","solution":"from collections import Counter import re def is_palindromic_permutation(s: str) -> bool: Determines if any permutation of the input string `s` forms a palindrome. :param s: Input string :return: Boolean indicating if any permutation of the string forms a palindrome # Remove all non-alphanumeric characters and convert to lowercase cleaned_str = re.sub(r\'[^a-zA-Z0-9]\', \'\', s).lower() # Count the occurrences of each character char_count = Counter(cleaned_str) # Check the number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be permuted to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Write a function `custom_sorted_list(input_list)` that takes a list of dictionaries as its input and returns a sorted list based on two keys provided within the dictionaries. The sorting should be performed first by the values of `key1` in ascending order and in the case of a tie, second by the values of `key2` in descending order. Each dictionary in the list will contain `key1` and `key2`. # Input: - `input_list` (List of dictionaries): A list of dictionaries, where each dictionary contains `key1` and `key2`. # Output: - Return a list of dictionaries sorted based on the specified criteria. # Special Requirements: 1. Make use of Python\'s `sorted()` function with a custom sort key. 2. Ensure the solution correctly handles ties by applying the secondary sort order. # Steps: 1. Use the `sorted()` function to sort the list. 2. Define a lambda function as the key for the sort, where `key1` is sorted in ascending order and ties are resolved by sorting `key2` in descending order. # Example: ```python input_list = [{\'key1\': 2, \'key2\': 3}, {\'key1\': 2, \'key2\': 5}, {\'key1\': 1, \'key2\': 4}, {\'key1\': 2, \'key2\': 4}] custom_sorted_list(input_list) should return: [{\'key1\': 1, \'key2\': 4}, {\'key1\': 2, \'key2\': 5}, {\'key1\': 2, \'key2\': 4}, {\'key1\': 2, \'key2\': 3}] ``` Implement `custom_sorted_list` to match the described functionality.","solution":"def custom_sorted_list(input_list): Sorts the input list of dictionaries first by \'key1\' in ascending order and then by \'key2\' in descending order. return sorted(input_list, key=lambda x: (x[\'key1\'], -x[\'key2\']))"},{"question":"You are required to create a function `matrix_transpose(matrix)` that transposes a given 2D matrix. The function should conform to the following requirements: 1. The function should handle non-square matrices (i.e., matrices where the number of rows and columns are not equal). 2. It should maintain the data type consistency of the matrix elements. 3. Avoid using built-in Python libraries like NumPy for this task; you should implement the transpose logic manually. 4. The input matrix will always be a 2D list of lists where each sublist represents a row. The transpose of a matrix is obtained by flipping the matrix over its diagonal, switching the row and column indices of the matrix. For example, the transpose of a 2x3 matrix `[[1, 2, 3], [4, 5, 6]]` is `[[1, 4], [2, 5], [3, 6]]`. Here is the function signature you need to implement: ```python def matrix_transpose(matrix): # Your implementation here pass ``` # Example Usage ```python # Example 1 matrix_1 = [ [1, 2, 3], [4, 5, 6] ] print(matrix_transpose(matrix_1)) # Output: [[1, 4], [2, 5], [3, 6]] # Example 2 matrix_2 = [ [1, 2], [3, 4], [5, 6] ] print(matrix_transpose(matrix_2)) # Output: [[1, 3, 5], [2, 4, 6]] ``` # Constraints - You can assume the input matrix will always be a valid 2D list with at least one element.","solution":"def matrix_transpose(matrix): Returns the transpose of the given 2D matrix. Args: matrix (list of list of int/float): 2D matrix to be transposed Returns: list of list of int/float: Transposed matrix # Get the number of rows and columns in the original matrix rows = len(matrix) cols = len(matrix[0]) # Create an empty matrix with dimensions swapped transposed = [[None] * rows for _ in range(cols)] # Fill the transposed matrix by swapping rows and columns for row in range(rows): for col in range(cols): transposed[col][row] = matrix[row][col] return transposed"},{"question":"This function accepts a string input containing an arithmetic expression involving addition, subtraction, multiplication, or division. It then calculates and returns the result of the expression. The expression will be properly formatted with spaces separating the operators and operands. Note that: - The input string will contain non-negative integers and the operators +, -, *, /. - Division should be treated as integer division. - The order of operations should be respected (multiplication and division before addition and subtraction). - No parentheses will be present in the input string. The function should output with: int: The result of the arithmetic expression. You should write self-contained code starting with: ``` def evaluate_expression(expression): ``` Here\'s an example of what the function should do: ``` evaluate_expression(\\"3 + 2 * 2\\") # Output: 7 evaluate_expression(\\" 3/2 \\") # Output: 1 evaluate_expression(\\" 3+5 / 2 \\") # Output: 5 ```","solution":"def evaluate_expression(expression): def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) # split the expression into tokens tokens = expression.split() values = [] operators = [] precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} i = 0 while i < len(tokens): if tokens[i].isdigit(): values.append(int(tokens[i])) elif tokens[i] in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[tokens[i]]): apply_operator(operators, values) operators.append(tokens[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"You need to implement a function `custom_dataframe_operations` to perform specific operations on a given pandas DataFrame based on a set of Boolean flags. The function should apply filters, perform arithmetic operations and potentially transform the DataFrame based on the operation flags provided. Function Signature: ```python def custom_dataframe_operations(df: pd.DataFrame, filter_: bool, add: bool, drop_na: bool, cumsum: bool, normalize: bool) -> pd.DataFrame: pass ``` # Input: - **df** (pd.DataFrame): The input DataFrame on which the operations will be performed. - **filter_** (bool): If `True`, filter the rows where values in the column \'A\' are greater than 10. - **add** (bool): If `True`, add a new column \'D\' where each entry is the sum of columns \'A\' and \'B\'. - **drop_na** (bool): If `True`, drop any rows with NaN values in columns \'A\' or \'B\'. - **cumsum** (bool): If `True`, replace column \'B\' with the cumulative sum of its values. - **normalize** (bool): If `True`, normalize the DataFrame so that each column is scaled to [0, 1]. # Output: - Return the modified DataFrame based on the operations specified by the flags. # Details: 1. **Filtering:** - If `filter_` is `True`, filter the DataFrame such that only rows where column \'A\' has a value greater than 10 are retained. 2. **Adding Column:** - If `add` is `True`, add a new column \'D\' to the DataFrame with each entry being the sum of columns \'A\' and \'B\'. 3. **Dropping NaNs:** - If `drop_na` is `True`, drop rows that have any NaN values in columns \'A\' or \'B\'. 4. **Cumulative Sum:** - If `cumsum` is `True`, replace the entries of column \'B\' with the cumulative sum of its values. 5. **Normalization:** - If `normalize` is `True`, normalize all columns in the DataFrame to have values between 0 and 1. Normalization should be done column-wise. # Example: ```python import pandas as pd data = { \'A\': [12, 4, 7, 16, 20], \'B\': [5, 9, 6, 11, 14], \'C\': [2, 8, 5, 9, 6] } df = pd.DataFrame(data) result = custom_dataframe_operations(df, filter_=True, add=True, drop_na=False, cumsum=False, normalize=True) print(result) ``` # Important: - Ensure to handle all flag combinations properly. - Testing and handling edge cases are important for robustness.","solution":"import pandas as pd def custom_dataframe_operations(df: pd.DataFrame, filter_: bool, add: bool, drop_na: bool, cumsum: bool, normalize: bool) -> pd.DataFrame: if filter_: df = df[df[\'A\'] > 10] if add: df[\'D\'] = df[\'A\'] + df[\'B\'] if drop_na: df = df.dropna(subset=[\'A\', \'B\']) if cumsum: df[\'B\'] = df[\'B\'].cumsum() if normalize: df = (df - df.min()) / (df.max() - df.min()) return df"},{"question":"You are required to write a function that normalizes a given list of integers to a 0-1 scale and then plots the normalized values on a line graph. The function should use the Matplotlib library to create the plot. Specifically, you will write a function called `normalize_and_plot` that accepts a list of integers. The function should first normalize the list of integers so that the minimum value becomes 0 and the maximum value becomes 1. Then, it should plot these normalized values on a line graph. **Function Signature:** ```python def normalize_and_plot(values): # Your code here ``` **Parameters:** - `values`: A list of integers representing the values to be normalized and plotted. **Requirements:** 1. Normalize the list of integers so that the minimum value is 0 and the maximum value is 1. 2. Use Matplotlib\'s `plot` function to create the line graph of the normalized values. 3. The x-axis should represent the indices of the original list, and the y-axis should represent the normalized values. 4. Ensure that the figure has a title `\\"Normalized Values Line Plot\\"`. **Example:** ```python values = [10, 20, 30, 25, 15, 5] normalize_and_plot(values) ``` Expected behavior: The function should plot a line graph of the normalized values of the list `[10, 20, 30, 25, 15, 5]` with the title \\"Normalized Values Line Plot\\". The x-axis should display the indices `[0, 1, 2, 3, 4, 5]` and the y-axis should display the corresponding normalized values.","solution":"import matplotlib.pyplot as plt def normalize_and_plot(values): Normalizes a list of integers to a 0-1 scale and plots the normalized values on a line graph. Parameters: values (list): A list of integers to be normalized and plotted. if not values: raise ValueError(\\"The list of values cannot be empty\\") min_val = min(values) max_val = max(values) if min_val == max_val: raise ValueError(\\"Normalization is not possible when all values are the same\\") normalized_values = [(val - min_val) / (max_val - min_val) for val in values] plt.figure() plt.plot(range(len(values)), normalized_values, marker=\'o\') plt.title(\\"Normalized Values Line Plot\\") plt.xlabel(\\"Index\\") plt.ylabel(\\"Normalized Value\\") plt.grid(True) plt.show()"},{"question":"In this problem, you will implement a simplified version of the classic Tic-Tac-Toe game for two players. Your task is to write a class named `TicTacToe` that allows two players to take turns to place their marks (either `X` or `O`) on a 3x3 board. The class should be able to determine the winner or if the game ends in a draw. Your class `TicTacToe` should have the following methods: 1. `__init__(self)`: Initialize the game board to be a 3x3 grid of empty spaces. 2. `print_board(self)`: Print the current state of the game board. 3. `make_move(self, row, col, player)`: Place the player\'s mark on the board at the specified row and column. Player can be \'X\' or \'O\'. Validate the move (row and col should be within bounds and the cell should be empty). Return `True` if the move is successful, `False` otherwise. 4. `check_winner(self)`: Check if there is a winner. Return \'X\' if player \'X\' has won, \'O\' if player \'O\' has won, or `None` if there is no winner yet. # Example Usage ```python game = TicTacToe() game.print_board() # Output: # _ _ _ # _ _ _ # _ _ _ game.make_move(0, 0, \'X\') game.print_board() # Output: # X _ _ # _ _ _ # _ _ _ game.make_move(1, 1, \'O\') game.print_board() # Output: # X _ _ # _ O _ # _ _ _ # Continue playing until a player wins or the board is full winner = game.check_winner() if winner: print(f\\"Player {winner} wins!\\") elif not any(\'_\' in row for row in game.board): print(\\"The game is a draw!\\") else: print(\\"Game continues.\\") ``` # Notes - Assume that the players always take valid turns alternating between \'X\' and \'O\'. - The `print_board` method should display an empty space as `_`. - The `check_winner` method only needs to check for a winner after a move is made. It does not need to constantly validate the board.","solution":"class TicTacToe: def __init__(self): Initialize the game board to be a 3x3 grid of empty spaces. self.board = [[\'_\' for _ in range(3)] for _ in range(3)] def print_board(self): Print the current state of the game board. for row in self.board: print(\' \'.join(row)) def make_move(self, row, col, player): Place the player\'s mark on the board at the specified row and column. Validate the move. :param row: int - row index (0, 1, or 2) :param col: int - column index (0, 1, or 2) :param player: str - player\'s mark (\'X\' or \'O\') :return: bool - True if the move is successful, False otherwise if 0 <= row < 3 and 0 <= col < 3 and self.board[row][col] == \'_\': self.board[row][col] = player return True return False def check_winner(self): Check if there is a winner. :return: str - \'X\' if player \'X\' has won, \'O\' if player \'O\' has won, None if there is no winner yet. lines = ( # Check rows [self.board[i] for i in range(3)] + # Check columns [[self.board[i][j] for i in range(3)] for j in range(3)] + # Check diagonals [[self.board[i][i] for i in range(3)]] + [[self.board[i][2-i] for i in range(3)]] ) for line in lines: if line[0] == line[1] == line[2] and line[0] != \'_\': return line[0] return None"},{"question":"**Task**: Create a function `rotate_matrix(matrix: List[List[int]]) -> List[List[int]]` that takes a 2D list `matrix` representing an NxN matrix and rotates it 90 degrees clockwise. **Parameters**: - `matrix`: A 2D list of integers of shape `[N][N]`, where `N` is the number of rows and columns of the matrix. **Functionality**: The function will rotate the given NxN matrix 90 degrees clockwise. Ensure that your function handles the rotation in place to optimize the space complexity. **Constraints**: - The function should handle edge cases where the matrix has only one element or is an empty matrix. - The function should not use any extra space for another matrix; instead, it should modify the given matrix in place. **Example**: ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: N = len(matrix) for i in range(N // 2): for j in range(i, N - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[N - 1 - j][i] matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j] matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i] matrix[j][N - 1 - i] = temp return matrix matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated_matrix = rotate_matrix(matrix) print(rotated_matrix) ``` **Output**: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` **Explanation**: 1. The element at `matrix[0][0]` moves to `matrix[0][2]`. 2. The element at `matrix[0][1]` moves to `matrix[1][2]`. 3. The element at `matrix[0][2]` moves to `matrix[2][2]`. 4. This pattern continues for the rest of the elements, effectively rotating the matrix 90 degrees clockwise.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: N = len(matrix) for i in range(N // 2): for j in range(i, N - i - 1): temp = matrix[i][j] matrix[i][j] = matrix[N - 1 - j][i] matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j] matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i] matrix[j][N - 1 - i] = temp return matrix"},{"question":"You are given a list of dictionaries called `user_data`, where each dictionary contains information about users in an online course. The keys in the dictionaries are \\"name\\", \\"email\\", \\"progress\\", and \\"completed\\". The \\"progress\\" value is a float between 0 and 1 representing the user\'s progress in the course, and \\"completed\\" is a boolean indicating whether the user has finished the course. Your task is to implement the function `generate_course_report(user_data)`, which will: 1. Calculate the average progress of users who have not completed the course. 2. Create a new field \\"status\\" in each dictionary that should be set to \\"Completed\\" if the user has finished the course, otherwise \\"In Progress\\". 3. Return a dictionary with the calculated average progress and the updated list of user dictionaries. **Function Signature:** ```python def generate_course_report(user_data: list) -> dict: pass ``` # Implementation Steps: 1. Initialize variables to calculate the average progress for users who have not completed the course. 2. Iterate through the `user_data` list to update each dictionary with the \\"status\\" field. 3. Calculate and store the average progress of users who have not completed the course. 4. Return a dictionary containing the average progress and the updated list. # Example: Given the `user_data` list: ```python [ {\\"name\\": \\"Alice\\", \\"email\\": \\"alice@example.com\\", \\"progress\\": 0.5, \\"completed\\": False}, {\\"name\\": \\"Bob\\", \\"email\\": \\"bob@example.com\\", \\"progress\\": 1.0, \\"completed\\": True}, {\\"name\\": \\"Charlie\\", \\"email\\": \\"charlie@example.com\\", \\"progress\\": 0.8, \\"completed\\": False} ] ``` The function should return: ```python { \\"average_progress\\": 0.65, \\"user_data\\": [ {\\"name\\": \\"Alice\\", \\"email\\": \\"alice@example.com\\", \\"progress\\": 0.5, \\"completed\\": False, \\"status\\": \\"In Progress\\"}, {\\"name\\": \\"Bob\\", \\"email\\": \\"bob@example.com\\", \\"progress\\": 1.0, \\"completed\\": True, \\"status\\": \\"Completed\\"}, {\\"name\\": \\"Charlie\\", \\"email\\": \\"charlie@example.com\\", \\"progress\\": 0.8, \\"completed\\": False, \\"status\\": \\"In Progress\\"} ] } ``` #","solution":"def generate_course_report(user_data): Generate a report for the course users Args: user_data (list): List of dictionaries containing user info. Returns: dict: A dictionary containing the average progress of users who have not completed the course and the updated user data with status. total_progress = 0 count_in_progress = 0 for user in user_data: if user[\\"completed\\"]: user[\\"status\\"] = \\"Completed\\" else: user[\\"status\\"] = \\"In Progress\\" total_progress += user[\\"progress\\"] count_in_progress += 1 average_progress = total_progress / count_in_progress if count_in_progress > 0 else 0 return { \\"average_progress\\": average_progress, \\"user_data\\": user_data }"},{"question":"Generate a new list of strings from the given list by reversing each string only if its length is an odd number. The function should raise an error with the message \\"Invalid input: list of strings required\\" if the input is not a list or if it contains non-string elements. The function should return the new list after processing each string. You should write self-contained code starting with: ``` def task_func(lst): ```","solution":"def task_func(lst): Generate a new list of strings by reversing each string only if its length is an odd number. Args: lst (list): List of strings to process. Returns: list: New list with the required strings reversed. Raises: ValueError: If the input is not a list or contains non-string elements. if not isinstance(lst, list): raise ValueError(\\"Invalid input: list of strings required\\") for item in lst: if not isinstance(item, str): raise ValueError(\\"Invalid input: list of strings required\\") new_lst = [s[::-1] if len(s) % 2 != 0 else s for s in lst] return new_lst"},{"question":"You need to write a function named `weather_data_aggregator` that retrieves historical weather data for a given city from an open weather API, processes the data to calculate average monthly temperatures, and returns a cleaned Pandas DataFrame. This problem will help you learn how to use the Pandas library to handle API data and aggregate time-series data. Here is what you need to do in your function: 1. Make a GET request to the Open Weather API to retrieve historical weather data for the past year for a given city. 2. Check if the API request was successful. If not, print an error message. 3. Convert the JSON response into a Pandas DataFrame. 4. Ensure the DataFrame contains columns for date and temperature. 5. Convert the date column to datetime objects and extract the month and year. 6. Calculate the average temperature for each month. 7. Return the cleaned DataFrame with columns `year`, `month`, and `average_temperature`. API Endpoint (for example purpose only, endpoint and key may vary): `http://api.openweathermap.org/data/2.5/onecall/timemachine?lat={lat}&lon={lon}&dt={time}&appid=<your_api_key>` To achieve this, you need to import and use the `pandas` and `requests` libraries. **Function Signature:** ```python def weather_data_aggregator(city: str) -> pd.DataFrame: ``` # Requirements: 1. You must use the `pandas` library for DataFrame operations. 2. The function takes a city name as a parameter. 3. It should return a cleaned Pandas DataFrame as described above. # Example: If the JSON response from the API looks like this (simplified): ```json [ {\\"dt\\": 1618317040, \\"temp\\": 285.68}, {\\"dt\\": 1618403440, \\"temp\\": 287.15}, ... ] ``` After processing, the resulting DataFrame should look like: ``` year month average_temperature 0 2020 4 285.9 1 2020 5 287.6 ... ``` # Constraints: - You can assume that the API key provided in the problem will always be valid. - You need to handle errors gracefully (e.g., printing an error message if the API request fails). - Date and temperature data must be correctly handled and averaged per month. # Libraries to use: - Requests for HTTP requests - Pandas for data manipulation # References: - [pandas.DataFrame Documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html) - [pandas.to_datetime Documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)","solution":"import requests import pandas as pd from datetime import datetime, timedelta def weather_data_aggregator(city: str) -> pd.DataFrame: Retrieves historical weather data for a given city, processes the data to calculate average monthly temperatures, and returns a cleaned Pandas DataFrame. # Dummy city to coordinate mapping (extend as needed) city_coords = { \\"London\\": {\\"lat\\": 51.5074, \\"lon\\": -0.1278}, \\"New York\\": {\\"lat\\": 40.7128, \\"lon\\": -74.0060}, \\"Tokyo\\": {\\"lat\\": 35.682839, \\"lon\\": 139.759455}, } if city not in city_coords: raise ValueError(f\\"Coordinates for city \'{city}\' not found.\\") lat = city_coords[city][\'lat\'] lon = city_coords[city][\'lon\'] api_key = \\"<your_api_key>\\" # replace with your actual API key # Fetch data from the past year (API may need adjustment based on actual endpoint format) one_year_ago = int((datetime.now() - timedelta(days=365)).timestamp()) url = f\\"http://api.openweathermap.org/data/2.5/onecall/timemachine?lat={lat}&lon={lon}&dt={one_year_ago}&appid={api_key}\\" response = requests.get(url) if response.status_code != 200: raise Exception(f\\"API request failed with status code {response.status_code}\\") json_data = response.json() # Assuming json_data is a list of dictionaries with \'dt\' and \'temp\' weather_data = [{\'date\': datetime.fromtimestamp(item[\'dt\']), \'temperature\': item[\'temp\']} for item in json_data] df = pd.DataFrame(weather_data) # Ensure the DataFrame contains a \'date\' and \'temperature\' column df[\'date\'] = pd.to_datetime(df[\'date\']) df[\'month\'] = df[\'date\'].dt.month df[\'year\'] = df[\'date\'].dt.year # Calculate the average temperature for each month cleaned_df = df.groupby([\'year\', \'month\']).agg({\'temperature\': \'mean\'}).reset_index() cleaned_df.rename(columns={\'temperature\': \'average_temperature\'}, inplace=True) return cleaned_df"},{"question":"You are tasked with writing a function called `calculate_string_score` to compute a special score for a given string based on the frequency of its characters. The function should take one argument, a string, and return an integer score. The score is calculated by following these steps: 1. Compute the frequency of each character in the string. 2. Sum the squares of the frequencies of each character. For example, for the string \\"abbccc\\": - The frequency of \'a\' = 1 - The frequency of \'b\' = 2 - The frequency of \'c\' = 3 The score would be calculated as follows: - 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 Thus, the score for the string \\"abbccc\\" is 14. If the input string is empty, the function should return 0. For instance: ```python input: \'abbccc\' output: 14 input: \'aaaa\' output: 16 input: \'\' output: 0 ``` **You may assume the string contains only lowercase letters.**","solution":"def calculate_string_score(s): Calculate the score of the string based on the frequency of its characters. The score is the sum of the squares of the frequencies of each character. :param s: input string :return: integer score from collections import Counter # Compute the frequency of each character. freq = Counter(s) # Sum the squares of the frequencies. score = sum(f ** 2 for f in freq.values()) return score"},{"question":"You are required to write a Python function that reads a CSV file containing information about different fruits and their quantities, processes the data, and returns a dictionary where the keys are the fruit names and the values are their total quantities. The CSV file has two columns: `Fruit` and `Quantity`. The function should: 1. Read the CSV file. 2. Process the data to calculate the total quantity for each fruit. 3. Return a dictionary with fruit names as keys and their total quantities as values. The function signature should be: ```python def calculate_fruit_quantities(csv_filename: str) -> dict: ``` **Requirements:** - Use Python\'s built-in CSV module to read the file. - Handle cases where the CSV file may be empty or missing. - Consider possible data inconsistencies, such as duplicate fruit entries in the CSV file, and ensure all quantities are summed correctly. - Provide appropriate comments and ensure the code is clean and readable. **Example Usage:** ```python csv_filename = \'fruits.csv\' fruit_quantities = calculate_fruit_quantities(csv_filename) print(fruit_quantities) ``` Here, if the `fruits.csv` file contained: ``` Fruit,Quantity Apple,10 Banana,5 Apple,3 Orange,7 ``` The output would be: ```python {\'Apple\': 13, \'Banana\': 5, \'Orange\': 7} ```","solution":"import csv from collections import defaultdict def calculate_fruit_quantities(csv_filename: str) -> dict: Reads a CSV file containing fruit names and their quantities, processes the data, and returns a dictionary where keys are fruit names and values are their total quantities. fruit_quantities = defaultdict(int) try: with open(csv_filename, mode=\'r\', newline=\'\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: fruit = row[\'Fruit\'] try: quantity = int(row[\'Quantity\']) fruit_quantities[fruit] += quantity except ValueError: continue except FileNotFoundError: print(f\\"Error: The file \'{csv_filename}\' does not exist.\\") return dict(fruit_quantities)"},{"question":"# Problem Overview You are tasked with implementing a function that simulates a simple database query system. The function will perform filtering, selecting, and ordering on a list of dictionaries representing rows in a database table. The filtering should be based on specified conditions, the selection should include specified fields, and the ordering should be based on a specified field in either ascending or descending order. The function should be named `query_db` and follow the provided specifications. # Function Signature ```python def query_db(rows, conditions=None, fields=None, order_by=None, ascending=True): Arguments: rows (list): A list of dictionaries where each dictionary represents a row in the database table. conditions (dict): A dictionary with field names as keys and values as the filtering criteria. fields (list): A list of field names to be selected. order_by (str): The field name by which the result should be ordered. ascending (bool): A boolean indicating whether the order should be ascending or descending. Default is True (ascending). Returns: list: A list of dictionaries representing the filtered, selected, and ordered rows. ``` # Detailed Explanation Your task is to implement a function that processes the list of rows by following these steps: 1. **Filtering**: Filter the rows based on the specified conditions. Each condition in the `conditions` dictionary will be a key-value pair where the key is the field name and the value is the value to filter by. 2. **Selecting**: After filtering, select only the specified fields from each row. If no fields are specified, retain all fields. 3. **Ordering**: Finally, order the resulting rows based on the specified `order_by` field. The order should be ascending by default but can be set to descending by using the `ascending` parameter. # Requirements - The function should handle cases where no conditions, fields, or order_by parameters are provided, i.e., it should return the unfiltered rows with all fields in their original order. - Ensure that the function can handle an empty list of rows. - Properly document and raise errors for invalid arguments, such as non-existent fields in conditions or order_by. # Example Here\'s an example usage of the function: ```python db_rows = [ {\'id\': 1, \'name\': \'Alice\', \'age\': 30}, {\'id\': 2, \'name\': \'Bob\', \'age\': 25}, {\'id\': 3, \'name\': \'Charlie\', \'age\': 35}, {\'id\': 4, \'name\': \'David\', \'age\': 40} ] # Example query with conditions, selected fields, and ordering conditions = {\'age\': 30} fields = [\'id\', \'name\'] order_by = \'name\' result = query_db(rows=db_rows, conditions=conditions, fields=fields, order_by=order_by) # Expected output: # [{\'id\': 1, \'name\': \'Alice\'}] print(result) ```","solution":"def query_db(rows, conditions=None, fields=None, order_by=None, ascending=True): Arguments: rows (list): A list of dictionaries where each dictionary represents a row in the database table. conditions (dict): A dictionary with field names as keys and values as the filtering criteria. fields (list): A list of field names to be selected. order_by (str): The field name by which the result should be ordered. ascending (bool): A boolean indicating whether the order should be ascending or descending. Default is True (ascending). Returns: list: A list of dictionaries representing the filtered, selected, and ordered rows. if conditions: rows = [row for row in rows if all(row.get(k) == v for k, v in conditions.items())] if fields: rows = [{k: row[k] for k in fields} for row in rows] if order_by: rows = sorted(rows, key=lambda x: x[order_by], reverse=not ascending) return rows"},{"question":"Your task is to write a function called `validate_and_calculate_bill` that takes a list of purchased items and their quantities, and calculates the total bill based on given prices stored in an SQLite file named `inventory.db`. The function should verify that the purchased items exist in the database and have sufficient stock before calculating the bill. The function should return the total bill amount if all items are valid and in stock, and raise appropriate exceptions otherwise. Details: - The function should use SQLite\'s `sqlite3.connect` to connect to the database `inventory.db`. - The table `inventory` in the `inventory.db` database has the following columns: `item_name` (TEXT), `price` (REAL), and `quantity_available` (INTEGER). - Use parameterized queries to prevent SQL injection. Function Signature: ```python def validate_and_calculate_bill(purchased_items: List[Tuple[str, int]]) -> float: pass ``` **Input:** - `purchased_items` (List[Tuple[str, int]]): A list of tuples, each containing the item name (str) and the quantity to purchase (int). **Output:** - Returns the total bill amount (float) if all items are valid and in stock. **Exceptions:** - Raises a `ValueError` with the message \\"Item {item_name} not found\\" if an item is not found in the database. - Raises a `ValueError` with the message \\"Insufficient stock for {item_name}\\" if the available quantity is less than the purchased quantity. **Note:** - Ensure the function uses `sqlite3.connect` to connect to the database. [Library Api Requirements] - `sqlite3.connect`","solution":"import sqlite3 from typing import List, Tuple def validate_and_calculate_bill(purchased_items: List[Tuple[str, int]]) -> float: Calculates the total bill based on the purchased items after verifying their availability in the inventory. Args: purchased_items (List[Tuple[str, int]]): A list of tuples, each containing the item name and quantity to purchase. Returns: float: The total bill amount if all items are valid and in stock. Raises: ValueError: If an item is not found or there is insufficient stock. total_bill = 0.0 # Connect to the SQLite database conn = sqlite3.connect(\'inventory.db\') cursor = conn.cursor() for item_name, purchased_quantity in purchased_items: cursor.execute(\'SELECT price, quantity_available FROM inventory WHERE item_name = ?\', (item_name,)) result = cursor.fetchone() if result is None: conn.close() raise ValueError(f\\"Item {item_name} not found\\") price, quantity_available = result if purchased_quantity > quantity_available: conn.close() raise ValueError(f\\"Insufficient stock for {item_name}\\") total_bill += price * purchased_quantity conn.close() return total_bill"},{"question":"You are asked to implement a function called `calculate_kth_largest` to find the k-th largest element in an unsorted array. The function will take an integer `k` and a list of integers `nums` as input and return the k-th largest element in the list. The function `calculate_kth_largest` should perform the following steps: 1. Ensure the input list `nums` is non-empty and `k` is a valid index. 2. Sort the list in descending order. 3. Return the element that corresponds to the k-th largest position (1-based index). Your task is to implement this function in Python. The use of the built-in `sorted` function is mandatory. ```python def calculate_kth_largest(k, nums): Find the k-th largest element in an unsorted array. Parameters: k : int The k-th largest element to find. nums : list List of integers. Returns: int The k-th largest element in the list. # Your implementation here pass ``` For example: ```python assert calculate_kth_largest(1, [3, 2, 1, 5, 6, 4]) == 6 assert calculate_kth_largest(2, [3, 2, 1, 5, 6, 4]) == 5 assert calculate_kth_largest(4, [3, 2, 3, 1, 2, 4, 5, 5, 6]) == 4 ```","solution":"def calculate_kth_largest(k, nums): Find the k-th largest element in an unsorted array. Parameters: k : int The k-th largest element to find. nums : list List of integers. Returns: int The k-th largest element in the list. if not nums or k <= 0 or k > len(nums): return None # Invalid input case # Sort the list in descending order sorted_nums = sorted(nums, reverse=True) # Return the k-th largest element (1-based index) return sorted_nums[k - 1]"},{"question":"You have been assigned the task of developing a data processing function in Python for a simple billing system. The function should be named `calculateBill`. This function will take a dictionary as an input, where each key represents a customer\'s name and the value is another dictionary containing the list of items they purchased and their respective costs. The function will calculate the total cost for each customer and return a new dictionary where each key is a customer\'s name and the associated value is the total cost of their purchase. Here\'s the format of the input dictionary: ```python { \\"Customer1\\": {\\"item1\\": 20.5, \\"item2\\": 5.0}, \\"Customer2\\": {\\"item1\\": 15.75, \\"item3\\": 12.0}, # more customers... } ``` The corresponding output dictionary should look like: ```python { \\"Customer1\\": 25.5, \\"Customer2\\": 27.75, # calculated costs for more customers... } ``` # Requirements: 1. Define the function `calculateBill(customers)`. 2. Iterate through each customer in the input dictionary. 3. Sum the cost of items for each customer. 4. Store the total cost in a new dictionary with the customer\'s name as the key. 5. Return the new dictionary with the computed total costs. Your task is to complete the `calculateBill` function according to the above specifications. Make sure to handle any edge cases, such as customers with no items. ```python def calculateBill(customers): # Your code here ```","solution":"def calculateBill(customers): Calculate the total cost of purchases for each customer. :param customers: Dict[str, Dict[str, float]], customer names as keys and their respective item-cost dictionary as values. :return: Dict[str, float], customer names as keys and their total purchase cost as values. total_costs = {} for customer, items in customers.items(): total_cost = sum(items.values()) total_costs[customer] = total_cost return total_costs"},{"question":"Given the task and the style of existing questions, the following question aligns closely in terms of complexity and programming concepts. You are required to write a function named `simulate_markov_chain` that simulates the behavior of a Markov Chain. You are provided with the following input parameters for the function `simulate_markov_chain` and you need to modify the given base template to meet the requirements. The input parameters for the function `simulate_markov_chain` should be: - `transition_matrix`: a 2D numpy array representing the transition probabilities between states. - `initial_state`: an integer representing the initial state. - `steps`: an integer representing the number of steps for the simulation. The function should perform the following tasks: 1. **Initialize Variables**: Set the initial state and prepare to store the sequence of states over the simulation steps. 2. **Simulation Loop**: Iterate for the given number of steps, updating the current state based on the transition probabilities. 3. **Generate State Sequence**: Store the sequence of states traversed during the simulation. 4. **Visualization**: - Plot the state sequence using `matplotlib.pyplot.plot`. - Include a legend for the initial state and transitions using `matplotlib.pyplot.legend`. - Include labels and a grid in the plot using `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, and `matplotlib.pyplot.grid`. Here is the base template to get you started: ```python import numpy as np import matplotlib.pyplot as plt def simulate_markov_chain(transition_matrix, initial_state, steps): # Initialize Variables current_state = initial_state state_sequence = [current_state] # Simulation Loop for _ in range(steps): current_state = np.random.choice(len(transition_matrix), p=transition_matrix[current_state]) state_sequence.append(current_state) # Visualization plt.plot(state_sequence, marker=\'o\', linestyle=\'-\', label=\'State transitions\') plt.title(\'Markov Chain State Transitions\') plt.xlabel(\'Steps\') plt.ylabel(\'State\') plt.legend(loc=\'upper left\') plt.grid(True) plt.show() # Example Usage: # transition_matrix = np.array([[0.6, 0.4], [0.3, 0.7]]) # initial_state = 0 # steps = 20 # simulate_markov_chain(transition_matrix, initial_state, steps) ``` #","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_markov_chain(transition_matrix, initial_state, steps): Simulates a Markov Chain given a transition matrix, an initial state, and a number of steps. Parameters: transition_matrix (numpy.ndarray): A 2D array representing transition probabilities between states. initial_state (int): The starting state. steps (int): The number of steps to simulate. Returns: list: A sequence of states traversed during the simulation. # Initialize Variables current_state = initial_state state_sequence = [current_state] # Simulation Loop for _ in range(steps): current_state = np.random.choice(len(transition_matrix), p=transition_matrix[current_state]) state_sequence.append(current_state) # Visualization plt.plot(state_sequence, marker=\'o\', linestyle=\'-\', label=\'State transitions\') plt.title(\'Markov Chain State Transitions\') plt.xlabel(\'Steps\') plt.ylabel(\'State\') plt.legend(loc=\'upper left\') plt.grid(True) plt.show() return state_sequence"},{"question":"Given a list of strings containing various programming languages along with their release years, write a function that categorizes each language based on its release decade (e.g., 1970s, 1980s, etc.) and returns a dictionary where the keys are the decades and the values are lists of programming languages released in those decades. You should write self-contained code starting with: ``` def categorize_languages_by_decade(language_list): ```","solution":"def categorize_languages_by_decade(language_list): Categorizes programming languages by their release decade. Args: language_list (list of str): A list of strings where each string is in the format \'LanguageName Year\'. Returns: dict: A dictionary where keys are the decades (e.g., \'1970s\') and values are lists of languages released in those decades. categorized_languages = {} for entry in language_list: language, year = entry.rsplit(\' \', 1) year = int(year) decade = (year // 10) * 10 decade_str = f\\"{decade}s\\" if decade_str not in categorized_languages: categorized_languages[decade_str] = [] categorized_languages[decade_str].append(language) return categorized_languages"},{"question":"You are given a directory that contains multiple text files. Each text file contains a list of numbers, one number per line. Your task is to write a function named `aggregate_numbers` that reads numbers from all text files in the specified directory, aggregates them, and writes the aggregated data to a new text file named `aggregated.txt`. Specifically, the function should: 1. Iterate through all text files in the given directory. 2. Read numbers from each file and sum them up, maintaining a running total. 3. Calculate the count of numbers processed. 4. Calculate the average of the numbers. 5. Write three lines to `aggregated.txt`: - The total sum of all numbers. - The count of the numbers. - The average of the numbers, formatted to two decimal places. **Function Signature** ```python def aggregate_numbers(directory_path: str) -> None: pass ``` **Example Usage** ```python # Suppose the directory_path contains the following files: # - file1.txt with numbers: 1, 2, 3 # - file2.txt with numbers: 4, 5 # - file3.txt with numbers: 6, 7, 8, 9 aggregate_numbers(\'/path/to/directory\') # The resulting aggregated.txt should contain: # Total Sum: 45 # Count: 9 # Average: 5.00 ``` You may use the `os` and `glob` libraries to assist with file handling.","solution":"import os import glob def aggregate_numbers(directory_path: str) -> None: total_sum = 0 count = 0 # Iterate over all txt files in the directory for txt_file in glob.glob(os.path.join(directory_path, \'*.txt\')): with open(txt_file, \'r\') as file: for line in file: number = int(line.strip()) total_sum += number count += 1 # Compute average average = total_sum / count if count != 0 else 0.00 # Write to aggregated.txt with open(os.path.join(directory_path, \'aggregated.txt\'), \'w\') as outfile: outfile.write(f\\"Total Sum: {total_sum}n\\") outfile.write(f\\"Count: {count}n\\") outfile.write(f\\"Average: {average:.2f}n\\")"},{"question":"In this problem, you are required to design a function named `transform_and_validate_dates` that reads a CSV file containing a list of dates in various formats and performs the following operations: 1. Identify and standardize the date format to `YYYY-MM-DD`. 2. Validate each date to ensure it is a valid calendar date. 3. Separate valid dates from invalid dates. 4. Save the valid dates to one CSV file and the invalid dates to another. # Dataset: The CSV file contains a single column named `date` with dates in multiple formats such as: - `01/22/2021` - `2021.01.22` - `January 22, 2021` - `2021-01-22` - etc. # Requirements: 1. Use `pandas` for data manipulation. 2. Use `dateutil.parser` from `dateutil` to standardize dates. 3. Handle exceptions for invalid dates. The function will: 1. Load the CSV file. 2. Convert all dates to the format `YYYY-MM-DD`. 3. Separate dates into valid and invalid. 4. Save the valid dates to a file named `valid_dates.csv` and invalid dates to a file named `invalid_dates.csv`. # Function Signature: ```python def transform_and_validate_dates(file_path: str) -> None: pass ``` Input: - `file_path (str)`: Path to the input CSV file containing various date formats. Output: - Two CSV files: `valid_dates.csv` and `invalid_dates.csv`. # Example: ```python transform_and_validate_dates(\'path/to/your/datesfile.csv\') ``` **Note:** The function does not return anything but writes two CSV files - one containing valid dates and one containing invalid dates. # Constraints: 1. Assume the dates are in a single column named `date`. 2. Invalid dates can be any non-date string or incorrectly formatted date string.","solution":"import pandas as pd from dateutil import parser from dateutil.parser import ParserError import os def transform_and_validate_dates(file_path: str) -> None: Reads a CSV containing dates in various formats, standardizes dates to \'YYYY-MM-DD\', validates them, and separates valid and invalid dates into two CSV files. Args: file_path (str): Path to the input CSV file containing various date formats. # Load the CSV file into a DataFrame df = pd.read_csv(file_path) # Initialize lists to store valid and invalid dates valid_dates = [] invalid_dates = [] for date_str in df[\'date\']: try: # Parse the date string to a datetime object date_obj = parser.parse(date_str) # Convert the datetime object to \'YYYY-MM-DD\' format standardized_date = date_obj.strftime(\'%Y-%m-%d\') valid_dates.append(standardized_date) except (ParserError, ValueError): # Handle invalid dates invalid_dates.append(date_str) # Create DataFrames for valid and invalid dates valid_df = pd.DataFrame(valid_dates, columns=[\'date\']) invalid_df = pd.DataFrame(invalid_dates, columns=[\'date\']) # Save the DataFrames to CSV files valid_df.to_csv(\'valid_dates.csv\', index=False) invalid_df.to_csv(\'invalid_dates.csv\', index=False)"},{"question":"You are tasked with creating a function `circular_queue_simulation` that simulates a circular queue. A circular queue is a linear data structure that follows the FIFO (First In First Out) principle but connects the last position back to the first position to make a circle. Your function should: 1. Initialize the circular queue with a specified capacity. 2. Implement enqueue and dequeue operations to add and remove elements from the circular queue respectively. 3. Prevent overflow and underflow conditions by checking the status of the queue before performing enqueue and dequeue operations. 4. Provide a method to get the current status of the queue, indicating which elements are present and their order. Here are the required operations: - `enqueue(value)` to add an element to the end of the queue. - `dequeue()` to remove an element from the front of the queue. - `queue_status()` to return a list of the current elements in the queue in order. Within these operations: - If an element is added to a full queue, raise an `OverflowError` with the message `\\"Queue is full\\"`. - If an element is removed from an empty queue, raise an `IndexError` with the message `\\"Queue is empty\\"`. Here is the signature of the class you need to implement: ```python class CircularQueue: def __init__(self, capacity): pass def enqueue(self, value): pass def dequeue(self): pass def queue_status(self): pass ``` **Example Usage:** ```python cq = CircularQueue(3) cq.enqueue(1) cq.enqueue(2) print(cq.queue_status()) # Output: [1, 2] cq.enqueue(3) print(cq.queue_status()) # Output: [1, 2, 3] cq.dequeue() print(cq.queue_status()) # Output: [2, 3] cq.enqueue(4) print(cq.queue_status()) # Output: [2, 3, 4] cq.enqueue(5) # Raises OverflowError: Queue is full ```","solution":"class CircularQueue: def __init__(self, capacity): self.capacity = capacity self.queue = [None] * capacity self.front = 0 self.rear = -1 self.size = 0 def enqueue(self, value): if self.size == self.capacity: raise OverflowError(\\"Queue is full\\") self.rear = (self.rear + 1) % self.capacity self.queue[self.rear] = value self.size += 1 def dequeue(self): if self.size == 0: raise IndexError(\\"Queue is empty\\") value = self.queue[self.front] self.queue[self.front] = None self.front = (self.front + 1) % self.capacity self.size -= 1 return value def queue_status(self): status = [] for i in range(self.size): index = (self.front + i) % self.capacity status.append(self.queue[index]) return status"},{"question":"You are required to implement a function that clusters a given dataset using the K-Means clustering algorithm and provides a summary of the resulting clusters. The function should be able to normalize the data before clustering, if specified. Function Specification: **Function Name:** `perform_kmeans_clustering` **Parameters:** - `data`: A 2-dimensional list of numerical values where each sub-list represents a data point. - `num_clusters`: An integer specifying the number of clusters. - `normalize`: A boolean indicating whether to normalize the data before clustering. **Returns:** - A dictionary containing the following keys: - `\'centroids\'`: A list of lists where each sub-list represents the coordinates of a cluster centroid. - `\'cluster_labels\'`: A list of integers where each value indicates the cluster label assigned to the corresponding data point. - `\'inertia\'`: A float representing the sum of squared distances of samples to their closest cluster center. - `\'silhouette_score\'`: A float representing the mean Silhouette Coefficient of all samples. Details: 1. If `normalize` is `True`, scale the data such that each feature has a mean of 0 and a standard deviation of 1 before performing clustering. Use `StandardScaler` from `sklearn.preprocessing` for normalization. 2. Use `KMeans` from `sklearn.cluster` to perform the clustering. 3. After fitting the model, retrieve the cluster centroids, cluster labels for each data point, and the inertia. 4. Compute the Silhouette Coefficient using `silhouette_score` from `sklearn.metrics`, which requires the original data points and the assigned cluster labels. 5. Return the results as a dictionary with keys `\'centroids\'`, `\'cluster_labels\'`, `\'inertia\'`, and `\'silhouette_score\'`. To handle diverse datasets, ensure the function checks for reasonable input values and raises value errors when necessary. The function should be efficient enough to handle larger datasets within a reasonable time frame. # Example Usage: ```python data = [ [1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0] ] results = perform_kmeans_clustering(data, 2, True) print(results) ``` In this example, a dataset containing six 2-dimensional points is clustered into two groups, and the results are outputted in the specified format.","solution":"from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler from sklearn.metrics import silhouette_score import numpy as np def perform_kmeans_clustering(data, num_clusters, normalize=True): Perform K-Means clustering on the given dataset. Parameters: - data (list of list of float): The dataset, each sub-list is a data point. - num_clusters (int): The number of clusters for K-Means. - normalize (bool): Whether to normalize the data before clustering. Returns: - dict: Containing the cluster centroids, cluster labels, inertia, and silhouette score. if not data or not isinstance(num_clusters, int) or num_clusters <= 0: raise ValueError(\\"Invalid input data or number of clusters\\") # Convert data to numpy array data_np = np.array(data) # Normalize data if specified if normalize: scaler = StandardScaler() data_np = scaler.fit_transform(data_np) # Perform K-Means clustering kmeans = KMeans(n_clusters=num_clusters) kmeans.fit(data_np) # Retrieve clustering results centroids = kmeans.cluster_centers_ labels = kmeans.labels_ inertia = kmeans.inertia_ silhouette = silhouette_score(data_np, labels) return { \'centroids\': centroids.tolist(), \'cluster_labels\': labels.tolist(), \'inertia\': inertia, \'silhouette_score\': silhouette }"},{"question":"You are required to write a function named `organize_directory` that organizes files in a given directory based on their extensions. The function will scan a specified directory for files and create subdirectories for each file extension. The files will then be moved into the corresponding subdirectory. **Function Signature:** ```python def organize_directory(path: str) -> None: ``` **Parameters:** - `path`: A string representing the path to the directory to be organized. **Returns:** - None. The function will perform in-place operations to organize files in the specified directory. **Constraints:** 1. Use the `os` and `shutil` libraries for directory operations and file moving. 2. Ensure that only files are moved, and directories within the specified path are not affected. 3. If a file does not have an extension, it should be moved to a subdirectory named \'no_extension\'. 4. The function should handle edge cases where the specified directory is empty or contains no files. **Requirements:** - Import necessary modules: `os` and `shutil`. - Ensure the function handles situations where the subdirectory for a particular extension already exists. - Ensure clear and informative exception handling for issues such as invalid paths or file access permissions. Write the function `organize_directory` to accurately and efficiently organize the files by their extensions into corresponding subdirectories.","solution":"import os import shutil def organize_directory(path: str) -> None: Organizes files in the given directory based on their extensions. Parameters: path (str): The path to the directory to be organized. Returns: None if not os.path.isdir(path): raise ValueError(f\\"The specified path {path} is not a directory or does not exist.\\") for item in os.listdir(path): item_path = os.path.join(path, item) if os.path.isfile(item_path): if \'.\' in item: extension = item.split(\'.\')[-1] else: extension = \'no_extension\' subdirectory = os.path.join(path, extension) if not os.path.exists(subdirectory): os.makedirs(subdirectory) shutil.move(item_path, os.path.join(subdirectory, item))"},{"question":"In this problem, you are required to write a function `match_pattern` that finds and returns all the starting indices where a given pattern occurs in a given text. The function should: 1. Take two arguments: a string `text` and a string `pattern`. 2. Return a list of integers representing the starting indices where the pattern is found in the text. You may use any string manipulation methods or libraries to achieve this task. Consider edge cases such as empty strings and overlapping patterns. # Function Signature ```python def match_pattern(text, pattern): pass ``` # Example ```python print(match_pattern(\\"abracadabra\\", \\"abra\\")) print(match_pattern(\\"aaaaa\\", \\"aa\\")) print(match_pattern(\\"mississippi\\", \\"issi\\")) ``` **Output:** ``` [0, 7] [0, 1, 2, 3] [1, 4] ``` # Constraints - The patterns are case-sensitive (i.e., \'A\' is different from \'a\'). - If the pattern is an empty string, return an empty list. - Ensure the function is efficient for longer texts and patterns. - Avoid using built-in functions that directly solve the problem such as `str.find`. Ensure your function is well-documented and test its correctness with different input cases.","solution":"def match_pattern(text, pattern): Returns a list of starting indices where the pattern occurs in the given text. Parameters: text (str): The string where the pattern is to be searched. pattern (str): The string to search within the text. Returns: list: A list of integers representing the starting indices where the pattern is found. # If the pattern is empty, return an empty list if not pattern: return [] pattern_length = len(pattern) text_length = len(text) result = [] for i in range(text_length - pattern_length + 1): # Check if the pattern matches the substring of text starting at index i if text[i:i + pattern_length] == pattern: result.append(i) # Store the starting index return result"},{"question":"# Problem: Counting Islands in a Grid You are required to write a function `count_islands(grid)` to determine the number of islands in a given 2D grid. An island is formed by grouping adjacent \'1\'s (vertical or horizontal) and is bounded by water, represented by \'0\'s. # Input - The input `grid` is a 2D list (list of lists) where each element is either \'1\' (part of an island) or \'0\' (water). # Output - The function should return an integer representing the number of islands in the grid. # Function Signature ```python def count_islands(grid: List[List[str]]) -> int: pass ``` # Requirements - Traverse the grid and identify all isolated clusters of \'1\'s. - Adjacency is defined as either vertical or horizontal (not diagonal). - Modify the grid or use auxiliary data structures as needed to keep track of visited cells. # Example Usage ```python grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] output = count_islands(grid) # Output should be 3 ``` # Assumptions - The grid will not contain any characters other than \'1\' and \'0\'. - The dimensions of the grid are such that they can fit into memory. # Objectives - Implement the `count_islands` function that correctly identifies and counts islands in the grid. - Properly handle traversal and boundary checking within the grid. - Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore each island.","solution":"from typing import List def count_islands(grid: List[List[str]]) -> int: if not grid: return 0 def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # Mark as visited # Explore all 4 directions dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(i, j) return count"},{"question":"** Develop a function that takes a list of strings and returns a list of those strings that are palindromes. A palindrome is a word that reads the same backward as forward. This problem will help you understand how to manipulate and analyze strings in Python. Your function should be named `find_palindromes` and should have the following signature: ```python def find_palindromes(words: list) -> list: ``` **Function Specification:** - **Input:** A single parameter `words` which is a list of strings. - If the input is not a list or contains non-string elements, the function should return the string `\'Invalid input.\'`. - **Output:** A list of strings that are palindromes. **Details:** 1. Ensure that `words` is a list and all elements in the list are strings. If not, return the error message. 2. Check each string to determine if it is a palindrome. 3. A string is considered a palindrome if it reads the same backward as forward (case-sensitive). 4. Collect all palindromes in a new list and return that list. **Example:** Given the following `words`: ```python [\\"radar\\", \\"hello\\", \\"level\\", \\"world\\", \\"madam\\"] ``` Your function should return: ```python [\\"radar\\", \\"level\\", \\"madam\\"] ``` **Constraints:** - Ensure efficient and clean code ensuring readability and reusability. - Do not use any libraries except for Python standard libraries. ---","solution":"def find_palindromes(words: list) -> list: This function takes a list of strings and returns a list of those strings that are palindromes. # Check if input is a list if not isinstance(words, list): return \'Invalid input.\' # Check if all elements in the list are strings if not all(isinstance(word, str) for word in words): return \'Invalid input.\' # Find palindromes palindromes = [word for word in words if word == word[::-1]] return palindromes"},{"question":"# Problem: Rotating a Matrix 90 Degrees You are provided with a square matrix (2D list) and your task is to rotate it 90 degrees clockwise. Write a function `rotate_matrix_90(matrix: List[List[int]]) -> List[List[int]]` that performs the following operations: 1. **Transpose the matrix**: Convert all rows of the matrix to columns to create the transposed matrix. 2. **Reverse each row of the transposed matrix**: Reverse the order of elements in each row to get the rotated matrix. # Function Signature ```python def rotate_matrix_90(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input - `matrix` (`List[List[int]]`): A 2D list representing a square matrix of integers. # Output - Returns a new 2D list that represents the input matrix rotated 90 degrees clockwise. # Example ```python # Input matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] # Expected Output # The output will be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] # Explanation: # Step 1: Transpose the matrix to get: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] # Step 2: Reverse each row to get the final rotated matrix: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` # Constraints - The given matrix is always a square matrix (N x N) where (1 leq N leq 50). **Note**: This problem challenges your understanding of matrix manipulation and transformation techniques.","solution":"from typing import List def rotate_matrix_90(matrix: List[List[int]]) -> List[List[int]]: Rotates a given square matrix 90 degrees clockwise. :param matrix: List of Lists representing the square matrix. :returns: List of Lists representing the rotated matrix. n = len(matrix) # Step 1: Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(n): matrix[i].reverse() return matrix"},{"question":"This function analyzes a list of numerical data representing temperatures recorded over a month. It computes the average daily temperature for each day, identifies the three highest temperatures, and detects any potential outliers using the 1.5*IQR rule. The outliers should be returned in a separate list. Import required libraries as needed. Note that: The function should handle any errors from non-numeric or missing data gracefully by skipping those entries. The output should include a DataFrame with columns \'Day\' and \'Average Temperature\', and a list of outliers. The function should output: tuple(pandas.DataFrame, list): A DataFrame with each day and its average temperature, and a list of outliers. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def analyze_temperatures(data): ```","solution":"import pandas as pd import numpy as np def analyze_temperatures(data): Analyzes a list of numerical data representing temperatures recorded over a month. Parameters: - data: List of tuples where each tuple contains the day and the temperature recorded on that day, e.g., [(1, 23), (1, 24), ..., (30, 22)] Returns: - tuple(pandas.DataFrame, list): A DataFrame with each day and its average temperature, and a list of outliers. # Filter out non-numeric or missing data filtered_data = [(day, temp) for day, temp in data if isinstance(day, int) and isinstance(temp, (int, float))] # Convert to DataFrame df = pd.DataFrame(filtered_data, columns=[\'Day\', \'Temperature\']) # Calculate average temperature for each day avg_temps = df.groupby(\'Day\')[\'Temperature\'].mean().reset_index() avg_temps.columns = [\'Day\', \'Average Temperature\'] # Identify outliers using the 1.5*IQR rule Q1 = df[\'Temperature\'].quantile(0.25) Q3 = df[\'Temperature\'].quantile(0.75) IQR = Q3 - Q1 lower_bound = Q1 - 1.5 * IQR upper_bound = Q3 + 1.5 * IQR outliers = df[(df[\'Temperature\'] < lower_bound) | (df[\'Temperature\'] > upper_bound)][\'Temperature\'].tolist() return avg_temps, outliers"},{"question":"Develop a function called `inventory_management` that manages the inventory of products in a store. The function should take two arguments: `current_inventory`, a dictionary representing the current inventory of products (where keys are product names and values are the quantities), and `transactions`, a list of tuples representing transactions. Each tuple contains three elements: the transaction type (`\'add\'` or `\'remove\'`), the product name, and the quantity. The function should process each transaction in order: 1. If the transaction type is `\'add\'`, increase the quantity of the product in the current inventory by the given quantity. If the product does not exist in the inventory, add it with the given quantity. 2. If the transaction type is `\'remove\'`, decrease the quantity of the product in the current inventory by the given quantity. If the resulting quantity is less than or equal to zero, remove the product from the inventory. 3. Ignore any transactions that result in a negative quantity of a product in the inventory. The function should return the updated inventory as a dictionary after processing all transactions. Here is the function signature you need to implement: ```python def inventory_management(current_inventory: dict, transactions: list) -> dict: ... ``` **Examples:** ```python # Example 1 current_inventory = {\'apple\': 50, \'banana\': 30} transactions = [(\'add\', \'apple\', 10), (\'remove\', \'banana\', 15), (\'remove\', \'orange\', 5)] print(inventory_management(current_inventory, transactions)) # Output: {\'apple\': 60, \'banana\': 15} # Example 2 current_inventory = {\'pen\': 20, \'notebook\': 10} transactions = [(\'add\', \'pen\', 5), (\'remove\', \'notebook\', 15), (\'remove\', \'pen\', 25)] print(inventory_management(current_inventory, transactions)) # Output: {\'pen\': 25} ```","solution":"def inventory_management(current_inventory: dict, transactions: list) -> dict: for transaction in transactions: trans_type, product, quantity = transaction if trans_type == \'add\': if product in current_inventory: current_inventory[product] += quantity else: current_inventory[product] = quantity elif trans_type == \'remove\': if product in current_inventory: current_inventory[product] -= quantity if current_inventory[product] <= 0: del current_inventory[product] return current_inventory"},{"question":"**Create a function called `sort_by_frequency` that takes a list of integers as input and returns a new list where the integers are sorted by their frequency in descending order. If two integers have the same frequency, their relative order should be the same as in the original list. Specifically, you need to implement a function `sort_by_frequency(lst)` where: - `lst` is a list of integers. The function should: 1. Count the frequency of each integer in the input list. 2. Sort the integers by their frequency in descending order. 3. If two integers have the same frequency, maintain their order as in the original input list. You can use a dictionary to keep track of the frequencies and the `sorted` function with a custom key to sort the integers by their frequency and order. Here is a skeleton to help you get started: ```python def sort_by_frequency(lst): # Count frequencies of each integer in lst # Sort the integers by their frequency (and by their first appearance in the list for those with the same frequency) pass # Example usage: # sort_by_frequency([4, 5, 6, 5, 4, 3]) should return [4, 4, 5, 5, 6, 3] # sort_by_frequency([9, 9, 9, 3, 3, 4, 4, 4]) should return [9, 9, 9, 4, 4, 4, 3, 3] ``` Write the complete implementation for the `sort_by_frequency` function based on the provided description.","solution":"def sort_by_frequency(lst): from collections import Counter # Count frequencies of each integer in lst frequency = Counter(lst) # Sort the integers by their frequency (and by their first appearance in the list for those with the same frequency) sorted_lst = sorted(lst, key=lambda x: (-frequency[x], lst.index(x))) return sorted_lst # Example usage: # sort_by_frequency([4, 5, 6, 5, 4, 3]) should return [4, 4, 5, 5, 6, 3] # sort_by_frequency([9, 9, 9, 3, 3, 4, 4, 4]) should return [9, 9, 9, 4, 4, 4, 3, 3]"},{"question":"You are given a list of tuples representing start and end times of various meetings throughout a single day. Each tuple is of the format `(start_time, end_time)`, where `start_time` and `end_time` are both strings in the \\"HH:MM\\" format. Your task is to write a function that merges all overlapping meetings into single time intervals and returns the result as a list of tuples. The merged intervals should be in the same \\"HH:MM\\" format and sorted by start time. Overlapping meetings or meetings that touch (e.g., one ends exactly when the next one starts) should be combined into a single meeting interval. # Function Signature ```python def merge_meetings(meetings: List[Tuple[str, str]]) -> List[Tuple[str, str]]: ``` # Parameters - `meetings`: A list of tuples, where each tuple contains two strings representing the start and end times of a meeting. # Returns - A list of tuples with merged meeting intervals, sorted by start time. # Example ```python meetings = [(\\"09:00\\", \\"10:30\\"), (\\"11:00\\", \\"11:30\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:30\\", \\"12:00\\"), (\\"12:30\\", \\"13:00\\")] merged_meetings = merge_meetings(meetings) print(merged_meetings) # Output: [(\'09:00\', \'11:30\'), (\'12:30\', \'13:00\')] ``` # Requirements - Convert the \\"HH:MM\\" strings to a time format that allows for easy comparison. - Sort the meetings by their start time. - Iterate through the meetings and merge overlapping or touching time intervals. - Convert the merged time intervals back to the \\"HH:MM\\" format before returning them. - Ensure the resulting list of merged intervals is sorted by the start time. # Constraints - The input list may have meetings in any order and may contain overlapping or non-overlapping intervals. - The start and end times are all within a single day. # Notes - The function should handle edge cases like a single meeting or multiple meetings that do not overlap at all. - Use of libraries for date and time manipulation such as `datetime` is recommended for handling the \\"HH:MM\\" format efficiently.","solution":"from typing import List, Tuple from datetime import datetime def merge_meetings(meetings: List[Tuple[str, str]]) -> List[Tuple[str, str]]: def convert_to_datetime(time_str): return datetime.strptime(time_str, \\"%H:%M\\") # Convert meeting times to datetime for easy comparison meetings_dt = [(convert_to_datetime(start), convert_to_datetime(end)) for start, end in meetings] # Sort meetings by start time meetings_dt.sort(key=lambda meeting: meeting[0]) merged_meetings = [] for current_start, current_end in meetings_dt: if not merged_meetings: merged_meetings.append((current_start, current_end)) else: last_start, last_end = merged_meetings[-1] if current_start <= last_end: # If meetings overlap or touch, merge them merged_meetings[-1] = (last_start, max(last_end, current_end)) else: # Otherwise, add the current meeting as a new interval merged_meetings.append((current_start, current_end)) # Convert datetime objects back to \\"HH:MM\\" format merged_meetings_str = [(start.strftime(\\"%H:%M\\"), end.strftime(\\"%H:%M\\")) for start, end in merged_meetings] return merged_meetings_str"},{"question":"Write a Python function named `reorder_log_files` that reorders a list of log files. You will be given a list of strings where each string represents a log file. Each log file consists of a unique identifier followed by either a series of words (all lowercase letters) or a series of numbers. Your task is to reorder the logs such that all the letter-logs come before any digit-logs and the letter-logs are lexicographically sorted by their content. If there is a tie in content, then sort by the identifier. Digit-logs should remain in the same order they were in the original list. # Function Signature: ```python def reorder_log_files(logs: List[str]) -> List[str]: ``` # Constraints: - The total number of logs (n) is between 1 and 10000. - Each log entry is a string of length between 3 and 100. - Each log entry contains an identifier which is a string that is an alphanumeric sequence (no spaces), followed by a space, and then the log content. - The content of each log is either all lowercase letters or all digits. # Example: ```python logs = [ \\"a1 9 2 3 1\\", \\"g1 act car\\", \\"zo4 4 7\\", \\"ab1 off key dog\\", \\"a8 act zoo\\" ] reordered_logs = reorder_log_files(logs) # reordered_logs should be: # [ # \\"g1 act car\\", # \\"a8 act zoo\\", # \\"ab1 off key dog\\", # \\"a1 9 2 3 1\\", # \\"zo4 4 7\\" # ] ```","solution":"from typing import List def reorder_log_files(logs: List[str]) -> List[str]: def get_key(log): identifier, rest = log.split(\\" \\", 1) if rest[0].isdigit(): return (1,) else: return (0, rest, identifier) return sorted(logs, key=get_key)"},{"question":"In this problem, you are expected to count the frequencies of each word in a given string and return the result in a dictionary, where the keys are the words and the values are the counts of those words. **Your task:** Write a function named `word_count` that takes a single string as input and returns a dictionary with the frequency count of each word. The words in the input string are separated by spaces and punctuation marks should be ignored as word delimiters. **Steps to follow:** 1. Remove any punctuation from the input string. 2. Split the string into individual words based on spaces. 3. Count the frequency of each word. 4. Return the dictionary containing the words and their respective counts. **Example Usage:** ```python input_string = \\"Hello World! Hello, everyone. Welcome to the world of programming.\\" output = word_count(input_string) print(output) # Output should be: {\'hello\': 2, \'world\': 2, \'everyone\': 1, \'welcome\': 1, \'to\': 1, \'the\': 1, \'of\': 1, \'programming\': 1} ``` **Important Notes:** - Words should be considered case insensitive, i.e., \\"Hello\\" and \\"hello\\" should be counted as the same word. - Use Python\'s `str.translate` method alongside `str.maketrans` for removing punctuation. - You may consider using `str.split` for splitting the string into words. **Hint:** Consider using a dictionary to keep track of the word counts, where the key is the word and the value is the count of that word. Here is a small snippet of relevant documentation for handling strings: ```python str.translate(map) Return a copy of the string in which each character has been mapped through the given translation table. The translation table is created using `str.maketrans`. Example: >>> import string >>> s = \\"Hello, World!\\" >>> table = str.maketrans(\'\', \'\', string.punctuation) >>> s.translate(table) \'Hello World\' ```","solution":"import string def word_count(input_string): Returns the frequency count of each word in the input string, ignoring punctuation and case. # Convert the input string to lowercase input_string = input_string.lower() # Remove punctuation using str.translate and str.maketrans table = str.maketrans(\'\', \'\', string.punctuation) cleaned_string = input_string.translate(table) # Split the string into words words = cleaned_string.split() # Count the frequency of each word using a dictionary word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"Write a Python function called `reverse_words` that takes a string as input and returns the string with the order of the words reversed, but with each word\'s characters in the original order. Words are assumed to be separated by single spaces, and there are no leading or trailing spaces in the input string. Your function should handle multiple words properly. Specific Requirements: 1. **Function Name**: `reverse_words` 2. **Input**: A string containing words separated by single spaces. 3. **Output**: A string with the word order reversed. Example: ```python input_string = \\"hello world this is a test\\" print(reverse_words(input_string)) ``` - The output should be: ```plaintext \\"test a is this world hello\\" ```","solution":"def reverse_words(s): Returns the input string with the order of words reversed, but with each word\'s characters in the original order. :param s: str - Input string containing words separated by single spaces. :return: str - Reversed word order string. words = s.split(\\" \\") reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"This problem focuses on the manipulation of strings and building an understanding of basic string operations. Specifically, you will write a function to check if two strings are anagrams of each other. **Task**: Write a function named `are_anagrams` that takes two strings as input and returns a boolean indicating whether the two strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequency, but possibly in a different order. **Function Signature**: ```python def are_anagrams(str1: str, str2: str) -> bool: ``` **Input**: - `str1`: A string. - `str2`: A string. **Output**: - Returns a boolean value `True` if the strings are anagrams, `False` otherwise. **Example**: ```python str1 = \\"listen\\" str2 = \\"silent\\" print(are_anagrams(str1, str2)) # Output should be True str1 = \\"hello\\" str2 = \\"world\\" print(are_anagrams(str1, str2)) # Output should be False ``` **Explanation**: 1. `listen` and `silent` contain the same characters with the same frequency: `l=1`, `i=1`, `s=1`, `t=1`, `e=1`, `n=1`. 2. `hello` and `world` do not contain the same characters with the same frequency. **Note**: - Ignore case while comparing the strings. This means the function should treat \\"Listen\\" and \\"Silent\\" as anagrams. - Do not use any external libraries. The solution should solely rely on Python\'s standard library functions and operations.","solution":"def are_anagrams(str1: str, str2: str) -> bool: Returns True if str1 and str2 are anagrams of each other, False otherwise. # Normalize the strings by converting them to lowercase and sorting the characters normalized_str1 = sorted(str1.lower()) normalized_str2 = sorted(str2.lower()) # Compare the sorted strings return normalized_str1 == normalized_str2"},{"question":"You have been assigned a task to create a function named `process_transactions` that will analyze a list of bank transactions to determine the total amount spent in each category. Each transaction is represented as a dictionary containing a `category` and an `amount`. # Specification: 1. The function `process_transactions` will take a single parameter `transactions` which is a list of dictionaries, where each dictionary has two keys: - `category`: A string representing the category of the transaction, e.g., \\"groceries\\", \\"entertainment\\", etc. - `amount`: A float representing the amount of the transaction. 2. The function will return a dictionary where the keys are the categories and the values are the total amounts spent in each category. # Function Signature: ```python def process_transactions(transactions): pass ``` # Example Usage: ```python transactions = [ {\'category\': \'groceries\', \'amount\': 50.0}, {\'category\': \'entertainment\', \'amount\': 15.0}, {\'category\': \'groceries\', \'amount\': 20.5}, {\'category\': \'utilities\', \'amount\': 75.0}, {\'category\': \'entertainment\', \'amount\': 10.0}, ] result = process_transactions(transactions) # result should be {\'groceries\': 70.5, \'entertainment\': 25.0, \'utilities\': 75.0} ```","solution":"def process_transactions(transactions): Analyzes a list of bank transactions to determine the total amount spent in each category. Parameters: transactions (list of dict): A list of dictionaries where each dictionary has two keys: - \'category\': A string representing the category of the transaction, - \'amount\': A float representing the amount of the transaction. Returns: dict: A dictionary where keys are categories and values are the total amounts spent in each category. category_totals = {} for transaction in transactions: category = transaction[\'category\'] amount = transaction[\'amount\'] if category in category_totals: category_totals[category] += amount else: category_totals[category] = amount return category_totals"},{"question":"You are given a list of integers representing the number of steps taken by a person each day for a month. Your task is to write a Python function `calculate_moving_average` that computes the n-day moving average of the steps. The function should have the following features: 1. It should accept the list of steps and the number of days `n` for the moving average. 2. The moving average should be calculated for overlapping windows of n days, from the beginning to the end of the list. 3. If there are fewer than `n` days left at the end of the list for a complete window, that partial window should be excluded from the result. Your function should be efficient and consider edge cases where `n` is larger than the number of days in the list or where the list is empty. To assist with this task, you are required to use the following function from the libraries: - `numpy.mean` (from NumPy) Here is an example of expected outputs for different inputs: | Input steps | n | Expected Output | |--------------------------------|----|-------------------------------------------------| | [1000, 2000, 3000, 4000, 5000] | 3 | [2000.0, 3000.0, 4000.0] | | [500, 1500, 2500] | 2 | [1000.0, 2000.0] | | [700, 800] | 5 | [] | Your function signature should be: ```python def calculate_moving_average(steps, n): # Your implementation here ``` Your implementation should make comprehensive use of the specified function from NumPy to achieve the desired outcome. Ensure to handle edge cases effectively, such as when the list is empty or when `n` exceeds the length of the list.","solution":"import numpy as np def calculate_moving_average(steps, n): Calculate the n-day moving average of the steps. Parameters: steps (list of int): The list of daily steps. n (int): The number of days for the moving average. Returns: list of float: The n-day moving average. if not steps or n <= 0 or n > len(steps): return [] moving_averages = [] for i in range(len(steps) - n + 1): window = steps[i:i+n] moving_averages.append(np.mean(window)) return moving_averages"},{"question":"In the context of working with JSON data and performing string manipulation, it is often necessary to flatten nested JSON objects into a single level. This task involves creating a function that takes a JSON object with nested structures and flattens it, concatenating the keys to represent the hierarchy. Write a function named `flatten_json(nested_json: dict) -> dict` that flattens a nested JSON object. 1. **Function Inputs:** - `nested_json`: A dictionary representing the nested JSON object. 2. **Function Output:** - A dictionary where each key is a concatenation of the hierarchy of keys from the nested JSON, and the corresponding value is from the original nested object. 3. **Steps to perform inside the function:** 1. Create a helper function to recursively flatten the nested structure. 2. Concatenate keys at each level separated by a dot `.`. 3. Return the flattened JSON object. Here’s an example of the function call and output: ```python nested_json = { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": { \\"code\\": 10001, \\"plus4\\": 1920 } }, \\"email\\": \\"john@example.com\\" } flattened_json = flatten_json(nested_json) print(flattened_json) # Output should be: # { # \\"name\\": \\"John\\", # \\"address.city\\": \\"New York\\", # \\"address.zipcode.code\\": 10001, # \\"address.zipcode.plus4\\": 1920, # \\"email\\": \\"john@example.com\\" # } ``` Use the following library: - `json`","solution":"def flatten_json(nested_json, parent_key=\'\', sep=\'.\'): Recursively flattens a nested json object. Args: nested_json: A dictionary representing the nested JSON object. parent_key: A string representing the concatenated key for the current level. sep: A string separator used to concatenate keys. Returns: A dictionary where each key is a concatenation of the hierarchy of keys from the nested JSON. items = [] for k, v in nested_json.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_json(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items) # Example usage nested_json = { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": { \\"code\\": 10001, \\"plus4\\": 1920 } }, \\"email\\": \\"john@example.com\\" } flattened_json = flatten_json(nested_json) print(flattened_json) # Output should be: # { # \\"name\\": \\"John\\", # \\"address.city\\": \\"New York\\", # \\"address.zipcode.code\\": 10001, # \\"address.zipcode.plus4\\": 1920, # \\"email\\": \\"john@example.com\\" # }"},{"question":"You are tasked with analyzing a dataset containing two columns: `timestamp` (datetime) and `temperature` (float). The main objectives are to visualize the time series data, fill in any missing timestamps with interpolated temperature values, and detect any sharp increases in temperature (spikes). To achieve this, you must write a function named `analyze_temperature` that takes in a pandas DataFrame `data` and a float `spike_threshold`. The DataFrame contains two columns: `timestamp` and `temperature`. The function should perform the following tasks: 1. **Visualize the Time Series**: Plot the time series data of `temperature` across `timestamp` using `matplotlib.pyplot.plot`. 2. **Fill Missing Timestamps**: Check for missing timestamps in the dataset (assuming a regular interval such as hourly). Fill these gaps by interpolating temperature values. 3. **Detect Spikes**: Identify any points where the temperature increases more than `spike_threshold` from one timestamp to the next. 4. **Return DataFrame with Spikes**: Return a DataFrame containing the `timestamp` and `temperature` of detected spikes. # Requirements: - Use `matplotlib.pyplot.plot` to plot the time series data. - Use `pandas.Series.interpolate` to fill in missing timestamps. - The function should be named `analyze_temperature`. - The function should take two parameters: `data` (a pandas DataFrame) and `spike_threshold` (a float). # Example: ```python import pandas as pd import numpy as np import matplotlib.pyplot as plt # Sample data timestamps = pd.date_range(start=\'2023-01-01\', periods=100, freq=\'H\') temperature = np.random.normal(loc=20, scale=5, size=100) # Introduce some missing timestamps and spikes temperature[10:15] = np.nan temperature[30] += 15 temperature[60] += 20 data = pd.DataFrame({ \'timestamp\': timestamps, \'temperature\': temperature }) spike_threshold = 10 result = analyze_temperature(data, spike_threshold) ``` The above code should plot the time series data with filled missing values and identify the timestamps where the temperature spikes by more than 10 degrees. The resulting DataFrame should contain these detected spikes.","solution":"import pandas as pd import numpy as np import matplotlib.pyplot as plt def analyze_temperature(data, spike_threshold): Analyzes the temperature data to visualize, fill missing timestamps, and detect spikes. Parameters: - data (pd.DataFrame): DataFrame containing \'timestamp\' and \'temperature\' columns. - spike_threshold (float): Value above which a temperature increase is considered a spike. Returns: - spikes_df (pd.DataFrame): DataFrame containing detected spikes with \'timestamp\' and \'temperature\'. # Ensure the data is sorted by timestamp data = data.sort_values(by=\'timestamp\') # Set timestamp as the index data.set_index(\'timestamp\', inplace=True) # Reindex the DataFrame to introduce missing timestamps (hourly frequency) data = data.reindex(pd.date_range(start=data.index.min(), end=data.index.max(), freq=\'H\')) # Interpolate missing temperature values data[\'temperature\'] = data[\'temperature\'].interpolate() # Visualize the time series data plt.figure(figsize=(10, 6)) plt.plot(data.index, data[\'temperature\'], label=\'Temperature\') plt.xlabel(\'Timestamp\') plt.ylabel(\'Temperature\') plt.title(\'Time Series of Temperature\') plt.legend() plt.show() # Detect spikes data[\'difference\'] = data[\'temperature\'].diff().fillna(0) spikes = data[data[\'difference\'] > spike_threshold] # Prepare the result DataFrame spikes_df = spikes[[\'temperature\', \'difference\']].reset_index() spikes_df.rename(columns={\'index\': \'timestamp\'}, inplace=True) return spikes_df[[\'timestamp\', \'temperature\']]"},{"question":"You need to write a function called `sum_of_unique_numbers`. This function should take a list of integers as its only parameter and return the sum of all the unique numbers in the list. A unique number is defined as a number that appears exactly once in the list. Here are the specific requirements for the function: 1. The function should iterate through the list to identify unique numbers. 2. Sum all the unique numbers. 3. Return the sum of the unique numbers. For example: - If the input list is `[1, 2, 3, 2, 4]`, the unique numbers are `[1, 3, 4]` and the function should return `8` (since 1 + 3 + 4 = 8). - If the input list is `[1, 1, 1, 1]`, there are no unique numbers, so the function should return `0`. The function signature should be: ```python def sum_of_unique_numbers(nums: list) -> int: pass ```","solution":"def sum_of_unique_numbers(nums): Returns the sum of all unique numbers in the list. A unique number is defined as a number that appears exactly once in the list. Parameters: nums (list): List of integers. Returns: int: Sum of unique numbers. from collections import Counter counter = Counter(nums) unique_sum = sum([num for num, count in counter.items() if count == 1]) return unique_sum"},{"question":"You are tasked with writing a function that generates a list of Fibonacci numbers up to a specified limit and visualizes the sequence using a line plot. In this process, you will learn to use Matplotlib, a comprehensive library for creating static, animated, and interactive visualizations in Python. Function Signature ```python def visualize_fibonacci(limit: int) -> None: Generates Fibonacci numbers up to a specified limit and visualizes the sequence in a line plot. Parameters: limit (int): The upper bound for the largest Fibonacci number in the sequence. Returns: None: This function should display a line plot. ``` # Detailed Description 1. **Input**: - `limit` (int): The upper bound for the largest Fibonacci number to be included in the sequence. 2. **Steps**: - Generate Fibonacci numbers starting from 0, 1, 1, 2, 3, ..., up to the given limit. - Record these Fibonacci numbers in a list. - Create a line plot to display the Fibonacci sequence with Matplotlib. 3. **Plot Details**: - The title of the plot should be \\"Fibonacci Sequence up to {limit}\\" where `{limit}` is the input number. - The x-axis should be labeled \\"Index\\" representing the position in the Fibonacci sequence. - The y-axis should be labeled \\"Fibonacci Number\\". - Each point in the plot should be labeled with its Fibonacci number. - Customize the plot to improve its aesthetics (e.g., grid, marker styles). # Libraries Required - `matplotlib.pyplot` for plotting the sequence. # Example ```python # To visualize Fibonacci sequence up to 1000 visualize_fibonacci(1000) ``` This function will help you understand how to generate the Fibonacci sequence and create a line plot using Matplotlib.","solution":"import matplotlib.pyplot as plt def generate_fibonacci(limit): Generates Fibonacci numbers up to a specified limit. Parameters: limit (int): The upper bound for the largest Fibonacci number in the sequence. Returns: list: A list of Fibonacci numbers. fibonacci_numbers = [] a, b = 0, 1 while a <= limit: fibonacci_numbers.append(a) a, b = b, a + b return fibonacci_numbers def visualize_fibonacci(limit: int) -> None: Generates Fibonacci numbers up to a specified limit and visualizes the sequence in a line plot. Parameters: limit (int): The upper bound for the largest Fibonacci number in the sequence. Returns: None: This function should display a line plot. # Generate Fibonacci sequence fibonacci_sequence = generate_fibonacci(limit) # Create the line plot plt.figure(figsize=(10, 6)) plt.plot(fibonacci_sequence, marker=\'o\', linestyle=\'-\', color=\'b\', label=\'Fibonacci\') # Annotate points for index, number in enumerate(fibonacci_sequence): plt.text(index, number, str(number), fontsize=9, ha=\'right\', va=\'bottom\') # Set plot title and labels plt.title(f\'Fibonacci Sequence up to {limit}\') plt.xlabel(\'Index\') plt.ylabel(\'Fibonacci Number\') plt.grid(True) plt.legend() # Show the plot plt.show()"},{"question":"You are required to write a function named `find_optimal_weight` that determines the maximum weight limit a person can carry, given certain constraints. The function will take as input: 1. `weights`: A list of integers representing the weights of the items available. 2. `max_items`: An integer representing the maximum number of items the person can carry. 3. `max_weight`: An integer representing the maximum total weight the person can carry. The function should return an integer representing the maximum weight that can be carried without exceeding the `max_items` and `max_weight` constraints. If it is not possible to carry any items without exceeding the constraints, the function should return 0. Your solution should utilize a dynamic programming approach to efficiently determine the optimal weight, accounting for the constraints given. Example usage: ```python weights = [2, 3, 5, 7] max_items = 2 max_weight = 10 print(find_optimal_weight(weights, max_items, max_weight)) # Output should be 10 (choosing items with weights 3 and 7) ``` Your function should have the following signature: ```python def find_optimal_weight(weights, max_items, max_weight): pass ```","solution":"def find_optimal_weight(weights, max_items, max_weight): Determines the maximum weight that can be carried without exceeding the max_items and max_weight constraints. n = len(weights) # Initialize DP table dp = [[[0] * (max_weight + 1) for _ in range(max_items + 1)] for _ in range(n + 1)] # Fill the DP table for i in range(1, n + 1): for j in range(1, max_items + 1): for w in range(1, max_weight + 1): if weights[i-1] <= w: dp[i][j][w] = max(dp[i-1][j][w], dp[i-1][j-1][w - weights[i-1]] + weights[i-1]) else: dp[i][j][w] = dp[i-1][j][w] return dp[n][max_items][max_weight]"},{"question":"**Problem: Optimizing Dictionary Access Times** You are tasked with measuring and optimizing the performance of dictionary lookups in Python. To achieve this, you will create a dictionary with a large number of entries and measure the time taken to access random keys. **Function Requirements:** 1. **Function Name:** `measure_dict_access_performance`. 2. **Parameters:** The function takes an integer parameter `m` that specifies the number of entries in the dictionary. 3. **Functionality:** - Create a dictionary with `m` items where keys are integers from `0` to `m-1` and values are random floats using `random.random()`. - Measure the time it takes to perform `m` random lookups on the dictionary. - Repeat this measurement 5 times and compute the average lookup time. 4. **Output:** Print the average time per lookup operation. **Important APIs to Use:** - `random.random()`: Generates random float values between 0 and 1. - `random.randint(a, b)`: Generates a random integer `N` such that `a <= N <= b`. - `time.time()`: Returns the current time in seconds since the epoch. Here is the function definition for reference: ```python def measure_dict_access_performance(m): This function takes in m and prints the average time per dictionary lookup for m random accesses. ``` **Example Usage:** ```python measure_dict_access_performance(10000) # This should print the average time performance per lookup operation for accessing `m` random keys in a dictionary of size `m` ``` **Instructions:** - Define the function `measure_dict_access_performance` as described above. - Ensure you use the specified APIs (`random.random`, `random.randint`, and `time.time`). - Test the function with different values of `m` to observe the performance.","solution":"import random import time def measure_dict_access_performance(m): This function takes in m and prints the average time per dictionary lookup for m random accesses. # Create a dictionary with m items where keys are integers from 0 to m-1 and values are random floats my_dict = {i: random.random() for i in range(m)} total_time = 0 num_trials = 5 for _ in range(num_trials): start_time = time.time() # Perform m random lookups for _ in range(m): random_key = random.randint(0, m - 1) _ = my_dict[random_key] end_time = time.time() total_time += (end_time - start_time) average_time_per_lookup = total_time / (num_trials * m) print(f\'Average time per dictionary lookup: {average_time_per_lookup:e} seconds\')"},{"question":"You are given a task to write a function named `plot_roc_curve` which helps visualize the Receiver Operating Characteristic (ROC) curve for a given classification model\'s results. The ROC curve is a useful metric when analyzing the performance of a classification algorithm by plotting the true positive rate (TPR) against the false positive rate (FPR) at various threshold settings. Your function should: 1. Take in the following parameters: - `y_true` (1D array-like): True binary labels. - `y_score` (1D array-like): Target scores, can either be probability estimates of the positive class or confidence values. - `title` (str, default=\'Receiver Operating Characteristic\'): The title for the plot. - `pos_label` (int, default=1): The label of the positive class. - `line_color` (str, default=\'blue\'): The color of the ROC curve line. 2. Plot the ROC curve: - Calculate the FPR and TPR using `roc_curve()` from the `sklearn.metrics` module. - Plot the FPR against the TPR using the `matplotlib` library. - Use `plt.plot` to plot the line, with `label=\'ROC curve\'` and specified `line_color`. - Use `plt.xlabel` to label the x-axis as \'False Positive Rate\'. - Use `plt.ylabel` to label the y-axis as \'True Positive Rate\'. - Use `plt.title` to set the title of the plot. - Include a diagonal dashed line representing a random classifier (using `plt.plot([0, 1], [0, 1], \'k--\')` for a black dashed line). 3. Print \\"ROC curve plotted\\" after plotting the curve. Note: You must use `roc_curve` from the `sklearn.metrics` module and appropriate functions from the `matplotlib` library in your function. Here is an example template for your function: ```python import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import roc_curve def plot_roc_curve(y_true, y_score, title=\'Receiver Operating Characteristic\', pos_label=1, line_color=\'blue\'): # Your implementation here pass # Example usage: # y_true = [0, 0, 1, 1] # y_score = [0.1, 0.4, 0.35, 0.8] # plot_roc_curve(y_true, y_score, title=\\"ROC Curve Example\\") ```","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import roc_curve def plot_roc_curve(y_true, y_score, title=\'Receiver Operating Characteristic\', pos_label=1, line_color=\'blue\'): Plots the ROC curve for given true labels and predicted scores. Parameters: y_true (1D array-like): True binary labels. y_score (1D array-like): Target scores, can either be probability estimates of the positive class or confidence values. title (str, default=\'Receiver Operating Characteristic\'): The title for the plot. pos_label (int, default=1): The label of the positive class. line_color (str, default=\'blue\'): The color of the ROC curve line. # Calculate FPR and TPR fpr, tpr, _ = roc_curve(y_true, y_score, pos_label=pos_label) # Plot ROC curve plt.figure() plt.plot(fpr, tpr, color=line_color, lw=2, label=\'ROC curve\') plt.plot([0, 1], [0, 1], \'k--\', lw=2) # Random classifier line # Axis labeling and plot title plt.xlabel(\'False Positive Rate\') plt.ylabel(\'True Positive Rate\') plt.title(title) plt.legend(loc=\\"lower right\\") # Show plot plt.show() print(\\"ROC curve plotted\\")"},{"question":"Create a function that generates a scatter plot from a given list of (x, y) coordinates. The function should customize the plot by enabling a grid, setting the title as \\"Scatter Plot of Coordinates\\", and labeling the x-axis as \\"X-Coordinate\\" and the y-axis as \\"Y-Coordinate\\". Return the matplotlib Axes object of the plot. This will help visualize the distribution of points in a 2D space. The function should output with: matplotlib.axes.Axes or None: Axes object of the scatter plot. You should write self-contained code starting with: ``` import matplotlib.pyplot as plt def plot_scatter(coordinates): ```","solution":"import matplotlib.pyplot as plt def plot_scatter(coordinates): Generates a scatter plot from a given list of (x, y) coordinates. Parameters: coordinates (list of tuple): List of (x, y) coordinates. Returns: matplotlib.axes.Axes or None: Axes object of the scatter plot or None if input is invalid. if not coordinates: return None x_values, y_values = zip(*coordinates) fig, ax = plt.subplots() ax.scatter(x_values, y_values) ax.grid(True) ax.set_title(\\"Scatter Plot of Coordinates\\") ax.set_xlabel(\\"X-Coordinate\\") ax.set_ylabel(\\"Y-Coordinate\\") return ax"},{"question":"You are tasked with writing a function `count_even_squares(nums: List[int]) -> int` that counts the number of perfect squares in a given list of integers that are also even numbers. Here are the requirements: 1. The function takes a single argument `nums`, which is a list of integers. 2. The function checks each number in the list to determine if: - It is a perfect square. - It is an even number. 3. The function returns the count of such numbers. Key Points: - A perfect square is a number that is the square of an integer. - Use appropriate mathematical operations to determine if a number is a perfect square. - Ensure the solution correctly handles edge cases such as an empty list or a list with only non-perfect square numbers. Example: ```python count_even_squares([4, 16, 25, 49, 64, 100]) # Should return 4 count_even_squares([3, 6, 7, 8]) # Should return 0 count_even_squares([36, 50, 81]) # Should return 1 ```","solution":"from typing import List import math def count_even_squares(nums: List[int]) -> int: Counts the number of perfect squares in a given list of integers that are also even numbers. def is_perfect_square(n: int) -> bool: root = int(math.isqrt(n)) return n == root * root count = 0 for num in nums: if num % 2 == 0 and is_perfect_square(num): count += 1 return count"},{"question":"You are tasked with writing a function that simulates the unpredictable arrival and departure of guests at a hotel. Each guest must follow a set of rules and behaviors to regulate the hotel’s occupancy. The problem encompasses three key components: 1. **`hotel`**: An object that manages the hotel\'s state and operations. 2. **`mutex`**: A threading lock to ensure synchronized access to the hotel. 3. **`guest_name`**: The name of the guest attempting to check in or out. The `Guests` function should operate within these constraints: 1. **Random Pause**: Before trying to check in or out, the guest should wait for a random interval between 2 and 6 seconds. 2. **Acquire Lock**: The guest should use `mutex` to safely interact with the hotel\'s state. 3. **Verify Hotel State and Take Action**: - If the guest is not checked in and the hotel\'s status is \\"vacant\\", they check in. - If the guest is already checked in and the hotel\'s status is \\"occupied\\", they check out. - If the guest is checked in, they stay in the hotel with additional wait time. The function should utilize `random.randint` for determining the pause duration and `time.sleep` for introducing the pauses. Function signature: ```python def Guests(hotel, mutex, guest_name): # body of the function ``` **Note**: The `hotel` object will have two methods `getStatus()` and `checkIn()/checkOut()`. - `getStatus()` returns the current status of the hotel: \\"vacant\\" or \\"occupied\\". - `checkIn()` handles the process of a guest checking in. - `checkOut()` handles the process of a guest checking out. You need to ensure appropriate use of `random.randint` and `time.sleep` to achieve the specified behavior. This task will help illustrate synchronization and timing in a controlled hotel environment.","solution":"import threading import random import time def Guests(hotel, mutex, guest_name): Simulates the unpredictable arrival and departure of guests at a hotel. # Random pause between 2 and 6 seconds before attempting to check in or out pause_duration = random.randint(2, 6) time.sleep(pause_duration) # Acquire the lock to safely interact with the hotel\'s state with mutex: current_status = hotel.getStatus() if current_status == \\"vacant\\": hotel.checkIn(guest_name) elif current_status == \\"occupied\\" and hotel.isGuestCheckedIn(guest_name): hotel.checkOut(guest_name) elif current_status == \\"occupied\\": # Additional wait time if the guest is checked in additional_pause_duration = random.randint(2, 6) time.sleep(additional_pause_duration)"},{"question":"In this task, you need to write a Python function named `sum_of_primes` that calculates the sum of all prime numbers below a given integer `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function should have the following signature and behavior: ```python def sum_of_primes(n: int) -> int: Returns the sum of all prime numbers less than n. Parameters: n (int): The upper limit (exclusive) to calculate the sum of primes. Returns: int: The sum of all prime numbers less than n. ``` # Details: 1. **Input Validation**: The function should first check if the input `n` is a positive integer greater than 2. If not, return 0. 2. **Prime Calculation**: - Utilize the Sieve of Eratosthenes algorithm to efficiently find all prime numbers less than `n`. 3. **Summation**: Sum all the prime numbers found and return the result. # Example: 1. `sum_of_primes(10)` should return `17` because the prime numbers less than 10 are 2, 3, 5, and 7. 2. `sum_of_primes(20)` should return `77` because the prime numbers less than 20 are 2, 3, 5, 7, 11, 13, 17, and 19. 3. `sum_of_primes(2)` should return `0` because there are no prime numbers less than 2. # Implementation Notes: - The Sieve of Eratosthenes is an efficient algorithm for finding all primes up to a specified integer. To use it, create a boolean array `is_prime` of size `n` and initialize all entries to `True`. Start with the first prime number, 2. Mark all multiples of 2 (greater than or equal to `2^2`) as `False`. Then move to the next number in the array that is `True` and repeat the process for that number. Continue this until you reach `sqrt(n)`. All the numbers which are still `True` in the array are prime numbers.","solution":"def sum_of_primes(n: int) -> int: Returns the sum of all prime numbers less than n. Parameters: n (int): The upper limit (exclusive) to calculate the sum of primes. Returns: int: The sum of all prime numbers less than n. if n <= 2: return 0 is_prime = [True] * n is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for multiple in range(i*i, n, i): is_prime[multiple] = False return sum(i for i, prime in enumerate(is_prime) if prime)"},{"question":"Create a function that removes consecutive duplicate words from a given string. The function should return the modified string, preserving the order of the original words but without any consecutively repeated words. If the input string is empty, return an empty string. You should write self-contained code starting with: ``` def remove_consecutive_duplicates(s): ``` Examples: ``` remove_consecutive_duplicates(\\"I I am am learning Python Python\\") # Output: \\"I am learning Python\\" remove_consecutive_duplicates(\\"hello hello world\\") # Output: \\"hello world\\" remove_consecutive_duplicates(\\"\\") # Output: \\"\\" ```","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicate words from the given string. Args: s (str): The input string. Returns: str: The modified string without consecutively repeated words. if not s: return \\"\\" words = s.split() result = [words[0]] for word in words[1:]: if word != result[-1]: result.append(word) return \\" \\".join(result)"},{"question":"You are required to write a function named `find_most_frequent_char` that takes in a single string parameter `s`. This function should find and return the character with the highest frequency in the string. In case of a tie (i.e., multiple characters with the same highest frequency), return the character that appears first in the string. You should assume that the input string `s` contains only lowercase alphabetical characters and that it has a length of at least 1. The function signature should be: ```python def find_most_frequent_char(s: str) -> str: ``` **Example:** ```python print(find_most_frequent_char(\\"aabbbcc\\")) # Expected: \'b\' (since \'b\' appears 3 times, which is the highest frequency) print(find_most_frequent_char(\\"abcabcabc\\")) # Expected: \'a\' (since \'a\', \'b\', and \'c\' all have the same frequency of 3, but \'a\' appears first) ``` Ensure to handle string traversal efficiently and make use of Python\'s built-in functionalities to determine the most frequent character.","solution":"def find_most_frequent_char(s: str) -> str: from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the character with the highest frequency which appears first in the string max_count = 0 most_frequent_char = s[0] for char in s: if char_count[char] > max_count: max_count = char_count[char] most_frequent_char = char return most_frequent_char"},{"question":"This function processes a text file containing a list of tasks with their respective deadlines. The function reads the text file, calculates how many days remain for each task\'s deadline from the current date, and prints each task along with the days remaining. If there\'s an error reading the file, it outputs an error message and exits. In this example, \'tasks.txt\' is a text file where each line contains a task description followed by a deadline date in the format \'YYYY-MM-DD\'. The function reads this file, computes the difference in days from the current date to the deadline for each task, and prints it. Notes: The function uses the datetime module to handle date parsing and calculations. The sys module is used to exit the program in case of an error. The function should output with: None: It directly prints the tasks and days remaining along with any potential error if the file cannot be read. You should write self-contained code starting with: ``` import datetime import sys def task_func(file_path): ```","solution":"import datetime import sys def task_func(file_path): try: with open(file_path, \'r\') as file: lines = file.readlines() today = datetime.date.today() for line in lines: task, deadline_str = line.strip().rsplit(maxsplit=1) deadline = datetime.datetime.strptime(deadline_str, \'%Y-%m-%d\').date() days_remaining = (deadline - today).days print(f\\"Task: {task}, Days Remaining: {days_remaining}\\") except FileNotFoundError: print(\\"Error: The file was not found.\\") sys.exit(1) except Exception as e: print(f\\"Error: {e}\\") sys.exit(1)"},{"question":"In this task, you are required to write a Python function named `track_highest_buyer` to analyze the purchase activities recorded in a log file and determine the customer with the highest total purchase. The log file contains several lines, each representing a purchase event in the format: ```plaintext <timestamp>,<customer_id>,<purchase_amount> ``` Your function should perform the following steps: 1. Parse the contents of the file and extract the customer IDs and their corresponding purchase amounts. 2. Aggregate the total purchase amount for each customer. 3. Identify and return the customer ID(s) with the highest total purchase amount. 4. If there are multiple customers with the same highest total purchase amount, return a list of all such customer IDs in ascending order. Here is the function signature: ```python def track_highest_buyer(filename: str) -> Union[str, List[str]]: ``` # Constraints: - You must handle the input file, assuming it is well-formed as described. - Purchase amounts are decimals, and the output should maintain a precision of up to two decimal places. - Customer IDs are non-negative integers. # Example: If the log file `purchases.log` contains: ``` 2021-09-01 12:00:00,123,240.50 2021-09-01 13:00:00,124,120.00 2021-09-02 09:00:00,123,205.50 2021-09-02 10:00:00,125,300.00 2021-09-03 18:00:00,124,100.00 2021-09-03 19:00:00,125,210.00 ``` Expected output: ```python \'125\' ``` If the log file `purchases.log` contains: ``` 2021-09-01 12:00:00,123,240.50 2021-09-01 13:00:00,124,240.50 2021-09-01 14:00:00,125,240.50 ``` Expected output (since all have the same total): ```python [\'123\', \'124\', \'125\'] ```","solution":"from typing import Union, List import csv from collections import defaultdict def track_highest_buyer(filename: str) -> Union[str, List[str]]: customer_totals = defaultdict(float) # Read the file and accumulate purchase amounts with open(filename, \'r\') as file: reader = csv.reader(file) for row in reader: customer_id = int(row[1]) purchase_amount = float(row[2]) customer_totals[customer_id] += purchase_amount # Determine the highest total purchase amount max_total = max(customer_totals.values()) # Find all customers with the highest total purchase amount highest_buyers = [str(customer_id) for customer_id, total in customer_totals.items() if total == max_total] # If there\'s only one highest buyer, return it as a string if len(highest_buyers) == 1: return highest_buyers[0] else: return sorted(highest_buyers)"},{"question":"You are given a list of integers, representing the elevations of terrain at each point along a horizontal line. Your task is to create a function `trap_rainwater(heights)` that calculates the total amount of rainwater that can be trapped between the elevations after it rains. **Requirements:** 1. You must use an array or list to store the heights. 2. Assume that integer values in the list represent the heights of vertical walls at each point. 3. The function should return the total amount of rainwater that can be trapped between the elevations. Your function `trap_rainwater(heights)` should: - Traverse the list and calculate the amount of trapped water at each point. - Consider that water is trapped only between the left and right walls. - Utilize efficient time complexity in your solution. # Input: - `heights`: A list of integers representing the heights of terrain elevations. # Output: - An integer representing the total amount of trapped rainwater. # Example: Given the list `heights`: ``` heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` The function `trap_rainwater(heights)` should return: ``` 6 ``` # Notes: - The water trapped at each point is the minimum of the maximum height to the left or right, minus the height at that point. - Ensure all edge cases, such as lists with less than three elements, are handled gracefully. - You can use any necessary libraries or functions, provided they are common in standard Python modules or are self-implemented within the function.","solution":"def trap_rainwater(heights): Calculate the total amount of rainwater that can be trapped between the elevations. :param heights: List of integers representing the heights of terrain elevations. :return: Total amount of trapped rainwater. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"In this problem, you are to create a function that filters and sorts a list of dictionaries. Your task is to create a function named `filter_and_sort` that accepts a list of dictionaries and a string key. The function will filter out dictionaries that do not contain the specified key and will return a new list of dictionaries sorted by the values of the specified key in ascending order. The function will take two parameters: 1. `data` - A list of dictionaries where each dictionary represents an item with various attributes. 2. `key` - A string representing the key based on which the filtering and sorting will be performed. # Function Signature ```python def filter_and_sort(data: list[dict], key: str) -> list[dict]: ``` # Example ```python data = [ {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Charlie\\"}, {\\"name\\": \\"David\\", \\"age\\": 35} ] key = \\"age\\" output = filter_and_sort(data, key) print(output) ``` Output: ```python [ {\\"name\\": \\"Bob\\", \\"age\\": 25}, {\\"name\\": \\"Alice\\", \\"age\\": 30}, {\\"name\\": \\"David\\", \\"age\\": 35} ] ``` # Constraints - Each dictionary can have a varying number of keys. - The values associated with the specified key will always be integers. - The order of dictionaries in the returned list should be sorted by the values associated with the specified key in ascending order. - The function should not modify the input list.","solution":"def filter_and_sort(data: list[dict], key: str) -> list[dict]: Filters out dictionaries that do not contain the specified key and returns a new list of dictionaries sorted by the values of the specified key in ascending order. # Filter out dictionaries that do not contain the specified key filtered_data = [item for item in data if key in item] # Sort the filtered dictionaries by the values of the specified key sorted_data = sorted(filtered_data, key=lambda x: x[key]) return sorted_data"},{"question":"# Board Game Inventory Management You are building an inventory management system for a board game store. The store maintains a stock of board games, and each game is characterized by its unique `game_id`, name, quantity, and price. Write a class `BoardGameInventory` to manage the inventory with the following functionalities: # Task 1. **Add a game**: Add a new board game to the inventory. If a game with the same `game_id` already exists, update its quantity and price. 2. **Remove a game**: Remove a board game by its `game_id`. If the game does not exist, raise an exception. 3. **Update quantity**: Update the quantity of an existing board game by `game_id`. If the game does not exist, raise an exception. 4. **Get total inventory value**: Calculate the total value of all games in the inventory. 5. **Find game by name**: Retrieve the `game_id` and current quantity of a game by its name. # Class Signature ```python class BoardGameInventory: def __init__(self): pass def add_game(self, game_id: int, name: str, quantity: int, price: float) -> None: pass def remove_game(self, game_id: int) -> None: pass def update_quantity(self, game_id: int, quantity: int) -> None: pass def get_total_inventory_value(self) -> float: pass def find_game_by_name(self, name: str) -> tuple: pass ``` # Example ```python # Example usage inventory = BoardGameInventory() # Adding games to the inventory inventory.add_game(1, \\"Catan\\", 10, 39.99) inventory.add_game(2, \\"Pandemic\\", 5, 29.99) # Updating the quantity of an existing game inventory.update_quantity(1, 15) # Removing a game inventory.remove_game(2) # Checking total inventory value total_value = inventory.get_total_inventory_value() # Finding a game by name game_info = inventory.find_game_by_name(\\"Catan\\") # (1, 15) ``` # Requirements 1. Use an appropriate data structure to store the inventory. 2. Add necessary error handling. 3. Ensure all methods perform their tasks efficiently. 4. Methods should be readable and maintainable. # Notes - Assume that game names are unique. - Prices are represented as floating-point numbers and quantities as integers. - Raise a custom exception with an appropriate message if the game to be removed or updated does not exist.","solution":"class GameNotFoundException(Exception): def __init__(self, message): self.message = message super().__init__(self.message) class BoardGameInventory: def __init__(self): self.inventory = {} def add_game(self, game_id: int, name: str, quantity: int, price: float) -> None: self.inventory[game_id] = { \\"name\\": name, \\"quantity\\": quantity, \\"price\\": price } def remove_game(self, game_id: int) -> None: if game_id in self.inventory: del self.inventory[game_id] else: raise GameNotFoundException(\\"Game with the given ID does not exist.\\") def update_quantity(self, game_id: int, quantity: int) -> None: if game_id in self.inventory: self.inventory[game_id][\'quantity\'] = quantity else: raise GameNotFoundException(\\"Game with the given ID does not exist.\\") def get_total_inventory_value(self) -> float: return sum(game[\'quantity\'] * game[\'price\'] for game in self.inventory.values()) def find_game_by_name(self, name: str) -> tuple: for game_id, game in self.inventory.items(): if game[\'name\'] == name: return (game_id, game[\'quantity\']) raise GameNotFoundException(\\"Game with the given name does not exist.\\")"},{"question":"Given an `n x n` matrix `matrix` and an integer `target`, write a function `spiral_target(matrix, target)` that finds the coordinates of `target` if it exists in the matrix when traversed in a spiral order starting from (0, 0). The coordinates should be returned as a tuple `(x, y)`. If the target doesn\'t exist in the matrix, return `None`. The spiral order traversal starts at the top-left corner of the matrix and proceeds in a clockwise direction around the matrix perimeter towards the center. You must implement the function `spiral_target(matrix, target)` to handle the traversal and search efficiently. **Function signature:** ```python def spiral_target(matrix, target): # Your implementation here ``` **Parameters:** - `matrix` (List[List[int]]): A list of `n` lists, each containing `n` integers. - `target` (int): The integer value to search for in the matrix. **Returns:** - A tuple `(x, y)` representing the coordinates of the target if found, or `None` if the target is not present. # Example: ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] target = 10 result = spiral_target(matrix, target) print(result) # Output: (2, 1) ``` Another example: ```python matrix = [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] target = 5 result = spiral_target(matrix, target) print(result) # Output: (2, 2) ``` Lastly: ```python matrix = [ [1, 2], [4, 3] ] target = 6 result = spiral_target(matrix, target) print(result) # Output: None ```","solution":"def spiral_target(matrix, target): Finds the coordinates of target in the matrix when traversed in a spiral order. if not matrix: return None top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right. for i in range(left, right + 1): if matrix[top][i] == target: return (top, i) top += 1 # Traverse from top to bottom. for i in range(top, bottom + 1): if matrix[i][right] == target: return (i, right) right -= 1 # Traverse from right to left. if top <= bottom: for i in range(right, left - 1, -1): if matrix[bottom][i] == target: return (bottom, i) bottom -= 1 # Traverse from bottom to top. if left <= right: for i in range(bottom, top - 1, -1): if matrix[i][left] == target: return (i, left) left += 1 return None"},{"question":"You are tasked with writing a function named `merge_strings_unique` that merges two strings such that the resulting string contains all unique characters from both strings in the order they first appear. Additionally, the function should measure the time taken to perform the merge operation using `time.time` from the `time` module. **Function Signature:** ```python def merge_strings_unique(str1: str, str2: str) -> Tuple[str, float]: ``` **Parameters:** - `str1`: A string, representing the first string to be merged. - `str2`: A string, representing the second string to be merged. **Returns:** - A tuple containing: - A merged string containing all unique characters from both `str1` and `str2` in the order they first appeared. - The elapsed time in seconds for the computation. **Requirements:** 1. Use `time.time` to track the start and end time of your computation. **Example:** ```python str1 = \\"abac\\" str2 = \\"cab\\" result = merge_strings_unique(str1, str2) print(result) # This should output a tuple like (\\"abac\\", <elapsed_time>) str1 = \\"hello\\" str2 = \\"world\\" result = merge_strings_unique(str1, str2) print(result) # This should output a tuple like (\\"helowrd\\", <elapsed_time>) ``` **Constraints:** - Both `str1` and `str2` will only contain lowercase alphabetic characters. - The lengths of `str1` and `str2` will not exceed 1000 characters each.","solution":"import time from typing import Tuple def merge_strings_unique(str1: str, str2: str) -> Tuple[str, float]: Merges two strings and returns a string containing all unique characters from both strings in the order they first appear, along with the time taken for the computation. start_time = time.time() unique_characters = \\"\\" seen_characters = set() for char in str1 + str2: if char not in seen_characters: unique_characters += char seen_characters.add(char) end_time = time.time() elapsed_time = end_time - start_time return unique_characters, elapsed_time"},{"question":"Objective Design a function `find_subsets_that_sum_to_target(nums, target)` that finds all possible subsets of the input list `nums` that sum up to the given `target`. Each number in `nums` can only be used once in each subset. Requirements 1. **Libraries**: - `itertools.combinations` 2. **Function Signature**: ```python def find_subsets_that_sum_to_target(nums: list, target: int): Finds all subsets of the input list that sum up to the target value. Parameters: ---------- nums : list List of integers. target : int Target sum value. Returns: ------- list of lists List containing all subsets that sum up to the target value. ``` 3. **Parameters**: - `nums`: A list of integers. - `target`: An integer. 4. **Returns**: - A list of lists, where each inner list is a subset of `nums` that sums up to `target`. Example ```python nums = [2, 3, 5, 7] target = 10 print(find_subsets_that_sum_to_target(nums, target)) ``` Expected Output: ```python [[3, 7], [2, 3, 5]] ```","solution":"from itertools import combinations def find_subsets_that_sum_to_target(nums, target): Finds all subsets of the input list that sum up to the target value. Parameters: ---------- nums : list List of integers. target : int Target sum value. Returns: ------- list of lists List containing all subsets that sum up to the target value. result = [] for i in range(1, len(nums) + 1): for combo in combinations(nums, i): if sum(combo) == target: result.append(list(combo)) return result"},{"question":"**Objective**: Write a function named `validate_and_concatenate` that takes a list of strings, validates the format based on specific criteria, and concatenates the valid strings with a specified delimiter. **Requirements**: 1. The function should validate each string to ensure it contains only alphabetic characters and is at least 3 characters long. 2. It should concatenate the valid strings using a given delimiter and return the result. **Input**: - `strings`, which is a list of strings. - `delimiter`, which is a string used to concatenate the valid strings. **Output**: - A single string that concatenates all valid strings from the list, separated by the delimiter. **Function Signature**: ```python def validate_and_concatenate(strings: List[str], delimiter: str) -> str: pass ``` **Behavior**: 1. Validate each string in the input list: - The string must consist only of alphabetic characters. - The string must be at least 3 characters long. 2. Concatenate all valid strings, separated by `delimiter`. **Notes**: - If no valid strings are found, return an empty string. - Maintain the order of valid strings from the original list. Example: ```python strings = [\\"apple\\", \\"12banana\\", \\"kiwi\\", \\"grape\\", \\"o\\"] delimiter = \\"-\\" # Expected Output: \\"apple-kiwi-grape\\" strings = [\\"a\\", \\"bb\\", \\"ccc\\", \\"dddd\\", \\"eeeee\\"] delimiter = \\";\\" # Expected Output: \\"ccc;dddd;eeeee\\" strings = [\\"1234\\", \\"56\\", \\"789\\"] delimiter = \\",\\" # Expected Output: \\"\\" ``` **Instructions**: - Implement the function `validate_and_concatenate`. - Ensure proper validation as per the criteria specified. - The function should handle varying numbers of input strings gracefully.","solution":"from typing import List def validate_and_concatenate(strings: List[str], delimiter: str) -> str: Validates each string in the input list to ensure it contains only alphabetic characters and is at least 3 characters long, then concatenates all valid strings using the provided delimiter. Parameters: strings (List[str]): List of strings to validate and concatenate. delimiter (str): Delimiter used to concatenate the valid strings. Returns: str: The resulting concatenated string of valid strings separated by the delimiter. def is_valid(string): return string.isalpha() and len(string) >= 3 valid_strings = [s for s in strings if is_valid(s)] return delimiter.join(valid_strings)"},{"question":"You are required to implement a function named `find_pattern_indices` that identifies the starting indices of all occurrences of a given pattern in a provided text. This function should take two string arguments: `text` and `pattern`. This function will: 1. Iterate through the `text` to find all positions where the `pattern` begins. 2. Collect these starting indices in a list. # Function Signature: ```python def find_pattern_indices(text: str, pattern: str) -> list: pass ``` # Requirements: - The function should traverse the text, even if the pattern overlaps itself within the text. - Return a list of integers indicating the starting indices of each occurrence of the pattern. - If the pattern does not exist in the text, return an empty list. # Example 1: ```python find_pattern_indices(\'abracadabra\', \'abra\') ``` Output: ``` [0, 7] ``` # Example 2: ```python find_pattern_indices(\'aaaaa\', \'aa\') ``` Output: ``` [0, 1, 2, 3] ``` # Constraints: - Text and pattern will only contain lowercase alphabetical characters. - The function should handle cases where the text or pattern is empty appropriately. If the pattern is empty, return an empty list as finding an empty string doesn\'t make practical sense. # Message Format: The function should return a list with the starting indices of all occurrences of the pattern in the text.","solution":"def find_pattern_indices(text: str, pattern: str) -> list: if not pattern: return [] indices = [] pattern_length = len(pattern) for i in range(len(text) - pattern_length + 1): if text[i:i + pattern_length] == pattern: indices.append(i) return indices"},{"question":"You are developing a text-based game where a character can move through a grid-like dungeon. Implement a function `move_character` that updates the character\'s position based on a series of movement commands. The character starts at the center of a 5x5 grid, and the possible movements are \'N\', \'S\', \'E\', \'W\', corresponding to North (up), South (down), East (right), and West (left). The grid boundaries are from (0, 0) to (4, 4), and the character cannot move outside of these boundaries. If a movement command would cause the character to move outside the grid, it should be ignored. The function should return the final position of the character as a tuple (row, column). Function Signature: ```python def move_character(commands: list) -> tuple: ``` Parameters: - `commands` (list): A list of characters representing the movement commands. Returns: - (tuple): The final position of the character as (row, column). Example: ```python commands = [\'N\', \'E\', \'E\', \'S\', \'S\', \'W\', \'N\'] result = move_character(commands) print(result) # (2, 3) ``` In this example, the character starts at position (2, 2): - Moves North to (1, 2) - Moves East to (1, 3) - Moves East to (1, 4) - Moves South to (2, 4) - Moves South to (3, 4) - Moves West to (3, 3) - Moves North to (2, 3)","solution":"def move_character(commands: list) -> tuple: # Define the starting position at the center of a 5x5 grid position = [2, 2] # Define the possible movements movements = { \'N\': (-1, 0), \'S\': (1, 0), \'E\': (0, 1), \'W\': (0, -1) } for command in commands: if command in movements: move = movements[command] new_position = [position[0] + move[0], position[1] + move[1]] # Check boundaries if 0 <= new_position[0] <= 4 and 0 <= new_position[1] <= 4: position = new_position return tuple(position)"},{"question":"In this problem, you are tasked with creating a function named `spiral_pattern` that uses the `turtle` graphics library to draw an intricate spiral pattern. The function must adhere to the following requirements: 1. **Setup the Turtle Graphics Window:** - Set up a turtle graphics window of size 400x400 pixels using `turtle.setup`. - Set the background color of the window to \\"lightyellow\\". 2. **Turtle Settings:** - Speed up the turtle by setting the speed to the fastest using `turtle.speed(\\"fastest\\")`. - Hide the turtle cursor using `turtle.ht`. 3. **Drawing the Spiral:** - Begin by positioning the turtle at the center of the window, facing upwards. - Draw a series of circular arcs in a spiral pattern, where each arc: - Increases in size by a fixed increment. - Changes color to form a gradient. - The turtle should alternate between moving forward and turning right to create the spiral effect. Here\'s a step-by-step functionality requirement for the `spiral_pattern` function: 1. **Initialize the turtle graphics system:** - Set up the window using `turtle.setup` with a size of 400x400. - Set the background color to \\"lightyellow\\" using `turtle.bgcolor`. 2. **Turtle Movement and Drawing:** - Hide the turtle cursor. - Position the turtle at the center (0,0) and set orientation to face upwards. - Draw 50 arcs to create a spiral, updating the position and direction after each arc. 3. **Color Gradient Effect:** - Change the turtle\'s pen color gradually from a start color to an end color (e.g., blue to red) over the course of drawing the arcs. **Note:** Implement all the functionalities within the `spiral_pattern` function. You are free to decide the details of the size increments and the specific color gradient calculations. Use the provided `turtle` library functions: `turtle.setup`, `turtle.bgcolor`, `turtle.speed`, `turtle.ht`, and `turtle.pencolor`. ```python import turtle def gradient_color(start_color, end_color, steps, step_num): ratio = step_num / steps red = start_color[0] + ratio * (end_color[0] - start_color[0]) green = start_color[1] + ratio * (end_color[1] - start_color[1]) blue = start_color[2] + ratio * (end_color[2] - start_color[2]) return red, green, blue def spiral_pattern(): # Initial setup turtle.setup(400, 400) turtle.bgcolor(\\"lightyellow\\") turtle.speed(\\"fastest\\") turtle.ht() # Hide the turtle turtle.penup() turtle.goto(0, 0) turtle.pendown() start_color = (0, 0, 1) # Blue end_color = (1, 0, 0) # Red steps = 50 for i in range(steps): r, g, b = gradient_color(start_color, end_color, steps, i) turtle.pencolor(r, g, b) turtle.circle(10 + i * 5, 45) # Draw small arc turtle.right(45) # Adjust direction to create spiral turtle.done() spiral_pattern() ```","solution":"import turtle def gradient_color(start_color, end_color, steps, step_num): ratio = step_num / steps red = start_color[0] + ratio * (end_color[0] - start_color[0]) green = start_color[1] + ratio * (end_color[1] - start_color[1]) blue = start_color[2] + ratio * (end_color[2] - start_color[2]) return red, green, blue def spiral_pattern(): # Initial setup turtle.setup(400, 400) turtle.bgcolor(\\"lightyellow\\") turtle.speed(\\"fastest\\") turtle.ht() # Hide the turtle turtle.penup() turtle.goto(0, 0) turtle.pendown() start_color = (0, 0, 1) # Blue end_color = (1, 0, 0) # Red steps = 50 for i in range(steps): r, g, b = gradient_color(start_color, end_color, steps, i) turtle.pencolor(r, g, b) turtle.circle(10 + i * 5, 45) # Draw small arc turtle.right(45) # Adjust direction to create spiral turtle.done() # Run the function if __name__ == \'__main__\': spiral_pattern()"},{"question":"You are developing a gardening simulation game where players cultivate different types of plants in their virtual garden. Each plant type grows at a different rate and requires a specific amount of water daily. Your task is to write a function that simulates the growth of plants over a given number of days, updating their height accordingly. # Function Requirements 1. Write a function named `simulate_growth` that accepts two parameters: `plants`, a list of dictionaries representing different plants, and `days`, an integer representing the number of days over which the simulation runs. 2. Each plant dictionary contains the following keys: - \\"name\\": The name of the plant as a string. - \\"initial_height\\": The initial height of the plant in centimeters as a float. - \\"growth_rate\\": The daily growth rate in centimeters as a float. - \\"daily_water_need\\": The amount of water the plant needs each day in liters as a float. 3. The function should iterate over each plant and update its height daily based on its growth rate. 4. If a plant doesn\'t receive the required amount of water for a day, it should not grow for that day. 5. Use random chance to determine if the plant receives enough water each day. The chance to receive the required water is determined by generating a random number between 0 and 19. If the number is less than 16, the plant receives enough water; otherwise, it doesn\'t. 6. Return the updated list of plant dictionaries with their final heights after the simulation. # Example Plant List ```python plants = [ {\\"name\\": \\"Sunflower\\", \\"initial_height\\": 10.0, \\"growth_rate\\": 1.5, \\"daily_water_need\\": 2.0}, {\\"name\\": \\"Rose\\", \\"initial_height\\": 5.0, \\"growth_rate\\": 1.2, \\"daily_water_need\\": 1.5}, {\\"name\\": \\"Lily\\", \\"initial_height\\": 8.0, \\"growth_rate\\": 0.8, \\"daily_water_need\\": 1.0} ] ``` # Example ```python plants = [ {\\"name\\": \\"Sunflower\\", \\"initial_height\\": 10.0, \\"growth_rate\\": 1.5, \\"daily_water_need\\": 2.0}, {\\"name\\": \\"Rose\\", \\"initial_height\\": 5.0, \\"growth_rate\\": 1.2, \\"daily_water_need\\": 1.5}, {\\"name\\": \\"Lily\\", \\"initial_height\\": 8.0, \\"growth_rate\\": 0.8, \\"daily_water_need\\": 1.0} ] days = 7 updated_plants = simulate_growth(plants, days) print(updated_plants) ``` # Implementation Notes - Ensure the water distribution and growth simulation is deterministic for each day. - Use the `random` module to generate random numbers for water distribution. - Focus on correctly updating the height based on whether the plant receives its daily water need. # Final Output The function should return a list of plant dictionaries, each updated with its final height after the specified number of days. # Hint Consider using a loop to iterate through each plant and another loop to simulate each day\'s growth, applying the rules for water needs accordingly.","solution":"import random def simulate_growth(plants, days): Simulates the growth of plants over a given number of days. Parameters: plants (list of dicts): A list of plant dictionaries. days (int): Number of days over which the simulation runs. Returns: list of dicts: Updated list of plant dictionaries with final heights. for plant in plants: # Start with the initial height height = plant[\'initial_height\'] for day in range(days): # Simulate if the plant receives enough water water_received_roll = random.randint(0, 19) if water_received_roll < 16: # If the plant receives enough water, it grows height += plant[\'growth_rate\'] plant[\'final_height\'] = height return plants"},{"question":"You are required to implement a function that sorts a list of dictionaries based on a specified key. Specifically, create a function named `sort_dicts_by_key` that accepts a list of dictionaries and a string key. The function should return a new list of dictionaries sorted in ascending order by the values associated with the given key. The function `sort_dicts_by_key` should handle cases where the key might be missing in some of the dictionaries by considering their values as `None` and placing these dictionaries at the end of the sorted list. Here is the signature of the function you need to implement: ```python def sort_dicts_by_key(dicts: list, key: str) -> list: pass ``` # Example Usage Given the list of dictionaries: ```python dicts = [ {\\"name\\": \\"John Doe\\", \\"age\\": 30}, {\\"name\\": \\"Jane Smith\\", \\"age\\": 25}, {\\"name\\": \\"Alice Johnson\\", \\"age\\": 28}, {\\"name\\": \\"Bob Brown\\"}, ] ``` Calling: ```python sorted_dicts = sort_dicts_by_key(dicts, \\"age\\") ``` Should return: ```python [ {\\"name\\": \\"Jane Smith\\", \\"age\\": 25}, {\\"name\\": \\"Alice Johnson\\", \\"age\\": 28}, {\\"name\\": \\"John Doe\\", \\"age\\": 30}, {\\"name\\": \\"Bob Brown\\"}, ] ``` # Constraints 1. The function should maintain the original order for dictionaries that have the same value for the specified key (stable sort). 2. Handle cases where the key is not present in a dictionary by placing those dictionaries at the end of the sorted list. 3. The function should be able to handle an empty list of dictionaries gracefully.","solution":"def sort_dicts_by_key(dicts, key): Sorts a list of dictionaries based on a specified key. Dictionaries without the key are considered having value None and are placed at the end. return sorted(dicts, key=lambda d: (d.get(key) is None, d.get(key)))"},{"question":"You are required to implement a function that simulates a simple inventory management system for a small store. The system should be able to add items, remove items, and update the quantity of items in stock. Additionally, it should provide the ability to display the current inventory. # Task Implement a class-based system `Inventory` with the following methods: 1. **`__init__()`**: - Initializes an empty dictionary to store the inventory items. 2. **`add_item(item_name: str, quantity: int) -> None`**: - Adds a specified quantity of an item to the inventory. - If the item already exists, it should update the quantity accordingly. - It should handle invalid inputs gracefully (e.g., negative quantities). 3. **`remove_item(item_name: str, quantity: int) -> None`**: - Removes a specified quantity of an item from the inventory. - If the item does not exist, or if the quantity to remove exceeds the available quantity, it should print an appropriate error message. - It should handle invalid inputs gracefully (e.g., negative quantities). 4. **`update_quantity(item_name: str, quantity: int) -> None`**: - Updates the quantity of a specified item to the given value. - If the item does not exist, it should print an error message. - It should handle invalid inputs gracefully (e.g., negative quantities). 5. **`display_inventory() -> str`**: - Returns a string representation of the inventory, listing all items and their corresponding quantities. - If the inventory is empty, it should return an appropriate message. # Method Specifications - **`add_item(item_name: str, quantity: int) -> None`**: Method to add the specified quantity of an item to the inventory. - **`remove_item(item_name: str, quantity: int) -> None`**: Method to remove the specified quantity of an item from the inventory. - **`update_quantity(item_name: str, quantity: int) -> None`**: Method to update the quantity of an item in the inventory. - **`display_inventory() -> str`**: Method to display the current items and their quantities in the inventory. # Example: ```python inv = Inventory() inv.add_item(\\"apple\\", 10) inv.add_item(\\"banana\\", 5) inv.add_item(\\"apple\\", 5) inv.remove_item(\\"banana\\", 2) inv.update_quantity(\\"banana\\", 10) print(inv.display_inventory()) ``` # Output: ``` Current Inventory: apple: 15 banana: 10 ``` # Note: - Ensure your implementation handles edge cases such as adding, removing, or updating items with invalid quantities. - Print appropriate error messages when operations cannot be performed as requested. # Class Definition ```python class Inventory: def __init__(self): pass def add_item(self, item_name: str, quantity: int) -> None: pass def remove_item(self, item_name: str, quantity: int) -> None: pass def update_quantity(self, item_name: str, quantity: int) -> None: pass def display_inventory(self) -> str: pass ```","solution":"class Inventory: def __init__(self): self.items = {} def add_item(self, item_name: str, quantity: int) -> None: if quantity < 0: print(\\"Cannot add a negative quantity\\") return if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove_item(self, item_name: str, quantity: int) -> None: if quantity < 0: print(\\"Cannot remove a negative quantity\\") return if item_name not in self.items: print(f\\"Item \'{item_name}\' does not exist\\") return if self.items[item_name] < quantity: print(f\\"Cannot remove {quantity} \'{item_name}\' as it exceeds the current stock\\") return self.items[item_name] -= quantity if self.items[item_name] == 0: del self.items[item_name] def update_quantity(self, item_name: str, quantity: int) -> None: if quantity < 0: print(\\"Cannot update to a negative quantity\\") return if item_name not in self.items: print(f\\"Item \'{item_name}\' does not exist\\") return self.items[item_name] = quantity def display_inventory(self) -> str: if not self.items: return \\"Inventory is empty\\" inventory_list = \\"Current Inventory:n\\" for item, quantity in self.items.items(): inventory_list += f\\"{item}: {quantity}n\\" return inventory_list.strip()"},{"question":"In this problem, you are tasked with creating a function that generates a list of prime numbers up to a given limit using the Sieve of Eratosthenes algorithm. Specifically, you will write a function named `sieve_of_eratosthenes(n)` which will return a list of all prime numbers less than or equal to `n`. Key details: 1. The function should use the Sieve of Eratosthenes algorithm to find all primes less than or equal to `n`. 2. The function should be efficient in terms of time complexity, closely adhering to the logic of the Sieve algorithm. 3. You are not allowed to use any built-in functions or libraries that directly solve the problem (e.g., `sympy.prime`). 4. The function should handle cases where `n` is less than 2 by returning an empty list. The aim of this problem is to help you understand the Sieve of Eratosthenes algorithm and its implementation in Python, focusing on loops and list manipulations. Your function should follow this general structure: ```python def sieve_of_eratosthenes(n): if n < 2: return [] primes = [True] * (n + 1) # Create a list of True values for all indices 0 to n p = 2 while (p * p <= n): if (primes[p] == True): # Updating all multiples of p to False for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers # Example usage: print(sieve_of_eratosthenes(30)) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] ```","solution":"def sieve_of_eratosthenes(n): if n < 2: return [] primes = [True] * (n + 1) # Create a list of True values for all indices 0 to n p = 2 while (p * p <= n): if (primes[p] == True): # Updating all multiples of p to False for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers"},{"question":"In this problem, you are tasked with creating a function called `find_path_in_maze` that, given a maze represented as a 2D list, finds a path from the top-left corner to the bottom-right corner. The maze consists of cells that may either be open (represented by `0`) or blocked (represented by `1`). Your task is to implement the function to determine if such a path exists and, if it does, return the path as a list of tuples, where each tuple represents a coordinate `(row, col)` in the maze. 1. **Function Purpose**: The function should use backtracking or other algorithmic techniques to explore potential pathways from the top-left corner to the bottom-right corner. If a path exists, the function should return the path taken. If multiple paths exist, any valid path can be returned. If no such path exists, return an empty list. 2. **Function Signature**: - Name: `find_path_in_maze` - Parameters: - `maze`: A 2D list where each element is either `0` (open) or `1` (blocked). - Returns: A list of tuples representing the path from the top-left to the bottom-right of the maze, or an empty list if no valid path is found. 3. **Additional Requirements**: - Ensure that the function is efficiently implemented to handle various maze sizes. - The path should not revisit any cell. - Consider edge cases, such as when the start or end cell is blocked, or when the maze is very small. - The function should return the coordinates as 0-indexed. Here is an example of how the function should work: ```python # Input maze = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] # Function call path = find_path_in_maze(maze) # Possible Output (one of the valid paths) path = [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (4, 2), (4, 3), (4, 4)] ```","solution":"def find_path_in_maze(maze): def is_valid_move(maze, position, n, m): x, y = position if x < 0 or x >= n or y < 0 or y >= m: return False if maze[x][y] == 1: return False return True def find_path(maze, position, path, n, m, visited): x, y = position if position == (n-1, m-1): path.append(position) return True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] path.append(position) visited.add(position) for direction in directions: new_x, new_y = x + direction[0], y + direction[1] new_position = (new_x, new_y) if is_valid_move(maze, new_position, n, m) and new_position not in visited: if find_path(maze, new_position, path, n, m, visited): return True path.pop() return False if not maze or not maze[0] or maze[0][0] == 1 or maze[-1][-1] == 1: return [] n, m = len(maze), len(maze[0]) path = [] visited = set() if find_path(maze, (0, 0), path, n, m, visited): return path else: return []"},{"question":"**Task: Implement a Function to Simulate a Loading Spinner** You are assigned the task of creating a Python function named `spinner` that simulates a loading spinner in the console. The spinner should rotate indefinitely until stopped manually (e.g., by pressing `Control + C`). Specifically, you need to: - Write a function `spinner(spin_interval: float) -> None` that takes one argument: - `spin_interval`: A float representing the interval in seconds between each frame of the spinner. - The spinner should display a rotating line that cycles through the characters `|`, `/`, `-`, and `` in this order. - The spinner should overwrite the previous character in the same line to give the appearance of rotation. # Requirements 1. **Library APIs**: You should use the following functions from the `time` and `sys` modules: - `time.sleep`: This function should be used to introduce a delay of `spin_interval` seconds between each frame. - `sys.stdout.write` and `sys.stdout.flush`: These functions should be used to display the spinner character and to ensure it is immediately printed in the console. 2. **Implementation Details**: - Your function should run indefinitely, cycling through the spinner characters (`|`, `/`, `-`, ``) and updating the console output accordingly. - The spinner should overwrite the previous character every time it updates. # Example: If the user calls `spinner(0.1)`, the function should continuously display a rotating spinner in the console with each frame displayed for 0.1 seconds, indefinitely. ```python spinner(0.1) ``` Sample output in-place (one character rotating): ``` | / (after 0.1 seconds) / (another 0.1 seconds) - (another 0.1 seconds) (another 0.1 seconds) | (and continues rotating in this manner) ... ``` This function will continue running and simulating the spinning effect until manually stopped.","solution":"import sys import time def spinner(spin_interval: float) -> None: Simulates a loading spinner in the console. :param spin_interval: A float representing the interval in seconds between each frame of the spinner. spinner_chars = [\'|\', \'/\', \'-\', \'\'] while True: for char in spinner_chars: sys.stdout.write(char) sys.stdout.flush() time.sleep(spin_interval) sys.stdout.write(\'b\')"},{"question":"Write a function that takes a list of integers and returns a new list containing only the prime numbers from the input list. The function should identify prime numbers and ensure no duplicates in the resulting list. The function should output a list of unique prime numbers in ascending order. You should write self-contained code starting with: ``` def filter_primes(input_list): ```","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(input_list): Filters and returns a list of unique prime numbers from the input list in ascending order. prime_set = {num for num in input_list if is_prime(num)} return sorted(prime_set)"},{"question":"Write a Python function `normalize_data` that normalizes a given dataset using min-max normalization technique. The function should take the following parameters: - `data`: A 2D list or a 2D numpy array where each row represents a data point and each column represents a feature. - `axis`: An integer, either 0 or 1, indicating whether to normalize along the columns (axis=0) or along the rows (axis=1). Default is 0. - `feature_range`: A tuple containing two floats `(min, max)` representing the desired range of the transformed data. Default is (0, 1). The function should normalize the data such that each value in the dataset is scaled to the specified feature range along the given axis. If `axis=0`, each column is normalized independently. If `axis=1`, each row is normalized independently. The function should handle edge cases, such as constant columns or rows, appropriately. Example usage: ```python data = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] normalized_data = normalize_data(data, axis=0, feature_range=(0, 1)) print(normalized_data) # Expected Output (columns normalized between 0 and 1): # [ # [0.0, 0.0, 0.0, 0.0], # [0.5, 0.5, 0.5, 0.5], # [1.0, 1.0, 1.0, 1.0] # ] ```","solution":"import numpy as np def normalize_data(data, axis=0, feature_range=(0, 1)): Normalize a dataset using min-max normalization technique along specified axis (0 for columns, 1 for rows). Parameters: data (list of list or 2D numpy array): The input data to be normalized. axis (int): Axis along which to normalize. Default is 0. feature_range (tuple): Desired range of transformed data. Default is (0, 1). Returns: list of list: Normalized data. data = np.array(data) data_min = np.min(data, axis=axis, keepdims=True) data_max = np.max(data, axis=axis, keepdims=True) scale = feature_range[1] - feature_range[0] # Handle constant columns or rows: Avoid division by zero denom = data_max - data_min denom[denom == 0] = 1 # To avoid division by zero normalized_data = (data - data_min) / denom * scale + feature_range[0] return normalized_data.tolist()"},{"question":"You are provided with a DataFrame `sales_data` that contains sales information for a store. The DataFrame includes columns `Item`, `Date`, and `Sales Amount` where `Item` is the name of the item sold, `Date` is the date of the sale in YYYY-MM-DD format, and `Sales Amount` is the total sales amount in dollars for that item on that date. Your task is to create a function `calculate_sales_stats(sales_data)` that calculates and displays statistics on the sales data. The function should: 1. Calculate the total sales amount and display it. 2. Identify the item with the highest sale amount for any single day and display the item name, date, and sales amount. 3. Calculate and display the average daily sales amount for each item. 4. Print the time taken for the function to execute. Use the `pandas.to_datetime` function to convert the `Date` column to datetime objects for any necessary time-based calculations, and `time.time` to measure the computation time. Here’s the structure and some initial guidance for the function: ```python import pandas as pd import time def calculate_sales_stats(sales_data): Displays statistics on the sales data. print(\'nCalculating Sales Statistics...n\') start_time = time.time() # Convert the \'Date\' column to datetime sales_data[\'Date\'] = pd.to_datetime(sales_data[\'Date\']) # Calculate the total sales amount total_sales = sales_data[\'Sales Amount\'].sum() print(f\'Total Sales Amount: {total_sales:.2f}\') # Find the item with the highest sale amount for any single day max_sales_row = sales_data.loc[sales_data[\'Sales Amount\'].idxmax()] max_sales_item = max_sales_row[\'Item\'] max_sales_date = max_sales_row[\'Date\'] max_sales_amount = max_sales_row[\'Sales Amount\'] print(f\'Highest sale by item: {max_sales_item} on {max_sales_date.date()}, Amount: {max_sales_amount:.2f}\') # Calculate and display the average daily sales amount for each item avg_daily_sales = sales_data.groupby(\'Item\')[\'Sales Amount\'].mean() print(\'nAverage Daily Sales Amount by Item:\') for item, avg_sale in avg_daily_sales.items(): print(f\'{item}: {avg_sale:.2f}\') print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\'*40) ``` Here, the function `calculate_sales_stats()` calculates the total sales, the highest single-day sale for any item, and the average daily sales amount for each item. You need to fill in the missing code to complete the function.","solution":"import pandas as pd import time def calculate_sales_stats(sales_data): Displays statistics on the sales data. print(\'nCalculating Sales Statistics...n\') start_time = time.time() # Convert the \'Date\' column to datetime sales_data[\'Date\'] = pd.to_datetime(sales_data[\'Date\']) # Calculate the total sales amount total_sales = sales_data[\'Sales Amount\'].sum() print(f\'Total Sales Amount: {total_sales:.2f}\') # Find the item with the highest sale amount for any single day max_sales_row = sales_data.loc[sales_data[\'Sales Amount\'].idxmax()] max_sales_item = max_sales_row[\'Item\'] max_sales_date = max_sales_row[\'Date\'] max_sales_amount = max_sales_row[\'Sales Amount\'] print(f\'Highest sale by item: {max_sales_item} on {max_sales_date.date()}, Amount: {max_sales_amount:.2f}\') # Calculate and display the average daily sales amount for each item avg_daily_sales = sales_data.groupby(\'Item\')[\'Sales Amount\'].mean() print(\'nAverage Daily Sales Amount by Item:\') for item, avg_sale in avg_daily_sales.items(): print(f\'{item}: {avg_sale:.2f}\') print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\'*40)"},{"question":"Write a function named `shuffle_and_concat` that takes a list of strings and shuffles the characters within each string, then concatenates these shuffled strings into a single string. To accomplish this task: 1. You need to shuffle the characters within each individual string using the `random.sample` method from the `random` library. 2. Then, concatenate these shuffled strings into a single string. 3. Return this final concatenated string. Specifications: - The function should be named `shuffle_and_concat`. - The input to the function will be a list of strings. - Each string within the list should have its characters shuffled randomly. - Concatenate all the shuffled strings into one single string. - Return the resulting single string. Ensure to make proper use of Python\'s `random.sample` method from the `random` library for shuffling the characters within each string. Here\'s an example implementation context: ```python import random def shuffle_and_concat(list_of_strings): # Implementation goes here ``` Example: ```python # Given a list of strings lst = [\\"abc\\", \\"def\\", \\"ghi\\"] # Possible output after shuffling and concatenation shuffle_and_concat(lst) # Output could be \\"cbadefihg\\", \\"bacfedgih\\", etc. ``` Your task is to implement and test the function `shuffle_and_concat` that adheres to these specifications.","solution":"import random def shuffle_and_concat(list_of_strings): Shuffles the characters within each string and concatenates them. Parameters: list_of_strings (list of str): List of strings to shuffle and concatenate. Returns: str: The single concatenated string of shuffled characters from each input string. shuffled_strings = [\'\'.join(random.sample(s, len(s))) for s in list_of_strings] return \'\'.join(shuffled_strings)"},{"question":"Design a function that takes a list of integers and returns the length of the longest subsequence where the absolute difference between any two consecutive elements is at most 1. The function should maintain a time complexity of O(n). The function should output: int: The length of the longest subsequence matching the condition. You should write self-contained code starting with: ``` def longest_subsequence(arr): ```","solution":"def longest_subsequence(arr): Returns the length of the longest subsequence where the absolute difference between any two consecutive elements is at most 1. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are developing an application that interacts with an online bookstore\'s API. One of the requirements is to implement a caching mechanism to minimize the number of API requests. The cache should store the results of API calls and return the cached result for subsequent requests with the same parameters, until the cache is explicitly updated. Your task is to implement a function called `get_book_details` that fetches book details given a `book_id`. The function should utilize an in-memory cache to store the results of previous API calls. If a request is made for a book ID that is in the cache, it should return the cached result instead of making another API call. The function should take in two arguments: - `book_id` (an integer that uniquely identifies a book) - `update_cache` (a boolean flag indicating whether to update the cache with a fresh API call; defaults to `False`) The API endpoint to get book details is `https://api.onlinebookstore.com/book/{book_id}`, where `{book_id}` should be replaced with the actual book ID. # Requirements 1. **Implementation**: You need to implement a function with the following signature: ```python def get_book_details(book_id: int, update_cache: bool = False) -> dict: ``` 2. **Libraries**: You may use the `requests` library to make HTTP requests. # Example Usage: Assuming the `book_id` is 123: ```python book_details = get_book_details(123) print(book_details) # Should print the book details either from cache or from the API book_details = get_book_details(123, update_cache=True) print(book_details) # Should print the updated book details fetched from the API ``` # Notes: - Ensure the cache is updated only if `update_cache` is `True`. - The cache should be implemented as a dictionary where the keys are book IDs and values are the results from the API. - Handle possible exceptions from the API call (e.g., network errors, non-200 status codes) gracefully by returning an appropriate message or an empty dictionary.","solution":"import requests # In-memory cache dictionary cache = {} def get_book_details(book_id: int, update_cache: bool = False) -> dict: Fetches book details from the API or the cache. Args: book_id (int): The unique identifier of the book. update_cache (bool): Flag indicating whether to update the cache with a fresh API call. Defaults to False. Returns: dict: A dictionary containing book details. global cache # If not updating cache and book_id exists in cache, return cached result if not update_cache and book_id in cache: return cache[book_id] # Make API call to fetch book details try: response = requests.get(f\\"https://api.onlinebookstore.com/book/{book_id}\\") response.raise_for_status() # Raise an exception for HTTP errors # Parse the JSON response book_details = response.json() # Update cache cache[book_id] = book_details return book_details except requests.RequestException as e: print(f\\"Error fetching book details: {e}\\") return {}"},{"question":"You are tasked with writing a function named `find_max_subarray_sum` that finds the maximum sum of a contiguous subarray within a given one-dimensional array of integers. 1. The input is an array of integers that can contain both positive and negative numbers. 2. The function should return the maximum possible sum of any contiguous subarray. Requirements - **Function signature**: `def find_max_subarray_sum(arr: List[int]) -> int:` - **Inputs**: - `arr`: A list of integers containing at least one number. - **Outputs**: - An integer, representing the maximum sum of a contiguous subarray. Instructions - Implement the function following the given signature. - Use an efficient algorithm to solve the problem. - Consider edge cases, such as when the array contains all negative numbers. - You may assume the input list has at least one element. Example Given the following input: ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` Your function `find_max_subarray_sum` should return: ``` 6 ``` Explanation: The subarray [4, -1, 2, 1] has the largest sum = 6. Another example: ```python arr = [1, 2, 3, 4, -10] ``` Your function `find_max_subarray_sum` should return: ``` 10 ``` Explanation: The subarray [1, 2, 3, 4] has the largest sum = 10. Note: The problem should be solved in linear time complexity.","solution":"from typing import List def find_max_subarray_sum(arr: List[int]) -> int: Finds the maximum sum of a contiguous subarray within a given one-dimensional array of integers. Args: arr (List[int]): List of integers. Returns: int: Maximum possible sum of any contiguous subarray. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are required to implement a function `calculate_median_temperature` to process a given dataset of temperature readings and output the median temperature for each city over each year. **Function Specification:** **Function Name:** `calculate_median_temperature` **Inputs:** - `temperatures`: A dictionary where: - Keys are strings representing city names (e.g., `\\"New York\\"`, `\\"Los Angeles\\"`). - Values are dictionaries themselves, where: - Keys are strings in the format `\\"YYYY-MM\\"` representing the month and year (e.g., `\\"2022-01\\"`, `\\"2022-02\\"`). - Values are lists of integers or floats representing daily temperature readings for that month. **Outputs:** - A dictionary where: - Keys are strings representing city names. - Values are dictionaries, where: - Keys are integers representing the year (e.g., `2022`, `2023`). - Values are floats representing the median temperature of that city for the respective year. **Requirements:** 1. You must use the `numpy.median` function to calculate the median. 2. The function should iterate through each city and each year to aggregate all temperature readings for the entire year. 3. Calculate and store the median temperature for each city for each year. **Instructions:** 1. Extract temperature readings for each month, accumulate them per year. 2. Calculate the median temperature for each year using `numpy.median`. Example call to your function: ```python temperatures = { \\"New York\\": { \\"2022-01\\": [30, 32, 35, 28, 31, 30, 29], \\"2022-02\\": [31, 29, 32, 33, 30, 29], \\"2023-01\\": [32, 34, 30, 31, 35] }, \\"Los Angeles\\": { \\"2022-01\\": [50, 52, 53, 51, 49, 48], \\"2023-01\\": [60, 61, 62, 59, 58, 57], \\"2023-02\\": [61, 60, 62, 63, 62] } } print(calculate_median_temperature(temperatures)) ``` Expected Output (example): ```python { \\"New York\\": { 2022: 30.5, 2023: 32.0 }, \\"Los Angeles\\": { 2022: 50.5, 2023: 60.5 } } ```","solution":"import numpy as np def calculate_median_temperature(temperatures): Calculate the median temperature for each city for each year given the input temperature readings. :param temperatures: A dictionary with city names as keys and monthly temperature readings as values. :return: A dictionary with city names as keys and yearly median temperature as values. median_temperatures = {} for city, monthly_temps in temperatures.items(): yearly_temps = {} for month_year, temps in monthly_temps.items(): year = int(month_year.split(\'-\')[0]) if year not in yearly_temps: yearly_temps[year] = [] yearly_temps[year].extend(temps) median_temperatures[city] = {year: np.median(temps) for year, temps in yearly_temps.items()} return median_temperatures"},{"question":"The task is to write a function named `find_related_emails` that takes a list of strings as input. Each string in the list represents an email contact and its corresponding groups. The function should parse the list and return a dictionary where the keys are email addresses and the values are lists of groups those emails belong to. The input strings will follow this pattern: ``` \\"<email> belongs to <group1>, <group2>, ... , <groupN>.\\" ``` For example: ``` \\"jane.doe@example.com belongs to group1, group2, group3.\\" \\"john.smith@example.com belongs to group2, group4.\\" \\"alice.jones@example.com belongs to no groups.\\" ``` If an email belongs to no groups, the format will be: ``` \\"<email> belongs to no groups.\\" ``` You need to return a dictionary where each email is associated with the list of groups it belongs to. If an email belongs to no groups, it should map to an empty list. Use Python’s `re` library, specifically the `re.findall` and `re.match` functions, to perform the parsing tasks. **Function Signature:** ```python def find_related_emails(lines: List[str]) -> Dict[str, List[str]]: pass ``` **Requirements for Solution:** - You must use `re.findall` and `re.match` from the Python `re` library as specified.","solution":"import re from typing import List, Dict def find_related_emails(lines: List[str]) -> Dict[str, List[str]]: pattern = re.compile(r\\"(S+@S+) belongs to (.*).\\") email_groups = {} for line in lines: match = pattern.match(line) if match: email, groups_str = match.groups() if groups_str == \\"no groups\\": email_groups[email] = [] else: groups = [group.strip() for group in groups_str.split(\',\')] email_groups[email] = groups return email_groups"},{"question":"You are tasked with building a simple spell checker program which aims to correct words against a given dictionary. The goal of the spell checker is to find the closest matching word from the dictionary for a list of misspelled words based on the Levenshtein distance method. # Function Specification Create a function named `spell_checker` with the following parameters: - `dictionary`: A list of strings representing the valid words. - `words`: A list of strings containing misspelled words that need to be corrected. The function should return: - `corrections`: A list of strings where each string is the closest matching word from the dictionary for each misspelled word in the order they appear in the `words` list. # Detailed Steps 1. **Levenshtein Distance Calculation**: - Implement a helper function to calculate the Levenshtein distance between two given words. 2. **Correction Process**: - For each word in the `words` list, find the word in the `dictionary` that has the smallest Levenshtein distance to it. - If multiple words have the same minimum distance, return the first one in the `dictionary`. 3. **Output Generation**: - Compile the list of corrected words and return it. # Example ```python def levenshtein_distance(s1, s2): if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def spell_checker(dictionary, words): corrections = [] for word in words: min_distance = float(\'inf\') closest_word = \\"\\" for dict_word in dictionary: distance = levenshtein_distance(word, dict_word) if distance < min_distance: min_distance = distance closest_word = dict_word corrections.append(closest_word) return corrections dictionary = [\\"apple\\", \\"banana\\", \\"orange\\", \\"grape\\"] words = [\\"appl\\", \\"banan\\", \\"ornge\\", \\"grap\\"] corrections = spell_checker(dictionary, words) print(\\"Corrections:\\", corrections) ``` In this example, `spell_checker` should return the closest matching words for the misspelled list `words` according to the dictionary provided, making use of the Levenshtein distance to determine the closest match.","solution":"def levenshtein_distance(s1, s2): if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def spell_checker(dictionary, words): corrections = [] for word in words: min_distance = float(\'inf\') closest_word = \\"\\" for dict_word in dictionary: distance = levenshtein_distance(word, dict_word) if distance < min_distance: min_distance = distance closest_word = dict_word corrections.append(closest_word) return corrections"},{"question":"You are required to design a function named `find_latest_tweet` that retrieves the latest tweet posted by a specified Twitter user from the Twitter API and prints the tweet\'s text. The function must use Python\'s `requests` library to interact with the API and handle authentication. Specifically, your task is to define the following function: ```python def find_latest_tweet(username): Fetch the latest tweet of the specified user and print its text. Args: username (str): The Twitter handle of the user whose latest tweet is to be fetched. # The function should do the following: # 1. Create the URL for fetching the user\'s tweets using the provided username. # 2. Send a GET request to retrieve the latest tweets. # 3. Extract and print the text of the latest tweet from the response data. # Important: Handle authorization by including the necessary headers. ``` **Requirements:** - Use the `requests` library to send HTTP GET requests. - Include the appropriate authorization header for OAuth authentication. - Print a message indicating the process of fetching the latest tweet. - Print the text content of the latest tweet received from the API. The base URL for the Twitter API is `https://api.twitter.com/2` (replace this placeholder with the actual base URL). You need to use the `Bearer` token for authorization. Here is an example of how you might call this function: ```python find_latest_tweet(\\"jack\\") ``` This function should: 1. Print a message indicating that the fetching process has started. 2. Fetch the latest tweet from the user \\"jack\\". 3. Print a message indicating that the tweet is being retrieved. 4. Print the text of the latest tweet. 5. Print a message indicating that the process is complete.","solution":"import requests def find_latest_tweet(username): Fetch the latest tweet of the specified user and print its text. Args: username (str): The Twitter handle of the user whose latest tweet is to be fetched. # Replace \'YOUR_BEARER_TOKEN\' with your actual Bearer Token from Twitter API BEARER_TOKEN = \'YOUR_BEARER_TOKEN\' headers = { \\"Authorization\\": f\\"Bearer {BEARER_TOKEN}\\" } url = f\\"https://api.twitter.com/2/tweets?username={username}&max_results=1\\" print(f\\"Fetching the latest tweet from @{username}...\\") response = requests.get(url, headers=headers) if response.status_code == 200: data = response.json() tweets = data.get(\'data\', []) if tweets: latest_tweet = tweets[0][\'text\'] print(f\\"Latest tweet from @{username}: {latest_tweet}\\") else: print(f\\"No tweets found for @{username}\\") else: print(f\\"Failed to fetch tweets from @{username}: {response.status_code}\\")"},{"question":"You are required to develop a function that analyzes a given string and identifies the frequency of the two most common words, eliminating any words that match predefined stop words. The final output should detail these two words along with their frequencies in a specified format. Implement the following function: ```python def most_common_words(text, stop_words): This function takes a text string and a list of stop words, identifies the two most common words excluding the stop words, and returns a list containing the two words along with their frequencies in the format <word>:<count>. Parameters: - text (str): A string of text to analyze. - stop_words (list): A list of words to exclude from analysis. Returns: - List[str]: A list containing two strings formatted as <word>:<count>, arranged in descending order of frequency. pass ``` # Input: - `text`: A string of text, e.g., `\\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\"`. - `stop_words`: A list of words to be excluded, e.g., `[\\"the\\", \\"was\\", \\"not\\"]`. # Output: - A list containing two strings formatted as `<word>:<count>`, with the most frequent word first. # Requirements: - Normalize the case for uniform analysis (e.g., by converting to lowercase). - Ignore punctuation and special characters in the text. - Tiebreaker for words with the same frequency should be alphabetical order. Here is a detailed example to clarify the expected function behavior: # Example: ```python text = \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" stop_words = [\\"the\\", \\"was\\", \\"not\\"] # Explanation: # After removing the stop words and converting to lowercase, the text becomes: # \\"quick brown fox jumps over lazy dog dog amused\\" # Frequency analysis: # \\"quick\\": 1, \\"brown\\": 1, \\"fox\\": 1, \\"jumps\\": 1, \\"over\\": 1, \\"lazy\\": 1, \\"dog\\": 2, \\"amused\\": 1 # The two most common words are \\"dog\\": 2 and then alphabetically \\"amused\\": 1. result = most_common_words(text, stop_words) print(result) # Output: [\\"dog:2\\", \\"amused:1\\"] ``` You need to process the text string to remove any stop words, normalize the text for case and punctuation, and then calculate the word frequencies to determine the two most common words for the final output.","solution":"import re from collections import Counter def most_common_words(text, stop_words): This function takes a text string and a list of stop words, identifies the two most common words excluding the stop words, and returns a list containing the two words along with their frequencies in the format <word>:<count>. Parameters: - text (str): A string of text to analyze. - stop_words (list): A list of words to exclude from analysis. Returns: - List[str]: A list containing two strings formatted as <word>:<count>, arranged in descending order of frequency. # Convert text to lowercase text = text.lower() # Remove punctuation using regex text = re.sub(r\'[^ws]\', \'\', text) # Split the text into words words = text.split() # Remove stop words filtered_words = [word for word in words if word not in stop_words] # Count the frequency of each word word_counts = Counter(filtered_words) # Get the two most common words most_common = word_counts.most_common() # Sort by frequency first and then alphabetically for ties most_common_sorted = sorted(most_common, key=lambda x: (-x[1], x[0])) # Get the top two results top_two = most_common_sorted[:2] # Format the result as \\"<word>:<count>\\" result = [f\\"{word}:{count}\\" for word, count in top_two] return result"},{"question":"You are given a list of tuples, where each tuple contains an item and its corresponding category. Your task is to create a function `group_sort_items(items)` that groups the items by their categories and then sorts the items within each category in alphabetical order. Here are the steps your function should perform: 1. **Group items by their categories:** Organize the items into groups based on their categories using a dictionary. 2. **Sort items within each category:** Sort the items in each category alphabetically. 3. **Return the result:** Return a dictionary where the keys are categories, and the values are lists of the corresponding sorted items. Function Signature: ```python def group_sort_items(items): # Your code here ``` Parameters: - `items` (list of tuples): A list of tuples, where each tuple contains an item (str) and its category (str). Example: ```python items = [ (\\"apple\\", \\"fruit\\"), (\\"carrot\\", \\"vegetable\\"), (\\"banana\\", \\"fruit\\"), (\\"broccoli\\", \\"vegetable\\"), (\\"cherry\\", \\"fruit\\") ] result = group_sort_items(items) print(result) ``` Expected Output: ```python { \\"fruit\\": [\\"apple\\", \\"banana\\", \\"cherry\\"], \\"vegetable\\": [\\"broccoli\\", \\"carrot\\"] } ``` Constraints: - The `items` list will always contain non-empty strings for items and categories. - The items list can contain elements belonging to multiple categories. - There will be at least one item in the list. - There will be no duplicate items within each category.","solution":"def group_sort_items(items): Groups items by their categories and then sorts the items within each category in alphabetical order. Args: - items (list of tuples): A list where each tuple contains an item (str) and its category (str). Returns: - dict: A dictionary where keys are categories and values are lists of sorted items. # Step 1: Initialize a dictionary to store the grouped items category_dict = {} # Step 2: Group items by their categories for item, category in items: if category not in category_dict: category_dict[category] = [] category_dict[category].append(item) # Step 3: Sort items within each category alphabetically for category in category_dict: category_dict[category].sort() return category_dict"},{"question":"You are required to create a function `plot_histogram()` that generates a histogram using data from a normally distributed random sample. This function will utilize the `numpy.random.normal`, `matplotlib.pyplot.hist`, and `matplotlib.pyplot.title` functions from the respective libraries. The resulting histogram will illustrate the distribution of the generated samples. Here\'s what the function should do: 1. **Generate the Data:** - Use `numpy.random.normal` to generate 1000 samples drawn from a normal distribution with a mean of 0 and a standard deviation of 1. 2. **Create the Histogram:** - Use `matplotlib.pyplot.hist` to create a histogram of the generated samples with 30 bins. 3. **Set Plot Attributes:** - Add titles and labels for the X and Y axes, and a main title for the histogram. 4. **Display the Plot:** - Finally, use `matplotlib.pyplot.show()` to display the histogram. ```python import numpy as np import matplotlib.pyplot as plt def plot_histogram(): # Step 1: Generate data from a normal distribution data = np.random.normal(0, 1, 1000) # Step 2: Create the histogram plt.hist(data, bins=30, edgecolor=\'k\', alpha=0.7) # Step 3: Customize the plot plt.title(\\"Histogram of Normally Distributed Data\\") plt.xlabel(\\"Value\\") plt.ylabel(\\"Frequency\\") # Step 4: Display the plot plt.show() ```","solution":"import numpy as np import matplotlib.pyplot as plt def plot_histogram(): Generates and displays a histogram of a normally distributed random sample. # Step 1: Generate data from a normal distribution data = np.random.normal(0, 1, 1000) # Step 2: Create the histogram plt.hist(data, bins=30, edgecolor=\'k\', alpha=0.7) # Step 3: Customize the plot plt.title(\\"Histogram of Normally Distributed Data\\") plt.xlabel(\\"Value\\") plt.ylabel(\\"Frequency\\") # Step 4: Display the plot plt.show()"},{"question":"Design a function `interleave_strings` that takes two strings, `s1` and `s2`, and interleaves their characters to create a new string. If one string is longer than the other, append the remaining characters of the longer string to the end of the result. For instance, given the input strings `s1 = \\"abc\\"` and `s2 = \\"1234\\"`, the interleaved string would be `\\"a1b2c34\\"`. Your task is to: 1. Define a function named `interleave_strings`. 2. Initialize an empty result string. 3. Loop through the characters of both strings, adding them alternately to the result string. 4. Append any remaining characters of the longer string to the result string. 5. Return the resulting interleaved string. **Function Signature:** ```python def interleave_strings(s1: str, s2: str) -> str: pass ``` **Example:** ```python assert interleave_strings(\\"abc\\", \\"1234\\") == \\"a1b2c34\\" assert interleave_strings(\\"abcde\\", \\"xyz\\") == \\"axbyczde\\" ```","solution":"def interleave_strings(s1: str, s2: str) -> str: Interleaves characters of two strings s1 and s2. If one string is longer, append the remaining characters of the longer string to the result. Parameters: s1 (str): The first string to interleave. s2 (str): The second string to interleave. Returns: str: The interleaved string. result = [] len1, len2 = len(s1), len(s2) # Interleave characters from both strings for i in range(min(len1, len2)): result.append(s1[i]) result.append(s2[i]) # Append the remaining characters of the longer string if len1 > len2: result.append(s1[len2:]) else: result.append(s2[len1:]) return \'\'.join(result)"},{"question":"Write a function `find_frequent_elements(nums: List[int], k: int) -> List[int]` that identifies the `k` most frequent elements in a given list of integers. The function should return a list with these `k` elements in order of their frequency from highest to lowest. # Requirements: 1. **Input**: - `nums`: A list of integers. - `k`: An integer representing the number of frequent elements to identify. 2. **Output**: A list containing the `k` most frequent elements in the input list `nums`. 3. **Processing**: - If `k` is greater than the number of unique elements in `nums`, return all unique elements sorted by their frequency. - Use a dictionary to count the frequency of each element in `nums`. - Sort the elements based on their frequency, from highest to lowest. - Return a list of the top `k` frequent elements. # Example: ```python nums = [1, 1, 2, 2, 2, 3, 3, 3, 3] k = 2 result = find_frequent_elements(nums, k) print(result) # Output: [3, 2] ``` # Constraints: - It is guaranteed that the answer is unique, meaning the set of the top `k` frequent elements is distinct.","solution":"from typing import List from collections import Counter def find_frequent_elements(nums: List[int], k: int) -> List[int]: Identifies the k most frequent elements in nums list. :param nums: A list of integers. :param k: An integer representing the number of frequent elements to identify. :return: A list containing the k most frequent elements in nums. frequency = Counter(nums) sorted_elements = sorted(frequency.keys(), key=lambda x: frequency[x], reverse=True) return sorted_elements[:k]"},{"question":"You are required to write a function `find_max_consecutive_ones(nums)` that takes a list of integers `nums` as input, where each integer is either 0 or 1. The function should return the maximum number of consecutive 1s in the list. # Requirements: 1. The function must iterate through the list to find sequences of consecutive 1s. 2. It should keep track of the maximum number of consecutive 1s found. 3. The function should return the maximum count of consecutive 1s found in the list. # Detailed Steps: 1. Initialize two variables: one for storing the maximum count (`max_count`) and another for the current count of consecutive 1s (`current_count`). 2. Iterate through each element in the list: - If the element is 1, increment `current_count`. - If the element is 0, compare `current_count` with `max_count` and update `max_count` if `current_count` is larger. Then, reset `current_count` to 0. 3. After the loop, perform a final comparison between `current_count` and `max_count` to ensure the last sequence of 1s is considered. 4. Return `max_count`. # Constraints: - The function should handle various edge cases, such as an empty list or a list with no 1s. Example: ```python nums = [1, 1, 0, 1, 1, 1] result = find_max_consecutive_ones(nums) print(result) # Should output 3 nums = [1, 0, 1, 0, 1] result = find_max_consecutive_ones(nums) print(result) # Should output 1 ``` Implement the `find_max_consecutive_ones(nums)` function below.","solution":"def find_max_consecutive_ones(nums): Returns the maximum number of consecutive 1s in the list. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 else: max_count = max(max_count, current_count) current_count = 0 max_count = max(max_count, current_count) return max_count"},{"question":"You are required to design a Python function named `product_of_unique_numbers` that takes a list of integers as input and returns the product of all the unique numbers in the list. A number is considered unique if it appears exactly once in the list. The function should behave as follows: 1. Iterate through the list and identify numbers that appear exactly once. 2. Compute the product of these unique numbers. 3. Return the product. If there are no unique numbers, return 1. Here are the specific requirements to consider: - The input list will contain only integers and may be empty. - The function should handle both positive and negative numbers. - The function should return 1 if there are no unique numbers in the list. - You can assume the list will not contain any zeroes. Please implement the `product_of_unique_numbers` function as described.","solution":"def product_of_unique_numbers(nums): Returns the product of all unique numbers in the list. A number is considered unique if it appears exactly once in the list. Args: nums (list of int): List of integers. Returns: int: Product of all unique numbers. 1 if no unique numbers exist. from collections import Counter # Count the occurrences of each number counts = Counter(nums) # Identify unique numbers unique_numbers = [num for num, count in counts.items() if count == 1] # Compute the product of unique numbers product = 1 for num in unique_numbers: product *= num return product if unique_numbers else 1"},{"question":"Simulate a company\'s employee performance review dataset for a fiscal year. The dataset should have employee IDs as the index and monthly performance scores for each employee. Each score should be randomly assigned between 1 and 10. In addition, calculate the total performance score for each employee across all months and store it in a new column \'Total\'. The function should output: DataFrame: A pandas DataFrame containing the employee IDs, their performance scores for each month, and their total performance score. You should write self-contained code starting with: ``` import pandas as pd import random def create_performance_dataset(employee_ids): ```","solution":"import pandas as pd import random def create_performance_dataset(employee_ids): # Initialize a dictionary to store performance data data = {\'EmployeeID\': employee_ids} # Generate random monthly performance scores for each employee for month in range(1, 13): data[f\'Month_{month}\'] = [random.randint(1, 10) for _ in employee_ids] # Create DataFrame with performance data df = pd.DataFrame(data) df.set_index(\'EmployeeID\', inplace=True) # Calculate total performance score df[\'Total\'] = df.sum(axis=1) return df"},{"question":"You need to develop a script that processes two sets of data files containing information about employees and their project assignments. Your task is to merge the data from a CSV file and an XML file to produce a consolidated JSON output that includes each employee\'s details along with their associated projects. The CSV file (`employees.csv`) has the following structure: ``` Employee ID,Name,Department,Role 1,John Doe,Engineering,Software Engineer 2,Jane Smith,Marketing,Content Strategist ... ``` - **Employee ID**: Unique identifier for each employee. - **Name**: Employee\'s full name. - **Department**: Department where the employee works. - **Role**: Employee\'s role in the department. The XML file (`projects.xml`) is structured as follows: ```xml <Projects> <Project> <EmployeeID>1</EmployeeID> <ProjectName>Project Alpha</ProjectName> <StartDate>2023-01-15</StartDate> </Project> <Project> <EmployeeID>2</EmployeeID> <ProjectName>Project Beta</ProjectName> <StartDate>2023-02-01</StartDate> </Project> ... </Projects> ``` - **EmployeeID**: Reference to the employee\'s unique identifier. - **ProjectName**: Name of the project. - **StartDate**: Start date of the project. Write a function `merge_employee_data()` that performs the following tasks: 1. Reads the CSV file to extract employee information. 2. Parses the XML file to extract project assignments. 3. Merges the employee information with their corresponding project data. 4. Produces a consolidated JSON output in the following structure: ```json { \\"employees\\": [ { \\"employee-id\\": \\"1\\", \\"name\\": \\"John Doe\\", \\"department\\": \\"Engineering\\", \\"role\\": \\"Software Engineer\\", \\"projects\\": [ { \\"project-name\\": \\"Project Alpha\\", \\"start-date\\": \\"2023-01-15\\" } ] }, { \\"employee-id\\": \\"2\\", \\"name\\": \\"Jane Smith\\", \\"department\\": \\"Marketing\\", \\"role\\": \\"Content Strategist\\", \\"projects\\": [ { \\"project-name\\": \\"Project Beta\\", \\"start-date\\": \\"2023-02-01\\" } ] } ... ] } ``` Use the `csv`, `json`, and `xml.etree.ElementTree` libraries for processing the respective file types. ```python import csv import json import xml.etree.ElementTree as ET def merge_employee_data(): pass # Implement the function here ``` Ensure that each employee\'s projects are correctly nested under their respective details in the resulting JSON structure. Pay close attention to handling cases where an employee might not have any projects or where an employee might have multiple projects.","solution":"import csv import json import xml.etree.ElementTree as ET def merge_employee_data(csv_file_path, xml_file_path): # Read the CSV file employees = {} with open(csv_file_path, mode=\'r\', newline=\'\', encoding=\'utf-8\') as csvfile: csvreader = csv.DictReader(csvfile) for row in csvreader: employee_id = row[\'Employee ID\'] employees[employee_id] = { \\"employee-id\\": employee_id, \\"name\\": row[\'Name\'], \\"department\\": row[\'Department\'], \\"role\\": row[\'Role\'], \\"projects\\": [] } # Parse the XML file tree = ET.parse(xml_file_path) root = tree.getroot() for project in root.findall(\'Project\'): employee_id = project.find(\'EmployeeID\').text if employee_id in employees: employees[employee_id][\\"projects\\"].append({ \\"project-name\\": project.find(\'ProjectName\').text, \\"start-date\\": project.find(\'StartDate\').text }) # Convert to the final JSON structure result = {\\"employees\\": list(employees.values())} return json.dumps(result, indent=4)"},{"question":"Context In many applications, dealing with textual data often involves processing and transforming strings to extract meaningful information or convert them into a desired format. String manipulation is a common task in programming, and understanding how to work with strings is essential. Task Write a function named `reformat_date` that converts date strings from the format `DD-MM-YYYY` to `YYYY/MM/DD`. The function should be defined as follows: ```python def reformat_date(date_str: str) -> str: ``` Here is what the function should accomplish: 1. **Read** the given `date_str`, which follows the `DD-MM-YYYY` format. 2. **Transform** the date string into the format `YYYY/MM/DD`. 3. **Return** the formatted date string. Requirements - Ensure that the separators in the output are slashes (`/`), not hyphens (`-`). - Handle invalid date formats gracefully by raising a `ValueError`. Input - `date_str` (string): The date string to be reformatted, in the format `DD-MM-YYYY`. Output - A string representing the date in the format `YYYY/MM/DD`. Example If the input date string is `\\"15-08-2021\\"`: Calling `reformat_date(\\"15-08-2021\\")` should: - Return: ```python \\"2021/08/15\\" ```","solution":"def reformat_date(date_str: str) -> str: try: day, month, year = date_str.split(\'-\') return f\\"{year}/{month}/{day}\\" except ValueError: raise ValueError(\\"Invalid date format. Expected DD-MM-YYYY.\\")"},{"question":"You are developing a game where characters have avatars with customizable attributes. One of the attributes is \\"strength\\" also based on certain factors like base strength and level which affects the final calculated strength. To assist in this, you need to create a function that calculates the adjusted strength of a character using multiplicative factors for each strength component. The function should be named `calculate_adjusted_strength` and should follow the signature: ```python def calculate_adjusted_strength(base_strength, level, factors): ... ``` # Function Requirements: 1. **Input Parameters:** - `base_strength` (float): The character\'s base strength. - `level` (int): The level of the character. - `factors` (list of floats): A list of multiplicative factors affecting the strength. 2. **Output:** - A float representing the adjusted strength of the character. 3. **Calculation Process:** 1. **Adjust Base Strength by Level:** Multiply the `base_strength` by `(1 + level * 0.05)`. This incrementally increases the strength by 5% for each level. 2. **Apply Multiplicative Factors:** For each factor in `factors`, multiply the adjusted strength by the factor sequentially. 3. **Final Adjustment:** If the resultant strength exceeds a certain threshold (e.g., 1000), reduce it by a modulation of 0.9 until it\'s below the threshold. # Constraints: Implement the function such that: - The final strength should always be a positive value. - If `factors` list is empty, the adjusted strength should be solely based on `base_strength` and `level`. # Example: ```python >>> calculate_adjusted_strength(100.0, 5, [1.2, 0.9, 1.1]) 159.55 >>> calculate_adjusted_strength(150.0, 10, []) 232.5 >>> calculate_adjusted_strength(200.0, 20, [1.3, 0.8]) 338.0 ``` # Note: 1. Ensure the function works efficiently even when the `factors` list contains many elements. 2. Consider floating-point precision in your calculations. 3. Handle edge cases, such as `base_strength` being zero or very high values that need multiple adjustments to reduce below the threshold.","solution":"def calculate_adjusted_strength(base_strength, level, factors): Calculates the adjusted strength of a character based on base strength, level, and multiplicative factors. Parameters: base_strength (float): The character\'s base strength. level (int): The level of the character. factors (list of floats): A list of multiplicative factors affecting the strength. Returns: float: The adjusted strength of the character. # Step 1: Adjust base strength by level adjusted_strength = base_strength * (1 + level * 0.05) # Step 2: Apply multiplicative factors for factor in factors: adjusted_strength *= factor # Step 3: Final adjustment to ensure strength does not exceed threshold threshold = 1000 while adjusted_strength > threshold: adjusted_strength *= 0.9 return max(adjusted_strength, 0.0)"},{"question":"In this problem, you will work with lists and basic arithmetic operations in Python. The goal is to manipulate and perform operations on lists to solve a given problem. Below is a step-by-step explanation of the task and the function you need to write. **Task:** You need to define a function `max_min_swap(nums)` which takes a single input argument: a list of integers `nums`. The function should find the maximum and minimum numbers in the list, then swap their positions without changing the order of other elements. The modified list should be returned. **Steps to follow in the function:** 1. **Find the Maximum Value in the List**: Identify the largest number in the list `nums`. 2. **Find the Minimum Value in the List**: Identify the smallest number in the list `nums`. 3. **Swap the Maximum and Minimum Values**: Exchange the positions of the maximum and minimum values in the list. 4. **Return the Modified List**: The list should now have the maximum and minimum values swapped, with all other elements remaining in their original positions. **Requirements:** - Ensure the function returns the modified list with the maximum and minimum values swapped. - Handle lists with duplicate maximum and/or minimum values appropriately by only swapping the first occurrences. - Assume the input list will contain at least two elements. **Example:** You can test the function with the list `nums` defined as follows: [ nums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] ] When passed this list, the function should return the modified list with the maximum and minimum values swapped. # Function Signature: ```python def max_min_swap(nums): # Your code here ``` Write your implementation of the `max_min_swap` function.","solution":"def max_min_swap(nums): Swaps the maximum and minimum numbers in the list `nums`. # Find the index of the first occurrence of the maximum value max_index = nums.index(max(nums)) # Find the index of the first occurrence of the minimum value min_index = nums.index(min(nums)) # Swap the positions of the maximum and minimum values nums[max_index], nums[min_index] = nums[min_index], nums[max_index] return nums"},{"question":"You are required to implement a function named `generate_password` that generates a random password containing a specified mix of character types. The password must comply with the following requirements: - It must have a specific length given by the user. - It must contain at least one uppercase letter, one lowercase letter, one digit, and one special character. - Allowed special characters are: `!@#%^&*()-_=+[]{}|;:,.<>?` Your function will receive the following parameter: - `length`: An integer specifying the desired length of the password. The minimum length should be 6. The essential function signature is as follows: ```python import random import string def generate_password(length): # Your code here ``` To adhere to the requirements, your implementation should utilize the functions from Python\'s `random` and `string` libraries such as `random.choice`, `random.shuffle`, and `string.ascii_uppercase`, `string.ascii_lowercase`, `string.digits`, and `string.punctuation`. Example: ```python generate_password(8) ``` This might generate a password such as `A1cb2xZ`, `q!7Fw#9a`, or any other that fits the criteria and is 8 characters long.","solution":"import random import string def generate_password(length): if length < 6: raise ValueError(\\"Password length must be at least 6 characters\\") all_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + \\"!@#%^&*()-_=+[]{}|;:,.<>?\\" # Ensure at least one character of each required type password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(\\"!@#%^&*()-_=+[]{}|;:,.<>?\\") ] # Fill the rest of the password length with random characters if length > 4: password += random.choices(all_characters, k=length-4) # Shuffle to ensure randomness random.shuffle(password) return \'\'.join(password)"},{"question":"**Title**: Find Maximum Average Subarray of Length k **Objective**: Implement a Python function to find the contiguous subarray of given length `k` that has the maximum average value within an array of integers. **Function Name**: `max_average_subarray` **Function Signature**: ```python def max_average_subarray(nums: List[int], k: int) -> float: ``` **Input**: 1. `nums`: A list of integers representing the array. 2. `k`: An integer representing the length of the contiguous subarray to consider. **Output**: 1. A float representing the maximum average value of any contiguous subarray of length `k`. **Requirements**: - Implement a sliding window approach to solve the problem efficiently in O(n) time. - The function should handle both positive and negative integers. **Example**: ```python nums = [1, 12, -5, -6, 50, 3] k = 4 output = max_average_subarray(nums, k) # Expected output: 12.75 Explanation: - The subarray [12, -5, -6, 50] has the maximum average value of (12 + (-5) + (-6) + 50) / 4 = 12.75. ``` **Notes**: - You may assume `k` is always less than or equal to the length of `nums` and greater than 0. - The list of integers may include negative numbers, and does not have to be sorted.","solution":"from typing import List def max_average_subarray(nums: List[int], k: int) -> float: Finds the contiguous subarray of length k that has the maximum average value. :param nums: List of integers representing the array. :param k: An integer representing the length of the contiguous subarray to consider. :return: A float representing the maximum average value of any contiguous subarray of length k. # Initial sum of the first k elements current_sum = sum(nums[:k]) max_sum = current_sum # Sliding window approach for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum / k"},{"question":"In the context of data compression, we often want to minimize the storage space for data. One common technique is the Run-Length Encoding (RLE), where consecutive duplicates of elements are replaced by just one element and a count. For instance, the string \\"aaabbcc\\" would be compressed to \\"a3b2c2\\". You are required to write the function `run_length_encode(s)`. This function should: 1. Take a string `s` as its input. 2. Return a string with the run-length encoding of the original string `s`. 3. Ensure that the encoding preserves the order of characters as they appear in the input string. **Function Signature:** ```python def run_length_encode(s: str) -> str: pass ``` **Hints:** 1. Initialize an empty result string. 2. Traverse the input string to count consecutive characters. 3. Append each character along with its count to the result string. **Example Usage:** ```python print(run_length_encode(\\"aaabbcc\\")) # Output: \\"a3b2c2\\" print(run_length_encode(\\"abcd\\")) # Output: \\"a1b1c1d1\\" print(run_length_encode(\\"aabbbaa\\")) # Output: \\"a2b3a2\\" ``` **Constraints:** 1. The input string will contain only lowercase letters and will have a length between 1 and 10^5. 2. Consider edge cases like an empty string or a string with all identical characters.","solution":"def run_length_encode(s: str) -> str: if not s: return \\"\\" result = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: result.append(f\\"{current_char}{count}\\") current_char = char count = 1 result.append(f\\"{current_char}{count}\\") return \'\'.join(result)"},{"question":"Create a function named `process_stock_data` that takes a list of dictionaries, where each dictionary represents stock data with keys \'date\', \'open\', \'high\', \'low\', \'close\', and \'volume\'. The function should perform the following operations: 1. Calculate the average opening price. 2. Calculate the highest high price in the given dataset. 3. Calculate the lowest low price in the given dataset. 4. Calculate the total trading volume. 5. Return a dictionary with these four computed values. The output dictionary should have the keys: \'average_open\', \'highest_high\', \'lowest_low\', \'total_volume\'. Ensure the function handles potential edge cases, such as an empty list of stock data. ```python def process_stock_data(stock_data): # Your implementation here ```","solution":"def process_stock_data(stock_data): Processes stock data and returns a dictionary with the average opening price, the highest high price, the lowest low price, and the total trading volume. Parameters: stock_data (list): A list of dictionaries containing stock data. Each dictionary has the following keys: \'date\', \'open\', \'high\', \'low\', \'close\', \'volume\'. Returns: dict: A dictionary with keys \'average_open\', \'highest_high\', \'lowest_low\', and \'total_volume\'. if not stock_data: return { \'average_open\': 0, \'highest_high\': 0, \'lowest_low\': 0, \'total_volume\': 0 } total_open = 0 highest_high = float(\'-inf\') lowest_low = float(\'inf\') total_volume = 0 for record in stock_data: total_open += record[\'open\'] if record[\'high\'] > highest_high: highest_high = record[\'high\'] if record[\'low\'] < lowest_low: lowest_low = record[\'low\'] total_volume += record[\'volume\'] average_open = total_open / len(stock_data) return { \'average_open\': average_open, \'highest_high\': highest_high, \'lowest_low\': lowest_low, \'total_volume\': total_volume }"},{"question":"You are tasked with writing a Python function `investigate_logs(logs_directory)` that analyzes log files to create a summary of error occurrences by type. Each log file contains multiple lines of logs, and each line includes an error type, a timestamp, and an error message. Your function should perform the following steps: 1. Navigate to the given directory. 2. Retrieve a list of all log files in that directory. 3. For each log file, read its content and extract error types and their occurrences. 4. Create a summary that counts occurrences for each error type across all log files. 5. Return a dictionary where keys are error types and values are their respective counts. **Constraints and Assumptions:** - Log files are text files with a `.log` extension. - Assume that the log file lines are formatted as follows: `[timestamp] ERROR_TYPE: error message`. - You must use `os.listdir` to get the list of log files in the directory. - You can use regular expressions or string manipulation methods to parse log lines. Given your function will likely involve reading from multiple files, you will need to use Python\'s `os` and `re` modules to handle file operations and string processing correctly. **Function Signature:** ```python def investigate_logs(logs_directory): ```","solution":"import os import re from collections import defaultdict def investigate_logs(logs_directory): Analyzes log files in a given directory to create a summary of error occurrences by type. Parameters: logs_directory (str): Path to the directory containing log files. Returns: dict: Dictionary with error types as keys and their occurrence counts as values. error_summary = defaultdict(int) log_files = [file for file in os.listdir(logs_directory) if file.endswith(\'.log\')] error_pattern = re.compile(r\'[.*]s+(.*?):\') for log_file in log_files: with open(os.path.join(logs_directory, log_file), \'r\') as file: for line in file: match = error_pattern.search(line) if match: error_type = match.group(1) error_summary[error_type] += 1 return dict(error_summary)"},{"question":"Given a pandas DataFrame representing sensor data, write a function to fill any missing (NaN) values in numeric columns with the mean of their respective columns. Additionally, if a column is non-numeric or contains only NaN values, it should be left unchanged. Return the modified DataFrame. The function should output: pd.DataFrame: A new DataFrame with NaN values in numeric columns replaced with the mean of their respective columns. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def fill_missing_values(dataframe): ```","solution":"import pandas as pd import numpy as np def fill_missing_values(dataframe): Fills missing (NaN) values in numeric columns with the mean of their respective columns. If a column is non-numeric or contains only NaN values, it is left unchanged. Args: dataframe (pd.DataFrame): Input pandas DataFrame Returns: pd.DataFrame: A new DataFrame with NaN values in numeric columns replaced with the mean of their respective columns. dataframe_filled = dataframe.copy() for column in dataframe_filled.columns: if pd.api.types.is_numeric_dtype(dataframe_filled[column]): mean_val = dataframe_filled[column].mean() if not np.isnan(mean_val): # Only fill if mean is a number (i.e., column is not all NaN) dataframe_filled[column].fillna(mean_val, inplace=True) return dataframe_filled"},{"question":"** Imagine you are tasked with developing a function for a banking software `get_customer_category`, which will categorize bank customers based on their yearly transactions. The function should take as input a dictionary representing customer transactions and two threshold values. Specifically: - `transactions` (dict): A dictionary where the keys are customer names (strings) and the values are lists of monthly transaction amounts (floats). - `high_threshold` (float): A threshold value where customer’s yearly transactions exceeding this value will be categorized as \'High\'. - `low_threshold` (float): A threshold value where customer’s yearly transactions below and including this value will be categorized as \'Low\'. Customers whose yearly transactions are between (low_threshold, high_threshold] inclusive, will be categorized as \'Medium\'. The function should output a dictionary where the keys are customer names, and the values are the categories \'High\', \'Medium\', or \'Low\' based on the total amount of their yearly transactions. **Example:** ```python transactions = { \\"Alice\\": [1200.00, 1500.50, 800.75, 950.20, 1100.10, 1100.00, 1200.30, 1300.50, 900.90, 850.25, 1000.10, 950.40], \\"Bob\\": [400.00, 450.50, 300.25, 350.20, 500.10, 600.00, 300.30, 200.50, 100.90, 150.25, 200.10, 250.40], \\"Charlie\\": [2000.00, 2500.50, 2300.75, 2100.20, 2200.10, 2500.00, 2600.30, 2700.50, 2900.90, 3100.25, 3200.10, 3300.40] } high_threshold = 20000 low_threshold = 5000 get_customer_category(transactions, high_threshold, low_threshold) ``` ``` Expected Output: { \\"Alice\\": \\"Medium\\", \\"Bob\\": \\"Low\\", \\"Charlie\\": \\"High\\" } ``` **Function Signature:** ```python def get_customer_category(transactions: dict, high_threshold: float, low_threshold: float) -> dict: # implementation here ``` **","solution":"def get_customer_category(transactions, high_threshold, low_threshold): Categorizes customers based on yearly transaction amounts. Args: - transactions (dict): A dictionary of customer transactions. - high_threshold (float): The threshold for \'High\' category. - low_threshold (float): The threshold for \'Low\' category. Returns: - dict: A dictionary mapping customer names to their categories (\'High\', \'Medium\', \'Low\'). categories = {} for customer, monthly_transactions in transactions.items(): yearly_total = sum(monthly_transactions) if yearly_total > high_threshold: categories[customer] = \\"High\\" elif yearly_total <= low_threshold: categories[customer] = \\"Low\\" else: categories[customer] = \\"Medium\\" return categories"},{"question":"You are writing a function to analyze user behavior on an e-commerce platform. The function will compute key statistics about user sessions from a given dataset. The function should be named `analyze_user_sessions` and must follow these specifications: # Function Signature ```python def analyze_user_sessions(dataset, user_id_col, session_id_col, event_col, time_col): pass ``` # Parameters: - `dataset`: A `pandas.DataFrame` containing session data. - `user_id_col`: The column name in the `dataset` representing user IDs. - `session_id_col`: The column name in the `dataset` representing session IDs. - `event_col`: The column name in the `dataset` representing events (e.g., \'view\', \'click\', \'purchase\'). - `time_col`: The column name in the `dataset` representing the time of the event, as a datetime-like object. # Function Requirements: 1. Group the `dataset` by `user_id_col` and `session_id_col`. 2. For each session, compute: - The total number of events. - The duration of the session in seconds (difference between the last and first event times). 3. Create a summary `DataFrame` with columns: `user_id`, `session_id`, `num_events`, `session_duration`. 4. For each user, compute: - Total number of unique sessions. - Average session duration. - Total number of events across all sessions. 5. Create a summary `DataFrame` with columns: `user_id`, `num_sessions`, `avg_session_duration`, `total_events`. # Example: Given the `dataset`: ```python import pandas as pd from datetime import datetime data = { \'user_id\': [1, 1, 1, 2, 2, 2, 2], \'session_id\': [\'a\', \'a\', \'b\', \'c\', \'c\', \'c\', \'d\'], \'event\': [\'view\', \'click\', \'view\', \'view\', \'click\', \'purchase\', \'view\'], \'time\': [datetime(2023, 1, 1, 10, 0), datetime(2023, 1, 1, 10, 5), datetime(2023, 1, 1, 11, 0), datetime(2023, 1, 2, 9, 0), datetime(2023, 1, 2, 9, 15), datetime(2023, 1, 2, 9, 20), datetime(2023, 1, 2, 10, 0)] } df = pd.DataFrame(data) ``` Calling the function with: ```python analyze_user_sessions(df, \'user_id\', \'session_id\', \'event\', \'time\') ``` Should produce two summary DataFrames: 1. Summary of sessions: ``` user_id session_id num_events session_duration 1 a 2 300 1 b 1 0 2 c 3 1200 2 d 1 0 ``` 2. Summary of users: ``` user_id num_sessions avg_session_duration total_events 1 2 150 3 2 2 600 4 ```","solution":"import pandas as pd def analyze_user_sessions(dataset, user_id_col, session_id_col, event_col, time_col): # Group by user and session grouped_sessions = dataset.groupby([user_id_col, session_id_col]) # Compute summary for each session session_summary = grouped_sessions.agg( num_events=(event_col, \'count\'), session_duration=(time_col, lambda x: (x.max() - x.min()).total_seconds()) ).reset_index() # Compute summary for each user grouped_users = session_summary.groupby(user_id_col) user_summary = grouped_users.agg( num_sessions=(session_id_col, \'count\'), avg_session_duration=(\'session_duration\', \'mean\'), total_events=(\'num_events\', \'sum\') ).reset_index() return session_summary, user_summary"},{"question":"You are asked to write a function called `smoothen_array` that smoothens a given array of integers by replacing each element with the average of itself and its immediate neighbors. The \\"average\\" here uses integer division. The function should: 1. Handle edge cases where elements at the start or end of the array have fewer neighbors. 2. For each element, compute the average of itself and its one or two neighbors. 3. Return the modified array with smoothed values. # Function Signature ```python def smoothen_array(arr: List[int]) -> List[int]: Smoothen the input array by replacing each element with the average of itself and its neighbors. Parameters: - arr: List[int] : Input array of integers Returns: - List[int] : The modified array with smoothed values. ``` # Example ```python arr = [1, 2, 3, 4, 5] result = smoothen_array(arr) # result should be [1, 2, 3, 4, 4] arr = [10, 20, 30] result = smoothen_array(arr) # result should be [15, 20, 25] ``` # Requirements 1. Ensure that the array is traversed only once to maintain efficiency. 2. Use integer division (`//`) for averaging values. 3. The function should handle arrays of any non-negative length. An empty array should return an empty array. Create a solution that is efficient and readable, ensuring it appropriately handles all possible edge cases.","solution":"def smoothen_array(arr): Smoothen the input array by replacing each element with the average of itself and its neighbors. Parameters: - arr: List[int] : Input array of integers Returns: - List[int] : The modified array with smoothed values. if not arr: return [] n = len(arr) # Handle edge cases directly if n == 1: return arr smoothed_array = [0] * n for i in range(n): if i == 0: smoothed_array[i] = (arr[i] + arr[i + 1]) // 2 elif i == n - 1: smoothed_array[i] = (arr[i - 1] + arr[i]) // 2 else: smoothed_array[i] = (arr[i - 1] + arr[i] + arr[i + 1]) // 3 return smoothed_array"},{"question":"You are tasked with creating a `TextProcessor` class that provides functionality for counting words, identifying unique words, and basic text cleaning operations. This class should encapsulate a string (text) and facilitate various manipulations and analyses of the text. Specifically, you need to implement the following features: 1. **Word Count**: Count the number of words in the text. 2. **Unique Words**: Identify all unique words in the text. 3. **Text Cleaning**: Remove any punctuation and convert the text to lowercase. 4. **N-Grams**: Generate n-grams (contiguous sequences of n items) from the text. To achieve these tasks, you must implement the following functions: - `__init__(self, text)`: Initializes the TextProcessor instance with the provided text. - `word_count(self)`: Returns the number of words in the text. - `unique_words(self)`: Returns a set of unique words in the text. - `clean_text(self)`: Returns the text with all punctuation removed and converted to lowercase. - `generate_ngrams(self, n)`: Generates and returns a list of n-grams from the text. - `__str__(self)`: Returns a string representation of the processed text. Additionally, write a helper function `ngrams_test_equal(a, b)` to verify that two lists of n-grams are equal. Here is the main test you need to pass: ```python import re from collections import Counter import string class TextProcessor: def __init__(self, text): self.text = text def word_count(self): words = self.text.split() return len(words) def unique_words(self): words = self.text.split() unique_words = set(words) return unique_words def clean_text(self): cleaned_text = self.text.translate(str.maketrans(\'\', \'\', string.punctuation)) return cleaned_text.lower() def generate_ngrams(self, n): words = self.clean_text().split() ngrams = [tuple(words[i:i+n]) for i in range(len(words)-n+1)] return ngrams def __str__(self): return f\'TextProcessor(\\"{self.text}\\")\' def ngrams_test_equal(a, b): return Counter(a) == Counter(b) # Example Text text = \\"Hello, world! This is a test. A TextProcessor test.\\" processor = TextProcessor(text) # Word Count Test print(\'Word count:\', processor.word_count()) # Should output 9 # Unique Words Test print(\'Unique words:\', processor.unique_words()) # Should output {\'Hello,\', \'world!\', \'This\', \'is\', \'a\', \'test.\', \'A\', \'TextProcessor\', \'test.\'} # Text Cleaning Test print(\'Clean text:\', processor.clean_text()) # Should output \'hello world this is a test a textprocessor test\' # N-Grams Test bigrams = processor.generate_ngrams(2) expected_bigrams = [(\'hello\', \'world\'), (\'world\', \'this\'), (\'this\', \'is\'), (\'is\', \'a\'), (\'a\', \'test\'), (\'test\', \'a\'), (\'a\', \'textprocessor\'), (\'textprocessor\', \'test\')] print(\'Test n-grams:\', ngrams_test_equal(bigrams, expected_bigrams)) # Should output True ```","solution":"import re from collections import Counter import string class TextProcessor: def __init__(self, text): self.text = text def word_count(self): words = self.text.split() return len(words) def unique_words(self): words = self.text.split() unique_words = set(words) return unique_words def clean_text(self): cleaned_text = self.text.translate(str.maketrans(\'\', \'\', string.punctuation)) return cleaned_text.lower() def generate_ngrams(self, n): words = self.clean_text().split() ngrams = [tuple(words[i:i+n]) for i in range(len(words)-n+1)] return ngrams def __str__(self): return f\'TextProcessor(\\"{self.text}\\")\' def ngrams_test_equal(a, b): return Counter(a) == Counter(b)"},{"question":"Write a Python function named `compressString` that takes a single argument, a string `s`, and returns a compressed version of the string. The compression should follow the run-length encoding (RLE) algorithm, where sequences of the same character are replaced by that character followed by the number of occurrences. If the compressed string is not shorter than the original string, return the original string. **Function Signature:** ```python def compressString(s: str) -> str: ``` **Input:** - `s` (str): A string consisting of lowercase letters. **Output:** - Returns a string representing the compressed version using the run-length encoding if it is shorter than the original, otherwise the original string. **Examples:** ```python compressString(\\"aabcccccaaa\\") # Expected Output: \\"a2b1c5a3\\" compressString(\\"abcd\\") # Expected Output: \\"abcd\\" compressString(\\"aa\\") # Expected Output: \\"aa\\" compressString(\\"aabb\\") # Expected Output: \\"aabb\\" compressString(\\"aabbccdd\\") # Expected Output: \\"aabbccdd\\" ``` **Requirements:** - The function should handle strings with varying lengths and characters. - Ensure that the function is efficient and does not perform unnecessary operations. - The function should only consider lowercase alphabetic characters. - The function should properly handle empty strings, returning an empty string in such cases. **Note:** Maintain the order of characters in the original string while performing the compression.","solution":"def compressString(s: str) -> str: if not s: return \\"\\" compressed = [] current_char = s[0] current_count = 1 for char in s[1:]: if char == current_char: current_count += 1 else: compressed.append(current_char + str(current_count)) current_char = char current_count = 1 compressed.append(current_char + str(current_count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"You are tasked with implementing a function `evaluate_polygon_area` that computes the area of a simple polygon given its vertices. The function should correctly handle both convex and concave polygons using the Shoelace theorem. The function will accept one parameter: `vertices`. - `vertices` (list of tuples): A list of tuples representing the Cartesian coordinates of the polygon\'s vertices in order. Implement the `evaluate_polygon_area` function to compute the area as follows: - Use the Shoelace formula to calculate the area: [ text{Area} = frac{1}{2} left| sum_{i=1}^{n-1}(x_i cdot y_{i+1} - y_i cdot x_{i+1}) + (x_n cdot y_1 - y_n cdot x_1) right| ] Where ( (x_1, y_1), (x_2, y_2), ldots, (x_n, y_n) ) are the coordinates of the vertices and ( n ) is the number of vertices. Here is the function definition you need to complete: ```python def evaluate_polygon_area(vertices): Calculate the area of a polygon given its vertices using the Shoelace theorem. Parameters: vertices (list of tuples): List of tuples representing the polygon\'s vertices in order Returns: float: The area of the polygon n = len(vertices) if n < 3: raise ValueError(\\"A polygon must have at least 3 vertices\\") area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2 ``` Make sure to: 1. Ensure the function correctly handles polygons with 3 or more vertices. 2. Raise an appropriate error if the number of vertices is less than 3. 3. Return the polygon\'s area as a float.","solution":"def evaluate_polygon_area(vertices): Calculate the area of a polygon given its vertices using the Shoelace theorem. Parameters: vertices (list of tuples): List of tuples representing the polygon\'s vertices in order Returns: float: The area of the polygon n = len(vertices) if n < 3: raise ValueError(\\"A polygon must have at least 3 vertices\\") area = 0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 - y1 * x2 return abs(area) / 2"},{"question":"You are asked to write a function that reads data from a CSV file, processes it, and outputs the result to a new CSV file. Your function should be capable of applying a transformation to one of the columns during the read process. # Function Specification: - **Function Name:** `transform_csv` - **Parameters:** - `input_csv` (str): A string representing the filename of the input CSV file. - `output_csv` (str): A string representing the filename of the output CSV file to be created. - `column_name` (str): The name of the column to transform. - `transformation` (callable): A function to apply to each value in the specified column. # Requirements: 1. Read the input CSV file and apply the transformation function to each value in the specified column. 2. Write the transformed data to the output CSV file, preserving the structure of the original CSV file. 3. Ensure that the column names are included in the output CSV file. 4. If the specified column does not exist in the input CSV, the function should raise a `ValueError` with a message indicating that the column was not found. # Example Usage: ```python # Example of a transformation function that converts text to uppercase def to_uppercase(value): return value.upper() # Call to transform CSV transform_csv(\'input.csv\', \'output.csv\', \'name\', to_uppercase) ``` In this example, the function reads data from \'input.csv\', applies the `to_uppercase` transformation to the \'name\' column, and writes the transformed data to \'output.csv\'.","solution":"import csv def transform_csv(input_csv, output_csv, column_name, transformation): Reads data from the input CSV file, applies a transformation to a specified column, and writes the transformed data to the output CSV file. Parameters: input_csv (str): Filename of the input CSV file. output_csv (str): Filename of the output CSV file. column_name (str): The name of the column to transform. transformation (callable): A function to apply to each value in the specified column. Raises: ValueError: If the specified column does not exist in the input CSV file. # Read input CSV file with open(input_csv, mode=\'r\', newline=\'\') as infile: reader = csv.DictReader(infile) fieldnames = reader.fieldnames if column_name not in fieldnames: raise ValueError(f\\"Column \'{column_name}\' not found in the input CSV file\\") transformed_rows = [] for row in reader: # Apply transformation to the specified column row[column_name] = transformation(row[column_name]) transformed_rows.append(row) # Write output CSV file with open(output_csv, mode=\'w\', newline=\'\') as outfile: writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() writer.writerows(transformed_rows) def to_uppercase(value): return value.upper()"},{"question":"You are tasked with implementing a function named `inventory_manager` which simulates a basic inventory management system for a small store. The function should allow the user to add, remove, and view items in the store\'s inventory. Each item in the inventory should have a name and a quantity. The function should: 1. Prompt the user with a menu that has the following options: - Add an item - Remove an item - View inventory - Exit 2. If the user selects \\"Add an item\\": - Prompt the user to enter the item\'s name and quantity. - If the item already exists in the inventory, update its quantity. - If the item does not exist, add it to the inventory with the specified quantity. 3. If the user selects \\"Remove an item\\": - Prompt the user to enter the item\'s name. - If the item exists, prompt the user to enter the quantity to remove. If the quantity to remove is greater than or equal to the current quantity, remove the item completely from the inventory. Otherwise, subtract the quantity from the current quantity. - If the item does not exist, print a message indicating so. 4. If the user selects \\"View inventory\\": - Print out each item in the inventory along with its quantity. - If the inventory is empty, print a message indicating that the inventory is empty. 5. If the user selects \\"Exit\\": - Break the loop and end the function gracefully. Requirements: - Use a dictionary to store the inventory items with their respective quantities. - Implement error checking for user inputs to ensure they are valid (e.g., valid quantity, existing item for removal, etc.). **Function Signature:** ```python def inventory_manager(): pass ```","solution":"def inventory_manager(): Simulates an inventory management system with options to add, remove, and view items. inventory = {} while True: print(\\"nMenu:\\") print(\\"1. Add an item\\") print(\\"2. Remove an item\\") print(\\"3. View inventory\\") print(\\"4. Exit\\") choice = input(\\"Enter your choice: \\").strip() if choice == \'1\': item_name = input(\\"Enter the item name: \\").strip() quantity = input(\\"Enter the quantity: \\").strip() if not quantity.isdigit(): print(\\"Invalid quantity. Please enter a valid number.\\") continue quantity = int(quantity) if item_name in inventory: inventory[item_name] += quantity else: inventory[item_name] = quantity print(f\\"Added {quantity} of {item_name} to the inventory.\\") elif choice == \'2\': item_name = input(\\"Enter the item name to remove: \\").strip() if item_name not in inventory: print(\\"Item does not exist in the inventory.\\") continue quantity = input(f\\"Enter the quantity to remove (current quantity: {inventory[item_name]}): \\").strip() if not quantity.isdigit(): print(\\"Invalid quantity. Please enter a valid number.\\") continue quantity = int(quantity) if quantity >= inventory[item_name]: del inventory[item_name] print(f\\"Removed {item_name} from the inventory.\\") else: inventory[item_name] -= quantity print(f\\"Removed {quantity} of {item_name} from the inventory.\\") elif choice == \'3\': if not inventory: print(\\"The inventory is empty.\\") else: print(\\"Inventory:\\") for item_name, quantity in inventory.items(): print(f\\"{item_name}: {quantity}\\") elif choice == \'4\': print(\\"Exiting the inventory management system. Goodbye!\\") break else: print(\\"Invalid choice. Please select a valid option.\\") if __name__ == \\"__main__\\": inventory_manager()"},{"question":"In this problem, you will write a function to compute the intersection and union of two sets and then determine the Jaccard Index of these sets. This task aims to make you familiar with set operations and the calculation of the Jaccard Index, a metric used for measuring the similarity between two sets. The function you need to implement is named `jaccard_index`. It takes two lists as input, representing the sets, and returns a float value representing the Jaccard Index. Function Signature ```python def jaccard_index(set1: list, set2: list) -> float: ``` Parameters - `set1`: A list of elements that represent the first set. - `set2`: A list of elements that represent the second set. Returns - A float value representing the Jaccard Index of the two sets. Requirements: 1. Write a function named `jaccard_index`. 2. Convert the input lists into sets. 3. Compute the intersection of the sets using the `&` operator. 4. Compute the union of the sets using the `|` operator. 5. Calculate the Jaccard Index as the size of the intersection divided by the size of the union. 6. Return the Jaccard Index as a float value. Example ```python set1 = [1, 2, 3, 4] set2 = [3, 4, 5, 6] print(jaccard_index(set1, set2)) ``` This example should print the computed Jaccard Index for the given input sets, which is `0.4`.","solution":"def jaccard_index(set1: list, set2: list) -> float: Compute the Jaccard Index of two sets represented as lists. Parameters: set1 (list): The first set of elements set2 (list): The second set of elements Returns: float: The Jaccard Index of the two sets set1 = set(set1) set2 = set(set2) intersection = set1 & set2 union = set1 | set2 # Jaccard Index is the size of the intersection divided by the size of the union if len(union) == 0: return 1.0 # If both sets are empty, we define their Jaccard Index as 1 return len(intersection) / len(union)"},{"question":"**Problem Title: Calculating the n-th Fibonacci Number** You are required to write a function named `nth_fibonacci` that computes the n-th Fibonacci number efficiently. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n > 1 Your function should use dynamic programming to achieve a time complexity of O(n). The function should have the following signature: ```python def nth_fibonacci(n: int) -> int: ``` # Parameters: - `n` (int): The position in the Fibonacci sequence (0-indexed) for which you want to compute the Fibonacci number. The value of \'n\' is guaranteed to be at least 0. # Returns: - An integer representing the n-th Fibonacci number. # Example Usage: ```python print(nth_fibonacci(0)) # Output: 0 print(nth_fibonacci(1)) # Output: 1 print(nth_fibonacci(10)) # Output: 55 ``` Implement the function using an iterative approach to ensure efficient use of space and time.","solution":"def nth_fibonacci(n: int) -> int: Computes the n-th Fibonacci number using an iterative dynamic programming approach. Parameters: - n (int): The position in the Fibonacci sequence (0-indexed). Returns: - int: The n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"You are given an array of integers `nums`, where each integer appears twice except for one integer, which appears only once. Your task is to write a function `find_unique(nums)` that returns the single integer that appears only once. To solve this problem, use the bitwise XOR operator which has a property that `a ^ a = 0` and `a ^ 0 = a`. As XOR-ing two same numbers results in zero, XOR-ing all the numbers together will cancel out the ones appearing twice, leaving only the unique integer. The function `find_unique(nums)` should follow this structure: 1. Initialize a variable `unique` to 0. 2. Iterate through the array and XOR each element with `unique`. 3. Return the value of `unique` after the iteration. Example ```python nums = [4, 1, 2, 1, 2] print(find_unique(nums)) # Output: 4 ``` Constraints - The array `nums` will have a length between `1` and `3 * 10^4`. - Each element in `nums` is an integer between `-3 * 10^4` and `3 * 10^4`.","solution":"def find_unique(nums): Returns the single integer that appears only once in the list, where each of the other integers appears exactly twice. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Create a function `count_distinct_substrings` that calculates the number of distinct substrings in a given string. The function should be efficient in nature, utilizing a Suffix Trie for the implementation. You are provided with a single string `s` as the input. Your task is to build the Suffix Trie for the string `s` and then count the number of distinct substrings based on the structure of the Trie. To accomplish this, you need to implement a detailed plan for constructing the Suffix Trie and then create a function to count the nodes in the Trie, as each node represents a unique substring. Here\'s a structured approach: 1. Construct the Suffix Trie. 2. Define a function to count all nodes in the Trie (each node represents a unique substring). 3. Use these constructs to determine the number of distinct substrings in the string `s`. Below is the function signature and some hints on how to proceed: ```python class SuffixTrieNode: def __init__(self): self.children = {} class SuffixTrie: def __init__(self): self.root = SuffixTrieNode() self.count = 0 def insert_suffix(self, suffix): node = self.root for char in suffix: if char not in node.children: node.children[char] = SuffixTrieNode() self.count += 1 node = node.children[char] def count_nodes(self): return self.count def count_distinct_substrings(s): Counts the number of distinct substrings in the given string. Parameters: - s: str, the input string Returns: - int, the count of distinct substrings trie = SuffixTrie() for i in range(len(s)): trie.insert_suffix(s[i:]) return trie.count_nodes() + 1 # +1 to include the empty substring ``` **Requirements:** 1. Construct a Suffix Trie for the input string `s`. 2. Traverse the Trie to count all distinct substrings (nodes in the Trie). 3. Return the total count of distinct substrings, considering the empty substring as well. Note: The Suffix Trie is an efficient way to handle the computation of distinct substrings, given that it processes the string in O(n^2) time complexity, which is efficient for handling substrings in comparison to a naive approach.","solution":"class SuffixTrieNode: def __init__(self): self.children = {} class SuffixTrie: def __init__(self): self.root = SuffixTrieNode() self.count = 0 def insert_suffix(self, suffix): node = self.root for char in suffix: if char not in node.children: node.children[char] = SuffixTrieNode() self.count += 1 node = node.children[char] def count_nodes(self): return self.count def count_distinct_substrings(s): Counts the number of distinct substrings in the given string. Parameters: - s: str, the input string Returns: - int, the count of distinct substrings trie = SuffixTrie() for i in range(len(s)): trie.insert_suffix(s[i:]) return trie.count_nodes() + 1 # +1 to include the empty substring"},{"question":"Write a function that takes a list of dictionaries representing employees, where each dictionary contains \'name\', \'age\', and \'department\'. The function should filter out employees who are under 18 years old and group the remaining employees by department. The function then calculates the average age of employees in each department, returning a new dictionary with department names as keys and average ages as values. The function should raise the exception for: TypeError: If the input list contains non-dictionary entries. The function should output with: dict: A dictionary with department names as keys and average ages of employees as values. You should write self-contained code starting with: ``` def average_age_by_department(employees): ```","solution":"def average_age_by_department(employees): Filters out employees under 18 years old and groups remaining employees by department. Calculates the average age of employees in each department. Args: employees (list of dict): A list of dictionaries, where each dictionary contains \'name\', \'age\', and \'department\'. Returns: dict: A dictionary with department names as keys and average ages of employees as values. if not all(isinstance(emp, dict) for emp in employees): raise TypeError(\\"All elements of the input list must be dictionaries\\") department_ages = {} for employee in employees: if employee[\'age\'] >= 18: dept = employee[\'department\'] if dept not in department_ages: department_ages[dept] = [] department_ages[dept].append(employee[\'age\']) average_ages = { dept: sum(ages)/len(ages) for dept, ages in department_ages.items() } return average_ages"},{"question":"You need to implement a Python function that simulates a simplified version of the game Minesweeper. Given a 2D list representing the game field where: - `-1` represents a mine. - `0` represents an empty cell. the function should generate a new 2D list of the same size where each empty cell is replaced by the count of mines in its adjacent cells. Cells can have up to 8 neighbors (vertically, horizontally, and diagonally adjacent). Function Name: `count_mines(grid)` Parameters: - `grid` (List[List[int]]): A 2D list representing the Minesweeper grid. Returns: - A new 2D list where each empty cell is replaced by the number of mines in its neighboring cells. Requirements: 1. Ensure your solution handles edge cases where the grid may be empty or non-rectangular. 2. The input grid should not be modified. Example: ```python # Example input grid = [ [ 0, 1, -1], [-1, 1, 0], [ 0, 1, 0] ] expected_output = [ [ 1, 2, -1], [-1, 2, 1], [ 1, 1, 0] ] print(count_mines(grid)) # Output should match expected_output ``` ```python def count_mines(grid): if not grid or not all(len(row) == len(grid[0]) for row in grid): raise ValueError(\\"Grid must not be empty and must be rectangular.\\") rows = len(grid) cols = len(grid[0]) result = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): if grid[r][c] == -1: result[r][c] = -1 else: mines_count = 0 for dr in range(-1, 2): for dc in range(-1, 2): rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols and grid[rr][cc] == -1: mines_count += 1 result[r][c] = mines_count return result ```","solution":"def count_mines(grid): Given a 2D list representing the Minesweeper grid where -1 represents a mine and 0 represents an empty cell, this function generates a new 2D list where each empty cell is replaced by the number of mines in its neighboring cells. Args: grid (List[List[int]]): A 2D list representing the Minesweeper grid. Returns: List[List[int]]: A new 2D list where each empty cell is replaced by the count of mines in its neighboring cells. if not grid or not all(len(row) == len(grid[0]) for row in grid): raise ValueError(\\"Grid must not be empty and must be rectangular.\\") rows = len(grid) cols = len(grid[0]) result = [[0] * cols for _ in range(rows)] for r in range(rows): for c in range(cols): if grid[r][c] == -1: result[r][c] = -1 else: mines_count = 0 for dr in range(-1, 2): for dc in range(-1, 2): rr, cc = r + dr, c + dc if 0 <= rr < rows and 0 <= cc < cols and grid[rr][cc] == -1: mines_count += 1 result[r][c] = mines_count return result"},{"question":"Create a function that takes a list of integers and an integer target. The function should return indices of the two numbers such that they add up to the target, using a dictionary to store and look up the needed complement values. If no such indices exist, return an empty list. The function should work in linear time complexity. The function should be defined as follows: ``` def find_two_sum(nums, target): ``` # Example ``` find_two_sum([2, 7, 11, 15], 9) ``` # Output ``` [0, 1] ``` # Constraints - You may assume that each input would have exactly one solution. - You may not use the same element twice.","solution":"def find_two_sum(nums, target): Returns indices of the two numbers such that they add up to the target. complement_map = {} for i, num in enumerate(nums): complement = target - num if complement in complement_map: return [complement_map[complement], i] complement_map[num] = i return []"},{"question":"You are developing a data pipeline for an e-commerce recommendation system. Your task is to implement a feature engineering function that will preprocess the user interaction data. The function should consume raw user interaction logs and produce a feature matrix suitable for model training. Each row in the feature matrix represents a user-session and has the following features: 1. **session_id**: unique identifier for the session. 2. **user_id**: unique identifier for the user. 3. **num_items_viewed**: total number of items viewed by the user in the session. 4. **total_session_duration**: total duration of the session in seconds. 5. **avg_dwell_time**: average time spent viewing each item in the session in seconds. 6. **unique_categories**: total number of unique categories viewed by the user in the session. The input to your function will be a list of interaction logs where each log is a dictionary with keys `session_id`, `user_id`, `item_id`, `category`, `interaction_time` and `dwell_time`. The output should be a Pandas DataFrame with the columns described above. Each row should summarize the interactions within a session. Your function should be named `preprocess_interaction_logs` and adhere to the following signature: ```python def preprocess_interaction_logs(interaction_logs: list) -> pd.DataFrame: ``` You can assume the necessary libraries are imported as shown below: ```python import pandas as pd from collections import defaultdict ``` Here are some examples of the input interaction logs for your reference: ```python interaction_logs = [ {\'session_id\': 1, \'user_id\': 1, \'item_id\': 101, \'category\': \'A\', \'interaction_time\': \'2021-01-01 10:00:00\', \'dwell_time\': 5}, {\'session_id\': 1, \'user_id\': 1, \'item_id\': 102, \'category\': \'B\', \'interaction_time\': \'2021-01-01 10:01:00\', \'dwell_time\': 10}, {\'session_id\': 2, \'user_id\': 2, \'item_id\': 101, \'category\': \'A\', \'interaction_time\': \'2021-01-01 10:02:00\', \'dwell_time\': 20}, {\'session_id\': 2, \'user_id\': 2, \'item_id\': 103, \'category\': \'C\', \'interaction_time\': \'2021-01-01 10:03:00\', \'dwell_time\': 10} ] ``` A sample output DataFrame for the provided logs might look like this: ``` session_id user_id num_items_viewed total_session_duration avg_dwell_time unique_categories 0 1 1 2 11 7.5 2 1 2 2 2 30 15.0 2 ``` Implement the `preprocess_interaction_logs` function to achieve the desired result.","solution":"import pandas as pd from collections import defaultdict def preprocess_interaction_logs(interaction_logs: list) -> pd.DataFrame: # Create a dictionary to hold the aggregated data session_data = defaultdict(lambda: { \'user_id\': None, \'num_items_viewed\': 0, \'total_session_duration\': 0, \'total_dwell_time\': 0, \'unique_categories\': set() }) # Process each interaction log entry for log in interaction_logs: session_id = log[\'session_id\'] user_id = log[\'user_id\'] dwell_time = log[\'dwell_time\'] category = log[\'category\'] session_data[session_id][\'user_id\'] = user_id session_data[session_id][\'num_items_viewed\'] += 1 session_data[session_id][\'total_session_duration\'] += dwell_time session_data[session_id][\'total_dwell_time\'] += dwell_time session_data[session_id][\'unique_categories\'].add(category) # Prepare the rows for the DataFrame rows = [] for session_id, data in session_data.items(): row = { \'session_id\': session_id, \'user_id\': data[\'user_id\'], \'num_items_viewed\': data[\'num_items_viewed\'], \'total_session_duration\': data[\'total_session_duration\'], \'avg_dwell_time\': data[\'total_dwell_time\'] / data[\'num_items_viewed\'], \'unique_categories\': len(data[\'unique_categories\']) } rows.append(row) # Convert rows to DataFrame feature_matrix = pd.DataFrame(rows) return feature_matrix"},{"question":"You are required to create a Python function `generate_prime_factors(num: int) -> list` that calculates the prime factors of a given positive integer `num` and returns them as a list. The function works as follows: 1. Analyzes the given integer and finds all the prime numbers that exactly divide it. 2. Each prime factor should appear in the list as many times as it divides the integer. Your implementation should: - Handle the decomposition efficiently. - Ensure that the list of factors is sorted in ascending order. Constraints: - The input integer `num` will always be greater than 1. - You can assume that the input will be such that it does not cause any performance issues within the typical constraints of competitive programming environments. Function Signature: ```python def generate_prime_factors(num: int) -> list: ``` Example Usage: ```python generate_prime_factors(315) # Returns: [3, 3, 5, 7] generate_prime_factors(84) # Returns: [2, 2, 3, 7] ```","solution":"def generate_prime_factors(num: int) -> list: Returns the prime factors of a given positive integer as a sorted list. factors = [] # Start dividing the number by 2 until we can\'t anymore while num % 2 == 0: factors.append(2) num //= 2 # Now check odd numbers from 3 onwards factor = 3 while factor * factor <= num: while num % factor == 0: factors.append(factor) num //= factor factor += 2 # If remaining num is a prime number greater than 2, add it to the factors if num > 2: factors.append(num) return factors"},{"question":"Write a function `calculate_age_distribution(birth_years)` that takes a list of birth years as input and returns a dictionary mapping each calculated age (based on the current year) to the count of people of that age. The function should use the current year to calculate the age of each person. **Requirements**: - Use the `datetime` module to get the current year. - Compute the age by subtracting the birth year from the current year for each entry in the list. - Return a dictionary where the keys are the ages and the values are the counts of people with that age. **Example Usage**: ```python birth_years = [1980, 1990, 1982, 2000, 1990, 2000] age_distribution = calculate_age_distribution(birth_years) print(age_distribution) # This should print a dictionary similar to: {43: 1, 33: 1, 41: 1, 23: 2, 33: 1} if the current year is 2023. ``` **Note**: Ensure the handling of edge cases such as an empty list and the list containing future birth years.","solution":"import datetime from collections import Counter def calculate_age_distribution(birth_years): Calculates the distribution of ages based on the given birth years. Parameters: birth_years (list): List of birth years. Returns: dict: Dictionary with ages as keys and their counts as values. current_year = datetime.datetime.now().year ages = [current_year - year for year in birth_years if year <= current_year] age_distribution = dict(Counter(ages)) return age_distribution"},{"question":"You are required to write a function `text_analysis()` that demonstrates the use of string manipulation and basic text analysis. This function should perform the following tasks: 1. **Word Count**: - Accept a string input containing multiple sentences. - Count the number of words in the string. 2. **Sentence Count**: - Count the number of sentences in the string. Sentences are delimited by `.`, `!`, or `?`. 3. **Most Common Word**: - Identify the most frequently occurring word in the string. If there are ties, return any one of the most common words. The function should print the intermediate and final results, explicitly showing the word count, sentence count, and the most common word. **Function Signature:** ```python def text_analysis(text: str): # Your implementation here ``` # Input - A single input parameter `text` which is a string containing multiple sentences. # Output Print the following (in order): 1. The word count in the input string. 2. The sentence count in the input string. 3. The most common word in the input string. # Example For the input string: ```python text = \\"Hello world! Hello everyone. It is a beautiful day. Isn\'t it a wonderful world?\\" ``` The output should be: ``` Word count: 15 Sentence count: 4 Most common word: Hello ``` # Libraries to Use None","solution":"from collections import Counter import re def text_analysis(text: str): # Step 1: Word Count words = re.findall(r\'bw+b\', text.lower()) word_count = len(words) # Step 2: Sentence Count sentences = re.split(r\'[.!?]\', text) sentence_count = len([sentence for sentence in sentences if sentence.strip()]) # Step 3: Most Common Word if words: word_frequency = Counter(words) most_common_word = word_frequency.most_common(1)[0][0] else: most_common_word = None # Printing the results print(f\\"Word count: {word_count}\\") print(f\\"Sentence count: {sentence_count}\\") print(f\\"Most common word: {most_common_word}\\")"},{"question":"Your task is to implement a function named `generate_invoice` that processes a list of purchased items and computes the total cost, including taxes and discounts, and generates an invoice. The function should follow these steps: 1. Initialize the invoice with appropriate headers. 2. Loop through each item in the `items_list` and add a line to the invoice with the item details including name, quantity, unit price, and total item cost. 3. Calculate and apply any applicable taxes and discounts. 4. Generate the final total and add it to the invoice. 5. Write the generated invoice to a specified file. The structure of `generate_invoice` should adhere to the sample code provided below for exemplary purposes. Function Signature ```python def generate_invoice(filename: str, items_list: list, tax_rate: float, discount_rate: float): ``` Input Description - `filename`: A string representing the name of the output invoice file. - `items_list`: A list where each element is an object representing a purchased item with the following attributes: - `name`: A string representing the name of the item. - `quantity`: An integer representing the quantity of the item purchased. - `unit_price`: A float representing the price per unit of the item. - `tax_rate`: A float representing the tax rate to be applied to the total cost (expressed as a percentage, e.g., 10 for 10%). - `discount_rate`: A float representing the discount rate to be applied to the total cost (expressed as a percentage, e.g., 5 for 5%). The invoice should be written to the file `filename` with appropriate formatting and content as described in the code snippet. Example Usage Assuming we have the following input: ```python class Item: def __init__(self, name, quantity, unit_price): self.name = name self.quantity = quantity self.unit_price = unit_price item1 = Item(\'Laptop\', 1, 1000.00) item2 = Item(\'Mouse\', 2, 25.00) item3 = Item(\'Keyboard\', 1, 50.00) generate_invoice(\'invoice.txt\', [item1, item2, item3], 10, 5) ``` The generated invoice should be written to `invoice.txt` and include details similar to: ``` Invoice -------------- Item Quantity Unit Price Total Laptop 1 1000.00 1000.00 Mouse 2 25.00 50.00 Keyboard 1 50.00 50.00 -------------- Subtotal: 1100.00 Tax (10%): 110.00 Discount (5%): -55.00 Total: 1155.00 ```","solution":"def generate_invoice(filename: str, items_list: list, tax_rate: float, discount_rate: float): Generates an invoice including item details, tax, and discount, and writes it to a file. Args: filename (str): The name of the output invoice file. items_list (list): A list of purchased items, each an object with name, quantity, and unit_price attributes. tax_rate (float): The tax rate to be applied (as a percentage, e.g., 10 for 10%). discount_rate (float): The discount rate to be applied (as a percentage, e.g., 5 for 5%). # Initialize invoice text invoice = \\"Invoicen--------------nItem Quantity Unit Price Totaln\\" # Calculate subtotal subtotal = 0.0 for item in items_list: total_item_cost = item.quantity * item.unit_price invoice += f\\"{item.name} {item.quantity} {item.unit_price:.2f} {total_item_cost:.2f}n\\" subtotal += total_item_cost tax = subtotal * (tax_rate / 100) discount = subtotal * (discount_rate / 100) total = subtotal + tax - discount # Append totals to invoice invoice += \\"--------------n\\" invoice += f\\"Subtotal: {subtotal:.2f}n\\" invoice += f\\"Tax ({tax_rate}%): {tax:.2f}n\\" invoice += f\\"Discount ({discount_rate}%): -{discount:.2f}n\\" invoice += f\\"Total: {total:.2f}n\\" # Write the invoice to the specified file with open(filename, \'w\') as file: file.write(invoice) # Example Item class, not part of the main solution but necessary for testing. class Item: def __init__(self, name, quantity, unit_price): self.name = name self.quantity = quantity self.unit_price = unit_price"},{"question":"Write a function to predict housing prices using a pre-trained decision tree regressor. You have a dataset with three columns: `NUMBER_OF_ROOMS`, `AGE`, and `DISTANCE_TO_CITY_CENTER`. The pre-trained decision tree model (`dt_model`) is used to predict the `PRICE` of a house based on these features. Your task is to write a function that takes in the dataset and the model, and returns the predicted prices for each house in the dataset. **Function Requirements:** Name: `predict_prices` Parameters: - `data`: A pandas DataFrame containing the feature data with columns `NUMBER_OF_ROOMS`, `AGE`, and `DISTANCE_TO_CITY_CENTER`. - `dt_model`: An already trained decision tree regressor model. Output: - A pandas Series containing the predicted prices, indexed the same as the input DataFrame. Example usage: ```python def predict_prices(data, dt_model): # Your implementation here pass # Example call # predicted_prices = predict_prices(housing_data, trained_dt_model) ``` Ensure your function follows the exact function signature and returns the predictions as a pandas Series.","solution":"import pandas as pd from sklearn.tree import DecisionTreeRegressor def predict_prices(data, dt_model): Predict housing prices using the pre-trained decision tree model. Parameters: - data (pd.DataFrame): DataFrame with columns NUMBER_OF_ROOMS, AGE, and DISTANCE_TO_CITY_CENTER. - dt_model (DecisionTreeRegressor): The pre-trained decision tree regressor model. Returns: - pd.Series: Predicted prices, indexed the same as the input DataFrame. if not isinstance(data, pd.DataFrame): raise TypeError(\\"Data should be a pandas DataFrame\\") expected_columns = {\'NUMBER_OF_ROOMS\', \'AGE\', \'DISTANCE_TO_CITY_CENTER\'} if not expected_columns.issubset(data.columns): raise ValueError(f\\"Data should contain columns: {expected_columns}\\") features = data[[\'NUMBER_OF_ROOMS\', \'AGE\', \'DISTANCE_TO_CITY_CENTER\']] predictions = dt_model.predict(features) return pd.Series(predictions, index=data.index)"},{"question":"Write a Python function `word_ladder_length(begin_word: str, end_word: str, word_list: list) -> int` that uses the Breadth-First Search (BFS) algorithm to find the length of the shortest transformation sequence from `begin_word` to `end_word`. Each transformation must change exactly one letter and each transformed word must be in the `word_list`. Return 0 if no such transformation sequence exists. **Function Signature**: ```python def word_ladder_length(begin_word: str, end_word: str, word_list: list) -> int: pass ``` **Requirements**: 1. The function should use `collections.deque` to implement the BFS queue. 2. The function should process words by changing one letter at a time and checking if they exist in the `word_list`. **Example**: ```python word_ladder_length(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]) # Returns: 5 word_ladder_length(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"]) # Returns: 0 word_ladder_length(\\"sail\\", \\"bail\\", [\\"sail\\", \\"mail\\", \\"malt\\", \\"melt\\", \\"belt\\", \\"bail\\"]) # Returns: 2 ``` **Explanation**: - The BFS algorithm explores all possible single-letter transformations of the current word, adding them to the queue if they are in the `word_list` and have not been visited yet. - The function should keep track of the transformation sequence length and return it when the `end_word` is reached. - If the `end_word` cannot be reached, the function should return 0.","solution":"from collections import deque def word_ladder_length(begin_word: str, end_word: str, word_list: list) -> int: if end_word not in word_list: return 0 word_set = set(word_list) # to allow O(1) look-up queue = deque([(begin_word, 1)]) # queue of (word, transformation length) while queue: current_word, length = queue.popleft() if current_word == end_word: return length for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) # mark word as visited queue.append((next_word, length + 1)) return 0"},{"question":"You are tasked with writing a function named `calculateWordFrequencies` that takes in a string representing a passage of text and returns a dictionary where the keys are unique words (ignoring case) and the values are the counts of each word\'s appearance in the text. The function should ignore punctuation and treat uppercase and lowercase versions of the same word as equivalent. Here are the steps your function should perform: 1. Convert the text to lowercase to ensure the word counting is case-insensitive. 2. Remove any punctuation from the text to ensure accurate word counting. 3. Split the text into individual words. 4. Calculate the frequency of each unique word. 5. Return a dictionary where the keys are the unique words and the values are the count of each word\'s occurrences. Function Signature ```python def calculateWordFrequencies(text: str) -> dict: ``` Input - `text` (str): A string representing the passage of text. Output - The function should return a dictionary with words as keys (str) and their counts as values (int). # Example: ```python text = \\"Hello world! This is a test. Hello again, world.\\" # Example function call print(calculateWordFrequencies(text)) ``` Expected Output: ```python { \\"hello\\": 2, \\"world\\": 2, \\"this\\": 1, \\"is\\": 1, \\"a\\": 1, \\"test\\": 1, \\"again\\": 1 } ``` Make sure that your function properly handles different cases, punctuation, and can handle empty input strings appropriately.","solution":"import re from collections import defaultdict def calculateWordFrequencies(text: str) -> dict: Calculate the frequency of each unique word in a text. Args: text (str): A string representing the passage of text. Returns: dict: A dictionary where keys are unique words and values are their counts. # Convert text to lowercase text = text.lower() # Remove punctuation from the text text = re.sub(r\'[^ws]\', \'\', text) # Split the text into individual words words = text.split() # Calculate the frequency of each unique word word_frequencies = defaultdict(int) for word in words: word_frequencies[word] += 1 return dict(word_frequencies)"},{"question":"Write a function that generates a numpy array of shape (n, n) filled with random integers, and then finds the row with the highest sum of its elements. The function should return both the generated matrix and the index of the row with the highest sum. The function should output with: Tuple containing the numpy array and the index of the row with the highest sum. You should write self-contained code starting with: ```python import numpy as np def find_highest_sum_row(n=5, seed=42): ```","solution":"import numpy as np def find_highest_sum_row(n=5, seed=42): Generates a numpy array of shape (n, n) filled with random integers, and finds the row with the highest sum of its elements. Parameters: n (int): The size of the nxn matrix. Default is 5. seed (int): Random seed for reproducibility. Default is 42. Returns: tuple: A tuple containing the generated numpy array and the index of the row with the highest sum. np.random.seed(seed) matrix = np.random.randint(0, 100, size=(n, n)) row_sums = matrix.sum(axis=1) highest_sum_row_index = np.argmax(row_sums) return matrix, highest_sum_row_index"},{"question":"You are provided with a list of user activities on a website. Each activity contains the user_id, timestamp, and action performed. The goal is to determine the number of unique users who have performed each type of action in the specified time range. Create a function named `activityAnalyzer` which will: 1. Parse the user activities from a list of dictionaries. 2. Filter activities that fall within the given time range. 3. Count the number of unique users for each action type within the specified time range. 4. Return the result as a dictionary where the keys are action types and the values are the count of unique users. Use the following function signature: ```python def activityAnalyzer(activities, start_time, end_time): \'\'\'Analyzes user activities and counts unique users per action type within the specified time range Parameters: - activities (list of dicts): List of user activities, where each activity is a dictionary with keys \'user_id\', \'timestamp\', and \'action\'. - start_time (str): The start time for filtering activities in the format \'YYYY-MM-DD HH:MM:SS\'. - end_time (str): The end time for filtering activities in the format \'YYYY-MM-DD HH:MM:SS\'. Returns: dict: A dictionary with action types as keys and the count of unique users as values. \'\'\' ``` Detailed Steps: 1. Install the `pandas` library if you haven\'t already by running `pip install pandas`. 2. The `activities` parameter is a list of dictionaries, where each dictionary represents an activity with keys \'user_id\', \'timestamp\', and \'action\'. 3. The `start_time` and `end_time` parameters define the time range for filtering the activities. 4. Convert the start_time and end_time strings to datetime objects. 5. Filter the activities that fall within the specified time range. 6. Count the number of unique users for each action type within the filtered activities. 7. Return the result as a dictionary with action types as keys and unique user counts as values. Note: Proper error handling for input validation is not required, assuming that the input format is always correct. Example Usage: ```python from datetime import datetime # Example activities activities = [ {\'user_id\': 1, \'timestamp\': \'2023-10-01 10:00:00\', \'action\': \'login\'}, {\'user_id\': 2, \'timestamp\': \'2023-10-01 10:05:00\', \'action\': \'view\'}, {\'user_id\': 1, \'timestamp\': \'2023-10-01 10:10:00\', \'action\': \'logout\'}, {\'user_id\': 3, \'timestamp\': \'2023-10-01 10:15:00\', \'action\': \'login\'}, {\'user_id\': 2, \'timestamp\': \'2023-10-01 10:20:00\', \'action\': \'view\'}, {\'user_id\': 1, \'timestamp\': \'2023-10-01 10:25:00\', \'action\': \'login\'}, {\'user_id\': 4, \'timestamp\': \'2023-10-01 10:30:00\', \'action\': \'view\'}, ] start_time = \'2023-10-01 10:00:00\' end_time = \'2023-10-01 10:20:00\' print(activityAnalyzer(activities, start_time, end_time)) # Expected output: {\'login\': 2, \'view\': 1, \'logout\': 1} ``` This problem will help you practice working with datetime operations, filtering data, and counting unique values in Python.","solution":"from datetime import datetime def activityAnalyzer(activities, start_time, end_time): \'\'\' Analyzes user activities and counts unique users per action type within the specified time range. Parameters: - activities (list of dicts): List of user activities, where each activity is a dictionary with keys \'user_id\', \'timestamp\', and \'action\'. - start_time (str): The start time for filtering activities in the format \'YYYY-MM-DD HH:MM:SS\'. - end_time (str): The end time for filtering activities in the format \'YYYY-MM-DD HH:MM:SS\'. Returns: dict: A dictionary with action types as keys and the count of unique users as values. \'\'\' # Convert start_time and end_time to datetime objects start_dt = datetime.strptime(start_time, \'%Y-%m-%d %H:%M:%S\') end_dt = datetime.strptime(end_time, \'%Y-%m-%d %H:%M:%S\') # Create a dictionary to store unique users per action type action_users = {} for activity in activities: user_id = activity[\'user_id\'] action = activity[\'action\'] timestamp = datetime.strptime(activity[\'timestamp\'], \'%Y-%m-%d %H:%M:%S\') # Check if the activity falls within the specified time range if start_dt <= timestamp <= end_dt: if action not in action_users: action_users[action] = set() action_users[action].add(user_id) # Convert the sets of user IDs to their lengths result = {action: len(users) for action, users in action_users.items()} return result"},{"question":"You are asked to write a function named `generate_time_series_plot` that takes four arguments: `Time_points` (a list of datetime objects representing the points in time), `Values` (a list of floats or integers representing the values at each time point), `Line_Color` (a string representing the color of the line), and `Point_Color` (a string representing the color of the points). Your task is to create a time series plot using the `matplotlib.pyplot` library where the line connecting the points is `Line_Color` and the points are `Point_Color`. The chart\'s title should be \\"Time Series Data,\\" and it should be in font size 18. The x-axis title should be \\"Time\\" in font size 16, and the y-axis title should be \\"Values\\" in font size 16. Specifically, you need to use the `matplotlib.pyplot.plot` function to plot the line and the `matplotlib.pyplot.scatter` function to plot the points. The function should have the following signature: ```python def generate_time_series_plot(Time_points: list, Values: list, Line_Color: str, Point_Color: str) -> None: ``` **Example:** ```python import matplotlib.pyplot as plt import datetime Time_points = [datetime.datetime(2023, 1, 1), datetime.datetime(2023, 1, 2), datetime.datetime(2023, 1, 3), datetime.datetime(2023, 1, 4)] Values = [10, 20, 15, 25] Line_Color = \'blue\' Point_Color = \'red\' generate_time_series_plot(Time_points, Values, Line_Color, Point_Color) ``` Expected behavior: The function should display a time series plot with the specified title, x-axis, and y-axis labels. The line should be of color `Line_Color`, and the points should be of color `Point_Color`. **Requirements:** - Use `matplotlib.pyplot.plot` to create the line. - Use `matplotlib.pyplot.scatter` to create the points. - Set the chart title, x-axis, and y-axis labels with the specified parameters using `matplotlib.pyplot`.","solution":"import matplotlib.pyplot as plt def generate_time_series_plot(Time_points: list, Values: list, Line_Color: str, Point_Color: str) -> None: This function generates a time series plot. Parameters: Time_points: list of datetime objects representing the points in time Values: list of floats or integers representing the values at each time point Line_Color: string representing the color of the line Point_Color: string representing the color of the points plt.figure(figsize=(10, 5)) plt.plot(Time_points, Values, color=Line_Color, label=\'Line\') plt.scatter(Time_points, Values, color=Point_Color, label=\'Points\') plt.title(\\"Time Series Data\\", fontsize=18) plt.xlabel(\\"Time\\", fontsize=16) plt.ylabel(\\"Values\\", fontsize=16) plt.legend() plt.grid(True) plt.show()"},{"question":"# Background In data structures, particularly with trees, traversals are essential operations. A Binary Search Tree (BST) is a common data structure where each node has at most two children, and it is organized in a way that allows for efficient querying, insertion, and deletion of data. Preorder traversal of a BST is a type of depth-first traversal where the nodes are processed in the order: Root, Left, Right. # Task Write a class called `BinarySearchTree` that handles the creation and management of a BST. The class should: 1. Implement an `insert` method to insert values into the BST while maintaining its properties. 2. Implement a `preorder_traversal` method that returns a list of values representing the preorder traversal of the BST. # Requirements - Do not use any external libraries. - Ensure the class structure and methods are defined as per the specifications below. - Handle edge cases where the tree might be empty. # Class and Method Signatures ```python class BinarySearchTree: def __init__(self): pass def insert(self, value: int): pass def preorder_traversal(self) -> list: pass ``` # Example ```python # Create an instance of the BinarySearchTree bst = BinarySearchTree() # Insert values into the BST bst.insert(8) bst.insert(3) bst.insert(10) bst.insert(1) bst.insert(6) # Perform a preorder traversal traversal_result = bst.preorder_traversal() print(traversal_result) # Expected Output: [8, 3, 1, 6, 10] ```","solution":"class TreeNode: def __init__(self, key: int): self.key = key self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, value: int): if not self.root: self.root = TreeNode(value) else: self._insert_recursive(self.root, value) def _insert_recursive(self, node: TreeNode, value: int): if value < node.key: if node.left: self._insert_recursive(node.left, value) else: node.left = TreeNode(value) elif value > node.key: if node.right: self._insert_recursive(node.right, value) else: node.right = TreeNode(value) def preorder_traversal(self) -> list: result = [] self._preorder_recursive(self.root, result) return result def _preorder_recursive(self, node: TreeNode, result: list): if not node: return result.append(node.key) self._preorder_recursive(node.left, result) self._preorder_recursive(node.right, result)"},{"question":"Given a list of URLs, write a function to asynchronously fetch the content from each URL and store the results in a dictionary with the URL as the key and the content as the value. Use the `asyncio` and `aiohttp` libraries to perform the asynchronous HTTP requests. Handle exceptions related to network errors or invalid URLs gracefully. The function should output: - Dictionary: A dictionary where each key is a URL, and each value is the content retrieved from that URL as text. - List: A list of URLs that could not be fetched due to errors. You should write self-contained code starting with: ```python import asyncio import aiohttp async def fetch_content(url, session): try: async with session.get(url) as response: response.raise_for_status() return url, await response.text() except Exception as e: return url, str(e) async def task_func(url_list): async with aiohttp.ClientSession() as session: tasks = [fetch_content(url, session) for url in url_list] results = await asyncio.gather(*tasks) url_content = {} error_urls = [] for url, content in results: if \\"http\\" in url: url_content[url] = content else: error_urls.append(url) return url_content, error_urls # Sample Usage (uncomment to run) # urls = [\\"https://example.com\\", \\"https://invalid-url\\"] # fetched_data, errors = asyncio.run(task_func(urls)) # print(fetched_data) # print(errors) ```","solution":"import asyncio import aiohttp async def fetch_content(url, session): try: async with session.get(url) as response: response.raise_for_status() return url, await response.text() except Exception as e: return url, str(e) async def task_func(url_list): async with aiohttp.ClientSession() as session: tasks = [fetch_content(url, session) for url in url_list] results = await asyncio.gather(*tasks) url_content = {} error_urls = [] for url, content in results: if \\"http\\" in url: url_content[url] = content else: error_urls.append(url) return url_content, error_urls"},{"question":"Implement a function called `reverse_by_word` that takes a string as input and returns a new string where the words are reversed but their order remains unchanged. Each word will be separated by a single space. The input string will consist of lower and upper case alphabetic characters and spaces only. # Requirements: 1. Your function should take one argument: - `s` (str): A string containing words separated by spaces. 2. You should not use any built-in Python string manipulation methods such as `split`, `join`, or `reverse`. 3. The function should maintain the original order of the words but reverse the characters in each word. # Example: ```python s = \\"Hello World This Is An Example\\" reversed_string = reverse_by_word(s) print(reversed_string) ``` Expected output for the example: ``` \\"olleH dlroW sihT sI nA elpmaxE\\" ``` # Explanation: Given the input string `\\"Hello World This Is An Example\\"`, the function processes each word separately: - \\"Hello\\" becomes \\"olleH\\", - \\"World\\" becomes \\"dlroW\\", - \\"This\\" becomes \\"sihT\\", - \\"Is\\" becomes \\"sI\\", - \\"An\\" becomes \\"nA\\", - \\"Example\\" becomes \\"elpmaxE\\". The function then returns the processed words in the same order: `\\"olleH dlroW sihT sI nA elpmaxE\\"`.","solution":"def reverse_by_word(s): Returns a new string where each word in the input string is reversed, but the order of the words remains unchanged. def reverse_word(word): return word[::-1] result = \\"\\" current_word = \\"\\" for char in s: if char == \\" \\": reversed_word = reverse_word(current_word) result += reversed_word + \\" \\" current_word = \\"\\" else: current_word += char # Append the last word if there\'s any if current_word: reversed_word = reverse_word(current_word) result += reversed_word return result"},{"question":"You are required to implement a function `weighted_average` that computes the weighted average of a list of numbers given a list of corresponding weights. The function should handle cases where the total weight is zero, returning `None` in such situations to avoid division by zero errors. Here is a guideline for implementing the function: 1. **Function Name**: `weighted_average` 2. **Parameters**: - `values`: A list of numerical values for which the weighted average is to be computed. - `weights`: A list of numerical weights corresponding to each value in the `values` list. 3. **Returns**: A `float` representing the weighted average of the values. If the total weight is zero, return `None`. Your function should: - Verify that the lengths of `values` and `weights` lists are the same. - Calculate the total weight. If it is zero, return `None`. - Compute and return the weighted average. **Example Usage**: ```python # Sample input data values = [10, 20, 30] weights = [1, 2, 3] # Function call result = weighted_average(values, weights) print(result) # Output: 23.333333333333332 # Another input where total weight is zero values = [10, 20, 30] weights = [0, 0, 0] # Function call result = weighted_average(values, weights) print(result) # Output: None ``` **Note**: You can assume that the inputs are always lists of numerical values and that both lists have the same length.","solution":"def weighted_average(values, weights): Computes the weighted average of values given their corresponding weights. Parameters: values (list of float): The list of numerical values. weights (list of float): The list of numerical weights corresponding to the values. Returns: float: The weighted average of values. If total weight is zero, return None. total_weight = sum(weights) if total_weight == 0: return None weighted_sum = sum(v * w for v, w in zip(values, weights)) return weighted_sum / total_weight # Sample input data values = [10, 20, 30] weights = [1, 2, 3] # Function call result = weighted_average(values, weights) print(result) # Output: 23.333333333333332 # Another input where total weight is zero values = [10, 20, 30] weights = [0, 0, 0] # Function call result = weighted_average(values, weights) print(result) # Output: None"},{"question":"You are asked to write a function that simulates and visualizes the daily profits of a small business over a month. This function should use the `matplotlib` library to generate a line plot and the `random` library to simulate the profit values. **Function Specifications:** 1. **Function Name:** `plot_daily_profits` 2. **Parameters:** - `days` (int): The number of days to simulate (e.g., 30 for a typical month). - `min_profit` (float): The minimum profit value for a day. - `max_profit` (float): The maximum profit value for a day. 3. **Returns:** This function should not return any value. Instead, it should produce a line plot as described. **Requirements:** - Use `random.uniform` to generate random profit values between `min_profit` and `max_profit` for each day. - Use `matplotlib.pyplot.plot` to create the line plot. - Label the x-axis as \'Day of the Month\' and the y-axis as \'Profit (in USD)\'. - Use `matplotlib.pyplot.title` to set the title of the plot to \'Daily Profits for the Month\'. - Use `matplotlib.pyplot.grid` to add a grid to the plot. The function should simulate random daily profits for the specified number of days and plot these values on a line plot, with days on the x-axis and profit values on the y-axis. **Example:** ```python days = 30 min_profit = 100.0 max_profit = 1000.0 plot_daily_profits(days, min_profit, max_profit) ``` This should create a line plot showing the simulated daily profits with appropriate labels, title, and grid.","solution":"import random import matplotlib.pyplot as plt def plot_daily_profits(days, min_profit, max_profit): Simulates and visualizes the daily profits of a small business over a month. Parameters: days (int): The number of days to simulate. min_profit (float): The minimum profit value for a day. max_profit (float): The maximum profit value for a day. Returns: None # Simulate daily profits profits = [random.uniform(min_profit, max_profit) for _ in range(days)] # Create a line plot plt.plot(range(1, days + 1), profits, marker=\'o\') # Label the axes plt.xlabel(\'Day of the Month\') plt.ylabel(\'Profit (in USD)\') # Set the title plt.title(\'Daily Profits for the Month\') # Add a grid plt.grid(True) # Show the plot plt.show()"},{"question":"You are asked to design a function that creates a calendar visualization for a given month and year using the matplotlib library. The calendar should highlight weekends in a different color and optionally include holidays. The function should be named `create_calendar` and must follow the specified signature. Here is the detailed breakdown of what the function should do: **Function Signature:** ```python def create_calendar(year: int, month: int, holidays: list = None) -> None: ``` **Parameters:** - `year` (int): The year for which the calendar is to be created. - `month` (int): The month for which the calendar is to be created. - `holidays` (list): An optional list of dates (in `YYYY-MM-DD` format) that should be highlighted as holidays. Default is `None`. **Function Details:** 1. Create a figure and axis using `plt.subplots()` from the matplotlib library. 2. Generate the calendar for the specified month and year using the `calendar` module from the Python standard library. 3. Populate the calendar on the plot, ensuring: - Weekends (Saturdays and Sundays) are highlighted in a different color. - If `holidays` is provided, highlight these dates with a distinct color. 4. Use `plt.text` to place the dates on the corresponding day of the week in the correct week. 5. Ensure the plot has a title indicating the month and year, and format the axes to resemble a typical calendar grid. 6. Display the calendar using `plt.show()` method. **Notes:** - Ensure the plot is readable with proper spacing and alignment. - You may assume the `holidays` list will only contain valid dates in the `YYYY-MM-DD` format for the specified month and year. Your task is to implement the `create_calendar` function correctly, leveraging matplotlib for the visualization and considering all the specified requirements.","solution":"import matplotlib.pyplot as plt import calendar from matplotlib.patches import Rectangle def create_calendar(year: int, month: int, holidays: list = None) -> None: Creates a calendar visualization for a given month and year using matplotlib. Parameters: year (int): The year for which the calendar is to be created. month (int): The month for which the calendar is to be created. holidays (list): An optional list of dates (in `YYYY-MM-DD` format) that should be highlighted as holidays. Default is None. # Convert holidays to a set of day numbers for quick lookup holiday_days = set() if holidays: for holiday in holidays: holiday_days.add(int(holiday.split(\'-\')[2])) # Create the figure and axis fig, ax = plt.subplots(figsize=(10, 8)) ax.set_xlim(-0.5, 6.5) ax.set_ylim(5.5, -0.5) ax.axis(\'off\') # Get the month name and days month_name = calendar.month_name[month] month_cal = calendar.monthcalendar(year, month) # Set the title ax.set_title(f\'{month_name} {year}\', fontsize=20) # Weekday labels days = [\'Mon\', \'Tue\', \'Wed\', \'Thu\', \'Fri\', \'Sat\', \'Sun\'] for i, day in enumerate(days): ax.text(i, -0.5, day, ha=\'center\', fontsize=14, fontweight=\'bold\') for week_num, week in enumerate(month_cal): for day_num, day in enumerate(week): if day != 0: x = day_num y = week_num if calendar.weekday(year, month, day) >= 5: ax.add_patch(Rectangle((x - 0.5, y - 0.5), 1, 1, edgecolor=\'black\', facecolor=\'lightgrey\')) if day in holiday_days: ax.add_patch(Rectangle((x - 0.5, y - 0.5), 1, 1, edgecolor=\'black\', facecolor=\'red\', alpha=0.3)) ax.text(x, y, str(day), ha=\'center\', va=\'center\', fontsize=14) plt.show()"},{"question":"Given a list of integers, design a function to sort the odd numbers in ascending order while keeping the even numbers in their original positions. The function should then return the modified list. Your function should be named `sort_odd_numbers` and must accomplish the following steps: 1. Identify the odd numbers in the list. 2. Sort the odd numbers in ascending order. 3. Replace the original odd numbers in the list with the sorted odd numbers, keeping even numbers in their initial positions. # Function Signature ```python def sort_odd_numbers(nums): pass ``` # Parameters - `nums`: List of integers containing positive, negative, and zero values. # Returns - A list of integers where the odd numbers are sorted in ascending order, and even numbers remain in their original positions. # Usage Example ```python print(sort_odd_numbers([5, 8, 6, 3, 4, 1])) # Output: [1, 8, 6, 3, 4, 5] print(sort_odd_numbers([2, 22, 1, 7, 5, 4])) # Output: [2, 22, 1, 5, 7, 4] ``` # Constraints - All elements in the input list are integers. - The input list can be of length 0 to 10^4. - Time complexity should be O(n log n) due to the sorting step. # Hint - Use list comprehensions to extract and sort odd numbers, then iterate through the list to replace the odd numbers while maintaining even numbers\' positions. # Notes - Do not use built-in sorting functions that sort the entire list, as this would disturb the position of even numbers. - Pay attention to edge cases such as empty lists or lists with no odd numbers.","solution":"def sort_odd_numbers(nums): Sort the odd numbers in ascending order while keeping the even numbers in their original positions. Parameters: nums (list): List of integers. Returns: list: A modified list where odd numbers are sorted and even numbers remain in their original positions. # Extract odd numbers and sort them sorted_odds = sorted([num for num in nums if num % 2 != 0]) # Iterator for the sorted odd numbers odd_iter = iter(sorted_odds) # Replace the original odd numbers in the list with the sorted odd numbers result = [next(odd_iter) if num % 2 != 0 else num for num in nums] return result"},{"question":"You need to create a function `reverse_linked_list(head)` that takes the head node of a singly linked list and returns the head node of the reversed linked list. A singly linked list is a linear data structure where each element, called a node, contains a value and a reference (or link) to the next node in the sequence. # Function Specification: - **Function Name**: `reverse_linked_list` - **Parameters**: - `head` (Node): The head node of the singly linked list. Each node has attributes `data` (to store the value) and `next` (to store the reference to the next node). # Requirements: - The function should traverse the linked list, reverse the links between the nodes, and then return the new head node. - The solution should work in linear time, with a time complexity of O(n), where n is the number of nodes in the linked list. - The space complexity should be O(1), i.e., no extra space apart from the variables used for reversing the list. # Instructions: 1. Initialize three pointers: `prev` as `None`, `current` as `head`, and `next_node` as `None`. 2. Traverse the linked list using the `current` pointer: - Save the `next` reference of the current node in `next_node`. - Reverse the `next` reference of the current node to point to the `prev` pointer. - Move the `prev` pointer to the current node. - Move the `current` pointer to `next_node`. 3. At the end of the loop, `prev` will be the new head of the reversed linked list. # Example: Assuming you have a linked list represented as 1 -> 2 -> 3 -> 4 -> None, calling `reverse_linked_list(head)` will return the head node of the reversed list which represents 4 -> 3 -> 2 -> 1 -> None. # Provided Code Snippet: ```python class Node: def __init__(self, data): self.data = data self.next = None def reverse_linked_list(head): prev = None current = head while current is not None: next_node = current.next # Save the next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to next node return prev # prev will be the new head at the end of the loop # Sample Usage # Create linked list 1 -> 2 -> 3 -> 4 head = Node(1) head.next = Node(2) head.next.next = Node(3) head.next.next.next = Node(4) # Reverse the linked list new_head = reverse_linked_list(head) # Output the reversed linked list current = new_head while current: print(current.data, end=\\" -> \\") current = current.next print(\\"None\\") ``` In this example, the output will be the reversed linked list: `4 -> 3 -> 2 -> 1 -> None`. Implement the `reverse_linked_list(head)` function based on this description.","solution":"class Node: def __init__(self, data): self.data = data self.next = None def reverse_linked_list(head): prev = None current = head while current is not None: next_node = current.next # Save the next node current.next = prev # Reverse the link prev = current # Move prev to current node current = next_node # Move to next node return prev # prev will be the new head at the end of the loop # Helper function to convert list to linked list for testing purposes def convert_list_to_linked_list(lst): if not lst: return None head = Node(lst[0]) current = head for value in lst[1:]: current.next = Node(value) current = current.next return head # Helper function to convert linked list to list for testing purposes def convert_linked_list_to_list(head): lst = [] current = head while current is not None: lst.append(current.data) current = current.next return lst"},{"question":"You are given a JSON file named `products.json` which contains data about various products in an online store. Each product has several attributes including `category`, `price`, and `stock_quantity`. You need to write a Python function named `product_summary_by_category()` that performs the following tasks: 1. Reads the JSON file `products.json`. 2. Groups the products by their category. 3. For each category, calculates the average price, the total stock quantity, and lists the names of all products in that category. 4. Prints the category name, the calculated average price, total stock quantity, and lists of product names for each category. 5. Prints the total time taken to perform the grouping and summarization operations. Use the following libraries: - `json` for reading the JSON file. - `collections.defaultdict` for grouping products by category. - `time.time` for calculating the execution time of the operations. The JSON file `products.json` has the following structure: ```json [ {\\"product_name\\": \\"Product A\\", \\"category\\": \\"Electronics\\", \\"price\\": 299.99, \\"stock_quantity\\": 50}, {\\"product_name\\": \\"Product B\\", \\"category\\": \\"Electronics\\", \\"price\\": 199.99, \\"stock_quantity\\": 30}, {\\"product_name\\": \\"Product C\\", \\"category\\": \\"Books\\", \\"price\\": 9.99, \\"stock_quantity\\": 120}, {\\"product_name\\": \\"Product D\\", \\"category\\": \\"Books\\", \\"price\\": 14.99, \\"stock_quantity\\": 80}, ... ] ``` # Steps Outline 1. Load and parse the JSON file using `json.load`. 2. Use `collections.defaultdict` to group products by their category. 3. For each category, calculate the average price of the products, total stock quantity, and gather a list of product names. 4. Print the category name along with the calculated average price, total stock quantity, and list of product names. 5. Print the total execution time for the grouping and summarization operations. Implement the function `product_summary_by_category()` to achieve the above steps.","solution":"import json from collections import defaultdict import time def product_summary_by_category(): # Step 1: Read the JSON file with open(\'products.json\', \'r\') as file: products = json.load(file) # Initialize defaultdict for grouping products by category category_summary = defaultdict(lambda: {\'total_price\': 0, \'total_stock\': 0, \'product_names\': []}) start_time = time.time() # Step 2: Group products by category and calculate required metrics for product in products: category = product[\'category\'] price = product[\'price\'] stock = product[\'stock_quantity\'] name = product[\'product_name\'] category_summary[category][\'total_price\'] += price category_summary[category][\'total_stock\'] += stock category_summary[category][\'product_names\'].append(name) # Step 3: Calculate the average price for each category for category, summary in category_summary.items(): total_products = len(summary[\'product_names\']) summary[\'average_price\'] = summary[\'total_price\'] / total_products if total_products > 0 else 0 end_time = time.time() total_time = end_time - start_time # Step 4: Print the summaries for each category for category, summary in category_summary.items(): print(f\\"Category: {category}\\") print(f\\" Average Price: {summary[\'average_price\']:.2f}\\") print(f\\" Total Stock: {summary[\'total_stock\']}\\") print(f\\" Products: {summary[\'product_names\']}\\") # Step 5: Print the execution time print(f\\"Total Time taken: {total_time:.4f} seconds\\")"},{"question":"You are required to write a Python function named `parse_emails()`, which reads a file named `emails.txt`, extracts all the valid email addresses, and saves them to a new file named `valid_emails.txt`. Each email address should be on a new line in the output file. The function should follow these steps: 1. **File Reading**: Open and read the file `emails.txt`. Each line in this file may contain zero, one, or multiple email addresses. 2. **Email Extraction**: Extract all valid email addresses from the content. An email address is considered valid if it matches the typical email pattern: starts with a sequence of alphanumeric characters (including `.` and `_`), followed by an `@` symbol, a domain name, a dot (`.`), and an appropriate domain (e.g., `.com`, `.org`, `.net`). 3. **File Writing**: Write the valid email addresses to a new file `valid_emails.txt`, with each email address on a new line. 4. **Consider Edge Cases**: Handle cases where there are no valid email addresses in the input file by creating an empty `valid_emails.txt`. Here’s a summary of the function you need to write: ```python def parse_emails(): # Implement the required functionality here pass ``` **Important**: Use the `re` module for regular expressions to identify valid email addresses. Here is a simplified example of a regex pattern you could use for extracting email addresses: `\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\'`. Your implementation should ensure efficient file handling and proper resource management.","solution":"import re def parse_emails(): email_pattern = r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\' valid_emails = [] # Read the contents of the file with open(\'emails.txt\', \'r\') as file: lines = file.readlines() # Extract valid emails for line in lines: matches = re.findall(email_pattern, line) valid_emails.extend(matches) # Write valid emails to the output file with open(\'valid_emails.txt\', \'w\') as file: for email in valid_emails: file.write(email + \'n\')"},{"question":"You\'ve been hired to optimize a company\'s package delivery system. The company wants to minimize the total delivery time for delivering packages to all destinations. Each package has an associated delivery time and penalty if delivered late. You need to design a function that takes a list of packages with their delivery times and penalties, and returns an optimal schedule such that the total penalty is minimized. Each package is represented by a tuple `(delivery_time, penalty)`, and the function should return a list of indices representing the order in which the packages should be delivered. **Requirements:** 1. The function should consider that each package takes its `delivery_time` to deliver. 2. If a package is delivered after its delivery window, the penalty is incurred. 3. The function should return the order of indices for the optimal delivery schedule. **Function Signature:** ```python def optimal_delivery_schedule(packages: List[Tuple[int, int]]) -> List[int]: ``` **Parameters:** - `packages` - A list of tuples where each tuple represents a package with its delivery time and penalty for late delivery `(delivery_time, penalty)`. **Returns:** - A list of integers representing the indices of the packages in the order they should be delivered. **Example Usage:** ```python packages = [(2, 10), (1, 20), (3, 5), (2, 1)] schedule = optimal_delivery_schedule(packages) # Example expected output [1, 0, 3, 2] print(schedule) ``` **Note:** - The example output `[1, 0, 3, 2]` represents the order in which package indices should be delivered to minimize the total penalty. - The brute-force approach is not acceptable; you should consider using a greedy algorithm or dynamic programming to ensure efficiency.","solution":"from typing import List, Tuple def optimal_delivery_schedule(packages: List[Tuple[int, int]]) -> List[int]: Returns the order of package indices that minimizes total delivery penalty. # Sort packages by penalty per unit time in descending order # The idea is to deliver packages with higher penalties first sorted_packages = sorted(enumerate(packages), key=lambda x: x[1][1]/x[1][0], reverse=True) # Extract indices from the sorted package list optimal_order = [index for index, _ in sorted_packages] return optimal_order"},{"question":"Write a Python function named `longest_substring_k_distinct(s, k)` that takes a string `s` and an integer `k` as input and returns the length of the longest substring that contains at most `k` distinct characters. Your solution should use a sliding window technique to efficiently find the solution in linear time. # Example: ```python s = \\"eceba\\" k = 2 print(longest_substring_k_distinct(s, k)) # Output: 3 # The longest substring with at most 2 distinct characters is \\"ece\\" which has a length of 3 s = \\"aa\\" k = 1 print(longest_substring_k_distinct(s, k)) # Output: 2 # The longest substring with at most 1 distinct character is \\"aa\\" which has a length of 2 ``` # Constraints: - `0 <= len(s) <= 2 * 10^4` - `0 <= k <= len(s)` # Approach: 1. Use a sliding window to keep track of the characters in the current substring. 2. Use a hashmap to count the frequency of each character within the window. 3. Expand the window by adding one character at a time. 4. Whenever the window contains more than `k` distinct characters, shrink it from the left until it contains exactly `k` distinct characters. 5. Keep track of the maximum window size encountered during the process and return it.","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0: return 0 char_count = {} left = 0 max_length = 0 for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are tasked with developing a Python function that processes a list of dictionaries containing sales data and computes the monthly sales summary for each product. The function will utilize the pandas library to handle the data transformations efficiently. Follow these guidelines when implementing the function: 1. **Function Name**: `monthly_sales_summary` 2. **Function Inputs**: A list of dictionaries where each dictionary contains at least the following keys: `product_name`, `sale_date`, and `sale_amount`. The `sale_date` values are strings representing the date of the sale. 3. **Function Outputs**: The function should print: - The total monthly sales amount for each product. - The mean monthly sales amount for each product. - The total time taken to execute the function. 4. **Requirements**: - Convert the list of dictionaries to a pandas DataFrame. - Use `pandas.to_datetime` to convert the `sale_date` column to datetime objects. - Group the data by `product_name` and the month part of the `sale_date` to compute the total and mean sales for each product by month. Your task is to create the `monthly_sales_summary` function according to the above requirements. Here is a template to get started: ```python import pandas as pd import time def monthly_sales_summary(sales_data): Displays summary of monthly sales for each product. print(\'nCalculating Monthly Sales Summary...n\') start_time = time.time() # Convert list of dictionaries to DataFrame # Convert \'sale_date\' to datetime # Group by \'product_name\' and month of \'sale_date\' # Compute total and mean monthly sales for each product # Print the summary print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\'*40) ``` **Sample Input**: ```python sales_data = [ {\'product_name\': \'Product A\', \'sale_date\': \'2023-01-15\', \'sale_amount\': 100}, {\'product_name\': \'Product A\', \'sale_date\': \'2023-01-20\', \'sale_amount\': 150}, {\'product_name\': \'Product B\', \'sale_date\': \'2023-01-10\', \'sale_amount\': 200}, {\'product_name\': \'Product A\', \'sale_date\': \'2023-02-05\', \'sale_amount\': 300}, {\'product_name\': \'Product B\', \'sale_date\': \'2023-02-15\', \'sale_amount\': 100} ] monthly_sales_summary(sales_data) ``` **Expected Output**: ``` Calculating Monthly Sales Summary... Product: Product A Total monthly sales: 2023-01-31 250 2023-02-28 300 Freq: M, Name: sale_amount, dtype: int64 Mean monthly sales: 2023-01-31 125 2023-02-28 300 Freq: M, Name: sale_amount, dtype: int64 Product: Product B Total monthly sales: 2023-01-31 200 2023-02-28 100 Freq: M, Name: sale_amount, dtype: int64 Mean monthly sales: 2023-01-31 200 2023-02-28 100 Freq: M, Name: sale_amount, dtype: int64 This took X.XXXXXX seconds. ---------------------------------------- ```","solution":"import pandas as pd import time def monthly_sales_summary(sales_data): Displays summary of monthly sales for each product. print(\'nCalculating Monthly Sales Summary...n\') start_time = time.time() # Convert list of dictionaries to DataFrame df = pd.DataFrame(sales_data) # Convert \'sale_date\' to datetime df[\'sale_date\'] = pd.to_datetime(df[\'sale_date\']) # Group by \'product_name\' and month of \'sale_date\' df[\'month\'] = df[\'sale_date\'].dt.to_period(\'M\') grouped_df = df.groupby([\'product_name\', \'month\'])[\'sale_amount\'] # Compute total and mean monthly sales for each product total_sales = grouped_df.sum() mean_sales = grouped_df.mean() for product in df[\'product_name\'].unique(): print(f\'Product: {product}\') print(f\'Total monthly sales:n{total_sales.loc[product]}\') print() print(f\'Mean monthly sales:n{mean_sales.loc[product]}\') print() print(\\"nThis took %s seconds.\\" % (time.time() - start_time)) print(\'-\'*40)"},{"question":"# Customer Purchase Sequences Analysis You have a dataset that contains customer transactions from an e-commerce platform. Each row in the DataFrame `df` represents a unique purchase and contains columns \'CustomerID\', \'Product\', \'Date\', and \'Amount\'. Your task is to write a function `analyze_purchase_sequences` that analyzes the purchase frequency and sequences of customers. Specifically, you need to: 1. Generate a dictionary `customer_sequences` where each key is a `CustomerID` and the value is a list of purchased `Product`s in order of the \'Date\'. 2. For each customer, identify sequences of at least `min_length` consecutive purchases of the same product. 3. Calculate the total amount spent on each of these sequences. 4. Return a summarized DataFrame with `CustomerID`, `Product`, `Start_Date` of the sequence, `End_Date` of the sequence, and `Total_Amount_Spent`. Function Signature: ```python import pandas as pd def analyze_purchase_sequences(df: pd.DataFrame, min_length: int = 3) -> pd.DataFrame: pass ``` Parameters: - `df (pd.DataFrame)`: The input DataFrame that contains customer transactions with columns \'CustomerID\', \'Product\', \'Date\', and \'Amount\'. - `min_length (int)`: Minimum length of a sequence of consecutive purchases of the same product to be considered. Returns: - A DataFrame with columns \'CustomerID\', \'Product\', \'Start_Date\', \'End_Date\', and \'Total_Amount_Spent\', summarizing qualifying purchase sequences. Example: ```python import pandas as pd data = { \'CustomerID\': [1, 1, 1, 2, 2, 3, 3, 3, 3], \'Product\': [\'A\', \'A\', \'A\', \'B\', \'B\', \'C\', \'C\', \'C\', \'D\'], \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\', \'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-04\'], \'Amount\': [100, 100, 100, 200, 200, 300, 300, 300, 300] } df = pd.DataFrame(data) res = analyze_purchase_sequences(df, min_length=3) print(res) ``` Expected Output: ``` CustomerID Product Start_Date End_Date Total_Amount_Spent 0 1 A 2023-01-01 2023-01-03 300 1 3 C 2023-01-01 2023-01-03 900 ```","solution":"import pandas as pd def analyze_purchase_sequences(df: pd.DataFrame, min_length: int = 3) -> pd.DataFrame: df[\'Date\'] = pd.to_datetime(df[\'Date\']) df = df.sort_values(by=[\'CustomerID\', \'Date\']) customer_sequences = {} results = [] grouped = df.groupby(\'CustomerID\') for customer_id, group in grouped: sequences = [] current_product = None current_sequence = [] for _, row in group.iterrows(): product = row[\'Product\'] amount = row[\'Amount\'] date = row[\'Date\'] if product == current_product: current_sequence.append((amount, date)) else: if current_sequence and len(current_sequence) >= min_length: start_date = current_sequence[0][1] end_date = current_sequence[-1][1] total_amount = sum([amt for amt, _ in current_sequence]) results.append([customer_id, current_product, start_date, end_date, total_amount]) current_product = product current_sequence = [(amount, date)] if current_sequence and len(current_sequence) >= min_length: start_date = current_sequence[0][1] end_date = current_sequence[-1][1] total_amount = sum([amt for amt, _ in current_sequence]) results.append([customer_id, current_product, start_date, end_date, total_amount]) result_df = pd.DataFrame(results, columns=[\'CustomerID\', \'Product\', \'Start_Date\', \'End_Date\', \'Total_Amount_Spent\']) return result_df"},{"question":"Write a function `record_water_usage(log_file: str, usage: Tuple[str, float]) -> None` that logs daily water usage for a household. The function should append the new usage record to the log file. Each usage record consists of the date (in `YYYY-MM-DD` format) and the quantity of water used (in liters). If the file does not exist, it should create a new one. The function needs to: 1. Open the log file (`log_file`) in append mode. 2. Write the new usage record to the file, ensuring each record is on a new line and properly formatted as `date: water_quantity_liters`. Requirements: - Use the `with open(file, mode)` construct to handle file operations, ensuring the file is properly closed after the operation. - Append the new record to the file in the format `YYYY-MM-DD: X.Y liters`. Here is an example of the initial file content for `log_file`: ``` 2023-01-01: 120.5 liters 2023-01-02: 105.0 liters ``` If `usage` is `(\\"2023-01-03\\", 95.3)`, the file should be updated to: ``` 2023-01-01: 120.5 liters 2023-01-02: 105.0 liters 2023-01-03: 95.3 liters ```","solution":"from typing import Tuple def record_water_usage(log_file: str, usage: Tuple[str, float]) -> None: Append the water usage record to the log file. Parameters: log_file (str): The path to the log file. usage (Tuple[str, float]): The usage record containing the date and water quantity. date, quantity = usage record = f\\"{date}: {quantity:.1f} litersn\\" with open(log_file, \'a\') as file: file.write(record)"},{"question":"Write a function that takes a CSV file path as input and extracts all rows where a specified column\'s values fall within a given numerical range. The function should return a new CSV file containing only these filtered rows and also print the number of rows found. Your function should output: 1. A new CSV file containing the filtered rows 2. An integer representing the count of filtered rows You should write self-contained code starting with: ``` import pandas as pd def filter_csv(file_path, column_name, min_value, max_value, output_file): ```","solution":"import pandas as pd def filter_csv(file_path, column_name, min_value, max_value, output_file): Filters rows from the input CSV file where the specified column\'s values fall within the given numerical range, saves the filtered rows to a new CSV file, and prints the number of rows found. Parameters: - file_path: str, path to the input CSV file - column_name: str, column name to be checked against the numerical range - min_value: float, minimum threshold for the column value (inclusive) - max_value: float, maximum threshold for the column value (inclusive) - output_file: str, path to the output CSV file to save filtered rows Returns: - int, the number of filtered rows df = pd.read_csv(file_path) filtered_df = df[(df[column_name] >= min_value) & (df[column_name] <= max_value)] filtered_df.to_csv(output_file, index=False) row_count = len(filtered_df) print(row_count) return row_count"},{"question":"You are tasked with creating a function named `find_max_min_sum` that takes a single parameter: `numbers`. The function will return the sum of the maximum and minimum values in the list. Parameters: - `numbers`: A list of integers. Requirements: - The function should find both the maximum and minimum values in the `numbers` list. - The function should return the sum of the maximum and minimum values. - Ensure the function handles an empty list by returning `None`. Here is the function signature to guide you: ```python def find_max_min_sum(numbers): Find and return the sum of the maximum and minimum values in the list. Args: numbers (list): A list of integers. Returns: int: The sum of the maximum and minimum values, or None if the list is empty. pass ``` # Example Usage: ```python # Example list numbers = [5, 7, 2, 9, 3] # Find and print the sum of the max and min values print(find_max_min_sum(numbers)) # Output: 11 (9 + 2) # Handle empty list print(find_max_min_sum([])) # Output: None ```","solution":"def find_max_min_sum(numbers): Find and return the sum of the maximum and minimum values in the list. Args: numbers (list): A list of integers. Returns: int: The sum of the maximum and minimum values, or None if the list is empty. if not numbers: return None max_val = max(numbers) min_val = min(numbers) return max_val + min_val"},{"question":"You are tasked with writing a function that calculates the top-three most common words in a given text. Your function should be efficient and capable of handling relatively large input strings. # Function Signature ```python def top_three_words(text: str) -> List[str]: pass ``` # Parameters - `text` (str): The input string containing the text to analyze. # Return - `common_words` (List[str]): A list of the top three most common words, in decreasing order of frequency. If there are less than three distinct words, return only the available words in the same order. # Constraints 1. Words should be case-insensitive. 2. Punctuation and non-alphabetic characters should be ignored (assume words are separated by spaces). 3. The function should be able to handle an empty string, returning an empty list. 4. The definition of a word is a series of characters bounded by spaces or punctuation. # Example ```python text = \\"Hello, hello! How are you? Are you doing well?\\" result = top_three_words(text) print(result) # Example output: [\'hello\', \'are\', \'you\'] ``` # Explanation In the example, the function `top_three_words` processes the input text and finds that \\"hello\\" appears twice, while \\"are\\" and \\"you\\" both appear twice as well. Since these are the top-three occurring words when sorted by frequency, the function returns them in a list. # Hints - Consider using `collections.Counter` to simplify word frequency counting. - You might find `re.sub` useful for removing non-alphabetic characters.","solution":"from collections import Counter from typing import List import re def top_three_words(text: str) -> List[str]: # Normalize the text to lowercase and replace non-alphabetic characters with spaces normalized_text = re.sub(r\'[^a-zA-Zs]\', \' \', text.lower()) # Split the normalized text into words words = normalized_text.split() # Create a Counter object to count the frequency of each word word_counts = Counter(words) # Get the top three most common words most_common_words = [word for word, count in word_counts.most_common(3)] return most_common_words"},{"question":"You need to create a Python function that retrieves and prints the current working directory and lists all text files in it. Your task is to write a function named `list_text_files()`. The function should do the following: 1. Use the `os` library to get and print the current working directory. 2. List and print all files in this directory that have a `.txt` extension. Specifically, follow these steps inside the function: - Print a message that indicates the script is \\"Running list_text_files()\\". - Utilize `os.getcwd()` to get and print the current working directory. - Use `os.listdir()` to get the list of files in the current directory. - Filter the files that end with a `.txt` extension and print each one. **Function Signature:** ```python def list_text_files() -> None: pass ``` **Dependencies:** - `os` library for directory and file operations. Sample output might look like: ``` Running list_text_files() Current working directory: /path/to/your/directory file1.txt file2.txt ``` Use the `os` library to perform these tasks.","solution":"import os def list_text_files() -> None: Print the current working directory and list all text files in it. print(\\"Running list_text_files()\\") # Get the current working directory cwd = os.getcwd() print(f\\"Current working directory: {cwd}\\") # List all files in the current directory files = os.listdir(cwd) # Filter files with .txt extension and print them for file in files: if file.endswith(\'.txt\'): print(file)"},{"question":"You are given a list of students\' names and their corresponding scores in multiple subjects. The task is to process this data to find each student\'s average score and then determine the overall topper based on the highest average score. 1. Define a function `find_topper(student_data)` that accomplishes the following: - **Parse** the input list of tuples (`student_data`) where each tuple contains the student’s name followed by their scores in different subjects. - **Calculate** the average score for each student. - **Identify** the student with the highest average score. **Details:** - Assume that each tuple in the `student_data` list starts with a string (student\'s name) followed by multiple integers (scores in different subjects). - If there are ties (i.e., multiple students have the same highest average score), consider the student whose name comes first alphabetically as the topper. - Return the name of the overall topper. **Example:** Input: ```python student_data = [ (\\"Alice\\", 85, 90, 78), (\\"Bob\\", 92, 88, 84), (\\"Charlie\\", 88, 85, 86) ] ``` Output: ```python \\"Bob\\" ``` **Function Signature:** ```python def find_topper(student_data): pass ```","solution":"def find_topper(student_data): Determines the student with the highest average score. Args: student_data (list): A list of tuples, where each tuple contains a student\'s name followed by their scores. Returns: str: The name of the overall topper. highest_avg = float(\'-inf\') topper = \\"\\" for student in student_data: name = student[0] scores = student[1:] avg_score = sum(scores) / len(scores) if avg_score > highest_avg or (avg_score == highest_avg and name < topper): highest_avg = avg_score topper = name return topper"},{"question":"You are asked to design a function named `longestStringChain(words)` that finds the longest string chain that can be formed from a given list of words. In a string chain, every word must be preceded by a word that differs by exactly one character (by removing one character from the predecessor word). **Here are the steps your function should perform:** 1. **Sort the words list by length**: Sorting ensures that when processing a word, all its potential predecessors have already been processed. 2. **Utilize a dictionary to store the longest chain length for each word**: Initialize the dictionary where keys are words and values are the longest chain lengths ending with that word. 3. **Build the chain using dynamic programming**: For each word, attempt to form chains by removing each character and checking if the resulting word exists in the dictionary. **Function Signature:** ```python def longestStringChain(words: List[str]) -> int: ``` **Parameters:** - `words`: A list of strings representing the input words. **Returns:** - An integer representing the length of the longest possible string chain. **Example:** ```python words = [\\"a\\", \\"b\\", \\"ba\\", \\"bca\\", \\"bda\\", \\"bdca\\"] print(longestStringChain(words)) # Output should be 4 ``` **Explanation:** The longest chain is \\"a\\" -> \\"ba\\" -> \\"bda\\" -> \\"bdca\\", so the length is 4. **Constraints:** - The length of `words` will be in the range [1, 1000]. - Each word will consist of lowercase English letters. - The length of each word will be in the range [1, 16]. You should efficiently manage the dictionary and sorting operations to ensure the solution performs within the acceptable time limits for the given constraints.","solution":"from typing import List def longestStringChain(words: List[str]) -> int: Returns the length of the longest string chain that can be formed from the list of words. words.sort(key=len) longest_chain = {} max_chain_length = 1 for word in words: longest_chain[word] = 1 # Minimum chain length is 1 (the word itself) for i in range(len(word)): prev_word = word[:i] + word[i+1:] if prev_word in longest_chain: longest_chain[word] = max(longest_chain[word], longest_chain[prev_word] + 1) max_chain_length = max(max_chain_length, longest_chain[word]) return max_chain_length"},{"question":"You are asked to write a function named `reverse_words(filename)` that reads a JSON file containing a series of sentences, reverses the words in each sentence, and outputs the reversed sentences to a new JSON file named `reversed_sentences.json`. You must use the `json.load` and `json.dump` functions from Python\'s json library to read and write the JSON data. Here\'s the JSON structure of the input file: ```json { \\"sentences\\": [ \\"Hello World\\", \\"Python is great\\", \\"Data Science is fun\\" // more sentences can follow ] } ``` **Function Signature:** ```python def reverse_words(filename: str) -> None: ``` **Requirements:** 1. Use the `json.load` function from the json library to read the input JSON file. 2. Reverse the words in each sentence and store the reversed sentences in a list. 3. Save the list of reversed sentences into a JSON file named `reversed_sentences.json` using the `json.dump` function. 4. Ensure the order of sentences remains the same, but each sentence’s words are in reverse order. For example, \\"Hello World\\" should become \\"World Hello\\". Example: If the input JSON file contains: ```json { \\"sentences\\": [ \\"Hello World\\", \\"Python is great\\" ] } ``` The output JSON file `reversed_sentences.json` should be: ```json { \\"sentences\\": [ \\"World Hello\\", \\"great is Python\\" ] } ```","solution":"import json def reverse_words(filename: str) -> None: Reads a JSON file containing sentences, reverses the words in each sentence, and writes the reversed sentences to a new JSON file. :param filename: The name of the input JSON file. # Read the input file with open(filename, \'r\') as file: data = json.load(file) # Reverse the words in each sentence reversed_sentences = [] for sentence in data[\'sentences\']: words = sentence.split() reversed_sentence = \' \'.join(words[::-1]) reversed_sentences.append(reversed_sentence) # Write the reversed sentences to a new file with open(\'reversed_sentences.json\', \'w\') as file: json.dump({\\"sentences\\": reversed_sentences}, file, indent=4)"},{"question":"In this problem, you are required to create a function named `generate_maze_image()` that generates a binary maze in a 2-dimensional NumPy array and displays this maze using the `matplotlib` library. The maze should be displayed with walls in black and paths in white. This exercise will help you to understand how to generate basic mazes and visualize them using NumPy and Matplotlib. Here are the steps you need to follow: 1. **Generate a Maze Array:** Create a 2D NumPy array (`maze`) representing the maze, where the boundaries and inner walls of the maze are marked with 1s (black pixels) and the navigable paths are marked with 0s (white pixels). Ensure that the maze always has an entrance and an exit. 2. **Display the Maze:** Use Matplotlib to display this maze where the walls are black and paths are white. **Function Name:** `generate_maze_image(size)` **Parameters:** - `size` (int): The size of the maze which will be a square (size x size). **Return:** None **Example Usage:** ```python generate_maze_image(25) ``` Here you need to use the `matplotlib.pyplot.imshow` API to display the maze. Each call to this function should generate a unique maze pattern, ensuring that the maze can be navigated from an entrance to an exit. You may use any algorithm of your choice to generate the maze, such as Depth-First Search (DFS) or Randomized Prim\'s algorithm. Make sure you read the provided documentation for these functions to understand how to use them correctly.","solution":"import numpy as np import matplotlib.pyplot as plt from numpy.random import randint def generate_maze_image(size): Generates a binary maze in a 2D NumPy array and displays it using Matplotlib. Parameters: - size (int): Size of the maze (size x size) Returns: - None maze = np.zeros((size, size), dtype=int) def add_walls(maze): for i in range(size): maze[0, i] = 1 maze[size - 1, i] = 1 maze[i, 0] = 1 maze[i, size - 1] = 1 def carve_passages(x, y, maze): directions = [(2, 0), (-2, 0), (0, 2), (0, -2)] np.random.shuffle(directions) for dx, dy in directions: nx, ny = x + dx, y + dy if 1 <= nx < size - 1 and 1 <= ny < size - 1 and maze[nx, ny] == 0: maze[nx, ny] = 1 maze[x + dx // 2, y + dy // 2] = 1 carve_passages(nx, ny, maze) maze[1, 1] = 1 # Starting point carve_passages(1, 1, maze) add_walls(maze) # Entrance and Exit maze[1, 0] = 0 # Entrance maze[size - 2, size - 1] = 0 # Exit plt.imshow(maze, cmap=\'binary\') plt.axis(\'off\') plt.show()"},{"question":"You are required to write a Python function named `matrix_multiplication` that multiplies two given matrices using list comprehensions. The matrices will be represented as nested lists, where each inner list corresponds to a row of the matrix. Your task is to implement this function to perform multiplication of the matrices accurately. # Function Specification ```python def matrix_multiplication(matrix_a: List[List[int]], matrix_b: List[List[int]]) -> List[List[int]]: Multiply two matrices using list comprehensions and return the resultant matrix. Parameters: matrix_a : List[List[int]] The first matrix to be multiplied. matrix_b : List[List[int]] The second matrix to be multiplied. Returns: List[List[int]] The resultant matrix after multiplication. ``` # Requirements and Constraints - Verify that the number of columns in `matrix_a` is equal to the number of rows in `matrix_b`. - Use nested list comprehensions to perform the matrix multiplication. - The function should handle any size of matrices as long as the multiplication is feasible. - Ensure the function works efficiently for typical sizes of matrices used in practice. # Example ```python >>> matrix_a = [ ... [1, 2, 3], ... [4, 5, 6] ... ] >>> matrix_b = [ ... [7, 8], ... [9, 10], ... [11, 12] ... ] >>> matrix_multiplication(matrix_a, matrix_b) [[58, 64], [139, 154]] >>> matrix_a = [ ... [1, 4], ... [2, 5], ... [3, 6] ... ] >>> matrix_b = [ ... [1, 2, 3], ... [4, 5, 6] ... ] >>> matrix_multiplication(matrix_a, matrix_b) [[17, 22, 27], [22, 29, 36], [27, 36, 45]] ``` # Hint - Use list comprehension to calculate each element of the resultant matrix by summing the products of corresponding elements from rows of `matrix_a` and columns of `matrix_b`.","solution":"from typing import List def matrix_multiplication(matrix_a: List[List[int]], matrix_b: List[List[int]]) -> List[List[int]]: Multiply two matrices using list comprehensions and return the resultant matrix. Parameters: matrix_a : List[List[int]] The first matrix to be multiplied. matrix_b : List[List[int]] The second matrix to be multiplied. Returns: List[List[int]] The resultant matrix after multiplication. num_rows_a = len(matrix_a) num_cols_a = len(matrix_a[0]) num_rows_b = len(matrix_b) num_cols_b = len(matrix_b[0]) # Check if multiplication is possible if num_cols_a != num_rows_b: raise ValueError(\\"Number of columns in matrix_a must be equal to number of rows in matrix_b.\\") result = [ [ sum(matrix_a[i][k] * matrix_b[k][j] for k in range(num_cols_a)) for j in range(num_cols_b) ] for i in range(num_rows_a) ] return result"},{"question":"You are tasked with analyzing a sequence of integers to detect patterns and generate useful metrics. Implement a function called `run_length_encoding` that performs run-length encoding (RLE) on a given list of integers. Run-length encoding is a simple form of data compression in which consecutive occurrences of the same value are stored as a single data value and count. The function `run_length_encoding` should accept one parameter: - `arr`: A one-dimensional list of integers representing the input sequence. The function must perform the following tasks: 1. Validate that the input is a non-empty list of integers. 2. Implement the run-length encoding algorithm to convert the input sequence into a list of tuples. Each tuple should consist of a value from the sequence followed by its count of consecutive occurrences. 3. Return the run-length encoded list of tuples. Keep in mind: - If the input list is empty or not a list of integers, the function should return an empty list. You can follow the template below: ```python def run_length_encoding(arr): if not isinstance(arr, list) or len(arr) == 0 or not all(isinstance(x, int) for x in arr): return [] rle = [] current_value = arr[0] current_count = 1 for i in range(1, len(arr)): if arr[i] == current_value: current_count += 1 else: rle.append((current_value, current_count)) current_value = arr[i] current_count = 1 # Append the last set of value-count pair rle.append((current_value, current_count)) return rle ``` # Examples: ```python # Example 1 arr = [1, 1, 2, 3, 3, 3, 4] result = run_length_encoding(arr) # Result: [(1, 2), (2, 1), (3, 3), (4, 1)] # Example 2 arr = [4, 4, 4, 4, 2, 2, 2, 3] result = run_length_encoding(arr) # Result: [(4, 4), (2, 3), (3, 1)] # Example 3 arr = [1] result = run_length_encoding(arr) # Result: [(1, 1)] ```","solution":"def run_length_encoding(arr): if not isinstance(arr, list) or len(arr) == 0 or not all(isinstance(x, int) for x in arr): return [] rle = [] current_value = arr[0] current_count = 1 for i in range(1, len(arr)): if arr[i] == current_value: current_count += 1 else: rle.append((current_value, current_count)) current_value = arr[i] current_count = 1 # Append the last set of value-count pair rle.append((current_value, current_count)) return rle"},{"question":"In this problem, you are required to implement a function that performs a matrix multiplication of two given 2-dimensional NumPy arrays. Matrix multiplication, also known as the dot product, is a fundamental operation in linear algebra with widespread applications in machine learning and data science. Given two NumPy arrays: 1. `A` - A 2D NumPy array of shape `(m, n)` 2. `B` - A 2D NumPy array of shape `(n, p)` Your task is to compute the matrix product of `A` and `B` using the following rules: - The number of columns in `A` must be equal to the number of rows in `B`. - The result will be a new matrix `C` with a shape of `(m, p)`. **Function Signature** ```python def matrix_multiply(A, B): pass ``` **Inputs:** - `A`: A 2D NumPy array of shape `(m, n)` - `B`: A 2D NumPy array of shape `(n, p)` **Output:** - Return a 2D NumPy array of shape `(m, p)` which is the result of the matrix multiplication of `A` and `B`. **Constraints:** 1. Ensure to use the NumPy library to perform matrix operations. 2. Utilize `numpy.dot` or `numpy.matmul` for matrix multiplication. **Example:** ```python import numpy as np A = np.array([[1, 2], [3, 4]]) B = np.array([[5, 6], [7, 8]]) print(matrix_multiply(A, B)) # Should output array([[19, 22], [43, 50]]) ``` **Note:** - The dimensions of matrices `A` and `B` will be such that matrix multiplication is possible. - You may assume that input arrays are well-formed and no validation for inputs is needed.","solution":"import numpy as np def matrix_multiply(A, B): Perform matrix multiplication of two 2D numpy arrays A and B. Parameters: A (numpy array): First matrix of shape (m, n) B (numpy array): Second matrix of shape (n, p) Returns: numpy array: Matrix product of A and B of shape (m, p) return np.dot(A, B)"},{"question":"You have been tasked with writing a Python function, `simplify_path()`, that simplifies a Unix-style absolute file path. This path may contain \'/\', \'.\', \'..\', and empty segments representing multiple consecutive slashes which should be treated as a single slash. **Function Definition:** ```python def simplify_path(path: str) -> str: pass ``` **Detailed Requirements:** 1. The function should take a single string argument, `path`, representing the absolute file path. 2. The function should return the simplified canonical path as a string. 3. The simplification rules are as follows: - Any \'.\' (current directory) or empty segments should be removed. - Any \'..\' (parent directory) indicates going back one directory (if not already at the root). - Multiple adjacent slashes \'/\' should be treated as a single slash \'/\'. - The result should always start with a single slash \'/\' and not end with a slash unless the resulting path is only a single slash (root). 4. Ensure no usage of global variables and all operations and changes are confined within the function. 5. Handle edge cases, such as empty input, redundant slashes, and proper traversal when \'..\' is encountered at the root level. **Examples:** ```python assert simplify_path(\\"/home/\\") == \\"/home\\" assert simplify_path(\\"/../\\") == \\"/\\" assert simplify_path(\\"/home//foo/\\") == \\"/home/foo\\" assert simplify_path(\\"/a/./b/../../c/\\") == \\"/c\\" assert simplify_path(\\"/a//b////c/d//././/..\\") == \\"/a/b/c\\" ``` Design the function in such a way that it iterates through each segment of the input path and uses a stack data structure to represent directory entries while applying the above simplification rules.","solution":"def simplify_path(path: str) -> str: Simplifies a given Unix-style absolute file path. Parameters: path (str): The absolute file path to simplify. Returns: str: The simplified canonical path. stack = [] # Split the path by slashes parts = path.split(\\"/\\") for part in parts: if part == \\"..\\": if stack: stack.pop() # Go back one directory if stack is not empty elif part == \\".\\" or part == \\"\\": continue # Ignore current directory and empty segments else: stack.append(part) # Add valid directory name to stack return \\"/\\" + \\"/\\".join(stack)"},{"question":"You are tasked with creating a log processing system. Each log entry is a dictionary where the key is a timestamp (as a string) in the format \\"YYYY-MM-DD HH:MM:SS\\" and the value is a message (string). Write a function called `processLogs(logs)` that processes a list of log entries and returns a list of logs grouped by the hour. # Example: Assume the input list `logs` is: ```python [ {\\"2023-10-01 10:15:30\\": \\"Log entry 1\\"}, {\\"2023-10-01 10:45:00\\": \\"Log entry 2\\"}, {\\"2023-10-01 11:00:15\\": \\"Log entry 3\\"}, {\\"2023-10-01 11:20:20\\": \\"Log entry 4\\"} ] ``` The function should return a dictionary where the keys are the hour of the log entries and the values are lists of messages that occurred in that hour: ```python { \\"2023-10-01 10:00:00\\": [\\"Log entry 1\\", \\"Log entry 2\\"], \\"2023-10-01 11:00:00\\": [\\"Log entry 3\\", \\"Log entry 4\\"] } ``` # Function Signature: ```python def processLogs(logs: list) -> dict: # your code here ``` # Requirements: - Ensure that the messages are grouped accurately by the hour. - The output dictionary keys should have their minutes and seconds set to \\"00:00\\" to represent the start of the hour. # Note: You can assume that the input list `logs` will always have valid timestamp strings, and the list will not be empty.","solution":"def processLogs(logs): from collections import defaultdict import datetime log_dict = defaultdict(list) for log in logs: for timestamp, message in log.items(): datetime_obj = datetime.datetime.strptime(timestamp, \\"%Y-%m-%d %H:%M:%S\\") hour_key = datetime_obj.strftime(\\"%Y-%m-%d %H:00:00\\") log_dict[hour_key].append(message) return dict(log_dict)"},{"question":"You are asked to design a function `findMostFrequent` that identifies the most frequently occurring element in a list of integers and returns it. In case of a tie, return the smallest element among those that occur most frequently. You need to focus on using efficient algorithms and ensure your function performs well on large inputs. Your function should: - Accept one input parameter: - `nums`: A list of integers. *Note*: The list may contain positive, negative, and zero integer values and can have a large number of elements. Your task is to: 1. Determine the frequency of each integer in the list. 2. Identify the integer that occurs the most frequently. 3. In case of a tie, return the smallest integer among those that have the highest frequency. The function should return the most frequent element according to the described rules. Here is a sample input for your reference: ```python nums = [1, 3, 2, 2, 1, 3, 3, 4] ``` For the above input, `3` occurs most frequently (3 times), so the function should return `3`. Another example input: ```python nums = [4, 4, 1, 2, 2, 3, 1, 3] ``` In this case, `1`, `2`, `3`, and `4` all occur twice. Among these, the smallest element is `1`, so the function should return `1`.","solution":"def findMostFrequent(nums): from collections import Counter # Count the frequency of each number in the list freq = Counter(nums) # Find the maximum frequency max_freq = max(freq.values()) # Find all numbers with the maximum frequency most_frequent_numbers = [num for num, count in freq.items() if count == max_freq] # Return the smallest number among those with the maximum frequency return min(most_frequent_numbers)"},{"question":"You are required to write a function named `analyze_list` that performs specific computations on a given list of integers and outputs the results. The function shall perform the following actions: 1. Calculate and print the sum of all the integers in the list. 2. Determine and print the largest integer in the list. 3. Identify and print the count of even numbers in the list. The function should handle edge cases, such as an empty list. # Input - The function takes one argument: 1. `nums` (list of integers): A list of integers to be analyzed. # Output - The function should print exactly three lines: 1. The sum of all integers in the list. 2. The largest integer in the list. 3. The count of even numbers in the list. # Example Usage ```python analyze_list([10, 23, 35, 2, 8]) ``` Expected Output: ``` Sum: 78 Largest: 35 Evens Count: 3 ``` # Example Usage ```python analyze_list([]) ``` Expected Output: ``` Sum: 0 Largest: None Evens Count: 0 ``` # Implementation Details 1. If the list is empty, the sum should be 0, the largest integer should be `None`, and the count of even numbers should be 0. 2. Use built-in functions where appropriate (`sum()`, `max()`) to achieve the desired results efficiently. 3. Use a list comprehension or similar approach to count the even numbers. ```python def analyze_list(nums): if not nums: print(\\"Sum: 0\\") print(\\"Largest: None\\") print(\\"Evens Count: 0\\") return total_sum = sum(nums) largest = max(nums) evens_count = sum(1 for num in nums if num % 2 == 0) print(f\\"Sum: {total_sum}\\") print(f\\"Largest: {largest}\\") print(f\\"Evens Count: {evens_count}\\") # Example usage analyze_list([10, 23, 35, 2, 8]) analyze_list([]) ```","solution":"def analyze_list(nums): if not nums: print(\\"Sum: 0\\") print(\\"Largest: None\\") print(\\"Evens Count: 0\\") return total_sum = sum(nums) largest = max(nums) evens_count = sum(1 for num in nums if num % 2 == 0) print(f\\"Sum: {total_sum}\\") print(f\\"Largest: {largest}\\") print(f\\"Evens Count: {evens_count}\\")"},{"question":"This function takes a string containing a mathematical expression involving basic arithmetic operations (+, -, *, /) and computes the result while respecting the precedence of the operators. You need to implement a function to parse and evaluate the expression provided as a string. The function should output: float: The result of the evaluated mathematical expression. You should write self-contained code starting with: ``` def evaluate_expression(expression): ``` Example: ``` result = evaluate_expression(\\"3 + 5 * 2 / (7 - 3)\\") print(result) # Output should be 5.5 ```","solution":"def evaluate_expression(expression): This function takes a string containing a mathematical expression involving basic arithmetic operations (+, -, *, /) and computes the result while respecting the precedence of the operators. try: # Use Python\'s eval function to evaluate the expression. # It is assumed that the input is a valid arithmetic expression. result = eval(expression) return float(result) except (SyntaxError, ZeroDivisionError, TypeError, NameError): raise ValueError(\\"Invalid input expression.\\")"},{"question":"In this problem, you will create a function `group_by_criteria` to group elements from a list based on a provided criterion function. The function will receive a list and a criterion function, and it should return a dictionary where the keys are the criterion values, and the corresponding values are lists of elements meeting that criterion. # Function Specification - **Function Name:** `group_by_criteria` - **Parameters:** - `elements`: a list of elements to be grouped. - `criterion`: a function that takes an element and returns a value (the criterion for grouping). - **Returns:** A dictionary where keys are the unique values returned by the criterion function, and values are lists of elements corresponding to each key. # Example ```python def group_by_criteria(elements, criterion): result = {} for element in elements: key = criterion(element) if key not in result: result[key] = [] result[key].append(element) return result # Example usage elements = [\'apple\', \'banana\', \'avocado\', \'cherry\', \'blueberry\'] criterion = lambda x: x[0] # Group by the first letter of each word result = group_by_criteria(elements, criterion) print(result) # Output should be {\'a\': [\'apple\', \'avocado\'], \'b\': [\'banana\', \'blueberry\'], \'c\': [\'cherry\']} ``` # Constraints - The input list `elements` can contain any hashable elements. - The `criterion` function will always return a hashable value.","solution":"def group_by_criteria(elements, criterion): Groups elements based on a criterion function. Parameters: elements (list): A list of elements to be grouped. criterion (function): A function that takes an element and returns a value (the criterion for grouping). Returns: dict: A dictionary where keys are criterion values and values are lists of elements meeting that criterion. result = {} for element in elements: key = criterion(element) if key not in result: result[key] = [] result[key].append(element) return result"},{"question":"You are asked to implement a Python function named `generate_statistics_report` that processes data from a given CSV file and outputs basic statistical measures for each numeric column in the file. The function should: 1. Read the provided CSV file into a pandas DataFrame. 2. Calculate the mean, median, and standard deviation for each numeric column. 3. Save these statistics in a new CSV file named `statistics_report.csv` in the same directory as the input file. 4. The generated CSV should have columns `Column Name`, `Mean`, `Median`, and `Standard Deviation` to store the respective statistics for each numeric column. # Function Specification: - **Function Name:** `generate_statistics_report` - **Parameters:** - `csv_filename` (str): The filename of the input CSV. # Example Usage: ```python generate_statistics_report(\\"data.csv\\") ``` This should read the `data.csv` file, compute the statistics, and save them in a file named `statistics_report.csv` in the same directory. # Hints: 1. Use the pandas library to read the CSV file and to perform statistical calculations. 2. Use `df.describe()` to help obtain statistical summaries, and customize it to match the requirements. 3. Handle cases where the input CSV may not have any numeric columns appropriately, e.g., by generating an empty report or a message indicating no numeric data was found.","solution":"import pandas as pd def generate_statistics_report(csv_filename): Generates a statistical report for each numeric column in the provided CSV file. The report includes mean, median, and standard deviation for each numeric column. The resulting statistics are saved in \'statistics_report.csv\' in the same directory as the input file. :param csv_filename: The filename of the input CSV. # Read the CSV file into a DataFrame df = pd.read_csv(csv_filename) # Select numeric columns numeric_columns = df.select_dtypes(include=\'number\').columns # If no numeric columns are found, create an empty DataFrame with appropriate columns if len(numeric_columns) == 0: stats_df = pd.DataFrame(columns=[\'Column Name\', \'Mean\', \'Median\', \'Standard Deviation\']) else: # Compute mean, median, and standard deviation for each numeric column stats = { \'Column Name\': [], \'Mean\': [], \'Median\': [], \'Standard Deviation\': [] } for col in numeric_columns: stats[\'Column Name\'].append(col) stats[\'Mean\'].append(df[col].mean()) stats[\'Median\'].append(df[col].median()) stats[\'Standard Deviation\'].append(df[col].std()) # Create a DataFrame for the statistics stats_df = pd.DataFrame(stats) # Save the statistics to a new CSV file stats_df.to_csv(\'statistics_report.csv\', index=False)"},{"question":"You need to write a Python function named `unique_characters` that determines if a given string has all unique characters. This problem is designed to help you understand basic string manipulation and use of sets in Python. Here\'s a brief description of the approach: - Convert the string into a set of characters. - Compare the length of this set to the length of the original string. If a string has all unique characters, the length of the set of its characters should be the same as the length of the string. If there are any duplicates, the set will be smaller. Given the above context, implement the `unique_characters` function to: 1. Take in one input, `input_str`, which is a string. 2. Determine if the string has all unique characters. 3. Return `True` if all characters are unique, else return `False`. **Function Signature:** ```python def unique_characters(input_str: str) -> bool: pass ``` **Example:** ```python print(unique_characters(\\"apple\\")) # Expected output: False print(unique_characters(\\"orange\\")) # Expected output: True ``` Ensure the function utilizes the set data structure to perform the uniqueness check efficiently.","solution":"def unique_characters(input_str: str) -> bool: Determines if a given string has all unique characters. Parameters: input_str (str): The string to be checked for unique characters. Returns: bool: True if the string has all unique characters, False otherwise. return len(set(input_str)) == len(input_str)"},{"question":"You are given a class `Node` representing a node in a binary tree and a function `longest_leaf_to_root_path` that calculates the length of the longest path from any leaf to the root in the tree. The input to the function is the root node of the binary tree. Your task is to complete the function `longest_leaf_to_root_path` by implementing the logic to find the longest path from any leaf to the root. The function should return an integer representing the length of this path. Here is the `Node` class and the function template to complete: ```python class Node: def __init__(self, key): self.data = key self.left = None self.right = None def longest_leaf_to_root_path(root): if root is None: return 0 left_path_length = longest_leaf_to_root_path(root.left) right_path_length = longest_leaf_to_root_path(root.right) return max(left_path_length, right_path_length) + 1 ``` Function Explanation: 1. `Node` class has been provided for constructing tree nodes. 2. `longest_leaf_to_root_path` function should take the root node of the binary tree as input. 3. The function should recursively calculate the length of the longest path from any leaf to the root. 4. It should return an integer representing the length of this path. Complete the `longest_leaf_to_root_path` function using the provided template and ensure it correctly finds the longest path length in the binary tree.","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def longest_leaf_to_root_path(root): if root is None: return 0 left_path_length = longest_leaf_to_root_path(root.left) right_path_length = longest_leaf_to_root_path(root.right) return max(left_path_length, right_path_length) + 1"},{"question":"You are given a task to analyze website traffic logging data from a comma-separated values (CSV) file. Each row in this file represents a user visit session to a particular webpage. The columns specify the user ID, the webpage URL, date and time of visit, and the time spent on the page in seconds. Your goal is to write a function called `calculate_page_visit_metrics` that performs the following steps: 1. Reads the CSV file. 2. Processes the file to determine the number of unique visitors, total visits, and the average time spent per visit for each webpage. 3. Outputs a pandas DataFrame that consists of the following columns: - `webpage_url`: Unique identifier for the webpage. - `unique_visitors`: The number of distinct users who visited the webpage. - `total_visits`: The total number of visits to the webpage. - `average_time_spent`: The average time spent (in seconds) per visit on the webpage calculated as the total time spent on the page divided by the total number of visits. Here\'s some additional information: - The input file path is supplied as an argument to the function. - Assume the columns in the CSV file are named `user_id`, `webpage_url`, `visit_datetime`, and `time_spent` in that order. - Handle cases where there can be missing or corrupted data gracefully without causing runtime errors. ```python def calculate_page_visit_metrics(file_path: str) -> pd.DataFrame: Calculates the unique visitors, total visits, and average time spent for each webpage. Parameters: file_path (str): The path to the CSV file containing webpage visit log data. Returns: pd.DataFrame: DataFrame with columns `webpage_url`, `unique_visitors`, `total_visits`, and `average_time_spent`. pass ```","solution":"import pandas as pd def calculate_page_visit_metrics(file_path: str) -> pd.DataFrame: Calculates the unique visitors, total visits, and average time spent for each webpage. Parameters: file_path (str): The path to the CSV file containing webpage visit log data. Returns: pd.DataFrame: DataFrame with columns `webpage_url`, `unique_visitors`, `total_visits`, and `average_time_spent`. # Read the CSV file df = pd.read_csv(file_path) # Drop rows with any missing or corrupted data df = df.dropna() # Group by webpage_url to calculate necessary metrics grouped = df.groupby(\'webpage_url\').agg({ \'user_id\': pd.Series.nunique, # Number of unique users \'visit_datetime\': \'count\', # Total number of visits \'time_spent\': \'sum\' # Total time spent }).reset_index() # Rename columns for clarity grouped.columns = [\'webpage_url\', \'unique_visitors\', \'total_visits\', \'total_time_spent\'] # Calculate the average time spent per visit grouped[\'average_time_spent\'] = grouped[\'total_time_spent\'] / grouped[\'total_visits\'] # Drop the total_time_spent column as it\'s not needed in the final output grouped = grouped.drop(columns=[\'total_time_spent\']) return grouped"},{"question":"**Minimize Shipping Cost with Volume Constraints** In this problem, you will implement a function called `minimize_shipping_cost` which aims to determine the minimal shipping cost for transporting a set of packages using a fleet of trucks. Each truck has a maximum volume capacity and a fixed shipping cost associated with it. Function Signature ```python def minimize_shipping_cost(volumes: List[int], costs: List[int], packages: List[int]) -> int: pass ``` Parameters - `volumes`: A list of integers representing the maximum volume capacity of each truck. - `costs`: A list of integers representing the fixed shipping cost associated with each truck. - `packages`: A list of integers representing the volume of each package to be shipped. Returns The function should return an integer representing the minimal total shipping cost required to ship all packages. Constraints 1. `volumes`, `costs`, and `packages` will have lengths between 1 and 1000. 2. The volume of a package is guaranteed not to exceed the maximum volume capacity of any truck. 3. The total volume of packages to be shipped will not exceed the sum of all truck volumes available. Procedure 1. Sort the packages in descending order to prioritize larger packages. 2. For each package, find the truck which can accommodate it with the minimum increase in cost. 3. Sum the total shipping cost after assigning all packages. Example Suppose you have the following inputs: ```python volumes = [100, 200, 300] costs = [500, 800, 1000] packages = [50, 70, 120, 150, 80, 90] ``` After calling `minimize_shipping_cost(volumes, costs, packages)`, the function should return: ```python 2500 ``` Explanation: - You can use the first truck for packages [50, 70, 80] (cost = 500). - The second truck for packages [120, 90] (cost = 800). - The third truck for the package [150] (cost = 1000). Hence, the minimal total shipping cost is 500 + 800 + 1000 = 2300.","solution":"from typing import List def minimize_shipping_cost(volumes: List[int], costs: List[int], packages: List[int]) -> int: # Create a list of trucks with their volumes and costs trucks = sorted(zip(volumes, costs), key=lambda x: x[1]) # Sort packages in descending order to prioritize larger packages packages.sort(reverse=True) total_cost = 0 used_trucks = [] for package in packages: for i in range(len(trucks)): truck_volume, truck_cost = trucks[i] if truck_volume >= package: trucks[i] = (truck_volume - package, truck_cost) # Reduce available volume in truck if i not in used_trucks: used_trucks.append(i) total_cost += truck_cost break return total_cost"},{"question":"You need to write a Python function named `count_triangles` that counts the number of valid triangles that can be formed from a given list of integers, where each integer represents the length of a side. A triangle is valid if the sum of its two sides is greater than the third side. Requirements: 1. The function should be named `count_triangles`. 2. The parameters to the function: - `sides`: a list of positive integers where each integer represents the length of a side (List[int]). 3. The function should return an integer representing the number of valid triangles that can be formed. The function should adhere to the following method signature: ```python def count_triangles(sides): # your code here ``` # Example: ```python count_triangles([4, 6, 3, 7]) # should return 3 because the valid triangles are (3, 4, 6), (3, 6, 7), and (4, 6, 7) count_triangles([10, 21, 22, 100, 101, 200, 300]) # should return 6 ```","solution":"def count_triangles(sides): sides.sort() n = len(sides) count = 0 for i in range(n-2): k = i + 2 for j in range(i+1, n-1): while k < n and sides[i] + sides[j] > sides[k]: k += 1 count += k - j - 1 return count"},{"question":"You are required to write a function named `invert_string_dict` that takes a dictionary where keys are strings and values are lists of strings, and returns a new dictionary where each string from the lists becomes a key, and the corresponding value is a list of original keys from the input dictionary that contained that string. # Function Signature: ```python def invert_string_dict(input_dict: dict) -> dict: pass ``` # Input: - `input_dict`: A dictionary where keys are strings and values are lists of strings. # Output: - A dictionary where each key is a string from any of the lists in the input dictionary, and each value is a list of strings containing all original keys from the input dictionary that had the string in their list. # Constraints: - The input dictionary will not have any duplicate values within the lists. - The function should handle at least up to 10,000 keys in the input dictionary with lists containing up to 100 elements each. # Example: ```python input_dict = { \\"animal\\": [\\"cat\\", \\"dog\\"], \\"mammal\\": [\\"dog\\", \\"whale\\"], \\"bird\\": [\\"sparrow\\", \\"eagle\\"], } output_dict = invert_string_dict(input_dict) ``` Output: ```python { \\"cat\\": [\\"animal\\"], \\"dog\\": [\\"animal\\", \\"mammal\\"], \\"whale\\": [\\"mammal\\"], \\"sparrow\\": [\\"bird\\"], \\"eagle\\": [\\"bird\\"], } ``` # Additional Notes: 1. The order of the lists in the output dictionary does not matter. 2. Ensure that your function handles an empty dictionary input gracefully, returning an empty dictionary. 3. Use efficient data structures for optimal performance with large inputs.","solution":"def invert_string_dict(input_dict): Inverts a dictionary where keys are strings and values are lists of strings. Args: - input_dict: Dictionary where keys are strings and values are lists of strings. Returns: - Dictionary where each string from the lists in the input becomes a key, and the corresponding value is a list of original keys from the input dictionary that contained that string. inverted_dict = {} for key, values in input_dict.items(): for value in values: if value not in inverted_dict: inverted_dict[value] = [] inverted_dict[value].append(key) return inverted_dict"},{"question":"In this problem, you need to write a Python function named `compress_string` that will compress a given string by replacing consecutive occurrences of the same character with the character followed by the number of occurrences. If the \\"compressed\\" string is longer than the original string, the function should return the original string. # Function Description **compress_string(s)**: - **Parameters**: - `s` (str): A non-empty string which may contain any visible characters. - **Returns**: - `str`: The compressed version of the string if it is shorter than the original, otherwise the original string. - **Behavior**: - Compresses the string by converting consecutive repeated characters into the character followed by the count of its occurrences. - Returns the compressed string if its length is shorter than the original, otherwise returns the original string. # Example: ```python compress_string(\'aabcccccaaa\') # Returns \'a2b1c5a3\' compress_string(\'abcdef\') # Returns \'abcdef\' (as compression results in same length \'a1b1c1d1e1f1\') ``` **Notes**: - The function should handle strings with all types of visible characters including punctuation and spaces. - Assume that the input string is always non-empty. # Constraints - The input string will have a length between 1 and 1000 characters. **You must not use any additional libraries or modules, such as regex, for this problem.**","solution":"def compress_string(s): Compresses the string by converting consecutive repeated characters into the character followed by the count of its occurrences. Returns the compressed string if its length is shorter than the original, otherwise returns the original string. compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 compressed.append(s[-1]) compressed.append(str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"You need to implement a function `handle_user_input(user_thread, input_data)` that processes strings received from a chat application. The function should perform the following tasks: 1. Decode the incoming byte data into a UTF-8 string. 2. Parse the string to identify a unique user input type. The string will be prefixed by the type followed by a space (` `). 3. For an input type of `\\"send\\"`, format and store the user\'s message with the following specifications: - Use the address of the user connection. - Include the current date and time in the format `YYYY-MM-DD HH:MM:SS`. - Store the message in a global list `chat_history` as a dictionary with keys `user`, `timestamp`, and `message`. 4. For an input type of `\\"command\\"`, pass the remaining string (after removing the type prefix) to a helper function `execute_user_command(user_thread, command)` (consider this function already implemented and do not modify it). **Function Signature:** ```python def handle_user_input(user_thread, input_data: bytes) -> None: ``` **Global Variables:** - `chat_history`: List to store the chat message dictionaries. **Example Usage:** ```python user_thread.addr = \\"10.0.0.1\\" input_data = b\'send Hello, how are you?\' handle_user_input(user_thread, input_data) ``` When executed, the function should correctly format and store the message into the `chat_history` list with an appropriate timestamp and user connection address. **Example Implementation:** ```python import time chat_history = [] def handle_user_input(user_thread, input_data: bytes) -> None: decoded_data = input_data.decode(\'utf-8\') input_type, content = decoded_data.split(\' \', 1) if input_type == \'send\': timestamp = time.strftime(\\"%Y-%m-%d %H:%M:%S\\", time.localtime()) message_entry = { \'user\': user_thread.addr, \'timestamp\': timestamp, \'message\': content } chat_history.append(message_entry) elif input_type == \'command\': execute_user_command(user_thread, content) ``` Focus on correctly implementing the decoding, message formatting, and appropriate handling for user inputs based on the type.","solution":"import time chat_history = [] def execute_user_command(user_thread, command): # Placeholder implementation for execute_user_command pass def handle_user_input(user_thread, input_data: bytes) -> None: decoded_data = input_data.decode(\'utf-8\') input_type, content = decoded_data.split(\' \', 1) if input_type == \'send\': timestamp = time.strftime(\\"%Y-%m-%d %H:%M:%S\\", time.localtime()) message_entry = { \'user\': user_thread.addr, \'timestamp\': timestamp, \'message\': content } chat_history.append(message_entry) elif input_type == \'command\': execute_user_command(user_thread, content) else: raise ValueError(f\\"Unknown input type: {input_type}\\")"},{"question":"You are asked to write a function named `validate_html_tags` that checks if all HTML-like tags in a given input string are properly nested and balanced. Here are the details: 1. **Parameters:** - `html_str` (str): A string containing HTML-like tags. 2. **Tag Format:** The tags in the string have the format `<tag>` for opening tags and `</tag>` for closing tags. Tags do not contain attributes, and the tag names consist only of alphabetic characters. 3. **Function Requirements:** - The function should return `True` if all tags are correctly nested and balanced, and `False` otherwise. - Consider only the tags in the format described (e.g., `<div>`, `</div>`, etc.), ignoring any other content. 4. **Examples:** - `validate_html_tags(\\"<div><p></p></div>\\")` should return `True`. - `validate_html_tags(\\"<div><p></div></p>\\")` should return `False` because the tags are not properly nested. - `validate_html_tags(\\"<div><p></p>\\")` should return `False` because the closing `</div>` tag is missing. - `validate_html_tags(\\"Hello <b>world</b>!\\")` should return `True`. Implement the function `validate_html_tags` as described above.","solution":"def validate_html_tags(html_str): Validates if the given HTML-like tags in the input string are properly nested and balanced. Args: html_str (str): A string containing HTML-like tags. Returns: bool: True if the tags are properly nested and balanced, False otherwise. import re tag_re = re.compile(r\'</?([a-zA-Z]+)>\') stack = [] for match in tag_re.finditer(html_str): tag = match.group(0) tag_name = match.group(1) if tag.startswith(\'</\'): # It\'s a closing tag if not stack or stack[-1] != tag_name: return False stack.pop() else: # It\'s an opening tag stack.append(tag_name) return not stack"},{"question":"You are given a list of text documents and are required to implement a function that identifies the most frequently occurring word in each document. The function should also return the frequency count of that word. Ignore punctuation and case sensitivity when finding the most frequent word. **Function Name:** `most_frequent_word` **Parameters:** 1. `documents`: A list of strings, where each string represents a text document. **Returns:** - A list of tuples, where each tuple contains two elements: - The most frequent word in the document. - The frequency count of that word. **Instructions:** 1. Define a helper function to preprocess the text by removing punctuation and converting it to lowercase. 2. Initialize an empty list to store the result tuples. 3. Iterate through each document in the `documents` list. 4. For each document: - Preprocess the text by removing punctuation and converting it to lowercase. - Split the text into individual words. - Use a dictionary to count the frequency of each word. - Identify the most frequent word and its frequency count. - Add the word and its frequency count as a tuple to the results list. 5. Return the results list. Here’s a template to get you started: ```python import string from collections import Counter def preprocess_text(text): Preprocess the text by removing punctuation and converting to lowercase. Parameters: text (str): The text to preprocess. Returns: str: The preprocessed text. text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) return text def most_frequent_word(documents): Identify the most frequent word in each document and its frequency count. Parameters: documents (list of str): List of text documents. Returns: list of tuples: List of tuples with the most frequent word and its count for each document. results = [] for doc in documents: processed_doc = preprocess_text(doc) words = processed_doc.split() word_counts = Counter(words) most_common_word, frequency = word_counts.most_common(1)[0] results.append((most_common_word, frequency)) return results ```","solution":"import string from collections import Counter def preprocess_text(text): Preprocess the text by removing punctuation and converting to lowercase. Parameters: text (str): The text to preprocess. Returns: str: The preprocessed text. text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) return text def most_frequent_word(documents): Identify the most frequent word in each document and its frequency count. Parameters: documents (list of str): List of text documents. Returns: list of tuples: List of tuples with the most frequent word and its count for each document. results = [] for doc in documents: processed_doc = preprocess_text(doc) words = processed_doc.split() word_counts = Counter(words) most_common_word, frequency = word_counts.most_common(1)[0] results.append((most_common_word, frequency)) return results"},{"question":"Imagine you are developing a simplified version of a text editor with basic word processing capabilities. One of the features you\'d like to implement is word frequency analysis. Given a block of text, your task is to write a function, `word_frequency`, that computes the frequency of each word in the text and returns a dictionary where the keys are the words and the values are the counts of each word. # Function Signature ```python def word_frequency(text: str) -> dict: ``` # Input - `text` (str): A string representing a block of text. The text can include punctuation and various capitalizations. # Output - `dict`: A dictionary where each key is a word (in lowercase, stripped of punctuation) and the corresponding value is the count of that word. # Example ```python text = \\"Hello, world! Hello, Python. Hello, Code.\\" word_frequency(text) # Output: {\'hello\': 3, \'world\': 1, \'python\': 1, \'code\': 1} ``` # Requirements - Convert all words to lowercase to ensure the frequency count is case-insensitive. - Strip punctuation from the words. - Ensure the output dictionary contains the correct word counts. # Constraints - The input text will contain between 1 and 10,000 characters. - The text will consist of English words and common punctuation marks only (e.g., commas, periods, exclamation marks, etc.).","solution":"import re from collections import defaultdict def word_frequency(text: str) -> dict: Computes the frequency of each word in the given text. Words are considered case-insensitive and punctuation-free. :param text: str - A block of text. :return: dict - A dictionary where the keys are words and the values are their counts. # Convert text to lowercase text = text.lower() # Use regex to replace non-word characters with spaces text = re.sub(r\'[^ws]\', \' \', text) # Split text into words words = text.split() # Create a dictionary to keep count of words word_count = defaultdict(int) for word in words: word_count[word] += 1 return dict(word_count)"},{"question":"You need to implement a function named `find_most_frequent_words` that takes a string of text as input and returns the most frequently occurring words in the text. The function should return a list of tuples where each tuple contains a word and its frequency count, sorted by the frequency in descending order. In case of a tie, the words should be sorted alphabetically. The function signature should be: ```python def find_most_frequent_words(text: str) -> list: ``` # Detailed Requirements: 1. **Function Input**: - `text`: A string of text that may include multiple sentences, punctuations, and mixed case words. 2. **Function Output**: - A list of tuples where each tuple contains two elements: - A word (string) in lowercase. - An integer representing the frequency of that word in the input text. - The list should be sorted: - Primarily by the frequency in descending order. - Secondarily by the word in alphabetical order. 3. **Behavior**: - Convert all words to lowercase before counting. - Ignore punctuation and special characters. - Split the text into words based on whitespace and punctuation. - Calculate the frequency of each word. - Sort the words primarily by frequency and secondarily by alphabetical order if frequencies match. # Example Usage: ```python text = \\"The quick brown fox jumps over the lazy dog. The dog was not amused.\\" result = find_most_frequent_words(text) print(result) ``` **Output**: ``` [(\'the\', 3), (\'dog\', 2), (\'was\', 1), (\'not\', 1), (\'quick\', 1), (\'lazy\', 1), (\'jumps\', 1), (\'fox\', 1), (\'brown\', 1), (\'amused\', 1), (\'over\', 1)] ``` # Constraints: - Ignore case when counting word frequency. - Consider words to be sequences of alphanumeric characters (`a-z`, `A-Z`, `0-9`) separated by any non-alphanumeric character. - The function should correctly handle texts with no words or varying cases.","solution":"import re from collections import Counter def find_most_frequent_words(text: str) -> list: # Convert text to lowercase text = text.lower() # Use regex to find words words = re.findall(r\'bw+b\', text) # Count the frequency of each word word_counts = Counter(words) # Sort the words based on frequency (descending) and alphabetically most_frequent_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) return most_frequent_words"},{"question":"In this problem, you are required to write a function named `plot_feature_importance` that creates a bar plot displaying the feature importances from a trained machine learning classifier. The input will be a list of feature names and their corresponding importance scores. # Function Specification - **Function Name**: `plot_feature_importance` - **Parameters**: - `features`: A list of strings representing the feature names. - `importances`: A list of floats representing the feature importance scores. - **Return**: - `fig`: A bar plot (using Matplotlib or Seaborn) depicting the feature importances. **Requirements**: - Use Matplotlib or Seaborn to create the bar plot. - The x-axis should represent the feature names. - The y-axis should represent the importance scores. - The plot should have the title \\"Feature Importances\\". - The bars should be sorted in descending order of importance scores. # Example DataFrame: Below is a sample representation of feature importance data: ```python features = [\'Feature1\', \'Feature2\', \'Feature3\', \'Feature4\'] importances = [0.4, 0.1, 0.35, 0.15] ``` # Sample Function Call: ```python fig = plot_feature_importance(features, importances) ``` The function will generate a bar plot for the given feature importances. # Constraints: 1. Ensure the feature names and their importance scores are properly aligned. 2. Sort the bars in descending order of importance scores. 3. Label the axes and the plot title as specified. This problem tests your ability to visualize data, specifically feature importances, through the use of plotting libraries in Python.","solution":"import matplotlib.pyplot as plt import pandas as pd def plot_feature_importance(features, importances): Creates a bar plot displaying the feature importances. Parameters: features (list of str): List of feature names. importances (list of float): List of importance scores corresponding to the features. Returns: fig: The matplotlib figure object depicting the bar plot of feature importances. # Create a DataFrame to store features and their importances df = pd.DataFrame({\'Features\': features, \'Importances\': importances}) # Sort the DataFrame by importances in descending order df = df.sort_values(by=\'Importances\', ascending=False) # Create the plot fig, ax = plt.subplots() ax.bar(df[\'Features\'], df[\'Importances\']) ax.set_xlabel(\'Features\') ax.set_ylabel(\'Importance Scores\') ax.set_title(\'Feature Importances\') ax.set_xticklabels(df[\'Features\'], rotation=45, ha=\'right\') plt.tight_layout() return fig"},{"question":"Topic: Polynomial Roots Finder In numerical methods, finding roots of polynomials is a fundamental problem. A root of a polynomial is a value for which the polynomial evaluates to zero. In this problem, you will implement a function named `find_polynomial_roots` using the NumPy library to compute the roots of a given polynomial. A polynomial of degree `n` can be represented as: [ P(x) = a_n cdot x^n + a_{n-1} cdot x^{n-1} + ldots + a_1 cdot x + a_0 ] where ( a_n, a_{n-1}, ldots, a_0 ) are the polynomial coefficients. **Function Signature:** ```python def find_polynomial_roots(coefficients) -> np.ndarray: ... ``` **Parameters:** - `coefficients` (List[float]): A list of coefficients (a_n, a_{n-1}, ldots, a_1, a_0) of the polynomial in descending order of powers of `x`. **Returns:** - `np.ndarray`: An array of the roots (real or complex) of the polynomial. **Requirements:** - You must use `numpy.roots` for calculating the roots. **Example:** ```python r --> find_polynomial_roots([1, 0, -4]) # Expected Output r: array([ 2., -2.]) ``` Another Example: ```python r --> find_polynomial_roots([1, 0, 0, -1]) # Expected Output r: array([ 1. +0.j , -0.5 +0.8660254j, -0.5 -0.8660254j]) ```","solution":"import numpy as np def find_polynomial_roots(coefficients): Finds the roots of a polynomial with given coefficients using numpy.roots. Parameters: coefficients (List[float]): A list of coefficients [a_n, a_n-1, ..., a_1, a_0] in descending order. Returns: np.ndarray: Array of the roots (real or complex) of the polynomial. return np.roots(coefficients)"},{"question":"You are tasked with writing a function that simulates a simple crossover mechanism in a genetic algorithm. Specifically, you will be dealing with a population of individuals, where each individual is represented as a list of genes, and each gene is an integer. The crossover mechanism will exchange segments of genetic information between two parent individuals to create offspring. # Function Specification - **Function Name**: `crossover` - **Input Parameters**: 1. `parent1`: a list of integers representing the genes of the first parent individual. 2. `parent2`: a list of integers representing the genes of the second parent individual. 3. `pc`: a floating-point number representing the crossover probability. # Output The function will return a tuple of two lists, each representing an offspring. # Requirements 1. Generate a random number between 0 and 1 using the `random.random()` function from the `random` module. 2. If the generated random number is less than or equal to the crossover probability (`pc`), perform the following steps: - Select a random crossover point that is within the range of gene indices. - Swap the genetic material between the two parents at the selected point to create two offspring. 3. If the generated random number is greater than the crossover probability, the offspring are exact copies of the parents. # Example Given the following parents and crossover probability: ```python parent1 = [1, 3, 5, 7, 9] parent2 = [2, 4, 6, 8, 0] crossover_prob = 0.7 ``` A possible pair of offspring could be: ```python offspring1 = [1, 3, 5, 8, 0] offspring2 = [2, 4, 6, 7, 9] ``` # Notes - You must use `random.random()` to generate the random number for comparing with the crossover probability. - Use `random.randint(a, b)` to select a random crossover point. - Ensure that your code handles general cases and does not rely on the specific example provided. - Assume that `parent1` and `parent2` are of the same length and contain at least two genes each. # Additional Requirements - The crossover point must not be the very first or very last index of the genes list.","solution":"import random def crossover(parent1, parent2, pc): Perform crossover between two parents to produce two offspring based on crossover probability. :param parent1: List[int], genes of the first parent :param parent2: List[int], genes of the second parent :param pc: float, crossover probability :return: Tuple[List[int], List[int]], two offspring # Generate a random number for crossover decision if random.random() <= pc: # Perform crossover # Select a random crossover point (not the very first or very last index) crossover_point = random.randint(1, len(parent1) - 2) # Create offspring by swapping genetic material at the crossover point offspring1 = parent1[:crossover_point] + parent2[crossover_point:] offspring2 = parent2[:crossover_point] + parent1[crossover_point:] else: # No crossover; return exact copies of the parents offspring1, offspring2 = parent1[:], parent2[:] return offspring1, offspring2"},{"question":"You are given a dataset stored in a DataFrame `df` that contains information about different customers\' purchases. The DataFrame includes a column `Item Price` which lists the price of each item purchased. Your task is to write a function named `price_stats` that computes and displays the statistical characteristics of the item prices. Specifically, the function should: 1. Calculate and print the minimum item price. 2. Calculate and print the maximum item price. 3. Calculate and print the mean item price. 4. Calculate and print the median item price. 5. Print the time taken to perform these calculations. Make sure to use the `time.time()` function from the `time` library to measure the duration of the function. The `time.time()` function returns the current time in seconds since the Epoch as a floating point number. Here is a code template to get you started: ```python import pandas as pd import time def price_stats(df): Displays statistical characteristics of the item prices. # Your implementation here # Example usage df = pd.DataFrame({\'Item Price\': [10.99, 23.50, 5.75, 99.95, 1.25, 3.50, 45.00, 60.00]}) price_stats(df) ``` # Additional Information: - The `Item Price` values are in a floating point number format. - Utilize pandas library for data manipulation. - Use the `time.time()` library to measure the performance of the function.","solution":"import pandas as pd import time def price_stats(df): Displays statistical characteristics of the item prices and performance time. start_time = time.time() min_price = df[\'Item Price\'].min() max_price = df[\'Item Price\'].max() mean_price = df[\'Item Price\'].mean() median_price = df[\'Item Price\'].median() end_time = time.time() duration = end_time - start_time print(f\\"Minimum Item Price: {min_price}\\") print(f\\"Maximum Item Price: {max_price}\\") print(f\\"Mean Item Price: {mean_price}\\") print(f\\"Median Item Price: {median_price}\\") print(f\\"Time Taken: {duration} seconds\\")"},{"question":"Write a function that generates a random walk sequence of specified length, visualizes it on a line plot, and highlights the starting and ending points of the walk. The function should accept parameters to customize the step size and the colors of the line, starting point, and ending point. The function should output: Axes object: A plot showing the random walk with the starting and ending points highlighted. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt import random def random_walk_plot(length=100, step_size=1, line_color=\'blue\', start_point_color=\'green\', end_point_color=\'red\'): ```","solution":"import numpy as np import matplotlib.pyplot as plt import random def random_walk_plot(length=100, step_size=1, line_color=\'blue\', start_point_color=\'green\', end_point_color=\'red\'): Generates a random walk sequence of specified length and visualizes it on a line plot. Highlights the starting and ending points of the walk. Parameters: - length: int, the number of steps in the random walk - step_size: int, the size of each step - line_color: str, color of the random walk line - start_point_color: str, color of the start point - end_point_color: str, color of the end point Returns: - Axes object: A plot showing the random walk with the starting and ending points highlighted. # Create the random walk steps = [random.choice([-step_size, step_size]) for _ in range(length)] walk = np.cumsum(steps) # Create the plot fig, ax = plt.subplots() ax.plot(walk, color=line_color) ax.scatter(0, walk[0], color=start_point_color, label=\'Start\') ax.scatter(length - 1, walk[-1], color=end_point_color, label=\'End\') ax.legend() return ax"},{"question":"You are required to write a function `moving_average` to compute the simple moving average of a series of numbers over a specified window size. This function should use the Pandas library. **Function Signature:** ```python def moving_average(data: \'pd.Series\', window: int) -> \'pd.Series\': pass ``` **Parameters:** 1. `data` (pd.Series): A Pandas Series containing the input numerical values. 2. `window` (int): An integer specifying the number of observations used for calculating the average. # Step-by-Step Requirements: 1. Use the pandas library to handle the Series and calculations. 2. Ensure the `window` parameter is a positive integer. 3. Use the `rolling` method from Pandas to calculate the moving average with the specified window size. 4. Return the resultant Series with the moving averages, ensuring it has the same length as the input series. The initial values where the window cannot be fully applied should be set to `NaN`. # Example: ```python import pandas as pd data = pd.Series([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) window = 3 print(moving_average(data, window)) # Expected output: # 0 NaN # 1 NaN # 2 2.0 # 3 3.0 # 4 4.0 # 5 5.0 # 6 6.0 # 7 7.0 # 8 8.0 # 9 9.0 # dtype: float64 data = pd.Series([10, 20, 30]) window = 2 print(moving_average(data, window)) # Expected output: # 0 NaN # 1 15.0 # 2 25.0 # dtype: float64 ``` # Constraints: - The length of `data` should be at least 1. - The `window` must be a positive integer. - Ensure correct handling of the initial `NaN` values where the window size is not met. - Only use pandas for computations; no other libraries are allowed.","solution":"import pandas as pd def moving_average(data: pd.Series, window: int) -> pd.Series: Compute the simple moving average of a series of numbers over a specified window size. Parameters: data (pd.Series): A Pandas Series containing the input numerical values. window (int): An integer specifying the number of observations used for calculating the average. Returns: pd.Series: A Pandas Series containing the moving averages. if window < 1: raise ValueError(\\"Window size must be a positive integer\\") return data.rolling(window=window).mean()"},{"question":"You are tasked with writing a Python function that finds the first missing positive integer in an unsorted array of integers. Your function should achieve a time complexity of O(n) and use constant extra space. # Function Specification **Function Name:** `first_missing_positive` **Parameters:** 1. `nums` (List[int]): A list of integers. **Returns:** - An integer representing the first missing positive integer. **Constraints and Requirements:** - The function must handle both positive and negative integers. - The function should not use extra space proportional to the input size. # Example Usage ```python print(first_missing_positive([1, 2, 0])) # Output: 3 print(first_missing_positive([3, 4, -1, 1])) # Output: 2 print(first_missing_positive([7, 8, 9, 11, 12])) # Output: 1 ``` # Detailed Behavior 1. **Input Handling**: Iterate through the list and place each positive integer `i` (1 ≤ i ≤ n, where n is the length of the list) in the position `i-1`. For instance, if the number 3 is in the array, it should be placed at index 2, which is `3-1`. 2. **Position Verification**: After positioning all possible numbers correctly, iterate through the list again to find the first position `i` where `nums[i]` is not `i+1`. This position indicates the first missing positive integer. 3. **Return Value**: If all positions are filled correctly, the first missing positive integer is `n+1`, where `n` is the length of the list. Implement the `first_missing_positive` function to meet the above specifications.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an unsorted list of integers. Parameters: nums (List[int]): A list of integers. Returns: int: The first missing positive integer. n = len(nums) for i in range(n): # Place nums[i] in its correct position if it\'s within the range 1 to n while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] and nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first index where the number is not i + 1 for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Writing efficient algorithms is a crucial skill in programming, especially when working with large datasets or intensive computational tasks. One common problem is finding the longest increasing subsequence (LIS) within a given list of numbers. You are given a list of integers. Your task is to write a function to find the length of the longest increasing subsequence within this list. The elements of the subsequence must be in strictly increasing order, and you are required to do this in O(n log n) time complexity. # Requirements: 1. Use dynamic programming along with binary search to achieve the required time complexity. 2. You may use the `bisect` module for binary search operations on the list. Function Signature ```python def length_of_LIS(nums): # Your implementation here ``` Parameters - `nums`: A list of integers. Returns - An integer representing the length of the longest increasing subsequence. # Example Usage ```python print(length_of_LIS([10, 9, 2, 5, 3, 7, 101, 18])) # Output: 4 print(length_of_LIS([0, 1, 0, 3, 2, 3])) # Output: 4 print(length_of_LIS([7, 7, 7, 7, 7, 7, 7])) # Output: 1 ```","solution":"import bisect def length_of_LIS(nums): Function to find the length of the longest increasing subsequence. This function uses dynamic programming along with binary search to achieve O(n log n) time complexity. Parameters: - nums: A list of integers. Returns: - An integer representing the length of the longest increasing subsequence. if not nums: return 0 lis = [] for num in nums: pos = bisect.bisect_left(lis, num) # If num is greater than all elements in lis, append num if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"Given a list of integers, find all unique triplets in the list which gives the sum of zero. The function should return a list of lists containing unique triplets that add up to zero. The function should return: List[List[int]]: A list of lists, with each inner list containing three integers that add up to zero. You should write self-contained code starting with: ``` def three_sum(nums): ```","solution":"def three_sum(nums): Given a list of integers, find all unique triplets which gives the sum of zero. Args: nums (List[int]): A list of integers. Returns: List[List[int]]: A list of lists, with each inner list containing three integers that add up to zero. nums.sort() # Sort the numbers result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip duplicate elements continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 # Skip duplicate elements while left < right and nums[right] == nums[right - 1]: right -= 1 # Skip duplicate elements left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return result"},{"question":"You are tasked with creating a function that accepts a list of dictionaries representing students and their respective grades. The function should filter out students who have failed (a grade below 50) and then sort the remaining students by their grades in descending order. Requirements: 1. Write a function named `filter_and_sort_students` which takes one argument: - `students` (list of dicts): A list where each dictionary has two keys: - `name` (str): The name of the student. - `grade` (int): The grade of the student (0 to 100). 2. The function should: - Filter out students who have a grade below 50. - Sort the remaining students by their grades in descending order. - Return the filtered and sorted list of dictionaries. Behavior: - If the input list is empty, the function should return an empty list. - The original list should not be modified; the function should return a new list. Examples: ```python # Example 1: Mixed passing and failing grades students = [ {\\"name\\": \\"Alice\\", \\"grade\\": 90}, {\\"name\\": \\"Bob\\", \\"grade\\": 40}, {\\"name\\": \\"Charlie\\", \\"grade\\": 55}, ] filter_and_sort_students(students) # Expected output: [{\\"name\\": \\"Alice\\", \\"grade\\": 90}, {\\"name\\": \\"Charlie\\", \\"grade\\": 55}] # Example 2: All failing grades students = [ {\\"name\\": \\"Alice\\", \\"grade\\": 30}, {\\"name\\": \\"Bob\\", \\"grade\\": 20}, {\\"name\\": \\"Charlie\\", \\"grade\\": 45}, ] filter_and_sort_students(students) # Expected output: [] # Example 3: All passing grades students = [ {\\"name\\": \\"Alice\\", \\"grade\\": 80}, {\\"name\\": \\"Bob\\", \\"grade\\": 85}, {\\"name\\": \\"Charlie\\", \\"grade\\": 95}, ] filter_and_sort_students(students) # Expected output: [{\\"name\\": \\"Charlie\\", \\"grade\\": 95}, {\\"name\\": \\"Bob\\", \\"grade\\": 85}, {\\"name\\": \\"Alice\\", \\"grade\\": 80}] ```","solution":"def filter_and_sort_students(students): Filters out students who have a grade below 50 and sorts the remaining students by their grades in descending order. Args: students (list of dict): A list where each dictionary has two keys: \'name\' (str): The name of the student. \'grade\' (int): The grade of the student (0 to 100). Returns: list of dict: A new list with students who passed, sorted by grade in descending order. # Filter out students who have failed passing_students = [student for student in students if student[\'grade\'] >= 50] # Sort the remaining students by their grades in descending order sorted_students = sorted(passing_students, key=lambda x: x[\'grade\'], reverse=True) return sorted_students"},{"question":"**Create a function that processes transaction logs from a text file. Each log entry contains a timestamp, user ID, and transaction amount. Your task is to aggregate the total transaction amount for each user and write the results to a JSON file. # Function Specifications - Name: `aggregate_transactions` - Parameters: - `inputFilePath` (str): Path to the input log file. - `outputFilePath` (str): Path to the output JSON file. # Description Your function should: 1. Open the log file specified by `inputFilePath` and read its contents. 2. Process each log entry to extract the user ID and transaction amount. 3. Aggregate the transaction amounts by user ID. 4. Write the aggregated results to the JSON file specified by `outputFilePath`. # Log File Format Each line in the log file is a transaction record in the following format: ``` <timestamp> <userID> <transactionAmount> ``` - `<timestamp>`: The time the transaction occurred. - `<userID>`: The identifier for the user. - `<transactionAmount>`: The amount of the transaction, which can be a positive or negative number. # Example Usage Given the input log file `transactions.log` with the following content: ``` 2023-01-01T00:00:00Z 123 100.50 2023-01-01T01:00:00Z 123 -20.75 2023-01-02T00:00:00Z 456 300.00 2023-01-02T01:00:00Z 123 25.00 2023-01-02T02:00:00Z 789 50.00 ``` Calling `aggregate_transactions(\\"transactions.log\\", \\"result.json\\")` will read the log file, aggregate the transactions, and produce the following `result.json` file: ```json { \\"123\\": 104.75, \\"456\\": 300.00, \\"789\\": 50.00 } ``` Ensure that the transaction aggregation and file operations are accurate and efficient.**","solution":"import json def aggregate_transactions(inputFilePath, outputFilePath): Aggregates the total transaction amount for each user from a log file and writes the results to a JSON file. Parameters: - inputFilePath (str): Path to the input log file. - outputFilePath (str): Path to the output JSON file. transactions = {} # Read and process the input log file with open(inputFilePath, \'r\') as file: for line in file: parts = line.strip().split() user_id = parts[1] amount = float(parts[2]) if user_id in transactions: transactions[user_id] += amount else: transactions[user_id] = amount # Write the aggregated results to the output JSON file with open(outputFilePath, \'w\') as outfile: json.dump(transactions, outfile, indent=4)"},{"question":"You are tasked with creating a function that finds all unique triplets in an array that sum up to zero. Your function should be named `find_triplets`, and must adhere to the following requirements: 1. The input to the function is a list of integers `nums`. 2. The output should be a list of triplets, where each triplet is represented as a tuple of three integers `(a, b, c)`. 3. The triplets in the output list should be unique and have no duplicate triplets. 4. The elements within each triplet should be in non-decreasing order (i.e., `a ≤ b ≤ c`). 5. The overall order of triplets in the output list does not matter. **Function Signature:** ```python def find_triplets(nums: List[int]) -> List[Tuple[int, int, int]]: ... ``` **Guidelines:** - You can assume that the input list contains at least 3 integers. - Handle both positive and negative integers within the array. - Optimize the solution to avoid excessive runtime or memory usage. - To assist in the task, sorting the input list and using a two-pointer technique could prove useful. Example Usage: ```python print(find_triplets([-1, 0, 1, 2, -1, -4])) # Output: [(-1, -1, 2), (-1, 0, 1)] ``` Note: The example output can vary in order of triplets as long as they are unique and satisfy the conditions mentioned.","solution":"from typing import List, Tuple def find_triplets(nums: List[int]) -> List[Tuple[int, int, int]]: nums.sort() # Sort the array triplets = [] n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: # Avoid duplicates continue left, right = 0, 0 for j in range(i+1, n - 1): if j > i + 1 and nums[j] == nums[j - 1]: # Avoid pairs duplicates at the current i continue left = nums[j] right = 0 - (nums[i] + nums[j]) if right in nums[j+1:]: triplets.append((nums[i], left, right)) return list(set(triplets))"},{"question":"You are required to implement a function that generates a list of prime numbers within a given range. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function should allow two modes of operation: listing all prime numbers within the range or listing only prime numbers that are palindromes. Your function should be named `prime_numbers` and take in three arguments: 1. `start` (int): The lower bound of the range (inclusive). 2. `end` (int): The upper bound of the range (inclusive). 3. `palindrome` (bool): A boolean value indicating the mode of operation. If `True`, only prime palindromes should be returned; if `False`, all primes in the range should be returned. The function should return a list of prime numbers or prime palindromes in the given range [start, end]. # Example For `start = 10`, `end = 100`, and `palindrome = False`, the function should return: ```python [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] ``` For `start = 10`, `end = 100`, and `palindrome = True`, the function should return: ```python [11, 101] ``` # Function Signature ```python def prime_numbers(start: int, end: int, palindrome: bool) -> list: # Your implementation here ``` # Hints 1. To check for a prime number, you can use the 6k ± 1 optimization, where you only check divisibility up to the square root of the number. 2. To check if a number is a palindrome, you can convert it to a string and compare it with its reverse. # Example Implementations Use the following to understand the expected output: ```python print(prime_numbers(10, 100, False)) # Output: [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97] print(prime_numbers(10, 100, True)) # Output: [11, 101] ```","solution":"def is_prime(n): Helper function to check if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): Helper function to check if a number is a palindrome return str(n) == str(n)[::-1] def prime_numbers(start, end, palindrome): Generates a list of prime numbers within a given range. If palindrome is True, only returns the prime numbers that are palindromes. primes = [] for num in range(start, end + 1): if is_prime(num): if palindrome: if is_palindrome(num): primes.append(num) else: primes.append(num) return primes"},{"question":"**You are working for a logistics company where you need to optimize the delivery route for a fleet of delivery trucks. The trucks have a limited carrying capacity, and you need to load them in a way that maximizes the utilization of space while minimizing the number of trucks used. Write a Python function `optimize_delivery` that takes two arguments: 1. `item_weights` - a list of integers representing the weights of the items that need to be delivered. 2. `truck_capacity` - an integer representing the maximum capacity of a single truck. Your task is to find the smallest number of trucks required to deliver all the items, ensuring each truck\'s load does not exceed its capacity. The function should employ a greedy algorithm to achieve an optimal solution and return the minimum number of trucks needed. **Example:** Given `item_weights = [2, 2, 2, 3, 5, 7]` and `truck_capacity = 10`, the function should return `3` as the items can be loaded into 3 trucks as follows: - Truck 1: [7, 2] - Truck 2: [5, 3, 2] - Truck 3: [2] **Function signature:** ```python def optimize_delivery(item_weights: list, truck_capacity: int) -> int: ``` Note: - Assume all weights are positive integers. - The order of item weights does not matter. - It\'s guaranteed that the sum of all item weights does not exceed the total capacity of the required trucks.","solution":"def optimize_delivery(item_weights: list, truck_capacity: int) -> int: # Sort the item weights in descending order item_weights.sort(reverse=True) trucks = [] for weight in item_weights: placed = False for truck in trucks: if sum(truck) + weight <= truck_capacity: truck.append(weight) placed = True break if not placed: trucks.append([weight]) return len(trucks)"},{"question":"In this problem, you are asked to implement a function that calculates the moving average of the last `K` elements of a given list or array of integers. The moving average is a commonly used technique in time series analysis and signal processing to smooth out short-term fluctuations and highlight longer-term trends or cycles. Your task is to create a function named `moving_average` that takes a list or array `arr` of integers and an integer `K` as input and returns a new list containing the moving averages of the last `K` elements. The moving average at position `i` is the average of the elements from position `i-K+1` to `i`. If there are fewer than `K` elements available to form the average (i.e., when calculating the first few elements of the result), simply include the average of all available elements up to that point. To calculate the moving average, you can use the following approach: 1. Iterate over each position in the input list or array. 2. For each position, calculate the average of the last `K` elements, or all available elements if there are fewer than `K`. Specifications: - **Function Name**: `moving_average` - **Input**: - `arr`: A list or array of integers. - `K`: An integer representing the number of elements to include in the moving average calculation. - **Output**: A list of floating-point numbers representing the moving averages. Example: ```python arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] K = 3 print(moving_average(arr, K)) ``` **Expected Output**: ```python [1.0, 1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0] ``` In the above example: - The moving average at the 0th position is `1.0` (average of `[1]`). - The moving average at the 1st position is `1.5` (average of `[1, 2]`). - The moving average at the 2nd position is `2.0` (average of `[1, 2, 3]`). - The moving average at the 3rd position is `3.0` (average of `[2, 3, 4]`) and so on.","solution":"def moving_average(arr, K): Calculate the moving averages of the last K elements of a given list of integers. Parameters: arr (list): List of integers. K (int): Number of elements to include in the moving average calculation. Returns: list: List of floating point numbers representing the moving averages. if K <= 0: raise ValueError(\\"K must be a positive integer\\") moving_averages = [] for i in range(len(arr)): window = arr[max(0, i - K + 1):i + 1] moving_averages.append(sum(window) / len(window)) return moving_averages"},{"question":"Write a function to implement a simple linear regression and visualize the regression line along with the data points. The function should take two NumPy arrays as input: one for the x-values and one for the y-values. It should calculate the best fit line using least squares method, plot the data points and the regression line using Matplotlib, and return the slope and intercept of the regression line. The function should output: - A tuple containing the slope and intercept of the regression line. - A matplotlib figure of the plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def linear_regression(x, y): ```","solution":"import numpy as np import matplotlib.pyplot as plt def linear_regression(x, y): Perform simple linear regression and plot the regression line along with the data points. Parameters: x (numpy.ndarray): Array of x-values. y (numpy.ndarray): Array of y-values. Returns: tuple: Slope and intercept of the regression line. Figure: Matplotlib figure of the plot. # Ensure x and y are numpy arrays x = np.array(x) y = np.array(y) # Calculate the slope (m) and intercept (c) using least squares method n = len(x) m = (n * np.sum(x*y) - np.sum(x) * np.sum(y)) / (n * np.sum(x**2) - np.sum(x)**2) c = (np.sum(y) - m * np.sum(x)) / n # Create the plot fig, ax = plt.subplots() ax.scatter(x, y, color=\'blue\', label=\'Data points\') ax.plot(x, m*x + c, color=\'red\', label=\'Regression line\') ax.set_xlabel(\'x\') ax.set_ylabel(\'y\') ax.legend() plt.title(\'Linear Regression\') # Return the slope, intercept, and figure return (m, c), fig"},{"question":"In this problem, your task is to write a Python function called `find_pangrams` that identifies whether all the given sentences are pangrams. A pangram is a sentence that contains every letter of the alphabet at least once. Here is the detailed specification of the function: Function Signature: ```python def find_pangrams(sentences: list) -> list: ``` Input: - `sentences`: A list of strings where each string is a sentence to be checked for being a pangram. Output: - Returns a list of boolean values where each boolean value corresponds to whether the given sentence in the input list is a pangram (`True`) or not (`False`). Example: ```python >>> result = find_pangrams([\\"The quick brown fox jumps over a lazy dog\\", \\"Hello World\\", \\"Sphinx of black quartz, judge my vow\\"]) >>> print(result) [True, False, True] ``` For this problem, please ensure that the function correctly handles case sensitivity and ignores all non-alphabetic characters.","solution":"import string def find_pangrams(sentences: list) -> list: Identifies whether each sentence in the given list is a pangram. A pangram is a sentence that contains every letter of the alphabet at least once. :param sentences: List of strings to check. :return: List of boolean values indicating whether each sentence is a pangram. all_letters = set(string.ascii_lowercase) def is_pangram(sentence): cleaned_sentence = \'\'.join(filter(str.isalpha, sentence)).lower() return set(cleaned_sentence) >= all_letters return [is_pangram(sentence) for sentence in sentences]"},{"question":"You are required to implement a function that calculates the perimeter of a polygon given its vertices. This task will deepen your understanding of basic computational geometry and reinforce working with lists and loops in Python. **Function to Implement**: `calculate_polygon_perimeter` **Parameters**: - `vertices`: A list of tuples, where each tuple represents the (x, y) coordinates of a vertex of the polygon. The vertices are provided in order, and the polygon is closed by assuming a connection from the last vertex back to the first. **Return**: - A float representing the perimeter of the polygon. **Instructions**: - Calculate the Euclidean distance between each pair of consecutive vertices. - Sum these distances to obtain the total perimeter. - Ensure the distance between the last vertex and the first vertex is included. **Hints**: - You can use the distance formula between two points ((x_1, y_1)) and ((x_2, y_2)): (sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}). **Example**: ```python vertices = [(0, 0), (4, 0), (4, 3)] perimeter = calculate_polygon_perimeter(vertices) # The perimeter should be the sum of distances between (0,0) to (4,0), # (4,0) to (4,3), and (4,3) to (0,0). The result should be 12.0 ``` This problem is designed to reinforce your skills in looping through lists and applying mathematical formulas. Focus on accurately calculating distances and handling the wrap-around from the last vertex to the first.","solution":"import math def calculate_polygon_perimeter(vertices): Calculates the perimeter of a polygon given its vertices. Parameters: vertices (list of tuples): A list of (x, y) coordinates representing vertices of the polygon. Returns: float: The perimeter of the polygon. if len(vertices) < 2: return 0.0 perimeter = 0.0 num_vertices = len(vertices) for i in range(num_vertices): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % num_vertices] distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) perimeter += distance return perimeter"},{"question":"You are required to write a function named `reverse_words()` that takes a string as input and returns a new string where the words are reversed but kept in their original positions. Here is a detailed description of the requirements: 1. **Function name**: `reverse_words` 2. **Parameters**: - A single string `text` containing words separated by spaces. 3. **Functionality**: - This function should reverse the characters in each word of the input string while keeping the words in their original positions. - The order of the words themselves should not change. # Example If the input string is \\"hello world\\", the output should be \\"olleh dlrow\\". If the input string is \\"Welcome to the coding challenge\\", the output should be \\"emocleW ot eht gnidoc egnellahc\\". # Constraints - The input string `text` will not contain any leading or trailing spaces and all words will be separated by a single space. - The input string `text` will contain only alphabetic characters and spaces. Your task is to implement this function in Python. # Example Here\'s the implementation and its expected output: ```python def reverse_words(text): words = text.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words) # Example usage print(reverse_words(\\"hello world\\")) # Output: \\"olleh dlrow\\" print(reverse_words(\\"Welcome to the coding challenge\\")) # Output: \\"emocleW ot eht gnidoc egnellahc\\" ```","solution":"def reverse_words(text): Reverse the characters in each word of the input string while keeping the words in their original positions. Parameters: text (str): Input string containing words separated by spaces. Returns: str: A new string with each word reversed but words in their original positions. words = text.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Write a function that simulates a game of \\"FizzBuzz\\" for a given range of integers. The function should take two integers as input representing the start and end of the range (inclusive). For each integer in the range: - Print \\"Fizz\\" if the integer is divisible by 3. - Print \\"Buzz\\" if the integer is divisible by 5. - Print \\"FizzBuzz\\" if the integer is divisible by both 3 and 5. - Print the integer itself if none of the above conditions are met. The function should return a list of the results for the entire range. You should write self-contained code starting with: ``` def fizzbuzz_game(start, end): ``` Example Usage: ``` fizzbuzz_game(1, 15) ``` Expected Output: ``` [1, 2, \'Fizz\', 4, \'Buzz\', \'Fizz\', 7, 8, \'Fizz\', \'Buzz\', 11, \'Fizz\', 13, 14, \'FizzBuzz\'] ```","solution":"def fizzbuzz_game(start, end): Simulates a game of FizzBuzz for the given range of integers from start to end (inclusive). Parameters: start (int): The starting integer of the range. end (int): The ending integer of the range. Returns: List: A list of results for each integer in the range following the FizzBuzz rules. results = [] for i in range(start, end + 1): if i % 3 == 0 and i % 5 == 0: results.append(\\"FizzBuzz\\") elif i % 3 == 0: results.append(\\"Fizz\\") elif i % 5 == 0: results.append(\\"Buzz\\") else: results.append(i) return results"},{"question":"You are to write a Python function named `every_nth_char` that returns a new string containing every nth character from the input string. If n is greater than the length of the string or less than 1, return an empty string. Function Signature: ```python def every_nth_char(input_str: str, n: int) -> str: ``` Parameters: - `input_str`: A string from which characters are to be selected. - `n`: An integer representing the step size for selecting characters (1-based index). Returns: - A string containing every nth character from the input string. Example: ```python print(every_nth_char(\\"hello world\\", 3)) # Should print \\"l r\\" ``` In this example, every 3rd character in the string \\"hello world\\" is selected, resulting in the string \\"l r\\". Constraints: 1. The input string will only contain printable ASCII characters. 2. `n` will be an integer within the range of -10^3 to 10^3. # Approach Guidance: 1. Verify the value of `n` to ensure it is within a valid range (i.e., positive and smaller than the length of the input string). 2. Use list slicing or an iteration method to select every nth character from the input string. 3. Return the resultant string. # Example Usage: - `every_nth_char(\\"\\", 1)` should return `\\"\\"` because the input string is empty. - `every_nth_char(\\"abcdef\\", -2)` should return `\\"\\"` because n is invalid (less than 1). - `every_nth_char(\\"python\\", 10)` should return `\\"\\"` because n is greater than the string length.","solution":"def every_nth_char(input_str: str, n: int) -> str: Returns a new string containing every nth character from the input string. If n is greater than the length of the string or less than 1, return an empty string. if n <= 0 or n > len(input_str): return \\"\\" return input_str[n-1::n]"},{"question":"In this task, you are going to implement a function called `find_nearest_passenger` to solve a logistics problem for a taxi service. The function will determine the nearest passenger for available taxis and pair them for efficient pickup. You are given two lists: 1. `taxis`: A list of tuples where each tuple represents the coordinates (x, y) of a taxi. 2. `passengers`: A list of tuples where each tuple represents the coordinates (x, y) of a passenger. The function `find_nearest_passenger` should: 1. Calculate the Euclidean distance from each taxi to each passenger. 2. Assign the nearest passenger to each taxi until all passengers are assigned or no taxis are left. 3. Return a list of tuples representing the paired coordinates of taxis and passengers. # Example ```python taxis = [(0, 0), (2, 2), (3, 4)] passengers = [(1, 1), (2, 3), (4, 5)] # A possible solution: # Taxi at (0, 0) pairs with passenger at (1, 1) # Taxi at (2, 2) pairs with passenger at (2, 3) # Taxi at (3, 4) pairs with passenger at (4, 5) find_nearest_passenger(taxis, passengers) # Expected output: [((0, 0), (1, 1)), ((2, 2), (2, 3)), ((3, 4), (4, 5))] ``` # Function Signature ```python def find_nearest_passenger(taxis, passengers): # Your implementation here ``` # Requirements 1. Use `math.sqrt` or `numpy.linalg.norm` to calculate Euclidean distance. 2. Iterate through the lists to ensure each taxi is paired with the nearest available passenger. 3. Ensure each passenger is paired with only one taxi. 4. Return the results as a list of tuples representing the paired coordinates of taxis and passengers.","solution":"import math def find_nearest_passenger(taxis, passengers): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) results = [] available_passengers = set(passengers) for taxi in taxis: if not available_passengers: break nearest_passenger = min(available_passengers, key=lambda passenger: euclidean_distance(taxi, passenger)) results.append((taxi, nearest_passenger)) available_passengers.remove(nearest_passenger) return results"},{"question":"You need to create a function called `calculate_confusion_matrix_metrics` that computes important evaluation metrics for a binary classification model given a confusion matrix. The function should take a confusion matrix as input and return a dictionary containing the accuracy, precision, recall, F1-score, and support for each class. The confusion matrix will be provided as a 2x2 NumPy array where: - The first row represents the true negative (TN) and false positive (FP) values. - The second row represents the false negative (FN) and true positive (TP) values. Your function should: 1. Extract values of TN, FP, FN, and TP from the confusion matrix. 2. Calculate the following metrics: - **Accuracy**: (TN + TP) / (TN + FP + FN + TP) - **Precision**: TP / (TP + FP), if (TP + FP) == 0, then Precision is 0. - **Recall**: TP / (TP + FN), if (TP + FN) == 0, then Recall is 0. - **F1-score**: 2 * (Precision * Recall) / (Precision + Recall), if (Precision + Recall) == 0, then F1-score is 0. - **Support**: [TN + FP, FN + TP], which is the number of actual occurrences of each class. 3. Return a dictionary with the keys: \'accuracy\', \'precision\', \'recall\', \'f1_score\', \'support\'. The values should be the computed metrics. Function signature: ```python def calculate_confusion_matrix_metrics(conf_matrix): # Your code here ```","solution":"import numpy as np def calculate_confusion_matrix_metrics(conf_matrix): Calculate evaluation metrics from a confusion matrix for binary classification. Parameters: conf_matrix (np.ndarray): 2x2 confusion matrix Returns: dict: Dictionary with keys \'accuracy\', \'precision\', \'recall\', \'f1_score\', \'support\' # Extracting TN, FP, FN, TP from the confusion matrix TN, FP, FN, TP = conf_matrix.ravel() # Calculating Accuracy accuracy = (TN + TP) / (TN + FP + FN + TP) # Calculating Precision precision = TP / (TP + FP) if (TP + FP) != 0 else 0 # Calculating Recall recall = TP / (TP + FN) if (TP + FN) != 0 else 0 # Calculating F1-score f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) != 0 else 0 # Calculating Support support = [TN + FP, FN + TP] return { \'accuracy\': accuracy, \'precision\': precision, \'recall\': recall, \'f1_score\': f1_score, \'support\': support }"},{"question":"You need to implement a Python function called `calculate_stats` that takes a list of integers and computes various statistical measures. The function should return a dictionary with the minimum, maximum, mean, median, and standard deviation of the list. **Function Signature**: ```python def calculate_stats(numbers: list) -> dict: ``` **Parameters**: 1. `numbers` (list): A list of integers. **Output**: - Returns a dictionary with the following keys and their respective values: - \'min\': the minimum value in the list - \'max\': the maximum value in the list - \'mean\': the mean value of the list - \'median\': the median value of the list - \'std_dev\': the standard deviation of the list # Requirements: - Use the `statistics` module from Python\'s standard library to perform calculations for mean, median, and standard deviation. - Ensure the function handles edge cases where the list could be empty (return `None` for all keys in such cases). **Example**: ```python print(calculate_stats([1, 2, 3, 4, 5])) # Output: {\'min\': 1, \'max\': 5, \'mean\': 3.0, \'median\': 3, \'std_dev\': 1.5811388300841898} ``` **Explanation**: The provided list `[1, 2, 3, 4, 5]` has: - Minimum value: `1` - Maximum value: `5` - Mean value: `(1+2+3+4+5)/5 = 3.0` - Median value: `3` - Standard deviation calculated using the formula for sample standard deviation (use the `statistics.stdev` function to compute this). Write a function `calculate_stats` that fulfills the above requirements, ensuring it handles any edge cases appropriately.","solution":"import statistics def calculate_stats(numbers: list) -> dict: Computes various statistical measures for a list of integers. :param numbers: list of integers :return: dictionary with \'min\', \'max\', \'mean\', \'median\', \'std_dev\' if not numbers: return {\'min\': None, \'max\': None, \'mean\': None, \'median\': None, \'std_dev\': None} stats = { \'min\': min(numbers), \'max\': max(numbers), \'mean\': statistics.mean(numbers), \'median\': statistics.median(numbers), \'std_dev\': statistics.stdev(numbers) if len(numbers) > 1 else 0.0 } return stats"},{"question":"Write a function called `process_customer_data` that parses a CSV string of customer information and returns a list of dictionaries representing each customer. Each dictionary should contain the following keys: `id`, `name`, and `email`. The CSV string will have the first line as headers (\\"id,name,email\\"). Each subsequent line represents a customer\'s details, separated by commas. **Input:** - A string `csv_data` that contains customer data in CSV format. **Output:** - A list of dictionaries, where each dictionary represents a customer. **Function Signature:** ```python def process_customer_data(csv_data: str) -> list: ``` # Example: ```python csv_data = id,name,email 1,John Doe,john.doe@example.com 2,Jane Smith,jane.smith@example.com customers = process_customer_data(csv_data) print(customers) ``` **Expected Output:** ```python [ {\\"id\\": \\"1\\", \\"name\\": \\"John Doe\\", \\"email\\": \\"john.doe@example.com\\"}, {\\"id\\": \\"2\\", \\"name\\": \\"Jane Smith\\", \\"email\\": \\"jane.smith@example.com\\"} ] ``` # Note: - Your function should handle cases where there are leading and trailing newlines in the input CSV string. - The `id` will always be a number, but represented as a string within the dictionary.","solution":"def process_customer_data(csv_data: str) -> list: # Split the input string into lines lines = csv_data.strip().split(\'n\') # Extract headers (first line) headers = lines[0].split(\',\') # Extract customer data (remaining lines) customers = [] for line in lines[1:]: values = line.split(\',\') customer = {headers[i]: values[i] for i in range(len(headers))} customers.append(customer) return customers"},{"question":"You are tasked with developing a system that helps manage a parking lot. The relevant data is provided in a CSV file named `parking_data.csv`. The file contains columns such as `vehicle_id`, `entry_time`, `exit_time`, and `parking_spot`. Your objective is to write a function `calculate_parking_fees` that will: 1. Read the parking data from `parking_data.csv`. 2. Calculate the total parking time for each vehicle. 3. Determine the parking fee for each vehicle based on the total parking time. 4. Return a list of dictionaries containing `vehicle_id` and their corresponding parking fee. Assume that the following rules apply for calculating parking fees: - The parking fee is 5 per hour. - Any fraction of an hour is rounded up to the next full hour. **Function Signature:** ```python def calculate_parking_fees() -> List[Dict[str, Union[str, int]]]: ``` **Returns:** - `List[Dict[str, Union[str, int]]]`: A list of dictionaries, each containing `vehicle_id` (str) and `parking_fee` (int). You are required to use the `pandas` library for reading the CSV file and data manipulation. Here is the structure of the CSV file: ```plaintext vehicle_id, entry_time, exit_time, parking_spot ... ```","solution":"import pandas as pd import math from typing import List, Dict, Union def calculate_parking_fees() -> List[Dict[str, Union[str, int]]]: # Read the parking data from CSV file data = pd.read_csv(\'parking_data.csv\') # Initialize the result list result = [] # Define the parking fee per hour fee_per_hour = 5 # Iterate over each row in the dataframe for _, row in data.iterrows(): vehicle_id = row[\'vehicle_id\'] entry_time = pd.to_datetime(row[\'entry_time\']) exit_time = pd.to_datetime(row[\'exit_time\']) # Calculate total parking time in hours; round up any fraction of an hour total_hours_parking = math.ceil((exit_time - entry_time).total_seconds() / 3600) # Calculate the total parking fee parking_fee = total_hours_parking * fee_per_hour # Append the result dictionary to the result list result.append({ \'vehicle_id\': vehicle_id, \'parking_fee\': parking_fee }) return result"},{"question":"You are tasked to implement a function `safe_divide(a: int, b: int) -> float` that performs a safe division between two integers `a` and `b`, and handles division by zero gracefully. If `b` is zero, your function should return `float(\'inf\')` to indicate an infinite result rather than throwing an error. The function should be designed to handle both positive and negative integers for `a` and `b`. Example: ```python result = safe_divide(10, 2) print(result) # Output should be: 5.0 result = safe_divide(7, 0) print(result) # Output should be: inf result = safe_divide(-6, 3) print(result) # Output should be: -2.0 result = safe_divide(5, -5) print(result) # Output should be: -1.0 ```","solution":"def safe_divide(a: int, b: int) -> float: Performs a safe division between two integers a and b, and handles division by zero gracefully. If b is zero, the function returns float(\'inf\'). if b == 0: return float(\'inf\') return a / b"},{"question":"# Context: In many real-world applications, data processing and management involve the efficient use of hash tables. Python provides dictionaries (`dict`) as built-in data structures that can help us manage key-value pairs effortlessly. One common problem is to identify distinct elements in a collection and count the frequency of each element. # Problem: You have been given a list of integers and you are required to find the top `k` most frequent elements from the list. In case of a tie where multiple elements have the same frequency, the smaller element should be preferred. # Objective: Complete the function `top_k_frequent` which uses a dictionary to tally the frequencies and identifies the top `k` most frequent elements using this frequency data. # Function Specification: - **Function Name:** `top_k_frequent` - **Input Arguments:** - `nums`: A list of integers. - `k`: An integer representing the number of top frequent elements to return. - **Output:** - A list of integers representing the top `k` most frequent elements in the list sorted primarily by frequency (highest first), and by value (smallest first) for ties. # Requirements: - **Use a dictionary to count the frequency of each element in the list.** - Ensure that elements are sorted based on their frequencies and values correctly. Here is the incomplete function to be completed: ```python def top_k_frequent(nums, k): Find the top k most frequent elements in the list. # Count the frequency of each element freq_dict = {} for num in nums: freq_dict[num] = freq_dict.get(num, 0) + 1 # Convert dictionary to a list of tuples and sort based on frequency and value sorted_freq = sorted(freq_dict.items(), key=lambda item: (-item[1], item[0])) # Extract the top k elements top_k_elements = [item[0] for item in sorted_freq[:k]] return top_k_elements ``` Example Usage: ```python nums = [1, 1, 1, 2, 2, 3] k = 2 print(top_k_frequent(nums, k)) # Output: [1, 2] nums = [4, 4, 1, 2, 2, 3, 3, 3] k = 3 print(top_k_frequent(nums, k)) # Output: [3, 2, 4] ``` --- Complete the `top_k_frequent` function to achieve the desired output by efficiently utilizing a dictionary for frequency counting and proper sorting logic.","solution":"def top_k_frequent(nums, k): Find the top k most frequent elements in the list. # Count the frequency of each element freq_dict = {} for num in nums: freq_dict[num] = freq_dict.get(num, 0) + 1 # Convert dictionary to a list of tuples and sort based on frequency (descending) and value (ascending) sorted_freq = sorted(freq_dict.items(), key=lambda item: (-item[1], item[0])) # Extract the top k elements top_k_elements = [item[0] for item in sorted_freq[:k]] return top_k_elements"},{"question":"You are tasked with creating a function that manages student\'s grades. Specifically, you will create a function `process_grades` that accepts a list of dictionaries representing students and their grades, and calculates the average grade for each student along with the class average. Here is the detailed specification for the function you need to implement: ```python def process_grades(students): Processes a list of student records, each containing a student\'s name and a list of their grades. Calculate and return a dictionary with each student\'s name as a key and their average grade as the value. Additionally, return the class average grade as a separate value. :param students: List[Dict], a list of dictionaries where each dictionary has \'name\' as a string and \'grades\' as a list of integers. :return: Tuple[Dict, float], a dictionary of student averages and the class average grade. ``` **Details**: 1. **Input**: The function will receive a list of dictionaries, where each dictionary has two keys: - `\'name\'`: a string representing the student\'s name. - `\'grades\'`: a list of integers representing the student\'s grades. 2. **Student Averages**: Compute the average grade for each student and return this in a dictionary where the key is the student\'s name and the value is their average grade (a float). 3. **Class Average**: Calculate the class average grade by averaging all individual student averages. 4. **Output**: The function should return a tuple containing two elements: - A dictionary with student names as keys and their average grades as values. - The class average grade as a float. Here is an outline to help you get started: ```python def process_grades(students): # Your implementation goes here ``` **Example Usage**: Given the input: ```python students = [ {\'name\': \'John\', \'grades\': [80, 90, 100]}, {\'name\': \'Jane\', \'grades\': [70, 85, 95]}, {\'name\': \'Jake\', \'grades\': [60, 75, 80]} ] ``` The function should return: ```python ({\'John\': 90.0, \'Jane\': 83.33333333333333, \'Jake\': 71.66666666666667}, 81.66666666666667) ```","solution":"def process_grades(students): Processes a list of student records, each containing a student\'s name and a list of their grades. Calculate and return a dictionary with each student\'s name as a key and their average grade as the value. Additionally, return the class average grade as a separate value. :param students: List[Dict], a list of dictionaries where each dictionary has \'name\' as a string and \'grades\' as a list of integers. :return: Tuple[Dict, float], a dictionary of student averages and the class average grade. student_averages = {} total_sum = 0 total_count = 0 for student in students: name = student[\'name\'] grades = student[\'grades\'] average_grade = sum(grades) / len(grades) student_averages[name] = average_grade total_sum += average_grade total_count += 1 class_average = total_sum / total_count if total_count else 0 return student_averages, class_average"},{"question":"You need to develop a function named `findMaxProfit` that calculates the maximum profit achievable from buying and selling a stock on given days. The stock prices for consecutive days are provided in a JSON file. You may only buy one stock and sell it on a later day. # Requirements: 1. **Function Name**: `findMaxProfit` 2. **Parameters**: - `filename` (str): The name of the JSON file containing the stock prices. 3. **Output**: - Return the maximum possible profit (int) from a single buy-sell transaction. 4. **Libraries**: - `json`: To read the JSON file containing the stock prices. - `typing.List`: To specify type hints for lists. # Data Format: The JSON file contains a single list of integers representing the stock prices for each day. For example: ```json { \\"prices\\": [100, 180, 260, 310, 40, 535, 695] } ``` # Instructions: 1. Read the JSON file to obtain the stock prices. 2. Implement an efficient algorithm to find the largest possible profit from one buy-sell transaction. 3. Return the maximum profit. If no profit is possible, return 0. # Example: If the JSON file `stock_prices.json` contains: ```json { \\"prices\\": [100, 180, 260, 310, 40, 535, 695] } ``` Calling `findMaxProfit(\'stock_prices.json\')` should return `655`, which represents the profit from buying the stock at 40 and selling it at 695.","solution":"import json from typing import List def findMaxProfit(filename: str) -> int: Calculate the maximum profit from a buy-sell transaction in given stock prices. :param filename: Name of the JSON file containing the stock prices. :return: Maximum possible profit. If no profit is possible, return 0. # Read stock prices from the given JSON file with open(filename, \'r\') as f: data = json.load(f) prices = data[\\"prices\\"] if not prices: return 0 # Initialize the minimum price to the first day\'s price and max profit to 0 min_price, max_profit = prices[0], 0 for price in prices: # Update the min_price to be the lowest seen so far if price < min_price: min_price = price # Calculate the potential profit of selling at the current price profit = price - min_price # Update the max_profit if the current profit is greater if profit > max_profit: max_profit = profit return max_profit"},{"question":"** You are asked to develop a function that sorts a list of strings based on certain criteria. The strings contain alphanumeric characters. The sorting should be based on the following rules: 1. Strings with numbers are considered followed by strings with only alphabetic characters. 2. Strings with numbers should be sorted based on their numerical value. 3. Strings with only alphabetic characters should be sorted alphabetically. Your task is to write a function named `custom_sort` that takes in a list of strings and sorts it according to the above criteria. **Input:** - `strings_list`: A list of strings containing alphanumeric characters or only alphabetic characters. Example: `[\'apple\', \'22ball\', \'1cat\', \'banana\']`. **Output:** - Return the sorted list of strings. **Function Signature:** ```python def custom_sort(strings_list): # Your code here ``` **Example Usage:** ```python input_list = [\'apple\', \'22ball\', \'1cat\', \'banana\'] sorted_list = custom_sort(input_list) print(sorted_list) # Output: [\'1cat\', \'22ball\', \'apple\', \'banana\'] ``` **Additional Notes:** - Assume that all strings are non-empty and contain either only alphabetic characters or a combination of alphabetic characters and numbers. - The function should preserve the relative order of the strings within their respective type (numeric or alphabetic). - The function should be optimized for performance considering edge cases such as very large lists or strings with large numeric values. **Hints:** - Consider separating the strings into two lists: one for strings with numeric values and one for purely alphabetic strings. - Sort the numeric strings based on their numerical part and the alphabetic strings lexicographically before merging them.","solution":"import re def custom_sort(strings_list): Sorts a list of strings based on specified criteria: 1. Strings with numbers come first. 2. Strings with numbers are sorted by their numerical value. 3. Strings with only alphabetic characters are sorted alphabetically. :param strings_list: List of strings to be sorted. :return: Sorted list of strings. def extract_numerical_part(s): match = re.search(r\'d+\', s) return int(match.group()) if match else float(\'inf\') numeric_strings = sorted([s for s in strings_list if any(c.isdigit() for c in s)], key=lambda s: extract_numerical_part(s)) alphabetic_strings = sorted([s for s in strings_list if all(c.isalpha() for c in s)]) return numeric_strings + alphabetic_strings"},{"question":"You are asked to implement a function called `find_top_k_frequent_elements` that returns the `k` most frequent elements in a given list of integers, sorted by their frequency in descending order. In the case of a tie in frequency, the elements should be sorted by their value in ascending order. This question will help you understand how to work with frequency counts and sorting in Python. **Function Signature:** ```python def find_top_k_frequent_elements(nums: List[int], k: int) -> List[int]: pass ``` Your function should adhere to the following constraints and steps: 1. The function accepts two arguments: `nums`, which is a list of integers, and `k`, which is a positive integer representing the number of top frequent elements to return. 2. First, compute the frequency of each element in the list. 3. Sort the elements first by frequency in descending order. If two elements have the same frequency, sort them by their value in ascending order. 4. Return the top `k` frequent elements as a list. **Example:** ```python nums = [1, 1, 1, 2, 2, 3] k = 2 result = find_top_k_frequent_elements(nums, k) print(result) ``` **Expected Output:** ```plaintext [1, 2] ``` **Constraints:** - The input list `nums` will contain at least one element. - The value of `k` will be between 1 and the number of unique elements in `nums`. - The elements in `nums` will be integers and the list may contain both positive and negative integers.","solution":"from typing import List from collections import Counter def find_top_k_frequent_elements(nums: List[int], k: int) -> List[int]: Returns the k most frequent elements in a list sorted by frequency in descending order. In case of a tie in frequency, elements are sorted by their value in ascending order. # Compute the frequency of each element freq = Counter(nums) # Sort the elements first by frequency (in descending order), then by element value (in ascending order) sorted_elements = sorted(freq.keys(), key=lambda x: (-freq[x], x)) # Return the top k frequent elements return sorted_elements[:k]"},{"question":"You are required to create a function that outputs the topological sorting of a directed acyclic graph (DAG). Utilize the Kahn’s algorithm approach, which uses the concept of in-degree, to determine the order of vertices. Function Requirements: - **Function Name**: `topological_sort` - **Parameters**: - `graph` (dict): A dictionary where keys are node identifiers and values are lists of neighboring node identifiers. - **Returns**: A list of node identifiers representing the topological order of the given graph. Example: ```python graph = { 0: [1, 3], 1: [2, 3], 2: [3], 3: [], } # Sample Output Output: [0, 1, 2, 3] ``` # Constraints: - The graph is guaranteed to be a directed acyclic graph (DAG). - There are no duplicated edges or self-loops. # Your Task: Implement the function `topological_sort` which adheres to the requirements and constraints given. Ensure that the function appropriately handles the in-degree calculations and effectively sorts the nodes in a topological order using Kahn\'s algorithm.","solution":"from collections import deque def topological_sort(graph): Returns the topological order of nodes in a directed acyclic graph (DAG) using Kahn\'s algorithm. Parameters: graph (dict): A dictionary where keys are node identifiers and values are lists of neighboring node identifiers. Returns: List: List of nodes in topological order. in_degree = {node: 0 for node in graph} # Calculate in-degree (number of incoming edges) for each node for node in graph: for neighbor in graph[node]: in_degree[neighbor] += 1 queue = deque([node for node in graph if in_degree[node] == 0]) topological_order = [] while queue: node = queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(topological_order) != len(graph): raise ValueError(\\"The graph is not a DAG (contains a cycle).\\") return topological_order"},{"question":"**Objective:** Create a function named `generate_palindromes` that generates all palindrome numbers within a given range. The generated palindromes should be returned as a list in ascending order. **Details:** 1. The function should accept two integers, `start` and `end`, which represent the inclusive range within which to generate palindromes. 2. A palindrome number is a number that reads the same backward as forward (e.g., 121, 1331). 3. The function should return a list of integers representing the palindromes within the specified range in ascending order. **Example:** ```python generate_palindromes(100, 200) ``` should return: ```python [101, 111, 121, 131, 141, 151, 161, 171, 181, 191] ``` **Function Signature:** ```python def generate_palindromes(start, end): ``` **Constraints:** - `0 <= start <= end <= 10^6` **Hints:** - You may use string manipulation to check if a number is a palindrome. - Consider edge cases, such as when the start and end range includes very small or very large numbers. **Sample Usage:** ```python # Case 1 print(generate_palindromes(1, 50)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44] # Case 2 print(generate_palindromes(500, 550)) # Output: [505, 515, 525, 535, 545] ``` **Notes:** - Ensure the function is efficient and can handle the upper limit of the range within reasonable execution time. - Properly structure the solution to include any helper functions if necessary for checking palindrome condition or generating numbers.","solution":"def generate_palindromes(start, end): Generates all palindrome numbers within the given range. def is_palindrome(num): Checks if a given number is a palindrome. s = str(num) return s == s[::-1] palindromes = [num for num in range(start, end + 1) if is_palindrome(num)] return palindromes"},{"question":"# Inventory Management System You are tasked with designing a function `update_inventory()` that processes a series of inventory update operations and updates an existing inventory accordingly. Inventory data and operations are stored and processed in JSON format. 1. **Input:** * The current inventory is provided in a JSON file named `current_inventory.json` located in the directory `./inventory`. * A list of operations is provided in a JSON file named `operations.json` located in the same directory. 2. **Specifications for Inventory JSON Format:** * The JSON file contains a dictionary where keys are item names (strings) and values are integers representing the quantity. For example: ```json { \\"apple\\": 50, \\"banana\\": 30, \\"orange\\": 20 } ``` 3. **Specifications for Operations JSON Format:** * The JSON file contains a list of operations. Each operation is represented as a dictionary with two keys: - `\\"operation\\"`: a string that can be either `\\"add\\"` or `\\"remove\\"`. - `\\"items\\"`: a dictionary where keys are item names and values are integers representing the quantity to add or remove. For example: ```json [ { \\"operation\\": \\"add\\", \\"items\\": { \\"apple\\": 10, \\"orange\\": 5 } }, { \\"operation\\": \\"remove\\", \\"items\\": { \\"banana\\": 10, \\"orange\\": 15 } } ] ``` 4. **Output:** * Update the current inventory based on the provided list of operations. Ensure that the updated inventory does not contain any negative quantities. * Save the updated inventory back into `current_inventory.json`. 5. **Function Requirements:** * Read and parse the `current_inventory.json` and `operations.json`. * Apply the operations to the inventory. * Save the updated inventory back to `current_inventory.json`. For example, given the initial `current_inventory.json`: ```json { \\"apple\\": 50, \\"banana\\": 30, \\"orange\\": 20 } ``` And the `operations.json`: ```json [ { \\"operation\\": \\"add\\", \\"items\\": { \\"apple\\": 10, \\"orange\\": 5 } }, { \\"operation\\": \\"remove\\", \\"items\\": { \\"banana\\": 10, \\"orange\\": 15 } } ] ``` The resulting `current_inventory.json` should be: ```json { \\"apple\\": 60, \\"banana\\": 20, \\"orange\\": 10 } ``` Implement this by writing the function `update_inventory()`. Ensure to handle any I/O operations and manage the JSON files correctly. ```python import json import os def update_inventory(): # Your implementation here pass ```","solution":"import json import os def update_inventory(): # Load current inventory with open(\'./inventory/current_inventory.json\', \'r\') as f: inventory = json.load(f) # Load operations with open(\'./inventory/operations.json\', \'r\') as f: operations = json.load(f) # Apply operations to the inventory for operation in operations: op_type = operation[\'operation\'] items = operation[\'items\'] for item, quantity in items.items(): if op_type == \\"add\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif op_type == \\"remove\\": if item in inventory: inventory[item] = max(0, inventory[item] - quantity) # Save the updated inventory back with open(\'./inventory/current_inventory.json\', \'w\') as f: json.dump(inventory, f, indent=4)"},{"question":"Convert UTC date strings to human-readable local time zones. Write a function that takes a list of dictionaries where each dictionary contains a \'timestamp\' key with a UTC date string value and a \'timezone\' key with a time zone string value. The function should convert each timestamp to the specified time zone and return a list of dictionaries with the original \'timestamp\' and \'timezone\' values as well as a new \'local_time\' key with the converted time. The function should output with: list: A list of dictionaries with the keys \'timestamp\', \'timezone\', and \'local_time\'. Raise an exception for: ValueError: If any \'timestamp\' is not a valid UTC date string or if any \'timezone\' is not a valid time zone string. You should write self-contained code starting with: ``` from datetime import datetime import pytz def convert_timestamps(timestamps): ```","solution":"from datetime import datetime import pytz def convert_timestamps(timestamps): Convert UTC date strings to human-readable local time zones. Args: timestamps: A list of dictionaries where each dictionary contains a \'timestamp\' key with a UTC date string value and a \'timezone\' key with a time zone string value. Returns: list: A list of dictionaries with the keys \'timestamp\', \'timezone\', and \'local_time\'. Raises: ValueError: If any \'timestamp\' is not a valid UTC date string or if any \'timezone\' is not a valid time zone string. results = [] for entry in timestamps: try: utc_time = datetime.strptime(entry[\'timestamp\'], \'%Y-%m-%dT%H:%M:%SZ\') except ValueError: raise ValueError(f\\"Invalid UTC date string: {entry[\'timestamp\']}\\") try: local_tz = pytz.timezone(entry[\'timezone\']) except pytz.UnknownTimeZoneError: raise ValueError(f\\"Invalid time zone string: {entry[\'timezone\']}\\") utc_time = utc_time.replace(tzinfo=pytz.UTC) local_time = utc_time.astimezone(local_tz) result = { \'timestamp\': entry[\'timestamp\'], \'timezone\': entry[\'timezone\'], \'local_time\': local_time.strftime(\'%Y-%m-%dT%H:%M:%S%z\') } results.append(result) return results"},{"question":"Generate a square matrix of size `n` filled with random integers from 0 to 9 using `numpy`, and then compute the sum of the elements on its main diagonal. The function should output a tuple containing: - matrix: The generated `n x n` matrix with random integers. - diagonal_sum: The sum of the elements on the main diagonal. You should write self-contained code starting with: ``` import numpy as np def generate_matrix_and_diagonal_sum(n): ```","solution":"import numpy as np def generate_matrix_and_diagonal_sum(n): Generates an n x n matrix filled with random integers from 0 to 9 and returns a tuple containing the matrix and the sum of the elements on its main diagonal. Parameters: n (int): Size of the matrix. Returns: tuple: A tuple containing the n x n matrix and the sum of the diagonal elements. matrix = np.random.randint(0, 10, size=(n, n)) diagonal_sum = np.trace(matrix) return (matrix, diagonal_sum)"},{"question":"You need to write a function `rotate_characters(s, k)` that rotates the characters in a string `s` to the right by `k` positions. This means that each character is shifted to the right by `k` positions in a circular manner. If the shift moves a character past the end of the string, it wraps around to the start of the string. # Function Signature ```python def rotate_characters(s: str, k: int) -> str: Function to rotate characters in a string to the right by k positions. Parameters: s (str): The input string. k (int): The number of positions to rotate the string. Returns: str: The resulting string after rotation. ``` # Input - `s` (string, `1 <= len(s) <= 10^5`): The input string consisting of printable ASCII characters. - `k` (integer, `0 <= k <= 10^9`): The number of positions to rotate the string. # Output - A string which is the result of rotating the input string `s` to the right by `k` positions. # Example ```python >>> rotate_characters(\\"abcdef\\", 2) \\"efabcd\\" >>> rotate_characters(\\"hello\\", 1) \\"ohell\\" >>> rotate_characters(\\"rotation\\", 3) \\"ionrotat\\" ``` # Constraints - The function should handle large values of `k` efficiently. - Consider that rotating `s` right by `len(s)` positions results in the original string `s`. # Note When `k` is larger than the length of the string `s`, the effective number of rotations is `k % len(s)` since rotating by the length of the string results in no change. This optimization should be considered in your solution.","solution":"def rotate_characters(s: str, k: int) -> str: Function to rotate characters in a string to the right by k positions. Parameters: s (str): The input string. k (int): The number of positions to rotate the string. Returns: str: The resulting string after rotation. if not s: return s # Compute the effective number of rotations n = len(s) k = k % n # If k is 0, return the original string if k == 0: return s # Rotate the string return s[-k:] + s[:-k]"},{"question":"--- Write a function `extract_domain(url, suffix_list)` that extracts the domain of a given URL and checks if it belongs to the list of allowed suffixes. If the domain is valid based on the provided suffix list, return the domain name; otherwise, return `None`. **Your task**: 1. Use `urllib.parse` to parse the URL and extract the hostname. 2. Split the hostname into parts (e.g., subdomain, domain, suffix). 3. Check if the suffix matches any of the provided suffixes. 4. If there is a match, return the domain name excluding the subdomain. 5. If no match is found, return `None`. **Function Signature**: ```python def extract_domain(url, suffix_list): # Your code here ``` **Inputs**: - `url` (str): The URL string to extract the domain from. - `suffix_list` (list of str): A list of allowed domain suffixes (e.g., `[\\".com\\", \\".org\\", \\".net\\"]`). **Outputs**: - A string representing the domain name if the URL is valid based on the provided suffix list or `None` if it\'s not valid. **Examples**: ```python extract_domain(\\"https://sub.example.com/path\\", [\\".com\\", \\".org\\"]) # Returns \\"example.com\\" extract_domain(\\"https://another.example.org\\", [\\".com\\", \\".org\\"]) # Returns \\"example.org\\" extract_domain(\\"http://example.net\\", [\\".com\\", \\".org\\"]) # Returns None extract_domain(\\"https://sub.test.co.uk\\", [\\".co.uk\\", \\".org\\"]) # Returns \\"test.co.uk\\" ``` **Constraints**: - Only the suffix (e.g., `.com`, `.org`, `.net`, `.co.uk`) needs to be checked. - The function should handle URLs with subdomains correctly. - The URL will be a valid URL string. Use the provided example to ensure your function works correctly. Make sure to handle edge cases like URLs without subdomains or with uncommon suffixes.","solution":"from urllib.parse import urlparse def extract_domain(url, suffix_list): Extract the domain from the given URL and check if it matches the allowed suffix list. Parameters: url (str): The URL string to extract the domain from. suffix_list (list of str): A list of allowed domain suffixes (e.g., [\'.com\', \'.org\', \'.net\']). Returns: str: The domain name if the URL is valid based on the provided suffix list, otherwise None. parsed_url = urlparse(url) hostname = parsed_url.hostname if hostname: hostname_parts = hostname.split(\'.\') # Check from the end of the hostname to handle multi-level TLDs like .co.uk for i in range(len(hostname_parts)): suffix = \'.\' + \'.\'.join(hostname_parts[i:]) if suffix in suffix_list: return \'.\'.join(hostname_parts[i-1:]) return None"},{"question":"**Objective:** You are required to implement a function `capitalize_words` that takes a string input `text` containing multiple words separated by either a space, comma, or period, and returns a new string where the first letter of each word is capitalized. **Requirements:** 1. The function must handle words separated by spaces, commas, and periods. 2. Ignore any leading or trailing spaces in the input string. 3. Maintain the same punctuation (commas and periods) in their positions in the output string. **Input:** 1. `text`: A string containing multiple words separated by spaces, commas, or periods. **Output:** The function should return a new string with the first letter of each word capitalized, and other punctuation (commas and periods) retained in their original positions. **Example:** ```python text = \\"hello, world. this is a test.\\" result = capitalize_words(text) print(result) ``` **Expected Output:** ```plaintext \\"Hello, World. This Is A Test.\\" ``` **Instructions:** 1. Consider each word being separated by a space, comma, or period and capitalize the first letter. 2. Punctuation marks should not be changed or removed in the output. 3. Ensure to handle multiple delimiters correctly (e.g., \\"this, is. it\\" -> \\"This, Is. It\\"). 4. Handle edge cases like empty strings or strings with only punctuation correctly. **Function Signature:** ```python def capitalize_words(text: str) -> str: pass ```","solution":"def capitalize_words(text: str) -> str: Capitalizes the first letter of each word in the given text. Words can be separated by spaces, commas, or periods. Punctuation maintains its position. :param text: A string containing multiple words with spaces, commas, or periods. :return: A new string with each word capitalized, maintaining punctuation. import re return re.sub(r\'bw\', lambda m: m.group().upper(), text.strip())"},{"question":"Simulate a ticket booking system for an event. Customers arrive at random times and request a certain number of tickets. The system processes each customer in the order they arrive, and if there are enough tickets available, the customer\'s request is fulfilled. If not, the customer\'s request is denied. The function should use `queue.Queue` to store arriving customers, `collections.namedtuple` for defining customer request data, and `random` to simulate inter-arrival times and the number of tickets requested. The function runs the simulation for a given number of customers and a fixed number of available tickets. It returns a list of tuples containing (\'Customer ID\', \'Arrival Time\', \'Tickets Requested\', \'Request Status\') where \'Request Status\' is either \'Fulfilled\' or \'Denied\'. You should write self-contained code starting with: ``` import queue import collections import random def ticket_booking_system(num_customers, total_tickets): ```","solution":"import queue import collections import random CustomerRequest = collections.namedtuple(\'CustomerRequest\', [\'id\', \'arrival_time\', \'tickets_requested\']) def ticket_booking_system(num_customers, total_tickets): # Initialize the queue to store customer requests customer_queue = queue.Queue() # Simulate customer requests for customer_id in range(1, num_customers + 1): arrival_time = random.uniform(0, 10) # Random arrival time between 0 and 10 tickets_requested = random.randint(1, 5) # Random number of tickets requested between 1 and 5 customer_queue.put(CustomerRequest(customer_id, arrival_time, tickets_requested)) # Process the customer requests results = [] available_tickets = total_tickets while not customer_queue.empty(): customer = customer_queue.get() if customer.tickets_requested <= available_tickets: results.append((customer.id, customer.arrival_time, customer.tickets_requested, \'Fulfilled\')) available_tickets -= customer.tickets_requested else: results.append((customer.id, customer.arrival_time, customer.tickets_requested, \'Denied\')) return results"},{"question":"**Title: Finding the Smallest Window to Sort** Given an array of non-negative integers, you need to determine the shortest subarray that should be sorted in ascending order so that the entire array becomes sorted in ascending order. If the array is already sorted, return an empty list. # Function Signature ```python def find_unsorted_subarray(nums: List[int]) -> List[int]: pass ``` # Input - `nums`: A list of non-negative integers `[n1, n2, ..., nn]`. # Output - Returns a list of two integers representing the indices of the left and right boundaries of the subarray that needs to be sorted. If the array is already sorted, return an empty list. # Constraints - The input list `nums` will have at least one element and at most `10^5` elements. - The integers in the list will be between `0` and `10^5`. # Example ```python assert find_unsorted_subarray([2, 6, 4, 8, 10, 9, 15]) == [1, 5] assert find_unsorted_subarray([1, 2, 3, 4]) == [] assert find_unsorted_subarray([1]) == [] assert find_unsorted_subarray([3, 2, 1]) == [0, 2] ``` # Instructions - The aim is to find the minimal length of the subarray so that sorting this subarray would make the entire array sorted. - The function should identify the first and last positions where the array is not sorted relative to the sorted version of the full array.","solution":"def find_unsorted_subarray(nums): Returns the indices of the smallest subarray which, if sorted, would make the whole array sorted. n = len(nums) start, end = -1, -1 max_seen, min_seen = -float(\'inf\'), float(\'inf\') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i if start == -1 and end == -1: return [] else: return [start, end]"},{"question":"Write a custom function named `add_labels_to_bars`, which takes a list of numerical values and corresponding list of labels, and creates a bar chart using `matplotlib`. Each bar should be labeled at its top with the corresponding label from the list. The labels should be centered at the top of each bar and displayed with a font size of 12. The function prototype is as follows: ```python def add_labels_to_bars(values: list, labels: list): ``` # Requirements: 1. Use the `matplotlib.pyplot.bar` function to create the bar chart. 2. Use `matplotlib.pyplot.text` to place labels at the top of each bar. 3. Ensure the bars are labeled correctly according to the provided values and labels. 4. Ensure the font size of the labels is set to 12. # Example: ```python import matplotlib.pyplot as plt # Example usage of the add_labels_to_bars function values = [10, 15, 7, 10, 5] labels = [\'A\', \'B\', \'C\', \'D\', \'E\'] add_labels_to_bars(values, labels) plt.show() ``` This function should be useful for anyone who wants to add descriptive labels to the top of their bar chart bars for better readability and presentation quality. **Hints:** - Remember to import `matplotlib.pyplot as plt` at the beginning of your script. - Use the range of the length of `values` to create the positions of the bars.","solution":"import matplotlib.pyplot as plt def add_labels_to_bars(values: list, labels: list): Creates a bar chart with the given values and labels each bar at its top with the corresponding label. Parameters: values (list): A list of numerical values for the heights of the bars. labels (list): A list of corresponding labels for each bar. # Create the bar chart bar_positions = range(len(values)) plt.bar(bar_positions, values) # Label bars with provided labels for pos, value, label in zip(bar_positions, values, labels): plt.text(pos, value, label, ha=\'center\', va=\'bottom\', fontsize=12)"},{"question":"You are required to implement a function `find_closest_elements` that aims to find the `k` closest integers to a given integer `x` from a sorted list. This exercise will help you work with list manipulation and binary search efficiently. # Function Signature ```python def find_closest_elements(arr: list[int], k: int, x: int) -> list[int]: ``` # Parameters: - `arr` (list of int): A sorted list of integers. - `k` (int): The number of closest integers to find. - `x` (int): The reference integer to which closeness is determined. # Behavior: - The function should return a list of `k` integers from `arr` which are closest to the integer `x`. - The result should also be sorted in ascending order. - If there is a tie (i.e., two numbers are equally close to `x`), the smaller number should be preferred. # Implementation Details: - Utilize binary search to find the insertion point or the closest elements around `x`. - Employ two pointers, start and end, to find the range of the closest `k` elements and adjust based on comparisons between distances. # Example: ```python arr = [1, 2, 3, 4, 5] find_closest_elements(arr, 4, 3) ``` Should produce the output: ```python [1, 2, 3, 4] ``` # Requirements: - The function should handle edge cases such as if `k` equals the length of the array, or if `x` is smaller or larger than all elements in `arr`. - Ensure that the function adheres to the provided function signature and behavior. - Optimize for time complexity where possible.","solution":"from bisect import bisect_left def find_closest_elements(arr, k, x): Finds the k closest integers to x from a sorted list arr. # Binary search to find the closest element to x pos = bisect_left(arr, x) # Initializing two pointers left = pos - 1 right = pos # Collecting the closest k elements result = [] while k > 0: if left < 0: # if left pointer is out of bounds result.append(arr[right]) right += 1 elif right >= len(arr): # if right pointer is out of bounds result.append(arr[left]) left -= 1 elif abs(arr[left] - x) <= abs(arr[right] - x): result.append(arr[left]) left -= 1 else: result.append(arr[right]) right += 1 k -= 1 # Sorting the result list result.sort() return result"},{"question":"You are asked to implement a function that takes a list of integers and returns a new list where each element is the product of all the integers in the original list except the one at that position. You must accomplish this without using division and in linear time complexity. Write a function named `product_except_self` that follows these instructions: **Function Signature:** ```python def product_except_self(nums: List[int]) -> List[int]: pass ``` **Requirements:** 1. The function should use O(n) time complexity. 2. The function should not use division to solve the problem. 3. Your solution should use O(1) additional space complexity beyond the output list (i.e., the output list itself does not count as extra space). # Example: ```python # Example 1 input: [1, 2, 3, 4] output: [24, 12, 8, 6] # Explanation: # The product of all elements except nums[0] is 2*3*4 = 24 # The product of all elements except nums[1] is 1*3*4 = 12 # The product of all elements except nums[2] is 1*2*4 = 8 # The product of all elements except nums[3] is 1*2*3 = 6 ``` ```python # Example 2 input: [0, 1, 2, 3] output: [6, 0, 0, 0] # Explanation: # The product of all elements except nums[0] is 1*2*3 = 6 # The product of all elements except nums[1] is 0*2*3 = 0 # The product of all elements except nums[2] is 0*1*3 = 0 # The product of all elements except nums[3] is 0*1*2 = 0 ``` # Constraints: - ( 2 leq text{len}(nums) leq 10^5 ) - ( -30 leq nums[i] leq 30 ) - The product of all elements of any prefix or suffix of the array (including the whole array) fits in a 32-bit integer. Implement the `product_except_self` function to solve the given problem.","solution":"from typing import List def product_except_self(nums: List[int]) -> List[int]: n = len(nums) result = [1] * n # Calculate the left products left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate the right products and combine with the left products right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Develop a Python function that performs graph traversal using the Breadth-First Search (BFS) algorithm. Your function should navigate through an undirected graph and return a list of nodes in the order they are visited, starting from a given start node. The function you need to implement is `bfs_traversal(graph, start)`, where: - `graph` is a dictionary where the keys are the nodes of the graph and the values are lists of adjacent nodes. - `start` is the node from which the BFS traversal should begin. The function `bfs_traversal(graph, start)` should: 1. Initialize an empty list to keep track of the order of visited nodes. 2. Implement the BFS algorithm using a queue to manage the nodes to be explored. 3. Traverse the graph, starting from the `start` node, marking nodes as visited when they are dequeued. 4. Append each visited node to the result list in the order they are visited. The function should return the list of nodes in the order they were visited. Function Signature: ```python def bfs_traversal(graph: dict, start: any) -> list: ``` Example: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start_node = \'A\' result = bfs_traversal(graph, start_node) print(result) # Expected Output: [\'A\', \'B\', \'C\', \'D\', \'E\', \'F\'] ``` In your implementation, ensure that each node is visited once, and that the BFS traversal correctly handles cycles and disconnected graphs. This exercise will help you understand graph traversal techniques, which are essential concepts in algorithms and data structures.","solution":"from collections import deque def bfs_traversal(graph, start): Performs BFS on an undirected graph and returns the list of nodes in the order they are visited starting from the start node. :param graph: Dictionary representing the graph where keys are nodes, and values are lists of adjacent nodes. :param start: The starting node for BFS traversal. :return: List of nodes in the order they are visited. visited = [] queue = deque([start]) seen = set([start]) while queue: node = queue.popleft() visited.append(node) for neighbor in graph.get(node, []): if neighbor not in seen: seen.add(neighbor) queue.append(neighbor) return visited"},{"question":"Write a function that takes a list of positive integers and returns the largest difference between any two elements. The function should handle edge cases where the list is empty or has only one element by returning 0. Additionally, consider both unsorted and sorted lists as input cases. The function should output: int: The largest difference between any two elements in the list or 0 for edge cases. You should write self-contained code starting with: ``` def largest_difference(numbers): ```","solution":"def largest_difference(numbers): Returns the largest difference between any two elements in the list. If the list is empty or contains only one element, returns 0. if len(numbers) < 2: return 0 return max(numbers) - min(numbers)"},{"question":"# Sudoku Solver You are required to implement a function `solve_sudoku(board)` that solves a given 9x9 Sudoku puzzle using backtracking. The Sudoku puzzle is represented by a 2D list. Empty cells are denoted by `0`. The function should modify the puzzle in-place to fill the empty cells with valid digits from `1` to `9`. # Function Signature: ```python def solve_sudoku(board: List[List[int]]) -> None: ``` # Parameters: - `board`: A 2D list of integers representing the Sudoku puzzle. # Returns: - The function does not need to return anything. It should modify the `board` in-place. # Constraints: - Each row, column, and 3x3 sub-box must contain the digits 1 to 9 without repetition. - The given puzzle is valid and has exactly one solution. # Example: Suppose `board` is: ``` [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] ``` After calling `solve_sudoku(board)`, the `board` should be modified to: ``` [ [5, 3, 4, 6, 7, 8, 9, 1, 2], [6, 7, 2, 1, 9, 5, 3, 4, 8], [1, 9, 8, 3, 4, 2, 5, 6, 7], [8, 5, 9, 7, 6, 1, 4, 2, 3], [4, 2, 6, 8, 5, 3, 7, 9, 1], [7, 1, 3, 9, 2, 4, 8, 5, 6], [9, 6, 1, 5, 3, 7, 2, 8, 4], [2, 8, 7, 4, 1, 9, 6, 3, 5], [3, 4, 5, 2, 8, 6, 1, 7, 9] ] ``` Note: - `solve_sudoku(board)` should update the given board list to the solved Sudoku puzzle.","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): for i in range(9): if board[row][i] == num: return False if board[i][col] == num: return False if board[(row // 3) * 3 + i // 3][(col // 3) * 3 + i % 3] == num: return False return True def solve(): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(): return True board[row][col] = 0 return False return True solve()"},{"question":"You are given information about various programming projects as a dictionary `projects`. Each project contains its name, a list of team members, the deadlines for different milestones, and a priority level. Your task is to write a Python function `save_projects_info` which saves this information to two files: a CSV file using the `csv.writer` library and a JSON file using the `json.dump` library. The `projects` dictionary is structured as follows: ```python projects = { \'project1\': { \'name\': \'Project Alpha\', \'team\': [\'Alice\', \'Bob\'], \'deadlines\': { \'milestone1\': \'2023-01-15\', \'milestone2\': \'2023-02-20\' }, \'priority\': \'High\' }, \'project2\': { \'name\': \'Project Beta\', \'team\': [\'Charlie\', \'David\'], \'deadlines\': { \'milestone1\': \'2023-03-10\' }, \'priority\': \'Medium\' } } ``` The CSV file should be structured in the following format: ``` project_id,name,team,deadlines,priority project1,Project Alpha,\\"[\'Alice\', \'Bob\']\\",{\\"milestone1\\": \\"2023-01-15\\", \\"milestone2\\": \\"2023-02-20\\"},High project2,Project Beta,\\"[\'Charlie\', \'David\']\\",{\\"milestone1\\": \\"2023-03-10\\"},Medium ``` The JSON file should contain the projects information in the following format: ```json { \\"project1\\": { \\"name\\": \\"Project Alpha\\", \\"team\\": [\\"Alice\\", \\"Bob\\"], \\"deadlines\\": { \\"milestone1\\": \\"2023-01-15\\", \\"milestone2\\": \\"2023-02-20\\" }, \\"priority\\": \\"High\\" }, \\"project2\\": { \\"name\\": \\"Project Beta\\", \\"team\\": [\\"Charlie\\", \\"David\\"], \\"deadlines\\": { \\"milestone1\\": \\"2023-03-10\\" }, \\"priority\\": \\"Medium\\" } } ``` # Function Signature ```python def save_projects_info(projects: dict, csv_filename: str, json_filename: str) -> None: # Your implementation goes here pass ``` # Constraints - You must use `csv.writer` to write the CSV file. - You must use `json.dump` to write the JSON file. - Handle any special serialization requirements for data structures in CSV format (lists and dictionaries). # Example ```python import json import csv projects = { \'project1\': { \'name\': \'Project Alpha\', \'team\': [\'Alice\', \'Bob\'], \'deadlines\': { \'milestone1\': \'2023-01-15\', \'milestone2\': \'2023-02-20\' }, \'priority\': \'High\' }, \'project2\': { \'name\': \'Project Beta\', \'team\': [\'Charlie\', \'David\'], \'deadlines\': { \'milestone1\': \'2023-03-10\' }, \'priority\': \'Medium\' } } save_projects_info(projects, \'projects_info.csv\', \'projects_info.json\') ```","solution":"import csv import json def save_projects_info(projects: dict, csv_filename: str, json_filename: str) -> None: # Write to CSV file with open(csv_filename, \'w\', newline=\'\') as csv_file: writer = csv.writer(csv_file) # Write the header row writer.writerow([\'project_id\', \'name\', \'team\', \'deadlines\', \'priority\']) # Write the data rows for project_id, project_info in projects.items(): writer.writerow([ project_id, project_info[\'name\'], json.dumps(project_info[\'team\']), # Serialize list to string json.dumps(project_info[\'deadlines\']), # Serialize dict to string project_info[\'priority\'] ]) # Write to JSON file with open(json_filename, \'w\') as json_file: json.dump(projects, json_file, indent=4)"},{"question":"You have been given a pandas DataFrame `df` with a column named `\\"temperature\\"`. Your task is to write a function called `plot_temperature_trend` that takes in three parameters: `df`, `start_date`, and `end_date`. This function should generate and display a line plot of the temperature values over time. Here are the specific requirements for the function: 1. Create a subset of the DataFrame that only includes rows where the date falls between `start_date` and `end_date` (inclusive). Assume the DataFrame has a column named `\\"date\\"` in datetime format. 2. Create a figure using `matplotlib.pyplot.figure` with a size of 10x6 inches. 3. Plot the `\\"temperature\\"` values against the `\\"date\\"` values, with the line color set to \\"darkgreen\\" and a line width of 1.5. 4. Add a horizontal dashed red line at y = 0, with a width of 1. 5. Set the title of the plot to \\"Temperature Trend\\". 6. Label the x-axis as \\"Date\\" and the y-axis as \\"Temperature (°C)\\". 7. Optionally, format the x-axis labels to improve readability by using `plt.xticks(rotation=45)`. 8. Display the plot using `matplotlib.pyplot.show`. You should import the necessary libraries and ensure that all steps are implemented using the appropriate functions from the `matplotlib.pyplot` library. Here\'s a template to get you started: ```python import matplotlib.pyplot as plt import pandas as pd def plot_temperature_trend(df, start_date, end_date): # Your code goes here pass ```","solution":"import matplotlib.pyplot as plt import pandas as pd def plot_temperature_trend(df, start_date, end_date): Generates and displays a line plot of temperature trends over time. Parameters: df (pd.DataFrame): DataFrame containing date and temperature columns. start_date (str): The start date (inclusive) in \'YYYY-MM-DD\' format. end_date (str): The end date (inclusive) in \'YYYY-MM-DD\' format. # Filter the DataFrame to include only rows where the date is within the specified range date_mask = (df[\'date\'] >= start_date) & (df[\'date\'] <= end_date) filtered_df = df[date_mask] # Create a figure plt.figure(figsize=(10, 6)) # Plot the temperature trend plt.plot(filtered_df[\'date\'], filtered_df[\'temperature\'], color=\'darkgreen\', linewidth=1.5) # Add a horizontal dashed red line at y = 0 plt.axhline(y=0, color=\'red\', linestyle=\'--\', linewidth=1) # Set plot title and axis labels plt.title(\'Temperature Trend\') plt.xlabel(\'Date\') plt.ylabel(\'Temperature (°C)\') # Optionally format x-axis labels plt.xticks(rotation=45) # Display the plot plt.show()"},{"question":"You are required to write a function named `sum_digits` that computes the sum of the digits of an integer number until the sum is a single digit number. This process is sometimes referred to as finding the \\"digital root\\" of a number. Here are the specifications for the `sum_digits` function: - **Function name:** `sum_digits` - **Parameters:** - `num` (int): The integer number whose digits are to be summed. - **Functionality:** - Compute the sum of the digits of `num`. - If the resulting sum is more than one digit, repeat the sum of digits process on the new number. - Continue this process until the result is a single-digit number. - Return the single-digit sum. **Example Usage:** ```python sum_digits(942) ``` When the function `sum_digits` is called with `942`: - The first sum of digits is 9 + 4 + 2 = 15. - Since 15 is more than one digit, the sum of its digits is calculated: 1 + 5 = 6. - The final result is 6, which is a single-digit number. Thus, `sum_digits(942)` returns `6`. **Another Example Usage:** ```python sum_digits(1234) ``` When the function `sum_digits` is called with `1234`: - The first sum of digits is 1 + 2 + 3 + 4 = 10. - Since 10 is more than one digit, the sum of its digits is calculated: 1 + 0 = 1. - The final result is 1, which is a single-digit number. Thus, `sum_digits(1234)` returns `1`. # Requirements: 1. **Ensure the function correctly computes the sum of the digits and reduces to a single-digit number. 2. **Only write the `sum_digits` function as described.","solution":"def sum_digits(num): Computes the sum of the digits of \'num\' until the sum is a single digit. Parameters: num (int): The integer number whose digits are to be summed. Returns: int: The single-digit sum. # Ensure \'num\' is positive num = abs(num) while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Implement a function `custom_sort_list` that sorts a list of tuples based on multiple criteria. Each tuple contains three elements: a string, an integer, and a floating-point number. The list should be sorted primarily by the string (lexicographically), secondarily by the integer (in ascending order), and finally by the floating-point number (in descending order). # Function Signature ```python def custom_sort_list(tuple_list): # implementation ``` # Parameters 1. `tuple_list` (List[Tuple[str, int, float]]): A list of tuples where each tuple contains a string, an integer, and a floating-point number. # Requirements - The function should sort the list primarily by the string value lexicographically. - If two strings are the same, it should sort them by the integer in ascending order. - If both the string and integer are the same, it should sort them by the floating-point number in descending order. # Example Usage ```python tuple_list = [ (\\"apple\\", 2, 1.5), (\\"banana\\", 1, 2.0), (\\"apple\\", 1, 1.0), (\\"banana\\", 1, 1.5), (\\"apple\\", 2, 2.0) ] sorted_list = custom_sort_list(tuple_list) print(sorted_list) ``` Expected output: ``` [ (\\"apple\\", 1, 1.0), (\\"apple\\", 2, 2.0), (\\"apple\\", 2, 1.5), (\\"banana\\", 1, 2.0), (\\"banana\\", 1, 1.5) ] ``` # Additional Notes - Ensure that the function works efficiently for a reasonably large list of tuples. - Avoid using built-in sort functions that cannot handle multiple criteria; you need to implement the sort functionality according to the specified criteria.","solution":"def custom_sort_list(tuple_list): Sorts a list of tuples based on multiple criteria: 1. Primarily by the string (lexicographically). 2. Secondarily by the integer (in ascending order). 3. Finally by the floating-point number (in descending order). return sorted(tuple_list, key=lambda x: (x[0], x[1], -x[2]))"},{"question":"You are required to implement a function `get_unique_anagrams` that identifies unique anagrams from a given list of words. The function should utilize sorting of each word to identify anagrams. # Function Specification - **Function Name**: `get_unique_anagrams` - **Parameters**: - `words` (List[str]): A list of strings containing the words. - **Output**: - Return a list of unique anagrams, where each group contains one word representative of that anagram. # Implementation Requirements - Use sorting of the characters in each word to determine if two words are anagrams. - Ensure that the output contains only one word from each group of anagrams in any order. # Example Suppose we have the following list of words: ```python words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gogole\\", \\"cat\\", \\"act\\", \\"tac\\"] ``` When calling `get_unique_anagrams(words)`, it should return a list such as: ```python [\\"listen\\", \\"google\\", \\"cat\\"] ``` # Additional Notes - The function should handle cases with mixed case letters (e.g., consider \\"Listen\\" and \\"silent\\" as anagrams). - The function should be case insensitive but return the words in their original form. - Ensure that the original list is not modified during the process.","solution":"def get_unique_anagrams(words): Identifies unique anagrams from a given list of words. Parameters: words (List[str]): A list of strings containing the words. Returns: List[str]: A list of unique anagrams, where each group contains one word representative of that anagram. unique = {} for word in words: key = \'\'.join(sorted(word.lower())) if key not in unique: unique[key] = word return list(unique.values())"},{"question":"You are tasked with implementing a function to balance a given bracket expression. The goal is to determine the minimum number of bracket insertions needed to make the expression balanced. A balanced bracket expression is one where each opening bracket \'(\' has a corresponding closing bracket \')\', and they are correctly nested. **Function Signature:** ```python def min_bracket_insertions(expr: str) -> int: ... ``` **Input:** - `expr`: A string consisting of only the characters \'(\' and \')\'. The length of the string is between 1 and (10^5). **Output:** - An integer representing the minimum number of bracket insertions needed to balance the expression. **Examples:** 1. `min_bracket_insertions(\\"(()\\")` should return `1` - Only one closing bracket is needed to balance the expression. Balanced string could be \\"(()))\\". 2. `min_bracket_insertions(\\"())\\")` should return `1` - Only one opening bracket is needed to balance the expression. Balanced string could be \\"(())\\". 3. `min_bracket_insertions(\\")(\\")` should return `2` - Two insertions are needed: one opening bracket at the beginning and one closing bracket at the end. Balanced string could be \\"()()\\". 4. `min_bracket_insertions(\\"\\")` should return `0` - The empty string is already balanced. **Guidelines:** 1. Traverse the string from left to right. 2. Keep track of the number of unmatched opening and closing brackets. 3. Calculate the insertions required to balance any unmatched brackets at the end of the traversal.","solution":"def min_bracket_insertions(expr: str) -> int: Returns the minimum number of bracket insertions needed to balance the expression. open_brackets = 0 insertions_needed = 0 for char in expr: if char == \'(\': open_brackets += 1 elif char == \')\': if open_brackets > 0: open_brackets -= 1 else: insertions_needed += 1 # Add the remaining open brackets to the insertions needed insertions_needed += open_brackets return insertions_needed"},{"question":"You are tasked with writing a Python function `longest_common_subsequence` that finds the longest common subsequence between two strings. The function should return the length of this subsequence. The function `longest_common_subsequence` should: 1. Take two arguments `s1` and `s2`, which are strings. 2. Compute the length of the longest common subsequence of `s1` and `s2`. 3. Use dynamic programming to achieve an efficient solution. 4. Return an integer representing the length of the longest common subsequence. Here is some additional context to guide your implementation: - Use a 2D list (matrix) to store the lengths of the longest common subsequence up to each index in the strings. - Initialize the 2D list with zeros. - Fill the matrix using two nested loops over the characters of the input strings. - Make sure your function handles the case where either or both strings are empty. Example: ```python s1 = \\"abcdaf\\" s2 = \\"acbcf\\" length = longest_common_subsequence(s1, s2) print(length) # Output should be: 4 ```","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings. m, n = len(s1), len(s2) # Create a 2D array to store the lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You are given two lists, `source_list` and `target_list`, each containing integers. Your task is to write a function named `rearrange_source` that rearranges the elements in `source_list` such that the relative order of the values in `source_list` matches the relative order of corresponding values in `target_list`. Specifically, the function should: 1. Sort `source_list` to create a new list `sorted_source`. 2. Use the sorted values from `sorted_source` to rearrange `source_list` to match the relative order defined by `target_list`. You may assume that the values in `target_list` are a permutation of those in `source_list`. # Function Signature ```python def rearrange_source(source_list, target_list): pass ``` # Input - `source_list`: A list of integers with unique values. - `target_list`: A list of integers with the same unique values as `source_list`, but in different order. # Output - Returns a list of integers representing the rearranged `source_list`. # Example ```python source_list = [4, 1, 7, 3] target_list = [1, 7, 3, 4] result = rearrange_source(source_list, target_list) print(result) # Output should be: [1, 7, 3, 4] ``` # Requirements - You must use sorting functions or methods to sort `source_list`.","solution":"def rearrange_source(source_list, target_list): Rearranges the elements in source_list such that the relative order of the elements matches that in target_list using a sorted source_list. # Create a mapping from element to its position in source_list value_to_index = {value: i for i, value in enumerate(target_list)} # Sort the source_list based on the order in target_list sorted_source = sorted(source_list, key=lambda x: value_to_index[x]) return sorted_source"},{"question":"You are required to implement a function to manage the inventory of a bookstore stored in a JSON file. Specifically, you need to search for a book by its ISBN and update its title, author, and price. The changes should be saved back into the JSON file. The inventory is stored in \'inventory.json\' in the following format: ```json [ { \\"ISBN\\": \\"1234567890\\", \\"title\\": \\"Sample Book 1\\", \\"author\\": \\"Author 1\\", \\"price\\": 9.99 }, { \\"ISBN\\": \\"0987654321\\", \\"title\\": \\"Sample Book 2\\", \\"author\\": \\"Author 2\\", \\"price\\": 14.99 } ] ``` The function you will write, named `update_book_record`, should: 1. Take no arguments. 2. Prompt the user to input the ISBN of the book they want to update. 3. Read the \'inventory.json\' file and search for the book with the matching ISBN. If found, prompt for the book\'s new title, author, and price, and update these values. 4. Save the updated inventory back into \'inventory.json\'. 5. Use proper exception handling to manage potential errors such as file not found or invalid JSON format. You can use Python’s built-in `json` module to handle reading from and writing to the JSON file. Here’s the necessary import statement: ```python import json ``` Here\'s an example of how the \'inventory.json\' file might be structured for the update process: ```json [ { \\"ISBN\\": \\"1111111111\\", \\"title\\": \\"New Title\\", \\"author\\": \\"New Author\\", \\"price\\": 19.99 } ] ```","solution":"import json def update_book_record(): try: # Read the current inventory with open(\'inventory.json\', \'r\') as f: inventory = json.load(f) # Prompt user for ISBN isbn = input(\\"Enter the ISBN of the book to update: \\") # Find the book in the inventory book = next((item for item in inventory if item[\\"ISBN\\"] == isbn), None) if book is None: print(\\"Book not found.\\") return # Prompt for new details new_title = input(\\"Enter new title: \\") new_author = input(\\"Enter new author: \\") new_price = float(input(\\"Enter new price: \\")) # Update the book details book[\\"title\\"] = new_title book[\\"author\\"] = new_author book[\\"price\\"] = new_price # Write the updated inventory back to the file with open(\'inventory.json\', \'w\') as f: json.dump(inventory, f, indent=4) print(\\"Book details updated successfully.\\") except FileNotFoundError: print(\\"The inventory file was not found.\\") except json.JSONDecodeError: print(\\"Error decoding JSON from the inventory file.\\") except ValueError: print(\\"Invalid input for price. Please enter a valid number.\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"You are given a connected undirected graph represented as an adjacency list. Your task is to implement the Breadth-First Search (BFS) algorithm to find the shortest path from a given start node to a target node. If the target node is not reachable from the start node, your function should return an empty list. Breadth-First Search is a graph traversal algorithm that explores vertices level by level, ensuring that the shortest path in terms of the number of edges is found. Please follow these steps to create your solution: 1. Use a queue to explore each vertex\'s neighbors. 2. Keep track of visited nodes to prevent reprocessing. 3. Use a dictionary to store the parent of each visited node for path reconstruction. 4. Once the target node is reached, reconstruct the shortest path using the parent dictionary. Function signature: ```python def bfs_shortest_path(graph, start, target): pass ``` Parameters: - `graph`: A dictionary representing the adjacency list of the graph. The keys are node identifiers, and the values are lists of adjacent nodes. - `start`: The starting node identifier. - `target`: The target node identifier. Your implementation should return a list representing the shortest path from the `start` node to the `target` node, inclusive of both. If no path exists, return an empty list. # Example ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start = \'A\' target = \'F\' print(bfs_shortest_path(graph, start, target)) # Output: [\'A\', \'C\', \'F\'] ``` # Note - You may assume all node identifiers are unique. - The graph is guaranteed to be connected, and all edges are undirected.","solution":"from collections import deque def bfs_shortest_path(graph, start, target): Finds the shortest path in an undirected graph from start node to target node using BFS. Parameters: graph (dict): adjacency list representation of the graph start: the starting node identifier target: the target node identifier Returns: list: the shortest path from start to target node, inclusive of both. Returns an empty list if no path exists. if start == target: return [start] queue = deque([start]) visited = set() parent = {start: None} while queue: current = queue.popleft() visited.add(current) for neighbor in graph[current]: if neighbor not in visited and neighbor not in parent: parent[neighbor] = current if neighbor == target: path = [] while neighbor is not None: path.insert(0, neighbor) neighbor = parent[neighbor] return path queue.append(neighbor) return [] # Example usage: graph_example = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } start_example = \'A\' target_example = \'F\' print(bfs_shortest_path(graph_example, start_example, target_example)) # Output: [\'A\', \'C\', \'F\']"},{"question":"You are required to build a function `simulate_lorenz_attractor` that models the Lorenz system, a set of three coupled differential equations which exhibit chaotic behavior. The Lorenz system is defined as: [ frac{dx}{dt} = sigma (y - x) ] [ frac{dy}{dt} = x (rho - z) - y ] [ frac{dz}{dt} = x y - beta z ] Your task is to implement the function `simulate_lorenz_attractor`: ```python def simulate_lorenz_attractor(x_init, y_init, z_init, sigma=10.0, rho=28.0, beta=2.667, time_step=0.01, num_steps=1000): pass ``` This function should: 1. Use the initial conditions `x_init`, `y_init`, and `z_init` to start the simulation. 2. Generate a time series data matrix for the Lorenz system using the given `sigma`, `rho`, and `beta` parameters. 3. Perform numerical integration using the Runge-Kutta 4th order method (RK4) for each time step. 4. Use `numpy.zeros` to initialize arrays for storing the computed (x, y, z) values over time. 5. Store the results such that each column represents a variable (x, y, or z) and each row represents a time step. ```python import numpy as np def rk4_step(f, y, t, dt): k1 = f(y, t) * dt k2 = f(y + 0.5 * k1, t + 0.5 * dt) * dt k3 = f(y + 0.5 * k2, t + 0.5 * dt) * dt k4 = f(y + k3, t + dt) * dt return y + (k1 + 2*k2 + 2*k3 + k4) / 6 def lorenz_system(state, t, sigma, rho, beta): x, y, z = state dx_dt = sigma * (y - x) dy_dt = x * (rho - z) - y dz_dt = x * y - beta * z return np.array([dx_dt, dy_dt, dz_dt]) def simulate_lorenz_attractor(x_init, y_init, z_init, sigma=10.0, rho=28.0, beta=2.667, time_step=0.01, num_steps=1000): state = np.array([x_init, y_init, z_init]) trajectory = np.zeros((num_steps, 3)) for i in range(num_steps): trajectory[i] = state state = rk4_step(lambda s, t: lorenz_system(s, t, sigma, rho, beta), state, i * time_step, time_step) return trajectory ``` Implement the `simulate_lorenz_attractor` function such that it uses the RK4 for numerical integration, and returns the computed (x, y, z) values over time in the correct format.","solution":"import numpy as np def rk4_step(f, y, t, dt): k1 = f(y, t) * dt k2 = f(y + 0.5 * k1, t + 0.5 * dt) * dt k3 = f(y + 0.5 * k2, t + 0.5 * dt) * dt k4 = f(y + k3, t + dt) * dt return y + (k1 + 2*k2 + 2*k3 + k4) / 6 def lorenz_system(state, t, sigma, rho, beta): x, y, z = state dx_dt = sigma * (y - x) dy_dt = x * (rho - z) - y dz_dt = x * y - beta * z return np.array([dx_dt, dy_dt, dz_dt]) def simulate_lorenz_attractor(x_init, y_init, z_init, sigma=10.0, rho=28.0, beta=2.667, time_step=0.01, num_steps=1000): state = np.array([x_init, y_init, z_init]) trajectory = np.zeros((num_steps, 3)) for i in range(num_steps): trajectory[i] = state state = rk4_step(lambda s, t: lorenz_system(s, t, sigma, rho, beta), state, i * time_step, time_step) return trajectory"},{"question":"**Task**: You are given a list of strings where each string represents a student\'s record in the format `\\"Name: Grade\\"`. Your objective is to implement a function `compute_grade_stats` that will: - Compute the average, maximum, and minimum grade. - Generate a summary report. **Function Signature**: ```python def compute_grade_stats(student_records: list) -> dict: ``` Details: 1. **Input**: - `student_records` (list): A list of strings, where each string is in the format `\\"Name: Grade\\"`. The `Grade` is an integer. 2. **Output**: - `report` (dict): A dictionary with the following key-value pairs: - `\\"average\\"`: The average grade of all students. - `\\"maximum\\"`: The maximum grade among all students. - `\\"minimum\\"`: The minimum grade among all students. Example: ```python student_records = [ \\"Alice: 85\\", \\"Bob: 78\\", \\"Charlie: 90\\", \\"Diana: 92\\", \\"Eve: 88\\" ] # The expected output: # { # \\"average\\": 86.6, # \\"maximum\\": 92, # \\"minimum\\": 78 # } ``` Notes: 1. Parse the input list to extract grades. 2. Compute the average, maximum, and minimum grades. 3. Round the average grade to one decimal place. Your task is to implement the `compute_grade_stats` function that adheres to the described behavior and requirements.","solution":"def compute_grade_stats(student_records): Computes the average, maximum, and minimum grade from a list of student records. grades = [] for record in student_records: # Split the record to extract the name and grade name, grade = record.split(\\": \\") grades.append(int(grade)) # Calculate the average, maximum and minimum grades average = round(sum(grades) / len(grades), 1) maximum = max(grades) minimum = min(grades) # Create the summary report report = { \\"average\\": average, \\"maximum\\": maximum, \\"minimum\\": minimum } return report"},{"question":"In this problem, your task is to create a function that transposes a given matrix and then scales each element by a specified factor. The function should take an input matrix and a scaling factor, return the new matrix, which is the scaled transpose of the input matrix. You are required to write a function named `transpose_and_scale_matrix` that achieves this transformation. Function signature: ```python def transpose_and_scale_matrix(matrix, scale): Transposes the input matrix and scales each element by the specified factor. Args: - matrix (list of list of int/float): The input matrix. - scale (int/float): The scaling factor. Returns: - list of list of int/float: The transposed and scaled matrix. ``` Arguments: - `matrix`: A list of lists where each sub-list represents a row in the matrix. - `scale`: An integer or float representing the scaling factor for the transpose of the matrix. The function should: 1. Transpose the input matrix. 2. Scale each element in the transposed matrix by the specified scaling factor. 3. Return the resulting matrix. Example: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] scale = 2 # Expected output: # [ # [2, 8, 14], # [4, 10, 16], # [6, 12, 18] # ] print(transpose_and_scale_matrix(matrix, scale)) ```","solution":"def transpose_and_scale_matrix(matrix, scale): Transposes the input matrix and scales each element by the specified factor. Args: - matrix (list of list of int/float): The input matrix. - scale (int/float): The scaling factor. Returns: - list of list of int/float: The transposed and scaled matrix. # Transposing the matrix transposed_matrix = list(map(list, zip(*matrix))) # Scaling each element in the transposed matrix for i in range(len(transposed_matrix)): for j in range(len(transposed_matrix[0])): transposed_matrix[i][j] *= scale return transposed_matrix # Example usage matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] scale = 2 print(transpose_and_scale_matrix(matrix, scale)) # Expected output: # [ # [2, 8, 14], # [4, 10, 16], # [6, 12, 18] # ]"},{"question":"You are given data collected from a series of experiments where the time taken to complete a task is recorded. To analyze the efficiency of the task, you need to sort this data and calculate the median time. Write a function `calculate_median_task_time(times)` that takes a list of recorded times (in seconds) and returns the median time. The median is defined as the middle number in a sorted list of numbers. If the list has an even number of entries, the median is the arithmetic mean of the two middle numbers. Your function should use a sorting algorithm to sort the list and then compute the median. Parameters: - `times` (list of floats or integers): The list of recorded times (e.g., [10.5, 7.2, 4.8, 2.3, 9.1]). Return: - A single float value representing the median time. Example: ```python def calculate_median_task_time(times): sorted_times = sorted(times) n = len(sorted_times) if n % 2 == 1: median = sorted_times[n // 2] else: median = (sorted_times[n // 2 - 1] + sorted_times[n // 2]) / 2 return median # Example usage times = [10.5, 7.2, 4.8, 2.3, 9.1] median_time = calculate_median_task_time(times) print(median_time) # Output: 7.2 ``` Your task is to implement the `calculate_median_task_time` function according to the given specification.","solution":"def calculate_median_task_time(times): Calculates the median task time from a list of recorded times. Parameters: times (list of floats or integers): The list of recorded times. Returns: float: The median task time. sorted_times = sorted(times) n = len(sorted_times) if n % 2 == 1: return float(sorted_times[n // 2]) else: return (sorted_times[n // 2 - 1] + sorted_times[n // 2]) / 2"},{"question":"**Problem: Palindrome Permutation Checker** You are required to write a function named `can_form_palindrome` that takes a single argument `s`, which is a non-empty string consisting of lowercase letters. The function should determine whether any permutation of the characters in the string can form a palindrome. **Requirements:** 1. The function should return `True` if any permutation of the string can form a palindrome, otherwise return `False`. 2. Optimize for the solution so that it runs efficiently even for large input sizes. **Function Definition:** ```python def can_form_palindrome(s): \'\'\' This function checks if any permutation of the input string can form a palindrome. Parameters: s (str): The input string, consisting of lowercase letters. Returns: bool: True if a permutation can form a palindrome, False otherwise. \'\'\' ``` **Steps to solve:** 1. Count the frequency of each character in the string. 2. A string can be permuted to form a palindrome if at most one character has an odd count (in the case of odd length strings) while all others must have even counts. 3. Return `True` if the condition is met otherwise return `False`. **Constraints:** 1. The input string `s` is guaranteed to be non-empty. 2. The input string contains only lowercase letters (`\'a\'` to `\'z\'`).","solution":"def can_form_palindrome(s): Checks if any permutation of the input string can form a palindrome. Parameters: s (str): The input string, consisting of lowercase letters. Returns: bool: True if a permutation can form a palindrome, False otherwise. from collections import Counter counts = Counter(s) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Write a function `aggregate_sales_by_category(sales_data)` that aggregates sales data by product category. The function takes a list of dictionaries as input, where each dictionary represents a sale record with `product_name`, `category`, and `amount` fields. The goal is to sum up the `amount` for each category and return a resulting dictionary with categories as keys and total sales amounts as values. Here is how the function should work: 1. The function `aggregate_sales_by_category(sales_data)` takes `sales_data`, a list of dictionaries, where each dictionary has the keys: - `product_name`: a string representing the name of the product. - `category`: a string representing the category of the product. - `amount`: a float representing the sale amount. 2. The function computes the sum of `amount` for each unique `category`. 3. It returns a dictionary where keys are the categories, and values are the summed amounts for each category. # Function Signature ```python def aggregate_sales_by_category(sales_data: list) -> dict: pass ``` # Example Usage ```python sales_data = [ {\\"product_name\\": \\"laptop\\", \\"category\\": \\"electronics\\", \\"amount\\": 1200.0}, {\\"product_name\\": \\"headphones\\", \\"category\\": \\"electronics\\", \\"amount\\": 200.0}, {\\"product_name\\": \\"coffee machine\\", \\"category\\": \\"home appliances\\", \\"amount\\": 150.0}, {\\"product_name\\": \\"blender\\", \\"category\\": \\"home appliances\\", \\"amount\\": 100.0} ] result = aggregate_sales_by_category(sales_data) print(result) ``` Expected Output: ```python { \\"electronics\\": 1400.0, \\"home appliances\\": 250.0 } ``` # Constraints - You can assume that `sales_data` is always a non-empty list of dictionaries with valid data types as described. - The function should correctly handle any number of categories and sales records.","solution":"def aggregate_sales_by_category(sales_data): Aggregates sales data by product category. Args: sales_data (list): A list of dictionaries, each representing a sale record with \'product_name\', \'category\', and \'amount\' fields. Returns: dict: A dictionary with categories as keys and total sales amounts as values. aggregated_sales = {} for sale in sales_data: category = sale[\'category\'] amount = sale[\'amount\'] if category in aggregated_sales: aggregated_sales[category] += amount else: aggregated_sales[category] = amount return aggregated_sales"},{"question":"You have been tasked with designing a function that creates a simple inventory management system for a small store. This system will allow the store manager to add products, remove products, and view the current inventory levels. The function should be capable of handling multiple operations based on user input. **Function Requirements:** - Name: `inventory_management` - The function should offer the following user commands: - `add <product> <quantity>`: Adds the specified quantity of the product to the inventory. If the product does not exist, it should be added to the inventory. - `remove <product> <quantity>`: Removes the specified quantity of the product from the inventory. If the quantity to be removed is greater than the current inventory level, set the quantity to zero. If the product does not exist, the operation should be ignored. - `view`: Outputs the current inventory levels for all products. **Implementation Guidelines:** 1. Store the inventory data in a dictionary where the keys are product names and the values are their quantities. 2. Parse the user command to determine the operation and the corresponding product and quantity. 3. Handle each command appropriately to update the inventory. 4. For the `view` command, print the current state of the inventory. **Steps to complete the function:** 1. Initialize an empty dictionary to represent the inventory. 2. Create a loop to continuously accept and process user input. 3. For each command, update the dictionary based on the specified operation. 4. Print the inventory state upon receiving the `view` command. Here is a template for you to start: ```python def inventory_management(): Simple Inventory Management System inventory = {} while True: command = input().strip().lower() if not command: break parts = command.split() if parts[0] == \'add\': product, quantity = parts[1], int(parts[2]) if product in inventory: inventory[product] += quantity else: inventory[product] = quantity elif parts[0] == \'remove\': product, quantity = parts[1], int(parts[2]) if product in inventory: inventory[product] = max(0, inventory[product] - quantity) elif parts[0] == \'view\': for product, quantity in inventory.items(): print(f\\"{product}: {quantity}\\") # Example usage # The function will run indefinitely until an empty input is given # Sample inputs: # add apples 10 # add bananas 5 # remove apples 3 # view inventory_management() ```","solution":"def inventory_management(): Simple Inventory Management System inventory = {} while True: command = input().strip().lower() if not command: break parts = command.split() if parts[0] == \'add\': product, quantity = parts[1], int(parts[2]) if product in inventory: inventory[product] += quantity else: inventory[product] = quantity elif parts[0] == \'remove\': product, quantity = parts[1], int(parts[2]) if product in inventory: inventory[product] = max(0, inventory[product] - quantity) elif parts[0] == \'view\': for product, quantity in inventory.items(): print(f\\"{product}: {quantity}\\") return inventory # Example usage # The function will run indefinitely until an empty input is given # Sample inputs: # add apples 10 # add bananas 5 # remove apples 3 # view"},{"question":"A company is implementing a caching mechanism to optimize their data retrieval process. They have asked you to write a function that simulates a Least Recently Used (LRU) cache. The LRU cache is a data structure that holds a limited number of items and removes the least recently accessed item when the cache exceeds its capacity. Your task is to implement an `LRUCache` class with the following methods: - **`__init__(self, capacity: int)`**: Initializes the cache with a positive size capacity. - **`get(self, key: int) -> int`**: Returns the value of the key if the key exists in the cache, otherwise returns -1. - **`put(self, key: int, value: int) -> None`**: Updates the value of the key if the key exists. Otherwise, it adds the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, it evicts the least recently used key. # Requirements: - Implement the `LRUCache` class using OrderedDict from the `collections` module. - The `get` and `put` methods must operate in O(1) time complexity. # Function Signature: ```python class LRUCache: def __init__(self, capacity: int): pass def get(self, key: int) -> int: pass def put(self, key: int, value: int) -> None: pass ``` # Example: ```python lru_cache = LRUCache(2) lru_cache.put(1, 1) lru_cache.put(2, 2) print(lru_cache.get(1)) # returns 1 lru_cache.put(3, 3) # evicts key 2 print(lru_cache.get(2)) # returns -1 (not found) lru_cache.put(4, 4) # evicts key 1 print(lru_cache.get(1)) # returns -1 (not found) print(lru_cache.get(3)) # returns 3 print(lru_cache.get(4)) # returns 4 ``` # Constraints: - The number of operations will not exceed 10,000. - The keys and values will be in the range of 1 to 10,000.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"**Context:** In Python, the `asyncio` module provides infrastructure for writing single-threaded concurrent code using coroutines. `asyncio` is often used for I/O-bound and high-level structured network code. **Objective:** You are tasked with creating a function named `fetch_multiple_urls` that demonstrates the usage of the `asyncio` module to fetch the contents of multiple URLs concurrently. **Function Signature:** ```python import aiohttp import asyncio async def fetch_multiple_urls(urls: list) -> dict: # Your code here ``` **Requirements:** 1. **URLs**: The function should accept a list of URLs. 2. **Concurrency**: Use `asyncio` to fetch the contents of the URLs concurrently. 3. **HTTP Requests**: Use the `aiohttp` library to handle the HTTP requests. 4. **Output Format**: The function should return a dictionary where the keys are the URLs and the values are the fetched content of each URL. 5. **Error Handling**: Handle any exceptions that may occur during the fetching process, and store the exception message as the value in the returned dictionary for the respective URL. **Example Call:** ```python urls = [\\"http://example.com\\", \\"http://example.org\\", \\"http://example.net\\"] result = asyncio.run(fetch_multiple_urls(urls)) print(result) ``` **Note:** Ensure that the function is correctly defined to work within the `asyncio` framework. Use the `aiohttp.ClientSession` for making HTTP requests in an asynchronous manner. Calling the `fetch_multiple_urls` function with a list of URLs should demonstrate concurrent fetching and appropriate error handling.","solution":"import aiohttp import asyncio async def fetch_url(session, url): try: async with session.get(url) as response: return await response.text() except Exception as e: return str(e) async def fetch_multiple_urls(urls: list) -> dict: async with aiohttp.ClientSession() as session: tasks = [fetch_url(session, url) for url in urls] results = await asyncio.gather(*tasks) return dict(zip(urls, results))"},{"question":"In this problem, you are expected to write a function that demonstrates the use of the Python `random` library, specifically focusing on the generation of random integers and floating-point numbers within a given range. # Task You need to create a function named `generate_random_stats` that generates and prints random statistical data within specified limits. # Function Specification - **Function Name**: `generate_random_stats` - **Parameters**: - `count` (an integer representing the number of random values to generate) - `range_start` (a floating-point number representing the start of the range) - `range_end` (a floating-point number representing the end of the range) # Behavior 1. The function should print \\"Generating random statistics\\". 2. It should then generate `count` random floating-point numbers within the range from `range_start` to `range_end`. 3. The function should calculate and print the following statistics based on the generated numbers: - Mean (average) - Standard deviation 4. The function should finally print \\"Statistics generated\\". # Requirements - **Use the `random.uniform(range_start, range_end)` function** to generate the random numbers. - Calculate the mean and standard deviation manually without using built-in functions or external libraries. # Example ```python generate_random_stats(5, 10.0, 20.0) ``` Expected output (values will vary): ``` Generating random statistics Generated values: [15.432, 17.456, 12.345, 14.678, 18.901] Mean: 15.3624 Standard Deviation: 2.5317 Statistics generated ``` This function demonstrates the `random.uniform` method by generating random floating-point numbers and computing basic statistics.","solution":"import random import math def generate_random_stats(count, range_start, range_end): Generates random statistics within a specified range and prints the statistics. Parameters: count (int): Number of random values to generate. range_start (float): Start of the range. range_end (float): End of the range. print(\\"Generating random statistics\\") # Generate the list of random floating-point numbers random_values = [random.uniform(range_start, range_end) for _ in range(count)] print(f\\"Generated values: {random_values}\\") # Calculate the mean mean = sum(random_values) / count # Calculate the standard deviation variance = sum((x - mean) ** 2 for x in random_values) / count standard_deviation = math.sqrt(variance) # Print the statistics print(f\\"Mean: {mean}\\") print(f\\"Standard Deviation: {standard_deviation}\\") print(\\"Statistics generated\\")"},{"question":"You are given a dataset of airline flights which includes information about flight delays. Write a function named `analyze_flight_delays` that reads a dataset from a CSV file and performs analysis to identify the average delay per airline. Create a bar plot to visualize the results. The input CSV file named `flights.csv` contains the following columns: - `Year`: The year of the flight. - `Month`: The month of the flight. - `Day`: The day of the flight. - `Airline`: The airline code of the flight. - `FlightNumber`: The flight number. - `Origin`: The origin airport code. - `Destination`: The destination airport code. - `DepartureDelay`: The delay in departure time (in minutes). - `ArrivalDelay`: The delay in arrival time (in minutes). Your function will perform the following tasks: 1. **Read the data** from the CSV file into a pandas DataFrame. 2. **Calculate the average arrival delay** for each airline. 3. **Create a bar plot** with the airline codes on the x-axis and the average arrival delays on the y-axis. 4. **Label the plot** with appropriate titles and axis labels. 5. **Save the plot** as a PNG file named `average_flight_delays.png`. The plot should clearly show which airlines have the highest and lowest average arrival delays. Python libraries required for this task: - `pandas` for data manipulation and reading the CSV. - `matplotlib.pyplot` for plotting. You can refer to the documentation for `pandas.read_csv`, `pandas.DataFrame.groupby`, and `matplotlib.pyplot.bar` to understand their usage. **Function Signature:** ```python def analyze_flight_delays(): pass ```","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_flight_delays(): # Step 1: Read the data from the CSV file df = pd.read_csv(\'flights.csv\') # Step 2: Calculate the average arrival delay for each airline average_delays = df.groupby(\'Airline\')[\'ArrivalDelay\'].mean() # Step 3: Create a bar plot plt.figure(figsize=(10, 6)) average_delays.plot(kind=\'bar\', color=\'skyblue\') # Step 4: Label the plot with appropriate titles and axis labels plt.title(\'Average Arrival Delays by Airline\') plt.xlabel(\'Airline\') plt.ylabel(\'Average Arrival Delay (minutes)\') # Step 5: Save the plot as a PNG file plt.savefig(\'average_flight_delays.png\') # Display the plot plt.show()"},{"question":"Write a Python function `weather_data_visualization()` that demonstrates how to parse and visualize weather data using the `matplotlib.pyplot` library and the `csv` module. You will need to create a line plot showing temperature changes over a week based on a sample CSV file. Specifically, this function should: 1. Import the necessary modules (`matplotlib.pyplot` for plotting and `csv` for reading the CSV file). 2. Read weather data from a CSV file \'weather_data.csv\'. Assume the CSV file has the following columns: \\"Day\\", \\"Temperature\\". 3. Parse the CSV file to extract the days of the week and corresponding temperatures. 4. Store the extracted data in respective lists for days and temperatures. 5. Plot the days of the week against the temperatures using `matplotlib.pyplot.plot`. 6. Add labels for the X and Y axes, a title for the plot, and a legend. Here\'s the sample CSV content: ``` Day,Temperature Monday,22 Tuesday,24 Wednesday,21 Thursday,19 Friday,23 Saturday,25 Sunday,22 ``` Implement the `weather_data_visualization()` function which should: - Read the data from \'weather_data.csv\'. - Extract the days and temperatures, storing them in separate lists. - Plot the data with appropriate labels, title, and legend using the `matplotlib.pyplot.plot`. Ensure your code is well-commented to explain each step of the process and how the `plot` function and `csv` module are used.","solution":"import matplotlib.pyplot as plt import csv def weather_data_visualization(): Parses weather data from a CSV file and visualizes temperature changes over a week using matplotlib. # Lists to store the days and temperatures days = [] temperatures = [] # Read data from \'weather_data.csv\' with open(\'weather_data.csv\', mode=\'r\') as file: csv_reader = csv.reader(file) next(csv_reader) # Skip the header row for row in csv_reader: days.append(row[0]) temperatures.append(int(row[1])) # Plot the data plt.plot(days, temperatures, label=\'Temperature over a week\') # Adding labels, title, and legend plt.xlabel(\'Day\') plt.ylabel(\'Temperature (°C)\') plt.title(\'Weather Data Visualization\') plt.legend() # Display the plot plt.show()"},{"question":"You have been tasked with designing a custom text-based game in Python that showcases your understanding of basic programming concepts such as loops, conditionals, lists, and string manipulation. The game you need to create is called \\"Word Jumper\\". # Game Description: \\"Word Jumper\\" is a simple game where a player attempts to guess a hidden word by entering letters one by one. Each correct guess reveals the position of the guessed letter in the word. If a guessed letter isn\'t in the word, it is added to a list of incorrect guesses. The player has a limited number of tries to guess all the letters in the word correctly. # Function Specification: You need to create a function named `play_word_jumper` that performs the following: 1. **Initialize Game State**: - Define a list of words (`word_list`) containing at least 5 different words. - Randomly select one word (`hidden_word`) from `word_list`. - Create a list (`current_state`) initialized with underscores for each letter in the hidden word. - Initialize an empty list for `incorrect_guesses` and define a variable for try limit (`try_limit`), set to 6 attempts. 2. **Game Loop**: - Continuously prompt the player to guess a letter until the word is completely guessed or the number of incorrect guesses reaches `try_limit`. - If the guessed letter is in the hidden word, update `current_state` to reveal all occurrences of that letter. - If the guessed letter is not in the hidden word, add it to `incorrect_guesses` and decrease the remaining attempts. - Display the current state of the word (with guessed letters revealed and underscores for remaining letters) and the list of incorrect guesses after each guess. 3. **End Game**: - If the word is guessed correctly before reaching the try limit, print a congratulatory message and reveal the word. - If the player exhausts the number of tries without guessing the word, reveal the hidden word and display a game over message. 4. **Ensure Valid Input**: - Validate the player\'s input to ensure it is a single alphabetical character that hasn\'t been guessed already. Implement the `play_word_jumper` function to accomplish the above tasks. ```python import random def play_word_jumper(): word_list = [\\"python\\", \\"jumper\\", \\"coding\\", \\"game\\", \\"function\\"] hidden_word = random.choice(word_list) current_state = [\\"_\\"] * len(hidden_word) incorrect_guesses = [] try_limit = 6 while \\"_\\" in current_state and len(incorrect_guesses) < try_limit: print(\\"Current State: \\" + \\" \\".join(current_state)) print(\\"Incorrect Guesses: \\", incorrect_guesses) guess = input(\\"Guess a letter: \\").lower() if len(guess) != 1 or not guess.isalpha() or guess in incorrect_guesses or guess in current_state: print(\\"Invalid input or letter already guessed. Try again.\\") continue if guess in hidden_word: for idx, letter in enumerate(hidden_word): if letter == guess: current_state[idx] = guess else: incorrect_guesses.append(guess) if \\"_\\" not in current_state: print(\\"Congratulations! You\'ve guessed the word: \\" + hidden_word) return print(\\"Game over! The hidden word was: \\" + hidden_word) # Uncomment the line below to play the game # play_word_jumper() ``` The function should: - Select a word from a predefined list. - Prompt the player to guess letters and provide relevant feedback. - Validate the input and manage the game state. - Offer an ending message based on the game outcome.","solution":"import random def play_word_jumper(): word_list = [\\"python\\", \\"jumper\\", \\"coding\\", \\"game\\", \\"function\\"] hidden_word = random.choice(word_list) current_state = [\\"_\\"] * len(hidden_word) incorrect_guesses = [] try_limit = 6 while \\"_\\" in current_state and len(incorrect_guesses) < try_limit: print(\\"Current State: \\" + \\" \\".join(current_state)) print(\\"Incorrect Guesses: \\", incorrect_guesses) guess = input(\\"Guess a letter: \\").lower() if len(guess) != 1 or not guess.isalpha() or guess in incorrect_guesses or guess in current_state: print(\\"Invalid input or letter already guessed. Try again.\\") continue if guess in hidden_word: for idx, letter in enumerate(hidden_word): if letter == guess: current_state[idx] = guess else: incorrect_guesses.append(guess) if \\"_\\" not in current_state: print(\\"Congratulations! You\'ve guessed the word: \\" + hidden_word) return print(\\"Game over! The hidden word was: \\" + hidden_word) # To play the game, uncomment the line below # play_word_jumper()"},{"question":"You are required to write a function that simulates a basic URL shortener service. The service should accept a list of full URLs and generate unique shortened versions for each URL. Each shortened URL should follow the format: `http://short.url/random_string`, where: - `random_string` is a randomly generated string of exactly 8 characters consisting of uppercase alphabetical characters and digits (0-9). Your function should be named `shorten_urls` and should take one parameter: 1. `urls` (list of strings): A list of full URLs to shorten (e.g., [\\"http://example.com\\", \\"https://www.google.com\\"]). The function should return a dictionary where each key is the original URL and the corresponding value is the shortened URL. Ensure that the generated `random_string` is unique for each URL within the given list. Your solution should make use of Python\'s `random.choices` function. Example usage: ```python urls = [\\"http://example.com\\", \\"https://www.google.com\\", \\"https://github.com\\"] shortened_url_mapping = shorten_urls(urls) print(shortened_url_mapping) ```","solution":"import random import string def generate_random_string(length=8): Generates a random string of a given length. The string consists of uppercase alphabetical characters and digits (0-9). characters = string.ascii_uppercase + string.digits return \'\'.join(random.choices(characters, k=length)) def shorten_urls(urls): Takes a list of full URLs and generates unique shortened versions for each URL. Returns a dictionary where each key is the original URL and the corresponding value is the shortened URL. shortened_urls = {} generated_strings = set() for url in urls: while True: random_string = generate_random_string() if random_string not in generated_strings: generated_strings.add(random_string) shortened_urls[url] = f\\"http://short.url/{random_string}\\" break return shortened_urls"},{"question":"In this problem, you are required to work with the `pandas` library to perform data manipulation on a given DataFrame. The task involves creating a function that adds a new column to the DataFrame based on conditions applied to existing columns. **Requirements:** 1. Import the required libraries. 2. Create a function named `add_new_column(df)`. 3. The function should take a DataFrame `df` as input, which contains at least the following columns: - `age`: representing the age of individuals. - `income`: representing the income of individuals. 4. Add a new column named `category` to the DataFrame based on the following conditions: - If the age is below 18, the category should be \'minor\'. - If the age is between 18 and 65 (inclusive), the category should be \'adult\'. - If the age is above 65, the category should be \'senior\'. - Additionally, if the income is above 100,000, append \'high income\' to the category (e.g., \'adult high income\'). 5. Return the modified DataFrame with the new `category` column. Use the example code snippet as a reference: ```python import pandas as pd def add_new_column(df): def categorize(row): if row[\'age\'] < 18: category = \'minor\' elif 18 <= row[\'age\'] <= 65: category = \'adult\' else: category = \'senior\' if row[\'income\'] > 100000: category += \' high income\' return category df[\'category\'] = df.apply(categorize, axis=1) return df ``` You need to ensure that the function correctly categorizes individuals based on their age and income, modifying and returning the DataFrame accordingly.","solution":"import pandas as pd def add_new_column(df): def categorize(row): if row[\'age\'] < 18: category = \'minor\' elif 18 <= row[\'age\'] <= 65: category = \'adult\' else: category = \'senior\' if row[\'income\'] > 100000: category += \' high income\' return category df[\'category\'] = df.apply(categorize, axis=1) return df"},{"question":"This function takes an integer `n` and returns a list of all prime numbers less than `n`. A prime number is only divisible by 1 and itself. This function is useful for generating a list of primes for mathematical computations or cryptographic applications. The function should output with: list: A list of prime numbers less than `n`. You should write self-contained code starting with: ``` def find_primes(n): ```","solution":"def find_primes(n): Returns a list of all prime numbers less than `n`. Parameters: n (int): The upper limit (non-inclusive) for finding prime numbers. Returns: list: A list of prime numbers less than `n`. if n <= 2: return [] primes = [] for num in range(2, n): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"You are given a matrix represented as a two-dimensional NumPy array. Your task is to create a function that rotates the matrix by 90 degrees clockwise. This is a common manipulation in image processing and certain mathematical applications. # Requirements: 1. **Function Name**: `rotate_matrix_90_clockwise` 2. **Parameters**: - `matrix`: A two-dimensional NumPy array representing the matrix. 3. **Returns**: A new two-dimensional NumPy array that is the result of rotating the input matrix 90 degrees clockwise. # Additional Instructions: 1. You must use NumPy functions to achieve the rotation. 2. Avoid using loops to manually rotate the elements. # Example: ```python import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) rotated_matrix = rotate_matrix_90_clockwise(matrix) print(rotated_matrix) # Expected output: # array([[7, 4, 1], # [8, 5, 2], # [9, 6, 3]]) ```","solution":"import numpy as np def rotate_matrix_90_clockwise(matrix): Rotates the given matrix by 90 degrees clockwise. Parameters: matrix (np.ndarray): A two-dimensional NumPy array. Returns: np.ndarray: A new two-dimensional NumPy array rotated by 90 degrees clockwise. return np.rot90(matrix, -1)"},{"question":"You are tasked with writing a Python function `flatten_nested_list` that takes a single parameter `nested_list`. The function should return a new list where all the nested lists are flattened into a single list. To elaborate, consider `nested_list` as a list that may contain other lists, which in turn can contain lists as elements to an arbitrary depth. The function should recursively unpack these lists and combine their elements into a single, flat list. # Function Signature ```python def flatten_nested_list(nested_list: list) -> list: ``` Parameter - `nested_list` (list): A list which may contain nested lists. # Returns - (list): A flat list containing all elements from the nested lists. # Example ```python nested_list = [1, [2, [3, 4], 5], 6, [[7, 8], 9]] result = flatten_nested_list(nested_list) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ``` # Constraints 1. The elements within `nested_list` can be integers, floats, strings, or other lists. 2. The function should handle empty nested lists and return an appropriate flat list. 3. The function should handle deeply nested lists as per Python\'s recursion limit.","solution":"def flatten_nested_list(nested_list): Returns a flat list containing all elements from the nested lists. flat_list = [] for element in nested_list: if isinstance(element, list): flat_list.extend(flatten_nested_list(element)) else: flat_list.append(element) return flat_list"},{"question":"You are working with a dataset of book titles that are stored as lowercase strings in a list. Your task is to write a function `group_by_anagrams(titles: List[str]) -> List[List[str]]` that groups the book titles into lists of anagrams. An anagram is a word formed by rearranging the letters of a different word, typically using all the original letters exactly once. For example, \'listen\' and \'silent\' are anagrams. # Input - `titles`: A list of strings where each string is a title of a book in lowercase. # Output - A list of lists of strings, where each list contains book titles that are anagrams of each other. # Requirements - The function should return lists that contain at least two titles. Single-title lists should not be included in the output. - Each title should appear in exactly one list in the output. # Example ```python from typing import List def group_by_anagrams(titles: List[str]) -> List[List[str]]: # Your implementation here titles = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\", \\"google\\", \\"gogole\\", \\"god\\", \\"dog\\", \\"cat\\"] result = group_by_anagrams(titles) print(result) # Expected output (order of lists and titles within the lists may vary): # [[\'listen\', \'silent\', \'enlist\', \'inlets\'], [\'google\', \'gogole\'], [\'god\', \'dog\']] ``` **Note:** The output may vary in order, but each list should contain titles that are anagrams of each other. Ensure your solution is efficient and can handle larger lists of titles.","solution":"from typing import List from collections import defaultdict def group_by_anagrams(titles: List[str]) -> List[List[str]]: This function groups book titles into lists of anagrams. Args: titles (List[str]): A list of book titles in lowercase. Returns: List[List[str]]: A list of lists containing titles that are anagrams of each other. anagram_map = defaultdict(list) for title in titles: # Sort the characters of the title and use as a key sorted_title = \'\'.join(sorted(title)) anagram_map[sorted_title].append(title) # Filter out groups that have less than 2 titles result = [group for group in anagram_map.values() if len(group) > 1] return result"},{"question":"You are tasked with implementing a function `find_max_subarray_sum(arr)` in Python to find the sum of the maximum subarray for a given list of integers `arr`. A subarray is a contiguous part of an array. Use Kadane\'s Algorithm to accomplish this task. The function should adhere to the following criteria: - Accept a list `arr` of integers which can contain negative numbers. - If the list is empty, return 0. Kadane\'s Algorithm involves iterating through the list while maintaining the maximum sum of the subarray found so far, and the current sum of the subarray up to the current position. Here is the step-by-step process: 1. Initialize `max_so_far` to negative infinity (or the smallest possible integer). 2. Initialize `max_ending_here` to 0. 3. Traverse the list with a loop. For each element: - Add the current element to `max_ending_here`. - If `max_so_far` is less than `max_ending_here`, then update `max_so_far`. - If `max_ending_here` becomes negative, reset it to 0. 4. Return `max_so_far`. **Example**: ```python arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] result = find_max_subarray_sum(arr) # Expected output: 6 # Explanation: The subarray [4, -1, 2, 1] has the maximum sum of 6. ``` Note: The maximum sum for an empty list is defined to be 0 for this problem.","solution":"def find_max_subarray_sum(arr): Finds the sum of the maximum subarray using Kadane\'s Algorithm. Parameters: arr (list of int): The list of integers which can contain negative numbers. Returns: int: The sum of the maximum subarray. If the list is empty, return 0. if not arr: return 0 max_so_far = float(\'-inf\') max_ending_here = 0 for num in arr: max_ending_here += num if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far"},{"question":"You need to implement a function `find_largest_island` that takes a binary matrix representing islands (1s) and water (0s), and returns the size of the largest island. An island is a group of 1s connected horizontally or vertically (not diagonally). # Requirements: 1. Define the input parameter: - `grid`: A list of lists (2D array) containing only 0s and 1s representing the map. 2. Implement the `find_largest_island` function that: - Iterates over each cell in the grid. - Uses Depth-First Search (DFS) or Breadth-First Search (BFS) to explore all connected 1s, marking them visited. - Keeps track of the size of each island encountered. - Returns the size of the largest island found. # Function Signature: ```python def find_largest_island(grid): # Your code here ``` # Example Given the following input: ```python grid = [ [0, 1, 0, 1, 0], [1, 1, 0, 1, 1], [0, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 0, 1, 1, 0] ] ``` The function should return `6` because the largest island contains 6 connected 1s.","solution":"def find_largest_island(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0: return 0 grid[i][j] = 0 return 1 + dfs(i+1, j) + dfs(i-1, j) + dfs(i, j+1) + dfs(i, j-1) max_island_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: max_island_size = max(max_island_size, dfs(i, j)) return max_island_size"},{"question":"In this problem, you will implement a function to find the k most frequent elements in an array. The elements should be returned in decreasing order of their frequency. You will use Python\'s `collections.Counter` to help with counting the frequencies and `heapq.nlargest` to find the most frequent elements efficiently. Function Signature ```python def top_k_frequent_elements(nums, k): Find the k most frequent elements in the array Parameters: nums (list of int): List of integers k (int): Number of most frequent elements to find Returns: List[int]: List of k most frequent elements ``` Inputs - `nums`: A list of integers representing the array to be analyzed. - `k`: An integer representing the number of most frequent elements to identify and return. Output - The function should return a list containing the k most frequent elements from the input list `nums`, sorted in decreasing order of their frequency. Instructions 1. Use `collections.Counter` to count the frequency of each element in the input list `nums`. 2. Use `heapq.nlargest` to find the k elements with the highest frequency. 3. Return the k most frequent elements sorted by their frequency in decreasing order. Example ```python nums = [1, 1, 1, 2, 2, 3] k = 2 top_k_frequent_elements(nums, k) # should return [1, 2] nums = [1] k = 1 top_k_frequent_elements(nums, k) # should return [1] ``` Notes - If there are multiple elements with the same frequency, their order in the output does not matter.","solution":"import heapq from collections import Counter def top_k_frequent_elements(nums, k): Find the k most frequent elements in the array Parameters: nums (list of int): List of integers k (int): Number of most frequent elements to find Returns: List[int]: List of k most frequent elements # Count the frequency of each element in the nums list frequency_count = Counter(nums) # Use heapq\'s nlargest function to get the k most frequent elements most_frequent = heapq.nlargest(k, frequency_count.keys(), key=frequency_count.get) return most_frequent"},{"question":"Imagine a scenario where you are tasked with optimizing a ride-sharing service\'s allocation of driver-partner routes. The service needs to connect passengers requesting rides with drivers available within a certain radius while minimizing the overall waiting time for passengers. To achieve this, you will write a function named `assign_rides`. The function should accept three parameters: - `drivers`: A list of tuples representing the coordinates `(x, y)` of available drivers. - `passengers`: A list of dictionaries where each dictionary represents a passenger, containing the keys: - `id`: The unique identifier for the passenger. - `location`: A tuple representing the coordinates `(x, y)` of the passenger\'s location. - `radius`: A float representing the maximum distance (in units) that the passenger is willing to wait for a driver. - `max_distance`: An optional parameter that defaults to `None`. If specified, it represents the maximum distance a driver is willing to travel to pick up a passenger. The function should return a list of dictionaries where each dictionary contains: - `passenger_id`: The unique identifier of the passenger. - `driver`: A tuple representing the coordinates `(x, y)` of the assigned driver or `None` if no available drivers are within the passenger\'s specified radius (and `max_distance` if provided). The rules to follow: 1. A driver can only be assigned to one passenger. 2. If multiple passengers can be matched with a driver, prioritize passengers based on their `id` in ascending order. 3. Ensure that the distance calculations are based on Euclidean distance. Use the `math.sqrt` function from Python\'s `math` library for the necessary distance calculations. Below is the function signature: ```python def assign_rides(drivers, passengers, max_distance=None): pass ``` Example usage: ```python drivers = [(10, 10), (20, 20), (30, 30)] passengers = [ {\'id\': 1, \'location\': (12, 12), \'radius\': 5.0}, {\'id\': 2, \'location\': (25, 25), \'radius\': 10.0}, ] print(assign_rides(drivers, passengers)) ``` Expected output: ```python [{\'passenger_id\': 1, \'driver\': (10, 10)}, {\'passenger_id\': 2, \'driver\': (20, 20)}]","solution":"import math def calculate_distance(coord1, coord2): return math.sqrt((coord1[0] - coord2[0]) ** 2 + (coord1[1] - coord2[1]) ** 2) def assign_rides(drivers, passengers, max_distance=None): assignments = [] assigned_drivers = set() for passenger in sorted(passengers, key=lambda x: x[\'id\']): passenger_location = passenger[\'location\'] passenger_radius = passenger[\'radius\'] passenger_id = passenger[\'id\'] assigned_driver = None for driver in drivers: if driver not in assigned_drivers: distance_to_driver = calculate_distance(passenger_location, driver) if distance_to_driver <= passenger_radius: if max_distance is None or distance_to_driver <= max_distance: assigned_driver = driver assigned_drivers.add(driver) break assignments.append({\'passenger_id\': passenger_id, \'driver\': assigned_driver}) return assignments"},{"question":"In this exercise, you will work with data processing using the `pandas` library, specifically focusing on reading and manipulating CSV files. The objective is to create a function that reads a CSV file, filters the data according to given criteria, and returns the filtered results. Your task is to write a function named `filter_csv_data` which takes three arguments: ```python def filter_csv_data(filePath, column, value): # Your code here ``` This function should perform the following tasks: 1. Read the CSV file located at `filePath`. 2. Filter the data to only include rows where the specified `column` has the given `value`. 3. Return the filtered DataFrame. **Function Signature:** ```python def filter_csv_data(filePath, column, value): # implementation here ``` **Parameters:** - `filePath (str)`: A string representing the file path to the CSV file you want to read and process. - `column (str)`: The column name to apply the filter on. - `value (str or int or float)`: The value to filter the rows by. **Requirements:** - Use the `pandas` library (import it as `pd`). - The function should read the CSV file using `pd.read_csv`. - Filter the DataFrame using boolean indexing to get only the rows where `column` equals `value`. - Return the filtered DataFrame. Here is an example of how to call the function: ```python filtered_data = filter_csv_data(\'path_to_your_file.csv\', \'column_name\', \'desired_value\') print(filtered_data) ```","solution":"import pandas as pd def filter_csv_data(filePath, column, value): Read the CSV file, filter the data where the specified column has the given value, and return the filtered DataFrame. Parameters: - filePath (str): The file path to the CSV file. - column (str): The column name to filter on. - value (str, int, float): The value to filter by. Returns: - filtered_df (pd.DataFrame): The filtered DataFrame. # Read the CSV file into a DataFrame df = pd.read_csv(filePath) # Filter the DataFrame filtered_df = df[df[column] == value] return filtered_df"},{"question":"Write a function that generates a list of specified length of random integers between two given bounds (inclusive), and calculates the mean and median of the list. Finally, the function should return a dictionary with the list, mean, and median. The function should output: dictionary: A dictionary with three keys - \'random_integers\' holding the list of random integers, \'mean\' holding the mean of the integers, and \'median\' holding the median of the integers. You should write self-contained code starting with: ``` import random import statistics def generate_random_stats(list_length=10, lower_bound=0, upper_bound=100, seed=123): ```","solution":"import random import statistics def generate_random_stats(list_length=10, lower_bound=0, upper_bound=100, seed=123): Generates a list of random integers, then calculates and returns the mean and median. Args: list_length (int): The number of integers in the list. lower_bound (int): The lower bound of the random integers. upper_bound (int): The upper bound of the random integers. seed (int): The seed for the random number generator for reproducibility. Returns: dict: A dictionary containing the list of random integers, mean, and median. random.seed(seed) random_integers = [random.randint(lower_bound, upper_bound) for _ in range(list_length)] mean_val = statistics.mean(random_integers) median_val = statistics.median(random_integers) return { \\"random_integers\\": random_integers, \\"mean\\": mean_val, \\"median\\": median_val }"},{"question":"You are given a list of customer transactions, where each transaction is represented by a tuple `(customer_id, transaction_amount)`. Your task is to calculate the total transaction amount for each customer and return the results in a dictionary. To achieve this, you need to define a Python function `aggregate_transactions` that takes a list of tuples as input. This function should: 1. Iterate over the list of transactions. 2. Sum the transaction amounts for each `customer_id`. 3. Return a dictionary where the keys are `customer_id`s and the values are the total transaction amounts. Function signature: ```python from typing import List, Tuple, Dict def aggregate_transactions(transactions: List[Tuple[int, float]]) -> Dict[int, float]: pass ```","solution":"from typing import List, Tuple, Dict def aggregate_transactions(transactions: List[Tuple[int, float]]) -> Dict[int, float]: Aggregates the total transaction amounts for each customer. Args: transactions (List[Tuple[int, float]]): A list of tuples where each tuple contains a customer_id and a transaction_amount. Returns: Dict[int, float]: A dictionary where the keys are customer_id\'s and values are the total transaction amounts. aggregated = {} for customer_id, transaction_amount in transactions: if customer_id in aggregated: aggregated[customer_id] += transaction_amount else: aggregated[customer_id] = transaction_amount return aggregated"},{"question":"You are tasked with implementing a function to convert a given CamelCase string into a space-separated string with each word starting with a lowercase letter. CamelCase is a string notation where each word starts with a capital letter except the first word, which starts with a lowercase letter. Function Signature ```python def camel_case_to_spaces(camel_case: str) -> str: ... ``` Input - `camel_case (str)`: A string in CamelCase format. It only contains alphabetic characters and is non-empty. Output - `str`: A string where each word from the CamelCase string is separated by spaces, and all words are in lowercase. Example ```python camel_case_string = \\"thisIsCamelCase\\" result = camel_case_to_spaces(camel_case_string) print(result) # Output: \\"this is camel case\\" camel_case_string = \\"convertMeToSpaces\\" result = camel_case_to_spaces(camel_case_string) print(result) # Output: \\"convert me to spaces\\" ``` Constraints 1. You should not use any libraries or modules aside from the basic string manipulation functions provided by Python. 2. The input string will contain only alphabetic characters and will always follow the CamelCase notation conventions.","solution":"def camel_case_to_spaces(camel_case: str) -> str: Converts a CamelCase string into a space-separated string where each word is in lowercase. Parameters: camel_case (str): A string in CamelCase format. Returns: str: A space-separated string with all words in lowercase. # Initialize an empty list to hold individual words words = [] start_index = 0 # Loop through each character in the string for i in range(1, len(camel_case)): if camel_case[i].isupper(): # If the character is uppercase, it signifies the start of a new word words.append(camel_case[start_index:i].lower()) start_index = i # Add the last word words.append(camel_case[start_index:].lower()) # Join all words with space and return return \' \'.join(words)"},{"question":"You are responsible for writing a Python function named `shortest_path_sum` which, given an `m x n` grid of integers, finds the minimum sum of a path from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. **Function Signature:** ```python def shortest_path_sum(grid: List[List[int]]) -> int: ``` **Input:** - `grid`: A list of lists of integers representing the grid (`1 <= len(grid), len(grid[0]) <= 100`) **Output:** - An integer, representing the minimum sum of a path from the top-left to the bottom-right corner of the grid. **Description:** 1. **Grid Definition**: The grid is an m x n matrix (list of lists), where each cell contains a non-negative integer. 2. **Movement Constraints**: At any point, you can only move either down or right. 3. **Path Definition**: The path starts from the top-left corner and ends at the bottom-right corner. **Hint:** - Use dynamic programming to solve this problem efficiently. - Create a 2D array `dp` where `dp[i][j]` represents the minimum path sum to reach `grid[i][j]`. **Example:** ```python # Example 1 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] shortest_path_sum(grid) # Expected: 7 (1 → 3 → 1 → 1 → 1) # Example 2 grid = [ [1, 2, 3], [4, 5, 6] ] shortest_path_sum(grid) # Expected: 12 (1 → 2 → 3 → 6) ``` **Explanation:** - In Example 1, the minimum path sum from the top-left to the bottom-right is `7`. The path is `1→3→1→1→1`. - In Example 2, the minimum path sum from the top-left to the bottom-right is `12`. The path is `1→2→3→6`.","solution":"from typing import List def shortest_path_sum(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Create a DP table with same dimensions as grid dp = [[0] * n for _ in range(m)] # Initialize the top-left cell with the grid\'s top-left value dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the DP table for i in range(1, m): for j in range(1, n): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) # The answer is in the bottom-right cell return dp[m-1][n-1]"},{"question":"You are a data engineer responsible for processing user engagement data on a website. You are provided with two JSON files: one containing user login events and another containing user activity events. Your task is to extract relevant data, process it, and calculate the amount of time each user spends on the website per session. The sessions are marked from login to the next logout event. Specifications: 1. **Input Files**: - `user_logins.json`: ```json [ {\\"user_id\\": 1, \\"event\\": \\"login\\", \\"timestamp\\": \\"2023-05-20T10:00:00Z\\"}, {\\"user_id\\": 1, \\"event\\": \\"logout\\", \\"timestamp\\": \\"2023-05-20T11:30:00Z\\"}, ... ] ``` - `user_activity.json`: ```json [ {\\"user_id\\": 1, \\"page\\": \\"/home\\", \\"timestamp\\": \\"2023-05-20T10:05:00Z\\"}, {\\"user_id\\": 1, \\"page\\": \\"/profile\\", \\"timestamp\\": \\"2023-05-20T10:20:00Z\\"}, ... ] ``` 2. **Tasks**: - Read the JSON files. - Extract relevant columns containing the user IDs, events, pages, and timestamps. - Merge the data on user ID and sort the combined data by user ID and timestamp. - Calculate the duration of each session for each user (from login to logout). - Return a DataFrame with columns: \'user_id\', \'session_start\', \'session_end\', and \'session_duration\' (in minutes). 3. **Function Signature**: ```python import pandas as pd def process_user_engagement(logins_json: str, activity_json: str) -> pd.DataFrame: pass ``` Example: ```python logins_json = \\"user_logins.json\\" activity_json = \\"user_activity.json\\" process_user_engagement(logins_json, activity_json) ``` Output DataFrame: ``` user_id session_start session_end session_duration 0 1 2023-05-20T10:00:00Z 2023-05-20T11:30:00Z 90 ... ```","solution":"import pandas as pd from datetime import datetime def process_user_engagement(logins_json: str, activity_json: str) -> pd.DataFrame: # Read JSON files logins_df = pd.read_json(logins_json) activity_df = pd.read_json(activity_json) # Filter necessary columns (although activity_df is not used) logins_df = logins_df[[\'user_id\', \'event\', \'timestamp\']] # Sort data by user_id and timestamp logins_df[\'timestamp\'] = pd.to_datetime(logins_df[\'timestamp\']) logins_df = logins_df.sort_values(by=[\'user_id\', \'timestamp\']) # Initialize list to store session data session_data = [] # Iterate through each user for user_id, user_events in logins_df.groupby(\'user_id\'): start_time = None for _, event in user_events.iterrows(): if event[\'event\'] == \'login\': start_time = event[\'timestamp\'] elif event[\'event\'] == \'logout\' and start_time is not None: end_time = event[\'timestamp\'] session_duration = (end_time - start_time).total_seconds() / 60 session_data.append({ \'user_id\': user_id, \'session_start\': start_time, \'session_end\': end_time, \'session_duration\': session_duration }) start_time = None # Reset start_time after logout # Create DataFrame from session data sessions_df = pd.DataFrame(session_data) return sessions_df"},{"question":"**Problem: Analyzing a Text File for Word Frequencies** You are tasked with writing a Python function that reads a text file and generates a frequency distribution of the words contained in the file. This problem helps you understand file handling, string manipulation, and the use of dictionaries in Python. Function Specification **Function Name**: `word_frequencies` **Parameters**: - `file_path` (str): The path to the text file. The `word_frequencies` function should read the file specified by `file_path`, process its contents to count the occurrences of each word, and return a dictionary where the keys are words and the values are their respective frequencies. Words should be considered case-insensitively, and punctuation should be ignored. **Requirements**: - Use the `open` function to read the file. - Process the text to ensure case insensitivity. - Strip punctuation from words. - Return a dictionary with word frequencies. **Example Usage**: ```python # Assume the file \'sample.txt\' contains the following text: # \\"Hello, world! This is a test. Hello world.\\" frequencies = word_frequencies(\'sample.txt\') print(frequencies) # Expected Output: # {\'hello\': 2, \'world\': 2, \'this\': 1, \'is\': 1, \'a\': 1, \'test\': 1} ``` **Example Code**: ```python def word_frequencies(file_path): import string with open(file_path, \'r\') as file: text = file.read() # Convert text to lowercase and remove punctuation text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the text into words words = text.split() # Count the frequencies freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict ``` In the provided code snippet, `word_frequencies(\'sample.txt\')` will read the file `sample.txt`, process its contents, and return a dictionary with the frequencies of each word, ignoring case and punctuation.","solution":"def word_frequencies(file_path): import string with open(file_path, \'r\') as file: text = file.read() # Convert text to lowercase and remove punctuation text = text.lower() text = text.translate(str.maketrans(\'\', \'\', string.punctuation)) # Split the text into words words = text.split() # Count the frequencies freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict"},{"question":"Create a function that generates a pie chart visualizing the distribution of a categorical feature in a dataset. The function should: 1. Take a DataFrame and the name of a categorical column. 2. Validate the DataFrame and column. 3. Calculate the distribution of the categories. 4. Plot the pie chart with appropriate labels. 5. Raise appropriate exceptions for invalid input. The function should output: Axes: Matplotlib Axes object with the pie chart. You should write self-contained code starting with: ```python import pandas as pd import matplotlib.pyplot as plt def task_func(df, cat_col):","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(df, cat_col): Generates a pie chart visualizing the distribution of a categorical feature in a dataset. Parameters: df (pd.DataFrame): The input dataset in the form of a Pandas DataFrame. cat_col (str): The name of the categorical column to visualize. Returns: ax (matplotlib.axes.Axes): Matplotlib Axes object with the pie chart. Raises: ValueError: If the input is not a DataFrame or the column does not exist. TypeError: If the specified column is not categorical. # Validate the input DataFrame if not isinstance(df, pd.DataFrame): raise ValueError(\\"The input df must be a pandas DataFrame.\\") # Validate the input column name if cat_col not in df.columns: raise ValueError(f\\"The column \'{cat_col}\' does not exist in the DataFrame.\\") # Validate if the column is categorical if not pd.api.types.is_categorical_dtype(df[cat_col]): raise TypeError(f\\"The column \'{cat_col}\' is not categorical.\\") # Calculate the distribution of categories distribution = df[cat_col].value_counts() # Plot the pie chart fig, ax = plt.subplots() ax.pie(distribution, labels=distribution.index, autopct=\'%1.1f%%\', startangle=90) ax.axis(\'equal\') # Equal aspect ratio ensures that pie is drawn as a circle. return ax"},{"question":"Write a function named `calculate_similarity_score` that computes the cosine similarity score between two non-empty strings. The cosine similarity score is a measure of the cosine of the angle between two vectors, where the strings are represented as term frequency vectors. The function should be case-insensitive and ignore punctuation. # Input: - Two non-empty strings `str1` and `str2`. # Output: - A float representing the cosine similarity score between the two strings, rounded to two decimal places. # Function Signature: ```python import re import numpy as np def calculate_similarity_score(str1, str2): ``` # Constraints: 1. The function should handle strings with different lengths and content gracefully. 2. Use regular expressions to remove punctuation and convert strings to lowercase. 3. Utilize the `collections.Counter` class to create term frequency vectors. 4. Ensure vector length normalization and handle zero vectors to avoid division by zero errors. # Example: ```python # Example strings str1 = \\"Hello, world!\\" str2 = \\"Hello there, world.\\" # Calculate cosine similarity score similarity_score = calculate_similarity_score(str1, str2) # Print the similarity score print(similarity_score) ``` Expected Output: ```plaintext 0.86 ```","solution":"import re import numpy as np from collections import Counter def calculate_similarity_score(str1, str2): Calculate the cosine similarity score between two non-empty strings. # Helper function to clean and split string into words def preprocess_string(s): s = re.sub(r\'[^ws]\', \'\', s).lower() # Remove punctuation and convert to lower case return s.split() # Preprocess both strings words1 = preprocess_string(str1) words2 = preprocess_string(str2) # Create term frequency vectors using Counter counter1 = Counter(words1) counter2 = Counter(words2) # Create a set of all unique words in both strings all_words = set(counter1).union(set(counter2)) # Create vectors for each string vector1 = np.array([counter1[word] for word in all_words]) vector2 = np.array([counter2[word] for word in all_words]) # Compute the cosine similarity dot_product = np.dot(vector1, vector2) normA = np.linalg.norm(vector1) normB = np.linalg.norm(vector2) if normA == 0 or normB == 0: return 0.0 cosine_similarity = dot_product / (normA * normB) return round(cosine_similarity, 2)"},{"question":"You are required to create a function named `analyze_weather_data` that takes a list of dictionaries, `weather_data`, as input. Each dictionary in the list represents weather information for a single day, including the keys `temperature` (in degrees Celsius), `humidity` (percentage), and `wind_speed` (km/h). The function should return a dictionary with the following statistics: - `average_temperature`: the average temperature over all days. - `max_humidity`: the highest humidity recorded. - `min_wind_speed`: the lowest wind speed recorded. - `variance_temperature`: the variance of the temperatures over all days. Ensure that the function correctly handles the case where the input list is empty by returning a dictionary with all values set to `None`. You may use the `statistics` library to calculate the variance. **Function Signature:** ```python def analyze_weather_data(weather_data: List[Dict[str, Union[int, float]]]) -> Dict[str, Union[None, float]]: pass ```","solution":"from typing import List, Dict, Union from statistics import variance def analyze_weather_data(weather_data: List[Dict[str, Union[int, float]]]) -> Dict[str, Union[None, float]]: if not weather_data: return { \'average_temperature\': None, \'max_humidity\': None, \'min_wind_speed\': None, \'variance_temperature\': None } temperatures = [day[\'temperature\'] for day in weather_data] humidities = [day[\'humidity\'] for day in weather_data] wind_speeds = [day[\'wind_speed\'] for day in weather_data] average_temperature = sum(temperatures) / len(temperatures) max_humidity = max(humidities) min_wind_speed = min(wind_speeds) variance_temperature = variance(temperatures) if len(temperatures) > 1 else 0.0 return { \'average_temperature\': average_temperature, \'max_humidity\': max_humidity, \'min_wind_speed\': min_wind_speed, \'variance_temperature\': variance_temperature }"},{"question":"Creating efficient data structures is crucial for optimized performance, particularly when dealing with sequences of numeric data. One common task is to manage a running list of numbers, ensuring quick retrieval of the k-th largest number in the sequence. Write a class `KthLargest` that maintains a list of the k largest elements in a stream and efficiently returns the k-th largest element whenever requested. The class should support two main operations: - Initialization with the integer `k` and an initial list of integers. - Adding a new integer to the stream. Your implementation should utilize a min-heap (`heapq`) to keep track of the k largest elements encountered so far in the stream. **Class Definition:** ```python class KthLargest: def __init__(self, k: int, nums: List[int]): # Initialize the object with k and nums. def add(self, val: int) -> int: # Add the new integer val to the stream and return the k-th largest element. ``` **Example:** ```python # Initialize the KthLargest object with k = 3 and a list of numbers [4, 5, 8, 2]. kthLargest = KthLargest(3, [4, 5, 8, 2]) print(kthLargest.add(3)) # Output: 4 print(kthLargest.add(5)) # Output: 5 print(kthLargest.add(10)) # Output: 5 print(kthLargest.add(9)) # Output: 8 print(kthLargest.add(4)) # Output: 8 ``` **Constraints:** - The initial list of numbers (`nums`) will have a length of at most 10^4. - `-10^4 <= val <= 10^4` - It is guaranteed that the number of calls to the `add` method will not exceed 10^4. - It is assumed that k is always valid, i.e., `1 <= k <= len(nums) + number of calls to add`. By using a min-heap to store the k largest elements, ensure that your solution is both time and space efficient.","solution":"import heapq from typing import List class KthLargest: def __init__(self, k: int, nums: List[int]): self.k = k self.heap = nums heapq.heapify(self.heap) while len(self.heap) > k: heapq.heappop(self.heap) def add(self, val: int) -> int: if len(self.heap) < self.k: heapq.heappush(self.heap, val) elif val > self.heap[0]: heapq.heapreplace(self.heap, val) return self.heap[0]"},{"question":"You are required to write a function named `plot_log_transform_trend` that takes in a DataFrame `df`, an integer `column_index` representing the index of the column to analyze, and a string `trend_type` which could be either \\"linear\\" or \\"exponential\\". The goal of this function is to plot the original data of the specified column along with its trend line after applying a log transformation if the trend is exponential. Here\'s the breakdown of what the function should do: 1. Identify the column name from the DataFrame `df` using the provided `column_index`. 2. Print the column name. 3. Calculate the trend line using the specified `trend_type`. - If `trend_type` is \\"linear\\", fit a simple linear regression model to the data. - If `trend_type` is \\"exponential\\", apply a log transformation to the data and then fit a linear regression model. 4. Plot the original data. 5. Plot the trend line derived from the regression model. 6. Add an x-axis label, y-axis label, and title to the plot to describe what is being visualized. 7. Ensure different colors or styles are used to distinguish between the original data and the trend line in the plot. 8. Use `matplotlib.pyplot.legend` to distinguish between the original data and the trend line. Function prototype: ```python def plot_log_transform_trend(df, column_index, trend_type): ``` **Hint**: - Use the `numpy.polyfit` and `numpy.poly1d` functions to fit the trend lines. - For exponential trend, remember to exponentiate the predicted values from the log-transformed regression model. - Use `matplotlib.pyplot.plot` and `matplotlib.pyplot.scatter` for plotting.","solution":"import numpy as np import pandas as pd import matplotlib.pyplot as plt def plot_log_transform_trend(df, column_index, trend_type): Plots the original data and its trend line based on the specified trend type (linear or exponential). Parameters: df (pd.DataFrame): The input data frame containing the data. column_index (int): The index of the column to analyze. trend_type (str): The type of trend to fit (\'linear\' or \'exponential\'). column_name = df.columns[column_index] print(f\\"Analyzing column: {column_name}\\") x = np.arange(len(df)) y = df.iloc[:, column_index].values if trend_type == \\"linear\\": # Fit a linear model coeffs = np.polyfit(x, y, 1) trend_line = np.poly1d(coeffs)(x) elif trend_type == \\"exponential\\": # Apply log transformation and fit a linear model log_y = np.log(y) coeffs = np.polyfit(x, log_y, 1) trend_line = np.exp(np.poly1d(coeffs)(x)) else: raise ValueError(\\"trend_type must be either \'linear\' or \'exponential\'\\") # Plot original data plt.scatter(x, y, label=\'Original Data\') # Plot trend line plt.plot(x, trend_line, color=\'red\', label=\'Trend Line\') # Add labels and title plt.xlabel(\'Index\') plt.ylabel(column_name) plt.title(f\'{column_name} with {trend_type.capitalize()} Trend Line\') plt.legend() # Show plot plt.show()"},{"question":"You are required to implement a function named `most_common_word()` in Python that takes a list of strings and returns the most frequently occurring word in the list. If there is a tie, return the word that comes first in alphabetical order. You are encouraged to use the `collections` module to simplify your task. Here are the detailed requirements: 1. Define the function `most_common_word(word_list)`. 2. Within the function, use the `Counter` class from the `collections` module to count the occurrences of each word in the list. 3. Identify the maximum frequency among the counted words. 4. Extract all words that have the maximum frequency. 5. Sort these words alphabetically and return the first word from the sorted list. 6. Your function should handle an empty list by returning an empty string. Use the `collections.Counter` class and its methods as described in the provided documentation snippets.","solution":"from collections import Counter def most_common_word(word_list): Returns the most frequently occurring word from the list of strings. If there is a tie, returns the word that comes first in alphabetical order. if not word_list: return \\"\\" word_counter = Counter(word_list) max_frequency = max(word_counter.values()) most_common_words = [word for word, count in word_counter.items() if count == max_frequency] most_common_words.sort() return most_common_words[0]"},{"question":"You have been asked to create a utility function that simulates a simple file storage system, where we can upload and retrieve files by their unique file names. The function should allow users to add files with unique names, retrieve the contents of a file by its name, and check if a file exists based on its name. **Function Name**: `file_storage_system` The `file_storage_system` function should support the following operations: 1. `ADD` operation: Adds a new file to the storage. If a file with the same name already exists, it is updated with the new content. 2. `GET` operation: Retrieves the content of a file given its name. 3. `EXISTS` operation: Checks if a file with a given name exists in the storage. The function should take the following parameters: 1. `operations` (list of tuples): A list of tuples, where each tuple represents an operation. Each tuple can be: - `(\'ADD\', file_name, content)`: Adds a file with `file_name` and `content`. - `(\'GET\', file_name)`: Retrieves the content of the file with `file_name`. - `(\'EXISTS\', file_name)`: Checks if the file with `file_name` exists. The function should return a list of results for each `GET` and `EXISTS` operation, in the same order as they appear in the input list. **Example Usage**: ```python def file_storage_system(operations): storage = {} results = [] for operation in operations: op_type = operation[0] file_name = operation[1] if op_type == \'ADD\': content = operation[2] storage[file_name] = content elif op_type == \'GET\': results.append(storage.get(file_name, None)) elif op_type == \'EXISTS\': results.append(file_name in storage) return results # Example operations operations = [ (\'ADD\', \'file1.txt\', \'Hello, world!\'), (\'ADD\', \'file2.txt\', \'Python is fun\'), (\'GET\', \'file1.txt\'), (\'EXISTS\', \'file2.txt\'), (\'GET\', \'file3.txt\'), (\'EXISTS\', \'file3.txt\') ] # Call the function results = file_storage_system(operations) print(results) # Output: [\'Hello, world!\', True, None, False] ```","solution":"def file_storage_system(operations): Simulates a simple file storage system where files can be added, retrieved, and checked for existence. Parameters: operations (list of tuples): A list of operations to perform on the file storage. Each tuple can be: - (\'ADD\', file_name, content): Adds a file with the given name and content. - (\'GET\', file_name): Retrieves the content of the file with the given name. - (\'EXISTS\', file_name): Checks if the file with the given name exists. Returns: list: Results of \'GET\' and \'EXISTS\' operations. storage = {} results = [] for operation in operations: op_type = operation[0] file_name = operation[1] if op_type == \'ADD\': content = operation[2] storage[file_name] = content elif op_type == \'GET\': results.append(storage.get(file_name, None)) elif op_type == \'EXISTS\': results.append(file_name in storage) return results"},{"question":"Write a function that takes a list of integers and a positive integer `k`, and returns the maximum sum of `k` consecutive elements in the list. The function should handle edge cases such as: - List being empty - `k` being larger than the length of the list - List containing negative numbers If the list is empty or `k` is larger than the length of the list, the function should print an appropriate error message and return None. The function should be efficient and operate in O(n) time complexity. You should write self-contained code starting with: ``` def max_k_sum(arr, k): ```","solution":"def max_k_sum(arr, k): Returns the maximum sum of k consecutive elements in the list, or prints an error message if the list is empty or k is larger than the length of the list. if not arr: print(\\"The list is empty.\\") return None if k > len(arr): print(\\"k is larger than the length of the list.\\") return None if k == 0: print(\\"k should be a positive integer.\\") return None max_sum = sum(arr[:k]) current_sum = max_sum for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a task to implement a simplified encryption and decryption system using a substitution cipher. A substitution cipher is a method of encoding where each letter in the plaintext is replaced with a letter corresponding to a fixed substitution alphabet. Your task is to implement a function `substitution_cipher` which will perform encryption and decryption. This function should: 1. Accept a `mode` parameter which can either be `\'encrypt\'` or `\'decrypt\'`. 2. Accept an `alphabet` parameter, which is a string representing the fixed substitution alphabet. 3. Accept a `text` parameter, which is the text to be encrypted or decrypted. For encryption, each letter in the `text` should be replaced with the corresponding letter from the `alphabet` based on its position in the standard English alphabet. For decryption, reverse the process using the same `alphabet`. Below is the function signature you need to implement: ```python def substitution_cipher(mode, alphabet, text): # Your code here ``` **Function Parameters:** - `mode` (str): The operation mode, either `\'encrypt\'` or `\'decrypt\'`. - `alphabet` (str): The fixed substitution alphabet consisting of exactly 26 characters. - `text` (str): The text to be encrypted or decrypted. **Output:** - Return the encrypted or decrypted text based on the `mode`. **Example Usage:** Encryption: ```python substitution_cipher(\'encrypt\', \'QWERTYUIOPASDFGHJKLZXCVBNM\', \'HELLO\') # Output: \'ITSSG\' ``` Decryption: ```python substitution_cipher(\'decrypt\', \'QWERTYUIOPASDFGHJKLZXCVBNM\', \'ITSSG\') # Output: \'HELLO\' ``` This problem is designed to help you practice basic string manipulation techniques and understand how substitution ciphers work in cryptography.","solution":"def substitution_cipher(mode, alphabet, text): Perform encryption or decryption using a substitution cipher. Parameters: mode (str): The operation mode, either \'encrypt\' or \'decrypt\'. alphabet (str): The fixed substitution alphabet consisting of exactly 26 characters. text (str): The text to be encrypted or decrypted. Returns: str: The encrypted or decrypted text. standard_alphabet = \'ABCDEFGHIJKLMNOPQRSTUVWXYZ\' result_text = \'\' if mode == \'encrypt\': for char in text: if char.upper() in standard_alphabet: index = standard_alphabet.index(char.upper()) new_char = alphabet[index] result_text += new_char if char.isupper() else new_char.lower() else: result_text += char elif mode == \'decrypt\': for char in text: if char.upper() in alphabet: index = alphabet.index(char.upper()) new_char = standard_alphabet[index] result_text += new_char if char.isupper() else new_char.lower() else: result_text += char return result_text"},{"question":"You are required to create a function that simulates a simple text editor\'s word-wrapping feature. The word-wrapping feature should ensure that no line exceeds a specific character width while not splitting any words. Words exceeding this width should occupy a new line. Write a function `word_wrap` that takes a string `text` and an integer `max_width` as input and returns a list of strings, where each string represents a line within the specified maximum width. # Function Signature ```python def word_wrap(text: str, max_width: int) -> list: Wraps text into lines of maximum \'max_width\' character limit without breaking words. Parameters: text (str): The input text to be wrapped. max_width (int): The maximum width of a single line. Returns: list: A list of strings, where each string is a line within max_width. ``` # Example ```python text_input = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam.\\" max_width = 20 result = word_wrap(text_input, max_width) # Expected output: # [ # \\"Lorem ipsum dolor\\", # \\"sit amet,\\", # \\"consectetur\\", # \\"adipiscing elit.\\", # \\"Integer nec odio.\\", # \\"Praesent libero.\\", # \\"Sed cursus ante\\", # \\"dapibus diam.\\" # ] ``` In the above example, the input text is wrapped such that no line exceeds 20 characters, and no words are split between lines. # Requirements - Words are sequences of characters separated by spaces. - Maintain the order of words as they appear in the input text. - Ensure all characters, including punctuation, are preserved appropriately. - Handle cases where a single word can be longer than the specified max_width; such words should occupy their own line without splitting. # Notes - Only spaces should be used to separate words; multiple spaces in the input text should be treated as single spaces. - The final list should not contain empty strings.","solution":"def word_wrap(text: str, max_width: int) -> list: Wraps text into lines of maximum \'max_width\' character limit without breaking words. Parameters: text (str): The input text to be wrapped. max_width (int): The maximum width of a single line. Returns: list: A list of strings, where each string is a line within max_width. # Splitting the text into words words = text.split() lines = [] current_line = \\"\\" for word in words: # Check if adding the next word exceeds the max_width or not if len(current_line) + len(word) + 1 <= max_width: if current_line: current_line += \\" \\" + word else: current_line = word else: # If current line is already over max_width if current_line: lines.append(current_line) current_line = word # In case the word itself is longer than max_width if len(word) > max_width: lines.append(word) current_line = \\"\\" # Adding the last processed line if not empty if current_line: lines.append(current_line) return lines"},{"question":"Your task is to implement a function named `rotate_matrix(matrix)` that takes a single argument, `matrix`, which is a list of lists representing a square matrix (NxN). This function should rotate the matrix 90 degrees clockwise in place, modifying the original matrix. To achieve this task, you are required to manipulate the matrix without using any additional data structures or importing any libraries. The rotation should be done by moving the elements in layers, starting from the outermost layer to the innermost layer. # Detailed Steps: 1. Iterate through each layer of the matrix, from the outermost layer to the innermost layer. 2. For each layer, move the elements in the top row to the right column, the right column to the bottom row, the bottom row to the left column, and the left column to the top row. 3. Continue moving elements in this fashion until all the elements in the current layer are rotated. 4. Repeat the process for the next inner layer. # Constraints: - The input matrix is guaranteed to be a square matrix (NxN), where 1 <= N <= 100. - Do not use any additional data structures like another list to facilitate the rotation. - Do not import or use any external libraries. # Example: If the `matrix` is: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After running `rotate_matrix(matrix)`, the matrix should be modified in place to: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Implementation: ```python def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # save top # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top # right <- saved top ```","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first top = matrix[first][i] # save top # left -> top matrix[first][i] = matrix[last - offset][first] # bottom -> left matrix[last - offset][first] = matrix[last][last - offset] # right -> bottom matrix[last][last - offset] = matrix[i][last] # top -> right matrix[i][last] = top # right <- saved top"},{"question":"Write a function that processes a list of integers and returns a new list where each element is the product of all the elements in the original list except the one at the same position. This can be useful in various computational problems where such product arrays are required without using division to maintain accuracy and handle zeroes properly. Write a function named `product_except_self(nums)` that takes the following parameter: - `nums` (a list of integers): The list of integers to process. # Requirements: 1. The function should not use the division operation. 2. The function should return a list where each element at index `i` is the product of all the elements in the original list except the one at index `i`. # Example: ```python print(product_except_self([1, 2, 3, 4])) # Example output: [24, 12, 8, 6] print(product_except_self([4, 5, 1, 8, 2])) # Example output: [80, 64, 320, 40, 160] ``` Here, the function processes the input list and returns a new list where each element is the product of all elements except itself at each respective position in the original list.","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements in the input list except the one at the same position. length = len(nums) if length == 0: return [] # Initialize arrays for prefix and suffix products prefix = [1] * length suffix = [1] * length # Calculate prefix products for i in range(1, length): prefix[i] = prefix[i-1] * nums[i-1] # Calculate suffix products for i in range(length-2, -1, -1): suffix[i] = suffix[i+1] * nums[i+1] # Calculate result by multiplying prefix and suffix products result = [1] * length for i in range(length): result[i] = prefix[i] * suffix[i] return result"},{"question":"You are tasked with implementing a simplified library management system that simulates the borrowing and returning of books. Your job is to write a class named `Library` that: 1. Initializes with a dictionary of books, where keys are book titles (strings) and values are the number of copies available (integers). 2. Has a method `borrow(book_title)` that: - Decreases the number of available copies of the given book by 1. - Returns a message: If the book is available, return \'Book borrowed successfully\', otherwise return \'Book not available\'. 3. Has a method `return_book(book_title)` that: - Increases the number of available copies of the given book by 1. - Returns a message: \'Book returned successfully\'. 4. Has a method `inventory()` that returns the current state of the library as a dictionary. # Requirements: - You may assume that all book titles provided are valid and exist in the library\'s initial dictionary. - Handle the edge case where attempting to borrow a book with 0 available copies. **Hint:** Ensure that the internal dictionary of books is updated correctly each time a book is borrowed or returned.","solution":"class Library: def __init__(self, books): Initializes the library with a dictionary of books. :param books: dict, where keys are book titles (strings) and values are their quantities (integers). self.books = books def borrow(self, book_title): Borrow a book from the library. :param book_title: str, title of the book to borrow. :return: str, message indicating the result. if self.books[book_title] > 0: self.books[book_title] -= 1 return \'Book borrowed successfully\' else: return \'Book not available\' def return_book(self, book_title): Return a book to the library. :param book_title: str, title of the book to return. :return: str, message indicating the result. self.books[book_title] += 1 return \'Book returned successfully\' def inventory(self): Return the current state of the library\'s book inventory. :return: dict, current state of the library. return self.books"},{"question":"You are required to write a Python function named `rotate_matrix_90` that rotates a given `NxN` matrix `matrix` by 90 degrees in the clockwise direction. Your function should perform the rotation in-place, modifying the original matrix without using extra space for another matrix. # Function Signature ```python def rotate_matrix_90(matrix: list[list[int]]) -> None: ``` # Parameters - `matrix`: A 2D list of integers of shape `(N, N)` representing an `NxN` matrix. # Requirements 1. Rotate the `matrix` by 90 degrees clockwise in-place. 2. The function should not create a new matrix; instead, modify the original matrix. # Example ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix_90(matrix) ``` Before rotation, the `matrix` is: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` After rotation, the `matrix` should look like: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix_90(matrix: list[list[int]]) -> None: Rotates the given NxN matrix by 90 degrees clockwise in-place. :param matrix: A 2D list of integers of shape (N, N) N = len(matrix) # Step 1: Transpose the matrix (swap rows with columns) for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(N): matrix[i].reverse()"},{"question":"You are required to write a function `analyze_text_files_in_directory()` that calculates the average length of words in all `.txt` files within a specified directory. This function will utilize functions from the Python `os` library to navigate the files and the `re` library for word extraction. **Function Signature:** ```python def analyze_text_files_in_directory(directory_path: str) -> float: pass ``` # Detailed Steps: 1. The function should first change the current working directory to the specified `directory_path`. 2. The function should iterate over all files in the directory and filter out the files that end with `.txt`. 3. For each `.txt` file, open and read the contents of the file. 4. Extract all words from the text using regular expressions (considers sequences of alphabetic characters as words). 5. Calculate the length of each word and keep a running total of these lengths and the count of words. 6. After processing all `.txt` files, compute and return the average length of the words. # Input: - `directory_path` (str): A string representing the path of the directory containing the `.txt` files to be analyzed. # Output: - The function returns a float representing the average length of words found in the text files. # Example Run: Consider the directory `example_texts` with the following files: - `readme.txt` containing \\"Welcome to the example directory.\\" - `notes.txt` containing \\"This is an example text file.\\" After running the function `analyze_text_files_in_directory(\\"example_texts\\")`, it should compute the average length of words from these files. Given the files with their contents: - `readme.txt` - [\\"Welcome\\", \\"to\\", \\"the\\", \\"example\\", \\"directory\\"] (Total words: 5, Total length: 28) - `notes.txt` - [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"text\\", \\"file\\"] (Total words: 6, Total length: 23) Total words: 11, Total length: 51. Average length = 51 / 11 = 4.636363636 (keep significant figures as needed). # Libraries to Use: To solve this problem, you will need to use the following functions and libraries: - `os`: To change the current working directory and list the files. - `re`: To extract words from the text using regular expressions. Ensure that your function follows this specification and properly tests these functionalities.","solution":"import os import re def analyze_text_files_in_directory(directory_path: str) -> float: os.chdir(directory_path) total_length = 0 total_words = 0 for file_name in os.listdir(\'.\'): if file_name.endswith(\'.txt\'): with open(file_name, \'r\') as file: content = file.read() words = re.findall(r\'b[a-zA-Z]+b\', content) total_length += sum(len(word) for word in words) total_words += len(words) if total_words == 0: return 0.0 return total_length / total_words # Example directory for testing purposes if __name__ == \\"__main__\\": avg_length = analyze_text_files_in_directory(\\"example_texts\\") print(f\\"Average length of words: {avg_length:.2f}\\")"},{"question":"**Context**: In dynamic array-based data structures, performance can often be improved by optimizing certain operations. One common operation is merging intervals or ranges in a sorted list to remove overlap and simplify the structure. **Objective**: Write a Python function `merge_intervals(intervals)` that merges overlapping intervals in a given list of intervals. **Requirements**: 1. The function should take a list of tuples, where each tuple represents an interval with a start and end point (`(start, end)`). 2. The intervals should be merged if they overlap or touch each other. **Function Signature**: ```python def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ... ``` **Input**: - `intervals` (List[Tuple[int, int]]): A list of intervals represented as tuples, where each tuple contains two integers, the start and end of the interval. **Output**: - Returns a list of merged intervals. **Example**: ```python # Example input intervals = [(1, 3), (2, 6), (8, 10), (15, 18)] # Function call merged_intervals = merge_intervals(intervals) # Expected output # [(1, 6), (8, 10), (15, 18)] ``` **Tasks**: - Sort the intervals by their start points. - Iterate through the sorted intervals and merge them as needed. - Append resulting merged intervals to a new list that should be returned at the end. Additional consideration: Ensure that the time complexity of the solution is efficient, ideally O(n log n) due to sorting and O(n) for the merging process, where n is the number of intervals.","solution":"from typing import List, Tuple def merge_intervals(intervals: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Merges overlapping intervals in a given list of intervals. Args: intervals (List[Tuple[int, int]]): A list of intervals represented as tuples. Returns: List[Tuple[int, int]]: A list of merged intervals. if not intervals: return [] # Sort intervals by their start point sorted_intervals = sorted(intervals, key=lambda x: x[0]) merged_intervals = [] current_interval = sorted_intervals[0] for interval in sorted_intervals[1:]: if interval[0] <= current_interval[1]: # There is overlap, so merge intervals current_interval = (current_interval[0], max(current_interval[1], interval[1])) else: # No overlap, so add the current interval to merged list merged_intervals.append(current_interval) current_interval = interval # Add the last interval merged_intervals.append(current_interval) return merged_intervals"},{"question":"You are required to write a function named `analyze_sales_trends` that analyzes sales data to identify trends in monthly sales performance over a given period of years. The function should take a pandas DataFrame as input, filter the data for the years 2015 to 2020, calculate the average monthly sales, and generate a line plot using the `matplotlib.pyplot` API. The plot should be saved as a JPEG file. Here are the detailed steps your function should perform: 1. **Filter the DataFrame**: - Keep only the rows where the \'Year\' is between 2015 and 2020 (inclusive). 2. **Calculate Monthly Averages**: - Group the data by \'Month\' and calculate the average sales for each month over the given period. 3. **Plot the Data**: - Use `matplotlib.pyplot` to create a line plot with: - \'Month\' on the X-axis (formatted as Jan, Feb, etc.). - Average sales on the Y-axis. - Include a title \\"Average Monthly Sales (2015-2020)\\", and label the X and Y-axes accordingly. 4. **Save the Plot**: - Save the plot as \'average_monthly_sales.jpeg\'. Your task is to implement the `analyze_sales_trends` function according to these requirements. Input: - A pandas DataFrame `df` containing at least the following columns: \'Year\', \'Month\', \'Sales\'. Output: - A JPEG file named \'average_monthly_sales.jpeg\' containing the line plot.","solution":"import pandas as pd import matplotlib.pyplot as plt def analyze_sales_trends(df): Analyzes sales data to identify trends in monthly sales performance over a given period of years (2015-2020). Generates a line plot and saves it as a .jpeg file. Parameters: df (DataFrame): Pandas DataFrame containing sales data with \'Year\', \'Month\', \'Sales\' columns. # Filter the DataFrame for years between 2015 and 2020 filtered_df = df[(df[\'Year\'] >= 2015) & (df[\'Year\'] <= 2020)] # Calculate average monthly sales avg_monthly_sales = filtered_df.groupby(\'Month\')[\'Sales\'].mean() # Order the months for plotting months_order = [\'Jan\', \'Feb\', \'Mar\', \'Apr\', \'May\', \'Jun\', \'Jul\', \'Aug\', \'Sep\', \'Oct\', \'Nov\', \'Dec\'] avg_monthly_sales = avg_monthly_sales.reindex(months_order) # Plot the data plt.figure(figsize=(10, 6)) avg_monthly_sales.plot(kind=\'line\', marker=\'o\') plt.title(\'Average Monthly Sales (2015-2020)\') plt.xlabel(\'Month\') plt.ylabel(\'Average Sales\') plt.grid(True) plt.savefig(\'average_monthly_sales.jpeg\') plt.close()"},{"question":"Implement a function named `shorten_text` that takes a string `text` and an integer `limit` as input and returns a new string that is truncated to the maximum number of full words whose combined length does not exceed `limit` characters. Words in the output should maintain the order in which they appear in the input `text`. If the first word itself exceeds the limit, return an empty string. # Function Signature: ```python def shorten_text(text, limit): pass ``` # Example: ```python text = \\"The quick brown fox jumps over the lazy dog\\" limit = 15 result = shorten_text(text, limit) print(result) ``` # Expected Output: ``` \\"The quick brown\\" ``` # Notes: - Words are separated by spaces. - Ensure that the output string does not exceed the specified character limit. - Handle edge cases, such as when the limit is smaller than the length of any word in the text. In such cases, return an empty string.","solution":"def shorten_text(text, limit): Truncate the input text to the maximum number of full words whose combined length does not exceed \'limit\' characters. Parameters: text (str): The input string containing words separated by spaces. limit (int): The maximum allowed length of the truncated string. Returns: str: The truncated string, or an empty string if the limit is smaller than the length of any word in the text. words = text.split() result = [] current_length = 0 for word in words: # Check if adding this word would exceed the limit if current_length + len(word) + len(result) <= limit: result.append(word) current_length += len(word) else: break return \' \'.join(result)"},{"question":"You are asked to implement a function to analyze text data from a book and identify the most frequently occurring words. The goal is to practice reading and processing text files, as well as utilizing dictionaries for counting occurrences. Your function should be named `most_frequent_words` and should perform the following tasks: 1. Read the entire content from a provided text file. 2. Process the text to identify individual words, ensuring that words are counted independently of their case (e.g., \\"The\\" and \\"the\\" should be considered the same word). 3. Ignore punctuation and special characters when identifying words. 4. Calculate the frequency of each word. 5. Return a list of tuples containing the top N most frequently occurring words along with their counts, sorted in descending order of frequency. Specifically, your function `most_frequent_words` should: - Accept two parameters: - `file_path`: a string representing the path to the text file. - `top_n`: an integer representing the number of top frequent words to return. - Use built-in Python libraries such as `re` and `collections.Counter` to process and count word occurrences. - Ensure the function returns a list of tuples, where each tuple contains a word and its corresponding count. Here is an example template of how your function may look: ```python import re from collections import Counter def most_frequent_words(file_path, top_n): with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Process the text to remove punctuation and make words lowercase words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of each word word_counts = Counter(words) # Retrieve the top N most common words most_common = word_counts.most_common(top_n) return most_common ``` Given this function, you can analyze a book text stored in a file and determine the most frequent words within the text.","solution":"import re from collections import Counter def most_frequent_words(file_path, top_n): Analyze text data from a book and identify the most frequently occurring words. Parameters: file_path (str): Path to the text file. top_n (int): Number of top frequent words to return. Returns: List[Tuple[str, int]]: List of tuples containing the top N most frequently occurring words and their counts, sorted in descending order. with open(file_path, \'r\', encoding=\'utf-8\') as file: text = file.read() # Process the text to remove punctuation and make words lowercase words = re.findall(r\'bw+b\', text.lower()) # Count the occurrences of each word word_counts = Counter(words) # Retrieve the top N most common words most_common = word_counts.most_common(top_n) return most_common"},{"question":"Develop a function that takes a sentence as input and returns the sentence with the order of the words reversed. This function should retain all punctuation and spacing as in the original sentence. However, the words themselves should be reversed as entire units (words remain the same characters). For example, given the input sentence: \\"Hello, world! How are you today?\\", the expected output should be: \\"today? you are How world! Hello,\\". Your task is to implement a function named `reverse_sentence(sentence)` which performs the following steps: 1. Split the sentence into words. Words are defined as sequences of non-space characters. 2. Reverse the order of the words. 3. Join the words back into a single string with words separated by spaces. **Requirements**: - Preserve all original punctuation marks and spaces. - Do not change the order of characters within each word. Here is the function signature: ```python def reverse_sentence(sentence): Reverse the order of words in a given sentence. Args: sentence (str): The original sentence. Returns: str: The sentence with the order of words reversed. ``` Implement the function to achieve the described behavior.","solution":"def reverse_sentence(sentence): Reverse the order of words in a given sentence. Args: sentence (str): The original sentence. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] reversed_sentence = \' \'.join(reversed_words) return reversed_sentence"},{"question":"You are tasked with implementing a function that identifies and returns islands in a 2D grid. An island is defined as a group of connected \'1\'s (connected horizontally or vertically). The function must take into account the four main directions (up, down, left, right) to traverse the grid. This problem helps you practice depth-first search (DFS) and grid traversal techniques. **Function Signature:** ```python def find_islands(grid): ``` **Parameters:** - `grid` (list of list of int): A 2D grid consisting of \'0\'s and \'1\'s. **Returns:** - `islands` (list of list of tuple): A list that contains lists of tuples. Each tuple represents the coordinates of a cell within an island. **Instructions:** 1. If the grid is empty or contains no \'1\'s, return an empty list. 2. Traverse the grid to find all \'1\'s that form islands. 3. Use DFS to record all the connected cells (forming an island) from each starting \'1\'. 4. Return a list of islands, where each island is represented by a list of tuple coordinates. **Examples:** ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 0, 0, 0] ] # Expected Output: [[(0, 0), (0, 1), (1, 0), (1, 1)], [(1, 3), (1, 4), (2, 3), (2, 4)], [(3, 1)]] print(find_islands(grid)) ``` # Hints: 1. Create a function to perform DFS, marking visited \'1\'s, and collecting the coordinates of each cell in the current island. 2. Utilize a set to keep track of the visited coordinates to avoid recounting. 3. Iterate through each cell in the grid, and for each unvisited \'1\', initiate a DFS to find the complete island. **Solutions:** ```python def find_islands(grid): def dfs(x, y, grid, visited, island): stack = [(x, y)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while stack: cx, cy = stack.pop() if (cx, cy) not in visited: visited.add((cx, cy)) island.append((cx, cy)) for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 1 and (nx, ny) not in visited: stack.append((nx, ny)) if not grid: return [] visited = set() islands = [] for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1 and (i, j) not in visited: island = [] dfs(i, j, grid, visited, island) islands.append(island) return islands ```","solution":"def find_islands(grid): def dfs(x, y, grid, visited, island): stack = [(x, y)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while stack: cx, cy = stack.pop() if (cx, cy) not in visited: visited.add((cx, cy)) island.append((cx, cy)) for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 1 and (nx, ny) not in visited: stack.append((nx, ny)) if not grid: return [] visited = set() islands = [] for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1 and (i, j) not in visited: island = [] dfs(i, j, grid, visited, island) islands.append(island) return islands"},{"question":"Write a function `find_rectangle_overlap(rect1, rect2)` that determines the overlapping area between two rectangles. Each rectangle is defined by a dictionary with keys `\'x\'`, `\'y\'`, `\'width\'`, and `\'height\'`, representing the coordinates of its bottom-left corner and its dimensions. The function should: 1. Calculate the coordinates of the intersection rectangle, if any, between the two given rectangles. 2. Return a dictionary with the keys `\'x\'`, `\'y\'`, `\'width\'`, and `\'height\'` representing the intersecting rectangle. 3. If there is no overlap, return `None`. The dictionary representing a rectangle is defined as follows: - `x` (int): The x-coordinate of the bottom-left corner of the rectangle. - `y` (int): The y-coordinate of the bottom-left corner of the rectangle. - `width` (int): The width of the rectangle. - `height` (int): The height of the rectangle. ```python def find_rectangle_overlap(rect1, rect2): pass ``` **Example:** ```python rect1 = {\'x\': 1, \'y\': 1, \'width\': 6, \'height\': 3} rect2 = {\'x\': 4, \'y\': 2, \'width\': 3, \'height\': 4} result = find_rectangle_overlap(rect1, rect2) print(result) # Output: {\'x\': 4, \'y\': 2, \'width\': 3, \'height\': 2} rect1 = {\'x\': 1, \'y\': 1, \'width\': 2, \'height\': 2} rect2 = {\'x\': 3, \'y\': 3, \'width\': 2, \'height\': 2} result = find_rectangle_overlap(rect1, rect2) print(result) # Output: None ```","solution":"def find_rectangle_overlap(rect1, rect2): Determines the overlapping area between two rectangles. Returns a dictionary with the keys \'x\', \'y\', \'width\', and \'height\' representing the intersecting rectangle. If there is no overlap, returns None. # Calculate the x and y coordinates of the intersection rectangle x_intersection_left = max(rect1[\'x\'], rect2[\'x\']) y_intersection_bottom = max(rect1[\'y\'], rect2[\'y\']) x_intersection_right = min(rect1[\'x\'] + rect1[\'width\'], rect2[\'x\'] + rect2[\'width\']) y_intersection_top = min(rect1[\'y\'] + rect1[\'height\'], rect2[\'y\'] + rect2[\'height\']) # Calculate the width and height of the intersection rectangle intersection_width = x_intersection_right - x_intersection_left intersection_height = y_intersection_top - y_intersection_bottom # Check if there is an overlap if intersection_width > 0 and intersection_height > 0: return {\'x\': x_intersection_left, \'y\': y_intersection_bottom, \'width\': intersection_width, \'height\': intersection_height} return None"},{"question":"# String Segmentation with Dictionary Words In natural language processing, the problem of segmenting a string into meaningful words is quite common. Given a string without spaces and a dictionary of valid words, the goal is to determine if the string can be segmented into a sequence of valid words from the dictionary. Function Specification Write a function `word_break(s, word_dict)` that takes: 1. `s` (a string): The input string without spaces. 2. `word_dict` (a list of strings): A list containing valid dictionary words. This function should: - Return a boolean value: `True` if the string can be segmented into a space-separated sequence of one or more dictionary words, and `False` otherwise. Requirements: - Efficiently determine whether the string can be segmented using dynamic programming or any other appropriate method. - Ensure optimal performance for longer strings and larger dictionaries. Example: ```python word_break(\\"applepenapple\\", [\\"apple\\", \\"pen\\"]) # should return True word_break(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) # should return False ``` Note: - You can assume all characters in the input string and the dictionary words are lowercase letters. - Edge cases, such as an empty string or an empty dictionary, should be handled appropriately. ```python def word_break(s, word_dict): word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1] ```","solution":"def word_break(s, word_dict): Determines if the input string can be segmented into a space-separated sequence of one or more dictionary words. Parameters: s (str): The input string without spaces. word_dict (list): A list of valid dictionary words. Returns: bool: True if the string can be segmented, False otherwise. word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"Implement a function to simulate a random walk and visualize its trajectory. The function should receive the number of steps as an input and return the x and y coordinates of the walk, as well as a plot of the trajectory. Ensure the plot displays the start and end points distinctly. The function should output with: tuple: A tuple containing: - ndarray: A NumPy array with the x coordinates of the walk. - ndarray: A NumPy array with the y coordinates of the walk. - Axes: A matplotlib Axes object illustrating the trajectory of the random walk. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def random_walk(steps=100): ```","solution":"import numpy as np import matplotlib.pyplot as plt def random_walk(steps=100): Simulates a random walk and visualizes its trajectory. Parameters: steps (int): Number of steps in the random walk. Returns: tuple: A tuple containing: - ndarray: A NumPy array with the x coordinates of the walk. - ndarray: A NumPy array with the y coordinates of the walk. - Axes: A matplotlib Axes object illustrating the trajectory of the random walk. # Initialize the starting point x = np.zeros(steps) y = np.zeros(steps) # Generate the random walk for i in range(1, steps): step_direction = np.random.choice([\'left\', \'right\', \'up\', \'down\']) if step_direction == \'up\': y[i] = y[i - 1] + 1 x[i] = x[i - 1] elif step_direction == \'down\': y[i] = y[i - 1] - 1 x[i] = x[i - 1] elif step_direction == \'left\': x[i] = x[i - 1] - 1 y[i] = y[i - 1] elif step_direction == \'right\': x[i] = x[i - 1] + 1 y[i] = y[i - 1] # Create the plot fig, ax = plt.subplots() ax.plot(x, y, marker=\'o\') ax.scatter(x[0], y[0], c=\'red\', label=\'Start\') ax.scatter(x[-1], y[-1], c=\'blue\', label=\'End\') ax.legend() return x, y, ax"},{"question":"Design a function that simulates rolling a six-sided die multiple times, counts the occurrences of each face (from 1 to 6), calculates the mean, median, and mode of the outcomes, and returns both the statistics and a frequency dictionary. Additionally, print the outcomes of the rolls. Note that each face of the die has an equal probability of appearing. The function should output: tuple: A tuple containing: - Dict: A dictionary with the counts of each face (1 to 6). - float: The mean of the outcomes. - float: The median of the outcomes. - int: The mode of the outcomes. - List: The list of outcomes of the rolls. You should write self-contained code starting with: ``` import random import statistics from collections import Counter def task_func(num_rolls, seed=None): ```","solution":"import random import statistics from collections import Counter def task_func(num_rolls, seed=None): Simulates rolling a six-sided die multiple times, counts the occurrences of each face, calculates the mean, median, and mode of the outcomes, and returns both the statistics and a frequency dictionary. Parameters: num_rolls (int): The number of times to roll the die. seed (int, optional): The seed for the random number generator. Returns: tuple: A tuple containing: - dict: A dictionary with the counts of each face (1 to 6). - float: The mean of the outcomes. - float: The median of the outcomes. - int: The mode of the outcomes. - list: The list of outcomes of the rolls. if seed is not None: random.seed(seed) outcomes = [random.randint(1, 6) for _ in range(num_rolls)] # Print the outcomes print(outcomes) # Calculate frequencies frequency_dict = Counter(outcomes) # Calculate mean, median, and mode mean = statistics.mean(outcomes) median = statistics.median(outcomes) mode = statistics.mode(outcomes) return frequency_dict, mean, median, mode, outcomes"},{"question":"You are required to implement a function named `kMeansClustering` that performs K-Means clustering on a given dataset using scikit-learn. Your function should: - Accept input `data` in the form of a 2D list or numpy array where each sublist represents a data point. - Accept `numClusters`, an integer indicating the number of clusters to form. - Initialize the K-Means algorithm with the provided number of clusters and a random state of 42 for reproducibility. - Fit the model to the data. - Return the labels assigned to each data point and the coordinates of the cluster centers. Be sure to use the following scikit-learn functions and classes: 1. `KMeans` from `sklearn.cluster`. ```python from sklearn.cluster import KMeans import numpy as np def kMeansClustering(data, numClusters): # Convert data to numpy array if it\'s a list if isinstance(data, list): data = np.array(data) # Initialize KMeans with the specified number of clusters and random state of 42 kmeans = KMeans(n_clusters=numClusters, random_state=42) # Fit the KMeans model to the data kmeans.fit(data) # Retrieve the labels and cluster centers labels = kmeans.labels_ cluster_centers = kmeans.cluster_centers_ return labels, cluster_centers ``` #","solution":"from sklearn.cluster import KMeans import numpy as np def kMeansClustering(data, numClusters): Performs K-Means clustering on the given data. Parameters: data (list of lists or numpy array): The input data points. numClusters (int): The number of clusters to form. Returns: tuple: labels assigned to each data point, coordinates of the cluster centers. # Convert data to numpy array if it\'s a list if isinstance(data, list): data = np.array(data) # Initialize KMeans with the specified number of clusters and random state of 42 kmeans = KMeans(n_clusters=numClusters, random_state=42) # Fit the KMeans model to the data kmeans.fit(data) # Retrieve the labels and cluster centers labels = kmeans.labels_ cluster_centers = kmeans.cluster_centers_ return labels, cluster_centers"},{"question":"You are required to write a Python function that generates a pattern of concentric polygons using the `turtle` graphics library. The function should be named `draw_concentric_polygons` and it should adhere to the specifications described below. This problem will test your understanding of loops and the `turtle` module. # Function Specification Write a function `draw_concentric_polygons(sides, num_polygons, side_length_step)` where: - `sides` (int) - The number of sides for each polygon (e.g., 3 for triangles, 4 for squares). - `num_polygons` (int) - The total number of concentric polygons to draw. - `side_length_step` (int) - The increment to the side length for each successive polygon. # Behavior The function will: 1. Draw a sequence of `num_polygons` concentric polygons, starting from a base polygon with an initial side length. 2. Each subsequent polygon will have its side length increased by `side_length_step` units compared to the previous polygon. 3. The polygons will share the same center point, creating a stacked appearance. Ensure that your function makes effective use of the `turtle` module to draw the polygons. The `turtle` should start drawing from a specified initial length and increment the length by the given step for each polygon. # Example ```python # Example usage: import turtle turtle.speed(1) # Optional: set turtle speed to make drawing visible draw_concentric_polygons(6, 5, 20) turtle.done() # Finalizes the turtle drawing window, can be closed by user ``` # Note To draw a polygon with `n` sides of length `l` using the `turtle` module, you can utilize a loop that repeats `n` times, each time moving the turtle forward by `l` units and turning it by `360/n` degrees to the right.","solution":"import turtle def draw_concentric_polygons(sides, num_polygons, side_length_step): Draws a sequence of concentric polygons using turtle graphics. Parameters: - sides (int): The number of sides for each polygon. - num_polygons (int): The total number of concentric polygons to draw. - side_length_step (int): The increment to the side length for each successive polygon. def draw_polygon(sides, side_length): angle = 360 / sides for _ in range(sides): turtle.forward(side_length) turtle.right(angle) initial_side_length = 20 # Initial length of sides for the base polygon current_side_length = initial_side_length for _ in range(num_polygons): draw_polygon(sides, current_side_length) current_side_length += side_length_step # Lift the pen and position turtle for next polygon turtle.penup() turtle.goto(0, 0) turtle.pendown()"},{"question":"You are tasked with implementing a function to parse and analyze log data to extract useful information. The logs contain entries that provide events related to user activity on a website. Your function should process these logs to determine and return the unique users who participated in each event type. # Function Requirements: - Function Name: `analyze_user_activity` - Input: A list of strings representing the log entries. Each entry is a string in the format: `\\"timestamp event_type user_id\\"`. - Output: A dictionary where the keys are event types and the values are sets of unique user IDs that participated in each event. # Constraints: 1. Each log entry is guaranteed to be correctly formatted. 2. Event types and user IDs are alphanumeric strings. 3. The timestamps are not required for the analysis but can be assumed to be in a valid format. # Example: Consider the following list of log entries: ```python logs = [ \\"2023-10-11 10:00:00 login user1\\", \\"2023-10-11 10:05:00 view_page user2\\", \\"2023-10-11 10:15:00 login user3\\", \\"2023-10-11 10:20:00 logout user1\\", \\"2023-10-11 10:25:00 view_page user1\\" ] ``` If you call the function `analyze_user_activity(logs)`, it should return: ```python { \\"login\\": {\\"user1\\", \\"user3\\"}, \\"view_page\\": {\\"user2\\", \\"user1\\"}, \\"logout\\": {\\"user1\\"} } ``` # Your Task: Implement the function `analyze_user_activity` as per the requirements mentioned above. Make sure to handle the processing of log entries and extraction of unique users for each event type. ```python def analyze_user_activity(logs): # Your implementation here ```","solution":"def analyze_user_activity(logs): Parses log data to extract unique users for each event type. Parameters: logs (list of str): List of log entries in the format \\"timestamp event_type user_id\\". Returns: dict: A dictionary where keys are event types and values are sets of unique user IDs. event_user_map = {} for log in logs: # Split the log entry to get timestamp, event_type, and user_id parts = log.split() timestamp = parts[0] + \\" \\" + parts[1] event_type = parts[2] user_id = parts[3] # Initialize the set for the event type if it doesn\'t exist if event_type not in event_user_map: event_user_map[event_type] = set() # Add the user_id to the set for the event type event_user_map[event_type].add(user_id) return event_user_map"},{"question":"**Context:** You are required to create a function, `find_common_subsequence_length(str1: str, str2: str) -> int`, that computes the length of the longest common subsequence (LCS) between two given strings. The LCS is defined as the longest sequence that can be derived from both original strings by deleting some characters without changing the order of the remaining characters. **Requirements:** 1. **Function:** - **Name:** `find_common_subsequence_length` - **Parameters:** `str1` (string), `str2` (string) - **Return:** length (int) - **Description:** This function calculates the length of the longest common subsequence between the two input strings using dynamic programming. 2. **Implementation Specifications:** - Create a 2D list `dp` where `dp[i][j]` represents the LCS length of `str1[:i]` and `str2[:j]`. - Initialize `dp` with zeroes. - Use nested loops to populate the `dp` list following the rules of comparing characters: - If characters `str1[i-1]` and `str2[j-1]` are the same, then `dp[i][j] = dp[i-1][j-1] + 1` - Otherwise, `dp[i][j] = max(dp[i-1][j], dp[i][j-1])` - The value at `dp[len(str1)][len(str2)]` will contain the length of the LCS. **Example Usage:** ```python assert find_common_subsequence_length(\\"abcde\\", \\"ace\\") == 3 assert find_common_subsequence_length(\\"abc\\", \\"def\\") == 0 assert find_common_subsequence_length(\\"abc\\", \\"abc\\") == 3 ``` The example would return: - 3, since \\"ace\\" is the longest common subsequence of \\"abcde\\" and \\"ace\\". - 0, since there is no common subsequence between \\"abc\\" and \\"def\\". - 3, since \\"abc\\" is common in both strings \\"abc\\" and \\"abc\\".","solution":"def find_common_subsequence_length(str1: str, str2: str) -> int: Returns the length of the longest common subsequence (LCS) between two given strings. Parameters: str1 (str): The first input string. str2 (str): The second input string. Returns: int: The length of the LCS. n = len(str1) m = len(str2) # Create a 2D list to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array from bottom up for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Implement a function named `reverse_words` in Python that reverses the order of words in a given string. Words are defined as sequences of characters separated by whitespace. The returned string should maintain the same amount of whitespace between words as found in the input string. Function Signature: ```python def reverse_words(s: str) -> str: ``` - **Input**: - `s`: A string containing words separated by spaces. The string may have multiple spaces between words, and leading/trailing spaces. - **Output**: - The function should return a string with the words reversed in order but maintaining the original spacing between them. Examples: ```python reverse_words(\\" hello world \\") -> \\" world hello \\" reverse_words(\\"a good example\\") -> \\"example good a\\" reverse_words(\\" Bob Loves Alice \\") -> \\" Alice Loves Bob \\" ``` Requirements: - Handle multiple spaces between words. - Preserve leading and trailing spaces. Your solution should process the input string to correctly reverse the order of words without altering the original spacing pattern. This exercise will help you become familiar with string manipulation and handling edge cases with white spaces in Python.","solution":"def reverse_words(s: str) -> str: Reverses the order of words in a given string while maintaining leading, trailing, and multiple spaces between words. words = s.split() reversed_words = words[::-1] # Join with a single space to form the final result and maintain the original whitespace pattern. return \' \'.join(reversed_words)"},{"question":"** Write a function `reverse_words_in_file` that takes the path to a text file as input, reads the content of the file, reverses each word in every line, and writes the modified content to a new file. The new file should have the same name as the original file, but with \\"_reversed\\" appended to the filename (before the file extension, if present). If the original file is `example.txt`, the new file should be `example_reversed.txt`. If the original file name is `data`, the new file should be `data_reversed`. Key Points: 1. Read the content of the input file line-by-line. 2. For each line, reverse each word while maintaining the original order of words and spaces. 3. Write the modified content to the new file with the appropriate name. 4. Ensure that the function handles files with or without extensions correctly. Here is an example of how the function should work: Suppose the content of the file `sample.txt` is: ``` Hello World Python is fun ``` After executing the function: ```python reverse_words_in_file(\'sample.txt\') ``` The new file `sample_reversed.txt` should contain: ``` olleH dlroW nohtyP si nuf ``` **Function Signature:** ```python def reverse_words_in_file(file_path: str) -> None: pass ``` **","solution":"def reverse_words_in_file(file_path: str) -> None: import os # Split the file path into the name and its extension file_name, file_extension = os.path.splitext(file_path) new_file_path = file_name + \'_reversed\' + file_extension # Read the input file with open(file_path, \'r\') as file: lines = file.readlines() # Reverse each word in every line reversed_lines = [] for line in lines: reversed_words = \' \'.join(word[::-1] for word in line.split()) reversed_lines.append(reversed_words) # Write the modified content to the new file with open(new_file_path, \'w\') as new_file: for reversed_line in reversed_lines: new_file.write(reversed_line + \'n\')"},{"question":"Create a function named `find_common_elements` that takes two lists as input and returns a new list containing the common elements between the two input lists. The function should maintain the order of appearance based on the first input list and should not contain any duplicates. Specifications: 1. The function should accept two lists of integers as input. 2. Iterate over the first list and check if each element is present in the second list. 3. If an element from the first list is found in the second list and hasn\'t already been added to the result list, add it. 4. Return the resulting list that contains the common elements in their original order of the first list without duplicates. The function signature is: ```python def find_common_elements(list1, list2): ``` Example: ```python assert find_common_elements([1, 2, 3, 4, 4, 5], [4, 3, 2, 2, 9]) == [2, 3, 4] assert find_common_elements([7, 8, 9, 10], [10, 9, 8, 7]) == [7, 8, 9, 10] ``` Explanation: For the inputs `[1, 2, 3, 4, 4, 5]` and `[4, 3, 2, 2, 9]`, the common elements are `2`, `3`, and `4`. Even though `4` appears twice in the first list, it only appears once in the result list. For the second example, all elements are common between the two lists and are included in their original order.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between list1 and list2, maintaining the order from list1 and removing duplicates. common_elements = [] seen = set() for element in list1: if element in list2 and element not in seen: common_elements.append(element) seen.add(element) return common_elements"},{"question":"You are asked to write a function that simulates rolling a pair of six-sided dice and returns the result as a tuple along with the total sum. This function can be useful in a game to determine random outcomes based on dice rolls. Here are the details: - The function should be named `roll_dice`. - The function should take no parameters. - The function should roll two dice using the `random.randint` method. Each die will have a range from 1 to 6, inclusive. - The function should return a tuple containing three integers: 1. The result of the first die. 2. The result of the second die. 3. The total sum of both dice. Ensure the function uses the required library method correctly per its documentation: - `random.randint(a, b)`: This method returns a random integer within the given range `[a, b]`, inclusive. The function should not involve any input/output operations beyond what is described. Function Signature: ```python def roll_dice() -> tuple: ``` Example Usage: ```python dice_roll = roll_dice() print(\\"Rolled dice:\\", dice_roll[:2], \\"with a total of:\\", dice_roll[2]) ``` Expected Output for Example Usage: ``` Rolled dice: (3, 5) with a total of: 8 ```","solution":"import random def roll_dice(): Simulates rolling a pair of six-sided dice and returns the result as a tuple containing the result of each die and the total sum. die1 = random.randint(1, 6) die2 = random.randint(1, 6) total = die1 + die2 return (die1, die2, total)"},{"question":"In this problem, you will implement a class called `CompositeShape` that manages a collection of geometric shapes and provides a method to calculate their combined area. The class should support adding and removing shapes, and calculating the total area, including handling cases where shapes overlap. You are provided with a base `Shape` class that other shapes inherit from. Each shape has a method `area()` that returns its area and `bounds()` that returns a tuple representing the bounding box of the shape in the format `(x_min, y_min, x_max, y_max)`. Your task is to implement the `CompositeShape` class with the following methods: - `add_shape(shape)`: Adds a shape to the collection. Throws a `TypeError` if the shape is not an instance of `Shape`. - `remove_shape(shape)`: Removes a shape from the collection. Throws a `ValueError` if the shape is not found. - `total_area()`: Calculates and returns the combined area of all shapes, considering overlaps. The class should handle the following shape types, for which we provide implementations of their area calculation and bounding box methods: - `Rectangle(width, height)`: Represents a rectangle. The area of a rectangle is `width * height`. - `Circle(radius)`: Represents a circle. The area of a circle is `pi * radius^2`. Implement the function `composite_area(shape_list)` that takes a list of `Shape` objects and returns the total area, considering overlaps. Here\'s an example usage: ```python from math import pi class Shape: def area(self): raise NotImplementedError def bounds(self): raise NotImplementedError class Rectangle(Shape): def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def bounds(self): return (0, 0, self.width, self.height) class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return pi * self.radius**2 def bounds(self): return (-self.radius, -self.radius, self.radius, self.radius) class CompositeShape: def __init__(self): self.shapes = [] def add_shape(self, shape): if not isinstance(shape, Shape): throw TypeError(\\"Shape must be an instance of Shape\\") self.shapes.append(shape) def remove_shape(self, shape): if shape not in self.shapes: throw ValueError(\\"Shape not found\\") self.shapes.remove(shape) def total_area(self): # This is a simplified example and proper methods for handling overlaps # would require more complex geometry. total_area = 0 for shape in self.shapes: total_area += shape.area() return total_area def composite_area(shape_list): composite = CompositeShape() for shape in shape_list: composite.add_shape(shape) return composite.total_area() # Example usage shapes = [Rectangle(2, 3), Circle(1)] print(composite_area(shapes)) # Output should consider overlaps ``` Note that the code provided is a simplified example. Proper detection and handling of overlapping areas would require more advanced calculations, which you should implement accordingly.","solution":"from math import pi class Shape: def area(self): raise NotImplementedError def bounds(self): raise NotImplementedError class Rectangle(Shape): def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def bounds(self): return (0, 0, self.width, self.height) class Circle(Shape): def __init__(self, radius): self.radius = radius def area(self): return pi * self.radius**2 def bounds(self): return (-self.radius, -self.radius, self.radius, self.radius) class CompositeShape: def __init__(self): self.shapes = [] def add_shape(self, shape): if not isinstance(shape, Shape): raise TypeError(\\"Shape must be an instance of Shape\\") self.shapes.append(shape) def remove_shape(self, shape): if shape not in self.shapes: raise ValueError(\\"Shape not found\\") self.shapes.remove(shape) def total_area(self): # This is a simplified example and proper methods for handling overlaps would require more complex geometry. total_area = 0 for shape in self.shapes: total_area += shape.area() return total_area def composite_area(shape_list): composite = CompositeShape() for shape in shape_list: composite.add_shape(shape) return composite.total_area()"},{"question":"In this exercise, you are required to write a function named `find_longest_balanced_substring` that takes a single string input: 1. `s`: a string containing only the characters \'(\' and \')\'. The function should perform the following: 1. Find the longest contiguous substring that is balanced. A balanced substring is one that has an equal number of opening \'(\' and closing \')\' brackets and all brackets are correctly closed in the correct order. It is guaranteed that the input string length will not exceed 10,000 characters. The function should return the length of the longest balanced substring. Here\'s the structure of the function you need to implement: ```python def find_longest_balanced_substring(s): # Initialize variables to store maximum length of balanced substring # and temporary counters for the current search max_len = 0 # Hint: Iterate twice - left to right and right to left # to account for different starting points of balanced substrings # Left to right pass left = 0 right = 0 for char in s: if char == \'(\': left += 1 else: right += 1 if left == right: max_len = max(max_len, 2 * right) elif right > left: left = right = 0 # Right to left pass left = 0 right = 0 for char in reversed(s): if char == \'(\': left += 1 else: right += 1 if left == right: max_len = max(max_len, 2 * left) elif left > right: left = right = 0 return max_len ```","solution":"def find_longest_balanced_substring(s): Returns the length of the longest balanced substring. A balanced substring has equal number of \'(\' and \')\', with all brackets correctly closed in order. max_len = 0 # Left to right pass left = 0 right = 0 for char in s: if char == \'(\': left += 1 else: right += 1 if left == right: max_len = max(max_len, 2 * right) elif right > left: left = right = 0 # Right to left pass left = 0 right = 0 for char in reversed(s): if char == \'(\': left += 1 else: right += 1 if left == right: max_len = max(max_len, 2 * left) elif left > right: left = right = 0 return max_len"},{"question":"You are required to use Python to write a function that generates a specific pattern of asterisks (`*`). The function you will write should be named `generate_diamond_pattern`. The function should: 1. Take a single integer parameter `n`, which represents the number of rows for the upper half of the diamond (excluding the center line). 2. Print a diamond shape with `2n - 1` rows. 3. Center-align each row of characters to form a symmetrical diamond. For example, if `n` is 5, the output should be: ``` * *** ***** ******* ********* ******* ***** *** * ``` Here\'s how you should structure the function: ```python def generate_diamond_pattern(n): Prints a diamond pattern of height 2n-1 using asterisks. Parameters: n (int): The number of rows for the upper half of the diamond (excluding the center line). ``` To accomplish this, you need to: - Use loops to manage the number of spaces and asterisks on each line. - Ensure each line is centered properly by adding appropriate leading spaces. #","solution":"def generate_diamond_pattern(n): Prints a diamond pattern of height 2n-1 using asterisks. Parameters: n (int): The number of rows for the upper half of the diamond (excluding the center line). if n <= 0: print(\\"\\") return # Upper half of the diamond (including the center line) for i in range(n): spaces = \' \' * (n - i - 1) asterisks = \'*\' * (2 * i + 1) print(spaces + asterisks) # Lower half of the diamond for i in range(n - 2, -1, -1): spaces = \' \' * (n - i - 1) asterisks = \'*\' * (2 * i + 1) print(spaces + asterisks)"},{"question":"Write a function that simulates rolling two six-sided dice 10,000 times and calculates the probability of the sum of the two dice being either 7 or 11. The function should return the probability as a floating-point number. Each die roll is independent of the others. Use these tools to simulate and calculate the probability. The function should output: ``` float: The probability of the sum being 7 or 11. ``` You should write self-contained code starting with: ``` import random def roll_dice_simulation(num_rolls=10000, seed=None): ```","solution":"import random def roll_dice_simulation(num_rolls=10000, seed=None): Simulate rolling two six-sided dice `num_rolls` times and calculate the probability of the sum of the two dice being either 7 or 11. Args: num_rolls (int): The number of dice rolls to simulate. Default is 10,000. seed (int, optional): The seed value for the random number generator for reproducibility. Default is None. Returns: float: The probability of the sum being 7 or 11. if seed is not None: random.seed(seed) count_sum_7_or_11 = 0 for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) dice_sum = die1 + die2 if dice_sum == 7 or dice_sum == 11: count_sum_7_or_11 += 1 probability = count_sum_7_or_11 / num_rolls return probability"},{"question":"Generate a line plot showing the moving average of a list of randomly generated data points. - The list should contain 200 random floats between 0 and 1. - Compute the moving average with a window size of 10. - Plot the original data points and the moving average on the same graph with custom styling (e.g., different colors and labels for each line). The function should output: 1. list: The original data points. 2. list: The moving average values. 3. matplotlib.figure.Figure: The resulting figure object. You should write self-contained code starting with: ``` import random import matplotlib.pyplot as plt import pandas as pd def task_func(seed=0): ```","solution":"import random import matplotlib.pyplot as plt import pandas as pd def task_func(seed=0): Generates a line plot showing the moving average of a list of randomly generated data points. Parameters: seed (int): Seed for the random number generator for reproducibility. Default is 0. Returns: tuple: (original_data, moving_average, fig) original_data (list of floats): The original randomly generated data points. moving_average (list of floats): The moving average values. fig (matplotlib.figure.Figure): The resulting figure object. random.seed(seed) # Generate 200 random floats between 0 and 1 original_data = [random.random() for _ in range(200)] # Compute the moving average with a window size of 10 moving_average = pd.Series(original_data).rolling(window=10).mean().tolist() # Plot the original data points and the moving average fig, ax = plt.subplots() ax.plot(original_data, label=\'Original Data\', color=\'blue\') ax.plot(moving_average, label=\'Moving Average\', color=\'red\') ax.set_title(\'Original Data and Moving Average\') ax.set_xlabel(\'Index\') ax.set_ylabel(\'Value\') ax.legend() # Return the necessary data return original_data, moving_average, fig"},{"question":"Context In the context of computer science, a palindrome is a string that reads the same forward and backward. A more challenging variety of palindrome-related problems involves checking if a string can be re-arranged to form a palindrome. Your task is to write a function that determines if any permutation of the given string is a palindrome. Function Specification Define a function named `can_form_palindrome` that takes a string `s` as its input and returns a boolean indicating whether any permutation of the string can form a palindrome. Requirements - The function should be case insensitive (i.e., \'A\' and \'a\' should be considered as the same character). - The function should ignore spaces and non-alphanumeric characters. - If the string can be permuted to form a palindrome, return `True`; otherwise, return `False`. Input - A string `s` containing alphanumeric characters, spaces, and punctuation. Output - A boolean value `True` if any permutation of the string can form a palindrome, otherwise `False`. Examples 1. `can_form_palindrome(\\"Tact Coa\\")` should return `True` because permutations like \\"tacocat\\" and \\"atcocta\\" are palindromes. 2. `can_form_palindrome(\\"Able was I ere I saw Elba\\")` should return `True` because permutations like \\"ablewasi ereisaw elba\\" are palindromes. 3. `can_form_palindrome(\\"Hello World\\")` should return `False` because no permutation of the string can form a palindrome.","solution":"def can_form_palindrome(s): Determine if a permutation of the input string can form a palindrome. Args: s (str): The input string containing alphanumeric characters, spaces, and punctuation. Returns: bool: True if any permutation of the string can form a palindrome, otherwise False. from collections import Counter import re # Convert string to lowercase and remove non-alphanumeric characters cleaned_str = re.sub(r\'[^a-z0-9]\', \'\', s.lower()) # Count the frequency of each character char_count = Counter(cleaned_str) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are tasked with creating a simple text processing function that reads through a given string and identifies the most frequently occurring word. The purpose of this exercise is to help you learn how to manipulate strings and use dictionaries to count word occurrences in Python. Your task is to write a function named `most_frequent_word` that processes a string to find the word that appears most often. Specifically, the function should achieve the following: 1. Take one parameter: - `text`: a string containing a sequence of words separated by spaces and/or punctuation marks (e.g., periods, commas, semicolons, etc.). 2. The function should implement the following logic: - Convert all words to lowercase to ensure case insensitivity. - Remove any punctuation marks from the words. - Count the occurrences of each word using a dictionary. - Return the word that has the highest frequency. If there\'s a tie, return any one of the most frequent words. ```python import string def most_frequent_word(text): # Your code here ``` **Constraints:** - You must not use any external libraries other than `string` for removing punctuation. - You can assume that `text` is a non-empty string. Example: ```python print(most_frequent_word(\\"Hello, hello, world! Hello world. world? Hello.\\")) ``` This should output: ```python \\"hello\\" ```","solution":"import string def most_frequent_word(text): text = text.lower() # Convert text to lowercase translator = str.maketrans(\'\', \'\', string.punctuation) # Create a translation table to remove punctuation text = text.translate(translator) # Remove punctuation words = text.split() # Split the text into words word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 most_frequent = max(word_count, key=word_count.get) return most_frequent"},{"question":"You are tasked with creating a function to simulate customer reviews for various products on an e-commerce platform. The goal of this function is to familiarize you with handling lists, strings, and dictionaries in Python, particularly focusing on generating random review details and organizing them efficiently. Function Signature: ```python def generate_customer_reviews(products, customers, num_reviews): Create a list of customer reviews with random attributes. Parameters: products (list): A list of Product objects, each having attributes `product_id` and `product_name`. customers (list): A list of Customer objects, each having attributes `customer_id` and `customer_name`. num_reviews (int): The number of reviews to generate. Returns: list: A list of Review objects with randomly generated details. pass ``` Requirements: - Utilize the `random` library to generate random review details (ratings and comments). - Ensure each review is associated with a specific product and customer. - Incorporate the following conditions: 1. Generate a random rating between 1 and 5. 2. Generate a random comment from a predefined list of possible comments. 3. Ensure no customer reviews the same product more than once. 4. Track the most frequent reviewer and the product with the highest average rating. Provided Information: - `random.choice`: For selecting a random element from a list. - `random.randint`: For generating random integer values. Classes (Assumed to be Defined Elsewhere): - `Product`: Represents a product with attributes `product_id` and `product_name`. - `Customer`: Represents a customer with attributes `customer_id` and `customer_name`. - `Review`: Represents a review with attributes like `product`, `customer`, `rating`, and `comment`. Feel free to refer to the following functions (Assumed to be Defined Elsewhere): - `select_random_product(products)`: Selects a random product from the list. - `select_random_customer(customers)`: Selects a random customer from the list. - `generate_random_comment()`: Generates a random comment from a predefined list.","solution":"import random from collections import defaultdict comments_list = [ \\"Excellent product!\\", \\"Quite satisfactory.\\", \\"Could be better.\\", \\"Not as expected.\\", \\"Terrible quality. Would not recommend.\\" ] class Product: def __init__(self, product_id, product_name): self.product_id = product_id self.product_name = product_name class Customer: def __init__(self, customer_id, customer_name): self.customer_id = customer_id self.customer_name = customer_name class Review: def __init__(self, product, customer, rating, comment): self.product = product self.customer = customer self.rating = rating self.comment = comment def select_random_product(products): return random.choice(products) def select_random_customer(customers): return random.choice(customers) def generate_random_comment(): return random.choice(comments_list) def generate_customer_reviews(products, customers, num_reviews): reviews = [] customer_reviews = defaultdict(set) # To track reviews made by each customer product_ratings = defaultdict(list) # To track ratings of each product for _ in range(num_reviews): while True: product = select_random_product(products) customer = select_random_customer(customers) # Ensure the customer does not review the same product more than once if product.product_id not in customer_reviews[customer.customer_id]: break rating = random.randint(1, 5) comment = generate_random_comment() review = Review(product, customer, rating, comment) reviews.append(review) customer_reviews[customer.customer_id].add(product.product_id) product_ratings[product.product_id].append(rating) # Calculate the most frequent reviewer most_frequent_reviewer = max(customer_reviews.items(), key=lambda item: len(item[1]))[0] # Calculate the product with the highest average rating highest_avg_rating_product = max( product_ratings.items(), key=lambda item: sum(item[1]) / len(item[1]) )[0] # For demonstration purposes, let\'s print the most frequent reviewer and highest average rating product print(f\\"Most frequent reviewer: Customer ID {most_frequent_reviewer}\\") print(f\\"Product with highest average rating: Product ID {highest_avg_rating_product}\\") return reviews"},{"question":"You are provided with a list of dictionaries representing employee data. Each dictionary contains the following keys: `name`, `age`, `department`, and `salary`. Your task is to write a function named `analyze_employee_data` that performs the following operations: 1. **Group by Department**: Group the employees by their department and return a dictionary where the keys are department names and the values are lists of employee names in that department. 2. **Average Age per Department**: Calculate the average age of employees in each department and return it as a dictionary with department names as keys and their corresponding average ages as values. 3. **Top Earners**: Identify the top N earners among all employees and return their names as a list. If there are fewer than N employees, return all names. # Function Signature ```python def analyze_employee_data(employees, top_n): Analyze employee data. Parameters: employees (list): A list of dictionaries containing employee data. top_n (int): The number of top earners to return. Returns: tuple: A tuple containing: - dict: Grouped employees by department. - dict: Average age per department. - list: Names of top N earners. pass ``` # Example ```python employees = [ {\'name\': \'Alice\', \'age\': 30, \'department\': \'HR\', \'salary\': 70000}, {\'name\': \'Bob\', \'age\': 35, \'department\': \'IT\', \'salary\': 90000}, {\'name\': \'Charlie\', \'age\': 25, \'department\': \'IT\', \'salary\': 85000}, {\'name\': \'David\', \'age\': 50, \'department\': \'Finance\', \'salary\': 120000}, {\'name\': \'Eve\', \'age\': 45, \'department\': \'HR\', \'salary\': 75000} ] top_n = 3 result = analyze_employee_data(employees, top_n) print(result) ``` # Expected Output ```python ( { \'HR\': [\'Alice\', \'Eve\'], \'IT\': [\'Bob\', \'Charlie\'], \'Finance\': [\'David\'] }, { \'HR\': 37.5, \'IT\': 30.0, \'Finance\': 50.0 }, [\'David\', \'Bob\', \'Charlie\'] ) ``` # Constraints - Ensure that the function handles cases where employees belong to different departments. - Handle possible missing data (e.g., missing age or salary) appropriately. - Use appropriate Python built-in functions and libraries to compute the required values efficiently.","solution":"def analyze_employee_data(employees, top_n): from collections import defaultdict from statistics import mean # Group by Department department_groups = defaultdict(list) for emp in employees: department_groups[emp[\'department\']].append(emp[\'name\']) # Average Age per Department department_ages = defaultdict(list) for emp in employees: if \'age\' in emp: department_ages[emp[\'department\']].append(emp[\'age\']) average_age_per_department = {dept: mean(ages) for dept, ages in department_ages.items()} # Top Earners sorted_employees_by_salary = sorted(employees, key=lambda x: x.get(\'salary\', 0), reverse=True) top_earners = [emp[\'name\'] for emp in sorted_employees_by_salary[:top_n]] return department_groups, average_age_per_department, top_earners"},{"question":"** Given a list of integers representing the heights of consecutive hills, you are tasked with writing a function named `count_valleys` to determine the number of valleys in the terrain. A valley is defined as a sequence of one or more consecutive hills where the height decreases and then returns to the starting height. Write a function named `count_valleys` that takes in a list of integers representing hill heights and returns the number of valleys in the list. You can assume the heights will be non-negative integers and the list will contain at least two elements. # Example: Consider the following list of hill heights: ```python heights = [2, 1, 0, 1, 2, 3, 1, 0, 1, 2] ``` In this example, there are 2 valleys: 1. From height 2 to 0 and back to 2 (indices 0 to 4) 2. From height 3 to 0 and back to 2 (indices 5 to 9) # Requirements: - Your function must be named `count_valleys`. - The function should take a single parameter `heights` which is a list of integers. - The function should return an integer representing the number of valleys. - Ensure your solution runs efficiently for large inputs. # Function Signature: ```python def count_valleys(heights: [int]) -> int: pass ``` # Additional Constraints: - The heights list will contain at least two integers. - The elements of the heights list will be non-negative integers. **","solution":"def count_valleys(heights): if not heights or len(heights) < 2: return 0 valleys = 0 i = 0 n = len(heights) while i < n - 1: # Check start of a potential valley if heights[i] > heights[i + 1]: # Continue until we reach the bottom of the valley while i < n - 1 and heights[i] > heights[i + 1]: i += 1 # Continue until we climb back to the start height of the valley if i < n - 1 and heights[i] < heights[i + 1]: while i < n - 1 and heights[i] < heights[i + 1]: i += 1 valleys += 1 else: i += 1 return valleys"},{"question":"Write a function to parse a CSV file containing product information with columns \\"ProductID\\", \\"ProductName\\", \\"Category\\", and \\"Price\\". The function should then calculate the average price of products in each category and return a dictionary where the keys are the categories and the values are the corresponding average prices. If the input file does not contain a valid CSV structure or if any price is not a valid number, the function should raise a ValueError. The function should output: dict: A dictionary with categories as keys and average prices as values. You should write self-contained code starting with: ``` import csv def task_func(file_path): ```","solution":"import csv def task_func(file_path): Parses a CSV file to calculate the average price of products in each category. Parameters: file_path (str): The path to the CSV file. Returns: dict: A dictionary with categories as keys and average prices as values. Raises: ValueError: If the CSV structure is invalid or if any price is not a valid number. categories = {} try: with open(file_path, mode=\'r\') as file: reader = csv.DictReader(file) if not {\'ProductID\', \'ProductName\', \'Category\', \'Price\'}.issubset(reader.fieldnames): raise ValueError(\\"CSV file does not contain the required columns\\") for row in reader: category = row[\'Category\'] try: price = float(row[\'Price\']) except ValueError: raise ValueError(\\"Price is not a valid number\\") if category in categories: categories[category][\'total_price\'] += price categories[category][\'count\'] += 1 else: categories[category] = {\'total_price\': price, \'count\': 1} average_prices = {category: data[\'total_price\'] / data[\'count\'] for category, data in categories.items()} return average_prices except FileNotFoundError: raise ValueError(\\"CSV file not found\\")"},{"question":"You are to write a Python script that reads a list of integers from a file, computes the cumulative sum and writes the result to a new file. Additionally, the script should handle potential errors gracefully using the `sys.exit` function for command-line argument validation. Your script needs to implement and handle the following: 1. Accept exactly two command-line arguments: the name of an input file and the name of the output file. 2. Read integers from the input file. 3. Compute the cumulative sum of the integers. 4. Write the cumulative sums to the output file, with each sum on a new line. **Function Definition** You need to implement the `main` function that: - Validates and retrieves the command-line arguments. - Reads data from the specified input file. - Computes the cumulative sum of the values. - Writes the cumulative sums to the specified output file. - Gracefully exits using `sys.exit` if the command-line arguments are incorrect. ```python import sys def cumulative_sum(lst): total = 0 cum_sum = [] for num in lst: total += num cum_sum.append(total) return cum_sum def main(): if len(sys.argv) != 3: print(\'error: you must supply exactly two argumentsnn\' + \'usage: python3 cumulative_sum.py <input file> <output file>\' ) sys.exit(1) input_file = sys.argv[1] output_file = sys.argv[2] try: with open(input_file, \'r\') as infile: numbers = [int(line.strip()) for line in infile.readlines() if line.strip().isdigit()] except FileNotFoundError: print(f\\"error: the file \'{input_file}\' does not exist\\") sys.exit(1) except ValueError: print(\'error: the file must contain only integers\') sys.exit(1) result = cumulative_sum(numbers) try: with open(output_file, \'w\') as outfile: for number in result: outfile.write(f\\"{number}n\\") except IOError: print(f\\"error: could not write to file \'{output_file}\'\\") sys.exit(1) print(\'Cumulative sum calculation complete. Results written to:\', output_file) ```","solution":"import sys def cumulative_sum(lst): total = 0 cum_sum = [] for num in lst: total += num cum_sum.append(total) return cum_sum def main(): if len(sys.argv) != 3: print(\'error: you must supply exactly two argumentsnn\' + \'usage: python3 cumulative_sum.py <input file> <output file>\' ) sys.exit(1) input_file = sys.argv[1] output_file = sys.argv[2] try: with open(input_file, \'r\') as infile: numbers = [int(line.strip()) for line in infile.readlines()] except FileNotFoundError: print(f\\"error: the file \'{input_file}\' does not exist\\") sys.exit(1) except ValueError: print(\'error: the file must contain only integers\') sys.exit(1) result = cumulative_sum(numbers) try: with open(output_file, \'w\') as outfile: for number in result: outfile.write(f\\"{number}n\\") except IOError: print(f\\"error: could not write to file \'{output_file}\'\\") sys.exit(1) print(\'Cumulative sum calculation complete. Results written to:\', output_file) if __name__ == \\"__main__\\": main()"},{"question":"You are given two strings `s1` and `s2` consisting of lowercase letters. Write a function that checks if `s1` can be transformed into `s2` by only swapping pairs of characters in `s1`. Each character can only be swapped once, and swapping a character with itself is not allowed. If it’s possible to transform `s1` into `s2` with these constraints, return `True`; otherwise, return `False`. The function should be named `can_transform` and have the following signature: ```python def can_transform(s1: str, s2: str) -> bool: ``` # Input: - `s1` (str): A string consisting of lowercase letters. - `s2` (str): A string consisting of lowercase letters. # Output: - Returns a boolean value indicating whether `s1` can be transformed into `s2`. # Examples: ```python assert can_transform(\\"abcd\\", \\"abdc\\") == True assert can_transform(\\"abcd\\", \\"acbd\\") == True assert can_transform(\\"abcd\\", \\"abcd\\") == True assert can_transform(\\"aaaa\\", \\"aaaa\\") == True assert can_transform(\\"abcd\\", \\"dcba\\") == False ``` Explanation: To solve this problem: 1. Check if the sorted characters of `s1` and `s2` are the same; if not, return `False` because no swaps will make the strings equal. 2. Count the number of positions where `s1` and `s2` differ. 3. If the number of differing positions is more than 2 or 1, return `False` because more than one swap is required. 4. If the number of differing positions is exactly 2, and the characters at the mismatched positions in `s1` and `s2` can be swapped to match, return `True`. 5. Otherwise, return `False`. **Requirements:** 1. Only in-place swaps (i.e., swapping pairs of characters in `s1`) are allowed. 2. Swapping a character with itself is not allowed.","solution":"def can_transform(s1: str, s2: str) -> bool: if len(s1) != len(s2): return False mismatches = [] for i in range(len(s1)): if s1[i] != s2[i]: mismatches.append((s1[i], s2[i])) # If the length of mismatches is 0, it\'s already identical if len(mismatches) == 0: return True # If there are exactly two mismatches, check if they can be swapped if len(mismatches) == 2: return mismatches[0] == mismatches[1][::-1] return False"},{"question":"Generate a list of stock prices for multiple companies over a specified number of days and calculate the percentage change in price for each company from the first day to the last day. Also, classify each company based on the percentage change. The function will create a DataFrame with random stock prices for a given number of companies and days, compute the percentage change from the first to the last day, and classify stocks based on the changes into categories such as \\"Decreased\\", \\"No Change\\", and \\"Increased\\". Note that: The output DataFrame should have columns \'Company\', \'Price_Day1\', \'Price_LastDay\', \'Percentage_Change\', and \'Category\'. \\"Decreased\\" if the change is less than 0%, \\"No Change\\" if the change is exactly 0%, and \\"Increased\\" if the change is more than 0%. The function should output with: DataFrame: A DataFrame with columns as specified, including calculated percentage changes and assigned categories. You should write self-contained code starting with: ``` import numpy as np import pandas as pd # Constants NUM_COMPANIES = 10 NUM_DAYS = 30 def task_func(): ```","solution":"import numpy as np import pandas as pd # Constants NUM_COMPANIES = 10 NUM_DAYS = 30 def task_func(num_companies=NUM_COMPANIES, num_days=NUM_DAYS): np.random.seed(0) # For reproducibility companies = [f\'Company_{i+1}\' for i in range(num_companies)] prices = np.random.randint(50, 150, size=(num_companies, num_days)) df = pd.DataFrame(prices, columns=[f\'Day_{i+1}\' for i in range(num_days)]) df.insert(0, \'Company\', companies) df[\'Price_Day1\'] = df[\'Day_1\'] df[\'Price_LastDay\'] = df[f\'Day_{num_days}\'] df[\'Percentage_Change\'] = ((df[\'Price_LastDay\'] - df[\'Price_Day1\']) / df[\'Price_Day1\']) * 100 df[\'Category\'] = df[\'Percentage_Change\'].apply(lambda x: \'Increased\' if x > 0 else \'Decreased\' if x < 0 else \'No Change\') df = df[[\'Company\', \'Price_Day1\', \'Price_LastDay\', \'Percentage_Change\', \'Category\']] return df"},{"question":"In data analysis, an important task is to find patterns and compute statistics like the mode, median, and mean of datasets. However, determining the mode can be tricky if the dataset is large or has multiple modes. You are tasked with implementing a function `find_mode(data)` that computes the mode(s) of a given list of numbers. If multiple numbers appear with the same highest frequency, return all of them in ascending order. Here\'s a breakdown of the function requirements: 1. **Function Name**: `find_mode` 2. **Parameters**: - `data`: A list of integers or floats representing the dataset. 3. **Returns**: A list of integers or floats representing the mode(s) sorted in ascending order. # Specific Libraries to Use You may use the following Python standard library: - `collections.Counter` # Steps and Guidance: 1. **Checking Data Input**: Ensure the input `data` list is not empty. If it is, return an empty list. 2. **Counting Frequencies**: Use the `Counter` from the `collections` module to count the frequency of each number in the dataset. 3. **Finding the Mode**: Determine the highest frequency and collect all numbers that have this frequency. 4. **Sorting**: Return the list of modes sorted in ascending order. # Example ```python data = [1, 2, 2, 3, 3, 4] modes = find_mode(data) print(modes) # Expected output: [2, 3] data = [4, 1, 2, 2, 3, 3, 4] modes = find_mode(data) print(modes) # Expected output: [2, 3, 4] data = [1, 1, 2] modes = find_mode(data) print(modes) # Expected output: [1] data = [] modes = find_mode(data) print(modes) # Expected output: [] ``` # Note Ensure that the function handles both cases where there is a single mode and where there are multiple modes correctly. Consider edge cases, such as an empty list or list with all identical elements.","solution":"from collections import Counter def find_mode(data): Computes the mode(s) of a given list of numbers. Parameters: data (list): A list of integers or floats representing the dataset. Returns: list: A list of integers or floats representing the mode(s) sorted in ascending order. if not data: return [] counter = Counter(data) max_frequency = max(counter.values()) modes = [number for number, freq in counter.items() if freq == max_frequency] return sorted(modes)"},{"question":"Implement a system that monitors disk usage of a specific directory over a period and issues a warning if disk usage increases by more than a given percentage. Note: The function monitors the disk space used by a specific directory, identified by its path, over a series of intervals. If the disk usage of the directory increases by more than the specified percentage threshold during the monitoring duration, print a warning message. The monitoring should check the disk usage at regular intervals specified by the \'interval\' parameter. The total monitoring time is dictated by the \'duration\' parameter. The function should output: bool: True after issuing a warning if the disk usage increase exceeds the threshold during the monitoring period, False otherwise. You should write self-contained code starting with: ``` import os import time def monitor_disk_usage(directory, percentage_threshold, duration, interval=1): ```","solution":"import os import time def get_disk_usage(directory): Get the disk usage of the specified directory in bytes. total_size = 0 for path, dirs, files in os.walk(directory): for f in files: fp = os.path.join(path, f) total_size += os.path.getsize(fp) return total_size def monitor_disk_usage(directory, percentage_threshold, duration, interval=1): Monitors the disk usage of a specific directory over a period and issues a warning if disk usage increases by more than the given percentage threshold. :param directory: Directory path to monitor. :param percentage_threshold: Percentage increase threshold for issuing a warning. :param duration: Total time to monitor the disk usage in seconds. :param interval: Interval at which to check the disk usage in seconds. :return: True if warning is issued, False otherwise. initial_usage = get_disk_usage(directory) start_time = time.time() while time.time() - start_time < duration: current_usage = get_disk_usage(directory) usage_increase = current_usage - initial_usage if initial_usage > 0: percentage_increase = (usage_increase / initial_usage) * 100 if percentage_increase > percentage_threshold: print(f\\"Warning: Disk usage increased by {percentage_increase:.2f}% which exceeds the threshold of {percentage_threshold}%\\") return True time.sleep(interval) return False"},{"question":"# Problem: Stock Price Prediction with Linear Regression You are required to build a system that predicts future stock prices based on historical prices using linear regression. The goal is to create a model that can forecast the stock price for the next day given the past pricing information. 1. **Requirements:** - Use `pandas` for data handling and manipulation. - The linear regression implementation should be from `sklearn.linear_model`. - The data transformations, model training, and evaluation should be implemented in a structured manner. 2. **Data Setup:** - The provided dataset `historical_stock_prices.csv` contains historical stock prices with columns: `Date` and `Close`. - Ensure the `Date` column is converted into datetime format and sorted in ascending order. 3. **Files Handling:** - Save the final model to `stock_price_model.sav` using the `joblib` library. - Ensure predictions for the next day are appended to an existing `predictions.csv`. 4. **Function Details:** Write a function `predict_next_day_price` which: - **Inputs:** - historical_data_path: A path to the CSV file containing historical stock prices. - **Output:** - The predicted stock price for the next day. - **Behavior:** - Loads and processes the historical stock data. - Fits a linear regression model using the historical data. - Predicts the stock price for the next day using the model. - Saves the model and the predictions to their respective files. - Returns the next day\'s predicted stock price. Here\'s the function signature for reference: ```python def predict_next_day_price(historical_data_path): # Your implementation here ``` *[Note: For simplicity, assume the necessary libraries (`pandas`, `sklearn`, `joblib`, etc.) are already imported in the environment.]*","solution":"import pandas as pd from sklearn.linear_model import LinearRegression from joblib import dump, load import numpy as np import os def predict_next_day_price(historical_data_path): # Load historical data data = pd.read_csv(historical_data_path) # Convert \'Date\' to datetime and sort by date data[\'Date\'] = pd.to_datetime(data[\'Date\']) data = data.sort_values(by=\'Date\') # Prepare features (X) and target (y) data[\'Date_ordinal\'] = data[\'Date\'].map(pd.Timestamp.toordinal) X = data[\'Date_ordinal\'].values.reshape(-1, 1) y = data[\'Close\'].values # Train Linear Regression model model = LinearRegression() model.fit(X, y) # Predict the next day\'s stock price next_day = data[\'Date\'].max() + pd.Timedelta(days=1) next_day_ordinal = next_day.toordinal() next_day_price = model.predict(np.array([[next_day_ordinal]]))[0] # Save the model model_path = \'stock_price_model.sav\' dump(model, model_path) # Append the prediction to predictions.csv prediction_row = pd.DataFrame({ \'Date\': [next_day], \'Predicted_Close\': [next_day_price] }) predictions_path = \'predictions.csv\' if os.path.exists(predictions_path): predictions = pd.read_csv(predictions_path) predictions = pd.concat([predictions, prediction_row], ignore_index=True) else: predictions = prediction_row predictions.to_csv(predictions_path, index=False) return next_day_price"},{"question":"You are asked to write a function that, given a sequence of numbers, identifies the contiguous subsequence which has the largest sum and returns both the sum and the subsequence itself. This problem is often referred to as the \\"Maximum Subarray Problem\\" or \\"Kadane\'s Algorithm\\". Your task is to implement a function named `max_subarray` that takes a list of integers and returns a tuple containing: 1. The largest sum that can be obtained from any contiguous subsequence of the list. 2. The contiguous subsequence itself that results in this largest sum. To solve this problem, you can utilize a well-known algorithm called Kadane\'s Algorithm which efficiently computes this result with a time complexity of O(n), where n is the length of the list. Here\'s the function signature: ```python def max_subarray(nums: list[int]) -> tuple[int, list[int]]: pass ``` # Example: Given the list: ``` nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4] ``` The function should return: ``` (6, [4, -1, 2, 1]) ``` Explanation: - The contiguous subsequence with the largest sum is `[4, -1, 2, 1]` which sums to `6`. Additional Example: Given the list: ``` nums = [1, 2, 3, 4, 5] ``` The function should return: ``` (15, [1, 2, 3, 4, 5]) ``` In this example, the entire array is the subsequence with the largest sum which is `15`.","solution":"def max_subarray(nums: list[int]) -> tuple[int, list[int]]: Find the contiguous subarray within a one-dimensional array of numbers which has the largest sum. Returns a tuple containing the largest sum and the subarray itself. if not nums: return (0, []) # If nums is empty, return 0 and empty list current_sum = max_sum = nums[0] start = end = s = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] s = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = s end = i return (max_sum, nums[start:end + 1])"},{"question":"You are given a list of employee records, where each record contains employee name, age, and salary. Your task is to create a function that processes this data to provide various analytical insights. The function should help in sorting the employees based on different criteria and in finding specific employees given certain conditions. Function Signature: ```python def employee_analysis(employees: List[Dict[str, Union[str, int]]], sort_by: str, direction: str, age_filter: Tuple[int, int]) -> List[Dict[str, Union[str, int]]]: Analyzes employee records by sorting and filtering. Args: employees (List[Dict[str, Union[str, int]]]): List of employee records, where each record is a dictionary with keys \'name\', \'age\', and \'salary\'. sort_by (str): Field to sort by, must be one of \'name\', \'age\', \'salary\'. direction (str): Sort direction, must be \'asc\' for ascending or \'desc\' for descending. age_filter (Tuple[int, int]): A tuple representing the age range to filter by, inclusive. Returns: List[Dict[str, Union[str, int]]]: A list of employee records sorted and filtered based on the specified criteria. employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"salary\\": 50000}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"salary\\": 60000}, {\\"name\\": \\"David\\", \\"age\\": 35, \\"salary\\": 90000}, {\\"name\\": \\"Eve\\", \\"age\\": 29, \\"salary\\": 65000}, ] ``` Detailed Instructions: 1. **Sort Employees**: - Use the Python `sorted` function to sort the list of employee records. - Sort by the field specified in `sort_by` (either \'name\', \'age\', or \'salary\'). - Use `direction` to determine the sort order: \'asc\' for ascending and \'desc\' for descending. 2. **Filter by Age**: - Filter the sorted list to include only employees whose age is within the range specified by `age_filter` (inclusive). 3. **Return the Processed List**: - Return the list of employee records after sorting and filtering. Example Usage: Suppose the list of employees is as given under the `employees` variable: ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"salary\\": 70000}, {\\"name\\": \\"Bob\\", \\"age\\": 22, \\"salary\\": 50000}, {\\"name\\": \\"Charlie\\", \\"age\\": 25, \\"salary\\": 60000}, {\\"name\\": \\"David\\", \\"age\\": 35, \\"salary\\": 90000}, {\\"name\\": \\"Eve\\", \\"age\\": 29, \\"salary\\": 65000}, ] ``` You can call the `employee_analysis` function as follows: ```python result = employee_analysis(employees, \'age\', \'asc\', (23, 30)) print(result) ``` This would sort the employees by age in ascending order and filter them to only include those aged between 23 and 30 (inclusive), then print the processed list of employee records. **Note**: - Ensure that the input data is in the format specified. - Handle edge cases like empty employee list or invalid sort direction gracefully.","solution":"from typing import List, Dict, Union, Tuple def employee_analysis(employees: List[Dict[str, Union[str, int]]], sort_by: str, direction: str, age_filter: Tuple[int, int]) -> List[Dict[str, Union[str, int]]]: Analyzes employee records by sorting and filtering. Args: employees (List[Dict[str, Union[str, int]]]): List of employee records, where each record is a dictionary with keys \'name\', \'age\', and \'salary\'. sort_by (str): Field to sort by, must be one of \'name\', \'age\', \'salary\'. direction (str): Sort direction, must be \'asc\' for ascending or \'desc\' for descending. age_filter (Tuple[int, int]): A tuple representing the age range to filter by, inclusive. Returns: List[Dict[str, Union[str, int]]]: A list of employee records sorted and filtered based on the specified criteria. # Validate input sort_by and direction if sort_by not in {\'name\', \'age\', \'salary\'}: raise ValueError(\\"sort_by must be one of \'name\', \'age\', \'salary\'\\") if direction not in {\'asc\', \'desc\'}: raise ValueError(\\"direction must be \'asc\' or \'desc\'\\") # Sort employees by the given sort_by field and direction reverse = (direction == \'desc\') sorted_employees = sorted(employees, key=lambda x: x[sort_by], reverse=reverse) # Filter employees based on the age_filter range min_age, max_age = age_filter filtered_employees = [emp for emp in sorted_employees if min_age <= emp[\'age\'] <= max_age] return filtered_employees"},{"question":"You are tasked with writing a function that generates a pattern of pyramids using stars. The function should accept a single integer parameter `n` that specifies the number of rows in the pyramid. Each row `i` of the pyramid should contain `2*i - 1` stars, and the stars should be centered, with spaces filling the rest of the row. # Function Signature: ```python def draw_pyramid(n: int) -> None: pass ``` # Requirements: - The function should print `n` rows of the pyramid. - Each row must have the stars (*) centered appropriately using spaces. - The function should directly print the pyramid to the console. # Example: For `n = 3`, the output should be: ``` * *** ***** ``` For `n = 5`, the output should be: ``` * *** ***** ******* ********* ``` # Constraints: - `n` will be a positive integer within the range of 1 to 100, inclusive.","solution":"def draw_pyramid(n: int) -> None: Prints a pyramid of height n using stars (*). Args: n (int): The number of rows in the pyramid. for i in range(1, n + 1): # Calculate the number of spaces needed to center the stars spaces = \' \' * (n - i) # Calculate the number of stars for the current row stars = \'*\' * (2 * i - 1) # Print the row with spaces and stars print(f\\"{spaces}{stars}{spaces}\\")"},{"question":"**Context:** You are developing a system for analyzing temperature data recorded by sensors from multiple locations. The data is stored in JSON files where each JSON object has the following attributes: \\"location\\", \\"timestamp\\", and \\"temperature\\". The data may include some erroneous entries where the temperature is outside the plausible range of [-50, 50] Celsius. **Objective:** Implement a function `process_temperature_data(file_path: str) -> pd.DataFrame` that reads a JSON file containing temperature data and performs the following operations: 1. Load the JSON data into a pandas DataFrame. 2. Normalize the temperature data by ensuring that values lying outside the plausible range of [-50, 50] Celsius are replaced with NaN. 3. Convert the \\"timestamp\\" field to datetime objects. 4. Group the data by \\"location\\" and resample it to hourly intervals, computing the mean temperature for each hour. 5. Return the resulting DataFrame. **Requirements:** - Use `pandas.read_json` to read the JSON file into a pandas DataFrame. - Ensure proper datetime conversion for the \\"timestamp\\" field using `pd.to_datetime`. - Use `pandas.resample` for time-based resampling. **Function Signature:** ```python import pandas as pd def process_temperature_data(file_path: str) -> pd.DataFrame: # Your code here ``` **Inputs:** - `file_path` (str): The path to the JSON file containing temperature data. **Output:** - Returns a pandas DataFrame with the resampled and averaged temperature data, indexed by \\"location\\" and \\"timestamp\\" at hourly intervals. **Example:** Given an example JSON file `temperature_data.json` with contents: ```json [ {\\"location\\": \\"A\\", \\"timestamp\\": \\"2023-01-01T00:15:00\\", \\"temperature\\": 20}, {\\"location\\": \\"A\\", \\"timestamp\\": \\"2023-01-01T00:45:00\\", \\"temperature\\": 21}, {\\"location\\": \\"A\\", \\"timestamp\\": \\"2023-01-01T01:15:00\\", \\"temperature\\": 22}, {\\"location\\": \\"B\\", \\"timestamp\\": \\"2023-01-01T02:15:00\\", \\"temperature\\": 18}, {\\"location\\": \\"B\\", \\"timestamp\\": \\"2023-01-01T02:45:00\\", \\"temperature\\": 19}, {\\"location\\": \\"A\\", \\"timestamp\\": \\"2023-01-01T02:55:00\\", \\"temperature\\": 100} // Erroneous data point ] ``` The call `process_temperature_data(\'temperature_data.json\')`: ```python df = process_temperature_data(\'temperature_data.json\') print(df) ``` Should yield a DataFrame similar to: ``` temperature location timestamp A 2023-01-01 00:00:00 20.5 2023-01-01 01:00:00 22.0 2023-01-01 02:00:00 NaN B 2023-01-01 02:00:00 18.5 ```","solution":"import pandas as pd import numpy as np def process_temperature_data(file_path: str) -> pd.DataFrame: # Load JSON data into pandas DataFrame df = pd.read_json(file_path) # Normalize temperature values outside the plausible range [-50, 50] df[\'temperature\'] = df[\'temperature\'].apply(lambda x: x if -50 <= x <= 50 else np.nan) # Convert timestamp to datetime df[\'timestamp\'] = pd.to_datetime(df[\'timestamp\']) # Set the index to \'timestamp\' for resampling df.set_index(\'timestamp\', inplace=True) # Group by \'location\' and resample to hourly intervals, calculating mean temperature result = df.groupby(\'location\').resample(\'H\').mean() # Reset the index so \'result\' has \'location\' and \'timestamp\' as columns result.reset_index(inplace=True) return result"},{"question":"# Problem: Permutations Without Repetition In this problem, you are required to generate all possible permutations of a given list of unique elements, ensuring there are no repetitions. You are given a list of unique elements, and your task is to write a function called `generate_permutations` that takes this list as input and returns a list of all possible permutations of the elements. # Function Signature ```python def generate_permutations(elements): Given a list of unique elements, return a list of all possible permutations of these elements. ``` # Input - `elements` (`list` of `str`): A list of unique strings representing the elements to permute. The list can be up to length 8. # Output - Returns a `list` of `list`, where each inner list represents a permutation of the elements. # Example Suppose we have the following input: ```python elements = [\\"A\\", \\"B\\", \\"C\\"] ``` The function should return: ``` [ [\\"A\\", \\"B\\", \\"C\\"], [\\"A\\", \\"C\\", \\"B\\"], [\\"B\\", \\"A\\", \\"C\\"], [\\"B\\", \\"C\\", \\"A\\"], [\\"C\\", \\"A\\", \\"B\\"], [\\"C\\", \\"B\\", \\"A\\"] ] ``` # Task Implement the `generate_permutations` function to generate all permutations of the input list and return them as described.","solution":"from itertools import permutations def generate_permutations(elements): Given a list of unique elements, return a list of all possible permutations of these elements. return [list(p) for p in permutations(elements)]"},{"question":"Implement a Python function `perform_sampling` that generates a stratified random sample from a given dataset. This function will help in creating representative subsets for various classes in classification problems. Stratified sampling ensures that each class is proportionally represented in the sample. # Function Signature ```python def perform_sampling(dataset, labels, num_samples): Perform stratified random sampling on the dataset. Parameters: dataset (numpy.ndarray): A 2D array of shape (N, D) containing the data points. labels (numpy.ndarray): A 1D array of shape (N,) containing the class labels. num_samples (int): Number of samples to draw from each class. Returns: tuple: Two numpy.ndarrays - one containing the sampled data points and the other containing their corresponding class labels. pass ``` # Input - `dataset`: A `numpy.ndarray` of shape `(N, D)` containing the data points. - `labels`: A `numpy.ndarray` of shape `(N,)` containing the class labels. - `num_samples`: An integer specifying the number of samples to draw from each class. # Output - The function should return a tuple of two `numpy.ndarray`s: - The first array should be of shape `(num_samples*C, D)` containing the sampled data points, where `C` is the number of unique classes. - The second array should be of shape `(num_samples*C,)` containing the class labels corresponding to the sampled data points. # Example ```python import numpy as np dataset = np.array([ [1.0, 2.0], [1.1, 2.1], [1.2, 2.2], [2.0, 3.0], [2.1, 3.1], [2.2, 3.2], [3.0, 4.0], [3.1, 4.1], [3.2, 4.2] ]) labels = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2]) num_samples = 2 sampled_data, sampled_labels = perform_sampling(dataset, labels, num_samples) print(sampled_data) # Expected output (order might differ due to randomness): # array([ # [1.0, 2.0], # [1.2, 2.2], # [2.0, 3.0], # [2.2, 3.2], # [3.0, 4.0], # [3.1, 4.1] # ]) print(sampled_labels) # Expected output (order might differ due to randomness): array([0, 0, 1, 1, 2, 2]) ``` # Additional Requirements - Use `numpy.random.choice` to perform the random sampling. - Ensure that the sample is stratified, meaning each class is equally represented according to `num_samples`.","solution":"import numpy as np def perform_sampling(dataset, labels, num_samples): Perform stratified random sampling on the dataset. Parameters: dataset (numpy.ndarray): A 2D array of shape (N, D) containing the data points. labels (numpy.ndarray): A 1D array of shape (N,) containing the class labels. num_samples (int): Number of samples to draw from each class. Returns: tuple: Two numpy.ndarrays - one containing the sampled data points and the other containing their corresponding class labels. np.random.seed(0) # For reproducibility in testing unique_classes = np.unique(labels) sampled_data = [] sampled_labels = [] for clazz in unique_classes: class_indices = np.where(labels == clazz)[0] sampled_indices = np.random.choice(class_indices, size=num_samples, replace=False) sampled_data.append(dataset[sampled_indices]) sampled_labels.append(labels[sampled_indices]) sampled_data = np.vstack(sampled_data) sampled_labels = np.hstack(sampled_labels) return sampled_data, sampled_labels"},{"question":"In this task, you will create a simplified simulation of a stock market where you need to develop a function that calculates the net profit or loss from a series of stock transactions. Each transaction can be a buy or sell action, and the function should account for the shares bought/sold and the prices of those shares. Your objective is to implement a function, `calculate_net_profit`, which will: 1. Accept a list of tuples representing stock transactions. Each tuple contains the type of transaction (\'buy\' or \'sell\'), the number of shares, and the price per share at the time of the transaction. 2. Calculate the total profit or loss based on the sequence of transactions. Function Signature: ```python def calculate_net_profit(transactions: list) -> float: ``` Parameters: - `transactions` (list): A list of tuples where each tuple represents a transaction (type, shares, price). The type is a string (\'buy\' or \'sell\'), shares is an integer, and price is a float. Returns: - `net_profit` (float): The net profit or loss from the transactions. # Example Usage: ```python transactions = [ (\'buy\', 10, 20.0), # Buy 10 shares at 20 each (\'sell\', 5, 25.0), # Sell 5 shares at 25 each (\'buy\', 5, 22.0), # Buy 5 shares at 22 each (\'sell\', 10, 24.0) # Sell 10 shares at 24 each ] net_profit = calculate_net_profit(transactions) print(net_profit) ``` In this example: - Initially, you buy 10 shares at 20 each, spending 200. - Then, you sell 5 shares at 25 each, earning 125. - Next, you buy 5 more shares at 22 each, spending 110. - Finally, you sell 10 shares at 24 each, earning 240. Net profit calculation: - Total spent = 200 (first buy) + 110 (second buy) = 310 - Total earned = 125 (first sell) + 240 (second sell) = 365 - Net profit = 365 - 310 = 55","solution":"def calculate_net_profit(transactions: list) -> float: Calculate the net profit or loss from a series of stock transactions. transactions: list A list of tuples where each tuple represents a transaction (type, shares, price). The type is a string (\'buy\' or \'sell\'), shares is an integer, and price is a float. returns: float The net profit or loss from the transactions. total_spent = 0 total_earned = 0 for transaction in transactions: action, shares, price = transaction if action == \'buy\': total_spent += shares * price elif action == \'sell\': total_earned += shares * price net_profit = total_earned - total_spent return net_profit"},{"question":"Write a Python function named `find_largest_substring` that accepts a single parameter: 1. `input_string`: a string containing only lowercase English letters. The function should identify the largest substring where all characters are unique (i.e., there are no repeated characters). # Objective - Implement the `find_largest_substring` function to find and return the longest substring with all unique characters from the given `input_string`. - If there are multiple substrings of the same maximum length, return the first one encountered. - Consider using efficient algorithms to reduce time complexity, such as a sliding window approach. # Requirements - **Function Name:** `find_largest_substring` - **Parameter:** - `input_string`: A string of lowercase English letters. - **Output:** Return the largest substring with unique characters. # Example ```python input_string = \\"abcabcbb\\" find_largest_substring(input_string) ``` # Expected Output ``` \\"abc\\" ``` # Additional Example ```python input_string = \\"bbbbb\\" find_largest_substring(input_string) ``` # Expected Output ``` \\"b\\" ``` # Additional Example ```python input_string = \\"pwwkew\\" find_largest_substring(input_string) ``` # Expected Output ``` \\"wke\\" ``` # Considerations - The solution should efficiently handle long strings with the sliding window technique to maintain optimal performance. - Ensure to handle edge cases, such as an empty string or a string with all repeating characters. ```python def find_largest_substring(input_string): n = len(input_string) if n == 0: return \\"\\" char_dict = {} start, max_len, max_start = 0, 0, 0 for end in range(n): if input_string[end] in char_dict: start = max(start, char_dict[input_string[end]] + 1) char_dict[input_string[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_start = start return input_string[max_start:max_start + max_len] ``` In the example `input_string = \\"abcabcbb\\"`, the output will be `\\"abc\\"`, as it is the longest substring with unique characters.","solution":"def find_largest_substring(input_string): Finds the largest substring with unique characters in the input string. :param input_string: A string of lowercase English letters. :return: The largest substring with unique characters. n = len(input_string) if n == 0: return \\"\\" char_dict = {} start, max_len, max_start = 0, 0, 0 for end in range(n): if input_string[end] in char_dict: start = max(start, char_dict[input_string[end]] + 1) char_dict[input_string[end]] = end if end - start + 1 > max_len: max_len = end - start + 1 max_start = start return input_string[max_start:max_start + max_len]"},{"question":"You are required to write a function named `transform_nested_list` that will transform a nested list such that all elements at the same depth level are summed together. Function Signature: ```python def transform_nested_list(nested_list: list) -> list: ``` **Specifications:** - The `nested_list` parameter will be a list that can contain integers or other nested lists of integers. **Requirements:** 1. Use recursion to traverse through the nested structure. 2. Aggregate the sums of elements located at the same depth level. **Constraints:** - If the `nested_list` parameter is not a list, raise a `TypeError` with the message \\"TypeError: nested_list must be of type list\\". - All integers in the nested structure are non-negative. **Examples:** ```python # Example 1 nested_list = [1, [2, 3], [4, [5, 6]]] # Elements at depth 0: 1 # Elements at depth 1: 2, 3, 4 # Elements at depth 2: 5, 6 # Output: [1, 9, 11] print(transform_nested_list(nested_list)) # Example 2 nested_list = [[1], [2, [3, 4]], 5] # Elements at depth 0: 5 # Elements at depth 1: 1, 2 # Elements at depth 2: 3, 4 # Output: [5, 3, 7] print(transform_nested_list(nested_list)) ```","solution":"def transform_nested_list(nested_list: list) -> list: if not isinstance(nested_list, list): raise TypeError(\\"TypeError: nested_list must be of type list\\") def helper(sub_list, depth=0, result=None): if result is None: result = [] while len(result) <= depth: result.append(0) for item in sub_list: if isinstance(item, list): helper(item, depth + 1, result) elif isinstance(item, int): result[depth] += item else: raise TypeError(\\"TypeError: nested_list must only contain integers or other nested lists\\") return result return helper(nested_list)"},{"question":"You are given a list of integers representing the heights of buildings in a cityscape. Each building has a width of 1. You need to find the maximum area of a rectangle formed by adjacent buildings. You need to implement a function called `max_rectangle_area(heights)` that takes a list of integers `heights` where each integer represents the height of a building. The function should return an integer representing the maximum area of rectangle that can be formed using contiguous buildings. To solve this problem efficiently, you could use a stack to keep track of the buildings\' indices and calculate the maximum area iteratively. Example: ```python heights = [2, 1, 5, 6, 2, 3] print(max_rectangle_area(heights)) # Output: 10 ``` In this example, the maximum rectangular area is formed by the buildings of heights [5, 6] with a width of 2. So, the area is 5 * 2 = 10. Constraints: - The input list `heights` will contain at least one building. - The height of each building will be a non-negative integer. You may use the following strategy to solve the problem: 1. Initialize a stack to keep track of the indices of the buildings. 2. Iterate through the list of building heights: - If the stack is empty or the current building height is greater than the height of the building at the index on the top of the stack, push the current index onto the stack. - Otherwise, pop the index from the stack, calculate the area of the rectangle with the popped building as the shortest building, and update the maximum area. 3. After the iteration, continue to pop from the stack and calculate areas until the stack is empty. 4. Return the maximum rectangular area found.","solution":"def max_rectangle_area(heights): Returns the maximum area of rectangle formed by adjacent buildings. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Define a function that simulates a dice roll game in which a player rolls two 6-sided dice. The function should return a dictionary with the counts of each possible outcome (2-12) after a given number of rolls. Utilize NumPy to generate random rolls and collections.Counter to count the occurrences of each outcome. The function should output: dict: A dictionary where keys are the sums of the dice (2-12) and values are the counts of each sum. You should write self-contained code starting with: ``` import numpy as np from collections import Counter def simulate_dice_rolls(num_rolls): ```","solution":"import numpy as np from collections import Counter def simulate_dice_rolls(num_rolls): Simulates rolling two 6-sided dice a specified number of times and returns a dictionary with counts of each possible outcome (from 2 to 12). Parameters: num_rolls (int): The number of dice rolls to simulate. Returns: dict: A dictionary where keys are the sums of the dice (2-12) and values are the counts of each sum. # Generate random rolls for two dice dice1 = np.random.randint(1, 7, num_rolls) dice2 = np.random.randint(1, 7, num_rolls) # Sum the dice rolls sums = dice1 + dice2 # Use Counter to count the occurrences of each outcome counts = Counter(sums) # Ensure all possible outcomes from 2 to 12 are included in the result return {i: counts.get(i, 0) for i in range(2, 13)}"},{"question":"You are required to implement a function named `categorize_ages` that categorizes individuals based on their ages within a given pandas DataFrame. The function should add a new column to the DataFrame that indicates the age category for each individual. Function Signature: ```python def categorize_ages(data_pdframe, age_column): Categorize individuals based on their ages and add a new column indicating the category. Parameters: data_pdframe (pd.DataFrame): The pandas DataFrame containing the data. age_column (str): The name of the column in the DataFrame containing age values. Returns: pd.DataFrame: The modified DataFrame with a new column \'AgeCategory\'. ``` Requirements: - The new column should be named \'AgeCategory\'. - The age categories should be defined as follows: - \'Child\' for ages 0-12 - \'Teenager\' for ages 13-19 - \'Adult\' for ages 20-64 - \'Senior\' for ages 65 and above - The function should handle missing or null age values gracefully by assigning them to an \'Unknown\' category. Steps: 1. Define the age category ranges. 2. Use pandas\' `apply` method to create the \'AgeCategory\' column based on the age values. 3. Handle missing or null age values by checking for `NaN` and assigning them to the \'Unknown\' category. 4. Return the modified DataFrame. Example: ```python import pandas as pd # Sample DataFrame data = {\'Name\': [\'Alice\', \'Bob\', \'Charlie\', \'David\'], \'Age\': [8, 23, 31, None]} df = pd.DataFrame(data) # Column name for age age_column = \\"Age\\" modified_df = categorize_ages(df, age_column) print(modified_df) ``` The above example should produce the following output: ``` Name Age AgeCategory 0 Alice 8.0 Child 1 Bob 23.0 Adult 2 Charlie 31.0 Adult 3 David NaN Unknown ```","solution":"import pandas as pd def categorize_ages(data_pdframe, age_column): Categorize individuals based on their ages and add a new column indicating the category. Parameters: data_pdframe (pd.DataFrame): The pandas DataFrame containing the data. age_column (str): The name of the column in the DataFrame containing age values. Returns: pd.DataFrame: The modified DataFrame with a new column \'AgeCategory\'. def age_category(age): if pd.isna(age): return \'Unknown\' elif age <= 12: return \'Child\' elif 13 <= age <= 19: return \'Teenager\' elif 20 <= age <= 64: return \'Adult\' elif age >= 65: return \'Senior\' data_pdframe[\'AgeCategory\'] = data_pdframe[age_column].apply(age_category) return data_pdframe"},{"question":"You are tasked with implementing a function that assesses the performance of a K-Nearest Neighbors (KNN) classifier model using the F1-score metric. The F1-score is commonly used to measure the accuracy of a classification model, particularly in cases where there is an imbalance between the classes. Your goal is to write a function `evaluate_knn_classifier` that takes the number of neighbors (`n_neighbors`) for the KNN classifier, along with training and validation datasets, and returns the F1-score of the model. You need to explicitly use the `f1_score` function from `sklearn.metrics` to calculate the F1-score in your implementation. # Function Specification **Function Name:** `evaluate_knn_classifier` **Parameters:** 1. `n_neighbors` (int): Number of neighbors to use for the KNN classifier. 2. `train_X` (array-like): Training feature dataset. 3. `val_X` (array-like): Validation feature dataset. 4. `train_y` (array-like): Training target dataset. 5. `val_y` (array-like): Validation target dataset. **Returns:** - `f1` (float): The F1-score of the model\'s predictions on the validation dataset. # Example ```python from sklearn.metrics import f1_score from sklearn.neighbors import KNeighborsClassifier def evaluate_knn_classifier(n_neighbors, train_X, val_X, train_y, val_y): model = KNeighborsClassifier(n_neighbors=n_neighbors) model.fit(train_X, train_y) preds_val = model.predict(val_X) f1 = f1_score(val_y, preds_val, average=\'weighted\') return f1 # Sample Inputs n_neighbors = 3 train_X = [[1, 2], [2, 3], [3, 4], [4, 5]] val_X = [[5, 6], [6, 7]] train_y = [0, 1, 0, 1] val_y = [1, 0] # Expected Output print(evaluate_knn_classifier(n_neighbors, train_X, val_X, train_y, val_y)) ``` In this example, the function should return the F1-score of the KNN classifier\'s predictions on the validation dataset.","solution":"from sklearn.metrics import f1_score from sklearn.neighbors import KNeighborsClassifier def evaluate_knn_classifier(n_neighbors, train_X, val_X, train_y, val_y): Trains a KNN classifier and evaluates it using the F1-score metric. Parameters: - n_neighbors (int): Number of neighbors to use for the KNN classifier. - train_X (array-like): Training feature dataset. - val_X (array-like): Validation feature dataset. - train_y (array-like): Training target dataset. - val_y (array-like): Validation target dataset. Returns: - f1 (float): The F1-score of the model\'s predictions on the validation dataset. model = KNeighborsClassifier(n_neighbors=n_neighbors) model.fit(train_X, train_y) preds_val = model.predict(val_X) f1 = f1_score(val_y, preds_val, average=\'weighted\') return f1"},{"question":"You are required to write a function `find_shared_words(file1_path, file2_path)` that takes two file paths as input. Each file contains a list of words, one per line. The function should identify the words that are common to both files and return them as a list sorted in alphabetical order. The comparison should be case-insensitive, but the returned words should be in their original case as they appear in the files. **Specifics:** 1. Read the content of each file. 2. Identify words that appear in both files, regardless of case. 3. Return a list of these shared words, maintaining their original case from the files and sorted alphabetically. **Function Signature:** ```python def find_shared_words(file1_path: str, file2_path: str) -> list: pass ``` **Example:** Suppose `file1.txt` contains: ``` Apple banana Cherry date ``` And `file2.txt` contains: ``` Banana Date elephant fig ``` Calling `find_shared_words(\'file1.txt\', \'file2.txt\')` should return: ```python [\'banana\', \'date\'] ```","solution":"def find_shared_words(file1_path, file2_path): def read_file(file_path): with open(file_path, \'r\') as f: return [line.strip() for line in f] words_file1 = read_file(file1_path) words_file2 = read_file(file2_path) words_file1_lower = {word.lower(): word for word in words_file1} words_file2_lower = {word.lower(): word for word in words_file2} common_words_lower = set(words_file1_lower).intersection(set(words_file2_lower)) common_words_original = sorted([words_file1_lower[word] for word in common_words_lower]) return common_words_original"},{"question":"You are working at a logistics company, and your task is to implement a function `optimize_delivery_route` which determines the shortest route to deliver packages to multiple destinations using the Traveling Salesman Problem (TSP) approach. This will help in minimizing the travel distance and, consequently, the delivery time and fuel cost. The function should use a brute force method to solve TSP for simplicity, and it should return the optimized route and the minimum distance. **Specifications:** - **Function Name**: `optimize_delivery_route` - **Parameters**: - `distance_matrix`: A 2D NumPy array where `distance_matrix[i][j]` represents the distance between location `i` and location `j`. The element at `[i][j]` is the same as `[j][i]` and the diagonal elements are zeros (distance from a location to itself). - **Return**: A tuple containing: - A list of integer indices representing the order of locations for the shortest route. - An integer representing the total minimum distance for the route. **Constraints**: - The number of locations (rows/columns in `distance_matrix`) should be between 2 and 10, inclusive. **Example**: ```python import numpy as np distance_matrix = np.array([ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ]) route, min_distance = optimize_delivery_route(distance_matrix) print(route) # Example output: [0, 1, 3, 2] print(min_distance) # Example output: 80 ``` **Hint**: To solve TSP using brute force: - Generate all possible permutations of locations. - Compute the total distance for each permutation. - Track the permutation with the minimum total distance. **Note**: Ensure the function handles errors gracefully, such as when the input matrix is not square or when its dimensions are out of the specified range.","solution":"import numpy as np from itertools import permutations def optimize_delivery_route(distance_matrix): Determines the shortest route to deliver packages to multiple destinations using the Traveling Salesman Problem (TSP) approach. Parameters: distance_matrix (2D numpy array): Distance matrix where distance_matrix[i][j] represents the distance between location i and location j. Returns: tuple: Shortest route (list of indices) and the minimum distance (int). # Validate the input if not isinstance(distance_matrix, np.ndarray): raise ValueError(\\"Distance matrix must be a numpy array.\\") n = distance_matrix.shape[0] if n < 2 or n > 10: raise ValueError(\\"Distance matrix must have dimensions between 2 and 10, inclusive.\\") if distance_matrix.shape[0] != distance_matrix.shape[1]: raise ValueError(\\"Distance matrix must be square.\\") if not np.allclose(distance_matrix, distance_matrix.T): raise ValueError(\\"Distance matrix must be symmetric.\\") # Create a function to calculate the total route distance def calculate_route_distance(route): return sum(distance_matrix[route[i], route[i + 1]] for i in range(len(route) - 1)) + distance_matrix[route[-1], route[0]] # Generate all permutations of routes (excluding the return to the starting point for simplicity) all_routes = permutations(range(n)) min_distance = float(\'inf\') optimal_route = None # Evaluate each permutation for route in all_routes: distance = calculate_route_distance(route) if distance < min_distance: min_distance = distance optimal_route = route return list(optimal_route), min_distance"},{"question":"You are asked to implement a function to calculate the sum of the prime numbers within a given range. This task involves summing all the prime numbers between two integers, inclusive. Your task is to write a function named `sum_of_primes_in_range` that takes two integers as arguments, a start and an end range value, and returns the sum of all prime numbers within that range. If the range specified does not include any primes, the function should return 0. # Requirements: 1. You must define a helper function `is_prime` to check if a number is prime. 2. The range is inclusive, meaning both the start and end values should be checked for primality. 3. Ensure that the function works efficiently for larger ranges up to 10,000. # Function Signature ```python def sum_of_primes_in_range(start: int, end: int) -> int: pass ``` # Explanation - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - The helper function `is_prime(n)` should return `True` if `n` is a prime number, and `False` otherwise. - The main function should iterate over all numbers in the given range, use the `is_prime` function to check for primality, and sum the prime numbers. - If the `start` is greater than the `end`, the function should return 0 as there are no numbers in the range. # Example ```python print(sum_of_primes_in_range(10, 20)) # Output: 60 print(sum_of_primes_in_range(4, 4)) # Output: 0 print(sum_of_primes_in_range(1, 10)) # Output: 17 ```","solution":"def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def sum_of_primes_in_range(start, end): Returns the sum of all prime numbers within the range [start, end]. if start > end: return 0 prime_sum = 0 for num in range(start, end + 1): if is_prime(num): prime_sum += num return prime_sum"},{"question":"Write a function `rainbow_sort(arr: List[int]) -> List[int]` that takes a list of integers and sorts them according to the following rules: 1. Negative numbers should come first and be sorted in ascending order. 2. Zeros should come next. 3. Positive numbers should come last and be sorted in descending order. Design your algorithm to have linear time complexity, preferably O(n), where n is the number of elements in the input list. # Function Signature ```python def rainbow_sort(arr: List[int]) -> List[int]: pass ``` # Example For input: ```python arr = [3, 0, -1, 2, -2, 0, 1] ``` You should return: ```python [-2, -1, 0, 0, 3, 2, 1] ``` # Requirements: - The function should handle sorting operations in place without using additional space for another list. - Input list can include integers, zeros, and negative numbers. - You may use additional constant space for counters or pointers.","solution":"from typing import List def rainbow_sort(arr: List[int]) -> List[int]: Sorts an array of integers where negative numbers come first in ascending order, followed by zeros, and positive numbers come last in descending order. Args: arr (List[int]): The list of integers to sort. Returns: List[int]: The sorted list. negatives = [] zeros = [] positives = [] for num in arr: if num < 0: negatives.append(num) elif num == 0: zeros.append(num) else: positives.append(num) negatives.sort() positives.sort(reverse=True) return negatives + zeros + positives"},{"question":"Given a list of integers, find and return the longest subsequence that is strictly increasing. If there are multiple such subsequences of the same length, return the one which appears first in the list. Your function should output: list: The longest strictly increasing subsequence. The function should raise: TypeError: If the input is not a list. Example: - input: [10, 22, 9, 33, 21, 50, 41, 60, 80] - output: [10, 22, 33, 50, 60, 80] You should write self-contained code starting with: ``` def task_func(nums): ```","solution":"def task_func(nums): Returns the longest strictly increasing subsequence from the given list of integers. If multiple such subsequences have the same length, the first one is returned. Parameters: nums (list): List of integers. Returns: list: Longest strictly increasing subsequence. Raises: TypeError: If the input is not a list. if not isinstance(nums, list): raise TypeError(\\"The input must be a list.\\") n = len(nums) if n == 0: # Return an empty list if the input list is empty return [] # dp array to store the length of longest increasing subsequence ending at each element dp = [1] * n # array to store previous index of elements in the LIS prev = [-1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j # find index of the maximum value in dp max_index = 0 for i in range(1, n): if dp[i] > dp[max_index]: max_index = i # reconstruct the LIS lis = [] while max_index != -1: lis.append(nums[max_index]) max_index = prev[max_index] lis.reverse() # reverse the list to get the correct order return lis"},{"question":"Design a Python function named `merge_sorted_lists` that takes two parameters, `list1` and `list2`, which are both lists of integers and already sorted in ascending order. This function should return a single merged list that contains all elements from `list1` and `list2` in ascending order. To complete this task, you must not use any built-in sorting functions like `sorted()` or `sort()`. Instead, you should leverage the fact that both input lists are already sorted and perform a merge operation similar to the merge step of the merge sort algorithm. Your function should be efficient with a time complexity of `O(n + m)` where `n` and `m` are the lengths of `list1` and `list2` respectively. Here are the detailed steps your function should perform: 1. Initialize an empty list called `merged_list`. 2. Use two indices, `i` and `j`, starting at 0, to iterate through `list1` and `list2` respectively. 3. Append the smaller value between `list1[i]` and `list2[j]` to `merged_list` and increment the corresponding index. 4. When one of the lists is exhausted, append the remaining elements of the other list to `merged_list`. 5. Return `merged_list`. **Example Usage:** ```python list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8, 10] result = merge_sorted_lists(list1, list2) print(result) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 10] ``` Ensure your function operates correctly and efficiently, handling edge cases such as one or both lists being empty.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: List of sorted integers :param list2: List of sorted integers :return: Merged and sorted list merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements of list1 (if any) while i < len(list1): merged_list.append(list1[i]) i += 1 # Append remaining elements of list2 (if any) while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are asked to implement a function that takes in a list of integers and returns a list of the same integers, but rearranged to form the largest possible integer. In other words, you should concatenate the integers such that they form the largest possible number when arranged in a specific order. **Function Specification**: - **Function Name**: `largest_possible_number` - **Parameters**: - `numbers`: A list of non-negative integers. - **Return**: A string representing the largest concatenated number. **Requirements**: 1. The function should handle lists with varying lengths. 2. The integers should be concatenated in such a way that they form the largest number possible. 3. Handle edge cases such as lists with multiple zeros or the same number repeated. **Example Behavior**: If `numbers = [3, 30, 34, 5, 9]`, the function should return `\\"9534330\\"` as that forms the largest number possible by rearranging the integers. **Constraints**: - The input list will have at least one integer. - Each integer will be between 0 and `10^9`. ```python def largest_possible_number(numbers): # Implement this function pass ``` **Hint**: Consider converting the integers to strings and defining a custom sort order based on the possible concatenations. This problem focuses on understanding string manipulations, sorting algorithms, and custom comparators.","solution":"from functools import cmp_to_key def largest_possible_number(numbers): Given a list of non-negative integers, arrange them such that they form the largest possible number. :param numbers: List of non-negative integers :return: A string representing the largest number formed by the integers # Convert the numbers to strings str_numbers = [str(num) for num in numbers] # Define a comparator that determines the order based on concatenation def compare(a, b): if a + b > b + a: return -1 elif a + b < b + a: return 1 else: return 0 # Sort the string numbers using the custom comparator str_numbers.sort(key=cmp_to_key(compare)) # Join the sorted strings largest_number = \'\'.join(str_numbers) # Edge case: when the list contains only zeros if largest_number[0] == \'0\': return \'0\' return largest_number"},{"question":"You are asked to create a function called `benchmark_factorial` which computes the factorial of a given integer using both an iterative approach and a recursive approach. The function should measure and compare the execution times of both methods. The primary objective is to understand the performance implications of iterative and recursive solutions. Your function should follow these steps: 1. Implement an iterative method to compute the factorial. 2. Implement a recursive method to compute the factorial. 3. Generate a random integer within a given range, say 1 to 20, using `random.randint()`. This will be the input for both methods. 4. Measure and print the time taken by the iterative method to calculate the factorial. 5. Measure and print the time taken by the recursive method to calculate the factorial. 6. Return a tuple containing the factorial value computed by the iterative method, the time taken by the iterative method, the time taken by the recursive method, and a string indicating which method was faster. Here is a placeholder for your function definition: ```python import time import random def iterative_factorial(n): # Implementation needed for iterative factorial method pass def recursive_factorial(n): # Implementation needed for recursive factorial method pass def benchmark_factorial(): # Implementation needed here pass ``` Feel free to define any additional helper functions as needed.","solution":"import time import random def iterative_factorial(n): Computes the factorial of n iteratively. result = 1 for i in range(1, n+1): result *= i return result def recursive_factorial(n): Computes the factorial of n recursively. if n == 0: return 1 else: return n * recursive_factorial(n - 1) def benchmark_factorial(): Benchmarks the iterative and recursive methods of computing factorial and returns the results. n = random.randint(1, 20) start_time = time.time() iterative_result = iterative_factorial(n) iterative_time = time.time() - start_time start_time = time.time() recursive_result = recursive_factorial(n) recursive_time = time.time() - start_time faster_method = \\"iterative\\" if iterative_time < recursive_time else \\"recursive\\" return (iterative_result, iterative_time, recursive_time, faster_method)"},{"question":"You need to write a function that simulates and visualizes the infection spread in a 2D grid over a series of time steps. The grid is a square array of cells, where each cell can be in one of two states: infected (1) or non-infected (0). The rules of infection spread are as follows: 1. A non-infected cell becomes infected if at least two of its adjacent neighbors (up, down, left, right) are infected. 2. A cell that is infected remains infected. Specifically, you are required to implement the function `simulate_infection(grid, num_steps)` that performs the following tasks: 1. **Initialize the grid**: The initial state of the grid is given as an input parameter \'grid\', a 2D list of integers (0s and 1s). 2. **Simulate infection spread**: For each of the specified number of time steps (`num_steps`), update the grid following the infection rules described above. 3. **Plot the grid**: Use `matplotlib.pyplot.imshow` to visualize the grid at each time step as an image, with colors representing infected and non-infected cells. Here is the function signature you need to implement: ```python def simulate_infection(grid, num_steps): pass ``` # Example: Given the initial `grid` state: ``` [[0, 1, 0], [0, 0, 1], [1, 0, 0]] ``` and `num_steps = 3`, the function should visualize the infection spread over 3 steps according to the rules. Use the `matplotlib.pyplot.imshow` function for plotting the grid. Refer to its documentation for more details on its usage.","solution":"import matplotlib.pyplot as plt import copy def simulate_infection(grid, num_steps): Simulates the infection spread in a 2D grid over a series of time steps. Parameters: grid (list of lists of int): The initial state of the grid. num_steps (int): Number of simulation steps. Returns: None def get_adjacent_infected_count(grid, x, y): dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)] count = 0 for dx, dy in dirs: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 1: count += 1 return count def update_grid(grid): new_grid = copy.deepcopy(grid) for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 0 and get_adjacent_infected_count(grid, i, j) >= 2: new_grid[i][j] = 1 return new_grid for _ in range(num_steps): plt.imshow(grid, cmap=\'viridis\', interpolation=\'none\') plt.show() grid = update_grid(grid)"},{"question":"You are given a CSV file containing data on house prices named \\"house_prices.csv\\". The dataset includes the following columns: - `lot_size` (numeric): The size of the lot in square feet. - `num_bedrooms` (integer): The number of bedrooms in the house. - `num_bathrooms` (integer): The number of bathrooms in the house. - `num_floors` (integer): The number of floors in the house. - `has_garage` (boolean): Whether the house has a garage or not. - `price` (numeric): The price of the house. Your task is to build a linear regression model using Scikit-learn to predict house prices based on the given features. The function you need to implement is `build_and_train_linear_model(filename)`, where `filename` is the path to the CSV file. The function should: 1. Load the dataset from the provided CSV file. 2. Preprocess the dataset: - Convert the boolean \'has_garage\' column to an integer. - Ensure no missing values exist in the dataset. - Split the dataset into features (`X`) and target (`y`) variables. 3. Split the data into training and testing sets, with 80% of the data for training and 20% for testing. 4. Train a linear regression model using Scikit-learn on the training set. 5. Evaluate the model on the testing set and return the model and its R-squared score on the test set. **Requirements:** - Use `pandas` for data manipulation. - Use Scikit-learn\'s `LinearRegression` and `train_test_split`. **Hints:** - Look into `pd.read_csv()` for loading the CSV file. - Use `train_test_split` from `sklearn.model_selection` for splitting the dataset. - Use `LinearRegression` from `sklearn.linear_model`. ```python import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score def build_and_train_linear_model(filename): # Load the dataset df = pd.read_csv(filename) # Preprocess data df[\'has_garage\'] = df[\'has_garage\'].astype(int) # Check for missing values if df.isnull().sum().sum() != 0: raise ValueError(\\"The dataset contains missing values\\") # Features and target variable X = df.drop(\'price\', axis=1) y = df[\'price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the model model = LinearRegression() model.fit(X_train, y_train) # Evaluate the model y_pred = model.predict(X_test) r2 = r2_score(y_test, y_pred) return model, r2 # Example usage # model, score = build_and_train_linear_model(\'house_prices.csv\') # print(f\\"R-squared score: {score}\\") ```","solution":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score def build_and_train_linear_model(filename): # Load the dataset df = pd.read_csv(filename) # Preprocess data df[\'has_garage\'] = df[\'has_garage\'].astype(int) # Check for missing values if df.isnull().sum().sum() != 0: raise ValueError(\\"The dataset contains missing values\\") # Features and target variable X = df.drop(\'price\', axis=1) y = df[\'price\'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the model model = LinearRegression() model.fit(X_train, y_train) # Evaluate the model y_pred = model.predict(X_test) r2 = r2_score(y_test, y_pred) return model, r2"},{"question":"Write a function named `json_data_process` that takes a single string parameter, `file_path`, representing the file path to a JSON file. This function should read the JSON data from the file, process the data to calculate the sum and average of a specific numeric field in the JSON objects, and then log the outcomes using the `logging.info` method from the `logging` library. The JSON file is expected to contain a list of objects, each of which has a numeric field named `value`. The function should calculate the following: 1. The total sum of all `value` fields. 2. The average of all `value` fields. Log the results using `logging.info` with appropriate messages. Here are the requirements for using the relevant libraries: - Use `json.load` to read data from the JSON file. - Use `logging.info` to log the sum and average values. Ensure that you handle potential exceptions such as the file not existing, parsing errors, or issues with missing `value` fields, by logging appropriate error messages using `logging.error`. ```python import logging import json logging.basicConfig(level=logging.INFO) ``` **Function Signature:** ```python def json_data_process(file_path: str) -> None: pass ``` **Example:** Suppose the file `data.json` contains: ```json [ {\\"value\\": 10}, {\\"value\\": 15}, {\\"value\\": 25} ] ``` Calling the function with the file path: ```python json_data_process(\'data.json\') ``` This will log: ``` INFO:root:Total Sum: 50 INFO:root:Average: 16.666666666666668 ``` If an error occurs (e.g., file not found or JSON decode error), the function should log an error message appropriately.","solution":"import logging import json logging.basicConfig(level=logging.INFO) def json_data_process(file_path: str) -> None: try: with open(file_path, \'r\') as file: data = json.load(file) # Initialize variables to calculate the sum and count of \'value\' fields total_sum = 0 count = 0 for item in data: if \'value\' in item and isinstance(item[\'value\'], (int, float)): total_sum += item[\'value\'] count += 1 else: logging.error(f\\"Invalid or missing \'value\' field in item: {item}\\") if count == 0: logging.info(\\"Total Sum: 0\\") logging.info(\\"Average: N/A\\") else: average = total_sum / count logging.info(f\\"Total Sum: {total_sum}\\") logging.info(f\\"Average: {average}\\") except FileNotFoundError: logging.error(f\\"File not found: {file_path}\\") except json.JSONDecodeError: logging.error(f\\"Error decoding JSON from file: {file_path}\\")"},{"question":"Create a function called `calculate_histogram_intersection` that calculates the intersection of two histograms. Given two dictionaries representing the frequency of elements in each histogram, the function should return the sum of the minimum frequencies for each element present in either histogram. # Function Signature: ```python def calculate_histogram_intersection(histogram1: dict, histogram2: dict) -> int: ``` # Parameters: - `histogram1` (dict): A dictionary where keys are elements and values are their respective counts in the first histogram. - `histogram2` (dict): A dictionary where keys are elements and values are their respective counts in the second histogram. # Returns: - `int`: The sum of the minimum frequencies for each element present in either histogram. # Example Usage: ```python hist1 = {\'a\': 3, \'b\': 5, \'c\': 2} hist2 = {\'a\': 4, \'b\': 1, \'d\': 7} result = calculate_histogram_intersection(hist1, hist2) print(result) # Output: 4 ``` # Explanation: - For element \'a\', minimum frequency is min(3, 4) = 3. - For element \'b\', minimum frequency is min(5, 1) = 1. - Elements \'c\' and \'d\' do not exist in both histograms simultaneously, so they do not contribute to the intersection sum. - Sum of minimum frequencies: 3 + 1 = 4. # Constraints: - Assume that both input dictionaries are non-empty. - Elements in the histograms are always hashable and comparable. # Hints: - Iterate through the set of keys that appear in either dictionary to consider all elements present in both histograms.","solution":"def calculate_histogram_intersection(histogram1, histogram2): Calculates the intersection of two histograms. Args: histogram1 (dict): The first histogram where keys are elements and values are their counts. histogram2 (dict): The second histogram where keys are elements and values are their counts. Returns: int: The sum of the minimum frequencies for each element present in either histogram. intersection_sum = 0 elements = set(histogram1.keys()).union(set(histogram2.keys())) for element in elements: if element in histogram1 and element in histogram2: intersection_sum += min(histogram1[element], histogram2[element]) return intersection_sum"},{"question":"You are building a recommendation system for an online bookstore. Your task is to write a Python function `get_book_recommendations(user_id: int, db_path: str)` that performs the following steps: 1. Connect to an SQLite database, whose path is given by `db_path`. 2. Verify the connection to the database. If it fails, raise an appropriate error. 3. Fetch the list of books the user has already read based on `user_id`. 4. Calculate the most frequent genre among these books. 5. Retrieve a list of books from the same genre that the user has not yet read. The list should include the book title, author, and the number of pages. Your function should handle potential exceptions for database connections and queries gracefully, and utilize the `sqlite3` library for database operations. Example: ```python # Suppose the function is called with the following arguments get_book_recommendations(1, \'path/to/books_db.sqlite\') ``` Your function should return a list of tuples similar to: ```python [(\'Book Title 1\', \'Author Name 1\', 320), (\'Book Title 2\', \'Author Name 2\', 275)] ```","solution":"import sqlite3 from collections import Counter def get_book_recommendations(user_id: int, db_path: str): Connect to the SQLite database and fetches book recommendations for the given user_id. :param user_id: The ID of the user :param db_path: The path to the SQLite database file :return: A list of tuples containing the book title, author, and the number of pages try: # Connect to the database conn = sqlite3.connect(db_path) except sqlite3.Error as e: raise ConnectionError(f\\"Failed to connect to the database: {e}\\") try: cursor = conn.cursor() # Fetch the books the user has already read cursor.execute( SELECT books.id, books.title, books.author, books.genre FROM user_books JOIN books ON user_books.book_id = books.id WHERE user_books.user_id = ? , (user_id,)) user_books = cursor.fetchall() if not user_books: return [] # Extract genres of the books user has already read genres = [book[3] for book in user_books] # Find the most frequent genre most_common_genre = Counter(genres).most_common(1)[0][0] # Get the IDs of books the user has already read read_book_ids = [book[0] for book in user_books] read_book_ids_placeholder = \',\'.join(\'?\' for _ in read_book_ids) # Fetch books from the most common genre that the user has not read cursor.execute(f SELECT title, author, pages FROM books WHERE genre = ? AND id NOT IN ({read_book_ids_placeholder}) , (most_common_genre, *read_book_ids)) recommendations = cursor.fetchall() return recommendations except sqlite3.Error as e: raise RuntimeError(f\\"Database query failed: {e}\\") finally: conn.close()"},{"question":"You are tasked with writing a function `get_top_frequent_words(text: str, k: int) -> List[str]` which finds the top `k` most frequent words in a given string. The words should be returned in descending order of frequency. In case multiple words have the same frequency, they should be ordered lexicographically. The function should adhere to the following requirements: 1. **Input Parameters**: - `text` (str): A string of words separated by spaces. - `k` (int): The number of top frequent words to return. 2. **Output**: - A list of `k` strings representing the most frequent words. 3. **Behavior**: - Tokenize the input `text` by splitting on spaces. - Ignore case by converting all words to lowercase. - Use the `Counter` class from the `collections` module to count the frequency of each word. - Sort the words first by frequency in descending order, then lexicographically in ascending order in case of ties. - Return the top `k` most frequent words as a list of strings. - If `k` is greater than the number of unique words in the text, return all words sorted as specified. # Example: ```python text = \'Hello world hello\' k = 2 words = get_top_frequent_words(text, k) print(words) # Output: [\'hello\', \'world\'] ``` # Constraints: - The function should make use of the following libraries/APIs: - `collections.Counter`","solution":"from typing import List from collections import Counter def get_top_frequent_words(text: str, k: int) -> List[str]: Finds the top k most frequent words in the given text. Parameters: text (str): A string of words separated by spaces. k (int): The number of top frequent words to return. Returns: List[str]: A list of k most frequent words. words = text.lower().split() word_count = Counter(words) # Sort words first by frequency in descending order, # then lexicographically in ascending order in case of ties sorted_words = sorted(word_count.items(), key=lambda x: (-x[1], x[0])) return [word for word, _ in sorted_words[:k]]"},{"question":"Merge two sorted lists into a single sorted list without using any built-in sort functions. The function should handle both lists of arbitrary lengths and output the merged and sorted list. The lists may contain duplicate values. You should write self-contained code starting with: ```python def merge_sorted_lists(list1: list, list2: list) -> list: ```","solution":"def merge_sorted_lists(list1: list, list2: list) -> list: Merges two sorted lists into a single sorted list. Args: list1 (list): First sorted list. list2 (list): Second sorted list. Returns: list: Merged and sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from list1 or list2 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Collect remaining elements of list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # Collect remaining elements of list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are tasked with writing a function that will compute the minimum number of steps required to make an input string a palindrome. Each step consists of removing a single character from any position in the string. **Context:** - A palindrome is a string that reads the same backward as forward. - The string can contain any characters, including letters and numbers. Your goal is to create the function `min_deletions_to_palindrome(s)`, which will return the minimum number of deletions needed to transform the input string `s` into a palindrome. **Function Requirements:** - The function `min_deletions_to_palindrome(s)` should: 1. Use dynamic programming to efficiently compute the result. 2. Implement the logic to remove characters while tracking the minimum deletions needed. 3. Return an integer representing the minimum number of deletions. **Input:** - `s`: a string of uppercase and/or lowercase alphabetic characters. **Output:** - An integer representing the minimum number of deletions required for the string to become a palindrome. **Example:** ```python min_deletions_to_palindrome(\\"abca\\") # This will return 1 because removing the character \'b\' or \'c\' would make \\"aca\\" or \\"aba\\", both of which are palindromes. min_deletions_to_palindrome(\\"racecar\\") # This will return 0 because \\"racecar\\" is already a palindrome. ```","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the input string `s` a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n)] for _ in range(n)] # Fill the table for length in range(2, n + 1): # substring lengths from 2 to n for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) # The result is the min number of deletions for the entire sequence return dp[0][n - 1]"},{"question":"In this problem, you will write a function named `group_anagrams` to organize a given list of words into groups of anagrams. An anagram is a word formed by rearranging the letters of another, such as \'listen\' and \'silent\'. Your task involves reading a list of words from a file and then grouping these words such that each group contains words that are anagrams of each other. Here\'s what you need to do step-by-step: 1. **Open and Read Input File:** Read the contents of a text file named `words.txt`. This file contains a list of words, one per line. 2. **Group Words into Anagrams:** Sort letters in each word to determine its anagram group and use a dictionary to group words with identical sorted letter sequences. 3. **Return Grouped Anagrams:** Return the dictionary values as a list of lists, where each sublist contains words that are anagrams of each other. The function signature you need to implement is: ```python def group_anagrams(): # Your code here ``` **Returns:** - A list of lists, where each sublist contains words that are anagrams of each other. **Example Usage:** Consider the `words.txt` with the following contents: ``` listen silent enlist rat tar god dog ``` If you call `group_anagrams()`, the function should return `[[\'listen\', \'silent\', \'enlist\'], [\'rat\', \'tar\'], [\'god\', \'dog\']]` since each sublist contains words that are anagrams of each other. **Note:** - The order of the sublists and the order of words within each sublist does not matter. - You may assume that all words in the file are lowercase and contain no punctuation.","solution":"def group_anagrams(): from collections import defaultdict anagrams = defaultdict(list) try: with open(\'words.txt\', \'r\') as f: for word in f: word = word.strip() sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) except FileNotFoundError: return [] return list(anagrams.values())"},{"question":"You are tasked with creating a function that determines if a given matrix is a valid Sudoku solution. A valid Sudoku board (partially filled or completely filled) must satisfy the following rules: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. The input to the function is a 9x9 2D list that represents the Sudoku board, where the empty cells are filled with the character \'.\'. Implement a function called `is_valid_sudoku(board: List[List[str]]) -> bool` that returns `True` if the board is a valid Sudoku solution, and `False` otherwise. You must use Python\'s set data structure to help validate the uniqueness constraints efficiently. # Function Signature: ```python def is_valid_sudoku(board: List[List[str]]) -> bool: ``` # Example: ```python >>> boardis_valid_sudoku(board) True ``` # Criteria: - Your function should efficiently check for duplicates in rows, columns, and sub-boxes using sets. - Handle the characters \'1\'-\'9\' and \'.\' only, where \'.\' denotes an empty cell.","solution":"from typing import List def is_valid_sudoku(board: List[List[str]]) -> bool: # Helper function to validate sets def is_valid_set(nums: List[str]) -> bool: seen = set() for num in nums: if num != \'.\': if num in seen: return False seen.add(num) return True # Check rows and columns for i in range(9): if not is_valid_set(board[i]): # Check row return False if not is_valid_set([board[x][i] for x in range(9)]): # Check column return False # Check 3x3 sub-boxes for i in range(0, 9, 3): for j in range(0, 9, 3): sub_box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_set(sub_box): return False return True"},{"question":"You are required to write a Python function named `generate_calendar`, which will output the calendar for a given month of a specific year. You need to use the `calendar` module. This function needs to display the month in a format similar to what you would see on a wall calendar. The `generate_calendar` function should: 1. Accept two parameters: `month` and `year`. 2. Use the `calendar.TextCalendar` class to generate the output. 3. Ensure that the calendar starts with Monday. To implement this task, follow these steps: - Create an instance of `calendar.TextCalendar` with the first weekday set to `0` (Monday). - Use the `formatmonth` method to format the month for the given year. The `generate_calendar` function should look like this: ```python import calendar def generate_calendar(month, year): # Your code goes here pass ``` # Example Usage ```python generate_calendar(10, 2023) ``` This example should display the calendar for October 2023, starting with Monday.","solution":"import calendar def generate_calendar(month, year): Generates and returns a calendar for the specified month and year, starting with Monday. cal = calendar.TextCalendar(firstweekday=0) return cal.formatmonth(year, month)"},{"question":"Create a function called `reverse_nested_list` that takes a list of lists as input, reverses the order of the inner lists, and also reverses the order of the elements within each inner list. The function should return the modified list. Ensure the following: 1. The original list and its inner lists remain unmodified. 2. The function handles nested lists of varying lengths. Here is the list structure example for reference: ```python example_list = [ [1, 2, 3], [4, 5, 6], [7, 8, 9, 10] ] ``` For the above list, the resulting list should look like: ```python [ [10, 9, 8, 7], [6, 5, 4], [3, 2, 1] ] ``` Define the function `reverse_nested_list(nested_list)` to accomplish the above requirements.","solution":"def reverse_nested_list(nested_list): Reverses the order of the inner lists and also reverses the order of the elements within each inner list. Parameters: nested_list (list of lists): The input list containing inner lists. Returns: list of lists: A new list where the order of inner lists and the elements within each inner list are reversed. return [inner[::-1] for inner in nested_list[::-1]]"},{"question":"You are given a dataset containing information about various products in a store. The dataset is represented as a list of dictionaries, where each dictionary contains details about a single product. The keys in each dictionary are \\"name\\", \\"category\\", and \\"price\\". The goal is to write a function that categorizes the products and calculates the total price for each category. Write a function named `categorize_totals(products)` that processes the input dataset and returns a dictionary where each key is a category, and the corresponding value is the total price of all products in that category. # Input: - A list of dictionaries, where each dictionary contains three keys: - \\"name\\": A string representing the name of the product. - \\"category\\": A string representing the category of the product. - \\"price\\": A float representing the price of the product. # Output: - A dictionary where each key is a product category, and the value is a float representing the total price of all products in that category. # Example: ```python products = [ {\\"name\\": \\"Laptop\\", \\"category\\": \\"Electronics\\", \\"price\\": 999.99}, {\\"name\\": \\"Smartphone\\", \\"category\\": \\"Electronics\\", \\"price\\": 599.99}, {\\"name\\": \\"Jeans\\", \\"category\\": \\"Apparel\\", \\"price\\": 49.99}, {\\"name\\": \\"T-Shirt\\", \\"category\\": \\"Apparel\\", \\"price\\": 19.99}, {\\"name\\": \\"Bananas\\", \\"category\\": \\"Groceries\\", \\"price\\": 0.99}, {\\"name\\": \\"Apples\\", \\"category\\": \\"Groceries\\", \\"price\\": 1.49} ] result = categorize_totals(products) # Expected output: # { # \\"Electronics\\": 1599.98, # \\"Apparel\\": 69.98, # \\"Groceries\\": 2.48 # } ``` # Instructions: 1. Define the function `categorize_totals(products)`. 2. Iterate over the list of products and categorize them based on the \\"category\\" key. 3. Calculate the total price for each category and store it in a dictionary. 4. Return the dictionary containing the total prices for each category. Good luck and happy coding!","solution":"def categorize_totals(products): Categorizes the products and calculates the total price for each category. Args: products (list of dict): List of dictionaries where each dictionary contains the details of a product. Returns: dict: A dictionary where the key is the product category and the value is the total price of all products in that category. category_totals = {} for product in products: category = product[\\"category\\"] price = product[\\"price\\"] if category in category_totals: category_totals[category] += price else: category_totals[category] = price return category_totals"},{"question":"You are tasked with writing a function that processes a list of dictionaries containing information about various books and returns a list of tuples where each tuple contains the title of a book and its author. The input list will have dictionaries with the following structure: ``` [ { \\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925, \\"genre\\": \\"Fiction\\" }, { \\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960, \\"genre\\": \\"Fiction\\" }, ... ] ``` Your task is to extract the `title` and `author` fields from each dictionary and return a list of tuples containing these two fields. Function requirements: - The function should be named `extract_books`. - The function should take one argument: `books`, which is a list of dictionaries. Function specifications: - The function should return a list of tuples. Each tuple should contain two elements: - The title of the book (string) - The author of the book (string) Here is the outline of the function: ```python def extract_books(books): \'\'\' Parameters ---------- books : list A list of dictionaries, where each dictionary contains information about a book. Returns ------- book_tuples : list A list of tuples, each containing the title and author of a book. \'\'\' # Initialize an empty list to store tuples of book titles and authors book_tuples = [] # Iterate through each dictionary in the list for book in books: # Write your code here to extract the title and author title = book.get(\'title\') author = book.get(\'author\') # Append the title and author as a tuple to book_tuples list book_tuples.append((title, author)) return book_tuples ```","solution":"def extract_books(books): \'\'\' Parameters ---------- books : list A list of dictionaries, where each dictionary contains information about a book. Returns ------- book_tuples : list A list of tuples, each containing the title and author of a book. \'\'\' # Initialize an empty list to store tuples of book titles and authors book_tuples = [] # Iterate through each dictionary in the list for book in books: # Extract title and author title = book.get(\'title\') author = book.get(\'author\') # Append the title and author as a tuple to book_tuples list book_tuples.append((title, author)) return book_tuples"},{"question":"You are tasked with writing a function called `unique_substrings` that will compute all unique substrings of a given string and store them in a list. This function should utilize Python’s set data structure to ensure the uniqueness of substrings. # Requirements: 1. The function should take in one parameter: - `input_string`: A string for which the unique substrings need to be computed. 2. Generate all possible substrings of `input_string`. 3. Use a set to store these substrings to avoid duplicates. 4. Return a sorted list of unique substrings from the set. # Function Signature: ```python def unique_substrings(input_string: str) -> list: pass ``` # Example Invocation: ```python unique_substrings(\'abc\') ``` The above call should return the list: ```python [\'\', \'a\', \'ab\', \'abc\', \'b\', \'bc\', \'c\'] ``` **Note:** Ensure that your implementation is efficient for strings of moderate length (e.g., 100 characters). The order of substrings in the returned list should be lexicographical (sorted as in a dictionary).","solution":"def unique_substrings(input_string: str) -> list: Computes all unique substrings of the given string and stores them in a list. Args: input_string (str): The input string to compute unique substrings from. Returns: list: A sorted list of unique substrings. unique_set = set() for i in range(len(input_string)): for j in range(i + 1, len(input_string) + 1): unique_set.add(input_string[i:j]) # Add empty string which is also considered a substring unique_set.add(\\"\\") # Return the sorted list of unique substrings return sorted(unique_set)"},{"question":"Create a function that extracts and counts the frequency of each unique word in a given text file. The function should return a DataFrame with two columns: \'Word\' and \'Frequency\' where \'Word\' contains the unique words in the text file and \'Frequency\' contains the count of occurrences for each word. The function should ignore case and punctuation, and words should be considered the same regardless of their casing. Raise a `FileNotFoundError` if the file is not found or accessible. You should write self-contained code starting with: ```python import pandas as pd import re from collections import Counter def task_func(file_path): ```","solution":"import pandas as pd import re from collections import Counter def task_func(file_path): Extracts and counts the frequency of each unique word in a given text file. Args: file_path (str): The path to the text file. Returns: DataFrame: A pandas DataFrame with columns \'Word\' and \'Frequency\'. Raises: FileNotFoundError: If the file is not found or accessible. try: with open(file_path, \'r\') as file: text = file.read() except FileNotFoundError: raise FileNotFoundError(f\\"The file at {file_path} was not found or accessible.\\") # Convert text to lower case and remove punctuation text = text.lower() text = re.sub(r\'[^ws]\', \'\', text) # Tokenize the text by splitting on whitespace words = text.split() # Count the frequency of each word word_counts = Counter(words) # Convert to DataFrame df = pd.DataFrame(word_counts.items(), columns=[\'Word\', \'Frequency\']).sort_values(by=\'Frequency\', ascending=False).reset_index(drop=True) return df"},{"question":"In this task, you are required to implement a custom sort function for sorting a list of dictionaries based on multiple keys using the Python programming language. You should create a function `multi_key_sort(data, keys)` that accepts a list of dictionaries (`data`) and a list of keys (`keys`) to sort them by. The dictionaries in the input list will all have the same structure. The function should adhere to the following specifications: 1. `data`: A list of dictionaries to be sorted. Each dictionary contains only `int` or `str` values. 2. `keys`: A list of keys by which the dictionaries should be sorted. The order of keys in the list determines the sort priority, i.e., the first key has the highest priority and so on. 3. The sort should be stable, meaning that if two elements have the same key value(s), their order should be preserved from the input list. You should use the built-in Python `sorted` method with custom sorting logic. You are not allowed to use any external sorting libraries or tools. **Example:** Given a list of dictionaries: ```python data = [ {\'name\': \'Alice\', \'age\': 25, \'score\': 88}, {\'name\': \'Bob\', \'age\': 30, \'score\': 75}, {\'name\': \'Charlie\', \'age\': 25, \'score\': 95}, {\'name\': \'David\', \'age\': 30, \'score\': 75}, {\'name\': \'Eve\', \'age\': 35, \'score\': 90} ] keys = [\'age\', \'score\'] ``` The output of sorting the above data by `age` and then by `score` would be: ```python sorted_data = multi_key_sort(data, keys) print(sorted_data) ``` Expected output: ```python [ {\'name\': \'Alice\', \'age\': 25, \'score\': 88}, {\'name\': \'Charlie\', \'age\': 25, \'score\': 95}, {\'name\': \'Bob\', \'age\': 30, \'score\': 75}, {\'name\': \'David\', \'age\': 30, \'score\': 75}, {\'name\': \'Eve\', \'age\': 35, \'score\': 90} ] ``` **Implementation:** ```python def multi_key_sort(data, keys): sorted_data = sorted(data, key=lambda x: tuple(x[k] for k in keys)) return sorted_data ``` In this problem, you should ensure that your implementation maintains the stability of the sort and accurately sorts the data according to the provided keys.","solution":"def multi_key_sort(data, keys): Sorts a list of dictionaries based on multiple keys. Parameters: data (list): A list of dictionaries to be sorted. keys (list): A list of keys to sort by, in order of priority. Returns: list: The sorted list of dictionaries. sorted_data = sorted(data, key=lambda x: tuple(x[k] for k in keys)) return sorted_data"},{"question":"You are tasked with creating a function to simulate the spread of a disease within a community represented as a 2D grid. Each cell in the grid can be in one of three states: susceptible (`0`), infected (`1`), or recovered (`2`). The disease spreads according to the following rules: - An infected cell (`1`) has a probability `p` of infecting each of its susceptible (`0`) neighboring cells (up, down, left, right) in each time step. - After a cell turns infected in one time step, it will recover (turn into `2`) in the next time step. - Once a cell recovers, it cannot be infected again. Function Signature `def disease_spread(grid: np.ndarray, p: float) -> np.ndarray` Function Description - **Input**: - `grid` (np.ndarray): A 2D array representing the community grid. - `p` (float): The probability that an infected cell will infect a susceptible neighbor. - **Output**: - `new_grid` (np.ndarray): The state of the community grid after one time step of disease spread. Details 1. Initialize a new grid representing the next state. 2. Iterate through each cell of the grid to apply the disease spread rules. 3. For each infected cell, use `numpy.random.rand` to determine if it infects each susceptible neighboring cell based on probability `p`. 4. Ensure the function updates the cell states correctly according to the rules. Instructions 1. Use `numpy.copy` to initialize the new grid. 2. Use `numpy.random.rand` to implement the stochastic disease spread based on probability `p`. 3. Ensure the function returns the updated grid array after applying the disease spread rules. Make sure to follow the function signature and implement as described.","solution":"import numpy as np def disease_spread(grid: np.ndarray, p: float) -> np.ndarray: Simulate one time step of disease spread in the grid community. Parameters: grid (np.ndarray): 2D array representing the community grid. p (float): Probability that an infected cell will infect a susceptible neighbor. Returns: np.ndarray: The state of the community grid after one time step of disease spread. new_grid = np.copy(grid) rows, cols = grid.shape for i in range(rows): for j in range(cols): if grid[i][j] == 1: # Infected cell # Cell will recover in the next step new_grid[i][j] = 2 # Try to infect susceptible neighbors if i > 0 and grid[i-1][j] == 0: # Up neighbor if np.random.rand() < p: new_grid[i-1][j] = 1 if i < rows - 1 and grid[i+1][j] == 0: # Down neighbor if np.random.rand() < p: new_grid[i+1][j] = 1 if j > 0 and grid[i][j-1] == 0: # Left neighbor if np.random.rand() < p: new_grid[i][j-1] = 1 if j < cols - 1 and grid[i][j+1] == 0: # Right neighbor if np.random.rand() < p: new_grid[i][j+1] = 1 return new_grid"},{"question":"Write a function that takes a list of GPS coordinates (latitude, longitude) in the form of tuples, and groups them into clusters based on proximity. Use the Haversine formula to calculate the distance between points. The function should use a given maximum distance threshold (in kilometers) to determine if points belong to the same cluster. Each cluster should be represented by its central point (mean latitude and longitude). The function should output: List of tuples: Each tuple contains the central point of a cluster and a list of the original GPS coordinates that belong to that cluster. You should write self-contained code starting with: ``` import math def haversine(lat1, lon1, lat2, lon2): # Haversine formula to calculate distance between two lat/lon points pass def task_func(gps_list, max_distance): # Main function to cluster GPS coordinates pass ```","solution":"import math def haversine(lat1, lon1, lat2, lon2): Calculate the Haversine distance between two points on the Earth # Convert latitude and longitude from degrees to radians lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2]) # Haversine formula dlat = lat2 - lat1 dlon = lon2 - lon1 a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2 c = 2 * math.asin(math.sqrt(a)) # 6371 is the radius of Earth in kilometers km = 6371 * c return km def task_func(gps_list, max_distance): Group GPS coordinates into clusters based on proximity clusters = [] def add_to_clusters(coord): for cluster in clusters: if any(haversine(coord[0], coord[1], point[0], point[1]) <= max_distance for point in cluster[1]): cluster[1].append(coord) cluster[0] = calculate_central_point(cluster[1]) return clusters.append([(coord[0], coord[1]), [coord]]) def calculate_central_point(coords): mean_lat = sum(c[0] for c in coords) / len(coords) mean_lon = sum(c[1] for c in coords) / len(coords) return (mean_lat, mean_lon) for coord in gps_list: add_to_clusters(coord) return clusters"},{"question":"You are developing a platform that requires analyzing user comments and categorizing them based on the presence of certain keywords. Write a function called `categorize_comments` in Python that processes a list of user comments and classifies each comment into predefined categories. **Function Specification:** - **Function Name**: `categorize_comments` - **Input**: A single argument `comments` which is a list of strings, where each string is a user comment. - **Output**: This function should return a dictionary with the following keys: \\"Positive\\", \\"Negative\\", \\"Neutral\\". The values should be lists containing the comments that fall into each category. Comments should be classified based on the following rules: 1. If a comment contains any of the words \\"good\\", \\"great\\", \\"excellent\\", classify it as \\"Positive\\". 2. If a comment contains any of the words \\"bad\\", \\"terrible\\", \\"awful\\", classify it as \\"Negative\\". 3. If a comment does not contain any of the keywords from the above two categories, classify it as \\"Neutral\\". **Implementation Notes**: - Perform a case-insensitive search for the keywords. - Ensure the function efficiently processes the list of comments. Example Usage: ```python comments_list = [ \\"This product is great!\\", \\"Had a terrible experience with the customer service.\\", \\"The quality is good but delivery was late.\\", \\"Just okay, nothing special.\\", \\"Awful, will never buy again.\\" ] categorized_comments = categorize_comments(comments_list) ``` This should output: ```python { \\"Positive\\": [\\"This product is great!\\", \\"The quality is good but delivery was late.\\"], \\"Negative\\": [\\"Had a terrible experience with the customer service.\\", \\"Awful, will never buy again.\\"], \\"Neutral\\": [\\"Just okay, nothing special.\\"] } ```","solution":"def categorize_comments(comments): Categorizes a list of comments into Positive, Negative, and Neutral categories. :param comments: List of strings where each string is a user comment. :return: Dictionary with keys \\"Positive\\", \\"Negative\\", \\"Neutral\\" containing lists of comments. categories = { \\"Positive\\": [], \\"Negative\\": [], \\"Neutral\\": [] } positive_keywords = {\\"good\\", \\"great\\", \\"excellent\\"} negative_keywords = {\\"bad\\", \\"terrible\\", \\"awful\\"} for comment in comments: comment_lower = comment.lower() if any(keyword in comment_lower for keyword in positive_keywords): categories[\\"Positive\\"].append(comment) elif any(keyword in comment_lower for keyword in negative_keywords): categories[\\"Negative\\"].append(comment) else: categories[\\"Neutral\\"].append(comment) return categories"},{"question":"Write a function to calculate the longest sequence of consecutive integers in a list. This function takes a list of integers as input and returns the length of the longest sequence of consecutive integers. Consecutive integers are numbers that follow each other in order, like 100, 101, 102, etc. The sequence can be in any order in the input list. The function should output: int: The length of the longest sequence of consecutive integers. You should write self-contained code starting with: ``` def longest_consecutive_sequence(nums): ```","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in the list nums. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a function that takes a list of integers as input, sorts the list in an ascending order, and saves the sorted list into a JSON file. The function should then read the JSON file and load the sorted list back into a Python list. Finally, it should return the loaded list and delete the JSON file. The function should raise an exception when: - ValueError: If the input is not a list of integers. The function should return: loaded_list (list): The loaded list of integers from the JSON file. You should write self-contained code starting with: ```python import json import os def task_func(int_list, file_path=\\"sorted_list.json\\"): ``` Here\'s the function template to get you started: ```python import json import os def task_func(int_list, file_path=\\"sorted_list.json\\"): if not isinstance(int_list, list) or not all(isinstance(x, int) for x in int_list): raise ValueError(\\"The input must be a list of integers.\\") sorted_list = sorted(int_list) with open(file_path, \'w\') as json_file: json.dump(sorted_list, json_file) with open(file_path, \'r\') as json_file: loaded_list = json.load(json_file) os.remove(file_path) return loaded_list ```","solution":"import json import os def task_func(int_list, file_path=\\"sorted_list.json\\"): if not isinstance(int_list, list) or not all(isinstance(x, int) for x in int_list): raise ValueError(\\"The input must be a list of integers.\\") # Sort the list sorted_list = sorted(int_list) # Write the sorted list to a JSON file with open(file_path, \'w\') as json_file: json.dump(sorted_list, json_file) # Read the sorted list back from the JSON file with open(file_path, \'r\') as json_file: loaded_list = json.load(json_file) # Remove the JSON file os.remove(file_path) return loaded_list"},{"question":"You are assigned to write a Python function named `matrix_diagonal_sum`. The function should take a 2D list (matrix) as input and return the sum of the elements on both the primary and secondary diagonals. The primary diagonal runs from the top left to the bottom right, while the secondary diagonal runs from the top right to the bottom left. The function will: 1. Calculate the sum of the elements on the primary diagonal. 2. Calculate the sum of the elements on the secondary diagonal. 3. Return the total sum of both diagonals. Your submission should: - Handle square matrices only (matrices where the number of rows is equal to the number of columns). - Account for elements that are common to both diagonals just once (typically when the matrix size is odd). **Function Signature:** ```python def matrix_diagonal_sum(matrix: List[List[int]]) -> int: pass ``` # Example: ```python >>> matrix_diagonal_sum([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) 25 ``` # Constraints: - The input matrix will always be square (n x n). - The elements of the matrix are integers. # Explanation: In this example: - Primary diagonal elements: 1, 5, 9 - Secondary diagonal elements: 3, 5, 7 - The sum of unique diagonal elements: 1 + 5 + 9 + 3 + 7 = 25","solution":"def matrix_diagonal_sum(matrix): Returns the sum of the elements on the primary and secondary diagonals. Handles each element that belongs to both diagonals only once. n = len(matrix) primary_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(n): primary_diagonal_sum += matrix[i][i] # adding primary diagonal elements secondary_diagonal_sum += matrix[i][n - 1 - i] # adding secondary diagonal elements # If the matrix size is odd, the center element will be counted twice, so subtract it once if n % 2 == 1: middle_index = n // 2 center_element = matrix[middle_index][middle_index] total_sum = primary_diagonal_sum + secondary_diagonal_sum - center_element else: total_sum = primary_diagonal_sum + secondary_diagonal_sum return total_sum"},{"question":"Read a CSV file containing daily temperature data into a Pandas DataFrame, and calculate a 7-day moving average of the temperature. Plot both the original data and the moving average on the same graph. The function should return a tuple containing the DataFrame and the matplotlib Figure object of the plot. The function should output: tuple: A tuple containing: DataFrame: A pandas DataFrame of the daily temperature data with an additional column for the 7-day moving average. matplotlib.figure.Figure: The matplotlib Figure object with the plot of the original and moving average data. You should write self-contained code starting with: ``` import pandas as pd import matplotlib.pyplot as plt def task_func(file_path=\\"temperature_data.csv\\", column=\\"temperature\\"): ```","solution":"import pandas as pd import matplotlib.pyplot as plt def task_func(file_path=\\"temperature_data.csv\\", column=\\"temperature\\"): # Read the CSV file into a pandas DataFrame df = pd.read_csv(file_path) # Calculate the 7-day moving average df[\'7-day moving average\'] = df[column].rolling(window=7).mean() # Create the plot fig, ax = plt.subplots() df.plot(x=\'date\', y=column, ax=ax, label=\'Original Data\') df.plot(x=\'date\', y=\'7-day moving average\', ax=ax, label=\'7-Day Moving Average\') # Set the labels and title ax.set_xlabel(\'Date\') ax.set_ylabel(\'Temperature\') ax.set_title(\'Temperature and 7-Day Moving Average\') # Return the DataFrame and the Figure return df, fig"},{"question":"You are to implement a function to generate and simulate various scenarios in a simplified stock market environment. Given a list of stocks, each represented by a tuple containing the stock name and its current price, your task is to simulate random price changes over a certain number of days. The price change for each stock should be randomly determined using the `random.uniform` function within a specified range for each day. After simulating the price changes over the given period, return the list of stocks with their final prices, rounded to two decimal places. # Function Specification - **Function Name**: `simulate_stock_prices` - **Parameters**: - `stock_list` (list of tuples): Each tuple contains the stock name (string) and its current price (float). - `days` (int): The number of days over which to simulate the price changes. - `min_change` (float): The minimum possible price change on any given day. - `max_change` (float): The maximum possible price change on any given day. # Steps to Implement 1. Iterate through each day from 1 to `days`. 2. For each day, apply a random price change to each stock using `random.uniform` to generate a random float between `min_change` and `max_change`. 3. Update the stock\'s price based on the generated random price change for that day. 4. After simulating all the days, round the final price of each stock to two decimal places. 5. Return the list of stocks with their final prices after the simulation period. # Example ```python stock_list = [(\\"AAPL\\", 150.00), (\\"GOOGL\\", 2700.00), (\\"MSFT\\", 299.00), (\\"TSLA\\", 750.00)] final_prices = simulate_stock_prices(stock_list, 5, -10.0, 10.0) ``` In this example, `simulate_stock_prices` simulates the price changes for 5 days, where each day\'s price change for a stock is randomly chosen between -10.0 and 10.0. The function then returns the final prices for each stock after 5 days of simulation, with each price rounded to two decimal places. # Constraints - Use the `random.uniform` function to determine the daily price change. - Ensure that the final prices are rounded to two decimal places.","solution":"import random def simulate_stock_prices(stock_list, days, min_change, max_change): Simulates random price changes for stocks over a specified number of days. Parameters: stock_list (list of tuples): Each tuple contains the stock name (string) and its current price (float). days (int): The number of days over which to simulate the price changes. min_change (float): The minimum possible price change on any given day. max_change (float): The maximum possible price change on any given day. Returns: list of tuples: The list of stocks with their final prices after the simulation period. final_prices = [] for stock in stock_list: name, price = stock for _ in range(days): price_change = random.uniform(min_change, max_change) price += price_change final_price = round(price, 2) final_prices.append((name, final_price)) return final_prices"},{"question":"You are tasked with writing a function to simulate and analyze a sequence of stock prices. The aim is to determine the best day to buy and the best day to sell to maximize profit. If there\'s no profit to be gained, the function should return (-1, -1). Below are the function specifications: - **Function Name**: `max_profit_days` - **Parameters**: - `prices (List[int])`: A list of integers representing the stock price on each day. - **Return**: A tuple of two integers, where the first integer is the best day to buy and the second integer is the best day to sell. If no profit is possible, return (-1, -1). Ensure that the function: 1. Iterates through the list to identify the minimal price and the maximum profit achievable after this minimal price. 2. Handles scenarios where the list is empty or contains fewer than two prices by returning (-1, -1). 3. Optimizes for time complexity to ensure efficient performance on large datasets. # Example ```python assert max_profit_days([7, 1, 5, 3, 6, 4]) == (1, 4) assert max_profit_days([7, 6, 4, 3, 1]) == (-1, -1) ```","solution":"def max_profit_days(prices): Determines the best day to buy and the best day to sell to maximize profit. Parameters: prices (List[int]): A list of integers representing the stock price on each day. Returns: A tuple of two integers, where the first integer is the best day to buy and the second integer is the best day to sell. If no profit is possible, returns (-1, -1). if len(prices) < 2: return (-1, -1) min_price = prices[0] min_price_day = 0 max_profit = 0 best_days = (-1, -1) for i in range(1, len(prices)): if prices[i] < min_price: min_price = prices[i] min_price_day = i elif prices[i] - min_price > max_profit: max_profit = prices[i] - min_price best_days = (min_price_day, i) return best_days"},{"question":"The goal of this problem is to implement a function `simulate_stock_prices` that simulates stock prices using the Geometric Brownian Motion (GBM) model and stores the simulation results in a CSV file. You will specifically utilize the `numpy` and `csv` libraries for this task. Function Signature: ```python def simulate_stock_prices(S0, mu, sigma, T, dt, num_simulations, output_csv): pass ``` Parameters: - `S0` (float): The initial stock price. - `mu` (float): The expected return. - `sigma` (float): The volatility of the stock\'s returns. - `T` (float): The total time horizon for the simulation in years. - `dt` (float): The time step size in years. - `num_simulations` (int): The number of simulation paths to generate. - `output_csv` (str): The path to the output CSV file where the simulated stock prices should be stored. The function should: 1. Calculate the number of time steps as `int(T / dt)`. 2. Initialize an array to store the simulated stock prices for each time step and each simulation path. 3. Use the Geometric Brownian Motion formula to simulate the stock price at each time step for each simulation path: [ S_{t+1} = S_t cdot e^{(mu - frac{sigma^2}{2}) cdot dt + sigma cdot sqrt{dt} cdot Z_t} ] where ( Z_t ) is a standard normal random variable. 4. Store the simulated stock prices into a CSV file specified by `output_csv`. The CSV file should have columns: \'time_step\', \'simulation_index\', and \'stock_price\'. Example usage: ```python simulate_stock_prices(S0=100, mu=0.05, sigma=0.2, T=1, dt=0.01, num_simulations=100, output_csv=\'simulated_prices.csv\') ``` This function should not use any specialized statistical or financial libraries and should rely on basic NumPy operations.","solution":"import numpy as np import csv def simulate_stock_prices(S0, mu, sigma, T, dt, num_simulations, output_csv): Simulates stock prices using the Geometric Brownian Motion model and stores the simulation results in a CSV file. Parameters: S0 (float): Initial stock price. mu (float): Expected return. sigma (float): Volatility of the stock\'s returns. T (float): Total time horizon for the simulation in years. dt (float): Time step size in years. num_simulations (int): Number of simulation paths to generate. output_csv (str): Path to the output CSV file where the simulated stock prices should be stored. num_steps = int(T / dt) stock_prices = np.zeros((num_steps + 1, num_simulations)) stock_prices[0] = S0 for t in range(1, num_steps + 1): Z = np.random.standard_normal(num_simulations) stock_prices[t] = stock_prices[t-1] * np.exp((mu - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * Z) with open(output_csv, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'time_step\', \'simulation_index\', \'stock_price\']) for t in range(num_steps + 1): for sim in range(num_simulations): writer.writerow([t, sim, stock_prices[t][sim]])"},{"question":"Your task is to implement a function `remove_duplicates(lst)` that takes a list of integers `lst` and returns a new list with all duplicate elements removed while preserving the order of the first occurrence of each unique element. To achieve this, you should: 1. Traverse through the input list from left to right. 2. Maintain a set to keep track of seen elements. 3. Append elements to the result list only if they are not already in the seen set. Ensure that the order of the elements in the resulting list matches the order of their first occurrence in the input list. **Function Signature:** ```python def remove_duplicates(lst): pass ``` **Examples:** ```python remove_duplicates([1, 2, 2, 3, 4, 4, 5]) # Output: [1, 2, 3, 4, 5] remove_duplicates([1, 1, 1, 1]) # Output: [1] remove_duplicates([5, 4, 3, 2, 1]) # Output: [5, 4, 3, 2, 1] ``` **Constraints:** - The input list `lst` can contain up to 100,000 elements. - Each element in the list `lst` is an integer in the range from -1000 to 1000 inclusive.","solution":"def remove_duplicates(lst): Removes duplicates from the list while preserving the order of first occurrences. Parameters: lst (list): List of integers. Returns: list: A new list with duplicates removed. seen = set() result = [] for num in lst: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"Create a function that simulates a basic banking system. The function should be named `banking_system` and will simulate operations on a single bank account. The function will receive a list of operations and initial balance as input and will return the final balance after all operations are processed. Operations will be provided in a list of strings where each string represents a transaction. Each transaction is either a deposit or a withdrawal and is formatted as follows: - Deposits are in the format `Deposit <amount>` (e.g., `Deposit 100`) - Withdrawals are in the format `Withdraw <amount>` (e.g., `Withdraw 50`) Your function should correctly update the account balance based on these transactions, and handle cases such as insufficient funds for withdrawals. If a withdrawal operation requests more money than the current balance, the function should leave the balance unchanged for that transaction and continue processing the remaining operations. The signature of the function should be: ```python def banking_system(operations: list, initial_balance: float) -> float: ``` You can assume: - All deposit and withdrawal amounts will be positive numbers. - Initial balance will be a non-negative number. # Example Usage ```python operations = [\\"Deposit 200\\", \\"Withdraw 50\\", \\"Withdraw 300\\", \\"Deposit 150\\", \\"Withdraw 100\\"] initial_balance = 100 final_balance = banking_system(operations, initial_balance) print(final_balance) # Output should be 300 ``` # Explanation 1. Initial balance is 100. 2. Deposit 200: balance becomes 300. 3. Withdraw 50: balance becomes 250. 4. Withdraw 300: not enough funds, balance remains 250. 5. Deposit 150: balance becomes 400. 6. Withdraw 100: balance becomes 300. Your implementation should process the operations correctly and return the final balance.","solution":"def banking_system(operations: list, initial_balance: float) -> float: balance = initial_balance for operation in operations: action, amount_str = operation.split() amount = float(amount_str) if action == \\"Deposit\\": balance += amount elif action == \\"Withdraw\\": if amount <= balance: balance -= amount return balance"},{"question":"Create a function named `generate_pattern` that prints a rectangular pattern using a given character, repeated for a specified number of rows and columns. The function should include the following features: - The character to use for generating the pattern. - The number of rows and columns for the rectangle. - An optional boolean parameter `border` which, if set to True, prints a border around the rectangular pattern, leaving the interior cells empty. If not provided, it should default to False. Here are the parameters for the `generate_pattern` function: 1. `char` (str): The character to use for the pattern. 2. `rows` (int): The number of rows in the rectangular pattern. 3. `cols` (int): The number of columns in the rectangular pattern. 4. `border` (bool, optional): Whether to print the border or not. Defaults to False. The function should follow these steps: 1. If `border` is False, print the character repeated for the specified number of rows and columns. 2. If `border` is True, print only the border using the character, leaving the inside cells empty. The border should be printed on the first and last row, and the first and last columns of the intermediate rows should be the character, with spaces in between. # Example ```python generate_pattern(\'*\', 4, 6) ``` Output: ``` ****** ****** ****** ****** ``` ```python generate_pattern(\'#\', 5, 8, border=True) ``` Output: ``` # # # # # # ```","solution":"def generate_pattern(char, rows, cols, border=False): if border: # Generate the border pattern with empty interior for i in range(rows): if i == 0 or i == rows - 1: print(char * cols) else: print(char + \' \' * (cols - 2) + char) else: # Generate the full rectangle pattern for i in range(rows): print(char * cols)"},{"question":"Design a function named `categorize_numbers` that takes a list of integers and separates them into three different categories: positive, negative, and zero. Each category should be stored in its own list. The function should return a dictionary containing these three lists, under the keys \\"positive\\", \\"negative\\", and \\"zero\\", respectively. **Function Signature:** ```python def categorize_numbers(nums: list) -> dict: pass ``` **Example Usage:** ```python numbers = [4, -1, 0, 2, -3, 0, -2] result = categorize_numbers(numbers) print(result) # Sample Output: # { # \\"positive\\": [4, 2], # \\"negative\\": [-1, -3, -2], # \\"zero\\": [0, 0] # } ``` Explanation: - The input `nums` is a list of integers that can contain positive numbers, negative numbers, and zeros. - Initialize three empty lists: `positives`, `negatives`, and `zeros` to hold numbers of each respective category. - Iterate over the input list `nums`, appending each number to its appropriate category list: - If the number is greater than 0, append it to `positives`. - If the number is less than 0, append it to `negatives`. - If the number is 0, append it to `zeros`. - Create a dictionary with the keys \\"positive\\", \\"negative\\", and \\"zero\\", assigning the respective lists to each key. - Return the dictionary containing the categorized lists.","solution":"def categorize_numbers(nums: list) -> dict: Categorizes numbers into positive, negative, and zero categories. :param nums: List of integers. :return: Dictionary with keys \'positive\', \'negative\', and \'zero\', which correspond to lists of positive, negative, and zero numbers from the input list. result = { \'positive\': [], \'negative\': [], \'zero\': [] } for num in nums: if num > 0: result[\'positive\'].append(num) elif num < 0: result[\'negative\'].append(num) else: result[\'zero\'].append(num) return result"},{"question":"You are given a list of students, each represented by a dictionary containing their name and a list of their scores in various subjects. Your task is to write a function named `calculate_student_averages` that will: 1. Take in a list of student dictionaries as input. 2. Calculate the average score for each student. 3. Identify the student with the highest average score. 4. Print the average score for each student in the format: `<student_name>: <average_score>`. 5. Return the name of the student with the highest average score. Each student dictionary will have the following format: ```python { \\"name\\": \\"StudentName\\", \\"scores\\": [score1, score2, score3, ...] } ``` For example: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"scores\\": [79, 88, 84]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [92, 90, 85]} ] ``` The function should be implemented as: ```python def calculate_student_averages(students): pass ``` Ensure your function handles the list of students and scores correctly, computes the averages accurately, and manages potential edge cases such as students with no scores.","solution":"def calculate_student_averages(students): Calculate the average score for each student and identify the student with the highest average score. :param students: List of student dictionaries. Each dictionary has \'name\' (str) and \'scores\' (list of ints). :return: The name of the student with the highest average score. highest_average = -1 top_student = \\"\\" for student in students: name = student[\\"name\\"] scores = student[\\"scores\\"] if scores: average_score = sum(scores) / len(scores) else: average_score = 0 if average_score > highest_average: highest_average = average_score top_student = name print(f\\"{name}: {average_score:.2f}\\") return top_student"},{"question":"You are tasked with analyzing student performance data from multiple classes to identify top performers and generate summary statistics. The goal is to read data from three different CSV files, normalize the scores, and summarize the performance of each student as well as the overall class statistics. You are provided three CSV files: `class1.csv`, `class2.csv`, and `class3.csv`, each containing data with columns: \'student_id\', \'name\', and \'score\'. Each file corresponds to students from a different class. You need to read these files, normalize the scores to a 0-100 scale based on each class\'s maximum score, and then calculate and print the summary statistics for the combined data. Finally, identify and print the top 5 performers across all classes. Write a function `analyze_student_performance()` that performs the following operations: 1. Read the CSV files `class1.csv`, `class2.csv`, and `class3.csv` located in the current working directory. 2. Normalize the \'score\' of each student to a 0-100 scale based on the highest score in their respective class. 3. Concatenate all the DataFrames into a single DataFrame named `students_df`. 4. Calculate and print summary statistics for the combined DataFrame, including mean, median, and standard deviation of the normalized scores. 5. Identify and print the top 5 performers across all classes based on the normalized scores. **Required Libraries:** - `pandas` **Function Signature:** ```python def analyze_student_performance() -> None: pass ```","solution":"import pandas as pd def analyze_student_performance(): # Read CSV files class1_df = pd.read_csv(\'class1.csv\') class2_df = pd.read_csv(\'class2.csv\') class3_df = pd.read_csv(\'class3.csv\') def normalize_scores(df): max_score = df[\'score\'].max() df[\'normalized_score\'] = (df[\'score\'] / max_score) * 100 return df # Normalize scores class1_df = normalize_scores(class1_df) class2_df = normalize_scores(class2_df) class3_df = normalize_scores(class3_df) # Concatenate all DataFrames students_df = pd.concat([class1_df, class2_df, class3_df]) # Calculate and print summary statistics mean_score = students_df[\'normalized_score\'].mean() median_score = students_df[\'normalized_score\'].median() std_dev_score = students_df[\'normalized_score\'].std() print(f\\"Mean normalized score: {mean_score:.2f}\\") print(f\\"Median normalized score: {median_score:.2f}\\") print(f\\"Standard deviation of normalized scores: {std_dev_score:.2f}\\") # Identify and print the top 5 performers top_performers = students_df.nlargest(5, \'normalized_score\') print(\\"nTop 5 Performers:\\") for index, row in top_performers.iterrows(): print(f\\"Student ID: {row[\'student_id\']}, Name: {row[\'name\']}, Normalized Score: {row[\'normalized_score\']:.2f}\\") # Example usage # analyze_student_performance()"},{"question":"You are required to create a function named `word_count` that takes a string of text as input and returns the number of words in the text. A word is defined as any contiguous sequence of alphabetic characters and can contain both uppercase and lowercase letters. All other characters (such as punctuation, digits, and whitespace) should be considered as delimiters. Here are the specific requirements: - The input string may contain punctuation marks, numbers, and special characters, but these should not be included in the word count. - Capitalized and lowercase letters should be treated as the same (case-insensitive). - Continuous sequences of alphabetic characters should be counted as words. The purpose of this exercise is to familiarize you with string manipulation and text processing in Python. Use the following import: ```python import re ``` Implement the `word_count` function to count the words in the given text. ```python def word_count(text): # Your code here ```","solution":"import re def word_count(text): Returns the number of words in the given text. A word is defined as any contiguous sequence of alphabetic characters. words = re.findall(r\'b[a-zA-Z]+b\', text) return len(words)"},{"question":"You are required to create a simple bar chart using the `matplotlib` library in Python. The function you write will plot categories and their corresponding values on a bar chart with appropriate labels and title. The function should be named `bar_chart` and take the following parameters: - `categories`: A list of strings representing the categories for the x-axis. - `values`: A list of numerical values corresponding to each category. - `title` (default=\\"Bar Chart Example\\"): A string representing the title of the plot. - `x_label` (default=\\"Categories\\"): A string representing the label for the x-axis. - `y_label` (default=\\"Values\\"): A string representing the label for the y-axis. Use the `matplotlib.pyplot.bar` function to create the bar chart, and follow its documentation requirements for this task. Ensure the bars are colored in blue and have an alpha value of 0.7 to help visualize overlapping bars where applicable. Add appropriate titles and labels to the axes. Example usage: ```python categories = [\'A\', \'B\', \'C\', \'D\'] values = [10, 15, 7, 12] bar_chart(categories, values) ``` This should plot a bar chart with bars corresponding to categories \'A\', \'B\', \'C\', \'D\' with heights 10, 15, 7, 12 respectively, all in blue with appropriate titles and labels.","solution":"import matplotlib.pyplot as plt def bar_chart(categories, values, title=\\"Bar Chart Example\\", x_label=\\"Categories\\", y_label=\\"Values\\"): Plots a bar chart with the given categories and values. Parameters: - categories: list of strings representing the categories for the x-axis. - values: list of numerical values corresponding to each category. - title: title of the plot (default is \\"Bar Chart Example\\"). - x_label: label for the x-axis (default is \\"Categories\\"). - y_label: label for the y-axis (default is \\"Values\\"). plt.figure(figsize=(10, 6)) plt.bar(categories, values, color=\'blue\', alpha=0.7) plt.title(title) plt.xlabel(x_label) plt.ylabel(y_label) plt.show()"},{"question":"You are tasked with creating a function `summarize_dataset(dataframe)` that provides a comprehensive summary of a given pandas DataFrame, displaying important statistics and details about the data. The function should provide two main sections in its output: a general overview and detailed statistics on each column. Function Specifications: 1. **dataframe**: A pandas DataFrame that contains the data to be summarized. The function should: 1. Print a general overview of the DataFrame, including: - The total number of rows and columns. - The data types of each column. - The number of missing values in each column. - The number of unique values in each column. 2. For each column, print detailed statistics: - For numerical columns: mean, standard deviation, minimum, 25th percentile, median, 75th percentile, and maximum. - For categorical columns: the most frequent value and its frequency, and the number of unique categories. To summarize: 1. The function prints general summary information about the DataFrame. 2. It then iterates over each column to print detailed statistics based on the column’s data type. You can use the following packages in your function: - `pandas` - `numpy` Here is a simple structure of an example code you might need to visualize, with some parts omitted intentionally: ```python import pandas as pd import numpy as np def summarize_dataset(dataframe): print(\\"General Overview:\\") print(f\\"Total Rows: {dataframe.shape[0]}\\") print(f\\"Total Columns: {dataframe.shape[1]}\\") print(\\"nColumn Data Types:\\") print(dataframe.dtypes) print(\\"nMissing Values per Column:\\") print(dataframe.isnull().sum()) print(\\"nUnique Values per Column:\\") print(dataframe.nunique()) print(\\"nDetailed Column Statistics:n\\") for column in dataframe.columns: print(f\\"Column: {column}\\") if np.issubdtype(dataframe[column].dtype, np.number): print(dataframe[column].describe()) else: print(f\\"Most Frequent Value: {dataframe[column].mode()[0]}\\") print(f\\"Frequency of Most Frequent Value: {dataframe[column].value_counts().iloc[0]}\\") print(f\\"Number of Unique Categories: {dataframe[column].nunique()}\\") print() # Example usage: # dataframe = pd.read_csv(\'your_dataset.csv\') # summarize_dataset(dataframe) ``` Ensure the function encapsulates all the necessary operations to meet the specifications and provide an illustrative example to demonstrate its utility.","solution":"import pandas as pd import numpy as np def summarize_dataset(dataframe): print(\\"General Overview:\\") print(f\\"Total Rows: {dataframe.shape[0]}\\") print(f\\"Total Columns: {dataframe.shape[1]}\\") print(\\"nColumn Data Types:\\") print(dataframe.dtypes) print(\\"nMissing Values per Column:\\") print(dataframe.isnull().sum()) print(\\"nUnique Values per Column:\\") print(dataframe.nunique()) print(\\"nDetailed Column Statistics:n\\") for column in dataframe.columns: print(f\\"Column: {column}\\") if np.issubdtype(dataframe[column].dtype, np.number): print(f\\"Mean: {dataframe[column].mean()}\\") print(f\\"Standard Deviation: {dataframe[column].std()}\\") print(f\\"Minimum: {dataframe[column].min()}\\") print(f\\"25th Percentile: {dataframe[column].quantile(0.25)}\\") print(f\\"Median: {dataframe[column].median()}\\") print(f\\"75th Percentile: {dataframe[column].quantile(0.75)}\\") print(f\\"Maximum: {dataframe[column].max()}\\") else: print(f\\"Most Frequent Value: {dataframe[column].mode()[0]}\\") print(f\\"Frequency of Most Frequent Value: {dataframe[column].value_counts().iloc[0]}\\") print(f\\"Number of Unique Categories: {dataframe[column].nunique()}\\") print() # Example usage: # dataframe = pd.read_csv(\'your_dataset.csv\') # summarize_dataset(dataframe)"},{"question":"Load a dataset and filter out rows where any of the specified columns have missing values. For the remaining rows, normalize the numerical features using MinMaxScaler from sklearn. Then, compute the k-means clusters with a specified number of clusters and generate a scatter plot of the first two numerical features, coloring the points based on the cluster assignment. The function should return the DataFrame with the cluster labels added and the Matplotlib Axes object of the scatter plot. The function should raise exceptions for: ValueError: If \'data\' is not a DataFrame or any of \'numerical_columns\' is not in the DataFrame. ValueError: If \'n_clusters\' is not a positive integer. The function should output with: tuple: A tuple containing: * DataFrame: A pandas DataFrame with the original data and the cluster labels. * matplotlib.axes.Axes: Axes object of the scatter plot. Start the code with: ``` import pandas as pd import numpy as np from sklearn.preprocessing import MinMaxScaler from sklearn.cluster import KMeans import matplotlib.pyplot as plt def task_func(data, numerical_columns, n_clusters): ```","solution":"import pandas as pd import numpy as np from sklearn.preprocessing import MinMaxScaler from sklearn.cluster import KMeans import matplotlib.pyplot as plt def task_func(data, numerical_columns, n_clusters): Load dataset, filter out rows with missing values in specified columns, normalize the numerical features, and compute k-means clusters. Parameters: data (pd.DataFrame): Input dataset. numerical_columns (list): List of numeric columns to be normalized and used for clustering. n_clusters (int): Number of clusters. Returns: tuple: Tuple containing: * DataFrame: A pandas DataFrame with the original data and the cluster labels. * matplotlib.axes.Axes: Axes object of the scatter plot. Raises: ValueError: If \'data\' is not a DataFrame or any of \'numerical_columns\' is not in the DataFrame. ValueError: If \'n_clusters\' is not a positive integer. if not isinstance(data, pd.DataFrame): raise ValueError(\\"Input data should be a pandas DataFrame.\\") if not all(col in data.columns for col in numerical_columns): raise ValueError(\\"Some of the numerical_columns are not in the DataFrame.\\") if not isinstance(n_clusters, int) or n_clusters <= 0: raise ValueError(\\"n_clusters should be a positive integer.\\") # Drop rows with missing values in specified columns data_clean = data.dropna(subset=numerical_columns) # Normalize numerical columns using MinMaxScaler scaler = MinMaxScaler() data_clean[numerical_columns] = scaler.fit_transform(data_clean[numerical_columns]) # Fit K-Means clustering kmeans = KMeans(n_clusters=n_clusters, random_state=42) data_clean[\'cluster\'] = kmeans.fit_predict(data_clean[numerical_columns]) # Scatter plot of the first two numerical features with cluster coloring fig, ax = plt.subplots() scatter = ax.scatter(data_clean[numerical_columns[0]], data_clean[numerical_columns[1]], c=data_clean[\'cluster\'], cmap=\'viridis\') legend1 = ax.legend(*scatter.legend_elements(), title=\\"Clusters\\") ax.add_artist(legend1) return data_clean, ax"},{"question":"Write a function named `process_text` that processes a string of text and returns a dictionary with the count of each unique word, a list of all unique words sorted in alphabetical order, and the total number of words. The function should have the following signature: ```python def process_text(text: str) -> dict ``` Where: - `text`: A string of text which may contain punctuation, varying cases, and multiple spaces. Your function should: 1. Normalize the text by converting all characters to lowercase. 2. Remove all punctuation from the text. 3. Split the text into individual words based on whitespace. 4. Count the occurrences of each unique word and store the results in a dictionary where the keys are the unique words and the values are their counts. 5. Create a list of all unique words sorted in alphabetical order. 6. Calculate the total number of words in the text. 7. Return a dictionary with three keys: `\'word_count\'`, `\'unique_words\'`, and `\'total_words\'`, where: - `\'word_count\'` maps to the dictionary of word counts. - `\'unique_words\'` maps to the sorted list of unique words. - `\'total_words\'` maps to the total number of words in the text. Notes: - Use the `re` library to handle punctuation removal efficiently. - Ensure your solution is capable of handling large blocks of text. - Provide a brief description of each step in your solution, detailing how the text processing is performed and why each method or library is used.","solution":"import re from collections import Counter def process_text(text: str) -> dict: Processes the given text string and returns a dictionary with word count, sorted unique words, and total number of words. Parameters: text (str): A string of text to be processed. Returns: dict: A dictionary with keys \'word_count\', \'unique_words\', and \'total_words\'. # Step 1: Normalize the text by converting it to lowercase text = text.lower() # Step 2: Remove all punctuation (replace with spaces to separate words instead of joining) text = re.sub(r\'[^ws]\', \' \', text) # Step 3: Split the text into individual words words = text.split() # Step 4: Count the occurrences of each unique word word_count = Counter(words) # Step 5: Create a list of all unique words sorted in alphabetical order unique_words = sorted(word_count.keys()) # Step 6: Calculate the total number of words total_words = len(words) # Step 7: Return the results as a dictionary return { \'word_count\': dict(word_count), \'unique_words\': unique_words, \'total_words\': total_words }"},{"question":"You are tasked with creating a basic calculator that performs a specified arithmetic operation on two integers. This exercise is designed to get you familiar with fundamental control structures and user input handling in Python. # Task: Write a function `calculate(operation: str, num1: int, num2: int) -> float` that takes in an arithmetic operation and two integers, and performs the operation on the integers. The function should follow these steps: 1. Based on the provided operation (`\'add\'`, `\'subtract\'`, `\'multiply\'`, `\'divide\'`), perform the corresponding arithmetic operation. 2. If the operation is `\'divide\'` and `num2` is 0, return the string `\\"Error: Division by zero\\"`. # Function Signature: ```python def calculate(operation: str, num1: int, num2: int) -> float: ``` # Requirements: - You must use conditional statements to determine the operation to be performed. - Ensure proper error handling for division by zero. # Sample Usage: ```python result = calculate(\'add\', 10, 5) print(result) # Output: 15.0 result = calculate(\'divide\', 10, 0) print(result) # Output: \\"Error: Division by zero\\" ``` # Hints: - Use `if-elif-else` statements to select the appropriate operation. - Ensure that the return type is a `float` for valid arithmetic operations. - Handle incorrect operations by raising a `ValueError`. # Additional Notes: - Assume that the inputs provided will always match the function signature. - Ensure your code is well-documented and handles edge cases appropriately.","solution":"def calculate(operation: str, num1: int, num2: int): Performs an arithmetic operation on two integers. Parameters: operation (str): The operation to perform (\'add\', \'subtract\', \'multiply\', \'divide\'). num1 (int): The first integer. num2 (int): The second integer. Returns: float or str: The result of the arithmetic operation, or an error message if division by zero. if operation == \'add\': return float(num1 + num2) elif operation == \'subtract\': return float(num1 - num2) elif operation == \'multiply\': return float(num1 * num2) elif operation == \'divide\': if num2 == 0: return \\"Error: Division by zero\\" else: return float(num1 / num2) else: raise ValueError(f\\"Invalid operation \'{operation}\'\\")"},{"question":"** You are tasked with implementing a function that finds all possible combinations of a given list of numbers that sum up to a target value. The solution set must not contain duplicate combinations and the order of the numbers within a combination does not matter. Your task is to complete the function named `find_combinations(numbers, target)`. The function parameters are: 1. `numbers` (list of int): A list of positive integers that you can use to form combinations. 2. `target` (int): The target sum for which you need to find all combinations of numbers that sum up to it. The function should return a list of lists, where each inner list is a unique combination of numbers that add up to `target`. **Example Usage**: ```python numbers = [2, 3, 6, 7] target = 7 combinations = find_combinations(numbers, target) print(combinations) # Output: [[2, 2, 3], [7]] ``` **Constraints**: - All numbers in the input list are positive integers. - For the input list `[n1, n2, .., nk]` where ni > 0, the length of the list will be between `[1, 30]`. - The target sum will be a positive integer not greater than 500. **Hint**: - You may need a helper function to find combinations. - Use recursion or backtracking to explore all possible combinations. - Ensure to handle duplicate entries by sorting the input list and avoiding repeated elements in the same position of the recursive calls. **Requirements**: - Implement the function efficiently to handle the upper constraint limits. - Avoid duplications in the result. ```python def find_combinations(numbers, target): def backtrack(start, target, path, res): if target == 0: res.append(path) return for i in range(start, len(numbers)): if numbers[i] > target: break if i > start and numbers[i] == numbers[i-1]: continue backtrack(i, target - numbers[i], path + [numbers[i]], res) numbers.sort() result = [] backtrack(0, target, [], result) return result ```","solution":"def find_combinations(numbers, target): def backtrack(start, target, path, res): if target == 0: res.append(path) return for i in range(start, len(numbers)): if numbers[i] > target: break if i > start and numbers[i] == numbers[i-1]: continue backtrack(i, target - numbers[i], path + [numbers[i]], res) numbers.sort() result = [] backtrack(0, target, [], result) return result"},{"question":"You are tasked with creating a Python function that demonstrates the use of generators to handle large datasets efficiently. The goal of this function is to showcase how Python\'s generator functionality can be employed to work with large datasets without loading the entire dataset into memory. Function Specification: Write a function named `process_large_dataset` that accomplishes the following tasks: 1. Generates a large sequence of numbers ranging from `start` to `end` (both inclusive). 2. Processes each number by applying a simple transformation: if the number is even, multiply it by 2; if the number is odd, multiply it by 3. 3. Yields the transformed numbers one by one using a generator. Additional Information: - Utilize Python\'s generator functionality (using `yield`) to handle the sequence generation and transformation. - Ensure that the function can handle a large range of numbers efficiently without consuming excessive memory. Example Usage: ```python # Calling the function large_sequence = process_large_dataset(1, 100) # Printing the first 10 processed numbers for _ in range(10): print(next(large_sequence)) ``` Example Output: When the function is called with `start=1` and `end=100`, the first 10 lines of output should look something like this: ``` 3 4 9 8 15 12 21 16 27 20 ``` Note: The exact output will vary based on the initial `start` and `end` values provided.","solution":"def process_large_dataset(start, end): Generates and processes a large sequence of numbers. For each number in the range [start, end]: - If the number is even, multiply it by 2 - If the number is odd, multiply it by 3 Yields: The transformed numbers one by one using a generator. for number in range(start, end + 1): if number % 2 == 0: yield number * 2 else: yield number * 3"},{"question":"Write a function to check if a given string is an anagram of a palindrome. A string is an anagram of a palindrome if it can be rearranged to form a palindrome. You should implement the function such that it returns `True` if the string is an anagram of a palindrome and `False` otherwise. You should write self-contained code starting with: ``` def is_anagram_of_palindrome(s): ```","solution":"def is_anagram_of_palindrome(s): Checks if the given string is an anagram of a palindrome. A string is an anagram of a palindrome if it can be rearranged to form a palindrome. Args: s: str Returns: bool from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Check the counts of each character odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be an anagram of a palindrome: # 1. At most one character can have an odd count (for odd-length palindromes) # 2. If more than one character has an odd count, it cannot form a palindrome return odd_count <= 1"},{"question":"You need to write a function that generates all possible permutations of a given string. The function should return a list of all the permutations without duplicates. You must ensure the function is efficient and does not generate redundant permutations. Your implementation should handle strings with both unique and repeating characters. Your function should be named `generate_permutations` and must adhere to the following signature: ```python def generate_permutations(s): # Implementation details ``` Parameters: - `s`: A string for which permutations are to be generated. Return: - The function returns a list of all unique permutations of the input string. Example: ```python generate_permutations(\\"abc\\") # Output: [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] generate_permutations(\\"aab\\") # Output: [\\"aab\\", \\"aba\\", \\"baa\\"] ``` Constraints: 1. The length of string `s` will be between 1 and 9 inclusive. 2. The function should efficiently handle strings with repeated characters to avoid generating duplicate permutations.","solution":"from itertools import permutations def generate_permutations(s): Generates all unique permutations of a given string `s`. Parameters: - s: A string for which permutations are to be generated. Returns: - A list of all unique permutations of the input string. return list(set([\'\'.join(p) for p in permutations(s)]))"},{"question":"Write a function named `convert_to_morse` that translates a given string into Morse code. The function should follow the International Morse Code standards and account for both lowercase and uppercase letters, digits, and some common punctuation marks (specifically: period, comma, question mark, exclamation mark, colon, semicolon, slash, and hyphen). The function should have the following signature: - `convert_to_morse(input_str: str) -> str` The function should perform the following steps: 1. Translate each character in the input string to its corresponding Morse code. 2. Separate Morse code representations of each character by a single space. 3. Ignore any character that doesn\'t have a corresponding Morse code translation. Here is a mapping for reference: ``` A: .- B: -... C: -.-. D: -.. E: . F: ..-. G: --. H: .... I: .. J: .--- K: -.- L: .-.. M: -- N: -. O: --- P: .--. Q: --.- R: .-. S: ... T: - U: ..- V: ...- W: .-- X: -..- Y: -.-- Z: --.. 0: ----- 1: .---- 2: ..--- 3: ...-- 4: ....- 5: ..... 6: -.... 7: --... 8: ---.. 9: ----. .: .-.-.- ,: --..-- ?: ..--.. !: -.-.-- :: ---... ;: -.-.-. /: -..-. -: -....- ``` Example usage of the function: ```python def convert_to_morse(input_str: str) -> str: morse_code_dict = {} morse_translation = [] for char in input_str.upper(): if char in morse_code_dict: morse_translation.append(morse_code_dict[char]) return \' \'.join(morse_translation) # Test cases print(convert_to_morse(\'Hello World!\')) # Output: \\".... . .-.. .-.. --- / .-- --- .-. .-.. -.. -.-.--\\" print(convert_to_morse(\'Python 101\')) # Output: \\".--. -.-- - .... --- -. / .---- ----- .----\\" ``` This function converts the input string to its equivalent Morse code and returns the Morse code as a string, with each letter\'s code separated by a space.","solution":"def convert_to_morse(input_str: str) -> str: Converts a given string into its Morse code equivalent. morse_code_dict = {} morse_translation = [] for char in input_str.upper(): if char in morse_code_dict: morse_translation.append(morse_code_dict[char]) elif char == \' \': morse_translation.append(\'/\') return \' \'.join(morse_translation)"},{"question":"You are tasked with analyzing a collection of log files stored in a directory and generating a summary report. The log files are in plain text format, and each line represents a log entry. Each log entry follows the format: ``` [YYYY-MM-DD HH:MM:SS] log_level: message ``` Where `log_level` can be one of: `INFO`, `WARNING`, `ERROR`. You need to write a Python function called `generate_log_summary()` that performs the following steps: 1. Traverse through a given directory, collecting all file paths ending with `.log`. 2. Read each of these log files line by line. 3. Count the number of log entries for each `log_level` (`INFO`, `WARNING`, `ERROR`). 4. Return a summary dictionary with the count of each log level. The dictionary should have the structure: ```python { \'INFO\': int, \'WARNING\': int, \'ERROR\': int } ``` Ensure that your code can handle large log files efficiently.","solution":"import os def generate_log_summary(directory): Generates a summary of log levels from log files in a given directory. Parameters: directory (str): The directory containing log files. Returns: dict: A dictionary with counts of \'INFO\', \'WARNING\', and \'ERROR\' log levels. log_summary = {\'INFO\': 0, \'WARNING\': 0, \'ERROR\': 0} # Traverse through the given directory for root, dirs, files in os.walk(directory): for file in files: if file.endswith(\'.log\'): # Construct file path and read the file file_path = os.path.join(root, file) with open(file_path, \'r\') as f: for line in f: if \'INFO\' in line: log_summary[\'INFO\'] += 1 elif \'WARNING\' in line: log_summary[\'WARNING\'] += 1 elif \'ERROR\' in line: log_summary[\'ERROR\'] += 1 return log_summary"},{"question":"Write a function `find_all_anagrams(s: str, p: str) -> List[int]` that finds and returns the starting indices of all anagrams of the string `p` in the string `s`. An anagram is a permutation of another string, meaning it contains the same characters but in a different order. Your function should follow these steps: 1. Create a frequency dictionary for the characters in `p`. 2. Use a sliding window of size equal to the length of `p` to traverse through `s`. 3. For each window position, compare the frequency of characters in the current window with the frequency dictionary of `p`. 4. If the frequencies match, it means the current window is an anagram of `p`, so append the starting index of this window to the result list. Constraints: - The input strings will contain only lowercase letters. - The length of `p` will not be greater than the length of `s`. Requirements: - Optimize the function to minimize the time complexity. - Handle edge cases such as empty strings or no anagrams found. Here is the function signature you need to implement: ```python from typing import List def find_all_anagrams(s: str, p: str) -> List[int]: pass ``` **Example Usage:** ```python s = \\"cbaebabacd\\" p = \\"abc\\" print(find_all_anagrams(s, p)) # Output: [0, 6] ``` **Expected Output:** ```python s = \\"cbaebabacd\\" p = \\"abc\\" # Anagrams of \\"abc\\" => \\"cba\\", \\"bac\\", appears at indices 0 and 6. find_all_anagrams(s, p) # Output: [0, 6] s = \\"abab\\" p = \\"ab\\" # Anagrams of \\"ab\\" => \\"ab\\", \\"ba\\", appears at indices 0, 1, and 2. find_all_anagrams(s, p) # Output: [0, 1, 2] ```","solution":"from typing import List def find_all_anagrams(s: str, p: str) -> List[int]: # Step 1: Create a frequency dictionary for the characters in `p` from collections import Counter p_count = Counter(p) s_count = Counter() result = [] p_length = len(p) s_length = len(s) for i in range(s_length): # Add the current character to the sliding window s_count[s[i]] += 1 # Remove the character that goes out of the sliding window if i >= p_length: if s_count[s[i - p_length]] == 1: del s_count[s[i - p_length]] else: s_count[s[i - p_length]] -= 1 # Compare the window with the frequency dictionary of `p` if s_count == p_count: result.append(i - p_length + 1) return result"},{"question":"You are given data representing the scores of five students in three different subjects. Each student\'s scores are provided as a tuple containing scores for Math, Science, and English. Your task is to visualize this score data using `matplotlib` and compute basic statistics (mean, standard deviation, and variance) for each subject. The function you need to write is called `plot_student_scores`, which will take five tuples of student scores as input and perform the following tasks: 1. Plot the scores for each subject in a distinct style on a single figure, with students on the x-axis and scores on the y-axis. 2. Add a legend to differentiate between the subjects. 3. Label the y-axis as \\"Scores\\". 4. Set the title of the plot to \\"Student Scores\\". 5. Set the x-ticks to represent each student (you can use \\"Student 1\\" to \\"Student 5\\"). 6. Print the mean, standard deviation, and variance for each subject. Here is the function signature you need to implement: ```python def plot_student_scores(student_1, student_2, student_3, student_4, student_5): pass ``` Use the `matplotlib` library to plot the data and `statistics` library to compute the mean, standard deviation, and variance. **Input:** - `student_1`, `student_2`, `student_3`, `student_4`, `student_5`: Tuples containing 3 float values representing scores for Math, Science, and English. **Output:** - A plot displaying the scores data for five students. - Printed statements of mean, standard deviation, and variance for each subject. **Examples:** Given the student scores: ```python student_1 = (85.5, 90.3, 78.8) student_2 = (88.0, 75.5, 83.7) student_3 = (92.3, 88.7, 85.6) student_4 = (79.5, 80.8, 90.2) student_5 = (85.0, 95.6, 89.1) ``` The function call: ```python plot_student_scores(student_1, student_2, student_3, student_4, student_5) ``` Should plot the scores data with the appropriate styles and labels, and print the mean, standard deviation, and variance for each subject.","solution":"import matplotlib.pyplot as plt import statistics as stats def plot_student_scores(student_1, student_2, student_3, student_4, student_5): students = [\'Student 1\', \'Student 2\', \'Student 3\', \'Student 4\', \'Student 5\'] scores = [student_1, student_2, student_3, student_4, student_5] math_scores = [s[0] for s in scores] science_scores = [s[1] for s in scores] english_scores = [s[2] for s in scores] plt.plot(students, math_scores, \'ro-\', label=\'Math\') plt.plot(students, science_scores, \'bs-\', label=\'Science\') plt.plot(students, english_scores, \'g^-\', label=\'English\') plt.ylabel(\'Scores\') plt.title(\'Student Scores\') plt.legend() plt.xticks(students) plt.show() subjects = {\'Math\': math_scores, \'Science\': science_scores, \'English\': english_scores} for subject, score_list in subjects.items(): mean = stats.mean(score_list) std_dev = stats.stdev(score_list) variance = stats.variance(score_list) print(f\\"{subject} - Mean: {mean}, Standard Deviation: {std_dev}, Variance: {variance}\\")"},{"question":"**Create a function `generate_expiring_tokens` that simulates generating unique expiring tokens for IP addresses. Each token will have an expiration time after which it becomes invalid. Implement functionality to generate tokens, check validity, and prune expired tokens. **Function Signature:** ```python class TokenManager: def __init__(self): pass def generate_token(self, ip_address: str, ttl: int) -> str: pass def is_token_valid(self, token: str) -> bool: pass def cleanup_expired_tokens(self) -> None: pass ``` **Description:** Implement the following methods: - `__init__(self) -> None`: Initializes the token manager with any internal data structures you need. - `generate_token(self, ip_address: str, ttl: int) -> str`: Generates a unique token for the given `ip_address` that is valid for `ttl` seconds and returns the token. The `ttl` (time-to-live) is a duration in seconds for which the token is valid. - `is_token_valid(self, token: str) -> bool`: Checks if the given `token` is still valid by the current time and returns `True` if it is valid or `False` if it is expired or doesn\'t exist. - `cleanup_expired_tokens(self) -> None`: This method should remove all expired tokens from your internal data structures. **Example:** ```python import time # Initialization token_manager = TokenManager() # Generate tokens token1 = token_manager.generate_token(\\"192.168.1.1\\", 5) # Token for 192.168.1.1 with 5 seconds TTL print(token1) # Token (e.g. \\"token_abcd_001\\") # Immediately check the token validity print(token_manager.is_token_valid(token1)) # Output: True # Sleep for 6 seconds to simulate token expiration time.sleep(6) # Check the token validity after expiration print(token_manager.is_token_valid(token1)) # Output: False # Cleanup expired tokens token_manager.cleanup_expired_tokens() ``` **Constraints:** - IP addresses will be valid IPv4 strings. - TTL values will be positive integers representing seconds. - You may use external libraries for generating unique tokens (e.g., `uuid` module). **Notes:** - Use a suitable data structure to store tokens and their expiration times. - Ensure the token generation process guarantees uniqueness for each IP address.","solution":"import time import uuid class TokenManager: def __init__(self): self.tokens = {} def generate_token(self, ip_address: str, ttl: int) -> str: token = str(uuid.uuid4()) expiration_time = time.time() + ttl self.tokens[token] = expiration_time return token def is_token_valid(self, token: str) -> bool: current_time = time.time() if token in self.tokens and self.tokens[token] > current_time: return True return False def cleanup_expired_tokens(self) -> None: current_time = time.time() expired_tokens = [token for token, expiry in self.tokens.items() if expiry <= current_time] for token in expired_tokens: del self.tokens[token]"},{"question":"# Sorting and Filtering Student Scores You are given the task of creating a function that processes a list of student names and their corresponding scores, and then filters out the students who scored below a certain threshold. The function should return the names of the students who passed the threshold, sorted alphabetically. # Function Signature: ```python def filter_and_sort_students(students, threshold): pass ``` # Requirements: 1. **Inputs:** - `students`: A list of tuples, where each tuple contains a student\'s name (string) and their score (integer). Example: `[(\'Alice\', 85), (\'Bob\', 75), (\'Charlie\', 90)]` - `threshold`: An integer representing the score threshold. Only students with scores equal to or greater than this value should be included in the output. 2. **Outputs:** - A list of strings, containing the names of the students who scored equal to or above the threshold, sorted in alphabetical order. # Constraints: - The length of the `students` list will be between 1 and 100. - Each student\'s name will be a non-empty string with a maximum length of 100 characters. - The scores will be integers between 0 and 100. # Example: ```python # Sample input students = [(\'Alice\', 85), (\'Bob\', 75), (\'Charlie\', 90), (\'David\', 60)] threshold = 80 # Expected output # [\'Alice\', \'Charlie\'] # Explanation: # \'Alice\' and \'Charlie\' both have scores equal to or greater than 80. # Their names are returned in alphabetical order. ``` # Notes: - You may assume that all names are unique. - Make sure to handle edge cases such as no students meeting the threshold or all students meeting the threshold.","solution":"def filter_and_sort_students(students, threshold): Filters students based on the provided threshold and returns the list of names of the students who scored equal to or above the threshold, sorted alphabetically. Parameters: students (list of tuples): List of students with their scores. threshold (int): The minimum score to pass the threshold. Returns: list of str: Sorted list of names of students who scored equal to or above the threshold. # Filter students who scored equal to or above the threshold passing_students = [name for name, score in students if score >= threshold] # Sort the names alphabetically passing_students.sort() return passing_students"},{"question":"You are required to create a function named `sum_of_largest_odd_numbers` that takes one parameter: `numbers`. - `numbers`: A list of integers. The goal of this function is to: 1. Identify all the odd numbers in the provided list. 2. If there are no odd numbers, return 0. 3. Otherwise, find the three largest odd numbers in the list. 4. Return the sum of these three largest odd numbers. If the list contains fewer than three odd numbers, sum all the odd numbers present. Here are the specific steps your function should follow: 1. Extract all odd numbers from the `numbers` list. 2. Sort these odd numbers in descending order. 3. Sum the three largest odd numbers (or less if fewer than three are present). 4. Return this sum as the final result. Your function signature should look like this: ```python def sum_of_largest_odd_numbers(numbers): pass ``` Ensure to handle cases where there are no odd numbers efficiently.","solution":"def sum_of_largest_odd_numbers(numbers): Returns the sum of the three largest odd numbers in the list. If there are fewer than three odd numbers, sums all the odd numbers available. If there are no odd numbers, returns 0. # Extract odd numbers from the list odd_numbers = [num for num in numbers if num % 2 != 0] # If there are no odd numbers, return 0 if not odd_numbers: return 0 # Sort odd numbers in descending order odd_numbers.sort(reverse=True) # Sum up the three largest odd numbers, or all present if fewer than three return sum(odd_numbers[:3])"},{"question":"You are asked to implement a function in Python to determine if it is possible to reach the last cell of a given integer array by starting at the first cell and moving according to the values contained in each index. The function should be named `can_reach_end`. # Function Signature: ```python def can_reach_end(arr: List[int]) -> bool: ``` # Parameters: - `arr`: A list of non-negative integers where each integer represents the maximum jump length from that position. # Returns: - A boolean value: - `True`: if it is possible to reach the last cell of the array starting from the first cell. - `False`: if it is not possible. # Constraints: 1. The length of the array `1 <= len(arr) <= 10^4` 2. Each element in the array `0 <= arr[i] <= 10^5` # Examples: 1. Example 1: ```python arr = [2, 3, 1, 1, 4] can_reach_end(arr) # Should return True, we can jump from index 0 to index 1 or 2, and eventually reach the last index. ``` 2. Example 2: ```python arr = [3, 2, 1, 0, 4] can_reach_end(arr) # Should return False, we are stuck at index 3 and cannot proceed to the end. ``` 3. Example 3: ```python arr = [0] can_reach_end(arr) # Should return True, we are already at the last index. ``` # Notes: - Consider using a greedy approach where you track the farthest index that can be reached at any point. - The method should be efficient in terms of time complexity to handle large inputs within the constraints.","solution":"from typing import List def can_reach_end(arr: List[int]) -> bool: max_reachable = 0 for i in range(len(arr)): if i > max_reachable: return False max_reachable = max(max_reachable, i + arr[i]) return True"},{"question":"You are tasked with writing a function, `filterStudentsByGrade(data, passingGrade)`, that filters a list of student records based on their grades. Each student record is represented as a dictionary with the following keys: \'name\', \'id\', and \'grade\'. The function should return a list of names of students whose grades are equal to or higher than the provided passing grade. The function `filterStudentsByGrade(data, passingGrade)` should: 1. Take a list of student records (`data`) and a threshold grade (`passingGrade`) as input. 2. Filter out the students whose grade is less than the `passingGrade`. 3. Return a list of names of students who passed. For example, given the input: ```python data = [ {\'name\': \'Alice\', \'id\': 1, \'grade\': 85}, {\'name\': \'Bob\', \'id\': 2, \'grade\': 78}, {\'name\': \'Charlie\', \'id\': 3, \'grade\': 90}, {\'name\': \'David\', \'id\': 4, \'grade\': 60} ] passingGrade = 80 ``` The function should return: ```python [\'Alice\', \'Charlie\'] ``` Here is the signature for the function you need to implement: ```python def filterStudentsByGrade(data, passingGrade): # Your implementation here ```","solution":"def filterStudentsByGrade(data, passingGrade): Filters a list of student records based on their grades and returns a list of names of students whose grades are equal to or higher than the provided passing grade. Parameters: data (list): A list of student records, where each record is a dictionary with \'name\', \'id\', and \'grade\'. passingGrade (int): The threshold grade to determine if a student passes. Returns: list: A list of names of students who passed (grades equal to or higher than passingGrade). return [student[\'name\'] for student in data if student[\'grade\'] >= passingGrade]"},{"question":"Implement a function that takes a string input representing a mathematical expression consisting of integers and the operators `+`, `-`, `*`, and `/`. The function should parse the string and evaluate the expression, following the order of operations (PEMDAS/BODMAS rules). Return the evaluated result as a float. Note that: The function should handle basic validation to check for invalid characters and improperly placed operators. If the input string contains invalid characters or syntax, raise a ValueError stating \\"Invalid input expression.\\" Assume that the input expression is well-formed, with integers separated by operators, and there are no spaces in the string. The division operator should result in floating-point division. The function should be implemented as: ``` def evaluate_expression(expression: str) -> float: ``` You may use Python\'s `eval` function if properly secured, or you can implement your own shunting-yard algorithm or similar method to parse and compute the expression.","solution":"import re def evaluate_expression(expression: str) -> float: Evaluates a mathematical expression consisting of integers and the operators +, -, *, and /. The function uses the eval function to evaluate the expression, after ensuring the expression is valid. # Check for invalid characters if not re.match(r\'^[d+-*/()]+\', expression): raise ValueError(\\"Invalid input expression\\") # Check for consecutive operators if re.search(r\'[+-*/]{2,}\', expression): raise ValueError(\\"Invalid input expression\\") try: # Evaluate the expression result = eval(expression) except SyntaxError: raise ValueError(\\"Invalid input expression\\") return float(result)"},{"question":"In this problem, you will implement a function `word_break` that determines if a given string can be segmented into a sequence of one or more dictionary words. The function should utilize dynamic programming to break the problem into smaller subproblems. Each subproblem will check if a substring can be segmented into valid dictionary words. Function Specification: - **Function Name:** `word_break` - **Input:** - `s`: A string representing the string to be segmented. - `wordDict`: A list of strings representing the dictionary of words. - **Output:** A boolean value indicating whether the string can be segmented into the dictionary words. # Requirements: 1. Use dynamic programming to efficiently determine if the string can be segmented. 2. Implement a bottom-up approach to fill a DP table. # Details: - `s` is a non-empty string of length ( n ). - `wordDict` is a non-empty list of strings representing the dictionary. # Example: ```python def word_break(s, wordDict): # Your implementation here # Define s and wordDict s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] # Your function call can_segment = word_break(s, wordDict) print(can_segment) ``` Based on the example inputs, the output should be `True` because \\"leetcode\\" can be segmented into \\"leet\\" and \\"code\\". # Development Environment: You can define the function and test it within any Python development environment. No additional libraries are required. # Explanation: Your function should: 1. Initialize a DP table `dp` of size ( n+1 ) with `False`. 2. Set `dp[0]` to `True` because an empty string can be segmented trivially. 3. Iterate over the string and for each position, check all possible segments. If a valid segment is found, update the DP table accordingly. 4. Return `dp[n]`, which indicates whether the entire string can be segmented into dictionary words. ```python def word_break(s, wordDict): # Create a set of words for faster lookup word_set = set(wordDict) # Create a DP table initialized to False dp = [False] * (len(s) + 1) # Base case: an empty string can always be segmented dp[0] = True # Build the DP table for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] # Example usage s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] print(word_break(s, wordDict)) # Output: True ```","solution":"def word_break(s, wordDict): Determines if the string s can be segmented into a sequence of one or more dictionary words. :param s: The string to be segmented. :param wordDict: List of valid words (dictionary). :return: True if the string can be segmented, False otherwise. # Create a set of words for faster lookup word_set = set(wordDict) # Create a DP table initialized to False dp = [False] * (len(s) + 1) # Base case: an empty string can always be segmented dp[0] = True # Build the DP table for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"You are building a text processing system and need to implement a function that generates a word frequency dictionary from a given text. The text may contain punctuation and mixed-case words which should not affect the word frequency count. **Function Name**: `word_frequency` **Parameters**: 1. `text`: A string containing the text to be processed. **Returns**: A dictionary where the keys are words and values are their frequencies. **Requirements**: 1. Normalize the text to lowercase. 2. Remove all punctuation marks. (You may consider punctuation marks as any character that is not a letter or a digit). 3. Split the text into words based on whitespace. 4. Count the frequency of each word and store it in a dictionary. **Task**: Implement the function `word_frequency` following the constraints provided above. **Example**: ```python def word_frequency(text): # Your implementation here # Example usage: text = \\"Hello, world! Programming in Python is fun. Fun, fun, and more fun: Hello, World!\\" freq_dict = word_frequency(text) print(freq_dict) # Expected Output: # {\'hello\': 2, \'world\': 2, \'programming\': 1, \'in\': 1, \'python\': 1, \'is\': 1, \'fun\': 4, \'and\': 1, \'more\': 1} ```","solution":"import re from collections import defaultdict def word_frequency(text): Generates a word frequency dictionary from the given text. :param text: A string containing the text to be processed. :return: A dictionary where the keys are words and values are their frequencies. # Normalize text to lowercase text = text.lower() # Remove punctuation using regular expression text = re.sub(r\'[^a-z0-9s]\', \'\', text) # Split text into words words = text.split() # Count the frequency of each word freq_dict = defaultdict(int) for word in words: freq_dict[word] += 1 return dict(freq_dict)"},{"question":"Create a function to generate a series of random integers, calculate their cumulative sum and plot the resulting cumulative sum using matplotlib. The function should output: matplotlib.axes.Axes: The Axes object of the cumulative sum plot. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt def task_func(size): ```","solution":"import numpy as np import matplotlib.pyplot as plt def task_func(size): Generates a series of random integers, calculates their cumulative sum, and plots the resulting cumulative sum. Parameters: size (int): The number of random integers to generate. Returns: matplotlib.axes.Axes: The Axes object of the cumulative sum plot. # Generate random integers random_integers = np.random.randint(0, 100, size=size) # Calculate cumulative sum cumulative_sum = np.cumsum(random_integers) # Create plot fig, ax = plt.subplots() ax.plot(cumulative_sum) ax.set_title(\'Cumulative Sum of Random Integers\') ax.set_xlabel(\'Index\') ax.set_ylabel(\'Cumulative Sum\') # Show the plot plt.show() return ax"},{"question":"You are required to write a Python generator function that generates Fibonacci numbers up to a specified maximum value. This generator, `fibonacci_generator`, must yield values in the Fibonacci sequence starting from 0, and continue until the next value in the sequence would exceed the maximum specified value. Here are the requirements for the generator: - The generator should be named `fibonacci_generator`. - It should take a single parameter, `max_value`, which specifies the maximum value for the generated Fibonacci numbers. - It should yield Fibonacci numbers starting from 0, and stop when the next number in the sequence is greater than `max_value`. **Function Signature**: ```python def fibonacci_generator(max_value): # Your code here ``` **Example Usage**: ```python for number in fibonacci_generator(100): print(number) ``` **Example Output**: ``` 0 1 1 2 3 5 8 13 21 34 55 89 ```","solution":"def fibonacci_generator(max_value): Yield Fibonacci numbers up to a specified maximum value. Parameters: max_value (int): The maximum value for the generated Fibonacci numbers. Yields: int: The next Fibonacci number in the sequence less than or equal to max_value. a, b = 0, 1 while a <= max_value: yield a a, b = b, a + b"},{"question":"Your task is to create a function named `compress_string` that compresses a given string using a simple run-length encoding (RLE) algorithm. This algorithm replaces consecutive repeated characters with the character followed by the count of repetitions. # Requirements: 1. The function `compress_string` should accept a single parameter `data` which is a string. 2. Create an empty list to accumulate the compressed parts. 3. Iterate through the string to identify consecutive repeated characters. 4. For each group of repeated characters, append the character followed by the count of repetitions to the list. 5. Convert the list back to a string and return it. # Function Signature: ```python def compress_string(data): Compress a string using run-length encoding. pass ``` # Examples: 1. For input without compression needed: ```python input_data = \\"abc\\" output = compress_string(input_data) print(output) # Output should be: \'a1b1c1\' ``` 2. For input with repetitive characters: ```python input_data = \\"aaabbbcccaaa\\" output = compress_string(input_data) print(output) # Output should be: \'a3b3c3a3\' ``` Implement this function by iterating through the given string and compressing consecutive characters using the run-length encoding technique.","solution":"def compress_string(data): Compress a string using run-length encoding. if not data: return \\"\\" compressed = [] count = 1 previous_char = data[0] for i in range(1, len(data)): if data[i] == previous_char: count += 1 else: compressed.append(f\\"{previous_char}{count}\\") previous_char = data[i] count = 1 # Append the last accumulated character and its count compressed.append(f\\"{previous_char}{count}\\") return \'\'.join(compressed)"},{"question":"You are required to write a function named `remove_vowels()` that takes a list of strings as input and outputs a new list where all vowels (case-insensitive) have been removed from each string. **Function Signature:** ```python def remove_vowels(words: list) -> list: pass ``` **Requirements:** 1. The function should iterate over each string in the input list. 2. For each string, remove all occurrences of vowels (\'a\', \'e\', \'i\', \'o\', \'u\') regardless of their case. 3. Return a new list containing the modified strings. **Example Usage:** ```python words = [\\"hello\\", \\"world\\", \\"Python\\", \\"Programming\\"] result = remove_vowels(words) print(result) # Output: [\'hll\', \'wrld\', \'Pythn\', \'Prgrmmng\'] ``` In this example: - \\"hello\\" becomes \\"hll\\" - \\"world\\" becomes \\"wrld\\" - \\"Python\\" becomes \\"Pythn\\" - \\"Programming\\" becomes \\"Prgrmmng\\" **Note:** - Your solution should not use any external libraries. - Consider both upper and lower case vowels. - Ensure your function handles an empty list as input by returning an empty list.","solution":"def remove_vowels(words: list) -> list: Removes all vowels from each string in the input list. Args: words (list): The list of strings from which to remove vowels. Returns: list: A list of strings with vowels removed. vowels = \\"aeiouAEIOU\\" result = [] for word in words: no_vowels = \'\'.join([char for char in word if char not in vowels]) result.append(no_vowels) return result"},{"question":"In a multiplayer game, players earn points based on different activities they perform. Given the game activity data for several players, you are tasked with calculating and visualizing the total points earned by each player and the distribution of points across different activities. The function will be defined as `plot_player_points(activity_data, players, activities)`. Your tasks are: 1. To create a function called `plot_player_points` which accepts the following parameters: - `activity_data`: A dictionary where keys are player names and values are dictionaries themselves. The nested dictionaries have activity names as keys and points as values. For example, `{\'Alice\': {\'running\': 10, \'jumping\': 5}, \'Bob\': {\'running\': 8, \'swimming\': 12}}`. - `players`: A list of strings representing the names of the players to be considered for the plot. - `activities`: A list of strings representing the types of activities for which points have been recorded. 2. The function should create two subplots: - The first subplot should be a bar plot indicating the total points earned by each player. Players will be on the x-axis, and the total points on the y-axis. Include appropriate titles and labels. - The second subplot should be a stacked bar plot showing the distribution of points across the different activities for each player. Each player\'s total points will be broken down by activity. Again, include suitable titles and labels. 3. Use the `matplotlib` library for generating these plots. Ensure the accurate use of functions such as `matplotlib.pyplot.bar`, `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, and `matplotlib.pyplot.show` as part of your solution.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_player_points(activity_data, players, activities): This function accepts activity data, players list, and activities list. It generates two plots: 1. A bar plot of total points earned by each player. 2. A stacked bar plot showing the distribution of points across different activities. # Calculate total points for each player total_points = {player: sum(activity_data.get(player, {}).values()) for player in players} # Prepare for the stacked bar plot activity_points = {activity: [] for activity in activities} for player in players: for activity in activities: points = activity_data.get(player, {}).get(activity, 0) activity_points[activity].append(points) # Create subplots fig, axs = plt.subplots(2, 1, figsize=(10, 12)) # Bar plot for total points axs[0].bar(total_points.keys(), total_points.values(), color=\'skyblue\') axs[0].set_title(\'Total Points Earned by Players\') axs[0].set_xlabel(\'Players\') axs[0].set_ylabel(\'Total Points\') # Stacked bar plot for activity points bottom = np.zeros(len(players)) for activity in activities: axs[1].bar(players, activity_points[activity], bottom=bottom, label=activity) bottom += np.array(activity_points[activity]) axs[1].set_title(\'Distribution of Points Across Activities\') axs[1].set_xlabel(\'Players\') axs[1].set_ylabel(\'Points\') axs[1].legend(title=\'Activities\') # Show plots plt.tight_layout() plt.savefig(\'player_points.png\') plt.show()"},{"question":"You are tasked with developing a function called `find_and_replace_in_csv` that reads a CSV file, replaces occurrences of a specified string in a specified column, and saves the modified content into a new CSV file. This task tests your ability to handle file operations, string manipulation, and CSV processing in Python. Here’s a detailed step-by-step process that your function should follow: 1. Open the input CSV file and read its content using the `csv` module. 2. Create a new CSV file where the modified content will be saved. 3. Iterate over each row in the input CSV file: - Identify entries in the specified column. - Replace all occurrences of the specified string within these entries with a new string. 4. Write the modified rows to the new CSV file. 5. Ensure the new CSV file maintains the same structure (i.e., headers and format) as the original CSV file. The function should have the following signature: ```python def find_and_replace_in_csv(input_file: str, output_file: str, column_name: str, search_string: str, replace_string: str) -> None: ``` **Inputs:** - `input_file`: A string representing the path to the input CSV file. - `output_file`: A string representing the path where the modified CSV file should be saved. - `column_name`: A string representing the name of the column where the search and replacement should be performed. - `search_string`: A string representing the substring to search for and replace. - `replace_string`: A string representing the substring to replace the `search_string` with. **Output:** - The function does not return any value. Instead, it creates a new CSV file with the specified modifications. Example usage: ```python input_file = \\"data.csv\\" output_file = \\"data_modified.csv\\" column_name = \\"name\\" search_string = \\"John\\" replace_string = \\"Jonathan\\" find_and_replace_in_csv(input_file, output_file, column_name, search_string, replace_string) # This will read \'data.csv\', replace all occurrences of \\"John\\" with \\"Jonathan\\" in the \\"name\\" column, and write the results to \'data_modified.csv\'. ```","solution":"import csv def find_and_replace_in_csv(input_file: str, output_file: str, column_name: str, search_string: str, replace_string: str) -> None: Reads a CSV file, replaces occurrences of a specified string in a specified column, and saves the modified content into a new CSV file. Args: input_file: str - path to the input CSV file. output_file: str - path where the modified CSV file should be saved. column_name: str - name of the column where the search and replacement should be performed. search_string: str - the substring to search for and replace. replace_string: str - the substring to replace the search_string with. with open(input_file, mode=\'r\', newline=\'\', encoding=\'utf-8\') as infile: reader = csv.DictReader(infile) fieldnames = reader.fieldnames with open(output_file, mode=\'w\', newline=\'\', encoding=\'utf-8\') as outfile: writer = csv.DictWriter(outfile, fieldnames=fieldnames) writer.writeheader() for row in reader: if column_name in row: row[column_name] = row[column_name].replace(search_string, replace_string) writer.writerow(row)"},{"question":"In many software applications, efficiently managing files and directories is an important task. This problem will help you practice file traversal and manipulation using Python\'s `os` and `shutil` libraries. Specifically, you will be creating a function that searches for a specified file type within a given directory (and its subdirectories) and moves all found files to a designated target directory. Write a function named `move_files_by_type` which takes the following arguments: - `source_dir` (str): The path to the source directory where the search begins. - `file_type` (str): The file extension (e.g., \'.txt\', \'.jpg\') to search for. - `target_dir` (str): The path to the target directory where the found files will be moved. The function should: 1. Search the `source_dir` and all its subdirectories for files with the specified `file_type`. 2. Move all found files to the `target_dir`. # Requirements: - Use `os.walk` to traverse directories. - Use `shutil.move` to move files. # Example: ```python move_files_by_type(source_dir=\'/path/to/source\', file_type=\'.txt\', target_dir=\'/path/to/target\') ``` This should search for all files with the `.txt` extension in the source directory and its subdirectories, and move them to the target directory. # Constraints: - `source_dir` and `target_dir` are valid directory paths. - `file_type` is a valid file extension starting with a dot (e.g., \'.txt\'). # Libraries: You must use: - `os` - `shutil`","solution":"import os import shutil def move_files_by_type(source_dir, file_type, target_dir): Searches for files with the specified file_type within the given source_dir and moves them to the target_dir. Args: source_dir (str): The path to the source directory. file_type (str): The file extension to search for. target_dir (str): The path to the target directory. if not os.path.exists(target_dir): os.makedirs(target_dir) for root, _, files in os.walk(source_dir): for file in files: if file.endswith(file_type): source_path = os.path.join(root, file) target_path = os.path.join(target_dir, file) shutil.move(source_path, target_path)"},{"question":"You are asked to implement a function `most_common_word(text: str) -> str` that takes a string `text` as input and returns the most frequently occurring word in the text. - A word is defined as a contiguous sequence of alphanumeric characters (i.e., it can contain letters and numbers but no punctuation). - The function should be case-insensitive, meaning that \\"Word\\" and \\"word\\" should be considered the same word. - If there is a tie (i.e., multiple words have the same highest frequency), return the word that appears first in the text. To achieve this, you need to: 1. Process the input string to separate it into words and normalize the case. 2. Use a dictionary to count the occurrences of each word. 3. Identify and return the word with the highest count, resolving ties based on the order of first appearance in the text. # Library Requirements: - `re.findall` from the `re` module (optional, for word extraction). # Assumptions: - The input `text` is a non-empty string and contains at least one alphanumeric character. Make sure to name your function `most_common_word`. Here\'s the signature of the function for reference: ```python def most_common_word(text: str) -> str: pass ``` # Example Usage: ```python most_common_word(\\"The quick brown fox jumps over the lazy dog. The quick brown fox.\\") ``` This should return: `\'the\'`","solution":"import re from collections import defaultdict def most_common_word(text: str) -> str: Returns the most frequently occurring word in the given text. :param text: A string containing the text to be processed. :return: The most frequently occurring word in the text. words = re.findall(r\'bw+b\', text.lower()) word_counts = defaultdict(int) first_occurrence = {} for index, word in enumerate(words): word_counts[word] += 1 if word not in first_occurrence: first_occurrence[word] = index most_common, highest_count = None, 0 for word, count in word_counts.items(): if count > highest_count or (count == highest_count and first_occurrence[word] < first_occurrence[most_common]): most_common, highest_count = word, count return most_common"},{"question":"Develop a function named `calculate_team_score` that computes the total score of a team based on individual player scores. The function should accept a list of dictionaries, each representing a player with their respective score, and return the sum of these scores. **Function Signature:** ```python def calculate_team_score(players): Calculate the total score of a team based on individual player scores. Parameters: players (list): List of dictionaries, each containing the player name and their score. Example: [{\'name\': \'Alice\', \'score\': 10}, {\'name\': \'Bob\', \'score\': 20}] Returns: int: The total score of the team. ``` **Instructions:** 1. Ensure the function processes the list and extracts player scores accurately. 2. The function should handle an empty list by returning a score of 0. 3. Ensure that the code follows the provided function signature. 4. Optionally, create a few test cases to verify the correctness of your function. **Example Usage:** ```python players = [{\'name\': \'Alice\', \'score\': 10}, {\'name\': \'Bob\', \'score\': 20}, {\'name\': \'Charlie\', \'score\': 15}] result = calculate_team_score(players) print(result) # Output: 45 empty_players = [] result = calculate_team_score(empty_players) print(result) # Output: 0 ```","solution":"def calculate_team_score(players): Calculate the total score of a team based on individual player scores. Parameters: players (list): List of dictionaries, each containing the player name and their score. Example: [{\'name\': \'Alice\', \'score\': 10}, {\'name\': \'Bob\', \'score\': 20}] Returns: int: The total score of the team. return sum(player[\'score\'] for player in players)"},{"question":"Analyze a series of temperature readings from different cities and determine the city with the highest average temperature over a specified period. This task is designed to test the user\'s ability to handle data structures, perform calculations, and manipulate date and time in Python. The function should raise exceptions for: - ValueError if the `readings` list is empty. - KeyError if any reading dictionary is missing the required keys `city`, `date`, or `temperature`. The function should output: (city, avg_temperature): a tuple containing the city with the highest average temperature and the calculated average temperature. You should write self-contained code starting with: ``` from datetime import datetime def analyze_temperatures(readings): ```","solution":"from datetime import datetime from collections import defaultdict def analyze_temperatures(readings): if not readings: raise ValueError(\\"The readings list is empty\\") city_temperatures = defaultdict(list) for reading in readings: if \'city\' not in reading or \'date\' not in reading or \'temperature\' not in reading: raise KeyError(\\"Reading is missing required keys\\") city_temperatures[reading[\'city\']].append(reading[\'temperature\']) highest_avg_temp = None hottest_city = None for city, temps in city_temperatures.items(): avg_temp = sum(temps) / len(temps) if highest_avg_temp is None or avg_temp > highest_avg_temp: highest_avg_temp = avg_temp hottest_city = city return hottest_city, highest_avg_temp"},{"question":"You are tasked with creating a function named `duplicate_counter` that reads a text file (`data/input.txt`) and counts the occurrences of each word in the file. The function should ignore case, punctuation, and return the words along with their count sorted by the count in descending order. Words with the same count should be sorted alphabetically. Here are the steps the function should follow: 1. Load the text data from the file `data/input.txt`. 2. Convert all characters to lowercase to ensure the count is case-insensitive. 3. Remove any punctuation from the text. 4. Split the text into individual words. 5. Count the occurrences of each word. 6. Sort the words first by their count in descending order, and then alphabetically for words with the same count. 7. Return the sorted list of tuples where each tuple contains a word and its count. You are required to use the `str.lower`, `str.translate`, and `collections.Counter` methods to achieve the functionality. Below is the information on the function signature and the expected input-output format: ```python def duplicate_counter(): Function to count the occurrences of each word in a text file, ignoring case and punctuation. Returns: list of tuples: A sorted list of tuples where each tuple contains a word and its count. pass ``` **Example:** Suppose the `data/input.txt` file contains the following text: ``` Hello, hello! How are you? You look well. Well, well, well... ``` The function should return the following list: ```python [ (\'well\', 4), (\'hello\', 2), (\'you\', 2), (\'are\', 1), (\'how\', 1), (\'look\', 1) ] ```","solution":"import string from collections import Counter def duplicate_counter(): Function to count the occurrences of each word in a text file, ignoring case and punctuation. Returns: list of tuples: A sorted list of tuples where each tuple contains a word and its count. # Load the text data from the file with open(\\"data/input.txt\\", \\"r\\") as file: text = file.read() # Convert all characters to lowercase text = text.lower() # Remove any punctuation from the text text = text.translate(str.maketrans(\\"\\", \\"\\", string.punctuation)) # Split the text into individual words words = text.split() # Count the occurrences of each word word_counts = Counter(words) # Sort the words first by their count in descending order and then alphabetically for words with the same count sorted_word_counts = sorted(word_counts.items(), key=lambda x: (-x[1], x[0])) return sorted_word_counts"},{"question":"You are required to write a function named `process_student_scores` that takes a list of student score dictionaries and returns a dictionary summarizing the performance of the students. Each student score dictionary contains the fields `name`, `score`, and `grade`. The summary should include the highest score, lowest score, average score, and a dictionary of grades and their frequencies. The function signature is as follows: ```python def process_student_scores(scores: list) -> dict: ``` - `scores`: A list of dictionaries, each containing: - `name` (str): The name of the student. - `score` (int): The score of the student out of 100. - `grade` (str): The letter grade of the student (\'A\', \'B\', \'C\', \'D\', or \'F\'). **Function Requirements**: - Calculate the highest score among all students. - Calculate the lowest score among all students. - Calculate the average score of all students. - Count the frequency of each letter grade and store it in a dictionary. **Example**: ```python students = [ {\\"name\\": \\"Alice\\", \\"score\\": 85, \\"grade\\": \\"B\\"}, {\\"name\\": \\"Bob\\", \\"score\\": 95, \\"grade\\": \\"A\\"}, {\\"name\\": \\"Charlie\\", \\"score\\": 78, \\"grade\\": \\"C\\"}, {\\"name\\": \\"David\\", \\"score\\": 88, \\"grade\\": \\"B\\"}, {\\"name\\": \\"Eva\\", \\"score\\": 92, \\"grade\\": \\"A\\"} ] result = process_student_scores(students) # Output: { # \\"highest_score\\": 95, # \\"lowest_score\\": 78, # \\"average_score\\": 87.6, # \\"grade_distribution\\": { # \\"A\\": 2, # \\"B\\": 2, # \\"C\\": 1, # \\"D\\": 0, # \\"F\\": 0 # } # } ```","solution":"def process_student_scores(scores: list) -> dict: Processes a list of student scores and returns a summary of performances. Parameters: - scores (list): A list of dictionaries, each containing: - name (str): The name of the student. - score (int): The score of the student out of 100. - grade (str): The letter grade of the student (\'A\', \'B\', \'C\', \'D\', or \'F\'). Returns: dict: A dictionary summarizing the highest score, lowest score, average score, and grade distribution. if not scores: return { \\"highest_score\\": None, \\"lowest_score\\": None, \\"average_score\\": None, \\"grade_distribution\\": {\\"A\\": 0, \\"B\\": 0, \\"C\\": 0, \\"D\\": 0, \\"F\\": 0} } highest_score = max(student[\'score\'] for student in scores) lowest_score = min(student[\'score\'] for student in scores) average_score = sum(student[\'score\'] for student in scores) / len(scores) grade_distribution = {\\"A\\": 0, \\"B\\": 0, \\"C\\": 0, \\"D\\": 0, \\"F\\": 0} for student in scores: grade_distribution[student[\'grade\']] += 1 return { \\"highest_score\\": highest_score, \\"lowest_score\\": lowest_score, \\"average_score\\": average_score, \\"grade_distribution\\": grade_distribution }"},{"question":"Implement the function `min_operations_to_anagram(s1: str, s2: str)` that takes two strings `s1` and `s2` as arguments. The goal is to determine the minimum number of character deletions needed to make the two strings anagrams of each other. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. Function Signature: ```python def min_operations_to_anagram(s1: str, s2: str) -> int: pass ``` **Input:** - `s1`: A string consisting of lowercase alphabetical characters. - `s2`: A string consisting of lowercase alphabetical characters. **Output:** - An integer representing the minimum number of deletions needed. **Examples:** ```python # Example 1: >>> min_operations_to_anagram(\\"abc\\", \\"cde\\") 4 # Example 2: >>> min_operations_to_anagram(\\"hello\\", \\"billion\\") 6 ``` **Constraints:** - The length of each string `s1` and `s2` will be at most 1000. **Note:** 1. Use the `collections.Counter` class to count character frequencies efficiently. 2. The function should find the difference in counts for each unique character in both strings and sum the absolute differences to get the minimum number of deletions.","solution":"from collections import Counter def min_operations_to_anagram(s1: str, s2: str) -> int: Determines the minimum number of character deletions needed to make the two strings anagrams of each other. count1 = Counter(s1) count2 = Counter(s2) # Get all unique characters from both strings all_chars = set(count1.keys()).union(set(count2.keys())) deletions = 0 for char in all_chars: deletions += abs(count1.get(char, 0) - count2.get(char, 0)) return deletions"},{"question":"In this problem, you will implement a basic producer-consumer scenario using Python\'s queue and threading libraries. Your task is to write a function called `producer_consumer_demo` which demonstrates how to create and manage communication between producer and consumer threads using a thread-safe queue. # Function Signature ```python def producer_consumer_demo() -> None: pass ``` # Requirements 1. Your function should instantiate and start both producer and consumer threads. 2. Use a `queue.Queue` to handle the communication between producer and consumer threads. 3. The producer should add elements to the queue, and the consumer should remove and process them. 4. Both producer and consumer should print messages showing their actions, facilitating the visualization of the interaction. # Detailed Steps 1. **Define the producer function**: Create a function `producer` that adds items to the queue. 2. **Define the consumer function**: Create a function `consumer` that removes items from the queue and processes them. 3. **Create a queue**: Initialize a `queue.Queue` instance to be shared between the producer and consumer. 4. **Create threads**: Instantiate and start one producer thread and one consumer thread. 5. **Join threads**: Ensure the main thread waits for the producer and consumer threads to complete their tasks by joining them. # Example Output When running your function, the output should look something like this: ``` Producer put item 0 in the queue Consumer got item 0 from the queue Producer put item 1 in the queue Consumer got item 1 from the queue Producer put item 2 in the queue Consumer got item 2 from the queue ``` In the output, you should see alternating messages from the producer and consumer, showing their interaction via the queue.","solution":"import threading import queue import time def producer(queue, items_to_produce): for item in range(items_to_produce): time.sleep(1) # simulate production time queue.put(item) print(f\'Producer put item {item} in the queue\') def consumer(queue, items_to_produce): for _ in range(items_to_produce): item = queue.get() print(f\'Consumer got item {item} from the queue\') time.sleep(1) # simulate processing time def producer_consumer_demo(): q = queue.Queue() items_to_produce_consume = 5 # let\'s produce and consume 5 items for demonstration producer_thread = threading.Thread(target=producer, args=(q, items_to_produce_consume)) consumer_thread = threading.Thread(target=consumer, args=(q, items_to_produce_consume)) producer_thread.start() consumer_thread.start() producer_thread.join() consumer_thread.join()"},{"question":"You are tasked with creating a function named `calculate_profit` that computes the profit of different products over a given time period using the pandas library. Your goal is to calculate the total profit for each product category by summing up the daily profits. **Context:** You are provided with a DataFrame `sales_data` which includes columns `\'Date\'`, `\'Product\'`, and `\'Profit\'`. The `\'Date\'` column contains date values, the `\'Product\'` column contains product categories, and the `\'Profit\'` column contains the profit made on each day for each product category. **Function Signature:** ```python def calculate_profit(sales_data: pd.DataFrame, start_date: str, end_date: str) -> pd.Series: ``` **Parameters:** - `sales_data`: A pandas DataFrame containing columns `\'Date\'`, `\'Product\'`, and `\'Profit\'`. - `start_date`: A string representing the start date in the format `\'YYYY-MM-DD\'`. - `end_date`: A string representing the end date in the format `\'YYYY-MM-DD\'`. **Return:** - The function returns a pandas Series with product categories as the index and the total profit for each product category over the specified date range as the values. **Requirements:** 1. Convert the `\'Date\'` column to datetime objects using `pandas.to_datetime()`. 2. Filter the DataFrame to include only the rows where the `\'Date\'` falls within the specified date range. 3. Group the filtered data by `\'Product\'` and sum up the `\'Profit\'` per product category. 4. Return the resulting Series. **Example:** ```python import pandas as pd # Sample data sales_data = pd.DataFrame({ \'Date\': [\'2023-01-01\', \'2023-01-02\', \'2023-01-03\', \'2023-01-01\', \'2023-01-02\', \'2023-01-03\'], \'Product\': [\'A\', \'A\', \'A\', \'B\', \'B\', \'B\'], \'Profit\': [100, 150, 200, 300, 350, 400] }) # Calling the function profit_series = calculate_profit(sales_data, \'2023-01-01\', \'2023-01-02\') print(profit_series) ``` **Expected Output:** ``` Product A 250 B 650 dtype: int64 ```","solution":"import pandas as pd def calculate_profit(sales_data: pd.DataFrame, start_date: str, end_date: str) -> pd.Series: Calculates the total profit for each product category within a given date range. Parameters: sales_data (pd.DataFrame): DataFrame containing \'Date\', \'Product\', and \'Profit\' columns. start_date (str): Start date in format \'YYYY-MM-DD\'. end_date (str): End date in format \'YYYY-MM-DD\'. Returns: pd.Series: A series indexed by product category with total profit as values. # Convert the \'Date\' column to datetime objects sales_data[\'Date\'] = pd.to_datetime(sales_data[\'Date\']) # Filter the DataFrame to include rows within the date range mask = (sales_data[\'Date\'] >= start_date) & (sales_data[\'Date\'] <= end_date) filtered_data = sales_data[mask] # Group by \'Product\' and sum the \'Profit\' per product category profit_per_product = filtered_data.groupby(\'Product\')[\'Profit\'].sum() return profit_per_product"},{"question":"Your task is to write a function `find_top_k_frequent(nums, k)` that finds the `k` most frequent elements in an array of integers `nums`. The function should return these elements in decreasing order of their frequencies. If two elements have the same frequency, they can be returned in any order. Requirements: 1. The function should handle cases where multiple elements have the same frequency. 2. You may assume that `k` is always valid, i.e., `1 ≤ k ≤ number of unique elements in the array`. 3. Try to make your solution as efficient as possible, keeping in mind both time and space complexity. Here is the function signature: ```python def find_top_k_frequent(nums: List[int], k: int) -> List[int]: ``` # Examples ```python # Example 1: find_top_k_frequent([1,1,1,2,2,3], 2) # Expected output: [1, 2] # Example 2: find_top_k_frequent([1], 1) # Expected output: [1] ``` # Constraints - `1 <= nums.length <= 10^5` - `k` is a positive integer that is less than or equal to the number of unique elements in `nums` # Hints 1. Consider using a hash map to count the frequencies of each element. 2. Use a heap or a similar data structure to keep track of the `k` most frequent elements efficiently. 3. Sorting the final result array by frequency can help achieve the required order of elements.","solution":"from typing import List from collections import Counter import heapq def find_top_k_frequent(nums: List[int], k: int) -> List[int]: Finds the k most frequent elements in the array nums. Parameters: nums (List[int]): Array of integers. k (int): Number of top frequent elements to return. Returns: List[int]: List of k most frequent elements. # Count the frequencies of each element count = Counter(nums) # Use a heap to keep track of the top k elements by frequency # We use negative frequency for max heap heap = [(-freq, num) for num, freq in count.items()] heapq.heapify(heap) # Extract the top k elements from the heap top_k = [heapq.heappop(heap)[1] for _ in range(k)] return top_k"},{"question":"In this problem, you are tasked with writing a function `reverse_string_and_count_vowels` that takes an input string, reverses it, and counts the number of each vowel (a, e, i, o, u) in the reversed string. Here is the step-by-step outline of what your function `reverse_string_and_count_vowels` should do: 1. Ensure the input is a string (to handle various input types gracefully). 2. Reverse the string. 3. Count the occurrences of each vowel (a, e, i, o, u) in the reversed string. 4. Return a dictionary with the vowels as keys and their respective counts as values. Your function signature should be: ```python def reverse_string_and_count_vowels(input_string: str) -> dict: ``` **Example:** ```python input_string = \\"Hello, World!\\" output = reverse_string_and_count_vowels(input_string) print(output) ``` Output: ``` {\'a\': 0, \'e\': 1, \'i\': 0, \'o\': 2, \'u\': 0} ``` **Requirements:** - The function should handle input strings of various lengths and characters. - The vowel count should be case-insensitive. **Notes:** - You can assume the input string consists only of basic ASCII characters. - The output dictionary should include all five vowels (\'a\', \'e\', \'i\', \'o\', \'u\') even if they have a count of zero.","solution":"def reverse_string_and_count_vowels(input_string: str) -> dict: Given an input string, this function reverses the string and counts the number of each vowel (a, e, i, o, u) in the reversed string. Args: input_string (str): The string to be reversed and analyzed. Returns: dict: A dictionary with vowels as keys and their respective counts as values. # Ensure the input is a string if not isinstance(input_string, str): raise ValueError(\\"Input should be a string\\") # Reverse the string reversed_string = input_string[::-1].lower() # Initialize a dictionary for vowel counts vowels_count = {\'a\': 0, \'e\': 0, \'i\': 0, \'o\': 0, \'u\': 0} # Count each vowel in the reversed string for char in reversed_string: if char in vowels_count: vowels_count[char] += 1 return vowels_count"},{"question":"You are asked to design a function that generates all possible unique combinations of a given list of integers, excluding the empty combination, and calculates the sum of each combination. The function should then return these sums in a sorted list without duplicates. The challenge evaluates your ability to generate all possible subsets of a list, handle duplicates, and sort the result. Problem Details: 1. **Function Name**: `unique_combination_sums` 2. **Input**: A list of integers. 3. **Output**: A sorted list of integers representing the unique sums of all non-empty combinations of the input list. Function Signature: ```python from typing import List def unique_combination_sums(data: List[int]) -> List[int]: pass ``` Examples: 1. `unique_combination_sums([1, 2])` should return `[1, 2, 3]`, as the sums of combinations are: `[1, 2, 3]`. 2. `unique_combination_sums([1, 2, 2])` should return `[1, 2, 3, 4, 5]`, as the sums of combinations (excluding duplicates) are: `[1, 2, 3, 4, 5]`. 3. `unique_combination_sums([2, 4, 6])` should return `[2, 4, 6, 8, 10, 12]`, as the sums of combinations are: `[2, 4, 6, 8, 10, 12]`. Constraints: - The input list will have at most 20 integers. - Each integer in the list will be between [-1000, 1000]. Implement an algorithm that generates all possible non-empty combinations of the given list, calculates the sum of each combination, removes duplicate sums, and returns a sorted list of these unique sums.","solution":"from itertools import combinations from typing import List def unique_combination_sums(data: List[int]) -> List[int]: unique_sums = set() for r in range(1, len(data) + 1): for comb in combinations(data, r): unique_sums.add(sum(comb)) return sorted(unique_sums)"},{"question":"Write a function to classify a given set of sentences as either \'positive\' or \'negative\' based on the presence of certain keywords. The main objective of this task is to familiarize oneself with basic text classification techniques using keyword lists. You are to implement the function `classify_sentences(sentences)`. This function takes a single argument, `sentences`, which is a list of strings (each string being a sentence). The function should perform the following tasks: 1. **Define keyword lists:** - Create a list of positive keywords, such as `[\\"good\\", \\"happy\\", \\"joy\\", \\"excellent\\", \\"great\\", \\"fantastic\\", \\"positive\\"]`. - Create a list of negative keywords, such as `[\\"bad\\", \\"sad\\", \\"pain\\", \\"poor\\", \\"terrible\\", \\"negative\\"]`. 2. **Classify each sentence:** - For each sentence in the list, determine if it contains any of the positive or negative keywords. - If a sentence contains more positive keywords than negative keywords, classify it as \'positive\'. - If a sentence contains more negative keywords than positive keywords, classify it as \'negative\'. - If the counts are equal or no keywords are found, classify the sentence as \'neutral\'. 3. **Return the classifications:** - Return a list of classifications corresponding to each sentence, where each classification is either \'positive\', \'negative\', or \'neutral\'. **Function Signature:** ```python def classify_sentences(sentences: list) -> list: # Your code here ``` # Example: ```python sentences = [ \\"I am feeling very happy today because the weather is great.\\", \\"This is a bad day, I am sad all the time.\\", \\"The food is fantastic and the service is excellent.\\", \\"The movie was okay, not too good, not too bad.\\" ] print(classify_sentences(sentences)) # Output: [\'positive\', \'negative\', \'positive\', \'neutral\'] ```","solution":"def classify_sentences(sentences): def keyword_count(sentence, keywords): count = 0 for keyword in keywords: count += sentence.lower().count(keyword) return count positive_keywords = [\\"good\\", \\"happy\\", \\"joy\\", \\"excellent\\", \\"great\\", \\"fantastic\\", \\"positive\\"] negative_keywords = [\\"bad\\", \\"sad\\", \\"pain\\", \\"poor\\", \\"terrible\\", \\"negative\\"] classifications = [] for sentence in sentences: positive_count = keyword_count(sentence, positive_keywords) negative_count = keyword_count(sentence, negative_keywords) if positive_count > negative_count: classifications.append(\'positive\') elif negative_count > positive_count: classifications.append(\'negative\') else: classifications.append(\'neutral\') return classifications"},{"question":"In this problem, you are required to write a Python function named `list_directory_contents` that will perform the following actions: 1. Use the `os.listdir` function to list the contents of a specified directory. 2. Iterate over each item in the directory and determine if it is a file or a directory using `os.path.isfile` and `os.path.isdir`. 3. Print whether each item is a file or a directory. Your task is to make appropriate use of the `os` module to achieve these actions. Below are the detailed documentation snippets for the required library functions you should use: - **os.listdir**: ```plaintext Python Library Documentation: built-in function listdir in os os.listdir(path) Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order. It does not include the special entries \'.\' and \'..\' even if they are present in the directory. ``` - **os.path.isfile**: ```plaintext Python Library Documentation: built-in function isfile in os.path os.path.isfile(path) Return True if path is an existing regular file. This follows symbolic links, so both isfile and islink can be true for the same path. ``` - **os.path.isdir**: ```plaintext Python Library Documentation: built-in function isdir in os.path os.path.isdir(path) Return True if path is an existing directory. This follows symbolic links, so both isdir and islink can be true for the same path. ``` # Instructions: - Define a function named `list_directory_contents` that takes a single parameter `directory_path` which is the path to the directory. - Use `os.listdir` to get the list of contents in the specified directory. - Iterate over the list of contents and use `os.path.isfile` and `os.path.isdir` to check if each item is a file or a directory. - Print each item in the directory along with whether it is a file or directory. You should not include any input reading or additional functionality outside the scope of the described actions.","solution":"import os def list_directory_contents(directory_path): Lists the contents of a specified directory and prints whether each item is a file or a directory. try: items = os.listdir(directory_path) for item in items: item_path = os.path.join(directory_path, item) if os.path.isfile(item_path): print(f\\"File: {item}\\") elif os.path.isdir(item_path): print(f\\"Directory: {item}\\") except Exception as e: print(f\\"An error occurred: {e}\\")"},{"question":"**Maximum Sum of Non-Adjacent Elements** You need to write a function `max_sum_non_adjacent()` that calculates the maximum sum of non-adjacent elements in a given list of integers. Non-adjacent elements are elements that do not sit next to each other in the list. # Function Signature ```python def max_sum_non_adjacent(nums: list[int]) -> int: ... ``` # Input - `nums`: A list of integers (can be positive or negative). # Output - Returns an integer representing the maximum sum of non-adjacent elements. # Constraints 1. The list `nums` can be empty or have up to 10^5 elements. 2. The integers can range from -10^4 to 10^4. # Calculation Details - Utilize dynamic programming to handle the problem efficiently. - Maintain two variables: - `incl` (maximum sum including the current element). - `excl` (maximum sum excluding the current element). - Iterate through the list and update these values accordingly. # Examples ```python print(max_sum_non_adjacent([3, 2, 7, 10])) # Expected output: 13 (3 + 10) print(max_sum_non_adjacent([3, 2, 5, 10, 7])) # Expected output: 15 (3 + 5 + 7) print(max_sum_non_adjacent([-1, 2, 3, -4, 5])) # Expected output: 8 (2 + 3 + 5) print(max_sum_non_adjacent([])) # Expected output: 0 ``` # Note - Remember to handle edge cases, such as an empty list (`nums`), which should return 0. - Ensure the function runs efficiently for large list sizes up to 10^5 elements.","solution":"def max_sum_non_adjacent(nums: list[int]) -> int: Calculate the maximum sum of non-adjacent elements in the list `nums`. if not nums: return 0 incl = 0 excl = 0 for num in nums: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"In this problem, you are expected to implement a function to find the longest substring without repeating characters from a given string. This exercise will help you understand how to utilize sliding window techniques and hash maps effectively. Function Name: `longest_unique_substring` Requirements: 1. **Input:** - `s` (str): A single string containing lowercase English letters. 2. **Output:** - An integer representing the length of the longest substring without repeating characters. Steps to accomplish: 1. Initialize two pointers (`start`, `end`) to represent the current window, and a variable `max_len` to store the length of the longest unique substring found so far. 2. Use a dictionary to keep track of the last seen index of each character. 3. Iterate through the string with the `end` pointer: - If the current character is in the dictionary and its last seen index is within the current window (`start <= index ≤ end`), move the `start` pointer to `index + 1`. - Update the dictionary with the current character and its index. - Update `max_len` if the current window length (`end - start + 1`) is larger than the previous `max_len`. Implementation: ```python def longest_unique_substring(s): char_index = {} start = 0 max_len = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end max_len = max(max_len, end - start + 1) return max_len ``` Example Usage: ```python # Example 1: s1 = \\"abcabcbb\\" print(longest_unique_substring(s1)) # Output: 3 (\\"abc\\") # Example 2: s2 = \\"bbbbb\\" print(longest_unique_substring(s2)) # Output: 1 (\\"b\\") # Example 3: s3 = \\"pwwkew\\" print(longest_unique_substring(s3)) # Output: 3 (\\"wke\\") ```","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): Input string containing lowercase English letters. Returns: int: Length of the longest substring without repeating characters. char_index = {} start = 0 max_len = 0 for end, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are required to write a Python function named `aggregate_sales` that takes a single argument, a pandas DataFrame `df`. This DataFrame must contain `Category`, `SubCategory`, `Date`, and `Sales` columns. Your task is to process the DataFrame and perform the following operations: 1. **Convert** the `Date` column to a pandas Datetime object. 2. **Create a new column** `YearMonth` that extracts the year and month from the `Date` column. 3. **Group the data** by `Category`, `SubCategory`, and `YearMonth`, aggregating the sum of `Sales` for each group. 4. **Reformat** the grouped data into a DataFrame with the following columns: - `Category` - `SubCategory` - `YearMonth` - `TotalSales`: The sum of sales for the corresponding group of `Category`, `SubCategory`, and `YearMonth`. The function should return the new DataFrame with these aggregated and reformatted values. **Function Signature**: ```python def aggregate_sales(df: pd.DataFrame) -> pd.DataFrame: ``` # Example: Given the DataFrame: ```python import pandas as pd data = { \'Category\': [\'Electronics\', \'Electronics\', \'Furniture\', \'Electronics\', \'Furniture\'], \'SubCategory\': [\'Phones\', \'Laptops\', \'Chairs\', \'Phones\', \'Tables\'], \'Date\': [\'2023-01-10\', \'2023-01-15\', \'2023-02-01\', \'2023-01-20\', \'2023-02-15\'], \'Sales\': [1500, 2300, 1200, 1800, 3000] } df = pd.DataFrame(data) ``` After applying `aggregate_sales(df)`, the output should be: ```python Category SubCategory YearMonth TotalSales 0 Electronics Laptops 2023-01 2300 1 Electronics Phones 2023-01 3300 2 Furniture Chairs 2023-02 1200 3 Furniture Tables 2023-02 3000 ``` **Requirements**: - Use the `pandas.to_datetime` function for converting the `Date` column. - Ensure the function handles data correctly and returns a properly formatted DataFrame. - You can assume the input DataFrame `df` is well-formed and will always contain the necessary columns with appropriate data types.","solution":"import pandas as pd def aggregate_sales(df: pd.DataFrame) -> pd.DataFrame: Aggregate sales data by Category, SubCategory, and YearMonth. Parameters: df (pd.DataFrame): Input DataFrame with \'Category\', \'SubCategory\', \'Date\', and \'Sales\' columns. Returns: pd.DataFrame: Aggregated DataFrame with columns \'Category\', \'SubCategory\', \'YearMonth\', and \'TotalSales\'. # Convert Date column to datetime df[\'Date\'] = pd.to_datetime(df[\'Date\']) # Create YearMonth column df[\'YearMonth\'] = df[\'Date\'].dt.to_period(\'M\').astype(str) # Group by Category, SubCategory, and YearMonth and sum Sales grouped = df.groupby([\'Category\', \'SubCategory\', \'YearMonth\'], as_index=False).agg(TotalSales=(\'Sales\', \'sum\')) return grouped"},{"question":"Write a function that generates usernames for a list of full names. The username should be composed of the first letter of the first name followed by the last name, all in lowercase. If a username already exists, append a number to it starting from 1, incrementing until a unique username is found. Return a list of the generated usernames. You should write self-contained code starting with: ``` def generate_usernames(full_names): ```","solution":"def generate_usernames(full_names): Generates a list of usernames from a list of full names. Each username is composed of the first letter of the first name followed by the last name, all in lowercase. If a username already exists, a number is appended to it to make it unique. Args: full_names (list of str): List of full names where each name is \\"First Last\\" Returns: list of str: List of generated usernames usernames = [] username_set = set() for name in full_names: parts = name.lower().split() username = parts[0][0] + parts[1] if username in username_set: counter = 1 new_username = username + str(counter) while new_username in username_set: counter += 1 new_username = username + str(counter) username = new_username usernames.append(username) username_set.add(username) return usernames"},{"question":"You are tasked with writing a function called `find_uncommon_words` that identifies words appearing in only one of two input strings. The function needs to use basic string manipulation and set operations. Here is what you need to do step-by-step: 1. **Split Strings into Words**: Split each input string into a list of words. 2. **Convert Lists to Sets**: Convert these lists of words into sets. 3. **Find Symmetric Difference**: Identify words that are present in either of the sets but not in both (uncommon words). 4. **Output as List**: Return the result as a list of uncommon words. # Function Specification - **Function Name**: `find_uncommon_words` - **Parameters**: - `str1` (str): The first input string. - `str2` (str): The second input string. - **Returns**: - `list`: A list of words that appear in only one of the input strings. # Example Suppose you have the following inputs: ```python str1 = \\"apple banana mango\\" str2 = \\"banana fruit apple berry\\" ``` Calling `find_uncommon_words(str1, str2)` should return: ```python [\\"mango\\", \\"fruit\\", \\"berry\\"] ``` You are required to implement this function by adhering to the described program logic and ensuring the correct usage of string manipulation and set operations.","solution":"def find_uncommon_words(str1, str2): Identify words appearing in only one of the two input strings. Parameters: str1 (str): The first input string. str2 (str): The second input string. Returns: list: A list of words that appear in only one of the input strings. # Split the strings into lists of words words1 = set(str1.split()) words2 = set(str2.split()) # Use symmetric difference to find uncommon words uncommon_words = words1.symmetric_difference(words2) # Return as list return list(uncommon_words)"},{"question":"------------------------------------------ You need to create a function that evaluates a mathematical expression given as a string and returns the result. The expression can contain integers, the four basic arithmetic operators (+, -, *, /), and parentheses. # Function Signature: ```python def evaluate_expression(expression: str) -> int: Args: expression (str): A string representing a mathematical expression. Returns: int: The result of evaluating the mathematical expression. ``` # Goal: 1. Parse and evaluate the given mathematical expression while respecting the operator precedence and parenthesis. 2. The function should handle the four basic arithmetic operators and the integer numbers in the expression. 3. The function should return the correct result as an integer. # Requirements: - You are not allowed to use the `eval` function or any other direct evaluation functions. - You should handle integer arithmetic and assume that all input expressions are valid. # Example: ```python expression = \\"3 + 2 * (1 + 1)\\" print(evaluate_expression(expression)) ``` The example should return: ``` 7 ``` Another example: ```python expression = \\"10 / 2 + 7 - 3 * 2\\" print(evaluate_expression(expression)) ``` The example should return: ``` 6 ```","solution":"def evaluate_expression(expression: str) -> int: def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operation(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a // b def calculate(values, operators): right = values.pop() left = values.pop() op = operators.pop() values.append(apply_operation(left, right, op)) values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': calculate(values, operators) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): calculate(values, operators) operators.append(expression[i]) i += 1 while len(operators) != 0: calculate(values, operators) return values[-1]"},{"question":"In this problem, you are required to write a Python function named `sum_of_digits` that takes a single integer `n` as an argument and returns the sum of its digits. If the given integer is negative, the function should compute the sum of digits for its absolute value. **Function Signature:** ```python def sum_of_digits(n): pass ``` # Example Usage ```python # Example 1 n1 = 12345 print(sum_of_digits(n1)) # Output: 15 (1+2+3+4+5) # Example 2 n2 = -987 print(sum_of_digits(n2)) # Output: 24 (9+8+7) ```","solution":"def sum_of_digits(n): Returns the sum of the digits of the given integer n. If n is negative, the function computes the sum of digits for its absolute value. n = abs(n) return sum(int(digit) for digit in str(n))"},{"question":"You are tasked with writing a Python function called `rotate_matrix` that rotates a given NxN matrix (a 2D list) 90 degrees clockwise. **Function Signature:** ```python def rotate_matrix(matrix): matrix: List[List[int]] - a 2D list representing an NxN matrix return: None - the input matrix is modified in-place pass ``` **Function Details:** 1. **Inputs**: - `matrix`: A 2D list of integers where `matrix[i][j]` represents the element at the ith row and jth column. The matrix is guaranteed to be square (NxN). 2. **Output**: - The function should rotate the input matrix 90 degrees clockwise in place, without returning any value. **Example**: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # After rotation matrix == [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] # should be True ``` **Requirements**: - The rotation must be done in-place without using any additional matrix or list. - You may use additional variables for temporary storage but not for storing an entire matrix. This function will test your understanding of matrix manipulation and in-place modifications. The goal is to familiarize yourself with working with 2D arrays (lists of lists) in Python and modifying them efficiently.","solution":"def rotate_matrix(matrix): Rotates the NxN matrix 90 degrees clockwise in place. :param matrix: List[List[int]] - A 2D list representing an NxN matrix :return: None - The matrix is modified in-place n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): offset = i - first # Save the top element top = matrix[first][i] # Move left element to top matrix[first][i] = matrix[last - offset][first] # Move bottom element to left matrix[last - offset][first] = matrix[last][last - offset] # Move right element to bottom matrix[last][last - offset] = matrix[i][last] # Move top element to right matrix[i][last] = top"},{"question":"In this task, you are asked to implement a function that processes a list of strings and writes only the unique strings into a new list while maintaining their original order. The function should then store this list in a JSON file and read it back to verify the contents. You are provided with two built-in Python functions that are integral to your solution: 1. `json.dump(obj, file)`: to write an object to a JSON file. 2. `json.load(file)`: to read an object from a JSON file. You need to use these functions in the implementation as follows: - Use `json.dump` to write the list of unique strings to a JSON file. - Use `json.load` to read back the data from the file to verify its contents. # Function Specification Define a function named `write_unique_strings_to_json` that performs the following: 1. Takes a list of strings as input, filters out duplicate strings while maintaining their original order, and stores the unique strings in a new list. 2. Writes this unique list to a JSON file named \\"unique_strings.json\\". 3. Reads the data back from the JSON file and returns it. Inputs: - A list of strings. Outputs: - A list of unique strings read back from the JSON file. Function Signature: ```python def write_unique_strings_to_json(strings: list) -> list: pass ``` Example behavior: ```python strings = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"] result = write_unique_strings_to_json(strings) print(result) # Output should be [\'apple\', \'banana\', \'orange\', \'grape\'] ``` # Requirements: - Use `json.dump` to write the list to a JSON file. - Use `json.load` to read the list from the JSON file and return it. # Constraints: - The list of strings will have no more than 1000 elements. - Each string will be between 1 and 50 characters long.","solution":"import json def write_unique_strings_to_json(strings: list) -> list: Takes a list of strings, filters out duplicates while maintaining order, writes the unique strings to a JSON file, then reads back and returns the result. seen = set() unique_strings = [] for s in strings: if s not in seen: seen.add(s) unique_strings.append(s) # Write to JSON file with open(\\"unique_strings.json\\", \\"w\\") as file: json.dump(unique_strings, file) # Read from JSON file with open(\\"unique_strings.json\\", \\"r\\") as file: result = json.load(file) return result"},{"question":"Write a function that takes a list of integers and an integer k as inputs. The function should find the maximum sum of any contiguous subarray of length k. The function should return the starting and ending indices of the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, return the indices of the first such subarray encountered. The function should output: tuple: A tuple with two integers, representing the starting and ending indices of the subarray with the maximum sum. You should write self-contained code starting with: ``` def max_subarray_with_indices(arr, k): ```","solution":"def max_subarray_with_indices(arr, k): Finds the maximum sum of any contiguous subarray of length k. Returns the starting and ending indices of the subarray with the maximum sum. Parameters: arr (list of int): List of integers. k (int): Length of the subarray. Returns: tuple: Starting index and ending index of the subarray with the maximum sum. n = len(arr) if k > n or k == 0: return (-1, -1) # Invalid input, return a default invalid response current_sum = sum(arr[:k]) max_sum = current_sum start_index = 0 for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 return (start_index, start_index + k - 1)"},{"question":"In this problem, you are required to create a function `fibonacci_sum` that calculates the sum of the first `n` Fibonacci numbers. The Fibonacci sequence is characterized by the fact that every number after the first two is the sum of the two preceding ones. The sequence starts like this: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. Your task is to implement this function in Python. The function should be named `fibonacci_sum` and accept one parameter: - `n`: which represents the number of terms to consider from the start of the Fibonacci sequence. The function should handle edge cases, such as when `n` is 0 or 1. ```python def fibonacci_sum(n): Accept n (int) and return the sum of the first n Fibonacci numbers. # Your implementation here ``` **Examples:** 1. `fibonacci_sum(5)` should return `7` (since 0+1+1+2+3=7). 2. `fibonacci_sum(7)` should return `20` (since 0+1+1+2+3+5+8=20). 3. `fibonacci_sum(1)` should return `0` (since the first Fibonacci number is 0). **Note:** - You are not allowed to use any external libraries for generating the Fibonacci sequence. - Make sure your solution is efficient and handles large input values gracefully.","solution":"def fibonacci_sum(n): Accept n (int) and return the sum of the first n Fibonacci numbers. if n <= 0: return 0 elif n == 1: return 0 fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return sum(fib)"},{"question":"You are required to implement a function that analyzes a list of logs generated by various servers. Each log entry is a string containing a timestamp, server identifier, and the log message. Your task is to identify the server that generated the maximum number of error messages. # Requirements: 1. **Function Name**: `find_server_with_most_errors` 2. **Function Args**: - `logs` (List[str]): A list of log entries. Each entry is a string formatted as `\\"[timestamp] server_identifier: message\\"`. # Constraints: - Log messages containing the word \\"ERROR\\" (case-sensitive) are to be considered error messages. - Server identifiers are unique and represented as strings (e.g., `server01`, `server02`). # Instructions: 1. Parse each log entry to extract the server identifier and the log message. 2. Count the number of error messages each server generates. 3. Identify the server with the highest number of error messages and return its identifier. 4. If multiple servers have the same maximum number of errors, return the lexicographically smallest identifier. # Example Usage: ```python logs = [ \\"[2023-01-01 12:00:00] server01: ERROR Connection lost\\", \\"[2023-01-01 12:05:00] server02: INFO Connection established\\", \\"[2023-01-01 12:10:00] server01: ERROR Disk full\\", \\"[2023-01-01 12:15:00] server03: ERROR Unable to connect\\", \\"[2023-01-01 12:20:00] server02: ERROR Timeout occurred\\" ] print(find_server_with_most_errors(logs)) # Output: \\"server01\\" ``` **Hints**: - Use string manipulation techniques to parse the log entries. - Consider using a dictionary to keep a count of errors for each server.","solution":"def find_server_with_most_errors(logs): Analyzes a list of logs to identify the server that generated the maximum number of error messages. Args: logs (List[str]): A list of log entries. Returns: str: Identifier of the server with the most error messages. If multiple servers have the same maximum number of errors, return the lexicographically smallest identifier. error_count = {} for log in logs: # Example log: \\"[2023-01-01 12:00:00] server01: ERROR Connection lost\\" timestamp_end = log.find(\\"] \\") log_details = log[timestamp_end + 2:] server_end = log_details.find(\\": \\") server_identifier = log_details[:server_end] message = log_details[server_end + 2:] if \\"ERROR\\" in message: if server_identifier not in error_count: error_count[server_identifier] = 0 error_count[server_identifier] += 1 max_errors = 0 server_with_most_errors = None for server, count in error_count.items(): if count > max_errors or (count == max_errors and server < server_with_most_errors): max_errors = count server_with_most_errors = server return server_with_most_errors"},{"question":"In this exercise, you need to create a function that determines the most frequent word in a list of words. If multiple words have the same highest frequency, the function should return the lexicographically smallest word. # Detailed Requirements: - You need to define a function named `most_frequent_word` which takes one argument: - `words`: a list of strings where each string represents a word. - The function should return the most frequent word in the list: - If multiple words have the same highest frequency, the lexicographically smallest word should be returned. - If the input list is empty, the function should return an empty string. # Example Outputs: ```python print(most_frequent_word([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\"])) # Output: \'banana\' print(most_frequent_word([\\"dog\\", \\"dog\\", \\"cat\\", \\"cat\\", \\"bird\\"])) # Output: \'cat\' print(most_frequent_word([])) # Output: \'\' print(most_frequent_word([\\"aaa\\", \\"bbb\\", \\"ccc\\", \\"aaa\\", \\"bbb\\", \\"aaa\\"])) # Output: \'aaa\' ``` # Hints: 1. Use a dictionary to keep track of the frequency of each word. 2. Iterate through the dictionary to find the word(s) with the highest frequency. 3. Use the built-in `sorted` function to determine the lexicographically smallest word among the candidates when there are ties.","solution":"def most_frequent_word(words): from collections import Counter if not words: return \\"\\" # Count the frequency of each word word_count = Counter(words) # Find the maximum frequency max_freq = max(word_count.values()) # Collect words with the maximum frequency most_frequent_words = [word for word, count in word_count.items() if count == max_freq] # Return the lexicographically smallest word return min(most_frequent_words)"},{"question":"In this problem, you need to create a function called `generate_pascal_triangle` that generates Pascal\'s Triangle up to a given row number. Pascal\'s Triangle is a triangular array of the binomial coefficients, where each row represents the coefficients in the expansion of a binomial raised to successive powers. # Instructions: 1. The function `generate_pascal_triangle(n)` should take an integer `n` as input, which represents the number of rows to generate. 2. The function should return a list of lists, where each inner list represents a row in Pascal\'s Triangle. # Details: - The first row is `[1]`. - Each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating empty elements as 0. # Example: For `n = 5`, the function should return: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Where: - The first row is `[1]`. - The second row is formed by adding 0 + 1 and 1 + 0 to get `[1, 1]`. - The third row is formed by adding 0 + 1, 1 + 1, and 1 + 0 to get `[1, 2, 1]`. - Continue this process up to the `n`th row. # Constraints: - You can assume that the input `n` is a positive integer. # Your task: 1. Implement the function `generate_pascal_triangle(n)` to generate the Pascal\'s Triangle up to `n` rows. 2. Verify the function with different values of `n` to confirm its correctness and efficiency. Here is the function signature in Python: ```python def generate_pascal_triangle(n): pass ```","solution":"def generate_pascal_triangle(n): Generates Pascal\'s Triangle up to a given row number n. Parameters: n (int): The number of rows of Pascal\'s Triangle to generate. Returns: list of lists: A list of lists representing Pascal\'s Triangle. if n <= 0: return [] triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) return triangle"},{"question":"You are asked to create a function named `find_top_contributors` that identifies the top contributors to a GitHub repository. The function should fetch data using the GitHub API for a given repository and extract the list of contributors along with their contributions count. Your function should: 1. Accept two parameters: `owner` (string, the username of the repository owner) and `repo` (string, the repository name). 2. Use the GitHub API endpoint `https://api.github.com/repos/{owner}/{repo}/contributors` to retrieve the contributors data. 3. Parse the JSON response to extract contributors\' usernames and their contributions count. 4. Return a list of dictionaries, each dictionary containing two keys: `\'username\'` and `\'contributions\'`, sorted by the contributions count in descending order. Ensure your function handles any necessary import statements and error handling related to API requests. Here is the prototype of the function you need to implement: ```python def find_top_contributors(owner, repo): # Your code here pass # Example usage: top_contributors = find_top_contributors(\\"octocat\\", \\"Hello-World\\") print(top_contributors) ```","solution":"import requests def find_top_contributors(owner, repo): Fetch the top contributors of a given GitHub repository. Parameters: - owner (str): The username of the repository owner. - repo (str): The repository name. Returns: - list of dicts: A list of dictionaries, each containing \'username\' and \'contributions\', sorted by contributions count in descending order. url = f\\"https://api.github.com/repos/{owner}/{repo}/contributors\\" try: response = requests.get(url) response.raise_for_status() contributors_data = response.json() top_contributors = [ {\\"username\\": contributor[\\"login\\"], \\"contributions\\": contributor[\\"contributions\\"]} for contributor in contributors_data ] # Sorting the contributors by the number of contributions in descending order top_contributors.sort(key=lambda x: x[\'contributions\'], reverse=True) return top_contributors except requests.exceptions.RequestException as e: print(f\\"HTTP Request failed: {e}\\") return [] # Example usage: # top_contributors = find_top_contributors(\\"octocat\\", \\"Hello-World\\") # print(top_contributors)"},{"question":"You are tasked with creating a function called `aggregate_student_scores` that reads multiple `.json` files from a specified source directory, processes the data, and writes specific analysis results to an output JSON file. Each `.json` file contains information about students\' scores across various subjects. The objective is to calculate the average score per subject and the overall class average score for each file, and write these details to the output JSON file. # Function Signature ```python def aggregate_student_scores(source_folder: str, output_file_path: str) -> None: ``` # Parameters - `source_folder` (str): The path to the source directory containing `.json` files. - `output_file_path` (str): The path where the output JSON file will be saved. # Detailed Instructions 1. **Fetch File Listings**: - Use the `os.listdir` function to list all files in the `source_folder`. - Filter out files that do not end with the `.json` extension. 2. **Read and Process JSON Files**: - For each `.json` file, read it using `json.load`. - Each JSON file contains an array of student records. Each student record is a dictionary with subjects as keys and scores as values. 3. **Calculate Averages**: - For each subject, calculate the average score. - Calculate the overall class average score across all subjects. 4. **Write to Output JSON**: - Write the extracted results to the output JSON file located at `output_file_path` in the following format: ```json { \\"filename1\\": { \\"subject1\\": average_score, \\"subject2\\": average_score, ... \\"class_average\\": overall_average_score }, ... } ``` - Ensure that each entry corresponds to a file name and includes the average scores for each subject and the overall class average score. # Example For illustration, if the source folder contains a file named `class1.json` with content: ```json [ {\\"Math\\": 95, \\"English\\": 85}, {\\"Math\\": 80, \\"English\\": 85}, {\\"Math\\": 88, \\"English\\": 90} ] ``` The output file should contain: ```json { \\"class1\\": { \\"Math\\": 87.67, \\"English\\": 86.67, \\"class_average\\": 87.17 } } ``` # Requirements Please explicitly use: - `os.listdir` - `json.load` - `json.dump` Ensure your implementation handles edge cases, such as empty files, files with partial data or missing subjects, and structure mismatches.","solution":"import os import json from typing import Dict, List def aggregate_student_scores(source_folder: str, output_file_path: str) -> None: result = {} for file_name in os.listdir(source_folder): if file_name.endswith(\'.json\'): file_path = os.path.join(source_folder, file_name) with open(file_path, \'r\') as file: try: students = json.load(file) except json.JSONDecodeError: continue if not students: continue subject_totals = {} subject_counts = {} for student in students: for subject, score in student.items(): if subject in subject_totals: subject_totals[subject] += score subject_counts[subject] += 1 else: subject_totals[subject] = score subject_counts[subject] = 1 subject_averages = {subject: round(total / subject_counts[subject], 2) for subject, total in subject_totals.items()} overall_total = sum(subject_totals.values()) overall_count = sum(subject_counts.values()) class_average = round(overall_total / overall_count, 2) if overall_count != 0 else 0 subject_averages[\\"class_average\\"] = class_average result[file_name.replace(\'.json\', \'\')] = subject_averages with open(output_file_path, \'w\') as outfile: json.dump(result, outfile, indent=2)"},{"question":"You are asked to implement a Python function named `generate_fibonacci_matrix` that creates a matrix in which each element is a number from the Fibonacci sequence. The Fibonacci sequence is defined as: [ F(0) = 0, ] [ F(1) = 1, ] [ F(n) = F(n-1) + F(n-2) text{ for } n geq 2 ] The function should take two input parameters `m` and `n`, which represent the number of rows and columns of the resulting matrix, respectively. The matrix should be filled with Fibonacci numbers in row-major order (left to right, top to bottom). Function Signature: ```python def generate_fibonacci_matrix(m, n): pass ``` Parameters: - `m`: An integer representing the number of rows in the matrix. - `n`: An integer representing the number of columns in the matrix. Returns: - A 2D list (nested list) representing the filled matrix of size `m x n`. Example: ```python m = 3 n = 4 result = generate_fibonacci_matrix(m, n) print(result) # Output: [ # [0, 1, 1, 2], # [3, 5, 8, 13], # [21, 34, 55, 89] # ] ``` Note: Ensure that your function efficiently computes the Fibonacci sequence elements to populate the matrix.","solution":"def generate_fibonacci_matrix(m, n): Generates an m x n matrix filled with Fibonacci sequence numbers in row-major order. Parameters: m (int): Number of rows in the matrix. n (int): Number of columns in the matrix. Returns: list of list of int: A 2D list representing the matrix filled with Fibonacci numbers. if m == 0 or n == 0: return [] # Creating a list to store the Fibonacci sequence fibonacci_numbers = [0, 1] # Fill up to m*n Fibonacci numbers while len(fibonacci_numbers) < m * n: fibonacci_numbers.append(fibonacci_numbers[-1] + fibonacci_numbers[-2]) # Create the matrix and fill it with the required Fibonacci numbers matrix = [] for i in range(m): row = fibonacci_numbers[i * n:(i + 1) * n] matrix.append(row) return matrix"},{"question":"In this challenge, you are required to manipulate strings to reformat a given sentence based on specific capitalization rules. Your task is to implement a function named `reformat_sentence(sentence)` which takes a single input string `sentence` and returns a new string where: 1. Each word in the sentence starts with an uppercase letter and the rest of the letters are lowercase. 2. The order of words remains the same as in the original sentence. 3. Words are separated by a single space and there should be no leading or trailing spaces in the output string. # Example: - Input: `hello world! this is a Test.` Output: `Hello World! This Is A Test.` - Input: `python is fun` Output: `Python Is Fun` # Function Signature: ```python def reformat_sentence(sentence): pass ``` # Requirements: 1. Split the sentence into words. 2. Capitalize the first letter of each word and make sure the rest of each word is lowercased. 3. Rejoin the words into a single string with a single space separating each word. 4. Ensure the final string has no leading or trailing spaces. # Notes: - The input string can contain punctuation marks or special characters. - Ensure correct handling of multi-space segments between words in the input sentence.","solution":"def reformat_sentence(sentence): Reformat the input sentence such that each word starts with an uppercase letter and the rest of the letters are lowercase. Words are separated by a single space and there are no leading or trailing spaces. words = sentence.split() reformatted_words = [word.capitalize() for word in words] return \' \'.join(reformatted_words)"},{"question":"You are required to write a function named `transpose_and_flatten` that processes a given DataFrame and returns a new DataFrame in a modified format using the following libraries: 1. **pandas**: To handle DataFrame operations including transposition and stacking. 2. **numpy**: To handle the conversion and flattening operations. **Function Signature:** ```python def transpose_and_flatten(datarows: pd.DataFrame) -> pd.DataFrame: ``` **Requirements:** - The function `transpose_and_flatten` takes one argument: - `datarows`: a pandas DataFrame containing the initial data. - The function should perform the following operations: 1. Transpose the DataFrame such that rows become columns and columns become rows. 2. Convert the DataFrame to a flattened 1D structure while retaining the order of elements. 3. Return a new DataFrame with a single column named `Flattened` containing the flattened data. **Example Usage:** ```python import pandas as pd # Example DataFrame data = {\'A\': [1, 2, 3], \'B\': [4, 5, 6]} df = pd.DataFrame(data) # Transpose and flatten the DataFrame new_df = transpose_and_flatten(df) print(new_df) # Expected output: # Flattened # 0 1 # 1 4 # 2 2 # 3 5 # 4 3 # 5 6 ``` **Note:** - Ensure that the data is flattened in column-major order (i.e., the way it appears after transposition). - Use `pandas` and `numpy` operations effectively to achieve the desired transformation.","solution":"import pandas as pd import numpy as np def transpose_and_flatten(datarows: pd.DataFrame) -> pd.DataFrame: Transpose the DataFrame, flatten it and return a new DataFrame with a single column `Flattened`. Parameters: datarows (pd.DataFrame): The input DataFrame to be processed. Returns: pd.DataFrame: A new DataFrame with a single column containing the flattened data. # Transpose the DataFrame transposed_df = datarows.T # Flatten the DataFrame to a 1D array flat_array = transposed_df.values.flatten(order=\'F\') # Create a new DataFrame with the flattened data flattened_df = pd.DataFrame(flat_array, columns=[\'Flattened\']) return flattened_df"},{"question":"You are required to implement a function in Python that reconstructs the original string from a shuffled version of it based on the provided index pairs. This problem aims to test your understanding of string manipulation and array indexing in Python. Specifically, you are asked to write a function named **`restore_string`**. # Requirements: - Implement the function **`restore_string(s, indices)`** which takes a string **`s`** and a list of integers **`indices`** as inputs. - The list **`indices`** represents the new position of each character in the string **`s`**. - The function must use the **`indices`** list to rearrange the characters in **`s`** to their original positions and return the restored string. # Function Signature ```python def restore_string(s, indices): pass ``` # Constraints - The length of **`s`** and **`indices`** will be the same and will be between 1 and 100. - **`s`** will contain only lowercase English letters. - **`indices`** is a permutation of the range from 0 to **len(s) - 1**. # Example ```python # Example input s = \\"aiohn\\" indices = [3, 1, 4, 2, 0] # Expected output result = restore_string(s, indices) print(result) # should output \\"nihao\\" ``` # Explanation In the example, the function should rearrange the characters in the string **`s`** based on their positions provided in the **`indices`** list. Step by step: - The character at index 0 in **`s`** is `\'a\'`, which moves to index 3 in the output string. - The character at index 1 in **`s`** is `\'i\'`, which moves to index 1 in the output string. - The character at index 2 in **`s`** is `\'o\'`, which moves to index 4 in the output string. - The character at index 3 in **`s`** is `\'h\'`, which moves to index 2 in the output string. - The character at index 4 in **`s`** is `\'n\'`, which moves to index 0 in the output string. Thus, the restored string is \\"nihao\\". Implement the function to fulfill the given requirements and constraints.","solution":"def restore_string(s, indices): Reconstructs the original string from the shuffled version based on the provided index pairs. Args: s (str): The shuffled string. indices (list): The list of indices representing the new positions of each character in `s`. Returns: str: The restored original string. # Initialize a list of the same length as `s` with empty strings restored = [\'\'] * len(s) # Place each character in the correct position based on `indices` for char, index in zip(s, indices): restored[index] = char # Join the list into a single string and return return \'\'.join(restored)"},{"question":"You are tasked with implementing a function that applies the Dijkstra’s shortest path algorithm on a given weighted graph represented as an adjacency matrix. Dijkstra’s algorithm is essential in computing the shortest paths from a source vertex to all other vertices in a graph with non-negative weights. # Problem Statement Write a function `dijkstra_shortest_path(graph, src)` that takes two parameters: - `graph` (a 2D NumPy array): The adjacency matrix representing the weighted graph. `graph[i][j]` indicates the weight of the edge from vertex `i` to vertex `j`. If there is no direct edge between two vertices, the corresponding entry will be `np.inf`. - `src` (an integer): The source vertex from which to calculate the shortest paths. The function should return a NumPy array `distances` such that: - `distances[i]` contains the shortest distance from the source vertex `src` to vertex `i`. Use the following specific NumPy functions in your implementation: - `numpy.full` - `numpy.argmin` - `numpy.inf` # Example ```python import numpy as np def dijkstra_shortest_path(graph, src): # Your implementation here graph = np.array([[0, 1, 4, np.inf, np.inf], [1, 0, 4, 2, 7], [4, 4, 0, 3, 5], [np.inf, 2, 3, 0, 4], [np.inf, 7, 5, 4, 0]]) src = 0 distances = dijkstra_shortest_path(graph, src) print(\\"Shortest distances from vertex\\", src, \\":\\", distances) ``` Expected output: ```python Shortest distances from vertex 0 : [0. 1. 4. 3. 7.] ``` **Constraints:** - Assume that the graph has no negative weight cycles. - The input graph will always be a square matrix. - Use only NumPy functionalities specified in the problem statement. # Notes - Ensure that your function correctly follows Dijkstra’s shortest path algorithm. - The function should utilize `numpy.full`, `numpy.argmin`, and `numpy.inf` appropriately to achieve the final shortest path distances.","solution":"import numpy as np def dijkstra_shortest_path(graph, src): Applies Dijkstra\'s algorithm to find the shortest paths from src to all other vertices in a given graph. Parameters: graph (np.ndarray): The adjacency matrix representing the graph. src (int): The source vertex. Returns: np.ndarray: An array where the ith element is the shortest distance from the source vertex to vertex i. num_vertices = graph.shape[0] visited = np.full(num_vertices, False) distances = np.full(num_vertices, np.inf) distances[src] = 0 for _ in range(num_vertices): # Find the unvisited vertex with the smallest distance min_distance = np.inf min_vertex = -1 for v in range(num_vertices): if not visited[v] and distances[v] < min_distance: min_distance = distances[v] min_vertex = v # Mark the vertex as visited visited[min_vertex] = True # Update the distances of the adjacent vertices for v in range(num_vertices): if graph[min_vertex][v] != np.inf and not visited[v]: new_distance = distances[min_vertex] + graph[min_vertex][v] if new_distance < distances[v]: distances[v] = new_distance return distances"},{"question":"You are required to create a function that parses Apache access log files and extracts useful information. The Apache log follows the Common Log Format, which looks like this: ``` 127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \\"GET /apache_pb.gif HTTP/1.0\\" 200 2326 ``` Your task is to write a function named `parse_log_entry` that extracts the following details from each log entry: 1. The IP address 2. The datetime in ISO 8601 format 3. The request method (e.g., GET, POST, etc.) 4. The requested URL 5. The response code 6. The response size # Instructions: - Use regular expressions to parse the log entry. - The datetime should be converted to ISO 8601 format using Python\'s `datetime` module. - The function should take a single string argument (a log entry) and return a dictionary with the extracted information. # Example Usage: ```python log_entry = \'127.0.0.1 - frank [10/Oct/2000:13:55:36 -0700] \\"GET /apache_pb.gif HTTP/1.0\\" 200 2326\' parsed_entry = parse_log_entry(log_entry) print(parsed_entry) ``` # Expected Output: ```python { \\"ip_address\\": \\"127.0.0.1\\", \\"datetime\\": \\"2000-10-10T13:55:36-07:00\\", \\"request_method\\": \\"GET\\", \\"url\\": \\"/apache_pb.gif\\", \\"response_code\\": 200, \\"response_size\\": 2326 } ``` # Notes: - Handle cases where the response size is `-` (absent) by returning `None` for the response size. - Ensure that the function correctly handles different IP address formats, including IPv6.","solution":"import re from datetime import datetime def parse_log_entry(log_entry): Parse a single Apache log entry and extract useful information. Args: log_entry (str): A single log entry in the Common Log Format. Returns: dict: A dictionary with extracted details: - ip_address - datetime - request_method - url - response_code - response_size # Regular expression pattern for parsing the log entry log_pattern = re.compile( r\'(?P<ip>[da-fA-F:.]+) - - [(?P<datetime>[^]]+)] \\"(?P<method>w+) (?P<url>[^ ]+) [^\\"]+\\" (?P<code>d{3}) (?P<size>[d-]+)\' ) match = log_pattern.match(log_entry) if not match: return None log_data = match.groupdict() # Convert datetime to ISO 8601 format datetime_str = log_data[\'datetime\'] log_datetime = datetime.strptime(datetime_str, \\"%d/%b/%Y:%H:%M:%S %z\\") iso_datetime = log_datetime.isoformat() # Convert response size \'-\' to None response_size = log_data[\'size\'] response_size = None if response_size == \'-\' else int(response_size) # Construct the result dictionary parsed_data = { \\"ip_address\\": log_data[\'ip\'], \\"datetime\\": iso_datetime, \\"request_method\\": log_data[\'method\'], \\"url\\": log_data[\'url\'], \\"response_code\\": int(log_data[\'code\']), \\"response_size\\": response_size } return parsed_data"},{"question":"**Analyze Text Files for Word Occurrences** Write a Python function named `analyze_word_occurrences` which takes a list of text file paths and a word as input, and returns a dictionary showing the number of occurrences of the specified word in each file. # Details: 1. **Input**: - A list of file paths (as `list of strings`). - A target word (as `string`). 2. **Output**: - A dictionary where the keys are file paths and the values are the number of occurrences of the target word in the corresponding file. 3. **Case Sensitivity**: - The word matching should be case-insensitive. 4. **Word Boundaries**: - The function should only count occurrences of the word as a whole (i.e., \\"word\\" should not be counted within \\"sword\\"). # Function Signature: ```python def analyze_word_occurrences(files: list, word: str) -> dict: ``` # Example: Assuming you have two text files: - `file1.txt` containing \\"Hello world. Hello everyone.\\" - `file2.txt` containing \\"Welcome to the world of programming.\\" An example of calling the function could be: ```python result = analyze_word_occurrences([\\"file1.txt\\", \\"file2.txt\\"], \\"world\\") # The result would be: # { # \\"file1.txt\\": 1, # \\"file2.txt\\": 1 # } ``` Ensure the function handles reading from files properly and closes them after reading. Maintain robustness by checking if the file paths provided are valid and handle any exceptions that may arise while reading files.","solution":"import os def analyze_word_occurrences(files: list, word: str) -> dict: from collections import defaultdict import re word_counts = defaultdict(int) word_pattern = re.compile(r\'b\' + re.escape(word) + r\'b\', re.IGNORECASE) for file in files: try: with open(file, \'r\', encoding=\'utf-8\') as f: text = f.read() word_counts[file] = len(word_pattern.findall(text)) except Exception as e: word_counts[file] = str(e) return word_counts"},{"question":"Create a Python function to recursively list all files and directories within a specified directory. The function should return a dictionary where the keys are the directory paths and the values are lists of files in those directories. The function should handle edge cases such as non-existent directories, permission errors, and other potential exceptions gracefully. Args: - directory_path (str): The path of the directory to list the contents of. The function should output with: - dict: A dictionary where keys are directory paths and values are lists of files in those directories. Use the following imports and start the function definition: ``` import os def list_all_files(directory_path): ```","solution":"import os def list_all_files(directory_path): Recursively lists all files and directories within a specified directory. Args: directory_path (str): The path of the directory to list the contents of. Returns: dict: A dictionary where keys are directory paths and values are lists of files in those directories. result = {} try: for root, dirs, files in os.walk(directory_path): result[root] = files except Exception as e: print(f\\"An error occurred: {e}\\") return result"},{"question":"You are given a string that represents a mathematical expression containing integers and the operators `+` and `-`. There are no spaces in the string, and the expression is guaranteed to be valid. The goal is to evaluate this expression and return the result as an integer. Write a function `evaluate_expression(expression)` that computes the result of the given mathematical expression. Inputs: 1. **expression**: A string representing the mathematical expression (e.g., `\'12-4+3\'`). Outputs: - An integer representing the result of the evaluated expression. Function Signature: ```python def evaluate_expression(expression: str) -> int: ``` Requirements: 1. The function should correctly handle multiple-digit integers. 2. The function should process the operators respecting their natural precedence (+ and - have the same precedence and are left-associative). 3. Do not use the built-in `eval` function or similar. Your implementation should follow these steps: 1. Parse the input string to extract numbers and operators. 2. Apply the operators in the correct order to compute the result. Example: ```python assert evaluate_expression(\'12-4+3\') == 11 assert evaluate_expression(\'100+200-50\') == 250 assert evaluate_expression(\'1+2+3+4-5-6\') == -1 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing integers and the + and - operators. total = 0 current_num = 0 sign = 1 # Starts with a positive sign for char in expression: if char.isdigit(): current_num = current_num * 10 + int(char) else: total += sign * current_num current_num = 0 sign = 1 if char == \'+\' else -1 total += sign * current_num # Add the last number return total"},{"question":"An online library system allows users to search for books by title, author, or ISBN, and tracks the borrowing history of each book. You need to design a function that can provide the borrowing frequency of a book based on its ISBN and suggest the top 3 most borrowed books similar to the queried book\'s genre. The function should be named `get_borrowing_frequency_and_suggestions` and should take the following parameters: - `isbn`: A string representing the ISBN of the queried book. - `book_data`: A list of dictionaries, where each dictionary represents a book with the following keys: - `isbn`: The ISBN of the book (string) - `title`: The title of the book (string) - `author`: The author of the book (string) - `genre`: The genre of the book (string) - `borrow_count`: An integer representing how many times the book has been borrowed The function should return a tuple `(frequency, suggestions)` where: - `frequency` is an integer representing the number of times the queried book has been borrowed. - `suggestions` is a list of the top 3 most borrowed books (their titles as strings) of the same genre as the queried book, sorted in descending order of their borrowing counts. If there are fewer than three books in the same genre, return as many as possible. Here is an example input and output: ```python book_data = [ {\\"isbn\\": \\"1111\\", \\"title\\": \\"Book A\\", \\"author\\": \\"Author 1\\", \\"genre\\": \\"Fiction\\", \\"borrow_count\\": 10}, {\\"isbn\\": \\"2222\\", \\"title\\": \\"Book B\\", \\"author\\": \\"Author 2\\", \\"genre\\": \\"Fiction\\", \\"borrow_count\\": 5}, {\\"isbn\\": \\"3333\\", \\"title\\": \\"Book C\\", \\"author\\": \\"Author 3\\", \\"genre\\": \\"Non-Fiction\\", \\"borrow_count\\": 12}, {\\"isbn\\": \\"4444\\", \\"title\\": \\"Book D\\", \\"author\\": \\"Author 4\\", \\"genre\\": \\"Fiction\\", \\"borrow_count\\": 7}, {\\"isbn\\": \\"5555\\", \\"title\\": \\"Book E\\", \\"author\\": \\"Author 5\\", \\"genre\\": \\"Non-Fiction\\", \\"borrow_count\\": 15} ] isbn = \\"1111\\" result = get_borrowing_frequency_and_suggestions(isbn, book_data) print(result) # (10, [\'Book D\', \'Book B\']) ``` You are expected to handle the search efficiently and return accurate borrowing frequencies and genre-based suggestions.","solution":"def get_borrowing_frequency_and_suggestions(isbn, book_data): # First, find the queried book queried_book = None for book in book_data: if book[\'isbn\'] == isbn: queried_book = book break # If the book is not found, return (0, []) if not queried_book: return (0, []) frequency = queried_book[\'borrow_count\'] # Find books of the same genre genre = queried_book[\'genre\'] similar_books = [book for book in book_data if book[\'genre\'] == genre and book[\'isbn\'] != isbn] # Sort similar books by borrow count in descending order similar_books.sort(key=lambda x: x[\'borrow_count\'], reverse=True) # Get the top 3 most borrowed books suggestions = [book[\'title\'] for book in similar_books[:3]] return (frequency, suggestions)"},{"question":"# Sudoku Solver In this problem, you are required to solve a Sudoku puzzle by filling the empty cells. A Sudoku solution must satisfy all of the following rules: 1. Each of the digits 1-9 must occur exactly once in each row. 2. Each of the digits 1-9 must occur exactly once in each column. 3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid. Your task is to implement the function `solveSudoku(board: List[List[str]]) -> None` that modifies the given Sudoku board in-place to solve the Sudoku puzzle. # Input: - `board`: a 2D list where each element is either a digit \'1\'-\'9\' or \'.\' indicating empty cells. # Example: ```python boardsolveSudoku(board) print(board) # Output: # [ # [\\"5\\",\\"3\\",\\"4\\",\\"6\\",\\"7\\",\\"8\\",\\"9\\",\\"1\\",\\"2\\"], # [\\"6\\",\\"7\\",\\"2\\",\\"1\\",\\"9\\",\\"5\\",\\"3\\",\\"4\\",\\"8\\"], # [\\"1\\",\\"9\\",\\"8\\",\\"3\\",\\"4\\",\\"2\\",\\"5\\",\\"6\\",\\"7\\"], # [\\"8\\",\\"5\\",\\"9\\",\\"7\\",\\"6\\",\\"1\\",\\"4\\",\\"2\\",\\"3\\"], # [\\"4\\",\\"2\\",\\"6\\",\\"8\\",\\"5\\",\\"3\\",\\"7\\",\\"9\\",\\"1\\"], # [\\"7\\",\\"1\\",\\"3\\",\\"9\\",\\"2\\",\\"4\\",\\"8\\",\\"5\\",\\"6\\"], # [\\"9\\",\\"6\\",\\"1\\",\\"5\\",\\"3\\",\\"7\\",\\"2\\",\\"8\\",\\"4\\"], # [\\"2\\",\\"8\\",\\"7\\",\\"4\\",\\"1\\",\\"9\\",\\"6\\",\\"3\\",\\"5\\"], # [\\"3\\",\\"4\\",\\"5\\",\\"2\\",\\"8\\",\\"6\\",\\"1\\",\\"7\\",\\"9\\"] # ] ``` # Constraints: - The input board has dimensions 9x9. - The input board is a valid Sudoku puzzle; however, it may not be solvable in every configuration. # Implementation Notes: Use backtracking to fill in the empty cells. Try filling cells with digits \'1\'-\'9\' and check the constraints at each step. If a step leads to a solution, return True. If not, backtrack and try the next possibility.","solution":"def solveSudoku(board): def is_valid(board, row, col, num): # check row for x in range(9): if board[row][x] == num: return False # check column for x in range(9): if board[x][col] == num: return False # check 3x3 sub-box startRow = row - row % 3 startCol = col - col % 3 for i in range(3): for j in range(3): if board[i + startRow][j + startCol] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == \\".\\": for num in \\"123456789\\": if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = \\".\\" return False return True solve(board)"},{"question":"You are asked to create a function that simulates a simple bidding system for an online auction. The function should determine the highest bid and the winner from the list of bids submitted by different users. Requirements: 1. Implement a function named `find_highest_bidder` that takes one parameter: - `bids`: A list of tuples where each tuple contains two elements: a string representing the user\'s name and an integer representing the bid amount. 2. The function should iterate through the list of bids to determine the highest bid and the corresponding user. 3. If there are multiple bids with the same highest amount, return the user who placed the bid first. 4. The function should return a tuple `(winner, highest_bid)`, where: - `winner` is a string containing the name of the user with the highest bid. - `highest_bid` is an integer representing the highest bid amount. Usage Example: ```python bids = [ (\\"Alice\\", 120), (\\"Bob\\", 150), (\\"Charlie\\", 150), (\\"Diana\\", 130) ] winner, highest_bid = find_highest_bidder(bids) print(winner) # Should print \\"Bob\\" print(highest_bid) # Should print 150 ``` Additional Constraints: - The input list `bids` will always contain at least one bid. - Each user name will be unique. - All bid amounts will be positive integers.","solution":"def find_highest_bidder(bids): Determines the highest bid and the corresponding bidder. Params: bids (list of tuples): A list of tuples where each tuple contains a user\'s name and their bid amount. Returns: tuple: A tuple containing the name of the user with the highest bid and the highest bid amount. highest_bid = -1 winner = \\"\\" for user, bid in bids: if bid > highest_bid: highest_bid = bid winner = user return winner, highest_bid"},{"question":"You are tasked with providing a function `findMaxPathSum(node)` that computes the maximum path sum in a binary tree. The path can start and end at any node in the tree, and it must contain at least one node. A node\'s path sum is the sum of the node values along the path. **Constraints:** - The value of each node in the binary tree varies between `-1000` and `1000`. - The number of nodes in the binary tree will not exceed `10^4`. To solve the problem, consider using depth-first search (DFS) to explore all possible paths and keep track of the maximum path sum encountered. **Function Signature:** ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findMaxPathSum(node: TreeNode) -> int: pass ``` # Example 1. Input: ```python root = TreeNode(-10) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) findMaxPathSum(root) ``` Output: `42` Explanation: - One of the paths yielding the maximum sum is 15 -> 20 -> 7 which results in the path sum 42. 2. Input: ```python root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) findMaxPathSum(root) ``` Output: `6` Explanation: - One of the paths yielding the maximum sum is 2 -> 1 -> 3 which results in the path sum 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def findMaxPathSum(root: TreeNode) -> int: def dfs(node): nonlocal max_path_sum if not node: return 0 # Get the maximum path sum for the left and right child, discard negative sums left_sum = max(dfs(node.left), 0) right_sum = max(dfs(node.right), 0) # Update the global maximum path sum with the current path sum through the current node current_path_sum = node.val + left_sum + right_sum max_path_sum = max(max_path_sum, current_path_sum) # Return the maximum path sum including current node towards one of its child directions return node.val + max(left_sum, right_sum) # Initialize global maximum path sum variable max_path_sum = float(\'-inf\') dfs(root) return max_path_sum"},{"question":"A project requires you to simulate a simple movie rental system where users can rent and return movies. You are tasked with implementing a function that manages the rental and return operations. # Requirements: 1. `manage_rentals` Function: - **Input**: - `operations`: A list of tuples where each tuple represents an operation. The first element of the tuple is a string (`\\"rent\\"` or `\\"return\\"`), and the second element is a string representing the movie title. - **Output**: - A dictionary with movie titles as keys and their status as values (`\\"rented\\"` or `\\"available\\"`). 2. **Functionality**: - If an operation is `\\"rent\\"`, the movie should be marked as `\\"rented\\"`. - If an operation is `\\"return\\"`, the movie should be marked as `\\"available\\"`. - If a movie that is already `\\"rented\\"` is attempted to be rented again, no change should be made. - If a movie that is `\\"available\\"` is attempted to be returned, no change should be made. - The status of the movies should be updated according to the sequence of operations provided. # Example: If the input to the function is: ```python operations = [(\\"rent\\", \\"Inception\\"), (\\"rent\\", \\"Interstellar\\"), (\\"return\\", \\"Inception\\"), (\\"rent\\", \\"Inception\\")] ``` The function should return: ```python { \\"Inception\\": \\"rented\\", \\"Interstellar\\": \\"rented\\" } ``` # Constraints: - Each movie title is unique in the list. - The list of operations will have at most 1000 elements. Write the function `manage_rentals(operations: list) -> dict`.","solution":"def manage_rentals(operations): rentals = {} for operation, title in operations: if operation == \\"rent\\": if title not in rentals or rentals[title] == \\"available\\": rentals[title] = \\"rented\\" elif operation == \\"return\\": if title in rentals and rentals[title] == \\"rented\\": rentals[title] = \\"available\\" return rentals"},{"question":"You are required to create a Python function named `calculate_stock_prices` that takes a list of stock tickers and fetches the current stock prices from a given API. This task will help you learn how to interact with an external API, parse JSON data, and handle basic data aggregation using Python. # Steps to follow: 1. **Input**: Accept a list of stock tickers. 2. **Fetch stock data**: For each ticker in the list, send a GET request to the given API endpoint to retrieve the current stock price. The API endpoint to fetch a stock\'s current price is: ``` https://api.example.com/stock/{ticker}/price ``` Replace `{ticker}` with the actual stock ticker. 3. **Parse the response**: If the API request is successful (HTTP status code 200), parse the response to extract the stock\'s current price. 4. **Output**: Create and return a dictionary where the keys are the stock tickers and the values are their respective current prices. # Requirements You must use the following libraries: - `requests.get` for making the API requests. - `json.loads` for parsing the JSON response. # Function Signature ```python def calculate_stock_prices(tickers): pass ``` **Note**: Ensure to handle exceptions, such as network errors or invalid responses, since they might occur during API requests.","solution":"import requests import json def calculate_stock_prices(tickers): Fetches the current stock prices for the given list of stock tickers. :param tickers: List of stock tickers :return: Dictionary with tickers as keys and their respective stock prices as values stock_prices = {} api_url = \'https://api.example.com/stock/{}/price\' for ticker in tickers: try: response = requests.get(api_url.format(ticker)) if response.status_code == 200: data = json.loads(response.text) stock_prices[ticker] = data[\'price\'] else: stock_prices[ticker] = None except Exception as e: stock_prices[ticker] = None return stock_prices"},{"question":"In this programming exercise, we are going to manipulate strings to create a simplified version of a \\"Word Ladder,\\" which is a well-known word transformation puzzle. # Task You are required to implement a function called `word_ladder` that transforms a given word into a target word by changing one character at a time. Each intermediate word must be a valid word from a provided set of dictionary words. # Function Signature ```python def word_ladder(start, end, dictionary): Finds the shortest transformation sequence from start to end such that only one character can be changed at a time and intermediate words must be in the dictionary. :param start: str. The initial word. :param end: str. The target word. :param dictionary: set. A set of valid words. :returns: list. A list representing the shortest sequence of words from start to end. ``` # Input - `start`: A string of length `m` representing the starting word. - `end`: A string of length `m` representing the target word. - `dictionary`: A set of strings representing the dictionary of valid words. # Output - A list of strings representing the shortest transformation sequence from `start` to `end`. If no such sequence exists, return an empty list. # Constraints - All words in `dictionary`, `start`, and `end` are of the same length. - You may assume there is no case sensitivity and all words are in lowercase. - You can use breadth-first search (BFS) to find the shortest path. # Example ```python start = \\"hit\\" end = \\"cog\\" dictionary = {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"} print(word_ladder(start, end, dictionary)) # Expected output: [\'hit\', \'hot\', \'dot\', \'dog\', \'cog\'] ``` In this example: - The transformation goes from \\"hit\\" to \\"cog\\" through valid intermediate words \\"hot\\", \\"dot\\", and \\"dog\\". - The words must be of the same length and only differ by one character from each other. - The output should be the shortest possible sequence from the start word to the end word using words in the provided dictionary.","solution":"from collections import deque def word_ladder(start, end, dictionary): if start == end: return [start] if end not in dictionary: return [] dictionary.add(start) dictionary.add(end) queue = deque([(start, [start])]) visited = set([start]) while queue: current_word, path = queue.popleft() if current_word == end: return path for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in dictionary and next_word not in visited: visited.add(next_word) queue.append((next_word, path + [next_word])) return []"},{"question":"You are required to write a Python function named `merge_sorted_lists` that merges two sorted lists into one sorted list. The function should: 1. Accept two arguments which are the lists to be merged. 2. Merge the lists while maintaining the sorted order without using built-in sorting functions like `sorted()` or `list.sort()`. 3. Return a new sorted list containing the elements from both lists. The function `merge_sorted_lists` should take the following arguments: - `list1` (type: list of int): The first sorted list. - `list2` (type: list of int): The second sorted list. The function should return: - (type: list of int): A merged sorted list containing all elements from `list1` and `list2`. **Example usage:** ```python result = merge_sorted_lists([1, 3, 5], [2, 4, 6]) print(result) ``` **Expected Output:** ``` [1, 2, 3, 4, 5, 6] ``` You are required to implement an efficient merging algorithm, similar to the one used in the merge step of the merge sort algorithm. The function should handle cases where one or both lists are empty.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list without using built-in sorting functions. Parameters: - list1: A sorted list of integers. - list2: A sorted list of integers. Returns: A merged sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Traverse both lists and insert smaller value from the two lists into merged_list while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1 while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are tasked with creating a function that uses list operations to manipulate and analyze a list of integers. The function will perform several operations to determine the number of unique elements that are divisible by a given divisor. Your task is to write a function named `unique_divisibles(numbers, divisor)` which returns the count of unique elements in the list `numbers` that are divisible by `divisor`. Function Signature: ```python def unique_divisibles(numbers: list, divisor: int) -> int: ... ``` - **Parameters**: - `numbers` (list): A list of integers. - `divisor` (int): The integer divisor. - **Returns**: - `int`: The count of unique elements in the list that are divisible by the divisor. # Requirements: 1. Use list operations to filter elements that are divisible by the divisor. 2. Ensure only unique elements are counted. 3. Your solution should be efficient and handle lists with large numbers of elements. # Example Usage: ```python unique_divisibles([10, 20, 30, 40, 50, 60, 10, 20], 10) ``` This should return `6` because the unique elements divisible by `10` are `[10, 20, 30, 40, 50, 60]`. ```python unique_divisibles([9, 18, 27, 36, 45, 54], 9) ``` This should return `6` because all elements in the list are divisible by `9` and they are all unique. # Additional Note: * Ensure that your function handles edge cases such as an empty list or a divisor of zero appropriately.","solution":"def unique_divisibles(numbers, divisor): Returns the count of unique elements in the list that are divisible by the divisor. if divisor == 0: raise ValueError(\\"Divisor cannot be zero.\\") unique_numbers = set(numbers) divisible_numbers = [num for num in unique_numbers if num % divisor == 0] return len(divisible_numbers)"},{"question":"** You are required to develop a command-line program that manages a small library system. This program will offer a menu to the user to handle actions like adding, listing, and removing books from the library. Specifically, implement a function named `run_library_system` that will facilitate the interaction through a menu and use `time.sleep` to create a pause effect as needed. Your tasks include: 1. Implement the `run_library_system` function which will show a menu to the user with various options. 2. Implement the following functionalities within the `run_library_system` function: - Option 1: Add a new book (`add_book` function, assume it’s predefined). - Option 2: List all books (`list_books` function, assume it’s predefined). - Option 3: Remove a book (`remove_book` function, assume it’s predefined). - Option 4: Exit the program. 3. Use `time.sleep` to add a delay of 1 second after displaying the \\"Exiting the Library System...\\" message. The menu should be displayed as follows: ``` ======== LIBRARY MENU ======== 1 - Add a new book 2 - List all books 3 - Remove a book 4 - Exit the Library System ============================= ``` Sample inputs and actions: - If the user inputs `1`, call the `add_book` function. - If the user inputs `2`, call the `list_books` function. - If the user inputs `3`, call the `remove_book` function. - If the user inputs `4`, exit the program with the delay effect. Ensure you handle necessary imports. **","solution":"import time def add_book(): Predefined function to add a book. print(\\"Adding a new book...\\") def list_books(): Predefined function to list all books. print(\\"Listing all books...\\") def remove_book(): Predefined function to remove a book. print(\\"Removing a book...\\") def run_library_system(): while True: print( ======== LIBRARY MENU ======== 1 - Add a new book 2 - List all books 3 - Remove a book 4 - Exit the Library System ============================= ) option = input(\\"Please enter a choice (1-4): \\") if option == \'1\': add_book() elif option == \'2\': list_books() elif option == \'3\': remove_book() elif option == \'4\': print(\\"Exiting the Library System...\\") time.sleep(1) break else: print(\\"Invalid option, please try again.\\")"},{"question":"You are required to write a function called `is_rotation` that checks if one string is a rotation of another string. A string `s1` is a rotation of another string `s2` if `s1` can be obtained by rotating `s2` around some pivot point. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". The function signature should be: ```python def is_rotation(s1: str, s2: str) -> bool: ``` **Function Parameters:** - `s1`: a string representing the first string. - `s2`: a string representing the second string. **Function Behavior:** 1. The function should return `True` if `s1` is a rotation of `s2`. 2. The function should return `False` otherwise. **Constraints:** - Both `s1` and `s2` will only contain lowercase alphabets and will not include spaces or special characters. - The function should only check for rotations and not permutations or any other rearrangement. **Hint:** - Consider the possibility of concatenating one of the strings with itself and using substring search. Example: ```python assert is_rotation(\\"waterbottle\\", \\"erbottlewat\\") == True assert is_rotation(\\"hello\\", \\"llohe\\") == True assert is_rotation(\\"hello\\", \\"olelh\\") == False assert is_rotation(\\"abc\\", \\"acb\\") == False ```","solution":"def is_rotation(s1: str, s2: str) -> bool: Check if s1 is a rotation of s2. :param s1: a string :param s2: a second string :return: True if s1 is a rotation of s2, otherwise False if len(s1) != len(s2): return False return s1 in s2 + s2"},{"question":"You are required to write a function for a simple inventory management system in a small retail store. The function will facilitate basic inventory operations such as adding items, updating item quantities, and listing items in the inventory. The function should be named `manage_inventory` and must follow these guidelines: 1. The function `manage_inventory` should take no parameters. 2. The inventory system should support the following operations: - `add item`: Add a new item to the inventory. Prompt the user to enter the item\'s name and quantity. Ensure the item does not already exist in the inventory. - `update item`: Update the quantity of an existing item. Prompt the user to enter the item\'s name and the new quantity. If the item does not exist, display an appropriate message. - `list items`: Display a list of all items in the inventory along with their quantities. 3. Your implementation should: - Use a dictionary to store inventory items where the keys are item names and the values are their respective quantities. - Provide a text-based menu to the user for selecting the operation (add, update, list, or exit). - Handle invalid menu options gracefully and prompt the user again if necessary. - Allow the user to exit the inventory management system by selecting the \'exit\' option in the menu. Example: For managing the inventory: ``` Input: Select an operation: 1. Add item 2. Update item 3. List items 4. Exit 1 (User selects Add item) Enter item name: apple Enter item quantity: 10 Item \'apple\' added with quantity 10. Input: Select an operation: 1. Add item 2. Update item 3. List items 4. Exit 2 (User selects Update item) Enter item name: apple Enter new quantity: 15 Quantity of \'apple\' updated to 15. Input: Select an operation: 1. Add item 2. Update item 3. List items 4. Exit 3 (User selects List items) Items in inventory: apple: 15 Input: Select an operation: 1. Add item 2. Update item 3. List items 4. Exit 4 (User selects Exit) ``` Additional Clarifications: - Ensure all updates to the inventory are reflected immediately. - Display appropriate messages for invalid operations or when attempting to update an item that does not exist. - Ensure the system runs continuously until the user selects the \'exit\' option.","solution":"def manage_inventory(): inventory = {} while True: print(\\"nSelect an operation:\\") print(\\"1. Add item\\") print(\\"2. Update item\\") print(\\"3. List items\\") print(\\"4. Exit\\") choice = input(\\"Enter your choice: \\") if choice == \'1\': item_name = input(\\"Enter item name: \\") if item_name in inventory: print(f\\"Item \'{item_name}\' already exists in the inventory.\\") else: try: item_quantity = int(input(\\"Enter item quantity: \\")) inventory[item_name] = item_quantity print(f\\"Item \'{item_name}\' added with quantity {item_quantity}.\\") except ValueError: print(\\"Invalid quantity. Please enter a number.\\") elif choice == \'2\': item_name = input(\\"Enter item name: \\") if item_name in inventory: try: item_quantity = int(input(\\"Enter new quantity: \\")) inventory[item_name] = item_quantity print(f\\"Quantity of \'{item_name}\' updated to {item_quantity}.\\") except ValueError: print(\\"Invalid quantity. Please enter a number.\\") else: print(f\\"Item \'{item_name}\' does not exist in the inventory.\\") elif choice == \'3\': if inventory: print(\\"Items in inventory:\\") for item_name, item_quantity in inventory.items(): print(f\\"{item_name}: {item_quantity}\\") else: print(\\"The inventory is empty.\\") elif choice == \'4\': print(\\"Exiting inventory management system.\\") break else: print(\\"Invalid choice. Please select a valid option.\\") # Uncomment to actually run the function in your environment if interactive input is supported: # manage_inventory()"},{"question":"You need to write a Python function named `group_consecutive` that takes an input list of integers and groups the consecutive numbers together as sublists within a list. Consecutive numbers are those numbers which follow each other directly, without any gaps, in ascending order. If the list is empty, the return value should be an empty list. Function Signature: ```python def group_consecutive(nums: list) -> list: pass ``` **Example:** Input: `[1, 2, 3, 6, 7, 8, 10, 11]` Output: `[[1, 2, 3], [6, 7, 8], [10, 11]]` Input: `[5, 6, 7, 9, 10, 12, 13, 14, 16]` Output: `[[5, 6, 7], [9, 10], [12, 13, 14], [16]]` **Hints:** 1. Iterate through the list and check the difference between consecutive elements to determine if they are consecutive numbers. 2. Use a temporary list to collect consecutive numbers and append this list to the result when a gap (non-consecutive number) is found. 3. Don\'t forget to append the final group of consecutive numbers after the loop ends.","solution":"def group_consecutive(nums: list) -> list: Groups consecutive integers from the input list into sublists. Parameters: nums (list): A list of integers to be grouped. Returns: list: A list of sublists, where each sublist contains consecutive integers. if not nums: return [] result = [] group = [nums[0]] for i in range(1, len(nums)): if nums[i] == nums[i - 1] + 1: group.append(nums[i]) else: result.append(group) group = [nums[i]] result.append(group) return result"},{"question":"In this problem, we will implement a function to perform matrix factorization using Gradient Descent. Matrix factorization is commonly used in recommendation systems, where the goal is to factorize a given matrix into two smaller matrices such that their product approximates the original matrix. You are provided with a function `train` to initialize the factor matrices and implement the Gradient Descent optimization process. Your task is to complete this `train` function and implement the cost function (`cost`) and its gradient (`gradient`). Function Signature ```python def train(R, K, steps, alpha, beta): Trains a matrix factorization model using Gradient Descent. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). K (int): Number of latent features. steps (int): Number of steps for Gradient Descent. alpha (float): Learning rate for Gradient Descent. beta (float): Regularization parameter. Returns: tuple: Tuple containing optimized matrices P and Q of shapes (m, K) and (K, n). pass def cost(R, P, Q, beta): Computes the cost function for matrix factorization with regularization. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). P (numpy.ndarray): User feature matrix of shape (m, K). Q (numpy.ndarray): Item feature matrix of shape (K, n). beta (float): Regularization parameter. Returns: float: Computed cost. pass def gradient(R, P, Q, beta): Computes the gradient of the cost function for matrix factorization. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). P (numpy.ndarray): User feature matrix of shape (m, K). Q (numpy.ndarray): Item feature matrix of shape (K, n). beta (float): Regularization parameter. Returns: tuple: Tuple containing gradients dP and dQ of shapes (m, K) and (K, n). pass ``` # Input - `R` (numpy.ndarray): A 2-dimensional array with shape `(m, n)` where `m` is the number of users and `n` is the number of items. Elements represent user-item ratings. - `K` (int): The number of latent features. - `steps` (int): Number of iterations for the Gradient Descent. - `alpha` (float): Learning rate for Gradient Descent. - `beta` (float): Regularization parameter which helps to prevent overfitting by penalizing large factor values. # Output - Returns a tuple containing two 2-dimensional numpy arrays: - `P`: User feature matrix of shape `(m, K)`. - `Q`: Item feature matrix of shape `(K, n)`. # Example ```python import numpy as np # Sample data R = np.array([[5, 3, 0, 1], [4, 0, 0, 1], [1, 1, 0, 5], [1, 0, 0, 4], [0, 1, 5, 4]]) K = 2 steps = 5000 alpha = 0.002 beta = 0.02 # Function call P, Q = train(R, K, steps, alpha, beta) # Print resulting factor matrices print(\\"P:\\", P) print(\\"Q:\\", Q) ``` Notes 1. You need to use vectorized operations to ensure efficiency. 2. Start by initializing the matrices `P` and `Q` with small random values. 3. During each step of Gradient Descent, update `P` and `Q` using the computed gradients. 4. Add regularization terms to both the cost function and the gradients.","solution":"import numpy as np def train(R, K, steps, alpha, beta): Trains a matrix factorization model using Gradient Descent. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). K (int): Number of latent features. steps (int): Number of steps for Gradient Descent. alpha (float): Learning rate for Gradient Descent. beta (float): Regularization parameter. Returns: tuple: Tuple containing optimized matrices P and Q of shapes (m, K) and (K, n). m, n = R.shape P = np.random.rand(m, K) Q = np.random.rand(n, K).T for step in range(steps): # Compute the gradients dP, dQ = gradient(R, P, Q, beta) # Update the factor matrices P -= alpha * dP Q -= alpha * dQ # Optionally, print the cost at each step for debugging purposes cost_val = cost(R, P, Q, beta) if step % 1000 == 0: print(f\\"Step: {step}, cost: {cost_val}\\") return P, Q def cost(R, P, Q, beta): Computes the cost function for matrix factorization with regularization. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). P (numpy.ndarray): User feature matrix of shape (m, K). Q (numpy.ndarray): Item feature matrix of shape (K, n). beta (float): Regularization parameter. Returns: float: Computed cost. error = R - np.dot(P, Q) cost = (np.square(error[R > 0]) + beta * (np.sum(np.square(P)) + np.sum(np.square(Q)))).sum() return cost def gradient(R, P, Q, beta): Computes the gradient of the cost function for matrix factorization. Parameters: R (numpy.ndarray): Input ratings matrix of shape (m, n). P (numpy.ndarray): User feature matrix of shape (m, K). Q (numpy.ndarray): Item feature matrix of shape (K, n). beta (float): Regularization parameter. Returns: tuple: Tuple containing gradients dP and dQ of shapes (m, K) and (K, n). error = R - np.dot(P, Q) dP = -2 * np.dot(error, Q.T) + 2 * beta * P dQ = -2 * np.dot(error.T, P).T + 2 * beta * Q return dP, dQ"},{"question":"**Objective:** You are tasked with writing a function that normalizes the rows of a 2D array using the `numpy.linalg.norm` function from the NumPy library. **Context:** Normalizing data is a common preprocessing step in machine learning algorithms to ensure each feature contributes equally. Given a 2D array, your goal is to normalize each row so that it has a unit norm (i.e., the sum of the squares of its elements equals one). **Function to Write:** `normalizeRows(X)` **Parameters:** 1. `X` (numpy.ndarray): A 2D array of shape `(m, n)` representing the dataset, where `m` is the number of samples and `n` is the number of features for each sample. **Returns:** - `normalized_X` (numpy.ndarray): A 2D array of shape `(m, n)` containing the normalized rows of `X`. **Instructions:** 1. Create a 2D array `normalized_X` with the same shape as `X`. 2. For each row in `X`, compute its Euclidean norm. 3. Divide each element in the row by its Euclidean norm. 4. Return the resulting array of normalized rows. **Restrictions:** - You must use `numpy.linalg.norm` to compute the Euclidean norm of each row. **Example:** ```python import numpy as np X = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) normalized_X = normalizeRows(X) print(normalized_X) # Expected output: # [[0.26726124 0.53452248 0.80178373] # [0.45584231 0.56980288 0.68376346] # [0.50257071 0.57436653 0.64616234]] ```","solution":"import numpy as np def normalizeRows(X): Normalizes each row of the 2D array X to have unit norm. Args: X (numpy.ndarray): A 2D array of shape (m, n) where m is the number of samples and n is the number of features. Returns: numpy.ndarray: A 2D array of shape (m, n) with each row normalized to have unit norm. # Calculate the norm of each row norms = np.linalg.norm(X, axis=1, keepdims=True) # Avoid division by zero norms[norms == 0] = 1 # Normalize each row normalized_X = X / norms return normalized_X"},{"question":"You are tasked with writing a function named `categorize_students_by_grade` that takes a list of tuples as a parameter. Each tuple contains a student\'s name and their grade. The purpose of this function is to categorize students based on their grades and return a dictionary where the keys are grade categories (i.e., \'A\', \'B\', \'C\', \'D\', \'F\') and the values are lists of student names who fall into each category. # Function Signature ```python def categorize_students_by_grade(students: List[Tuple[str, float]]) -> Dict[str, List[str]]: ``` # Steps: 1. Initialize an empty dictionary with keys for each grade category: \'A\', \'B\', \'C\', \'D\', \'F\'. 2. Iterate through the list of students and their grades. 3. Determine the grade category for each student based on the following criteria: - \'A\': 90 <= grade <= 100 - \'B\': 80 <= grade < 90 - \'C\': 70 <= grade < 80 - \'D\': 60 <= grade < 70 - \'F\': grade < 60 4. Append the student\'s name to the corresponding category list in the dictionary. 5. Return the dictionary with categorized student names. # Constraints: - Assume the grade for each student is always a floating-point number between 0 and 100, inclusive. - The list of students will not be empty. # Example: Suppose the input list is: ```python students = [ (\'Alice\', 95), (\'Bob\', 82), (\'Charlie\', 78), (\'David\', 65), (\'Eva\', 55) ] ``` Calling `categorize_students_by_grade(students)` should return: ```python { \'A\': [\'Alice\'], \'B\': [\'Bob\'], \'C\': [\'Charlie\'], \'D\': [\'David\'], \'F\': [\'Eva\'] } ```","solution":"from typing import List, Tuple, Dict def categorize_students_by_grade(students: List[Tuple[str, float]]) -> Dict[str, List[str]]: Categorizes students based on their grades. Parameters: students (List[Tuple[str, float]]): A list of tuples where each tuple contains a student\'s name and their grade. Returns: Dict[str, List[str]]: A dictionary with keys as grade categories (\'A\', \'B\', \'C\', \'D\', \'F\') and values as lists of student names who fall into each category. categories = {\'A\': [], \'B\': [], \'C\': [], \'D\': [], \'F\': []} for student, grade in students: if 90 <= grade <= 100: categories[\'A\'].append(student) elif 80 <= grade < 90: categories[\'B\'].append(student) elif 70 <= grade < 80: categories[\'C\'].append(student) elif 60 <= grade < 70: categories[\'D\'].append(student) else: categories[\'F\'].append(student) return categories"},{"question":"You are developing an e-commerce application and need to create a function that organizes a list of transactions. Each transaction includes a customer ID, product ID, and timestamp. Write a Python function named `organize_transactions` which takes the following parameters: - `transactions`: A list of dictionaries, where each dictionary represents a transaction with the keys: - `\'customer_id\'`: An integer representing the unique ID of the customer. - `\'product_id\'`: An integer representing the unique ID of the product. - `\'timestamp\'`: A string representing the time of the transaction in `YYYY-MM-DD HH:MM:SS` format. - `sort_by`: A string that can either be `\'customer_id\'` or `\'timestamp\'`, determining the primary attribute to sort the transactions by. In case of ties, the secondary sorting criteria is `product_id`. Your task is to return a list of transactions sorted according to the specified criteria using Python\'s built-in sorting functions. # Function Signature ```python def organize_transactions(transactions: list, sort_by: str) -> list: ``` # Example ```python # Example input transactions = [ {\'customer_id\': 2, \'product_id\': 1, \'timestamp\': \'2023-03-15 14:12:00\'}, {\'customer_id\': 1, \'product_id\': 3, \'timestamp\': \'2023-03-14 15:00:00\'}, {\'customer_id\': 1, \'product_id\': 2, \'timestamp\': \'2023-03-14 14:30:00\'}, {\'customer_id\': 3, \'product_id\': 1, \'timestamp\': \'2023-03-15 14:00:00\'} ] sort_by = \'customer_id\' # Organize transactions sorted_transactions = organize_transactions(transactions, sort_by) for transaction in sorted_transactions: print(transaction) ``` Expected Output: ``` {\'customer_id\': 1, \'product_id\': 2, \'timestamp\': \'2023-03-14 14:30:00\'} {\'customer_id\': 1, \'product_id\': 3, \'timestamp\': \'2023-03-14 15:00:00\'} {\'customer_id\': 2, \'product_id\': 1, \'timestamp\': \'2023-03-15 14:12:00\'} {\'customer_id\': 3, \'product_id\': 1, \'timestamp\': \'2023-03-15 14:00:00\'} ``` # Constraints 1. Each key in the transaction dictionaries is guaranteed to be present. 2. The `timestamp` will always be in a valid `YYYY-MM-DD HH:MM:SS` format. 3. The `sort_by` parameter will always be either `\'customer_id\'` or `\'timestamp\'`.","solution":"def organize_transactions(transactions, sort_by): Organizes a list of transactions according to the provided attribute. Parameters: transactions (list of dict): List of transactions where each transaction is a dictionary. sort_by (str): The primary attribute to sort by, either \'customer_id\' or \'timestamp\'. Returns: list of dict: Sorted list of transactions. if sort_by == \'customer_id\': return sorted(transactions, key=lambda x: (x[\'customer_id\'], x[\'product_id\'])) elif sort_by == \'timestamp\': return sorted(transactions, key=lambda x: (x[\'timestamp\'], x[\'product_id\'])) else: raise ValueError(\\"Invalid sort_by value. Must be \'customer_id\' or \'timestamp\'.\\")"},{"question":"Write a function called `batch_rename_files` that renames a batch of files in a directory based on a common prefix and a numeric sequence. The function should accept three parameters: 1. `directory`: A string representing the path to the directory containing the files to be renamed. 2. `prefix`: A string to be used as the prefix for the renamed files. 3. `start_number`: An integer from which the numeric sequence will start for the renaming process. Your function should rename all files in the specified directory by applying the given prefix followed by an increasing number starting from `start_number`. The renamed files should use the same file extension as the original files. You may use the following functions and modules: - `os.listdir()`: To get the list of files in a directory. - `os.path.splitext()`: To split the filename into name and extension. - `os.rename()`: To rename each file. Ensure you handle any potential exceptions that could occur during file operations. # Example: Given the following files in a directory `/example/path`: ``` file1.txt, file2.txt, example.jpg ``` Invoke `batch_rename_files(\'/example/path\', \'newfile_\', 100)`. Expected output: After running the function, the new filenames should be: ``` newfile_100.txt, newfile_101.txt, newfile_102.jpg ``` # Constraints: - The `directory` parameter must be a valid directory path. - The `prefix` and `start_number` must be valid and non-empty. - Ensure the files are renamed sequentially, following the numeric order starting from `start_number`. Your task is to implement the `batch_rename_files` function, adhering to the mentioned requirements.","solution":"import os def batch_rename_files(directory, prefix, start_number): Renames all files in the given directory with the specified prefix starting from the start_number. Args: - directory (str): Path to the directory containing the files to be renamed. - prefix (str): Prefix for the renamed files. - start_number (int): Number from which the sequence will start for renaming files. Raises: - Exception: If directory does not exist or there is any error during renaming. try: if not os.path.isdir(directory): raise Exception(f\\"The directory \'{directory}\' does not exist.\\") files = os.listdir(directory) num = start_number for file_name in files: # Skip directories if os.path.isdir(os.path.join(directory, file_name)): continue file_base, file_ext = os.path.splitext(file_name) new_file_name = f\\"{prefix}{num}{file_ext}\\" os.rename(os.path.join(directory, file_name), os.path.join(directory, new_file_name)) num += 1 except Exception as e: raise Exception(f\\"An error occurred: {e}\\")"},{"question":"You have been asked to implement a function that simulates a simplified version of a file system, which includes file creation, deletion, and reading the file contents. This problem will help you get familiar with data structures, particularly dictionaries to simulate the file system. Problem Details In this simplified file system, you need to implement three key operations: create, delete, and read files. The function you need to implement is `simulate_file_system` and it should follow these requirements: 1. Accept a list of operations as input. Each operation is a tuple where the first element is a string indicating the operation type: \\"create\\", \\"delete\\", or \\"read\\". The subsequent elements depend on the operation type: - \\"create\\": (\\"create\\", file_name, content). This creates a file with the given file_name and content. - \\"delete\\": (\\"delete\\", file_name). This deletes the file with the given file_name. - \\"read\\": (\\"read\\", file_name). This reads the content of the file with the given file_name. 2. Execute the operations in the order they are provided. 3. Collect the results of \\"read\\" operations in the same order as they appear. **Function Signature:** ```python def simulate_file_system(operations: List[Tuple[str, ...]]) -> List[str]: ``` Constraints - Assume all file names are unique and consist only of lowercase letters with no spaces. - Assume the content of the file is a string. - The \\"create\\" operation will not be called for a file that already exists. - The \\"read\\" and \\"delete\\" operations will be called for files that exist. # Example ```python operations = [ (\\"create\\", \\"file1\\", \\"Hello, World!\\"), (\\"create\\", \\"file2\\", \\"Python Programming\\"), (\\"read\\", \\"file1\\"), (\\"delete\\", \\"file1\\"), (\\"create\\", \\"file3\\", \\"Algorithms\\"), (\\"read\\", \\"file3\\"), ] result = simulate_file_system(operations) # Example Output: [\\"Hello, World!\\", \\"Algorithms\\"] ``` Hints - Use a dictionary to store file names as keys and their contents as values. - Ensure you correctly handle the sequence of operations and return results of \\"read\\" operations in the correct order.","solution":"def simulate_file_system(operations): file_system = {} result = [] for operation in operations: op_type = operation[0] if op_type == \\"create\\": file_name, content = operation[1], operation[2] file_system[file_name] = content elif op_type == \\"delete\\": file_name = operation[1] if file_name in file_system: del file_system[file_name] elif op_type == \\"read\\": file_name = operation[1] if file_name in file_system: result.append(file_system[file_name]) return result"},{"question":"You are required to write a Python function `merge_dicts(dict_list)`. This function takes a list of dictionaries as its input and merges them into a single dictionary. If there are duplicate keys across the dictionaries, their values should be aggregated in a list. You are explicitly required to use the `collections.defaultdict` library in your solution. The function should return this merged dictionary. **Function Signature:** ```python def merge_dicts(dict_list: list) -> dict: pass ``` **Parameters:** 1. `dict_list` (list): A list of dictionaries to be merged. **Output:** The function should return a `defaultdict` where: - `keys` are the keys from the original dictionaries. - `values` are lists containing all values associated with each key across the input dictionaries. **Example:** Assume the input list of dictionaries is as follows: ```python [ {\'a\': 1, \'b\': 2}, {\'a\': 3, \'c\': 4}, {\'b\': 5, \'c\': 6, \'d\': 7} ] ``` Calling `merge_dicts(dict_list)` should produce: ```python defaultdict(<class \'list\'>, { \'a\': [1, 3], \'b\': [2, 5], \'c\': [4, 6], \'d\': [7] }) ```","solution":"from collections import defaultdict def merge_dicts(dict_list): Merges a list of dictionaries into a single defaultdict. If there are duplicate keys, their values are aggregated in a list. Parameters: dict_list (list): A list of dictionaries to be merged. Returns: defaultdict: A defaultdict with lists of aggregated values. merged_dict = defaultdict(list) for d in dict_list: for key, value in d.items(): merged_dict[key].append(value) return merged_dict"},{"question":"You are required to write a Python function called `find_duplicate_numbers` that takes a list of integers and returns a list of duplicate numbers in the same order they first appear in the input list. The function should have a linear time complexity, O(n), and a constant space complexity, O(1), excluding the space required for the input and output. # Function Signature ```python def find_duplicate_numbers(numbers: list[int]) -> list[int]: ``` # Arguments - `numbers`: A list of integers where integers can appear multiple times. # Expected Behavior 1. The function should iterate through the input list and identify duplicates. 2. It should return a list containing the duplicates in the order they were first encountered. # Example ```python find_duplicate_numbers([4, 5, 6, 7, 5, 4, 6]) ``` Output: ```python [4, 5, 6] ``` # Constraints - The input list may contain any integer values. - Try to avoid using built-in Python functions like `set` or `collections.Counter` to ensure you maintain the required time and space complexities. # Libraries No additional libraries should be used for solving this task. The solution should be implemented using basic Python constructs only.","solution":"def find_duplicate_numbers(numbers: list[int]) -> list[int]: This function takes a list of integers and returns a list of duplicate numbers in the same order they first appear in the input list. duplicates = [] seen = set() for number in numbers: if number in seen: if number not in duplicates: duplicates.append(number) else: seen.add(number) return duplicates"},{"question":"Write a function named `find_k_nearest_points` that finds the `k` nearest points to a given target point in a 2D space. The function should take three inputs: a list of 2D points, each represented as a tuple `(x, y)`, an integer `k`, and a target point, also represented as a tuple `(x, y)`. The function needs to perform the following steps: 1. Calculate the Euclidean distance between the target point and each of the points in the list. 2. Sort the points based on their distances to the target point. 3. Return a list of the `k` nearest points to the target point. Your implementation should make use of the `numpy` library for distance calculation and sorting. Function Signature: ```python def find_k_nearest_points(points: list, k: int, target: tuple) -> list: ``` Example: ```python points = [(1, 2), (3, 4), (1, -1), (-2, 2), (2, 3)] k = 2 target = (0, 0) nearest_points = find_k_nearest_points(points, k, target) print(f\\"The {k} nearest points to {target} are: {nearest_points}\\") ``` Hints: 1. You can use `numpy.linalg.norm` to compute the Euclidean distance. 2. Sort the points by their computed distances without explicitly creating a separate list of distances. 3. Make sure to handle the edge cases, such as when `k` is greater than the number of points available. Constraints: - The input list will have at least one point. - (1 leq k leq text{{len(points)}}).","solution":"import numpy as np def find_k_nearest_points(points: list, k: int, target: tuple) -> list: Finds the k nearest points to a given target point in a 2D space. Parameters: points (list): List of tuples representing points in 2D space. k (int): Number of nearest points to find. target (tuple): The target point (x, y). Returns: list: List of k nearest points to the target point. def euclidean_distance(point): return np.linalg.norm(np.array(point) - np.array(target)) sorted_points = sorted(points, key=euclidean_distance) return sorted_points[:k]"},{"question":"``` Create a function that takes as input an image represented as a 2D numpy array, applies a gaussian blur to the image, and then performs edge detection using the Sobel operator. The function should output: tuple: A tuple containing: - numpy.ndarray: The blurred image. - numpy.ndarray: The edge-detected image. You should write self-contained code starting with: ``` import numpy as np import scipy.ndimage as ndimage import matplotlib.pyplot as plt def gaussian_blur_and_edge_detection(image, sigma=1.0): Apply Gaussian blur to the input image and perform edge detection using the Sobel operator. Parameters: image (numpy.ndarray): The input image as a 2D numpy array. sigma (float): The standard deviation for Gaussian kernel. Default is 1.0. Returns: tuple: A tuple containing: - numpy.ndarray: The blurred image. - numpy.ndarray: The edge-detected image. # Apply Gaussian blur blurred_image = ndimage.gaussian_filter(image, sigma=sigma) # Apply Sobel operator for edge detection sobel_dx = ndimage.sobel(blurred_image, axis=0) sobel_dy = ndimage.sobel(blurred_image, axis=1) edge_detected_image = np.hypot(sobel_dx, sobel_dy) # Plot the original, blurred, and edge-detected images fig, axes = plt.subplots(1, 3, figsize=(15, 5)) axes[0].imshow(image, cmap=\'gray\') axes[0].set_title(\'Original Image\') axes[1].imshow(blurred_image, cmap=\'gray\') axes[1].set_title(\'Blurred Image\') axes[2].imshow(edge_detected_image, cmap=\'gray\') axes[2].set_title(\'Edge-Detected Image\') plt.show() return blurred_image, edge_detected_image ``` ```","solution":"import numpy as np import scipy.ndimage as ndimage import matplotlib.pyplot as plt def gaussian_blur_and_edge_detection(image, sigma=1.0): Apply Gaussian blur to the input image and perform edge detection using the Sobel operator. Parameters: image (numpy.ndarray): The input image as a 2D numpy array. sigma (float): The standard deviation for Gaussian kernel. Default is 1.0. Returns: tuple: A tuple containing: - numpy.ndarray: The blurred image. - numpy.ndarray: The edge-detected image. # Apply Gaussian blur blurred_image = ndimage.gaussian_filter(image, sigma=sigma) # Apply Sobel operator for edge detection sobel_dx = ndimage.sobel(blurred_image, axis=0) sobel_dy = ndimage.sobel(blurred_image, axis=1) edge_detected_image = np.hypot(sobel_dx, sobel_dy) # Plot the original, blurred, and edge-detected images fig, axes = plt.subplots(1, 3, figsize=(15, 5)) axes[0].imshow(image, cmap=\'gray\') axes[0].set_title(\'Original Image\') axes[1].imshow(blurred_image, cmap=\'gray\') axes[1].set_title(\'Blurred Image\') axes[2].imshow(edge_detected_image, cmap=\'gray\') axes[2].set_title(\'Edge-Detected Image\') plt.show() return blurred_image, edge_detected_image"},{"question":"Create a function named `count_characters` that takes a string `s` as input and returns a dictionary where the keys are the characters in the string and the values are the frequencies of those characters. This function should ignore case, meaning \'A\' and \'a\' should be counted as the same character. Additionally, non-alphabetic characters should be excluded from the count. This problem will help you practice string manipulation, dictionary operations, and character filtering. # Task 1. Define a function called `count_characters(s)`. 2. Inside the function, convert the string to lowercase to ensure case insensitivity. 3. Use a dictionary to keep track of character frequencies. 4. Iterate over each character in the string. 5. If the character is alphabetic, update the dictionary to reflect the frequency of the character. 6. Return the dictionary containing character frequencies. # Example ```python count = count_characters(\\"Hello, World!\\") print(count) ``` Output: ```python {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} ``` # Constraints: - The input string `s` will only contain printable ASCII characters (values from 32 to 126). - The function must not differentiate between uppercase and lowercase letters. - Non-alphabetic characters should not be included in the frequency count.","solution":"def count_characters(s): Returns a dictionary where the keys are the alphabetic characters in the string (case insensitive) \'s\' and the values are the frequencies of those characters. Non-alphabetic characters are excluded. s = s.lower() char_count = {} for char in s: if char.isalpha(): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count # Example usage # count = count_characters(\\"Hello, World!\\") # print(count) # Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1}"},{"question":"Write a function that determines if it is possible to transform one string into another using at most one edit. An edit is defined as: 1. Inserting a single character. 2. Removing a single character. 3. Replacing a single character. The function should follow this signature: ```python def one_edit_away(first: str, second: str) -> bool: This function determines if one string can be transformed into the other using at most one edit (insert, remove, or replace a character). Parameters: first (str): The first string. second (str): The second string. Returns: bool: True if the transformation is possible with one or zero edits, False otherwise. ``` **Input:** - Two strings `first` and `second`. **Output:** - A boolean indicating whether the transformation is possible with at most one edit. **Example:** ```python first = \\"pale\\" second = \\"ple\\" output = one_edit_away(first, second) # Output should be: True first = \\"pales\\" second = \\"pale\\" output = one_edit_away(first, second) # Output should be: True first = \\"pale\\" second = \\"bale\\" output = one_edit_away(first, second) # Output should be: True first = \\"pale\\" second = \\"bae\\" output = one_edit_away(first, second) # Output should be: False ``` In these examples: - `\\"pale\\"` can be transformed to `\\"ple\\"` by removing `\'a\'`, to `\\"pales\\"` by inserting `\'s\'`, and to `\\"bale\\"` by replacing the first character `\'p\'` with `\'b\'`. - The transformation between `\\"pale\\"` and `\\"bae\\"` requires two edits (removing `\'l\'` and changing `\'p\'` to `\'b\'`), which is why it returns `False`.","solution":"def one_edit_away(first: str, second: str) -> bool: len1, len2 = len(first), len(second) # If the length difference is more than 1, it\'s not possible with only one edit if abs(len1 - len2) > 1: return False # Assign pointers for both strings i, j = 0, 0 found_difference = False while i < len1 and j < len2: if first[i] != second[j]: # If a difference has already been found, return False if found_difference: return False found_difference = True # If lengths of the strings are same, just move both pointers if len1 == len2: i += 1 j += 1 elif len1 > len2: i += 1 else: j += 1 else: i += 1 j += 1 return True"},{"question":"You are given a dataset representing different vehicles including their fuel efficiency measured in miles per gallon (MPG), and other features like weight, horsepower, and number of cylinders. Your task is to build a linear regression model to predict the MPG of a vehicle based on its weight, horsepower, and number of cylinders. You need to create a function, `train_and_evaluate_model`, which takes the following inputs: - `data`: A 2D numpy array of shape (n_samples, 4) containing the dataset. The first column represents the weight, the second column represents the horsepower, the third column represents the number of cylinders, and the fourth column represents the MPG (target variable). - `test_size`: A float representing the proportion of the dataset to include in the test split (e.g., 0.2 for 20%). Your task is to: 1. Split the dataset into training and testing sets based on `test_size`. 2. Train a linear regression model using the training set. 3. Evaluate the model using the testing set and return the Mean Absolute Error (MAE). **Function Signature:** ```python def train_and_evaluate_model(data, test_size): # Function implementation pass ``` **Example Usage:** ```python import numpy as np data = np.array([[3500, 130, 6, 18], [2400, 95, 4, 24], [2700, 150, 6, 20], [3200, 140, 8, 15], [3600, 160, 8, 14], [2550, 120, 4, 22]]) test_size = 0.33 mae = train_and_evaluate_model(data, test_size) print(f\\"Mean Absolute Error (MAE): {mae:.2f}\\") ``` **Note:** - Use `sklearn.model_selection.train_test_split` to split the dataset. - Use `sklearn.linear_model.LinearRegression` to train the model. - Use `sklearn.metrics.mean_absolute_error` to calculate the MAE. This problem will help you practice building and evaluating linear regression models, performing dataset splitting, and calculating error metrics using Scikit-Learn.","solution":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_absolute_error def train_and_evaluate_model(data, test_size): Train a linear regression model to predict MPG based on weight, horsepower, and number of cylinders. Parameters: - data: 2D numpy array of shape (n_samples, 4) The first column is weight, the second is horsepower, the third is number of cylinders, and the fourth is MPG. - test_size: float The proportion of the dataset to include in the test split. Returns: - mae: float The Mean Absolute Error of the model on the test set. # Split the data X = data[:, :3] # Features: weight, horsepower, number of cylinders y = data[:, 3] # Target: MPG X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42) # Train the model model = LinearRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Calculate Mean Absolute Error mae = mean_absolute_error(y_test, y_pred) return mae"},{"question":"In this task, you need to create a function called `generate_matrix_diagonal_sum` that takes an integer `n` as input and generates an `n x n` matrix filled with random integers between 1 and 100. The function should then return the sum of the diagonal elements of the matrix. The main diagonal consists of the elements from the top-left to the bottom-right of the matrix. **Steps to Follow**: 1. **Generate the Matrix**: - Create an `n x n` matrix where each element is a random integer between 1 to 100. 2. **Calculate Diagonal Sum**: - Compute the sum of the diagonal elements of the matrix. **Function Signature**: ```python def generate_matrix_diagonal_sum(n: int) -> int: pass ``` **Libraries**: - `random`: Standard Python library for generating random numbers. **Example**: ```python # Example input n = 3 # Example matrix generated (values will vary due to randomness) # [ # [10, 20, 30], # [40, 50, 60], # [70, 80, 90] # ] # Sum of the diagonal elements: 10 + 50 + 90 = 150 result = generate_matrix_diagonal_sum(n) print(result) # Output: 150 (result will vary as matrix values are random) ``` This function should handle the generation of the matrix and calculation of the sum of its diagonal elements.","solution":"import random def generate_matrix_diagonal_sum(n: int) -> int: # Generate the n x n matrix with random integers between 1 and 100 matrix = [[random.randint(1, 100) for _ in range(n)] for _ in range(n)] # Calculate the sum of the main diagonal elements diagonal_sum = sum(matrix[i][i] for i in range(n)) return diagonal_sum"},{"question":"**Problem Title: Temperature Fluctuation Analysis** In this problem, you are required to create a function to analyze temperature fluctuations within an array of integer values representing daily temperatures. The goal is to identify the longest period of consistent, non-decreasing temperatures. **Function Name**: `longest_non_decreasing_period` **Function Description**: 1. **Input/Output Requirements**: - The function takes a single input: a list of integers representing daily temperatures. - It returns an integer representing the length of the longest period of non-decreasing temperatures. 2. **Implementation Details**: - Define the function `longest_non_decreasing_period(temperatures: List[int]) -> int`. - Iterate through the list of temperatures to determine the length of each consecutive non-decreasing sequence. - Keep track of the maximum length encountered during this iteration. - If the list is empty, the function should return 0. Example: ```python # Test Case 1 temperatures = [30, 32, 32, 31, 34, 35, 36, 33, 33, 34] result = longest_non_decreasing_period(temperatures) # Expected Output: 4 # Test Case 2 temperatures = [40, 39, 38, 37] result = longest_non_decreasing_period(temperatures) # Expected Output: 1 ``` **Additional Notes**: - Ensure only non-decreasing sequences (i.e., each element is greater than or equal to the previous one) are considered. - The function should handle edge cases like empty lists or lists with all identical elements effectively.","solution":"from typing import List def longest_non_decreasing_period(temperatures: List[int]) -> int: if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] >= temperatures[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are required to implement a function named `canArrangePalindrome` that determines if it\'s possible to rearrange the characters in a given string `s` to form a palindrome. The function should return `True` if it\'s possible, otherwise return `False`. Function Signature ```python def canArrangePalindrome(s: str) -> bool: ... ``` Parameters - `s` (str): The input string. Returns - `bool`: `True` if it is possible to rearrange the characters to form a palindrome, otherwise `False`. Requirements 1. You may assume that the input string only contains lowercase letters (`a-z`). # Example ```python # Example 1 result = canArrangePalindrome(\\"civic\\") # Output: True (Already a palindrome) # Example 2 result = canArrangePalindrome(\\"ivicc\\") # Output: True (Can be rearranged to \\"civic\\" or \\"vicic\\") # Example 3 result = canArrangePalindrome(\\"hello\\") # Output: False (Cannot be rearranged to form a palindrome) # Example 4 result = canArrangePalindrome(\\"aabb\\") # Output: True (Can be rearranged to \\"abba\\" or \\"baab\\") ``` # Tips 1. For a string to be rearranged into a palindrome, at most one character can have an odd count (for strings with odd length). All characters must have even counts otherwise. 2. Utilize a dictionary or `collections.Counter` to count frequencies of each character and evaluate the conditions accordingly. This problem will help you understand how to handle character frequency counts and apply logical conditions to determine the feasibility of rearranging characters to form a palindrome.","solution":"from collections import Counter def canArrangePalindrome(s: str) -> bool: Determines if it\'s possible to rearrange characters of the string `s` to form a palindrome. char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, # at most one character count can be odd return odd_count <= 1"},{"question":"```python import pandas as pd def task_func(df): Given a pandas DataFrame with numerical columns, normalize each column to have mean 0 and variance 1. Args: df (DataFrame): A pandas DataFrame with numerical columns. Returns: DataFrame: A DataFrame with the normalized columns. normalized_df = (df - df.mean()) / df.std() return normalized_df ``` Sample DataFrame: ``` data = { \'A\': [1, 2, 3, 4, 5], \'B\': [10, 20, 30, 40, 50], \'C\': [100, 200, 300, 400, 500] } df = pd.DataFrame(data) ``` Expected Output: ``` A B C 0 -1.264911 -1.264911 -1.264911 1 -0.632456 -0.632456 -0.632456 2 0.000000 0.000000 0.000000 3 0.632456 0.632456 0.632456 4 1.264911 1.264911 1.264911 ```","solution":"import pandas as pd def task_func(df): Given a pandas DataFrame with numerical columns, normalize each column to have mean 0 and variance 1. Args: df (DataFrame): A pandas DataFrame with numerical columns. Returns: DataFrame: A DataFrame with the normalized columns. normalized_df = (df - df.mean()) / df.std() return normalized_df"},{"question":"You are asked to write a Python function that will process a list of file paths and perform operations to list, remove, or copy files based on user input. Your function should use the `os` and `shutil` libraries to manage files and directories. Here are the specifics for the function: **Function Name:** `file_operations` **Parameters:** 1. `file_paths` (list of str): A list of file paths to perform operations on. 2. `operation` (str): The type of operation to perform. Accepted values are: - \'list_files\': Lists all the files in the directories provided. - \'remove_files\': Removes the files listed in the `file_paths`. - \'copy_files\': Copies the files listed in the `file_paths` to a specified target directory. 3. `target_dir` (str, optional): The target directory to copy files to. This parameter is only required for the \'copy_files\' operation. **Behavior:** - For the operation \'list_files\': - List all the files in the directories provided in the `file_paths`. - Return a list containing the file paths. - For the operation \'remove_files\': - Check if each file exists. If it does, remove it. - Return a list containing the paths of successfully removed files and a list of paths that did not exist. - For the operation \'copy_files\': - Check if each file exists. If it does, copy it to the `target_dir`. - Return a list containing the paths of successfully copied files and a list of paths that did not exist or failed to copy. **Libraries to Use:** - `os.listdir` - `shutil.copy` - `os.path.exists` - `os.remove` Here is the function signature and example: ```python def file_operations(file_paths: list, operation: str, target_dir: str = None) -> tuple: pass # Example Usage: # file_operations([\\"/path/to/dir1\\", \\"/path/to/dir2\\"], \\"list_files\\") # file_operations([\\"/path/to/file1\\", \\"/path/to/file2\\"], \\"remove_files\\") # file_operations([\\"/path/to/file1\\", \\"/path/to/file2\\"], \\"copy_files\\", \\"/destination/directory\\") ``` You are to implement this function following the guidelines and expected behaviors described. Ensure to handle any potential exceptions that may arise during operations and validate the inputs where necessary.","solution":"import os import shutil def file_operations(file_paths: list, operation: str, target_dir: str = None) -> tuple: if operation == \\"list_files\\": files_listed = [] for directory in file_paths: if os.path.isdir(directory): for root, _, files in os.walk(directory): for file in files: files_listed.append(os.path.join(root, file)) return files_listed, [] elif operation == \\"remove_files\\": removed_files = [] non_existent_files = [] for file in file_paths: if os.path.exists(file): os.remove(file) removed_files.append(file) else: non_existent_files.append(file) return removed_files, non_existent_files elif operation == \\"copy_files\\": if not target_dir or not os.path.isdir(target_dir): raise ValueError(\\"A valid target directory must be provided for copy_files operation.\\") copied_files = [] failed_files = [] for file in file_paths: if os.path.exists(file): try: shutil.copy(file, target_dir) copied_files.append(file) except Exception as e: failed_files.append((file, str(e))) else: failed_files.append((file, \\"File does not exist.\\")) return copied_files, failed_files else: raise ValueError(f\\"Unknown operation \'{operation}\'. Supported operations are: \'list_files\', \'remove_files\', \'copy_files\'\\")"},{"question":"**Title**: Validate Zigzag Pattern **Objective**: Write a function that determines if a given list of integers follows a \\"zigzag\\" pattern. A list is said to follow a zigzag pattern if the numbers alternate between increasing and decreasing values. **Function Name:** `is_zigzag` **Function Definition**: ```python def is_zigzag(arr: list) -> bool: ``` **Parameters**: - `arr` (list): A list of integers. **Returns**: - A boolean value `True` if the list follows a zigzag pattern, otherwise `False`. **Requirements**: 1. If the list has fewer than 3 elements, it is considered a zigzag pattern. 2. The zigzag pattern must strictly alternate between increasing and decreasing values. **Example**: ```python # Example 1 print(is_zigzag([1, 3, 2, 4, 3])) # Output: True # Example 2 print(is_zigzag([1, 2, 3, 4, 5])) # Output: False # Example 3 print(is_zigzag([10, 5, 10, 5, 10])) # Output: True # Example 4 print(is_zigzag([1])) # Output: True ``` **Notes**: 1. Ensure the function handles both positive and negative integers. 2. Be mindful of edge cases such as lists with 0, 1, or 2 elements. 3. For lists with 3 or more elements, check that each element alternately increases and decreases.","solution":"def is_zigzag(arr: list) -> bool: Determines if the given list of integers follows a zigzag pattern. # If the list has fewer than 3 elements, return True (trivially a zigzag) if len(arr) < 3: return True for i in range(1, len(arr) - 1): # Check if the ith element is a peak or a valley if (arr[i-1] < arr[i] > arr[i+1]) or (arr[i-1] > arr[i] < arr[i+1]): continue else: return False return True # Examples print(is_zigzag([1, 3, 2, 4, 3])) # True print(is_zigzag([1, 2, 3, 4, 5])) # False print(is_zigzag([10, 5, 10, 5, 10])) # True print(is_zigzag([1])) # True"},{"question":"In this task, you are asked to implement a depth-first search (DFS) algorithm to traverse a graph represented using an adjacency list. You need to write a function called `dfs_traversal(graph, start_node)` that returns a list of nodes in the order they are visited by the DFS algorithm. # Function Specification - **Function Name:** `dfs_traversal` - **Arguments:** - `graph` (dict) - A dictionary representing the graph where the keys are node identifiers (integers or strings) and the values are lists of adjacent node identifiers. - `start_node` (integer or string) - The node from which the DFS traversal should begin. # DFS Traversal Rules: 1. Start the traversal from the `start_node`. 2. Visit all the adjacent nodes of the current node, one by one, in the order they appear in the adjacency list. 3. Use a stack to keep track of the nodes to be visited. 4. Mark each node as visited as soon as it is added to the stack. 5. Continue the traversal until all reachable nodes have been visited. # Example ```python def dfs_traversal(graph, start_node): visited = set() stack = [start_node] result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # Add neighbors to stack in reverse order to maintain order in the list stack.extend(reversed(graph.get(node, []))) return result # Example usage: graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'F\'], \'F\': [] } print(dfs_traversal(graph, \'A\')) # Output: [\'A\', \'C\', \'F\', \'B\', \'E\', \'D\'] ``` # Requirements 1. Use the depth-first search algorithm to traverse the graph. 2. Use a stack (list in Python) to manage the nodes to be visited. 3. Ensure the function returns a list of nodes in the order they are visited. 4. Handle graphs with cycles by maintaining a set of visited nodes. 5. Include the example usage with a sample graph to demonstrate the function.","solution":"def dfs_traversal(graph, start_node): Perform a depth-first search (DFS) traversal on a graph represented as an adjacency list. Parameters: graph (dict): A dictionary representing the graph where the keys are node identifiers and the values are lists of adjacent node identifiers. start_node (Any): The starting node for the DFS traversal. Returns: list: A list of nodes in the order they are visited by the DFS algorithm. visited = set() stack = [start_node] result = [] while stack: node = stack.pop() if node not in visited: visited.add(node) result.append(node) # Add neighbors to stack in reverse order to maintain order in the list stack.extend(reversed(graph.get(node, []))) return result # Example usage: graph = { \'A\': [\'B\', \'C\'], \'B\': [\'D\', \'E\'], \'C\': [\'F\'], \'D\': [], \'E\': [\'F\'], \'F\': [] } print(dfs_traversal(graph, \'A\')) # Output: [\'A\', \'B\', \'D\', \'E\', \'F\', \'C\']"},{"question":"You are required to create a function `calculate_employee_bonus()` which calculates the year-end bonus for each employee based on their performance scores and base salary. The company awards bonuses as a percentage of the base salary, determined by performance score brackets. For this problem, assume the following performance score brackets and corresponding bonus percentages: - 90-100: 20% of the base salary - 80-89: 15% of the base salary - 70-79: 10% of the base salary - 60-69: 5% of the base salary - Below 60: No bonus The function should take a list of dictionaries, where each dictionary contains an employee\'s `name`, `base_salary`, and `performance_score`, and return a list of dictionaries where each dictionary contains the `name` of the employee and their calculated `bonus`. **Function Signature:** ```python def calculate_employee_bonus(employee_data): # implementation here ``` **Requirements:** - Loop through the input list to access each employee\'s data. - Calculate the bonus based on the performance score and base salary using the given score brackets. - Append the result for each employee (name and bonus) to a new list of dictionaries, which the function will return. **Example:** Suppose the input list is as follows: ```python [ {\\"name\\": \\"Alice\\", \\"base_salary\\": 60000, \\"performance_score\\": 95}, {\\"name\\": \\"Bob\\", \\"base_salary\\": 50000, \\"performance_score\\": 88}, {\\"name\\": \\"Charlie\\", \\"base_salary\\": 70000, \\"performance_score\\": 70}, {\\"name\\": \\"David\\", \\"base_salary\\": 45000, \\"performance_score\\": 55} ] ``` The function `calculate_employee_bonus(employee_data)` should return: ```python [ {\\"name\\": \\"Alice\\", \\"bonus\\": 12000}, {\\"name\\": \\"Bob\\", \\"bonus\\": 7500}, {\\"name\\": \\"Charlie\\", \\"bonus\\": 7000}, {\\"name\\": \\"David\\", \\"bonus\\": 0} ] ```","solution":"def calculate_employee_bonus(employee_data): Calculates year-end bonus for each employee based on performance scores and base salary. Parameters: employee_data (list): A list of dictionaries containing \'name\', \'base_salary\', and \'performance_score\'. Returns: list: A list of dictionaries containing \'name\' and calculated \'bonus\'. bonuses = [] for employee in employee_data: name = employee[\'name\'] base_salary = employee[\'base_salary\'] performance_score = employee[\'performance_score\'] if performance_score >= 90: bonus = base_salary * 0.2 elif performance_score >= 80: bonus = base_salary * 0.15 elif performance_score >= 70: bonus = base_salary * 0.1 elif performance_score >= 60: bonus = base_salary * 0.05 else: bonus = 0 bonuses.append({ \'name\': name, \'bonus\': bonus }) return bonuses"},{"question":"You are assigned to write a function that simulates a simple queuing system in which tasks arrive and are processed on a first-come, first-served basis. The system has a single server and handles multiple tasks, where each task has a specific arrival time and service duration. The function you need to implement is called `simulate_queue(tasks)`, where `tasks` is a list of tuples, each containing two integers: arrival time and service duration of a task. The function should return a list of tuples, each containing the start time and finish time of each task in the order they were processed. Here\'s how the system should work: 1. When a task arrives, if the server is free, it starts processing the task immediately. 2. If the server is busy, the task waits until the server is free and then starts processing. 3. Each task is processed without interruption. Function Signature: ```python def simulate_queue(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: ``` Parameters: - `tasks` (List[Tuple[int, int]]): A list of tuples, each containing two integers representing the arrival time and service duration of a task. Return: - (List[Tuple[int, int]]): A list of tuples, each containing two integers representing the start time and finish time of each task. Example: ```python tasks = [(0, 3), (2, 6), (4, 1)] print(simulate_queue(tasks)) # Output: [(0, 3), (3, 9), (9, 10)] ``` Explanation: - The first task arrives at time 0 and takes 3 units to complete, starting at 0 and finishing at 3. - The second task arrives at time 2, but the server is busy until time 3. It starts at time 3 and finishes at time 9. - The third task arrives at time 4, but the server is busy until time 9. It starts at time 9 and finishes at time 10.","solution":"from typing import List, Tuple def simulate_queue(tasks: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Simulates a simple queuing system with a single server processing tasks on a first-come, first-served basis. Parameters: tasks (List[Tuple[int, int]]): A list of tuples, each containing two integers representing the arrival time and service duration of a task. Returns: List[Tuple[int, int]]: A list of tuples, each containing two integers representing the start time and finish time of each task. result = [] current_time = 0 # This keeps track of the current time when the server is free for arrival, duration in tasks: start_time = max(current_time, arrival) finish_time = start_time + duration result.append((start_time, finish_time)) current_time = finish_time # Update the current time to the finish time of the current task return result"},{"question":"You are building a small library management system that handles book borrowings. Your task is to write a simplified version of the function `borrow_books` which manages the borrowing process for users. Your function should be named `borrow_books` and should take two arguments: 1. `users_books` (dict): A dictionary where keys are user IDs (ints) and values are lists of book IDs (ints) that the user currently has borrowed. 2. `borrow_requests` (list): A list of tuples, where each tuple contains a user ID (int) and a book ID (int) that the user wants to borrow. The function should perform the following steps: 1. Iterate over each borrow request in `borrow_requests`. 2. For each request, check if the user ID exists in `users_books`. 3. If the user ID exists, add the book ID to the user\'s list of borrowed books if the book ID is not already in the list. 4. If the user ID does not exist, create a new list for the user with the requested book ID. 5. Return the updated `users_books` dictionary. Ensure that no duplicate book IDs are added for any user. Example: ```python users_books = { 1: [101, 102], 2: [103, 104], 3: [105] } borrow_requests = [ (1, 103), (2, 104), (3, 106), (4, 107) ] result = borrow_books(users_books, borrow_requests) print(result) ``` Expected Output: ```python { 1: [101, 102, 103], 2: [103, 104], 3: [105, 106], 4: [107] } ```","solution":"def borrow_books(users_books, borrow_requests): Update the users_books dictionary based on borrow_requests. Parameters: users_books (dict): A dictionary where keys are user IDs and values are lists of book IDs the user has borrowed. borrow_requests (list): A list of tuples, where each tuple contains a user ID and a book ID the user wants to borrow. Returns: dict: The updated users_books dictionary. for user_id, book_id in borrow_requests: if user_id in users_books: if book_id not in users_books[user_id]: users_books[user_id].append(book_id) else: users_books[user_id] = [book_id] return users_books"},{"question":"In this task, you are required to implement a function called `rotate_image_90_degrees` that rotates a given square matrix 90 degrees clockwise. This is a common problem in image processing where you often need to rotate images. The function should take a single argument: - `matrix`: A 2-dimensional list of lists representing the square matrix to be rotated. The function should return the rotated matrix as a new 2-dimensional list. For example, given `matrix` as: ``` [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ``` Your function should output: ``` [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Guidelines: - Ensure the function only modifies the matrix through rotations without altering the original values. - Aim for an efficient solution that minimizes additional space usage. Implement the function `rotate_image_90_degrees(matrix)` following these guidelines.","solution":"def rotate_image_90_degrees(matrix): Rotates a given square matrix 90 degrees clockwise. Parameters: matrix (list of list of int): A 2-dimensional list representing the square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) # Create a new matrix to hold the rotated result rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are required to write a function named `most_frequent_char` that takes a string as input and returns the character that appears most frequently in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. # Requirements: - Implement the function `most_frequent_char`. - The function should take a single string argument. - The function should return the character that appears most frequently in the input string. - If multiple characters have the same highest frequency, return the one that appears first in the string. # Example: ```python def most_frequent_char(s): # Your code here ``` # Example Output: ```python most_frequent_char(\\"banana\\") # Output: \'a\' most_frequent_char(\\"swiss\\") # Output: \'s\' ``` # Sample Usage: ```python most_frequent_char(\\"banana\\") # should return \'a\' because \'a\' appears 3 times, which is more than any other character. most_frequent_char(\\"swiss\\") # should return \'s\' because \'s\' appears 3 times, tied with \'i\' but appears first. ```","solution":"def most_frequent_char(s): Returns the character that appears most frequently in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. if not s: return None char_count = {} max_count = 0 most_freq_char = None for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 if char_count[char] > max_count: max_count = char_count[char] most_freq_char = char return most_freq_char"},{"question":"You are tasked with implementing a function that determines the longest subsequence in a given string where each subsequent character is lexicographically greater than the previous one. The problem is similar to finding the longest increasing subsequence in numerical arrays but applies to strings. Your function should be named `longest_increasing_subsequence` and adhere to the following signature: ```python def longest_increasing_subsequence(s: str) -> str: pass ``` # Function Specification: - **Input**: - `s`: A string with lowercase English letters. Example: `\\"abcabad\\"` - **Output**: - A string representing the longest increasing subsequence of characters. If there are multiple subsequences of the same length, return the first one encountered. # Example: ```python def longest_increasing_subsequence(s: str) -> str: # Your implementation here pass # Test Example s = \\"abcabad\\" print(longest_increasing_subsequence(s)) # Expected Output: \\"abc\\" s = \\"abacbdab\\" print(longest_increasing_subsequence(s)) # Expected Output: \\"abcd\\" ``` **Instructions**: 1. Implement the function to find the longest subsequence where each subsequent character is greater than the preceding one. 2. Ensure that your implementation is efficient and handles strings of varying lengths. 3. Consider edge cases, such as an empty string or a string where no increasing sequence exists. Your goal is to create a function that accurately computes the desired longest increasing subsequence, showcasing understanding of dynamic programming or greedy algorithms when appropriate.","solution":"def longest_increasing_subsequence(s: str) -> str: if not s: return \\"\\" n = len(s) # dp[i] will store the longest increasing subsequence ending at index i dp = [\'\'] * n dp[0] = s[0] for i in range(1, n): for j in range(i): if s[j] < s[i] and len(dp[j]) > len(dp[i]): dp[i] = dp[j] dp[i] += s[i] # Find the longest subsequence in dp array longest_seq = max(dp, key=len) return longest_seq"},{"question":"Simulate an election voting system where a specified number of voters independently vote for their favorite candidate from a predefined set of candidates. The function generates random votes, counts the votes for each candidate, and returns the winner(s). If there are no votes, return an empty list. In case of a tie, return all the candidates with the highest vote count. The function should output: list: A list of the winning candidate(s). You should write self-contained code starting with: ``` import random from collections import Counter def voting_system(num_voters, candidates): ```","solution":"import random from collections import Counter def voting_system(num_voters, candidates): Simulates an election voting system where voters independently vote for their favorite candidate. :param num_voters: int, number of voters :param candidates: list of str, names of the candidates :return: list of str, name(s) of the winning candidate(s) if num_voters == 0 or not candidates: return [] # Generate random votes votes = [random.choice(candidates) for _ in range(num_voters)] # Count the votes for each candidate vote_count = Counter(votes) # Find the highest number of votes received max_votes = max(vote_count.values()) # Find all candidates who received the highest number of votes winners = [candidate for candidate, count in vote_count.items() if count == max_votes] return winners"},{"question":"You are tasked with writing a function called `words_frequency_analyzer` that takes a single string argument called `file_path`, representing the path to a text file. The function should read the contents of the file, count the frequency of each word, and return a dictionary where the keys are the words (converted to lowercase) and the values are their respective frequencies. Your task is to implement the `words_frequency_analyzer` function according to the following specifications: - Use the built-in `open` function to read the contents of the specified `file_path`. - Consider a word as any sequence of characters separated by whitespace. Remove punctuation characters (e.g., periods, commas) from the words. - Convert all words to lowercase to ensure case insensitivity. - Return a dictionary where each key is a unique word, and its value is the frequency of that word in the text file. Ensure your function deals with potential edge cases, such as: - Files that contain no words. - Handling various punctuation marks. - Very large files that might require efficient memory usage. **Example:** If the file at `file_path` contains the text: ``` Hello, world! Hello... Python is great; Python is fun. ``` After calling `words_frequency_analyzer(\'/path_to_text_file\')`, the function should return: ``` { \'hello\': 2, \'world\': 1, \'python\': 2, \'is\': 2, \'great\': 1, \'fun\': 1 } ``` **Important:** 1. Ensure your function handles all potential IOExceptions that might occur during file reading. 2. Use efficient string operations to handle potentially large inputs. 3. Account for various punctuation marks without affecting the word counts.","solution":"import re from collections import defaultdict def words_frequency_analyzer(file_path): Analyzes the frequency of words in a text file. Parameters: file_path (str): The path to the text file. Returns: dict: A dictionary where keys are words and values are their frequencies. word_freq = defaultdict(int) try: with open(file_path, \'r\', encoding=\'utf-8\') as file: for line in file: # Remove punctuation and convert to lowercase words = re.findall(r\'bw+b\', line.lower()) for word in words: word_freq[word] += 1 except IOError: print(\\"Error: File not found or cannot be read.\\") return dict(word_freq)"},{"question":"**Objective:** Write a Python function named `unique_pairs` that finds all unique pairs of integers in a list that sum up to a given target value. **Function Signature:** ```python def unique_pairs(numbers, target): pass ``` **Parameters:** - **numbers**: A list of integers. - **target**: An integer representing the target sum for the pairs. **Requirements:** 1. Each pair of integers must be returned as a tuple `(a, b)` such that ( a leq b ). 2. The function should return a list of unique pairs that sum up to the target value. 3. The pairs should be sorted in ascending order by the first element, and by the second element if the first elements are the same. 4. The list of pairs should not contain any duplicate pairs. 5. The function should have a time complexity of O(n log n) or better for efficient performance. **Example:** ```python pairs = unique_pairs([1, 3, 2, 2, 3, 4, 1, 5], 5) print(pairs) # Expected output: [(1, 4), (2, 3)] ``` Notes: - For the input list `[1, 3, 2, 2, 3, 4, 1, 5]` and target `5`, the unique pairs that sum up to `5` are `(1, 4)` and `(2, 3)`. - Ensure that duplicates are removed, and the pairs are sorted correctly.","solution":"def unique_pairs(numbers, target): Finds all unique pairs of integers in a list that sum up to a given target value. Parameters: numbers (list of int): The list of integers. target (int): The target sum for the pairs. Returns: list of tuple: A list of unique pairs (a, b) where a + b == target. pairs = set() seen = {} for number in numbers: complement = target - number if complement in seen: pair = (min(number, complement), max(number, complement)) pairs.add(pair) seen[number] = True return sorted(pairs) # Example usage: pairs = unique_pairs([1, 3, 2, 2, 3, 4, 1, 5], 5) print(pairs) # Should output: [(1, 4), (2, 3)]"},{"question":"Write a Python function that reads data from a CSV file and performs data cleaning operations based on specified rules. The CSV file contains columns \'ID\', \'Name\', \'Age\', and \'Salary\'. Perform the following operations: 1. Remove rows where \'Name\' contains any digits or special characters (only alphabetic characters are allowed). 2. Replace missing values in the \'Age\' column with the median age. 3. Normalize the \'Salary\' column to have values between 0 and 1. Return the cleaned DataFrame and save it to a new CSV file named \\"cleaned_data.csv\\". The function should start with: ``` import pandas as pd import re def clean_data(file_path=\\"data.csv\\"): ```","solution":"import pandas as pd import re def clean_data(file_path=\\"data.csv\\"): # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # 1. Remove rows where \'Name\' contains any digits or special characters df = df[df[\'Name\'].apply(lambda x: bool(re.match(\\"^[A-Za-z]+\\", x)))] # 2. Replace missing values in the \'Age\' column with the median age median_age = df[\'Age\'].median() df[\'Age\'].fillna(median_age, inplace=True) # 3. Normalize the \'Salary\' column to have values between 0 and 1 min_salary = df[\'Salary\'].min() max_salary = df[\'Salary\'].max() df[\'Salary\'] = (df[\'Salary\'] - min_salary) / (max_salary - min_salary) # Save the cleaned DataFrame to a new CSV file df.to_csv(\\"cleaned_data.csv\\", index=False) return df"},{"question":"You are required to create a function to recommend similar movies based on a given movie\'s title. The function should use the `pandas` library to load the data and the `scikit-learn` library to compute cosine similarity between movie descriptions. **Function Specification:** `def recommend_movies(data_path: str, movie_title: str, num_recommendations: int) -> pd.DataFrame` - `data_path` (str): The file path to the CSV file containing the movie data. - `movie_title` (str): The title of the movie for which recommendations are needed. - `num_recommendations` (int): The number of similar movie recommendations to return. **You must use the following APIs:** - `pandas.read_csv` - `sklearn.feature_extraction.text.TfidfVectorizer` - `sklearn.metrics.pairwise.cosine_similarity` **Requirements:** 1. Load the movie data from the specified `data_path`. 2. Use the `TfidfVectorizer` from `sklearn.feature_extraction.text` to transform the movie descriptions into TF-IDF features. 3. Compute the cosine similarity between the given movie\'s TF-IDF features and all other movies in the dataset. 4. Identify the top `num_recommendations` movies with the highest similarity scores. 5. Return a DataFrame with columns: [\'title\', \'year\', \'similarity\'] containing the movie titles, their release years, and their similarity scores. Example usage: ```python data_path = \'path/to/movies.csv\' movie_title = \'The Matrix\' num_recommendations = 5 result = recommend_movies(data_path, movie_title, num_recommendations) print(result) ``` The output DataFrame should look like this: ``` title year similarity 0 The Matrix 1999 1.0000 1 The Matrix Reloaded 2003 0.8794 2 The Matrix Revolutions 2003 0.8642 3 Inception 2010 0.7568 4 The Terminator 1984 0.7245 ```","solution":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity def recommend_movies(data_path: str, movie_title: str, num_recommendations: int) -> pd.DataFrame: # Load movie data movies = pd.read_csv(data_path) # Check if necessary columns exist if \'title\' not in movies.columns or \'description\' not in movies.columns or \'year\' not in movies.columns: raise ValueError(\\"DataFrame must contain \'title\', \'description\', and \'year\' columns.\\") # Create TF-IDF matrix tfidf = TfidfVectorizer(stop_words=\'english\') tfidf_matrix = tfidf.fit_transform(movies[\'description\']) # Compute the cosine similarity matrix cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix) # Get index of the specified movie idx = movies.index[movies[\'title\'] == movie_title].tolist() if not idx: raise ValueError(f\\"The movie \'{movie_title}\' is not found in the dataset.\\") idx = idx[0] # Get pairwise similarity scores of all movies with the specified movie sim_scores = list(enumerate(cosine_sim[idx])) # Sort the movies based on the similarity scores sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True) # Get the scores of the top num_recommendations movies sim_scores = sim_scores[1:num_recommendations + 1] # Get the movie indices movie_indices = [i[0] for i in sim_scores] # Create the recommended movies DataFrame recommended_movies = movies.iloc[movie_indices][[\'title\', \'year\']] recommended_movies[\'similarity\'] = [score[1] for score in sim_scores] return recommended_movies"},{"question":"Write a function that accepts a DataFrame containing a \'date\' column and a \'value\' column. The function should perform the following tasks: 1. Ensure that the \'date\' column is in datetime format. 2. Sort the DataFrame by the \'date\' column in ascending order. 3. Calculate the 7-day moving average for the \'value\' column. 4. Add a new column \'7-day Moving Average\' to the DataFrame containing these calculated values. 5. Return the updated DataFrame. The function should start with: ``` import pandas as pd def calculate_moving_average(df): ```","solution":"import pandas as pd def calculate_moving_average(df): Ensures the \'date\' column is in datetime format, sorts the DataFrame by the \'date\' column, calculates the 7-day moving average for the \'value\' column, and returns the updated DataFrame with an additional \'7-day Moving Average\' column. # Ensure the \'date\' column is in datetime format df[\'date\'] = pd.to_datetime(df[\'date\']) # Sort the DataFrame by the \'date\' column in ascending order df = df.sort_values(by=\'date\') # Calculate the 7-day moving average for the \'value\' column df[\'7-day Moving Average\'] = df[\'value\'].rolling(window=7).mean() return df"},{"question":"In this problem, you are required to create a function named `reverse_string_by_words()` that takes a string as input and returns the string with the order of the words reversed. This function will demonstrate the use of basic string manipulation and list methods in Python. # Objective: 1. **Split the input string into words** using spaces as the delimiter. 2. **Reverse the order of the words**. 3. **Join the reversed words** back into a single string with a single space between each word. 4. **Return the resulting string**. # Provided Details: - **Input string**: A string containing a sentence with words separated by spaces. - **Output string**: The input string with the order of the words reversed. # Expected Function Signature: ```python def reverse_string_by_words(input_string: str) -> str: ``` # Example: Example 1 **Input:** ```plaintext \\"Hello world how are you\\" ``` **Output:** ```plaintext \\"you are how world Hello\\" ``` Example 2 **Input:** ```plaintext \\"Python is great\\" ``` **Output:** ```plaintext \\"great is Python\\" ``` Example 3 **Input:** ```plaintext \\"Keep it simple\\" ``` **Output:** ```plaintext \\"simple it Keep\\" ``` # Guidelines: - Use the `split()` method to divide the input string into a list of words. - Reverse the list of words using slicing or a list method. - Use the `join()` method to concatenate the reversed list of words into a single string. - Ensure the function handles edge cases, such as an empty string or a single word string, appropriately. # Constraints: - You can assume the input string consists of only lowercase and uppercase English letters and spaces. There will be no leading, trailing, or consecutive spaces.","solution":"def reverse_string_by_words(input_string: str) -> str: Reverses the order of words in the input string. :param input_string: A string containing words separated by spaces. :return: A string with the order of the words reversed. words = input_string.split() # Split the input string into words reversed_words = words[::-1] # Reverse the list of words return \' \'.join(reversed_words) # Join the reversed words back into a single string"},{"question":"In this exercise, you will implement a function `find_paths_in_dag` to count the number of unique paths between two nodes in a Directed Acyclic Graph (DAG). The function should determine the total number of distinct paths from a given start node to an end node. The function signature is: ```python def find_paths_in_dag(graph: Dict[int, List[int]], start: int, end: int) -> int: ``` Parameters: - `graph`: A dictionary where each key is a node in the DAG, and the value is a list of nodes that the key node points to. - `start`: The starting node. - `end`: The ending node. Output: - Returns an integer representing the number of unique paths from the `start` node to the `end` node. # Example ```python graph = { 0: [1, 2, 3], 1: [3], 2: [3], 3: [] } start = 0 end = 3 # Expected output: 3 # Explanation: There are 3 unique paths from node 0 to node 3: [0, 1, 3], [0, 2, 3], and [0, 3]. find_paths_in_dag(graph, start, end) ``` In this example, the function calculates the total number of unique paths from node 0 to node 3 in the provided DAG. # Libraries Required - None You are required to implement the solution without using any additional external libraries.","solution":"def find_paths_in_dag(graph, start, end): Returns the number of unique paths from start to end in the given DAG. def dfs(node, end, memo): if node == end: return 1 if node in memo: return memo[node] total_paths = 0 for neighbor in graph.get(node, []): total_paths += dfs(neighbor, end, memo) memo[node] = total_paths return total_paths memo = {} return dfs(start, end, memo)"},{"question":"You are tasked with implementing a function `normalize_matrix` that normalizes a given two-dimensional matrix based on the following operation: for each row in the matrix, subtract the mean of that row and then divide by the standard deviation of that row. The function should ensure that if a row has a standard deviation of zero, the elements should all be set to zero after normalization. The function should take one parameter: 1. A two-dimensional array `matrix` representing the input matrix that needs to be normalized. The function should return a two-dimensional array `normalized_matrix` which is the normalized version of the input matrix. Function signature: ```python def normalize_matrix(matrix: np.ndarray) -> np.ndarray: ... ``` Requirements: - Use NumPy operations to perform the normalization. - Raise a `ValueError` if the input array does not have exactly two dimensions.","solution":"import numpy as np def normalize_matrix(matrix: np.ndarray) -> np.ndarray: if matrix.ndim != 2: raise ValueError(\\"Input matrix must be two-dimensional\\") normalized_matrix = np.zeros_like(matrix, dtype=np.float64) for i, row in enumerate(matrix): mean = np.mean(row) std = np.std(row) if std == 0: normalized_matrix[i] = np.zeros_like(row) else: normalized_matrix[i] = (row - mean) / std return normalized_matrix"},{"question":"**Educational Goal**: Learn to implement basic version control functionality using Git commands programmatically in Python. You are asked to simulate a simplified version of Git\'s version control system. Specifically, you will create a function that handles basic Git commands such as `init`, `add`, `commit`, and `log`. The goal is to understand the inner workings of these commands and demonstrate the ability to implement them using Python classes and data structures. **Task**: Implement a class `SimpleGit` that simulates a basic version control system. - **Class Signature**: `class SimpleGit` - **Methods**: - `__init__(self)`: Initializes an empty repository. - `init(self) -> str`: Initializes a new repository. This method will set up the necessary structures to track files and commits. - `add(self, filename: str, content: str) -> str`: Adds a file to the staging area. - `commit(self, message: str) -> str`: Commits the changes in the staging area with a given commit message. - `log(self) -> list[dict[str, str]]`: Returns the commit history log. **Details**: - The `init` method should set up an internal structure to keep track of files and commits. - The `add` method should stage a file and its content. - The `commit` method should record staged changes with a commit message. - The `log` method should return a list of all commit messages along with their index. **Example**: Given the following sequence of method calls: ```python sg = SimpleGit() sg.init() sg.add(\'file1.txt\', \'Hello, World!\') sg.commit(\'Initial commit\') sg.add(\'file2.txt\', \'Another file\') sg.commit(\'Second commit\') sg.log() ``` Your class should behave as follows when the above steps are executed: ```python print(sg.log()) ``` Output: ```python [ {\'index\': \'0\', \'message\': \'Initial commit\'}, {\'index\': \'1\', \'message\': \'Second commit\'} ] ``` **Additional Notes**: - Ensure to handle conflicts or errors gracefully, such as committing without adding files. - Use appropriate data structures to maintain the state of the repository. - The `log` method should return commits in the order they were made, starting from the oldest.","solution":"class SimpleGit: def __init__(self): self.repository_initialized = False self.staging_area = {} self.commits = [] def init(self) -> str: if not self.repository_initialized: self.repository_initialized = True self.staging_area = {} self.commits = [] return \\"Initialized empty repository\\" return \\"Repository already initialized\\" def add(self, filename: str, content: str) -> str: if not self.repository_initialized: return \\"Repository not initialized\\" self.staging_area[filename] = content return f\\"Added {filename} to staging area\\" def commit(self, message: str) -> str: if not self.repository_initialized: return \\"Repository not initialized\\" if not self.staging_area: return \\"Nothing to commit\\" self.commits.append({ \'index\': len(self.commits), \'message\': message, \'files\': self.staging_area.copy() }) self.staging_area.clear() return f\\"Committed: {message}\\" def log(self) -> list: if not self.repository_initialized: return \\"Repository not initialized\\" return [{\'index\': str(commit[\'index\']), \'message\': commit[\'message\']} for commit in self.commits]"},{"question":"# Problem: Merge Two Sorted Linked Lists You are required to merge two sorted singly linked lists and return the merged list, which should also be sorted. The linked lists are made up of nodes defined below: Node Class Definition ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Function Signature ```python def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: Merges two sorted linked lists into one sorted linked list. ``` Parameters - `l1`: The head of the first sorted singly linked list. - `l2`: The head of the second sorted singly linked list. Returns - The function should return the head of the merged sorted singly linked list. Examples ```python # Example 1 l1 = ListNode(1, ListNode(3, ListNode(5))) l2 = ListNode(2, ListNode(4, ListNode(6))) result = merge_two_sorted_lists(l1, l2) # The output list should be: 1 -> 2 -> 3 -> 4 -> 5 -> 6 # Example 2 l1 = ListNode(1, ListNode(2, ListNode(4))) l2 = ListNode(1, ListNode(3, ListNode(5))) result = merge_two_sorted_lists(l1, l2) # The output list should be: 1 -> 1 -> 2 -> 3 -> 4 -> 5 ``` # Constraints - The linked lists `l1` and `l2` are each sorted in non-decreasing order. # Notes - Review how to traverse and manipulate linked lists. - Consider using a dummy head node to simplify the merging process. Remember to return the actual head of the merged linked list, which is the next node of the dummy head node. - Make sure to handle edge cases, such as when one or both linked lists are empty.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1: ListNode, l2: ListNode) -> ListNode: dummy = ListNode() current = dummy while l1 and l2: if l1.val <= l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If there are remaining nodes in either l1 or l2 if l1: current.next = l1 elif l2: current.next = l2 return dummy.next"},{"question":"Creates a function that takes a string containing an arithmetic expression with addition and subtraction (e.g., \\"3+5-2+8\\"), evaluates it, and returns the result. The function should parse the string, handle the operators, and compute the final value using a stack. The function should output the final result of the expression as an integer. You should write self-contained code starting with: ``` def evaluate_expression(expression): ```","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression with addition and subtraction. Parameters: expression (str): A string containing the arithmetic expression to be evaluated. Returns: int: The result of the evaluated expression. stack = [] num = 0 sign = 1 # 1 for positive, -1 for negative result = 0 for i, char in enumerate(expression): if char.isdigit(): num = num * 10 + int(char) if char in \\"+-\\" or i == len(expression) - 1: result += sign * num num = 0 sign = 1 if char == \'+\' else -1 # Account for the last number in the expression result += sign * num return result"},{"question":"# Context: Sorting algorithms are fundamental in computer science, and understanding their implementation and behavior is crucial for solving many computational problems. The Merge Sort algorithm is a classic example of a divide-and-conquer sorting technique. # Problem: Write a function `merge_sort(arr)` that takes a list of integers `arr` and sorts it in ascending order using the Merge Sort algorithm. The function should return a new sorted list and not modify the input list. # Requirements: 1. Implement the Merge Sort algorithm using a recursive approach. 2. Divide the list into halves until each sublist contains a single element. 3. Merge the sublists back together in sorted order. 4. Ensure the function does not modify the original list and returns a new sorted list. # Constraints: - The length of the input list will not exceed 10,000. - Duplicate elements are allowed in the input list. - Consider edge cases such as an empty list or a list with one element. # Example: ```python merge_sort([38, 27, 43, 3, 9, 82, 10]) ``` # Expected Output: ```python [3, 9, 10, 27, 38, 43, 82] ``` # Additional Example: ```python merge_sort([5, 1, 5, 3, 7, 3]) ``` # Expected Output: ```python [1, 3, 3, 5, 5, 7] ``` # Notes: - You may define additional helper functions as needed. - Emphasize readability and clear organization of the recursive merging process.","solution":"def merge_sort(arr): Perform a merge sort on the provided list and return a new sorted list. :param arr: List of integers to be sorted. :return: New list containing sorted integers. if len(arr) <= 1: return arr def merge(left, right): result = [] i = j = 0 # Merge the two lists together while maintaining sorted order while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 # Collect the remaining elements in either list result.extend(left[i:]) result.extend(right[j:]) return result # Split the list into halves and sort each half mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) # Merge the sorted halves return merge(left, right)"},{"question":"Write a function `find_kth_largest_element` that finds the k-th largest element in an unsorted list of integers. Your function should accept two parameters: the list of integers and the value of k. Here are the requirements for the function: 1. The function should be named `find_kth_largest_element`. 2. It should accept two parameters: - `nums` (a list of integers) - `k` (an integer representing which k-th largest element to find) 3. The function should return the k-th largest element in the list. 4. You can assume that k is always a valid positive integer and does not exceed the length of the list. You are allowed to use the built-in Python functions to achieve this task. **Example Usage:** ```python nums = [3, 2, 1, 5, 6, 4] k = 2 result = find_kth_largest_element(nums, k) print(result) ``` **Output:** ``` 5 ``` **Note:** - The primary objective is to ensure that `find_kth_largest_element` returns the correct k-th largest element from the given list. - Take into consideration that the list can contain duplicate values and still accurately find the k-th largest unique element.","solution":"def find_kth_largest_element(nums, k): Returns the k-th largest element in the unsorted list `nums`. Parameters: nums (List[int]): A list of integers. k (int): The k-th largest element to find. Returns: int: The k-th largest element in the list. # Sort the list in descending order nums_sorted = sorted(nums, reverse=True) # Return the k-th largest element (1-based index) return nums_sorted[k-1]"},{"question":"You are provided with a CSV file containing sales data for a supermarket. The data includes information on item sold, sales date, and sales amount. Your task is to write a function `summarize_sales_data` that summarizes the total sales amount for each item within a specified date range. Specifically, your function should do the following: 1. Read the CSV file into a Pandas DataFrame. 2. Convert the \'Sales Date\' column to a datetime object. 3. Filter the DataFrame by the specified date range. 4. Group the filtered data by \'Item\' and calculate the total sales amount for each item. 5. Return the grouped data as a new DataFrame with columns \'Item\' and \'Total Sales Amount\'. The function signature should be: ```python def summarize_sales_data(file_path: str, start_date: str, end_date: str) -> pd.DataFrame: ``` - `file_path` is the path to the CSV file containing the sales data. - `start_date` and `end_date` define the date range for filtering the sales data. These dates will be provided in \'YYYY-MM-DD\' format. # Constraints: - Use the `pandas.to_datetime` method to convert strings to datetime objects. # Example Usage: ```python summary_df = summarize_sales_data(\'supermarket_sales.csv\', \'2021-01-01\', \'2021-03-31\') print(summary_df) ``` # Sample Data Format: The CSV file `supermarket_sales.csv` might look like this: ``` Item, Sales Date, Sales Amount Apples, 2021-01-02, 150.00 Bananas, 2021-01-03, 75.00 Oranges, 2021-02-15, 200.00 ... ``` # Deliverables: - A Python function `summarize_sales_data` as specified above. # Expected Output: After invoking the function with the given example usage, the output might look like this: ``` Item Total Sales Amount 0 Apples 150.00 1 Bananas 75.00 2 Oranges 200.00 ... ```","solution":"import pandas as pd def summarize_sales_data(file_path: str, start_date: str, end_date: str) -> pd.DataFrame: # Read the CSV file into a Pandas DataFrame sales_data = pd.read_csv(file_path) # Convert the \'Sales Date\' column to a datetime object sales_data[\'Sales Date\'] = pd.to_datetime(sales_data[\'Sales Date\']) # Convert start_date and end_date to datetime objects start_date = pd.to_datetime(start_date) end_date = pd.to_datetime(end_date) # Filter the DataFrame by the specified date range filtered_data = sales_data[(sales_data[\'Sales Date\'] >= start_date) & (sales_data[\'Sales Date\'] <= end_date)] # Group the filtered data by \'Item\' and calculate the total sales amount for each item grouped_data = filtered_data.groupby(\'Item\', as_index=False)[\'Sales Amount\'].sum() # Rename the grouped data columns for clarity grouped_data.rename(columns={\'Sales Amount\': \'Total Sales Amount\'}, inplace=True) return grouped_data"},{"question":"Write a Python function `word_count(s)` that takes a single argument: 1. `s` (a string): The input string containing multiple words. The function should return a dictionary where keys are distinct words (case insensitive) and values are the counts of these words in the input string. The function should include input validation and make use of Python\'s logging library to log messages at the appropriate severity levels: - Use `logging.info` to log the beginning of the function execution, including the input string. - Use `logging.error` to log any issues with the input parameter. The function should perform the following checks, raising appropriate exceptions with informative error messages if any check fails: 1. Ensure that `s` is a string. 2. Ensure that `s` is not empty and does not consist only of whitespace. If the input is valid, the function should compute the word counts and return the dictionary. **Example Usage:** ```python # Assume the logging has been configured appropriately elsewhere in the application s = \\"Hello world! Hello everyone.\\" print(word_count(s)) # Output: {\'hello\': 2, \'world!\': 1, \'everyone.\': 1} ``` The function should make use of the `logging` library features specified in the API documentation snippet provided: - `logging.error` - `logging.info`","solution":"import logging from collections import Counter import re logging.basicConfig(level=logging.INFO) def word_count(s): Returns the count of each word in the input string s (case insensitive). Parameters: s (str): The input string containing multiple words. Returns: dict: A dictionary where keys are distinct words and values are their counts. Raises: TypeError: If s is not a string. ValueError: If s is empty or only consists of whitespace. logging.info(f\\"Function word_count called with input: \'{s}\'\\") if not isinstance(s, str): logging.error(\\"Input parameter is not a string\\") raise TypeError(\\"Input must be a string\\") if s.strip() == \\"\\": logging.error(\\"Input string is empty or only consists of whitespace\\") raise ValueError(\\"Input string must not be empty or only consist of whitespace\\") # Normalize to lowercase and split by non-alphabetic characters words = re.findall(r\'bw+b\', s.lower()) word_counts = Counter(words) return dict(word_counts)"},{"question":"--- In this problem, you will implement an algorithm to find the shortest path in a weighted graph using Dijkstra\'s algorithm. You will use the NetworkX library to handle graph data structures and visualization. # Task: Develop a function `find_shortest_path` that takes three parameters: `graph`, `start_node`, and `end_node`. The function should compute the shortest path from `start_node` to `end_node` using Dijkstra\'s algorithm and return the path as a list of nodes. Additionally, plot the graph with the shortest path highlighted. # Details: - `graph`: A NetworkX graph instance where nodes are labeled with unique identifiers, and edges have a `weight` attribute. - `start_node`: The starting node identifier. - `end_node`: The ending node identifier. # Function Signature: ```python def find_shortest_path(graph, start_node, end_node): ``` # Example: ```python import networkx as nx G = nx.Graph() G.add_weighted_edges_from([(1, 2, 1.5), (2, 3, 2.5), (1, 3, 2.0), (3, 4, 1.0)]) path = find_shortest_path(G, 1, 4) print(path) # Output could be [1, 3, 4] ``` # Requirements: - Use Dijkstra\'s algorithm to calculate the shortest path. - Highlight the shortest path on the graph using a different color when plotting. - Use `matplotlib.pyplot.show` to display the graph. # Notes: - Import necessary functions or modules from NetworkX and Matplotlib libraries. - Ensure the graph plot clearly differentiates the shortest path from the other edges. ---","solution":"import networkx as nx import matplotlib.pyplot as plt def find_shortest_path(graph, start_node, end_node): Computes the shortest path in the given graph from start_node to end_node using Dijkstra\'s algorithm. Parameters: graph (networkx.Graph): The graph where to find the shortest path. start_node (any): The starting node identifier. end_node (any): The ending node identifier. Returns: list: A list of node identifiers representing the shortest path from start_node to end_node. # Compute the shortest path using Dijkstra\'s algorithm path = nx.dijkstra_path(graph, start_node, end_node) # Plot the graph pos = nx.spring_layout(graph) plt.figure() # Draw the nodes nx.draw(graph, pos, with_labels=True, node_color=\'lightblue\', node_size=700, font_size=10, font_weight=\'bold\') # Draw the edges nx.draw_networkx_edges(graph, pos, edgelist=graph.edges(), edge_color=\'grey\') # Highlight the shortest path path_edges = list(zip(path, path[1:])) nx.draw_networkx_edges(graph, pos, edgelist=path_edges, edge_color=\'red\', width=2) # Show the plot plt.show() return path"},{"question":"Create a function `generate_currency_report` that reads a CSV file containing daily exchange rates of various currencies against the USD and generates a summary report. The report should include the highest, lowest, and average exchange rate for each currency over the available period. Given: 1. A CSV file where the first column is dates, and subsequent columns correspond to different currency codes (e.g., EUR, JPY, GBP). 2. Each cell in the CSV (except the first column) contains the exchange rate of the currency with respect to USD on the given date. 3. The function should output these statistics in a formatted text file. You need to: 1. Read the CSV file to extract the exchange rate data. 2. Calculate the highest, lowest, and average exchange rate for each currency. 3. Write the results to an output file in a readable format. Write the function with the following signature: ```python def generate_currency_report(csv_path, output_path): ``` Parameters: - `csv_path`: The path to the input CSV file containing exchange rate data. - `output_path`: The path where the summary report will be saved. The output file should be formatted as follows: ``` Currency Statistics Report Currency: EUR Highest Rate: <highest rate> Lowest Rate: <lowest rate> Average Rate: <average rate> Currency: JPY Highest Rate: <highest rate> Lowest Rate: <lowest rate> Average Rate: <average rate> ... ``` Ensure your function handles missing values by skipping such entries and continues processing the remaining data. Moreover, round the average rates to 4 decimal places in the report.","solution":"import csv def generate_currency_report(csv_path, output_path): Reads a CSV file containing daily exchange rates of various currencies against the USD and generates a summary report. The report includes the highest, lowest, and average exchange rate for each currency over the available period. currency_data = {} # Read the CSV file with open(csv_path, mode=\'r\') as file: reader = csv.reader(file) headers = next(reader) for row in reader: date = row[0] for index, value in enumerate(row[1:], start=1): currency = headers[index] if value: rate = float(value) if currency not in currency_data: currency_data[currency] = [] currency_data[currency].append(rate) # Calculate statistics and write to the output file with open(output_path, mode=\'w\') as file: file.write(\\"Currency Statistics Reportnn\\") for currency, rates in currency_data.items(): highest = max(rates) lowest = min(rates) average = sum(rates) / len(rates) file.write(f\\"Currency: {currency}n\\") file.write(f\\"Highest Rate: {highest}n\\") file.write(f\\"Lowest Rate: {lowest}n\\") file.write(f\\"Average Rate: {average:.4f}n\\") file.write(\\"n\\")"},{"question":"**Context:** In the realm of data processing, the task of cleaning and tidying data is fundamental. One common issue faced during data cleaning is dealing with missing values. In some cases, you need to fill these missing values using a specific strategy. One effective approach is to fill these values with the mean of the corresponding column in a data structure. **Your Task:** You need to create a function called `fill_missing_values` that takes a 2D list (list of lists) representing a tabular dataset and fills missing values with the mean of the corresponding column. Assume missing values are represented by `None`. **Function Signature:** ```python def fill_missing_values(data: list) -> list: ``` **Requirements:** 1. Iterate through each column in the data and calculate the mean, ignoring any `None` values. 2. Replace each `None` value in the column with the computed mean of that column. 3. If a column is entirely made up of `None` values, replace all `None` values with `0`. **Input:** - `data`: A 2D list of numerical values and `None`, where each sublist represents a row in the dataset. **Output:** - This function should return a 2D list of the same shape, with `None` values replaced by the computed mean of their respective columns. **Example:** ```python data = [ [1, 2, None], [4, None, 6], [None, 3, None] ] result = fill_missing_values(data) print(result) # [[1, 2, 6.0], [4, 2.5, 6], [2.5, 3, 6.0]] ```","solution":"def fill_missing_values(data: list) -> list: Fills missing values (None) in each column with the mean of the respective column. If a column is entirely None, fills it with 0. if not data: return [] # handle the case of empty data num_columns = len(data[0]) column_sums = [0] * num_columns column_counts = [0] * num_columns # Calculate the sum and count of non-None values for each column for row in data: for col_index in range(num_columns): if row[col_index] is not None: column_sums[col_index] += row[col_index] column_counts[col_index] += 1 # Calculate mean for each column, treating columns with no values as 0 col_means = [ (column_sums[i] / column_counts[i]) if column_counts[i] != 0 else 0 for i in range(num_columns) ] # Replace None values with the column mean result = [ [ row[col_index] if row[col_index] is not None else col_means[col_index] for col_index in range(num_columns) ] for row in data ] return result"},{"question":"You are required to implement a simplified version of a stock trading algorithm. The task is to determine the maximum profit that can be achieved from a given list of daily stock prices. You are allowed to complete at most one transaction, meaning you can buy one and sell one share of a stock. Your task is to write a Python function named `max_profit(prices: list) -> int` that finds the maximum profit that can be achieved from buying and then selling the stock on different days. If no profit is possible, the function should return 0. Specifically, the function should: 1. Iterate through the list of daily stock prices to find the minimum price to buy and the maximum price to sell afterwards. 2. Calculate the difference between the selling price and the buying price for potential maximum profit. 3. Ensure the time complexity of the solution is O(n), where `n` is the number of days. **Function Signature:** ```python def max_profit(prices: list) -> int: pass ``` **Example:** ```python prices = [7, 1, 5, 3, 6, 4] print(max_profit(prices)) # Output: 5 # Explanation: Buy on day 2 (price 1) and sell on day 5 (price 6), profit = 6 - 1 = 5. prices = [7, 6, 4, 3, 1] print(max_profit(prices)) # Output: 0 # Explanation: No profitable transaction is possible. ``` **Notes:** - The function should return an integer representing the maximum profit. - If the list of prices is empty or has only one price, the function should return 0. - Ensure your solution efficiently handles edge cases.","solution":"def max_profit(prices: list) -> int: # If there are less than 2 prices, no transaction can be made if len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the min_price to the lowest price encountered so far if price < min_price: min_price = price # Calculate potential profit if the stock is sold today current_profit = price - min_price # Update max_profit if the current potential profit is higher than the previous max_profit if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"You are working on a project that analyzes sales data from different regions. The data is stored in a list of dictionaries, where each dictionary contains information about a single sale. Your task is to identify and summarize the sales performance for each region. Write a function named `summarize_sales(sales_data)` that accepts a list of dictionaries, where each dictionary contains the following keys: 1. `\'region\'` (string): the region where the sale was made. 2. `\'sales_amount\'` (float): the amount of the sale. 3. `\'sales_rep\'` (string): the name of the sales representative who made the sale. 4. `\'date\'` (string): the date when the sale was made (in YYYY-MM-DD format). The function should return a dictionary where each key is a region, and each value is another dictionary with the following keys: - `\'total_sales\'` (float): the total sales amount for the region. - `\'num_sales\'` (int): the total number of sales for the region. - `\'best_sales_rep\'` (string): the name of the sales representative with the highest sales amount in that region. You may assume that the input list of dictionaries is well-formed and that there will be at least one sale in each region. **Function Signature:** ```python def summarize_sales(sales_data: list) -> dict: # your code here ``` **Example:** ```python sales_data = [ {\'region\': \'North\', \'sales_amount\': 200.0, \'sales_rep\': \'Alice\', \'date\': \'2023-03-01\'}, {\'region\': \'North\', \'sales_amount\': 300.0, \'sales_rep\': \'Bob\', \'date\': \'2023-03-02\'}, {\'region\': \'South\', \'sales_amount\': 150.0, \'sales_rep\': \'Charlie\', \'date\': \'2023-03-01\'}, {\'region\': \'South\', \'sales_amount\': 250.0, \'sales_rep\': \'Alice\', \'date\': \'2023-03-03\'}, {\'region\': \'North\', \'sales_amount\': 100.0, \'sales_rep\': \'Alice\', \'date\': \'2023-03-04\'}, {\'region\': \'South\', \'sales_amount\': 300.0, \'sales_rep\': \'Bob\', \'date\': \'2023-03-02\'}, ] summary = summarize_sales(sales_data) # Expected output: # { # \'North\': {\'total_sales\': 600.0, \'num_sales\': 3, \'best_sales_rep\': \'Bob\'}, # \'South\': {\'total_sales\': 700.0, \'num_sales\': 3, \'best_sales_rep\': \'Bob\'} # } ```","solution":"from collections import defaultdict def summarize_sales(sales_data: list) -> dict: region_summary = defaultdict(lambda: {\'total_sales\': 0.0, \'num_sales\': 0, \'best_sales_rep\': \'\', \'rep_sales\': defaultdict(float)}) for sale in sales_data: region = sale[\'region\'] amount = sale[\'sales_amount\'] rep = sale[\'sales_rep\'] region_summary[region][\'total_sales\'] += amount region_summary[region][\'num_sales\'] += 1 region_summary[region][\'rep_sales\'][rep] += amount if region_summary[region][\'rep_sales\'][rep] > region_summary[region][\'rep_sales\'][region_summary[region][\'best_sales_rep\']]: region_summary[region][\'best_sales_rep\'] = rep # Removing \'rep_sales\' from the final output final_summary = {} for region, data in region_summary.items(): data.pop(\'rep_sales\') final_summary[region] = data return final_summary"},{"question":"The following code converts an image to grayscale and applies a Gaussian blur using the `Pillow` library. Your task is to complete the function `process_image(image_path, blur_radius)`, which takes two arguments: `image_path` (a string representing the path to the image file) and `blur_radius` (an integer for the radius of the Gaussian blur to apply). **Requirements:** 1. The function should open the image using `Pillow`\'s `Image.open`. 2. Convert the image to grayscale using the `convert` method. 3. Apply the Gaussian blur with the specified `blur_radius` using `Pillow`\'s `ImageFilter.GaussianBlur` filter. 4. Save the processed image as \\"processed_image.jpg\\" in the same directory as the input image. **Function Signature:** ```python def process_image(image_path, blur_radius): ``` **Example:** ```python process_image(\\"example.jpg\\", 5) ``` This should open the image \\"example.jpg\\", convert it to grayscale, apply a Gaussian blur with a radius of 5, and save the output as \\"processed_image.jpg\\".","solution":"from PIL import Image, ImageFilter def process_image(image_path, blur_radius): Processes an image by converting it to grayscale and applying a Gaussian blur. Parameters: image_path (str): Path to the input image. blur_radius (int): Radius for the Gaussian blur. # Open the image img = Image.open(image_path) # Convert to grayscale grayscale_img = img.convert(\\"L\\") # Apply Gaussian blur blurred_img = grayscale_img.filter(ImageFilter.GaussianBlur(blur_radius)) # Save the processed image blurred_img.save(\\"processed_image.jpg\\")"},{"question":"Given a list of employees with their respective salaries, calculate the median, mean, and standard deviation of the salaries. Then determine the percentile rank for each employee based on their salary. The function should return a pandas DataFrame displaying each employee\'s salary, along with their calculated median, mean, standard deviation, and percentile rank. Ensure to handle cases where the input list might be empty. The function should output: DataFrame: A pandas DataFrame containing employee salary, calculated median, mean, standard deviation, and percentile rank. You should write self-contained code starting with: ``` import pandas as pd import numpy as np def analyze_salaries(employee_salaries): ```","solution":"import pandas as pd import numpy as np def analyze_salaries(employee_salaries): Analyzes salaries to calculate median, mean, standard deviation, and percentile ranks. Parameters: employee_salaries (list): A list of employees\' salaries Returns: pd.DataFrame: A dataframe containing salary, median, mean, std, and percentile rank for each salary if not employee_salaries: return pd.DataFrame(columns=[\'Salary\', \'Median\', \'Mean\', \'STD\', \'Percentile Rank\']) median_salary = np.median(employee_salaries) mean_salary = np.mean(employee_salaries) std_salary = np.std(employee_salaries, ddof=1) # For sample standard deviation percentile_ranks = [np.percentile(employee_salaries, np.searchsorted(sorted(employee_salaries), s) / len(employee_salaries) * 100) for s in employee_salaries] data = { \'Salary\': employee_salaries, \'Median\': [median_salary] * len(employee_salaries), \'Mean\': [mean_salary] * len(employee_salaries), \'STD\': [std_salary] * len(employee_salaries), \'Percentile Rank\': percentile_ranks } return pd.DataFrame(data)"},{"question":"You are given a dataset of ecommerce sales transactions which contains the columns \'TransactionID\', \'CustomerID\', \'PurchaseAmount\', \'TransactionDate\'. Your task is to create a function `customer_lifetime_value(dataset)` that calculates the lifetime value (LTV) of each customer. The lifetime value is defined as the total amount of purchases made by a customer over the entire recorded period. Specifically, you need to: 1. Group the transactions by \'CustomerID\'. 2. Sum the \'PurchaseAmount\' for each customer. 3. Return these calculations in a Pandas DataFrame where the index is the \'CustomerID\' and the column name is \'LifetimeValue\'. Here is the signature of the function you need to implement: ```python import pandas as pd def customer_lifetime_value(dataset): # Your code here ``` # Input - `dataset` (pd.DataFrame): A Pandas DataFrame containing the transaction data, which includes at least the columns: \'TransactionID\', \'CustomerID\', \'PurchaseAmount\', \'TransactionDate\'. # Output - A Pandas DataFrame: Contains the lifetime value of each customer as rows with \'CustomerID\' as the index and \'LifetimeValue\' as the column. # Example Given the following dataset: ```python data = { \\"TransactionID\\": [1, 2, 3, 4, 5], \\"CustomerID\\": [123, 123, 124, 125, 125], \\"PurchaseAmount\\": [50.0, 75.0, 20.0, 100.0, 150.0], \\"TransactionDate\\": [\\"2021-01-01\\", \\"2021-01-02\\", \\"2021-02-01\\", \\"2021-02-15\\", \\"2021-03-01\\"] } dataset = pd.DataFrame(data) result = customer_lifetime_value(dataset) print(result) ``` The output should be a DataFrame like this: ```python LifetimeValue CustomerID 123 125.0 124 20.0 125 250.0 ```","solution":"import pandas as pd def customer_lifetime_value(dataset): Calculate the lifetime value of each customer from the given dataset. Parameters: dataset (pd.DataFrame): A Pandas DataFrame containing the transaction data. Returns: pd.DataFrame: DataFrame with \'CustomerID\' as the index and \'LifetimeValue\' as the column. # Group by \'CustomerID\' and sum the \'PurchaseAmount\' lifetime_value = dataset.groupby(\'CustomerID\')[\'PurchaseAmount\'].sum() # Rename the column to \'LifetimeValue\' lifetime_value = lifetime_value.to_frame(name=\'LifetimeValue\') return lifetime_value"},{"question":"Implement a function that takes a list of integers and an integer value n. The function should return a new list containing the first n prime numbers from the input list in the same order they appear. If the input list does not contain enough prime numbers, the function should return all the prime numbers found. The function should output a list with: List[int]: A list containing the first n prime numbers from the input list. You should write self-contained code starting with: ``` def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def task_func(input_list, n): ```","solution":"def is_prime(num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def task_func(input_list, n): prime_numbers = [num for num in input_list if is_prime(num)] return prime_numbers[:n]"},{"question":"You are given a list of tuples where each tuple contains a student\'s name and their grades in multiple subjects. The goal is to calculate the average grade for each student and categorize their performance based on the average grade. Write a function named `categorize_students` that processes the list and returns a dictionary with the student\'s names as keys and their performance category as values. Categories: - \\"Excellent\\" for average grades of 90 and above - \\"Good\\" for average grades between 75 and 89 - \\"Average\\" for average grades between 50 and 74 - \\"Poor\\" for average grades below 50 # Task: Write a function `categorize_students(students: List[Tuple[str, List[int]]]) -> Dict[str, str]` that: 1. Iterates through the provided list of tuples. 2. Calculates the average grade for each student (ignoring empty grade lists). 3. Categorizes each student based on their average grade. 4. Returns a dictionary with the student\'s names as keys and their performance category as values. # Example Input and Output: Given: ```python students = [ (\\"Alice\\", [85, 90, 78]), (\\"Bob\\", [95, 92, 88]), (\\"Charlie\\", [65, 70, 72]), (\\"David\\", [45, 50, 48]) ] ``` The function should return: ```python { \\"Alice\\": \\"Good\\", \\"Bob\\": \\"Excellent\\", \\"Charlie\\": \\"Average\\", \\"David\\": \\"Poor\\" } ``` # Constraints: - Each student will have at least one grade in the list. - Grades are in the range of 0 to 100. - The function should handle up to 1000 students with up to 10 grades each efficiently. # Hint: - Use the `sum()` and `len()` functions to calculate the average grade. - Use dictionary comprehension for a more concise solution.","solution":"from typing import List, Tuple, Dict def categorize_students(students: List[Tuple[str, List[int]]]) -> Dict[str, str]: Iterates through the list of tuples containing student names and their grades, calculates the average grade for each student, and categorizes their performance. Parameters: students (List[Tuple[str, List[int]]]): A list of tuples where each tuple contains a student\'s name and a list of their grades. Returns: Dict[str, str]: A dictionary with student names as keys and their performance categories as values. performance_categories = {} for name, grades in students: if grades: # Ensure there are grades to process avg_grade = sum(grades) / len(grades) if avg_grade >= 90: category = \\"Excellent\\" elif 75 <= avg_grade < 90: category = \\"Good\\" elif 50 <= avg_grade < 75: category = \\"Average\\" else: category = \\"Poor\\" performance_categories[name] = category return performance_categories"},{"question":"Implement a function that simulates the rolling of two six-sided dice. The function should roll the dice a specified number of times and then plot a histogram showing the frequency of each possible sum (ranging from 2 to 12) that can appear on the dice. The function should also return the counts of each sum as a dictionary. The function should raise an exception for: ValueError if the number of rolls is not a positive integer. The function should output with: dict: A dictionary where keys are the possible sums (2 to 12) and values are the counts of each sum. You should write self-contained code starting with: ``` import numpy as np import matplotlib.pyplot as plt import random def roll_dice(num_rolls=1000): ```","solution":"import numpy as np import matplotlib.pyplot as plt import random def roll_dice(num_rolls=1000): Simulate rolling two six-sided dice \'num_rolls\' times and plot a histogram showing the frequency of each possible sum (ranging from 2 to 12). Return the counts of each sum as a dictionary. Args: num_rolls (int): Number of times the dice should be rolled (must be a positive integer). Returns: dict: Dictionary where keys are sums (2 to 12) and values are their counts. Raises: ValueError: If the number of rolls is not a positive integer. if not isinstance(num_rolls, int) or num_rolls <= 0: raise ValueError(\\"Number of rolls must be a positive integer\\") results = [] for _ in range(num_rolls): die1 = random.randint(1, 6) die2 = random.randint(1, 6) results.append(die1 + die2) # count the frequencies of each sum counts = {sum_: results.count(sum_) for sum_ in range(2, 13)} # plot the histogram sums = list(counts.keys()) frequencies = list(counts.values()) plt.figure(figsize=(10, 6)) plt.bar(sums, frequencies, color=\'blue\', edgecolor=\'black\') plt.xlabel(\'Sum of Two Dice\') plt.ylabel(\'Frequency\') plt.title(\'Dice Roll Frequencies\') plt.xticks(sums) plt.grid(axis=\'y\', linestyle=\'--\', alpha=0.7) plt.show() return counts"},{"question":"Create a function that reads a CSV file containing information about users (name, age, email) and returns the statistics of ages present in the file. The function should return a dictionary with the average age, the maximum age, the minimum age, and the count of users falling into different age brackets: (0-18, 19-35, 36-60, 60+). If there are no users in a certain age bracket, the count for that bracket should be 0. Handle any possible exceptions that might occur while reading the file or processing the data. The function should output: ``` dict: A dictionary containing the age statistics: \'average_age\', \'max_age\', \'min_age\', and \'age_brackets\' (a nested dictionary with keys \'0-18\', \'19-35\', \'36-60\', \'60+\' and their respective counts). ``` You should write self-contained code starting with: ``` import csv def calculate_age_statistics(csv_file_path): ```","solution":"import csv def calculate_age_statistics(csv_file_path): Reads a CSV file containing user information (name, age, email) and returns statistics of ages present in the file. Args: csv_file_path (str): The path to the CSV file. Returns: dict: A dictionary containing the age statistics: \'average_age\', \'max_age\', \'min_age\', and \'age_brackets\' (a nested dictionary with keys \'0-18\', \'19-35\', \'36-60\', \'60+\' and their respective counts). ages = [] try: with open(csv_file_path, newline=\'\') as csvfile: reader = csv.DictReader(csvfile) for row in reader: try: age = int(row[\'age\']) ages.append(age) except ValueError: continue if not ages: return { \'average_age\': None, \'max_age\': None, \'min_age\': None, \'age_brackets\': { \'0-18\': 0, \'19-35\': 0, \'36-60\': 0, \'60+\': 0 } } age_brackets = {\'0-18\': 0, \'19-35\': 0, \'36-60\': 0, \'60+\': 0} for age in ages: if age <= 18: age_brackets[\'0-18\'] += 1 elif age <= 35: age_brackets[\'19-35\'] += 1 elif age <= 60: age_brackets[\'36-60\'] += 1 else: age_brackets[\'60+\'] += 1 return { \'average_age\': sum(ages) / len(ages), \'max_age\': max(ages), \'min_age\': min(ages), \'age_brackets\': age_brackets } except (FileNotFoundError, KeyError) as e: raise e"},{"question":"You are given an e-commerce site\'s purchase data where each row represents a product and each column represents a user. A specific cell in this matrix represents the number of times a user purchased a particular product. Additionally, there is a list of products that belong to specific categories. Your task is to predict the likelihood of a user purchasing a given product based on their past purchases and the category similarity of products. Specifically, you need to implement the function `predict_purchase_likelihood` to achieve this. Here is the detailed description of the function: # Function Signature: ```python def predict_purchase_likelihood(product: int, user: int, purchase_data: np.ndarray, category_labels: List[int]) -> float: ``` # Parameters: - `product` (int): The index of the product for which we want to predict the purchase likelihood. - `user` (int): The index of the user for whom we want to predict the purchase likelihood. - `purchase_data` (np.ndarray): A 2D NumPy array where `purchase_data[i][j]` represents the number of times user `j` purchased product `i`. - `category_labels` (List[int]): A list where each element is an integer representing the category of the corresponding product. # Description: 1. Identify the category of the given product. 2. Find all other products that belong to the same category. 3. Calculate the average number of times the given user purchased products from the same category. 4. Return this average as the predicted likelihood of purchasing the given product. # Return: - Return a single float which is the predicted likelihood of the specified user purchasing the specified product. Below is an example usage of `predict_purchase_likelihood`: ```python import numpy as np from typing import List # Example data structures purchase_matrix = np.array([ [10, 0, 2, 1], [8, 0, 5, 2], [1, 3, 0, 5], [4, 0, 0, 7], [0, 6, 1, 8], ]) category_labels = [1, 1, 2, 2, 1] # Categories of the products # Predict purchase likelihood predicted_likelihood = predict_purchase_likelihood(0, 2, purchase_matrix, category_labels) print(predicted_likelihood) ``` Constraints: - Use only NumPy for array operations. - Ensure the function handles edge cases where there may be no purchases in the same category.","solution":"import numpy as np from typing import List def predict_purchase_likelihood(product: int, user: int, purchase_data: np.ndarray, category_labels: List[int]) -> float: Predict the likelihood of a user purchasing a given product based on their past purchases and the category similarity of products. Args: - product (int): Index of the product to be predicted. - user (int): The index of the user. - purchase_data (np.ndarray): 2D array where purchase_data[i][j] = number of times user j purchased product i. - category_labels (List[int]): List where each element is an integer representing the category of the corresponding product. Returns: - float: Predicted likelihood of the specified user purchasing the specified product. category = category_labels[product] same_category_indices = [i for i in range(len(category_labels)) if category_labels[i] == category] if not same_category_indices: return 0.0 total_purchases = 0 count = 0 for index in same_category_indices: total_purchases += purchase_data[index][user] count += 1 return total_purchases / count if count > 0 else 0.0"},{"question":"You need to create a function that processes a text file containing various sentences and performs several text analysis tasks. The function must achieve the following: 1. Read the text from the file. 2. Tokenize the text into words. 3. Count the occurrences of each word (case insensitive). 4. Identify the top N most common words. 5. Save the word frequencies to an output file. 6. Plot a bar chart of the top N most common words and their frequencies. Implement this in a function named `analyze_text_file`. **Function Name**: `analyze_text_file` **Parameters**: - `filename` (str): The name of the text file containing the sentences. - `output_file` (str): The name and path of the file where the word frequencies will be saved. - `top_n` (int): The number of top common words to display in the plot. Use the following libraries: - `collections.Counter` for counting word occurrences. - `matplotlib.pyplot.bar` for plotting the bar chart. - `matplotlib.pyplot.xlabel` and `matplotlib.pyplot.ylabel` for labeling the x and y-axes respectively. In your implementation, make sure to: - Convert all words to lowercase to ensure the counting is case insensitive. - Use `with open` for file operations to ensure proper file handling. - Appropriately label the axes of the bar chart. The text file is assumed to contain plain text as shown in the example format below. **Sample Text File Format** (`sample_text.txt`): ``` This is a sample sentence. This sample sentence is for testing the function. Text processing is fun! Let\'s test the text processing function. ``` Here\'s a structure to help you get started: ```python import collections import matplotlib.pyplot as plt def analyze_text_file(filename: str, output_file: str, top_n: int): # Your code goes here pass ```","solution":"import collections import matplotlib.pyplot as plt def analyze_text_file(filename: str, output_file: str, top_n: int): # Read the text from the file with open(filename, \'r\') as file: text = file.read() # Tokenize the text into words words = text.lower().split() # Count the occurrences of each word word_counts = collections.Counter(words) # Identify the top N most common words most_common_words = word_counts.most_common(top_n) # Save the word frequencies to an output file with open(output_file, \'w\') as file: for word, count in word_counts.items(): file.write(f\\"{word}: {count}n\\") # Extract words and frequencies for plotting words, counts = zip(*most_common_words) # Plot a bar chart of the top N most common words and their frequencies plt.bar(words, counts) plt.xlabel(\'Words\') plt.ylabel(\'Frequencies\') plt.title(\'Top N Most Common Words\') plt.show()"},{"question":"Write a function to simulate a weather station\'s temperature readings over a month. Generate a CSV file containing daily temperature readings (minimum and maximum temperatures for each day) for a given month, then read this CSV file to determine the average minimum and maximum temperature for that month. The function should output: DataFrame: A pandas DataFrame with columns \'Average_Min_Temperature\' and \'Average_Max_Temperature\', showing the average temperatures over the month. You should write self-contained code, starting with: ``` import pandas as pd import csv import random import os # Constants DAYS_IN_MONTH = 30 CSV_FILE = \\"temperature_readings.csv\\" def temperature_simulation(): # Generate and write the CSV file with random temperature readings (min and max for each day) with open(CSV_FILE, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Day\', \'Min_Temperature\', \'Max_Temperature\']) for day in range(1, DAYS_IN_MONTH + 1): min_temp = random.uniform(-10, 10) max_temp = random.uniform(10, 35) writer.writerow([day, min_temp, max_temp]) # Read the generated CSV file and calculate average min and max temperatures df = pd.read_csv(CSV_FILE) avg_min_temp = df[\'Min_Temperature\'].mean() avg_max_temp = df[\'Max_Temperature\'].mean() result_df = pd.DataFrame({ \'Average_Min_Temperature\': [avg_min_temp], \'Average_Max_Temperature\': [avg_max_temp] }) return result_df ```","solution":"import pandas as pd import csv import random import os # Constants DAYS_IN_MONTH = 30 CSV_FILE = \\"temperature_readings.csv\\" def temperature_simulation(): Generates random temperature readings for a month and calculates the average minimum and maximum temperatures. Returns: pd.DataFrame: A DataFrame with columns \'Average_Min_Temperature\' and \'Average_Max_Temperature\' showing the average temperatures over the month. # Generate and write the CSV file with random temperature readings (min and max for each day) with open(CSV_FILE, mode=\'w\', newline=\'\') as file: writer = csv.writer(file) writer.writerow([\'Day\', \'Min_Temperature\', \'Max_Temperature\']) for day in range(1, DAYS_IN_MONTH + 1): min_temp = random.uniform(-10, 10) # Simulated min temperature max_temp = random.uniform(10, 35) # Simulated max temperature writer.writerow([day, min_temp, max_temp]) # Read the generated CSV file and calculate average min and max temperatures df = pd.read_csv(CSV_FILE) avg_min_temp = df[\'Min_Temperature\'].mean() avg_max_temp = df[\'Max_Temperature\'].mean() result_df = pd.DataFrame({ \'Average_Min_Temperature\': [avg_min_temp], \'Average_Max_Temperature\': [avg_max_temp] }) return result_df"},{"question":"You are tasked with creating a function that processes transaction data. The function should identify all transactions that exceed a certain threshold amount and mark them as \\"FLAGGED\\". The transaction data will be provided as a list of dictionaries, where each dictionary represents a single transaction. The threshold amount will be passed as an additional argument to the function. The function should be named `flag_large_transactions` and take a list of transaction dictionaries and the threshold amount. # Function Signature: ```python def flag_large_transactions(transactions, threshold): ``` # Arguments: 1. `transactions`: A list of dictionaries where each dictionary represents a transaction. Example of a transaction dictionary: - `id`: A unique identifier for the transaction. - `amount`: The amount of the transaction. - `status`: The status of the transaction which can be `\\"COMPLETED\\"`, `\\"PENDING\\"`, or `\\"FAILED\\"`. 2. `threshold`: A float representing the threshold amount. Any transaction with an `amount` greater than or equal to this threshold should be flagged. # Returns: The function should return a new list of dictionaries where transactions with an `amount` greater than or equal to the threshold have an additional key-value pair: `\'flag\': \'FLAGGED\'`. # Instructions: 1. Iterate through each transaction in the list. 2. Check if the `amount` of the transaction is greater than or equal to the threshold. 3. If it is, add a new key `\'flag\'` with the value `\'FLAGGED\'` to the transaction dictionary. 4. Return the modified list of transactions. Example: ```python transactions = [ {\'id\': 1, \'amount\': 150.0, \'status\': \'COMPLETED\'}, {\'id\': 2, \'amount\': 75.0, \'status\': \'PENDING\'}, {\'id\': 3, \'amount\': 300.0, \'status\': \'FAILED\'} ] threshold = 100.0 print(flag_large_transactions(transactions, threshold)) # Expected output: # [ # {\'id\': 1, \'amount\': 150.0, \'status\': \'COMPLETED\', \'flag\': \'FLAGGED\'}, # {\'id\': 2, \'amount\': 75.0, \'status\': \'PENDING\'}, # {\'id\': 3, \'amount\': 300.0, \'status\': \'FAILED\', \'flag\': \'FLAGGED\'} # ] ```","solution":"def flag_large_transactions(transactions, threshold): Identifies transactions that exceed the threshold amount and mark them as \'FLAGGED\'. Args: transactions (list): A list of transaction dictionaries. threshold (float): The threshold amount. Returns: list: Modified list of transactions with flagged large transactions. for transaction in transactions: if transaction[\'amount\'] >= threshold: transaction[\'flag\'] = \'FLAGGED\' return transactions"},{"question":"** In a given string, you need to remove all adjacent duplicate characters recursively. This means that if two or more consecutive characters are the same, they should be removed, and the process should continue until no more adjacent duplicates are found. Here are the requirements: 1. **Function Name:** `remove_adjacent_duplicates` 2. **Parameters:** This function takes one parameter: - `s`: a string consisting of lowercase letters only 3. **Returns:** The function should return a new string with all adjacent duplicates removed. **Specific Requirements:** - The function should perform the removal recursively, meaning after an initial pass to remove adjacent duplicates, the function should be called again on the resulting string until no more adjacent duplicates are found. **Constraints:** - The length of the string will be at most 1000 characters. **Example Usage:** ```python result = remove_adjacent_duplicates(\\"abbaca\\") # result should be \\"ca\\" because: # \\"abbaca\\" -> \\"aaca\\" -> \\"ca\\" result = remove_adjacent_duplicates(\\"azxxzy\\") # result should be \\"ay\\" because: # \\"azxxzy\\" -> \\"azzy\\" -> \\"ay\\" ``` **Guidelines for the solution:** - You may use a stack to manage characters while iterating through the string, pushing non-duplicate characters and popping when duplicates are encountered. - Recursively call the `remove_adjacent_duplicates` function until the string remains unchanged. ---","solution":"def remove_adjacent_duplicates(s): Removes all adjacent duplicate characters recursively. stack = [] for char in s: if stack and stack[-1] == char: # Pop the last character from stack if it is the same as the current one stack.pop() else: # Otherwise, push the current character onto the stack stack.append(char) # Convert stack back to string reduced_string = \\"\\".join(stack) # If the reduced string is the same as the original, recursion stops if reduced_string == s: return reduced_string else: # Otherwise, call the function recursively on the reduced string return remove_adjacent_duplicates(reduced_string)"},{"question":"In this problem, you are required to implement a Python function named `transpose_matrix` that takes a 2D list (matrix) as its parameter and returns its transpose. The goal of this problem is to familiarize you with numpy operations and matrix manipulations. **Function Signature:** ```python def transpose_matrix(matrix): Transpose a given 2D list (matrix). Parameters ---------- matrix : list of lists A 2D list representing the original matrix. Returns ------- transposed_matrix : list of lists A 2D list representing the transposed matrix. ``` **Parameters:** - `matrix` (list of lists): A 2D list where each inner list represents a row of the matrix. **Functionality:** 1. The function should return a new 2D list that is the transpose of the input matrix. 2. The transpose of a matrix is obtained by swapping rows with columns. **Hints:** 1. You can use list comprehensions to achieve the transposition. 2. For an element at position (i,j) in the original matrix, it should be at position (j,i) in the transposed matrix. **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(transpose_matrix(matrix)) # Expected output: # [ # [1, 4, 7], # [2, 5, 8], # [3, 6, 9] # ] ```","solution":"def transpose_matrix(matrix): Transpose a given 2D list (matrix). Parameters ---------- matrix : list of lists A 2D list representing the original matrix. Returns ------- transposed_matrix : list of lists A 2D list representing the transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"In a messaging application, messages are stored in a conversation thread. Each message includes metadata such as the timestamp of when the message was sent, the sender, and the message content. Sometimes, users delete multiple messages from a conversation, and the system must reassign message IDs to maintain sequential order. Your task is to implement a function called `reassign_message_ids(messages)` that takes a list of messages and reassigns the IDs to ensure they are sequential, starting from 1 for the first message, 2 for the second, and so on. Each message is represented as a dictionary with the following keys: 1. \'id\': The original ID of the message (integer). 2. \'timestamp\': The timestamp when the message was sent (string in \'YYYY-MM-DD HH:MM:SS\' format). 3. \'sender\': The sender of the message (string). 4. \'content\': The content of the message (string). Your function should: 1. Create a new list of dictionaries with the same messages but with reassigned sequential IDs starting from 1. 2. Maintain the original order of messages. **Function Signature:** ```python def reassign_message_ids(messages: list) -> list: ... ``` **Parameters:** - `messages`: A list of dictionaries representing the messages in a conversation thread. **Returns:** - A list of dictionaries with updated IDs, maintaining the order of the original messages. **Example:** ```python messages = [ {\'id\': 5, \'timestamp\': \'2023-03-08 12:00:05\', \'sender\': \'user1\', \'content\': \'Hello!\'}, {\'id\': 6, \'timestamp\': \'2023-03-08 12:00:06\', \'sender\': \'user2\', \'content\': \'Hi! How are you?\'}, {\'id\': 10, \'timestamp\': \'2023-03-08 12:00:07\', \'sender\': \'user1\', \'content\': \'I am good, thanks!\'} ] reassign_message_ids(messages) # Output: # [{\'id\': 1, \'timestamp\': \'2023-03-08 12:00:05\', \'sender\': \'user1\', \'content\': \'Hello!\'}, # {\'id\': 2, \'timestamp\': \'2023-03-08 12:00:06\', \'sender\': \'user2\', \'content\': \'Hi! How are you?\'}, # {\'id\': 3, \'timestamp\': \'2023-03-08 12:00:07\', \'sender\': \'user1\', \'content\': \'I am good, thanks!\'}] ```","solution":"def reassign_message_ids(messages): Reassign message IDs to be sequential starting from 1. Parameters: messages (list): A list of dictionaries representing messages. Returns: list: A list of dictionaries with updated sequential IDs. for index, message in enumerate(messages): message[\'id\'] = index + 1 return messages"},{"question":"**You are tasked with creating a monitoring system that logs system performance data. The data includes CPU usage, memory usage, and disk usage. Your function will save this data in a CSV file named `system_performance.csv`, appending the data with timestamps at regular intervals. Your function should handle the creation and writing to the CSV file. You need to ensure that if the file doesn\'t exist, it\'s created with appropriate headers, and if it does exist, data is appended without headers. Your task is to write a function named `log_system_performance` with the following requirements: 1. Record the system\'s CPU, memory, and disk usage at a specified time interval. 2. Save the recorded data in `system_performance.csv` with the current timestamp. 3. Ensure the headers \'Timestamp\', \'CPU_Usage\', \'Memory_Usage\', and \'Disk_Usage\' are included only if the file is being created for the first time. 4. Use appropriate error handling to address any file I/O issues that may arise during recording. 5. Continue logging performance data for a specified duration before stopping. **Function Signature**: `def log_system_performance(interval: int, duration: int):` Your function should utilize the following library APIs: - `psutil.cpu_percent()` to get CPU usage. - `psutil.virtual_memory().percent` to get memory usage. - `psutil.disk_usage(\'/\').percent` to get disk usage. - `time.time()` to record the current timestamp. - `csv.writer` for handling CSV file operations. **Example invocation**: ```python log_system_performance(10, 60) ``` The function should record system performance every 10 seconds over a duration of 60 seconds and save this data to `system_performance.csv`. Ensure proper logging and file management throughout the process. **","solution":"import csv import psutil import time import os def log_system_performance(interval: int, duration: int): Logs the system\'s CPU, memory, and disk usage at specified time intervals, saving the data to \'system_performance.csv\' with a timestamp. Args: interval (int): The time interval (in seconds) between recordings. duration (int): The total duration (in seconds) for which to log the data. file_exists = os.path.isfile(\'system_performance.csv\') with open(\'system_performance.csv\', mode=\'a\', newline=\'\') as file: writer = csv.writer(file) if not file_exists: writer.writerow([\'Timestamp\', \'CPU_Usage\', \'Memory_Usage\', \'Disk_Usage\']) end_time = time.time() + duration while time.time() < end_time: timestamp = time.strftime(\'%Y-%m-%d %H:%M:%S\', time.localtime()) cpu_usage = psutil.cpu_percent() memory_usage = psutil.virtual_memory().percent disk_usage = psutil.disk_usage(\'/\').percent writer.writerow([timestamp, cpu_usage, memory_usage, disk_usage]) time.sleep(interval)"},{"question":"Create a function named `lattice_paths` that calculates the number of unique paths in a grid of size `n x m`, moving from the top-left corner to the bottom-right corner. You may only move down or right at each step. You are required to implement a dynamic programming solution to solve this problem efficiently. The function should take two arguments `n` and `m`, representing the number of rows and columns in the grid, respectively. # Function Signature ```python def lattice_paths(n, m): Calculate the number of unique paths in an n x m grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: int: Number of unique paths from the top-left to the bottom-right corner. ``` # Example Usage Given the grid size: - `n = 3` - `m = 2` ```python result = lattice_paths(3, 2) # The result should be 10 ``` # Task 1. Implement the `lattice_paths` function following the provided function signature. 2. Use dynamic programming to optimize the solution for larger grids. 3. Verify your implementation with the given example usage and additional test cases. # Constraints - `1 <= n, m <= 100`","solution":"def lattice_paths(n, m): Calculate the number of unique paths in an n x m grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. Returns: int: Number of unique paths from the top-left to the bottom-right corner. # Create a 2D array dp where dp[i][j] represents the number of unique paths to reach cell (i, j) dp = [[0] * (m + 1) for _ in range(n + 1)] # There\'s exactly one way to reach any cell in the first row or first column for i in range(n + 1): dp[i][0] = 1 for j in range(m + 1): dp[0][j] = 1 # Fill the dp array using the relation dp[i][j] = dp[i-1][j] + dp[i][j-1] for i in range(1, n + 1): for j in range(1, m + 1): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n][m]"},{"question":"In this problem, you will create a function named `calculate_exam_statistics` that calculates statistical measures on a list of exam scores. The function should take a single argument, a list of integers representing students\' scores. The steps required to be carried out by the function are as follows: 1. Calculate and return the average score rounded to two decimal places. 2. Calculate and return the highest score. 3. Calculate and return the lowest score. 4. Compute and return the median score. If the number of scores is even, the median is the average of the two middle numbers. 5. Compute and return the mode score. If multiple values have the highest frequency, return all of them in ascending order. The function should return a dictionary containing these five statistics with the following keys: \\"average\\", \\"highest\\", \\"lowest\\", \\"median\\", and \\"mode\\". Here is a template for the `calculate_exam_statistics` function: ```python def calculate_exam_statistics(scores): # Implementation goes here ``` **Requirements:** - Use appropriate built-in functions and modules from the Python Standard Library where necessary. - Ensure that the function handles an empty list by returning None or a suitable message for each statistic. - Follow the specified template for the function definition and naming conventions. - Ensure the function properly calculates and returns all five requested statistical measures. **Example:** ```python scores = [87, 89, 91, 85, 87, 93, 91, 85, 87] expected_output = { \\"average\\": 88.33, \\"highest\\": 93, \\"lowest\\": 85, \\"median\\": 87, \\"mode\\": [87] } print(calculate_exam_statistics(scores)) # Output should match expected_output ```","solution":"from statistics import mean, median, mode, multimode def calculate_exam_statistics(scores): if not scores: return { \\"average\\": None, \\"highest\\": None, \\"lowest\\": None, \\"median\\": None, \\"mode\\": None } avg = round(mean(scores), 2) high = max(scores) low = min(scores) med = median(scores) modes = sorted(multimode(scores)) return { \\"average\\": avg, \\"highest\\": high, \\"lowest\\": low, \\"median\\": med, \\"mode\\": modes }"},{"question":"You are working on a project that involves analyzing the connectivity of servers in a distributed network. Each server can communicate directly with certain other servers, and you need to evaluate which server acts as the central hub of the network based on its connectivity. Create a function named `central_hub` that does the following: 1. Accepts a single parameter `connections`, a dictionary where each key is a server identifier and its value is a list of identifiers of directly connected servers. 2. Calculates the degree centrality for each server. Degree centrality is defined as the number of direct connections a server has. 3. Returns the server identifier with the highest degree centrality. If there is a tie, return one of the servers with the highest degree centrality. The function signature should be: ```python def central_hub(connections): ``` # Example: Assume you have the following network connections defined as a dictionary: ```python connections = { \'A\': [\'B\', \'C\', \'D\'], \'B\': [\'A\', \'D\'], \'C\': [\'A\'], \'D\': [\'A\', \'B\'], \'E\': [\'F\'], \'F\': [\'E\'] } ``` ```python print(central_hub(connections)) ``` Expected output should give the identifier of the server with the most direct connections. In this example, \'A\' has the highest degree centrality with 3 connections.","solution":"def central_hub(connections): Returns the identifier of the server with the highest degree centrality. If there is a tie, returns one of the servers with the highest degree centrality. max_degree = -1 central_server = None for server, connected_servers in connections.items(): degree = len(connected_servers) if degree > max_degree: max_degree = degree central_server = server return central_server"},{"question":"Your task is to create a function named `rotate_matrix` which will take a given square `n x n` NumPy array and rotate it by a specified angle (clockwise). The angle should be one of the following: 90, 180, or 270 degrees. The function should use NumPy to efficiently handle the rotation. Function Signature: ```python def rotate_matrix(matrix: np.ndarray, angle: int) -> np.ndarray: pass ``` Parameters: - `matrix` : NumPy array - The input square matrix to be rotated. - `angle` : integer - The angle by which to rotate the matrix (must be one of 90, 180, or 270 degrees). Output: - The function should return a NumPy array which is the rotated version of the input matrix. Example Usages: - `rotate_matrix(np.array([[1, 2], [3, 4]]), 90)` - Should return a 2x2 NumPy array: ``` array([[3, 1], [4, 2]]) ``` - `rotate_matrix(np.array([[1, 2], [3, 4]]), 180)` - Should return a 2x2 NumPy array: ``` array([[4, 3], [2, 1]]) ``` - `rotate_matrix(np.array([[1, 2], [3, 4], [5, 6]]), 90)` - Should raise a ValueError because the input matrix is not square. Requirements: - Use the **NumPy** library to create and manipulate the array. - Raise a **ValueError** if the input matrix is not square or if the angle is not one of 90, 180, 270 degrees.","solution":"import numpy as np def rotate_matrix(matrix: np.ndarray, angle: int) -> np.ndarray: Rotates an n x n NumPy array by the specified angle (90, 180, or 270 degrees clockwise). Parameters: matrix (np.ndarray): The input square matrix to be rotated. angle (int): The angle by which to rotate the matrix (must be one of 90, 180, 270 degrees). Returns: np.ndarray: The rotated matrix. Raises: ValueError: If the input matrix is not square or if the angle is not one of 90, 180, 270 degrees. if matrix.shape[0] != matrix.shape[1]: raise ValueError(\\"Input matrix must be square.\\") if angle not in (90, 180, 270): raise ValueError(\\"Angle must be one of 90, 180, 270 degrees.\\") if angle == 90: return np.rot90(matrix, k=-1) elif angle == 180: return np.rot90(matrix, k=2) elif angle == 270: return np.rot90(matrix, k=1)"},{"question":"You are required to implement a function `reverse_vowel_pairs` that takes a string and reverses the positions of all the vowels in the string. Other characters should not be moved or disturbed. Function Signature: ```python def reverse_vowel_pairs(s: str) -> str: ``` Parameters: - `s` (str): A string containing any set of characters. Returns: - A string where only the vowels in the input string `s` have been reversed, while the positions of all other characters are unchanged. Examples: ```python # Example 1 s = \\"hello\\" result = reverse_vowel_pairs(s) # Expected Output: \\"holle\\" # Example 2 s = \\"leetcode\\" result = reverse_vowel_pairs(s) # Expected Output: \\"leotcede\\" # Example 3 s = \\"rhythm\\" result = reverse_vowel_pairs(s) # Expected Output: \\"rhythm\\" (no vowels to reverse) ``` **Notes:** 1. Vowels are defined as \'a\', \'e\', \'i\', \'o\', \'u\' and their uppercase counterparts. 2. The function should be case-insensitive when identifying vowels but should maintain the case in the final output. 3. Space complexity should be taken into consideration. Avoid using unnecessary extra spaces for optimal performance.","solution":"def reverse_vowel_pairs(s: str) -> str: Reverses the vowels in the given string without altering the positions of other characters. Args: - s (str): Input string Returns: - str: String with vowels reversed vowels = \'aeiouAEIOU\' s_list = list(s) i, j = 0, len(s_list) - 1 while i < j: if s_list[i] not in vowels: i += 1 elif s_list[j] not in vowels: j -= 1 else: s_list[i], s_list[j] = s_list[j], s_list[i] i += 1 j -= 1 return \'\'.join(s_list)"},{"question":"You are tasked with creating a function named `find_optimal_restaurant_location` which helps find the optimal position for a new restaurant on a one-dimensional street to minimize the sum of distances people have to travel. 1. You are given a list of integers representing the positions of houses on the street. 2. The restaurant can only be positioned at one of these house positions. 3. Your task is to find and return the position that minimizes the sum of distances from this position to all the house positions. The function signature should be: ```python def find_optimal_restaurant_location(house_positions: List[int]) -> int: ``` # Parameters 1. `house_positions` (List[int]): A list of integers representing the positions of houses on the street, where each position is unique. # Output The function should return an integer representing the position of the new restaurant that minimizes the sum of distances to all houses. # Examples ```python find_optimal_restaurant_location([1, 2, 3, 4]) # Returns: 2 find_optimal_restaurant_location([1, 3, 6, 7, 8]) # Returns: 6 # Explanation: # In the first example, placing the restaurant at position 2 results in the sum of distances: # |1-2| + |2-2| + |3-2| + |4-2| = 1 + 0 + 1 + 2 = 4, which is minimal. # In the second example, placing the restaurant at position 6 results in the sum of distances: # |1-6| + |3-6| + |6-6| + |7-6| + |8-6| = 5 + 3 + 0 + 1 + 2 = 11, which is minimal. ``` # Requirements - Ensure your solution efficiently computes the optimal position. - You may assume the list of house positions is non-empty and each position is unique. Your function should be tested using the provided examples and be compatible with Python 3.x.","solution":"from typing import List def find_optimal_restaurant_location(house_positions: List[int]) -> int: Determines the optimal location for a new restaurant on a one-dimensional street. Parameters: house_positions (List[int]): A list of integers representing the positions of houses on the street. Returns: int: The position that minimizes the sum of distances to all houses. house_positions.sort() # The optimal position is the median of the sorted house positions n = len(house_positions) if n % 2 == 1: return house_positions[n // 2] else: return house_positions[(n >> 1) - 1]"},{"question":"You are asked to develop a simulated annealing algorithm to solve an optimization problem. Simulated annealing is a probabilistic technique used for approximating the global optimum of a given function. This problem will help you learn how to implement a simulated annealing solution in Python. Write a function, `simulated_annealing`, to find the minimum of the given function using the simulated annealing algorithm: ```python import numpy as np import random def simulated_annealing(func, bounds, initial_temp, alpha, max_iter): Implements the simulated annealing algorithm to minimize the given function. Parameters: func (callable): The function to minimize. bounds (list of tuples): A list of tuples specifying the (min, max) bounds for each dimension. initial_temp (float): The initial temperature for the annealing process. alpha (float): The cooling rate (0 < alpha < 1). max_iter (int): The maximum number of iterations for the algorithm. Returns: dict: A dictionary containing the best solution found and its corresponding value. ``` **Function Requirements:** - Ensure `bounds` is a list of tuples where each tuple defines the min and max limits for each dimension of the solution space. - Validate that `initial_temp` is a positive float and `alpha` is a float between 0 and 1. - Validate that `max_iter` is a positive integer. - Initialize the current solution randomly within the bounds. - Implement an iterative process where in each iteration, a new candidate solution is generated by adding a small random perturbation to the current solution. - Accept or reject the candidate solution based on the Metropolis criterion: if the new solution is better, accept it; if it is worse, accept it with a probability that decreases with temperature. - Gradually reduce the temperature based on the cooling rate `alpha`. - Return the best solution found along with its corresponding value. **Example of the function to minimize:** ```python def func(x): return x**2 + 10*np.sin(x) ``` **Example Usage:** ```python bounds = [(-10, 10)] solution = simulated_annealing(func, bounds, initial_temp=100, alpha=0.95, max_iter=1000) print(\\"Best solution found:\\", solution[\'best_solution\']) print(\\"Value of the function at the best solution:\\", solution[\'best_value\']) ``` **Constraints:** - Ensure that the parameters `initial_temp`, `alpha`, and `max_iter` are within reasonable and logical ranges. - Use the numpy and random libraries for numerical operations and random number generation.","solution":"import numpy as np import random def simulated_annealing(func, bounds, initial_temp, alpha, max_iter): Implements the simulated annealing algorithm to minimize the given function. Parameters: func (callable): The function to minimize. bounds (list of tuples): A list of tuples specifying the (min, max) bounds for each dimension. initial_temp (float): The initial temperature for the annealing process. alpha (float): The cooling rate (0 < alpha < 1). max_iter (int): The maximum number of iterations for the algorithm. Returns: dict: A dictionary containing the best solution found and its corresponding value. if not isinstance(initial_temp, (float, int)) or initial_temp <= 0: raise ValueError(\\"initial_temp must be a positive float.\\") if not isinstance(alpha, float) or not (0 < alpha < 1): raise ValueError(\\"alpha must be a float between 0 and 1.\\") if not isinstance(max_iter, int) or max_iter <= 0: raise ValueError(\\"max_iter must be a positive integer.\\") if not all(isinstance(bound, tuple) and len(bound) == 2 for bound in bounds): raise ValueError(\\"bounds must be a list of tuples with two elements each.\\") # Initialize the current solution randomly within the bounds current_solution = np.array([random.uniform(bound[0], bound[1]) for bound in bounds]) current_value = func(*current_solution) best_solution = np.copy(current_solution) best_value = current_value temperature = initial_temp for iteration in range(max_iter): # Generate new candidate solution by perturbing the current solution candidate_solution = current_solution + np.array([random.uniform(-0.1, 0.1) for _ in bounds]) # Ensure the candidate solution is within the bounds candidate_solution = np.clip(candidate_solution, [b[0] for b in bounds], [b[1] for b in bounds]) candidate_value = func(*candidate_solution) # Determine if we should accept the new candidate if candidate_value < current_value: current_solution = candidate_solution current_value = candidate_value else: acceptance_probability = np.exp(-(candidate_value - current_value) / temperature) if random.random() < acceptance_probability: current_solution = candidate_solution current_value = candidate_value # Update the best solution found if current_value < best_value: best_solution = np.copy(current_solution) best_value = current_value # Update the temperature temperature *= alpha return { \\"best_solution\\": best_solution, \\"best_value\\": best_value }"},{"question":"In this problem, you are required to write a function `frequency_sort` that takes a list of integers and returns a new list where the elements are sorted according to their frequency in descending order. If two elements have the same frequency, they should appear in ascending order. Function Signature ```python def frequency_sort(nums): Sorts elements by frequency in descending order. :param nums: A list of integers :returns: A new list with elements sorted by their frequency in descending order ``` Example - Input: [1, 1, 2, 2, 2, 3] Output: [2, 2, 2, 1, 1, 3] - Input: [4, 5, 6, 5, 4, 3] Output: [4, 4, 5, 5, 3, 6] Requirements - You **must** use the `collections.Counter` class for counting element frequencies. - You **should not** use the built-in `sorted` function with the `key` parameter directly for sorting; instead, manually implement any necessary sorting logic.","solution":"from collections import Counter def frequency_sort(nums): Sorts elements by frequency in descending order. :param nums: A list of integers :returns: A new list with elements sorted by their frequency in descending order # Count frequencies frequencies = Counter(nums) # Create a list of tuples (element, frequency) freq_list = [(num, freq) for num, freq in frequencies.items()] # Sort by frequency first (descending) and then by element (ascending) freq_list.sort(key=lambda x: (-x[1], x[0])) # Construct the result list result = [] for num, freq in freq_list: result.extend([num] * freq) return result"},{"question":"You are required to write a function `get_top_n_frequent_elements(nums, n)` that takes a list of integers `nums` and an integer `n`. The function should return a list of the `n` most frequent elements in `nums`. If there are ties in frequency, the elements with the smaller value should be preferred. To accomplish this, you can use a dictionary to count the frequencies of each element in `nums`. Then, sort the elements based on their frequencies and values to get the top `n` elements. Requirements: - Implement the function `get_top_n_frequent_elements(nums, n)`. - Use a dictionary to count the frequencies of elements. - Sort the elements first by frequency (in descending order) and then by their value (in ascending order) if frequencies are equal. - Do not use any external libraries other than built-in Python collections. Example: ```python nums = [4, 1, 2, 2, 3, 3, 3, 4, 4, 4, 5] n = 3 # The frequencies are: # 4: 4 times # 3: 3 times # 2: 2 times # 1: 1 time # 5: 1 time # Top 3 elements by frequency: # [4, 3, 2] - 4 has the highest frequency, followed by 3 and then 2 print(get_top_n_frequent_elements(nums, n)) # Output: [4, 3, 2] ```","solution":"def get_top_n_frequent_elements(nums, n): Returns the n most frequent elements from the list nums. If there are ties in frequency, the elements with the smaller value are preferred. from collections import defaultdict frequency = defaultdict(int) for num in nums: frequency[num] += 1 freq_list = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) return [x[0] for x in freq_list[:n]]"},{"question":"You are tasked with writing a function `count_unique_substrings` that counts the number of unique substrings of a given string. # Requirements: 1. The function must be named `count_unique_substrings`. 2. The function should take one parameter: `input_string`, which is the string for which we need to find all unique substrings. 3. Return the total count of unique substrings in the given string. 4. Your implementation should be efficient and handle strings of considerable length. # Example: ```python unique_count = count_unique_substrings(\\"ababa\\") print(unique_count) # Output should be the total number of unique substrings ``` # Constraints: - The input string will only consist of lowercase English letters. - The length of the input string will be at most (10^4). - Ensure your solution efficiently generates and counts unique substrings without producing excessive memory overhead. # Explanation: For the input \\"ababa\\", the unique substrings include: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\", \\"baba\\", and so on. Count all such unique substrings.","solution":"def count_unique_substrings(input_string): Returns the count of unique substrings of the input string. n = len(input_string) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(input_string[i:j]) return len(substrings)"},{"question":"You are tasked with writing a function named `summarize_text` that processes a given text file. The function should perform the following steps: 1. **Load the Text File**: The function should read the contents of the text file specified by the `file_path` parameter. 2. **Tokenization**: Tokenize the text into words. Convert all words to lowercase and strip any punctuation. 3. **Word Frequency**: Count the frequency of each word in the text. 4. **Top N Words**: Find and return the top `n` most common words and their frequencies. **Function Signature** ```python def summarize_text(file_path, n): # function body ``` **Parameters**: - `file_path` (str): The path to the text file to be processed. - `n` (int): The number of top frequent words to return. **Example Usage**: ```python output = summarize_text(\'sample.txt\', 5) print(output) ``` **Expected Output** (for a sample text file): ```python [(\'the\', 10), (\'and\', 8), (\'to\', 6), (\'of\', 5), (\'a\', 4)] ``` **Required Libraries**: - `collections` - `string` **Note**: Be sure to use collections.Counter to count word frequencies and string.punctuation to strip punctuation.","solution":"import collections import string def summarize_text(file_path, n): Summarize the text file by returning the top n most common words and their frequencies. Parameters: file_path (str): The path to the text file to be processed. n (int): The number of top frequent words to return. Returns: list of tuples: Each tuple contains a word and its frequency, e.g., [(\'the\', 10), (\'and\', 8)] with open(file_path, \'r\') as file: text = file.read() # Convert to lowercase and strip punctuation translator = str.maketrans(\'\', \'\', string.punctuation) words = text.lower().translate(translator).split() # Count the frequency of each word word_count = collections.Counter(words) # Find the top n most common words common_words = word_count.most_common(n) return common_words"},{"question":"You are required to implement a function that generates secure passwords based on a specified set of constraints. The function will use the `random` library in Python to ensure the passwords are both random and secure. Function Specification **Function Name: `generate_secure_password`** **Inputs:** 1. `length`: An integer representing the total length of the password to be generated. 2. `num_uppercase`: An integer indicating the number of uppercase letters required in the password. 3. `num_digits`: An integer indicating the number of digits required in the password. 4. `num_special`: An integer indicating the number of special characters required in the password. **Outputs:** - The function should return a string representing the generated secure password that meets all the specified constraints. **Behavior:** - The password must contain exactly `num_uppercase` uppercase letters, `num_digits` digits, `num_special` special characters, and the remaining characters should be lowercase letters to fill the total length. - If the total count of characters specified (`num_uppercase + num_digits + num_special`) exceeds the given password length, return an empty string. - The `random` library\'s methods such as `random.choice` and `random.shuffle` must be used to ensure randomness and security. - The function must ensure that the password is randomly shuffled so that characters are not placed in predictable positions. **Constraints:** - `length >= num_uppercase + num_digits + num_special` Example ```python import random import string def generate_secure_password(length, num_uppercase, num_digits, num_special): if length < num_uppercase + num_digits + num_special: return \\"\\" password_chars = [] password_chars.extend(random.choices(string.ascii_uppercase, k=num_uppercase)) password_chars.extend(random.choices(string.digits, k=num_digits)) password_chars.extend(random.choices(\\"!@#%^&*()-_=+{}[]|:;,.<>?/\\", k=num_special)) password_chars.extend(random.choices(string.ascii_lowercase, k=length - (num_uppercase + num_digits + num_special))) random.shuffle(password_chars) return \\"\\".join(password_chars) # Example usage print(generate_secure_password(12, 3, 4, 2)) # Possible Output: \\"a8!F7zB3@lMp\\" ``` Libraries - You must use the `random` library provided by Python.","solution":"import random import string def generate_secure_password(length, num_uppercase, num_digits, num_special): if length < num_uppercase + num_digits + num_special: return \\"\\" password_chars = [] password_chars.extend(random.choices(string.ascii_uppercase, k=num_uppercase)) password_chars.extend(random.choices(string.digits, k=num_digits)) password_chars.extend(random.choices(\\"!@#%^&*()-_=+{}[]|:;,.<>?/\\", k=num_special)) password_chars.extend(random.choices(string.ascii_lowercase, k=length - (num_uppercase + num_digits + num_special))) random.shuffle(password_chars) return \\"\\".join(password_chars) # Example usage print(generate_secure_password(12, 3, 4, 2)) # Possible Output: \\"a8!F7zB3@lMp\\""},{"question":"You are given a string containing a series of numbers separated by either a period `.` or a comma `,`. Your task is to implement a Python function `compute_string_sum(s)` that will parse through the string, extract the numbers, and return the sum of these numbers as an integer. To solve this problem, you may find the `re` library (regular expressions) useful to handle the parsing of the string effectively. The input string can contain white spaces, which should be ignored. Here is the signature of the function you need to implement: ```python def compute_string_sum(s): # Your code here ``` **Example:** ```python s = \\"1, 2.3, 4, 5. 6,7\\" # Expected Output: 28 ``` **Constraints:** 1. The function should handle cases where the string is not empty. 2. The numbers within the string are non-negative integers. 3. Handle cases where the numbers are separated inconsistently with different delimiters. 4. Assume the input string will always provide at least one number.","solution":"import re def compute_string_sum(s): Parses the string s, extracts numbers separated by either a period `.` or a comma `,`, and returns the sum of these numbers as an integer. # Use regular expression to find all numbers in the string numbers = re.findall(r\'d+\', s) # Convert each number from string to integer and calculate the sum return sum(int(num) for num in numbers)"},{"question":"In this task, you are required to implement a function called `simple_calculator` that processes a list of arithmetic operations. Each operation in the input is represented as a string in the format `\\"operand1 operator operand2\\"`, where `operand1` and `operand2` are integers and `operator` is one of the four basic arithmetic operators: `+`, `-`, `*`, `/`. The function should return a list of results corresponding to each operation. # Function Signature ```python def simple_calculator(operations): pass ``` # Parameters - `operations` (list of str): A list of strings, where each string represents an arithmetic operation. # Returns - `list of float`: A list of results of the given operations, presented in the same order as in the input. # Example Input: `operations = [\\"3 + 2\\", \\"10 - 3\\", \\"6 * 7\\", \\"8 / 4\\"]` Output: `[5, 7, 42, 2.0]` # Constraints - The `operations` list will contain at least one and at most 100 elements. - Each operation string is guaranteed to be in the format `\\"operand1 operator operand2\\"`. - `operand1` and `operand2` will be integers between -1000 and 1000. - The `operator` will be one of `+`, `-`, `*`, `/`. - Division operations will have `operand2` as a non-zero integer.","solution":"def simple_calculator(operations): Processes a list of arithmetic operations. Args: operations (list of str): A list of strings, where each string represents an arithmetic operation. Returns: list of float: A list of results of the given operations, presented in the same order as in the input. results = [] for operation in operations: operand1, operator, operand2 = operation.split() operand1 = int(operand1) operand2 = int(operand2) if operator == \'+\': result = operand1 + operand2 elif operator == \'-\': result = operand1 - operand2 elif operator == \'*\': result = operand1 * operand2 elif operator == \'/\': result = operand1 / operand2 results.append(result) return results"},{"question":"You are tasked with implementing a function that processes data in JSON format that describes the inventory of a store. The function must read and parse the specified JSON file, calculate the total value of each product by multiplying the quantity and unit price, optionally filter products based on a minimum threshold value, and return the results in a specific format. Specifically, you need to write a Python function named `process_inventory` that meets the following requirements: **Function Signature:** ```python def process_inventory(filename: str, min_value: float = 0) -> List[Dict[str, Any]]: ``` **Parameters:** - `filename` (str): The path to the JSON file containing the inventory data. - `min_value` (float): A threshold value to filter products. Only products with a total value greater than or equal to this value should be included in the result. Default is `0`. **Returns:** - A list of dictionaries, each containing `name`, `quantity`, `unit_price`, and `total_value`. All quantities and prices should be floats and `total_value` is the product of `quantity` and `unit_price`. **Functionality:** 1. Use `io.open` to read the contents of the file specified by `filename`. 2. Parse the JSON data using the `json` module. 3. For each product, calculate the `total_value` as `quantity * unit_price`. 4. Filter the products to include only those with a `total_value` greater than or equal to `min_value`. 5. Return the extracted and processed data as a list of dictionaries. **Example JSON Data:** ```json [ {\\"name\\": \\"Apple\\", \\"quantity\\": \\"100\\", \\"unit_price\\": \\"0.5\\"}, {\\"name\\": \\"Banana\\", \\"quantity\\": \\"200\\", \\"unit_price\\": \\"0.3\\"}, {\\"name\\": \\"Cherry\\", \\"quantity\\": \\"150\\", \\"unit_price\\": \\"1.2\\"} ] ``` For this JSON data, with `min_value=50`, the function should return: ```python [ {\\"name\\": \\"Apple\\", \\"quantity\\": 100.0, \\"unit_price\\": 0.5, \\"total_value\\": 50.0}, {\\"name\\": \\"Cherry\\", \\"quantity\\": 150.0, \\"unit_price\\": 1.2, \\"total_value\\": 180.0} ] ```","solution":"import json from typing import List, Dict, Any def process_inventory(filename: str, min_value: float = 0) -> List[Dict[str, Any]]: with open(filename, \'r\') as file: data = json.load(file) processed_data = [] for item in data: name = item[\'name\'] quantity = float(item[\'quantity\']) unit_price = float(item[\'unit_price\']) total_value = quantity * unit_price if total_value >= min_value: processed_data.append({ \'name\': name, \'quantity\': quantity, \'unit_price\': unit_price, \'total_value\': total_value }) return processed_data"},{"question":"**Context:** You are developing a software system for managing a library\'s book inventory. One of the core functionalities required is to search for books based on various criteria. The book inventory is stored in a CSV file, which includes information such as the title, author, publication year, genre, and availability status. **Objective:** Create a function named `search_books` that takes four parameters: 1. `file_path` (str): The file path to the CSV file containing the book inventory. 2. `search_title` (str): A substring to search for in the book titles, or an empty string to ignore this filter. 3. `search_author` (str): A substring to search for in the author names, or an empty string to ignore this filter. 4. `available_only` (bool): A flag indicating whether to return only available books (`True`) or all books (`False`). **Input:** - A CSV file with columns \'Title\', \'Author\', \'Year\', \'Genre\', and \'Available\' (with \'Yes\' for available and \'No\' for unavailable). **Output:** - A Pandas DataFrame containing the books that match the search criteria. **Requirements:** - Utilize the `pandas` library, especially the `pd.read_csv` function to read the CSV file into a DataFrame. - Ensure the search is case-insensitive for both title and author filters. - Filter the DataFrame based on the availability status if `available_only` is set to `True`. **Example:** ```python # Sample inventory CSV (books.csv): # Title,Author,Year,Genre,Available # \\"To Kill a Mockingbird\\",\\"Harper Lee\\",1960,\\"Fiction\\",\\"Yes\\" # \\"1984\\",\\"George Orwell\\",1949,\\"Dystopian\\",\\"No\\" # \\"The Great Gatsby\\",\\"F. Scott Fitzgerald\\",1925,\\"Classic\\",\\"Yes\\" # \\"Brave New World\\",\\"Aldous Huxley\\",1932,\\"Dystopian\\",\\"Yes\\" # Search for books by George Orwell that are available matched_books = search_books(\'books.csv\', \'\', \'George Orwell\', True) # Result: A Pandas DataFrame with columns \'Title\', \'Author\', \'Year\', \'Genre\', and \'Available\' # containing only the book \\"1984\\" if it were available, since \'available_only\' is True ``` Write the function `search_books` to meet this requirement using the `pandas` library.","solution":"import pandas as pd def search_books(file_path, search_title=\'\', search_author=\'\', available_only=False): # Read the CSV file into a DataFrame df = pd.read_csv(file_path) # Convert search title and author filters to lowercase for case-insensitive matching search_title = search_title.lower() search_author = search_author.lower() # Filter the DataFrame based on the search criteria if search_title: df = df[df[\'Title\'].str.lower().str.contains(search_title)] if search_author: df = df[df[\'Author\'].str.lower().str.contains(search_author)] if available_only: df = df[df[\'Available\'].str.lower() == \'yes\'] return df"},{"question":"In computational geometry, a common challenge is determining if a point lies within a given polygon. In this exercise, you are required to implement the function `is_point_in_polygon` which checks whether a given point is inside or outside a simple polygon. The `is_point_in_polygon` function should operate using the ray-casting algorithm, which counts how many times a ray starting from the point and extending infinitely in one direction intersects the edges of the polygon. If the count is odd, the point lies inside the polygon; if even, the point lies outside. **Function Details:** - **Function Name**: `is_point_in_polygon` - **Inputs**: - `polygon` (list of tuples): A list of tuples representing the vertices of the polygon in order. Each tuple contains two integers representing the x and y coordinates of a vertex. - `point` (tuple): A tuple containing two integers representing the x and y coordinates of the point to be checked. - **Output**: - `bool`: A boolean value that indicates whether the point is inside the polygon (`True`) or not (`False`). **Steps to Implement**: 1. Initialize a counter for intersections to zero. 2. For each edge of the polygon, check if the ray from the point intersects with the edge. 3. Increase the intersection counter each time an intersection is found. 4. Return `True` if the number of intersections is odd, otherwise return `False`. **Algorithm**: 1. For each edge of the polygon defined by vertices (x1, y1) and (x2, y2): - Check if the edge crosses the horizontal line extending right from the point. - Use formula to determine if and where the edge intersects with the horizontal ray extending from the point. - Handle horizontal edges and vertices properly to avoid incorrect counts. **Example Usage**: ```python polygon = [(1, 1), (1, 4), (4, 4), (4, 1)] point = (2, 2) # For checking if the point (2, 2) is inside the polygon result = is_point_in_polygon(polygon, point) print(result) # Should print True ``` This problem tests your understanding of geometric algorithms and points within polygons, as well as your ability to use logical operations efficiently.","solution":"def is_point_in_polygon(polygon, point): Determines if a point is inside a polygon using the ray-casting algorithm. Args: polygon (list of tuples): List of (x, y) tuples representing vertices of the polygon point (tuple): (x, y) tuple representing the point to be checked Returns: bool: True if the point is inside the polygon, False otherwise x, y = point n = len(polygon) inside = False p1x, p1y = polygon[0] for i in range(n + 1): p2x, p2y = polygon[i % n] if y > min(p1y, p2y): if y <= max(p1y, p2y): if x <= max(p1x, p2x): if p1y != p2y: xinters = (y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x if p1x == p2x or x <= xinters: inside = not inside p1x, p1y = p2x, p2y return inside"},{"question":"Implement a Python function to perform matrix multiplication using the Strassen algorithm. The Strassen algorithm is an efficient method for matrix multiplication that reduces the time complexity compared to the standard algorithm. You are required to handle input matrices that are powers of two in dimension (i.e., 2x2, 4x4, 8x8, etc.). If the matrices are not powers of two, you should pad them with zeros to the next power of two. # Function Signature: ```python def strassen_matrix_multiplication(A: np.ndarray, B: np.ndarray) -> np.ndarray: Multiplies two matrices using the Strassen algorithm. Parameters: A (np.ndarray): First matrix of shape (N, N). B (np.ndarray): Second matrix of shape (N, N). Returns: C (np.ndarray): The result of multiplying A and B using the Strassen algorithm, of shape (N, N). ``` # Requirements: 1. Implement the Strassen algorithm with recursive matrix splitting. 2. Ensure any input matrices not having dimensions as a power of two are padded with zeros to the next power of two. 3. Remove any padding from the result to match the original size of the input matrices. 4. Use `numpy` library for array manipulations and `np.copy` for copying array slices. # Example Usage: ```python A = np.array([ [1, 2], [3, 4] ]) B = np.array([ [5, 6], [7, 8] ]) C = strassen_matrix_multiplication(A, B) print(\\"Result:\\") print(C) ``` # Example Output: ``` Result: [[19 22] [43 50]] ``` # Notes: 1. The Strassen algorithm involves splitting the matrices into smaller submatrices and combining them in a specific manner to reduce the number of multiplications. 2. Carefully handle the padding and ensure the final result has the original dimensions. 3. Use recursion to implement the algorithm, ensuring to handle the base case for the smallest matrix size (e.g., 2x2).","solution":"import numpy as np def strassen_matrix_multiplication(A: np.ndarray, B: np.ndarray) -> np.ndarray: Multiplies two matrices using the Strassen algorithm. Parameters: A (np.ndarray): First matrix of shape (N, N). B (np.ndarray): Second matrix of shape (N, N). Returns: C (np.ndarray): The result of multiplying A and B using the Strassen algorithm, of shape (N, N). def next_power_of_two(n): Returns the next power of two greater than or equal to n. return 1 if n == 0 else 2**(n - 1).bit_length() def pad_matrix(matrix, new_size): Pads the given matrix with zeros to the new size. old_size = matrix.shape[0] new_matrix = np.zeros((new_size, new_size)) new_matrix[:old_size, :old_size] = matrix return new_matrix def strassen(A, B): Recursive function to multiply matrices using Strassen\'s algorithm. n = A.shape[0] if n == 1: return A * B k = n // 2 A11, A12, A21, A22 = A[:k, :k], A[:k, k:], A[k:, :k], A[k:, k:] B11, B12, B21, B22 = B[:k, :k], B[:k, k:], B[k:, :k], B[k:, k:] M1 = strassen(A11 + A22, B11 + B22) M2 = strassen(A21 + A22, B11) M3 = strassen(A11, B12 - B22) M4 = strassen(A22, B21 - B11) M5 = strassen(A11 + A12, B22) M6 = strassen(A21 - A11, B11 + B12) M7 = strassen(A12 - A22, B21 + B22) C11 = M1 + M4 - M5 + M7 C12 = M3 + M5 C21 = M2 + M4 C22 = M1 - M2 + M3 + M6 C = np.zeros((n, n)) C[:k, :k] = C11 C[:k, k:] = C12 C[k:, :k] = C21 C[k:, k:] = C22 return C original_size = A.shape[0] new_size = next_power_of_two(original_size) A_padded = pad_matrix(A, new_size) B_padded = pad_matrix(B, new_size) C_padded = strassen(A_padded, B_padded) C = C_padded[:original_size, :original_size] return C"},{"question":"Design a function named `process_string` that takes a string as input and performs specific operations based on certain conditions. The function will manipulate the string according to the following rules: 1. **Input**: - A single string `s`. 2. **Output**: - A string that has been modified based on the following rules: - If the string starts with a vowel (a, e, i, o, u), return the string in reverse. - If the string contains any digit, remove all digits from the string. - If the string\'s length is greater than 10 characters, return the string in uppercase. 3. **Note**: - If the string satisfies multiple conditions, apply only the first matching rule in the order listed above. Your task is to implement the `process_string` function based on the rules outlined above. **Constraints**: - The input string will contain only printable ASCII characters. **Examples**: ```python process_string(\\"apple\\") # Expected output: \\"elppa\\" (starts with a vowel) process_string(\\"hello123world\\") # Expected output: \\"helloworld\\" (contains digits) process_string(\\"programming!\\") # Expected output: \\"PROGRAMMING!\\" (length > 10) ```","solution":"def process_string(s): Process the string based on specific rules. Parameters: s (str): Input string Returns: str: Modified string based on the rules # Check if the string starts with a vowel if s[0].lower() in \'aeiou\': return s[::-1] # Check if the string contains any digit if any(char.isdigit() for char in s): return \'\'.join(char for char in s if not char.isdigit()) # Check if the string\'s length is greater than 10 characters if len(s) > 10: return s.upper() # If none of the conditions match, return the original string return s"},{"question":"You are tasked with writing a function called `generate_election_report` that processes election results and generates a summary report. The function will take in candidate names and their corresponding vote counts, then determine the winner along with some statistics. # Input Parameters: - `candidates`: (array-like) A list of strings representing the names of candidates. - `votes`: (array-like) A list of integers representing the number of votes each candidate received. # Expected Output: The function should print the following information in a readable format: 1. Total number of votes cast. 2. Each candidate\'s name along with their vote count and percentage of the total votes. 3. The name of the winning candidate who received the most votes. # Implementation Details: 1. Calculate the total number of votes cast. 2. Print each candidate’s name, their vote count, and their percentage of the total votes (formatted to two decimal places). 3. Identify and print the name of the candidate with the highest number of votes. 4. Handle the case where there is a tie between candidates with the highest votes by listing all of the tied candidates as winners. # Example: ```python candidates = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] votes = [340, 275, 340] generate_election_report(candidates, votes) ``` Output: ``` Total Votes: 955 Alice: 340 votes (35.60%) Bob: 275 votes (28.80%) Charlie: 340 votes (35.60%) Winners: Alice, Charlie ``` Here is the function signature you should implement: ```python def generate_election_report(candidates, votes): pass ```","solution":"def generate_election_report(candidates, votes): Generates a summary report of election results. Parameters: candidates (array-like): A list of strings representing the names of candidates. votes (array-like): A list of integers representing the number of votes each candidate received. Prints: Total number of votes cast, each candidate\'s name along with their vote count and percentage of the total votes, and the name(s) of the winning candidate(s). total_votes = sum(votes) # Calculating the results for each candidate candidate_results = [] for candidate, vote in zip(candidates, votes): vote_percentage = (vote / total_votes) * 100 candidate_results.append((candidate, vote, vote_percentage)) candidate_results.sort(key=lambda x: x[1], reverse=True) max_votes = max(votes) winners = [candidates[i] for i, vote in enumerate(votes) if vote == max_votes] # Printing results print(f\\"Total Votes: {total_votes}\\") for candidate, vote, percentage in candidate_results: print(f\\"{candidate}: {vote} votes ({percentage:.2f}%)\\") print(\\"Winners: \\" + \', \'.join(winners))"},{"question":"You are provided with a dataset of customer purchases in a Pandas DataFrame. Your task is to analyze customer purchase behavior by implementing a function `customer_purchase_summary` that generates useful insights. The function will return a dictionary containing summary statistics and custom analyses based on the given data. The function `customer_purchase_summary` should follow these requirements: 1. **Parameters**: - `df`: A Pandas DataFrame with the following columns: - `\'CustomerID\'`: Unique identifier for each customer. - `\'ProductID\'`: Unique identifier for each product purchased. - `\'Quantity\'`: The quantity of the product purchased. - `\'PurchaseDate\'`: The date the purchase was made, in `datetime` format. 2. The function should compute and return a dictionary with the following key-value pairs: - `\'total_unique_customers\'`: The total number of unique customers. - `\'total_unique_products\'`: The total number of unique products purchased. - `\'total_quantity_purchased\'`: The total quantity of all products purchased. - `\'average_quantity_per_purchase\'`: The average quantity of products purchased per transaction. - `\'most_frequent_customer\'`: The CustomerID of the customer with the highest number of purchase transactions. - `\'most_purchased_product\'`: The ProductID of the product that was purchased in the highest quantity. **Constraints**: - Assume relevant libraries such as `pandas` are already imported. - The `\'PurchaseDate\'` column is guaranteed to be in a valid `datetime` format. Your task is to implement the `customer_purchase_summary` function to compute these statistics correctly.","solution":"import pandas as pd def customer_purchase_summary(df): Analyzes customer purchase behavior and generates useful insights. Parameters: df (pd.DataFrame): A DataFrame with columns \'CustomerID\', \'ProductID\', \'Quantity\', and \'PurchaseDate\'. Returns: dict: A dictionary containing summary statistics and custom analyses based on the given data. # Total unique customers total_unique_customers = df[\'CustomerID\'].nunique() # Total unique products total_unique_products = df[\'ProductID\'].nunique() # Total quantity purchased total_quantity_purchased = df[\'Quantity\'].sum() # Average quantity per purchase average_quantity_per_purchase = df[\'Quantity\'].mean() # Customer with the highest number of purchase transactions most_frequent_customer = df[\'CustomerID\'].value_counts().idxmax() # Product purchased in the highest quantity most_purchased_product = df.groupby(\'ProductID\')[\'Quantity\'].sum().idxmax() return { \'total_unique_customers\': total_unique_customers, \'total_unique_products\': total_unique_products, \'total_quantity_purchased\': total_quantity_purchased, \'average_quantity_per_purchase\': average_quantity_per_purchase, \'most_frequent_customer\': most_frequent_customer, \'most_purchased_product\': most_purchased_product }"},{"question":"Develop a function that simulates a basic banking system where a user can perform deposit, withdrawal, and balance inquiry operations. The function should take a list of transactions as input, where each transaction is represented by a tuple of the form (operation, amount). The operation can be \'deposit\', \'withdrawal\', or \'balance_inquiry\'. The function should return a list of results for each \'balance_inquiry\' operation. If a withdrawal operation requests more funds than available, the function should ignore the withdrawal and continue with the next transaction. The function should output with: list: A list of floats representing the balance after each \'balance_inquiry\'. You should write self-contained code starting with: ``` def banking_operations(transactions): ``` Here is an example of how your function should behave: Input: ``` banking_operations([(\'deposit\', 100.0), (\'withdrawal\', 30.0), (\'balance_inquiry\', 0), (\'withdrawal\', 80.0), (\'balance_inquiry\', 0)]) ``` Output: ``` [70.0, 70.0] ```","solution":"def banking_operations(transactions): Simulates basic banking transactions and returns a list of balances for each \'balance_inquiry\' operation. Args: transactions (list): A list of tuples where each tuple contains an operation and an amount. Returns: list: A list of floats representing the balance after each \'balance_inquiry\'. balance = 0.0 result = [] for operation, amount in transactions: if operation == \'deposit\': balance += amount elif operation == \'withdrawal\': if balance >= amount: balance -= amount elif operation == \'balance_inquiry\': result.append(balance) return result"},{"question":"**Context:** In computational geometry, the Convex Hull is the smallest convex polygon that can enclose a set of given points in the 2D plane. It is a fundamental problem with applications in computer graphics, pattern recognition, image processing, and more. You are tasked with writing a function that takes a list of 2D points and computes the Convex Hull using the Graham scan algorithm. The Graham scan algorithm sorts the points by polar angle with respect to a pivot (usually the point with the lowest y-coordinate) and then processes them to find the Convex Hull vertices. **Function Name:** `compute_convex_hull` **Parameters:** - `points`: A list of tuples representing the coordinates of the points (e.g., `[(x1, y1), (x2, y2), ...]`). **Returns:** - A list of tuples representing the vertices of the Convex Hull in counter-clockwise order, starting from the vertex with the lowest y-coordinate. **Requirements:** - Ensure that the function handles cases with fewer than three points. - Use Python\'s built-in functions and standard libraries such as `math` for calculating polar angles. - Ensure the function is efficient and handles large sets of points. **Instructions:** 1. Find the point with the lowest y-coordinate (the pivot). In case of a tie, choose the point with the lowest x-coordinate. 2. Sort the remaining points based on the polar angle with respect to the pivot. 3. Process the sorted list of points to construct the Convex Hull using the Graham scan algorithm. 4. Return the list of vertices of the Convex Hull in counter-clockwise order. **Example Usage:** ```python import math def compute_convex_hull(points): # Implement the function here pass # Example set of points and call to the function points = [(1, 1), (2, 2), (0, 3), (4, 5), (2, 0), (3, 3)] convex_hull = compute_convex_hull(points) print(convex_hull) ``` **Hints:** - The polar angle of a point `(x, y)` with respect to the pivot `(px, py)` is `atan2(y - py, x - px)`. - Use the cross product to determine the orientation of three points during the scan process.","solution":"import math def compute_convex_hull(points): Computes the vertices of the convex hull of a set of 2D points using the Graham scan algorithm. Returns the vertices in counter-clockwise order. if len(points) < 3: return points # Find the pivot with the lowest y-coordinate (and lowest x-coordinate if there\'s a tie) pivot = min(points, key=lambda p: (p[1], p[0])) # Define a function to compute the polar angle with respect to the pivot def polar_angle(p): return math.atan2(p[1] - pivot[1], p[0] - pivot[0]) # Sort points by polar angle with respect to the pivot sorted_points = sorted(points, key=lambda p: (polar_angle(p), (p[0], p[1]))) # Initialize the convex hull with the pivot and the first two points convex_hull = [sorted_points[0], sorted_points[1]] # Graham scan algorithm for p in sorted_points[2:]: while len(convex_hull) > 1 and ccw(convex_hull[-2], convex_hull[-1], p) <= 0: convex_hull.pop() convex_hull.append(p) return convex_hull def ccw(p1, p2, p3): Returns a positive value if the sequence of points forms a left turn (counter-clockwise), negative for a right turn (clockwise), and zero if the points are collinear. return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])"},{"question":"Read a text file containing a list of numerical ranges in the format `start-end` (e.g., `1-5, 10-15`) and return a list of integers that fall within any of the specified ranges. Ranges may overlap and may not be in ascending order. The output list should be sorted in ascending order and contain no duplicates. The function should output with: list: A sorted list of integers within the specified ranges. You should write self-contained code starting with: ``` def task_func(file_path): ```","solution":"def task_func(file_path): Reads a text file containing a list of numerical ranges in the format \'start-end\' and returns a sorted list of integers that fall within any of the specified ranges. :param file_path: Path to the text file containing the ranges. :return: Sorted list of integers within the specified ranges. # Read the file content with open(file_path, \'r\') as file: content = file.read().strip() # Initialize a set to hold unique integers numbers = set() # Split the content by comma to get individual ranges ranges = content.split(\',\') # Process each range for r in ranges: # Split the range by \'-\' start, end = map(int, r.split(\'-\')) # Add all numbers in the range to the set numbers.update(range(start, end + 1)) # Convert the set to a sorted list and return it return sorted(numbers)"},{"question":"In this problem, you are required to write a Python function `common_elements(list1, list2)` that identifies and returns the elements that are common in both given lists, but with a twist: The function should adhere to the following specifications: 1. It should consider the order of elements in `list1`. 2. If an element appears multiple times in both lists, it should be included in the output list as many times as it appears in the list with fewest occurrences. 3. The function should use the `Counter` class from the `collections` module to count the frequency of each element in the provided lists. 4. The order of elements in the result should follow their first occurrence in `list1`. **Function Signature:** ```python def common_elements(list1: list, list2: list) -> list: ``` **Parameters:** - `list1` (list): A list of elements. - `list2` (list): Another list of elements. **Returns:** - `list`: A list of elements that are common in both input lists, listed in the order they appear in `list1`. **Example:** ```python list1 = [1, 2, 2, 3, 4, 4, 4] list2 = [2, 2, 4, 4, 5, 6] print(common_elements(list1, list2)) # Output should be [2, 2, 4, 4] ``` In this example, the elements `2` and `4` are common in both lists. Element `2` appears twice in both lists, and element `4` appears four times in `list1` but only twice in `list2`, hence the output is `[2, 2, 4, 4]` which follows the order in `list1`.","solution":"from collections import Counter def common_elements(list1, list2): Identifies and returns the common elements in both lists, considering the order of elements in `list1` and the frequency of their occurrences. Parameters: list1 (list): A list of elements. list2 (list): Another list of elements. Returns: list: A list of elements that are common in both input lists, listed in the order they appear in `list1`. counter1 = Counter(list1) counter2 = Counter(list2) common_list = [] for item in list1: if item in counter1 and item in counter2: min_occurrences = min(counter1[item], counter2[item]) common_list.extend([item] * min_occurrences) del counter1[item] del counter2[item] return common_list"},{"question":"In this problem, you will implement a function `simulate_bank_transactions` that manages a series of bank transactions and generates the corresponding outputs for each transaction. The function will simulate a basic banking system that supports deposits, withdrawals, and balance inquiries. # Detailed Instructions 1. **Input Parameters:** - `transactions`: A list of tuples where each tuple represents a transaction to be processed. Each tuple follows the format: - `(\'deposit\', amount)`: representing a deposit transaction of `amount`. - `(\'withdraw\', amount)`: representing a withdrawal transaction of `amount`. - `(\'balance\',)`: representing a balance inquiry. 2. **Output:** - The function should return a list of results corresponding to each `balance` inquiry. Depsits and withdrawals do not produce direct outputs in the result list but modify the balance accordingly. 3. **Function Description:** - Initialize a balance variable to store the current account balance, starting at `0`. - Iterate through the list of `transactions` and for each transaction: - If the transaction is a deposit, add the specified amount to the balance. - If the transaction is a withdrawal, check if there are sufficient funds: - If there are, subtract the amount from the balance. - If there are not, append \\"Insufficient funds\\" to the result list. - If the transaction is a balance inquiry, append the current balance to the result list. # Constraints: - The amount in each transaction will be a positive integer. - Assume the operations are valid except for withdrawals which may lack sufficient funds. Here is the function signature: ```python def simulate_bank_transactions(transactions): pass ``` # Example: ```python transactions = [ (\'deposit\', 100), (\'withdraw\', 50), (\'balance\',), (\'withdraw\', 60), (\'deposit\', 40), (\'balance\',) ] print(simulate_bank_transactions(transactions)) ``` Expected Output: ``` [50, \'Insufficient funds\', 90] ```","solution":"def simulate_bank_transactions(transactions): balance = 0 results = [] for transaction in transactions: if transaction[0] == \'deposit\': balance += transaction[1] elif transaction[0] == \'withdraw\': if balance >= transaction[1]: balance -= transaction[1] else: results.append(\\"Insufficient funds\\") elif transaction[0] == \'balance\': results.append(balance) return results"},{"question":"You are required to implement a function that finds the second highest number in a list of integers. This is a common problem that reinforces your ability to handle lists and edge cases in coding. **Function Name**: `second_highest` **Function Role**: The function should accept a list of integers and return the second highest unique number in the list. If the list contains fewer than two unique numbers, the function should return `None`. **Input**: - A list of integers, e.g., `[4, 1, 5, 2, 4, 5]`. **Output**: - An integer representing the second highest number in the list, or `None` if such a number does not exist. **Example**: 1. If the input is `[4, 1, 5, 2, 4, 5]`, the function should return `4`. 2. If the input is `[7, 7, 7]`, the function should return `None` since there are not enough unique numbers. 3. If the input is `[10, -1, 2, 10, 7, -1, 7]`, the function should return `7`. **Constraints**: - The input list will have at least one element. - The integers can be either positive or negative. - Efficiency matters; aim for a solution with a time complexity better than (O(n^2)).","solution":"def second_highest(lst): Returns the second highest unique number in the list. If the list contains fewer than two unique numbers, returns None. if len(lst) < 2: return None unique_numbers = set(lst) if len(unique_numbers) < 2: return None unique_numbers.remove(max(unique_numbers)) return max(unique_numbers)"},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to write a function named `find_pairs(nums, target)` that returns a list of all unique pairs of integers from `nums` that add up to the `target` value. Each pair should be represented as a tuple `(a, b)` such that `a <= b` and the list of pairs should be sorted in ascending order based on the first element of each pair and then by the second element. For example, given the list `nums = [1, 2, 3, 4, 3, 2, 1]` and `target = 4`, the function should return `[(1, 3), (2, 2)]`. Here are the requirements for the solution: 1. The function should handle empty input lists and return an empty list in such cases. 2. The pairs `(a, b)` should be unique, i.e., `(1, 3)` should be considered the same as `(3, 1)`. 3. The output list should be sorted as specified. Here is the structure of the function to be implemented: ```python def find_pairs(nums, target): # Your code here ``` # Examples ```python # Example 1 nums = [1, 2, 3, 4, 3, 2, 1] target = 4 print(find_pairs(nums, target)) # Output: [(1, 3), (2, 2)] # Example 2 nums = [1, 5, 2, 7, 3, 3, 6] target = 8 print(find_pairs(nums, target)) # Output: [(1, 7), (2, 6), (3, 5)] # Example 3 nums = [] target = 5 print(find_pairs(nums, target)) # Output: [] # Example 4 nums = [1, 1, 1, 1] target = 2 print(find_pairs(nums, target)) # Output: [(1, 1)] ``` # Constraints 1. The length of `nums` is at most `10^4`. 2. Each element in `nums` is an integer where `-10^6 <= nums[i] <= 10^6`. 3. The `target` is also an integer where `-10^6 <= target <= 10^6`.","solution":"def find_pairs(nums, target): seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(pairs)"},{"question":"Create a function named `calculate_optimal_path` that determines the optimal path through a grid of numbers by moving either down or right at each step, starting from the top-left corner. The grid is represented by a 2D list where each element is a non-negative integer. Here\'s the detailed breakdown of the process: 1. **Grid Input**: Take a 2D grid (list of lists) with non-negative integers as input. 2. **Path Constraints**: - You can only move to the right or down from any cell. - You must reach the bottom-right corner of the grid. 3. **Objective**: Find the path that maximizes the sum of the numbers along the path. 4. **Output**: Print the maximum sum obtainable by following the optimal path. **Example**: ```python grid = [ [5, 3, 2, 1], [1, 2, 10, 3], [4, 3, 2, 20], [2, 1, 3, 4] ] ``` - Possible path with maximum sum: - Start at (0,0) -> move to (1,0), (2,0), (2,1), (2,2), (2,3), (3,3) - Total sum: 5 + 1 + 4 + 3 + 2 + 20 + 4 = 39 # Function Signature ```python def calculate_optimal_path(grid): ... ``` # Example Execution When `calculate_optimal_path(grid)` is called with the above example grid, the function should output: ``` The optimal path sum is: 39 ``` # Constraints - The grid will have at least one row and one column. - The function should handle any grid size efficiently.","solution":"def calculate_optimal_path(grid): Function to determine the optimal path through a grid of numbers by moving either down or right at each step, starting from the top-left corner, to maximize the sum of the numbers along the path. Parameters: grid (list of list of int): A 2D list representing the grid of non-negative integers. Returns: int: The sum of the numbers along the optimal path. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) for r in range(1, rows): grid[r][0] += grid[r-1][0] for c in range(1, cols): grid[0][c] += grid[0][c-1] for r in range(1, rows): for c in range(1, cols): grid[r][c] += max(grid[r-1][c], grid[r][c-1]) return grid[-1][-1] def print_optimal_path_sum(grid): optimal_path_sum = calculate_optimal_path(grid) print(f\\"The optimal path sum is: {optimal_path_sum}\\") # Example usage grid = [ [5, 3, 2, 1], [1, 2, 10, 3], [4, 3, 2, 20], [2, 1, 3, 4] ] print_optimal_path_sum(grid)"},{"question":"**Background:** You are tasked with simulating a water filling process at a factory, where multiple water jugs are being filled concurrently by different workers using the same water source. The water source can only be accessed by one worker at a time to fill their jug. You need to use threading to ensure that the workers do not access the water source simultaneously. **Objective:** Write a function named `simulate_water_filling` that will manage the concurrent operations using threads and locks. You need to handle multiple workers filling their jugs from the water source, ensuring mutual exclusion. **Function Signature:** ```python def simulate_water_filling(num_workers: int, fill_time: float): pass ``` **Parameters:** - `num_workers`: An integer specifying the number of worker threads simulating the jug filling process. - `fill_time`: A float representing the time in seconds it takes for a worker to fill a jug. **Requirements:** - Use the `threading` library\'s `Thread` and `Lock` to ensure mutual exclusion and synchronization. - Implement and launch multiple worker threads based on `num_workers`. - Each worker thread should attempt to access the water source, fill the jug for `fill_time` duration, and then release the water source for the next worker. - Use a `Lock` to control access to the water source, ensuring only one worker can fill their jug at any given time. **Example:** If `simulate_water_filling(3, 2.0)` is called, it should simulate a situation where three worker threads attempt to fill their jugs, each taking 2 seconds to complete, with mutual exclusion enforced on the water source.","solution":"import threading import time def worker(lock, fill_time, worker_id): with lock: print(f\\"Worker {worker_id} is filling their jug.\\") # Simulate the time taken to fill the jug time.sleep(fill_time) print(f\\"Worker {worker_id} has finished filling their jug.\\") def simulate_water_filling(num_workers: int, fill_time: float): lock = threading.Lock() threads = [] for worker_id in range(num_workers): thread = threading.Thread(target=worker, args=(lock, fill_time, worker_id)) threads.append(thread) thread.start() for thread in threads: thread.join()"},{"question":"In this problem, you are tasked with implementing a function that simulates and visualizes the movement of a random walker in a two-dimensional plane. The function will primarily use the `matplotlib.pyplot` library for plotting the path taken by the walker. The random walk involves taking steps in random directions (left, right, up, or down) of equal length. You are given the following contextual information: 1. **Number of Steps**: An integer representing how many steps the walker will take. 2. **Starting Position**: The initial coordinates (x, y) of the walker. 3. **Step Size**: A float representing the length of each step taken by the walker. The function you need to implement is: ```python def plot_random_walk(num_steps, start_x, start_y, step_size): Simulates and plots the path of a random walker on a 2D plane. Parameters: - num_steps (int): The number of steps the walker will take. - start_x (float): The starting x-coordinate of the walker. - start_y (float): The starting y-coordinate of the walker. - step_size (float): The length of each step taken by the walker. ... ``` Here\'s what your function should do: 1. **Initialize the Path**: Start from the given starting position and create lists to store the x and y coordinates of the path. 2. **Generate Random Steps**: - For each step, randomly choose one of the four possible directions: left, right, up, down. - Update the walker\'s position based on the chosen direction and step size. 3. **Store the Walker\'s Path**: Append the new position to the lists of x and y coordinates. 4. **Plot the Path**: - Use `matplotlib.pyplot.plot` to plot the path of the walker. - Use `matplotlib.pyplot.scatter` to mark the starting and ending positions. - Use `matplotlib.pyplot.xlabel`, `matplotlib.pyplot.ylabel`, `matplotlib.pyplot.title`, and `matplotlib.pyplot.legend` to label the axes, add a title, and create a legend.","solution":"import matplotlib.pyplot as plt import random def plot_random_walk(num_steps, start_x, start_y, step_size): Simulates and plots the path of a random walker on a 2D plane. Parameters: - num_steps (int): The number of steps the walker will take. - start_x (float): The starting x-coordinate of the walker. - start_y (float): The starting y-coordinate of the walker. - step_size (float): The length of each step taken by the walker. # Initialize the path x_coords = [start_x] y_coords = [start_y] # Define possible movements directions = [\'left\', \'right\', \'up\', \'down\'] # Generate random steps for _ in range(num_steps): direction = random.choice(directions) if direction == \'left\': start_x -= step_size elif direction == \'right\': start_x += step_size elif direction == \'up\': start_y += step_size elif direction == \'down\': start_y -= step_size x_coords.append(start_x) y_coords.append(start_y) # Plot the path plt.plot(x_coords, y_coords, marker=\'o\') plt.scatter(x_coords[0], y_coords[0], color=\'green\', label=\'Start\') plt.scatter(x_coords[-1], y_coords[-1], color=\'red\', label=\'End\') plt.xlabel(\'X Coordinate\') plt.ylabel(\'Y Coordinate\') plt.title(\'Random Walk Path\') plt.legend() plt.show()"},{"question":"In this problem, you are tasked with implementing a function to simulate a simple stock market trading system. You will create a function that processes a sequence of trading commands and updates the user\'s portfolio accordingly. The function you need to implement is `process_trades(portfolio, trades)`, where `portfolio` is a dictionary representing the stocks held by the user, and `trades` is a list of commands that affect the portfolio. Each trade command is a string formatted as follows: 1. **Buy Command (\\"buy {symbol} {quantity} {price}\\")**: - Adds the specified quantity of the stock at the given price to the portfolio. - If the stock already exists in the portfolio, increase the quantity held and adjust the average price. 2. **Sell Command (\\"sell {symbol} {quantity} {price}\\")**: - Removes the specified quantity of the stock at the given price from the portfolio. - If the stock does not exist or there is not enough quantity to sell, ignore the command. 3. **Query Command (\\"query {symbol}\\")**: - Returns the current quantity and average price of the specified stock in the portfolio. Assume that all input values are valid, but trades may affect stocks that are not initially in the portfolio. The average price should be calculated using the total spent on the stock divided by the total quantity. Here is a sample implementation to get you started: ```python def process_trades(portfolio, trades): for trade in trades: parts = trade.split() command = parts[0] symbol = parts[1] if command == \\"buy\\": quantity = int(parts[2]) price = float(parts[3]) if symbol in portfolio: old_quantity, old_price = portfolio[symbol] new_quantity = old_quantity + quantity new_price = (old_price * old_quantity + price * quantity) / new_quantity portfolio[symbol] = (new_quantity, new_price) else: portfolio[symbol] = (quantity, price) elif command == \\"sell\\": quantity = int(parts[2]) if symbol in portfolio: old_quantity, old_price = portfolio[symbol] if old_quantity >= quantity: new_quantity = old_quantity - quantity if new_quantity == 0: del portfolio[symbol] else: portfolio[symbol] = (new_quantity, old_price) elif command == \\"query\\": if symbol in portfolio: quantity, price = portfolio[symbol] print(f\\"{symbol}: {quantity} shares at an average price of {price:.2f}\\") else: print(f\\"{symbol}: not found in portfolio\\") # Example usage: portfolio = {\'AAPL\': (50, 150.0)} trades = [ \\"buy AAPL 20 160.0\\", \\"buy GOOGL 15 1000.0\\", \\"sell AAPL 10 155.0\\", \\"query AAPL\\", \\"query GOOGL\\", \\"query MSFT\\" ] process_trades(portfolio, trades) ``` **Requirements:** - Ensure the averaged price calculation is correct when buying more shares. - When selling more shares than owned, the command should be ignored. - Output the results of query commands as specified.","solution":"def process_trades(portfolio, trades): results = [] for trade in trades: parts = trade.split() command = parts[0] symbol = parts[1] if command == \\"buy\\": quantity = int(parts[2]) price = float(parts[3]) if symbol in portfolio: old_quantity, old_price = portfolio[symbol] new_quantity = old_quantity + quantity new_price = (old_price * old_quantity + price * quantity) / new_quantity portfolio[symbol] = (new_quantity, new_price) else: portfolio[symbol] = (quantity, price) elif command == \\"sell\\": quantity = int(parts[2]) price = float(parts[3]) if symbol in portfolio: old_quantity, old_price = portfolio[symbol] if old_quantity >= quantity: new_quantity = old_quantity - quantity if new_quantity == 0: del portfolio[symbol] else: portfolio[symbol] = (new_quantity, old_price) elif command == \\"query\\": if symbol in portfolio: quantity, price = portfolio[symbol] results.append(f\\"{symbol}: {quantity} shares at an average price of {price:.2f}\\") else: results.append(f\\"{symbol}: not found in portfolio\\") return results"}]'),F={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(a)||e.solution&&e.solution.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},D={class:"search-container"},R={class:"card-container"},P={key:0,class:"empty-state"},z=["disabled"],N={key:0},Y={key:1};function j(a,e,l,m,r,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",D,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):u("",!0)]),t("div",R,[(n(!0),i(w,null,b(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+d(r.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[r.isLoading?(n(),i("span",Y,"Loading...")):(n(),i("span",N,"See more"))],8,z)):u("",!0)])}const O=c(F,[["render",j],["__scopeId","data-v-9c6d2c21"]]),U=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/29.md","filePath":"chatai/29.md"}'),L={name:"chatai/29.md"},H=Object.assign(L,{setup(a){return(e,l)=>(n(),i("div",null,[x(O)]))}});export{U as __pageData,H as default};
